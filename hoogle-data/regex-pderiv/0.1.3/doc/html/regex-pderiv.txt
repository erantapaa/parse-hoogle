-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Replaces/Enhances Text.Regex. Implementing regular expression matching using Antimirov's partial derivatives.
--   
--   Regex algorithm implementation using partial derivatives. The svn
--   source also shipped with two other referential implementations, e.g.
--   Thomspon NFA and Glushkov NFA. For more detail please check out
--   http:<i></i>code.google.com<i>p</i>xhaskell-library/
@package regex-pderiv
@version 0.1.3


-- | This module defines data types, type classes and instances for NFA
module Text.Regex.PDeriv.Nfa

-- | The type class of Nfa
class Nfa s a | s -> a
pDeriv :: Nfa s a => s -> a -> [s]
sigma :: Nfa s a => s -> [a]
empty :: Nfa s a => s -> Bool

-- | A function that builds an NFA
buildNFA :: (Nfa s a, Eq s, Eq a) => s -> NFA s a

-- | the NFA data type
data NFA s a
NFA :: [s] -> [(s, a, s)] -> [s] -> [s] -> NFA s a
all_states :: NFA s a -> [s]
delta_states :: NFA s a -> [(s, a, s)]
init_states :: NFA s a -> [s]
final_states :: NFA s a -> [s]

-- | the optimized NFA using Int to represent states, IntMap to represent
--   delta
data SNFA s a
SNFA :: (s -> Int) -> [Int] -> [(Int, a, Int)] -> [Int] -> [Int] -> SNFA s a
mapping_states :: SNFA s a -> s -> Int
sall_states :: SNFA s a -> [Int]
sdelta_states :: SNFA s a -> [(Int, a, Int)]
sinit_states :: SNFA s a -> [Int]
sfinal_states :: SNFA s a -> [Int]

-- | The function <a>toSNFA</a> converts from an NFA to an SNFA
toSNFA :: (Eq s, Eq a) => NFA s a -> SNFA s a
nofAllStates :: NFA a t -> Int
nofDelta :: NFA t t1 -> Int
nofInitStates :: NFA a t -> Int
nofFinalStates :: NFA a t -> Int
instance (Show s, Show a) => Show (NFA s a)
instance Show a => Show (SNFA s a)

module Text.Regex.PDeriv.ExtPattern

-- | The external pattern syntax (ERE syntax)
data EPat
EEmpty :: EPat

-- | non marking group (?: re )
EGroupNonMarking :: EPat -> EPat

-- | the group ( re )
EGroup :: EPat -> EPat

-- | the union re|re
EOr :: [EPat] -> EPat

-- | the concantenation rere
EConcat :: [EPat] -> EPat

-- | the option re?, the last boolean flag indicates whether it is greedy
EOpt :: EPat -> Bool -> EPat

-- | the plus re+
EPlus :: EPat -> Bool -> EPat

-- | the star re*
EStar :: EPat -> Bool -> EPat

-- | re{1:10}
EBound :: EPat -> Int -> (Maybe Int) -> Bool -> EPat

-- | the ^ NOTE:shouldn't this must be top level?
ECarat :: EPat

-- | the $
EDollar :: EPat

-- | the any char .
EDot :: EPat

-- | the character class [ a-z ]
EAny :: [Char] -> EPat

-- | the negative character class [^a-z]
ENoneOf :: [Char] -> EPat

-- | backslash char
EEscape :: Char -> EPat

-- | the non-escaped char
EChar :: Char -> EPat

-- | Function <a>hasGroup</a> tests whether an external pattern has ( ... )
--   (i.e. variable patterns in the internal pattern)
hasGroup :: EPat -> Bool
instance Show EPat

module Text.Regex.PDeriv.Word

-- | the Word type class
class Word a
uncons :: Word a => a -> Maybe (Char, a)
take :: Word a => Int -> a -> a
drop :: Word a => Int -> a -> a
empty :: Word a => a
reverse :: Word a => a -> a
append :: Word a => a -> a -> a
length :: Word a => a -> Int


-- | A module that implements a dictionary/hash table
module Text.Regex.PDeriv.Dictionary
class Key a
hash :: Key a => a -> [Int]
newtype Dictionary a
Dictionary :: (Trie a) -> Dictionary a
primeL :: Int
primeR :: Int
empty :: Dictionary a
insert :: Key k => k -> a -> Dictionary a -> Dictionary a
insertNotOverwrite :: Key k => k -> a -> Dictionary a -> Dictionary a
lookup :: Key k => k -> Dictionary a -> Maybe a
lookupAll :: Key k => k -> Dictionary a -> [a]
fromList :: Key k => [(k, a)] -> Dictionary a
fromListNotOverwrite :: Key k => [(k, a)] -> Dictionary a

-- | the dictionary (k,a) version of elem
update :: Key k => k -> a -> Dictionary a -> Dictionary a
isIn :: (Key k, Eq k) => k -> Dictionary (k, a) -> Bool
nub :: (Key k, Eq k) => [k] -> [k]
nubSub :: (Key k, Eq k) => [k] -> Dictionary (k, ()) -> [k]
data Trie a
Trie :: ![a] -> !IntMap (Trie a) -> Trie a
emptyTrie :: Trie a
insertTrie :: Bool -> [Int] -> a -> Trie a -> Trie a
lookupTrie :: [Int] -> Trie a -> Maybe (Trie a)
updateTrie :: [Int] -> a -> Trie a -> Trie a
instance Key a => Key [a]
instance (Key a, Key b, Key c) => Key (a, b, c)
instance (Key a, Key b) => Key (a, b)
instance Key Char
instance Key Int


-- | this module contains the defs of common data types and type classes
module Text.Regex.PDeriv.Common

-- | (sub)words represent by range type Range = (Int,Int)
data Range
Range :: !Int -> !Int -> Range
range :: Int -> Int -> Range
minRange :: (a, b) -> a
maxRange :: (a, b) -> b

-- | a character and its index (position)
type Letter = (Char, Int)

-- | test for 'epsilon in a' epsilon-possession
class PosEpsilon a
posEpsilon :: PosEpsilon a => a -> Bool

-- | test for epsilon == a
class IsEpsilon a
isEpsilon :: IsEpsilon a => a -> Bool

-- | test for phi == a
class IsPhi a
isPhi :: IsPhi a => a -> Bool
class Simplifiable a
simplify :: Simplifiable a => a -> a
my_hash :: Int -> Char -> Int
my_lookup :: Int -> Char -> IntMap [Int] -> [Int]

-- | The greediness flag
data GFlag

-- | greedy
Greedy :: GFlag

-- | not greedy
NotGreedy :: GFlag
class IsGreedy a
isGreedy :: IsGreedy a => a -> Bool

-- | remove duplications in a list of pairs, using the first components as
--   key.
nub2 :: [(Int, a)] -> [(Int, a)]
nub3 :: [(Int, a, Int)] -> [(Int, a, Int)]
preBinder :: Int
preBinder_ :: Int
subBinder :: Int
mainBinder :: Int
instance Show Range
instance Eq GFlag
instance Show GFlag
instance Eq Range

module Text.Regex.PDeriv.Pretty
class Pretty a
pretty :: Pretty a => a -> String

module Text.Regex.PDeriv.RE

-- | data type of the regular expresions
data RE
Phi :: RE

-- | an empty exp
Empty :: RE

-- | a literal / a character
L :: Char -> RE

-- | a choice exp 'r1 + r2'
Choice :: RE -> RE -> GFlag -> RE

-- | a pair exp '(r1,r2)'
Seq :: RE -> RE -> RE

-- | a kleene's star exp 'r*'
Star :: RE -> GFlag -> RE

-- | .
Any :: RE

-- | excluding characters e.g. [^abc]
Not :: [Char] -> RE

-- | function <a>resToRE</a> sums up a list of regular expressions with the
--   choice operation.
resToRE :: [RE] -> RE

-- | function <a>partDeriv</a> implements the partial derivative operations
--   for regular expressions. We don't pay attention to the greediness flag
--   here.
partDeriv :: RE -> Char -> [RE]
partDerivSub :: RE -> Char -> [RE]

-- | function <a>sigmaRE</a> returns all characters appearing in a reg exp.
sigmaRE :: RE -> [Char]
sigmaREsub :: RE -> [Char]
instance Simplifiable RE
instance IsPhi RE
instance IsEpsilon RE
instance PosEpsilon RE
instance Key RE
instance IsGreedy RE
instance Show RE
instance Eq RE


-- | This module defines the data type of internal regular expression
--   pattern, | as well as the partial derivative operations for regular
--   expression patterns.
module Text.Regex.PDeriv.IntPattern

-- | regular expression patterns
data Pat

-- | variable pattern
PVar :: Int -> [Range] -> Pat -> Pat

-- | pattern without binder
PE :: RE -> Pat

-- | pair pattern
PPair :: Pat -> Pat -> Pat

-- | choice pattern
PChoice :: Pat -> Pat -> GFlag -> Pat

-- | star pattern
PStar :: Pat -> GFlag -> Pat

-- | plus pattern, it is used internally to indicate that it is unrolled
--   from a PStar
PPlus :: Pat -> Pat -> Pat

-- | empty pattern, it is used intermally to indicate that mkEmpty function
--   has been applied.
PEmpty :: Pat -> Pat

-- | function <a>strip</a> strips away the bindings from a pattern
strip :: Pat -> RE

-- | function <a>pdPat</a> computes the partial derivatives of a pattern
--   w.r.t. a letter. Integrating non-greedy operator with PStar For p*, we
--   need to unroll it into a special construct say PPlus p' p* where p' in
--   p/l. When we push another label, say l' to PPlus p' p*, and p' is
--   emptiable, naively, we would do [ PPlus p'' p* | p'' &lt;- p' <i> l ]
--   ++ [ PPlus (mkE p') (PPlus p''' p*) | (PPlus p''' p*) &lt;- p*</i>l ]
--   Now the problem here is the shape of the pdpat are infinite, which
--   breaks the requirement of getting a compilation scheme. The fix here
--   is to simplify the second component, by combining the binding, of (mkE
--   p') and p''' since they share the same set of variables. [ PPlus p''
--   p* | p'' &lt;- p' <i> l ] ++ [ PPlus p4 p* | (PPlus p''' p*) &lt;-
--   p*</i>l ] where p4 = combineBinding (mkE p') p''' For pdPat0 approach,
--   we do not need to do this explicitly, we simply drop (mkE p') even in
--   the PPair case. see the definitely of pdPat0 below
pdPat :: Pat -> Letter -> [Pat]

-- | The <a>Binder</a> type denotes a set of (pattern var * range) pairs
--   type Binder = [(Int, [Range])]
type Binder = IntMap [Range]

-- | Function <a>toBinder</a> turns a pattern into a binder
toBinder :: Pat -> Binder
listifyBinder :: Binder -> [(Int, [Range])]

-- | Function <a>pdPat0</a> is the <tt>abstracted</tt> form of the
--   <a>pdPat</a> function It computes a set of pairs. Each pair consists a
--   <tt>shape</tt> of the partial derivative, and an update function which
--   defines the change of the pattern bindings from the <tt>source</tt>
--   pattern to the resulting partial derivative. This is used in the
--   compilation of the regular expression pattern
pdPat0 :: Pat -> Letter -> [(Pat, Int -> Binder -> Binder)]

-- | Function <a>pdPat0Sim</a> applies simplification to the results of
--   <a>pdPat0</a>
pdPat0Sim :: Pat -> Letter -> [(Pat, Int -> Binder -> Binder)]
nub2 :: Eq a => [(a, b)] -> [(a, b)]
instance IsPhi Pat
instance IsEpsilon Pat
instance Simplifiable Pat
instance IsGreedy Pat
instance Key Pat
instance Show Pat
instance Pretty Pat
instance Eq Pat


-- | A translation schema from the external syntax (ERE) to our interal
--   syntax (xhaskell style pattern)
module Text.Regex.PDeriv.Translate

-- | Translating external pattern to internal pattern
translate :: EPat -> Pat

-- | for posix
translatePosix :: EPat -> (Pat, IntMap ())
instance Show TState

module Text.Regex.PDeriv.Parse
parsePat :: String -> Either ParseError Pat
parsePatPosix :: String -> Either ParseError (Pat, IntMap ())

module Text.Regex.PDeriv.ByteString.RightToLeft

-- | The PDeriv backend spepcific <a>Regex</a> type
data Regex

-- | Control whether the pattern is multiline or case-sensitive like
--   Text.Regex and whether to capture the subgroups (1, 2, etc). Controls
--   enabling extra anchor syntax.
data CompOption
CompOption :: Bool -> Bool -> Bool -> Bool -> Bool -> CompOption

-- | True in blankCompOpt and defaultCompOpt
caseSensitive :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt. Compile for
--   newline-sensitive matching. <a>By default, newline is a completely
--   ordinary character with no special meaning in either REs or strings.
--   With this flag, inverted bracket expressions and . never match
--   newline, a ^ anchor matches the null string after any newline in the
--   string in addition to its normal function, and the $ anchor matches
--   the null string before any newline in the string in addition to its
--   normal function.</a>
multiline :: CompOption -> Bool

-- | True (and therefore Right associative) in blankCompOpt and
--   defaultCompOpt
rightAssoc :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt. Add the extended
--   non-POSIX syntax described in <a>Text.Regex.TDFA</a> haddock
--   documentation.
newSyntax :: CompOption -> Bool

-- | False by default. This is POSIX correct but it takes space and is
--   slower. Setting this to true will improve performance, and should be
--   done if you plan to set the captureGroups execoption to False.
lastStarGreedy :: CompOption -> Bool
data ExecOption
ExecOption :: Bool -> ExecOption

-- | True by default. Set to False to improve speed (and space).
captureGroups :: ExecOption -> Bool
defaultCompOpt :: RegexOptions regex compOpt execOpt => compOpt
defaultExecOpt :: RegexOptions regex compOpt execOpt => execOpt
compile :: CompOption -> ExecOption -> ByteString -> Either String Regex
execute :: Regex -> ByteString -> Either String (Maybe Env)
regexec :: Regex -> ByteString -> Either String (Maybe (ByteString, ByteString, ByteString, [ByteString]))
parsePat :: String -> Either ParseError Pat
instance Read CompOption
instance Show CompOption
instance Read ExecOption
instance Show ExecOption
instance RegexOptions Regex CompOption ExecOption

module Text.Regex.PDeriv.ByteString.LeftToRight

-- | The PDeriv backend spepcific <a>Regex</a> type
data Regex

-- | Control whether the pattern is multiline or case-sensitive like
--   Text.Regex and whether to capture the subgroups (1, 2, etc). Controls
--   enabling extra anchor syntax.
data CompOption
CompOption :: Bool -> Bool -> Bool -> Bool -> Bool -> CompOption

-- | True in blankCompOpt and defaultCompOpt
caseSensitive :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt. Compile for
--   newline-sensitive matching. <a>By default, newline is a completely
--   ordinary character with no special meaning in either REs or strings.
--   With this flag, inverted bracket expressions and . never match
--   newline, a ^ anchor matches the null string after any newline in the
--   string in addition to its normal function, and the $ anchor matches
--   the null string before any newline in the string in addition to its
--   normal function.</a>
multiline :: CompOption -> Bool

-- | True (and therefore Right associative) in blankCompOpt and
--   defaultCompOpt
rightAssoc :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt.
newSyntax :: CompOption -> Bool

-- | False by default. This is POSIX correct but it takes space and is
--   slower. Setting this to true will improve performance, and should be
--   done if you plan to set the captureGroups execoption to False.
lastStarGreedy :: CompOption -> Bool
data ExecOption
ExecOption :: Bool -> ExecOption

-- | True by default. Set to False to improve speed (and space).
captureGroups :: ExecOption -> Bool
defaultCompOpt :: RegexOptions regex compOpt execOpt => compOpt
defaultExecOpt :: RegexOptions regex compOpt execOpt => execOpt
compile :: CompOption -> ExecOption -> ByteString -> Either String Regex
execute :: Regex -> ByteString -> Either String (Maybe Env)
regexec :: Regex -> ByteString -> Either String (Maybe (ByteString, ByteString, ByteString, [ByteString]))
instance Read CompOption
instance Show CompOption
instance Read ExecOption
instance Show ExecOption
instance RegexOptions Regex CompOption ExecOption

module Text.Regex.PDeriv.ByteString.Posix

-- | The PDeriv backend spepcific <a>Regex</a> type | the IntMap keeps
--   track of the auxillary binder generated because of posix matching,
--   i.e. all sub expressions need to be tag | the FollowBy keeps track of
--   the order of the pattern binder
type Regex = (PdPat0TableRev, [Int], Binder, FollowBy, IntMap ())

-- | Control whether the pattern is multiline or case-sensitive like
--   Text.Regex and whether to capture the subgroups (1, 2, etc). Controls
--   enabling extra anchor syntax.
data CompOption
CompOption :: Bool -> Bool -> Bool -> Bool -> Bool -> CompOption

-- | True in blankCompOpt and defaultCompOpt
caseSensitive :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt. Compile for
--   newline-sensitive matching. <a>By default, newline is a completely
--   ordinary character with no special meaning in either REs or strings.
--   With this flag, inverted bracket expressions and . never match
--   newline, a ^ anchor matches the null string after any newline in the
--   string in addition to its normal function, and the $ anchor matches
--   the null string before any newline in the string in addition to its
--   normal function.</a>
multiline :: CompOption -> Bool

-- | True (and therefore Right associative) in blankCompOpt and
--   defaultCompOpt
rightAssoc :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt. Add the extended
--   non-POSIX syntax described in <a>Text.Regex.TDFA</a> haddock
--   documentation.
newSyntax :: CompOption -> Bool

-- | False by default. This is POSIX correct but it takes space and is
--   slower. Setting this to true will improve performance, and should be
--   done if you plan to set the captureGroups execoption to False.
lastStarGreedy :: CompOption -> Bool
data ExecOption
ExecOption :: Bool -> ExecOption

-- | True by default. Set to False to improve speed (and space).
captureGroups :: ExecOption -> Bool
defaultCompOpt :: RegexOptions regex compOpt execOpt => compOpt
defaultExecOpt :: RegexOptions regex compOpt execOpt => execOpt
compile :: CompOption -> ExecOption -> ByteString -> Either String Regex
execute :: Regex -> ByteString -> Either String (Maybe Env)
regexec :: Regex -> ByteString -> Either String (Maybe (ByteString, ByteString, ByteString, [ByteString]))
instance Read CompOption
instance Show CompOption
instance Read ExecOption
instance Show ExecOption
instance RegexLike Regex ByteString
instance RegexOptions Regex CompOption ExecOption

module Text.Regex.PDeriv.String.LeftToRightD

-- | The PDeriv backend spepcific <a>Regex</a> type
data Regex

-- | Control whether the pattern is multiline or case-sensitive like
--   Text.Regex and whether to capture the subgroups (1, 2, etc). Controls
--   enabling extra anchor syntax.
data CompOption
CompOption :: Bool -> Bool -> Bool -> Bool -> Bool -> CompOption

-- | True in blankCompOpt and defaultCompOpt
caseSensitive :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt. Compile for
--   newline-sensitive matching. <a>By default, newline is a completely
--   ordinary character with no special meaning in either REs or strings.
--   With this flag, inverted bracket expressions and . never match
--   newline, a ^ anchor matches the null string after any newline in the
--   string in addition to its normal function, and the $ anchor matches
--   the null string before any newline in the string in addition to its
--   normal function.</a>
multiline :: CompOption -> Bool

-- | True (and therefore Right associative) in blankCompOpt and
--   defaultCompOpt
rightAssoc :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt.
newSyntax :: CompOption -> Bool

-- | False by default. This is POSIX correct but it takes space and is
--   slower. Setting this to true will improve performance, and should be
--   done if you plan to set the captureGroups execoption to False.
lastStarGreedy :: CompOption -> Bool
data ExecOption
ExecOption :: Bool -> ExecOption

-- | True by default. Set to False to improve speed (and space).
captureGroups :: ExecOption -> Bool
defaultCompOpt :: RegexOptions regex compOpt execOpt => compOpt
defaultExecOpt :: RegexOptions regex compOpt execOpt => execOpt
compile :: CompOption -> ExecOption -> String -> Either String Regex
execute :: Regex -> String -> Either String (Maybe Env)
regexec :: Regex -> String -> Either String (Maybe (String, String, String, [String]))
instance Read CompOption
instance Show CompOption
instance Read ExecOption
instance Show ExecOption
instance RegexOptions Regex CompOption ExecOption

module Text.Regex.PDeriv.String

-- | The PDeriv backend spepcific <a>Regex</a> type
data Regex

-- | Control whether the pattern is multiline or case-sensitive like
--   Text.Regex and whether to capture the subgroups (1, 2, etc). Controls
--   enabling extra anchor syntax.
data CompOption
CompOption :: Bool -> Bool -> Bool -> Bool -> Bool -> CompOption

-- | True in blankCompOpt and defaultCompOpt
caseSensitive :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt. Compile for
--   newline-sensitive matching. <a>By default, newline is a completely
--   ordinary character with no special meaning in either REs or strings.
--   With this flag, inverted bracket expressions and . never match
--   newline, a ^ anchor matches the null string after any newline in the
--   string in addition to its normal function, and the $ anchor matches
--   the null string before any newline in the string in addition to its
--   normal function.</a>
multiline :: CompOption -> Bool

-- | True (and therefore Right associative) in blankCompOpt and
--   defaultCompOpt
rightAssoc :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt.
newSyntax :: CompOption -> Bool

-- | False by default. This is POSIX correct but it takes space and is
--   slower. Setting this to true will improve performance, and should be
--   done if you plan to set the captureGroups execoption to False.
lastStarGreedy :: CompOption -> Bool
data ExecOption
ExecOption :: Bool -> ExecOption

-- | True by default. Set to False to improve speed (and space).
captureGroups :: ExecOption -> Bool
defaultCompOpt :: RegexOptions regex compOpt execOpt => compOpt
defaultExecOpt :: RegexOptions regex compOpt execOpt => execOpt
compile :: CompOption -> ExecOption -> String -> Either String Regex
execute :: Regex -> String -> Either String (Maybe Env)
regexec :: Regex -> String -> Either String (Maybe (String, String, String, [String]))

module Text.Regex.PDeriv.ByteString.TwoPasses
data Regex

-- | Control whether the pattern is multiline or case-sensitive like
--   Text.Regex and whether to capture the subgroups (1, 2, etc). Controls
--   enabling extra anchor syntax.
data CompOption
CompOption :: Bool -> Bool -> Bool -> Bool -> Bool -> CompOption

-- | True in blankCompOpt and defaultCompOpt
caseSensitive :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt. Compile for
--   newline-sensitive matching. <a>By default, newline is a completely
--   ordinary character with no special meaning in either REs or strings.
--   With this flag, inverted bracket expressions and . never match
--   newline, a ^ anchor matches the null string after any newline in the
--   string in addition to its normal function, and the $ anchor matches
--   the null string before any newline in the string in addition to its
--   normal function.</a>
multiline :: CompOption -> Bool

-- | True (and therefore Right associative) in blankCompOpt and
--   defaultCompOpt
rightAssoc :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt. Add the extended
--   non-POSIX syntax described in <a>Text.Regex.TDFA</a> haddock
--   documentation.
newSyntax :: CompOption -> Bool

-- | False by default. This is POSIX correct but it takes space and is
--   slower. Setting this to true will improve performance, and should be
--   done if you plan to set the captureGroups execoption to False.
lastStarGreedy :: CompOption -> Bool
data ExecOption
ExecOption :: Bool -> ExecOption

-- | True by default. Set to False to improve speed (and space).
captureGroups :: ExecOption -> Bool
defaultCompOpt :: RegexOptions regex compOpt execOpt => compOpt
defaultExecOpt :: RegexOptions regex compOpt execOpt => execOpt
compile :: CompOption -> ExecOption -> ByteString -> Either String Regex
execute :: Regex -> ByteString -> Either String (Maybe Env)
regexec :: Regex -> ByteString -> Either String (Maybe (ByteString, ByteString, ByteString, [ByteString]))
instance Read CompOption
instance Show CompOption
instance Read ExecOption
instance Show ExecOption
instance RegexOptions Regex CompOption ExecOption

module Text.Regex.PDeriv.ByteString.LeftToRightD

-- | The PDeriv backend spepcific <a>Regex</a> type
data Regex

-- | Control whether the pattern is multiline or case-sensitive like
--   Text.Regex and whether to capture the subgroups (1, 2, etc). Controls
--   enabling extra anchor syntax.
data CompOption
CompOption :: Bool -> Bool -> Bool -> Bool -> Bool -> CompOption

-- | True in blankCompOpt and defaultCompOpt
caseSensitive :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt. Compile for
--   newline-sensitive matching. <a>By default, newline is a completely
--   ordinary character with no special meaning in either REs or strings.
--   With this flag, inverted bracket expressions and . never match
--   newline, a ^ anchor matches the null string after any newline in the
--   string in addition to its normal function, and the $ anchor matches
--   the null string before any newline in the string in addition to its
--   normal function.</a>
multiline :: CompOption -> Bool

-- | True (and therefore Right associative) in blankCompOpt and
--   defaultCompOpt
rightAssoc :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt.
newSyntax :: CompOption -> Bool

-- | False by default. This is POSIX correct but it takes space and is
--   slower. Setting this to true will improve performance, and should be
--   done if you plan to set the captureGroups execoption to False.
lastStarGreedy :: CompOption -> Bool
data ExecOption
ExecOption :: Bool -> ExecOption

-- | True by default. Set to False to improve speed (and space).
captureGroups :: ExecOption -> Bool
defaultCompOpt :: RegexOptions regex compOpt execOpt => compOpt
defaultExecOpt :: RegexOptions regex compOpt execOpt => execOpt
compile :: CompOption -> ExecOption -> ByteString -> Either String Regex
execute :: Regex -> ByteString -> Either String (Maybe Env)
regexec :: Regex -> ByteString -> Either String (Maybe (ByteString, ByteString, ByteString, [ByteString]))
instance Read CompOption
instance Show CompOption
instance Read ExecOption
instance Show ExecOption
instance RegexOptions Regex CompOption ExecOption

module Text.Regex.PDeriv.ByteString

-- | The PDeriv backend spepcific <a>Regex</a> type
data Regex

-- | Control whether the pattern is multiline or case-sensitive like
--   Text.Regex and whether to capture the subgroups (1, 2, etc). Controls
--   enabling extra anchor syntax.
data CompOption
CompOption :: Bool -> Bool -> Bool -> Bool -> Bool -> CompOption

-- | True in blankCompOpt and defaultCompOpt
caseSensitive :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt. Compile for
--   newline-sensitive matching. <a>By default, newline is a completely
--   ordinary character with no special meaning in either REs or strings.
--   With this flag, inverted bracket expressions and . never match
--   newline, a ^ anchor matches the null string after any newline in the
--   string in addition to its normal function, and the $ anchor matches
--   the null string before any newline in the string in addition to its
--   normal function.</a>
multiline :: CompOption -> Bool

-- | True (and therefore Right associative) in blankCompOpt and
--   defaultCompOpt
rightAssoc :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt.
newSyntax :: CompOption -> Bool

-- | False by default. This is POSIX correct but it takes space and is
--   slower. Setting this to true will improve performance, and should be
--   done if you plan to set the captureGroups execoption to False.
lastStarGreedy :: CompOption -> Bool
data ExecOption
ExecOption :: Bool -> ExecOption

-- | True by default. Set to False to improve speed (and space).
captureGroups :: ExecOption -> Bool
defaultCompOpt :: RegexOptions regex compOpt execOpt => compOpt
defaultExecOpt :: RegexOptions regex compOpt execOpt => execOpt
compile :: CompOption -> ExecOption -> ByteString -> Either String Regex
execute :: Regex -> ByteString -> Either String (Maybe Env)
regexec :: Regex -> ByteString -> Either String (Maybe (ByteString, ByteString, ByteString, [ByteString]))
