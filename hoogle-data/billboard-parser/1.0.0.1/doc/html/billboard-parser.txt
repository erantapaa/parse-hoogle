-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A parser for the Billboard chord dataset
--   
--   We present a parser for the world famous Billboard dataset containing
--   the chord transcriptions of over 1000 professional chord
--   transcriptions of popular music randomly selected from
--   <i>Billboard</i> magazine's ``Hot 100'' chart between 1958 and 1991,
--   all time-aligned with audio.
--   
--   See: W. Bas de Haas and John Ashley Burgoyne, <i>Parsing the Billboard
--   Chord Transcriptions</i>, Technical Report UU-CS-2012-018, Department
--   of Information and Computing Sciences, Utrecht University, 2012.
--   (<a>http://www.cs.uu.nl/research/techreps/repo/CS-2012/2012-018.pdf</a>)
--   
--   And: John Ashley Burgoyne, Jonathan Wild, Ichiro Fujinaga, <i>An
--   Expert Ground-Truth Set for Audio Chord Recognition and Music
--   Analysis</i>, In: Proceedings of International Conference on Music
--   Information Retrieval, 2011.
--   (<a>http://ismir2011.ismir.net/papers/OS8-1.pdf</a>)
@package billboard-parser
@version 1.0.0.1


-- | Summary: A set Billboard specific file and directory utilities
module Billboard.IOUtils

-- | Applies a function to all files in a directory
bbdir :: (FilePath -> IO a) -> FilePath -> IO [a]

-- | Given the path to the Billboard collection, returns a list with the
--   filepaths and id's of the salami_chords.txt files. (The id is the
--   parent folder name.)
getBBFiles :: FilePath -> IO [(FilePath, Int)]

-- | Given a base directory pointing to the billboard location and a
--   billboard id, this function returns the path to that particular
--   billboard file. If the file does not exist, an error is thrown.
getBBFile :: FilePath -> Int -> IO (FilePath)


-- | Summary: Modelling musical time (in a minimalistic way) with beats,
--   bars and time signatures.
module Billboard.BeatBar

-- | Model a time signature as a fraction
newtype TimeSig
TimeSig :: (Int, Int) -> TimeSig
timeSig :: TimeSig -> (Int, Int)

-- | Barlines can have different weights. Among other applications, this is
--   used in the printing of chord sequences.
data BeatWeight
UnAligned :: BeatWeight
Beat :: BeatWeight
Change :: BeatWeight
Bar :: BeatWeight
Bar4 :: BeatWeight
Bar8 :: BeatWeight
Bar16 :: BeatWeight
LineStart :: BeatWeight

-- | Defines the <a>metrical weight of a bar</a>. A regular beat has
--   strength 0, a bar has strength 1, a bar after 4 bars 2, a bar after 8
--   bars 3, and a bar after 16 bars 4.
beatWeight :: TimeSig -> Int -> BeatWeight

-- | Returns the number of <tt>tatums</tt> in a bar which is different for
--   time signatures. For example:
--   
--   <pre>
--   &gt;&gt;&gt; tatumsPerBar (TimeSig (3 ,4))
--   6
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; tatumsPerBar (TimeSig (6 ,8))
--   6
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; tatumsPerBar (TimeSig (12,8))
--   12
--   </pre>
--   
--   N.B. This function is not strictly correct music-theoretically, but it
--   reflects how Billboard annotators used time signatures.
tatumsPerBar :: TimeSig -> Int

-- | Returns the number of <tt>BBChord</tt> that are inserted for one
--   <a>.</a>, based on a <a>TimeSig</a>nature.
chordsPerDot :: TimeSig -> Int
instance Eq BeatWeight
instance Ord BeatWeight
instance Enum BeatWeight
instance Eq TimeSig
instance Show TimeSig
instance Show BeatWeight


-- | Summary: Billboard files can contain a variety of annoatations. This
--   module aims at representing these as Haskell types
module Billboard.Annotation

-- | an <a>Annotation</a> occurs either at the start or at the end of a
--   chord sequence line.
data Annotation
Start :: Label -> Annotation
End :: Label -> Annotation

-- | All annotations contain information we term <a>Label</a>
data Label

-- | denoting A .. Z and the nr of primes (')
Struct :: Char -> Int -> Label
Instr :: Instrument -> Label
Anno :: Description -> Label
Modulation :: Root -> Label

-- | Representing musical instruments
data Instrument
Guitar :: Instrument
Voice :: Instrument
Violin :: Instrument
Banjo :: Instrument
Synthesizer :: Instrument
Saxophone :: Instrument
Flute :: Instrument
Drums :: Instrument
Trumpet :: Instrument
Piano :: Instrument
Harmonica :: Instrument
Organ :: Instrument
Keyboard :: Instrument
Trombone :: Instrument
Electricsitar :: Instrument
Pennywhistle :: Instrument
Tenorsaxophone :: Instrument
Whistle :: Instrument
Oboe :: Instrument
Tambura :: Instrument
Horns :: Instrument
Clarinet :: Instrument
Electricguitar :: Instrument
Tenorhorn :: Instrument
Percussion :: Instrument
Rhythmguitar :: Instrument
Hammondorgan :: Instrument
Harpsichord :: Instrument
Cello :: Instrument
Acousticguitar :: Instrument
Bassguitar :: Instrument
Strings :: Instrument
SteelDrum :: Instrument
Vibraphone :: Instrument
Bongos :: Instrument
Steelguitar :: Instrument
Horn :: Instrument
Sitar :: Instrument
Barisaxophone :: Instrument
Accordion :: Instrument
Tambourine :: Instrument
Kazoo :: Instrument

-- | a catch all description for unrecognised instruments
UnknownInstr :: String -> Instrument

-- | Representing typical structural segementation labels
data Description
Chorus :: Description
Intro :: Description
Outro :: Description
Bridge :: Description
Interlude :: Description
Solo :: Description
Fadeout :: Description
Fadein :: Description
Prechorus :: Description
Maintheme :: Description
Keychange :: Description
Secondarytheme :: Description
Ending :: Description
PhraseTrans :: Description
Instrumental :: Description
Coda :: Description
Transition :: Description
PreVerse :: Description
Vocal :: Description
Talking :: Description
TalkingEnd :: Description
Silence :: Description
Applause :: Description
Noise :: Description
SongEnd :: Description
ModulationSeg :: Description
PreIntro :: Description
Chords :: Description
Repeat :: Int -> Description
Verse :: (Maybe Int) -> Description

-- | a chord inserted by the posprocessing interpolation
InterpolationInsert :: Description

-- | a catch all description for unrecognised descriptions
UnknownAnno :: String -> Description

-- | Returns True if the <a>Annotation</a> annotates a structural
--   segmentation label
isStruct :: Label -> Bool

-- | Returns True if the <a>Annotation</a> occurs at the start of a line
isStart :: Annotation -> Bool

-- | Returns True if the <a>Annotation</a>
isUnknown :: Annotation -> Bool

-- | Returns True if the <a>Annotation</a> represents a repeat.
isRepeat :: Annotation -> Bool

-- | Returns True if the <a>Annotation</a> represents the end of a piece.
isEndAnno :: Annotation -> Bool

-- | Returns True if the <a>Annotation</a> marks the start of a chord
--   sequence
isFirstChord :: Annotation -> Bool

-- | Returns True if the <a>Annotation</a> marks the end of a chord
--   sequence
isLastChord :: Annotation -> Bool

-- | Returns the number of repeats represented by this <a>Annotation</a>.
--   If the <a>Annotation</a> describes something completely different (say
--   <a>Electricsitar</a>) it will return 1.
getRepeats :: Annotation -> Int

-- | Returns the <a>Label</a> of an <a>Annotation</a>
getLabel :: Annotation -> Label
instance Show Instrument
instance Eq Instrument
instance Show Description
instance Eq Description
instance Eq Label
instance Eq Annotation
instance Show Label
instance Show Annotation


-- | Summary: A set of datatypes for representing Billboard chord sequence
--   data See: John Ashley Burgoyne, Jonathan Wild, Ichiro Fujinaga, <i>An
--   Expert Ground-Truth Set for Audio Chord Recognition and Music
--   Analysis</i>, In: Proceedings of International Conference on Music
--   Information Retrieval, 2011.
--   (<a>http://ismir2011.ismir.net/papers/OS8-1.pdf</a>)
module Billboard.BillboardData

-- | The <a>BillboardData</a> datatype stores all information that has been
--   extracted from a Billboard chord annotation
data BillboardData
BillboardData :: Title -> Artist -> TimeSig -> Root -> [TimedData BBChord] -> BillboardData
getTitle :: BillboardData -> Title
getArtist :: BillboardData -> Artist
getTimeSig :: BillboardData -> TimeSig
getKeyRoot :: BillboardData -> Root
getSong :: BillboardData -> [TimedData BBChord]

-- | Represents other metadata of the piece, i.e. the time signature and
--   key root
data Meta
Metre :: TimeSig -> Meta
KeyRoot :: Root -> Meta

-- | We wrap the <a>Chord</a> datatype into a <a>BBChord</a> type, so that
--   we can augment it with <a>Annotation</a>s and <a>BeatWeight</a>s.
data BBChord
BBChord :: [Annotation] -> BeatWeight -> Chord Root -> BBChord
annotations :: BBChord -> [Annotation]
weight :: BBChord -> BeatWeight
chord :: BBChord -> Chord Root

-- | Represents the artists of the piece
type Artist = String

-- | Represents the title of the piece
type Title = String

-- | A chord label with no root, shorthand or other information to
--   represent a none harmonic sections
noneBBChord :: BBChord

-- | Strips the time stamps from BillBoardData and concatenates all
--   <tt>BBChords</tt>
getBBChords :: BillboardData -> [BBChord]

-- | Strips the time stamps from BillBoardData and concatenates all
--   <tt>BBChords</tt> and removes the silence at the beginning and end of
--   the song.
getBBChordsNoSilence :: BillboardData -> [BBChord]

-- | Adds a starting point of an <a>Annotation</a> <a>Label</a> to a
--   <a>BBChord</a>
addStart :: Label -> BBChord -> BBChord

-- | Adds an end point of an <a>Annotation</a> <a>Label</a> to a
--   <a>BBChord</a>
addEnd :: Label -> BBChord -> BBChord

-- | Annotates a sequence of <a>BBChord</a>s by adding a Start <a>Label</a>
--   <a>Annotation</a> at the first chord and an End <a>Label</a>
--   <a>Annotation</a> at the last chord. The remainder of the list remains
--   untouched
addLabel :: Label -> [BBChord] -> [BBChord]

-- | Adds both a start and an end <a>Annotation</a> <a>Label</a> to a
--   <a>BBChord</a>
addStartEnd :: Label -> BBChord -> BBChord

-- | Returns the duration of the chord (the unit of the duration can be
--   application dependent, but will generally be measured in eighth notes)
--   If the data comes directly from the parser the duration will be 1 for
--   all <a>BBChord</a>s. However, if it has been reduced with
--   <a>reduceBBChords</a> the duration will be the number of consecutive
--   tatum units.
getDuration :: BBChord -> Int

-- | Returns the structural segmentation <a>Annotation</a>s, given a
--   <a>BBChord</a>
getStructAnn :: BBChord -> [Annotation]

-- | Sets the indexes of a list of <a>TimedData</a> <a>BBChord</a>s
--   (starting at 0)
setChordIxsT :: [TimedData BBChord] -> [TimedData BBChord]

-- | Returns True if the <a>BBChord</a> represents a starting point of a
--   structural segment
isStructSegStart :: BBChord -> Bool

-- | Returns True if the <a>BBChord</a> is a <a>noneBBChord</a>, i.e. has
--   not root note and no shorthand
isNoneBBChord :: BBChord -> Bool

-- | Returns True if the <a>BBChord</a> represents a chord Change (must be
--   set beforehand, only the <a>BeatWeight</a> stored in the
--   <a>BBChord</a> is examined)
isChange :: BBChord -> Bool

-- | Returns True if the <a>BBChord</a> has any <tt>Annotations</tt>s and
--   False otherwise
hasAnnotations :: BBChord -> Bool

-- | Returns True if this <a>BBChord</a> is the last (N) chord of the song
isEnd :: BBChord -> Bool

-- | The inverse function of <tt>expandChordDur</tt>: given a list of
--   <tt>BBChords</tt> that all have a duration of 1 beat, all subsequent
--   <i>x</i> <tt>BBChords</tt> with the same label are grouped into one
--   <a>BBChord</a> with durations <i>x</i>. N.B.
--   
--   <pre>
--   &gt;&gt;&gt; expandBBChords (reduceBBChords cs) = cs
--   </pre>
--   
--   also,
--   
--   <pre>
--   &gt;&gt;&gt; (expandBBChords cs) = cs
--   </pre>
--   
--   and,
--   
--   <pre>
--   &gt;&gt;&gt; reduceBBChords (reduceBBChords cs) = (reduceBBChords cs)
--   </pre>
--   
--   hold. This has been tested on the first tranch of 649 Billboard songs
reduceBBChords :: [BBChord] -> [BBChord]

-- | Given a list of <a>BBChord</a>s that have a certain duration (i.e. the
--   number of beats that the chord should sound), every <a>BBChord</a> is
--   replaced by <i>x</i> <a>BBChord</a>s with the same properties, but
--   whit a duration of 1 beat, where <i>x</i> is the duration of the
--   original <a>BBChord</a>
expandBBChords :: [BBChord] -> [BBChord]

-- | Returns the reduced chord sequences, where repeated chords are merged
--   into one <a>BBChord</a>, similar to <a>reduceBBChords</a>, but then
--   wrapped in a <a>TimedData</a> type.
reduceTimedBBChords :: [TimedData BBChord] -> [TimedData BBChord]

-- | Similar to <a>expandBBChords</a> the inverse of
--   <a>reduceTimedBBChords</a>
expandTimedBBChords :: [TimedData BBChord] -> [TimedData BBChord]

-- | Shows the <a>BillboardData</a> in MIREX format, using only :maj, :min,
--   :aug, :dim, sus2, sus4, and ignoring all chord additions
showInMIREXFormat :: ([TimedData BBChord] -> [TimedData BBChord]) -> BillboardData -> String

-- | Shows the chord sequence in the <a>BillboardData</a>
showFullChord :: ([TimedData BBChord] -> [TimedData BBChord]) -> BillboardData -> String
instance Show Meta
instance Show BillboardData
instance Eq BBChord
instance Ord BBChord
instance Show BBChord


-- | Summary: A set of combinator parsers that parse Billboard data. See:
--   John Ashley Burgoyne, Jonathan Wild, Ichiro Fujinaga, <i>An Expert
--   Ground-Truth Set for Audio Chord Recognition and Music Analysis</i>,
--   In: Proceedings of International Conference on Music Information
--   Retrieval, 2011. (<a>http://ismir2011.ismir.net/papers/OS8-1.pdf</a>)
module Billboard.BillboardParser

-- | The top-level parser for parsing the billboard data (see
--   <a>parseBillboard</a>).
pBillboard :: Parser BillboardData

-- | Toplevel function for parsing Billboard data files. The function
--   returns a tuple containing the result of the parsing in a
--   <a>BillboardData</a> type and a (possibly empty) list of parsing
--   errors.
parseBillboard :: String -> (BillboardData, [Error LineColPos])

-- | A parameter that sets the acceptable beat deviation multiplier, which
--   controls when exceptionally long beat lengths will be interpolated.
acceptableBeatDeviationMultiplier :: Double
