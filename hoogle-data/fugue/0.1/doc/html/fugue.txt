-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A recapitulated prelude with minimal dependencies
and profligate exports.
--   
--   Fugue intends to scratch that itchy feeling you get when you realize
--   you need to import <a>Data.Foldable</a>, then hide <a>foldr</a> from
--   the prelude; when you can't decide whether to go all the way to the
--   top of your buffer to import <a>Control.Monad</a> to get <a>forM</a>
--   or just use (<a>flip</a> <a>mapM</a>) instead. Importing
--   <a>Control.Applicative</a> just for (&lt;$&gt;) is annoying, but so is
--   writing `<a>fmap</a>` everywhere. Fugue exports a bunch of useful
--   stuff so you don't have to, tending to prefer more general functions
--   from various and sundry corners of the base libraries to those in
--   <a>Prelude</a>.
@package fugue
@version 0.1

module Fugue

-- | Class for string-like datastructures; used by the overloaded string
--   extension (-foverloaded-strings in GHC).
class IsString a
fromString :: IsString a => String -> a

-- | <tt>(*) `on` f = \x y -&gt; f x * f y</tt>.
--   
--   Typical usage: <tt><a>sortBy</a> (<a>compare</a> `on`
--   <a>fst</a>)</tt>.
--   
--   Algebraic properties:
--   
--   <ul>
--   <li><tt>(*) `on` <a>id</a> = (*)</tt> (if <tt>(*) ∉ {⊥, <a>const</a>
--   ⊥}</tt>)</li>
--   <li><pre>((*) `on` f) `on` g = (*) `on` (f . g)</pre></li>
--   <li><pre><a>flip</a> on f . <a>flip</a> on g = <a>flip</a> on (g .
--   f)</pre></li>
--   </ul>
on :: (b -> b -> c) -> (a -> b) -> a -> a -> c
