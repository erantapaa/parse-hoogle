-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Wrap functions such as catch around different monads
--   
--   This package allows you to invoke a function on one monadic type
--   passing it an argument of a different monadic type. The canonical
--   example is using a function such as <tt><a>finally</a></tt> or
--   <tt><a>bracket</a></tt> to ensure cleanup is run regardless of any
--   exceptions thrown by a computation such as <tt>x :: <a>ReaderT</a>
--   MyConfig <a>IO</a> b</tt>. If <tt>x</tt> uses the <a>ReaderT</a>
--   function <a>ask</a>, it cannot be re-written to run in the <a>IO</a>
--   monad, and hence cannot be executed with a construction like
--   <tt><a>lift</a> (x `<a>finally</a>` cleanup)</tt>. Instead, you must
--   use the <a>wrap</a> method, provided by module
--   <a>Control.Monad.Wrap</a> in this package.
--   
--   This package contains several other modules:
--   <a>Control.Monad.WrapIO</a> wraps an IO action through multiple monad
--   transformers. <a>Control.Monad.WrapBase</a> generalizes the concept to
--   other base monads besides IO. <a>Control.Monad.MultiWrap</a>
--   implements <a>mwrap</a>, a method that behaves like <a>wrap</a> but
--   allows wrapping through multiple nested layers of monad transformer.
--   The module <a>Control.Monad.MultiLift</a> provides <a>mlift</a>, a
--   version of <a>lift</a> that similarly lifts through multiple nested
--   monad transformers.
--   
--   Since this library was first released, an alternate approach was
--   introduced by the <tt>monad-control</tt> package.
--   <tt>monad-control</tt> is now the standard. However, this package,
--   <tt>monad-wrap</tt>, stands as an example of accomplishing similar
--   goals with fewer language extensions and less complexity. In
--   particular, <tt>monad-wrap</tt> does not use <tt>RankNTypes</tt> or
--   <tt>TypeFamilies</tt>, both required by <tt>monad-control</tt>.
--   Moreover, <tt>monad-wrap</tt> is much smaller--no <a>MonadWrap</a>
--   method requires more than one line of code. Both <tt>monad-wrap</tt>
--   and <tt>monad-control</tt> require <tt>UndecidableInstances</tt>, but
--   <a>Control.Monad.Wrap</a> itself does not require that extension, only
--   the other modules.
@package monad-wrap
@version 0.1

module Control.Monad.MultiLift

-- | <a>MultiLift</a> provides an <a>mlift</a> method that invokes the
--   <a>lift</a> method of <a>MonadTrans</a> multiple times, based on the
--   requested argument and result type. You will usually have to specify
--   the type of the argument explicitly.
--   
--   Note that <a>mlift</a> only works with up to 9 levels of nested monad
--   transformer.
class MultiLift mIn mOut
mlift :: MultiLift mIn mOut => mIn a -> mOut a
instance (MonadTrans t9, Monad (t9 (t8 (t7 (t6 (t5 (t4 (t3 (t2 (t1 m))))))))), MonadTrans t8, Monad (t8 (t7 (t6 (t5 (t4 (t3 (t2 (t1 m)))))))), MonadTrans t7, Monad (t7 (t6 (t5 (t4 (t3 (t2 (t1 m))))))), MonadTrans t6, Monad (t6 (t5 (t4 (t3 (t2 (t1 m)))))), MonadTrans t5, Monad (t5 (t4 (t3 (t2 (t1 m))))), MonadTrans t4, Monad (t4 (t3 (t2 (t1 m)))), MonadTrans t3, Monad (t3 (t2 (t1 m))), MonadTrans t2, Monad (t2 (t1 m)), MonadTrans t1, Monad (t1 m), Monad m) => MultiLift m (t9 (t8 (t7 (t6 (t5 (t4 (t3 (t2 (t1 m)))))))))
instance (MonadTrans t8, Monad (t8 (t7 (t6 (t5 (t4 (t3 (t2 (t1 m)))))))), MonadTrans t7, Monad (t7 (t6 (t5 (t4 (t3 (t2 (t1 m))))))), MonadTrans t6, Monad (t6 (t5 (t4 (t3 (t2 (t1 m)))))), MonadTrans t5, Monad (t5 (t4 (t3 (t2 (t1 m))))), MonadTrans t4, Monad (t4 (t3 (t2 (t1 m)))), MonadTrans t3, Monad (t3 (t2 (t1 m))), MonadTrans t2, Monad (t2 (t1 m)), MonadTrans t1, Monad (t1 m), Monad m) => MultiLift m (t8 (t7 (t6 (t5 (t4 (t3 (t2 (t1 m))))))))
instance (MonadTrans t7, Monad (t7 (t6 (t5 (t4 (t3 (t2 (t1 m))))))), MonadTrans t6, Monad (t6 (t5 (t4 (t3 (t2 (t1 m)))))), MonadTrans t5, Monad (t5 (t4 (t3 (t2 (t1 m))))), MonadTrans t4, Monad (t4 (t3 (t2 (t1 m)))), MonadTrans t3, Monad (t3 (t2 (t1 m))), MonadTrans t2, Monad (t2 (t1 m)), MonadTrans t1, Monad (t1 m), Monad m) => MultiLift m (t7 (t6 (t5 (t4 (t3 (t2 (t1 m)))))))
instance (MonadTrans t6, Monad (t6 (t5 (t4 (t3 (t2 (t1 m)))))), MonadTrans t5, Monad (t5 (t4 (t3 (t2 (t1 m))))), MonadTrans t4, Monad (t4 (t3 (t2 (t1 m)))), MonadTrans t3, Monad (t3 (t2 (t1 m))), MonadTrans t2, Monad (t2 (t1 m)), MonadTrans t1, Monad (t1 m), Monad m) => MultiLift m (t6 (t5 (t4 (t3 (t2 (t1 m))))))
instance (MonadTrans t5, Monad (t5 (t4 (t3 (t2 (t1 m))))), MonadTrans t4, Monad (t4 (t3 (t2 (t1 m)))), MonadTrans t3, Monad (t3 (t2 (t1 m))), MonadTrans t2, Monad (t2 (t1 m)), MonadTrans t1, Monad (t1 m), Monad m) => MultiLift m (t5 (t4 (t3 (t2 (t1 m)))))
instance (MonadTrans t4, Monad (t4 (t3 (t2 (t1 m)))), MonadTrans t3, Monad (t3 (t2 (t1 m))), MonadTrans t2, Monad (t2 (t1 m)), MonadTrans t1, Monad (t1 m), Monad m) => MultiLift m (t4 (t3 (t2 (t1 m))))
instance (MonadTrans t3, Monad (t3 (t2 (t1 m))), MonadTrans t2, Monad (t2 (t1 m)), MonadTrans t1, Monad (t1 m), Monad m) => MultiLift m (t3 (t2 (t1 m)))
instance (MonadTrans t2, Monad (t2 (t1 m)), MonadTrans t1, Monad (t1 m), Monad m) => MultiLift m (t2 (t1 m))
instance (MonadTrans t1, Monad (t1 m), Monad m) => MultiLift m (t1 m)
instance MultiLift m m


-- | Class of monad transformers whose computations can be wrapped by
--   functions such as <tt>catch</tt> and <tt>finally</tt> that operate on
--   inner monadic types. This works for all standard monad transformers
--   except for <tt>ContT</tt>.
--   
--   The main method in this module is <a>wrap</a>, which wraps a function
--   on one monad around a transformed version of that monad. This is
--   useful in many situations, but it is important to keep in mind that
--   this will affect the semantics of the monad. For example, if you wrap
--   <tt>forkIO</tt> around a <tt><a>StateT</a> X <a>IO</a></tt> monad, it
--   will fork the state of the monad into two independently updated copies
--   of the state, one for each thread. Similarly, if you wrap
--   <tt>catch</tt> around a <tt><a>WriterT</a> X <a>IO</a></tt> monad, you
--   can catch an exception and return a value, but the writer state will
--   be re-wound to the point at which you computed the result value (using
--   <a>result</a> or <a>resultF</a>).
module Control.Monad.Wrap
class MonadWrap t a r | t a -> r where result a = resultF >>= return . ($ a)
wrap :: (MonadWrap t a r, Monad m) => (m r -> m r) -> t m a -> t m a
result :: (MonadWrap t a r, Monad m, Monad (t m)) => a -> t m r
resultF :: (MonadWrap t a r, Monad m) => t m (a -> r)
instance Monoid w => MonadWrap (WriterT w) a (a, w)
instance Monoid w => MonadWrap (WriterT w) a (a, w)
instance MonadWrap (StateT s) a (a, s)
instance MonadWrap (StateT s) a (a, s)
instance MonadWrap (ReaderT r) a a
instance Monoid w => MonadWrap (RWST r w s) a (a, s, w)
instance Monoid w => MonadWrap (RWST r w s) a (a, s, w)
instance MonadWrap MaybeT a (Maybe a)
instance MonadWrap ListT a [a]
instance MonadWrap IdentityT a a
instance Error e => MonadWrap (ErrorT e) a (Either e a)

module Control.Monad.WrapIO

-- | MonadWrapIO is analogous to <a>MonadWrap</a>, but where the wrapping
--   function is always of type <tt><a>IO</a> r -&gt; <a>IO</a> r</tt>. The
--   point of <tt>MonadWrapIO</tt> is to go through as many nested monad
--   transformers as necessary to reach the <a>IO</a> monad, so you don't
--   have to keep track of where you are in terms of monad nesting depth.
class Monad m => MonadWrapIO m a r | m a -> r where resultIO a = resultFIO >>= return . ($ a)
wrapIO :: MonadWrapIO m a r => (IO r -> IO r) -> m a -> m a
resultFIO :: MonadWrapIO m a r => m (a -> r)
resultIO :: MonadWrapIO m a r => a -> m r
instance (Monad m, MonadTrans t, Monad (t m), MonadWrapIO m ar r, MonadWrap t a ar) => MonadWrapIO (t m) a r
instance MonadWrapIO IO a a


-- | <a>MonadWrapBase</a> is a generalized version of <tt>MonadWrapIO</tt>
--   to work around transformed versions of other base monads.
module Control.Monad.WrapBase
class Monad m => MonadWrapBase m b a r | m -> b, m b a -> r where wrapBase = ($) resultBase a = resultFBase >>= return . ($ a) resultFBase = return id
wrapBase :: MonadWrapBase m b a r => (b r -> b r) -> m a -> m a
resultBase :: MonadWrapBase m b a r => a -> m r
resultFBase :: MonadWrapBase m b a r => m (a -> r)
instance MonadWrapBase (ST s) (ST s) a a
instance MonadWrapBase (ST s) (ST s) a a
instance MonadWrapBase (Either e) (Either e) a a
instance MonadWrapBase ((->) r) ((->) r) a a
instance MonadWrapBase Identity Identity a a
instance MonadWrapBase Maybe Maybe a a
instance MonadWrapBase STM STM a a
instance MonadWrapBase IO IO a a
instance MonadWrapBase [] [] a a
instance (Monad m, MonadTrans t, Monad (t m), MonadWrapBase m b ar r, MonadWrap t a ar) => MonadWrapBase (t m) b a r

module Control.Monad.MultiWrap

-- | <a>MultiWrap</a> is like <tt>MonadWrapIO</tt>, but for monads created
--   by <a>MonadTrans</a> transformers. This is useful, if, for example,
--   you implement your own monad, <tt>ReaderTLike</tt>, that is like a
--   <tt>ReaderT</tt> except that you don't want to make it a member of the
--   <tt>MonadReader</tt> class because you are already using
--   <tt>MonadReader</tt> for some different state (or because you are
--   implementing a library and the user of the library should be free to
--   use <tt>ReaderT</tt>).
--   
--   As long as <tt>ReaderTLike</tt> is a member of the <a>MonadTrans</a>
--   class and assuming you have a <tt>localLike</tt> function equivalent
--   to <tt>local</tt>, you should be able to run things like:
--   
--   <pre>
--   mwrap (localLike modifyConfig :: ReaderTLike IO a -&gt; ReaderTLike IO a)
--         someComputation
--   </pre>
--   
--   You will generally have to specify the type of the wrap function or
--   computation explicitly, but as long as you specify the type,
--   <a>mwrap</a> saves you from keeping track of how many nested levels of
--   transformer you have and from having to invoke <a>wrap</a> repeatedly.
--   
--   Note one difference from <a>MonadWrap</a> and <tt>MonadWrapIO</tt> is
--   that <a>mresult</a> and <a>mresultF</a> require an extra argument so
--   as to specify the inner monad in which you want to supply the result.
--   (E.g., in the case of using <tt>catch</tt> to produce a different
--   return value in case of exceptions, the inner monad would be
--   <a>IO</a>, and the extra argument might be supplied as <tt>(undefined
--   :: <a>IO</a> Type)</tt>.
--   
--   Note that <a>MultiWrap</a> only works for up to 9 levels of nested
--   monad transformer.
class Monad mOut => MultiWrap mIn mOut a r | mIn mOut a -> r where mresult b a = mresultF b >>= return . ($ a)
mwrap :: MultiWrap mIn mOut a r => (mIn r -> mIn r) -> mOut a -> mOut a
mresultF :: MultiWrap mIn mOut a r => mIn b -> mOut (a -> r)
mresult :: MultiWrap mIn mOut a r => mIn b -> a -> mOut r
instance (MonadTrans t9, Monad (t9 (t8 (t7 (t6 (t5 (t4 (t3 (t2 (t1 m))))))))), MonadWrap t9 a9 a8, MonadTrans t8, Monad (t8 (t7 (t6 (t5 (t4 (t3 (t2 (t1 m)))))))), MonadWrap t8 a8 a7, MonadTrans t7, Monad (t7 (t6 (t5 (t4 (t3 (t2 (t1 m))))))), MonadWrap t7 a7 a6, MonadTrans t6, Monad (t6 (t5 (t4 (t3 (t2 (t1 m)))))), MonadWrap t6 a6 a5, MonadTrans t5, Monad (t5 (t4 (t3 (t2 (t1 m))))), MonadWrap t5 a5 a4, MonadTrans t4, Monad (t4 (t3 (t2 (t1 m)))), MonadWrap t4 a4 a3, MonadTrans t3, Monad (t3 (t2 (t1 m))), MonadWrap t3 a3 a2, MonadTrans t2, Monad (t2 (t1 m)), MonadWrap t2 a2 a1, MonadTrans t1, Monad (t1 m), MonadWrap t1 a1 a0, Monad m) => MultiWrap m (t9 (t8 (t7 (t6 (t5 (t4 (t3 (t2 (t1 m))))))))) a9 a0
instance (MonadTrans t8, Monad (t8 (t7 (t6 (t5 (t4 (t3 (t2 (t1 m)))))))), MonadWrap t8 a8 a7, MonadTrans t7, Monad (t7 (t6 (t5 (t4 (t3 (t2 (t1 m))))))), MonadWrap t7 a7 a6, MonadTrans t6, Monad (t6 (t5 (t4 (t3 (t2 (t1 m)))))), MonadWrap t6 a6 a5, MonadTrans t5, Monad (t5 (t4 (t3 (t2 (t1 m))))), MonadWrap t5 a5 a4, MonadTrans t4, Monad (t4 (t3 (t2 (t1 m)))), MonadWrap t4 a4 a3, MonadTrans t3, Monad (t3 (t2 (t1 m))), MonadWrap t3 a3 a2, MonadTrans t2, Monad (t2 (t1 m)), MonadWrap t2 a2 a1, MonadTrans t1, Monad (t1 m), MonadWrap t1 a1 a0, Monad m) => MultiWrap m (t8 (t7 (t6 (t5 (t4 (t3 (t2 (t1 m)))))))) a8 a0
instance (MonadTrans t7, Monad (t7 (t6 (t5 (t4 (t3 (t2 (t1 m))))))), MonadWrap t7 a7 a6, MonadTrans t6, Monad (t6 (t5 (t4 (t3 (t2 (t1 m)))))), MonadWrap t6 a6 a5, MonadTrans t5, Monad (t5 (t4 (t3 (t2 (t1 m))))), MonadWrap t5 a5 a4, MonadTrans t4, Monad (t4 (t3 (t2 (t1 m)))), MonadWrap t4 a4 a3, MonadTrans t3, Monad (t3 (t2 (t1 m))), MonadWrap t3 a3 a2, MonadTrans t2, Monad (t2 (t1 m)), MonadWrap t2 a2 a1, MonadTrans t1, Monad (t1 m), MonadWrap t1 a1 a0, Monad m) => MultiWrap m (t7 (t6 (t5 (t4 (t3 (t2 (t1 m))))))) a7 a0
instance (MonadTrans t6, Monad (t6 (t5 (t4 (t3 (t2 (t1 m)))))), MonadWrap t6 a6 a5, MonadTrans t5, Monad (t5 (t4 (t3 (t2 (t1 m))))), MonadWrap t5 a5 a4, MonadTrans t4, Monad (t4 (t3 (t2 (t1 m)))), MonadWrap t4 a4 a3, MonadTrans t3, Monad (t3 (t2 (t1 m))), MonadWrap t3 a3 a2, MonadTrans t2, Monad (t2 (t1 m)), MonadWrap t2 a2 a1, MonadTrans t1, Monad (t1 m), MonadWrap t1 a1 a0, Monad m) => MultiWrap m (t6 (t5 (t4 (t3 (t2 (t1 m)))))) a6 a0
instance (MonadTrans t5, Monad (t5 (t4 (t3 (t2 (t1 m))))), MonadWrap t5 a5 a4, MonadTrans t4, Monad (t4 (t3 (t2 (t1 m)))), MonadWrap t4 a4 a3, MonadTrans t3, Monad (t3 (t2 (t1 m))), MonadWrap t3 a3 a2, MonadTrans t2, Monad (t2 (t1 m)), MonadWrap t2 a2 a1, MonadTrans t1, Monad (t1 m), MonadWrap t1 a1 a0, Monad m) => MultiWrap m (t5 (t4 (t3 (t2 (t1 m))))) a5 a0
instance (MonadTrans t4, Monad (t4 (t3 (t2 (t1 m)))), MonadWrap t4 a4 a3, MonadTrans t3, Monad (t3 (t2 (t1 m))), MonadWrap t3 a3 a2, MonadTrans t2, Monad (t2 (t1 m)), MonadWrap t2 a2 a1, MonadTrans t1, Monad (t1 m), MonadWrap t1 a1 a0, Monad m) => MultiWrap m (t4 (t3 (t2 (t1 m)))) a4 a0
instance (MonadTrans t3, Monad (t3 (t2 (t1 m))), MonadWrap t3 a3 a2, MonadTrans t2, Monad (t2 (t1 m)), MonadWrap t2 a2 a1, MonadTrans t1, Monad (t1 m), MonadWrap t1 a1 a0, Monad m) => MultiWrap m (t3 (t2 (t1 m))) a3 a0
instance (MonadTrans t2, Monad (t2 (t1 m)), MonadWrap t2 a2 a1, MonadTrans t1, Monad (t1 m), MonadWrap t1 a1 a0, Monad m) => MultiWrap m (t2 (t1 m)) a2 a0
instance (MonadTrans t1, Monad (t1 m), MonadWrap t1 a1 a0, Monad m) => MultiWrap m (t1 m) a1 a0
instance Monad m => MultiWrap m m a a
