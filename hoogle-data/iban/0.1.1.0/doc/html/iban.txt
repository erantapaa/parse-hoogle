-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Validate and generate IBANs
--   
@package iban
@version 0.1.1.0

module Finance.IBAN.Germany.Core
data BLZRecord
BLZRecord :: BLZ -> Int -> Text -> Text -> Text -> Text -> Text -> BIC -> ChecksumType -> Int -> Text -> Text -> Text -> BLZRecord
blz :: BLZRecord -> BLZ
blzMerkmal :: BLZRecord -> Int
blzDescription :: BLZRecord -> Text
blzPLZ :: BLZRecord -> Text
blzTown :: BLZRecord -> Text
blzShortDescription :: BLZRecord -> Text
blzPAN :: BLZRecord -> Text
blzBIC :: BLZRecord -> BIC
blzChecksumType :: BLZRecord -> ChecksumType
blzDatensatzNummer :: BLZRecord -> Int
blzAenderungsKennzeichen :: BLZRecord -> Text
blzLoeschung :: BLZRecord -> Text
blzNachfolgeBLZ :: BLZRecord -> Text
type BLZ = Text
type BIC = Text
type AccountNr = Text
type ChecksumType = Text
instance Eq BLZRecord
instance Read BLZRecord
instance Show BLZRecord
instance Ord BLZRecord
instance Generic BLZRecord
instance Datatype D1BLZRecord
instance Constructor C1_0BLZRecord
instance Selector S1_0_0BLZRecord
instance Selector S1_0_1BLZRecord
instance Selector S1_0_2BLZRecord
instance Selector S1_0_3BLZRecord
instance Selector S1_0_4BLZRecord
instance Selector S1_0_5BLZRecord
instance Selector S1_0_6BLZRecord
instance Selector S1_0_7BLZRecord
instance Selector S1_0_8BLZRecord
instance Selector S1_0_9BLZRecord
instance Selector S1_0_10BLZRecord
instance Selector S1_0_11BLZRecord
instance Selector S1_0_12BLZRecord

module Finance.IBAN.Germany.Data
blzBICs :: HashMap BLZ BIC

module Finance.IBAN.Data
structures :: [Text]

module Finance.IBAN.Internal
data IBAN
IBAN :: Text -> IBAN
rawIBAN :: IBAN -> Text
data IBANError

-- | The IBAN string contains invalid characters.
IBANInvalidCharacters :: IBANError

-- | The IBAN string has the wrong structure.
IBANInvalidStructure :: IBANError

-- | The checksum does not match.
IBANWrongChecksum :: IBANError

-- | The country identifier is either not a valid ISO3166-1 identifier or
--   that country does not issue IBANs.
IBANInvalidCountry :: Text -> IBANError

-- | try to parse an IBAN
parseIBAN :: Text -> Either IBANError IBAN

-- | show a IBAN in 4-blocks
prettyIBAN :: IBAN -> Text
data SElement

-- | Get the country of the IBAN
country :: IBAN -> CountryCode
checkStructure :: BBANStructure -> Text -> Bool
parseStructure :: Text -> (CountryCode, BBANStructure)
countryStructures :: Map CountryCode BBANStructure

-- | Calculate the reordered decimal number mod 97 using Horner's rule.
--   according to ISO 7064: mod97-10
mod97_10 :: Text -> Int
instance Typeable IBAN
instance Typeable IBANError
instance Eq IBAN
instance Show IBANError
instance Read IBANError
instance Eq IBANError
instance Read IBAN
instance Show IBAN
instance IsString IBAN

module Finance.IBAN.Germany
type BIC = Text
type BLZ = Text
type AccountNr = Text
blzBICs :: HashMap BLZ BIC
ibanFromLegacy :: BLZ -> AccountNr -> (IBAN, Maybe BIC)
legacyFromIBAN :: IBAN -> (BLZ, AccountNr)

module Finance.IBAN
data IBAN
data IBANError

-- | The IBAN string contains invalid characters.
IBANInvalidCharacters :: IBANError

-- | The IBAN string has the wrong structure.
IBANInvalidStructure :: IBANError

-- | The checksum does not match.
IBANWrongChecksum :: IBANError

-- | The country identifier is either not a valid ISO3166-1 identifier or
--   that country does not issue IBANs.
IBANInvalidCountry :: Text -> IBANError

-- | Get the country of the IBAN
country :: IBAN -> CountryCode

-- | show a IBAN in 4-blocks
prettyIBAN :: IBAN -> Text

-- | try to parse an IBAN
parseIBAN :: Text -> Either IBANError IBAN
