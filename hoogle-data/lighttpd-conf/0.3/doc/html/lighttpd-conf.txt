-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Lighttpd configuration file tools.
--   
--   Lighttpd configuration file tools. Haddock docs are at
--   <a>http://code.haskell.org/~morrow/code/haskell/web/lighttpd-conf/haddock/</a>.
@package lighttpd-conf
@version 0.3


module Lighttpd.Conf.Syntax
newtype Config
Config :: [Exp] -> Config
newtype Name
Name :: ByteString -> Name
mkName :: String -> Name
data QName
QName :: Name -> Name -> QName
moduleName :: QName -> Name
baseName :: QName -> Name
mkQName :: String -> String -> QName
data Val
VarV :: QName -> Val
StringV :: ByteString -> Val
IntegerV :: Int -> Val
BooleanV :: Enabled -> Val
ArrayV :: [ArrayElem] -> Val
ManyV :: [Val] -> Val
data ArrayElem
ArrayElem :: (Maybe Name) -> Val -> ArrayElem
data Enabled
Enable :: Enabled
Disable :: Enabled
data Include
ValueI :: Val -> Include
ShellI :: ByteString -> Include
data Exp
CommentE :: ByteString -> Exp
GlobalCxtE :: [Exp] -> Exp
OptionE :: QName -> Val -> Exp
MergeE :: QName -> Val -> Exp
IncludeE :: Include -> Exp
CondE :: Cond -> [Exp] -> [CondElse] -> Exp
data CondElse
CondElse :: Cond -> [Exp] -> CondElse

-- | <pre>
--   ghci&gt; ppr $ Cond (HttpF Cookie) Match (RegexP "this.{,5}[=@#]?that$")
--   $HTTP{"cookie"} =~ "this.{,5}[=@#]?that$"
--   </pre>
data Cond
Cond :: Field -> Op -> Pat -> Cond
data Op
Equal :: Op
NotEqual :: Op
Match :: Op
NotMatch :: Op
data Pat
StringP :: ByteString -> Pat
RegexP :: ByteString -> Pat
data Field
Field :: Name -> ByteString -> Field
class ToVal a
toVal :: (ToVal a) => a -> Val
instance Typeable Field
instance Typeable Pat
instance Typeable Op
instance Typeable Cond
instance Typeable Include
instance Typeable CondElse
instance Typeable Exp
instance Typeable Enabled
instance Typeable ArrayElem
instance Typeable Val
instance Typeable QName
instance Typeable Name
instance Typeable Config
instance Eq Field
instance Ord Field
instance Show Field
instance Data Field
instance Eq Pat
instance Ord Pat
instance Show Pat
instance Data Pat
instance Eq Op
instance Ord Op
instance Show Op
instance Data Op
instance Eq Cond
instance Ord Cond
instance Show Cond
instance Data Cond
instance Eq Include
instance Ord Include
instance Show Include
instance Data Include
instance Eq CondElse
instance Ord CondElse
instance Show CondElse
instance Data CondElse
instance Eq Exp
instance Ord Exp
instance Show Exp
instance Data Exp
instance Eq Enabled
instance Ord Enabled
instance Show Enabled
instance Data Enabled
instance Eq ArrayElem
instance Ord ArrayElem
instance Show ArrayElem
instance Data ArrayElem
instance Eq Val
instance Ord Val
instance Show Val
instance Data Val
instance Eq QName
instance Ord QName
instance Show QName
instance Data QName
instance Eq Name
instance Ord Name
instance Show Name
instance Data Name
instance Eq Config
instance Ord Config
instance Show Config
instance Data Config
instance ToVal [(Maybe Name, Val)]
instance ToVal [ArrayElem]
instance ToVal [Val]
instance ToVal Bool
instance ToVal Integer
instance ToVal Int
instance ToVal ByteString
instance ToVal String


module Lighttpd.Conf.Parser
parseConf :: ByteString -> Maybe Config
parseConf' :: String -> Maybe Config
instance Monad HappyIdentity


module Lighttpd.Conf.Ppr
class Ppr a
ppr :: (Ppr a) => a -> Doc
pprs :: (Ppr a) => [a] -> Doc
pprField :: Doc -> Doc -> Doc
data PprMode
Compact :: PprMode
Spaced :: PprMode
pprWithMode :: PprMode -> Config -> Doc
instance Eq PprMode
instance Ord PprMode
instance Show PprMode
instance Read PprMode
instance Ppr Field
instance Ppr Pat
instance Ppr Op
instance Ppr Cond
instance Ppr Include
instance Ppr ArrayElem
instance Ppr Enabled
instance Ppr Val
instance Ppr CondElse
instance Ppr Exp
instance Ppr QName
instance Ppr Name
instance Ppr Int
instance Ppr ByteString
instance Ppr String
instance Ppr Config


module Lighttpd.Conf
