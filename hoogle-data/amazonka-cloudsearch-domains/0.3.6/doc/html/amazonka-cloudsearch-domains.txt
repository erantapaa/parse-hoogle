-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Amazon CloudSearch Domain SDK.
--   
@package amazonka-cloudsearch-domains
@version 0.3.6

module Network.AWS.CloudSearchDomains.Types

-- | Version <tt>2013-01-01</tt> of the Amazon CloudSearch Domain service.
data CloudSearchDomains
data JSONError :: *
data SearchStatus

-- | <a>SearchStatus</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>ssRid</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>ssTimems</a> <tt>::</tt> <a>Maybe</a> <a>Integer</a></li>
--   </ul>
searchStatus :: SearchStatus

-- | The encrypted resource ID for the request.
ssRid :: Lens' SearchStatus (Maybe Text)

-- | How long it took to process the request, in milliseconds.
ssTimems :: Lens' SearchStatus (Maybe Integer)
data QueryParser

-- | dismax
Dismax :: QueryParser

-- | lucene
Lucene :: QueryParser

-- | simple
Simple :: QueryParser

-- | structured
Structured :: QueryParser
data Hit

-- | <a>Hit</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>hitExprs</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>Text</a></li>
--   <li><a>hitFields</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   [<a>Text</a>]</li>
--   <li><a>hitHighlights</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>Text</a></li>
--   <li><a>hitId</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   </ul>
hit :: Hit

-- | The expressions returned from a document that matches the search
--   request.
hitExprs :: Lens' Hit (HashMap Text Text)

-- | The fields returned from a document that matches the search request.
hitFields :: Lens' Hit (HashMap Text [Text])

-- | The highlights returned from a document that matches the search
--   request.
hitHighlights :: Lens' Hit (HashMap Text Text)

-- | The document ID of a document that matches the search request.
hitId :: Lens' Hit (Maybe Text)
data SuggestStatus

-- | <a>SuggestStatus</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>ss1Rid</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>ss1Timems</a> <tt>::</tt> <a>Maybe</a> <a>Integer</a></li>
--   </ul>
suggestStatus :: SuggestStatus

-- | The encrypted resource ID for the request.
ss1Rid :: Lens' SuggestStatus (Maybe Text)

-- | How long it took to process the request, in milliseconds.
ss1Timems :: Lens' SuggestStatus (Maybe Integer)
data Bucket

-- | <a>Bucket</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>bCount</a> <tt>::</tt> <a>Maybe</a> <a>Integer</a></li>
--   <li><a>bValue</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   </ul>
bucket :: Bucket

-- | The number of hits that contain the facet value in the specified facet
--   field.
bCount :: Lens' Bucket (Maybe Integer)

-- | The facet value being counted.
bValue :: Lens' Bucket (Maybe Text)
data SuggestionMatch

-- | <a>SuggestionMatch</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>smId</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>smScore</a> <tt>::</tt> <a>Maybe</a> <a>Integer</a></li>
--   <li><a>smSuggestion</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   </ul>
suggestionMatch :: SuggestionMatch

-- | The document ID of the suggested document.
smId :: Lens' SuggestionMatch (Maybe Text)

-- | The relevance score of a suggested match.
smScore :: Lens' SuggestionMatch (Maybe Integer)

-- | The string that matches the query string specified in the
--   <tt>SuggestRequest</tt>.
smSuggestion :: Lens' SuggestionMatch (Maybe Text)
data BucketInfo

-- | <a>BucketInfo</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>biBuckets</a> <tt>::</tt> [<a>Bucket</a>]</li>
--   </ul>
bucketInfo :: BucketInfo

-- | A list of the calculated facet values and counts.
biBuckets :: Lens' BucketInfo [Bucket]
data DocumentServiceWarning

-- | <a>DocumentServiceWarning</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>dswMessage</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   </ul>
documentServiceWarning :: DocumentServiceWarning

-- | The description for a warning returned by the document service.
dswMessage :: Lens' DocumentServiceWarning (Maybe Text)
data SuggestModel

-- | <a>SuggestModel</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>smFound</a> <tt>::</tt> <a>Maybe</a> <a>Integer</a></li>
--   <li><a>smQuery</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>smSuggestions</a> <tt>::</tt> [<a>SuggestionMatch</a>]</li>
--   </ul>
suggestModel :: SuggestModel

-- | The number of documents that were found to match the query string.
smFound :: Lens' SuggestModel (Maybe Integer)

-- | The query string specified in the suggest request.
smQuery :: Lens' SuggestModel (Maybe Text)

-- | The documents that match the query string.
smSuggestions :: Lens' SuggestModel [SuggestionMatch]
data Hits

-- | <a>Hits</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>hCursor</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>hFound</a> <tt>::</tt> <a>Maybe</a> <a>Integer</a></li>
--   <li><a>hHit</a> <tt>::</tt> [<a>Hit</a>]</li>
--   <li><a>hStart</a> <tt>::</tt> <a>Maybe</a> <a>Integer</a></li>
--   </ul>
hits :: Hits

-- | A cursor that can be used to retrieve the next set of matching
--   documents when you want to page through a large result set.
hCursor :: Lens' Hits (Maybe Text)

-- | The total number of documents that match the search request.
hFound :: Lens' Hits (Maybe Integer)

-- | A document that matches the search request.
hHit :: Lens' Hits [Hit]

-- | The index of the first matching document.
hStart :: Lens' Hits (Maybe Integer)
data ContentType

-- | application/json
ApplicationJson :: ContentType

-- | application/xml
ApplicationXml :: ContentType
instance Eq SearchStatus
instance Ord SearchStatus
instance Read SearchStatus
instance Show SearchStatus
instance Eq QueryParser
instance Ord QueryParser
instance Read QueryParser
instance Show QueryParser
instance Generic QueryParser
instance Enum QueryParser
instance Eq Hit
instance Read Hit
instance Show Hit
instance Eq SuggestStatus
instance Ord SuggestStatus
instance Read SuggestStatus
instance Show SuggestStatus
instance Eq Bucket
instance Ord Bucket
instance Read Bucket
instance Show Bucket
instance Eq SuggestionMatch
instance Ord SuggestionMatch
instance Read SuggestionMatch
instance Show SuggestionMatch
instance Eq BucketInfo
instance Read BucketInfo
instance Show BucketInfo
instance Monoid BucketInfo
instance Semigroup BucketInfo
instance Eq DocumentServiceWarning
instance Ord DocumentServiceWarning
instance Read DocumentServiceWarning
instance Show DocumentServiceWarning
instance Monoid DocumentServiceWarning
instance Eq SuggestModel
instance Read SuggestModel
instance Show SuggestModel
instance Eq Hits
instance Read Hits
instance Show Hits
instance Eq ContentType
instance Ord ContentType
instance Read ContentType
instance Show ContentType
instance Generic ContentType
instance Enum ContentType
instance Datatype D1QueryParser
instance Constructor C1_0QueryParser
instance Constructor C1_1QueryParser
instance Constructor C1_2QueryParser
instance Constructor C1_3QueryParser
instance Datatype D1ContentType
instance Constructor C1_0ContentType
instance Constructor C1_1ContentType
instance ToJSON ContentType
instance FromJSON ContentType
instance ToQuery ContentType
instance ToHeader ContentType
instance ToByteString ContentType
instance ToText ContentType
instance FromText ContentType
instance Hashable ContentType
instance ToJSON Hits
instance FromJSON Hits
instance ToJSON SuggestModel
instance FromJSON SuggestModel
instance ToJSON DocumentServiceWarning
instance FromJSON DocumentServiceWarning
instance ToJSON BucketInfo
instance FromJSON BucketInfo
instance IsList BucketInfo
instance ToJSON SuggestionMatch
instance FromJSON SuggestionMatch
instance ToJSON Bucket
instance FromJSON Bucket
instance ToJSON SuggestStatus
instance FromJSON SuggestStatus
instance ToJSON Hit
instance FromJSON Hit
instance ToJSON QueryParser
instance FromJSON QueryParser
instance ToQuery QueryParser
instance ToHeader QueryParser
instance ToByteString QueryParser
instance ToText QueryParser
instance FromText QueryParser
instance Hashable QueryParser
instance ToJSON SearchStatus
instance FromJSON SearchStatus
instance AWSService CloudSearchDomains


-- | Posts a batch of documents to a search domain for indexing. A document
--   batch is a collection of add and delete operations that represent the
--   documents you want to add, update, or delete from your domain. Batches
--   can be described in either JSON or XML. Each item that you want Amazon
--   CloudSearch to return as a search result (such as a product) is
--   represented as a document. Every document has a unique ID and one or
--   more fields that contain the data that you want to search and return
--   in results. Individual documents cannot contain more than 1 MB of
--   data. The entire batch cannot exceed 5 MB. To get the best possible
--   upload performance, group add and delete operations in batches that
--   are close the 5 MB limit. Submitting a large volume of single-document
--   batches can overload a domain's document service.
--   
--   The endpoint for submitting <a>UploadDocuments</a> requests is
--   domain-specific. To get the document endpoint for your domain, use the
--   Amazon CloudSearch configuration service <tt>DescribeDomains</tt>
--   action. A domain's endpoints are also displayed on the domain
--   dashboard in the Amazon CloudSearch console.
--   
--   For more information about formatting your data for Amazon
--   CloudSearch, see <a>Preparing Your Data</a> in the <i>Amazon
--   CloudSearch Developer Guide</i>. For more information about uploading
--   data for indexing, see <a>Uploading Data</a> in the <i>Amazon
--   CloudSearchDeveloper Guide</i>.
--   
--   
--   <a>http://docs.aws.amazon.com/cloudsearch/latest/developerguide/API_UploadDocuments.html</a>
module Network.AWS.CloudSearchDomains.UploadDocuments
data UploadDocuments

-- | <a>UploadDocuments</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>udContentType</a> <tt>::</tt> <a>ContentType</a></li>
--   <li><a>udDocuments</a> <tt>::</tt> <a>RqBody</a></li>
--   </ul>
uploadDocuments :: RqBody -> ContentType -> UploadDocuments

-- | The format of the batch you are uploading. Amazon CloudSearch supports
--   two document batch formats:
--   
--   application<i>json application</i>xml
udContentType :: Lens' UploadDocuments ContentType

-- | A batch of documents formatted in JSON or HTML.
udDocuments :: Lens' UploadDocuments RqBody
data UploadDocumentsResponse

-- | <a>UploadDocumentsResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>udrAdds</a> <tt>::</tt> <a>Maybe</a> <a>Integer</a></li>
--   <li><a>udrDeletes</a> <tt>::</tt> <a>Maybe</a> <a>Integer</a></li>
--   <li><a>udrStatus</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>udrWarnings</a> <tt>::</tt>
--   [<a>DocumentServiceWarning</a>]</li>
--   </ul>
uploadDocumentsResponse :: UploadDocumentsResponse

-- | The number of documents that were added to the search domain.
udrAdds :: Lens' UploadDocumentsResponse (Maybe Integer)

-- | The number of documents that were deleted from the search domain.
udrDeletes :: Lens' UploadDocumentsResponse (Maybe Integer)

-- | The status of an <tt>UploadDocumentsRequest</tt>.
udrStatus :: Lens' UploadDocumentsResponse (Maybe Text)

-- | Any warnings returned by the document service about the documents
--   being uploaded.
udrWarnings :: Lens' UploadDocumentsResponse [DocumentServiceWarning]
instance Show UploadDocuments
instance Eq UploadDocumentsResponse
instance Read UploadDocumentsResponse
instance Show UploadDocumentsResponse
instance FromJSON UploadDocumentsResponse
instance AWSRequest UploadDocuments
instance ToBody UploadDocuments
instance ToHeaders UploadDocuments
instance ToQuery UploadDocuments
instance ToPath UploadDocuments


-- | Retrieves autocomplete suggestions for a partial query string. You can
--   use suggestions enable you to display likely matches before users
--   finish typing. In Amazon CloudSearch, suggestions are based on the
--   contents of a particular text field. When you request suggestions,
--   Amazon CloudSearch finds all of the documents whose values in the
--   suggester field start with the specified query string. The beginning
--   of the field must match the query string to be considered a match.
--   
--   For more information about configuring suggesters and retrieving
--   suggestions, see <a>Getting Suggestions</a> in the <i>Amazon
--   CloudSearch Developer Guide</i> .
--   
--   The endpoint for submitting <a>Suggest</a> requests is
--   domain-specific. You submit suggest requests to a domain's search
--   endpoint. To get the search endpoint for your domain, use the Amazon
--   CloudSearch configuration service <tt>DescribeDomains</tt> action. A
--   domain's endpoints are also displayed on the domain dashboard in the
--   Amazon CloudSearch console.
--   
--   
--   <a>http://docs.aws.amazon.com/cloudsearch/latest/developerguide/API_Suggest.html</a>
module Network.AWS.CloudSearchDomains.Suggest
data Suggest

-- | <a>Suggest</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>sQuery</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>sSize</a> <tt>::</tt> <a>Maybe</a> <a>Integer</a></li>
--   <li><a>sSuggester</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
suggest :: Text -> Text -> Suggest

-- | Specifies the string for which you want to get suggestions.
sQuery :: Lens' Suggest Text

-- | Specifies the maximum number of suggestions to return.
sSize :: Lens' Suggest (Maybe Integer)

-- | Specifies the name of the suggester to use to find suggested matches.
sSuggester :: Lens' Suggest Text
data SuggestResponse

-- | <a>SuggestResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>srStatus</a> <tt>::</tt> <a>Maybe</a> <a>SuggestStatus</a></li>
--   <li><a>srSuggest</a> <tt>::</tt> <a>Maybe</a> <a>SuggestModel</a></li>
--   </ul>
suggestResponse :: SuggestResponse

-- | The status of a <tt>SuggestRequest</tt>. Contains the resource ID
--   (<tt>rid</tt>) and how long it took to process the request
--   (<tt>timems</tt>).
srStatus :: Lens' SuggestResponse (Maybe SuggestStatus)

-- | Container for the matching search suggestion information.
srSuggest :: Lens' SuggestResponse (Maybe SuggestModel)
instance Eq Suggest
instance Ord Suggest
instance Read Suggest
instance Show Suggest
instance Eq SuggestResponse
instance Read SuggestResponse
instance Show SuggestResponse
instance FromJSON SuggestResponse
instance AWSRequest Suggest
instance ToJSON Suggest
instance ToHeaders Suggest
instance ToQuery Suggest
instance ToPath Suggest


-- | Retrieves a list of documents that match the specified search
--   criteria. How you specify the search criteria depends on which query
--   parser you use. Amazon CloudSearch supports four query parsers:
--   
--   <tt>simple</tt>: search all <tt>text</tt> and 'text-array' fields for
--   the specified string. Search for phrases, individual terms, and
--   prefixes. <tt>structured</tt>: search specific fields, construct
--   compound queries using Boolean operators, and use advanced features
--   such as term boosting and proximity searching. <tt>lucene</tt>:
--   specify search criteria using the Apache Lucene query parser syntax.
--   <tt>dismax</tt>: specify search criteria using the simplified subset
--   of the Apache Lucene query parser syntax defined by the DisMax query
--   parser. For more information, see <a>Searching Your Data</a> in the
--   <i>Amazon CloudSearch Developer Guide</i> .
--   
--   The endpoint for submitting <a>Search</a> requests is domain-specific.
--   You submit search requests to a domain's search endpoint. To get the
--   search endpoint for your domain, use the Amazon CloudSearch
--   configuration service <tt>DescribeDomains</tt> action. A domain's
--   endpoints are also displayed on the domain dashboard in the Amazon
--   CloudSearch console.
--   
--   
--   <a>http://docs.aws.amazon.com/cloudsearch/latest/developerguide/API_Search.html</a>
module Network.AWS.CloudSearchDomains.Search
data Search

-- | <a>Search</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>s1Cursor</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>s1Expr</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>s1Facet</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>s1FilterQuery</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>s1Highlight</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>s1Partial</a> <tt>::</tt> <a>Maybe</a> <a>Bool</a></li>
--   <li><a>s1Query</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>s1QueryOptions</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>s1QueryParser</a> <tt>::</tt> <a>Maybe</a>
--   <a>QueryParser</a></li>
--   <li><a>s1Return</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>s1Size</a> <tt>::</tt> <a>Maybe</a> <a>Integer</a></li>
--   <li><a>s1Sort</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>s1Start</a> <tt>::</tt> <a>Maybe</a> <a>Integer</a></li>
--   </ul>
search :: Text -> Search

-- | Retrieves a cursor value you can use to page through large result
--   sets. Use the <tt>size</tt> parameter to control the number of hits to
--   include in each response. You can specify either the <tt>cursor</tt>
--   or <tt>start</tt> parameter in a request; they are mutually exclusive.
--   To get the first cursor, set the cursor value to <tt>initial</tt>. In
--   subsequent requests, specify the cursor value returned in the hits
--   section of the response.
--   
--   For more information, see <a>Paginating Results</a> in the <i>Amazon
--   CloudSearchDeveloper Guide</i>.
s1Cursor :: Lens' Search (Maybe Text)

-- | Defines one or more numeric expressions that can be used to sort
--   results or specify search or filter criteria. You can also specify
--   expressions as return fields.
--   
--   You specify the expressions in JSON using the form
--   '{<a>EXPRESSIONNAME</a>:<a>EXPRESSION</a>}'. You can define and use
--   multiple expressions in a search request. For example:
--   
--   ' {"expression1":"_score*rating", "expression2":"(1/rank)*year"} '
--   
--   For information about the variables, operators, and functions you can
--   use in expressions, see <a>Writing Expressions</a> in the <i>Amazon
--   CloudSearch Developer Guide</i> .
s1Expr :: Lens' Search (Maybe Text)

-- | Specifies one or more fields for which to get facet information, and
--   options that control how the facet information is returned. Each
--   specified field must be facet-enabled in the domain configuration. The
--   fields and options are specified in JSON using the form
--   '{<a>FIELD</a>:{<a>OPTION</a>:VALUE,<a>OPTION:</a>STRING"},<a>FIELD</a>:{<a>OPTION</a>:VALUE,<a>OPTION</a>:<a>STRING</a>}}'.
--   
--   You can specify the following faceting options:
--   
--   <tt>buckets</tt> specifies an array of the facet values or ranges to
--   count. Ranges are specified using the same syntax that you use to
--   search for a range of values. For more information, see <a>Searching
--   for a Range of Values</a> in the <i>Amazon CloudSearch Developer
--   Guide</i>. Buckets are returned in the order they are specified in the
--   request. The <tt>sort</tt> and <tt>size</tt> options are not valid if
--   you specify <tt>buckets</tt>.
--   
--   <tt>size</tt> specifies the maximum number of facets to include in the
--   results. By default, Amazon CloudSearch returns counts for the top 10.
--   The <tt>size</tt> parameter is only valid when you specify the
--   <tt>sort</tt> option; it cannot be used in conjunction with
--   <tt>buckets</tt>.
--   
--   <tt>sort</tt> specifies how you want to sort the facets in the
--   results: <a>bucket</a> or <tt>count</tt>. Specify <a>bucket</a> to
--   sort alphabetically or numerically by facet value (in ascending
--   order). Specify <tt>count</tt> to sort by the facet counts computed
--   for each facet value (in descending order). To retrieve facet counts
--   for particular values or ranges of values, use the <tt>buckets</tt>
--   option instead of <tt>sort</tt>.
--   
--   If no facet options are specified, facet counts are computed for all
--   field values, the facets are sorted by facet count, and the top 10
--   facets are returned in the results.
--   
--   To count particular buckets of values, use the <tt>buckets</tt>
--   option. For example, the following request uses the <tt>buckets</tt>
--   option to calculate and return facet counts by decade.
--   
--   
--   '{"year":{"buckets":["[1970,1979]","[1980,1989]","[1990,1999]","[2000,2009]","[2010,}"]}}
--   '
--   
--   To sort facets by facet count, use the <tt>count</tt> option. For
--   example, the following request sets the <tt>sort</tt> option to
--   <tt>count</tt> to sort the facet values by facet count, with the facet
--   values that have the most matching documents listed first. Setting the
--   <tt>size</tt> option to 3 returns only the top three facet values.
--   
--   ' {"year":{"sort":"count","size":3}} '
--   
--   To sort the facets by value, use the <a>bucket</a> option. For
--   example, the following request sets the <tt>sort</tt> option to
--   <a>bucket</a> to sort the facet values numerically by year, with
--   earliest year listed first.
--   
--   ' {"year":{"sort":"bucket"}} '
--   
--   For more information, see <a>Getting and Using Facet Information</a>
--   in the <i>AmazonCloudSearch Developer Guide</i>.
s1Facet :: Lens' Search (Maybe Text)

-- | Specifies a structured query that filters the results of a search
--   without affecting how the results are scored and sorted. You use
--   <tt>filterQuery</tt> in conjunction with the <tt>query</tt> parameter
--   to filter the documents that match the constraints specified in the
--   <tt>query</tt> parameter. Specifying a filter controls only which
--   matching documents are included in the results, it has no effect on
--   how they are scored and sorted. The <tt>filterQuery</tt> parameter
--   supports the full structured query syntax.
--   
--   For more information about using filters, see <a>Filtering Matching
--   Documents</a> in the <i>Amazon CloudSearch Developer Guide</i>.
s1FilterQuery :: Lens' Search (Maybe Text)

-- | Retrieves highlights for matches in the specified <tt>text</tt> or
--   'text-array' fields. Each specified field must be highlight enabled in
--   the domain configuration. The fields and options are specified in JSON
--   using the form
--   '{<a>FIELD</a>:{<a>OPTION</a>:VALUE,<a>OPTION:</a>STRING"},<a>FIELD</a>:{<a>OPTION</a>:VALUE,<a>OPTION</a>:<a>STRING</a>}}'.
--   
--   You can specify the following highlight options:
--   
--   <tt>format</tt>: specifies the format of the data in the text field:
--   <tt>text</tt> or <tt>html</tt>. When data is returned as HTML, all
--   non-alphanumeric characters are encoded. The default is <tt>html</tt>.
--   <tt>max_phrases</tt>: specifies the maximum number of occurrences of
--   the search term(s) you want to highlight. By default, the first
--   occurrence is highlighted. <tt>pre_tag</tt>: specifies the string to
--   prepend to an occurrence of a search term. The default for HTML
--   highlights is '&amp;lt;em&amp;gt;'. The default for text highlights is
--   <a>*</a>. <tt>post_tag</tt>: specifies the string to append to an
--   occurrence of a search term. The default for HTML highlights is
--   '&amp;lt;/em&amp;gt;'. The default for text highlights is <a>*</a>. If
--   no highlight options are specified for a field, the returned field
--   text is treated as HTML and the first match is highlighted with
--   emphasis tags: '&amp;lt;em&gt;search-term&amp;lt;/em&amp;gt;'.
--   
--   For example, the following request retrieves highlights for the
--   <tt>actors</tt> and <tt>title</tt> fields.
--   
--   '{ "actors": {}, "title": {"format": "text","max_phrases":
--   2,"pre_tag": "","post_tag": ""} }'
s1Highlight :: Lens' Search (Maybe Text)

-- | Enables partial results to be returned if one or more index partitions
--   are unavailable. When your search index is partitioned across multiple
--   search instances, by default Amazon CloudSearch only returns results
--   if every partition can be queried. This means that the failure of a
--   single search instance can result in 5xx (internal server) errors.
--   When you enable partial results, Amazon CloudSearch returns whatever
--   results are available and includes the percentage of documents
--   searched in the search results (percent-searched). This enables you to
--   more gracefully degrade your users' search experience. For example,
--   rather than displaying no results, you could display the partial
--   results and a message indicating that the results might be incomplete
--   due to a temporary system outage.
s1Partial :: Lens' Search (Maybe Bool)

-- | Specifies the search criteria for the request. How you specify the
--   search criteria depends on the query parser used for the request and
--   the parser options specified in the <tt>queryOptions</tt> parameter.
--   By default, the <tt>simple</tt> query parser is used to process
--   requests. To use the <tt>structured</tt>, <tt>lucene</tt>, or
--   <tt>dismax</tt> query parser, you must also specify the
--   <tt>queryParser</tt> parameter.
--   
--   For more information about specifying search criteria, see
--   <a>Searching YourData</a> in the <i>Amazon CloudSearch Developer
--   Guide</i>.
s1Query :: Lens' Search Text

-- | Configures options for the query parser specified in the
--   <tt>queryParser</tt> parameter. You specify the options in JSON using
--   the following form
--   '{<a>OPTION1</a>:<a>VALUE1</a>,<a>OPTION2</a>:VALUE2"...<a>OPTIONN</a>:<a>VALUEN</a>}.'
--   
--   The options you can configure vary according to which parser you use:
--   
--   <tt>defaultOperator</tt>: The default operator used to combine
--   individual terms in the search string. For example: 'defaultOperator:
--   <tt>or'</tt>. For the <tt>dismax</tt> parser, you specify a percentage
--   that represents the percentage of terms in the search string (rounded
--   down) that must match, rather than a default operator. A value of '0%'
--   is the equivalent to OR, and a value of '100%' is equivalent to AND.
--   The percentage must be specified as a value in the range 0-100
--   followed by the percent (%) symbol. For example, 'defaultOperator:
--   50%'. Valid values: <a>and</a>, <a>or</a>, a percentage in the range
--   0%-100% (<tt>dismax</tt>). Default: <a>and</a> (<tt>simple</tt>,
--   <tt>structured</tt>, <tt>lucene</tt>) or '100' (<tt>dismax</tt>).
--   Valid for: <tt>simple</tt>, <tt>structured</tt>, <tt>lucene</tt>, and
--   <tt>dismax</tt>. <tt>fields</tt>: An array of the fields to search
--   when no fields are specified in a search. If no fields are specified
--   in a search and this option is not specified, all text and text-array
--   fields are searched. You can specify a weight for each field to
--   control the relative importance of each field when Amazon CloudSearch
--   calculates relevance scores. To specify a field weight, append a caret
--   (<a>^</a>) symbol and the weight to the field name. For example, to
--   boost the importance of the <tt>title</tt> field over the
--   <tt>description</tt> field you could specify:
--   '"fields":["title^5","description"]'. Valid values: The name of any
--   configured field and an optional numeric value greater than zero.
--   Default: All <tt>text</tt> and 'text-array' fields. Valid for:
--   <tt>simple</tt>, <tt>structured</tt>, <tt>lucene</tt>, and
--   <tt>dismax</tt>. <tt>operators</tt>: An array of the operators or
--   special characters you want to disable for the simple query parser. If
--   you disable the <a>and</a>, <a>or</a>, or <a>not</a> operators, the
--   corresponding operators (<a>+</a>, '|', <a>-</a>) have no special
--   meaning and are dropped from the search string. Similarly, disabling
--   <tt>prefix</tt> disables the wildcard operator (<a>*</a>) and
--   disabling <tt>phrase</tt> disables the ability to search for phrases
--   by enclosing phrases in double quotes. Disabling precedence disables
--   the ability to control order of precedence using parentheses.
--   Disabling <tt>near</tt> disables the ability to use the ~ operator to
--   perform a sloppy phrase search. Disabling the <tt>fuzzy</tt> operator
--   disables the ability to use the ~ operator to perform a fuzzy search.
--   <tt>escape</tt> disables the ability to use a backslash ('\') to
--   escape special characters within the search string. Disabling
--   whitespace is an advanced option that prevents the parser from
--   tokenizing on whitespace, which can be useful for Vietnamese. (It
--   prevents Vietnamese words from being split incorrectly.) For example,
--   you could disable all operators other than the phrase operator to
--   support just simple term and phrase queries:
--   '"operators":["and","not","or", "prefix"]'. Valid values: <a>and</a>,
--   <tt>escape</tt>, <tt>fuzzy</tt>, <tt>near</tt>, <a>not</a>, <a>or</a>,
--   <tt>phrase</tt>, <tt>precedence</tt>, <tt>prefix</tt>,
--   <tt>whitespace</tt>. Default: All operators and special characters are
--   enabled. Valid for: <tt>simple</tt>. <tt>phraseFields</tt>: An array
--   of the <tt>text</tt> or 'text-array' fields you want to use for phrase
--   searches. When the terms in the search string appear in close
--   proximity within a field, the field scores higher. You can specify a
--   weight for each field to boost that score. The <tt>phraseSlop</tt>
--   option controls how much the matches can deviate from the search
--   string and still be boosted. To specify a field weight, append a caret
--   (<a>^</a>) symbol and the weight to the field name. For example, to
--   boost phrase matches in the <tt>title</tt> field over the
--   <tt>abstract</tt> field, you could specify:
--   '"phraseFields":["title^3", "plot"]' Valid values: The name of any
--   <tt>text</tt> or 'text-array' field and an optional numeric value
--   greater than zero. Default: No fields. If you don't specify any fields
--   with <tt>phraseFields</tt>, proximity scoring is disabled even if
--   <tt>phraseSlop</tt> is specified. Valid for: <tt>dismax</tt>.
--   <tt>phraseSlop</tt>: An integer value that specifies how much matches
--   can deviate from the search phrase and still be boosted according to
--   the weights specified in the <tt>phraseFields</tt> option; for
--   example, 'phraseSlop: 2'. You must also specify <tt>phraseFields</tt>
--   to enable proximity scoring. Valid values: positive integers. Default:
--   0. Valid for: <tt>dismax</tt>. <tt>explicitPhraseSlop</tt>: An integer
--   value that specifies how much a match can deviate from the search
--   phrase when the phrase is enclosed in double quotes in the search
--   string. (Phrases that exceed this proximity distance are not
--   considered a match.) For example, to specify a slop of three for
--   dismax phrase queries, you would specify '"explicitPhraseSlop":3'.
--   Valid values: positive integers. Default: 0. Valid for:
--   <tt>dismax</tt>. <tt>tieBreaker</tt>: When a term in the search string
--   is found in a document's field, a score is calculated for that field
--   based on how common the word is in that field compared to other
--   documents. If the term occurs in multiple fields within a document, by
--   default only the highest scoring field contributes to the document's
--   overall score. You can specify a <tt>tieBreaker</tt> value to enable
--   the matches in lower-scoring fields to contribute to the document's
--   score. That way, if two documents have the same max field score for a
--   particular term, the score for the document that has matches in more
--   fields will be higher. The formula for calculating the score with a
--   tieBreaker is '(max field score) + (tieBreaker) * (sum of the scores
--   for therest of the matching fields)'. Set <tt>tieBreaker</tt> to 0 to
--   disregard all but the highest scoring field (pure max):
--   '"tieBreaker":0'. Set to 1 to sum the scores from all fields (pure
--   sum): '"tieBreaker":1'. Valid values: 0.0 to 1.0. Default: 0.0. Valid
--   for: <tt>dismax</tt>.
s1QueryOptions :: Lens' Search (Maybe Text)

-- | Specifies which query parser to use to process the request. If
--   <tt>queryParser</tt> is not specified, Amazon CloudSearch uses the
--   <tt>simple</tt> query parser.
--   
--   Amazon CloudSearch supports four query parsers:
--   
--   <tt>simple</tt>: perform simple searches of <tt>text</tt> and
--   'text-array' fields. By default, the <tt>simple</tt> query parser
--   searches all <tt>text</tt> and 'text-array' fields. You can specify
--   which fields to search by with the <tt>queryOptions</tt> parameter. If
--   you prefix a search term with a plus sign (+) documents must contain
--   the term to be considered a match. (This is the default, unless you
--   configure the default operator with the <tt>queryOptions</tt>
--   parameter.) You can use the <a>-</a> (NOT), '|' (OR), and <a>*</a>
--   (wildcard) operators to exclude particular terms, find results that
--   match any of the specified terms, or search for a prefix. To search
--   for a phrase rather than individual terms, enclose the phrase in
--   double quotes. For more information, see <a>Searching for Text</a> in
--   the <i>Amazon CloudSearch DeveloperGuide</i>. <tt>structured</tt>:
--   perform advanced searches by combining multiple expressions to define
--   the search criteria. You can also search within particular fields,
--   search for values and ranges of values, and use advanced options such
--   as term boosting, <tt>matchall</tt>, and <tt>near</tt>. For more
--   information, see <a>Constructing Compound Queries</a> in the <i>Amazon
--   CloudSearch Developer Guide</i>. <tt>lucene</tt>: search using the
--   Apache Lucene query parser syntax. For more information, see <a>Apache
--   Lucene QueryParser Syntax</a>. <tt>dismax</tt>: search using the
--   simplified subset of the Apache Lucene query parser syntax defined by
--   the DisMax query parser. For more information, see <a>DisMax Query
--   Parser Syntax</a>.
s1QueryParser :: Lens' Search (Maybe QueryParser)

-- | Specifies the field and expression values to include in the response.
--   Multiple fields or expressions are specified as a comma-separated
--   list. By default, a search response includes all return enabled fields
--   (<tt>_all_fields</tt>). To return only the document IDs for the
--   matching documents, specify <tt>_no_fields</tt> . To retrieve the
--   relevance score calculated for each document, specify <tt>_score</tt>
--   .
s1Return :: Lens' Search (Maybe Text)

-- | Specifies the maximum number of search hits to include in the
--   response.
s1Size :: Lens' Search (Maybe Integer)

-- | Specifies the fields or custom expressions to use to sort the search
--   results. Multiple fields or expressions are specified as a
--   comma-separated list. You must specify the sort direction
--   (<tt>asc</tt> or <tt>desc</tt>) for each field; for example, 'year
--   desc,title asc'. To use a field to sort results, the field must be
--   sort-enabled in the domain configuration. Array type fields cannot be
--   used for sorting. If no <tt>sort</tt> parameter is specified, results
--   are sorted by their default relevance scores in descending order:
--   '_score desc'. You can also sort by document ID ('_id asc') and
--   version ('_version desc').
--   
--   For more information, see <a>Sorting Results</a> in the <i>Amazon
--   CloudSearchDeveloper Guide</i>.
s1Sort :: Lens' Search (Maybe Text)

-- | Specifies the offset of the first search hit you want to return. Note
--   that the result set is zero-based; the first result is at index 0. You
--   can specify either the <tt>start</tt> or <tt>cursor</tt> parameter in
--   a request, they are mutually exclusive.
--   
--   For more information, see <a>Paginating Results</a> in the <i>Amazon
--   CloudSearchDeveloper Guide</i>.
s1Start :: Lens' Search (Maybe Integer)
data SearchResponse

-- | <a>SearchResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>sr1Facets</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>BucketInfo</a></li>
--   <li><a>sr1Hits</a> <tt>::</tt> <a>Maybe</a> <a>Hits</a></li>
--   <li><a>sr1Status</a> <tt>::</tt> <a>Maybe</a> <a>SearchStatus</a></li>
--   </ul>
searchResponse :: SearchResponse

-- | The requested facet information.
sr1Facets :: Lens' SearchResponse (HashMap Text BucketInfo)

-- | The documents that match the search criteria.
sr1Hits :: Lens' SearchResponse (Maybe Hits)

-- | The status information returned for the search request.
sr1Status :: Lens' SearchResponse (Maybe SearchStatus)
instance Eq Search
instance Read Search
instance Show Search
instance Eq SearchResponse
instance Read SearchResponse
instance Show SearchResponse
instance FromJSON SearchResponse
instance AWSRequest Search
instance ToJSON Search
instance ToHeaders Search
instance ToQuery Search
instance ToPath Search


-- | Pending
module Network.AWS.CloudSearchDomains
