-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Conduit library for memcache procotol
--   
@package memcache-conduit
@version 0.0.3


-- | This package provides conduit functions for memcache protocol. For
--   detail, please see <tt>hemcached</tt> sample code
--   (sample/hemcached.hs).
--   
--   <pre>
--   type Key = BS.ByteString
--   type Version = Word64
--   type Value = (Version, BS.ByteString)
--   type HashTable k v = H.BasicHashTable k v
--   
--   
--   main :: IO ()
--   main = do
--     ht &lt;- H.new :: IO (HashTable Key Value)
--     htVar &lt;- newMVar ht
--     runResourceT $ do
--       runTCPServer (serverSettings 11211 HostAny) $ \appData -&gt; do
--         (appSource appData)
--           $$ getOpText
--           =$ process htVar
--           =$ putResponseText
--           =$ (appSink appData)
--   
--   process :: (MonadResource m, MonadIO m) =&gt; MVar (HashTable Key Value) -&gt; ConduitM (Either BS.ByteString Op) Response m ()
--   process = ...
--   </pre>
module Data.Conduit.Memcache

-- | This conduit parses command messages in text protocol and generates
--   <a>Network.Memcache.Op</a>.
--   
--   <ul>
--   <li><i><tt>input</tt></i> <a>Data.ByteString.Char8.ByteString</a></li>
--   <li><i><tt>output</tt></i> <a>Network.Memcache.Op</a></li>
--   </ul>
getOpText :: (MonadIO m, MonadThrow m) => ConduitM ByteString (Either ByteString Op) m ()

-- | This conduit parses response messages in text protocol and generates
--   <a>Network.Memcache.Response</a>.
--   
--   <ul>
--   <li><i><tt>input</tt></i> <a>Data.ByteString.Char8.ByteString</a></li>
--   <li><i><tt>output</tt></i> <a>Network.Memcache.Response</a></li>
--   </ul>
getResponseText :: (MonadIO m, MonadThrow m) => ConduitM ByteString (Either ByteString Response) m ()

-- | This conduit generates command messages in text protocol from
--   <a>Network.Memcache.Op</a> stream
--   
--   <ul>
--   <li><i><tt>input</tt></i> <a>Network.Memcache.Op</a></li>
--   <li><i><tt>output</tt></i>
--   <a>Data.ByteString.Char8.ByteString</a></li>
--   </ul>
putOpText :: MonadIO m => ConduitM Op ByteString m ()

-- | This generates response messages in text protocol from
--   <a>Network.Memcache.Response</a> stream
--   
--   <ul>
--   <li><i><tt>input</tt></i> <a>Network.Memcache.Response</a></li>
--   <li><i><tt>output</tt></i>
--   <a>Data.ByteString.Char8.ByteString</a></li>
--   </ul>
putResponseText :: MonadIO m => ConduitM Response ByteString m ()
