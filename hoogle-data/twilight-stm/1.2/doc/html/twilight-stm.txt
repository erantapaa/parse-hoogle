-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | STM library with safe irrevocable I/O and inconsistency repair
--   
--   A STM library with safe irrevocable I/O and inconsistency repair
@package twilight-stm
@version 1.2


-- | The Counter module implements a thread-safe integer counter. It can be
--   used to generate unique ids in a multi-threaded system.
module Control.Concurrent.STM.Counter

-- | The counter is implemented as a simple IORef and modified atomically.
type Counter = IORef Int

-- | Returns a global counter.
getCounter :: Counter

-- | Increments the counter.
incr :: Counter -> IO ()

-- | Returns the current value of the counter.
get :: Counter -> IO Int

-- | Increments the counter and returns the previous version.
getAndIncr :: Counter -> IO Int


-- | Parametrized monad, by Oleg Kiselyov
--   <a>http://okmij.org/ftp/Computation/monads.html#param-monad</a>
module Control.Concurrent.STM.Monadish

-- | A parameterized <tt>monad</tt>
class Monadish m
gret :: Monadish m => a -> m p p a
gbind :: Monadish m => m p q a -> (a -> m q r b) -> m p r b

-- | Inject regular monads to be monadish things too
newtype MW m p q a
MW :: m a -> MW m p q a
unMW :: MW m p q a -> m a
instance Monad m => Monadish (MW m)


-- | The Twilight STM enhances a transaction with twilight code that
--   executes between the preparation to commit the transaction and its
--   actual commit or abort. Twilight code runs irrevocably and
--   concurrently with the rest of the program. It can detect and repair
--   potential read inconsistencies in the state of its transaction and may
--   thus turn a failing transaction into a successful one. Moreover,
--   twilight code can safely use I/O operations while modifying the
--   transactionally managed memory.
--   
--   More information and publications can be found at
--   <a>http://proglang.informatik.uni-freiburg.de/projects/twilight/</a>
module Control.Concurrent.STM.Twilight

-- | The STM monad, supporting atomic memory transactions. In Twilight, the
--   STM monad parametrized by different transactional states.
data STM r p q a

-- | Type of the atomic phase.
data Atomic

-- | Type of the twilight phase.
data Twi

-- | Type of the safe phase.
data Safe
gret :: Monadish m => a -> m p p a
gbind :: Monadish m => m p q a -> (a -> m q r b) -> m p r b

-- | Perform a series of STM actions atomically.
atomically :: (forall s. STM s p q a) -> IO a

-- | Abort and restart the transaction.
retry :: STM r p q a

-- | Going from the Atomic phase and the Twi phase. The return value
--   indicates if there were intermediate updates to the variables that
--   have been read.
twilight :: STM r Atomic Twi Bool

-- | Phase transition from Twi phase to Safe phase. It will fail if there
--   are inconsistencies in form of intermediate updates to the variables
--   that the transaction has read.
tryCommit :: STM r Twi Safe ()

-- | Ignore conflicting updates to any variables that the transaction has
--   read.
ignoreAllConflicts :: STM r a Safe ()

-- | Update all variables that the transaction has read with an atomic
--   reload operation. This operation can only be done once.
reload :: STM r Twi Safe ()

-- | Transactional variable. It represents a shared memory locations that
--   support atomic memory transactions.
data TVar a

-- | Create a new TVar containing the value that is supplied.
newTVar :: a -> STM r p p (TVar a)

-- | Create a new TVar with the value supplied. This is useful for creating
--   top-level TVars.
newTVarIO :: a -> IO (TVar a)

-- | Return the current value stored in a TVar.
readTVar :: TVar a -> STM r Atomic Atomic a

-- | Modify a TVar by replacing its old value with the supplied one.
writeTVar :: TVar a -> a -> STM r Atomic Atomic ()

-- | Read handle associated to a TVar. It is only valid for the scope of
--   one transaction.
data RTwiVar a

-- | Write handle associated to a TVar. It is only valid for the scope of
--   one transaction.
data WTwiVar a

-- | Return the current value stored in a TVar, together with a read handle
--   to the TVar which can be used for further read access to the TVar.
readTVarR :: TVar a -> Tag r -> STM r Atomic Atomic (a, RTwiVar a)

-- | Modify a TVar by replacing its old value with the supplied one. The
--   function returns a write handle to the TVar which can be used for
--   latter modifications of this TVar.
writeTVarR :: TVar a -> a -> STM r Atomic Atomic (WTwiVar a)

-- | Modify the TVar associated to the handle by replacing the value that
--   is stored in it.
rewriteTVar :: WTwiVar a -> a -> STM r p p ()

-- | Obtain the value of the TVar as read before.
rereadTVar :: RTwiVar a -> STM r p p a

-- | Tag for grouping TVars. This allows simplified conflict checks for a
--   group of TVars. They are only valid for the scope of one transaction.
data Tag r

-- | Create a new tag.
newTag :: STM r Atomic Atomic (Tag r)

-- | Mark a variable with a tag.
markTVar :: TVar a -> Tag r -> STM r Atomic Atomic ()

-- | Checks if any of the variables that are marked with the tag are
--   inconsistent because of intermediate updates by other transaction.
isInconsistent :: Tag r -> STM r p p Bool

-- | Embed an IO action into the safe phase of the transaction. The
--   transaction does not restart and re-execute this action unless
--   specified by the programmer.
safeTwiIO :: IO a -> STM r Safe Safe a

-- | Embed an IO action into any phase of the transaction. Due to conflicts
--   with other transactions, this action will be re-executed if the
--   transaction aborts and restarts.
unsafeTwiIO :: IO a -> STM r p p a
instance Show AccessFlag
instance Eq AccessFlag
instance Eq LockState
instance Show LockState
instance Eq (TVar a)
instance Show (RTwiVar a)
instance Eq (RTwiVar a)
instance Show (WTwiVar a)
instance Eq (WTwiVar a)
instance Show (TVar a)
instance Monadish (STM r)
instance Monad (STM r p q)
