-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | lifted IO operations from the threads library
--   
@package lifted-threads
@version 1.0


-- | This is a wrapped version of <a>Control.Concurrent.Thread.Group</a>
--   with types generalised from <a>IO</a> to all monads in either
--   <a>MonadBase</a> or <a>MonadBaseControl</a>.
module Control.Concurrent.Thread.Group.Lifted

-- | A <tt>ThreadGroup</tt> can be understood as a counter which counts the
--   number of threads that were added to the group minus the ones that
--   have terminated.
--   
--   More formally a <tt>ThreadGroup</tt> has the following semantics:
--   
--   <ul>
--   <li><a>new</a> initializes the counter to 0.</li>
--   <li>Forking a thread increments the counter.</li>
--   <li>When a forked thread terminates, whether normally or by raising an
--   exception, the counter is decremented.</li>
--   <li><a>nrOfRunning</a> yields a transaction that returns the
--   counter.</li>
--   <li><a>wait</a> blocks as long as the counter is greater than 0.</li>
--   <li><a>waitN</a> blocks as long as the counter is greater or equal to
--   the specified number.</li>
--   </ul>
data ThreadGroup :: *

-- | Generalized version of <a>new</a>.
new :: MonadBase IO m => m ThreadGroup

-- | Yield a transaction that returns the number of running threads in the
--   group.
--   
--   Note that because this function yields a <a>STM</a> computation, the
--   returned number is guaranteed to be consistent inside the transaction.
nrOfRunning :: ThreadGroup -> STM Int

-- | Generalized version of <a>wait</a>.
wait :: MonadBase IO m => ThreadGroup -> m ()

-- | Generalized version of <a>waitN</a>.
waitN :: MonadBase IO m => Int -> ThreadGroup -> m ()

-- | Generalized version of <a>forkIO</a>.
fork :: MonadBaseControl IO m => ThreadGroup -> m a -> m (ThreadId, m (Result a))

-- | Generalized version of <a>forkOS</a>.
forkOS :: MonadBaseControl IO m => ThreadGroup -> m a -> m (ThreadId, m (Result a))

-- | Generalized version of <a>forkOn</a>.
forkOn :: MonadBaseControl IO m => Int -> ThreadGroup -> m a -> m (ThreadId, m (Result a))

-- | Generalized version of <a>forkIOWithUnmask</a>.
forkWithUnmask :: MonadBaseControl IO m => ThreadGroup -> ((forall b. m b -> m b) -> m a) -> m (ThreadId, m (Result a))

-- | Generalized version of <a>forkOnWithUnmask</a>.
forkOnWithUnmask :: MonadBaseControl IO m => Int -> ThreadGroup -> ((forall b. m b -> m b) -> m a) -> m (ThreadId, m (Result a))


-- | This is a wrapped version of <a>Control.Concurrent.Thread</a> with
--   types generalised from <a>IO</a> to all monads in either
--   <a>MonadBase</a> or <a>MonadBaseControl</a>.
module Control.Concurrent.Thread.Lifted

-- | Generalized version of <a>forkIO</a>.
fork :: MonadBaseControl IO m => m a -> m (ThreadId, m (Result a))

-- | Generalized version of <a>forkOS</a>.
forkOS :: MonadBaseControl IO m => m a -> m (ThreadId, m (Result a))

-- | Generalized version of <a>forkOn</a>.
forkOn :: MonadBaseControl IO m => Int -> m a -> m (ThreadId, m (Result a))

-- | Generalized version of <a>forkIOWithUnmask</a>.
forkWithUnmask :: MonadBaseControl IO m => ((forall b. m b -> m b) -> m a) -> m (ThreadId, m (Result a))

-- | Generalized version of <a>forkOnWithUnmask</a>.
forkOnWithUnmask :: MonadBaseControl IO m => Int -> ((forall b. m b -> m b) -> m a) -> m (ThreadId, m (Result a))

-- | A result of a thread is either some exception that was thrown in the
--   thread and wasn't catched or the actual value that was returned by the
--   thread.
type Result a = Either SomeException a
result :: MonadBase IO m => Result a -> m a
