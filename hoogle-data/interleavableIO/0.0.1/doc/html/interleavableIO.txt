-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Use other Monads in functions that asks for an IO Monad.
--   
--   This module provides utilities to use functions that are not in the IO
--   Monad as a callback in functions that expects an IO Monad.
@package interleavableIO
@version 0.0.1


-- | This module provides utilities to use functions that are not in the
--   <a>IO</a> <a>Monad</a> as a callback in functions that expects an
--   <a>IO</a> <a>Monad</a>.
module Control.Monad.Trans.InterleavableIO

-- | <a>MonadIO</a> types that instanciate this class can interleave an
--   <a>IO</a> function, and be used as a callback in a function that asks
--   for an <a>IO</a> monad.
class (MonadIO inner) => InterleavableIO inner trans buffer | trans -> inner buffer
embed :: (InterleavableIO inner trans buffer) => (buffer -> inner result) -> trans result
callback :: (InterleavableIO inner trans buffer) => buffer -> trans result -> inner result

-- | This is an utilitary function to the most simple use-case of this
--   module. It makes it possible to use the function <tt>caller</tt>, that
--   needs an <a>IO</a> as input, with any <a>Monad</a> that instanciates
--   <a>InterleavableIO</a>.
embedCallback :: (InterleavableIO innerCaller caller buffer, InterleavableIO innerFunction function buffer) => (innerFunction resultFunction -> innerCaller resultCaller) -> function resultFunction -> caller resultCaller

-- | This is a utilitary function to construct new instances of
--   <a>InterleavableIO</a>, in <a>Monad</a>s that contain
--   <a>InterleavableIO</a> <a>Monad</a>s. It simply calls embed with an
--   inner buffer that will be used by the inner instance of
--   <a>InterleavableIO</a>.
embedInner :: (InterleavableIO inner trans innerBuffer) => ((buffer, innerBuffer) -> inner result) -> buffer -> trans result

-- | Function useful to convert a pure <a>State</a> monad in a
--   <a>StateT</a> <a>IO</a>, to be used with the instance of
--   <a>InterleavableIO</a> <a>StateT</a>.
promoteState :: (MonadState state monad) => State state result -> monad result

-- | Function useful to convert a pure <a>Reader</a> monad in a
--   <a>ReaderT</a> <a>IO</a>, to be used with the instance of
--   <a>InterleavableIO</a> <a>ReaderT</a>.
promoteReader :: (MonadReader reader monad) => Reader reader result -> monad result

-- | Function useful to convert a pure <a>Writer</a> monad in a
--   <a>WriterT</a> <a>IO</a>, to be used with the instance of
--   <a>InterleavableIO</a> <a>WriterT</a>.
promoteWriter :: (MonadWriter writer monad) => Writer writer result -> monad result

-- | Error data type used in <a>ErrorT</a> instance.
data InterleaveErrorTException error
InterleaveErrorTException :: error -> InterleaveErrorTException error
instance Typeable1 InterleaveErrorTException
instance (MonadIO inner, InterleavableIO deepInner inner buffer, InterleavableIO IO inner buffer, InterleavableIO IO deepInner buffer, Error error, Typeable error) => InterleavableIO deepInner (ErrorT error inner) ((), buffer)
instance (MonadIO inner, InterleavableIO deepInner inner buffer, Monoid writer) => InterleavableIO deepInner (WriterT writer inner) (IORef writer, buffer)
instance (MonadIO inner, InterleavableIO deepInner inner buffer) => InterleavableIO deepInner (ReaderT reader inner) (reader, buffer)
instance (MonadIO inner, InterleavableIO deepInner inner buffer) => InterleavableIO deepInner (StateT state inner) (IORef state, buffer)
instance InterleavableIO IO IO ()
