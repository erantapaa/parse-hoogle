-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Attoparsec parsers for various Date/Time formats.
--   
--   Parsers for various Date/Time formats, implemented in AttoParsec.
@package timeparsers
@version 0.3.2

module Data.Time.Parsers.Tables
weekdays :: [ByteString]
months :: Map ByteString Integer
timeZones :: Map ByteString TimeZone
ausTimeZones :: Map ByteString TimeZone

module Data.Time.Parsers.Types

-- | A type that can be converted from ZonedTime
class FromZonedTime a
fromZonedTime :: FromZonedTime a => ZonedTime -> a

-- | A type that can be converted to ZonedTime For LocalTime, it is assumed
--   the TimeZone is UTC For Day, it is assumed that the TimeOfDay is
--   midnight and the TimeZone is UTC
class ToZonedTime a
toZonedTime :: ToZonedTime a => a -> ZonedTime

-- | Formats for purely numeric dates, e.g. 99-2-27
data DateFormat

-- | year-month-day
YMD :: DateFormat

-- | month-year-day
MDY :: DateFormat

-- | day-month-year
DMY :: DateFormat

-- | Flags to tune the behavior of a parser
data Flag

-- | Interpret years 0-99 as 1970-2069
MakeRecent :: Flag

-- | If no TimeOfDay is supplied for a type where it is required, use
--   midnight
DefaultToMidnight :: Flag

-- | If no timezone is supplied for a type where it is required, use UTC
DefaultToUTC :: Flag

-- | Require an <tt>s</tt> at the end of a POSIX timestamp. Can be used to
--   distinguish between POSIXTime and iso8601 with no separators.
RequirePosixUnit :: Flag

-- | Use Australian Timezones
AustralianTimeZones :: Flag
data Options
Options :: [DateFormat] -> String -> Set Flag -> Options

-- | List of what DateFormats to try.
formats :: Options -> [DateFormat]

-- | Set of accepted separators
seps :: Options -> String

-- | Set of Flags
flags :: Options -> Set Flag

-- | A Parser with Options
type OptionedParser a = ReaderT Options Parser a
data DateToken

-- | An Integer that is known to represent a year
Year :: Integer -> DateToken

-- | An Integer that is known to represent a month
Month :: Integer -> DateToken

-- | An Integer that could represent a day, month, or year
Any :: Integer -> DateToken
data ExtendedTimestamp a

-- | An explicit Timestamp
Timestamp :: a -> ExtendedTimestamp a

-- | The current time
Now :: ExtendedTimestamp a

-- | Midnight yesterday
Yesterday :: ExtendedTimestamp a

-- | Midnight today
Today :: ExtendedTimestamp a

-- | Midight tomorrow
Tomorrow :: ExtendedTimestamp a
instance Eq DateFormat
instance Show DateFormat
instance Eq Flag
instance Ord Flag
instance Show Flag
instance Eq DateToken
instance Show DateToken
instance Eq a => Eq (ExtendedTimestamp a)
instance Show a => Show (ExtendedTimestamp a)
instance ToZonedTime POSIXTime
instance ToZonedTime UTCTime
instance ToZonedTime Day
instance ToZonedTime LocalTime
instance ToZonedTime ZonedTime
instance FromZonedTime POSIXTime
instance FromZonedTime UTCTime
instance FromZonedTime Day
instance FromZonedTime LocalTime
instance FromZonedTime ZonedTime

module Data.Time.Parsers.Util

-- | Parse a given number of digits
nDigit :: (Read a, Num a) => Int -> Parser a

-- | Return true if the strings <a>BC</a> or <a>BCE</a> are consumed, false
--   otherwise
isBCE :: OptionedParser Bool

-- | Fail if the given parser fails to consume all of the input
onlyParse :: OptionedParser a -> OptionedParser a

-- | Default Options to use: Try YMD, then MDY, then DMY Accept <a>.</a>, '
--   ', <a>/</a>, <a>-</a> as separators. Use flags MakeRecent,
--   DefaultToUTC, DefaultToMidnight
defaultOptions :: Options
withOptions :: OptionedParser a -> Options -> Parser a
withDefaultOptions :: OptionedParser a -> Parser a

-- | Use given options and parser to parse a single Timestamp. always feeds
--   empty, so a Partial result is never returned. Ignores preceding and
--   trailing whitespace.
parseWithOptions :: Options -> OptionedParser a -> ByteString -> Result a

-- | Use default options to parse single Timestamp with a given parser,
--   ignoring preceding and trailing whitespace
parseWithDefaultOptions :: OptionedParser a -> ByteString -> Result a

-- | Return whether a given flag is set.
isFlagSet :: Flag -> OptionedParser Bool

-- | Converts a CE date into a BCE date. Fails if the date is already BCE
--   Warning: If you anticipate BCE dates, it is advisable to not use the
--   MakeRecent flag. It will cause ByteStrings such as <a>79 BC</a> to be
--   parsed as <a>1979 BCE</a>
makeBCE :: Monad m => Day -> m Day

-- | Given a timestamp to use as the current time, purely convert an
--   ExtendedTimestamp to a timestamp
fromExtendedTimestamp :: (FromZonedTime a, ToZonedTime a) => a -> ExtendedTimestamp a -> a

-- | Use getZonedTime to get the current time, and use it to convert an
--   ExtendedTimestamp to a timestamp
fromExtendedTimestampIO :: (FromZonedTime a, ToZonedTime a) => ExtendedTimestamp a -> IO a

module Data.Time.Parsers.Time

-- | Parse a TimeOfDay in twelve hour format
twelveHour :: OptionedParser TimeOfDay

-- | Parse a TimeOfDay in twenty four hour format
twentyFourHour :: OptionedParser TimeOfDay

-- | Parse a time of day intwelve hour or twenty four hour format
defaultTimeOfDay :: OptionedParser TimeOfDay

module Data.Time.Parsers.Date

-- | parse a date with no separators of the format yyyymmdd. Will treat a
--   preceding weekday as noise.
yyyymmdd :: OptionedParser Day

-- | parse a date with no separators of the format yymmdd. Will treat a
--   preceding weekday as noise
yymmdd :: OptionedParser Day
tokenizedDate :: OptionedParser Day

-- | parse a date such as <a>January 1, 2011</a>. Will treat a preceding
--   weekday as noise
fullDate :: OptionedParser Day

-- | parse a date in year, day of year format i.e yyyy/ddd or yyyydd
yearDayOfYear :: OptionedParser Day

-- | parse a julian day (days since 4713<i>1</i>1 BCE) Must prepend with
--   <a>J</a>, <a>JD</a>, or <a>Julian</a>
julianDay :: OptionedParser Day

-- | parse a date using tokenizedDate, yyyymmdd, yymmdd, yearDayOfYear,
--   fullDate or julianDay, converting to BCE if necessary
defaultDay :: OptionedParser Day

-- | Parse a date as in defaultDay, but don't check for BCE
defaultDayCE :: OptionedParser Day

module Data.Time.Parsers.Timestamp

-- | Parse a timezone in offset format
offsetTimeZone :: OptionedParser TimeZone

-- | Parse an lookup a named timezone
namedTimeZone :: OptionedParser TimeZone

-- | Parse an offset TimeZone or named TimeZone
defaultTimeZone :: OptionedParser TimeZone

-- | Parse a rational number and interpret as seconds since the Epoch
posixTime :: OptionedParser POSIXTime

-- | Given a LocalTime parser and a TimeZone Parser, parse a ZonedTime
zonedTime :: OptionedParser LocalTime -> OptionedParser TimeZone -> OptionedParser ZonedTime

-- | Given a Date parser and a TimeOfDay parser, parse a LocalTime
localTime :: OptionedParser Day -> OptionedParser TimeOfDay -> OptionedParser LocalTime

-- | Parse a zonedTime using defaultLocalTime and defaultTimeZone
defaultZonedTime :: OptionedParser ZonedTime

-- | Parse a LocalTime using defaultDay and defaultTime
defaultLocalTime :: OptionedParser LocalTime

-- | Parse a Timestamp using posixTime or defaultZonedTime
defaultTimestamp :: FromZonedTime a => OptionedParser a

-- | Parse an explicit timestamp, or a relative time (now, today,
--   yesterday, tomorrow)
extendTimestamp :: FromZonedTime a => OptionedParser a -> OptionedParser (ExtendedTimestamp a)

module Data.Time.Parsers

-- | Given a timestamp to use as the current time, purely convert an
--   ExtendedTimestamp to a timestamp
fromExtendedTimestamp :: (FromZonedTime a, ToZonedTime a) => a -> ExtendedTimestamp a -> a

-- | Use getZonedTime to get the current time, and use it to convert an
--   ExtendedTimestamp to a timestamp
fromExtendedTimestampIO :: (FromZonedTime a, ToZonedTime a) => ExtendedTimestamp a -> IO a
withOptions :: OptionedParser a -> Options -> Parser a
withDefaultOptions :: OptionedParser a -> Parser a

-- | Use given options and parser to parse a single Timestamp. always feeds
--   empty, so a Partial result is never returned. Ignores preceding and
--   trailing whitespace.
parseWithOptions :: Options -> OptionedParser a -> ByteString -> Result a

-- | Use default options to parse single Timestamp with a given parser,
--   ignoring preceding and trailing whitespace
parseWithDefaultOptions :: OptionedParser a -> ByteString -> Result a

-- | Default Options to use: Try YMD, then MDY, then DMY Accept <a>.</a>, '
--   ', <a>/</a>, <a>-</a> as separators. Use flags MakeRecent,
--   DefaultToUTC, DefaultToMidnight
defaultOptions :: Options
