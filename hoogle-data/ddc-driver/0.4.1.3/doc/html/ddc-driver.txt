-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Disciplined Disciple Compiler top-level driver.
--   
--   This defines the top-level commands supported by the compiler, such as
--   <tt>-make</tt> and <tt>-compile</tt>.
@package ddc-driver
@version 0.4.1.3

module DDC.Driver.Command.RewriteRules

-- | Load and typecheck a module's rewrite rules, using exported and
--   imported definitions from module
cmdTryReadRules :: (Ord n, Show n, Pretty n, NFData n) => Fragment n err -> FilePath -> Module () n -> IO (NamedRewriteRules () n)

module DDC.Driver.Output

-- | Output a document to the console.
outDoc :: Doc -> IO ()

-- | Output a document and newline to the console.
outDocLn :: Doc -> IO ()

-- | Output a string to the console.
outStr :: String -> IO ()

-- | Output a string and newline to the console.
outStrLn :: String -> IO ()

-- | Output chatty <tt>ok</tt> type responses. These are only displayed in
--   the Interactive and Batch interfaces.
chatStrLn :: String -> IO ()

module DDC.Driver.Config

-- | Configuration for main compiler stages.
data Config
Config :: Bool -> Bool -> Simplifier Int () Name -> Simplifier Int () Name -> ViaBackend -> Config -> Builder -> ConfigPretty -> Bool -> Maybe FilePath -> Maybe FilePath -> Bool -> Bool -> Bool -> Bool -> Config

-- | Dump intermediate code.
configDump :: Config -> Bool

-- | Use bidirectional type inference on the input code.
configInferTypes :: Config -> Bool

-- | Simplifiers to apply to intermediate code
configSimplLite :: Config -> Simplifier Int () Name
configSimplSalt :: Config -> Simplifier Int () Name

-- | Backend code generator to use
configViaBackend :: Config -> ViaBackend

-- | Runtime system configuration
configRuntime :: Config -> Config

-- | The builder to use for the target architecture
configBuilder :: Config -> Builder

-- | Core langauge pretty printer configuration.
configPretty :: Config -> ConfigPretty

-- | Suppress the #import prelude in C modules
configSuppressHashImports :: Config -> Bool

-- | Override output file
configOutputFile :: Config -> Maybe FilePath

-- | Override directory for build products
configOutputDir :: Config -> Maybe FilePath

-- | Keep intermediate .ddc.ll files
configKeepLlvmFiles :: Config -> Bool

-- | Keep intermediate .ddc.c files
configKeepSeaFiles :: Config -> Bool

-- | Keep intermediate .ddc.s files
configKeepAsmFiles :: Config -> Bool

-- | Avoid running the type checker where possible. When debugging program
--   transformations, use this to get the invalid code rather than just the
--   type error message.
configTaintAvoidTypeChecks :: Config -> Bool

-- | Core language pretty printer configuration.
data ConfigPretty
ConfigPretty :: Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> ConfigPretty
configPrettyUseLetCase :: ConfigPretty -> Bool
configPrettyVarTypes :: ConfigPretty -> Bool
configPrettyConTypes :: ConfigPretty -> Bool
configPrettySuppressImports :: ConfigPretty -> Bool
configPrettySuppressExports :: ConfigPretty -> Bool
configPrettySuppressLetTypes :: ConfigPretty -> Bool

-- | Default pretty printer configuration.
defaultConfigPretty :: ConfigPretty

-- | Convert a the pretty configuration into the mode to use to print a
--   module. We keep the <a>ConfigPretty</a> type separate from PrettyMode
--   because the former can be non-recursive with other types, and does not
--   need to be parameterised by the annotation or name types.
prettyModeOfConfig :: (Eq n, Pretty n) => ConfigPretty -> PrettyMode (Module a n)
data ViaBackend

-- | Compile via the C backend.
ViaC :: ViaBackend

-- | Compile via the LLVM backend.
ViaLLVM :: ViaBackend
instance Show ViaBackend

module DDC.Driver.Command.Read

-- | Load and typecheck a module.
cmdReadModule :: (Ord n, Show n, Pretty n, Pretty (err (AnTEC SourcePos n)), NFData n) => Config -> Fragment n err -> FilePath -> IO (Maybe (Module (AnTEC SourcePos n) n))
cmdReadModule' :: (Ord n, Show n, Pretty n, Pretty (err (AnTEC SourcePos n)), NFData n) => Bool -> Config -> Fragment n err -> FilePath -> IO (Maybe (Module (AnTEC SourcePos n) n))

module DDC.Driver.Dump

-- | If the Dump mode is set then produce a SinkFile to write a module to a
--   file, otherwise produce SinkDiscard to drop it on the floor.
dump :: Config -> Source -> String -> Sink

module DDC.Driver.Stage.Flow

-- | Type check Core Flow.
stageFlowLoad :: Config -> Source -> [PipeCore () Name] -> PipeText Name Error

-- | Prepare a Core Flow module for lowering.
stageFlowPrep :: Config -> Source -> [PipeCore () Name] -> PipeCore () Name

-- | Perform rate inference to transform vector operations to series
stageFlowRate :: Config -> Source -> [PipeCore () Name] -> PipeCore () Name

-- | Lower a Core Flow module. Is needs to already be prepped, and have
--   full type annotations.
stageFlowLower :: Config -> Config -> Source -> [PipeCore () Name] -> PipeCore (AnTEC () Name) Name

-- | Wind loop primops into tail recursive loops in a Core Flow module.
stageFlowWind :: Config -> Source -> [PipeCore () Name] -> PipeCore (AnTEC () Name) Name

module DDC.Driver.Stage.Lite

-- | Load and type check Core Lite.
stageLiteLoad :: Config -> Source -> [PipeCore () Name] -> PipeText Name Error

-- | Optimise Core Lite.
stageLiteOpt :: Config -> Source -> [PipeCore () Name] -> PipeCore () Name

-- | Convert Core Lite to Core Salt.
stageLiteToSalt :: Config -> Source -> [PipeCore () Name] -> PipeCore () Name

module DDC.Driver.Stage.Salt

-- | Load and type check a Core Salt module.
stageSaltLoad :: Config -> Source -> [PipeCore () Name] -> PipeText Name Error

-- | Optimise Core Salt.
stageSaltOpt :: Config -> Source -> [PipeCore () Name] -> PipeCore () Name

-- | Convert Core Salt to C code.
stageSaltToC :: Config -> Source -> Sink -> PipeCore () Name

-- | Convert Core Salt to LLVM.
stageSaltToLLVM :: Config -> Source -> [PipeLlvm] -> PipeCore () Name

-- | Compile Core Salt via C code.
stageCompileSalt :: Config -> Source -> FilePath -> Bool -> PipeCore () Name

-- | Compile LLVM code.
stageCompileLLVM :: Config -> Source -> FilePath -> Bool -> PipeLlvm

module DDC.Driver.Stage.Tetra

-- | Load and type check a Source Tetra module.
stageSourceTetraLoad :: Config -> Source -> [PipeCore (AnTEC SourcePos Name) Name] -> PipeText Name Error

-- | Load and type check a Core Tetra module.
stageTetraLoad :: Config -> Source -> [PipeCore () Name] -> PipeText Name Error

-- | Convert a Core Tetra module to Core Salt.
--   
--   This includes performing the Boxing transform.
stageTetraToSalt :: Config -> Source -> [PipeCore () Name] -> PipeCore () Name


-- | Compiler stages.
--   
--   A compiler stage is a sequence of standard transformations. Each of
--   the individual transformations are expressed as a pipeline from
--   <a>DDC.Build.Pipeline</a>. The stages here run several pipelines each,
--   and contain the code that can dump the intermediate program after each
--   transformation.
module DDC.Driver.Stage

-- | Configuration for main compiler stages.
data Config
Config :: Bool -> Bool -> Simplifier Int () Name -> Simplifier Int () Name -> ViaBackend -> Config -> Builder -> ConfigPretty -> Bool -> Maybe FilePath -> Maybe FilePath -> Bool -> Bool -> Bool -> Bool -> Config

-- | Dump intermediate code.
configDump :: Config -> Bool

-- | Use bidirectional type inference on the input code.
configInferTypes :: Config -> Bool

-- | Simplifiers to apply to intermediate code
configSimplLite :: Config -> Simplifier Int () Name
configSimplSalt :: Config -> Simplifier Int () Name

-- | Backend code generator to use
configViaBackend :: Config -> ViaBackend

-- | Runtime system configuration
configRuntime :: Config -> Config

-- | The builder to use for the target architecture
configBuilder :: Config -> Builder

-- | Core langauge pretty printer configuration.
configPretty :: Config -> ConfigPretty

-- | Suppress the #import prelude in C modules
configSuppressHashImports :: Config -> Bool

-- | Override output file
configOutputFile :: Config -> Maybe FilePath

-- | Override directory for build products
configOutputDir :: Config -> Maybe FilePath

-- | Keep intermediate .ddc.ll files
configKeepLlvmFiles :: Config -> Bool

-- | Keep intermediate .ddc.c files
configKeepSeaFiles :: Config -> Bool

-- | Keep intermediate .ddc.s files
configKeepAsmFiles :: Config -> Bool

-- | Avoid running the type checker where possible. When debugging program
--   transformations, use this to get the invalid code rather than just the
--   type error message.
configTaintAvoidTypeChecks :: Config -> Bool
data ViaBackend

-- | Compile via the C backend.
ViaC :: ViaBackend

-- | Compile via the LLVM backend.
ViaLLVM :: ViaBackend

-- | Load and type check a Source Tetra module.
stageSourceTetraLoad :: Config -> Source -> [PipeCore (AnTEC SourcePos Name) Name] -> PipeText Name Error

-- | Load and type check a Core Tetra module.
stageTetraLoad :: Config -> Source -> [PipeCore () Name] -> PipeText Name Error

-- | Convert a Core Tetra module to Core Salt.
--   
--   This includes performing the Boxing transform.
stageTetraToSalt :: Config -> Source -> [PipeCore () Name] -> PipeCore () Name

-- | Type check Core Flow.
stageFlowLoad :: Config -> Source -> [PipeCore () Name] -> PipeText Name Error

-- | Prepare a Core Flow module for lowering.
stageFlowPrep :: Config -> Source -> [PipeCore () Name] -> PipeCore () Name

-- | Perform rate inference to transform vector operations to series
stageFlowRate :: Config -> Source -> [PipeCore () Name] -> PipeCore () Name

-- | Lower a Core Flow module. Is needs to already be prepped, and have
--   full type annotations.
stageFlowLower :: Config -> Config -> Source -> [PipeCore () Name] -> PipeCore (AnTEC () Name) Name

-- | Wind loop primops into tail recursive loops in a Core Flow module.
stageFlowWind :: Config -> Source -> [PipeCore () Name] -> PipeCore (AnTEC () Name) Name

-- | Load and type check Core Lite.
stageLiteLoad :: Config -> Source -> [PipeCore () Name] -> PipeText Name Error

-- | Optimise Core Lite.
stageLiteOpt :: Config -> Source -> [PipeCore () Name] -> PipeCore () Name

-- | Convert Core Lite to Core Salt.
stageLiteToSalt :: Config -> Source -> [PipeCore () Name] -> PipeCore () Name

-- | Load and type check a Core Salt module.
stageSaltLoad :: Config -> Source -> [PipeCore () Name] -> PipeText Name Error

-- | Optimise Core Salt.
stageSaltOpt :: Config -> Source -> [PipeCore () Name] -> PipeCore () Name

-- | Convert Core Salt to C code.
stageSaltToC :: Config -> Source -> Sink -> PipeCore () Name

-- | Convert Core Salt to LLVM.
stageSaltToLLVM :: Config -> Source -> [PipeLlvm] -> PipeCore () Name

-- | Compile Core Salt via C code.
stageCompileSalt :: Config -> Source -> FilePath -> Bool -> PipeCore () Name

-- | Compile LLVM code.
stageCompileLLVM :: Config -> Source -> FilePath -> Bool -> PipeLlvm

module DDC.Driver.Command.Flow.Lower

-- | Lower a flow program to loop code.
cmdFlowLower :: Config -> Config -> Source -> String -> ErrorT String IO ()

module DDC.Driver.Command.Flow.Melt

-- | Thread a state token through the given flow program. This can't be
--   generic in the language fragment because we need to provide a specific
--   type to use for the world token, and new types for the effectful
--   combinators.
cmdFlowMelt :: Config -> Source -> String -> ErrorT String IO ()

module DDC.Driver.Command.Flow.Prep

-- | Prepare a Disciple Core Flow module for lowering.
cmdFlowPrep :: Config -> Source -> String -> ErrorT String IO ()

module DDC.Driver.Command.Flow.Rate

-- | Perform rate inference to transform vector operations to series
cmdFlowRate :: Config -> Source -> String -> ErrorT String IO ()

module DDC.Driver.Command.Flow.Thread

-- | Thread a state token through the given flow program. This can't be
--   generic in the language fragment because we need to provide a specific
--   type to use for the world token, and new types for the effectful
--   combinators.
cmdFlowThread :: Config -> Source -> String -> ErrorT String IO ()

module DDC.Driver.Command.Flow.Wind

-- | Lower a flow program to loop code.
cmdFlowWind :: Config -> Source -> String -> ErrorT String IO ()

module DDC.Driver.Command.Tetra.Boxing

-- | Prepare a Disciple Core Tetra module for lowering.
cmdTetraBoxing :: Config -> Source -> String -> ErrorT String IO ()

module DDC.Driver.Command.Compile

-- | Compile a source module into a <tt>.o</tt> file.
cmdCompile :: Config -> FilePath -> ErrorT String IO ()

module DDC.Driver.Command.BaseBuild
cmdBaseBuild :: Config -> ErrorT String IO ()

module DDC.Driver.Command.Check

-- | Parse and type-check a core module from a file, printing any errors to
--   <tt>stdout</tt>.
--   
--   This function handle fragments of Disciple Core, as well as Source
--   Tetra modules. The language to use is determined by inspecting the
--   file name extension.
cmdCheckFromFile :: Config -> FilePath -> ErrorT String IO ()

-- | Check a Disciple Source Tetra module from a file.
cmdCheckSourceTetraFromFile :: Config -> FilePath -> ErrorT String IO ()

-- | Check a Disciple Source Tetra module from a string. Any errors are
--   thrown in the <a>ErrorT</a> monad.
cmdCheckSourceTetraFromString :: Config -> Source -> String -> ErrorT String IO ()

-- | Check some fragment of Disciple core from a file.
cmdCheckCoreFromFile :: Config -> Language -> FilePath -> ErrorT String IO ()

-- | Parse and type-check a core module from a string.
cmdCheckCoreFromString :: (Ord n, Show n, Pretty n, Pretty (err (AnTEC SourcePos n))) => Fragment n err -> Source -> String -> Mode n -> ErrorT String IO (Module (AnTEC SourcePos n) n)

-- | Show the type of a type in the given universe.
cmdShowType :: Language -> Universe -> Source -> String -> IO ()

-- | Check if two types are equivlant.
cmdTypeEquiv :: Language -> Source -> String -> IO ()

-- | Parse a core spec, and return its kind.
cmdParseCheckType :: (Ord n, Show n, Pretty n, Pretty (err (AnTEC SourcePos n))) => Fragment n err -> Universe -> Source -> String -> IO (Maybe (Type n, Kind n))

-- | What mode we're performing type checking/inference in.
data Mode n :: * -> *

-- | Reconstruct the type of the expression, requiring type annotations on
--   parameters as well as type applications to already be present.
Recon :: Mode n

-- | The ascending smoke of incense. Synthesise the type of the expression,
--   producing unification variables for bidirectional type inference.
Synth :: Mode n

-- | The descending tongue of flame. Check the type of an expression
--   against this expected type, and unify expected types into unification
--   variables for bidirecional type inference.
Check :: Type n -> Mode n

-- | What components of the checked type to display.
data ShowSpecMode
ShowSpecAll :: ShowSpecMode
ShowSpecData :: ShowSpecMode
ShowSpecEffect :: ShowSpecMode
ShowSpecClosure :: ShowSpecMode

-- | Show the spec of an expression.
cmdShowSpec :: Language -> ShowSpecMode -> Bool -> Bool -> Source -> String -> IO ()

-- | Check expression and reconstruct type annotations on binders.
cmdExpRecon :: Language -> Source -> String -> IO ()

-- | Parse the given core expression, and return it, along with its type,
--   effect and closure.
--   
--   If the expression had a parse error, undefined vars, or type error
--   then print this to the console.
--   
--   We include a flag to override the language profile to allow partially
--   applied primitives. Although a paticular evaluator (or backend) may
--   not support partially applied primitives, we want to accept them if we
--   are only loading an expression to check its type.
cmdParseCheckExp :: (Ord n, Show n, Pretty n, Pretty (err (AnTEC SourcePos n))) => Fragment n err -> ModuleMap (AnTEC () n) n -> Mode n -> Bool -> Bool -> Source -> String -> IO (Maybe (Exp (AnTEC SourcePos n) n), Maybe CheckTrace)

-- | Show the type of a witness.
cmdShowWType :: Language -> Source -> String -> IO ()
instance Eq ShowSpecMode
instance Show ShowSpecMode

module DDC.Driver.Command.Trans

-- | Load and transform a module or expression, and print the result to
--   <tt>stdout</tt>.
--   
--   If the source starts with the 'module' keyword then treat it as one,
--   otherwise treat it as an expression.
cmdTransDetect :: Config -> Language -> Bool -> Source -> String -> ErrorT String IO ()

-- | Load and transform a module, and print the result to <tt>stdout</tt>.
cmdTransModule :: Config -> Language -> Bool -> Source -> String -> ErrorT String IO ()

-- | Load and transfrom an expression and print the result to
--   <tt>stdout</tt>.
cmdTransExp :: Config -> Language -> Bool -> Source -> String -> ErrorT String IO ()

-- | Load an expression and apply the current transformation.
cmdTransExpCont :: Config -> Bool -> Language -> (forall n. Typeable n => Exp (AnTEC () n) n -> IO ()) -> Source -> String -> IO ()

-- | Transform an expression, or display errors
transExp :: (Eq n, Ord n, Pretty n, Show n) => Bool -> Profile n -> KindEnv n -> TypeEnv n -> s -> Simplifier s (AnTEC () n) n -> Exp (AnTEC () n) n -> IO (Maybe (Exp (AnTEC () n) n))

module DDC.Driver.Command.Load

-- | Load and transform a module. The result is printed to <tt>stdout</tt>.
--   Any errors are thrown in the <a>ErrorT</a> monad.
--   
--   This function handle fragments of Disciple Core, as well as Source
--   Tetra modules. The language to use is determined by inspecting the
--   file name extension.
--   
--   We also take the specification of a simplifier to apply to the module.
cmdLoadFromFile :: Config -> Maybe String -> [FilePath] -> FilePath -> ErrorT String IO ()

-- | Load a Disciple Source Tetra module from a file. The result is printed
--   to <tt>stdout</tt>. Any errors are thrown in the <a>ErrorT</a> monad.
cmdLoadSourceTetraFromFile :: Config -> FilePath -> ErrorT String IO ()

-- | Load a Disciple Source Tetra module from a string. The result is
--   printed to <tt>stdout</tt>. Any errors are thrown in the <a>ErrorT</a>
--   monad.
cmdLoadSourceTetraFromString :: Config -> Source -> String -> ErrorT String IO ()

-- | Load a Disciple Core module from a file. The result is printed to
--   <tt>stdout</tt>.
cmdLoadCoreFromFile :: Config -> Language -> FilePath -> ErrorT String IO ()

-- | Load a Disciple Core module from a string. The result it printed to
--   <tt>stdout</tt>.
cmdLoadCoreFromString :: Config -> Language -> Source -> String -> ErrorT String IO ()

-- | Parse the simplifier defined in this string, and load it and all the
--   inliner templates into the language bundle.
cmdLoadSimplifier :: Config -> Language -> String -> [FilePath] -> ErrorT String IO Language

module DDC.Driver.Command.Make

-- | Make a source module into an executable.
cmdMake :: Config -> FilePath -> ErrorT String IO ()

module DDC.Driver.Command.Parse

-- | Parse a module. The result AST is printed to <tt>stdout</tt>. Any
--   errors are thrown in the <a>ErrorT</a> monad.
--   
--   This function handle fragments of Disciple Core, as well as Source
--   Tetra modules. The language to use is determined by inspecting the
--   file name extension.
cmdParseFromFile :: Config -> FilePath -> ErrorT String IO ()

-- | Parse a Disciple Source Tetra module from a file. The result AST is
--   printed to <tt>stdout</tt>. Any errors are thrown in the <a>ErrorT</a>
--   monad.
cmdParseSourceTetraFromFile :: Config -> FilePath -> ErrorT String IO ()

-- | Parse a Disciple Core module from a file. The AST is printed to
--   <tt>stdout</tt>. Any errors are thrown in the <a>ErrorT</a> monad.
cmdParseCoreFromFile :: Config -> Language -> FilePath -> ErrorT String IO ()

module DDC.Driver.Command.ToC

-- | Convert a module to C. The output is printed to <tt>stdout</tt>. Any
--   errors are thrown in the <a>ErrorT</a> monad.
cmdToSeaFromFile :: Config -> FilePath -> ErrorT String IO ()

-- | Convert Disciple Source Tetra to C. The result is printed to
--   <tt>stdout</tt>. Any errors are thrown in the <a>ErrorT</a> monad.
cmdToSeaSourceTetraFromFile :: Config -> FilePath -> ErrorT String IO ()

-- | Convert Disciple Source Tetra to C. The result is printed to
--   <tt>stdout</tt>. Any errors are thrown in the <a>ErrorT</a> monad.
cmdToSeaSourceTetraFromString :: Config -> Source -> String -> ErrorT String IO ()

-- | Parse, check and convert a Core module to Sea. Works for the
--   <tt>Tetra</tt>, <tt>Lite</tt> and <tt>Salt</tt> fragments. The result
--   is printed to <tt>stdout</tt>. Any errors are thrown in the
--   <a>ErrorT</a> monad.
cmdToSeaCoreFromFile :: Config -> Language -> FilePath -> ErrorT String IO ()

-- | Parse, check, and convert a module to C. The output is printed to
--   <tt>stdout</tt>. Any errors are thrown in the <a>ErrorT</a> monad.
cmdToSeaCoreFromString :: Config -> Language -> Source -> String -> ErrorT String IO ()

module DDC.Driver.Command.ToLlvm

-- | Convert a module to LLVM. The output is printed to <tt>stdout</tt>.
--   Any errors are thrown in the <a>ErrorT</a> monad.
cmdToLlvmFromFile :: Config -> FilePath -> ErrorT String IO ()

-- | Convert Disciple Source Tetra to LLVM. The result is printed to
--   <tt>stdout</tt>. Any errors are thrown in the <a>ErrorT</a> monad.
cmdToLlvmSourceTetraFromFile :: Config -> FilePath -> ErrorT String IO ()

-- | Convert Disciple Source Tetra to LLVM. The result is printed to
--   <tt>stdout</tt>. Any errors are thrown in the <a>ErrorT</a> monad.
cmdToLlvmSourceTetraFromString :: Config -> Source -> String -> ErrorT String IO ()

-- | Parse, check and convert a Core module to LLVM. Works for the
--   <tt>Tetra</tt>, <tt>Lite</tt> and <tt>Salt</tt> fragments. The result
--   is printed to <tt>stdout</tt>. Any errors are thrown in the
--   <a>ErrorT</a> monad.
cmdToLlvmCoreFromFile :: Config -> Language -> FilePath -> ErrorT String IO ()

-- | Parse, check and convert a Core module to LLVM. Works for the
--   <tt>Tetra</tt>, <tt>Lite</tt> and <tt>Salt</tt> fragments. The result
--   is printed to <tt>stdout</tt>. Any errors are thrown in the
--   <a>ErrorT</a> monad.
cmdToLlvmCoreFromString :: Config -> Language -> Source -> String -> ErrorT String IO ()

module DDC.Driver.Command.ToSalt

-- | Convert a module to Core Salt. The output is printed to
--   <tt>stdout</tt>. Any errors are thrown in the <a>ErrorT</a> monad.
cmdToSaltFromFile :: Config -> FilePath -> ErrorT String IO ()

-- | Convert Disciple Core Tetra to Disciple Core Salt. The result is
--   printed to <tt>stdout</tt>. Any errors are thrown in the <a>ErrorT</a>
--   monad.
cmdToSaltSourceTetraFromFile :: Config -> FilePath -> ErrorT String IO ()

-- | Convert Disciple Source Tetra to Disciple Core Salt. The result is
--   printed to <tt>stdout</tt>. Any errors are thrown in the <a>ErrorT</a>
--   monad.
cmdToSaltSourceTetraFromString :: Config -> Source -> String -> ErrorT String IO ()

-- | Convert some fragment of Disciple Core to Core Salt. Works for the
--   <tt>Lite</tt> and <tt>Tetra</tt> fragments. The result is printed to
--   <tt>stdout</tt>. Any errors are thrown in the <a>ErrorT</a> monad.
cmdToSaltCoreFromFile :: Config -> Language -> FilePath -> ErrorT String IO ()

-- | Convert some fragment of Disciple Core to Core Salt. Works for the
--   <tt>Lite</tt> and <tt>Tetra</tt> fragments. The result is printed to
--   <tt>stdout</tt>. Any errors are thrown in the <a>ErrorT</a> monad.
cmdToSaltCoreFromString :: Config -> Language -> Source -> String -> ErrorT String IO ()

module DDC.Driver.Command.Flow.Concretize

-- | Concretize rate variables to loop indices.
cmdFlowConcretize :: Config -> Source -> String -> ErrorT String IO ()
