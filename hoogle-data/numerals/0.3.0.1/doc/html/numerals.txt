-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Convert numbers to number words
--   
--   Convert numbers to number words in a number of languages. Each
--   language has its own module. The module name is based on one of the
--   ISO 639 Alpha codes. Each module contains one or more <a>cardinal</a>
--   functions and a <a>struct</a> function. The <a>cardinal</a> functions
--   directly convert cardinal numbers to a string-like representation of
--   their spoken form. The <a>struct</a> functions convert numbers to a
--   polymorphic representation of their grammatical structure. All
--   language modules are implemented using the <tt>numerals-base</tt>
--   package.
--   
--   The use of this package is best understood with some examples. Because
--   the results of conversion are polymorphic we need to choose a specific
--   type. For these examples we'll use simple strings. But any type that
--   has instances for <a>Monoid</a> and <a>IsString</a> will work. First
--   some English number names, both British and US variants:
--   
--   <pre>
--   &gt;&gt;&gt; import qualified Text.Numeral.Language.EN as EN
--   
--   &gt;&gt;&gt; EN.uk_cardinal 123 :: Maybe String
--   Just "one hundred and twenty-three"
--   
--   &gt;&gt;&gt; EN.us_cardinal (10^50 + 42) :: Maybe String
--   Just "one hundred quindecillion forty-two"
--   </pre>
--   
--   French, which contains some traces of a base 20 system:
--   
--   <pre>
--   &gt;&gt;&gt; import qualified Text.Numeral.Language.FR as FR
--   
--   &gt;&gt;&gt; FR.cardinal (-99) :: Maybe String
--   Just "moins quatre-vingt-dix-neuf"
--   </pre>
--   
--   Conversions can fail. Alamblak, a language spoken by a few people in
--   Papua New Guinea, has no representation for negative numbers:
--   
--   <pre>
--   &gt;&gt;&gt; import qualified Text.Numeral.Language.AMP as AMP
--   
--   &gt;&gt;&gt; AMP.cardinal (-3) :: Maybe String
--   Nothing
--   </pre>
--   
--   Some languages have multiple scripts and methods for writing number
--   names. Take Chinese for example, which can be written using Han
--   characters or transcribed to the Latin script using Pinyin.
--   
--   Traditional Chinese characters:
--   
--   <pre>
--   &gt;&gt;&gt; import qualified Text.Numeral.Language.ZH as ZH
--   
--   &gt;&gt;&gt; ZH.trad_cardinal 123456 :: Maybe String
--   Just "十二萬三千四百五十六"
--   </pre>
--   
--   Simplified characters for use in financial contexts:
--   
--   <pre>
--   &gt;&gt;&gt; ZH.finance_simpl_cardinal 123456 :: Maybe String
--   Just "拾贰万参仟肆伯伍拾陆"
--   </pre>
--   
--   Transcribed using Pinyin:
--   
--   <pre>
--   &gt;&gt;&gt; ZH.pinyin_cardinal 123456 :: Maybe String
--   Just "shíèrwàn sānqiān sìbǎi wǔshí liù"
--   </pre>
--   
--   Using the <a>struct</a> functions you can see the grammatical
--   structure of number names. Because the results of these functions are
--   polymorphic you need to specify a specific type.
--   
--   <pre>
--   &gt;&gt;&gt; import qualified Text.Numeral.Language.NL as NL
--   
--   &gt;&gt;&gt; NL.struct 123 :: Maybe Integer
--   Just 123
--   
--   &gt;&gt;&gt; import Text.Numeral
--   
--   &gt;&gt;&gt; NL.struct 123 :: Maybe Exp
--   Just (Add (Lit 100) (Add (Lit 3) (Mul (Lit 2) (Lit 10))))
--   </pre>
--   
--   Compare with:
--   
--   <pre>
--   &gt;&gt;&gt; NL.cardinal 123 :: Maybe String
--   Just "honderddrieëntwintig"
--   </pre>
--   
--   100 (honderd) + (3 (drie) + (ën) 2 (twin) * 10 (tig))
@package numerals
@version 0.3.0.1


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> zh</li>
--   <li><i><tt>ISO639-2B</tt></i> chi</li>
--   <li><i><tt>ISO639-2T</tt></i> zho</li>
--   <li><i><tt>ISO639-3</tt></i> cmn</li>
--   <li><i><tt>Native name</tt></i> </li>
--   <li><i><tt>English name</tt></i> Chinese</li>
--   </ul>
module Text.Numeral.Language.ZH
struct :: (Integral α, Unknown β, Lit β, Neg β, Add β, Mul β) => α -> β
trad_cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s
simpl_cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s
finance_trad_cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s
finance_simpl_cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s
pinyin_cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> yo</li>
--   <li><i><tt>ISO639-2</tt></i> yor</li>
--   <li><i><tt>ISO639-3</tt></i> yor</li>
--   <li><i><tt>Native name</tt></i> d Yorb</li>
--   <li><i><tt>English name</tt></i> Yoruba</li>
--   </ul>
module Text.Numeral.Language.YOR
cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Unknown β, Lit β, Add β, Sub β, Mul β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> wo</li>
--   <li><i><tt>ISO639-2</tt></i> wo1</li>
--   <li><i><tt>ISO639-3</tt></i> wo1</li>
--   <li><i><tt>Native name</tt></i> Wolof</li>
--   <li><i><tt>English name</tt></i> Wolof</li>
--   </ul>
module Text.Numeral.Language.WO
cardinal :: (Integral α, Scale α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Unknown β, Lit β, Add β, Mul β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> tr</li>
--   <li><i><tt>ISO639-2</tt></i> tur</li>
--   <li><i><tt>ISO639-3</tt></i> tur</li>
--   <li><i><tt>Native name</tt></i> Trke</li>
--   <li><i><tt>English name</tt></i> Turkish</li>
--   </ul>
module Text.Numeral.Language.TR
cardinal :: (Integral α, Scale α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Scale α, Unknown β, Lit β, Add β, Mul β, Scale β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> sv</li>
--   <li><i><tt>ISO639-2B</tt></i> swe</li>
--   <li><i><tt>ISO639-3</tt></i> swe</li>
--   <li><i><tt>Native name</tt></i> svenska</li>
--   <li><i><tt>English name</tt></i> Swedish</li>
--   </ul>
module Text.Numeral.Language.SV
cardinal :: (Integral α, Scale α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Scale α, Unknown β, Lit β, Neg β, Add β, Mul β, Scale β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> -</li>
--   <li><i><tt>ISO639-2</tt></i> sco</li>
--   <li><i><tt>ISO639-3</tt></i> sco</li>
--   <li><i><tt>Native name</tt></i> Scots</li>
--   <li><i><tt>English name</tt></i> Scots</li>
--   </ul>
module Text.Numeral.Language.SCO
cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Unknown β, Lit β, Add β, Mul β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> ru</li>
--   <li><i><tt>ISO639-2</tt></i> rus</li>
--   <li><i><tt>ISO639-3</tt></i> rus</li>
--   <li><i><tt>Native name</tt></i>  </li>
--   <li><i><tt>English name</tt></i> Russian</li>
--   </ul>
module Text.Numeral.Language.RU
cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Unknown β, Lit β, Neg β, Add β, Mul β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> pt</li>
--   <li><i><tt>ISO639-2</tt></i> por</li>
--   <li><i><tt>ISO639-3</tt></i> por</li>
--   <li><i><tt>Native name</tt></i> Portugus</li>
--   <li><i><tt>English name</tt></i> Portuguese</li>
--   </ul>
module Text.Numeral.Language.PT
cardinal :: (Integral α, Scale α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Scale α, Unknown β, Lit β, Neg β, Add β, Mul β, Scale β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> oj</li>
--   <li><i><tt>ISO639-2</tt></i> oji</li>
--   <li><i><tt>ISO639-3</tt></i> oji</li>
--   <li><i><tt>Native name</tt></i>  (Anishinaabemowin)</li>
--   <li><i><tt>English name</tt></i> Ojibwe</li>
--   </ul>
module Text.Numeral.Language.OJ
cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Unknown β, Lit β, Add β, Mul β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> -</li>
--   <li><i><tt>ISO639-2B</tt></i> -</li>
--   <li><i><tt>ISO639-3</tt></i> nqm</li>
--   <li><i><tt>Native name</tt></i> -</li>
--   <li><i><tt>English name</tt></i> Ndom</li>
--   </ul>
module Text.Numeral.Language.NQM
cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Unknown β, Lit β, Add β, Mul β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> nb</li>
--   <li><i><tt>ISO639-2B</tt></i> nob</li>
--   <li><i><tt>ISO639-3</tt></i> nob</li>
--   <li><i><tt>Native name</tt></i> Bokml</li>
--   <li><i><tt>English name</tt></i> Norwegian Bokml</li>
--   </ul>
module Text.Numeral.Language.NO
cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Unknown β, Lit β, Neg β, Add β, Mul β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> nl</li>
--   <li><i><tt>ISO639-2B</tt></i> dut</li>
--   <li><i><tt>ISO639-3</tt></i> nld</li>
--   <li><i><tt>Native name</tt></i> Nederlands</li>
--   <li><i><tt>English name</tt></i> Dutch</li>
--   </ul>
module Text.Numeral.Language.NL
cardinal :: (Integral α, Scale α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Scale α, Unknown β, Lit β, Neg β, Add β, Mul β, Scale β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> mg</li>
--   <li><i><tt>ISO639-2</tt></i> mlg</li>
--   <li><i><tt>ISO639-3</tt></i> mlg</li>
--   <li><i><tt>Native name</tt></i> -</li>
--   <li><i><tt>English name</tt></i> Malagasy</li>
--   </ul>
module Text.Numeral.Language.MG
cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Unknown β, Lit β, Add β, Mul β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> la</li>
--   <li><i><tt>ISO639-2B</tt></i> lat</li>
--   <li><i><tt>ISO639-3</tt></i> lat</li>
--   <li><i><tt>Native name</tt></i> Latine</li>
--   <li><i><tt>English name</tt></i> Latin</li>
--   </ul>
module Text.Numeral.Language.LA
cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Unknown β, Lit β, Add β, Sub β, Mul β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> ja</li>
--   <li><i><tt>ISO639-2B</tt></i> jpn</li>
--   <li><i><tt>ISO639-3</tt></i> jpn</li>
--   <li><i><tt>Native name</tt></i> </li>
--   <li><i><tt>English name</tt></i> Japanese</li>
--   </ul>
module Text.Numeral.Language.JA
struct :: (Integral α, Unknown β, Lit β, Neg β, Add β, Mul β) => α -> β
kanji_cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s
daiji_cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s
on'yomi_cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s
preferred_cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> it</li>
--   <li><i><tt>ISO639-2B</tt></i> ita</li>
--   <li><i><tt>ISO639-3</tt></i> ita</li>
--   <li><i><tt>Native name</tt></i> Italiano</li>
--   <li><i><tt>English name</tt></i> Italian</li>
--   </ul>
module Text.Numeral.Language.IT
cardinal :: (Integral α, Scale α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Scale α, Unknown β, Lit β, Neg β, Add β, Mul β, Scale β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> gv</li>
--   <li><i><tt>ISO639-2</tt></i> glv</li>
--   <li><i><tt>ISO639-3</tt></i> glv</li>
--   <li><i><tt>Native name</tt></i> Gaelg</li>
--   <li><i><tt>English name</tt></i> Manx</li>
--   </ul>
module Text.Numeral.Language.GV
cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Unknown β, Lit β, Add β, Mul β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> fr</li>
--   <li><i><tt>ISO639-2B</tt></i> fre</li>
--   <li><i><tt>ISO639-3</tt></i> fra</li>
--   <li><i><tt>Native name</tt></i> Franais</li>
--   <li><i><tt>English name</tt></i> French</li>
--   </ul>
module Text.Numeral.Language.FR
cardinal :: (Integral α, Scale α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Scale α, Unknown β, Lit β, Neg β, Add β, Mul β, Scale β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> es</li>
--   <li><i><tt>ISO639-2B</tt></i> spa</li>
--   <li><i><tt>ISO639-3</tt></i> spa</li>
--   <li><i><tt>Native name</tt></i> Espaol</li>
--   <li><i><tt>English name</tt></i> Spanish</li>
--   </ul>
module Text.Numeral.Language.ES
cardinal :: (Integral α, Scale α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Scale α, Unknown β, Lit β, Neg β, Add β, Mul β, Scale β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> eo</li>
--   <li><i><tt>ISO639-2B</tt></i> epo</li>
--   <li><i><tt>ISO639-3</tt></i> epo</li>
--   <li><i><tt>Native name</tt></i> Esperanto</li>
--   <li><i><tt>English name</tt></i> Esperanto</li>
--   </ul>
module Text.Numeral.Language.EO
cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Unknown β, Lit β, Add β, Mul β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> en</li>
--   <li><i><tt>ISO639-2B</tt></i> eng</li>
--   <li><i><tt>ISO639-3</tt></i> eng</li>
--   <li><i><tt>Native name</tt></i> English</li>
--   <li><i><tt>English name</tt></i> English</li>
--   </ul>
module Text.Numeral.Language.EN
uk_cardinal :: (Integral α, Scale α, Monoid s, IsString s) => α -> Maybe s
ukPelletier_cardinal :: (Integral α, Scale α, Monoid s, IsString s) => α -> Maybe s
us_cardinal :: (Integral α, Scale α, Monoid s, IsString s) => α -> Maybe s
shortScaleStruct :: (Integral α, Scale α, Unknown β, Lit β, Neg β, Add β, Mul β, Scale β) => α -> β
longScaleStruct :: (Integral α, Scale α, Unknown β, Lit β, Neg β, Add β, Mul β, Scale β) => α -> β
pelletierScaleStruct :: (Integral α, Scale α, Unknown β, Lit β, Neg β, Add β, Mul β, Scale β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> de</li>
--   <li><i><tt>ISO639-2B</tt></i> ger</li>
--   <li><i><tt>ISO639-3</tt></i> deu</li>
--   <li><i><tt>Native name</tt></i> Deutsch</li>
--   <li><i><tt>English name</tt></i> German</li>
--   </ul>
module Text.Numeral.Language.DE
cardinal :: (Integral α, Scale α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Scale α, Unknown β, Lit β, Neg β, Add β, Mul β, Scale β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> -</li>
--   <li><i><tt>ISO639-2B</tt></i> chn</li>
--   <li><i><tt>ISO639-3</tt></i> chn</li>
--   <li><i><tt>Native name</tt></i> -</li>
--   <li><i><tt>English name</tt></i> Chinook Jargon</li>
--   </ul>
module Text.Numeral.Language.CHN
cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Unknown β, Lit β, Add β, Mul β) => α -> β


-- | <ul>
--   <li><i><tt>ISO639-1</tt></i> -</li>
--   <li><i><tt>ISO639-2</tt></i> -</li>
--   <li><i><tt>ISO639-3</tt></i> amp</li>
--   <li><i><tt>Native name</tt></i> -</li>
--   <li><i><tt>English name</tt></i> Alamblak</li>
--   </ul>
module Text.Numeral.Language.AMP
cardinal :: (Integral α, Monoid s, IsString s) => α -> Maybe s
struct :: (Integral α, Unknown β, Lit β, Add β, Mul β) => α -> β
