-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Short-circuit values and expressions.
--   
--   Classes and functions for short-circuit values and expressions.
@package shortcircuit
@version 0.1


-- | Short-circuit evaluation.
module Control.Shortcircuit

-- | Types with a defined false value.
class HasFalse a
false :: HasFalse a => a

-- | Types with a defined true value.
class HasTrue a
true :: HasTrue a => a

-- | Types that support short circuits.
class Shortcircuit a
isTrue :: Shortcircuit a => a -> Bool

-- | Whether the value is false-like (i.e. not true-like).
isFalse :: Shortcircuit a => a -> Bool

-- | <tt>if then else</tt> generalised to <a>Shortcircuit</a>.
if' :: Shortcircuit a => a -> b -> b -> b

-- | The opposite of <a>if'</a>.
unless' :: Shortcircuit a => a -> b -> b -> b

-- | Like <a>if'</a>, but with different argument order, allowing infix
--   use.
(??) :: Shortcircuit a => b -> b -> a -> b

-- | <tt>Prelude.||</tt> generalised to <a>Shortcircuit</a>.
(||) :: Shortcircuit a => a -> a -> a

-- | <tt>Prelude.&amp;&amp;</tt> generalised to <a>Shortcircuit</a>.
(&&) :: Shortcircuit a => a -> a -> a

-- | Returns the first true-ish value from a list, or <a>false</a>.
firstTrueOf :: (Shortcircuit a, HasFalse a) => [a] -> a

-- | Returns the last false-ish value from a list, or <a>true</a>.
lastFalseOf :: (Shortcircuit a, HasTrue a) => [a] -> a

-- | Short-circuit two actions, performing the second only if the first
--   returned a false-ish value.
orM :: (Monad m, Shortcircuit a) => m a -> m a -> m a

-- | Short-circuit two actions, performing the second only if the first
--   returned a true-ish value.
andM :: (Monad m, Shortcircuit a) => m a -> m a -> m a

-- | Short-circuit a list of actions, performing only until a true-ish
--   value is found, or the list exhausted.
firstTrueOfM :: (Monad m, Shortcircuit a, HasFalse a) => [m a] -> m a

-- | Short-circuit a list of actions, performing only until a false-ish
--   value is found, or the list exhausted.
lastFalseOfM :: (Monad m, Shortcircuit a, HasTrue a) => [m a] -> m a
instance Shortcircuit (Either a b)
instance Shortcircuit (Maybe a)
instance HasFalse (Maybe a)
instance Shortcircuit Bool
instance HasFalse Bool
instance HasTrue Bool
