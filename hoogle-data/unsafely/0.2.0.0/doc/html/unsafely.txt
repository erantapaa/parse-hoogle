-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Flexible access control for unsafe operations and instances
--   
@package unsafely
@version 0.2.0.0


-- | Really unsafe module to provide internal interface. This module should
--   be imported if you wish to allow the unsafe computation globally.
--   
--   But be careful: the unsafety contaminates entire the program once you
--   write the instance for <tt>ReallyUnsafe</tt> somewhere.
module Data.Constraint.Unsafely.Really

-- | The trick type-class to prevent providing global instances for
--   <tt>Unsafely</tt>. This class is not exported in
--   <a>Data.Constraint.Unsafely</a>, so if you want to permit unsafe
--   operations globally, you should import this module directly.
class ReallyUnsafely t

-- | The constraint for the instances which might be <i>unsafe</i> in some
--   sence. <tt>t</tt> in <tt>Unsafely t</tt> is the dummy tag for some
--   series of <i>unsafe</i> operations.
class ReallyUnsafely t => Unsafely (t :: k)

-- | Evaluate the value which might be unsafe.
unsafely :: proxy t -> (Unsafely t => a) -> a
instance ReallyUnsafely t => Unsafely t

module Data.Constraint.Unsafely

-- | The constraint for the instances which might be <i>unsafe</i> in some
--   sence. <tt>t</tt> in <tt>Unsafely t</tt> is the dummy tag for some
--   series of <i>unsafe</i> operations.
class ReallyUnsafely t => Unsafely (t :: k)

-- | Evaluate the value which might be unsafe.
unsafely :: proxy t -> (Unsafely t => a) -> a
