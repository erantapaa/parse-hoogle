-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The Elm language module.
--   
@package Elm
@version 0.13

module Elm.Internal.Documentation
data Document
Doc :: String -> String -> [Entry] -> Document
moduleName :: Document -> String
structure :: Document -> String
entries :: Document -> [Entry]
data Entry
Entry :: String -> String -> String -> Maybe (String, Int) -> Entry
name :: Entry -> String
comment :: Entry -> String
raw :: Entry -> String
assocPrec :: Entry -> Maybe (String, Int)
data Content
Markdown :: String -> Content
Value :: String -> Content
instance Show Entry
instance Show Document
instance Show Content
instance FromJSON Entry
instance FromJSON Document

module Elm.Internal.Version
elmVersion :: Version
data Version
V :: [Int] -> String -> Version
tagless :: Version -> Bool
fromString :: String -> Maybe Version
instance Typeable Version
instance Eq Version
instance ToJSON Version
instance FromJSON Version
instance Binary Version
instance Show Version
instance Ord Version

module Elm.Internal.Paths

-- | Name of directory for all of a project's dependencies.
dependencyDirectory :: FilePath

-- | Name of the dependency file, specifying dependencies and other
--   metadata for building and sharing projects.
dependencyFile :: FilePath

-- | The absolute path to Elm's runtime system.
runtime :: FilePath

-- | The absolute path to Elm's core library documentation.
docs :: FilePath


-- | This module exports functions for compiling Elm to JS.
module Elm.Internal.Utils

-- | This function compiles Elm code to JavaScript. It will return either
--   an error message or the compiled JS code.
compile :: String -> Either String String

-- | This function extracts the module name of a given source program.
moduleName :: String -> Maybe String

-- | This function extracts the module name and imported modules from a
--   given source program.
nameAndImports :: String -> Maybe (String, [String])

module Elm.Internal.Name
data Name
Name :: String -> String -> Name
user :: Name -> String
project :: Name -> String
toFilePath :: Name -> FilePath
fromString :: String -> Maybe Name
fromString' :: String -> ErrorT String IO Name
errorMsg :: [Char] -> String
instance Typeable Name
instance Eq Name
instance Ord Name
instance ToJSON Name
instance FromJSON Name
instance Show Name
instance Binary Name

module Elm.Internal.Dependencies
data Deps
Deps :: Name -> Version -> String -> String -> String -> String -> [String] -> [String] -> Version -> [(Name, Version)] -> Deps
name :: Deps -> Name
version :: Deps -> Version
summary :: Deps -> String
description :: Deps -> String
license :: Deps -> String
repo :: Deps -> String
exposed :: Deps -> [String]
native :: Deps -> [String]
elmVersion :: Deps -> Version
dependencies :: Deps -> [(Name, Version)]
getDependencies :: Object -> Parser [(Name, Version)]
get :: FromJSON a => Object -> Text -> String -> Parser a
repoToName :: String -> Either String Name
withDeps :: FilePath -> (Deps -> ErrorT String IO a) -> ErrorT String IO a
depsAt :: FilePath -> ErrorT String IO Deps

-- | Encode dependencies in a canonical JSON format
prettyJSON :: Deps -> ByteString
instance Show Deps
instance Eq Deps
instance Ord Deps
instance FromJSON Deps
instance ToJSON Deps
