-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | HMAC Authentication Middleware for WAI
--   
@package wai-middleware-hmac
@version 0.1.0.0


module Network.Wai.Middleware.HmacAuth

-- | Perform Hmac authentication.
--   
--   Uses a lookup function to retrieve the secret used to sign the
--   incoming request.
--   
--   <pre>
--   let lookupSecret key = case key of
--                            "client" -&gt; Just (Secret "secretkey")
--                            _        -&gt; Nothing
--        authware = hmacAuth lookupSecret defaultHmacAuth
--   Warp.run (read port) $ authware $ app
--   </pre>
hmacAuth :: HashAlgorithm alg => LookupSecret IO -> HmacAuthSettings alg -> Middleware

-- | Sign a request using HMAC
--   
--   signature = base64( hmac-sha1 (key, utf8( stringtosign ) ) )
--   
--   TODO hash contents throught MonadState using a type to make sure all
--   the components are there or err.
signRequest :: (MonadIO m, HashAlgorithm alg) => HmacAuthSettings alg -> Secret -> Request -> m Request

-- | Class representing hashing algorithms.
--   
--   The hash algorithm is built over 3 primitives:
--   
--   <ul>
--   <li>init : create a new hashing context</li>
--   <li>updates : update the hashing context with some strict bytestrings
--   and return the new context</li>
--   <li>finalize : finalize the context into a digest</li>
--   </ul>
class HashAlgorithm a

-- | SHA512 cryptographic hash
data SHA512 :: *

-- | SHA256 cryptographic hash
data SHA256 :: *

-- | SHA1 cryptographic hash
data SHA1 :: *

-- | MD5 cryptographic hash
data MD5 :: *

-- | Various settings for HMAC authentication
data HmacAuthSettings alg
HmacAuthSettings :: !(CI ByteString) -> !(CI ByteString) -> !(Request -> IO Bool) -> !(HmacAuthException -> Application) -> alg -> !ByteString -> !HmacStrategy -> !Bool -> HmacAuthSettings alg

-- | Name of the header which carries the auth key
authKeyHeader :: HmacAuthSettings alg -> !(CI ByteString)

-- | Name of the HTTP Header which carries the timestamp
authTimestampHeader :: HmacAuthSettings alg -> !(CI ByteString)

-- | Determines whether the request needs authentication
authIsProtected :: HmacAuthSettings alg -> !(Request -> IO Bool)

-- | Function to run when authentication is unsuccessful
authOnNoAuth :: HmacAuthSettings alg -> !(HmacAuthException -> Application)

-- | HMAC signing algorithm
--   
--   MD5, SHA1, SHA256, and SHA512 supported
authAlgorithm :: HmacAuthSettings alg -> alg

-- | Realm provider.
authRealm :: HmacAuthSettings alg -> !ByteString

-- | Use Header or Query spec.
--   
--   Query spec is useful for sharing encoded URLs
authSpec :: HmacAuthSettings alg -> !HmacStrategy

-- | Print debug output
authDebug :: HmacAuthSettings alg -> !Bool

-- | Hmac requests can be accepted through GET params or Http headers.
data HmacStrategy

-- | Look for auth info in HTTP Headers
Header :: HmacStrategy

-- | Default HMAC authentication settings
--   
--   Uses SHA512 as default signing algorithm
--   
--   <tt>authOnNoAuth</tt> responds with: <tt> WWW-Authenticate: Realm=""
--   HMAC-MD5;HMAC-SHA1;HMAC-SHA256;HMAC-SHA512" [...] Provide valid
--   credentials </tt>
defaultHmacAuthSettings :: HmacAuthSettings SHA512

-- | HMAC Secret Key
newtype Secret
Secret :: ByteString -> Secret

-- | HMAC Public Key
newtype Key
Key :: ByteString -> Key
instance Eq Key
instance Show Key
instance Eq Secret
instance Show Secret
instance Show HmacStrategy
instance Show HmacAuthException
