-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Streaming Excel file generation and parsing
--   
@package xlsior
@version 0.1.0.1

module Xlsx.Types
type Cell = (CellValue, Maybe Text)
data CellValue
InlineString :: Text -> CellValue
SharedString :: Int -> CellValue
Number :: Scientific -> CellValue
Boolean :: Bool -> CellValue
Date :: Text -> CellValue
Error :: Text -> CellValue
Empty :: CellValue
type Row = Int -> Markup
class FromCell a
fromCell :: (FromCell a, Applicative m, Monad m) => Cell -> ReaderT (Vector Text) m a
class FromRow a
fromRow :: (FromRow a, Applicative m, Monad m) => [((Int, Int), Cell)] -> ReaderT (Vector Text) m a
class ToCell a
toCell :: ToCell a => a -> Markup
class ToRow a
toRow :: ToRow a => a -> Row
unsparse :: [((Int, Int), Cell)] -> [Cell]

module Xlsx.Sheet
decl :: Markup
renderSheet :: [Row] -> Markup

module Xlsx.Parse
parseCoord :: Text -> Maybe (Int, Int)
tagLocal :: MonadThrow m => Text -> AttrParser a -> (a -> ConduitM Event o m b) -> ConduitM Event o m (Maybe b)
tagLocalNoAttr :: MonadThrow m => Text -> ConduitM Event o m b -> ConduitM Event o m (Maybe b)
sharedStringSink :: (Monad m, MonadThrow m) => Sink ByteString m (Vector Text)
rawRows :: (Monad m, MonadThrow m) => ConduitM ByteString [((Int, Int), Cell)] m ()
unsparseSheet :: (Monad m, MonadThrow m) => ConduitM [((Int, Int), Cell)] [((Int, Int), Cell)] m ()
sheetRows :: (Applicative m, Monad m, MonadThrow m, FromRow a) => ConduitM ByteString a (ReaderT (Vector Text) m) ()

module Xlsx.Writer
toRow :: ToRow a => a -> Row
sheetsLBS :: UTCTime -> Text -> [(Text, [Row])] -> ByteString
saveXlsx :: Text -> [(Text, [Row])] -> FilePath -> IO ()
