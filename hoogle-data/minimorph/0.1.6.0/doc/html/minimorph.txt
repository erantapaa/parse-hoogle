-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | English spelling functions with an emphasis on simplicity.
--   
@package minimorph
@version 0.1.6.0

module NLP.Minimorph.Number

-- | Singular and Plural.
data SingPlu a
SP :: a -> a -> SingPlu a
sg :: SingPlu a -> a
pl :: SingPlu a -> a
data Number
Singular :: Number
Plural :: Number
fromSP :: Number -> SingPlu a -> a
instance Show a => Show (SingPlu a)
instance Eq a => Eq (SingPlu a)
instance Eq Number
instance Show Number


-- | Text utility functions.
module NLP.Minimorph.Util

-- | <tt>tTakeEnd n t</tt> returns the last <tt>n</tt> letters of
--   <tt>t</tt>.
tTakeEnd :: Int -> Text -> Text

-- | <tt>tDropEnd n t</tt> drops the last <tt>n</tt> letters of <tt>t</tt>.
tDropEnd :: Int -> Text -> Text

-- | An infix synonym for <a>mappend</a>.
--   
--   <i>Since: 4.5.0.0</i>
(<>) :: Monoid m => m -> m -> m

-- | Separated by space unless one of them is empty (in which case just the
--   non-empty one).
(<+>) :: Text -> Text -> Text

-- | Show a value in Text format.
tshow :: Show a => a -> Text

-- | <i>Deprecated: The function is renamed to <tt>tshow</tt>.</i>
showT :: Show a => a -> Text


-- | Simple default rules for English morphology
module NLP.Minimorph.English

-- | No Oxford commas, alas.
--   
--   <pre>
--   commas "and" "foo bar"       == "foo and bar"
--   commas "and" "foo, bar, baz" == "foo, bar and baz"
--   </pre>
commas :: Text -> [Text] -> Text

-- | <pre>
--   cardinal 1 == "one"
--   cardinal 2 == "two"
--   cardinal 3 == "three"
--   cardinal 11 == "11"
--   </pre>
cardinal :: Int -> Text

-- | <pre>
--   ordinalNotSpelled 1 == "1st"
--   ordinalNotSpelled 2 == "2nd"
--   ordinalNotSpelled 11 == "11th"
--   </pre>
ordinalNotSpelled :: Int -> Text

-- | <pre>
--   ordinal 1 == "first"
--   ordinal 2 == "second"
--   ordinal 3 == "third"
--   ordinal 11 == "11th"
--   ordinal 42 == "42nd"
--   </pre>
ordinal :: Int -> Text

-- | Heuristics for English plural for an unknown noun.
--   
--   <pre>
--   defaultNounPlural "egg"    == "eggs"
--   defaultNounPlural "patch"  == "patches"
--   defaultNounPlural "boy"    == "boys"
--   defaultNounPlural "spy"    == "spies"
--   defaultNounPlural "thesis" == "theses"
--   </pre>
--   
--   
--   <a>http://www.paulnoll.com/Books/Clear-English/English-plurals-1.html</a>
--   <a>http://en.wikipedia.org/wiki/English_plural</a>
defaultNounPlural :: Text -> Text

-- | Heuristics for 3rd person singular and past participle for an unknown
--   regular verb. Doubling of final consonants can be handled via a table
--   of (partially) irrefular verbs.
--   
--   <pre>
--   defaultVerbStuff "walk"  == ("walks",  "walked")
--   defaultVerbStuff "push"  == ("pushes", "pushed")
--   defaultVerbStuff "play"  == ("plays",  "played")
--   defaultVerbStuff "cry"   == ("cries",  "cried")
--   </pre>
defaultVerbStuff :: Text -> (Text, Text)

-- | Heuristics for a possesive form for an unknown noun.
--   
--   <pre>
--   defaultPossesive "pass"        == "pass'"
--   defaultPossesive "SOS"         == "SOS'"
--   defaultPossesive "Mr Blinkin'" == "Mr Blinkin's"
--   defaultPossesive "cry"         == "cry's"
--   </pre>
defaultPossesive :: Text -> Text
anNumerals :: [Text]

-- | <pre>
--   indefiniteDet "dog"  == "a"
--   indefiniteDet "egg"  == "an"
--   indefiniteDet "ewe"  == "a"
--   indefiniteDet "ewok" == "an"
--   indefiniteDet "8th"  == "an"
--   </pre>
indefiniteDet :: Text -> Text

-- | True if the indefinite determiner for a word would normally be
--   <tt>an</tt> as opposed to <tt>a</tt>.
wantsAn :: Text -> Bool

-- | Variant of <a>wantsAn</a> that assumes the input string is pronounced
--   one letter at a time.
--   
--   <pre>
--   wantsAn        "x-ray" == False
--   acronymWantsAn "x-ray" == True
--   </pre>
--   
--   Note that this won't do the right thing for words like
--   <tt><a>SCUBA</a></tt>. You really have to reserve it for those
--   separate-letter acronyms.
acronymWantsAn :: Text -> Bool

-- | True if all upper case from second letter and up.
--   
--   <pre>
--   looksLikeAcronym "DNA"  == True
--   looksLikeAcronym "tRNA" == True
--   looksLikeAcronym "x"    == False
--   looksLikeAcronym "DnA"  == False
--   </pre>
looksLikeAcronym :: Text -> Bool

-- | True if the first word (separating on either - or space) looks like an
--   acronym.
startsWithAcronym :: Text -> Bool

-- | Ends with a sh sound.
hasSibilantSuffix :: Text -> Bool

-- | Starts with a semivowel.
hasSemivowelPrefix :: Text -> Bool

-- | Starts with a vowel-y U sound
hasVowel_U_Prefix :: Text -> Bool

-- | Last two letters are a consonant and <tt>y</tt>.
hasCySuffix :: Text -> Bool

-- | Last two letters are a consonant and <tt>o</tt>.
hasCoSuffix :: Text -> Bool

-- | Is a vowel.
isVowel :: Char -> Bool

-- | Letters that when pronounced independently in English sound like they
--   begin with vowels.
--   
--   <pre>
--   isLetterWithInitialVowelSound 'r' == True
--   isLetterWithInitialVowelSound 'k' == False
--   </pre>
--   
--   (In the above, <tt><tt>r</tt></tt> is pronounced <tt>"are"</tt>, but
--   <tt><tt>k</tt></tt> is pronounced <tt>"kay"</tt>.)
isLetterWithInitialVowelSound :: Char -> Bool

-- | Is a consonant.
isConsonant :: Char -> Bool
