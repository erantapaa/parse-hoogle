-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Communication Free Learning-based constraint solver
--   
@package DCFL
@version 0.1.6.0

module Data.DCFL

-- | Probability distribution; generally associated with a <a>Variable</a>.
data Distribution

-- | The integer values a <a>Variable</a> can take on.
data Values

-- | Each <a>Variable</a> has a finite set of possible values, a value it
--   holds and a probability distribution over the set of possible values.
data Variable

-- | Each constraint function ([Int] -&gt; Bool) is associated with a
--   certain set of variables. <a>ConstraintEl</a> represents this
--   relationship for a given constraint function.
data ConstraintEl

-- | Return value of <a>solve</a>.
data Solved

-- | Initialize a distribution with each possible value having the same
--   probability. For example, initDistribution 5 gives <tt>
--   <a>Distribution</a> [0.2, 0.2, 0.2, 0.2, 0.2]. </tt>
initDistribution :: Int -> Distribution

-- | Creates a cummulative <a>Distribution</a> out of a given
--   <a>Distribution</a>.
cummDistribution :: Distribution -> Distribution

-- | Check if the constraints have been solved by looking at the
--   distributions of each <a>Variable</a>.
checkSolved :: [Variable] -> Bool

-- | Randomizes the value of a single <a>Variable</a> in a list of
--   <a>Variable</a>.
randomizeSingle :: Int -> [Variable] -> [IO Variable]

-- | Randomize all the variables in a list.
randomize :: [Variable] -> [IO Variable]

-- | Print variables.
printVariables :: [Variable] -> [IO ()]

-- | Get the <tt>Constraint</tt>s associated with a <a>Variable</a> of
--   index <tt>n</tt> in the list of <a>Variable</a>s.
getConstraintsFor :: Int -> [ConstraintEl] -> [[Int] -> Bool]

-- | Get the constraint functions out of a list of <a>ConstraintEl</a>s.
justConstraints :: [ConstraintEl] -> [[Int] -> Bool]

-- | This is the moost important function within this library. Given a list
--   of <a>Variable</a> and a list of <a>ConstraintEl</a>, the library uses
--   the Communcation Free Learning Algorithm to return a <a>Solved</a>
--   value. See <tt>solveThreaded</tt> for a parallelized implementation.
solve :: [Variable] -> [ConstraintEl] -> IO Solved

-- | Either randomize or let a variable stay, depending on what the
--   constraint check tells us.
update :: Int -> [Variable] -> [ConstraintEl] -> IO [Variable]

-- | Update each variable in the variable set based on the constraint set
--   value.
updateEach :: [Variable] -> [ConstraintEl] -> IO [Variable]

-- | Update the variable set <tt>n</tt> number of times.
updateEachTimes :: [Variable] -> [ConstraintEl] -> Int -> IO [Variable]

-- | Solve the constraint set in parallel using Haskell threads. In order
--   for the solution to be parallelized, the program using DCFL must be
--   compiled with GHC's '-threaded' option.
solveParallel :: [Variable] -> [ConstraintEl] -> IO Solved
updateEachTimesParallel :: [Variable] -> [ConstraintEl] -> Int -> IO [Variable]

-- | Updates each variable in the variable set a number of times and does
--   each variable's update in a separate thread.
updateEachParallel :: [Variable] -> [ConstraintEl] -> IO [Variable]
instance Show Distribution
instance Show Values
instance Show Variable
instance Show ConstraintEl
instance NFData Variable
instance NFData Distribution
