-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple functions for loading config files
--   
@package fez-conf
@version 1.0.3


-- | Simple functions for loading config files
--   
--   This module was motived by the desire to factor this repetitive
--   configuration file parsing code out of several of my projects.
--   
--   These functions offer very simple behavior which may be fine for many
--   tasks. For those needing something that does more, including building
--   and saving config data and .ini-style [section]s, may I suggest
--   Data.ConfigFile
--   <a>http://hackage.haskell.org/cgi-bin/hackage-scripts/package/ConfigFile</a>.

-- | <i>Deprecated: Use TCE.Data.KVConf from tce-conf instead</i>
module Fez.Data.Conf
type ConfMap = Map String String

-- | Parse config file data into a simple (Map String String).
--   
--   For example, this:
--   
--   <pre>
--   --- file start ---
--   foo=one
--   # a comment
--   
--   bar
--   baz-blorp=2
--   --- file end ---
--   </pre>
--   
--   becomes:
--   
--   <pre>
--   fromList [("foo","one"),("bar",""),("baz-blorp","2")]
--   </pre>
--   
--   Comments (prefixed with #) and blank lines in the config file are
--   discarded.
parseToMap :: String -> ConfMap

-- | Parse config file data into what looks like long args on a command
--   line.
--   
--   Sometimes it's convenient to be able to supply commonly used long args
--   in a config file. The idea here is you can prepend this [String] to
--   your other command line args and send the whole mess to your
--   System.Console.GetOpt-based code.
--   
--   For example, this:
--   
--   <pre>
--   --- file start ---
--   foo=one
--   # a comment
--   
--   bar
--   baz-blorp=2
--   --- file end ---
--   </pre>
--   
--   becomes:
--   
--   <pre>
--   [ "--foo=one", "--bar", "--baz-blorp=2" ]
--   </pre>
--   
--   As above, comments (prefixed with #) and blank lines in the config
--   file are discarded.
parseToArgs :: String -> [String]
