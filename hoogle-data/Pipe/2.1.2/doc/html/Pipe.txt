-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Process piping library
--   
--   A library with operations for piping data through a pipeline of
--   processes.
@package Pipe
@version 2.1.2


-- | Operations for piping data through multiple processes.
--   
--   <a>pipe</a> is the most general function, with <a>pipe'</a> and
--   <a>pipeString</a> provided for convenience purposes.
--   
--   <a>handlePipe</a>, <a>filePipe</a>, and <a>filePipe'</a> are for the
--   common file-to-file case and behave somewhat differently.
--   
--   Whenever specifying a path to a process, explicitly specifying the
--   current directory is recommended for portability. That is: use "./foo"
--   instead of "foo", for instance.
--   
--   On Windows, appending ".exe" to process paths is attempted if the
--   invocation fails.
module System.Process.Pipe

-- | Pipes the input, using the given writer and reader functions, through
--   all the commands named, in the given working directory. Returns the
--   result.
--   
--   An exception is thrown if the list of programs is empty.
--   
--   The writer function is called in a <tt>forkIO'</tt>d thread, allowing
--   this to be lazy. That thread also calls <a>waitForProcess</a> when
--   done writing so that the processes get terminated cleanly; this means
--   that the runtime should be multithreaded, or the call will block all
--   threads and this function may deadlock. (In GHC, compile with
--   <tt>-threaded</tt>.)
--   
--   SIGPIPE is ignored in the writer thread. Likewise, any IOExceptions
--   are caught and ignored.
pipe :: (Handle -> a -> IO ()) -> (Handle -> IO b) -> FilePath -> [(FilePath, [String])] -> a -> IO b

-- | A convenience function for when you don't care about the working
--   directory, <a>pipe'</a> uses ".".
pipe' :: (Handle -> a -> IO ()) -> (Handle -> IO b) -> [(FilePath, [String])] -> a -> IO b

-- | A convenience function for the common case of piping from a
--   <a>String</a> to a <a>String</a>.
pipeString :: [(FilePath, [String])] -> String -> IO String

-- | A function for the common case of piping from a <a>Handle</a> to a
--   <a>Handle</a>.
--   
--   Note that this is not merely a convenient frontend for <a>pipe</a> and
--   is fundamentally different in the following ways:
--   
--   <ul>
--   <li>A null list of programs is allowed, in which case the contents of
--   the input Handle are simply written to the output Handle.</li>
--   <li>This function is not lazy and returns only when the writing has
--   been completed.</li>
--   </ul>
handlePipe :: FilePath -> [(FilePath, [String])] -> Handle -> Handle -> IO ()

-- | A convenience function for <a>handlePipe</a>. Opens the given files in
--   binary mode.
filePipe :: FilePath -> [(FilePath, [String])] -> FilePath -> FilePath -> IO ()

-- | Like <a>filePipe</a>, but the working directory used is the directory
--   component of the path to the first file.
filePipe' :: [(FilePath, [String])] -> FilePath -> FilePath -> IO ()
