-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Lenses for Hexpat.
--   
@package hexpat-lens
@version 0.1.3


-- | Isos on <a>QName</a>s and <a>NName</a>s.
--   
--   Lenses will provide the power to do very concise XML tree diving. This
--   module provides a less general interface to the Hexpat datatypes via
--   lenses.
module Text.XML.Expat.Lens.Names
prefix :: Lens' (QName text) (Maybe text)
namespace :: Lens' (NName text) (Maybe text)

-- | Iso between a node marked by a "stringy" name to one using a qualified
--   <a>QName</a>.
qualified :: (GenericXMLString text, NodeClass n c) => Iso' (n c text text) (n c (QName text) text)

-- | <a>Prism</a> between a node marked by a qualified <a>QName</a> name to
--   one using a namespaced <a>NName</a>. Normally this throws an exception
--   if the namespace is non-standard, but here the <a>Prism</a> simply
--   fails if incompatible.
namespaced :: (GenericXMLString text, NodeClass n c, Show text, Ord text, NFData (n c (NName text) text)) => Prism' (n c (QName text) text) (n c (NName text) text)
class HasLocalPart a
localPart :: HasLocalPart a => Lens' (a t) t
instance HasLocalPart NName
instance HasLocalPart QName


-- | A Hexpat lens module for generic tags.
--   
--   Lenses provide power to do very concise XML tree diving. This module
--   provides a less general interface to the Hexpat datatypes via lenses.
module Text.XML.Expat.Lens.Generic

-- | Traverses the name of an <a>Element</a>. This is as an <a>Affine</a>,
--   or 0-or-1 target, <a>Traversal</a>. In regex terms, you can think of
--   it like the <tt>?</tt> suffix modifier.
name :: Traversal' (NodeG f tag text) tag

-- | Traverses to the list of attributes of an <a>Element</a>. This is as
--   an <a>Affine</a>, or 0-or-1 target, <a>Traversal</a>. In regex terms,
--   you can think of it like the <tt>?</tt> suffix modifier.
attributes :: Traversal' (NodeG f tag text) (Attributes tag text)

-- | Prismatic access to the text of a <a>Text</a> node. This is more
--   powerful than <a>name</a>, <a>children</a>, and <a>attributes</a>
--   since it can be <a>Review</a>ed.
text :: Prism' (NodeG f tag text) text

-- | Traverses the children of an <a>Element</a>. This is as an
--   <a>Affine</a>, or 0-or-1 target, <a>Traversal</a>. In regex terms, you
--   can think of it like the <tt>?</tt> suffix modifier.
children :: Traversal' (NodeG f tag text) (f (NodeG f tag text))

-- | Produces a list of all <a>UNode</a>s in a XML tree. Synonym for
--   <a>universe</a>.
allNodes :: Traversable c => NodeG c tag text -> [NodeG c tag text]

-- | Glue two <a>Traversal</a>s together as relations. This is much like
--   <tt>XPath</tt>'s *slash*.
(./) :: Plated i => Traversal' s i -> Traversal' i a -> Traversal' s a

-- | Traverses <a>Element</a>s which have a particular name.
named :: (Eq a, Applicative f, Choice p) => a -> Optic' p f (NodeG f1 a text) (NodeG f1 a text)

-- | <tt>parameterized k v</tt> traverses <a>Element</a>s which match the
--   value <tt>v</tt> at the key <tt>k</tt> in their attributes.
parameterized :: (Eq (IxValue a), Applicative f, Choice p, Ixed a) => Index a -> IxValue a -> Optic' p f a a
instance Traversable f => Plated (NodeG f tag text)
instance Eq tag => Ixed (NodeG c tag text)
instance Eq tag => At (NodeG f tag text)


-- | XML parsing <a>Prism</a>s from Hexpat. HTML parsing <a>Iso</a>s from
--   TagSoup.
--   
--   While <tt>Hexpat</tt> offers lazy, incremental parsing and this can
--   improve performance, we must force the parse to completion in order to
--   provide a <a>Prism</a>, so the lazy parsing is not offered here.
module Text.XML.Expat.Lens.Parse

-- | Strict parsing and formatting of XML via <a>format'</a> and
--   <a>parse'</a>.
_XML :: (GenericXMLString tag, GenericXMLString text) => Prism' ByteString (NodeG [] tag text)

-- | Provides an '_XMLWithOptions parsing <a>Prism</a> with access to the
--   <tt>ParsingOptions</tt>.
_XMLWithOptions :: (GenericXMLString tag, GenericXMLString text) => ParseOptions tag text -> Prism' ByteString (NodeG [] tag text)

-- | Uses "tag soup" parsing to build a <a>UNode</a> tree. Technically a
--   retract, since <tt>_HTML</tt> tries very hard to return *something*,
--   we get an <a>Iso</a> instead of a <a>Prism</a>.
--   
--   <pre>
--   view (from _HTML . _HTML) = id
--   </pre>
_HTML :: GenericXMLString text => Iso' ByteString (UNode text)

-- | Uses "tag soup" parsing to build a <a>UNode</a> tree. Technically a
--   retract, since <tt>_HTML</tt> tries very hard to return *something*,
--   we get an <a>Iso</a> instead of a <a>Prism</a>. Uses the *fast* tag
--   soup parsing options.
--   
--   <pre>
--   view (from _HTML' . _HTML') = id
--   </pre>
_HTML' :: GenericXMLString text => Iso' ByteString (UNode text)

-- | Like '_HTML but allows choice of <a>ParseOptions</a>.
_HTMLWithOptions :: GenericXMLString text => ParseOptions ByteString -> Iso' ByteString (UNode text)


-- | A simple Hexpat lens module. This is nothing more than a
--   type-specialized re-export of <a>Text.XML.Expat.Lens.Generic</a>.
--   
--   Lenses provide power to do very concise XML tree diving. This module
--   provides a less general interface to the Hexpat datatypes via lenses.
module Text.XML.Expat.Lens.Unqualified
name :: Traversal' (UNode t) t
attributes :: Traversal' (UNode t) (UAttributes t)
text :: Prism' (UNode t) t
children :: Traversal' (UNode t) [UNode t]
allNodes :: UNode t -> [UNode t]
(./) :: Plated i => Traversal' s i -> Traversal' i a -> Traversal' s a
named :: (Eq a, Applicative f, Choice p) => a -> Optic' p f (NodeG f1 a text) (NodeG f1 a text)
parameterized :: (Eq (IxValue a), Applicative f, Choice p, Ixed a) => Index a -> IxValue a -> Optic' p f a a


-- | A simple Hexpat lens module. Right now this only re-exports lenses on
--   Hexpat <tt>UName</tt>s. In the future it may be better to export the
--   general API in this module.
module Text.XML.Expat.Lens
