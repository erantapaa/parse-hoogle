-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Full parser and generator for SQL as implemented by SQLite3
--   
--   This is a full parser and generator for SQL as implemented by SQLite3.
--   It is well-typed in the sense that it is possible to construct an
--   abstract syntax tree if and only if it corresponds to valid SQL.
--   Version 1.1 adds support for parsing and generating type affinities.
@package language-sqlite
@version 1.1

module Language.SQL.SQLite.Tools
changeTableSchema :: CreateTable -> CreateTable -> (Map UnqualifiedIdentifier Expression) -> StatementList

module Language.SQL.SQLite
lexModuleArgument :: String -> Parse (Token, String)
data ParseError
readType :: String -> Either ParseError Type
readMaybeType :: String -> Either ParseError MaybeType
readMaybeTypeName :: String -> Either ParseError MaybeTypeName
readMaybeTypeSize :: String -> Either ParseError MaybeTypeSize
readTypeSizeField :: String -> Either ParseError TypeSizeField
readLikeType :: String -> Either ParseError LikeType
readMaybeSwitchExpression :: String -> Either ParseError MaybeSwitchExpression
readCasePair :: String -> Either ParseError CasePair
readEscape :: String -> Either ParseError Escape
readElse :: String -> Either ParseError Else
readExpression :: String -> Either ParseError Expression
readMaybeUnique :: String -> Either ParseError MaybeUnique
readMaybeIfNotExists :: String -> Either ParseError MaybeIfNotExists
readMaybeIfExists :: String -> Either ParseError MaybeIfExists
readMaybeForEachRow :: String -> Either ParseError MaybeForEachRow
readMaybeTemporary :: String -> Either ParseError MaybeTemporary
readMaybeCollation :: String -> Either ParseError MaybeCollation
readMaybeAscDesc :: String -> Either ParseError MaybeAscDesc
readMaybeAutoincrement :: String -> Either ParseError MaybeAutoincrement
readMaybeSign :: String -> Either ParseError MaybeSign
readMaybeColumn :: String -> Either ParseError MaybeColumn
readAlterTableBody :: String -> Either ParseError AlterTableBody
readColumnDefinition :: String -> Either ParseError ColumnDefinition
readDefaultValue :: String -> Either ParseError DefaultValue
readIndexedColumn :: String -> Either ParseError IndexedColumn
readColumnConstraint :: String -> Either ParseError ColumnConstraint
readTableConstraint :: String -> Either ParseError TableConstraint
readMaybeConstraintName :: String -> Either ParseError MaybeConstraintName
readTriggerTime :: String -> Either ParseError TriggerTime
readTriggerCondition :: String -> Either ParseError TriggerCondition
readModuleArgument :: String -> Either ParseError ModuleArgument
readTriggerStatement :: String -> Either ParseError TriggerStatement
readQualifiedTableName :: String -> Either ParseError QualifiedTableName
readOrderingTerm :: String -> Either ParseError OrderingTerm
readPragmaBody :: String -> Either ParseError PragmaBody
readPragmaValue :: String -> Either ParseError PragmaValue
readCreateTableBody :: String -> Either ParseError CreateTableBody
readInsertHead :: String -> Either ParseError InsertHead
readInsertBody :: String -> Either ParseError InsertBody
readUpdateHead :: String -> Either ParseError UpdateHead
readDistinctness :: String -> Either ParseError Distinctness
readMaybeHaving :: String -> Either ParseError MaybeHaving
readMaybeAs :: String -> Either ParseError MaybeAs
readCompoundOperator :: String -> Either ParseError CompoundOperator
readSelectCore :: String -> Either ParseError SelectCore
readResultColumn :: String -> Either ParseError ResultColumn
readJoinSource :: String -> Either ParseError JoinSource
readSingleSource :: String -> Either ParseError SingleSource
readJoinOperation :: String -> Either ParseError JoinOperation
readJoinConstraint :: String -> Either ParseError JoinConstraint
readMaybeIndexedBy :: String -> Either ParseError MaybeIndexedBy
readFromClause :: String -> Either ParseError FromClause
readWhereClause :: String -> Either ParseError WhereClause
readGroupClause :: String -> Either ParseError GroupClause
readOrderClause :: String -> Either ParseError OrderClause
readLimitClause :: String -> Either ParseError LimitClause
readWhenClause :: String -> Either ParseError WhenClause
readConflictClause :: String -> Either ParseError ConflictClause
readForeignKeyClause :: String -> Either ParseError ForeignKeyClause
readForeignKeyClauseActionOrMatchPart :: String -> Either ParseError ForeignKeyClauseActionOrMatchPart
readForeignKeyClauseActionPart :: String -> Either ParseError ForeignKeyClauseActionPart
readMaybeForeignKeyClauseDeferrablePart :: String -> Either ParseError MaybeForeignKeyClauseDeferrablePart
readMaybeInitialDeferralStatus :: String -> Either ParseError MaybeInitialDeferralStatus
readCommitHead :: String -> Either ParseError CommitHead
readMaybeTransaction :: String -> Either ParseError MaybeTransaction
readMaybeTransactionType :: String -> Either ParseError MaybeTransactionType
readMaybeDatabase :: String -> Either ParseError MaybeDatabase
readMaybeSavepoint :: String -> Either ParseError MaybeSavepoint
readMaybeReleaseSavepoint :: String -> Either ParseError MaybeReleaseSavepoint
readStatementList :: String -> Either ParseError StatementList
readAnyStatement :: String -> Either ParseError AnyStatement
readExplainableStatement :: String -> Either ParseError ExplainableStatement
readExplain :: String -> Either ParseError Explain
readExplainQueryPlan :: String -> Either ParseError ExplainQueryPlan
readAlterTable :: String -> Either ParseError AlterTable
readAnalyze :: String -> Either ParseError Analyze
readAttach :: String -> Either ParseError Attach
readBegin :: String -> Either ParseError Begin
readCommit :: String -> Either ParseError Commit
readCreateIndex :: String -> Either ParseError CreateIndex
readCreateTable :: String -> Either ParseError CreateTable
readCreateTrigger :: String -> Either ParseError CreateTrigger
readCreateView :: String -> Either ParseError CreateView
readCreateVirtualTable :: String -> Either ParseError CreateVirtualTable
readDelete :: String -> Either ParseError Delete
readDeleteLimited :: String -> Either ParseError DeleteLimited
readDeleteOrDeleteLimited :: String -> Either ParseError AnyStatement
readDetach :: String -> Either ParseError Detach
readDropIndex :: String -> Either ParseError DropIndex
readDropTable :: String -> Either ParseError DropTable
readDropTrigger :: String -> Either ParseError DropTrigger
readDropView :: String -> Either ParseError DropView
readInsert :: String -> Either ParseError Insert
readPragma :: String -> Either ParseError Pragma
readReindex :: String -> Either ParseError Reindex
readRelease :: String -> Either ParseError Release
readRollback :: String -> Either ParseError Rollback
readSavepoint :: String -> Either ParseError Savepoint
readSelect :: String -> Either ParseError Select
readUpdate :: String -> Either ParseError Update
readUpdateLimited :: String -> Either ParseError UpdateLimited
readUpdateOrUpdateLimited :: String -> Either ParseError AnyStatement
readVacuum :: String -> Either ParseError Vacuum
readUnqualifiedIdentifier :: String -> Either ParseError UnqualifiedIdentifier
readSinglyQualifiedIdentifier :: String -> Either ParseError SinglyQualifiedIdentifier
readDoublyQualifiedIdentifier :: String -> Either ParseError DoublyQualifiedIdentifier

-- | A class implemented by every node of the AST; converts the node and
--   its children into a list of tokens which correspond to the SQL
--   representation of the node.
class ShowTokens a
showTokens :: ShowTokens a => a -> [Token]

-- | A class with hidden implementation so as to enforce the constraint
--   that it is a nonempty homogeneous list of items.
data OneOrMore a

-- | The constructor for <a>OneOrMore</a> <tt>a</tt>. Returns
--   <a>Nothing</a> if the list it's given is empty, or <a>Just</a>
--   <a>OneOrMore</a> <tt>a</tt> if it is not.
mkOneOrMore :: [a] -> Maybe (OneOrMore a)

-- | The accessor for <a>OneOrMore</a> <tt>a</tt>. Returns <tt>[a]</tt>.
fromOneOrMore :: (OneOrMore a) -> [a]

-- | A class with hidden implementation so as to enforce the constraint
--   that it is a nonnegative double.
data NonnegativeDouble

-- | The constructor for <a>NonnegativeDouble</a>. Returns <a>Nothing</a>
--   if the double it's given is negative, or <a>Just</a>
--   <a>NonnegativeDouble</a> if it is not.
mkNonnegativeDouble :: Double -> Maybe NonnegativeDouble

-- | The accessor for <a>NonnegativeDouble</a>. Returns a double.
fromNonnegativeDouble :: NonnegativeDouble -> Double

-- | Computes a <a>TypeAffinity</a> from a <a>MaybeTypeName</a>, as used in
--   <a>Type</a>.
computeTypeNameAffinity :: MaybeTypeName -> TypeAffinity

-- | Computes a <a>MaybeTypeName</a> from a <a>TypeAffinity</a>, as used in
--   <a>Type</a>.
computeAffinityTypeName :: TypeAffinity -> MaybeTypeName

-- | A class implemented by all identifiers regardless of how many levels
--   of qualification they allow.
class Identifier a
identifierProperName :: Identifier a => a -> String
identifierParentName :: Identifier a => a -> Maybe String
identifierGrandparentName :: Identifier a => a -> Maybe String

-- | Converts an identifier to be doubly-qualified. This does not actually
--   synthesize any missing components, merely provides <a>Nothing</a> for
--   them.
toDoublyQualifiedIdentifier :: Identifier a => a -> DoublyQualifiedIdentifier

-- | An identifier which does not allow any levels of qualification. This
--   is typically a database name.
data UnqualifiedIdentifier
UnqualifiedIdentifier :: String -> UnqualifiedIdentifier

-- | An identifier which allows a single level of qualification. This is
--   typically the name of a table or other database-level object.
data SinglyQualifiedIdentifier
SinglyQualifiedIdentifier :: (Maybe String) -> String -> SinglyQualifiedIdentifier

-- | An identifier which allows two levels of qualification. This is
--   typically a column name.
data DoublyQualifiedIdentifier
DoublyQualifiedIdentifier :: (Maybe (String, Maybe String)) -> String -> DoublyQualifiedIdentifier

-- | Not an AST node but a token which corresponds to a primitive of SQL
--   syntax. Has an instance of <a>Show</a> which prints a list of them as
--   syntactically-valid SQL with no line wrapping.
data Token
EndOfInputToken :: Token
Identifier :: String -> Token
LiteralInteger :: Word64 -> Token
LiteralFloat :: NonnegativeDouble -> Token
LiteralString :: String -> Token
LiteralBlob :: ByteString -> Token
Variable :: Token
VariableN :: Word64 -> Token
VariableNamed :: String -> Token
ModuleArgumentToken :: String -> Token
PunctuationBarBar :: Token
PunctuationStar :: Token
PunctuationSlash :: Token
PunctuationPercent :: Token
PunctuationPlus :: Token
PunctuationMinus :: Token
PunctuationLessLess :: Token
PunctuationGreaterGreater :: Token
PunctuationAmpersand :: Token
PunctuationBar :: Token
PunctuationLess :: Token
PunctuationLessEquals :: Token
PunctuationGreater :: Token
PunctuationGreaterEquals :: Token
PunctuationEquals :: Token
PunctuationEqualsEquals :: Token
PunctuationBangEquals :: Token
PunctuationLessGreater :: Token
PunctuationTilde :: Token
PunctuationLeftParenthesis :: Token
PunctuationRightParenthesis :: Token
PunctuationComma :: Token
PunctuationDot :: Token
PunctuationSemicolon :: Token
KeywordAbort :: Token
KeywordAction :: Token
KeywordAdd :: Token
KeywordAfter :: Token
KeywordAll :: Token
KeywordAlter :: Token
KeywordAnalyze :: Token
KeywordAnd :: Token
KeywordAs :: Token
KeywordAsc :: Token
KeywordAttach :: Token
KeywordAutoincrement :: Token
KeywordBefore :: Token
KeywordBegin :: Token
KeywordBetween :: Token
KeywordBy :: Token
KeywordCascade :: Token
KeywordCase :: Token
KeywordCast :: Token
KeywordCheck :: Token
KeywordCollate :: Token
KeywordColumn :: Token
KeywordCommit :: Token
KeywordConflict :: Token
KeywordConstraint :: Token
KeywordCreate :: Token
KeywordCross :: Token
KeywordCurrentDate :: Token
KeywordCurrentTime :: Token
KeywordCurrentTimestamp :: Token
KeywordDatabase :: Token
KeywordDefault :: Token
KeywordDeferrable :: Token
KeywordDeferred :: Token
KeywordDelete :: Token
KeywordDesc :: Token
KeywordDetach :: Token
KeywordDistinct :: Token
KeywordDrop :: Token
KeywordEach :: Token
KeywordElse :: Token
KeywordEnd :: Token
KeywordEscape :: Token
KeywordExcept :: Token
KeywordExclusive :: Token
KeywordExists :: Token
KeywordExplain :: Token
KeywordFail :: Token
KeywordFor :: Token
KeywordForeign :: Token
KeywordFrom :: Token
KeywordFull :: Token
KeywordGlob :: Token
KeywordGroup :: Token
KeywordHaving :: Token
KeywordIf :: Token
KeywordIgnore :: Token
KeywordImmediate :: Token
KeywordIn :: Token
KeywordIndex :: Token
KeywordIndexed :: Token
KeywordInitially :: Token
KeywordInner :: Token
KeywordInsert :: Token
KeywordInstead :: Token
KeywordIntersect :: Token
KeywordInto :: Token
KeywordIs :: Token
KeywordIsnull :: Token
KeywordJoin :: Token
KeywordKey :: Token
KeywordLeft :: Token
KeywordLike :: Token
KeywordLimit :: Token
KeywordMatch :: Token
KeywordNatural :: Token
KeywordNo :: Token
KeywordNot :: Token
KeywordNotnull :: Token
KeywordNull :: Token
KeywordOf :: Token
KeywordOffset :: Token
KeywordOn :: Token
KeywordOr :: Token
KeywordOrder :: Token
KeywordOuter :: Token
KeywordPlan :: Token
KeywordPragma :: Token
KeywordPrimary :: Token
KeywordQuery :: Token
KeywordRaise :: Token
KeywordReferences :: Token
KeywordRegexp :: Token
KeywordReindex :: Token
KeywordRelease :: Token
KeywordRename :: Token
KeywordReplace :: Token
KeywordRestrict :: Token
KeywordRight :: Token
KeywordRollback :: Token
KeywordRow :: Token
KeywordSavepoint :: Token
KeywordSelect :: Token
KeywordSet :: Token
KeywordTable :: Token
KeywordTemp :: Token
KeywordTemporary :: Token
KeywordThen :: Token
KeywordTo :: Token
KeywordTransaction :: Token
KeywordTrigger :: Token
KeywordUnion :: Token
KeywordUnique :: Token
KeywordUpdate :: Token
KeywordUsing :: Token
KeywordVacuum :: Token
KeywordValues :: Token
KeywordView :: Token
KeywordVirtual :: Token
KeywordWhen :: Token
KeywordWhere :: Token

-- | The AST node corresponding to the body of an <a>AlterTable</a>
--   statement. Used by <a>AlterTable</a>.
data AlterTableBody
RenameTo :: UnqualifiedIdentifier -> AlterTableBody
AddColumn :: MaybeColumn -> ColumnDefinition -> AlterTableBody

-- | The AST node corresponding to each <tt>WHEN</tt>-<tt>THEN</tt> pair of
--   subexpressions in a <tt>CASE</tt> expression. Used by
--   <a>ExpressionCase</a>.
data CasePair
WhenThen :: Expression -> Expression -> CasePair

-- | The AST node corresponding to a column constraint subclause. Used by
--   <a>ColumnDefinition</a>.
data ColumnConstraint
ColumnPrimaryKey :: MaybeConstraintName -> MaybeAscDesc -> (Maybe ConflictClause) -> MaybeAutoincrement -> ColumnConstraint
ColumnNotNull :: MaybeConstraintName -> (Maybe ConflictClause) -> ColumnConstraint
ColumnUnique :: MaybeConstraintName -> (Maybe ConflictClause) -> ColumnConstraint
ColumnCheck :: MaybeConstraintName -> Expression -> ColumnConstraint
ColumnDefault :: MaybeConstraintName -> DefaultValue -> ColumnConstraint
ColumnCollate :: MaybeConstraintName -> UnqualifiedIdentifier -> ColumnConstraint
ColumnForeignKey :: MaybeConstraintName -> ForeignKeyClause -> ColumnConstraint

-- | The AST node corresponding to a column-definition subclause. Used by
--   <a>AlterTableBody</a> and <a>CreateTableBody</a>.
data ColumnDefinition
ColumnDefinition :: UnqualifiedIdentifier -> MaybeType -> [ColumnConstraint] -> ColumnDefinition

-- | The AST node corresponding to the head of a <tt>COMMIT</tt> statement.
--   Used by <a>Commit</a>.
data CommitHead
CommitCommit :: CommitHead
CommitEnd :: CommitHead

-- | The AST node corresponding to a compound operator in a <tt>SELECT</tt>
--   statement. Used by <a>Select</a>.
data CompoundOperator
Union :: CompoundOperator
UnionAll :: CompoundOperator
Intersect :: CompoundOperator
Except :: CompoundOperator

-- | The AST node corresponding to an <tt>ON CONFLICT</tt> clause. Used by
--   <a>ColumnConstraint</a> and <a>TableConstraint</a>.
data ConflictClause
OnConflictRollback :: ConflictClause
OnConflictAbort :: ConflictClause
OnConflictFail :: ConflictClause
OnConflictIgnore :: ConflictClause
OnConflictReplace :: ConflictClause

-- | The AST node corresponding to a default-value subclause. Used by
--   <a>ColumnConstraint</a>.
data DefaultValue
DefaultValueSignedInteger :: MaybeSign -> Word64 -> DefaultValue
DefaultValueSignedFloat :: MaybeSign -> NonnegativeDouble -> DefaultValue
DefaultValueLiteralString :: String -> DefaultValue
DefaultValueLiteralBlob :: ByteString -> DefaultValue
DefaultValueLiteralNull :: DefaultValue
DefaultValueLiteralCurrentTime :: DefaultValue
DefaultValueLiteralCurrentDate :: DefaultValue
DefaultValueLiteralCurrentTimestamp :: DefaultValue
DefaultValueExpression :: Expression -> DefaultValue

-- | The AST node corresponding to an optional <tt>DISTINCT</tt> or
--   <tt>ALL</tt> qualifier. Used by <a>SelectCore</a>.
data Distinctness
NoDistinctness :: Distinctness
Distinct :: Distinctness
All :: Distinctness

-- | The AST node corresponding to a create-table body. Used by
--   <a>CreateTable</a>.
data CreateTableBody
ColumnsAndConstraints :: (OneOrMore ColumnDefinition) -> [TableConstraint] -> CreateTableBody
AsSelect :: (Select) -> CreateTableBody

-- | The AST node corresponding to the optional <tt>ELSE</tt> subclause in
--   a <tt>CASE</tt> expression. Used by <a>ExpressionCase</a>.
data Else
NoElse :: Else
Else :: Expression -> Else

-- | The AST node corresponding to the <tt>ESCAPE</tt> subclause of a
--   textual comparison expression. Used by <a>ExpressionLike</a>.
data Escape
NoEscape :: Escape
Escape :: Expression -> Escape

-- | The AST node corresponding to a <tt>FOREIGN KEY</tt> clause. Used by
--   <a>ColumnConstraint</a> and <a>TableConstraint</a>.
data ForeignKeyClause
References :: UnqualifiedIdentifier -> [UnqualifiedIdentifier] -> [ForeignKeyClauseActionOrMatchPart] -> MaybeForeignKeyClauseDeferrablePart -> ForeignKeyClause

-- | The AST node corresponding to the first partial body of a <tt>FOREIGN
--   KEY</tt> clause. Used by <a>ForeignKeyClause</a>.
data ForeignKeyClauseActionOrMatchPart
OnDelete :: ForeignKeyClauseActionPart -> ForeignKeyClauseActionOrMatchPart
OnUpdate :: ForeignKeyClauseActionPart -> ForeignKeyClauseActionOrMatchPart
ReferencesMatch :: UnqualifiedIdentifier -> ForeignKeyClauseActionOrMatchPart

-- | The AST node corresponding to an action subclause in the first partial
--   body of a <tt>FOREIGN KEY</tt> clause. Used by
--   <a>ForeignKeyClauseActionOrMatchPart</a>.
data ForeignKeyClauseActionPart
SetNull :: ForeignKeyClauseActionPart
SetDefault :: ForeignKeyClauseActionPart
Cascade :: ForeignKeyClauseActionPart
Restrict :: ForeignKeyClauseActionPart
NoAction :: ForeignKeyClauseActionPart

-- | The AST node corresponding to a <tt>FROM</tt> clause. Used by
--   <a>SelectCore</a>.
data FromClause
From :: JoinSource -> FromClause

-- | The AST node corresponding to a <tt>GROUP BY</tt> clause. Used by
--   <a>SelectCore</a>.
data GroupClause
GroupBy :: (OneOrMore OrderingTerm) -> MaybeHaving -> GroupClause

-- | The AST node corresponding to an indexed-column subclause. Used by
--   <a>TableConstraint</a> and <a>CreateIndex</a>.
data IndexedColumn
IndexedColumn :: UnqualifiedIdentifier -> MaybeCollation -> MaybeAscDesc -> IndexedColumn

-- | The AST node corresponding to an insert body. Used by <a>Insert</a>.
data InsertBody
InsertValues :: [UnqualifiedIdentifier] -> (OneOrMore Expression) -> InsertBody
InsertSelect :: [UnqualifiedIdentifier] -> (Select) -> InsertBody
InsertDefaultValues :: InsertBody

-- | The AST node corresponding to an insert head. Used by <a>Insert</a>.
data InsertHead
InsertNoAlternative :: InsertHead
InsertOrRollback :: InsertHead
InsertOrAbort :: InsertHead
InsertOrReplace :: InsertHead
InsertOrFail :: InsertHead
InsertOrIgnore :: InsertHead
Replace :: InsertHead

-- | The AST node corresponding to a join constraint, a qualifier in the
--   <tt>FROM</tt> clause of a <tt>SELECT</tt> statement. Used by
--   <a>JoinSource</a>.
data JoinConstraint
NoConstraint :: JoinConstraint
On :: Expression -> JoinConstraint
Using :: (OneOrMore UnqualifiedIdentifier) -> JoinConstraint

-- | The AST node corresponding to a join operation, a conjunction in the
--   <tt>FROM</tt> clause of a <tt>SELECT</tt> statement. Used by
--   <a>JoinSource</a>.
data JoinOperation
Comma :: JoinOperation
Join :: JoinOperation
OuterJoin :: JoinOperation
LeftJoin :: JoinOperation
LeftOuterJoin :: JoinOperation
InnerJoin :: JoinOperation
CrossJoin :: JoinOperation
NaturalJoin :: JoinOperation
NaturalOuterJoin :: JoinOperation
NaturalLeftJoin :: JoinOperation
NaturalLeftOuterJoin :: JoinOperation
NaturalInnerJoin :: JoinOperation
NaturalCrossJoin :: JoinOperation

-- | The AST node corresponding to a source from which to join columns in a
--   <tt>SELECT</tt> statement, which may be the head of the statement's
--   <tt>FROM</tt> clause, or, in the case of a subjoin, only part of it.
--   Used by <a>FromClause</a> and <a>SingleSource</a>.
data JoinSource
JoinSource :: SingleSource -> [(JoinOperation, SingleSource, JoinConstraint)] -> JoinSource

-- | The AST node corresponding to a textual comparison operator in an
--   expression. Used by <a>ExpressionLike</a>.
data LikeType
Like :: LikeType
NotLike :: LikeType
Glob :: LikeType
NotGlob :: LikeType
Regexp :: LikeType
NotRegexp :: LikeType
Match :: LikeType
NotMatch :: LikeType

-- | The AST node corresponding to a <tt>LIMIT</tt> clause. Used by
--   <a>Select</a>, <a>DeleteLimited</a>, and <a>UpdateLimited</a>.
data LimitClause
Limit :: Word64 -> LimitClause
LimitOffset :: Word64 -> Word64 -> LimitClause
LimitComma :: Word64 -> Word64 -> LimitClause

-- | The AST node corresponding to an optional <tt>AS</tt> subclause,
--   possibly with the actual keyword elided. Used by <a>ResultColumn</a>
--   and <a>SingleSource</a>.
data MaybeAs
NoAs :: MaybeAs
As :: UnqualifiedIdentifier -> MaybeAs
ElidedAs :: UnqualifiedIdentifier -> MaybeAs

-- | The AST node corresponding to an optional <tt>ASC</tt> or
--   <tt>DESC</tt> qualifier. Used by <a>IndexedColumn</a>,
--   <a>ColumnConstraint</a>, and <a>OrderingTerm</a>.
data MaybeAscDesc
NoAscDesc :: MaybeAscDesc
Asc :: MaybeAscDesc
Desc :: MaybeAscDesc

-- | The AST node corresponding to an optional <tt>AUTOINCREMENT</tt>
--   qualifier. Used by <a>ColumnConstraint</a>.
data MaybeAutoincrement
NoAutoincrement :: MaybeAutoincrement
Autoincrement :: MaybeAutoincrement

-- | The AST node corresponding to an optional <tt>COLLATE</tt> subclause.
--   Used by <a>IndexedColumn</a> and <a>OrderingTerm</a>.
data MaybeCollation
NoCollation :: MaybeCollation
Collation :: UnqualifiedIdentifier -> MaybeCollation

-- | The AST node corresponding to an optional <tt>COLUMN</tt> keyword.
--   Used by <a>AlterTableBody</a>.
data MaybeColumn
ElidedColumn :: MaybeColumn
Column :: MaybeColumn

-- | The AST node corresponding to an optional constraint name subclause.
--   Used by <a>ColumnConstraint</a> and 'Table Constraint'.
data MaybeConstraintName
NoConstraintName :: MaybeConstraintName
ConstraintName :: UnqualifiedIdentifier -> MaybeConstraintName

-- | The AST node corresponding to an optional <tt>DATABASE</tt> keyword.
--   Used by <a>Attach</a> and <a>Detach</a>.
data MaybeDatabase
ElidedDatabase :: MaybeDatabase
Database :: MaybeDatabase

-- | The AST node corresponding to an optional <tt>FOR EACH ROW</tt>
--   qualifier. Used by <a>CreateTrigger</a>.
data MaybeForEachRow
NoForEachRow :: MaybeForEachRow
ForEachRow :: MaybeForEachRow

-- | The AST node corresponding to the second partial body of a <tt>FOREIGN
--   KEY</tt> clause. Used by <a>ForeignKeyClause</a>.
data MaybeForeignKeyClauseDeferrablePart
NoDeferrablePart :: MaybeForeignKeyClauseDeferrablePart
Deferrable :: MaybeInitialDeferralStatus -> MaybeForeignKeyClauseDeferrablePart
NotDeferrable :: MaybeInitialDeferralStatus -> MaybeForeignKeyClauseDeferrablePart

-- | The AST node corresponding to an optional <tt>HAVING</tt> subclause.
--   Used by <a>GroupClause</a>.
data MaybeHaving
NoHaving :: MaybeHaving
Having :: Expression -> MaybeHaving

-- | The AST node corresponding to an optional <tt>IF EXISTS</tt>
--   qualifier. Used by <a>DropIndex</a>, <a>DropTable</a>,
--   <a>DropTrigger</a>, and <a>DropView</a>.
data MaybeIfExists
NoIfExists :: MaybeIfExists
IfExists :: MaybeIfExists

-- | The AST node corresponding to an optional <tt>IF NOT EXISTS</tt>
--   qualifier. Used by <a>CreateIndex</a>, <a>CreateTable</a>,
--   <a>CreateTrigger</a>, and <a>CreateView</a>.
data MaybeIfNotExists
NoIfNotExists :: MaybeIfNotExists
IfNotExists :: MaybeIfNotExists

-- | The AST node corresponding to an optional <tt>INDEXED BY</tt> or
--   <tt>NOT INDEXED</tt> qualifier. Used by <a>SingleSource</a>.
data MaybeIndexedBy
NoIndexedBy :: MaybeIndexedBy
IndexedBy :: UnqualifiedIdentifier -> MaybeIndexedBy
NotIndexed :: MaybeIndexedBy

-- | The AST node corresponding to an optional <tt>INITIALLY DEFERRED</tt>
--   or <tt>INITIALLY IMMEDIATE</tt> qualifier in a <tt>FOREIGN KEY</tt>
--   clause. Used by <a>MaybeForeignKeyClauseDeferrablePart</a>.
data MaybeInitialDeferralStatus
NoInitialDeferralStatus :: MaybeInitialDeferralStatus
InitiallyDeferred :: MaybeInitialDeferralStatus
InitiallyImmediate :: MaybeInitialDeferralStatus

-- | The AST node corresponding to an optional <tt>RELEASE SAVEPOINT</tt>
--   qualifier. Used by <a>Release</a>.
data MaybeReleaseSavepoint
ElidedReleaseSavepoint :: UnqualifiedIdentifier -> MaybeReleaseSavepoint
ReleaseSavepoint :: UnqualifiedIdentifier -> MaybeReleaseSavepoint

-- | The AST node corresponding to an optional <tt>TO SAVEPOINT</tt>
--   qualifier. Used by <a>Rollback</a>.
data MaybeSavepoint
NoSavepoint :: MaybeSavepoint
To :: UnqualifiedIdentifier -> MaybeSavepoint
ToSavepoint :: UnqualifiedIdentifier -> MaybeSavepoint

-- | The AST node corresponding to an optional <tt>+</tt> or <tt>-</tt>
--   sign. Used by <a>TypeSizeField</a>, <a>DefaultValue</a>, and
--   <a>PragmaValue</a>.
data MaybeSign
NoSign :: MaybeSign
PositiveSign :: MaybeSign
NegativeSign :: MaybeSign

-- | The AST node corresponding to the optional first subexpression in a
--   <tt>CASE</tt> expression. Used by <a>ExpressionCase</a>.
data MaybeSwitchExpression
NoSwitch :: MaybeSwitchExpression
Switch :: Expression -> MaybeSwitchExpression

-- | The AST node corresponding to an optional <tt>TEMP</tt> or
--   <tt>TEMPORARY</tt> qualifier. Used by <a>CreateTable</a>,
--   <a>CreateTrigger</a>, and <a>CreateView</a>.
data MaybeTemporary
NoTemporary :: MaybeTemporary
Temp :: MaybeTemporary
Temporary :: MaybeTemporary

-- | The AST node corresponding to an optional <tt>TRASACTION</tt> keyword.
--   Used by <a>Begin</a>, <a>Commit</a>, and <a>Rollback</a>.
data MaybeTransaction
ElidedTransaction :: MaybeTransaction
Transaction :: MaybeTransaction

-- | The AST node corresponding to an optional transaction-type qualifier.
--   Used by <a>Begin</a>.
data MaybeTransactionType
NoTransactionType :: MaybeTransactionType
Deferred :: MaybeTransactionType
Immediate :: MaybeTransactionType
Exclusive :: MaybeTransactionType

-- | The AST node corresponding to an optional column type. Used by
--   <a>ColumnDefinition</a>.
data MaybeType
NoType :: MaybeType
JustType :: Type -> MaybeType
data MaybeTypeName
NoTypeName :: MaybeTypeName
TypeName :: (OneOrMore UnqualifiedIdentifier) -> MaybeTypeName

-- | The AST node corresponding to an optional size annotation on a column
--   or value type. Used by <a>Type</a>.
data MaybeTypeSize
NoTypeSize :: MaybeTypeSize
TypeMaximumSize :: TypeSizeField -> MaybeTypeSize
TypeSize :: TypeSizeField -> TypeSizeField -> MaybeTypeSize

-- | The AST node corresponding to an optional <tt>UNIQUE</tt> qualifier.
--   Used by <a>CreateIndex</a>.
data MaybeUnique
NoUnique :: MaybeUnique
Unique :: MaybeUnique

-- | The AST node corresponding to a module argument. Used by
--   <a>CreateVirtualTable</a>.
data ModuleArgument
ModuleArgument :: String -> ModuleArgument

-- | The AST node corresponding to an <tt>ORDER BY</tt> clause. Used by
--   <a>Select</a>, <a>DeleteLimited</a>, and <a>UpdateLimited</a>.
data OrderClause
OrderBy :: (OneOrMore OrderingTerm) -> OrderClause

-- | The AST node corresponding to an ordering term subclause. Used by
--   <a>GroupClause</a> and <a>OrderClause</a>.
data OrderingTerm
OrderingTerm :: Expression -> MaybeCollation -> MaybeAscDesc -> OrderingTerm

-- | The AST node corresponding to a pragma body. Used by <a>Pragma</a>.
data PragmaBody
EmptyPragmaBody :: PragmaBody
EqualsPragmaBody :: PragmaValue -> PragmaBody
CallPragmaBody :: PragmaValue -> PragmaBody

-- | The AST node corresponding to a pragma value subclause. Used by
--   <a>PragmaBody</a>.
data PragmaValue
SignedIntegerPragmaValue :: MaybeSign -> Word64 -> PragmaValue
SignedFloatPragmaValue :: MaybeSign -> NonnegativeDouble -> PragmaValue
NamePragmaValue :: UnqualifiedIdentifier -> PragmaValue
StringPragmaValue :: String -> PragmaValue

-- | The AST node corresponding to a qualified table name subclause. Used
--   by <a>Delete</a>, <a>DeleteLimited</a>, <a>Update</a>, and
--   <a>UpdateLimited</a>.
data QualifiedTableName
TableNoIndexedBy :: SinglyQualifiedIdentifier -> QualifiedTableName
TableIndexedBy :: SinglyQualifiedIdentifier -> UnqualifiedIdentifier -> QualifiedTableName
TableNotIndexed :: SinglyQualifiedIdentifier -> QualifiedTableName

-- | The AST node corresponding to a result column in a <tt>SELECT</tt>
--   statement. Used by <a>SelectCore</a>.
data ResultColumn
Star :: ResultColumn
TableStar :: UnqualifiedIdentifier -> ResultColumn
Result :: Expression -> MaybeAs -> ResultColumn

-- | The AST node corresponding to the core part of a <tt>SELECT</tt>
--   statement, which may be the head of the overall statement, or, in the
--   case of a compound <tt>SELECT</tt>, only part of it. Used by
--   <a>Select</a>.
data SelectCore
SelectCore :: Distinctness -> (OneOrMore ResultColumn) -> (Maybe FromClause) -> (Maybe WhereClause) -> (Maybe GroupClause) -> SelectCore

-- | The AST node corresponding to a primitive source from which to join
--   columns in a <tt>SELECT</tt> statement, which is a body of the
--   statement's <tt>FROM</tt> clause. Used by <a>JoinSource</a>.
data SingleSource
TableSource :: SinglyQualifiedIdentifier -> MaybeAs -> MaybeIndexedBy -> SingleSource
SelectSource :: (Select) -> MaybeAs -> SingleSource
SubjoinSource :: JoinSource -> SingleSource

-- | The AST node corresponding to a semicolon-separated list of
--   statements. Used at the top level of an SQL file.
data StatementList
StatementList :: [AnyStatement] -> StatementList

-- | The AST node corresponding to a table-constraint subclause. Used by
--   <a>CreateTableBody</a>.
data TableConstraint
TablePrimaryKey :: MaybeConstraintName -> (OneOrMore IndexedColumn) -> (Maybe ConflictClause) -> TableConstraint
TableUnique :: MaybeConstraintName -> (OneOrMore IndexedColumn) -> (Maybe ConflictClause) -> TableConstraint
TableCheck :: MaybeConstraintName -> Expression -> TableConstraint
TableForeignKey :: MaybeConstraintName -> (OneOrMore UnqualifiedIdentifier) -> ForeignKeyClause -> TableConstraint

-- | The AST node corresponding to a trigger-condition subclause. Used by
--   <a>CreateTrigger</a>.
data TriggerCondition
DeleteOn :: TriggerCondition
InsertOn :: TriggerCondition
UpdateOn :: [UnqualifiedIdentifier] -> TriggerCondition

-- | The AST node corresponding to a trigger-time qualifier. Used by
--   <a>CreateTrigger</a>.
data TriggerTime
Before :: TriggerTime
After :: TriggerTime
InsteadOf :: TriggerTime

-- | The AST node corresponding to a column or value type. Used by
--   <a>MaybeType</a> which is used by <a>ColumnDefinition</a>, and by
--   <a>ExpressionCast</a>.
data Type
Type :: TypeAffinity -> MaybeTypeName -> MaybeTypeSize -> Type

-- | The AST node corresponding to the affinity of a column or value type.
--   Used by <a>Type</a>.
data TypeAffinity
TypeAffinityText :: TypeAffinity
TypeAffinityNumeric :: TypeAffinity
TypeAffinityInteger :: TypeAffinity
TypeAffinityReal :: TypeAffinity
TypeAffinityNone :: TypeAffinity

-- | The AST node corresponding to one of zero to two fields annotating a
--   column or value type with size limits. Used by <a>MaybeTypeSize</a>.
data TypeSizeField
DoubleSize :: MaybeSign -> NonnegativeDouble -> TypeSizeField
IntegerSize :: MaybeSign -> Word64 -> TypeSizeField

-- | The AST node corresponding to an update head. Used by <a>Update</a>
--   and <a>UpdateLimited</a>.
data UpdateHead
UpdateNoAlternative :: UpdateHead
UpdateOrRollback :: UpdateHead
UpdateOrAbort :: UpdateHead
UpdateOrReplace :: UpdateHead
UpdateOrFail :: UpdateHead
UpdateOrIgnore :: UpdateHead

-- | The AST node corresponding to a <tt>WHEN</tt> clause. Used by
--   <a>CreateTrigger</a>.
data WhenClause
When :: Expression -> WhenClause

-- | The AST node corresponding to a <tt>WHERE</tt> clause. Used by
--   <a>SelectCore</a>, <a>Delete</a>, <a>DeleteLimited</a>, <a>Update</a>,
--   and <a>UpdateLimited</a>.
data WhereClause
Where :: Expression -> WhereClause

-- | The AST node corresponding to an expression. Used by
--   <a>DefaultValue</a>, <a>ColumnConstraint</a>, <a>TableConstraint</a>,
--   <a>OrderingTerm</a>, <a>InsertBody</a>, <a>MaybeHaving</a>,
--   <a>ResultColumn</a>, <a>JoinConstraint</a>, <a>WhereClause</a>,
--   <a>WhenClause</a>, <a>Update</a>, and <a>UpdateLimited</a>. Also
--   useful at top level.
data Expression

-- | Represents a literal integer expression.
ExpressionLiteralInteger :: Word64 -> Expression

-- | Represents a literal floating-point expression.
ExpressionLiteralFloat :: NonnegativeDouble -> Expression

-- | Represents a literal string expression.
ExpressionLiteralString :: String -> Expression

-- | Represents a literal blob (binary large object) expression.
ExpressionLiteralBlob :: ByteString -> Expression

-- | Represents a literal <tt>NULL</tt> expression.
ExpressionLiteralNull :: Expression

-- | Represents a literal <tt>current_time</tt> expression.
ExpressionLiteralCurrentTime :: Expression

-- | Represents a literal <tt>current_date</tt> expression.
ExpressionLiteralCurrentDate :: Expression

-- | Represents a literal <tt>current_timestamp</tt> expression.
ExpressionLiteralCurrentTimestamp :: Expression

-- | Represents a positional-variable expression, written in SQL as
--   <tt>?</tt>.
ExpressionVariable :: Expression

-- | Represents a numbered positional variable expression, written in SQL
--   as <tt>?nnn</tt>.
ExpressionVariableN :: Word64 -> Expression

-- | Represents a named positional variable expression, written in SQL as
--   <tt>:aaaa</tt>.
ExpressionVariableNamed :: String -> Expression

-- | Represents a column-name expression, optionally qualified by a table
--   name and further by a database name.
ExpressionIdentifier :: DoublyQualifiedIdentifier -> Expression

-- | Represents a unary negation expression.
ExpressionUnaryNegative :: Expression -> Expression

-- | Represents a unary positive-sign expression. Yes, this is an nop.
ExpressionUnaryPositive :: Expression -> Expression

-- | Represents a unary bitwise negation expression.
ExpressionUnaryBitwiseNot :: Expression -> Expression

-- | Represents a unary logical negation expression.
ExpressionUnaryLogicalNot :: Expression -> Expression

-- | Represents a binary string-concatenation expression.
ExpressionBinaryConcatenate :: Expression -> Expression -> Expression

-- | Represents a binary multiplication expression.
ExpressionBinaryMultiply :: Expression -> Expression -> Expression

-- | Represents a binary division expression.
ExpressionBinaryDivide :: Expression -> Expression -> Expression

-- | Represents a binary modulus expression.
ExpressionBinaryModulus :: Expression -> Expression -> Expression

-- | Represents a binary addition expression.
ExpressionBinaryAdd :: Expression -> Expression -> Expression

-- | Represents a binary subtraction expression.
ExpressionBinarySubtract :: Expression -> Expression -> Expression

-- | Represents a binary left-shift expression.
ExpressionBinaryLeftShift :: Expression -> Expression -> Expression

-- | Represents a binary right-shift expression.
ExpressionBinaryRightShift :: Expression -> Expression -> Expression

-- | Represents a binary bitwise-and expression.
ExpressionBinaryBitwiseAnd :: Expression -> Expression -> Expression

-- | Represents a binary bitwise-or expression.
ExpressionBinaryBitwiseOr :: Expression -> Expression -> Expression

-- | Represents a binary less-than comparison expression.
ExpressionBinaryLess :: Expression -> Expression -> Expression

-- | Represents a binary less-than-or-equal-to comparison expression.
ExpressionBinaryLessEquals :: Expression -> Expression -> Expression

-- | Represents a binary greater-than comparison expression.
ExpressionBinaryGreater :: Expression -> Expression -> Expression

-- | Represents a binary greater-than-or-equal-to comparison expression.
ExpressionBinaryGreaterEquals :: Expression -> Expression -> Expression

-- | Represents a binary equal-to comparison expression, written in SQL as
--   <tt>=</tt>.
ExpressionBinaryEquals :: Expression -> Expression -> Expression

-- | Represents a binary equal-to comparison expression, written in SQL as
--   <tt>==</tt>.
ExpressionBinaryEqualsEquals :: Expression -> Expression -> Expression

-- | Represents a binary not-equal-to comparison expression, written in SQL
--   as <tt>!=</tt>.
ExpressionBinaryNotEquals :: Expression -> Expression -> Expression

-- | Represents a binary not-equal-to comparison expression, written in SQL
--   as <tt><a></a></tt>.
ExpressionBinaryLessGreater :: Expression -> Expression -> Expression

-- | Represents a binary logical-and expression.
ExpressionBinaryLogicalAnd :: Expression -> Expression -> Expression

-- | Represents a binary logical-or expression.
ExpressionBinaryLogicalOr :: Expression -> Expression -> Expression

-- | Represents a call to a built-in function.
ExpressionFunctionCall :: UnqualifiedIdentifier -> [Expression] -> Expression

-- | Represents a call to a built-in function, with the <tt>DISTINCT</tt>
--   qualifier.
ExpressionFunctionCallDistinct :: UnqualifiedIdentifier -> (OneOrMore Expression) -> Expression

-- | Represents a call to a built-in function, with <tt>*</tt> as
--   parameter.
ExpressionFunctionCallStar :: UnqualifiedIdentifier -> Expression

-- | Represents a type-cast expression.
ExpressionCast :: Expression -> Type -> Expression

-- | Represents a <tt>COLLATE</tt> expression.
ExpressionCollate :: Expression -> UnqualifiedIdentifier -> Expression

-- | Represents a textual comparison expression.
ExpressionLike :: Expression -> LikeType -> Expression -> Escape -> Expression

-- | Represents an <tt>ISNULL</tt> expression. Not to be confused with an
--   <tt>IS</tt> expression with a literal <tt>NULL</tt> as its right side;
--   the meaning is the same but the parsing is different.
ExpressionIsnull :: Expression -> Expression

-- | Represents a <tt>NOTNULL</tt> expression. Not to be confused with a
--   <tt>NOT NULL</tt> expression; the meaning is the same but the parsing
--   is different.
ExpressionNotnull :: Expression -> Expression

-- | Represents a <tt>NOT NULL</tt> expression. Not to be confused with a
--   <tt>NOTNULL</tt> expression; the meaning is the same but the parsing
--   is different.
ExpressionNotNull :: Expression -> Expression

-- | Represents an <tt>IS</tt> expression.
ExpressionIs :: Expression -> Expression -> Expression

-- | Represents an <tt>IS NOT</tt> expression.
ExpressionIsNot :: Expression -> Expression -> Expression

-- | Represents a <tt>BETWEEN</tt> expression.
ExpressionBetween :: Expression -> Expression -> Expression -> Expression

-- | Represents a <tt>NOT BETWEEN</tt> expression.
ExpressionNotBetween :: Expression -> Expression -> Expression -> Expression

-- | Represents an <tt>IN</tt> expression with the right-hand side being a
--   <tt>SELECT</tt> statement.
ExpressionInSelect :: Expression -> (Select) -> Expression

-- | Represents a <tt>NOT IN</tt> expression with the right-hand side being
--   a <tt>SELECT</tt> statement.
ExpressionNotInSelect :: Expression -> (Select) -> Expression

-- | Represents an <tt>IN</tt> expression with the right-hand side being a
--   list of subexpressions.
ExpressionInList :: Expression -> [Expression] -> Expression

-- | Represents a <tt>NOT IN</tt> expression with the right-hand side being
--   a list of subexpressions.
ExpressionNotInList :: Expression -> [Expression] -> Expression

-- | Represents an <tt>IN</tt> expression with the right-hand side being a
--   table name, optionally qualified by a database name.
ExpressionInTable :: Expression -> SinglyQualifiedIdentifier -> Expression

-- | Represents a <tt>NOT IN</tt> expression with the right-hand side being
--   a table name, optionally qualified by a database name.
ExpressionNotInTable :: Expression -> SinglyQualifiedIdentifier -> Expression

-- | Represents a subquery <tt>SELECT</tt> expression.
ExpressionSubquery :: (Select) -> Expression

-- | Represents a subquery <tt>SELECT</tt> expression with the
--   <tt>EXISTS</tt> qualifier.
ExpressionExistsSubquery :: (Select) -> Expression

-- | Represents a subquery <tt>SELECT</tt> expression with the <tt>NOT
--   EXISTS</tt> qualifier.
ExpressionNotExistsSubquery :: (Select) -> Expression

-- | Represents a <tt>CASE</tt> expression.
ExpressionCase :: MaybeSwitchExpression -> (OneOrMore CasePair) -> Else -> Expression

-- | Represents a <tt>RAISE(IGNORE)</tt> expression.
ExpressionRaiseIgnore :: Expression

-- | Represents a <tt>RAISE(ROLLBACK, string)</tt> expression.
ExpressionRaiseRollback :: String -> Expression

-- | Represents a <tt>RAISE(ABORT, string)</tt> expression.
ExpressionRaiseAbort :: String -> Expression

-- | Represents a <tt>RAISE(FAIL, string)</tt> expression.
ExpressionRaiseFail :: String -> Expression

-- | Represents a parenthesized subexpression.
ExpressionParenthesized :: Expression -> Expression

-- | The AST node corresponding to any statement. Used by
--   <a>StatementList</a>. Also useful at top level.
data AnyStatement
Statement :: (Statement l t v w) -> AnyStatement
fromAnyStatement :: StatementClass a => AnyStatement -> a
data ExplainableStatement
ExplainableStatement :: (Statement L0 t v w) -> ExplainableStatement
fromExplainableStatement :: StatementClass a => ExplainableStatement -> a
data TriggerStatement
TriggerStatement :: (Statement l T v w) -> TriggerStatement
fromTriggerStatement :: StatementClass a => TriggerStatement -> a

-- | The AST node which corresponds to a statement. Not directly useful at
--   top level because it is a generalized algebraic datatype the type
--   parameters to which are not exported; instead, see the existentially
--   qualified types <a>AnyStatement</a>, <a>ExplainableStatement</a>, and
--   <a>TriggerStatement</a>, and the type synonyms such as <a>Select</a>
--   which correspond to individual statement types.
--   
--   I apologize for the lack of documentation on these individual entries,
--   but Haddock won't let me do it! At any rate, each of them is an AST
--   node corresponding to an individual statement type.
--   
--   Note the distinctions between <a>Delete</a> and <a>DeleteLimited</a>
--   and <a>Update</a> and <a>UpdateLimited</a>: The <tt>Limited</tt> ones
--   have <tt>LIMIT</tt> clauses and the others do not. Because SQL imposes
--   stricter restrictions on where the ones with <tt>LIMIT</tt> clauses
--   can occur, these are are separate types.
data Statement level triggerable valueReturning which
Explain :: ExplainableStatement -> Statement L1 NT NS Explain'
ExplainQueryPlan :: ExplainableStatement -> Statement L1 NT NS ExplainQueryPlan'
AlterTable :: SinglyQualifiedIdentifier -> AlterTableBody -> Statement L0 NT NS AlterTable'
Analyze :: SinglyQualifiedIdentifier -> Statement L0 NT NS Analyze'
Attach :: MaybeDatabase -> String -> UnqualifiedIdentifier -> Statement L0 NT NS Attach'
Begin :: MaybeTransactionType -> MaybeTransaction -> Statement L0 NT NS Begin'
Commit :: CommitHead -> MaybeTransaction -> Statement L0 NT NS Commit'
CreateIndex :: MaybeUnique -> MaybeIfNotExists -> SinglyQualifiedIdentifier -> UnqualifiedIdentifier -> (OneOrMore IndexedColumn) -> Statement L0 NT NS CreateIndex'
CreateTable :: MaybeTemporary -> MaybeIfNotExists -> SinglyQualifiedIdentifier -> CreateTableBody -> Statement L0 NT NS CreateTable'
CreateTrigger :: MaybeTemporary -> MaybeIfNotExists -> SinglyQualifiedIdentifier -> TriggerTime -> TriggerCondition -> UnqualifiedIdentifier -> MaybeForEachRow -> (Maybe WhenClause) -> (OneOrMore TriggerStatement) -> Statement L0 NT NS CreateTrigger'
CreateView :: MaybeTemporary -> MaybeIfNotExists -> SinglyQualifiedIdentifier -> (Statement L0 T S Select') -> Statement L0 NT NS CreateView'
CreateVirtualTable :: SinglyQualifiedIdentifier -> UnqualifiedIdentifier -> [ModuleArgument] -> Statement L0 NT NS CreateVirtualTable'
Delete :: QualifiedTableName -> (Maybe WhereClause) -> Statement L0 T NS Delete'
DeleteLimited :: QualifiedTableName -> (Maybe WhereClause) -> (Maybe OrderClause) -> LimitClause -> Statement L0 NT NS DeleteLimited'
Detach :: MaybeDatabase -> UnqualifiedIdentifier -> Statement L0 NT NS Detach'
DropIndex :: MaybeIfExists -> SinglyQualifiedIdentifier -> Statement L0 NT NS DropIndex'
DropTable :: MaybeIfExists -> SinglyQualifiedIdentifier -> Statement L0 NT NS DropTable'
DropTrigger :: MaybeIfExists -> SinglyQualifiedIdentifier -> Statement L0 NT NS DropTrigger'
DropView :: MaybeIfExists -> SinglyQualifiedIdentifier -> Statement L0 NT NS DropView'
Insert :: InsertHead -> SinglyQualifiedIdentifier -> InsertBody -> Statement L0 T NS Insert'
Pragma :: SinglyQualifiedIdentifier -> PragmaBody -> Statement L0 NT NS Pragma'
Reindex :: SinglyQualifiedIdentifier -> Statement L0 NT NS Reindex'
Release :: MaybeReleaseSavepoint -> UnqualifiedIdentifier -> Statement L0 NT NS Release'
Rollback :: MaybeTransaction -> MaybeSavepoint -> Statement L0 NT NS Rollback'
Savepoint :: UnqualifiedIdentifier -> Statement L0 NT NS Savepoint'
Select :: SelectCore -> [(CompoundOperator, SelectCore)] -> (Maybe OrderClause) -> (Maybe LimitClause) -> Statement L0 T S Select'
Update :: UpdateHead -> QualifiedTableName -> (OneOrMore (UnqualifiedIdentifier, Expression)) -> (Maybe WhereClause) -> Statement L0 T NS Update'
UpdateLimited :: UpdateHead -> QualifiedTableName -> (OneOrMore (UnqualifiedIdentifier, Expression)) -> (Maybe WhereClause) -> (Maybe OrderClause) -> LimitClause -> Statement L0 NT NS UpdateLimited'
Vacuum :: Statement L0 NT NS Vacuum'

-- | A type synonym which matches only the AST node corresponding to an
--   <tt>ALTER TABLE</tt> statement. Useful at top level.
type AlterTable = Statement L0 NT NS AlterTable'

-- | A type synonym which matches only the AST node corresponding to an
--   <tt>ANALYZE</tt> statement. Useful at top level.
type Analyze = Statement L0 NT NS Analyze'

-- | A type synonym which matches only the AST node corresponding to an
--   <tt>ATTACH</tt> statement. Useful at top level.
type Attach = Statement L0 NT NS Attach'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>BEGIN</tt> statement. Useful at top level.
type Begin = Statement L0 NT NS Begin'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>COMMIT</tt> statement. Useful at top level.
type Commit = Statement L0 NT NS Commit'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>CREATE INDEX</tt> statement. Useful at top level.
type CreateIndex = Statement L0 NT NS CreateIndex'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>CREATE TABLE</tt> statement. Useful at top level.
type CreateTable = Statement L0 NT NS CreateTable'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>CREATE TRIGGER</tt> statement. Useful at top level.
type CreateTrigger = Statement L0 NT NS CreateTrigger'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>CREATE VIEW</tt> statement. Useful at top level.
type CreateView = Statement L0 NT NS CreateView'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>CREATE VIRTUAL TABLE</tt> statement. Useful at top level.
type CreateVirtualTable = Statement L0 NT NS CreateVirtualTable'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>DELETE</tt> statement without a <tt>LIMIT</tt> clause. Useful at
--   top level.
type Delete = Statement L0 T NS Delete'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>DELETE</tt> statement with a <tt>LIMIT</tt> clause. Useful at top
--   level.
type DeleteLimited = Statement L0 NT NS DeleteLimited'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>DETACH</tt> statement. Useful at top level.
type Detach = Statement L0 NT NS Detach'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>DROP INDEX</tt> statement. Useful at top level.
type DropIndex = Statement L0 NT NS DropIndex'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>DROP TABLE</tt> statement. Useful at top level.
type DropTable = Statement L0 NT NS DropTable'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>DROP TRIGGER</tt> statement. Useful at top level.
type DropTrigger = Statement L0 NT NS DropTrigger'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>DROP VIEW</tt> statement. Useful at top level.
type DropView = Statement L0 NT NS DropView'

-- | A type synonym which matches only the AST node corresponding to an
--   <tt>EXPLAIN</tt> statement. Useful at top level.
type Explain = Statement L1 NT NS Explain'

-- | A type synonym which matches only the AST node corresponding to an
--   <tt>EXPLAIN QUERY PLAN</tt> statement. Useful at top level.
type ExplainQueryPlan = Statement L1 NT NS ExplainQueryPlan'

-- | A type synonym which matches only the AST node corresponding to an
--   <tt>INSERT</tt> statement. Useful at top level.
type Insert = Statement L0 T NS Insert'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>PRAGMA</tt> statement. Useful at top level.
type Pragma = Statement L0 NT NS Pragma'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>REINDEX</tt> statement. Useful at top level.
type Reindex = Statement L0 NT NS Reindex'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>RELEASE</tt> statement. Useful at top level.
type Release = Statement L0 NT NS Release'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>ROLLBACK</tt> statement. Useful at top level.
type Rollback = Statement L0 NT NS Rollback'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>SAVEPOINT</tt> statement. Useful at top level.
type Savepoint = Statement L0 NT NS Savepoint'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>SELECT</tt> statement. Useful at top level.
type Select = Statement L0 T S Select'

-- | A type synonym which matches only the AST node corresponding to an
--   <tt>UPDATE</tt> statement without a <tt>LIMIT</tt> clause. Useful at
--   top level.
type Update = Statement L0 T NS Update'

-- | A type synonym which matches only the AST node corresponding to an
--   <tt>UPDATE</tt> statement with a <tt>LIMIT</tt> clause. Useful at top
--   level.
type UpdateLimited = Statement L0 NT NS UpdateLimited'

-- | A type synonym which matches only the AST node corresponding to a
--   <tt>VACUUM</tt> statement. Useful at top level.
type Vacuum = Statement L0 NT NS Vacuum'
