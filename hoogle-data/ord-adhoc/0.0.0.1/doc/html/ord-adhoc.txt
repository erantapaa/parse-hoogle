-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Creating Ord instances instantly
--   
--   A little extension to Ord
@package ord-adhoc
@version 0.0.0.1


-- | Creating Ord instance by a key function
module Data.Ord.Ala

-- | Also known as store comonad
newtype Ala k a
Ala :: (a -> k, a) -> Ala k a

-- | Make <a>Ord</a> instance from the key function.
ordBy :: Ord k => (a -> k) -> a -> Ala k a

-- | Extract the original value from <a>Ala</a>.
unAla :: Ala k a -> a

-- | Extract the key from <a>Ala</a>.
keyAla :: Ala k a -> k
mapAla :: (j -> k) -> Ala j a -> Ala k a
instance Ord k => Ord (Ala k a)
instance Eq k => Eq (Ala k a)


-- | Creating bounded value from any Ord instance
module Data.Ord.Bounded

-- | A structure that provides minimum/maximum to any value.
data GBounded min max a
type BoundedMin = GBounded () Void
type BoundedMax = GBounded Void ()
type BoundedBoth = GBounded () ()

-- | Provided minimum value.
minimumBound :: GBounded () max a

-- | Provided maximum value.
maximumBound :: GBounded min () a
instance (Show min, Show max, Show a) => Show (GBounded min max a)
instance (Eq min, Eq max, Eq a) => Eq (GBounded min max a)
instance (Ord min, Ord max, Ord a) => Ord (GBounded min max a)
instance Monad (GBounded min max)
instance Applicative (GBounded min max)
instance Functor (GBounded min max)
