-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Trivial routines for inspecting git repositories
--   
--   This is a bunch of trivial routines for inspecting git repositories.
--   It is in no way useful beyond that.
@package ght
@version 0.4.0.1

module Git.SHA

-- | Prints out a bytestring in hexadecimal. Just for convenience.
showDigestBS :: ByteString -> String
readDigestBS :: String -> ByteString

module Git.Path
gitPath :: FilePath -> IO FilePath
gitRoot :: IO FilePath
gitDeref :: String -> IO ByteString

-- | Return the given path if it exists, else the result of applying the
--   modifier function
pathExistOr :: (FilePath -> IO FilePath) -> FilePath -> IO FilePath

module Git.Pack
data Pack
Pack :: Int -> Int -> [PackObject] -> Pack
packVersion :: Pack -> Int
packNumObjects :: Pack -> Int
packObjects :: Pack -> [PackObject]
data PackObject
PackObject :: PackObjectType -> Int -> ByteString -> PackObject
poType :: PackObject -> PackObjectType
poSize :: PackObject -> Int
poData :: PackObject -> ByteString
data PackObjectType
packPretty :: Pack -> ByteString
packObjectPretty :: ByteString -> PackObject -> ByteString
packRead :: FilePath -> IO (Maybe Pack)
packReadObject :: FilePath -> FileOffset -> IO (Maybe PackObject)

-- | Generate the pathname for a given packfile
packPath :: String -> IO FilePath
instance Show PackObjectType
instance Eq PackObjectType
instance Show PackObject
instance Show Pack

module Git.PackIndex
dumpRawPackIndex :: FilePath -> IO String
findInPackIdxs :: ByteString -> IO (Maybe PackObject)

-- | Generate the pathname for a given packfile
idxPath :: String -> IO FilePath

module Git.Commit
data Commit
Commit :: ByteString -> ByteString -> ByteString -> ByteString -> ByteString -> ByteString -> Commit
commitParent :: Commit -> ByteString
commitAuthor :: Commit -> ByteString
commitAuthorDate :: Commit -> ByteString
commitCommitter :: Commit -> ByteString
commitCommitterDate :: Commit -> ByteString
commitMessage :: Commit -> ByteString
commitParse :: ByteString -> Commit
commitPretty :: Commit -> ByteString

module Git.Blob
readBlob :: String -> IO (Maybe ByteString)
prettyBlob :: String -> ByteString -> ByteString
findBlob :: [String] -> IO [String]
