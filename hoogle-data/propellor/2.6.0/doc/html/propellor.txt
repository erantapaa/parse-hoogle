-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | property-based host configuration management in haskell
--   
@package propellor
@version 2.6.0

module Propellor.Types.Empty
class Empty t
isEmpty :: Empty t => t -> Bool
instance Empty (Set v)
instance Empty (Map k v)
instance Empty [a]

module Propellor.Types.Result

-- | There can be three results of satisfying a Property.
data Result
NoChange :: Result
MadeChange :: Result
FailedChange :: Result
class ToResult t
toResult :: ToResult t => t -> Result

-- | Results of actions, with color.
class ActionResult a
getActionResult :: ActionResult a => a -> (String, ColorIntensity, Color)
instance Read Result
instance Show Result
instance Eq Result
instance ActionResult Result
instance ActionResult Bool
instance ToResult Bool
instance Monoid Result

module Propellor.Types.OS

-- | High level description of a operating system.
data System
System :: Distribution -> Architecture -> System
data Distribution
Debian :: DebianSuite -> Distribution
Ubuntu :: Release -> Distribution

-- | Debian has several rolling suites, and a number of stable releases,
--   such as Stable "jessie".
data DebianSuite
Experimental :: DebianSuite
Unstable :: DebianSuite
Testing :: DebianSuite
Stable :: Release -> DebianSuite
isStable :: DebianSuite -> Bool
type Release = String
type Architecture = String

-- | Either a host name e.g., <tt>"haskell.org"</tt> or a numeric host
--   address string consisting of a dotted decimal IPv4 address or an IPv6
--   address e.g., <tt>"192.168.0.1"</tt>.
type HostName = String
type UserName = String
newtype User
User :: UserName -> User
newtype Group
Group :: String -> Group

-- | Makes a Group with the same name as the User.
userGroup :: User -> Group
newtype Port
Port :: Int -> Port
instance Show DebianSuite
instance Eq DebianSuite
instance Show Distribution
instance Eq Distribution
instance Show System
instance Eq System
instance Eq Port
instance Show Port

module Propellor.Types.Val
data Val a
Val :: a -> Val a
NoVal :: Val a
fromVal :: Val a -> Maybe a
instance Eq a => Eq (Val a)
instance Show a => Show (Val a)
instance Empty (Val a)
instance Monoid (Val a)

module Propellor.Types.Container

-- | A value that can be bound between the host and a container.
--   
--   For example, a Bound Port is a Port on the container that is bound to
--   a Port on the host.
data Bound v
Bound :: v -> v -> Bound v
hostSide :: Bound v -> v
containerSide :: Bound v -> v

-- | Create a Bound value, from two different values for the host and
--   container.
--   
--   For example, <tt>Port 8080 -&lt;- Port 80</tt> means that port 8080 on
--   the host is bound to port 80 from the container.
(-<-) :: (hostv ~ v, containerv ~ v) => hostv -> containerv -> Bound v

-- | Flipped version of -&lt;- with the container value first and host
--   value second.
(->-) :: (containerv ~ v, hostv ~ v) => hostv -> containerv -> Bound v

-- | Create a Bound value, that is the same on both the host and container.
same :: v -> Bound v

module Propellor.Types.Docker
data DockerInfo h
DockerInfo :: [DockerRunParam] -> Map String h -> DockerInfo h
_dockerRunParams :: DockerInfo h -> [DockerRunParam]
_dockerContainers :: DockerInfo h -> Map String h
newtype DockerRunParam
DockerRunParam :: (HostName -> String) -> DockerRunParam
instance Show h => Show (DockerInfo h)
instance Show DockerRunParam
instance Empty (DockerInfo h)
instance Monoid (DockerInfo h)

module Propellor.Types.Dns
type Domain = String
data IPAddr
IPv4 :: String -> IPAddr
IPv6 :: String -> IPAddr
fromIPAddr :: IPAddr -> String

-- | Represents a bind 9 named.conf file.
data NamedConf
NamedConf :: Domain -> DnsServerType -> FilePath -> [IPAddr] -> [IPAddr] -> [String] -> NamedConf
confDomain :: NamedConf -> Domain
confDnsServerType :: NamedConf -> DnsServerType
confFile :: NamedConf -> FilePath
confMasters :: NamedConf -> [IPAddr]
confAllowTransfer :: NamedConf -> [IPAddr]
confLines :: NamedConf -> [String]
data DnsServerType
Master :: DnsServerType
Secondary :: DnsServerType

-- | Represents a bind 9 zone file.
data Zone
Zone :: Domain -> SOA -> [(BindDomain, Record)] -> Zone
zDomain :: Zone -> Domain
zSOA :: Zone -> SOA
zHosts :: Zone -> [(BindDomain, Record)]

-- | Every domain has a SOA record, which is big and complicated.
data SOA
SOA :: BindDomain -> SerialNumber -> Integer -> Integer -> Integer -> Integer -> SOA

-- | Typically ns1.your.domain
sDomain :: SOA -> BindDomain

-- | The most important parameter is the serial number, which must increase
--   after each change.
sSerial :: SOA -> SerialNumber
sRefresh :: SOA -> Integer
sRetry :: SOA -> Integer
sExpire :: SOA -> Integer
sNegativeCacheTTL :: SOA -> Integer

-- | Types of DNS records.
--   
--   This is not a complete list, more can be added.
data Record
Address :: IPAddr -> Record
CNAME :: BindDomain -> Record
MX :: Int -> BindDomain -> Record
NS :: BindDomain -> Record
TXT :: String -> Record
SRV :: Word16 -> Word16 -> Word16 -> BindDomain -> Record
SSHFP :: Int -> Int -> String -> Record
INCLUDE :: FilePath -> Record
getIPAddr :: Record -> Maybe IPAddr
getCNAME :: Record -> Maybe BindDomain
getNS :: Record -> Maybe BindDomain

-- | Bind serial numbers are unsigned, 32 bit integers.
type SerialNumber = Word32

-- | Domains in the zone file must end with a period if they are absolute.
--   
--   Let's use a type to keep absolute domains straight from relative
--   domains.
--   
--   The RootDomain refers to the top level of the domain, so can be used
--   to add nameservers, MX's, etc to a domain.
data BindDomain
RelDomain :: Domain -> BindDomain
AbsDomain :: Domain -> BindDomain
RootDomain :: BindDomain
domainHostName :: BindDomain -> Maybe HostName
newtype NamedConfMap
NamedConfMap :: (Map Domain NamedConf) -> NamedConfMap

-- | Adding a Master NamedConf stanza for a particulr domain always
--   overrides an existing Secondary stanza for that domain, while a
--   Secondary stanza is only added when there is no existing Master
--   stanza.
fromNamedConfMap :: NamedConfMap -> Map Domain NamedConf
instance Read IPAddr
instance Show IPAddr
instance Eq IPAddr
instance Ord IPAddr
instance Show DnsServerType
instance Eq DnsServerType
instance Ord DnsServerType
instance Show NamedConf
instance Eq NamedConf
instance Ord NamedConf
instance Read BindDomain
instance Show BindDomain
instance Eq BindDomain
instance Ord BindDomain
instance Read Record
instance Show Record
instance Eq Record
instance Ord Record
instance Read SOA
instance Show SOA
instance Eq SOA
instance Read Zone
instance Show Zone
instance Eq Zone
instance Eq NamedConfMap
instance Ord NamedConfMap
instance Show NamedConfMap
instance Empty NamedConfMap
instance Monoid NamedConfMap

module Propellor.Types.Chroot
data ChrootInfo host
ChrootInfo :: Map FilePath host -> ChrootCfg -> ChrootInfo host
_chroots :: ChrootInfo host -> Map FilePath host
_chrootCfg :: ChrootInfo host -> ChrootCfg
data ChrootCfg
NoChrootCfg :: ChrootCfg
SystemdNspawnCfg :: [(String, Bool)] -> ChrootCfg
instance Show ChrootCfg
instance Eq ChrootCfg
instance Show host => Show (ChrootInfo host)
instance Empty ChrootCfg
instance Monoid ChrootCfg
instance Empty (ChrootInfo host)
instance Monoid (ChrootInfo host)

module Propellor.Types.PrivData

-- | Note that removing or changing constructors or changing types will
--   break the serialized privdata files, so don't do that! It's fine to
--   add new constructors.
data PrivDataField
DockerAuthentication :: PrivDataField
SshPubKey :: SshKeyType -> UserName -> PrivDataField

-- | For host key, use empty UserName
SshPrivKey :: SshKeyType -> UserName -> PrivDataField
SshAuthorizedKeys :: UserName -> PrivDataField
Password :: UserName -> PrivDataField
CryptPassword :: UserName -> PrivDataField
PrivFile :: FilePath -> PrivDataField
GpgKey :: PrivDataField
DnsSec :: DnsSecKey -> PrivDataField

-- | Combines a PrivDataField with a description of how to generate its
--   value.
data PrivDataSource
PrivDataSourceFile :: PrivDataField -> FilePath -> PrivDataSource
PrivDataSourceFileFromCommand :: PrivDataField -> FilePath -> String -> PrivDataSource
PrivDataSource :: PrivDataField -> String -> PrivDataSource
type PrivDataSourceDesc = String
class IsPrivDataSource s
privDataField :: IsPrivDataSource s => s -> PrivDataField
describePrivDataSource :: IsPrivDataSource s => s -> Maybe PrivDataSourceDesc

-- | A context in which a PrivDataField is used.
--   
--   Often this will be a domain name. For example, Context
--   "www.example.com" could be used for the SSL cert for the web server
--   serving that domain. Multiple hosts might use that privdata.
--   
--   This appears in serialized privdata files.
newtype Context
Context :: String -> Context

-- | A context that varies depending on the HostName where it's used.
newtype HostContext
HostContext :: (HostName -> Context) -> HostContext
mkHostContext :: HostContext -> HostName -> Context

-- | Class of things that can be used as a Context.
class IsContext c
asContext :: IsContext c => HostName -> c -> Context
asHostContext :: IsContext c => c -> HostContext

-- | Use when a PrivDataField is not dependent on any paricular context.
anyContext :: Context

-- | Makes a HostContext that consists just of the hostname.
hostContext :: HostContext
type PrivData = String
data SshKeyType
SshRsa :: SshKeyType
SshDsa :: SshKeyType
SshEcdsa :: SshKeyType
SshEd25519 :: SshKeyType

-- | Parameter that would be passed to ssh-keygen to generate key of this
--   type
sshKeyTypeParam :: SshKeyType -> String
data DnsSecKey

-- | DNSSEC Zone Signing Key (public)
PubZSK :: DnsSecKey

-- | DNSSEC Zone Signing Key (private)
PrivZSK :: DnsSecKey

-- | DNSSEC Key Signing Key (public)
PubKSK :: DnsSecKey

-- | DNSSEC Key Signing Key (private)
PrivKSK :: DnsSecKey
instance Read Context
instance Show Context
instance Ord Context
instance Eq Context
instance Read SshKeyType
instance Show SshKeyType
instance Ord SshKeyType
instance Eq SshKeyType
instance Enum SshKeyType
instance Bounded SshKeyType
instance Read DnsSecKey
instance Show DnsSecKey
instance Ord DnsSecKey
instance Eq DnsSecKey
instance Bounded DnsSecKey
instance Enum DnsSecKey
instance Read PrivDataField
instance Show PrivDataField
instance Ord PrivDataField
instance Eq PrivDataField
instance IsContext Context
instance IsContext HostContext
instance Eq HostContext
instance Ord HostContext
instance Show HostContext
instance IsPrivDataSource PrivDataSource
instance IsPrivDataSource PrivDataField

module Propellor.Types.CmdLine
data CmdLine
Run :: HostName -> CmdLine
Spin :: [HostName] -> (Maybe HostName) -> CmdLine
SimpleRun :: HostName -> CmdLine
Set :: PrivDataField -> Context -> CmdLine
Unset :: PrivDataField -> Context -> CmdLine
Dump :: PrivDataField -> Context -> CmdLine
Edit :: PrivDataField -> Context -> CmdLine
ListFields :: CmdLine
AddKey :: String -> CmdLine
Merge :: CmdLine
Serialized :: CmdLine -> CmdLine
Continue :: CmdLine -> CmdLine
Update :: (Maybe HostName) -> CmdLine
Relay :: HostName -> CmdLine
DockerInit :: HostName -> CmdLine
DockerChain :: HostName -> String -> CmdLine
ChrootChain :: HostName -> FilePath -> Bool -> Bool -> CmdLine
GitPush :: Fd -> Fd -> CmdLine
Check :: CmdLine
instance Read CmdLine
instance Show CmdLine
instance Eq CmdLine

module Propellor.Types

-- | Everything Propellor knows about a system: Its hostname, properties
--   and their collected info.
data Host
Host :: HostName -> [Property HasInfo] -> Info -> Host
hostName :: Host -> HostName
hostProperties :: Host -> [Property HasInfo]
hostInfo :: Host -> Info
type Desc = String

-- | The core data type of Propellor, this represents a property that the
--   system should have, and an action to ensure it has the property.
data Property i

-- | Indicates that a Property has associated Info.
data HasInfo

-- | Indicates that a Property does not have Info.
data NoInfo

-- | Type level calculation of the combination of HasInfo and/or NoInfo

-- | Constructs a Property with associated Info.
infoProperty :: Desc -> Propellor Result -> Info -> [Property i] -> Property HasInfo

-- | Constructs a Property with no Info.
simpleProperty :: Desc -> Propellor Result -> [Property NoInfo] -> Property NoInfo

-- | Changes the action that is performed to satisfy a property.
adjustPropertySatisfy :: Property i -> (Propellor Result -> Propellor Result) -> Property i
propertyInfo :: Property i -> Info
propertyDesc :: Property i -> Desc

-- | A Property can include a list of child properties that it also
--   satisfies. This allows them to be introspected to collect their info,
--   etc.
propertyChildren :: Property i -> [Property i]

-- | A property that can be reverted.
data RevertableProperty
RevertableProperty :: (Property HasInfo) -> (Property HasInfo) -> RevertableProperty

-- | Makes a revertable property; the first Property is run normally and
--   the second is run when it's reverted.
(<!>) :: Property i1 -> Property i2 -> RevertableProperty
class IsProp p
describe :: IsProp p => p -> Desc -> p
toProp :: IsProp p => p -> Property HasInfo
getDesc :: IsProp p => p -> Desc
getInfoRecursive :: IsProp p => p -> Info
class Combines x y
requires :: Combines x y => x -> y -> CombinedType x y

-- | Type level calculation of the type that results from combining two
--   types with <a>requires</a>.

-- | Combines together two properties, resulting in one property that
--   ensures the first, and if the first succeeds, ensures the second. The
--   property uses the description of the first property.
before :: (IsProp x, Combines y x, IsProp (CombinedType y x)) => x -> y -> CombinedType y x

-- | Combines together two properties, yielding a property that has the
--   description and info of the first, and that has the second property as
--   a child. The two actions to satisfy the properties are passed to a
--   function that can combine them in arbitrary ways.
combineWith :: Combines (Property x) (Property y) => (Propellor Result -> Propellor Result -> Propellor Result) -> Property x -> Property y -> CombinedType (Property x) (Property y)

-- | Information about a host.
data Info
Info :: Val System -> Set (PrivDataField, Maybe PrivDataSourceDesc, HostContext) -> Map SshKeyType String -> Set HostName -> Set Record -> NamedConfMap -> DockerInfo Host -> ChrootInfo Host -> Info
_os :: Info -> Val System
_privData :: Info -> Set (PrivDataField, Maybe PrivDataSourceDesc, HostContext)
_sshPubKey :: Info -> Map SshKeyType String
_aliases :: Info -> Set HostName
_dns :: Info -> Set Record
_namedconf :: Info -> NamedConfMap
_dockerinfo :: Info -> DockerInfo Host
_chrootinfo :: Info -> ChrootInfo Host

-- | Propellor's monad provides read-only access to info about the host
--   it's running on, and a writer to accumulate EndActions.
newtype Propellor p
Propellor :: RWST Host [EndAction] () IO p -> Propellor p
runWithHost :: Propellor p -> RWST Host [EndAction] () IO p

-- | An action that Propellor runs at the end, after trying to satisfy all
--   properties. It's passed the combined Result of the entire Propellor
--   run.
data EndAction
EndAction :: Desc -> (Result -> Propellor Result) -> EndAction

-- | Gets the action that can be run to satisfy a Property. You should
--   never run this action directly. Use <a>ensureProperty</a> instead.
propertySatisfy :: Property i -> Propellor Result

-- | Makes a version of a Proprty without its Info. Use with caution!
ignoreInfo :: Property i -> Property NoInfo
instance Show Info
instance Show Host
instance Monad Propellor
instance Functor Propellor
instance Applicative Propellor
instance MonadReader Host Propellor
instance MonadWriter [EndAction] Propellor
instance MonadIO Propellor
instance MonadCatch Propellor
instance MonadThrow Propellor
instance MonadMask Propellor
instance Empty Info
instance Monoid Info
instance Combines RevertableProperty RevertableProperty
instance Combines RevertableProperty (Property NoInfo)
instance Combines RevertableProperty (Property HasInfo)
instance Combines (Property NoInfo) (Property NoInfo)
instance Combines (Property NoInfo) (Property HasInfo)
instance Combines (Property HasInfo) (Property NoInfo)
instance Combines (Property HasInfo) (Property HasInfo)
instance IsProp RevertableProperty
instance IsProp (Property NoInfo)
instance IsProp (Property HasInfo)
instance Show (Property i)
instance Monoid (Propellor Result)

module Propellor.Info
pureInfoProperty :: Desc -> Info -> Property HasInfo
askInfo :: (Info -> Val a) -> Propellor (Maybe a)
os :: System -> Property HasInfo
getOS :: Propellor (Maybe System)

-- | Indidate that a host has an A record in the DNS.
--   
--   When propellor is used to deploy a DNS server for a domain, the hosts
--   in the domain are found by looking for these and similar properites.
--   
--   When propellor --spin is used to deploy a host, it checks if the
--   host's IP Property matches the DNS. If the DNS is missing or out of
--   date, the host will instead be contacted directly by IP address.
ipv4 :: String -> Property HasInfo

-- | Indidate that a host has an AAAA record in the DNS.
ipv6 :: String -> Property HasInfo

-- | Indicates another name for the host in the DNS.
--   
--   When the host's ipv4/ipv6 addresses are known, the alias is set up to
--   use their address, rather than using a CNAME. This avoids various
--   problems with CNAMEs, and also means that when multiple hosts have the
--   same alias, a DNS round-robin is automatically set up.
alias :: Domain -> Property HasInfo
addDNS :: Record -> Property HasInfo
hostMap :: [Host] -> Map HostName Host
aliasMap :: [Host] -> Map HostName Host
findHost :: [Host] -> HostName -> Maybe Host
findHostNoAlias :: [Host] -> HostName -> Maybe Host
findAlias :: [Host] -> HostName -> Maybe Host
getAddresses :: Info -> [IPAddr]
hostAddresses :: HostName -> [Host] -> [IPAddr]

module Propellor.Property

-- | Constructs a Property, from a description and an action to run to
--   ensure the Property is met.
property :: Desc -> Propellor Result -> Property NoInfo

-- | Makes a perhaps non-idempotent Property be idempotent by using a flag
--   file to indicate whether it has run before. Use with caution.
flagFile :: Property i -> FilePath -> Property i
flagFile' :: Property i -> IO FilePath -> Property i

-- | Whenever a change has to be made for a Property, causes a hook
--   Property to also be run, but not otherwise.
onChange :: Combines (Property x) (Property y) => Property x -> Property y -> CombinedType (Property x) (Property y)

-- | Alias for <tt>flip describe</tt>
(==>) :: IsProp (Property i) => Desc -> Property i -> Property i

-- | Makes a Property only need to do anything when a test succeeds.
check :: IO Bool -> Property i -> Property i

-- | Tries the first property, but if it fails to work, instead uses the
--   second.
fallback :: Combines (Property p1) (Property p2) => Property p1 -> Property p2 -> Property (CInfo p1 p2)

-- | Marks a Property as trivial. It can only return FailedChange or
--   NoChange.
--   
--   Useful when it's just as expensive to check if a change needs to be
--   made as it is to just idempotently assure the property is satisfied.
--   For example, chmodding a file.
trivial :: Property i -> Property i

-- | Makes a property that is satisfied differently depending on the host's
--   operating system.
--   
--   Note that the operating system may not be declared for some hosts.
withOS :: Desc -> (Maybe System -> Propellor Result) -> Property NoInfo

-- | Undoes the effect of a property.
revert :: RevertableProperty -> RevertableProperty
makeChange :: IO () -> Propellor Result
noChange :: Propellor Result
doNothing :: Property NoInfo

-- | Registers an action that should be run at the very end,
endAction :: Desc -> (Result -> Propellor Result) -> Propellor ()

module Propellor.Property.Cmd

-- | A property that can be satisfied by running a command.
--   
--   The command must exit 0 on success.
cmdProperty :: String -> [String] -> Property NoInfo
cmdProperty' :: String -> [String] -> (CreateProcess -> CreateProcess) -> Property NoInfo

-- | A property that can be satisfied by running a command, with added
--   environment variables in addition to the standard environment.
cmdPropertyEnv :: String -> [String] -> [(String, String)] -> Property NoInfo

-- | A series of shell commands. (Without a leading hashbang.)
type Script = [String]

-- | A property that can be satisfied by running a script.
scriptProperty :: Script -> Property NoInfo

-- | A property that can satisfied by running a script as user (cd'd to
--   their home directory).
userScriptProperty :: User -> Script -> Property NoInfo

-- | Parameters that can be passed to a shell command.
data CommandParam

-- | A parameter
Param :: String -> CommandParam

-- | The name of a file
File :: FilePath -> CommandParam

-- | Run a system command, and returns True or False if it succeeded or
--   failed.
--   
--   This and other command running functions in this module log the
--   commands run at debug level, using System.Log.Logger.
boolSystem :: FilePath -> [CommandParam] -> IO Bool
boolSystemEnv :: FilePath -> [CommandParam] -> Maybe [(String, String)] -> IO Bool

-- | Runs a system command, returning the exit status.
safeSystem :: FilePath -> [CommandParam] -> IO ExitCode
safeSystemEnv :: FilePath -> [CommandParam] -> Maybe [(String, String)] -> IO ExitCode

-- | Escapes a filename or other parameter to be safely able to be exposed
--   to the shell.
--   
--   This method works for POSIX shells, as well as other shells like csh.
shellEscape :: String -> String

-- | Wrapper around <a>createProcess</a> from System.Process, that does
--   debug logging.
createProcess :: CreateProcess -> IO (Maybe Handle, Maybe Handle, Maybe Handle, ProcessHandle)

module Propellor.PropAccum

-- | Starts accumulating the properties of a Host.
--   
--   <pre>
--   host "example.com"
--   	&amp; someproperty
--   	! oldproperty
--   	&amp; otherproperty
--   </pre>
host :: HostName -> Host

-- | Starts accumulating a list of properties.
--   
--   <pre>
--   propertyList "foo" $ props
--   	&amp; someproperty
--   	! oldproperty
--   	&amp; otherproperty
--   </pre>
props :: PropList

-- | Something that can accumulate properties.
class PropAccum h
(&) :: (PropAccum h, IsProp p) => h -> p -> h
(&^) :: (PropAccum h, IsProp p) => h -> p -> h
getProperties :: PropAccum h => h -> [Property HasInfo]

-- | Adds a property in reverted form.
(!) :: PropAccum h => h -> RevertableProperty -> h
data PropList

-- | Adjust the provided Property, adding to its propertyChidren the
--   properties of the provided container.
--   
--   The Info of the propertyChildren is adjusted to only include info that
--   should be propigated out to the Property.
--   
--   DNS Info is propigated, so that eg, aliases of a PropAccum are
--   reflected in the dns for the host where it runs.
--   
--   PrivData Info is propigated, so that properties used inside a
--   PropAccum will have the necessary PrivData available.
propigateContainer :: PropAccum container => container -> Property HasInfo -> Property HasInfo
instance PropAccum PropList
instance PropAccum Host

module Propellor.Message
data MessageHandle
ConsoleMessageHandle :: MessageHandle
TextMessageHandle :: MessageHandle
mkMessageHandle :: IO MessageHandle
forceConsole :: IO ()
isConsole :: MessageHandle -> Bool
whenConsole :: MessageHandle -> IO () -> IO ()

-- | Shows a message while performing an action, with a colored status
--   display.
actionMessage :: (MonadIO m, ActionResult r) => Desc -> m r -> m r

-- | Shows a message while performing an action on a specified host, with a
--   colored status display.
actionMessageOn :: (MonadIO m, ActionResult r) => HostName -> Desc -> m r -> m r
actionMessage' :: (MonadIO m, ActionResult r) => Maybe HostName -> Desc -> m r -> m r
warningMessage :: MonadIO m => String -> m ()
errorMessage :: MonadIO m => String -> m a
colorLine :: MessageHandle -> ColorIntensity -> Color -> String -> IO ()
debug :: [String] -> IO ()
checkDebugMode :: IO ()
enableDebugMode :: IO ()

module Propellor.Exception

-- | Catches IO exceptions and returns FailedChange.
catchPropellor :: Propellor Result -> Propellor Result
tryPropellor :: Propellor a -> Propellor (Either IOException a)

module Propellor.Engine

-- | Gets the Properties of a Host, and ensures them all, with nice display
--   of what's being done.
mainProperties :: Host -> IO ()

-- | Runs a Propellor action with the specified host.
--   
--   If the Result is not FailedChange, any EndActions that were
--   accumulated while running the action are then also run.
runPropellor :: Host -> Propellor Result -> IO Result

-- | For when code running in the Propellor monad needs to ensure a
--   Property.
--   
--   This can only be used on a Property that has NoInfo.
ensureProperty :: Property NoInfo -> Propellor Result

-- | Ensures a list of Properties, with a display of each as it runs.
ensureProperties :: [Property NoInfo] -> Propellor Result

-- | Lifts an action into a different host.
--   
--   <pre>
--   fromHost hosts "otherhost" getPubKey
--   </pre>
fromHost :: [Host] -> HostName -> Propellor a -> Propellor (Maybe a)
onlyProcess :: FilePath -> IO a -> IO a

-- | Reads and displays each line from the Handle, except for the last line
--   which is a Result.
processChainOutput :: Handle -> IO Result

module Propellor.Property.List
class PropertyList l
propertyList :: PropertyList l => Desc -> l -> Property (PropertyListType l)
combineProperties :: PropertyList l => Desc -> l -> Property (PropertyListType l)

-- | Type level function to calculate whether a PropertyList has Info.
instance PropertyList PropList
instance PropertyList [Property HasInfo]
instance PropertyList [Property NoInfo]

module Propellor.PrivData

-- | Allows a Property to access the value of a specific PrivDataField, for
--   use in a specific Context or HostContext.
--   
--   Example use:
--   
--   <pre>
--   withPrivData (PrivFile pemfile) (Context "joeyh.name") $ \getdata -&gt;
--       property "joeyh.name ssl cert" $ getdata $ \privdata -&gt;
--         liftIO $ writeFile pemfile privdata
--     where pemfile = "/etc/ssl/certs/web.pem"
--   </pre>
--   
--   Note that if the value is not available, the action is not run and
--   instead it prints a message to help the user make the necessary
--   private data available.
--   
--   The resulting Property includes Info about the PrivDataField being
--   used, which is necessary to ensure that the privdata is sent to the
--   remote host by propellor.
withPrivData :: (IsContext c, IsPrivDataSource s, IsProp (Property i)) => s -> c -> (((PrivData -> Propellor Result) -> Propellor Result) -> Property i) -> Property HasInfo
withSomePrivData :: (IsContext c, IsPrivDataSource s, IsProp (Property i)) => [s] -> c -> ((((PrivDataField, PrivData) -> Propellor Result) -> Propellor Result) -> Property i) -> Property HasInfo
addPrivData :: (PrivDataField, Maybe PrivDataSourceDesc, HostContext) -> Property HasInfo
setPrivData :: PrivDataField -> Context -> IO ()
unsetPrivData :: PrivDataField -> Context -> IO ()
dumpPrivData :: PrivDataField -> Context -> IO ()
editPrivData :: PrivDataField -> Context -> IO ()

-- | Get only the set of PrivData that the Host's Info says it uses.
filterPrivData :: Host -> PrivMap -> PrivMap
listPrivDataFields :: [Host] -> IO ()
makePrivDataDir :: IO ()
decryptPrivData :: IO PrivMap
type PrivMap = Map (PrivDataField, Context) PrivData


-- | Pulls in lots of useful modules for building and using Properties.
--   
--   When propellor runs on a Host, it ensures that its list of Properties
--   is satisfied, taking action as necessary when a Property is not
--   currently satisfied.
--   
--   A simple propellor program example:
--   
--   <pre>
--   import Propellor
--   import Propellor.CmdLine
--   import qualified Propellor.Property.File as File
--   import qualified Propellor.Property.Apt as Apt
--   
--   main :: IO ()
--   main = defaultMain hosts
--   
--   hosts :: [Host]
--   hosts =
--     [ host "example.com"
--       &amp; Apt.installed ["mydaemon"]
--       &amp; "/etc/mydaemon.conf" `File.containsLine` "secure=1"
--         `onChange` cmdProperty "service" ["mydaemon", "restart"]
--       ! Apt.installed ["unwantedpackage"]
--     ]
--   </pre>
--   
--   See config.hs for a more complete example, and clone Propellor's git
--   repository for a deployable system using Propellor: git clone
--   <a>git://git.joeyh.name/propellor</a>
module Propellor

-- | This is where propellor installs itself when deploying a host.
localdir :: FilePath

module Propellor.Property.File
type Line = String

-- | Replaces all the content of a file.
hasContent :: FilePath -> [Line] -> Property NoInfo

-- | Ensures a file has contents that comes from PrivData.
--   
--   The file's permissions are preserved if the file already existed.
--   Otherwise, they're set to 600.
hasPrivContent :: IsContext c => FilePath -> c -> Property HasInfo

-- | Like hasPrivContent, but allows specifying a source for PrivData,
--   rather than using PrivDataSourceFile .
hasPrivContentFrom :: (IsContext c, IsPrivDataSource s) => s -> FilePath -> c -> Property HasInfo

-- | Leaves the file at its default or current mode, allowing "private"
--   data to be read.
--   
--   Use with caution!
hasPrivContentExposed :: IsContext c => FilePath -> c -> Property HasInfo
hasPrivContentExposedFrom :: (IsContext c, IsPrivDataSource s) => s -> FilePath -> c -> Property HasInfo
hasPrivContent' :: (IsContext c, IsPrivDataSource s) => (FilePath -> String -> IO ()) -> s -> FilePath -> c -> Property HasInfo

-- | Ensures that a line is present in a file, adding it to the end if not.
containsLine :: FilePath -> Line -> Property NoInfo
containsLines :: FilePath -> [Line] -> Property NoInfo

-- | Ensures that a line is not present in a file. Note that the file is
--   ensured to exist, so if it doesn't, an empty file will be written.
lacksLine :: FilePath -> Line -> Property NoInfo

-- | Removes a file. Does not remove symlinks or non-plain-files.
notPresent :: FilePath -> Property NoInfo
fileProperty :: Desc -> ([Line] -> [Line]) -> FilePath -> Property NoInfo
fileProperty' :: (FilePath -> String -> IO ()) -> Desc -> ([Line] -> [Line]) -> FilePath -> Property NoInfo

-- | Ensures a directory exists.
dirExists :: FilePath -> Property NoInfo

-- | Ensures that a file/dir has the specified owner and group.
ownerGroup :: FilePath -> User -> Group -> Property NoInfo

-- | Ensures that a file/dir has the specfied mode.
mode :: FilePath -> FileMode -> Property NoInfo

module Propellor.Property.Service
type ServiceName = String

-- | Ensures that a service is running. Does not ensure that any package
--   providing that service is installed. See Apt.serviceInstalledRunning
--   
--   Note that due to the general poor state of init scripts, the best we
--   can do is try to start the service, and if it fails, assume this means
--   it's already running.
running :: ServiceName -> Property NoInfo
restarted :: ServiceName -> Property NoInfo
reloaded :: ServiceName -> Property NoInfo
signaled :: String -> Desc -> ServiceName -> Property NoInfo

module Propellor.Property.Apt
sourcesList :: FilePath
type Url = String
type Section = String
type SourcesGenerator = DebianSuite -> [Line]
showSuite :: DebianSuite -> String
backportSuite :: DebianSuite -> Maybe String
stableUpdatesSuite :: DebianSuite -> Maybe String
debLine :: String -> Url -> [Section] -> Line
srcLine :: Line -> Line
stdSections :: [Section]
binandsrc :: String -> SourcesGenerator
debCdn :: SourcesGenerator
kernelOrg :: SourcesGenerator

-- | Only available for Stable and Testing
securityUpdates :: SourcesGenerator

-- | Makes sources.list have a standard content using the mirror CDN, with
--   the Debian suite configured by the os.
--   
--   Since the CDN is sometimes unreliable, also adds backup lines using
--   kernel.org.
stdSourcesList :: Property NoInfo
stdSourcesListFor :: DebianSuite -> Property NoInfo

-- | Adds additional sources.list generators.
--   
--   Note that if a Property needs to enable an apt source, it's better to
--   do so via a separate file in <a>/etc/apt/sources.list.d/</a>
stdSourcesList' :: DebianSuite -> [SourcesGenerator] -> Property NoInfo
setSourcesList :: [Line] -> Property NoInfo
setSourcesListD :: [Line] -> FilePath -> Property NoInfo
runApt :: [String] -> Property NoInfo
noninteractiveEnv :: [(String, String)]
update :: Property NoInfo
upgrade :: Property NoInfo
type Package = String
installed :: [Package] -> Property NoInfo
installed' :: [String] -> [Package] -> Property NoInfo
installedBackport :: [Package] -> Property NoInfo

-- | Minimal install of package, without recommends.
installedMin :: [Package] -> Property NoInfo
removed :: [Package] -> Property NoInfo
buildDep :: [Package] -> Property NoInfo

-- | Installs the build deps for the source package unpacked in the
--   specifed directory, with a dummy package also installed so that
--   autoRemove won't remove them.
buildDepIn :: FilePath -> Property NoInfo

-- | Package installation may fail becuse the archive has changed. Run an
--   update in that case and retry.
robustly :: Combines (Property i) (Property NoInfo) => Property i -> Property i
isInstallable :: [Package] -> IO Bool
isInstalled :: Package -> IO Bool

-- | Note that the order of the returned list will not always correspond to
--   the order of the input list. The number of items may even vary. If apt
--   does not know about a package at all, it will not be included in the
--   result list.
isInstalled' :: [Package] -> IO [Bool]
autoRemove :: Property NoInfo

-- | Enables unattended upgrades. Revert to disable.
unattendedUpgrades :: RevertableProperty

-- | Preseeds debconf values and reconfigures the package so it takes
--   effect.
reConfigure :: Package -> [(String, String, String)] -> Property NoInfo

-- | Ensures that a service is installed and running.
--   
--   Assumes that there is a 1:1 mapping between service names and apt
--   package names.
serviceInstalledRunning :: Package -> Property NoInfo
data AptKey
AptKey :: String -> String -> AptKey
keyname :: AptKey -> String
pubkey :: AptKey -> String
trustsKey :: AptKey -> RevertableProperty
trustsKey' :: AptKey -> Property NoInfo
untrustKey :: AptKey -> Property NoInfo
aptKeyFile :: AptKey -> FilePath

-- | Cleans apt's cache of downloaded packages to avoid using up disk
--   space.
cacheCleaned :: Property NoInfo

module Propellor.Property.Apache
type ConfigFile = [String]
siteEnabled :: HostName -> ConfigFile -> RevertableProperty
siteAvailable :: HostName -> ConfigFile -> Property NoInfo
modEnabled :: String -> RevertableProperty
siteCfg :: HostName -> [FilePath]
installed :: Property NoInfo
restarted :: Property NoInfo
reloaded :: Property NoInfo

-- | Configure apache to use SNI to differentiate between https hosts.
--   
--   This was off by default in apache 2.2.22. Newver versions enable it by
--   default. This property uses the filename used by the old version.
multiSSL :: Property NoInfo

-- | Config file fragment that can be inserted into a <a>Directory</a>
--   stanza to allow global read access to the directory.
--   
--   Works with multiple versions of apache that have different ways to do
--   it.
allowAll :: String

module Propellor.Property.Hostname

-- | Ensures that the hostname is set using best practices.
--   
--   Configures <a>/etc/hostname</a> and the current hostname.
--   
--   Configures <a>/etc/mailname</a> with the domain part of the hostname.
--   
--   <a>/etc/hosts</a> is also configured, with an entry for 127.0.1.1,
--   which is standard at least on Debian to set the FDQN.
--   
--   Also, the <a>/etc/hosts</a> 127.0.0.1 line is set to localhost.
--   Putting any other hostnames there is not best practices and can lead
--   to annoying messages from eg, apache.
sane :: Property NoInfo
setTo :: HostName -> Property NoInfo

-- | Makes <a>/etc/resolv.conf</a> contain search and domain lines for the
--   domain that the hostname is in.
searchDomain :: Property NoInfo

module Propellor.Property.Systemd.Core
installed :: Property NoInfo

module Propellor.Property.Mount
type FsType = String
type Source = String

-- | Lists all mount points of the system.
mountPoints :: IO [FilePath]

-- | Finds all filesystems mounted inside the specified directory.
mountPointsBelow :: FilePath -> IO [FilePath]

-- | Filesystem type mounted at a given location.
getFsType :: FilePath -> IO (Maybe FsType)

-- | Unmounts a device, lazily so any running processes don't block it.
umountLazy :: FilePath -> IO ()

-- | Mounts a device.
mount :: FsType -> Source -> FilePath -> IO Bool

module Propellor.Property.Debootstrap
type Url = String

-- | A monoid for debootstrap configuration. mempty is a default
--   debootstrapped system.
data DebootstrapConfig
DefaultConfig :: DebootstrapConfig
MinBase :: DebootstrapConfig
BuilddD :: DebootstrapConfig
DebootstrapParam :: String -> DebootstrapConfig
(:+) :: DebootstrapConfig -> DebootstrapConfig -> DebootstrapConfig

-- | Builds a chroot in the given directory using debootstrap.
--   
--   The System can be any OS and architecture that debootstrap and the
--   kernel support.
--   
--   Reverting this property deletes the chroot and all its contents.
--   Anything mounted under the filesystem is first unmounted.
--   
--   Note that reverting this property does not stop any processes
--   currently running in the chroot.
built :: FilePath -> System -> DebootstrapConfig -> RevertableProperty
built' :: Combines (Property NoInfo) (Property i) => Property i -> FilePath -> System -> DebootstrapConfig -> Property (CInfo NoInfo i)

-- | Ensures debootstrap is installed.
--   
--   When necessary, falls back to installing debootstrap from source. Note
--   that installation from source is done by downloading the tarball from
--   a Debian mirror, with no cryptographic verification.
installed :: RevertableProperty
sourceInstall :: Property NoInfo

-- | Finds debootstrap in PATH, but fall back to looking for the wrapper
--   script that is installed, outside the PATH, when debootstrap is
--   installed from source.
programPath :: IO (Maybe FilePath)
instance Show DebootstrapConfig
instance Monoid DebootstrapConfig

module Propellor.Property.Chroot
data Chroot
Chroot :: FilePath -> System -> BuilderConf -> Host -> Chroot
data BuilderConf
UsingDeboostrap :: DebootstrapConfig -> BuilderConf

-- | Defines a Chroot at the given location, built with debootstrap.
--   
--   Properties can be added to configure the Chroot.
--   
--   <pre>
--   debootstrapped (System (Debian Unstable) "amd64") Debootstrap.BuildD "/srv/chroot/ghc-dev"
--      &amp; Apt.installed ["ghc", "haskell-platform"]
--   &amp; ...
--   </pre>
debootstrapped :: System -> DebootstrapConfig -> FilePath -> Chroot

-- | Ensures that the chroot exists and is provisioned according to its
--   properties.
--   
--   Reverting this property removes the chroot. Anything mounted inside it
--   is first unmounted. Note that it does not ensure that any processes
--   that might be running inside the chroot are stopped.
provisioned :: Chroot -> RevertableProperty
provisioned' :: (Property HasInfo -> Property HasInfo) -> Chroot -> Bool -> RevertableProperty
propigateChrootInfo :: IsProp (Property i) => Chroot -> Property i -> Property HasInfo

-- | Propellor is run inside the chroot to provision it.
propellChroot :: Chroot -> ([String] -> IO (CreateProcess, IO ())) -> Bool -> Property NoInfo
chain :: [Host] -> CmdLine -> IO ()
instance Show BuilderConf
instance Show Chroot
instance PropAccum Chroot

module Propellor.Property.Systemd
type ServiceName = String

-- | Starts a systemd service.
--   
--   Note that this does not configure systemd to start the service on
--   boot, it only ensures that the service is currently running.
started :: ServiceName -> Property NoInfo

-- | Stops a systemd service.
stopped :: ServiceName -> Property NoInfo

-- | Enables a systemd service.
--   
--   This does not ensure the service is started, it only configures
--   systemd to start it on boot.
enabled :: ServiceName -> Property NoInfo

-- | Disables a systemd service.
disabled :: ServiceName -> Property NoInfo

-- | Masks a systemd service.
masked :: ServiceName -> RevertableProperty

-- | Ensures that a service is both enabled and started
running :: ServiceName -> Property NoInfo

-- | Restarts a systemd service.
restarted :: ServiceName -> Property NoInfo

-- | The systemd-networkd service.
networkd :: ServiceName

-- | The systemd-journald service.
journald :: ServiceName
installed :: Property NoInfo
type Option = String

-- | Ensures that an option is configured in one of systemd's config files.
--   Does not ensure that the relevant daemon notices the change
--   immediately.
--   
--   This assumes that there is only one [Header] per file, which is
--   currently the case. And it assumes the file already exists with the
--   right [Header], so new lines can just be appended to the end.
configured :: FilePath -> Option -> String -> Property NoInfo

-- | Causes systemd to reload its configuration files.
daemonReloaded :: Property NoInfo

-- | Enables persistent storage of the journal.
persistentJournal :: Property NoInfo

-- | Configures journald, restarting it so the changes take effect.
journaldConfigured :: Option -> String -> Property NoInfo
type MachineName = String
data Container

-- | Defines a container with a given machine name.
--   
--   Properties can be added to configure the Container.
--   
--   <pre>
--   container "webserver" (Chroot.debootstrapped (System (Debian Unstable) "amd64") mempty)
--      &amp; Apt.installedRunning "apache2"
--      &amp; ...
--   </pre>
container :: MachineName -> (FilePath -> Chroot) -> Container

-- | Runs a container using systemd-nspawn.
--   
--   A systemd unit is set up for the container, so it will automatically
--   be started on boot.
--   
--   Systemd is automatically installed inside the container, and will
--   communicate with the host's systemd. This allows systemctl to be used
--   to examine the status of services running inside the container.
--   
--   When the host system has persistentJournal enabled, journactl can be
--   used to examine logs forwarded from the container.
--   
--   Reverting this property stops the container, removes the systemd unit,
--   and deletes the chroot and all its contents.
nspawned :: Container -> RevertableProperty

-- | This configures how systemd-nspawn(1) starts the container, by
--   specifying a parameter, such as "--private-network", or
--   "--link-journal=guest"
--   
--   When there is no leading dash, "--" is prepended to the parameter.
--   
--   Reverting the property will remove a parameter, if it's present.
containerCfg :: String -> RevertableProperty

-- | Bind mounts <a>/etc/resolv.conf</a> from the host into the container.
--   
--   This property is enabled by default. Revert it to disable it.
resolvConfed :: RevertableProperty

-- | Link the container's journal to the host's if possible. (Only works if
--   the host has persistent journal enabled.)
--   
--   This property is enabled by default. Revert it to disable it.
linkJournal :: RevertableProperty

-- | Disconnect networking of the container from the host.
privateNetwork :: RevertableProperty
data Proto
TCP :: Proto
UDP :: Proto
class Publishable a

-- | Publish a port from the container to the host.
--   
--   This feature was first added in systemd version 220.
--   
--   This property is only needed (and will only work) if the container is
--   configured to use private networking. Also, networkd should be enabled
--   both inside the container, and on the host. For example:
--   
--   <pre>
--   foo :: Host
--   foo = host "foo.example.com"
--   &amp; Systemd.running Systemd.networkd
--   &amp; Systemd.nspawned webserver
--   
--   webserver :: Systemd.container
--   webserver = Systemd.container "webserver" (Chroot.debootstrapped (System (Debian Testing) "amd64") mempty)
--   &amp; Systemd.privateNetwork
--   &amp; Systemd.running Systemd.networkd
--   &amp; Systemd.publish (Port 80 -&gt;- Port 8080)
--   &amp; Apt.installedRunning "apache2"
--   </pre>
publish :: Publishable p => p -> RevertableProperty
class Bindable a

-- | Bind mount a file or directory from the host into the container.
bind :: Bindable p => p -> RevertableProperty

-- | Read-only mind mount.
bindRo :: Bindable p => p -> RevertableProperty
instance Show Container
instance Bindable (Bound FilePath)
instance Bindable FilePath
instance Publishable (Proto, Bound Port)
instance Publishable (Bound Port)
instance Publishable Port
instance PropAccum Container

module Propellor.Property.Cron

-- | When to run a cron job.
--   
--   The Daily, Monthly, and Weekly options allow the cron job to be run by
--   anacron, which is useful for non-servers.
data Times

-- | formatted as in crontab(5)
Times :: String -> Times
Daily :: Times
Weekly :: Times
Monthly :: Times

-- | Installs a cron job, that will run as a specified user in a particular
--   directory. Note that the Desc must be unique, as it is used for the
--   cron job filename.
--   
--   Only one instance of the cron job is allowed to run at a time, no
--   matter how long it runs. This is accomplished using flock locking of
--   the cron job file.
--   
--   The cron job's output will only be emailed if it exits nonzero.
job :: Desc -> Times -> User -> FilePath -> String -> Property NoInfo

-- | Installs a cron job, and runs it niced and ioniced.
niceJob :: Desc -> Times -> User -> FilePath -> String -> Property NoInfo

-- | Installs a cron job to run propellor.
runPropellor :: Times -> Property NoInfo

module Propellor.Property.Scheduled

-- | Makes a Property only be checked every so often.
--   
--   This uses the description of the Property to keep track of when it was
--   last run.
period :: IsProp (Property i) => Property i -> Recurrance -> Property i

-- | Like period, but parse a human-friendly string.
periodParse :: Property NoInfo -> String -> Property NoInfo
data Recurrance
Daily :: Recurrance
Weekly :: (Maybe WeekDay) -> Recurrance
Monthly :: (Maybe MonthDay) -> Recurrance
Yearly :: (Maybe YearDay) -> Recurrance

-- | Days, Weeks, or Months of the year evenly divisible by a number.
--   (Divisible Year is years evenly divisible by a number.)
Divisible :: Int -> Recurrance -> Recurrance
type WeekDay = Int
type MonthDay = Int
type YearDay = Int

module Propellor.Property.DnsSec

-- | Puts the DNSSEC key files in place from PrivData.
--   
--   signedPrimary uses this, so this property does not normally need to be
--   used directly.
keysInstalled :: Domain -> RevertableProperty

-- | Uses dnssec-signzone to sign a domain's zone file.
--   
--   signedPrimary uses this, so this property does not normally need to be
--   used directly.
zoneSigned :: Domain -> FilePath -> RevertableProperty
forceZoneSigned :: Domain -> FilePath -> Property NoInfo
saltSha1 :: IO String

-- | The file used for a given key.
keyFn :: Domain -> DnsSecKey -> FilePath

-- | These are the extensions that dnssec-keygen looks for.
keyExt :: DnsSecKey -> String
isPublic :: DnsSecKey -> Bool
isZoneSigningKey :: DnsSecKey -> Bool

-- | dnssec-signzone makes a .signed file
signedZoneFile :: FilePath -> FilePath


-- | Docker support for propellor
--   
--   The existance of a docker container is just another Property of a
--   system, which propellor can set up. See config.hs for an example.
module Propellor.Property.Docker
installed :: Property NoInfo

-- | Configures docker with an authentication file, so that images can be
--   pushed to index.docker.io. Optional.
configured :: Property HasInfo

-- | Defines a Container with a given name, image, and properties.
--   Properties can be added to configure the Container.
--   
--   <pre>
--   container "web-server" "debian"
--      &amp; publish "80:80"
--      &amp; Apt.installed {"apache2"]
--      &amp; ...
--   </pre>
container :: ContainerName -> Image -> Container

-- | Ensures that a docker container is set up and running.
--   
--   The container has its own Properties which are handled by running
--   propellor inside the container.
--   
--   When the container's Properties include DNS info, such as a CNAME,
--   that is propigated to the Info of the Host it's docked in.
--   
--   Reverting this property ensures that the container is stopped and
--   removed.
docked :: Container -> RevertableProperty

-- | Build the image from a directory containing a Dockerfile.
imageBuilt :: HasImage c => FilePath -> c -> Property NoInfo

-- | Pull the image from the standard Docker Hub registry.
imagePulled :: HasImage c => c -> Property NoInfo

-- | Configures the kernel to respect docker memory limits.
--   
--   This assumes the system boots using grub 2. And that you don't need
--   any other GRUB_CMDLINE_LINUX_DEFAULT settings.
--   
--   Only takes effect after reboot. (Not automated.)
memoryLimited :: Property NoInfo

-- | Causes *any* docker images that are not in use by running containers
--   to be deleted. And deletes any containers that propellor has set up
--   before that are not currently running. Does not delete any containers
--   that were not set up using propellor.
--   
--   Generally, should come after the properties for the desired
--   containers.
garbageCollected :: Property NoInfo

-- | Tweaks a container to work well with docker.
--   
--   Currently, this consists of making pam_loginuid lines optional in the
--   pam config, to work around
--   <a>https://github.com/docker/docker/issues/5663</a> which affects
--   docker 1.2.0.
tweaked :: Property NoInfo

-- | A docker image, that can be used to run a container. The user has to
--   specify a name and can provide an optional tag. See <a>Docker Image
--   Documention</a> for more information.
data Image
Image :: String -> Maybe String -> Image
repository :: Image -> String
tag :: Image -> Maybe String

-- | Defines a Docker image without any tag. This is considered by Docker
--   as the latest image of the provided repository.
latestImage :: String -> Image

-- | A short descriptive name for a container. Should not contain
--   whitespace or other unusual characters, only [a-zA-Z0-9_-] are allowed
type ContainerName = String

-- | A docker container.
data Container
class HasImage a
getImageName :: HasImage a => a -> Image

-- | Set custom dns server for container.
dns :: String -> Property HasInfo

-- | Set container host name.
hostname :: String -> Property HasInfo
class Publishable p

-- | Publish a container's port to the host
publish :: Publishable p => p -> Property HasInfo

-- | Expose a container's port without publishing it.
expose :: String -> Property HasInfo

-- | Username or UID for container.
user :: String -> Property HasInfo
class Mountable p

-- | Mount a volume
volume :: Mountable v => v -> Property HasInfo

-- | Mount a volume from the specified container into the current
--   container.
volumes_from :: ContainerName -> Property HasInfo

-- | Work dir inside the container.
workdir :: String -> Property HasInfo

-- | Memory limit for container. Format: <a>number</a><a>unit</a>, where
--   unit = b, k, m or g
--   
--   Note: Only takes effect when the host has the memoryLimited property
--   enabled.
memory :: String -> Property HasInfo

-- | CPU shares (relative weight).
--   
--   By default, all containers run at the same priority, but you can tell
--   the kernel to give more CPU time to a container using this property.
cpuShares :: Int -> Property HasInfo

-- | Link with another container on the same host.
link :: ContainerName -> ContainerAlias -> Property HasInfo

-- | Set environment variable with a tuple composed by the environment
--   variable name and its value.
environment :: (String, String) -> Property HasInfo

-- | A short alias for a linked container. Each container has its own alias
--   namespace.
type ContainerAlias = String

-- | This property is enabled by default for docker containers configured
--   by propellor; as well as keeping badly behaved containers running, it
--   ensures that containers get started back up after reboot or after
--   docker is upgraded.
restartAlways :: Property HasInfo

-- | Docker will restart the container if it exits nonzero. If a number is
--   provided, it will be restarted only up to that many times.
restartOnFailure :: Maybe Int -> Property HasInfo

-- | Makes docker not restart a container when it exits Note that this
--   includes not restarting it on boot!
restartNever :: Property HasInfo

-- | Called when propellor is running inside a docker container. The string
--   should be the container's ContainerId.
--   
--   This process is effectively init inside the container. It even needs
--   to wait on zombie processes!
--   
--   In the foreground, run an interactive bash (or sh) shell, so that the
--   user can interact with it when attached to the container.
--   
--   When the system reboots, docker restarts the container, and this is
--   run again. So, to make the necessary services get started on boot,
--   this needs to provision the container then. However, if the container
--   is already being provisioned by the calling propellor, it would be
--   redundant and problimatic to also provisoon it here, when not booting
--   up.
--   
--   The solution is a flag file. If the flag file exists, then the
--   container was already provisioned. So, it must be a reboot, and time
--   to provision again. If the flag file doesn't exist, don't provision
--   here.
init :: String -> IO ()
chain :: [Host] -> HostName -> String -> IO ()
instance Eq Image
instance Read Image
instance Show Image
instance Eq ContainerId
instance Read ContainerId
instance Show ContainerId
instance Read ContainerIdent
instance Show ContainerIdent
instance Eq ContainerIdent
instance Eq ContainerFilter
instance Mountable String
instance Mountable (Bound FilePath)
instance Publishable String
instance Publishable (Bound Port)
instance ImageIdentifier ImageUID
instance ImageIdentifier Image
instance ImageIdentifier ImageID
instance PropAccum Container
instance HasImage Container
instance HasImage Image

module Propellor.Property.Network
type Interface = String
ifUp :: Interface -> Property NoInfo

-- | Resets <i>etc</i>network/interfaces to a clean and empty state,
--   containing just the standard loopback interface, and with interfacesD
--   enabled.
--   
--   This can be used as a starting point to defining other interfaces.
--   
--   No interfaces are brought up or down by this property.
cleanInterfacesFile :: Property NoInfo

-- | Writes a static interface file for the specified interface.
--   
--   The interface has to be up already. It could have been brought up by
--   DHCP, or by other means. The current ipv4 addresses and routing
--   configuration of the interface are written into the file.
--   
--   If the interface file already exists, this property does nothing, no
--   matter its content.
--   
--   (ipv6 addresses are not included because it's assumed they come up
--   automatically in most situations.)
static :: Interface -> Property NoInfo

-- | 6to4 ipv6 connection, should work anywhere
ipv6to4 :: Property NoInfo
interfacesFile :: FilePath

-- | A file in the interfaces.d directory.
interfaceDFile :: Interface -> FilePath

-- | Ensures that files in the the interfaces.d directory are used.
interfacesDEnabled :: Property NoInfo


-- | Properties for configuring firewall (iptables) rules
--   
--   Copyright 2014 Arnaud Bailly <a>arnaud.oqube@gmail.com</a> License:
--   BSD-2-Clause
module Propellor.Property.Firewall
rule :: Chain -> Target -> Rules -> Property NoInfo
installed :: Property NoInfo
data Chain
INPUT :: Chain
OUTPUT :: Chain
FORWARD :: Chain
data Target
ACCEPT :: Target
REJECT :: Target
DROP :: Target
LOG :: Target
data Proto
TCP :: Proto
UDP :: Proto
ICMP :: Proto
data Rules
Everything :: Rules

-- | There is actually some order dependency between proto and port so this
--   should be a specific data type with proto + ports
Proto :: Proto -> Rules
DPort :: Port -> Rules
DPortRange :: (Port, Port) -> Rules
IFace :: Interface -> Rules
Ctstate :: [ConnectionState] -> Rules

-- | Combine two rules
(:-) :: Rules -> Rules -> Rules
data ConnectionState
ESTABLISHED :: ConnectionState
RELATED :: ConnectionState
NEW :: ConnectionState
INVALID :: ConnectionState
instance Eq Chain
instance Show Chain
instance Eq Target
instance Show Target
instance Eq Proto
instance Show Proto
instance Eq ConnectionState
instance Show ConnectionState
instance Eq Rules
instance Show Rules
instance Eq Rule
instance Show Rule
instance Monoid Rules

module Propellor.Property.Git

-- | Exports all git repos in a directory (that user nobody can read) using
--   git-daemon, run from inetd.
--   
--   Note that reverting this property does not remove or stop inetd.
daemonRunning :: FilePath -> RevertableProperty
installed :: Property NoInfo
type RepoUrl = String
type Branch = String

-- | Specified git repository is cloned to the specified directory.
--   
--   If the directory exists with some other content (either a non-git
--   repository, or a git repository cloned from some other location), it
--   will be recursively deleted first.
--   
--   A branch can be specified, to check out.
cloned :: User -> RepoUrl -> FilePath -> Maybe Branch -> Property NoInfo
isGitDir :: FilePath -> IO Bool
data GitShared
Shared :: Group -> GitShared
SharedAll :: GitShared
NotShared :: GitShared
bareRepo :: FilePath -> User -> GitShared -> Property NoInfo

module Propellor.Property.Gpg
installed :: Property NoInfo
newtype GpgKeyId
GpgKeyId :: String -> GpgKeyId
getGpgKeyId :: GpgKeyId -> String

-- | Sets up a user with a gpg key from the privdata.
--   
--   Note that if a secret key is exported using gpg -a
--   --export-secret-key, the public key is also included. Or just a public
--   key could be exported, and this would set it up just as well.
--   
--   Recommend only using this for low-value dedicated role keys. No
--   attempt has been made to scrub the key out of memory once it's used.
keyImported :: GpgKeyId -> User -> Property HasInfo
dotDir :: User -> IO FilePath

module Propellor.Property.Group
type GID = Int
exists :: Group -> Maybe GID -> Property NoInfo

module Propellor.Property.Grub

-- | Eg, "hd0,0" or "xen/xvda1"
type GrubDevice = String

-- | Eg, "/dev/sda"
type OSDevice = String
type TimeoutSecs = Int

-- | Types of machines that grub can boot.
data BIOS
PC :: BIOS
EFI64 :: BIOS
EFI32 :: BIOS
Coreboot :: BIOS
Xen :: BIOS

-- | Installs the grub package. This does not make grub be used as the
--   bootloader.
--   
--   This includes running update-grub, so that the grub boot menu is
--   created. It will be automatically updated when kernel packages are
--   installed.
installed :: BIOS -> Property NoInfo

-- | Installs grub onto a device, so the system can boot from that device.
--   
--   You may want to install grub to multiple devices; eg for a system that
--   uses software RAID.
--   
--   Note that this property does not check if grub is already installed on
--   the device; it always does the work to reinstall it. It's a good idea
--   to arrange for this property to only run once, by eg making it be run
--   onChange after OS.cleanInstallOnce.
boots :: OSDevice -> Property NoInfo

-- | Use PV-grub chaining to boot
--   
--   Useful when the VPS's pv-grub is too old to boot a modern kernel
--   image.
--   
--   <a>http://notes.pault.ag/linode-pv-grub-chainning/</a>
--   
--   The rootdev should be in the form "hd0", while the bootdev is in the
--   form "xen/xvda".
chainPVGrub :: GrubDevice -> GrubDevice -> TimeoutSecs -> Property NoInfo

module Propellor.Property.Journald

-- | Configures journald, restarting it so the changes take effect.
configured :: Option -> String -> Property NoInfo
type DataSize = String
configuredSize :: Option -> DataSize -> Property NoInfo
systemMaxUse :: DataSize -> Property NoInfo
runtimeMaxUse :: DataSize -> Property NoInfo
systemKeepFree :: DataSize -> Property NoInfo
runtimeKeepFree :: DataSize -> Property NoInfo
systemMaxFileSize :: DataSize -> Property NoInfo
runtimeMaxFileSize :: DataSize -> Property NoInfo
systemdSizeUnits :: Integer -> String

module Propellor.Property.Nginx
type ConfigFile = [String]
siteEnabled :: HostName -> ConfigFile -> RevertableProperty
siteAvailable :: HostName -> ConfigFile -> Property NoInfo
siteCfg :: HostName -> FilePath
siteVal :: HostName -> FilePath
siteValRelativeCfg :: HostName -> FilePath
installed :: Property NoInfo
restarted :: Property NoInfo
reloaded :: Property NoInfo

module Propellor.Property.Obnam
type ObnamParam = String

-- | An obnam repository can be used by multiple clients. Obnam uses
--   locking to allow only one client to write at a time. Since stale lock
--   files can prevent backups from happening, it's more robust, if you
--   know a repository has only one client, to force the lock before
--   starting a backup. Using OnlyClient allows propellor to do so when
--   running obnam.
data NumClients
OnlyClient :: NumClients
MultipleClients :: NumClients

-- | Installs a cron job that causes a given directory to be backed up, by
--   running obnam with some parameters.
--   
--   If the directory does not exist, or exists but is completely empty,
--   this Property will immediately restore it from an existing backup.
--   
--   So, this property can be used to deploy a directory of content to a
--   host, while also ensuring any changes made to it get backed up. And
--   since Obnam encrypts, just make this property depend on a gpg key, and
--   tell obnam to use the key, and your data will be backed up securely.
--   For example:
--   
--   <pre>
--   &amp; Obnam.backup "/srv/git" "33 3 * * *"
--   	[ "--repository=sftp://2318@usw-s002.rsync.net/~/mygitrepos.obnam"
--   	] Obnam.OnlyClient
--   	`requires` Ssh.keyImported SshRsa "root" (Context hostname)
--   </pre>
--   
--   How awesome is that?
backup :: FilePath -> Times -> [ObnamParam] -> NumClients -> Property NoInfo

-- | Like backup, but the specified gpg key id is used to encrypt the
--   repository.
--   
--   The gpg secret key will be automatically imported into root's keyring
--   using Propellor.Property.Gpg.keyImported
backupEncrypted :: FilePath -> Times -> [ObnamParam] -> NumClients -> GpgKeyId -> Property HasInfo

-- | Does a backup, but does not automatically restore.
backup' :: FilePath -> Times -> [ObnamParam] -> NumClients -> Property NoInfo

-- | Restores a directory from an obnam backup.
--   
--   Only does anything if the directory does not exist, or exists, but is
--   completely empty.
--   
--   The restore is performed atomically; restoring to a temp directory and
--   then moving it to the directory.
restored :: FilePath -> [ObnamParam] -> Property NoInfo
installed :: Property NoInfo
instance Eq NumClients

module Propellor.Property.OpenId
providerFor :: [User] -> String -> Property HasInfo

module Propellor.Property.User
data Eep
YesReallyDeleteHome :: Eep
accountFor :: User -> Property NoInfo

-- | Removes user home directory!! Use with caution.
nuked :: User -> Eep -> Property NoInfo

-- | Only ensures that the user has some password set. It may or may not be
--   a password from the PrivData.
hasSomePassword :: User -> Property HasInfo

-- | While hasSomePassword uses the name of the host as context, this
--   allows specifying a different context. This is useful when you want to
--   use the same password on multiple hosts, for example.
hasSomePassword' :: IsContext c => User -> c -> Property HasInfo

-- | Ensures that a user's password is set to a password from the PrivData.
--   (Will change any existing password.)
--   
--   A user's password can be stored in the PrivData in either of two
--   forms; the full cleartext <a>Password</a> or a <a>CryptPassword</a>
--   hash. The latter is obviously more secure.
hasPassword :: User -> Property HasInfo
hasPassword' :: IsContext c => User -> c -> Property HasInfo
setPassword :: (((PrivDataField, PrivData) -> Propellor Result) -> Propellor Result) -> Propellor Result
lockedPassword :: User -> Property NoInfo
data PasswordStatus
NoPassword :: PasswordStatus
LockedPassword :: PasswordStatus
HasPassword :: PasswordStatus
getPasswordStatus :: User -> IO PasswordStatus
isLockedPassword :: User -> IO Bool
homedir :: User -> IO FilePath
hasGroup :: User -> Group -> Property NoInfo

-- | Controls whether shadow passwords are enabled or not.
shadowConfig :: Bool -> Property NoInfo
shadowExists :: IO Bool

-- | Ensures that a user has a specified login shell, and that the shell is
--   enabled in <i>etc</i>shells.
hasLoginShell :: User -> FilePath -> Property NoInfo
shellSetTo :: User -> FilePath -> Property NoInfo

-- | Ensures that <i>etc</i>shells contains a shell.
shellEnabled :: FilePath -> Property NoInfo
instance Eq PasswordStatus

module Propellor.Property.Ssh
type PubKeyText = String
sshdConfig :: FilePath
setSshdConfig :: String -> Bool -> Property NoInfo
permitRootLogin :: Bool -> Property NoInfo
passwordAuthentication :: Bool -> Property NoInfo

-- | Configure ssh to not allow password logins.
--   
--   To prevent lock-out, this is done only once root's authorized_keys is
--   in place.
noPasswords :: Property NoInfo
hasAuthorizedKeys :: User -> IO Bool

-- | Ensures that a user's authorized_keys contains a line. Any other lines
--   in the file are preserved as-is.
authorizedKey :: User -> String -> Property NoInfo
restarted :: Property NoInfo

-- | Blows away existing host keys and make new ones. Useful for systems
--   installed from an image that might reuse host keys. A flag file is
--   used to only ever do this once.
randomHostKeys :: Property NoInfo

-- | Installs the specified list of ssh host keys.
--   
--   The corresponding private keys come from the privdata.
--   
--   Any host keysthat are not in the list are removed from the host.
hostKeys :: IsContext c => c -> [(SshKeyType, PubKeyText)] -> Property HasInfo

-- | Installs a single ssh host key of a particular type.
--   
--   The public key is provided to this function; the private key comes
--   from the privdata;
hostKey :: IsContext c => c -> SshKeyType -> PubKeyText -> Property HasInfo

-- | Indicates the host key that is used by a Host, but does not actually
--   configure the host to use it. Normally this does not need to be used;
--   use <a>hostKey</a> instead.
pubKey :: SshKeyType -> PubKeyText -> Property HasInfo
getPubKey :: Propellor (Map SshKeyType String)

-- | Sets up a user with a ssh private key and public key pair from the
--   PrivData.
--   
--   If the user already has a private/public key, it is left unchanged.
keyImported :: IsContext c => SshKeyType -> User -> c -> Property HasInfo

-- | A file can be speficied to write the key to somewhere other than
--   usual. Allows a user to have multiple keys for different roles.
keyImported' :: IsContext c => Maybe FilePath -> SshKeyType -> User -> c -> Property HasInfo

-- | Puts some host's ssh public key(s), as set using <a>pubKey</a> or
--   <a>hostKey</a> into the known_hosts file for a user.
knownHost :: [Host] -> HostName -> User -> Property NoInfo

-- | Makes a user have authorized_keys from the PrivData
--   
--   This removes any other lines from the file.
authorizedKeys :: IsContext c => User -> c -> Property HasInfo

-- | Makes the ssh server listen on a given port, in addition to any other
--   ports it is configured to listen on.
--   
--   Revert to prevent it listening on a particular port.
listenPort :: Int -> RevertableProperty

module Propellor.Property.Dns

-- | Primary dns server for a domain.
--   
--   Most of the content of the zone file is configured by setting
--   properties of hosts. For example,
--   
--   <pre>
--   host "foo.example.com"
--     &amp; ipv4 "192.168.1.1"
--     &amp; alias "mail.exmaple.com"
--   </pre>
--   
--   Will cause that hostmame and its alias to appear in the zone file,
--   with the configured IP address.
--   
--   Also, if a host has a ssh public key configured, a SSHFP record will
--   be automatically generated for it.
--   
--   The [(BindDomain, Record)] list can be used for additional records
--   that cannot be configured elsewhere. This often includes NS records,
--   TXT records and perhaps CNAMEs pointing at hosts that propellor does
--   not control.
--   
--   The primary server is configured to only allow zone transfers to
--   secondary dns servers. These are determined in two ways:
--   
--   <ol>
--   <li>By looking at the properties of other hosts, to find hosts that
--   are configured as the secondary dns server.</li>
--   <li>By looking for NS Records in the passed list of records.</li>
--   </ol>
--   
--   In either case, the secondary dns server Host should have an ipv4
--   and/or ipv6 property defined.
primary :: [Host] -> Domain -> SOA -> [(BindDomain, Record)] -> RevertableProperty

-- | Primary dns server for a domain, secured with DNSSEC.
--   
--   This is like <a>primary</a>, except the resulting zone file is signed.
--   The Zone Signing Key (ZSK) and Key Signing Key (KSK) used in signing
--   it are taken from the PrivData.
--   
--   As a side effect of signing the zone, a
--   <a>/var/cache/bind/dsset-domain.</a> file will be created. This file
--   contains the DS records which need to be communicated to your domain
--   registrar to make DNSSEC be used for your domain. Doing so is outside
--   the scope of propellor (currently). See for example the tutorial
--   <a>https://www.digitalocean.com/community/tutorials/how-to-setup-dnssec-on-an-authoritative-bind-dns-server--2</a>
--   
--   The <a>Recurrance</a> controls how frequently the signature should be
--   regenerated, using a new random salt, to prevent zone walking attacks.
--   `Weekly Nothing` is a reasonable choice.
--   
--   To transition from <a>primary</a> to <a>signedPrimary</a>, you can
--   revert the <a>primary</a> property, and add this property.
--   
--   Note that DNSSEC zone files use a serial number based on the unix
--   epoch. This is different from the serial number used by
--   <a>primary</a>, so if you want to later disable DNSSEC you will need
--   to adjust the serial number passed to mkSOA to ensure it is larger.
signedPrimary :: Recurrance -> [Host] -> Domain -> SOA -> [(BindDomain, Record)] -> RevertableProperty

-- | Secondary dns server for a domain.
--   
--   The primary server is determined by looking at the properties of other
--   hosts to find which one is configured as the primary.
--   
--   Note that if a host is declared to be a primary and a secondary dns
--   server for the same domain, the primary server config always wins.
secondary :: [Host] -> Domain -> RevertableProperty

-- | This variant is useful if the primary server does not have its DNS
--   configured via propellor.
secondaryFor :: [HostName] -> [Host] -> Domain -> RevertableProperty

-- | Generates a SOA with some fairly sane numbers in it.
--   
--   The Domain is the domain to use in the SOA record. Typically something
--   like ns1.example.com. So, not the domain that this is the SOA record
--   for.
--   
--   The SerialNumber can be whatever serial number was used by the domain
--   before propellor started managing it. Or 0 if the domain has only ever
--   been managed by propellor.
--   
--   You do not need to increment the SerialNumber when making changes!
--   Propellor will automatically add the number of commits in the git
--   repository to the SerialNumber.
mkSOA :: Domain -> SerialNumber -> SOA

-- | Write a Zone out to a to a file.
--   
--   The serial number in the Zone automatically has the serialNumberOffset
--   added to it. Also, just in case, the old serial number used in the
--   zone file is checked, and if it is somehow larger, its succ is used.
writeZoneFile :: Zone -> FilePath -> IO ()

-- | Adjusts the serial number of the zone to always be larger than the
--   serial number in the Zone record, and always be larger than the passed
--   SerialNumber.
nextSerialNumber :: Zone -> SerialNumber -> Zone
adjustSerialNumber :: Zone -> (SerialNumber -> SerialNumber) -> Zone

-- | Count the number of git commits made to the current branch.
serialNumberOffset :: IO SerialNumber
type WarningMessage = String

-- | Generates a Zone for a particular Domain from the DNS properies of all
--   hosts that propellor knows about that are in that Domain.
--   
--   Does not include SSHFP records.
genZone :: [Host] -> Map HostName Host -> Domain -> SOA -> (Zone, [WarningMessage])

module Propellor.Property.Reboot
now :: Property NoInfo

-- | Schedules a reboot at the end of the current propellor run.
--   
--   The Result code of the endire propellor run can be checked; the reboot
--   proceeds only if the function returns True.
--   
--   The reboot can be forced to run, which bypasses the init system.
--   Useful if the init system might not be running for some reason.
atEnd :: Bool -> (Result -> Bool) -> Property NoInfo

module Propellor.Property.OS

-- | Replaces whatever OS was installed before with a clean installation of
--   the OS that the Host is configured to have.
--   
--   This is experimental; use with caution!
--   
--   This can replace one Linux distribution with different one. But, it
--   can also fail and leave the system in an unbootable state.
--   
--   To avoid this property being accidentially used, you have to provide a
--   Confirmation containing the name of the host that you intend to apply
--   the property to.
--   
--   This property only runs once. The cleanly installed system will have a
--   file <a>/etc/propellor-cleaninstall</a>, which indicates it was
--   cleanly installed.
--   
--   The files from the old os will be left in <a>/old-os</a>
--   
--   After the OS is installed, and if all properties of the host have been
--   successfully satisfied, the host will be rebooted to properly load the
--   new OS.
--   
--   You will typically want to run some more properties after the clean
--   install succeeds, to bootstrap from the cleanly installed system to a
--   fully working system. For example:
--   
--   <pre>
--   &amp; os (System (Debian Unstable) "amd64")
--   &amp; cleanInstallOnce (Confirmed "foo.example.com")
--      `onChange` propertyList "fixing up after clean install"
--          [ preserveNetwork
--          , preserveResolvConf
--          , preserveRootSshAuthorized
--          , Apt.update
--          -- , Grub.boots "/dev/sda"
--          --   `requires` Grub.installed Grub.PC
--          -- , oldOsRemoved (Confirmed "foo.example.com")
--          ]
--   &amp; Hostname.sane
--   &amp; Apt.installed ["linux-image-amd64"]
--   &amp; Apt.installed ["ssh"]
--   &amp; User.hasSomePassword "root"
--   &amp; User.accountFor "joey"
--   &amp; User.hasSomePassword "joey"
--   -- rest of system properties here
--   </pre>
cleanInstallOnce :: Confirmation -> Property NoInfo
data Confirmation
Confirmed :: HostName -> Confirmation

-- | <a>/etc/network/interfaces</a> is configured to bring up the network
--   interface that currently has a default route configured, using the
--   same (static) IP address.
preserveNetwork :: Property NoInfo

-- | <a>/etc/resolv.conf</a> is copied from the old OS
preserveResolvConf :: Property NoInfo

-- | <a>/root/.ssh/authorized_keys</a> has added to it any ssh keys that
--   were authorized in the old OS. Any other contents of the file are
--   retained.
preserveRootSshAuthorized :: Property NoInfo
oldOSRemoved :: Confirmation -> Property NoInfo

module Propellor.Property.Postfix
installed :: Property NoInfo
restarted :: Property NoInfo
reloaded :: Property NoInfo

-- | Configures postfix as a satellite system, which relays all mail
--   through a relay host, which defaults to smtp.domain, but can be
--   changed by <tt>mainCf "relayhost"</tt>.
--   
--   The smarthost may refuse to relay mail on to other domains, without
--   further configuration/keys. But this should be enough to get cron job
--   mail flowing to a place where it will be seen.
satellite :: Property NoInfo

-- | Sets up a file by running a property (which the filename is passed
--   to). If the setup property makes a change, postmap will be run on the
--   file, and postfix will be reloaded.
mappedFile :: Combines (Property x) (Property NoInfo) => FilePath -> (FilePath -> Property x) -> Property (CInfo x NoInfo)

-- | Run newaliases command, which should be done after changing
--   <tt><i>etc</i>aliases</tt>.
newaliases :: Property NoInfo

-- | The main config file for postfix.
mainCfFile :: FilePath

-- | Sets a main.cf <tt>name=value</tt> pair. Does not reload postfix
--   immediately.
mainCf :: (String, String) -> Property NoInfo

-- | Gets a main.cf setting.
getMainCf :: String -> IO (Maybe String)

-- | Checks if a main.cf field is set. A field that is set to the empty
--   string is considered not set.
mainCfIsSet :: String -> IO Bool

-- | Parses main.cf, and removes any initial configuration lines that are
--   overridden to other values later in the file.
--   
--   For example, to add some settings, removing any old settings:
--   
--   <pre>
--   mainCf `File.containsLines`
--   [ "# I like bars."
--   , "foo = bar"
--   ] `onChange` dedupMainCf
--   </pre>
--   
--   Note that multiline configurations that continue onto the next line
--   are not currently supported.
dedupMainCf :: Property NoInfo
dedupCf :: [String] -> [String]

-- | Installs saslauthd and configures it for postfix, authenticating
--   against PAM.
--   
--   Does not configure postfix to use it; eg <tt>smtpd_sasl_auth_enable =
--   yes</tt> needs to be set to enable use. See
--   <a>https://wiki.debian.org/PostfixAndSASL</a>.
saslAuthdInstalled :: Property NoInfo

module Propellor.Property.Prosody
type ConfigFile = [String]
type Conf = String
confEnabled :: Conf -> ConfigFile -> RevertableProperty
confAvailable :: Conf -> ConfigFile -> Property NoInfo
confAvailPath :: Conf -> FilePath
confValPath :: Conf -> FilePath
installed :: Property NoInfo
restarted :: Property NoInfo
reloaded :: Property NoInfo

module Propellor.Property.Sudo

-- | Allows a user to sudo. If the user has a password, sudo is configured
--   to require it. If not, NOPASSWORD is enabled for the user.
enabledFor :: User -> Property NoInfo

module Propellor.Property.Tor
type HiddenServiceName = String
type NodeName = String

-- | Sets up a tor bridge. (Not a relay or exit node.)
--   
--   Uses port 443
isBridge :: Property NoInfo

-- | Sets up a tor relay.
--   
--   Uses port 443
isRelay :: Property NoInfo

-- | Makes the tor node be named, with a known private key.
--   
--   This can be moved to a different IP without needing to wait to
--   accumulate trust.
named :: NodeName -> Property HasInfo
torPrivKey :: Context -> Property HasInfo

-- | A tor server (bridge, relay, or exit) Don't use if you just want to
--   run tor for personal use.
server :: Property NoInfo

-- | Specifies configuration settings. Any lines in the config file that
--   set other values for the specified settings will be removed, while
--   other settings are left as-is. Tor is restarted when configuration is
--   changed.
configured :: [(String, String)] -> Property NoInfo
data BwLimit
PerSecond :: String -> BwLimit
PerDay :: String -> BwLimit
PerMonth :: String -> BwLimit

-- | Limit incoming and outgoing traffic to the specified amount each.
--   
--   For example, PerSecond "30 kibibytes" is the minimum limit for a
--   useful relay.
bandwidthRate :: BwLimit -> Property NoInfo
bandwidthRate' :: String -> Integer -> Property NoInfo
hiddenServiceAvailable :: HiddenServiceName -> Int -> Property NoInfo
hiddenService :: HiddenServiceName -> Int -> Property NoInfo
hiddenServiceData :: IsContext c => HiddenServiceName -> c -> Property HasInfo
restarted :: Property NoInfo
mainConfig :: FilePath
varLib :: FilePath
varRun :: FilePath
user :: User
type NickName = String

-- | Convert String to a valid tor NickName.
saneNickname :: String -> NickName

module Propellor.Property.HostingProvider.CloudAtCost
decruft :: Property NoInfo

module Propellor.Property.HostingProvider.DigitalOcean

-- | Digital Ocean does not provide any way to boot the kernel provided by
--   the distribution, except using kexec. Without this, some old, and
--   perhaps insecure kernel will be used.
--   
--   This property causes the distro kernel to be loaded on reboot, using
--   kexec.
--   
--   If the power is cycled, the non-distro kernel still boots up. So, this
--   property also checks if the running kernel is present in /boot, and if
--   not, reboots immediately into a distro kernel.
distroKernel :: Property NoInfo

module Propellor.Property.HostingProvider.Linode

-- | Linode's pv-grub-x86_64 does not currently support booting recent
--   Debian kernels compressed with xz. This sets up pv-grub chaining to
--   enable it.
chainPVGrub :: TimeoutSecs -> Property NoInfo

-- | Linode disables mlocate's cron job's execute permissions, presumably
--   to avoid disk IO. This ensures it's executable.
mlocateEnabled :: Property NoInfo

module Propellor.Property.SiteSpecific.GitHome

-- | Clones Joey Hess's git home directory, and runs its fixups script.
installedFor :: User -> Property NoInfo
url :: String
hasGitDir :: User -> IO Bool


-- | Specific configuration for Joey Hess's sites. Probably not useful to
--   others except as an example.
module Propellor.Property.SiteSpecific.JoeySites
scrollBox :: Property HasInfo
oldUseNetServer :: [Host] -> Property HasInfo
oldUseNetShellBox :: Property HasInfo
oldUseNetInstalled :: Package -> Property HasInfo
kgbServer :: Property HasInfo
mumbleServer :: [Host] -> Property HasInfo
gitServer :: [Host] -> Property HasInfo
type AnnexUUID = String

-- | A website, with files coming from a git-annex repository.
annexWebSite :: RepoUrl -> HostName -> AnnexUUID -> [(String, RepoUrl)] -> Property HasInfo
apacheSite :: HostName -> Bool -> ConfigFile -> RevertableProperty
apachecfg :: HostName -> Bool -> ConfigFile -> ConfigFile
mainhttpscert :: Bool -> ConfigFile
gitAnnexDistributor :: Property HasInfo
downloads :: [Host] -> Property HasInfo
tmp :: Property HasInfo
twitRss :: Property HasInfo
pumpRss :: Property NoInfo
ircBouncer :: Property HasInfo
kiteShellBox :: Property NoInfo
githubBackup :: Property HasInfo
githubKeys :: Property HasInfo
githubMirrors :: [(String, String)]
rsyncNetBackup :: [Host] -> Property NoInfo
backupsBackedupFrom :: [Host] -> HostName -> FilePath -> Property NoInfo
obnamRepos :: [String] -> Property NoInfo
podcatcher :: Property NoInfo
kiteMailServer :: Property HasInfo
postfixClientRelay :: Context -> Property HasInfo
dkimMilter :: Property HasInfo
dkimInstalled :: Property HasInfo
domainKey :: (BindDomain, Record)
hasJoeyCAChain :: Property HasInfo
hasPostfixCert :: Context -> Property HasInfo
kitenetHttps :: Property HasInfo
legacyWebSites :: Property HasInfo
userDirHtml :: Property HasInfo

module Propellor.Property.SiteSpecific.GitAnnexBuilder
builduser :: UserName
homedir :: FilePath
gitbuilderdir :: FilePath
builddir :: FilePath
type TimeOut = String
autobuilder :: Architecture -> Times -> TimeOut -> Property HasInfo
tree :: Architecture -> Property HasInfo
buildDepsApt :: Property HasInfo
buildDepsNoHaskellLibs :: Property NoInfo
haskellPkgsInstalled :: String -> Property NoInfo
cabalDeps :: Property NoInfo
autoBuilderContainer :: (System -> Property HasInfo) -> System -> Times -> TimeOut -> Container
standardAutoBuilder :: System -> Property HasInfo
armAutoBuilder :: System -> Times -> TimeOut -> Property HasInfo
androidAutoBuilderContainer :: Times -> TimeOut -> Container
androidContainer :: (IsProp (Property (CInfo NoInfo i)), Combines (Property NoInfo) (Property i)) => MachineName -> Property i -> FilePath -> Container

module Propellor.Property.SiteSpecific.Branchable
server :: [Host] -> Property HasInfo

module Propellor.Property.SiteSpecific.IABak
repo :: String
userrepo :: String
publicFace :: Property HasInfo
gitServer :: [Host] -> Property HasInfo
registrationServer :: [Host] -> Property HasInfo
graphiteServer :: Property HasInfo

module Propellor.CmdLine

-- | Runs propellor on hosts, as controlled by command-line options.
defaultMain :: [Host] -> IO ()
processCmdLine :: IO CmdLine
