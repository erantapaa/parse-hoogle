-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A text censorship library.
--   
--   A Haskell library for censoring text, using <a>DansGuardian
--   phraselists</a>.
--   
--   I converted the phraselists into JSON. You can view the converted
--   phraselists <a>here</a>.
--   
--   I recommend looking at the API documentation for <a>Text.Eros</a> if
--   you want an idea of how to use the library.
--   
--   Changelog
--   
--   <ul>
--   <li><i>0.6</i> - Fixed algorithm, added <a>flat score</a> for
--   zero-depth message score.</li>
--   </ul>
@package eros
@version 0.6.0.0


module Text.Eros.Phrase

-- | A Phrase is a piece of Text, with an int representing its weight.
--   These are the used internally within <tt>eros</tt>, in <a>Tree</a>s.
data Phrase
Phrase :: Text -> Int -> Phrase
phrase :: Phrase -> Text
score :: Phrase -> Int

-- | A <a>Tree</a> of <a>Phrase</a>s
type PhraseTree = Tree Phrase

-- | A <a>Forest</a> of <a>Phrase</a>s
type PhraseForest = Forest Phrase

-- | A Map of text values the appropriate tree
type PhraseMap = Map Text PhraseTree

-- | The <a>score</a> of the <a>PhraseTree</a> is the sum of the
--   <a>score</a>s of its <a>Node</a>s.
treeScore :: PhraseTree -> Int

-- | Given a list of <a>PhraseTree</a>s, return the top-level
--   <a>phrase</a>s.
forestPhrases :: [PhraseTree] -> [Text]

-- | Given a <a>PhraseTree</a>, return the top-level <a>phrase</a>.
forestPhrase :: PhraseTree -> Text

-- | Given a list of <a>PhraseTree</a>s, return a map of each phrase with
--   the appropriate tree.
mkMap :: PhraseForest -> PhraseMap
instance Read Phrase
instance Show Phrase
instance Ord Phrase
instance Eq Phrase

module Paths_eros
version :: Version
getBinDir :: IO FilePath
getLibDir :: IO FilePath
getDataDir :: IO FilePath
getLibexecDir :: IO FilePath
getDataFileName :: FilePath -> IO FilePath
getSysconfDir :: IO FilePath


-- | If you want to make your own phraselist, you need to write a JSON
--   file, in accordance with the <a>schema</a>. Once you do that, make a
--   data type for your phraselist. Make your data type an instance of
--   <a>Phraselist</a>, and you're good to go.
--   
--   For example, let's say your phraselist is <tt>mylist.json</tt>, and
--   it's all in accordance with the schema. Your code would look something
--   like this:
--   
--   <pre>
--    data MyList = MyList
--   
--   instance Phraselist MyList where
--      phraselistPath MyList = getDataFileName <a>mylist.json</a>
--      phraselistPath _      = undefined
--   </pre>
--   
--   Don't forget to add <tt>mylist.json</tt> to <tt>Data-Files</tt> in
--   your <tt>.cabal</tt> file.
--   
--   If you want to use one of the lists we already supply
module Text.Eros.Phraselist

-- | Read a <a>Phraselist</a>, marshal it into a <a>PhraseForest</a>.
readPhraselist :: Phraselist t => t -> IO PhraseForest

-- | Load a <a>Phraselist</a> directly into a <a>PhraseMap</a>
readPhraseMap :: Phraselist t => t -> IO PhraseMap

-- | Read the phraselist from disk
servePhraselist :: Phraselist t => t -> IO ByteString
class Phraselist t
phraselistPath :: Phraselist t => t -> IO FilePath

-- | A set of <a>Phraselist</a>s. Note that this is actually a list, and
--   I'm calling it a <a>set</a> for purely lexical purposes.
type PhraselistSet = Phraselist t => [t]

-- | The phraselists in <tt>res/</tt>. Each of these constructors
--   correspond to one of the files <a>here</a>.
--   
--   Gitlab has a terrible interface, so I won't provide links to each one
--   of them.
data ErosList
Chat :: ErosList
Conspiracy :: ErosList
DrugAdvocacy :: ErosList
Forums :: ErosList
Gambling :: ErosList
Games :: ErosList
Gore :: ErosList
IdTheft :: ErosList
IllegalDrugs :: ErosList
Intolerance :: ErosList
LegalDrugs :: ErosList
Malware :: ErosList
Music :: ErosList
News :: ErosList
Nudism :: ErosList
Peer2Peer :: ErosList
Personals :: ErosList
Pornography :: ErosList
Proxies :: ErosList
SecretSocieties :: ErosList
SelfLabeling :: ErosList
Sport :: ErosList
Translation :: ErosList
UpstreamFilter :: ErosList
Violence :: ErosList
WarezHacking :: ErosList
Weapons :: ErosList
Webmail :: ErosList

-- | A list of phraselists we provide.
erosLists :: [ErosList]

-- | A list of the paths to the phraselists we provide.
erosListPaths :: IO [FilePath]
erosListNames :: [Text]

-- | You can't really order the lists, so we won't use <a>Map</a>
erosListNamePairs :: [(ErosList, Text)]
erosNameByList :: ErosList -> Maybe Text
erosNameListMap :: Map Text ErosList
erosListByName :: Text -> Maybe ErosList

-- | Placeholder type used to read JSON. The JSON schema (currently, at
--   least) is such that one needs this type to read the JSON. You can use
--   <a>fromPAT</a> to convert this type into a <a>PhraseTree</a>
data PhraseAlmostTree
PhraseAlmostTree :: Text -> Int -> [PhraseAlmostTree] -> PhraseAlmostTree
patPhrase :: PhraseAlmostTree -> Text
patScore :: PhraseAlmostTree -> Int
patForest :: PhraseAlmostTree -> [PhraseAlmostTree]

-- | Alias for <a>PhraseAlmostTree</a>
type PAT = PhraseAlmostTree

-- | Convert a <a>PAT</a> into a <a>PhraseTree</a>.
fromPAT :: PAT -> PhraseTree

-- | I figure some people like to type a lot.
fromPhraseAlmostTree :: PAT -> PhraseTree

-- | Alias for <a>readPhraselist</a>
loadPhraselist :: Phraselist t => t -> IO PhraseForest

-- | Alias for <a>readPhraselist</a>
readPhraseFile :: Phraselist t => t -> IO PhraseForest

-- | Alias for <a>readPhraselist</a>
loadPhraseFile :: Phraselist t => t -> IO PhraseForest

-- | Alias for <a>readPhraselist</a>
readPhraseForest :: Phraselist t => t -> IO PhraseForest

-- | Alias for <a>readPhraselist</a>
loadPhraseForest :: Phraselist t => t -> IO PhraseForest

-- | Alias for <a>readPhraseMap</a>
loadPhraseMap :: Phraselist t => t -> IO PhraseMap
instance Eq ErosList
instance Show PhraseAlmostTree
instance Read PhraseAlmostTree
instance FromJSON PAT
instance Phraselist ErosList


-- | This module deals specifically with pieces of Text.
module Text.Eros.Message

-- | I can never remember what I named things, so here are a bunch of type
--   synonyms.
type BadWord = Text
type Message = Text
type MessagePart = Text
type Multiplicity = Int
type Restof = Text
type RestOf = Text
type Word = Text
type Score = Int
type SubMap = PhraseMap

-- | Given a message, get all the bad words in the message, along with the
--   rest of the message
badWordsRestof :: Message -> PhraseMap -> [(BadWord, Restof)]

-- | Given a message, get all the bad words in the message, along with
--   their multiplicity.
badWordMults :: Message -> PhraseMap -> Map BadWord Multiplicity

-- | Message score flat - no-depth score
messageScore_ :: Message -> PhraseMap -> Score
getBadWordScore :: BadWord -> PhraseMap -> Score
getBadWordSubMap :: BadWord -> PhraseMap -> SubMap
badWordsRestofScoreSubm :: Message -> PhraseMap -> [(BadWord, Restof, Score, SubMap)]
brss :: Message -> PhraseMap -> [(BadWord, Restof, Score, SubMap)]
messageScore :: Message -> PhraseMap -> Score


-- | This module serves as a bit of a capstone to the whole eros library.
--   The idea being you can just import this module, and get all of the
--   functions from all the rest of eros.
--   
--   You will have to look in the documentation for the sub-modules for the
--   functions. I haven't quite figured out how to get the documentation to
--   show up here yet.
--   
--   = How to use this library
--   
--   The basic idea is you take a <a>Message</a> type, and check it against
--   a <a>PhraseMap</a>, using <a>messageScore</a>. <a>Message</a> is
--   actually just a type alias for <a>Text</a>, so just enable the
--   <tt>OverloadedStrings</tt> extension, and pretend you're using normal
--   strings.
--   
--   In GHCi,
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedStrings
--   
--   &gt;&gt;&gt; import Text.Eros
--   </pre>
--   
--   In a file,
--   
--   <pre>
--   {\-# LANGUAGE OverloadedStrings #-\}
--   import Text.Eros
--   </pre>
--   
--   == Constructing <a>PhraseMap</a>s
--   
--   A <a>PhraseMap</a> is just a <a>Phraselist</a> marshaled into the more
--   Haskell-friendly <a>Map</a> type.
--   
--   Eros provides a large number of <a>Phraselist</a>s.
--   
--   <pre>
--   data ErosList = Chat
--                 | Conspiracy
--                 | DrugAdvocacy
--                 | Forums
--                 | Gambling
--                 | Games
--                 | Gore
--                 | IdTheft
--                 | IllegalDrugs
--                 | Intolerance
--                 | LegalDrugs
--                 | Malware
--                 | Music
--                 | News
--                 | Nudism
--                 | Peer2Peer
--                 | Personals
--                 | Pornography
--                 | Proxies
--                 | SecretSocieties
--                 | SelfLabeling
--                 | Sport
--                 | Translation
--                 | UpstreamFilter
--                 | Violence
--                 | WarezHacking
--                 | Weapons
--                 | Webmail
--     deriving (Eq)
--   </pre>
--   
--   The easiest way to marshal a <a>Phraselist</a> into a <a>PhraseMap</a>
--   is to use the <a>readPhraseMap</a> function.
--   
--   <pre>
--   readPhraseMap :: Phraselist t =&gt; t -&gt; IO PhraseMap
--   </pre>
--   
--   Use it like this
--   
--   <pre>
--   &gt;&gt;&gt; pornMap &lt;- readPhraseMap Pornography
--   30
--   </pre>
--   
--   Internally, <a>readPhraseMap</a> reads JSON data containing the
--   <a>Phraselist</a>, marshals it into a list of
--   <a>PhraseAlmostTree</a>s, converts those into a
--   <tt>PhraseForsest</tt>, and then into a <a>PhraseMap</a>.
--   
--   You can obviously use <a>mkMap</a> and <a>readPhraselist</a> to do it
--   yourself, but it's a lot easier to just use <a>readPhraseMap</a>.
--   
--   You can then use <a>messageScore</a> to see the <a>Score</a> (actually
--   an <a>Int</a>) of each message.
--   
--   <pre>
--   &gt;&gt;&gt; messageScore "Go fuck yourself." pornMap
--   </pre>
--   
--   <a>messageScore</a> is not case sensitive, so <tt><a>go fUck
--   YoUrself</a></tt> returns the same score as <tt><a>go fuck
--   yourself</a></tt>, and so on.
--   
--   If you want to use multiple eros lists, do something like this
--   
--   <pre>
--   &gt;&gt;&gt; let myLists = [Chat, Pornography, Weapons]
--   
--   &gt;&gt;&gt; myMaps &lt;- mapM readPhraseMap myLists
--   
--   &gt;&gt;&gt; map (messageScore "Go fuck yourself") myMaps
--   [0, 30, 0]
--   </pre>
--   
--   = Using your own phraselists
--   
--   I haven't added <i>good</i> support in for this yet, but there still
--   is support nonetheless. Your phraselist needs to be in JSON, in
--   accordance with the Phraselist schema (I'm too lazy to find a link to
--   it).
--   
--   <pre>
--   data MyList = MyList
--   instance Phraselist MyList where
--     phraselistPath MyList = "/path/to/phraselist"
--   </pre>
--   
--   You can then do the normal stuff with <a>messageScore</a> and
--   <a>readPhraseMap</a>.
module Text.Eros
