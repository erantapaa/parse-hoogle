-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Utility functions for working with aterms as generated by Minitermite
--   
--   Utility functions for working with aterms as generated by Minitermite
@package aterm-utils
@version 0.2.0.2

module ATerm.Pretty
ppATerm :: ATermTable -> Doc


-- | Functions for working with the ATerms that ROSE produces.
module ATerm.Utilities

-- | Turns a normal function of ATermTable into a function that works on
--   the hash value instead.
app :: (ATermTable -> a) -> ATermTable -> Int -> a

-- | Standard foldr, but for ATermTables
foldr :: (ATermTable -> a -> a) -> a -> ATermTable -> a

-- | Standard foldl, but for ATermTables
foldl :: (a -> ATermTable -> a) -> a -> ATermTable -> a

-- | Standard foldl', but for ATermTables
foldl' :: (a -> ATermTable -> a) -> a -> ATermTable -> a

-- | Standard foldM, but for ATermTables
foldM :: Monad m => (a -> ATermTable -> m a) -> a -> ATermTable -> m a

-- | Standard mapM, but for ATermTables
mapM :: Monad m => (ATermTable -> m b) -> ATermTable -> m [b]

-- | Standard mapM_, but for ATermTables
mapM_ :: Monad m => (ATermTable -> m b) -> ATermTable -> m ()

-- | Standard map, but for ATermTables
map :: (ATermTable -> a) -> ATermTable -> [a]

-- | Standard concatMap, but for ATermTables
concatMap :: (ATermTable -> [a]) -> ATermTable -> [a]

-- | The checker monad. For now the environment is the current ATerm, in
--   the future we may also store the path from the root to the current
--   ATerm, so use <a>currentTerm</a> instead of ask to get the current
--   ATerm
type CheckM log state m a = RWST ATermTable log state m a

-- | Like <a>app</a> but lifts the result into the CheckM monad
appM :: (Monoid log, Monad m) => (ATermTable -> a) -> Int -> CheckM log state m a

-- | Use this instead of <a>ask</a> so that we can refactor the environment
--   later without impacting existing code.
currentTerm :: (Monoid log, Monad m) => CheckM log state m ATermTable

-- | Use this instead of <a>local</a> so that we can refactor the
--   environment later without impacting existing code.
withCurrentTerm :: (Monoid log, Monad m) => ATermTable -> CheckM log state m a -> CheckM log state m a

-- | Return the hashes of the current term's children into the monad
childrenM :: (Monad m, Monoid log) => CheckM log state m [Int]

-- | Use this when the current node must satisfy a specific property. Note:
--   Using Maybe here is a bit of a hack. Refactor to support MonadPlus
--   style guards?
satisfy :: (Monad m, Monoid log) => (ATermTable -> Bool) -> CheckM log st m a -> CheckM log st m (Maybe a)

-- | Applies a traversal in a subtree of the current ATerm. Differs from
--   <a>everywhere</a> in that it does not apply the traversal to the
--   current term (only its children and their children).
inSubtree :: (Monad m, Monoid log) => CheckM log state m a -> CheckM log state m [[a]]
inSubtree_ :: (Monad m, Monoid log) => CheckM log state m a -> CheckM log state m ()

-- | Applies a traversal over the tree defined by the current node
--   (including root node).
everywhere :: (Monad m, Monoid log) => CheckM log state m a -> CheckM log state m [a]

-- | Like <a>everywhere</a> but throws away the result.
everywhere_ :: (Monad m, Monoid log) => CheckM log state m a -> CheckM log state m ()

-- | Extracts the label of Application nodes
extractString :: ATermTable -> Maybe String

-- | Extract the integer of Int nodes
extractInteger :: ATermTable -> Maybe Integer

-- | Extracts the filename, line number, and colunm number from file_info
--   nodes.
extractFileInfo :: ATermTable -> Maybe (String, Integer, Integer)

-- | Equality test on the label of an Application node
isNamed :: String -> ATermTable -> Bool

-- | It's not acually pretty, but that's not our fault.
showATerm :: ATermTable -> String

-- | This pattern comes up in most traversals. Simply return the stable
--   names so we don't break sharing.
children :: ATermTable -> [Int]

-- | create an ATerm table from an input string. Shared or unshared ATerms
--   can be read. A string for shared ATerms usually starts with an
--   exclamation mark and contains many hash marks indicating references.
--   Unshared ATerms are plain constructor terms.
readATerm :: String -> ATermTable
writeSharedATerm :: ATermTable -> String
getATermFromTable :: ATermTable -> Int -> ATermTable

module ATerm.Matching

-- | Binding type gives you back the parts of the ATerm that that match.
data Binding

-- | The index into the ATermTable of the matching ATerm
BoundTerm :: Int -> Binding

-- | The list of indexes into the ATermTable that match
BoundList :: [Int] -> Binding

-- | The matching Integer
BoundInt :: Integer -> Binding

-- | The matching String
BoundStr :: String -> Binding

-- | The index into the ATermTable for the ShAAppl term
BoundAppl :: Int -> Binding

-- | Matches exactly the string <tt>s</tt> within the ATerm
exactlyS :: MonadPlus m => String -> ATermTable -> m ()

-- | Matches exactly the integer <tt>i</tt> within the ATerm
exactlyI :: MonadPlus m => Integer -> ATermTable -> m ()

-- | Matches exactly the list <tt>xs</tt> within the ATerm
exactlyL :: MonadPlus m => [ATermTable -> m a] -> ATermTable -> m [a]

-- | Matches the string exactly
exactlyA :: MonadPlus m => String -> [ATermTable -> m a] -> ATermTable -> m [a]

-- | Looks for an Appl with name <tt>s</tt> and any children
exactlyNamed :: MonadPlus m => String -> ATermTable -> m ()

-- | Matches a partial specification against the children. The matching is
--   maximised so that if the pattern occurs more than once it is matched
--   each time it appears.
contains :: [ATermTable -> a] -> ATermTable -> [a]

-- | Matches a partial specification of a sub aterm List. The matching is
--   maximised so that if the pattern occurs more than once it is matched
--   each time it appears.
containsL :: [ATermTable -> a] -> ATermTable -> [a]

-- | Matches a partial specification of an Appl. The matching is maximised
--   so that if the pattern occurs more than once it is match each time it
--   appears.
containsA :: String -> [ATermTable -> a] -> ATermTable -> [a]
containsChildren :: Monad m => m (ATermTable -> b) -> m Int -> ATermTable -> m b

-- | Matches any ATerm and generates a binding to that term
bindT :: MonadPlus m => ATermTable -> m Binding

-- | Matches any list and generates a binding to that list
bindL :: MonadPlus m => ATermTable -> m Binding

-- | Matches any integer and generates a binding to that integer
bindI :: MonadPlus m => ATermTable -> m Binding

-- | Matches any string and generates a binding to that string Strings have
--   the form (Appl somestring [] []). Not to be confused with matching the
--   the string part of an Appl.
bindS :: MonadPlus m => ATermTable -> m Binding

-- | Matches any Appl and generates a binding to that Appl
bindA :: MonadPlus m => ATermTable -> m Binding
instance Eq Binding
instance Read Binding
instance Show Binding
instance Ord Binding

module ATerm.Generics
class GToATerm f
gToATerm :: GToATerm f => f a -> ATerm
class GToATerms f
gToATerms :: GToATerms f => f a -> [ATerm] -> [ATerm]
class ToATerm a where toATerm x = gToATerm (from x) toATermList = listToATerm
toATerm :: ToATerm a => a -> ATerm
toATermList :: ToATerm a => [a] -> ATerm
integralToATerm :: Integral a => a -> ATerm
showToATerm :: Show a => a -> ATerm
listToATerm :: ToATerm a => [a] -> ATerm
stringToATerm :: String -> ATerm
tupleToATerm :: (ToATerm a, ToATerm b) => (a, b) -> ATerm
tripleToATerm :: (ToATerm a, ToATerm b, ToATerm c) => (a, b, c) -> ATerm
class FromATerm a where fromATerm a = to <$> gFromATerm a fromATermList = atermToList
fromATerm :: FromATerm a => ATerm -> Maybe a
fromATermList :: FromATerm a => ATerm -> Maybe [a]
atermToIntegral :: Integral a => ATerm -> Maybe a
atermToRead :: Read a => ATerm -> Maybe a
atermToString :: ATerm -> Maybe String
atermToList :: FromATerm a => ATerm -> Maybe [a]
atermToTuple :: (FromATerm a, FromATerm b) => ATerm -> Maybe (a, b)
atermToTriple :: (FromATerm a, FromATerm b, FromATerm c) => ATerm -> Maybe (a, b, c)
class GFromATerm f
gFromATerm :: GFromATerm f => ATerm -> Maybe (f a)

-- | Convert all the <a>ATerm</a> elements into the requested structure
gFromATerms' :: GFromATerms f => [ATerm] -> Maybe (f a)

-- | Convert the next <a>ATerm</a> to the next needed field type
next :: FromATerm a => StateT [ATerm] Maybe a
class GFromATerms f
gFromATerms :: GFromATerms f => StateT [ATerm] Maybe (f a)
instance GFromATerms U1
instance FromATerm a => GFromATerms (Rec0 a)
instance (GFromATerms f, GFromATerms g) => GFromATerms (f :*: g)
instance GFromATerms f => GFromATerms (S1 i f)
instance (Constructor c, GFromATerms a) => GFromATerm (C1 c a)
instance (GFromATerm f, GFromATerm g) => GFromATerm (f :+: g)
instance GFromATerm a => GFromATerm (D1 c a)
instance FromATerm a => FromATerm [a]
instance FromATerm Char
instance FromATerm Integer
instance FromATerm Int
instance (FromATerm a, FromATerm b, FromATerm c) => FromATerm (a, b, c)
instance (FromATerm a, FromATerm b) => FromATerm (a, b)
instance FromATerm a => FromATerm (Maybe a)
instance (FromATerm a, FromATerm b) => FromATerm (Either a b)
instance FromATerm Double
instance FromATerm Float
instance FromATerm Bool
instance FromATerm ()
instance (ToATerm a, ToATerm b, ToATerm c) => ToATerm (a, b, c)
instance ToATerm a => ToATerm [a]
instance ToATerm Integer
instance ToATerm Int
instance ToATerm Char
instance (ToATerm a, ToATerm b) => ToATerm (a, b)
instance (ToATerm a, ToATerm b) => ToATerm (Either a b)
instance ToATerm a => ToATerm (Maybe a)
instance ToATerm ()
instance ToATerm Double
instance ToATerm Float
instance ToATerm Bool
instance GToATerms U1
instance ToATerm a => GToATerms (Rec0 a)
instance (GToATerms f, GToATerms g) => GToATerms (f :*: g)
instance GToATerms f => GToATerms (S1 i f)
instance (Constructor c, GToATerms a) => GToATerm (C1 c a)
instance (GToATerm f, GToATerm g) => GToATerm (f :+: g)
instance GToATerm a => GToATerm (D1 c a)
