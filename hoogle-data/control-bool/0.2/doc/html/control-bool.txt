-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Useful combinators for boolean expressions
--   
--   Useful combinators for boolean expressions
@package control-bool
@version 0.2


-- | Useful combinators for boolean expressions
module Control.Bool

-- | Return its second argument if the boolean value is <a>True</a>,
--   otherwise return first.
bool :: a -> a -> Bool -> a

-- | A lifted <a>not</a>.
notF :: Functor f => f Bool -> f Bool

-- | A lifted (<a>||</a>).
(<||>) :: Applicative f => f Bool -> f Bool -> f Bool

-- | A lifted (<a>&amp;&amp;</a>).
(<&&>) :: Applicative f => f Bool -> f Bool -> f Bool

-- | An <a>Alternative</a> analogue of <a>guard</a>.
aguard :: Alternative m => Bool -> m ()

-- | <a>aguard'</a> b returns the second argument if b is True, otherwise
--   becomes <a>empty</a>.
aguard' :: Alternative m => Bool -> a -> m a

-- | A lifted <a>not</a>.
notM :: Monad m => m Bool -> m Bool

-- | A lifted (<a>||</a>), but it doesn't run the second argument if the
--   first returns True.
(<|=>) :: Monad m => m Bool -> m Bool -> m Bool

-- | A lifted (<a>&amp;&amp;</a>), but it doesn't run the second argument
--   if the first returns False.
(<&=>) :: Monad m => m Bool -> m Bool -> m Bool

-- | <a>guard'</a> b returns the second argument if b is True, otherwise
--   becomes <a>mzero</a>.
guard' :: MonadPlus m => Bool -> a -> m a

-- | <a>guard'</a> b returns the second argument if b is True, otherwise
--   becomes mzero.
guardM' :: MonadPlus m => m Bool -> a -> m a

-- | Run the action if the given monadic condition becomes <a>True</a>.
whenM :: (Monoid a, Monad m) => m Bool -> m a -> m a

-- | Run the action if the given monadic condition becomes <a>False</a>.
unlessM :: (Monoid a, Monad m) => m Bool -> m a -> m a
ifThenElseM :: Monad m => m Bool -> m a -> m a -> m a
