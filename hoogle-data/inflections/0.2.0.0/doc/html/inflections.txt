-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Inflections library for Haskell
--   
@package inflections
@version 0.2.0.0

module Text.Inflections.Parse.Types

-- | A <a>String</a> that should be kept whole through applied inflections
data Word

-- | A word that may be transformed by inflection
Word :: String -> Word

-- | A word that may not be transformed by inflections
Acronym :: String -> Word
mapWord :: (String -> String) -> Word -> Word
instance Show Word
instance Eq Word


-- | This module provides methods for common String transformations,
--   similar to the <a>Inflections</a> library found in Rails:
--   
--   <a>http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html</a>
--   
--   While many of the functions in this library are the same as in
--   implementations in Rails' ActiveSupport, the philosophy of this
--   library is fundamentally different. Where Rails tries to be as
--   permissive as possible, and return a String when given any input, this
--   library tries to output strings that make sense according to the
--   function that is called.
--   
--   When you look closely at many of the functions in Rails' inflections
--   library, you will notice that many of them are partial. That is, they
--   only have well-defined output for some of the possible inputs to the
--   function allowed by the type system. As an example, let's take the
--   <tt>underscore</tt> function. In Rails, it works like this:
--   
--   <pre>
--   &gt;&gt;&gt; "fooBar".underscore
--   "foo_bar"
--   </pre>
--   
--   Looks ok so far. However, it's also easy to produce less expected
--   results:
--   
--   <pre>
--   &gt;&gt;&gt; "foo bar".underscore
--   "foo bar"
--   </pre>
--   
--   The output isn't underscored - it contains a space! It turns out that
--   some of the functions from Inflections in ActiveSupport are
--   <i>partial</i>. Ie., the outputs are really only specified for a
--   certain range of the inputs allowed by the String type.
--   
--   In the Haskell inflections library, we aim to deliver more predictable
--   results by separating the parsing of strings into tokens from the
--   application of transformations. Let's see an example.
--   
--   First, we tokenize an underscored String using <a>parseSnakeCase</a>:
--   
--   <pre>
--   &gt;&gt;&gt; parseSnakeCase [] "foo_bar"
--   Right [Word "foo",Word "bar"]
--   </pre>
--   
--   We can chain together the tokenization of the input String and the
--   transformation to CamelCase by using <a>LiftM</a>:
--   
--   <pre>
--   &gt;&gt;&gt; import Control.Monad (liftM)
--   
--   &gt;&gt;&gt; liftM camelize $ parseSnakeCase "foo_bar"
--   </pre>
--   
--   By separating out the tokenization from the application of
--   inflections, we also end up with useful libraries for validating input
--   which can be used independently:
--   
--   <pre>
--   &gt;&gt;&gt; parseSnakeCase [] "fooBar"
--   Left "(unknown)" (line 1, column 4):
--   unexpected 'B'
--   expecting lowercase letter, "_" or end of input
--   </pre>
--   
--   This library is still a work-in-progress, and contributions are
--   welcome for missing pieces and to fix bugs. Please see the Github page
--   to contribute with code or bug reports:
--   
--   <a>https://github.com/stackbuilders/inflections-hs</a>
module Text.Inflections

-- | Turns a an input Word List in into CamelCase. Returns the CamelCase
--   String.
camelize :: [Word] -> String

-- | Turns an input Word List into a CamelCase String.
camelizeCustom :: Bool -> [Word] -> String

-- | Replaces underscores in a snake_cased string with dashes (hyphens).
dasherize :: [Word] -> String

-- | Capitalizes the first word and turns underscores into spaces. Like
--   titleize, this is meant for creating pretty output.
humanize :: [Word] -> String

-- | Turns a CamelCase string into an underscore_separated String.
underscore :: [Word] -> String

-- | Capitalizes all the Words in the input <a>List</a>.
titleize :: [Word] -> String

-- | These default transliterations stolen from the Ruby i18n library - see
--   <a>https://github.com/svenfuchs/i18n/blob/master/lib/i18n/backend/transliterator.rb#L41:L69</a>.
defaultMap :: Map Char String

-- | Replaces special characters in a string so that it may be used as part
--   of a <tt>pretty</tt> URL. Uses the default transliterations in this
--   library
parameterize :: String -> String

-- | Transliterate a String with a custom transliteration table.
parameterizeCustom :: Transliterations -> String -> String

-- | Returns a String after default approximations for changing Unicode
--   characters to a valid ASCII range are applied. If you want to
--   supplement the default approximations with your own, you should use
--   the transliterateCustom function instead of transliterate.
transliterate :: String -> String

-- | Returns a String after default approximations for changing Unicode
--   characters to a valid ASCII range are applied.
transliterateCustom :: String -> Transliterations -> String -> String

-- | Returns the suffix that should be added to a number to denote the
--   position in an ordered sequence such as 1st, 2nd, 3rd, 4th.
ordinal :: Integer -> String

-- | Turns a number into an ordinal string used to denote the position in
--   an ordered sequence such as 1st, 2nd, 3rd, 4th.
ordinalize :: Integer -> String
parseSnakeCase :: [String] -> String -> Either ParseError [Word]
parseCamelCase :: [String] -> String -> Either ParseError [Word]

-- | A <a>Map</a> containing mappings from international characters to
--   sequences approximating these characters within the ASCII range.
type Transliterations = Map Char String

-- | Transforms CamelCasedString to snake_cased_string_with_underscores.
--   Throws exception if parsing failed
toUnderscore :: String -> String

-- | Transforms CamelCasedString to snake-cased-string-with-dashes. Throws
--   exception if parsing failed.
toDashed :: String -> String

-- | Transforms underscored_text to CamelCasedText. If first argument is
--   <a>True</a> then FirstCharacter in result string will be in upper
--   case. If <a>False</a> then firstCharacter will be in lower case.
--   Throws exception if parsing failed
toCamelCased :: Bool -> String -> String
