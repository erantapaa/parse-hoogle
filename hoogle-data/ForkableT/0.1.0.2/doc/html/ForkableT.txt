-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Forkable monad transformers
--   
--   Provides two classes for modular handling of forking
@package ForkableT
@version 0.1.0.2


-- | This module defines two classes. <tt><a>Forkable</a> m n</tt> means a
--   monad <tt>n</tt> may be forked in <tt>m</tt>. <tt><a>ForkableT</a>
--   t</tt> means that applying the transformer to <tt>n</tt> and
--   <tt>m</tt> will mean you can still fork <tt>t n</tt> in <tt>t m</tt>.
--   
--   The reason we need a separate class for monad transformers is because
--   often times the "forkability" of a transformed monad does not depend
--   on the underlying monad, only it's forkability. This is the case for
--   example for most standard monad transformers.
module Control.Concurrent.ForkableT

-- | ForkableT. The default instance uses <a>MonadTransControl</a> to lift
--   the underlying <a>fork</a>
class ForkableT t where forkT t = liftWith $ \ run -> fork $ run t >> return ()
forkT :: (ForkableT t, Forkable m n) => t n () -> t m ThreadId

-- | Forkable. The default instance uses <a>ForkableT</a> and simply calls
--   <a>forkT</a>
class (MonadIO m, MonadIO n) => Forkable m n where fork = forkT
fork :: Forkable m n => n () -> m ThreadId
instance [safe] Forkable m n => Forkable (ReaderT s m) (StateT s n)
instance [safe] Forkable m n => Forkable (StateT s m) (ReaderT s n)
instance [safe] (Forkable m n, Error e) => Forkable (ErrorT e m) (ErrorT e n)
instance [safe] Forkable m n => Forkable (StateT s m) (StateT s n)
instance [safe] Forkable m n => Forkable (ReaderT r m) (ReaderT r n)
instance [safe] Error e => ForkableT (ErrorT e)
instance [safe] Monoid w => ForkableT (WriterT w)
instance [safe] ForkableT (StateT s)
instance [safe] ForkableT (ReaderT r)
instance [safe] Forkable IO IO


-- | This module defines non-Prelude 'Forkable'/'ForkableT' instances. It
--   is separated from <a>Control.Concurrent.Forkable</a> because imported
--   modules might not be -XSafe
module Control.Concurrent.ForkableT.Instances
instance (MonadBaseControl IO m, MonadIO m) => Forkable (ResourceT m) (ResourceT m)
