-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | LINear Discriminant Analysis
--   
--   This package (mainly the module LDA) implements the linear
--   discriminant analysis. It provides both data classification (according
--   to Fisher) and data analysis (by discriminant criteria).
--   
--   Caused by the usage of the hmatrix package this package needs LAPACK
--   too. See INSTALL file for more introductions.
@package linda
@version 0.1.2


-- | This module implements the simple functionality of multidimensional
--   linear function calculation.
module Numeric.Function

-- | The function-type represents a function by its constants, e.g.
--   
--   <pre>
--   [b0,b1,...,bn] 
--   </pre>
--   
--   represents the function f = b0 + b1 * X1 + ... + bn * Xn
type LinFunction a = [a]

-- | Similare to the function-type, but die value-type represents the
--   values of the variables in a function, e.g.
--   
--   <pre>
--   [X1,...,Xn]
--   </pre>
type Values a = [a]

-- | Calculates the result of a given function with given values, e.g.
--   
--   <pre>
--   calcLinFunction [1,1,1] [1,2] == 1 + 1 * 1 + 1 * 2 == 4
--   </pre>
--   
--   <pre>
--   calcLinFunction [1,2,3] [1,1] == 1 + 2 * 1 + 3 * 1 == 6
--   </pre>
--   
--   <pre>
--   calcLinFunction [1,2,3] [1..] == 1 + 2 * 1 + 3 * 2 == 9
--   </pre>
calcLinFunction :: Num a => LinFunction a -> Values a -> a


-- | This module implements a few extensions for the vector-module.
module Numeric.Vector

-- | A Vector represented by a simple list.
type RawVector a = [a]

-- | <a>Storable</a>-based vectors
data Vector a :: * -> *

-- | Calculates the lists elements average
--   
--   <pre>
--   average [1,3,2] == 2.0
--   </pre>
average :: Floating a => RawVector a -> a

-- | Counts the elements of a given list
--   
--   <pre>
--   count [1,2,3,4,5] == 5
--   </pre>
count :: Num b => RawVector a -> b

-- | creates a Vector from a list:
--   
--   <pre>
--   &gt; fromList [2,3,5,7]
--   4 |&gt; [2.0,3.0,5.0,7.0]
--   </pre>
fromList :: Storable a => [a] -> Vector a

-- | The <a>maximumBy</a> function takes a comparison function and a list
--   and returns the greatest element of the list by the comparison
--   function. The list must be finite and non-empty.
maximumBy :: (a -> a -> Ordering) -> [a] -> a

-- | Calculates the position of a lists maximum
--   
--   <pre>
--   maxPos [1,10,8,3] == 1 
--   </pre>
maxPos :: RawVector Double -> Int

-- | extracts the Vector elements to a list
--   
--   <pre>
--   &gt; toList (linspace 5 (1,10))
--   [1.0,3.25,5.5,7.75,10.0]
--   </pre>
toList :: Storable a => Vector a -> [a]

-- | The <a>transpose</a> function transposes the rows and columns of its
--   argument. For example,
--   
--   <pre>
--   transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]
--   </pre>
transpose :: [[a]] -> [[a]]


-- | This module includes a few (standard) functions to work with matrixes.
module Numeric.Matrix

-- | Matrix representation suitable for GSL and LAPACK computations.
--   
--   The elements are stored in a continuous memory array.
data Matrix t :: * -> *

-- | A matrix represented by a list of lists.
type RawMatrix a = [[a]]

-- | Supported matrix elements.
--   
--   This class provides optimized internal operations for selected element
--   types. It provides unoptimised defaults for any <a>Storable</a> type,
--   so you can create instances simply as: <tt>instance Element Foo</tt>.
class Storable a => Element a

-- | Creates a vector by concatenation of rows
--   
--   <pre>
--   &gt; flatten (<tt>ident</tt> 3)
--   9 |&gt; [1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0]
--   </pre>
flatten :: Element t => Matrix t -> Vector t

-- | Creates a list of vectors from the columns of a matrix
toColumns :: Element t => Matrix t -> [Vector t]

-- | the inverse of <tt>Data.Packed.Matrix.fromLists</tt>
toLists :: Element t => Matrix t -> [[t]]

-- | extracts the rows of a matrix as a list of vectors
toRows :: Element t => Matrix t -> [Vector t]

-- | creates a 1-row matrix from a vector
asRow :: Storable a => Vector a -> Matrix a

-- | Creates a <a>Matrix</a> from a list of lists (considered as rows).
--   
--   <pre>
--   &gt; fromLists [[1,2],[3,4],[5,6]]
--   (3&gt;&lt;2)
--    [ 1.0, 2.0
--    , 3.0, 4.0
--    , 5.0, 6.0 ]
--   </pre>
fromLists :: Element t => [[t]] -> Matrix t

-- | Builds a quadratic matrix out of a list
fromListToQuadraticMatrix :: [Double] -> Matrix Double

-- | Reads a matrix position.
(@@>) :: Storable t => Matrix t -> (Int, Int) -> t

-- | Calculates the eigenvalue of a matrix, e.g.
--   
--   <pre>
--   eigenvalue (fromLists [[0.77143,-0.25714],[-0.42245,0.14082]]) 
--   </pre>
--   
--   returns
--   
--   <pre>
--   0.9122456375784809 
--   </pre>
eigenvalue :: Matrix Double -> Double

-- | Calculates one eigenvector of a given matrix, e.g.
--   
--   <pre>
--   eigenvector (fromLists [[-0.14081563757848092,-0.25714],[-0.42245,-0.7714256375784809]])
--   </pre>
--   
--   returns
--   
--   <pre>
--   [0.8770950095147589,-0.48031692067249215]
--   </pre>
eigenvector :: Matrix Double -> Vector Double

-- | Inverse of a square matrix. See also <a>invlndet</a>.
inv :: Field t => Matrix t -> Matrix t

-- | Calculates the identity matrix (n x n) by given scale (n)
identityMatrix :: Int -> Matrix Double

-- | A simple map-Function which maps a given function on every element of
--   the given matrix
mapMatrix :: (Double -> Double) -> Matrix Double -> Matrix Double

-- | Calculates the reduced matrix of a given matrix (by reducing the given
--   matrix), e.g.
--   
--   <pre>
--   reduceMatrix (fromLists [[0.77143,-0.25714],[-0.42245,0.14082]])
--   </pre>
--   
--   returns
--   
--   <pre>
--   (2&gt;&lt;2)[ -0.14081563757848092,-0.25714,-0.42245,-0.7714256375784809]
--   </pre>
reduceMatrix :: Matrix Double -> Matrix Double

-- | Calculates the scalarproduct (with a scalar and matrix)
scalarMultiplication :: Double -> Matrix Double -> Matrix Double

-- | Calculates the difference (matrix) between two matrixes
subtractMatrix :: Matrix Double -> Matrix Double -> Matrix Double

-- | Matrix transpose.
trans :: Matrix t -> Matrix t

-- | Zipps a matrix col by col
--   
--   <pre>
--   zipAllWith sum [[1,2,3],[1,2,3],[1,2,3]] == [3,6,9]
--   </pre>
zipAllWith :: (RawVector a -> b) -> RawMatrix a -> RawVector b


-- | This module implements a list of matrixes and a few functions to
--   handle them.
module Numeric.MatrixList

-- | A list of matrixes
type MatrixList a = [Matrix a]

-- | A list of matrixes represented as a list of lists of lists
type RawMatrixList a = [[[a]]]

-- | Transforms a Matrixlist to a RawMatrixList.
toLists :: Element a => MatrixList a -> RawMatrixList a
countMatrixElements :: RawMatrixList a -> RawMatrix Double

-- | Counts the number of matrixes in a list of matrixes
countMatrixes :: RawMatrixList a -> Double

-- | Counts the number of cols (based on the guess that all matrixes have
--   the similare structure)
countMatrixesCols :: RawMatrixList a -> Double

-- | Calculate every cols averages
--   
--   <pre>
--   averages [[[1,2],[2,1]],[[2,3],[3,4]]] == [[1.5,1.5],[2.5,3.5]]
--   </pre>
averages :: RawMatrixList Double -> RawMatrix Double

-- | Calculates the cross-product of every matrix-cols
--   
--   <pre>
--   crossProduct  [[[1,2],[2,1]],[[2,3],[3,4]]] == [[2.0,2.0],[6.0,12.0]]
--   </pre>
crossProduct :: RawMatrixList Double -> RawMatrix Double

-- | maps a function over every vector of a list of matrixes
--   
--   <pre>
--   mapVectors (map (1+)) [[[1,2],[2,1]],[[2,3],[3,4]]] == [[[2.0,3.0],[3.0,2.0]],[[3.0,4.0],[4.0,5.0]]]
--   </pre>
mapVectors :: ([a] -> [b]) -> RawMatrixList a -> RawMatrixList b

-- | folds every vector of a list of matrixes
--   
--   <pre>
--   foldVectors sum [[[1,2],[2,1]],[[2,3],[3,4]]] == [[[2.0,3.0],[3.0,2.0]],[[3.0,4.0],[4.0,5.0]]]
--   </pre>
foldVectors :: ([a] -> b) -> RawMatrixList a -> RawMatrix b

-- | maps a function over every element of a list of matrixes
--   
--   <pre>
--   mapElements (1+) [[[1,2],[2,1]],[[2,3],[3,4]]] == [[[2.0,3.0],[3.0,2.0]],[[3.0,4.0],[4.0,5.0]]]
--   </pre>
mapElements :: (a -> b) -> RawMatrixList a -> RawMatrixList b

-- | Transposes every matrix in a lit of matrixes
transposeAll :: RawMatrixList a -> RawMatrixList a

-- | Counts the rows of every matrix in the list
--   
--   <pre>
--   countRows [[[1,2],[2,1]],[[2,3],[3,4],[1,1]]] == [2.0,3.0]
--   </pre>
countRows :: RawMatrixList a -> RawVector Double

-- | Counts the sum of all matrixes-rows
--   
--   <pre>
--   countAllRows [[[1,2],[2,1]],[[2,3],[3,4],[1,1]]] == 5.0
--   </pre>
countAllRows :: RawMatrixList a -> Double


-- | This module implements some linear discriminant analysis functions.
--   Imagine you've made a poll and now you have values/attributes from
--   every subscriber. Further more you've grouped the subscribers into
--   clusters. The poll-datas are structured as follows:
--   
--   <ul>
--   <li>poll-data of one subscriber = [value] --&gt; Vector value</li>
--   <li>poll-data of one cluster/group of subscribers = [[values]] --&gt;
--   Matrix values</li>
--   <li>poll-data of all clusters/groups = [[[values]]] --&gt; MatrixList
--   values</li>
--   </ul>
--   
--   Now you want to check if you clustered right and/or how significant
--   the values you asked for are...
module Numeric.Statistics.LDA

-- | Calculation of the classification of a survey (or attributes) in a
--   cluster. The function takes a vector<i>list of attributes</i>values
--   and a context. The context consists of groups<i>clusters and its items
--   values</i>attributes. The function returns the ID (starting with 0) of
--   the cluster to which the given vector/list belongs to. This function
--   uses the Fisher algorithm.
fisher :: RawMatrixList Double -> RawVector Double -> Int

-- | Calculates the ID (starting with 0) of the cluster the given list of
--   attributes belongs to. The function takes a list of attributes and a
--   list of clusters which are representated by there classification
--   function. This function uses the Fisher algorithm.
fisher' :: RawVector (LinFunction Double) -> RawVector Double -> Int

-- | Calculates the ID of the cluster the given values belonging to. This
--   function takes a list of clusters, representated by a tuple, and a
--   list of values. The cluster-tuples consists of a ID of the cluster and
--   the classification function (according to Fisher) of the cluster. This
--   function uses the Fisher algorithm.
fisherT :: RawVector (Int, LinFunction Double) -> RawVector Double -> Int

-- | Calculates the cluster of every survey of a poll. This function takes
--   the data of a whole poll and classifies every survey of the poll. This
--   function uses the Fisher algorithm.
fisherAll :: RawMatrixList Double -> RawMatrix Int

-- | Calculates the classification function according to Fisher.
fisherClassificationFunction :: RawMatrixList Double -> RawVector (LinFunction Double)

-- | Calculation of the a priori probability, more precisely the
--   probability that an element belongs to a group.
aprioriProbability :: RawMatrixList Double -> RawVector Double

-- | Calculates the discriminant criteria.
discriminantCriteria :: RawMatrixList Double -> RawVector Double

-- | Calculates the isolated discriminants of every attribute.
--   
--   <pre>
--   isolatedDiscriminant [[[-1,1],[2,2]],[[1,3],[4,8]]] == [0.4444444444444444,1.2307692307692308]
--   </pre>
isolatedDiscriminant :: RawMatrixList Double -> RawVector Double
