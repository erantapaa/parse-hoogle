-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Package manager for Elm libraries
--   
@package elm-package
@version 0.5

module Elm.Package.Name
data Name
Name :: String -> String -> Name
user :: Name -> String
project :: Name -> String
dummyName :: Name
toString :: Name -> String
toUrl :: Name -> String
toFilePath :: Name -> FilePath
fromString :: String -> Maybe Name
fromString' :: MonadError String m => String -> m Name
errorMsg :: String -> String
instance Eq Name
instance Ord Name
instance ToJSON Name
instance FromJSON Name
instance Binary Name

module Elm.Package.Version
elm :: Version
data Version
Version :: Int -> Int -> Int -> Version
major :: Version -> Int
minor :: Version -> Int
patch :: Version -> Int
initialVersion :: Version
dummyVersion :: Version
bumpPatch :: Version -> Version
bumpMinor :: Version -> Version
bumpMajor :: Version -> Version
filterLatest :: Ord a => (Version -> a) -> [Version] -> [Version]
majorAndMinor :: Version -> (Int, Int)
toString :: Version -> String
fromString :: String -> Maybe Version
instance Eq Version
instance Ord Version
instance ToJSON Version
instance FromJSON Version
instance Binary Version

module Elm.Package.Paths

-- | Name of directory for all of a project's dependencies.
stuffDirectory :: FilePath

-- | Describes the exact versions of every package used for your project.
--   This information is written by elm-package when it solves and installs
--   dependencies.
solvedDependencies :: FilePath

-- | Documentation for all the exposed modules in this package.
documentation :: FilePath

-- | Name of the dependency file, specifying dependencies and other
--   metadata for building and sharing projects.
description :: FilePath

-- | Directory for all packages needed to build your project.
packagesDirectory :: FilePath

-- | Path to a particular package.
package :: Name -> Version -> FilePath

module Elm.Package.Solution
type Solution = Map Name Version
write :: FilePath -> Solution -> IO ()
read :: (MonadIO m, MonadError String m) => FilePath -> m Solution

module GitHub
getVersionTags :: (MonadIO m, MonadError String m) => Name -> m [Version]
instance FromJSON Tags

module Elm.Package.Constraint
data Constraint
fromString :: String -> Maybe Constraint
toString :: Constraint -> String
untilNextMajor :: Version -> Constraint
untilNextMinor :: Version -> Constraint
expand :: Constraint -> Version -> Constraint
defaultElmVersion :: Constraint
isSatisfied :: Constraint -> Version -> Bool
errorMessage :: String -> String
instance FromJSON Constraint
instance ToJSON Constraint

module Elm.Package.Description
data Description
Description :: Name -> String -> Version -> Constraint -> String -> String -> [FilePath] -> [Name] -> Bool -> [(Name, Constraint)] -> Description
name :: Description -> Name
repo :: Description -> String
version :: Description -> Version
elmVersion :: Description -> Constraint
summary :: Description -> String
license :: Description -> String
sourceDirs :: Description -> [FilePath]
exposed :: Description -> [Name]
natives :: Description -> Bool
dependencies :: Description -> [(Name, Constraint)]
defaultDescription :: Description
read :: (MonadIO m, MonadError String m) => FilePath -> m Description
write :: Description -> IO ()
locateExposedModules :: (MonadIO m, MonadError String m) => Description -> m [(Name, FilePath)]
prettyJSON :: Description -> ByteString
prettyAngles :: ByteString -> ByteString
get :: FromJSON a => Object -> Text -> String -> Parser a
getDependencies :: Object -> Parser [(Name, Constraint)]
getElmVersion :: Object -> Parser Constraint
elmVersionDescription :: String
repoToName :: String -> Either String Name
instance FromJSON Description
instance ToJSON Description

module Elm.Package.Initialize
solution :: (MonadError String m, MonadIO m) => Bool -> m Solution
