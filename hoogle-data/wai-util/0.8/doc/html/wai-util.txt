-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Collection of utility functions for use with WAI
--   
@package wai-util
@version 0.8

module Network.Wai.Util

-- | Build an Application that supports multiple Accept types (Content
--   Negotiation)
handleAcceptTypes :: Monad m => [(String, m Response)] -> Request -> m Response

-- | <tt>BackeEnd</tt> for <tt>parseRequestBody</tt> that throws out any
--   file uploads
noStoreFileUploads :: BackEnd ()

-- | Run a function over the headers in a <a>Response</a>
mapHeaders :: (ResponseHeaders -> ResponseHeaders) -> Response -> Response

-- | Set a default value for a header in a <a>Response</a>
defHeader :: Header -> Response -> Response

-- | Set a default value for a header in <a>ResponseHeaders</a>
defHeader' :: Header -> ResponseHeaders -> ResponseHeaders

-- | Set the matching header name to this in a <a>Response</a>
replaceHeader :: Header -> Response -> Response

-- | Set the matching header name to this in <a>ResponseHeaders</a>
replaceHeader' :: Header -> ResponseHeaders -> ResponseHeaders

-- | Smart constructor to build a <a>Response</a> from a <a>String</a>
string :: Monad m => Status -> ResponseHeaders -> String -> m Response

-- | Smart constructor to build a <a>Response</a> from a <a>Text</a>
text :: Monad m => Status -> ResponseHeaders -> Text -> m Response

-- | Smart constructor to build a <a>Response</a> from a <a>Builder</a>
textBuilder :: Monad m => Status -> ResponseHeaders -> Builder -> m Response

-- | Smart constructor to build a JSON <a>Response</a> using Aeson
json :: (Monad m, ToJSON a) => Status -> ResponseHeaders -> a -> m Response

-- | Smart constructor to build a <a>Response</a> from a <a>ByteString</a>
bytestring :: (IsByteString bs, Monad m) => Status -> ResponseHeaders -> bs -> m Response

-- | Smart constructor to build a redirect
--   
--   Checks if the <a>Status</a> is a redirection and the <a>URI</a> is
--   absolute
redirect :: Status -> ResponseHeaders -> URI -> Maybe Response

-- | Smart constructor to build a redirect
--   
--   Asserts redirect conditions with an irrefutable pattern match, only
--   use on hard-coded values.
redirect' :: Monad m => Status -> ResponseHeaders -> URI -> m Response

-- | Safely convert a <a>String</a> to types that can only encode ASCII
stringAscii :: IsString s => String -> Maybe s

-- | Safely convert a pair of <a>String</a> to a pair suitable for use as a
--   <a>Header</a>, ensuring only ASCII characters are present.
stringHeader :: (IsString s1, IsString s2) => (String, String) -> Maybe (s1, s2)

-- | Safely convert a list of pairs of <a>String</a> to a pair suitable for
--   use as a <a>Header</a>, ensuring only ASCII characters are present.
stringHeaders :: (IsString s1, IsString s2) => [(String, String)] -> Maybe [(s1, s2)]

-- | Unsafely convert a list of pairs of <a>String</a> to a pair suitable
--   for use as a <a>Header</a>, ensuring only ASCII characters are
--   present.
--   
--   Asserts success with an irrefutable pattern match, only use on
--   hard-coded values.
stringHeaders' :: (IsString s1, IsString s2) => [(String, String)] -> [(s1, s2)]

-- | Lookup a given key in something that acts like a query
queryLookup :: (QueryLike q, QueryKeyLike k) => k -> q -> Maybe Text

-- | Get all matches for a given key in something that acts like a query
queryLookupAll :: (QueryLike q, QueryKeyLike k) => k -> q -> [Text]
instance IsByteString ByteString
instance IsByteString ByteString
