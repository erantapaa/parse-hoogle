-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A library for transforming vacuum graphs into GraphViz output
--   
--   A library for transforming <tt>vacuum</tt> graphs into GraphViz output
@package vacuum-graphviz
@version 2.1.0.1


-- | This module exports a simple, high level interface for exporting
--   <tt>vacuum</tt> graphs to GraphViz <tt>dot</tt> output, and rendering
--   them to PNG/SVG files. It also contains various helpers if you wish to
--   customize the output yourself in some manner.
--   
--   For this module to work, you will need to have graphviz installed, and
--   the <tt>dot</tt> utility should be available somewhere in your
--   <tt>$PATH</tt>.
--   
--   The simplest possible usage of this module is like so:
--   
--   <pre>
--   vacuumToPng "list" [1..10]
--   </pre>
--   
--   This will output a 'list.png' file, which contains a pretty graph
--   visualization of the expression <tt>[1..10]</tt>. You may
--   alternatively use <a>vacuumToSvg</a> in the same manner, to export a
--   graph to an SVG file. This is more than sufficient for many use cases.
module GHC.Vacuum.GraphViz

-- | <tt>vacuumToPng <a>foo</a> e</tt> renders a graph representation of
--   the expression <tt>e</tt> (which can be any expression what-so-ever)
--   to the file "foo.png" for later viewing.
vacuumToPng :: FilePath -> a -> IO FilePath

-- | <tt>vacuumToSvg <a>foo</a> e</tt> renders a graph representation of
--   the expression <tt>e</tt> (which can be any expression what-so-ever)
--   to the file "foo.svg" for later viewing.
vacuumToSvg :: FilePath -> a -> IO FilePath
graphToDotFile :: (Ord a, PrintDot a) => FilePath -> GraphvizOutput -> [(a, [a])] -> IO FilePath
graphToDot :: Ord a => [(a, [a])] -> DotGraph a
graphToDotParams :: (Ord a, Ord cl) => GraphvizParams a () () cl l -> [(a, [a])] -> DotGraph a
vacuumParams :: GraphvizParams a () () () ()
