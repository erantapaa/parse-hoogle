-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Graph walk abstraction
--   
--   Walk over a graph, abstracting away from the underlying
--   representation, not caring about precise order
@package graph-visit
@version 0.1.0.2


-- | This module provides a graph visiting abstraction
module Data.Graph.GraphVisit

-- | Abstract monadic graph visit, over arbitrary structures, using state
--   holding visited nodes (also acting als start) and an accumulator
--   <tt>thr</tt>.
graphVisitM :: (Ord node, Monad m) => (thr -> graph -> node -> m (thr, Set node)) -> Set node -> graph -> thr -> m (thr, Set node)

-- | Abstract graph visit, running graphVisitM
graphVisit :: Ord node => (thr -> graph -> node -> (thr, Set node)) -> Set node -> graph -> thr -> (thr, Set node)
