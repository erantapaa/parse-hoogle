-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Ways to output stylized text on ANSI consoles.
--   
--   Various ways to output stylized text on ANSI consoles. Uses some of
--   the MaxBolingbroke's System.Console.ANSI functionalities.
@package stylized
@version 0.1.3

module System.Console.ANSI.Stylized
type Style = (ColourOption, StyleOption)
type ColourOption = (ColorIntensity, Color)
type StyleOption = (ConsoleIntensity, Underlining)

-- | Given an handle, reset graphic rendition
hResetGR :: Handle -> IO ()

-- | On stdout, reset graphic rendition
resetGR :: IO ()

-- | Given an handle, set style and put string
hPutStrS :: Handle -> Style -> String -> IO ()

-- | On stdout, set style and put string
putStrS :: Style -> String -> IO ()

-- | Given an handle, set style and put string followed by newline
hPutStrLnS :: Handle -> Style -> String -> IO ()

-- | On stdout, set style and put string followed by newline
putStrLnS :: Style -> String -> IO ()

-- | Given an handle, for each item set style and put string
hPutS :: Handle -> [(Style, String)] -> IO ()

-- | On stdout, for each item set style and put string
putS :: [(Style, String)] -> IO ()

-- | Given an handle, for each item set style and put string followed by
--   newline
hPutLnS :: Handle -> [(Style, String)] -> IO ()

-- | On stdout, for each item set style and put string followed by newline
putLnS :: [(Style, String)] -> IO ()

-- | Given a function mapping some type t to <a>Style</a>, return a
--   function behaving like <a>hPutS</a>
hPutT :: (t -> Style) -> Handle -> [(t, String)] -> IO ()

-- | Given a function mapping some type t to <a>Style</a>, return a
--   function behaving like <a>putS</a>
putT :: (t -> Style) -> [(t, String)] -> IO ()

-- | Given a function mapping some type t to <a>Style</a>, return a
--   function behaving like <a>hPutLnS</a>
hPutLnT :: (t -> Style) -> Handle -> [(t, String)] -> IO ()

-- | Given a function mapping some type t to <a>Style</a>, return a
--   function behaving like <a>putLnS</a>
putLnT :: (t -> Style) -> [(t, String)] -> IO ()
