-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Library wrapping the GnuTLS API.
--   
--   hsgnutls is a wrapper to the GNU TLS Library. Currently it is in quite
--   early stages but offers client functionality and parts of the
--   server-side interface. Anonymous and X509 authentication is supported,
--   but SRP and OpenPGP will appear in a future version. hsgnutls uses the
--   attribute implementation borrowed from Gtk2Hs.
--   
--   Note this is not the official hsgnutls, but rather a fork updated for
--   the needs of the Barracuda ad-hoc chat client, which repo can be found
--   at <a>http://repos.mroot.net/sep07-adhoc</a>.
@package hsgnutls-yj
@version 0.2.3.3

module Codec.Encryption.Ciphers
class CipherType a
cipherTypeToC :: CipherType a => a -> CInt
class CipherMode a
cipherModeToC :: CipherMode a => a -> CInt
data CipherIDEA
CipherIDEA :: CipherIDEA
data Cipher3DES
Cipher3DES :: Cipher3DES
data CipherCast5
CipherCast5 :: CipherCast5
data CipherBlowfish
CipherBlowfish :: CipherBlowfish
data CipherAES
CipherAES :: CipherAES
data CipherAES128
CipherAES128 :: CipherAES128
data CipherAES192
CipherAES192 :: CipherAES192
data CipherAES256
CipherAES256 :: CipherAES256
data CipherRIJNDAEL
CipherRIJDNDAEL :: CipherRIJNDAEL
data CipherRIJNDAEL128
CipherRIJNDAEL128 :: CipherRIJNDAEL128
data CipherRIJNDAEL192
CipherRIJNDAEL192 :: CipherRIJNDAEL192
data CipherRIJNDAEL256
CipherRIJNDAEL256 :: CipherRIJNDAEL256
data CipherTwofish
CipherTwofish :: CipherTwofish
data CipherTwofish128
CipherTwofish128 :: CipherTwofish128
data CipherArcfour
CipherArcfour :: CipherArcfour
data CipherDES
CipherDES :: CipherDES
data ModeNone
ModeNone :: ModeNone
data ModeECB
ModeECB :: ModeECB
data ModeCFB
ModeCFB :: ModeCFB
data ModeCBC
ModeCBC :: ModeCBC
data ModeStream
ModeStream :: ModeStream
data ModeOFB
ModeOFB :: ModeOFB
data ModeCTR
ModeCTR :: ModeCTR
data CipherFlag
Secure :: CipherFlag
EnableSync :: CipherFlag
CBC_CTS :: CipherFlag
CBC_MAC :: CipherFlag
flagToC :: CipherFlag -> CUInt
instance Show CipherIDEA
instance Show Cipher3DES
instance Show CipherCast5
instance Show CipherBlowfish
instance Show CipherAES
instance Show CipherAES128
instance Show CipherAES192
instance Show CipherAES256
instance Show CipherRIJNDAEL
instance Show CipherRIJNDAEL128
instance Show CipherRIJNDAEL192
instance Show CipherRIJNDAEL256
instance Show CipherTwofish
instance Show CipherTwofish128
instance Show CipherArcfour
instance Show CipherDES
instance Show ModeNone
instance Show ModeECB
instance Show ModeCFB
instance Show ModeCBC
instance Show ModeStream
instance Show ModeOFB
instance Show ModeCTR
instance Show CipherFlag
instance Eq CipherFlag
instance CipherMode ModeCTR
instance CipherMode ModeOFB
instance CipherMode ModeStream
instance CipherMode ModeCBC
instance CipherMode ModeCFB
instance CipherMode ModeECB
instance CipherMode ModeNone
instance CipherType CipherDES
instance CipherType CipherArcfour
instance CipherType CipherTwofish128
instance CipherType CipherTwofish
instance CipherType CipherRIJNDAEL256
instance CipherType CipherRIJNDAEL192
instance CipherType CipherRIJNDAEL128
instance CipherType CipherRIJNDAEL
instance CipherType CipherAES256
instance CipherType CipherAES192
instance CipherType CipherAES128
instance CipherType CipherAES
instance CipherType CipherBlowfish
instance CipherType CipherCast5
instance CipherType Cipher3DES
instance CipherType CipherIDEA

module Codec.Encryption
class (Show ciph, Show mode, CipherType ciph, CipherMode mode, CipherDatum key, CipherDatum iv) => Cipher ciph mode key iv | ciph mode -> key iv where encrypt ct cm ck ci str = unsafePerformIO $ do { ciph <- cipherOpen ct cm []; setKey ciph ck; setIV ciph ci; cipherEncrypt ciph str } decrypt ct cm ck ci str = unsafePerformIO ((do { ciph <- cipherOpen ct cm []; setKey ciph ck; setIV ciph ci; cipherDecrypt ciph str >>= return . Just }) `catch` (\ (_ :: IOError) -> return Nothing))
encrypt :: Cipher ciph mode key iv => ciph -> mode -> key -> iv -> ByteString -> ByteString
decrypt :: Cipher ciph mode key iv => ciph -> mode -> key -> iv -> ByteString -> Maybe ByteString
data Word128
Word128 :: {-# UNPACK #-} !Word64 -> {-# UNPACK #-} !Word64 -> Word128
data Word192
Word192 :: {-# UNPACK #-} !Word64 -> {-# UNPACK #-} !Word64 -> {-# UNPACK #-} !Word64 -> Word192
pkcs5 :: ByteString -> ByteString
unpkcs5 :: ByteString -> Maybe ByteString
instance Show Word128
instance Eq Word128
instance Show Word192
instance Eq Word192
instance Cipher CipherBlowfish ModeECB Word128 ()
instance Cipher CipherCast5 ModeECB Word128 ()
instance Cipher Cipher3DES ModeCBC Word192 Word192
instance Cipher Cipher3DES ModeECB Word192 ()
instance Cipher CipherDES ModeCBC Word64 Word64
instance Cipher CipherDES ModeECB Word64 ()
instance Storable Word128
instance Storable Word192
instance CipherDatum Word192
instance CipherDatum Word128
instance CipherDatum ()
instance CipherDatum Word64
instance Num Word192
instance Num Word128

module Network.GnuTLS.Errors
errorShortMemory :: CInt

module Network.GnuTLS.OID
type OID = String
oidX520CountryName :: OID
oidX520OrganizationName :: OID
oidX520OrganizationalUnitName :: OID
oidX520CommonName :: OID
oidX520LocalityName :: OID
oidX520StateOrProvinceName :: OID
oidX520Initials :: OID
oidX520GenerationQualifier :: OID
oidX520Surname :: OID
oidX520GivenName :: OID
oidX520Title :: OID
oidPKCS9Email :: OID
oidX509v3SubjectKeyIdentifier :: OID

module Network.GnuTLS.GnuTLSMonad
data GnuTLSError
GnuTLSError :: CInt -> GnuTLSError
type GnuTLSMonad a = Either GnuTLSError a
checkError :: CInt -> GnuTLSMonad ()
getDescription :: GnuTLSError -> String
withGnuTLS :: IO a -> IO a
gnuTLSCheckBool :: CInt -> GnuTLSMonad Bool
instance Eq GnuTLSError
instance Show GnuTLSError
instance Error GnuTLSError


-- | Attributes interface
--   
--   Attributes of an object can be get and set. Getting the value of an
--   object's attribute is straingtforward. As an example consider a
--   <tt>button</tt> widget and an attribute called <tt>buttonLabel</tt>.
--   
--   <pre>
--   value &lt;- get button buttonLabel
--   </pre>
--   
--   The syntax for setting or updating an attribute is only slightly more
--   complex. At the simplest level it is just:
--   
--   <pre>
--   set button [ buttonLabel := value ]
--   </pre>
--   
--   However as the list notation would indicate, you can set or update
--   multiple attributes of the same object in one go:
--   
--   <pre>
--   set button [ buttonLabel := value, buttonFocusOnClick := False ]
--   </pre>
--   
--   You are not limited to setting the value of an attribute, you can also
--   apply an update function to an attribute's value. That is the function
--   receives the current value of the attribute and returns the new value.
--   
--   <pre>
--   set spinButton [ spinButtonValue :~ (+1) ]
--   </pre>
--   
--   There are other variants of these operators, (see <a>AttrOp</a>).
--   <a>:=&gt;</a> and <a>:~&gt;</a> and like <a>:=</a> and <a>:~</a> but
--   operate in the <a>IO</a> monad rather than being pure. There is also
--   <a>::=</a> and <a>::~</a> which take the object as an extra parameter.
--   
--   Attributes can be read only, write only or both read/write.
module Network.GnuTLS.Attributes

-- | An ordinary attribute. Most attributes have the same get and set
--   types.
type Attr o a = ReadWriteAttr o a a

-- | A read-only attribute.
type ReadAttr o a = ReadWriteAttr o a ()

-- | A write-only attribute.
type WriteAttr o b = ReadWriteAttr o () b

-- | A generalised attribute with independent get and set types.
data ReadWriteAttr o a b

-- | A set or update operation on an attribute.
data AttrOp o

-- | Assign a value to an attribute.
(:=) :: ReadWriteAttr o a b -> b -> AttrOp o

-- | Apply an update function to an attribute.
(:~) :: ReadWriteAttr o a b -> (a -> b) -> AttrOp o

-- | Assign the result of an IO action to an attribute.
(:=>) :: ReadWriteAttr o a b -> (IO b) -> AttrOp o

-- | Apply a IO update function to an attribute.
(:~>) :: ReadWriteAttr o a b -> (a -> IO b) -> AttrOp o

-- | Assign a value to an attribute with the object as an argument.
(::=) :: ReadWriteAttr o a b -> (o -> b) -> AttrOp o

-- | Apply an update function to an attribute with the object as an
--   argument.
(::~) :: ReadWriteAttr o a b -> (o -> a -> b) -> AttrOp o

-- | Get an Attr of an object.
get :: o -> ReadWriteAttr o a b -> IO a

-- | Set a number of properties for some object.
set :: o -> [AttrOp o] -> IO ()

-- | Create a new attribute with a getter and setter function.
newAttr :: (o -> IO a) -> (o -> b -> IO ()) -> ReadWriteAttr o a b

-- | Create a new read-only attribute.
readAttr :: (o -> IO a) -> ReadAttr o a

-- | Create a new write-only attribute.
writeAttr :: (o -> b -> IO ()) -> WriteAttr o b

module Network.GnuTLS.X509
data Certificate
data PrivateKey

-- | Import an encoded certificate to the native format.
importCertificate :: Datum d => d -> X509CertificateFormat -> GnuTLSMonad Certificate
importPrivateKey :: Datum d => d -> X509CertificateFormat -> GnuTLSMonad PrivateKey
exportCertificate :: Certificate -> X509CertificateFormat -> GnuTLSMonad ByteString
exportPrivateKey :: PrivateKey -> X509CertificateFormat -> GnuTLSMonad ByteString
verifySignature :: (Datum dat, Datum sign) => Certificate -> dat -> sign -> GnuTLSMonad Bool
signData :: Datum d => PrivateKey -> DigestAlgorithm -> d -> GnuTLSMonad ByteString
certificateRSAParameters :: Certificate -> GnuTLSMonad (ByteString, ByteString)
privateKeyRSAParameters :: PrivateKey -> GnuTLSMonad (ByteString, ByteString, ByteString, ByteString, ByteString, ByteString)
privateKeyGetKeyId :: PrivateKey -> GnuTLSMonad ByteString
certificateGetKeyId :: Certificate -> GnuTLSMonad ByteString
getIssuerDnByOid :: Certificate -> OID -> Int -> GnuTLSMonad (Maybe ByteString)

-- | Retrieves a field by it's Object Identifier.
getDnByOid :: Certificate -> OID -> Int -> GnuTLSMonad (Maybe ByteString)
getExtensionByOid :: Certificate -> OID -> Int -> GnuTLSMonad (Maybe (ByteString, Bool))

-- | Check whether the certicate hostname matches the given name.
checkHostname :: (Certificate) -> (String) -> (GnuTLSMonad Bool)

-- | Check if the second certificate issued the first one.
checkIssuer :: (Certificate) -> (Certificate) -> (GnuTLSMonad Bool)
instance Show Certificate
instance Show PrivateKey

module Network.GnuTLS
data CipherAlgorithm
CipherUnknown :: CipherAlgorithm
CipherNull :: CipherAlgorithm
CipherArcfour128 :: CipherAlgorithm
Cipher3desCbc :: CipherAlgorithm
CipherAes128Cbc :: CipherAlgorithm
CipherAes256Cbc :: CipherAlgorithm
CipherArcfour40 :: CipherAlgorithm
CipherCamellia128Cbc :: CipherAlgorithm
CipherCamellia256Cbc :: CipherAlgorithm
CipherRc240Cbc :: CipherAlgorithm
CipherDesCbc :: CipherAlgorithm
CipherAes192Cbc :: CipherAlgorithm
CipherIdeaPgpCfb :: CipherAlgorithm
Cipher3desPgpCfb :: CipherAlgorithm
CipherCast5PgpCfb :: CipherAlgorithm
CipherBlowfishPgpCfb :: CipherAlgorithm
CipherSaferSk128PgpCfb :: CipherAlgorithm
CipherAes128PgpCfb :: CipherAlgorithm
CipherAes192PgpCfb :: CipherAlgorithm
CipherAes256PgpCfb :: CipherAlgorithm
CipherTwofishPgpCfb :: CipherAlgorithm
data KxAlgorithm
KxUnknown :: KxAlgorithm
KxRsa :: KxAlgorithm
KxDheDss :: KxAlgorithm
KxDheRsa :: KxAlgorithm
KxAnonDh :: KxAlgorithm
KxSrp :: KxAlgorithm
KxRsaExport :: KxAlgorithm
KxSrpRsa :: KxAlgorithm
KxSrpDss :: KxAlgorithm
KxPsk :: KxAlgorithm
KxDhePsk :: KxAlgorithm
data ParamsType
ParamsRsaExport :: ParamsType
ParamsDh :: ParamsType
data CredentialsType
CrdCertificate :: CredentialsType
CrdAnon :: CredentialsType
CrdSrp :: CredentialsType
CrdPsk :: CredentialsType
CrdIa :: CredentialsType
data MacAlgorithm
MacUnknown :: MacAlgorithm
MacNull :: MacAlgorithm
MacMd5 :: MacAlgorithm
MacSha1 :: MacAlgorithm
MacRmd160 :: MacAlgorithm
MacMd2 :: MacAlgorithm
MacSha256 :: MacAlgorithm
MacSha384 :: MacAlgorithm
MacSha512 :: MacAlgorithm
MacSha224 :: MacAlgorithm
data DigestAlgorithm
DigUnknown :: DigestAlgorithm
DigNull :: DigestAlgorithm
DigMd5 :: DigestAlgorithm
DigSha1 :: DigestAlgorithm
DigRmd160 :: DigestAlgorithm
DigMd2 :: DigestAlgorithm
DigSha256 :: DigestAlgorithm
DigSha384 :: DigestAlgorithm
DigSha512 :: DigestAlgorithm
DigSha224 :: DigestAlgorithm
data CompressionMethod
CompUnknown :: CompressionMethod
CompNull :: CompressionMethod
CompDeflate :: CompressionMethod
CompZlib :: CompressionMethod
CompLzo :: CompressionMethod
data ConnectionEnd
Server :: ConnectionEnd
Client :: ConnectionEnd
data AlertLevel
AlWarning :: AlertLevel
AlFatal :: AlertLevel
data AlertDescription
ACloseNotify :: AlertDescription
AUnexpectedMessage :: AlertDescription
ABadRecordMac :: AlertDescription
ADecryptionFailed :: AlertDescription
ARecordOverflow :: AlertDescription
ADecompressionFailure :: AlertDescription
AHandshakeFailure :: AlertDescription
ASsl3NoCertificate :: AlertDescription
ABadCertificate :: AlertDescription
AUnsupportedCertificate :: AlertDescription
ACertificateRevoked :: AlertDescription
ACertificateExpired :: AlertDescription
ACertificateUnknown :: AlertDescription
AIllegalParameter :: AlertDescription
AUnknownCa :: AlertDescription
AAccessDenied :: AlertDescription
ADecodeError :: AlertDescription
ADecryptError :: AlertDescription
AExportRestriction :: AlertDescription
AProtocolVersion :: AlertDescription
AInsufficientSecurity :: AlertDescription
AInternalError :: AlertDescription
AUserCanceled :: AlertDescription
ANoRenegotiation :: AlertDescription
AUnsupportedExtension :: AlertDescription
ACertificateUnobtainable :: AlertDescription
AUnrecognizedName :: AlertDescription
AUnknownPskIdentity :: AlertDescription
AInnerApplicationFailure :: AlertDescription
AInnerApplicationVerification :: AlertDescription
data HandshakeDescription
HandshakeHelloRequest :: HandshakeDescription
HandshakeClientHello :: HandshakeDescription
HandshakeServerHello :: HandshakeDescription
HandshakeNewSessionTicket :: HandshakeDescription
HandshakeCertificatePkt :: HandshakeDescription
HandshakeServerKeyExchange :: HandshakeDescription
HandshakeCertificateRequest :: HandshakeDescription
HandshakeServerHelloDone :: HandshakeDescription
HandshakeCertificateVerify :: HandshakeDescription
HandshakeClientKeyExchange :: HandshakeDescription
HandshakeFinished :: HandshakeDescription
HandshakeSupplemental :: HandshakeDescription
data CertificateStatus
CertInvalid :: CertificateStatus
CertRevoked :: CertificateStatus
CertSignerNotFound :: CertificateStatus
CertSignerNotCa :: CertificateStatus
CertInsecureAlgorithm :: CertificateStatus
CertNotActivated :: CertificateStatus
CertExpired :: CertificateStatus
data CertificateRequest
CertIgnore :: CertificateRequest
CertRequest :: CertificateRequest
CertRequire :: CertificateRequest
data CloseRequest
ShutRdwr :: CloseRequest
ShutWr :: CloseRequest
data Protocol
Ssl3 :: Protocol
Tls10 :: Protocol
Tls1 :: Protocol
Tls11 :: Protocol
Tls12 :: Protocol
VersionMax :: Protocol
VersionUnknown :: Protocol
data CertificateType
CrtUnknown :: CertificateType
CrtX509 :: CertificateType
CrtOpenpgp :: CertificateType
data X509CertificateFormat
X509FmtDer :: X509CertificateFormat
X509FmtPem :: X509CertificateFormat
data PkAlgorithm
PkUnknown :: PkAlgorithm
PkRsa :: PkAlgorithm
PkDsa :: PkAlgorithm
PkDh :: PkAlgorithm
data SignAlgorithm
SignUnknown :: SignAlgorithm
SignRsaSha1 :: SignAlgorithm
SignRsaSha :: SignAlgorithm
SignDsaSha1 :: SignAlgorithm
SignDsaSha :: SignAlgorithm
SignRsaMd5 :: SignAlgorithm
SignRsaMd2 :: SignAlgorithm
SignRsaRmd160 :: SignAlgorithm
SignRsaSha256 :: SignAlgorithm
SignRsaSha384 :: SignAlgorithm
SignRsaSha512 :: SignAlgorithm
SignRsaSha224 :: SignAlgorithm
SignDsaSha224 :: SignAlgorithm
SignDsaSha256 :: SignAlgorithm
data Session a
data DH
data RSA
data AnonymousServerCredentials
data AnonymousClientCredentials
data Server
data Client
type Transport = Ptr () -> Int -> Ptr CInt -> IO Int
data CertificateCredentials
class Datum a
withDatum :: Datum a => a -> (Ptr () -> IO b) -> IO b

-- | Set the priority of the specified category. On servers this means the
--   set of acceptable values, on clients it sets the priorities.
class SetPriority a
setPriority :: SetPriority a => Session t -> [a] -> IO ()

-- | Set default priorities conforming with various export regulations.
--   <i>Includes weak algorithms.</i>
--   
--   Set default priorities. This is called whenever a new <a>Session</a>
--   is created to ensure sensible defaults.
setDefaultPriority :: (Session t) -> IO ()
setDefaultExportPriority :: (Session t) -> IO ()

-- | Set the credentials associated with a session.
class SetCredentials st a
setCredentials :: SetCredentials st a => Session st -> a -> IO ()

-- | Used to clear all credentials associated with a session.
data Clear
Clear :: Clear
tlsClient :: [AttrOp (Session Client)] -> IO (Session Client)
tlsServer :: [AttrOp (Session Server)] -> IO (Session Server)
priorities :: SetPriority a => WriteAttr (Session t) [a]
credentials :: SetCredentials t a => WriteAttr (Session t) a
dhPrimeBits :: ReadWriteAttr (Session t) Int Int
transport :: ReadWriteAttr (Session t) (Transport, Transport) (Transport, Transport)
handle :: WriteAttr (Session t) Handle

-- | Set whether we want to do client authentication.
clientCert :: WriteAttr (Session Server) CertificateRequest

-- | Tells the client that we want to renogotiate the handshake. If the
--   function succeeds then <a>handshake</a> can be called again on the
--   connection.
--   
--   Perform a handshake with the peer and initialize a TLS/SSL connection.
--   Note that after the handshake completes applications <i>must</i> check
--   whether a high enough level of confidentiality was established.
handshake :: (Session t) -> IO (())
rehandshake :: (Session Server) -> IO (())

-- | Terminates the current TLS connection, which has been succesfully
--   established with <a>handshake</a>. Notifies the peer with an alert
--   that the connection is closing.
bye :: (Session t) -> (CloseRequest) -> IO ((()))

-- | Set the maximum size of a handshake request. Larger requests are
--   ignored. Defaults to 16kb which should be large enough.
setMaxHandshakePacketLength :: (Session t) -> (Int) -> IO ()
serverWantedAuth :: Session Client -> IO Bool
verifyPeer :: Session t -> IO [CertificateStatus]

-- | Test whether this session is a resumed one.
isResumed :: (Session t) -> IO ((Bool))

-- | Return the currently used cipher.
--   
--   Return the value of the last alert received - undefined if no alert
--   has been received.
getAlert :: (Session t) -> IO ((AlertDescription))

-- | Return the key exchange algorithm used in the last handshake.
getCipher :: (Session t) -> IO ((CipherAlgorithm))

-- | Return the mac algorithm currently used.
getKx :: (Session t) -> IO ((KxAlgorithm))

-- | Return the compression method currently used.
getMac :: (Session t) -> IO ((MacAlgorithm))

-- | Return the currently used certificate type.
getCompression :: (Session t) -> IO ((CompressionMethod))

-- | Return the currently used protocol version.
getCertificateType :: (Session t) -> IO ((CertificateType))
getProtocol :: (Session t) -> IO ((Protocol))

-- | Return type of credentials for the current authentication schema.
getCredentialsType :: (Session t) -> IO ((CredentialsType))

-- | Return the type of credentials used for authenticating the server.
--   Available with GnuTLS 1.2.
getServerCredentialsType :: (Session t) -> IO ((CredentialsType))

-- | Return the type of credentials used for authenticating the client.
--   Available with GnuTLS 1.2.
getClientCredentialsType :: (Session t) -> IO ((CredentialsType))

-- | Get the certificate chain of the peer. In the case of X509 will return
--   DER encoded certificate list beginning with the peers key and
--   continuing in the issuer chain. With OpenPGP a single key will be
--   returned in the raw format.
getPeersCertificatesRaw :: Session t -> IO [(Ptr CChar, Int)]
tlsSend :: (Session t) -> (Ptr a) -> (Int) -> IO ((Int))
tlsSendString :: Session t -> String -> IO ()
tlsRecv :: (Session t) -> (Ptr a) -> (Int) -> IO ((Int))
tlsRecvString :: Session t -> IO String
tlsCheckPending :: (Session t) -> IO ((Int))
certificateCredentials :: IO CertificateCredentials
freeKeys :: (CertificateCredentials) -> IO ()
freeCas :: (CertificateCredentials) -> IO ()
freeCaNames :: (CertificateCredentials) -> IO ()
freeCrls :: (CertificateCredentials) -> IO ()
certificateTrustFile :: (CertificateCredentials) -> (FilePath) -> (X509CertificateFormat) -> IO ((Int))
certificateCrlFile :: (CertificateCredentials) -> (FilePath) -> (X509CertificateFormat) -> IO ((Int))
certificateKeyFile :: (CertificateCredentials) -> (FilePath) -> (FilePath) -> (X509CertificateFormat) -> IO ((Int))
anonymousServerCredentials :: IO AnonymousServerCredentials
anonymousClientCredentials :: IO AnonymousClientCredentials
class SetDHParams a
setDHParams :: SetDHParams a => a -> DH -> IO ()
class CredParameter a
generate :: CredParameter a => a -> Int -> IO ()
newDH :: IO DH
newRSA :: IO RSA

-- | Return the cipher's key size in bytes.
cipherKeySize :: (CipherAlgorithm) -> (Int)

-- | Return the name of the ciphersuite.
cipherSuiteName :: (KxAlgorithm) -> (CipherAlgorithm) -> (MacAlgorithm) -> (String)

-- | The version of <i>Gnutls</i> used.
version :: String
gnutlsGlobalInit :: IO ()
