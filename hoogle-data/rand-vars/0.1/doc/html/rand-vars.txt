-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Random variable library, with Functor, Applicative and Monad instances.
--   
--   Random variable library, with Functor, Applicative and Monad
--   instances.
@package rand-vars
@version 0.1


-- | This module provides efficient and intuitive ways to build and
--   manipulate random variables of all kinds.
--   
--   The following is an example of generating combinations for a slot
--   machine.
--   
--   <pre>
--   import Control.Monad.Random
--   import Control.Applicative
--   import Control.Monad
--   
--   data Slot = Lemon
--             | Cherry
--             | Strawberry
--             | Orange
--             | Bar
--             | Seven
--             deriving (Enum, Show)
--   
--   data Combination = Combination Slot Slot Slot deriving Show
--   
--   fairSlot = oneOf [Lemon .. Seven]
--   fairCombination = Combination &lt;$&gt; fairSlot &lt;*&gt; fairSlot &lt;*&gt; fairSlot
--   
--   biasedSlot = fromFreqs [Lemon `withFreq` 1,
--                           Cherry `withFreq` 1,
--                           Strawberry `withFreq` 1.2,
--                           Orange `withFreq` 1.1,
--                           Bar `withFreq` 0.9,
--                           Seven `withFreq` 0.8]
--   
--   biasedCombination = Combination &lt;$&gt; biasedSlot
--                                   &lt;*&gt; biasedSlot
--                                   &lt;*&gt; biasedSlot
--   
--   
--   aTripToAMachine = do
--             combination &lt;- fromFreqs [fairCombination `withFreq` 10,
--                                       biasedCombination `withFreq` 5]
--             rounds      &lt;- inRange (5, 50)
--             replicateM rounds combination
--   
--   aTripToTheCasino = do
--             trips &lt;- fmap (*3) $ inRange (1, 10)
--             fmap concat $ replicateM trips aTripToAMachine
--   
--   main = pick aTripToTheCasino &gt;&gt;= print
--   </pre>
module Control.Monad.Random

-- | Class supporting the return of a random element.
class RandPicker m
pick :: RandPicker m => Rand a -> m a
type MonadRand m = (Monad m, RandPicker m)

-- | Random variable of <tt>a</tt>.
newtype Rand a
Rand :: (forall g. RandomGen g => g -> (a, g)) -> Rand a
runRand :: Rand a -> forall g. RandomGen g => g -> (a, g)

-- | Run the random variable and returns only its value. The new generator
--   is lost.
evalRand :: RandomGen g => Rand a -> g -> a

-- | Run the random variable and returns only the new <tt>RandomGen</tt>.
execRand :: RandomGen g => Rand a -> g -> g

-- | Distribution provided by <a>random</a>.
rand :: Random a => Rand a

-- | Equiprobable distribution among the elements of the list.
oneOf :: [a] -> Rand a

-- | Distribution within a given range, provided by <a>randomR</a>.
inRange :: Random a => (a, a) -> Rand a

-- | Distribution of elements proportionately to their indicated frequency.
fromFreqs :: Real b => [(a, b)] -> Rand a

-- | Alias for <tt>(,)</tt>.
withFreq :: Real b => a -> b -> (a, b)
newtype RandT m a
RandT :: (forall g. RandomGen g => g -> m (a, g)) -> RandT m a
runRandT :: RandT m a -> forall g. RandomGen g => g -> m (a, g)

-- | Similar to <a>evalRand</a>.
evalRandT :: (RandomGen g, Monad m) => RandT m a -> g -> m a

-- | Similar to <a>execRand</a>.
execRandT :: (RandomGen g, Monad m) => RandT m a -> g -> m g
instance MonadPlus m => MonadPlus (RandT m)
instance MonadIO m => MonadIO (RandT m)
instance MonadState s m => MonadState s (RandT m)
instance MonadWriter w m => MonadWriter w (RandT m)
instance MonadReader r m => MonadReader r (RandT m)
instance MonadTrans RandT
instance Monad m => RandPicker (RandT m)
instance Monad m => Monad (RandT m)
instance Applicative m => Applicative (RandT m)
instance Functor m => Functor (RandT m)
instance RandPicker Rand
instance Applicative Rand
instance Functor Rand
instance Monad Rand
instance RandPicker IO
