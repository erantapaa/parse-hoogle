-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Creating graphics for pencil puzzles.
--   
@package puzzle-draw
@version 0.1.0.4

module Diagrams.Puzzles.Widths
gridres :: Int
gridresd :: Double
onepix :: Double
twopix :: Double
fourpix :: Double
gridwidth :: Double
framewidthfactor :: Double
edgewidth :: Double
borderwidth :: Double


-- | List of specific puzzle types.
module Data.Puzzles.PuzzleTypes

-- | The list of specific puzzle types we can handle.
data PuzzleType
LITS :: PuzzleType
LITSPlus :: PuzzleType
Geradeweg :: PuzzleType
Fillomino :: PuzzleType
Masyu :: PuzzleType
Nurikabe :: PuzzleType
LatinTapa :: PuzzleType
Sudoku :: PuzzleType
ThermoSudoku :: PuzzleType
Pyramid :: PuzzleType
RowKropkiPyramid :: PuzzleType
SlitherLink :: PuzzleType
SlitherLinkLiar :: PuzzleType
TightfitSkyscrapers :: PuzzleType
WordLoop :: PuzzleType
WordSearch :: PuzzleType
CurveData :: PuzzleType
DoubleBack :: PuzzleType
Slalom :: PuzzleType
Compass :: PuzzleType
BoxOf2Or3 :: PuzzleType
AfternoonSkyscrapers :: PuzzleType
MeanderingNumbers :: PuzzleType
Tapa :: PuzzleType
JapaneseSums :: PuzzleType
Coral :: PuzzleType
MaximalLengths :: PuzzleType
PrimePlace :: PuzzleType
Labyrinth :: PuzzleType
Bahnhof :: PuzzleType
Cave :: PuzzleType

-- | Look up a puzzle type by name.
lookupType :: String -> Maybe PuzzleType
typeNames :: [(PuzzleType, String)]
instance Show PuzzleType
instance Eq PuzzleType

module Diagrams.Puzzles.Lib
type Backend' b = (Backend b R2, Renderable (Path R2) b)

-- | Vertical/horizontal stroked line of given length.
vline :: Backend' b => Double -> Diagram b R2

-- | Vertical/horizontal stroked line of given length.
hline :: Backend' b => Double -> Diagram b R2

-- | Variant of <a>hcat'</a> that spreads with distance <tt>1</tt>.
hcatsep :: (Juxtaposable a, HasOrigin a, Monoid' a, V a ~ R2) => [a] -> a

-- | Variant of <a>vcat'</a> that spreads with distance <tt>1</tt>, and
--   stacks towards the top.
vcatsep :: (Juxtaposable a, HasOrigin a, Monoid' a, V a ~ R2) => [a] -> a

-- | Collapse the envelope to a point.
smash :: Backend' b => QDiagram b R2 Any -> QDiagram b R2 Any

-- | Helper to translate by a point given as <tt>(Int, Int)</tt>.
translatep :: (Transformable t, V t ~ R2) => (Int, Int) -> t -> t

-- | Convert pair of <tt>Int</tt> to vector.
r2i :: (Int, Int) -> R2

-- | Convert pair of <tt>Int</tt> to point.
p2i :: (Int, Int) -> P2
mirror :: (Transformable t, V t ~ R2) => t -> t

-- | Interleave two lists.
interleave :: [a] -> [a] -> [a]

-- | Spread diagrams evenly along the given vector.
spread :: Backend' b => R2 -> [Diagram b R2] -> Diagram b R2
dmid :: (Enveloped a, V a ~ R2) => a -> Double

-- | Place the second diagram to the right of the first, aligning both
--   vertically. The origin is the origin of the left diagram.
besidesL :: (Backend' b, Semigroup m, Monoid m) => QDiagram b R2 m -> QDiagram b R2 m -> QDiagram b R2 m

-- | Variant of <a>besidesL</a> where the origin is that of the right
--   diagram.
besidesR :: (Backend' b, Semigroup m, Monoid m) => QDiagram b R2 m -> QDiagram b R2 m -> QDiagram b R2 m

-- | <tt>fit f a</tt> scales <tt>a</tt> to fit into a square of size
--   <tt>f</tt>.
fit :: (Transformable t, Enveloped t, V t ~ R2) => Double -> t -> t

-- | Write text that is centered both vertically and horizontally and that
--   has an envelope. Sized such that single capital characters fit nicely
--   into a square of size <tt>1</tt>.
text' :: Backend' b => String -> Diagram b R2

-- | Variant of <a>phantom</a> that forces the argument backend type.
phantom' :: Backend' b => Diagram b R2 -> Diagram b R2

module Diagrams.Puzzles.Draw
type PuzzleSol b = (Diagram b R2, Maybe (Diagram b R2))
type RenderPuzzle b p s = (p -> Diagram b R2, (p, s) -> Diagram b R2)
data OutputChoice
DrawPuzzle :: OutputChoice
DrawSolution :: OutputChoice
DrawExample :: OutputChoice

-- | Optionally render the puzzle, its solution, or a side-by-side example
--   with puzzle and solution.
draw :: Backend' b => PuzzleSol b -> OutputChoice -> Maybe (Diagram b R2)
data Unit
Pixels :: Unit
Points :: Unit
diagramWidth :: Diagram b R2 -> Double
toOutputWidth :: Unit -> Double -> Double
instance Show OutputChoice

module Text.Puzzles.Puzzle
data TypedPuzzle
TP :: (Maybe String) -> Value -> (Maybe Value) -> TypedPuzzle

-- | A pair of parsers for a puzzle type. First parses the puzzle, second
--   the solution.
type ParsePuzzle a b = (Value -> Parser a, Value -> Parser b)
parseType :: String -> Parser PuzzleType
instance Show TypedPuzzle
instance FromJSON TypedPuzzle

module Diagrams.Puzzles.CmdLine
type B = SVG
renderToFile :: RenderOpts -> Diagram B R2 -> IO ()
data RenderOpts
RenderOpts :: FilePath -> Double -> RenderOpts
_file :: RenderOpts -> FilePath
_w :: RenderOpts -> Double
formats :: [String]
checkFormat :: String -> IO ()
checkType :: Maybe String -> IO PuzzleType
exitErr :: String -> IO a
readPuzzle :: FilePath -> IO (Either ParseException TypedPuzzle)


-- | Grid shapes.
module Data.Puzzles.GridShape

-- | The geometry of a grid.
class Show (Cell a) => GridShape a where type family GridSize a :: * type family Cell a :: * type family Vertex a :: *
size :: GridShape a => a -> GridSize a
cells :: GridShape a => a -> [Cell a]
vertices :: GridShape a => a -> [Vertex a]
vertexNeighbours :: GridShape a => a -> Cell a -> [Cell a]
edgeNeighbours :: GridShape a => a -> Cell a -> [Cell a]

-- | A standard square grid, with cells and vertices indexed by pairs of
--   integers in mathematical coordinates. The bottom-left corner is vertex
--   (0, 0), the bottom-left cell is cell (0, 0).
data Square
Square :: !Int -> !Int -> Square
squareNeighbours :: [(Int, Int)] -> Square -> Cell Square -> [Cell Square]

-- | Edge direction in a square grid, vertical or horizontal.
data Dir
V :: Dir
H :: Dir

-- | An edge in a square grid, going up or right from the given cell
--   centre.
data Edge
E :: (Cell Square) -> Dir -> Edge
type Coord = Cell Square
type Size = GridSize Square

-- | Oriented edge direction in a square grid.
data Dir'
U :: Dir'
D :: Dir'
L :: Dir'
R :: Dir'

-- | An oriented edge in a square grid. <tt>a</tt> should be <tt>Cell
--   Square</tt> or <tt>Vertex Square</tt>.
data Edge' a
E' :: a -> Dir' -> Edge' a

-- | The edge between two neighbouring cells, with the first cell on the
--   left.
orientedEdge :: Cell Square -> Cell Square -> Edge' (Vertex Square)

-- | <tt>edges</tt> computes the outer and inner edges of a set of cells.
--   The set is given via fold and membership predicate, the result is a
--   pair <tt>(outer, inner)</tt> of lists of edges, where the outer edges
--   are oriented such that the outside is to the left.
edges :: Foldable f => f (Cell Square) -> (Cell Square -> Bool) -> ([Edge' (Vertex Square)], [Edge' (Vertex Square)])
instance Show Square
instance Eq Square
instance Eq Dir
instance Ord Dir
instance Show Dir
instance Show Edge
instance Eq Edge
instance Ord Edge
instance Eq Dir'
instance Ord Dir'
instance Show Dir'
instance Eq a => Eq (Edge' a)
instance Ord a => Ord (Edge' a)
instance Show a => Show (Edge' a)
instance GridShape Square


-- | Types for a variety of puzzle elements.
module Data.Puzzles.Elements
type Clue a = Maybe a
data MasyuPearl
MWhite :: MasyuPearl
MBlack :: MasyuPearl
type MasyuClue = Clue MasyuPearl
type IntClue = Clue Int

-- | A Compass clue, specifiying optional numbers in the four cardinal
--   directions.
data CompassC
CC :: (Maybe Int) -> (Maybe Int) -> (Maybe Int) -> (Maybe Int) -> CompassC
type CompassClue = Clue CompassC

-- | A cell that is optionally bisected by a diagonal (up-right or
--   down-right).
data Tightfit a
Single :: a -> Tightfit a
UR :: a -> a -> Tightfit a
DR :: a -> a -> Tightfit a

-- | A marked word in a letter grid, by its start and end coordinates.
data MarkedWord
MW :: Coord -> Coord -> MarkedWord
mwstart :: MarkedWord -> Coord
mwend :: MarkedWord -> Coord

-- | A loop of edges.
type Loop = [Edge]

-- | A thermometer, as a list of coordinates from bulb to end. There should
--   be at least two entries, entries should be distinct, and successive
--   entries should be neighbours (diagonal neighbours are fine).
type Thermometer = [Coord]

-- | A forward or backward diagonal as occurring in the solution of a
--   slalom puzzle.
data SlalomDiag
SlalomForward :: SlalomDiag
SlalomBackward :: SlalomDiag

-- | Shadow along from the western and southern side, as used for afternoon
--   skyscrapers.
data Shade
Shade :: Bool -> Bool -> Shade
data KropkiDot
KNone :: KropkiDot
KBlack :: KropkiDot
KWhite :: KropkiDot
newtype TapaClue
TapaClue :: [Int] -> TapaClue

-- | Diagonal marking for Prime Place: forward diag?, backward diag?
newtype PrimeDiag
PrimeDiag :: (Bool, Bool) -> PrimeDiag
data Black
Black :: Black
data Crossing
Crossing :: Crossing
type BahnhofClue = Either Int Crossing
instance Eq MasyuPearl
instance Show MasyuPearl
instance Show CompassC
instance Show SlalomDiag
instance Show Shade
instance Show KropkiDot
instance Show TapaClue
instance Show a => Show (Tightfit a)


-- | Data types and parsing for pyramid puzzles.
module Data.Puzzles.Pyramid
data Row
R :: [Maybe Int] -> Bool -> Row
entries :: Row -> [Maybe Int]
shaded :: Row -> Bool
newtype Pyramid
Pyr :: [Row] -> Pyramid
unPyr :: Pyramid -> [Row]
newtype PyramidSol
PyramidSol :: [[Int]] -> PyramidSol
data KropkiRow
KR :: [Maybe Int] -> Bool -> [KropkiDot] -> KropkiRow
entriesk :: KropkiRow -> [Maybe Int]
shadedk :: KropkiRow -> Bool
dotsk :: KropkiRow -> [KropkiDot]
newtype RowKropkiPyramid
KP :: [KropkiRow] -> RowKropkiPyramid
unKP :: RowKropkiPyramid -> [KropkiRow]

-- | Merge a solution into a pyramid.
mergepyramidsol :: Pyramid -> PyramidSol -> Pyramid

-- | Merge a solution into a kropki pyramid.
mergekpyramidsol :: RowKropkiPyramid -> PyramidSol -> RowKropkiPyramid

-- | Forget the kropki dots.
plainpyramid :: RowKropkiPyramid -> Pyramid

-- | The size (number of rows) of a pyramid.
psize :: Pyramid -> Int
instance Show PyramidSol
instance Show KropkiRow
instance Show RowKropkiPyramid
instance FromJSON PyramidSol
instance FromJSON RowKropkiPyramid
instance FromJSON Pyramid
instance Show Pyramid
instance Show Row

module Diagrams.Puzzles.Pyramid
pgray :: Colour Double
cell :: Backend' b => Bool -> Diagram b R2
clue :: Backend' b => Maybe Int -> Diagram b R2
cellc :: Backend' b => Bool -> Maybe Int -> Diagram b R2
row :: Backend' b => Row -> Diagram b R2
pyramid :: Backend' b => Pyramid -> Diagram b R2
kropki :: Backend' b => KropkiDot -> Diagram b R2
krow :: Backend' b => KropkiRow -> Diagram b R2
kpyramid :: Backend' b => RowKropkiPyramid -> Diagram b R2


-- | Puzzle grids.
module Data.Puzzles.Grid

-- | A generic grid, with the given shape and contents.
data Grid s a
Grid :: s -> Map (Cell s) a -> Grid s a
shape :: Grid s a -> s
contents :: Grid s a -> Map (Cell s) a

-- | Standard square grid.
type SGrid = Grid Square
type CharGrid = SGrid Char
type AreaGrid = CharGrid
type ShadedGrid = SGrid Bool
type CharClueGrid = SGrid (Maybe Char)
type IntGrid = SGrid (Clue Int)

-- | Lookup a grid value at a given cell. Unsafe.
(!) :: (GridShape s, Ord (Cell s)) => Grid s a -> Cell s -> a
filterG :: (a -> Bool) -> Grid s a -> Grid s a

-- | Initialize a square grid from a list of lists. The grid might be
--   incomplete if some rows are shorter.
fromListList :: [[a]] -> Grid Square a
size :: GridShape s => Grid s a -> GridSize s
cells :: GridShape s => Grid s a -> [Cell s]
inBounds :: (GridShape s, Eq (Cell s)) => Grid s a -> Cell s -> Bool

-- | For a grid with value type <tt>Maybe a</tt>, return an association
--   list of cells and <tt>Just</tt> values.
clues :: GridShape s => Grid s (Maybe a) -> [(Cell s, a)]

-- | Association list of cells and values.
values :: GridShape s => Grid s a -> [(Cell s, a)]
edgesGen :: (a -> a -> Bool) -> (a -> Bool) -> Grid Square a -> [Edge]
edgesP :: (a -> a -> Bool) -> Grid Square a -> [Edge]
dualEdgesP :: (a -> a -> Bool) -> Grid Square a -> [Edge]

-- | The inner edges of a grid that separate unequal cells.
borders :: Eq a => Grid Square a -> [Edge]

-- | Clues along the outside of a square grid.
data OutsideClues a
OC :: [a] -> [a] -> [a] -> [a] -> OutsideClues a
left :: OutsideClues a -> [a]
right :: OutsideClues a -> [a]
bottom :: OutsideClues a -> [a]
top :: OutsideClues a -> [a]
outsideSize :: OutsideClues a -> (Int, Int)
data OutsideClue a
OClue :: (Int, Int) -> (Int, Int) -> a -> OutsideClue a
ocBase :: OutsideClue a -> (Int, Int)
ocDir :: OutsideClue a -> (Int, Int)
ocValue :: OutsideClue a -> a
outsideClueList :: OutsideClues a -> [OutsideClue a]

-- | Convert outside clues to association list mapping coordinate to value.
outsideClues :: OutsideClues (Maybe a) -> [((Int, Int), a)]
multiOutsideClues :: OutsideClues [a] -> [((Int, Int), a)]
instance (Eq s, Eq (Cell s), Eq a) => Eq (Grid s a)
instance (Show a, Show s, GridShape s) => Show (Grid s a)
instance Show a => Show (OutsideClues a)
instance Eq a => Eq (OutsideClues a)
instance Functor OutsideClue
instance Functor OutsideClues
instance Traversable (Grid s)
instance Foldable (Grid s)
instance Functor (Grid s)

module Data.Puzzles.Sudoku

-- | Determine the internal borders of a standard sudoku of the given size.
sudokuborders :: Int -> [Edge]

-- | Determine the internal borders of a standard sudoku of the on the
--   given grid.
sudokubordersg :: SGrid a -> [Edge]

module Text.Puzzles.Util
type Path = [String]
field :: Path -> Value -> Parser Value
parseFrom :: Path -> (Value -> Parser b) -> (Value -> Parser b)
class FromChar a
parseChar :: FromChar a => Char -> Parser a
failChar :: Char -> String -> Parser a
class FromString a
parseString :: FromString a => String -> Parser a
parseLine :: FromChar a => String -> Parser [a]
newtype Alpha
Alpha :: Char -> Alpha
unAlpha :: Alpha -> Char

-- | Helper to parse strings from number-formatted YAML fields. Somewhat
--   dodgy.
newtype IntString
IntString :: String -> IntString
unIntString :: IntString -> String

-- | A rectangle. Each row has length <tt>w</tt>.
data Rect a
Rect :: !Int -> !Int -> [[a]] -> Rect a
data Border a
Border :: [a] -> [a] -> [a] -> [a] -> Border a

-- | This instance might be a lie.
data BorderedRect a b
BorderedRect :: !Int -> !Int -> [[a]] -> (Border b) -> BorderedRect a b
newtype SpacedRect a
SpacedRect :: Rect a -> SpacedRect a
unSpaced :: SpacedRect a -> Rect a
data Space
Space :: Space
data Blank
Blank :: Blank
data Blank'
Blank' :: Blank'
data Empty
Empty :: Empty
parseCharJSON :: FromChar a => Value -> Parser a
data PlainNode
PlainNode :: PlainNode
newtype Either' a b
Either' :: Either a b -> Either' a b
unEither' :: Either' a b -> Either a b
listListToMap :: [[a]] -> Map (Cell Square) a
rectToSGrid :: Rect a -> SGrid a
blankToMaybe :: Either Blank a -> Maybe a
blankToMaybe' :: Either Blank' a -> Maybe a
rectToClueGrid :: Rect (Either Blank a) -> SGrid (Clue a)
rectToClueGrid' :: Rect (Either Blank' a) -> SGrid (Clue a)
rectToIrregGrid :: Rect (Either Empty a) -> SGrid a
newtype Shaded
Shaded :: Bool -> Shaded
unShaded :: Shaded -> Bool
parseShadedGrid :: Value -> Parser (SGrid Bool)
parseGrid :: FromChar a => Value -> Parser (SGrid a)
parseGridWith :: (Char -> Parser a) -> Value -> Parser (SGrid a)
parseWithReplacement :: FromChar a => (Char -> Maybe a) -> Char -> Parser a
parseCharMap :: FromJSON a => Value -> Parser (Map Char a)
parseExtGrid :: (FromChar a, FromJSON a) => Value -> Parser (SGrid a)
parseClueGrid :: FromChar a => Value -> Parser (SGrid (Clue a))
parseClueGrid' :: FromChar a => Value -> Parser (SGrid (Clue a))
parseIrregGrid :: FromChar a => Value -> Parser (SGrid a)
parseSpacedClueGrid :: FromString a => Value -> Parser (SGrid (Clue a))
parsePlainEdges :: Value -> Parser [Edge]
readEdges :: SGrid Char -> [Edge]
parseGridChars :: FromChar a => SGrid Char -> Parser (SGrid a)

-- | Parse a grid with edges and values at nodes and in cells.
--   
--   E.g. o-*-*-o |1|2 3 *-o to a grid of masyu pearls, a grid of integers,
--   and some edges.
parseEdgeGrid :: (FromChar a, FromChar b) => Value -> Parser (SGrid a, SGrid b, [Edge])

-- | Parse a grid of edges with values at the nodes.
--   
--   E.g. o-*-*-o | | *-o to a grid of masyu pearls and some edges.
parseNodeEdges :: FromChar a => Value -> Parser (SGrid a, [Edge])
parseCellEdges :: FromChar a => Value -> Parser (SGrid a, [Edge])
data HalfDirs
HalfDirs :: [Dir] -> HalfDirs
unHalfDirs :: HalfDirs -> [Dir]
parseEdges :: Value -> Parser [Edge]
type ThermoRect = Rect (Either Blank (Either Int Alpha))
partitionEithers :: Ord k => Map k (Either a b) -> (Map k a, Map k b)
parseThermos :: SGrid Alpha -> Parser [Thermometer]
parseThermoGrid :: ThermoRect -> Parser (SGrid Int, [Thermometer])
newtype Tight
Tight :: Tightfit () -> Tight
unTight :: Tight -> Tightfit ()
parseTightOutside :: Value -> Parser (OutsideClues (Maybe Int), SGrid (Tightfit ()))
parseTightIntGrid :: Value -> Parser (SGrid (Tightfit Int))
newtype PMarkedWord
PMW :: MarkedWord -> PMarkedWord
unPMW :: PMarkedWord -> MarkedWord
parseNWords :: Int -> String -> Parser [String]
newtype PCompassC
PCC :: CompassC -> PCompassC
unPCC :: PCompassC -> CompassC
newtype RefGrid a
RefGrid :: SGrid a -> RefGrid a
unRG :: RefGrid a -> SGrid a
data Ref
Ref :: Char -> Ref
unRef :: Ref -> Char
hashmaptomap :: (Eq a, Hashable a, Ord a) => HashMap a b -> Map a b
compose :: (Ord a, Ord b) => Map a b -> Map b c -> Maybe (Map a c)
parseAfternoonGrid :: Value -> Parser (SGrid Shade)
newtype ParseTapaClue
ParseTapaClue :: TapaClue -> ParseTapaClue
unParseTapaClue :: ParseTapaClue -> TapaClue
reorientOutside :: OutsideClues a -> OutsideClues a
parseCharOutside :: FromChar a => Value -> Parser (OutsideClues a)
parseOutside :: FromJSON a => Value -> Parser (OutsideClues a)
parseMultiOutsideClues :: FromJSON a => Value -> Parser (OutsideClues [a])
instance Show Alpha
instance Ord Alpha
instance Eq Alpha
instance Show a => Show (Rect a)
instance Show a => Show (Border a)
instance (Show a, Show b) => Show (BorderedRect a b)
instance Show Ref
instance FromChar Crossing
instance FromChar PrimeDiag
instance FromJSON ParseTapaClue
instance FromJSON a => FromJSON (RefGrid a)
instance FromChar Ref
instance FromJSON PCompassC
instance FromString Int
instance FromJSON PMarkedWord
instance FromChar a => FromString (Tightfit a)
instance FromChar Tight
instance FromChar HalfDirs
instance FromChar Shaded
instance FromChar a => FromChar (Maybe a)
instance (FromJSON a, FromJSON b) => FromJSON (Either' a b)
instance (FromChar a, FromChar b) => FromChar (Either' a b)
instance (FromString a, FromString b) => FromString (Either a b)
instance (FromChar a, FromChar b) => FromChar (Either a b)
instance FromChar Black
instance FromChar SlalomDiag
instance FromChar MasyuPearl
instance FromChar PlainNode
instance FromString Blank
instance FromChar Empty
instance FromJSON Blank'
instance FromChar Blank'
instance FromJSON Blank
instance FromChar Blank
instance FromChar Space
instance FromString a => FromJSON (SpacedRect a)
instance (FromChar a, FromChar b) => FromJSON (BorderedRect a b)
instance Functor Border
instance Traversable Border
instance Foldable Border
instance FromChar a => FromJSON (Rect a)
instance Functor Rect
instance FromJSON IntString
instance FromChar Alpha
instance FromChar Int
instance FromChar Char

module Text.Puzzles.PuzzleTypes
lits :: ParsePuzzle AreaGrid ShadedGrid
litsplus :: ParsePuzzle AreaGrid ShadedGrid
geradeweg :: ParsePuzzle (SGrid (Clue Int)) Loop
fillomino :: ParsePuzzle IntGrid (SGrid Int)
masyu :: ParsePuzzle (SGrid (Clue MasyuPearl)) Loop
nurikabe :: ParsePuzzle IntGrid ShadedGrid
latintapa :: ParsePuzzle (SGrid (Clue [String])) (SGrid (Maybe Char))
sudoku :: ParsePuzzle IntGrid IntGrid
thermosudoku :: ParsePuzzle (SGrid Int, [Thermometer]) IntGrid
pyramid :: ParsePuzzle Pyramid PyramidSol
kpyramid :: ParsePuzzle RowKropkiPyramid PyramidSol
slither :: ParsePuzzle (SGrid (Clue Int)) Loop
liarslither :: ParsePuzzle (SGrid (Clue Int)) (Loop, SGrid Bool)
tightfitskyscrapers :: ParsePuzzle (OutsideClues (Maybe Int), SGrid (Tightfit ())) (SGrid (Tightfit Int))
wordloop :: ParsePuzzle (CharClueGrid, [String]) CharClueGrid
wordsearch :: ParsePuzzle (CharClueGrid, [String]) (CharClueGrid, [MarkedWord])
curvedata :: ParsePuzzle (SGrid (Clue [Edge])) [Edge]
doubleback :: ParsePuzzle AreaGrid Loop
slalom :: ParsePuzzle (SGrid (Clue Int)) (SGrid SlalomDiag)
compass :: ParsePuzzle (SGrid (Clue CompassC)) CharGrid
boxof2or3 :: ParsePuzzle (SGrid MasyuPearl, [Edge]) ()
afternoonskyscrapers :: ParsePuzzle (SGrid Shade) IntGrid
meanderingnumbers :: ParsePuzzle AreaGrid IntGrid
tapa :: ParsePuzzle (SGrid TapaClue) ShadedGrid
japanesesums :: ParsePuzzle (OutsideClues [Int]) (SGrid (Either Black Int))
coral :: ParsePuzzle (OutsideClues [String]) ShadedGrid
maximallengths :: ParsePuzzle (OutsideClues (Maybe Int)) Loop
primeplace :: ParsePuzzle (SGrid PrimeDiag) (SGrid Int)
labyrinth :: ParsePuzzle (SGrid (Clue Int), [Edge]) (SGrid (Clue Int))
bahnhof :: ParsePuzzle (SGrid (Maybe BahnhofClue)) [Edge]
cave :: ParsePuzzle (SGrid (Clue Int)) ShadedGrid
instance FromJSON Curve
instance FromJSON GridMarked
instance FromJSON GridWords
instance FromJSON LSol

module Diagrams.Puzzles.Grid

-- | Draw a small black dot with no envelope.
dot :: Backend' b => Diagram b R2

-- | Draw a Slither Link style grid of dots of the specified size.
slithergrid :: Backend' b => Size -> Diagram b R2
fence :: [Double] -> Double -> Path R2

-- | The inner grid lines of a square grid of the specified size.
gridlines :: Size -> Path R2
fullgridlines :: Size -> Path R2

-- | Draw a frame around the outside of a rectangle.
outframe' :: Backend' b => Double -> Size -> Diagram b R2
outframe :: Backend' b => Size -> Diagram b R2

-- | Draw a square grid, applying the given style to the grid lines.
grid' :: Backend' b => (Diagram b R2 -> Diagram b R2) -> Size -> Diagram b R2

-- | Draw a square grid with default grid line style.
grid :: Backend' b => Size -> Diagram b R2

-- | Draw a square grid with thin frame.
plaingrid :: Backend' b => Size -> Diagram b R2
bgdashingG :: (Semigroup a, HasStyle a, V a ~ R2) => [Double] -> Double -> Colour Double -> a -> a
dashes :: [Double]
dashoffset :: Double
gridDashing :: (Semigroup a, HasStyle a, V a ~ R2) => a -> a

-- | Draw a square grid with dashed grid lines. The gaps between dashes are
--   off-white to aid in using filling tools.
dashedgrid :: Backend' b => Size -> Diagram b R2
edgePath :: Edge' (Vertex Square) -> Path R2
irregularGridPaths :: SGrid a -> (Path R2, Path R2)
irregularGrid :: Backend' b => SGrid a -> Diagram b R2

-- | In a square grid, use the first argument to draw things at the centres
--   of cells given by coordinates.
atCentres :: (Transformable a, Monoid a, V a ~ R2) => (t -> a) -> [(Coord, t)] -> a
atCentres' :: (Transformable a, V a ~ R2) => SGrid a -> [a]

-- | In a square grid, use the first argument to draw things at the grid
--   vertices given by coordinates.
atVertices :: (Transformable a, Monoid a, V a ~ R2) => (t -> a) -> [(Coord, t)] -> a
atVertices' :: (Transformable a, V a ~ R2) => SGrid a -> [a]
edge :: Edge -> Path R2
dualEdge :: Edge -> Path R2
edgeStyle :: (HasStyle a, V a ~ R2) => a -> a
thinEdgeStyle :: (HasStyle a, V a ~ R2) => a -> a
drawEdges :: Backend' b => [Edge] -> Diagram b R2
drawDualEdges :: Backend' b => [Edge] -> Diagram b R2
drawThinDualEdges :: Backend' b => [Edge] -> Diagram b R2
drawAreaGrid :: (Backend' b, Eq a) => SGrid a -> Diagram b R2
fillBG :: Backend' b => Colour Double -> Diagram b R2
shadeGrid :: Backend' b => SGrid (Maybe (Colour Double)) -> Diagram b R2
drawShadedGrid :: Backend' b => SGrid Bool -> Diagram b R2
drawAreaGridGray :: Backend' b => SGrid Char -> Diagram b R2
irregAreaGridX :: Backend' b => SGrid Char -> Diagram b R2
distrib :: (Transformable c, Monoid c, V c ~ R2) => R2 -> (Int, Int) -> Double -> [c] -> c
outsideGen :: (Transformable c, Monoid c, V c ~ R2) => (OutsideClue [c] -> R2) -> Double -> [OutsideClue [c]] -> c
outsideCells :: (Transformable c, Monoid c, V c ~ R2) => Double -> [OutsideClue [c]] -> c
outsideVertices :: (Transformable c, Monoid c, V c ~ R2) => Double -> [OutsideClue [c]] -> c


-- | Tools to draw individual puzzle components. In particular contents and
--   decorations for individual cells.
module Diagrams.Puzzles.Elements
pearl :: Backend' b => MasyuPearl -> Diagram b R2
smallPearl :: Backend' b => MasyuPearl -> Diagram b R2

-- | The up-right diagonal of a centered unit square.
ur :: Path R2

-- | The down-right diagonal of a centered unit square.
dr :: Path R2

-- | Both diagonals of a centered unit square.
cross :: Path R2

-- | Draw a cross.
drawCross :: Backend' b => Diagram b R2

-- | Draw a Compass clue.
drawCompassClue :: Backend' b => CompassC -> Diagram b R2

-- | Draw a thermometer, given by a list of bottom-left corners of square
--   cells.
thermo :: Backend' b => [P2] -> QDiagram b R2 Any

-- | Draw a list of thermometers, given as lists of <tt>(Int, Int)</tt>
--   cell coordinates.
drawThermos :: Backend' b => [Thermometer] -> QDiagram b R2 Any

-- | <tt>drawTight d t</tt> draws the tight-fit value <tt>t</tt>, using
--   <tt>d</tt> to draw the components.
drawTight :: Backend' b => (a -> Diagram b R2) -> Tightfit a -> Diagram b R2

-- | Stack the given words, left-justified.
stackWords :: Backend' b => [String] -> QDiagram b R2 Any

-- | Mark a word in a grid of letters.
drawMarkedWord :: Backend' b => MarkedWord -> QDiagram b R2 Any

-- | Apply <a>drawMarkedWord</a> to a list of words.
drawMarkedWords :: Backend' b => [MarkedWord] -> QDiagram b R2 Any

-- | Draw a slalom clue.
drawSlalomClue :: (Show a, Backend' b) => a -> Diagram b R2

-- | Draw text. Shouldn't be more than two characters or so to fit a cell.
drawText :: Backend' b => String -> QDiagram b R2 Any

-- | Draw an <tt>Int</tt>.
drawInt :: Backend' b => Int -> Diagram b R2

-- | Draw a character.
drawChar :: Backend' b => Char -> Diagram b R2

-- | Stack a list of words into a unit square. Scaled such that at least
--   three words will fit.
drawWords :: Backend' b => [String] -> Diagram b R2

-- | Fit a line drawing into a unit square. For example, a Curve Data clue.
drawCurve :: Backend' b => [Edge] -> Diagram b R2

-- | Draw a shadow in the style of Afternoon Skyscrapers.
drawShade :: Backend' b => Shade -> Diagram b R2

-- | Draws the digits of a tapa clue, ordered left to right, top to bottom.
drawTapaClue :: Backend' b => TapaClue -> Diagram b R2
drawPrimeDiag :: Backend' b => PrimeDiag -> Diagram b R2
drawCrossing :: Backend' b => Crossing -> Diagram b R2
drawBahnhofClue :: Backend' b => BahnhofClue -> Diagram b R2

module Diagrams.Puzzles.PuzzleGrids
drawClueGrid :: Backend' b => SGrid (Clue Char) -> Diagram b R2
drawIntClues :: Backend' b => SGrid (Clue Int) -> Diagram b R2
drawInts :: Backend' b => SGrid Int -> Diagram b R2
drawIntGrid :: Backend' b => SGrid (Clue Int) -> Diagram b R2
drawSlitherGrid :: Backend' b => SGrid (Clue Int) -> Diagram b R2
drawMasyuGrid :: Backend' b => SGrid MasyuClue -> Diagram b R2
drawCompassClues :: Backend' b => SGrid CompassClue -> Diagram b R2
drawCompassGrid :: Backend' b => SGrid CompassClue -> Diagram b R2
sudokugrid :: Backend' b => SGrid a -> Diagram b R2
drawWordsClues :: Backend' b => SGrid (Clue [String]) -> Diagram b R2
drawTightGrid :: Backend' b => (t -> Diagram b R2) -> SGrid (Tightfit t) -> Diagram b R2
drawSlalomGrid :: Backend' b => SGrid (Clue Int) -> Diagram b R2
drawSlalomDiags :: Backend' b => SGrid SlalomDiag -> Diagram b R2
drawCrosses :: Backend' b => SGrid Bool -> Diagram b R2
outsideGrid :: Backend' b => OutsideClues [String] -> Diagram b R2
outsideIntGrid :: Backend' b => OutsideClues [Int] -> Diagram b R2

module Diagrams.Puzzles.PuzzleTypes
lits :: Backend' b => RenderPuzzle b AreaGrid ShadedGrid
litsplus :: Backend' b => RenderPuzzle b AreaGrid ShadedGrid
geradeweg :: Backend' b => RenderPuzzle b IntGrid Loop
fillomino :: Backend' b => RenderPuzzle b IntGrid (SGrid Int)
masyu :: Backend' b => RenderPuzzle b (SGrid (Clue MasyuPearl)) Loop
nurikabe :: Backend' b => RenderPuzzle b IntGrid ShadedGrid
latintapa :: Backend' b => RenderPuzzle b (SGrid (Clue [String])) CharClueGrid
sudoku :: Backend' b => RenderPuzzle b IntGrid IntGrid
thermosudoku :: Backend' b => RenderPuzzle b (SGrid Int, [Thermometer]) IntGrid
pyramid :: Backend' b => RenderPuzzle b Pyramid PyramidSol
kpyramid :: Backend' b => RenderPuzzle b RowKropkiPyramid PyramidSol
slither :: Backend' b => RenderPuzzle b IntGrid Loop
liarslither :: Backend' b => RenderPuzzle b IntGrid (Loop, SGrid Bool)
tightfitskyscrapers :: Backend' b => RenderPuzzle b (OutsideClues (Maybe Int), SGrid (Tightfit ())) (SGrid (Tightfit Int))
wordloop :: Backend' b => RenderPuzzle b (CharClueGrid, [String]) CharClueGrid
wordsearch :: Backend' b => RenderPuzzle b (CharClueGrid, [String]) (CharClueGrid, [MarkedWord])
curvedata :: Backend' b => RenderPuzzle b (SGrid (Clue [Edge])) [Edge]
doubleback :: Backend' b => RenderPuzzle b AreaGrid Loop
slalom :: Backend' b => RenderPuzzle b IntGrid (SGrid SlalomDiag)
compass :: Backend' b => RenderPuzzle b (SGrid (Clue CompassC)) AreaGrid
boxof2or3 :: Backend' b => RenderPuzzle b (SGrid MasyuPearl, [Edge]) ()
afternoonskyscrapers :: Backend' b => RenderPuzzle b (SGrid Shade) IntGrid
meanderingnumbers :: Backend' b => RenderPuzzle b AreaGrid IntGrid
tapa :: Backend' b => RenderPuzzle b (SGrid TapaClue) ShadedGrid
japanesesums :: Backend' b => RenderPuzzle b (OutsideClues [Int]) (SGrid (Either Black Int))
coral :: Backend' b => RenderPuzzle b (OutsideClues [String]) ShadedGrid
maximallengths :: Backend' b => RenderPuzzle b (OutsideClues (Maybe Int)) Loop
primeplace :: Backend' b => RenderPuzzle b (SGrid PrimeDiag) (SGrid Int)
labyrinth :: Backend' b => RenderPuzzle b (SGrid (Clue Int), [Edge]) (SGrid (Clue Int))
bahnhof :: Backend' b => RenderPuzzle b (SGrid (Maybe BahnhofClue)) [Edge]
cave :: (Backend b R2, Renderable (Path R2) b) => RenderPuzzle b (SGrid (Clue Int)) ShadedGrid


-- | Helpers to string together parser and renderer by puzzle type.
module Data.Puzzles.Compose

-- | A function to compose an arbitrary matching pair of parser and
--   renderer. In <tt>PuzzleHandler b a</tt>, <tt>b</tt> is the rendering
--   backend type, while <tt>a</tt> is the result type of the composition.
type PuzzleHandler b a = forall p q. ParsePuzzle p q -> RenderPuzzle b p q -> a

-- | <tt>handle h t</tt> composes the parser and renderer for the puzzle
--   type <tt>t</tt> with the handler <tt>h</tt>.
handle :: Backend' b => PuzzleHandler b a -> PuzzleType -> a

-- | Handler that parses a puzzle from a YAML value, and renders.
drawPuzzle :: PuzzleHandler b (Value -> Parser (Diagram b R2))

-- | Handler that parses puzzle and solution from a pair of corresponding
--   YAML values, and renders both individually.
drawPuzzleSol :: PuzzleHandler b ((Value, Value) -> Parser (Diagram b R2, Diagram b R2))

-- | Handler that parses puzzle and an optional solution from a pair of
--   corresponding YAML values, and renders both individually, optionally
--   for the solution.
drawPuzzleMaybeSol :: PuzzleHandler b ((Value, Maybe Value) -> Parser (Diagram b R2, Maybe (Diagram b R2)))

-- | Variant of <a>drawPuzzle</a> that accepts a pair of puzzle YAML value
--   and optional solution YAML value.
drawPuzzle' :: PuzzleHandler b ((Value, Maybe Value) -> Parser (Diagram b R2))

-- | Handler that accepts a pair of puzzle YAML value and optional solution
--   YAML value, and renders the solution, failing if the solution is not
--   provided.
drawSolution' :: PuzzleHandler b ((Value, Maybe Value) -> Parser (Diagram b R2))

-- | Like <a>drawSolution'</a>, but renders puzzle and solution in example
--   layout.
drawExample' :: Backend' b => PuzzleHandler b ((Value, Maybe Value) -> Parser (Diagram b R2))
