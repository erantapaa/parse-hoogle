-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell wrapper for the Google Chart API
--   
--   This module is a wrapper around the Google Chart API. It exposes a
--   rich set of Haskell data types to specify your chart data, which can
--   then be converted into a URL that generates the PNG image of the
--   chart.
@package hs-gchart
@version 0.4.1


-- | This module contains the Haskell data model for the Google Chart API.
--   
--   More details about the API and parameters can be found at :
--   <a>http://code.google.com/apis/chart/image_charts.html</a>
--   
--   Some chart types are not supported yet:
--   
--   <ul>
--   <li>Box Charts
--   <a>http://code.google.com/apis/chart/docs/gallery/compound_charts.html#box_charts</a></li>
--   <li>Candlestick Charts
--   <a>http://code.google.com/apis/chart/docs/gallery/compound_charts.html#candlestick_charts</a></li>
--   <li>Compound Charts
--   <a>http://code.google.com/apis/chart/docs/gallery/compound_charts.html</a></li>
--   <li>Dynamic Icons
--   <a>http://code.google.com/apis/chart/docs/gallery/dynamic_icons.html</a></li>
--   <li>Map Charts
--   <a>http://code.google.com/apis/chart/docs/gallery/map_charts.html</a></li>
--   </ul>
--   
--   Some parameters are not supported yet:
--   
--   <ul>
--   <li>Text and Data Value Markers
--   <a>http://code.google.com/apis/chart/docs/chart_params.html#gcharts_data_point_labels</a></li>
--   <li>Shape offset feature for shape markers
--   <a>http://code.google.com/apis/chart/docs/chart_params.html#gcharts_shape_markers</a></li>
--   <li>Bug in <a>BarChartWidthSpacing</a>. Not fully accurate</li>
--   <li>Modfy FillType to conform to new API
--   <a>http://code.google.com/apis/chart/docs/chart_params.html#gcharts_gradient_fills</a></li>
--   <li>Dynamic icon type
--   <a>http://code.google.com/apis/chart/docs/gallery/dynamic_icons.html</a></li>
--   <li>Geographic area
--   <a>http://code.google.com/apis/chart/docs/gallery/map_charts.html</a></li>
--   <li>Vertical slice filling
--   <a>http://code.google.com/apis/chart/docs/chart_params.html#gcharts_line_fills</a></li>
--   <li>Bar chart zero line
--   <a>http://code.google.com/apis/chart/docs/gallery/bar_charts.html#chp</a></li>
--   </ul>
module Graphics.GChart.Types

-- | Chart monad which wraps a <a>State</a> monad in turn to keep track of
--   the chart state and make it convenient to update it
type ChartM a = State Chart a

-- | Typeclass abstracting all the fields in a chart
class ChartItem c
set :: ChartItem c => c -> ChartM ()
encode :: ChartItem c => c -> [(String, String)]

-- | Typeclass abstracting the numeric data that can be encoded. This helps
--   in passing Int and Float values as chart data, which are then encoded
--   correctly
class Num a => ChartDataEncodable a
addEncodedChartData :: ChartDataEncodable a => [a] -> ChartData -> ChartData

-- | Data type for the chart
data Chart
Chart :: Maybe ChartSize -> ChartType -> Maybe ChartData -> Maybe ChartDataScales -> Maybe ChartTitle -> Maybe ChartColors -> Maybe ChartFills -> Maybe ChartLegend -> Maybe ChartAxes -> Maybe ChartMarkers -> Maybe ChartGrid -> Maybe ChartLabels -> Maybe ChartMargins -> Maybe BarChartWidthSpacing -> Maybe PieChartOrientation -> Maybe ChartLineStyles -> Maybe QREncoding -> Maybe ChartLabelData -> Chart
chartSize :: Chart -> Maybe ChartSize
chartType :: Chart -> ChartType
chartData :: Chart -> Maybe ChartData
chartDataScales :: Chart -> Maybe ChartDataScales
chartTitle :: Chart -> Maybe ChartTitle
chartColors :: Chart -> Maybe ChartColors
chartFills :: Chart -> Maybe ChartFills
chartLegend :: Chart -> Maybe ChartLegend
chartAxes :: Chart -> Maybe ChartAxes
chartMarkers :: Chart -> Maybe ChartMarkers
chartGrid :: Chart -> Maybe ChartGrid
chartLabels :: Chart -> Maybe ChartLabels
chartMargins :: Chart -> Maybe ChartMargins
barChartWidthSpacing :: Chart -> Maybe BarChartWidthSpacing
pieChartOrientation :: Chart -> Maybe PieChartOrientation
chartLineStyles :: Chart -> Maybe ChartLineStyles
qrEncoding :: Chart -> Maybe QREncoding
chartLabelData :: Chart -> Maybe ChartLabelData

-- | Bar Width and Spacing.
type BarChartWidthSpacing = (Maybe BarWidth, Maybe BarGroupSpacing)

-- | Bar Width
data BarWidth

-- | Automatic resizing
Automatic :: BarWidth

-- | Bar width in pixels
BarWidth :: Int -> BarWidth

-- | Bar and Group Spacing
data BarGroupSpacing

-- | Fixed spacing values in pixels
Fixed :: (Int, Int) -> BarGroupSpacing

-- | Relative values as percentages
Relative :: (Float, Float) -> BarGroupSpacing

-- | Chart colors specified as a list of <a>Color</a> values for each data
--   point.
data ChartColors
ChartColors :: [Color] -> ChartColors

-- | Color data specified as a hex string
type Color = String

-- | Chart data along with encoding. XY data for is encoded a pair of
--   consecutive data sets
data ChartData

-- | lets you specify integer values from 0-61, inclusive
Simple :: [[Int]] -> ChartData

-- | supports floating point numbers from 0-100, inclusive
Text :: [[Float]] -> ChartData

-- | lets you specify integer values from 0-4095, inclusive
Extended :: [[Int]] -> ChartData

-- | List of Data scaling values
data ChartDataScales
CDS :: [DataScale] -> ChartDataScales

-- | Data scaling expressed as (<tt>series_min</tt>,<tt>series_max</tt>).
--   Applies to text encoding only
type DataScale = (Float, Float)

-- | Chart legend
data ChartLegend
Legend :: [String] -> (Maybe LegendPosition) -> ChartLegend

-- | Position of legend on chart. Applies to <a>ChartLegend</a>
data LegendPosition

-- | Bottom of chart, horizontally
LegendBottom :: LegendPosition

-- | Top of chart, horizontally
LegendTop :: LegendPosition

-- | Bottom of chart, vertically
LegendVBottom :: LegendPosition

-- | Bottom of chart, vertically
LegendVTop :: LegendPosition

-- | Left of chart
LegendRight :: LegendPosition

-- | Right of chart
LegendLeft :: LegendPosition

-- | Chart fills, as a list of <a>Fill</a>s
type ChartFills = [Fill]

-- | Constructor for a chart fill
data Fill
Fill :: FillKind -> FillType -> Fill

-- | Specifies the kind of fill
data FillKind

-- | Solid Fill
Solid :: Color -> FillKind

-- | Linear Gradient
LinearGradient :: Angle -> [(Color, Offset)] -> FillKind

-- | Linear Stripes
LinearStripes :: Angle -> [(Color, Width)] -> FillKind

-- | Specifies the type of fill
data FillType

-- | Background fill
Background :: FillType

-- | Chart area fill
Area :: FillType

-- | Apply transparency to whole chart (applicable to <a>Solid</a> fill
--   only)
Transparent :: FillType

-- | Specifies at what point the color is pure. In this parameter, 0
--   specifies the right-most chart position and 1 specifies the left-most
--   chart position. Applicable to <a>LinearGradient</a>
type Offset = Float

-- | Width of the stripe. must be between 0 and 1, where 1 is the full
--   width of the chart
type Width = Float

-- | Angle of the gradient between 0 (horizontal) and 90 (vertical).
--   Applicable to <a>LinearGradient</a> and <a>LinearStripes</a>
type Angle = Float

-- | Grid Lines for Chart
data ChartGrid
ChartGrid :: Float -> Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> ChartGrid

-- | x-axis step size (0-100)
xAxisStep :: ChartGrid -> Float

-- | y-axis step size (0-100)
yAxisStep :: ChartGrid -> Float

-- | length of line segment
lineSegmentLength :: ChartGrid -> Maybe Float

-- | length of blank segment
blankSegmentLength :: ChartGrid -> Maybe Float

-- | x axis offset
xOffset :: ChartGrid -> Maybe Float

-- | y axis offset
yOffset :: ChartGrid -> Maybe Float

-- | Labels for Pie Chart and Google-o-meter. Specify a list with a single
--   label for Google-o-meter
data ChartLabels
ChartLabels :: [String] -> ChartLabels

-- | Chart Label Data. Applies to <a>QRCode</a>
data ChartLabelData

-- | Error Correction Level and Margin (as no. of rows)
QRLabelData :: ErrorCorrectionLevel -> Int -> ChartLabelData

-- | Error Correction Level for QR Code
data ErrorCorrectionLevel

-- | recovery of up to 7% data loss
L' :: ErrorCorrectionLevel

-- | recovery of up to 15% data loss
M' :: ErrorCorrectionLevel

-- | recovery of up to 25% data loss
Q' :: ErrorCorrectionLevel

-- | recovery of up to 30% data loss
H' :: ErrorCorrectionLevel
type ChartLineStyles = [LineStyle]

-- | Line Style. Applicable for line charts
data LineStyle
LS :: Float -> Float -> Float -> LineStyle

-- | Thickness
lineStyleThickness :: LineStyle -> Float

-- | Length of Line Segment
lineStyleLineSegment :: LineStyle -> Float

-- | Length of Blank Segment
lineStyleBlankSegment :: LineStyle -> Float

-- | Data type to abstract over all kinds of ChartMarker
data AnyChartMarker
AnyChartMarker :: w -> AnyChartMarker

-- | Typeclass to abstract over different chart markers
class Show a => ChartMarker a where encodeChartMarker a = ""
encodeChartMarker :: ChartMarker a => a -> String
type ChartMarkers = [AnyChartMarker]

-- | Which points in a series to use to draw the line.
data LineWhichPoints

-- | Use all the points in the series.
PointsAll :: LineWhichPoints

-- | (start,end) indicating a specific range of points
Points :: (Maybe Float, Maybe Float) -> LineWhichPoints

-- | Line Marker
data LineMarker
LM :: Color -> Int -> LineWhichPoints -> Int -> Float -> LineMarker

-- | Line Marker Color
lineColor :: LineMarker -> Color

-- | Data set index
lineDataSetIdx :: LineMarker -> Int

-- | Which points to draw the line markers on
lineWhichPoints :: LineMarker -> LineWhichPoints

-- | Width of line in pixels
lineSize :: LineMarker -> Int

-- | Floating point between -1 and 1 indicating the layer on which to draw.
lineZorder :: LineMarker -> Float

-- | Shape type of <a>ShapeMarker</a>
data ShapeType

-- | Arrow
ShapeArrow :: ShapeType

-- | Cross
ShapeCross :: ShapeType

-- | Rectangle
ShapeRectangle :: ShapeType

-- | Diamond
ShapeDiamond :: ShapeType

-- | Error Bar Marker
ShapeErrorBarMarker :: ShapeType

-- | Horizontal line across the chart at specified height
HorizontalLine :: ShapeType

-- | Horizontal line through the specified data marker
HorizontalLineFull :: ShapeType

-- | Circle
ShapeCircle :: ShapeType

-- | Square
ShapeSquare :: ShapeType

-- | Vertical line from x-axis to data point
VerticalLine :: ShapeType

-- | Vertical line across the chart
VerticalLineFull :: ShapeType

-- | X shape
ShapeX :: ShapeType

-- | Data point value of <a>ShapeMarker</a>
data MarkerDataPoint

-- | A specific data point in the dataset. Use a decimal value to
--   interpolate between two points
DataPoint :: Float -> MarkerDataPoint

-- | Draw a marker on each data point
DataPointEvery :: MarkerDataPoint

-- | Draw a marker on every n-th data point
DataPointEveryN :: Int -> MarkerDataPoint

-- | <tt>(x,y), n</tt> draw a marker on every n-th data point in a range,
--   where x is the first data point in the range, and y is the last data
--   point in the range
DataPointEveryNRange :: (Int, Int) -> Int -> MarkerDataPoint

-- | draw a marker at a specific point (x,y). Specify the coordinates as
--   floating point values, where 0:0 is the bottom left corner of the
--   chart, 0.5:0.5 is the center of the chart, and 1:1 is the top right
--   corner of the chart
DataPointXY :: (Float, Float) -> MarkerDataPoint

-- | Shape Marker
data ShapeMarker
SM :: ShapeType -> Color -> Int -> MarkerDataPoint -> Int -> Maybe Int -> Float -> ShapeMarker

-- | Shape type
shapeType :: ShapeMarker -> ShapeType

-- | Shape Marker color
shapeColor :: ShapeMarker -> Color

-- | Data Set Index
shapeDataSetIdx :: ShapeMarker -> Int

-- | Data point value
shapeDataPoints :: ShapeMarker -> MarkerDataPoint

-- | Size in pixels
shapeSize :: ShapeMarker -> Int

-- | Optional width used for certain shapes
shapeWidth :: ShapeMarker -> Maybe Int

-- | The layer on which to draw the marker. This is a floating point number
--   from -1.0 to 1.0, inclusive, where -1.0 is the bottom and 1.0 is the
--   top
shapeZorder :: ShapeMarker -> Float

-- | <a>RangeMarker</a> type
data RangeMarkerType

-- | horizontal range
RangeMarkerHorizontal :: RangeMarkerType

-- | vertical range
RangeMarkerVertical :: RangeMarkerType

-- | Range Marker
data RangeMarker
RM :: RangeMarkerType -> Color -> (Float, Float) -> RangeMarker

-- | Range marker type
rangeMarkerType :: RangeMarker -> RangeMarkerType

-- | Range marker color
rangeMarkerColor :: RangeMarker -> Color

-- | <tt>(start,end) range. </tt>For horizontal range markers, the
--   (start,end) value is a position on the y-axis, where 0.00 is the
--   bottom of the chart, and 1.00 is the top of the chart. For vertical
--   range markers, the (start,end) value is a position on the x-axis,
--   where 0.00 is the left of the chart, and 1.00 is the right of the
--   chart.
rangeMarkerRange :: RangeMarker -> (Float, Float)

-- | Financial Marker, for line charts and vertical bar charts
data FinancialMarker
FM :: Color -> Int -> MarkerDataPoint -> Int -> Int -> FinancialMarker

-- | Finance Marker color
financeColor :: FinancialMarker -> Color

-- | Data Set Index
financeDataSetIdx :: FinancialMarker -> Int

-- | Data point value
financeDataPoint :: FinancialMarker -> MarkerDataPoint

-- | Size in pixels
financeSize :: FinancialMarker -> Int

-- | Priority of drawing. Can be one of -1,0,1
financePriority :: FinancialMarker -> Int

-- | Line fill type for <tt>LineFill</tt>
data LineFillType

-- | Line fill starting from a start index
LineFillFrom :: Int -> LineFillType

-- | Line fill between a start index and end index
LineFillBetween :: Int -> Int -> LineFillType

-- | Line Fill Marker
data LineFillMarker
LineFillMarker :: LineFillType -> Color -> LineFillMarker

-- | Chart Margins. All margin values specified are the minimum margins
--   around the plot area, in pixels.
data ChartMargins
ChartMargins :: Int -> Int -> Int -> Int -> Maybe (Int, Int) -> ChartMargins

-- | Left margin around plot area
leftMargin :: ChartMargins -> Int

-- | Right margin around plot area
rightMargin :: ChartMargins -> Int

-- | Top margin around plot area
topMargin :: ChartMargins -> Int

-- | Bottom margin around plot area
bottomMargin :: ChartMargins -> Int

-- | Minimum width and height of legend
legendMargins :: ChartMargins -> Maybe (Int, Int)

-- | QR Code Output Encoding
data QREncoding
UTF8 :: QREncoding
Shift_JIS :: QREncoding
ISO8859_1 :: QREncoding

-- | Pie Chart Orientation. Applicable only to Pie Charts,
data PieChartOrientation
PCO :: Float -> PieChartOrientation

-- | Size of the chart. width and height specified in pixels
data ChartSize
Size :: Int -> Int -> ChartSize

-- | Chart type
data ChartType

-- | Line Chart
Line :: ChartType

-- | Sparklines
Sparklines :: ChartType

-- | Line Chart w/ XY co-ordinates
LineXY :: ChartType

-- | Horizontal bar chart w/ stacked bars
BarHorizontalStacked :: ChartType

-- | Vertical bar chart w/ stacked bars
BarVerticalStacked :: ChartType

-- | Horizontal bar chart w/ grouped bars
BarHorizontalGrouped :: ChartType

-- | Vertical bar chart w/ grouped bars
BarVerticalGrouped :: ChartType

-- | Two dimensional pie chart
Pie :: ChartType

-- | Three dimensional pie chart
Pie3D :: ChartType

-- | Concentric pie chart
PieConcentric :: ChartType

-- | Venn Diagram
Venn :: ChartType

-- | Scatter Plot
ScatterPlot :: ChartType

-- | Radar Chart
Radar :: ChartType

-- | Radar Chart, connects points with curved lines
RadarCurvedLines :: ChartType

-- | Google-o-meter
GoogleOMeter :: ChartType

-- | Formula Chart
Formula :: ChartType

-- | QR Codes
QRCode :: ChartType

-- | Title of the chart
data ChartTitle
ChartTitle :: String -> Maybe Color -> Maybe FontSize -> ChartTitle

-- | Title
titleStr :: ChartTitle -> String

-- | Title Color
titleColor :: ChartTitle -> Maybe Color

-- | Title Font Size
titleFontSize :: ChartTitle -> Maybe FontSize

-- | List of <a>Axis</a> for chart
type ChartAxes = [Axis]

-- | Visible axis
data Axis
Axis :: AxisType -> Maybe [AxisLabel] -> Maybe [AxisPosition] -> Maybe AxisRange -> Maybe AxisStyle -> Axis
axisType :: Axis -> AxisType
axisLabels :: Axis -> Maybe [AxisLabel]
axisPositions :: Axis -> Maybe [AxisPosition]
axisRange :: Axis -> Maybe AxisRange
axisStyle :: Axis -> Maybe AxisStyle

-- | Type of <a>Axis</a>
data AxisType

-- | Bottom x-axis
AxisBottom :: AxisType

-- | Top x-axis
AxisTop :: AxisType

-- | Left y-axis
AxisLeft :: AxisType

-- | Right y-axis
AxisRight :: AxisType

-- | <a>Axis</a> Labels.
type AxisLabel = String

-- | <a>Axis</a> Label Positions.
--   
--   Labels with a specified position of 0 are placed at the bottom of the
--   y- or r-axis, or at the left of the x- or t-axis.
--   
--   Labels with a specified position of 100 are placed at the top of the
--   y- or r-axis, or at the right of the x- or t-axis.
type AxisPosition = Float

-- | Font size in pixels. Applicable to <a>AxisStyle</a> and
--   <a>ChartTitle</a>
type FontSize = Int

-- | <a>Axis</a> Range
--   
--   The range is specifies with a tuple containing the start and end
--   values. An optional interval value can be specified.
data AxisRange
Range :: (Float, Float) -> (Maybe Float) -> AxisRange

-- | <a>Axis</a> style
data AxisStyle
Style :: Color -> Maybe FontSize -> Maybe AxisStyleAlignment -> Maybe DrawingControl -> Maybe Color -> AxisStyle
axisColor :: AxisStyle -> Color
axisFontSize :: AxisStyle -> Maybe FontSize
axisStyleAlign :: AxisStyle -> Maybe AxisStyleAlignment
axisDrawingControl :: AxisStyle -> Maybe DrawingControl
tickMarkColor :: AxisStyle -> Maybe Color

-- | Control drawing of <a>Axis</a>. Applicable to <a>AxisStyle</a>
data DrawingControl

-- | Draw axis lines only
DrawLines :: DrawingControl

-- | Draw tick marks only
DrawTicks :: DrawingControl

-- | Draw axis lines and tick marks
DrawLinesTicks :: DrawingControl

-- | Alignment of <a>Axis</a> labels. Applies to <a>AxisStyle</a>
data AxisStyleAlignment

-- | Left aligned labels
AxisStyleLeft :: AxisStyleAlignment

-- | Centered labels
AxisStyleCenter :: AxisStyleAlignment

-- | Right aligned labels
AxisStyleRight :: AxisStyleAlignment

-- | Default value for a chart
defaultChart :: Chart

-- | Default value for an axis
defaultAxis :: Axis

-- | Default value for a chart grid
defaultGrid :: ChartGrid

-- | Default value for bar and group spacing in bar chart
defaultSpacing :: BarGroupSpacing

-- | Default value of a shape marker. Make sure you change the value of
--   <tt>shapeDataSetIdx</tt>
defaultShapeMarker :: ShapeMarker

-- | Default value of range marker
defaultRangeMarker :: RangeMarker

-- | Default value of a financial marker. Make sure you change the value of
--   <tt>financeDataSetIdx</tt>
defaultFinancialMarker :: FinancialMarker

-- | Default value of a line style
defaultLineStyle :: LineStyle

-- | Default value of a line marker. Make sure you change the value of
--   <tt>lineDataSetIdx</tt>
defaultLineMarker :: LineMarker

-- | Default chart label data for QR Encoding
defaultQREncodingLabelData :: ChartLabelData
instance Show ChartSize
instance Show ChartType
instance Show ChartDataScales
instance Show ChartData
instance Show ChartColors
instance Show FillKind
instance Show FillType
instance Show Fill
instance Show LegendPosition
instance Show ChartLegend
instance Show AxisType
instance Show AxisRange
instance Eq AxisRange
instance Show ChartTitle
instance Show AxisStyleAlignment
instance Eq AxisStyleAlignment
instance Show DrawingControl
instance Eq DrawingControl
instance Show AxisStyle
instance Eq AxisStyle
instance Show Axis
instance Show ChartGrid
instance Show ShapeType
instance Show MarkerDataPoint
instance Show ShapeMarker
instance Show RangeMarkerType
instance Show RangeMarker
instance Show FinancialMarker
instance Show LineWhichPoints
instance Show LineMarker
instance Show LineFillType
instance Show LineFillMarker
instance Show ChartLabels
instance Show PieChartOrientation
instance Show ChartMargins
instance Show BarWidth
instance Show BarGroupSpacing
instance Show LineStyle
instance Show QREncoding
instance Show ChartLabelData
instance Show Chart
instance Show ErrorCorrectionLevel
instance Show AnyChartMarker
instance ChartMarker AnyChartMarker


-- | Import this module to generate charts using the Google Chart API.
--   
--   For more information about the Google Chart API, refer to
--   
--   <ul>
--   <li>Chart API Intro
--   <a>http://code.google.com/apis/chart/image_charts.html</a></li>
--   <li>Getting Started
--   <a>http://code.google.com/apis/chart/docs/making_charts.html</a></li>
--   </ul>
--   
--   For documentation full Haskell data model, refer to
--   <a>Graphics.GChart.Types</a>.
--   
--   Here is an example to use the functions in the module to generate a
--   chart URL :
--   
--   <pre>
--   generatePieChart = getChartUrl $ do setChartSize 640 400
--                                    setChartType Pie
--                                    setChartTitle "Test"
--                                    addChartData  ([1,2,3,4,5]::[Int])
--                                    addColor "FF0000"
--                                    setLegend $ legend ["t1","t2", "t3","t4","t5"]
--                                    setLabels $ ["Test 1", "Test 2", "Test 3", "Test 4", "Test 5"]
--   </pre>
--   
--   For examples, refer to <tt>Examples.hs</tt> in the source tarball, or
--   download it directly from Github :
--   <a>http://github.com/deepakjois/hs-gchart/blob/master/examples/Examples.hs</a>.
--   
--   The module constists of:
--   
--   <ul>
--   <li>Smart Constructors - to make it convenient to construct data
--   types</li>
--   <li>Functions to set chart data</li>
--   <li>Functions to retrieve chart data in form of URL or Haskell data
--   type</li>
--   </ul>
module Graphics.GChart

-- | generates a <a>Solid</a> fill from a hex color value
solid :: Color -> FillType -> Fill

-- | generates a <a>ChartLegend</a> from a list of labels
legend :: [String] -> ChartLegend

-- | generats a <a>ChartLegend</a> from a list of lables and a
--   <a>LegendPosition</a>
legendWithPosition :: [String] -> LegendPosition -> ChartLegend

-- | returns a default axis. Use this to override the fields with your own
--   values. For e.g :
--   
--   <pre>
--   makeAxis { <a>axisType</a> = <a>AxisTop</a>,
--              <a>axisLabels</a> = ["0","50","100"] }
--   </pre>
makeAxis :: Axis

-- | returns a default axis. Use this to override the fields with your own
--   values. For e.g :
--   
--   <pre>
--   makeGrid { <a>xAxisStep</a> = 10,
--              <a>yAxisStep</a> = 10,
--               xOffset = Just 5 }
--   </pre>
makeGrid :: ChartGrid

-- | Use this to specify the <a>Simple</a> encoding for the
--   <a>setDataEncoding</a> function.
simple :: ChartData

-- | Use this to specify the <a>Text</a> encoding for the
--   <a>setDataEncoding</a> function.
text :: ChartData

-- | Use this to specify the <a>Extended</a> encoding for the
--   <a>setDataEncoding</a> function.
extended :: ChartData

-- | Set automatic bar width for bar chart
automatic :: BarChartWidthSpacing

-- | Set automatic bar width for bar chart, with spacing values
automaticWithSpacing :: Int -> Int -> BarChartWidthSpacing

-- | Set bar width for chart
barwidth :: Int -> BarChartWidthSpacing

-- | Set bar width and spacing for chart
barwidthspacing :: Int -> Int -> Int -> BarChartWidthSpacing

-- | Set relative spacing
relative :: Float -> Float -> BarChartWidthSpacing

-- | Shape Marker
makeShapeMarker :: ShapeMarker

-- | Range Marker
makeRangeMarker :: RangeMarker

-- | Financial Marker
makeFinancialMarker :: FinancialMarker

-- | Line Marker
makeLineMarker :: LineMarker

-- | Line Style
makeLineStyle :: LineStyle

-- | Set the chart size by passing the width and the height in pixels For
--   e.g : <tt>setChartSize 320 200</tt>
setChartSize :: Int -> Int -> ChartM ()

-- | Set chart height only. Applicable to <a>Formula</a> charts This will
--   set the width to 0 which will automatically be excluded when the data
--   is being encoded
setChartHeight :: Int -> ChartM ()

-- | Set the chart type by passing a <a>ChartType</a>
setChartType :: ChartType -> ChartM ()

-- | Set the chart title by passing a <a>ChartTitle</a>
setChartTitle :: String -> ChartM ()

-- | Set the chart title with a color
setChartTitleWithColor :: String -> Color -> ChartM ()

-- | Set the chart title with color and font size
setChartTitleWithColorAndFontSize :: String -> Color -> FontSize -> ChartM ()

-- | Use this with <a>simple</a>, <a>text</a> or <a>extended</a> to specify
--   the encoding. For e.g
--   
--   <pre>
--   setDataEncoding simple
--   </pre>
--   
--   Make sure you pass in values of the right type, Int for simple and
--   extended encoding, and Float for text encoding.
setDataEncoding :: ChartData -> ChartM ()

-- | Add data to chart. Make sure you have set the data encoding using
--   <a>setDataEncoding</a> before calling this function, otherwise it may
--   generate gibberish, or throw an error
addChartData :: ChartDataEncodable a => [a] -> ChartM ()

-- | Add a scale to chart.If more than one scale is added, it applies the
--   scale in order to each data series
addDataScale :: DataScale -> ChartM ()

-- | Works like <a>addChartData</a>, but for XY datasets for line XY chart
--   etc
addChartDataXY :: ChartDataEncodable a => [(a, a)] -> ChartM ()

-- | Pass a list of colors corresponding to the datasets in the chart
setColors :: [Color] -> ChartM ()

-- | Add a color to the chart. This color will be added to the list
--   <a>ChartColors</a>.
--   
--   Make sure you do not include a call to <a>setColors</a> at any time
--   after a call to <a>addColor</a>, since this will lead to all previous
--   values being erased.
addColor :: Color -> ChartM ()

-- | Add a <a>Fill</a> to the chart
addFill :: Fill -> ChartM ()

-- | Set a Legend for the chart
setLegend :: ChartLegend -> ChartM ()

-- | Add an <a>Axis</a> to the chart
addAxis :: Axis -> ChartM ()

-- | Set a <a>ChartGrid</a> for the chart
setGrid :: ChartGrid -> ChartM ()

-- | Adds a shape marker. Use <a>makeShapeMarker</a> smart constructor when
--   calling this function If value of data set index is not specified when
--   using <a>makeShapeMarker</a>, it automatically adds a data index to
--   refer to the latest data set
addShapeMarker :: ShapeMarker -> ChartM ()

-- | Adds a range marker. You can use <a>makeRangeMarker</a> smart
--   constructor when calling this function
addRangeMarker :: RangeMarker -> ChartM ()

-- | Adds a financial marker. Use <a>makeFinancialMarker</a> smart
--   constructor when calling this function. If value of data set index is
--   not specified when using <a>makeFinancialMarker</a>, it automatically
--   adds a data index to refer to the latest data set
addFinancialMarker :: FinancialMarker -> ChartM ()

-- | Adds a line marker. Use <a>makeLineMarker</a> smart constructor when
--   calling this function. If value of data set index is not specified
--   when using <a>makeLineMarker</a>, it automatically adds a data index
--   to refer to the latest data set
addLineMarker :: LineMarker -> ChartM ()

-- | Adds a line fill to the chart
addLineFill :: LineFillType -> Color -> ChartM ()

-- | Set labels for the chart
setLabels :: [String] -> ChartM ()

-- | Set label for a chart
setLabel :: String -> ChartM ()

-- | Set bar and width spacing
setBarWidthSpacing :: BarChartWidthSpacing -> ChartM ()

-- | Set pie chart orientation in radians
setPieChartOrientation :: Float -> ChartM ()

-- | Add line style
addLineStyle :: LineStyle -> ChartM ()

-- | Set formula. Applies only to <a>Formula</a> charts
setFormula :: String -> ChartM ()

-- | Set QR code output encoding. Valid for <a>QRCode</a> only
setQREncoding :: QREncoding -> ChartM ()

-- | Sets the width (in rows) of the white border around the data portion
--   of the <a>QRCode</a>
setQRWidth :: Int -> ChartM ()

-- | Sets the error correction level for <a>QRCode</a>
setQRErrorCorrection :: ErrorCorrectionLevel -> ChartM ()

-- | Extracts the data out of the monad and returns a value of type
--   <a>Chart</a>
getChartData :: ChartM () -> Chart

-- | Extracts the data out of the monad and returns a URL string for the
--   chart
getChartUrl :: ChartM () -> String

-- | Converts a value of type <a>Chart</a> to a URL
convertToUrl :: Chart -> String
