-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A discrete space map.
--   
@package discrete-space-map
@version 0.0.4

module Data.DiscreteSpaceMap.Internal

-- | To be a key in the map, a position needs to be convertible to and from
--   a stream of bits.
class Eq p => Pos p
uncons :: Pos p => p -> (p, Bool)
cons :: Pos p => (p, Bool) -> p
zero :: Pos p => p

-- | 1D discrete space

-- | 2D discrete space

-- | 3D discrete space

-- | <tt>[Bool]</tt> is the free instance of <a>Pos</a>.
data MapD a
MapD :: a -> (MapD (a, a)) -> MapD a
gotoD :: Pos p => p -> p -> (a, MapD a) -> (a, MapD a)
tabulateD :: Pos p => (p -> a) -> MapD a
cotraverseD :: Functor f => (f a -> b) -> f (MapD a) -> MapD b
zipWithKeyD :: Pos p => (p -> a -> b -> c) -> p -> MapD a -> MapD b -> MapD c
traverseWithKey1D :: (Pos p, Apply f) => (p -> a -> f b) -> p -> MapD a -> f (MapD b)
instance Show a => Show (MapD a)
instance Traversable1 MapD
instance Traversable MapD
instance Foldable1 MapD
instance Foldable MapD
instance Functor MapD
instance Pos [Bool]
instance Pos p => Pos (p, p, p)
instance Pos p => Pos (p, p)
instance Pos Integer

module Data.DiscreteSpaceMap

-- | To be a key in the map, a position needs to be convertible to and from
--   a stream of bits.
class Eq p => Pos p
uncons :: Pos p => p -> (p, Bool)
cons :: Pos p => (p, Bool) -> p
zero :: Pos p => p

-- | <a>Map</a> is a zipper on an infinite perfect binary tree. It contains
--   the position and value of the focus. The other values are stored in
--   the derivative of a perfect binary tree.
--   
--   Functions that combine 2 maps like <a>zipWith</a>, <a>zipWithKey</a>
--   and <a>&lt;@&gt;</a> preserve the focus position of the second
--   argument.
data Map p a
Map :: !p -> !a -> (MapD a) -> Map p a

-- | Modify the value of the focus.
modify :: (a -> a) -> Map p a -> Map p a
instance (Show p, Show a) => Show (Map p a)
instance Pos p => TraversableWithKey1 (Map p)
instance Traversable1 (Map p)
instance Pos p => TraversableWithKey (Map p)
instance Traversable (Map p)
instance Pos p => FoldableWithKey1 (Map p)
instance Foldable1 (Map p)
instance Pos p => FoldableWithKey (Map p)
instance Foldable (Map p)
instance Pos p => Keyed (Map p)
instance Functor (Map p)
instance Pos p => Representable (Map p)
instance Pos p => Distributive (Map p)
instance Pos p => Adjustable (Map p)
instance Pos p => Lookup (Map p)
instance Pos p => Indexable (Map p)
instance Pos p => ComonadStore p (Map p)
instance Comonad (Map p)
instance Pos p => ComonadApply (Map p)
instance Pos p => ZipWithKey (Map p)
instance Pos p => Zip (Map p)
