-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Shield.io style badge generator
--   
@package barrier
@version 0.1.0

module Graphics.Badge.Barrier.Color
newtype Color
Color :: Text -> Color

-- | #4c1
brightgreen :: Color

-- | #97CA00
green :: Color

-- | #dfb317
yellow :: Color

-- | #a4a61d
yellowgreen :: Color

-- | #fe7d37
orange :: Color

-- | #e05d44
red :: Color

-- | #007ec6
blue :: Color

-- | #555
gray :: Color

-- | #9f9f9f
lightgray :: Color
instance Show Color
instance Eq Color
instance IsString Color

module Graphics.Badge.Barrier.Internal
data BadgeConfig
BadgeConfig :: Text -> Text -> Int -> Int -> BadgeConfig
textLeft :: BadgeConfig -> Text
textRight :: BadgeConfig -> Text
widthLeft :: BadgeConfig -> Int
widthRight :: BadgeConfig -> Int
class Badge a
badge :: Badge a => a -> BadgeConfig -> Svg
makeBadge :: Badge b => b -> Text -> Text -> Svg
type Lens' s a = forall f. Functor f => (a -> f a) -> s -> f s
class HasLeftColor a
left :: HasLeftColor a => Lens' a Color
class HasRightColor a
right :: HasRightColor a => Lens' a Color

module Graphics.Badge.Barrier.Style.Flat
data Flat
Flat :: Color -> Color -> Flat
leftColor :: Flat -> Color
rightColor :: Flat -> Color
flat :: Flat
instance HasRightColor Flat
instance HasLeftColor Flat
instance Badge Flat

module Graphics.Badge.Barrier.Style.FlatSquare
data FlatSquare
FlatSquare :: Color -> Color -> FlatSquare
leftColor :: FlatSquare -> Color
rightColor :: FlatSquare -> Color
flatSquare :: FlatSquare
instance HasRightColor FlatSquare
instance HasLeftColor FlatSquare
instance Badge FlatSquare

module Graphics.Badge.Barrier.Style.Plastic
data Plastic
Plastic :: Color -> Color -> Plastic
leftColor :: Plastic -> Color
rightColor :: Plastic -> Color
plastic :: Plastic
instance HasRightColor Plastic
instance HasLeftColor Plastic
instance Badge Plastic

module Graphics.Badge.Barrier
class Badge a
flat :: Flat
flatSquare :: FlatSquare
plastic :: Plastic

-- | <pre>
--   renderBadge flat "left" "right"
--   </pre>
renderBadge :: Badge b => b -> Text -> Text -> ByteString
class HasLeftColor a
left :: HasLeftColor a => Lens' a Color
class HasRightColor a
right :: HasRightColor a => Lens' a Color
