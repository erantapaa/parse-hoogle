-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Send metrics to Ganglia, Graphite, and statsd.
--   
--   Send metrics directly from Haskell to various monitoring and metrics
--   services.
--   
--   Supported services are Ganglia, Graphite, and statsd.
--   
--   Please see
--   <a>http://github.com/brendanhay/network-metrics/blob/master/README.md</a>
--   for further information and usage.
@package network-metrics
@version 0.4


module Network.Metric.Internal

-- | Socket handle
data Handle
Handle :: Socket -> SockAddr -> Handle

-- | Metric host
type Host = ByteString

-- | Metric group
type Group = ByteString

-- | Metric bucket
type Bucket = ByteString
data Metric
Counter :: Group -> Bucket -> Integer -> Metric
Timer :: Group -> Bucket -> Double -> Metric
Gauge :: Group -> Bucket -> Double -> Metric

-- | Any instance of the Measurable type class
data AnyMeasurable
AnyMeasurable :: a -> AnyMeasurable

-- | Any instance of the Sink type class
data AnySink
AnySink :: a -> AnySink

-- | Measure a type for a collection of metrics
class Measurable a
measure :: Measurable a => a -> [Metric]

-- | Metric value to be encoded
class (Show a, Typeable a) => Encodable a
encode :: Encodable a => a -> ByteString

-- | Sink resource to write metrics to
class Sink a
push :: (Sink a, Measurable b) => a -> b -> IO ()
close :: Sink a => a -> IO ()

-- | Combine a Host, Group and Bucket into a single key
key :: Maybe Host -> Group -> Bucket -> ByteString

-- | Helper to curry a constructor function for a sink
fOpen :: Sink a => (Handle -> a) -> SocketType -> HostName -> PortNumber -> IO AnySink

-- | Create a new socket handle (in a disconnected state) for UDP
--   communication
hOpen :: SocketType -> HostName -> PortNumber -> IO Handle

-- | Close a socket handle
hClose :: Handle -> IO ()

-- | Direct access for writing a bytestring to a socket handle
hPush :: Handle -> ByteString -> IO ()

-- | Either a host name e.g., <tt>"haskell.org"</tt> or a numeric host
--   address string consisting of a dotted decimal IPv4 address or an IPv6
--   address e.g., <tt>"192.168.0.1"</tt>.
type HostName = String
data PortNumber :: *
instance Show Handle
instance Show Metric
instance Eq Metric
instance Sink AnySink
instance Encodable String
instance Encodable Double
instance Encodable Integer
instance Encodable Int
instance Measurable Metric
instance Measurable AnyMeasurable


module Network.Metric.Sink.Ganglia

-- | Allows gmetad and the PHP webfrontend to efficiently separate constant
--   data metrics from volatile ones
data Slope
Zero :: Slope
Positive :: Slope
Negative :: Slope
Both :: Slope
Unspecified :: Slope

-- | Metric types supported by Ganglia
data GangliaType
String :: GangliaType
Int8 :: GangliaType
UInt8 :: GangliaType
Int16 :: GangliaType
UInt16 :: GangliaType
Int32 :: GangliaType
UInt32 :: GangliaType
Float :: GangliaType
Double :: GangliaType

-- | Concrete metric type used to emit metadata and value packets
data GangliaMetric
GangliaMetric :: Bucket -> GangliaType -> ByteString -> ByteString -> ByteString -> ByteString -> Group -> Slope -> Word32 -> Word32 -> GangliaMetric
name :: GangliaMetric -> Bucket
type' :: GangliaMetric -> GangliaType
units :: GangliaMetric -> ByteString
value :: GangliaMetric -> ByteString
host :: GangliaMetric -> ByteString
spoof :: GangliaMetric -> ByteString
group :: GangliaMetric -> Group
slope :: GangliaMetric -> Slope
tmax :: GangliaMetric -> Word32
dmax :: GangliaMetric -> Word32

-- | A handle to a Ganglia sink
data Ganglia
Ganglia :: (Maybe Host) -> Handle -> Ganglia

-- | Sensible defaults for a GangliaMetric
defaultMetric :: GangliaMetric

-- | Encode a GangliaMetric's metadata into a Binary.Put monad
--   
--   The format for this can be found in either: * gm_protocol.x in the
--   Ganglia 3.1 sources * https:<i></i>github.com<i>lookfirst</i>jmxtrans
putMetaData :: GangliaMetric -> Put

-- | Encode a GangliaMetric's value into a Binary.Put monad
putValue :: GangliaMetric -> Put

-- | Sink resource to write metrics to
class Sink a
push :: (Sink a, Measurable b) => a -> b -> IO ()
close :: Sink a => a -> IO ()

-- | Open a new Ganglia sink
open :: Maybe Host -> HostName -> PortNumber -> IO AnySink

-- | Metric group
type Group = ByteString

-- | Metric bucket
type Bucket = ByteString
data Metric
Counter :: Group -> Bucket -> Integer -> Metric
Timer :: Group -> Bucket -> Double -> Metric
Gauge :: Group -> Bucket -> Double -> Metric
instance Typeable Slope
instance Typeable GangliaType
instance Data Slope
instance Show Slope
instance Eq Slope
instance Enum Slope
instance Data GangliaType
instance Eq GangliaType
instance Show GangliaType
instance Show GangliaMetric
instance Show Ganglia
instance Sink Ganglia
instance Default GangliaMetric


module Network.Metric.Sink.Graphite

-- | Sink resource to write metrics to
class Sink a
push :: (Sink a, Measurable b) => a -> b -> IO ()
close :: Sink a => a -> IO ()

-- | Open a new Graphite sink
open :: Maybe Host -> HostName -> PortNumber -> IO AnySink

-- | Metric group
type Group = ByteString

-- | Metric bucket
type Bucket = ByteString
data Metric
Counter :: Group -> Bucket -> Integer -> Metric
Timer :: Group -> Bucket -> Double -> Metric
Gauge :: Group -> Bucket -> Double -> Metric
instance Show Graphite
instance Sink Graphite


module Network.Metric.Sink.Statsd

-- | Sink resource to write metrics to
class Sink a
push :: (Sink a, Measurable b) => a -> b -> IO ()
close :: Sink a => a -> IO ()

-- | Open a new Statsd sink
open :: Maybe Host -> HostName -> PortNumber -> IO AnySink

-- | Metric group
type Group = ByteString

-- | Metric bucket
type Bucket = ByteString

-- | Any instance of the Sink type class
data AnySink
AnySink :: a -> AnySink
instance Show Statsd
instance Sink Statsd


module Network.Metric.Sink.Handle

-- | A generic sink handle
data SinkHandle
SinkHandle :: (Maybe Host) -> (String -> IO ()) -> SinkHandle

-- | Metric group
type Group = ByteString

-- | Metric bucket
type Bucket = ByteString
data Metric
Counter :: Group -> Bucket -> Integer -> Metric
Timer :: Group -> Bucket -> Double -> Metric
Gauge :: Group -> Bucket -> Double -> Metric

-- | Sink resource to write metrics to
class Sink a
push :: (Sink a, Measurable b) => a -> b -> IO ()
close :: Sink a => a -> IO ()
instance Sink SinkHandle


module Network.Metric

-- | An enumeration of supplied sink types
data SinkType
Ganglia :: SinkType
Graphite :: SinkType
Statsd :: SinkType
Stdout :: SinkType

-- | Metric group
type Group = ByteString

-- | Metric bucket
type Bucket = ByteString
data Metric
Counter :: Group -> Bucket -> Integer -> Metric
Timer :: Group -> Bucket -> Double -> Metric
Gauge :: Group -> Bucket -> Double -> Metric

-- | Measure a type for a collection of metrics
class Measurable a
measure :: Measurable a => a -> [Metric]

-- | Metric value to be encoded
class (Show a, Typeable a) => Encodable a
encode :: Encodable a => a -> ByteString

-- | Sink resource to write metrics to
class Sink a
push :: (Sink a, Measurable b) => a -> b -> IO ()
close :: Sink a => a -> IO ()

-- | Any instance of the Measurable type class
data AnyMeasurable
AnyMeasurable :: a -> AnyMeasurable

-- | Any instance of the Sink type class
data AnySink
AnySink :: a -> AnySink

-- | Open a new sink specified by SinkType
open :: SinkType -> Maybe Host -> HostName -> PortNumber -> IO AnySink
instance Typeable SinkType
instance Eq SinkType
instance Data SinkType
instance Read SinkType
instance Show SinkType
