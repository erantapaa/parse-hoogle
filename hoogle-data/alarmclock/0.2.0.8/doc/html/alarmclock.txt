-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Wake up and perform an action at a certain time.
--   
@package alarmclock
@version 0.2.0.8


-- | Device for running an action at (i.e. shortly after) a certain time,
--   which can be used to implement things like time-based cache expiry.
--   
--   This implementation avoids the use of polling and leans on Haskell's
--   scheduler to achieve low-latency without lots of computational
--   overhead.
--   
--   The alarm can be set multiple times, and in this case the alarm will
--   go off at the earliest requested time. If the alarm is set in the
--   past, the action will run immediately. When the action runs, it clears
--   all future alarms; the action can itself set the next alarm time.
--   
--   To perform time-based cache expiry, create an <a>AlarmClock</a> whose
--   action flushes any stale entries from the cache and then calls
--   <a>setAlarm</a> for the next time that an entry will expire (if there
--   are any). When expiring entries are added to the cache, call
--   <a>setAlarm</a> to ensure that they will expire in a timely fashion.
module Control.Concurrent.AlarmClock

-- | An <a>AlarmClock</a> is a device for running an action at (or shortly
--   after) a certain time.
data AlarmClock

-- | Create a new <a>AlarmClock</a> that runs the given action. Initially,
--   there is no wakeup time set: you must call <a>setAlarm</a> for
--   anything else to happen.
newAlarmClock :: (AlarmClock -> IO ()) -> IO AlarmClock

-- | Create a new <a>AlarmClock</a> that runs the given action. Initially,
--   there is no wakeup time set: you must call <a>setAlarm</a> for
--   anything else to happen.
newAlarmClock' :: (AlarmClock -> UTCTime -> IO ()) -> IO AlarmClock

-- | Destroy the <a>AlarmClock</a> so no further alarms will occur. If the
--   alarm is currently going off then this will block until the action is
--   finished.
destroyAlarmClock :: AlarmClock -> IO ()

-- | The action <tt>withAlarmClock onWakeUp inner</tt> runs <tt>inner</tt>
--   with a new <a>AlarmClock</a> which is destroyed when <tt>inner</tt>
--   exits.
withAlarmClock :: (AlarmClock -> UTCTime -> IO ()) -> (AlarmClock -> IO a) -> IO a

-- | Make the <a>AlarmClock</a> go off at (or shortly after) the given
--   time. This can be called more than once; in which case, the alarm will
--   go off at the earliest given time.
setAlarm :: AlarmClock -> UTCTime -> IO ()

-- | Make the <a>AlarmClock</a> go off at (or shortly after) the given
--   time. This can be called more than once; in which case, the alarm will
--   go off at the earliest given time.
setAlarmSTM :: AlarmClock -> UTCTime -> STM ()

-- | Make the <a>AlarmClock</a> go off right now.
setAlarmNow :: AlarmClock -> IO ()

-- | Is the alarm set - i.e. will it go off at some point in the future
--   even if <a>setAlarm</a> is not called?
isAlarmSet :: AlarmClock -> IO Bool

-- | Is the alarm set - i.e. will it go off at some point in the future
--   even if <a>setAlarm</a> is not called?
isAlarmSetSTM :: AlarmClock -> STM Bool
