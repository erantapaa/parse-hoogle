-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Interface to the udis86 disassembler for x86 and x86-64 / AMD64
--   
--   <tt>hdis86</tt> is an interface to the <tt>udis86</tt> disassembler,
--   which decodes machine code for 16-, 32-, and 64-bit x86 and x86-64 /
--   AMD64 processors. <tt>hdis86</tt> provides an instruction stream as a
--   Haskell algebraic data type, suitable for inspection by pattern
--   matching. It also provides metadata such as assembly syntax in Intel
--   or AT&amp;T flavors.
--   
--   This library exposes three layers of wrapping:
--   
--   <ul>
--   <li>The <tt>Pure</tt> module has the simplest interface, effectively
--   <tt>ByteString -&gt; [Instruction]</tt>.</li>
--   <li>The <tt>IO</tt> module exposes an imperative API closely matching
--   the <tt>udis86</tt> state machine, while providing Haskellish types
--   and automatic resource management.</li>
--   <li>The <tt>C</tt> module is a direct import of the <tt>udis86</tt>
--   library, with C types and conventions.</li>
--   </ul>
--   
--   Many users can simply import <tt>Hdis86</tt>.
--   
--   The <tt>Incremental</tt> module provides disassembly of lazy
--   <tt>ByteString</tt>s, and a function for building other incremental
--   operations.
--   
--   By default, <tt>hdis86</tt> will statically link a built-in copy of
--   <tt>udis86-1.7</tt>, which is provided by its author under a similar
--   BSD license. See inside the tarball for more information. If you have
--   <tt>udis86</tt> installed on your system, you can instead link
--   dynamically using <tt>cabal configure --flags=external-udis86</tt>. In
--   that case see also <tt>doc/customizing.txt</tt>.
--   
--   This code is available on GitHub at
--   <a>https://github.com/kmcallister/hdis86</a>.
--   
--   The <tt>udis86</tt> project website is located at
--   <a>http://udis86.sourceforge.net/</a>.
--   
--   New in version 0.2:
--   
--   <ul>
--   <li>Disassembly of lazy <tt>ByteString</tt>s</li>
--   <li>A function for building other incremental operations</li>
--   <li>Record selectors on <tt>Instruction</tt></li>
--   <li>QuickCheck <tt>Arbitrary</tt> instances for <tt>Instruction</tt>
--   and related types</li>
--   </ul>
@package hdis86
@version 0.2


-- | Bare import of the <tt>udis86</tt> C library.
--   
--   This module is not recommended for most users. What you see is what
--   you get. The modules <a>Hdis86.IO</a> and <a>Hdis86.Pure</a> provide a
--   more Haskell-friendly interface to the same functionality.
--   
--   If you want to use this module, see the <tt>udis86</tt> documentation:
--   <a>http://udis86.sourceforge.net</a>
--   
--   Instruction opcodes are not enumerated here. You can convert between
--   the C-level integer codes and the type
--   <tt><tt>Hdis86.Types.Opcode</tt></tt> using the latter's
--   <tt><a>Enum</a></tt> instance.
module Hdis86.C

-- | Just a pointer tag, with no Haskell representation.
data UD_t
sizeof_ud_t :: Int
type InputHook = IO CInt
eoi :: CInt
wrap_InputHook :: InputHook -> IO (FunPtr InputHook)
type Translator = Ptr UD_t -> IO ()
wrap_Translator :: Translator -> IO (FunPtr Translator)
init :: Ptr UD_t -> IO ()
set_input_hook :: Ptr UD_t -> FunPtr InputHook -> IO ()
set_input_buffer :: Ptr UD_t -> Ptr CChar -> CSize -> IO ()
set_input_file :: Ptr UD_t -> Ptr CFile -> IO ()
set_mode :: Ptr UD_t -> (Word8) -> IO ()
set_pc :: Ptr UD_t -> (Word64) -> IO ()
set_syntax :: Ptr UD_t -> FunPtr Translator -> IO ()
set_vendor :: Ptr UD_t -> UD_vendor -> IO ()
disassemble :: Ptr UD_t -> IO CUInt
insn_len :: Ptr UD_t -> IO CUInt
insn_off :: Ptr UD_t -> IO (Word64)
insn_hex :: Ptr UD_t -> IO CString
insn_ptr :: Ptr UD_t -> IO (Ptr (Word8))
insn_asm :: Ptr UD_t -> IO CString
input_skip :: Ptr UD_t -> CSize -> IO ()
translate_intel :: FunPtr Translator
translate_att :: FunPtr Translator
get_mnemonic :: Ptr UD_t -> IO CUInt

-- | Another pointer tag.
data Operand
get_operand1, get_operand3, get_operand2 :: Ptr UD_t -> Ptr Operand
get_type, get_index, get_base :: Ptr Operand -> IO UD_type
get_size, get_scale, get_offset :: Ptr Operand -> IO (Word8)
get_lval_u8 :: Ptr Operand -> IO Word8
get_lval_u16 :: Ptr Operand -> IO Word16
get_lval_u32 :: Ptr Operand -> IO Word32
get_lval_u64 :: Ptr Operand -> IO Word64
get_lval_s8 :: Ptr Operand -> IO Int8
get_lval_s16 :: Ptr Operand -> IO Int16
get_lval_s32 :: Ptr Operand -> IO Int32
get_lval_s64 :: Ptr Operand -> IO Int64
get_lval_ptr :: Ptr Operand -> IO (Word16, Word32)
get_pfx_rex, get_pfx_repne, get_pfx_repe, get_pfx_rep, get_pfx_lock, get_pfx_adr, get_pfx_opr, get_pfx_seg :: Ptr UD_t -> IO (Word8)
get_pc :: Ptr UD_t -> IO (Word64)
type UD_vendor = CUInt
udVendorIntel :: UD_vendor
type UD_type = CUInt
udVendorAmd :: UD_vendor
udNone :: UD_type
udRAl :: UD_type
udRCl :: UD_type
udRDl :: UD_type
udRBl :: UD_type
udRAh :: UD_type
udRCh :: UD_type
udRDh :: UD_type
udRBh :: UD_type
udRSpl :: UD_type
udRBpl :: UD_type
udRSil :: UD_type
udRDil :: UD_type
udRR8b :: UD_type
udRR9b :: UD_type
udRR10b :: UD_type
udRR11b :: UD_type
udRR12b :: UD_type
udRR13b :: UD_type
udRR14b :: UD_type
udRR15b :: UD_type
udRAx :: UD_type
udRCx :: UD_type
udRDx :: UD_type
udRBx :: UD_type
udRSp :: UD_type
udRBp :: UD_type
udRSi :: UD_type
udRDi :: UD_type
udRR8w :: UD_type
udRR9w :: UD_type
udRR10w :: UD_type
udRR11w :: UD_type
udRR12w :: UD_type
udRR13w :: UD_type
udRR14w :: UD_type
udRR15w :: UD_type
udREax :: UD_type
udREcx :: UD_type
udREdx :: UD_type
udREbx :: UD_type
udREsp :: UD_type
udREbp :: UD_type
udREsi :: UD_type
udREdi :: UD_type
udRR8d :: UD_type
udRR9d :: UD_type
udRR10d :: UD_type
udRR11d :: UD_type
udRR12d :: UD_type
udRR13d :: UD_type
udRR14d :: UD_type
udRR15d :: UD_type
udRRax :: UD_type
udRRcx :: UD_type
udRRdx :: UD_type
udRRbx :: UD_type
udRRsp :: UD_type
udRRbp :: UD_type
udRRsi :: UD_type
udRRdi :: UD_type
udRR8 :: UD_type
udRR9 :: UD_type
udRR10 :: UD_type
udRR11 :: UD_type
udRR12 :: UD_type
udRR13 :: UD_type
udRR14 :: UD_type
udRR15 :: UD_type
udREs :: UD_type
udRCs :: UD_type
udRSs :: UD_type
udRDs :: UD_type
udRFs :: UD_type
udRGs :: UD_type
udRCr0 :: UD_type
udRCr1 :: UD_type
udRCr2 :: UD_type
udRCr3 :: UD_type
udRCr4 :: UD_type
udRCr5 :: UD_type
udRCr6 :: UD_type
udRCr7 :: UD_type
udRCr8 :: UD_type
udRCr9 :: UD_type
udRCr10 :: UD_type
udRCr11 :: UD_type
udRCr12 :: UD_type
udRCr13 :: UD_type
udRCr14 :: UD_type
udRCr15 :: UD_type
udRDr0 :: UD_type
udRDr1 :: UD_type
udRDr2 :: UD_type
udRDr3 :: UD_type
udRDr4 :: UD_type
udRDr5 :: UD_type
udRDr6 :: UD_type
udRDr7 :: UD_type
udRDr8 :: UD_type
udRDr9 :: UD_type
udRDr10 :: UD_type
udRDr11 :: UD_type
udRDr12 :: UD_type
udRDr13 :: UD_type
udRDr14 :: UD_type
udRDr15 :: UD_type
udRMm0 :: UD_type
udRMm1 :: UD_type
udRMm2 :: UD_type
udRMm3 :: UD_type
udRMm4 :: UD_type
udRMm5 :: UD_type
udRMm6 :: UD_type
udRMm7 :: UD_type
udRSt0 :: UD_type
udRSt1 :: UD_type
udRSt2 :: UD_type
udRSt3 :: UD_type
udRSt4 :: UD_type
udRSt5 :: UD_type
udRSt6 :: UD_type
udRSt7 :: UD_type
udRXmm0 :: UD_type
udRXmm1 :: UD_type
udRXmm2 :: UD_type
udRXmm3 :: UD_type
udRXmm4 :: UD_type
udRXmm5 :: UD_type
udRXmm6 :: UD_type
udRXmm7 :: UD_type
udRXmm8 :: UD_type
udRXmm9 :: UD_type
udRXmm10 :: UD_type
udRXmm11 :: UD_type
udRXmm12 :: UD_type
udRXmm13 :: UD_type
udRXmm14 :: UD_type
udRXmm15 :: UD_type
udRRip :: UD_type
udOpReg :: UD_type
udOpMem :: UD_type
udOpPtr :: UD_type
udOpImm :: UD_type
udOpJimm :: UD_type
udOpConst :: UD_type


-- | Types provided by the disassembler.
module Hdis86.Types

-- | An x86 / AMD64 CPU instruction.
--   
--   The destination <tt><a>Operand</a></tt> (if any) will precede the
--   source <tt><a>Operand</a></tt>s.
data Instruction
Inst :: [Prefix] -> Opcode -> [Operand] -> Instruction
inPrefixes :: Instruction -> [Prefix]
inOpcode :: Instruction -> Opcode
inOperands :: Instruction -> [Operand]

-- | Prefixes, used to modify an instruction.
data Prefix

-- | Segment override
Seg :: Segment -> Prefix

-- | <tt>REX</tt> prefix; enables certain 64-bit features
Rex :: Prefix

-- | Operand size override
OperSize :: Prefix

-- | Address size override
AddrSize :: Prefix

-- | Perform memory operations atomically
Lock :: Prefix

-- | Repeat
Rep :: Prefix

-- | Repeat while equal
RepE :: Prefix

-- | Repeat while not equal
RepNE :: Prefix

-- | Instruction operands.
data Operand

-- | Memory access
Mem :: Memory -> Operand

-- | Register
Reg :: Register -> Operand

-- | Segmented pointer
Ptr :: Pointer -> Operand

-- | Immediate value
Imm :: (Immediate Word64) -> Operand

-- | Immediate value, for a relative jump
Jump :: (Immediate Int64) -> Operand

-- | Constant value
Const :: (Immediate Word64) -> Operand

-- | A memory-access operand.
data Memory
Memory :: WordSize -> Register -> Register -> Word8 -> Immediate Int64 -> Memory

-- | Size of the word in memory
mSize :: Memory -> WordSize

-- | Base register
mBase :: Memory -> Register

-- | Index register
mIndex :: Memory -> Register

-- | Scale of index
mScale :: Memory -> Word8

-- | Displacement / offset value
mOffset :: Memory -> Immediate Int64

-- | A segmented pointer operand.
data Pointer
Pointer :: Word16 -> Immediate Word32 -> Pointer

-- | Segment
pSegment :: Pointer -> Word16

-- | Offset, 16 or 32 bits
pOffset :: Pointer -> Immediate Word32

-- | An immediate operand.
data Immediate t
Immediate :: WordSize -> t -> Immediate t

-- | Size of the field
iSize :: Immediate t -> WordSize

-- | Immediate value, e.g <tt><a>Int64</a></tt> or <tt><a>Word64</a></tt>
iValue :: Immediate t -> t

-- | An x86 / AMD64 register.
data Register

-- | No register specified.
RegNone :: Register

-- | Either 8-bit half of the low 16 bits of a general-purpose register
Reg8 :: GPR -> Half -> Register

-- | Low 16 bits of a general-purpose register (full register in 16-bit
--   mode)
Reg16 :: GPR -> Register

-- | Low 32 bits of a general-purpose register (full register in 32-bit
--   mode)
Reg32 :: GPR -> Register

-- | Full 64-bit general-purpose register
Reg64 :: GPR -> Register

-- | Segment register
RegSeg :: Segment -> Register

-- | Control register
RegCtl :: ControlRegister -> Register

-- | Debug register
RegDbg :: DebugRegister -> Register

-- | MMX register
RegMMX :: MMXRegister -> Register

-- | <tt>x87</tt> floating point unit register
RegX87 :: X87Register -> Register

-- | XMM register
RegXMM :: XMMRegister -> Register

-- | Instruction pointer
RegIP :: Register

-- | A general-purpose register.
--   
--   The names are taken from the 64-bit architecture, but they map onto
--   other modes in the obvious way.
data GPR
RAX :: GPR
RCX :: GPR
RDX :: GPR
RBX :: GPR
RSP :: GPR
RBP :: GPR
RSI :: GPR
RDI :: GPR
R8 :: GPR
R9 :: GPR
R10 :: GPR
R11 :: GPR
R12 :: GPR
R13 :: GPR
R14 :: GPR
R15 :: GPR

-- | Indicates which half of a 16-bit register is used as an 8-bit
--   register.
data Half

-- | Low or least significant 8 bits
L :: Half

-- | High or most significant 8 bits
H :: Half

-- | A segment register.
data Segment
ES :: Segment
CS :: Segment
SS :: Segment
DS :: Segment
FS :: Segment
GS :: Segment

-- | A control register.
data ControlRegister
CR0 :: ControlRegister
CR1 :: ControlRegister
CR2 :: ControlRegister
CR3 :: ControlRegister
CR4 :: ControlRegister
CR5 :: ControlRegister
CR6 :: ControlRegister
CR7 :: ControlRegister
CR8 :: ControlRegister
CR9 :: ControlRegister
CR10 :: ControlRegister
CR11 :: ControlRegister
CR12 :: ControlRegister
CR13 :: ControlRegister
CR14 :: ControlRegister
CR15 :: ControlRegister

-- | A debug register.
data DebugRegister
DR0 :: DebugRegister
DR1 :: DebugRegister
DR2 :: DebugRegister
DR3 :: DebugRegister
DR4 :: DebugRegister
DR5 :: DebugRegister
DR6 :: DebugRegister
DR7 :: DebugRegister
DR8 :: DebugRegister
DR9 :: DebugRegister
DR10 :: DebugRegister
DR11 :: DebugRegister
DR12 :: DebugRegister
DR13 :: DebugRegister
DR14 :: DebugRegister
DR15 :: DebugRegister

-- | An MMX register.
data MMXRegister
MM0 :: MMXRegister
MM1 :: MMXRegister
MM2 :: MMXRegister
MM3 :: MMXRegister
MM4 :: MMXRegister
MM5 :: MMXRegister
MM6 :: MMXRegister
MM7 :: MMXRegister

-- | An <tt>x87</tt> floating-point unit register.
data X87Register
ST0 :: X87Register
ST1 :: X87Register
ST2 :: X87Register
ST3 :: X87Register
ST4 :: X87Register
ST5 :: X87Register
ST6 :: X87Register
ST7 :: X87Register

-- | An XMM register.
data XMMRegister
XMM0 :: XMMRegister
XMM1 :: XMMRegister
XMM2 :: XMMRegister
XMM3 :: XMMRegister
XMM4 :: XMMRegister
XMM5 :: XMMRegister
XMM6 :: XMMRegister
XMM7 :: XMMRegister
XMM8 :: XMMRegister
XMM9 :: XMMRegister
XMM10 :: XMMRegister
XMM11 :: XMMRegister
XMM12 :: XMMRegister
XMM13 :: XMMRegister
XMM14 :: XMMRegister
XMM15 :: XMMRegister

-- | Machine word sizes.
--   
--   Some fields, such as immediate operands, come in different widths. We
--   store the equivalent integer value in a <tt><a>Word64</a></tt>, along
--   with a <tt><a>WordSize</a></tt> to indicate the original width.
data WordSize

-- | Field not present, value will be 0
Bits0 :: WordSize
Bits8 :: WordSize
Bits16 :: WordSize
Bits32 :: WordSize
Bits48 :: WordSize
Bits64 :: WordSize
Bits80 :: WordSize

-- | Convert a number of bits to a <tt><a>WordSize</a></tt>.
wordSize :: Word8 -> Maybe WordSize

-- | Number of bits in a word of a given size.
bitsInWord :: WordSize -> Word8

-- | An instruction with full metadata.
data Metadata
Metadata :: Word64 -> Word -> String -> ByteString -> String -> Instruction -> Metadata

-- | Offset of the start of this instruction
mdOffset :: Metadata -> Word64

-- | Length of this instruction in bytes
mdLength :: Metadata -> Word

-- | Hexadecimal representation of this instruction
mdHex :: Metadata -> String

-- | Bytes that make up this instruction
mdBytes :: Metadata -> ByteString

-- | Assembly code for this instruction
mdAssembly :: Metadata -> String

-- | The instruction itself
mdInst :: Metadata -> Instruction

-- | Overall configuration of the disassembler.
data Config
Config :: Vendor -> CPUMode -> Syntax -> Word64 -> Config

-- | CPU vendor; determines the instruction set used
cfgVendor :: Config -> Vendor

-- | Disassemble 16-, 32-, or 64-bit code
cfgCPUMode :: Config -> CPUMode

-- | Syntax to use when generating assembly
cfgSyntax :: Config -> Syntax

-- | Address where the first instruction would live in memory
cfgOrigin :: Config -> Word64

-- | CPU vendors, supporting slightly different instruction sets.
data Vendor
Intel :: Vendor
AMD :: Vendor

-- | CPU execution mode.
data CPUMode

-- | 16-bit mode
Mode16 :: CPUMode

-- | 32-bit mode
Mode32 :: CPUMode

-- | 64-bit mode
Mode64 :: CPUMode

-- | Selection of assembly output syntax.
data Syntax

-- | Don't generate assembly syntax
SyntaxNone :: Syntax

-- | Intel- / NASM-like syntax
SyntaxIntel :: Syntax

-- | AT&amp;T- / <tt>gas</tt>-like syntax
SyntaxATT :: Syntax
intel32, amd64, amd32, intel64 :: Config
data Opcode
I3dnow :: Opcode
Iaaa :: Opcode
Iaad :: Opcode
Iaam :: Opcode
Iaas :: Opcode
Iadc :: Opcode
Iadd :: Opcode
Iaddpd :: Opcode
Iaddps :: Opcode
Iaddsd :: Opcode
Iaddss :: Opcode
Iaddsubpd :: Opcode
Iaddsubps :: Opcode
Iand :: Opcode
Iandpd :: Opcode
Iandps :: Opcode
Iandnpd :: Opcode
Iandnps :: Opcode
Iarpl :: Opcode
Imovsxd :: Opcode
Ibound :: Opcode
Ibsf :: Opcode
Ibsr :: Opcode
Ibswap :: Opcode
Ibt :: Opcode
Ibtc :: Opcode
Ibtr :: Opcode
Ibts :: Opcode
Icall :: Opcode
Icbw :: Opcode
Icwde :: Opcode
Icdqe :: Opcode
Iclc :: Opcode
Icld :: Opcode
Iclflush :: Opcode
Iclgi :: Opcode
Icli :: Opcode
Iclts :: Opcode
Icmc :: Opcode
Icmovo :: Opcode
Icmovno :: Opcode
Icmovb :: Opcode
Icmovae :: Opcode
Icmovz :: Opcode
Icmovnz :: Opcode
Icmovbe :: Opcode
Icmova :: Opcode
Icmovs :: Opcode
Icmovns :: Opcode
Icmovp :: Opcode
Icmovnp :: Opcode
Icmovl :: Opcode
Icmovge :: Opcode
Icmovle :: Opcode
Icmovg :: Opcode
Icmp :: Opcode
Icmppd :: Opcode
Icmpps :: Opcode
Icmpsb :: Opcode
Icmpsw :: Opcode
Icmpsd :: Opcode
Icmpsq :: Opcode
Icmpss :: Opcode
Icmpxchg :: Opcode
Icmpxchg8b :: Opcode
Icomisd :: Opcode
Icomiss :: Opcode
Icpuid :: Opcode
Icvtdq2pd :: Opcode
Icvtdq2ps :: Opcode
Icvtpd2dq :: Opcode
Icvtpd2pi :: Opcode
Icvtpd2ps :: Opcode
Icvtpi2ps :: Opcode
Icvtpi2pd :: Opcode
Icvtps2dq :: Opcode
Icvtps2pi :: Opcode
Icvtps2pd :: Opcode
Icvtsd2si :: Opcode
Icvtsd2ss :: Opcode
Icvtsi2ss :: Opcode
Icvtss2si :: Opcode
Icvtss2sd :: Opcode
Icvttpd2pi :: Opcode
Icvttpd2dq :: Opcode
Icvttps2dq :: Opcode
Icvttps2pi :: Opcode
Icvttsd2si :: Opcode
Icvtsi2sd :: Opcode
Icvttss2si :: Opcode
Icwd :: Opcode
Icdq :: Opcode
Icqo :: Opcode
Idaa :: Opcode
Idas :: Opcode
Idec :: Opcode
Idiv :: Opcode
Idivpd :: Opcode
Idivps :: Opcode
Idivsd :: Opcode
Idivss :: Opcode
Iemms :: Opcode
Ienter :: Opcode
If2xm1 :: Opcode
Ifabs :: Opcode
Ifadd :: Opcode
Ifaddp :: Opcode
Ifbld :: Opcode
Ifbstp :: Opcode
Ifchs :: Opcode
Ifclex :: Opcode
Ifcmovb :: Opcode
Ifcmove :: Opcode
Ifcmovbe :: Opcode
Ifcmovu :: Opcode
Ifcmovnb :: Opcode
Ifcmovne :: Opcode
Ifcmovnbe :: Opcode
Ifcmovnu :: Opcode
Ifucomi :: Opcode
Ifcom :: Opcode
Ifcom2 :: Opcode
Ifcomp3 :: Opcode
Ifcomi :: Opcode
Ifucomip :: Opcode
Ifcomip :: Opcode
Ifcomp :: Opcode
Ifcomp5 :: Opcode
Ifcompp :: Opcode
Ifcos :: Opcode
Ifdecstp :: Opcode
Ifdiv :: Opcode
Ifdivp :: Opcode
Ifdivr :: Opcode
Ifdivrp :: Opcode
Ifemms :: Opcode
Iffree :: Opcode
Iffreep :: Opcode
Ificom :: Opcode
Ificomp :: Opcode
Ifild :: Opcode
Ifncstp :: Opcode
Ifninit :: Opcode
Ifiadd :: Opcode
Ifidivr :: Opcode
Ifidiv :: Opcode
Ifisub :: Opcode
Ifisubr :: Opcode
Ifist :: Opcode
Ifistp :: Opcode
Ifisttp :: Opcode
Ifld :: Opcode
Ifld1 :: Opcode
Ifldl2t :: Opcode
Ifldl2e :: Opcode
Ifldlpi :: Opcode
Ifldlg2 :: Opcode
Ifldln2 :: Opcode
Ifldz :: Opcode
Ifldcw :: Opcode
Ifldenv :: Opcode
Ifmul :: Opcode
Ifmulp :: Opcode
Ifimul :: Opcode
Ifnop :: Opcode
Ifpatan :: Opcode
Ifprem :: Opcode
Ifprem1 :: Opcode
Ifptan :: Opcode
Ifrndint :: Opcode
Ifrstor :: Opcode
Ifnsave :: Opcode
Ifscale :: Opcode
Ifsin :: Opcode
Ifsincos :: Opcode
Ifsqrt :: Opcode
Ifstp :: Opcode
Ifstp1 :: Opcode
Ifstp8 :: Opcode
Ifstp9 :: Opcode
Ifst :: Opcode
Ifnstcw :: Opcode
Ifnstenv :: Opcode
Ifnstsw :: Opcode
Ifsub :: Opcode
Ifsubp :: Opcode
Ifsubr :: Opcode
Ifsubrp :: Opcode
Iftst :: Opcode
Ifucom :: Opcode
Ifucomp :: Opcode
Ifucompp :: Opcode
Ifxam :: Opcode
Ifxch :: Opcode
Ifxch4 :: Opcode
Ifxch7 :: Opcode
Ifxrstor :: Opcode
Ifxsave :: Opcode
Ifpxtract :: Opcode
Ifyl2x :: Opcode
Ifyl2xp1 :: Opcode
Ihaddpd :: Opcode
Ihaddps :: Opcode
Ihlt :: Opcode
Ihsubpd :: Opcode
Ihsubps :: Opcode
Iidiv :: Opcode
Iin :: Opcode
Iimul :: Opcode
Iinc :: Opcode
Iinsb :: Opcode
Iinsw :: Opcode
Iinsd :: Opcode
Iint1 :: Opcode
Iint3 :: Opcode
Iint :: Opcode
Iinto :: Opcode
Iinvd :: Opcode
Iinvlpg :: Opcode
Iinvlpga :: Opcode
Iiretw :: Opcode
Iiretd :: Opcode
Iiretq :: Opcode
Ijo :: Opcode
Ijno :: Opcode
Ijb :: Opcode
Ijae :: Opcode
Ijz :: Opcode
Ijnz :: Opcode
Ijbe :: Opcode
Ija :: Opcode
Ijs :: Opcode
Ijns :: Opcode
Ijp :: Opcode
Ijnp :: Opcode
Ijl :: Opcode
Ijge :: Opcode
Ijle :: Opcode
Ijg :: Opcode
Ijcxz :: Opcode
Ijecxz :: Opcode
Ijrcxz :: Opcode
Ijmp :: Opcode
Ilahf :: Opcode
Ilar :: Opcode
Ilddqu :: Opcode
Ildmxcsr :: Opcode
Ilds :: Opcode
Ilea :: Opcode
Iles :: Opcode
Ilfs :: Opcode
Ilgs :: Opcode
Ilidt :: Opcode
Ilss :: Opcode
Ileave :: Opcode
Ilfence :: Opcode
Ilgdt :: Opcode
Illdt :: Opcode
Ilmsw :: Opcode
Ilock :: Opcode
Ilodsb :: Opcode
Ilodsw :: Opcode
Ilodsd :: Opcode
Ilodsq :: Opcode
Iloopnz :: Opcode
Iloope :: Opcode
Iloop :: Opcode
Ilsl :: Opcode
Iltr :: Opcode
Imaskmovq :: Opcode
Imaxpd :: Opcode
Imaxps :: Opcode
Imaxsd :: Opcode
Imaxss :: Opcode
Imfence :: Opcode
Iminpd :: Opcode
Iminps :: Opcode
Iminsd :: Opcode
Iminss :: Opcode
Imonitor :: Opcode
Imov :: Opcode
Imovapd :: Opcode
Imovaps :: Opcode
Imovd :: Opcode
Imovddup :: Opcode
Imovdqa :: Opcode
Imovdqu :: Opcode
Imovdq2q :: Opcode
Imovhpd :: Opcode
Imovhps :: Opcode
Imovlhps :: Opcode
Imovlpd :: Opcode
Imovlps :: Opcode
Imovhlps :: Opcode
Imovmskpd :: Opcode
Imovmskps :: Opcode
Imovntdq :: Opcode
Imovnti :: Opcode
Imovntpd :: Opcode
Imovntps :: Opcode
Imovntq :: Opcode
Imovq :: Opcode
Imovqa :: Opcode
Imovq2dq :: Opcode
Imovsb :: Opcode
Imovsw :: Opcode
Imovsd :: Opcode
Imovsq :: Opcode
Imovsldup :: Opcode
Imovshdup :: Opcode
Imovss :: Opcode
Imovsx :: Opcode
Imovupd :: Opcode
Imovups :: Opcode
Imovzx :: Opcode
Imul :: Opcode
Imulpd :: Opcode
Imulps :: Opcode
Imulsd :: Opcode
Imulss :: Opcode
Imwait :: Opcode
Ineg :: Opcode
Inop :: Opcode
Inot :: Opcode
Ior :: Opcode
Iorpd :: Opcode
Iorps :: Opcode
Iout :: Opcode
Ioutsb :: Opcode
Ioutsw :: Opcode
Ioutsd :: Opcode
Ioutsq :: Opcode
Ipacksswb :: Opcode
Ipackssdw :: Opcode
Ipackuswb :: Opcode
Ipaddb :: Opcode
Ipaddw :: Opcode
Ipaddq :: Opcode
Ipaddsb :: Opcode
Ipaddsw :: Opcode
Ipaddusb :: Opcode
Ipaddusw :: Opcode
Ipand :: Opcode
Ipandn :: Opcode
Ipause :: Opcode
Ipavgb :: Opcode
Ipavgw :: Opcode
Ipcmpeqb :: Opcode
Ipcmpeqw :: Opcode
Ipcmpeqd :: Opcode
Ipcmpgtb :: Opcode
Ipcmpgtw :: Opcode
Ipcmpgtd :: Opcode
Ipextrw :: Opcode
Ipinsrw :: Opcode
Ipmaddwd :: Opcode
Ipmaxsw :: Opcode
Ipmaxub :: Opcode
Ipminsw :: Opcode
Ipminub :: Opcode
Ipmovmskb :: Opcode
Ipmulhuw :: Opcode
Ipmulhw :: Opcode
Ipmullw :: Opcode
Ipmuludq :: Opcode
Ipop :: Opcode
Ipopa :: Opcode
Ipopad :: Opcode
Ipopfw :: Opcode
Ipopfd :: Opcode
Ipopfq :: Opcode
Ipor :: Opcode
Iprefetch :: Opcode
Iprefetchnta :: Opcode
Iprefetcht0 :: Opcode
Iprefetcht1 :: Opcode
Iprefetcht2 :: Opcode
Ipsadbw :: Opcode
Ipshufd :: Opcode
Ipshufhw :: Opcode
Ipshuflw :: Opcode
Ipshufw :: Opcode
Ipslldq :: Opcode
Ipsllw :: Opcode
Ipslld :: Opcode
Ipsllq :: Opcode
Ipsraw :: Opcode
Ipsrad :: Opcode
Ipsrlw :: Opcode
Ipsrld :: Opcode
Ipsrlq :: Opcode
Ipsrldq :: Opcode
Ipsubb :: Opcode
Ipsubw :: Opcode
Ipsubd :: Opcode
Ipsubq :: Opcode
Ipsubsb :: Opcode
Ipsubsw :: Opcode
Ipsubusb :: Opcode
Ipsubusw :: Opcode
Ipunpckhbw :: Opcode
Ipunpckhwd :: Opcode
Ipunpckhdq :: Opcode
Ipunpckhqdq :: Opcode
Ipunpcklbw :: Opcode
Ipunpcklwd :: Opcode
Ipunpckldq :: Opcode
Ipunpcklqdq :: Opcode
Ipi2fw :: Opcode
Ipi2fd :: Opcode
Ipf2iw :: Opcode
Ipf2id :: Opcode
Ipfnacc :: Opcode
Ipfpnacc :: Opcode
Ipfcmpge :: Opcode
Ipfmin :: Opcode
Ipfrcp :: Opcode
Ipfrsqrt :: Opcode
Ipfsub :: Opcode
Ipfadd :: Opcode
Ipfcmpgt :: Opcode
Ipfmax :: Opcode
Ipfrcpit1 :: Opcode
Ipfrspit1 :: Opcode
Ipfsubr :: Opcode
Ipfacc :: Opcode
Ipfcmpeq :: Opcode
Ipfmul :: Opcode
Ipfrcpit2 :: Opcode
Ipmulhrw :: Opcode
Ipswapd :: Opcode
Ipavgusb :: Opcode
Ipush :: Opcode
Ipusha :: Opcode
Ipushad :: Opcode
Ipushfw :: Opcode
Ipushfd :: Opcode
Ipushfq :: Opcode
Ipxor :: Opcode
Ircl :: Opcode
Ircr :: Opcode
Irol :: Opcode
Iror :: Opcode
Ircpps :: Opcode
Ircpss :: Opcode
Irdmsr :: Opcode
Irdpmc :: Opcode
Irdtsc :: Opcode
Irdtscp :: Opcode
Irepne :: Opcode
Irep :: Opcode
Iret :: Opcode
Iretf :: Opcode
Irsm :: Opcode
Irsqrtps :: Opcode
Irsqrtss :: Opcode
Isahf :: Opcode
Isal :: Opcode
Isalc :: Opcode
Isar :: Opcode
Ishl :: Opcode
Ishr :: Opcode
Isbb :: Opcode
Iscasb :: Opcode
Iscasw :: Opcode
Iscasd :: Opcode
Iscasq :: Opcode
Iseto :: Opcode
Isetno :: Opcode
Isetb :: Opcode
Isetnb :: Opcode
Isetz :: Opcode
Isetnz :: Opcode
Isetbe :: Opcode
Iseta :: Opcode
Isets :: Opcode
Isetns :: Opcode
Isetp :: Opcode
Isetnp :: Opcode
Isetl :: Opcode
Isetge :: Opcode
Isetle :: Opcode
Isetg :: Opcode
Isfence :: Opcode
Isgdt :: Opcode
Ishld :: Opcode
Ishrd :: Opcode
Ishufpd :: Opcode
Ishufps :: Opcode
Isidt :: Opcode
Isldt :: Opcode
Ismsw :: Opcode
Isqrtps :: Opcode
Isqrtpd :: Opcode
Isqrtsd :: Opcode
Isqrtss :: Opcode
Istc :: Opcode
Istd :: Opcode
Istgi :: Opcode
Isti :: Opcode
Iskinit :: Opcode
Istmxcsr :: Opcode
Istosb :: Opcode
Istosw :: Opcode
Istosd :: Opcode
Istosq :: Opcode
Istr :: Opcode
Isub :: Opcode
Isubpd :: Opcode
Isubps :: Opcode
Isubsd :: Opcode
Isubss :: Opcode
Iswapgs :: Opcode
Isyscall :: Opcode
Isysenter :: Opcode
Isysexit :: Opcode
Isysret :: Opcode
Itest :: Opcode
Iucomisd :: Opcode
Iucomiss :: Opcode
Iud2 :: Opcode
Iunpckhpd :: Opcode
Iunpckhps :: Opcode
Iunpcklps :: Opcode
Iunpcklpd :: Opcode
Iverr :: Opcode
Iverw :: Opcode
Ivmcall :: Opcode
Ivmclear :: Opcode
Ivmxon :: Opcode
Ivmptrld :: Opcode
Ivmptrst :: Opcode
Ivmresume :: Opcode
Ivmxoff :: Opcode
Ivmrun :: Opcode
Ivmmcall :: Opcode
Ivmload :: Opcode
Ivmsave :: Opcode
Iwait :: Opcode
Iwbinvd :: Opcode
Iwrmsr :: Opcode
Ixadd :: Opcode
Ixchg :: Opcode
Ixlatb :: Opcode
Ixor :: Opcode
Ixorpd :: Opcode
Ixorps :: Opcode
Idb :: Opcode
Iinvalid :: Opcode
Id3vil :: Opcode
Ina :: Opcode
Igrp_reg :: Opcode
Igrp_rm :: Opcode
Igrp_vendor :: Opcode
Igrp_x87 :: Opcode
Igrp_mode :: Opcode
Igrp_osize :: Opcode
Igrp_asize :: Opcode
Igrp_mod :: Opcode
Inone :: Opcode
instance Typeable WordSize
instance Typeable GPR
instance Typeable Half
instance Typeable Segment
instance Typeable ControlRegister
instance Typeable DebugRegister
instance Typeable MMXRegister
instance Typeable X87Register
instance Typeable XMMRegister
instance Typeable Register
instance Typeable Prefix
instance Typeable1 Immediate
instance Typeable Pointer
instance Typeable Memory
instance Typeable Operand
instance Typeable Instruction
instance Typeable Metadata
instance Typeable Vendor
instance Typeable Syntax
instance Typeable CPUMode
instance Typeable Config
instance Eq WordSize
instance Ord WordSize
instance Show WordSize
instance Read WordSize
instance Data WordSize
instance Enum WordSize
instance Bounded WordSize
instance Eq GPR
instance Ord GPR
instance Show GPR
instance Read GPR
instance Data GPR
instance Enum GPR
instance Bounded GPR
instance Eq Half
instance Ord Half
instance Show Half
instance Read Half
instance Data Half
instance Enum Half
instance Bounded Half
instance Eq Segment
instance Ord Segment
instance Show Segment
instance Read Segment
instance Data Segment
instance Enum Segment
instance Bounded Segment
instance Eq ControlRegister
instance Ord ControlRegister
instance Show ControlRegister
instance Read ControlRegister
instance Data ControlRegister
instance Enum ControlRegister
instance Bounded ControlRegister
instance Eq DebugRegister
instance Ord DebugRegister
instance Show DebugRegister
instance Read DebugRegister
instance Data DebugRegister
instance Enum DebugRegister
instance Bounded DebugRegister
instance Eq MMXRegister
instance Ord MMXRegister
instance Show MMXRegister
instance Read MMXRegister
instance Data MMXRegister
instance Enum MMXRegister
instance Bounded MMXRegister
instance Eq X87Register
instance Ord X87Register
instance Show X87Register
instance Read X87Register
instance Data X87Register
instance Enum X87Register
instance Bounded X87Register
instance Eq XMMRegister
instance Ord XMMRegister
instance Show XMMRegister
instance Read XMMRegister
instance Data XMMRegister
instance Enum XMMRegister
instance Bounded XMMRegister
instance Eq Register
instance Ord Register
instance Show Register
instance Read Register
instance Data Register
instance Eq Prefix
instance Ord Prefix
instance Show Prefix
instance Read Prefix
instance Data Prefix
instance Eq t => Eq (Immediate t)
instance Ord t => Ord (Immediate t)
instance Show t => Show (Immediate t)
instance Read t => Read (Immediate t)
instance Data t => Data (Immediate t)
instance Eq Pointer
instance Ord Pointer
instance Show Pointer
instance Read Pointer
instance Data Pointer
instance Eq Memory
instance Ord Memory
instance Show Memory
instance Read Memory
instance Data Memory
instance Eq Operand
instance Ord Operand
instance Show Operand
instance Read Operand
instance Data Operand
instance Eq Instruction
instance Ord Instruction
instance Data Instruction
instance Eq Metadata
instance Ord Metadata
instance Show Metadata
instance Read Metadata
instance Data Metadata
instance Eq Vendor
instance Ord Vendor
instance Show Vendor
instance Read Vendor
instance Enum Vendor
instance Bounded Vendor
instance Data Vendor
instance Eq Syntax
instance Ord Syntax
instance Show Syntax
instance Read Syntax
instance Enum Syntax
instance Bounded Syntax
instance Data Syntax
instance Eq CPUMode
instance Ord CPUMode
instance Show CPUMode
instance Read CPUMode
instance Enum CPUMode
instance Bounded CPUMode
instance Data CPUMode
instance Eq Config
instance Ord Config
instance Show Config
instance Read Config
instance Data Config
instance Arbitrary Config
instance Arbitrary Instruction
instance Arbitrary Prefix
instance Arbitrary Operand
instance Arbitrary Memory
instance Arbitrary Pointer
instance Arbitrary t => Arbitrary (Immediate t)
instance Arbitrary Register
instance Arbitrary Opcode
instance Arbitrary Syntax
instance Arbitrary CPUMode
instance Arbitrary Vendor
instance Arbitrary WordSize
instance Arbitrary XMMRegister
instance Arbitrary X87Register
instance Arbitrary MMXRegister
instance Arbitrary DebugRegister
instance Arbitrary ControlRegister
instance Arbitrary Segment
instance Arbitrary Half
instance Arbitrary GPR
instance Read Instruction
instance Show Instruction


-- | Internal module; use at your own risk.
module Hdis86.Internal.Map
data UDTM v
makeUDTM :: [(UD_type, v)] -> UDTM v
lookupUDTM :: UD_type -> UDTM v -> Maybe v
register :: CUInt -> Register
opcode :: CUInt -> Opcode


-- | Interface to the <tt>udis86</tt> disassembler.
--   
--   The goal at this level of wrapping is to provide the maximum
--   feature-set from the underlying C library, with the minimum of
--   C-related headaches. Therefore, this module's API is thoroughly
--   imperative, but uses Haskellish types and automatic resource
--   management.
--   
--   For a higher-level, <tt>IO</tt>-free API, see <a>Hdis86.Pure</a>.
--   
--   This module is fully thread-safe: any number of threads may manipulate
--   one or several <tt><a>UD</a></tt> objects at the same time. The
--   individual operations exported by this module are guaranteed to be
--   atomic.
module Hdis86.IO

-- | Abstract type representing an instance of the disassembler.
data UD

-- | Create a new disassembler instance.
--   
--   There is no <tt>deleteUD</tt>. Associated resources will be freed
--   automatically after this <tt><a>UD</a></tt> value becomes unreachable.
newUD :: IO UD

-- | Set up the <tt><a>UD</a></tt> instance to read machine code from a
--   <tt><a>ByteString</a></tt>.
--   
--   This library does not copy the contents of the
--   <tt><a>ByteString</a></tt>. It will hold onto the value until another
--   input source is selected, or until the <tt><a>UD</a></tt> value
--   becomes unreachable.
--   
--   This means that <tt><a>setInputBuffer</a></tt> is both safe and
--   efficient, but it may inhibit garbage collection of a larger
--   <tt><a>ByteString</a></tt> containing the input. To prevent this, use
--   <tt>ByteString.</tt><tt><a>copy</a></tt>.
setInputBuffer :: UD -> ByteString -> IO ()

-- | A custom input source.
--   
--   Each time this action is executed, it should return a single byte of
--   input, or <tt><a>Nothing</a></tt> if there are no more bytes to read.
type InputHook = IO (Maybe Word8)

-- | Register an <tt><a>InputHook</a></tt> to provide machine code to
--   disassemble.
setInputHook :: UD -> InputHook -> IO ()

-- | Clear any previous input source setting.
--   
--   This allows the <tt><a>UD</a></tt> instance to free any resources
--   associated with the input source. Those resources would be freed
--   automatically after the <tt><a>UD</a></tt> value becomes unreachable,
--   but you can use <tt><a>unsetInput</a></tt> to force this to happen
--   earlier.
unsetInput :: UD -> IO ()

-- | Disassemble the next instruction and return its length in bytes, or
--   <tt><a>Nothing</a></tt> if there are no more instructions.
advance :: UD -> IO (Maybe Word)

-- | Skip the next <i>n</i> bytes of the input.
skip :: UD -> Word -> IO ()

-- | Set the instruction pointer, i.e. the disassembler's idea of where the
--   current instruction would live in memory.
setIP :: UD -> Word64 -> IO ()

-- | A convenience function which calls <tt><a>advance</a></tt> repeatedly
--   while instructions remain.
--   
--   At each instruction the user-specified action is performed, and the
--   results are collected. The <tt><a>UD</a></tt> value is not passed as
--   an argument, but it's easy enough to close over it when defining your
--   action.
run :: UD -> IO a -> IO [a]

-- | Get the current instruction.
getInstruction :: UD -> IO Instruction

-- | Get the length of the current instruction in bytes.
getLength :: UD -> IO Word

-- | Get the offset of the current instruction. This value is set by
--   <tt><tt>getIP</tt></tt> and updated after each call to
--   <tt><a>advance</a></tt>.
getOffset :: UD -> IO Word64

-- | Get the current instruction's machine code as a hexadecimal string.
getHex :: UD -> IO String

-- | Get the current instruction's machine code as a
--   <tt><a>ByteString</a></tt>.
--   
--   The bytes are copied out of internal state.
getBytes :: UD -> IO ByteString

-- | Get the assembly syntax for the current instruction.
--   
--   See also <tt><a>setSyntax</a></tt>.
getAssembly :: UD -> IO String

-- | Get all metadata about the current instruction, along with the
--   instruction itself.
getMetadata :: UD -> IO Metadata

-- | Set an overall configuration.
--   
--   Calls each of <tt><a>setVendor</a></tt>, <tt><a>setCPUMode</a></tt>,
--   <tt><a>setSyntax</a></tt>, <tt><a>setIP</a></tt>.
setConfig :: UD -> Config -> IO ()

-- | Choose an instruction set variation.
setVendor :: UD -> Vendor -> IO ()

-- | Set the CPU mode, i.e. 16-bit, 32-bit, or 64-bit.
setCPUMode :: UD -> CPUMode -> IO ()

-- | Set the assembly syntax to be used by <tt><a>getAssembly</a></tt>.
--   
--   This takes effect after the next call to
--   <tt><tt>disassemble</tt></tt>.
setSyntax :: UD -> Syntax -> IO ()

-- | Register an action to be performed after each instruction is
--   disassembled.
--   
--   This is not necessary for using the library. An alternative is to
--   perform the action in a loop which also calls <tt><a>advance</a></tt>.
--   
--   This disables updating of the string returned by
--   <tt><a>getAssembly</a></tt>.
setCallback :: UD -> IO () -> IO ()

-- | Set up the <tt><a>UD</a></tt> instance to read directly from memory.
--   
--   Given are a pointer to a memory region, and the length of that region.
--   
--   This is an unsafe operation because the contents of the memory region
--   might change, especially if it's part of the heap managed by GHC's
--   garbage collector.
--   
--   You are responsible for ensuring that the memory pointed to does not
--   change or become invalid until another input source is selected. You
--   cannot rely on garbage collection of the <tt><a>UD</a></tt> value,
--   because finalization may be delayed arbitrarily long after the value
--   becomes unreachable.
--   
--   It should be safe to use this on the static code segment of your
--   process, which is useful when your Haskell program needs to
--   disassemble itself.
unsafeSetInputPtr :: UD -> Ptr Word8 -> Word -> IO ()

-- | Lazy version of <tt><a>run</a></tt>; calls into the C library as
--   elements of its result list are forced.
--   
--   This has roughly the same caveats as
--   <tt><a>unsafeInterleaveIO</a></tt>.
unsafeRunLazy :: UD -> IO a -> IO [a]
instance Typeable UD


-- | Interface to the <tt>udis86</tt> disassembler.
--   
--   This is the simplest, most high-level interface.
--   
--   See <a>Hdis86.IO</a> if you need more control or performance.
module Hdis86.Pure

-- | Disassemble machine code.
--   
--   Common values for <tt><a>Config</a></tt> such as
--   <tt><a>intel32</a></tt> or <tt><a>amd64</a></tt> are provided in
--   <a>Hdis86.Types</a>.
--   
--   The output is produced lazily.
disassemble :: Config -> ByteString -> [Instruction]

-- | Disassemble machine code, with full metadata.
--   
--   The output is produced lazily.
disassembleMetadata :: Config -> ByteString -> [Metadata]

-- | An instruction with full metadata.
data Metadata
Metadata :: Word64 -> Word -> String -> ByteString -> String -> Instruction -> Metadata

-- | Offset of the start of this instruction
mdOffset :: Metadata -> Word64

-- | Length of this instruction in bytes
mdLength :: Metadata -> Word

-- | Hexadecimal representation of this instruction
mdHex :: Metadata -> String

-- | Bytes that make up this instruction
mdBytes :: Metadata -> ByteString

-- | Assembly code for this instruction
mdAssembly :: Metadata -> String

-- | The instruction itself
mdInst :: Metadata -> Instruction


-- | Incremental pure disassembly.
module Hdis86.Incremental

-- | Split a <tt><a>ByteString</a></tt> into an instruction and the
--   remaining <tt><a>ByteString</a></tt>.
--   
--   Returns <tt><a>Nothing</a></tt> if the input is empty or contains an
--   incomplete instruction.
disassembleOne :: Config -> ByteString -> Maybe (Metadata, ByteString)

-- | Disassemble a lazy <tt><a>ByteString</a></tt>.
--   
--   The output is produced lazily.
disassembleLazy :: Config -> ByteString -> [Metadata]


-- | Interface to the <tt>udis86</tt> disassembler.
--   
--   Exports the simplest, most high-level interface.
module Hdis86

-- | Disassemble machine code.
--   
--   Common values for <tt><a>Config</a></tt> such as
--   <tt><a>intel32</a></tt> or <tt><a>amd64</a></tt> are provided in
--   <a>Hdis86.Types</a>.
--   
--   The output is produced lazily.
disassemble :: Config -> ByteString -> [Instruction]

-- | Disassemble machine code, with full metadata.
--   
--   The output is produced lazily.
disassembleMetadata :: Config -> ByteString -> [Metadata]
