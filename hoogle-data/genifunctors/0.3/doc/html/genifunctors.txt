-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generate generalized fmap, foldMap and traverse
--   
@package genifunctors
@version 0.3


-- | Generate (derive) generalized <a>fmap</a>, <tt>foldMap</tt> and
--   <tt>traverse</tt> for Bifunctors, Trifunctors, or a functor with any
--   arity
--   
--   Example:
--   
--   <pre>
--   data U a b c d
--       = L [U a b c d]               -- polymorphic recursion
--       | M (V (a,b) (Either c d))    -- mutually recursive
--       | a :+: Int                   -- infix syntax, record syntax, type synonyms
--       | R { c :: c, d :: String }   -- and primitive data types supported
--   
--   data V u v = X (U v v u u) | Z u
--   
--   fmapU :: (a -&gt; a') -&gt; (b -&gt; b') -&gt; (c -&gt; c') -&gt; (d -&gt; d') -&gt; U a b c d -&gt; U a' b' c' d'
--   fmapU = $(genFmap ''U)
--   
--   foldU :: Monoid m =&gt; (a -&gt; m) -&gt; (b -&gt; m) -&gt; (c -&gt; m) -&gt; (d -&gt; m) -&gt; U a b c d -&gt; m
--   foldU = $(genFoldMap ''U)
--   
--   travU :: Applicative f =&gt; (a -&gt; f a') -&gt; (b -&gt; f b') -&gt; (c -&gt; f c') -&gt; (d -&gt; f d') -&gt; U a b c d -&gt; f (U a' b' c' d')
--   travU = $(genTraverse ''U)
--    
--   </pre>
--   
--   <a>genFoldMapT</a> and <a>genTraverseT</a> allow for specifying custom
--   functions to handle subparts of a specific type. The compiler will
--   throw an error if any of the types is actually a type synonym.
module Data.Generics.Genifunctors

-- | Generate generalized <a>fmap</a> for a type
--   
--   <pre>
--   bimapTuple :: (a -&gt; a') -&gt; (b -&gt; b') -&gt; (a,b) -&gt; (a',b')
--   bimapTuple = $(genFmap ''(,))
--    
--   </pre>
genFmap :: Name -> Q Exp

-- | Generate generalized <tt>foldMap</tt> for a type
--   
--   <pre>
--   foldMapEither :: Monoid m =&gt; (a -&gt; m) -&gt; (b -&gt; m) -&gt; Either a b -&gt; m
--   foldMapEither = $(genFoldMap ''Either)
--    
--   </pre>
genFoldMap :: Name -> Q Exp

-- | Generate generalized <tt>foldMap</tt> for a type, optionally
--   traversing subparts of it with custom implementations.
--   
--   <pre>
--   foldTupleRev :: Monoid m =&gt; (a -&gt; m) -&gt; (b -&gt; m) -&gt; (a,b) -&gt; m
--   foldTupleRev f g (a,b) = g b &lt;&gt; f a
--   
--   foldUCustom :: Monoid m =&gt; (a -&gt; m) -&gt; (b -&gt; m) -&gt; (c -&gt; m) -&gt; (d -&gt; m) -&gt; U a b c d -&gt; m
--   foldUCustom = $(genFoldMapT [(''(,), 'foldTupleRev)] ''U)
--    
--   </pre>
genFoldMapT :: [(Name, Name)] -> Name -> Q Exp

-- | Generate generalized <tt>traversable</tt> for a type
--   
--   <pre>
--   travTriple :: Applicative f =&gt; (a -&gt; f a') -&gt; (b -&gt; f b') -&gt; (c -&gt; f c') -&gt; (a,b,c) -&gt; f (a',b',c')
--   travTriple = $(genTraverse ''(,,))
--    
--   </pre>
genTraverse :: Name -> Q Exp

-- | Generate generalized <tt>traversable</tt> for a type, optionally
--   traversing subparts of it with custom implementations.
--   
--   <pre>
--   travTupleRev :: Applicative f =&gt; (a -&gt; f a') -&gt; (b -&gt; f b') -&gt; (a,b) -&gt; f (a',b')
--   travTupleRev f g (a,b) = (b a -&gt; (a,b)) <a>$</a> g b <a>*</a> f a
--   
--   travUCustom :: Applicative f =&gt; (a -&gt; f a') -&gt; (b -&gt; f b') -&gt; (c -&gt; f c') -&gt; (d -&gt; f d') -&gt; U a b c d -&gt; f (U a' b' c' d')
--   travUCustom = $(genTraverseT [(''(,), 'travTupleRev), (''V, 'travVCustom)] ''U)
--   
--   travVCustom :: Applicative f =&gt; (a -&gt; f a') -&gt; (b -&gt; f b') -&gt; V a b -&gt; f (V a' b')
--   travVCustom = $(genTraverseT [(''U, 'travUCustom)] ''V)
--    
--   </pre>
genTraverseT :: [(Name, Name)] -> Name -> Q Exp
