-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Simple Key Value Store
--   
--   A Simple Key Value Store
@package HongoDB
@version 0.0.1

module Database.HongoDB.Base
class Monad m => DB m
accept :: DB m => ByteString -> (Maybe ByteString -> m (Action, a)) -> m a
get :: DB m => ByteString -> m (Maybe ByteString)
set :: DB m => ByteString -> ByteString -> m ()
add :: DB m => ByteString -> ByteString -> m Bool
remove :: DB m => ByteString -> m Bool
count :: DB m => m Int
clear :: DB m => m ()
enum :: DB m => m (Enumerator (ByteString, ByteString) m a)
data Action
Replace :: ByteString -> Action
Remove :: Action
Nop :: Action

module Database.HongoDB.HashMem
data HashMem m a
runHashMem :: MonadIO m => HashMem m a -> m a
instance Monad m => Monad (HashMem m)
instance MonadIO m => MonadIO (HashMem m)
instance MonadTrans HashMem
instance Functor m => Functor (HashMem m)
instance Applicative m => Applicative (HashMem m)
instance MonadControlIO m => MonadControlIO (HashMem m)
instance MonadControlIO m => DB (HashMem m)

module Database.HongoDB.HashFile
data HashFile m a
data HashFileState
openHashFile :: FilePath -> IO HashFileState
openHashFile' :: Int -> FilePath -> IO HashFileState
closeHashFile :: HashFileState -> IO ()
runHashFile :: MonadControlIO m => HashFileState -> HashFile m a -> m a
instance Show Header
instance Monad m => Monad (HashFile m)
instance MonadIO m => MonadIO (HashFile m)
instance MonadTrans HashFile
instance Functor m => Functor (HashFile m)
instance Applicative m => Applicative (HashFile m)
instance MonadControlIO m => MonadControlIO (HashFile m)
instance Show Record
instance (Functor m, MonadControlIO m) => DB (HashFile m)
instance Monad m => MonadReader HashFileState (HashFile m)

module Database.HongoDB
