-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | QR Code library in pure Haskell
--   
--   QR Code encoder (and future decoder) in pure Haskell.
@package qrcode
@version 0.1.2


-- | An evolving QR Code encoder (and future decoder) in pure Haskell.
--   
--   Currently supports encoding <a>Numeric</a> and <a>Alphanumeric</a>
--   data.
--   
--   Example
--   
--   <pre>
--   encode (fromJust $ version 1) M Alphanumeric "hello world"
--   </pre>
module Codec.Binary.QRCode

-- | Returns <a>Nothing</a> if the input is invalid for the <a>Mode</a>
--   specified.
encode :: Version -> ErrorLevel -> Mode -> String -> Maybe Matrix

-- | Convert a <a>Matrix</a> to an array of <a>Bounded</a> <a>Light</a>
--   modules will have the value <a>maxBound</a>; <a>Dark</a> modules will
--   have the value <a>minBound</a>
toArray :: Bounded a => Matrix -> Array (Int, Int) a

-- | The number of modules per side.
width :: Matrix -> Int

-- | Valid version number is <i>[1, 40]</i>
version :: Int -> Maybe Version

-- | Represents a QR Code symbol.
data Matrix

-- | The smallest unit in a QR Code symbol (i.e. one <a>square</a>).
data Module
Dark :: Module
Light :: Module
data Mode

-- | <pre>
--   0123456789
--   </pre>
Numeric :: Mode

-- | <pre>
--   0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-.:.
--   </pre>
--   
--   Input alphabets are automatically converted to upper case.
Alphanumeric :: Mode
data ErrorLevel

-- | Error recovery up to 7%.
L :: ErrorLevel

-- | Error recovery up to 15%.
M :: ErrorLevel

-- | Error recovery up to 25%.
Q :: ErrorLevel

-- | Error recovery up to 30%.
H :: ErrorLevel
data Version
