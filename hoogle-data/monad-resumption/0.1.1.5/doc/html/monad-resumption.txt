-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Resumption and reactive resumption monads for Haskell.
--   
@package monad-resumption
@version 0.1.1.5


-- | A resumption monad transformer, based on the formulation in the
--   article <a>Cheap (But Functional) Threads</a> by William L. Harrison
--   and Adam Procter.
module Control.Monad.Resumption

-- | Resumption monad transformer.
newtype ResT m a
ResT :: m (Either a (ResT m a)) -> ResT m a
deResT :: ResT m a -> m (Either a (ResT m a))

-- | Runs a resumptive computation to exhaustion, producing its final
--   return value.
runResT :: Monad m => ResT m a -> m a

-- | Waits until the next tick.
tick :: Monad m => ResT m ()
instance MFunctor ResT
instance MonadIO m => MonadIO (ResT m)
instance Monad m => Applicative (ResT m)
instance Monad m => Functor (ResT m)
instance MonadTrans ResT
instance Monad m => Monad (ResT m)


-- | A reactive resumption monad transformer, based on the formulation in
--   the article <a>Cheap (But Functional) Threads</a> by William L.
--   Harrison and Adam Procter.
module Control.Monad.Resumption.Reactive

-- | Reactive resumption monad transformer.
newtype ReacT input output m a
ReacT :: m (Either a (output, input -> ReacT input output m a)) -> ReacT input output m a
deReacT :: ReacT input output m a -> m (Either a (output, input -> ReacT input output m a))

-- | Outputs its argument, then waits for the next input and returns it.
signal :: Monad m => output -> ReacT input output m input

-- | Tennis operator.
(<~>) :: Monad m => ReacT i o m a -> ReacT o i m b -> ResT m (Either a b)

-- | A basic runner function. Provide the ReacT and a handler in the
--   underlying monad to run.
runReacT :: Monad m => ReacT input output m a -> (output -> m input) -> m a
instance MFunctor (ReacT i o)
instance MonadIO m => MonadIO (ReacT input output m)
instance Monad m => Applicative (ReacT input output m)
instance Monad m => Functor (ReacT input output m)
instance MonadTrans (ReacT input output)
instance Monad m => Monad (ReacT input output m)

module Control.Monad.Resumption.Connectors

-- | The parallel operator for combining computations in ReacT that share
--   the same underlying monad and halting types. No guarantees are given
--   to which device's halting message will be seen by a handler.
(<||>) :: Monad m => ReacT i1 o1 m a -> ReacT i2 o2 m a -> ReacT (i1, i2) (o1, o2) m a

-- | The refold operator changes the output and input types of a reactive
--   resumption
refold :: Monad m => (o1 -> o2) -> (o1 -> i2 -> i1) -> ReacT i1 o1 m a -> ReacT i2 o2 m a

-- | Chains two reactive resumptions together in a pipelined fashioned.
--   That is, inputs and outputs are passed along between devices
--   "tickwise".
pipeline :: Monad m => ReacT i z m a -> ReacT z o m a -> ReacT i o m a
