-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Alternative multirec instances deriver
--   
--   New features/changes:
--   
--   <ul>
--   <li>Works with arbitrary monomorphic types, e.g.
--   <tt>([Int],String)</tt>, not just names that refer to monomorphic
--   types.</li>
--   <li>The names of the "proof" constructors (= constructors of the
--   family GADT) are now specified by the user. This is useful if you're
--   working with existing code where some type's name is already taken on
--   the value level, so you can't have a proof of that name.</li>
--   <li>The names of the constructor-representing empty types are also
--   customizable now.</li>
--   <li>Optionally, the type sums in the pattern functor are
--   <i>balanced</i> trees of <tt>(:+:)</tt> rather than right-nested ones.
--   This cuts down the size of the value-level code (and hopefully helps
--   with compilation time).</li>
--   </ul>
@package multirec-alt-deriver
@version 0.1.3


-- | Example usage:
--   
--   <pre>
--   import Generics.MultiRec
--   import Generics.MultiRec.TH.Alt
--   import Data.Tree
--   
--   data TheFam :: (* -&gt; *) where
--                 TreeIntPrf   :: TheFam   (<tt>Tree</tt> Int)
--                 ForestIntPrf :: TheFam (<tt>Forest</tt> Int)
--   
--   $(<a>deriveEverything</a>
--     (<a>DerivOptions</a> {
--      <a>familyTypes</a> = [ 
--           ( [t| <tt>Tree</tt>   Int |], "TreeIntPrf"   ),
--           ( [t| <tt>Forest</tt> Int |], "ForestIntPrf" ) ],
--      <a>indexGadtName</a> = "TheFam",
--      <a>constructorNameModifier</a> = defaultConstructorNameModifier,
--      <a>patternFunctorName</a> = "ThePF",
--      <a>verbose</a> = True,
--      <a>sumMode</a> = <a>Balanced</a>
--     )
--    )
--   
--   type instance <a>PF</a> TheFam = ThePF
--   </pre>
module Generics.MultiRec.TH.Alt
data DerivOptions
DerivOptions :: [(TypeQ, String)] -> String -> (String -> String -> String) -> String -> Bool -> SumMode -> DerivOptions

-- | A list of:
--   
--   <pre>
--   (type (quoted), name of the proof for this type (i.e. the name of the constructor of the family GADT))
--   </pre>
--   
--   E.g.
--   
--   <pre>
--   data FooFam a where
--        FooPrf    :: FooFam Foo
--        BarStrPrf :: FooFam (Bar String)
--   
--   ... DerivOptions { 
--         familyTypes = 
--          [ ( [t| Foo        |], "FooPrf"   ) ], 
--            ( [t| Bar String |], "BarStrPrf") ] ] 
--   ... 
--   }  
--   </pre>
--   
--   This defines our mutually recursive family. The types must resolve to
--   <tt>data</tt>types or <tt>newtype</tt>s of kind <tt>*</tt> (type
--   synonyms will be expanded).
familyTypes :: DerivOptions -> [(TypeQ, String)]

-- | Name of the family GADT (this type has to be generated manually
--   because TH doesn't support GADTs yet)
indexGadtName :: DerivOptions -> String

-- | Scheme for producing names for the empty types corresponding to
--   constructors. The first arg is the name of the type (as given in
--   <a>familyTypes</a>), the second arg is the name of the constructor
--   (builtins will be called: <tt>NIL</tt>, <tt>CONS</tt>,
--   <tt>TUPLE2</tt>, <tt>TUPLE3</tt> ...)
constructorNameModifier :: DerivOptions -> String -> String -> String

-- | Name of the pattern functor (<tt>PF</tt>) to generate
patternFunctorName :: DerivOptions -> String

-- | Print various informational messges?
verbose :: DerivOptions -> Bool

-- | The shape for trees of <a>:+:</a>s
sumMode :: DerivOptions -> SumMode
data SumMode

-- | e.g. <tt> a <a>:+:</a> (b <a>:+:</a> (c <a>:+:</a> d))</tt>
RightNested :: SumMode

-- | e.g. <tt> (a <a>:+:</a> b) <a>:+:</a> (c <a>:+:</a> d)</tt>
Balanced :: SumMode

-- | Makes names like <tt>CTOR_Either_Left</tt>, <tt>CTOR_Either_Right</tt>
--   etc.
defaultConstructorNameModifier :: String -> String -> String

-- | Main function.
deriveEverything :: DerivOptions -> Q [Dec]
instance Lift Associativity
instance Lift Fixity
