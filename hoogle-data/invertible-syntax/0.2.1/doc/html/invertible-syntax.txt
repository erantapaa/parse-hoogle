-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Invertible syntax descriptions for both parsing and pretty printing.
--   
--   Invertible syntax descriptions as a common interface for parser
--   combinator and pretty printing libraries, as described in the paper:
--   
--   Tillmann Rendel and Klaus Ostermann. Invertible Syntax Descriptions:
--   Unifying Parsing and Pretty Printing. In <i>Proc. of Haskell
--   Symposium</i>, 2010.
--   
--   The distribution contains a file <i>Example.lhs</i> with the example
--   grammar from the paper.
--   
--   The paper also describes partial isomorphisms. These are distributed
--   separately in the <i>partial-isomorphism</i> package.
@package invertible-syntax
@version 0.2.1

module Text.Syntax.Classes
class ProductFunctor f
(<*>) :: ProductFunctor f => f alpha -> f beta -> f (alpha, beta)
class Alternative f
(<|>) :: Alternative f => f alpha -> f alpha -> f alpha
empty :: Alternative f => f alpha
class (IsoFunctor delta, ProductFunctor delta, Alternative delta) => Syntax delta
pure :: (Syntax delta, Eq alpha) => alpha -> delta alpha
token :: Syntax delta => delta Char

module Text.Syntax.Combinators

-- | <a>text</a> parses/prints a fixed text and consumes/produces a unit
--   value.
text :: Syntax delta => String -> delta ()
comma :: Syntax delta => delta ()
dot :: Syntax delta => delta ()
many :: Syntax delta => delta alpha -> delta [alpha]
many1 :: Syntax delta => delta alpha -> delta [alpha]
sepBy :: Syntax delta => delta alpha -> delta () -> delta [alpha]

-- | The <a>chainl1</a> combinator is used to parse a left-associative
--   chain of infix operators.
chainl1 :: Syntax delta => delta alpha -> delta beta -> Iso (alpha, (beta, alpha)) alpha -> delta alpha

-- | This variant of <a>&lt;*&gt;</a> ignores its left result. In contrast
--   to its counterpart derived from the <tt>Applicative</tt> class, the
--   ignored parts have type `delta ()` rather than `delta beta` because
--   otherwise information relevant for pretty-printing would be lost.
(*>) :: Syntax delta => delta () -> delta alpha -> delta alpha

-- | This variant of <a>&lt;*&gt;</a> ignores its right result. In contrast
--   to its counterpart derived from the <tt>Applicative</tt> class, the
--   ignored parts have type `delta ()` rather than `delta beta` because
--   otherwise information relevant for pretty-printing would be lost.
(<*) :: Syntax delta => delta alpha -> delta () -> delta alpha

-- | The <a>between</a> function combines <a>*&gt;</a> and <a>&lt;*</a> in
--   the obvious way.
between :: Syntax delta => delta () -> delta () -> delta alpha -> delta alpha
(<+>) :: Syntax delta => delta alpha -> delta beta -> delta (Either alpha beta)
optional :: Syntax delta => delta alpha -> delta (Maybe alpha)

-- | <a>skipSpace</a> marks a position where whitespace is allowed to
--   occur. It accepts arbitrary space while parsing, and produces no space
--   while printing.
skipSpace :: Syntax delta => delta ()

-- | <a>sepSpace</a> marks a position where whitespace is required to
--   occur. It requires one or more space characters while parsing, and
--   produces a single space character while printing.
sepSpace :: Syntax delta => delta ()

-- | <a>optSpace</a> marks a position where whitespace is desired to occur.
--   It accepts arbitrary space while parsing, and produces a single space
--   character while printing.
optSpace :: Syntax delta => delta ()

module Text.Syntax.Parser.Naive
newtype Parser alpha
Parser :: (String -> [(alpha, String)]) -> Parser alpha
parse :: Parser alpha -> String -> [alpha]
parseM :: Monad m => Parser alpha -> String -> m alpha
instance Syntax Parser
instance Alternative Parser
instance ProductFunctor Parser
instance IsoFunctor Parser

module Text.Syntax.Printer.Naive
newtype Printer alpha
Printer :: (alpha -> Maybe String) -> Printer alpha
print :: Printer alpha -> alpha -> Maybe String
printM :: Monad m => Printer alpha -> alpha -> m String
instance Syntax Printer
instance Alternative Printer
instance ProductFunctor Printer
instance IsoFunctor Printer

module Text.Syntax
