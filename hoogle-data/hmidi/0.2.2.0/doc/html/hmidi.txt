-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Binding to the OS level MIDI services
--   
@package hmidi
@version 0.2.2.0


-- | The hardware-independent part of the MIDI binding.
module System.MIDI.Base
type TimeStamp = Word32

-- | A "regular" MIDI message.
--   
--   Remark: According to the MIDI standard, NoteOff also has a velocity.
--   However, most keyboards do not use this feature (send the default
--   value 64), and there are keyboards which do not send NoteOff messages
--   at all, but send NoteOn messages with zero velocity instead (for
--   example the EMU Xboard series). At the moment, the code
--   auto-translates NoteOn messages with zero velocity to NoteOff messages
--   with velocity 64. This behaviour can be inverted with the Cabal flag
--   <tt>noNoteOff</tt>, which translates all NoteOff messages to NoteOn
--   messages with velocity 0.
data MidiMessage'

-- | Note Off (key, velocity)
NoteOff :: !Int -> !Int -> MidiMessage'

-- | Note On (key, velocity)
NoteOn :: !Int -> !Int -> MidiMessage'

-- | Polyphonic key pressure (key, pressure)
PolyAftertouch :: !Int -> !Int -> MidiMessage'

-- | Control Change (controller, value)
CC :: !Int -> !Int -> MidiMessage'

-- | Program Change (program)
ProgramChange :: !Int -> MidiMessage'

-- | Global aftertouch (pressure)
Aftertouch :: !Int -> MidiMessage'

-- | Pitch wheel (value, from -8192..+8191)
PitchWheel :: !Int -> MidiMessage'

-- | The type representing a MIDI message.
data MidiMessage

-- | first argument is the MIDI channel (1..16)
MidiMessage :: !Int -> !MidiMessage' -> MidiMessage

-- | not including the bytes 0xf0, 0xf7
SysEx :: [Word8] -> MidiMessage

-- | measured in "MIDI beats" (1/16th notes).
SongPosition :: !Int -> MidiMessage
SongSelect :: !Int -> MidiMessage
TuneRequest :: MidiMessage

-- | clock is sent 24 times per quarter note
SRTClock :: MidiMessage
SRTStart :: MidiMessage
SRTContinue :: MidiMessage
SRTStop :: MidiMessage
ActiveSensing :: MidiMessage
Reset :: MidiMessage
Undefined :: MidiMessage

-- | The type representing a timestamped MIDI message. Time is measured in
--   milisecs elapsed since the last call to <a>start</a>.
data MidiEvent
MidiEvent :: !TimeStamp -> !MidiMessage -> MidiEvent

-- | Type of the user callback function.
type ClientCallback = MidiEvent -> IO ()

-- | Low level stuff.
data ShortMessage
ShortMessage :: Word8 -> Word8 -> Word8 -> Word8 -> ShortMessage
sm_channel :: ShortMessage -> Word8
sm_msg :: ShortMessage -> Word8
sm_byte1 :: ShortMessage -> Word8
sm_byte2 :: ShortMessage -> Word8
translateShortMessage :: ShortMessage -> MidiMessage
untranslateShortMessage :: MidiMessage -> ShortMessage
shortMessage :: Int -> Int -> Int -> Int -> ShortMessage
instance Show MidiMessage'
instance Eq MidiMessage'
instance Show MidiMessage
instance Eq MidiMessage
instance Show MidiEvent
instance Eq MidiEvent
instance Show ShortMessage


-- | A lowest common denominator interface to the Win32 and MacOSX MIDI
--   bindings. Error handling is via <a>fail</a>-s in the IO monad. .
--   
--   Always link with the threaded runtime! (use the -threaded GHC option)
module System.MIDI

-- | The opaque data type representing a MIDI source.
type Source = Source

-- | The opaque data type representing a MIDI destination.
type Destination = Destination

-- | The opaque data type representing a MIDI connection.
type Connection = Connection

-- | Enumerates the MIDI sources present in the system.
enumerateSources :: IO [Source]

-- | Enumerates the MIDI destinations present in the system.
enumerateDestinations :: IO [Destination]
class MIDIHasName c

-- | These functions return the name, model and manufacturer of a MIDI
--   source / destination.
--   
--   Note: On Win32, only <a>getName</a> returns a somewhat meaningful
--   string at the moment.
getName :: MIDIHasName a => a -> IO String
getModel :: MIDIHasName a => a -> IO String
getManufacturer :: MIDIHasName a => a -> IO String

-- | Opens a MIDI Source. There are two possibilites to receive MIDI
--   messages. The user can either supply a callback function, or get the
--   messages from an asynchronous buffer. However, mixing the two
--   approaches is not allowed.
openSource :: Source -> Maybe ClientCallback -> IO Connection

-- | Opens a MIDI Destination.
openDestination :: Destination -> IO Connection

-- | Starts a connection. This is required for receiving MIDI messages, and
--   also for starting the clock.
start :: Connection -> IO ()

-- | Stops a connection.
stop :: Connection -> IO ()

-- | Closes a MIDI Connection.
close :: Connection -> IO ()

-- | Sends a short message. The connection must be a <a>Destination</a>.
send :: Connection -> MidiMessage -> IO ()

-- | Sends a system exclusive message. You should <i>not</i> include the
--   starting / trailing bytes 0xF0 and 0xF7.
--   
--   Note: On Win32, the connection must be a <a>Destination</a>
sendSysEx :: Connection -> [Word8] -> IO ()

-- | Gets the next event from a buffered connection (see also
--   <a>openSource</a>)
getNextEvent :: Connection -> IO (Maybe MidiEvent)

-- | Checks the next event from a buffered connection, but does not remove
--   it from the buffer.
checkNextEvent :: Connection -> IO (Maybe MidiEvent)

-- | Gets all the events from the buffer (see also <a>openSource</a>)
getEvents :: Connection -> IO [MidiEvent]

-- | Gets all the events with timestamp less than the specified from the
--   buffer.
getEventsUntil :: Connection -> TimeStamp -> IO [MidiEvent]

-- | Returns the time elapsed since the last <a>start</a> call, in
--   milisecs.
currentTime :: Connection -> IO Word32


-- | MIDI sync to an external clock source.
--   
--   To avoid confusion: In our terminology, <i>beat</i> means a quarter
--   note (the same thing as the B in BPM). In MIDI terminology however, a
--   "MIDI beat" means a sixteenth note.
--   
--   With our notion of beats, one bar is 4 beats (in 4/4 signature, that
--   is)
module System.MIDI.Sync

-- | Song position measured in beats (that is, quarter notes), starting
--   from zero. So with 120 BPM, you will have song position 120 after one
--   minute.
type Beats = Double

-- | Estimated BPM
type BPM = Double

-- | Opens a midi source with the possibility to sync to it.
--   
--   The user callback gets the the song position in <i>beats</i>, and also
--   we return functions to query to song position and the estimated BPM.
--   You may want to round the BPM to the nearest integer if that is
--   appropriate. Song position is Nothing when the playback is stopped.
--   
--   Note that when first used, it may need some time to calibrate the bpm
--   correctly, so start your MIDI host, press play, and wait a few second.
--   Afterwards, it should be reasonably ok. Also if you do fast realtime
--   BPM changes, it will be a tiny little bit behind.
--   
--   Note that we forward all messages (including clock messages) to the
--   user, so you can implement your own handling of transport
--   (start<i>stop</i>continue) or send messages on clock if you want.
openSourceWithSync :: Source -> (Maybe Beats -> MidiEvent -> IO ()) -> IO (Connection, IO (Maybe Beats), IO BPM)


-- | Helper functions to make it easy to start messing around
module System.MIDI.Utility

-- | Utility function to help choosing a midi device. If there is only a
--   single device, we select that. You can also set a default device (by
--   its name), which will be automatically selected if present.
selectMidiDevice :: MIDIHasName a => String -> Maybe String -> [a] -> IO a

-- | Select a MIDI input device (source)
selectInputDevice :: String -> Maybe String -> IO Source

-- | Select a MIDI output device (destination)
selectOutputDevice :: String -> Maybe String -> IO Destination
