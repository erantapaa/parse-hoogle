-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Calculation tool and library supporting units
--   
--   CalDims is an easy to use tool for defining functions and units (basic
--   and derrived), so it can provide dimension-save calculation (not
--   embedded but via shell).
@package caldims
@version 0.1.0

module Language.CalDims.Texts
data HelpTree
Section :: String -> [HelpTree] -> HelpTree
Para :: String -> HelpTree
version :: Version
name :: String
welcomeText :: String
preludeText :: String
helpText :: HelpTree
instance Show HelpTree

module Language.CalDims.Helpers
type F = Double
headWithDefault :: a -> [a] -> a
again :: Monad m => (a -> m b) -> [a] -> m ()
third :: (a, b, c) -> c
unlines' :: [String] -> String
logBaseInt :: Integral a => a -> a -> Maybe a
(#&&#) :: Monad m => m Bool -> m Bool -> m Bool
combination :: Int -> [a] -> [[a]]
permutation :: Int -> [a] -> [[a]]
if_ :: Bool -> a -> a -> a
type ErrorAndState e s a = ErrorT e (State s) a
eqClassesWith :: (a -> a -> Bool) -> [a] -> [(a, [a])]

module Language.CalDims.Types
newtype Name
Name :: String -> Name
unName :: Name -> String
type MyParser = GenParser Char State
type Scope = Map Name StateEntry
data State
State :: Scope -> Args -> [(R, Dims)] -> State
getScope :: State -> Scope
getArgs :: State -> Args
getArgValues :: State -> [(R, Dims)]
data StateEntry
Function :: Args -> Expr -> StateEntry
Dimension :: Expr -> StateEntry
BasicDimension :: StateEntry
Builtin :: Args -> Expr -> StateEntry
type D = Double
type R = Ratio Integer
data Conversion
Explicit :: Dims -> Conversion
InTermsOf :: Expr -> Conversion
Basic :: Conversion
Keep :: Conversion
Minimal :: Conversion
data Expr
Bin :: BinOp -> Expr -> Expr -> Expr
Uni :: UniOp -> Expr -> Expr
ArgRef :: Arg -> Expr
Call :: Name -> [Expr] -> Expr
Evaled :: (R, Dims) -> Expr
data BinOp
Add :: BinOp
Sub :: BinOp
Mul :: BinOp
Div :: BinOp
Exp :: BinOp
LogBase :: BinOp
data UniOp
Negate :: UniOp
Expot :: UniOp
Log :: UniOp
Sin :: UniOp
Cos :: UniOp
Tan :: UniOp
Asin :: UniOp
Acos :: UniOp
Atan :: UniOp
Sinh :: UniOp
Cosh :: UniOp
Tanh :: UniOp
Asinh :: UniOp
Acosh :: UniOp
Atanh :: UniOp
data Priority
P_Add :: Priority
P_Mul :: Priority
P_Exp :: Priority
P_Negate :: Priority
P_Elementary :: Priority
type Args = [Arg]
data Arg
Arg :: String -> Int -> Dims -> Arg
getArgName :: Arg -> String
getArgNumber :: Arg -> Int
getArgType :: Arg -> Dims
class Pretty a
pretty :: Pretty a => a -> String
newtype Dims
Dims :: Map Name R -> Dims
unDims :: Dims -> Map Name R
noDims :: Dims
class Monad m => EqM a m
(#==#) :: EqM a m => m a -> m a -> m Bool
class Monad m => AddM a m
(#+#) :: AddM a m => m a -> m a -> m a
class Monad m => SubM a m
(#-#) :: SubM a m => m a -> m a -> m a
class Monad m => MulM a m
(#*#) :: MulM a m => m a -> m a -> m a
class Monad m => DivM a m
(#/#) :: DivM a m => m a -> m a -> m a
class Monad m => ExpM a m
(#^#) :: ExpM a m => m a -> m a -> m a
class Monad m => LogBaseM a m
(#~#) :: LogBaseM a m => m a -> m a -> m a
class Monad m => NegateM a m
negateM :: NegateM a m => m a -> m a
class Monad m => ExpotM a m
expM :: ExpotM a m => m a -> m a
class Monad m => LogM a m
logM :: LogM a m => m a -> m a
class Monad m => SqrtM a m
sqrtM :: SqrtM a m => m a -> m a
class Monad m => SinM a m
sinM :: SinM a m => m a -> m a
class Monad m => CosM a m
cosM :: CosM a m => m a -> m a
class Monad m => TanM a m
tanM :: TanM a m => m a -> m a
class Monad m => AsinM a m
asinM :: AsinM a m => m a -> m a
class Monad m => AcosM a m
acosM :: AcosM a m => m a -> m a
class Monad m => AtanM a m
atanM :: AtanM a m => m a -> m a
class Monad m => SinhM a m
sinhM :: SinhM a m => m a -> m a
class Monad m => CoshM a m
coshM :: CoshM a m => m a -> m a
class Monad m => TanhM a m
tanhM :: TanhM a m => m a -> m a
class Monad m => AsinhM a m
asinhM :: AsinhM a m => m a -> m a
class Monad m => AcoshM a m
acoshM :: AcoshM a m => m a -> m a
class Monad m => AtanhM a m
atanhM :: AtanhM a m => m a -> m a
instance Show Dims
instance Ord Dims
instance Eq Dims
instance Show Arg
instance Ord Arg
instance Eq Arg
instance Eq Priority
instance Enum Priority
instance Ord Priority
instance Eq UniOp
instance Show UniOp
instance Eq BinOp
instance Show BinOp
instance Show Expr
instance Show StateEntry
instance Show State
instance Eq Name
instance Show Name
instance Ord Name
instance Show Conversion
instance Pretty (Ratio Integer)
instance Pretty Name
instance Pretty Dims
instance Pretty Char
instance Pretty a => Pretty [a]
instance Pretty Int

module Language.CalDims.Expr
data Expr
Bin :: BinOp -> Expr -> Expr -> Expr
Uni :: UniOp -> Expr -> Expr
ArgRef :: Arg -> Expr
Call :: Name -> [Expr] -> Expr
Evaled :: (R, Dims) -> Expr
data BinOp
Add :: BinOp
Sub :: BinOp
Mul :: BinOp
Div :: BinOp
Exp :: BinOp
LogBase :: BinOp
data UniOp
Negate :: UniOp
Expot :: UniOp
Log :: UniOp
Sin :: UniOp
Cos :: UniOp
Tan :: UniOp
Asin :: UniOp
Acos :: UniOp
Atan :: UniOp
Sinh :: UniOp
Cosh :: UniOp
Tanh :: UniOp
Asinh :: UniOp
Acosh :: UniOp
Atanh :: UniOp
instance Pretty Expr
instance Pretty (R, Dims)
instance Pretty BinOp

module Language.CalDims.State
type MyParser = GenParser Char State
data Arg
Arg :: String -> Int -> Dims -> Arg
getArgName :: Arg -> String
getArgNumber :: Arg -> Int
getArgType :: Arg -> Dims
type Args = [Arg]
type Scope = Map Name StateEntry
data State
State :: Scope -> Args -> [(R, Dims)] -> State
getScope :: State -> Scope
getArgs :: State -> Args
getArgValues :: State -> [(R, Dims)]
data StateEntry
Function :: Args -> Expr -> StateEntry
Dimension :: Expr -> StateEntry
BasicDimension :: StateEntry
Builtin :: Args -> Expr -> StateEntry
isBasicUnit :: State -> Name -> Bool
isUnit :: State -> Name -> Bool
isDerivedUnit :: State -> Name -> Bool
isFunction :: State -> Name -> Bool
isBuiltin :: State -> Name -> Bool
lu :: Name -> State -> Maybe StateEntry
start :: State
instance Pretty (Name, StateEntry)

module Language.CalDims.Action
data Command
AddFunction :: Name -> Args -> Expr -> Command
AddBasicUnit :: Name -> Command
AddUnit :: Name -> Expr -> Command
Echo :: String -> Command
Remove :: Name -> Command
RemoveCascade :: Name -> Command
Help :: Command
Eval :: Expr -> Conversion -> Command
EvalDimsPart :: Expr -> Command
DebugExpr :: Expr -> Command
DebugName :: Name -> Command
DebugDependencies :: Name -> Command
GetState :: Command
WriteState :: String -> Command
data Result
Ok :: (Maybe String) -> Result
StringResult :: String -> Result
EvaledResult :: (R, Dims) -> Result
ExprResult :: Expr -> Result
DimsResult :: Dims -> Result
WriteStringToFile :: String -> String -> Result
type Mon a = ErrorAndState String State a
run :: State -> Command -> (Either String Result, State)
eval :: Expr -> Mon (R, Dims)
doCall :: Name -> [(R, Dims)] -> Mon (R, Dims)
dependencies :: Name -> Mon [Name]
evalDimsPart :: Expr -> Mon Dims
process :: Command -> Mon Result
instance Show Result
instance Show Command
instance AtanhM (R, Dims) (ErrorT String (State State))
instance AcoshM (R, Dims) (ErrorT String (State State))
instance AsinhM (R, Dims) (ErrorT String (State State))
instance TanhM (R, Dims) (ErrorT String (State State))
instance CoshM (R, Dims) (ErrorT String (State State))
instance SinhM (R, Dims) (ErrorT String (State State))
instance AtanM (R, Dims) (ErrorT String (State State))
instance AcosM (R, Dims) (ErrorT String (State State))
instance AsinM (R, Dims) (ErrorT String (State State))
instance TanM (R, Dims) (ErrorT String (State State))
instance CosM (R, Dims) (ErrorT String (State State))
instance SinM (R, Dims) (ErrorT String (State State))
instance LogM (R, Dims) (ErrorT String (State State))
instance ExpotM (R, Dims) (ErrorT String (State State))
instance NegateM (R, Dims) (ErrorT String (State State))
instance DivM (R, Dims) (ErrorT String (State State))
instance MulM (R, Dims) (ErrorT String (State State))
instance SubM (R, Dims) (ErrorT String (State State))
instance AddM (R, Dims) (ErrorT String (State State))
instance LogBaseM (R, Dims) (ErrorT String (State State))
instance ExpM (R, Dims) (ErrorT String (State State))
instance DivM Dims (ErrorT String (State State))
instance MulM Dims (ErrorT String (State State))
instance EqM Dims (ErrorT String (State State))
instance EqM [Arg] (ErrorT String (State State))
instance EqM Arg (ErrorT String (State State))
instance Pretty State
instance Pretty Result
instance Pretty Command

module Language.CalDims.Expression
parseExpr :: MyParser Expr
parseName :: MyParser Name
parseExistingName :: MyParser (Name, StateEntry)
parseBindE :: MyParser String
parseEinh :: MyParser Dims
parseBind :: MyParser String
brackets :: MyParser a -> MyParser a
parseNonRecursiveExpr :: Name -> MyParser Expr
parseColon :: MyParser String
parseComma :: MyParser String
flush :: GenParser Char State (IO (), State)

module Language.CalDims.Misc
parseLine :: MyParser (Maybe Command)

module Language.CalDims.Program
getUserState :: Maybe String -> IO State
loop :: OutputMode -> Handle -> State -> IO State
data OutputMode
OutputMode :: Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> OutputMode
ppResult :: OutputMode -> Bool
ppCommand :: OutputMode -> Bool
sResult :: OutputMode -> Bool
sCommand :: OutputMode -> Bool
echo :: OutputMode -> Bool
pErrors :: OutputMode -> Bool
tolerant :: OutputMode -> Bool
omRun :: OutputMode
prompt :: String
defMain :: IO ()
instance Eq CliArg
instance Read OutputMode
instance Show OutputMode
