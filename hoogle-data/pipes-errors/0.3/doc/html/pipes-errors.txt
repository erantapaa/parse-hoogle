-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Integration between pipes and errors
--   
@package pipes-errors
@version 0.3

module Pipes.Lift.Error.Instances
instance MFunctor (ExceptRT r)

module Pipes.Lift.ExceptT

-- | Wrap the base monad in <a>ExceptT</a>.
exceptP :: Monad m => Proxy a' a b' b m (Either e r) -> Proxy a' a b' b (ExceptT e m) r

-- | Run <a>ExceptT</a> in the base monad.
runExceptP :: Monad m => Proxy a' a b' b (ExceptT e m) r -> Proxy a' a b' b m (Either e r)

-- | Flip the type variables in the <a>ExceptT</a> base monad.
flipEP :: Monad m => Proxy a' a b' b (ExceptT a m) b -> Proxy a' a b' b (ExceptT b m) a

module Pipes.Lift.ExceptRT

-- | Turn <a>ExceptT</a> in the base monad into <a>ExceptRT</a>
exceptRP :: Monad m => Proxy a' a b' b (ExceptT e m) r -> Proxy a' a b' b (ExceptRT r m) e

-- | Turn <a>ExceptRT</a> in the base monad into <a>ExceptT</a>
runExceptRP :: Monad m => Proxy a' a b' b (ExceptRT r m) e -> Proxy a' a b' b (ExceptT e m) r

module Pipes.Lift.Error
