-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Lastfm API interface
--   
@package liblastfm
@version 0.5.1


-- | liblastfm internals
--   
--   You shouldn't need to import this module unless you are doing
--   something interesting.
module Network.Lastfm.Internal

-- | Lastfm API request data type
--   
--   <tt>a</tt> is the authentication state. Can be <a>Ready</a>, which
--   means this <a>Request</a> is ready to be sent, or <a>Sign</a>, if the
--   request signature hasn't been computed yet
--   
--   <tt>f</tt> is the response format (liblastfm supports both <a>JSON</a>
--   and <a>XML</a>)
newtype Request f a
Request :: Const (Dual (Endo (R f))) a -> Request f a
unRequest :: Request f a -> Const (Dual (Endo (R f))) a

-- | Response format: either JSON or XML
data Format
JSON :: Format
XML :: Format

-- | Request that is ready to be sent
data Ready

-- | Request that requires signing procedure
data Sign

-- | Lastfm API request data type
--   
--   low-level representation
data R (f :: Format)
R :: {-# UNPACK #-} !Text -> {-# UNPACK #-} !ByteString -> !(Map Text Text) -> R
_host :: R -> {-# UNPACK #-} !Text
_method :: R -> {-# UNPACK #-} !ByteString
_query :: R -> !(Map Text Text)

-- | Wrapping to interesting <a>Monoid</a> (<a>R</a> -&gt; <a>R</a>)
--   instance
wrap :: (R f -> R f) -> Request f a

-- | Unwrapping from interesting <a>Monoid</a> (<a>R</a> -&gt; <a>R</a>)
--   instance
unwrap :: Request f a -> R f -> R f

-- | Construct String from request for networking
render :: R f -> String
coerce :: Request f a -> Request f b

-- | Absorbing a bunch of queries, useful in batch operations
absorbQuery :: Foldable t => t (Request f b) -> Request f a

-- | Transforming Request to the "array notation"
indexedWith :: Int -> Request f a -> Request f a

-- | <a>Request</a> <a>_host</a>
host :: Functor f => (Text -> f Text) -> R h -> f (R h)

-- | <a>Request</a> HTTP <a>_method</a>
method :: Functor f => (ByteString -> f ByteString) -> R h -> f (R h)

-- | <a>Request</a> <a>_query</a> string
query :: Functor f => (Map Text Text -> f (Map Text Text)) -> R h -> f (R h)
instance Typeable 'JSON
instance Typeable 'XML
instance Typeable Format
instance Typeable R
instance Typeable Ready
instance Typeable Sign
instance Typeable Request
instance Serialize (R f)
instance Traversable (Request f)
instance Foldable (Request f)
instance Applicative (Request f)
instance Functor (Request f)


-- | Request sending and Response parsing
module Network.Lastfm.Response

-- | Application secret
newtype Secret
Secret :: Text -> Secret

-- | Sign the <a>Request</a> with the <a>Secret</a> so it's ready to be
--   sent
sign :: Secret -> Request f Sign -> Request f Ready

-- | Lastfm connection manager
data Connection

-- | Creating an HTTPS connection manager is expensive; it's advised to use
--   a single <a>Connection</a> for all communications with last.fm
withConnection :: (Connection -> IO a) -> IO a

-- | Create a <a>Connection</a>
newConnection :: IO Connection

-- | Close a <a>Connection</a>
closeConnection :: Connection -> IO ()

-- | Perform the <a>Request</a> and parse the response
lastfm :: Supported f r => Connection -> Request f Ready -> IO (Either LastfmError r)

-- | Perform the <a>Request</a> ignoring any responses
lastfm_ :: Supported f r => Connection -> Request f Ready -> IO (Either LastfmError ())

-- | <a>Supported</a> provides parsing for the chosen <a>Format</a>
--   
--   <a>JSON</a> is parsed to <a>Value</a> type from aeson, while
--   <a>XML</a> is parsed to <a>Document</a> from xml-conduit
class Supported f r | f -> r, r -> f

-- | Response format: either JSON or XML
data Format
JSON :: Format
XML :: Format

-- | Different ways last.fm response can be unusable
data LastfmError

-- | last.fm thinks it responded with something legible, but it really
--   isn't
LastfmBadResponse :: ByteString -> LastfmError

-- | last.fm error code and message string
LastfmEncodedError :: Int -> Text -> LastfmError

-- | wrapped http-conduit exception
LastfmHttpError :: HttpException -> LastfmError

-- | This is a <tt> Prism' <a>LastfmError</a> <a>ByteString</a> </tt> in
--   disguise
_LastfmBadResponse :: (Choice p, Applicative m, AsLastfmError e) => p ByteString (m ByteString) -> p e (m e)

-- | This is a <tt> Prism' <a>LastfmError</a> (<a>Int</a>, <a>String</a>)
--   </tt> in disguise
_LastfmEncodedError :: (Choice p, Applicative m, AsLastfmError e) => p (Int, Text) (m (Int, Text)) -> p e (m e)

-- | This is a <tt> Prism' <a>LastfmError</a> <a>HttpException</a> </tt> in
--   disguise
_LastfmHttpError :: (Choice p, Applicative m, AsLastfmError e) => p HttpException (m HttpException) -> p e (m e)
instance Typeable LastfmError
instance Typeable Secret
instance Show LastfmError
instance Show Secret
instance Eq Secret
instance IsString Secret
instance AsLastfmError SomeException
instance AsLastfmError LastfmError
instance Exception LastfmError
instance Eq LastfmError
instance Supported 'XML Document
instance Supported 'JSON Value


-- | Request construction
module Network.Lastfm.Request

-- | Lastfm API request data type
--   
--   <tt>a</tt> is the authentication state. Can be <a>Ready</a>, which
--   means this <a>Request</a> is ready to be sent, or <a>Sign</a>, if the
--   request signature hasn't been computed yet
--   
--   <tt>f</tt> is the response format (liblastfm supports both <a>JSON</a>
--   and <a>XML</a>)
data Request f a

-- | Lastfm API request data type
--   
--   low-level representation
data R (f :: Format)

-- | Request that is ready to be sent
data Ready

-- | Request that requires signing procedure
data Sign

-- | Response format: either JSON or XML
data Format
JSON :: Format
XML :: Format

-- | Change request API method
--   
--   Primarily used in API call wrappers, not intended for usage by library
--   user
api :: Text -> Request f a

-- | Change html _method to POST
--   
--   Primarily used in API call wrappers, not intended for usage by library
--   user
post :: Request f a

-- | Change html _method to GET
--   
--   Primarily used in API call wrappers, not intended for usage by library
--   user
get :: Request f a

-- | Change API response format to JSON
--   
--   This is a little helper. It's actually enough to specialize Format
--   manually
json :: Request JSON a

-- | Change API response format to XML
--   
--   This is a little helper. It's actually enough to specialize Format
--   manually
xml :: Request XML a
data APIKey

-- | Change request API key
apiKey :: Text -> Request f APIKey
data SessionKey

-- | Change request session key
sessionKey :: Text -> Request f SessionKey
data Token

-- | Add token parameter
token :: Text -> Request f Token
data Callback

-- | Add callback link parameter
callback :: Text -> Request f Callback
data Artist

-- | Add artist parameter
artist :: Text -> Request f Artist

-- | Add artists parameter
artists :: [Text] -> Request f [Artist]
data Album

-- | Add album parameter
album :: Text -> Request f Album
data MBID

-- | Add MBID parameter
mbid :: Text -> Request f MBID
data Country

-- | Add country parameter
country :: Text -> Request f Country
data Autocorrect

-- | Add autocorrect parameter
autocorrect :: Bool -> Request f Autocorrect
data Event

-- | Add event parameter
event :: Int64 -> Request f Event
data Status
Attending :: Status
Maybe :: Status
NotAttending :: Status

-- | Add status parameter
status :: Status -> Request f Status
data From

-- | Add from parameter
from :: Int64 -> Request f From
data To

-- | Add to parameter
to :: Int64 -> Request f To
data Group

-- | Add group parameter
group :: Text -> Request f Group
data Language

-- | Add language parameter
language :: Text -> Request f Language
data Distance

-- | Add distance parameter
distance :: Int64 -> Request f Distance
data Longitude

-- | Add longitude parameter
longitude :: Text -> Request f Longitude
data Latitude

-- | Add latitude parameter
latitude :: Text -> Request f Latitude
data Location

-- | Add location parameter
location :: Text -> Request f Location
data Start

-- | Add start parameter
start :: Int64 -> Request f Start
data End

-- | Add end parameter
end :: Int64 -> Request f End
data Festivals

-- | Add festivalsonly parameter
festivalsonly :: Bool -> Request f Festivals
data StartTimestamp

-- | Add startTimestamp parameter
startTimestamp :: Int64 -> Request f StartTimestamp
data EndTimestamp

-- | Add endTimestamp parameter
endTimestamp :: Int64 -> Request f EndTimestamp
data Metro

-- | Add metro parameter
metro :: Text -> Request f Metro
data Tag

-- | Add tags parameter
tags :: [Text] -> Request f [Tag]

-- | Add tag parameter
tag :: Text -> Request f Tag
data Track

-- | Add track parameter
track :: Text -> Request f Track
data Timestamp

-- | Add timestamp parameter
timestamp :: Int64 -> Request f Timestamp
data Fingerprint

-- | Add fingerprint parameter
fingerprint :: Int64 -> Request f Fingerprint
data AlbumArtist

-- | Add albumArtist parameter
albumArtist :: Text -> Request f AlbumArtist
data Duration

-- | Add duration parameter
duration :: Int64 -> Request f Duration
data TrackNumber

-- | Add trackNumber parameter
trackNumber :: Int64 -> Request f TrackNumber
data Playlist

-- | Add playlistID parameter
playlist :: Int64 -> Request f Playlist
data Title

-- | Add title parameter
title :: Text -> Request f Title
data Description

-- | Add description parameter
description :: Text -> Request f Description
data ChosenByUser

-- | Add chosenByUser parameter
chosenByUser :: Bool -> Request f ChosenByUser
data Context

-- | Add context parameter
context :: Text -> Request f Context
data StreamId

-- | Add streamId parameter
streamId :: Int64 -> Request f StreamId
data RecentTracks

-- | Add recentTracks parameter
recentTracks :: Bool -> Request f RecentTracks
data Recipient

-- | Add recipient parameter
recipient :: Text -> Request f Recipient
data Username

-- | Add username parameter
username :: Text -> Request f Username
data User

-- | Add user parameter
user :: Text -> Request f User
data Password

-- | Add password parameter
password :: Text -> Request f Password
data Public

-- | Add public parameter
public :: Bool -> Request f Public
data Message

-- | Add message parameter
message :: Text -> Request f Message
data Page

-- | Add page parameter
page :: Int64 -> Request f Page
data Limit

-- | Add limit parameter
limit :: Int64 -> Request f Limit
data TaggingType

-- | Add taggingType parameter
taggingType :: Text -> Request f TaggingType
data UseRecs

-- | Add useRecs parameter
useRecs :: Bool -> Request f UseRecs
data Venue

-- | Add venue parameter
venue :: Int64 -> Request f Venue
data VenueName

-- | Add venue parameter
venueName :: Text -> Request f VenueName
data Discovery

-- | Add group parameter
discovery :: Bool -> Request f Discovery
data RTP

-- | Add rtp parameter
rtp :: Bool -> Request f RTP
data BuyLinks

-- | Add buyLinks parameter
buyLinks :: Bool -> Request f BuyLinks
data Multiplier
M1 :: Multiplier
M2 :: Multiplier

-- | Add multiplier parameter
multiplier :: Multiplier -> Request f Multiplier
data Bitrate
B64 :: Bitrate
B128 :: Bitrate

-- | Add bitrate parameter
bitrate :: Bitrate -> Request f Bitrate
data Name

-- | Add name parameter
name :: Text -> Request f Name
data Station

-- | Add station parameter
station :: Text -> Request f Station
class Targeted a

-- | Add comparison parameter
comparison :: Targeted a => Int64 -> Request f a -> Request f a
data Scrobble
data LibraryAlbum
data LibraryArtist
instance Targeted User
instance Targeted [Artist]
instance Argument a => Argument [a]
instance Argument Int64
instance Argument Bool
instance Argument Text


-- | Lastfm album API
--   
--   This module is intended to be imported qualified:
--   
--   <pre>
--   import qualified Network.Lastfm.Album as Album
--   </pre>
module Network.Lastfm.Album

-- | Unify (<a>Artist</a> -&gt; <a>Album</a> -&gt; …) and (<a>MBID</a>
--   -&gt; …)
class ArtistAlbumOrMBID r a | a -> r

-- | Tag an album using a list of user supplied tags.
--   
--   <a>http://www.last.fm/api/show/album.addTags</a>
addTags :: Request f (Artist -> Album -> [Tag] -> APIKey -> SessionKey -> Sign)

-- | Get a list of Buy Links for a particular Album. It is required that
--   you supply either the artist and track params or the mbid parameter.
--   
--   Optional: <a>autocorrect</a>
--   
--   <a>http://www.last.fm/api/show/album.getBuylinks</a>
getBuyLinks :: ArtistAlbumOrMBID Ready a => Request f (Country -> a)

-- | Get the metadata for an album on Last.fm using the album name or a
--   musicbrainz id. See playlist.fetch on how to get the album playlist.
--   
--   Optional: <a>autocorrect</a>, <a>username</a>, <a>language</a>
--   
--   <a>http://www.last.fm/api/show/album.getInfo</a>
getInfo :: ArtistAlbumOrMBID Ready a => Request f a

-- | Get shouts for this album.
--   
--   Optional: <a>autocorrect</a>, <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/album.getShouts</a>
getShouts :: ArtistAlbumOrMBID Ready a => Request f a

-- | Get the tags applied by an individual user to an album on Last.fm.
--   
--   Optional: <a>autocorrect</a>, <a>user</a>
--   
--   <a>http://www.last.fm/api/show/album.getTags</a>
getTags :: ArtistAlbumOrMBID r a => Request f a

-- | Get the top tags for an album on Last.fm, ordered by popularity.
--   
--   Optional: <a>autocorrect</a>
--   
--   <a>http://www.last.fm/api/show/album.getTopTags</a>
getTopTags :: ArtistAlbumOrMBID Ready a => Request f a

-- | Remove a user's tag from an album.
--   
--   <a>http://www.last.fm/api/show/album.removeTag</a>
removeTag :: Request f (Artist -> Album -> Tag -> APIKey -> SessionKey -> Sign)

-- | Search for an album by name. Returns album matches sorted by
--   relevance.
--   
--   Optional: <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/album.search</a>
search :: Request f (Album -> APIKey -> Ready)

-- | Share an album with one or more Last.fm users or other friends.
--   
--   Optional: <a>public</a>, <a>message</a>, <a>recipient</a>
--   
--   <a>http://www.last.fm/api/show/album.share</a>
share :: Request f (Album -> Artist -> Recipient -> APIKey -> SessionKey -> Sign)
instance ArtistAlbumOrMBID r (Artist -> Album -> APIKey -> r)
instance ArtistAlbumOrMBID r (MBID -> APIKey -> r)


-- | Lastfm artist API
--   
--   This module is intended to be imported qualified:
--   
--   <pre>
--   import qualified Network.Lastfm.Artist as Artist
--   </pre>
module Network.Lastfm.Artist

-- | Unify (<a>Artist</a> -&gt; …) and (<a>MBID</a> -&gt; …)
class ArtistOrMBID r a

-- | Tag an artist with one or more user supplied tags.
--   
--   <a>http://www.last.fm/api/show/artist.addTags</a>
addTags :: Request f (Artist -> [Tag] -> APIKey -> SessionKey -> Sign)

-- | Use the last.fm corrections data to check whether the supplied artist
--   has a correction to a canonical artist
--   
--   <a>http://www.last.fm/api/show/artist.getCorrection</a>
getCorrection :: Request f (Artist -> APIKey -> Ready)

-- | Get a list of upcoming events for this artist. Easily integratable
--   into calendars, using the ical standard (see feeds section below).
--   
--   Optional: <a>autocorrect</a>, <a>limit</a>, <tt>pages</tt>,
--   <a>festivalsonly</a>
--   
--   <a>http://www.last.fm/api/show/artist.getEvents</a>
getEvents :: ArtistOrMBID Ready a => Request f (a -> APIKey -> Ready)

-- | Get the metadata for an artist. Includes biography.
--   
--   Optional: <a>language</a>, <a>autocorrect</a>, <a>username</a>
--   
--   <a>http://www.last.fm/api/show/artist.getInfo</a>
getInfo :: ArtistOrMBID Ready a => Request f (a -> APIKey -> Ready)

-- | Get a paginated list of all the events this artist has played at in
--   the past.
--   
--   Optional: <a>page</a>, <a>autocorrect</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/artist.getPastEvents</a>
getPastEvents :: ArtistOrMBID Ready a => Request f (a -> APIKey -> Ready)

-- | Get a podcast of free mp3s based on an artist
--   
--   Optional: <a>autocorrect</a>
--   
--   <a>http://www.last.fm/api/show/artist.getPodcast</a>
getPodcast :: ArtistOrMBID Ready a => Request f (a -> APIKey -> Ready)

-- | Get shouts for this artist. Also available as an rss feed.
--   
--   Optional:<a>autocorrect</a>, <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/artist.getShouts</a>
getShouts :: ArtistOrMBID Ready a => Request f (a -> APIKey -> Ready)

-- | Get all the artists similar to this artist
--   
--   Optional: <a>limit</a>, <a>autocorrect</a>
--   
--   <a>http://www.last.fm/api/show/artist.getSimilar</a>
getSimilar :: ArtistOrMBID Ready a => Request f (a -> APIKey -> Ready)

-- | Get the tags applied by an individual user to an artist on Last.fm. If
--   accessed as an authenticated service <i>and</i> you don't supply a
--   user parameter then this service will return tags for the
--   authenticated user. To retrieve the list of top tags applied to an
--   artist by all users use <a>getTopTags</a>.
--   
--   Optional: <a>user</a>, <a>autocorrect</a>
--   
--   <a>http://www.last.fm/api/show/artist.getTags</a>
getTags :: ArtistOrMBID r a => Request f (a -> APIKey -> r)

-- | Get the top albums for an artist on Last.fm, ordered by popularity.
--   
--   Optional: <a>autocorrect</a>, <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/artist.getTopAlbums</a>
getTopAlbums :: ArtistOrMBID Ready a => Request f (a -> APIKey -> Ready)

-- | Get the top fans for an artist on Last.fm, based on listening data.
--   
--   Optional: <a>autocorrect</a>
--   
--   <a>http://www.last.fm/api/show/artist.getTopFans</a>
getTopFans :: ArtistOrMBID Ready a => Request f (a -> APIKey -> Ready)

-- | Get the top tags for an artist on Last.fm, ordered by popularity.
--   
--   Optional: <a>autocorrect</a>
--   
--   <a>http://www.last.fm/api/show/artist.getTopTags</a>
getTopTags :: ArtistOrMBID Ready a => Request f (a -> APIKey -> Ready)

-- | Get the top tracks by an artist on Last.fm, ordered by popularity
--   
--   Optional: <a>autocorrect</a>, <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/artist.getTopTracks</a>
getTopTracks :: ArtistOrMBID Ready a => Request f (a -> APIKey -> Ready)

-- | Remove a user's tag from an artist.
--   
--   <a>http://www.last.fm/api/show/artist.removeTag</a>
removeTag :: Request f (Artist -> Tag -> APIKey -> SessionKey -> Sign)

-- | Search for an artist by name. Returns artist matches sorted by
--   relevance.
--   
--   Optional: <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/artist.search</a>
search :: Request f (Artist -> APIKey -> Ready)

-- | Share an artist with Last.fm users or other friends.
--   
--   Optional: <a>message</a>, <a>public</a>
--   
--   <a>http://www.last.fm/api/show/artist.share</a>
share :: Request f (Artist -> Recipient -> APIKey -> SessionKey -> Sign)

-- | Shout in this artist's shoutbox
--   
--   <a>http://www.last.fm/api/show/artist.shout</a>
shout :: Request f (Artist -> Message -> APIKey -> SessionKey -> Sign)
instance ArtistOrMBID r Artist
instance ArtistOrMBID r MBID


-- | Lastfm authentication procedure helpers
--   
--   Basically, lastfm provides 3 ways to authenticate user:
--   
--   <ul>
--   <li>web application - <a>http://www.last.fm/api/webauth</a></li>
--   <li>desktop application -
--   <a>http://www.last.fm/api/desktopauth</a></li>
--   <li>modile application - <a>http://www.last.fm/api/mobileauth</a></li>
--   </ul>
--   
--   Note that you can use any of them in your application despite their
--   names
--   
--   How to get session key for yourself for debug with GHCi:
--   
--   <pre>
--   &gt;&gt;&gt; import Network.Lastfm
--   
--   &gt;&gt;&gt; import Network.Lastfm.Authentication
--   
--   &gt;&gt;&gt; :set -XOverloadedStrings
--   
--   &gt;&gt;&gt; con &lt;- newConnection
--   
--   &gt;&gt;&gt; lastfm con $ getToken &lt;*&gt; apiKey "__API_KEY__" &lt;* json
--   Right (Object (fromList [("token",String "__TOKEN__")]))
--   
--   &gt;&gt;&gt; putStrLn . link $ apiKey "__API_KEY__" &lt;* token "__TOKEN__"
--   http://www.last.fm/api/auth/?api_key=__API_KEY__&amp;token=__TOKEN__
--   
--   &gt;&gt;&gt; -- Click that link ^^^
--   
--   &gt;&gt;&gt; lastfm con $ sign "__SECRET__" $ getSession &lt;*&gt; token "__TOKEN__" &lt;*&gt; apiKey "__API_KEY__"  &lt;* json
--   Right (Object (fromList [("session",Object (fromList [("subscriber",String "0"),("key",String "__SESSION_KEY__"),("name",String "__USER__")]))]))
--   </pre>
module Network.Lastfm.Authentication

-- | Get authorization token
getToken :: Request f (APIKey -> Ready)

-- | Get session key
getSession :: Request f (Token -> APIKey -> Sign)

-- | Get session key
getMobileSession :: Request f (Username -> Password -> APIKey -> Sign)

-- | Construct link user should follow to approve application
link :: Request f a -> String


-- | Lastfm chart API
--   
--   This module is intended to be imported qualified:
--   
--   <pre>
--   import qualified Network.Lastfm.Chart as Chart
--   </pre>
module Network.Lastfm.Chart

-- | Get the hyped artists chart
--   
--   Optional: <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/chart.getHypedArtists</a>
getHypedArtists :: Request f (APIKey -> Ready)

-- | Get the top artists chart
--   
--   Optional: <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/chart.getHypedTracks</a>
getHypedTracks :: Request f (APIKey -> Ready)

-- | Get the most loved tracks chart
--   
--   Optional: <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/chart.getLovedTracks</a>
getLovedTracks :: Request f (APIKey -> Ready)

-- | Get the top artists chart
--   
--   Optional: <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/chart.getTopArtists</a>
getTopArtists :: Request f (APIKey -> Ready)

-- | Get the top artists chart
--   
--   Optional: <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/chart.getTopTags</a>
getTopTags :: Request f (APIKey -> Ready)

-- | Get the top tracks chart
--   
--   Optional: <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/chart.getTopTracks</a>
getTopTracks :: Request f (APIKey -> Ready)


-- | Lastfm event API
--   
--   This module is intended to be imported qualified:
--   
--   <pre>
--   import qualified Network.Lastfm.Event as Event
--   </pre>
module Network.Lastfm.Event

-- | Set a user's attendance status for an event.
--   
--   <a>http://www.last.fm/api/show/event.attend</a>
attend :: Request f (Event -> Status -> APIKey -> SessionKey -> Sign)

-- | Get a list of attendees for an event.
--   
--   Optional: <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/event.getAttendees</a>
getAttendees :: Request f (Event -> APIKey -> Ready)

-- | Get the metadata for an event on Last.fm. Includes attendance and
--   lineup information.
--   
--   <a>http://www.last.fm/api/show/event.getInfo</a>
getInfo :: Request f (Event -> APIKey -> Ready)

-- | Get shouts for this event. Also available as an rss feed.
--   
--   Optional: <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/event.getShouts</a>
getShouts :: Request f (Event -> APIKey -> Ready)

-- | Share an event with one or more Last.fm users or other friends.
--   
--   Optional: <a>public</a>, <a>message</a>
--   
--   <a>http://www.last.fm/api/show/event.share</a>
share :: Request f (Event -> Recipient -> APIKey -> SessionKey -> Sign)

-- | Shout in this event's shoutbox
--   
--   <a>http://www.last.fm/api/show/event.shout</a>
shout :: Request f (Event -> Message -> APIKey -> SessionKey -> Sign)


-- | Lastfm geo API
--   
--   This module is intended to be imported qualified:
--   
--   <pre>
--   import qualified Network.Lastfm.Geo as Geo
--   </pre>
module Network.Lastfm.Geo

-- | Get all events in a specific location by country or city name.
--   
--   Optional: <a>longitude</a>, <a>latitude</a>, <a>location</a>,
--   <a>distance</a>, <a>page</a>, <a>tag</a>, <a>festivalsonly</a>,
--   <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/geo.getEvents</a>
getEvents :: Request f (APIKey -> Ready)

-- | Get a chart of artists for a metro
--   
--   Optional: <a>start</a>, <a>end</a>, <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/geo.getMetroArtistChart</a>
getMetroArtistChart :: Request f (Metro -> Country -> APIKey -> Ready)

-- | Get a chart of hyped (up and coming) artists for a metro
--   
--   Optional: <a>start</a>, <a>end</a>, <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/geo.getMetroHypeArtistChart</a>
getMetroHypeArtistChart :: Request f (Metro -> Country -> APIKey -> Ready)

-- | Get a chart of tracks for a metro
--   
--   Optional: <a>start</a>, <a>end</a>, <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/geo.getMetroHypeTrackChart</a>
getMetroHypeTrackChart :: Request f (Metro -> Country -> APIKey -> Ready)

-- | Get a chart of tracks for a metro
--   
--   Optional: <a>start</a>, <a>end</a>, <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/geo.getMetroTrackChart</a>
getMetroTrackChart :: Request f (Metro -> Country -> APIKey -> Ready)

-- | Get a chart of the artists which make that metro unique
--   
--   Optional: <a>start</a>, <a>end</a>, <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/geo.getMetroUniqueArtistChart</a>
getMetroUniqueArtistChart :: Request f (Metro -> Country -> APIKey -> Ready)

-- | Get a chart of tracks for a metro
--   
--   Optional: <a>start</a>, <a>end</a>, <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/geo.getMetroUniqueTrackChart</a>
getMetroUniqueTrackChart :: Request f (Metro -> Country -> APIKey -> Ready)

-- | Get a list of available chart periods for this metro, expressed as
--   date ranges which can be sent to the chart services.
--   
--   <a>http://www.last.fm/api/show/geo.getMetroWeeklyChartlist</a>
getMetroWeeklyChartlist :: Request f (Metro -> APIKey -> Ready)

-- | Get a list of valid countries and metros for use in the other
--   webservices
--   
--   Optional: <a>country</a>
--   
--   <a>http://www.last.fm/api/show/geo.getMetros</a>
getMetros :: Request f (APIKey -> Ready)

-- | Get the most popular artists on Last.fm by country
--   
--   Optional: <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/geo.getTopArtists</a>
getTopArtists :: Request f (Country -> APIKey -> Ready)

-- | Get the most popular tracks on Last.fm last week by country
--   
--   Optional: <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/geo.getTopTracks</a>
getTopTracks :: Request f (Country -> APIKey -> Ready)


-- | Lastfm group API
--   
--   This module is intended to be imported qualified:
--   
--   <pre>
--   import qualified Network.Lastfm.Group as Group
--   </pre>
module Network.Lastfm.Group

-- | Get the hype list for a group
--   
--   <a>http://www.last.fm/api/show/group.getHype</a>
getHype :: Request f (Group -> APIKey -> Ready)

-- | Get a list of members for this group.
--   
--   Optional: <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/group.getMembers</a>
getMembers :: Request f (Group -> APIKey -> Ready)

-- | Get an album chart for a group, for a given date range. If no date
--   range is supplied, it will return the most recent album chart for this
--   group.
--   
--   Optional: <a>from</a>, <a>to</a>
--   
--   <a>http://www.last.fm/api/show/group.getWeeklyAlbumChart</a>
getWeeklyAlbumChart :: Request f (Group -> APIKey -> Ready)

-- | Get an artist chart for a group, for a given date range. If no date
--   range is supplied, it will return the most recent album chart for this
--   group.
--   
--   Optional: <a>from</a>, <a>to</a>
--   
--   <a>http://www.last.fm/api/show/group.getWeeklyArtistChart</a>
getWeeklyArtistChart :: Request f (Group -> APIKey -> Ready)

-- | Get a list of available charts for this group, expressed as date
--   ranges which can be sent to the chart services.
--   
--   <a>http://www.last.fm/api/show/group.getWeeklyChartList</a>
getWeeklyChartList :: Request f (Group -> APIKey -> Ready)

-- | Get a track chart for a group, for a given date range. If no date
--   range is supplied, it will return the most recent album chart for this
--   group.
--   
--   Optional: <a>from</a>, <a>to</a>
--   
--   <a>http://www.last.fm/api/show/group.getWeeklyTrackChart</a>
getWeeklyTrackChart :: Request f (Group -> APIKey -> Ready)


-- | Lastfm library API
--   
--   This module is intended to be imported qualified:
--   
--   <pre>
--   import qualified Network.Lastfm.Library as Library
--   </pre>
module Network.Lastfm.Library

-- | Add an album or collection of albums to a user's Last.fm library
--   
--   <a>http://www.last.fm/api/show/library.addAlbum</a>
addAlbum :: NonEmpty (Request f LibraryAlbum) -> Request f (APIKey -> SessionKey -> Sign)

-- | What artist to add to library?
albumItem :: Request f (Artist -> Album -> LibraryAlbum)

-- | Add an artist to a user's Last.fm library
--   
--   <a>http://www.last.fm/api/show/library.addArtist</a>
addArtist :: NonEmpty (Request f LibraryArtist) -> Request f (APIKey -> SessionKey -> Sign)

-- | What album to add to library?
artistItem :: Request f (Artist -> LibraryArtist)

-- | Add a track to a user's Last.fm library
--   
--   <a>http://www.last.fm/api/show/library.addTrack</a>
addTrack :: Request f (Artist -> Track -> APIKey -> SessionKey -> Sign)

-- | A paginated list of all the albums in a user's library, with play
--   counts and tag counts.
--   
--   Optional: <a>artist</a>, <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/library.getAlbums</a>
getAlbums :: Request f (User -> APIKey -> Ready)

-- | A paginated list of all the artists in a user's library, with play
--   counts and tag counts.
--   
--   Optional: <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/library.getArtists</a>
getArtists :: Request f (User -> APIKey -> Ready)

-- | A paginated list of all the tracks in a user's library, with play
--   counts and tag counts.
--   
--   Optional: <a>artist</a>, <a>album</a>, <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/library.getTracks</a>
getTracks :: Request f (User -> APIKey -> Ready)

-- | Remove an album from a user's Last.fm library
--   
--   <a>http://www.last.fm/api/show/library.removeAlbum</a>
removeAlbum :: Request f (Artist -> Album -> APIKey -> SessionKey -> Sign)

-- | Remove an artist from a user's Last.fm library
--   
--   <a>http://www.last.fm/api/show/library.removeArtist</a>
removeArtist :: Request f (Artist -> APIKey -> SessionKey -> Sign)

-- | Remove a scrobble from a user's Last.fm library
--   
--   <a>http://www.last.fm/api/show/library.removeScrobble</a>
removeScrobble :: Request f (Artist -> Track -> Timestamp -> APIKey -> SessionKey -> Sign)

-- | Remove a track from a user's Last.fm library
--   
--   <a>http://www.last.fm/api/show/library.removeTrack</a>
removeTrack :: Request f (Artist -> Track -> APIKey -> SessionKey -> Sign)


-- | Lastfm playlist API
--   
--   This module is intended to be imported qualified:
--   
--   <pre>
--   import qualified Network.Lastfm.Playlist as Playlist
--   </pre>
module Network.Lastfm.Playlist

-- | Add a track to a Last.fm user's playlist
--   
--   <a>http://www.last.fm/api/show/playlist.addTrack</a>
addTrack :: Request f (Playlist -> Artist -> Track -> APIKey -> SessionKey -> Sign)

-- | Create a Last.fm playlist on behalf of a user
--   
--   Optional: <a>title</a>, <a>description</a>
--   
--   <a>http://www.last.fm/api/show/playlist.create</a>
create :: Request f (APIKey -> SessionKey -> Sign)


-- | Lastfm radio API
--   
--   This module is intended to be imported qualified:
--   
--   <pre>
--   import qualified Network.Lastfm.Radio as Radio
--   </pre>
module Network.Lastfm.Radio

-- | Fetch new radio content periodically in an XSPF format.
--   
--   Optional: <a>discovery</a>, <a>rtp</a>, <a>buyLinks</a>
--   
--   <a>http://www.last.fm/api/show/radio.getPlaylist</a>
getPlaylist :: Request f (Multiplier -> Bitrate -> APIKey -> SessionKey -> Sign)

-- | Resolve the name of a resource into a station depending on which
--   resource it is most likely to represent.
--   
--   <a>http://www.last.fm/api/show/radio.search</a>
search :: Request f (Name -> APIKey -> Ready)

-- | Tune in to a Last.fm radio station.
--   
--   Optional: <a>language</a>
--   
--   <a>http://www.last.fm/api/show/radio.tune</a>
tune :: Request f (Station -> APIKey -> SessionKey -> Sign)


-- | Lastfm tag API
--   
--   This module is intended to be imported qualified:
--   
--   <pre>
--   import qualified Network.Lastfm.Tag as Tag
--   </pre>
module Network.Lastfm.Tag

-- | Get the metadata for a tag
--   
--   Optional: language
--   
--   <a>http://www.last.fm/api/show/tag.getInfo</a>
getInfo :: Request f (Tag -> APIKey -> Ready)

-- | Search for tags similar to this one. Returns tags ranked by
--   similarity, based on listening data.
--   
--   <a>http://www.last.fm/api/show/tag.getSimilar</a>
getSimilar :: Request f (Tag -> APIKey -> Ready)

-- | Get the top albums tagged by this tag, ordered by tag count.
--   
--   Optional: <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/tag.getTopAlbums</a>
getTopAlbums :: Request f (Tag -> APIKey -> Ready)

-- | Get the top artists tagged by this tag, ordered by tag count.
--   
--   Optional: <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/tag.getTopArtists</a>
getTopArtists :: Request f (Tag -> APIKey -> Ready)

-- | Fetches the top global tags on Last.fm, sorted by popularity (number
--   of times used)
--   
--   <a>http://www.last.fm/api/show/tag.getTopTags</a>
getTopTags :: Request f (APIKey -> Ready)

-- | Get the top tracks tagged by this tag, ordered by tag count.
--   
--   Optional: <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/tag.getTopTracks</a>
getTopTracks :: Request f (Tag -> APIKey -> Ready)

-- | Get an artist chart for a tag, for a given date range. If no date
--   range is supplied, it will return the most recent artist chart for
--   this tag.
--   
--   Optional: <a>from</a>, <a>to</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/tag.getWeeklyArtistChart</a>
getWeeklyArtistChart :: Request f (Tag -> APIKey -> Ready)

-- | Get a list of available charts for this tag, expressed as date ranges
--   which can be sent to the chart services.
--   
--   <a>http://www.last.fm/api/show/tag.getWeeklyChartList</a>
getWeeklyChartList :: Request f (Tag -> APIKey -> Ready)

-- | Search for a tag by name. Returns matches sorted by relevance.
--   
--   Optional: <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/tag.search</a>
search :: Request f (Tag -> APIKey -> Ready)


-- | Lastfm tasteometer API
--   
--   This module is intended to be imported qualified:
--   
--   <pre>
--   import qualified Network.Lastfm.Tasteometer as Tasteometer
--   </pre>
module Network.Lastfm.Tasteometer

-- | Get a Tasteometer score from two inputs, along with a list of shared
--   artists. If the input is a user some additional information is
--   returned.
--   
--   Optional: <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/tasteometer.compare</a>
compare :: (Targeted u, Targeted v) => Request f u -> Request f v -> Request f (APIKey -> Ready)


-- | Lastfm track API
--   
--   This module is intended to be imported qualified:
--   
--   <pre>
--   import qualified Network.Lastfm.Track as Track
--   </pre>
module Network.Lastfm.Track

-- | Unify (<a>Artist</a> -&gt; <a>Track</a> -&gt; …) and (<a>MBID</a>
--   -&gt; …)
class ArtistTrackOrMBID a

-- | Tag a track using a list of user supplied tags.
--   
--   <a>http://www.last.fm/api/show/track.addTags</a>
addTags :: Request f (Artist -> Track -> [Tag] -> APIKey -> SessionKey -> Sign)

-- | Ban a track for a given user profile.
--   
--   <a>http://www.last.fm/api/show/track.ban</a>
ban :: Request f (Artist -> Track -> APIKey -> SessionKey -> Sign)

-- | Get a list of Buy Links for a particular track.
--   
--   Optional: <a>autocorrect</a>
--   
--   <a>http://www.last.fm/api/show/track.getBuylinks</a>
getBuyLinks :: ArtistTrackOrMBID t => Request f (Country -> t)

-- | Use the last.fm corrections data to check whether the supplied track
--   has a correction to a canonical track.
--   
--   <a>http://www.last.fm/api/show/track.getCorrection</a>
getCorrection :: Request f (Artist -> Track -> APIKey -> Ready)

-- | Retrieve track metadata associated with a fingerprint id generated by
--   the Last.fm Fingerprinter. Returns track elements, along with a
--   <tt>rank</tt> value between 0 and 1 reflecting the confidence for each
--   match.
--   
--   <a>http://www.last.fm/api/show/track.getFingerprintMetadata</a>
getFingerprintMetadata :: Request f (Fingerprint -> APIKey -> Ready)

-- | Get the metadata for a track on Last.fm.
--   
--   Optional: <a>autocorrect</a>, <a>username</a>
--   
--   <a>http://www.last.fm/api/show/track.getInfo</a>
getInfo :: ArtistTrackOrMBID t => Request f t

-- | Get shouts for this track. Also available as an rss feed.
--   
--   Optional: <a>autocorrect</a>, <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/track.getShouts</a>
getShouts :: ArtistTrackOrMBID t => Request f t

-- | Get the similar tracks for this track on Last.fm, based on listening
--   data.
--   
--   Optional: <a>autocorrect</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/track.getSimilar</a>
getSimilar :: ArtistTrackOrMBID t => Request f t

-- | Get the tags applied by an individual user to a track on Last.fm.
--   
--   Optional: <a>autocorrect</a>, <a>user</a>
--   
--   <a>http://www.last.fm/api/show/track.getTags</a>
getTags :: ArtistTrackOrMBID t => Request f t

-- | Get the top fans for this track on Last.fm, based on listening data.
--   
--   Optional: <a>autocorrect</a>
--   
--   <a>http://www.last.fm/api/show/track.getTopFans</a>
getTopFans :: ArtistTrackOrMBID t => Request f t

-- | Get the top tags for this track on Last.fm, ordered by tag count.
--   
--   Optional: <a>autocorrect</a>
--   
--   <a>http://www.last.fm/api/show/track.getTopTags</a>
getTopTags :: ArtistTrackOrMBID t => Request f t

-- | Love a track for a user profile.
--   
--   <a>http://www.last.fm/api/show/track.love</a>
love :: Request f (Artist -> Track -> APIKey -> SessionKey -> Sign)

-- | Remove a user's tag from a track.
--   
--   <a>http://www.last.fm/api/show/track.removeTag</a>
removeTag :: Request f (Artist -> Track -> Tag -> APIKey -> SessionKey -> Sign)

-- | Add played tracks to the user profile.
--   
--   Scrobbles 50 first list elements
--   
--   <a>http://www.last.fm/api/show/track.scrobble</a>
scrobble :: NonEmpty (Request f Scrobble) -> Request f (APIKey -> SessionKey -> Sign)

-- | What track to scrobble?
--   
--   Optional: <a>album</a>, <a>albumArtist</a>, <a>chosenByUser</a>,
--   <a>context</a>, <a>duration</a>, <a>mbid</a>, <a>streamId</a>,
--   <a>trackNumber</a>
item :: Request f (Artist -> Track -> Timestamp -> Scrobble)

-- | Search for a track by track name. Returns track matches sorted by
--   relevance.
--   
--   Optional: <a>artist</a>, <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/track.search</a>
search :: Request f (Track -> APIKey -> Ready)

-- | Share a track twith one or more Last.fm users or other friends.
--   
--   Optional: <a>public</a>, <a>message</a>, <a>recipient</a>
--   
--   <a>http://www.last.fm/api/show/track.share</a>
share :: Request f (Artist -> Track -> Recipient -> APIKey -> SessionKey -> Sign)

-- | Unban a track for a user profile.
--   
--   <a>http://www.last.fm/api/show/track.unban</a>
unban :: Request f (Artist -> Track -> APIKey -> SessionKey -> Sign)

-- | Unlove a track for a user profile.
--   
--   <a>http://www.last.fm/api/show/track.unlove</a>
unlove :: Request f (Artist -> Track -> APIKey -> SessionKey -> Sign)

-- | Used to notify Last.fm that a user has started listening to a track.
--   Parameter names are case sensitive.
--   
--   Optional: <a>album</a>, <a>albumArtist</a>, <a>context</a>,
--   <a>duration</a>, <a>mbid</a>, <a>trackNumber</a>
--   
--   <a>http://www.last.fm/api/show/track.updateNowPlaying</a>
updateNowPlaying :: Request f (Artist -> Track -> APIKey -> SessionKey -> Sign)
instance ArtistTrackOrMBID (Artist -> Track -> APIKey -> Ready)
instance ArtistTrackOrMBID (MBID -> APIKey -> Ready)


-- | Lastfm user API
--   
--   This module is intended to be imported qualified:
--   
--   <pre>
--   import qualified Network.Lastfm.User as User
--   </pre>
module Network.Lastfm.User

-- | Get a list of tracks by a given artist scrobbled by this user ,
--   including scrobble time. Can be limited to specific timeranges,
--   defaults to all time.
--   
--   Optional: <a>startTimestamp</a>, <a>page</a>, <a>endTimestamp</a>
--   
--   <a>http://www.last.fm/api/show/user.getArtistTracks</a>
getArtistTracks :: Request f (User -> Artist -> APIKey -> Ready)

-- | Returns the tracks banned by the user
--   
--   Optional: <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/user.getBannedTracks</a>
getBannedTracks :: Request f (User -> APIKey -> Ready)

-- | Get a list of upcoming events that this user is attending. Easily
--   integratable into calendars, using the ical standard (see 'more
--   formats' section below).
--   
--   Optional: <a>page</a>, <a>festivalsonly</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/user.getEvents</a>
getEvents :: Request f (User -> APIKey -> Ready)

-- | Get a list of the user's friends on Last.fm.
--   
--   Optional: <tt>recenttracks</tt>, <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/user.getFriends</a>
getFriends :: Request f (User -> APIKey -> Ready)

-- | Get information about a user profile.
--   
--   <a>http://www.last.fm/api/show/user.getInfo</a>
getInfo :: Request f (User -> APIKey -> Ready)

-- | Get the last 50 tracks loved by a user.
--   
--   Optional: <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/user.getLovedTracks</a>
getLovedTracks :: Request f (User -> APIKey -> Ready)

-- | Get a list of a user's neighbours on Last.fm.
--   
--   Optional: <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/user.getNeighbours</a>
getNeighbours :: Request f (User -> APIKey -> Ready)

-- | Gets a list of forthcoming releases based on a user's musical taste.
--   
--   Optional: <tt>userecs</tt>
--   
--   <a>http://www.last.fm/api/show/user.getNewReleases</a>
getNewReleases :: Request f (User -> APIKey -> Ready)

-- | Get a paginated list of all events a user has attended in the past.
--   
--   Optional: <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/user.getPastEvents</a>
getPastEvents :: Request f (User -> APIKey -> Ready)

-- | Get the user's personal tags
--   
--   Optional: <tt>taggingtype</tt>, <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/user.getPersonalTags</a>
getPersonalTags :: Request f (User -> Tag -> TaggingType -> APIKey -> Ready)

-- | Get a list of a user's playlists on Last.fm.
--   
--   <a>http://www.last.fm/api/show/user.getPlaylists</a>
getPlaylists :: Request f (User -> APIKey -> Ready)

-- | Get a list of the recent Stations listened to by this user.
--   
--   Optional: <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/user.getRecentStations</a>
getRecentStations :: Request f (User -> APIKey -> SessionKey -> Sign)

-- | Get a list of the recent tracks listened to by this user. Also
--   includes the currently playing track with the nowplaying="true"
--   attribute if the user is currently listening.
--   
--   Optional: <a>limit</a>, <a>page</a>, <a>from</a>, <tt>extended</tt>,
--   <a>to</a>
--   
--   <a>http://www.last.fm/api/show/user.getRecentTracks</a>
getRecentTracks :: Request f (User -> APIKey -> Ready)

-- | Get Last.fm artist recommendations for a user
--   
--   Optional: <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/user.getRecommendedArtists</a>
getRecommendedArtists :: Request f (APIKey -> SessionKey -> Sign)

-- | Get a paginated list of all events recommended to a user by Last.fm,
--   based on their listening profile.
--   
--   Optional: <a>limit</a>, <a>page</a>, <a>latitude</a>,
--   <a>longitude</a>, <a>festivalsonly</a>, <a>country</a>
--   
--   <a>http://www.last.fm/api/show/user.getRecommendedEvents</a>
getRecommendedEvents :: Request f (APIKey -> SessionKey -> Sign)

-- | Get shouts for this user. Also available as an rss feed.
--   
--   Optional: <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/user.getShouts</a>
getShouts :: Request f (User -> APIKey -> Ready)

-- | Get the top albums listened to by a user. You can stipulate a time
--   period. Sends the overall chart by default.
--   
--   Optional: <tt>period</tt>, <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/user.getTopAlbums</a>
getTopAlbums :: Request f (User -> APIKey -> Ready)

-- | Get the top artists listened to by a user. You can stipulate a time
--   period. Sends the overall chart by default.
--   
--   Optional: <tt>period</tt>, <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/user.getTopArtists</a>
getTopArtists :: Request f (User -> APIKey -> Ready)

-- | Get the top tags used by this user.
--   
--   Optional: <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/user.getTopTags</a>
getTopTags :: Request f (User -> APIKey -> Ready)

-- | Get the top tracks listened to by a user. You can stipulate a time
--   period. Sends the overall chart by default.
--   
--   Optional: <tt>period</tt>, <a>limit</a>, <a>page</a>
--   
--   <a>http://www.last.fm/api/show/user.getTopTracks</a>
getTopTracks :: Request f (User -> APIKey -> Ready)

-- | Get an album chart for a user profile, for a given date range. If no
--   date range is supplied, it will return the most recent album chart for
--   this user.
--   
--   Optional: <a>from</a>, <a>to</a>
--   
--   <a>http://www.last.fm/api/show/user.getWeeklyAlbumChart</a>
getWeeklyAlbumChart :: Request f (User -> APIKey -> Ready)

-- | Get an artist chart for a user profile, for a given date range. If no
--   date range is supplied, it will return the most recent artist chart
--   for this user.
--   
--   Optional: <a>from</a>, <a>to</a>
--   
--   <a>http://www.last.fm/api/show/user.getWeeklyArtistChart</a>
getWeeklyArtistChart :: Request f (User -> APIKey -> Ready)

-- | Get a list of available charts for this user, expressed as date ranges
--   which can be sent to the chart services.
--   
--   <a>http://www.last.fm/api/show/user.getWeeklyChartList</a>
getWeeklyChartList :: Request f (User -> APIKey -> Ready)

-- | Get a track chart for a user profile, for a given date range. If no
--   date range is supplied, it will return the most recent track chart for
--   this user.
--   
--   Optional: <a>from</a>, <a>to</a>
--   
--   <a>http://www.last.fm/api/show/user.getWeeklyTrackChart</a>
getWeeklyTrackChart :: Request f (User -> APIKey -> Ready)

-- | Shout on this user's shoutbox
--   
--   <a>http://www.last.fm/api/show/user.shout</a>
shout :: Request f (User -> Message -> APIKey -> SessionKey -> Sign)


-- | Lastfm venue API
--   
--   This module is intended to be imported qualified:
--   
--   <pre>
--   import qualified Network.Lastfm.Venue as Venue
--   </pre>
module Network.Lastfm.Venue

-- | Get a list of upcoming events at this venue.
--   
--   Optional: <a>festivalsonly</a>
--   
--   <a>http://www.last.fm/api/show/venue.getEvents</a>
getEvents :: Request f (Venue -> APIKey -> Ready)

-- | Get a paginated list of all the events held at this venue in the past.
--   
--   Optional: <a>festivalsonly</a>, <a>page</a>, <a>limit</a>
--   
--   <a>http://www.last.fm/api/show/venue.getPastEvents</a>
getPastEvents :: Request f (Venue -> APIKey -> Ready)

-- | Search for a venue by venue name
--   
--   Optional: <a>page</a>, <a>limit</a>, <a>country</a>
--   
--   <a>http://www.last.fm/api/show/venue.search</a>
search :: Request f (VenueName -> APIKey -> Ready)


-- | Lastfm API interface
module Network.Lastfm
