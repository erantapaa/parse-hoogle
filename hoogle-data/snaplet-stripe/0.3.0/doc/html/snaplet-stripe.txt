-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Stripe snaplet for the Snap Framework
--   
@package snaplet-stripe
@version 0.3.0

module Snap.Snaplet.Stripe
class HasStripe b
getStripeState :: HasStripe b => b StripeState
data StripeState
StripeState :: StripeConfig -> PublicKey -> ClientId -> StripeState
stripeConfig :: StripeState -> StripeConfig
stripePublicKey :: StripeState -> PublicKey
stripeConnectClientId :: StripeState -> ClientId
initStripe :: SnapletInit b StripeState
addStripeSplices :: HasHeist b => Snaplet (Heist b) -> SnapletLens b StripeState -> Initializer b v ()
addCustomer :: (Functor m, HasStripe m, MonadIO m) => Email -> m (Either StripeFailure Customer)
addCustomerWithCard :: (Functor m, HasStripe m, MonadIO m) => Email -> TokenId -> m (Either StripeFailure Customer)
addCardByCustId :: (Functor m, HasStripe m, MonadIO m) => CustomerId -> TokenId -> m (Either StripeFailure Customer)
chargeCustomer :: (Functor m, HasStripe m, MonadIO m) => CustomerId -> Amount -> Currency -> Maybe Description -> m (Either StripeFailure Charge)
chargeConnectCustomer :: (Functor m, HasStripe m, MonadIO m) => CustomerId -> Amount -> Currency -> Maybe Description -> AccessToken -> Maybe Amount -> m (Either StripeFailure Charge)
fromAmount :: Amount -> Float
toAmount :: Float -> Amount
charge :: (Functor m, HasStripe m, MonadIO m) => ChargeId -> m (Either StripeFailure Charge)
connectCharge :: (Functor m, HasStripe m, MonadIO m) => AccessToken -> ChargeId -> m (Either StripeFailure Charge)
customer :: (Functor m, HasStripe m, MonadIO m) => CustomerId -> m (Either StripeFailure Customer)
getAuthURL :: (MonadIO m, HasStripe m) => Maybe Scope -> Maybe Text -> Maybe Landing -> m URL
instance Show PublicKey
instance Eq PublicKey
instance Show StripeState
instance HasStripe (Handler b StripeState)
