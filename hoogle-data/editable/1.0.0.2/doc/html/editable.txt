-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Interactive editors for Generics
--   
@package editable
@version 1.0.0.2

module Data.Editable

-- | Launch an editor for a value with <tt>editor</tt>. Editable can be
--   derived with <tt>instance Editable a</tt> so long as:
--   
--   <ul>
--   <li><tt>a</tt> instances <a>Generic</a> (i.e. have <tt>deriving
--   Generics</tt> on the type).</li>
--   <li>All the constructors' fields' types are <a>Parseable</a>.</li>
--   </ul>
class Editable a where editor = fmap to . geditor Nothing Nothing . from
editor :: Editable a => a -> IO a

-- | A type is parseable if you can:
--   
--   <ul>
--   <li>From a string return either a value or an error message.</li>
--   <li>Represent a value as a string.</li>
--   <li>Showing a value then reading it yields the same value.</li>
--   <li>The type can be pretty printed.</li>
--   </ul>
--   
--   With overlapping instances, you get this instance for free for any
--   type that is in <a>Show</a>, <a>Read</a> and <a>Typeable</a>. The
--   <a>String</a> instance is also provided so quotes are not required.
class Parseable a
reader :: Parseable a => String -> Either String a
shower :: Parseable a => a -> String
typeName :: Parseable a => a -> String
instance [overlap ok] GEditable U1
instance [overlap ok] (GEditable b, GEditable c) => GEditable (b :+: c)
instance [overlap ok] (GEditable b, GEditable c) => GEditable (b :*: c)
instance [overlap ok] (GEditable e, Selector c) => GEditable (M1 S c e)
instance [overlap ok] (GEditable e, Datatype c) => GEditable (M1 D c e)
instance [overlap ok] (GEditable e, Constructor c) => GEditable (M1 C c e)
instance [overlap ok] Parseable e => GEditable (K1 i e)
instance [overlap ok] (Show a, Read a, Typeable a) => Parseable a
instance [overlap ok] Parseable [Char]
