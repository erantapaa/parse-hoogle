-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Overloaded dynamics literals.
--   
@package music-dynamics-literal
@version 1.9.0


-- | Provides overloaded dynamic literals.
module Music.Dynamics.Literal

-- | Dynamics literal.
--   
--   First value is start value, second is end value.
--   
--   <ul>
--   <li><tt>(Just x, Nothing)</tt> is a constant dynamic of
--   <tt>x</tt></li>
--   <li><tt>(Just x, Just y)</tt> is a dynamic varying from <tt>x</tt> to
--   <tt>y</tt></li>
--   <li><tt>(Nothing, Just y)</tt> is a dynamic varying from the previous
--   level to <tt>y</tt></li>
--   <li><tt>(Nothing, Nothing)</tt> is a dynamic varying from the previous
--   level to the next.</li>
--   </ul>
--   
--   For levels, we use <tt>-0.5</tt> for <i>mp</i>, <tt>0.5</tt> for
--   <i>mf</i> and add or remove one for each level. <tt>0</tt> is an
--   unspecified middle level dynamic.
newtype DynamicsL
DynamicsL :: (Maybe Double, Maybe Double) -> DynamicsL
getDynamicsL :: DynamicsL -> (Maybe Double, Maybe Double)
class IsDynamics a
fromDynamics :: IsDynamics a => DynamicsL -> a
pppppp :: IsDynamics a => a
ppppp :: IsDynamics a => a
pppp :: IsDynamics a => a
ppp :: IsDynamics a => a
pp :: IsDynamics a => a
_p :: IsDynamics a => a
mp :: IsDynamics a => a
mf :: IsDynamics a => a
_f :: IsDynamics a => a
ff :: IsDynamics a => a
fff :: IsDynamics a => a
ffff :: IsDynamics a => a
fffff :: IsDynamics a => a
ffffff :: IsDynamics a => a
sffz :: IsDynamics a => a
sfz :: IsDynamics a => a
fz :: IsDynamics a => a
rfz :: IsDynamics a => a
fp :: IsDynamics a => a
instance Eq DynamicsL
instance Show DynamicsL
instance Ord DynamicsL
instance IsDynamics Double
instance Integral a => IsDynamics (Ratio a)
instance HasResolution a => IsDynamics (Fixed a)
instance IsDynamics Float
instance IsDynamics a => IsDynamics [a]
instance (Monoid b, IsDynamics a) => IsDynamics (b, a)
instance IsDynamics a => IsDynamics (Maybe a)
instance IsDynamics DynamicsL
