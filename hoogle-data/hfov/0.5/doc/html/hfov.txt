-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Field-of-view calculation for low-resolution 2D raster grids.
--   
--   A Haskell binding to a Field of View calculation library written by
--   Greg McIntyre (blue_puyo) in C.
@package hfov
@version 0.5


-- | HFOV is a library for calculating field of view in a 2D raster grid,
--   such as those found in roguelike games.
--   
--   Thanks to Greg McIntyre for the original C library to which this
--   Haskell library binds. It can be found at
--   <a>http://libfov.sourceforge.net/wiki</a>.
module FOV

-- | Opaque data structure for holding information about FOV calculation.
data Settings

-- | Shape of the field.
data Shape

-- | Limit the field of view to a circle radius R by precalculating the
--   circle shape. This consumes memory at the rate of 4*(R+2) bytes per R
--   used in calls to fovCircle. Each radius is only calculated once.
CirclePrecalculate :: Shape

-- | Limit the field to a circle shape calculated on the fly.
Circle :: Shape

-- | Limit the field to an octagon with maximum radius R.
Octagon :: Shape

-- | Limit the field to an RxR square.
Square :: Shape
data Direction
East :: Direction
NorthEast :: Direction
North :: Direction
NorthWest :: Direction
West :: Direction
SouthWest :: Direction
South :: Direction
SouthEast :: Direction

-- | Create a new FOV settings structure.
newSettings :: IO Settings

-- | Set the shape of the field of view. The default is CirclePrecalculate.
setShape :: Settings -> Shape -> IO ()

-- | Sets whether or not to apply lighting to opaque squares.
setOpaqueApply :: Settings -> Bool -> IO ()

-- | Cast a 360 degree field of view.
circle :: Settings -> (Int, Int) -> Int -> (Int -> Int -> IO ()) -> (Int -> Int -> IO Bool) -> IO ()

-- | Cast a beam.
beam :: Settings -> (Int, Int) -> Int -> Direction -> Float -> (Int -> Int -> IO ()) -> (Int -> Int -> IO Bool) -> IO ()
