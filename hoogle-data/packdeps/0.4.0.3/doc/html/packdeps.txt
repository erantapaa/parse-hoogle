-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Check your cabal packages for lagging dependencies.
--   
--   This provides a library and command line tool for checking if the
--   upper bounds in your package's dependency list excludes the newest
--   package available. The code was originally available only as a web
--   interface at <a>http://packdeps.haskellers.com/</a>, but is now
--   available for standalone use as well.
--   
--   The command line tool has an incredibly simple interface: simply pass
--   it a list of cabal files, and it will tell you what dependencies- if
--   any- are restricted.
@package packdeps
@version 0.4.0.3

module Distribution.PackDeps

-- | The newest version of every package.
type Newest = Map String PackInfo

-- | Whether or not a package can accept all of the newest versions of its
--   dependencies. If not, it returns a list of packages which are not
--   accepted, and a timestamp of the most recently updated package.
data CheckDepsRes
AllNewest :: CheckDepsRes
WontAccept :: [(String, String)] -> UTCTime -> CheckDepsRes

-- | Information on a single package.
data DescInfo
DescInfo :: String -> [Dependency] -> PackageIdentifier -> String -> DescInfo
diHaystack :: DescInfo -> String
diDeps :: DescInfo -> [Dependency]
diPackage :: DescInfo -> PackageIdentifier
diSynopsis :: DescInfo -> String
loadNewest :: IO Newest
loadNewestFrom :: FilePath -> IO Newest
parseNewest :: ByteString -> Newest
checkDeps :: Newest -> DescInfo -> (PackageName, Version, CheckDepsRes)

-- | Loads up the newest version of a package from the <a>Newest</a> list,
--   if available.
getPackage :: String -> Newest -> Maybe DescInfo

-- | Parse information on a package from the contents of a cabal file.
parsePackage :: ByteString -> Maybe DescInfo

-- | Load a single package from a cabal file.
loadPackage :: FilePath -> IO (Maybe DescInfo)

-- | Find all of the packages matching a given search string.
filterPackages :: String -> Newest -> [DescInfo]

-- | Find all packages depended upon by the given list of packages.
deepDeps :: Newest -> [DescInfo] -> [DescInfo]
type Reverses = Map String (Version, [(String, VersionRange)])
getReverses :: Newest -> Reverses
diName :: DescInfo -> String
data PackInfo
PackInfo :: Version -> Maybe DescInfo -> EpochTime -> PackInfo
piVersion :: PackInfo -> Version
piDesc :: PackInfo -> Maybe DescInfo
piEpoch :: PackInfo -> EpochTime

-- | Information on a single package.
data DescInfo
DescInfo :: String -> [Dependency] -> PackageIdentifier -> String -> DescInfo
diHaystack :: DescInfo -> String
diDeps :: DescInfo -> [Dependency]
diPackage :: DescInfo -> PackageIdentifier
diSynopsis :: DescInfo -> String
instance Show DescInfo
instance Read DescInfo
instance Show PackInfo
instance Read PackInfo
instance Show CheckDepsRes
