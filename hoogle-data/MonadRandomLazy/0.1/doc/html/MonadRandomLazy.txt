-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Lazy monad for psuedo random-number generation.
--   
--   Support for lazy computations which consume random values.
@package MonadRandomLazy
@version 0.1


-- | License : BSD3
--   
--   A lazy monad for random-number generation. This monad allows, for
--   example, computation of infinite random lists.
--   
--   This monad respects the interface defined by <a>MonadRandom</a>.
--   
--   A monadic computation is one that consumes random values. The bind
--   operation works like the <tt>Gen</tt> monad in <a>QuickCheck</a>: it
--   does not thread the random seed; instead it *splits* the random seed.
module Control.Monad.LazyRandom

-- | Evaluate a random computation using the generator <tt>g</tt>. The new
--   <tt>g</tt> is discarded.
evalRand :: RandomGen g => Rand g a -> g -> a

-- | Run a random computation using the generator <tt>g</tt>, returning the
--   result and a new generator.
runRand :: RandomGen g => Rand g a -> g -> (a, g)

-- | Evaluate a random computation in the IO monad, using the random number
--   generator supplied by <a>getStdRandom</a>.
evalRandIO :: Rand StdGen a -> IO a
data Rand g a
instance RandomGen g => MonadSplit g (Rand g)
instance RandomGen g => MonadRandom (Rand g)
instance RandomGen g => Monad (Rand g)
instance RandomGen g => Applicative (Rand g)
instance Functor (Rand g)
