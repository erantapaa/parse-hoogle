-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Interleaved effects for attoparsec parsers
--   
@package attoparsec-trans
@version 0.1.1.0

module Control.Monad.Trans.Parser
data ResultM i m r
FailM :: i -> String -> ResultM i m r
DoneM :: i -> r -> ResultM i m r
PartialM :: (ParserT i m r) -> ResultM i m r
toM :: Monad m => IResult i r -> ResultM i m r
newtype ParserT i m r
ParserT :: (i -> m (ResultM i m r)) -> ParserT i m r
runParserT :: ParserT i m r -> i -> m (ResultM i m r)
liftIR :: (Monad m, Monoid i) => IResult i r -> ParserT i m r
liftP :: Monad m => (i -> IResult i r) -> ParserT i m r
feedM :: (Monad m, Monoid i) => ResultM i m r -> i -> m (ResultM i m r)
feedMWith :: (Monad m, Monoid i, Eq i) => m i -> ResultM i m r -> m (ResultM i m r)
runParserTOnly :: Monad m => ParserT i m r -> i -> m (Either String r)
runParserTWith :: (Monad m, Monoid i, Eq i) => m i -> ParserT i m r -> ParserT i m r
runStateParserT :: Monad m => ParserT i (StateT r m) () -> r -> ParserT i m r
runWriterParserT :: (Monad m, Monoid r) => ParserT i (WriterT r m) () -> ParserT i m r
failResultM :: Monad m => ResultM i m r -> m r
zeroResultM :: MonadPlus m => ResultM i m r -> m r
maybeResultM :: ResultM i m r -> Maybe r
eitherResultM :: ResultM i m r -> Either String r
instance MonadIO m => MonadIO (ParserT i m)
instance MonadTrans (ParserT i)
instance Monad m => Monad (ParserT i m)
instance Monad m => Applicative (ParserT i m)
instance Monad m => Functor (ParserT i m)
instance Monad m => Functor (ResultM i m)
