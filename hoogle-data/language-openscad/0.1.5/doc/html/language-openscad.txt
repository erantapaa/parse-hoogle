-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A simple parser for OpenSCAD
--   
--   A simple parser for OpenSCAD
@package language-openscad
@version 0.1.5

module Language.OpenSCAD

-- | Strip the comments from and OpenSCAD source file
stripComments :: ByteString -> ByteString

-- | Parse an OpenSCAD source file
parseFile :: ByteString -> Either String [TopLevel]

-- | An identifier
newtype Ident
Ident :: String -> Ident

-- | Parse an identifier
ident :: Parser Ident

-- | Things which can appear at the top level of an OpenSCAD source file
data TopLevel
TopLevelScope :: Scad -> TopLevel
UseDirective :: String -> TopLevel
IncludeDirective :: String -> TopLevel

-- | A OpenSCAD scope
data Scad
ModuleDef :: Ident -> [(Ident, Maybe Expr)] -> [Scad] -> Scad
moduleName :: Scad -> Ident
moduleArgs :: Scad -> [(Ident, Maybe Expr)]
moduleBody :: Scad -> [Scad]
VarDef :: Ident -> Expr -> Scad
varName :: Scad -> Ident
varValue :: Scad -> Expr
FuncDef :: Ident -> [Ident] -> Expr -> Scad
funcName :: Scad -> Ident
funcArgs :: Scad -> [Ident]
funcBody :: Scad -> Expr
Object :: Object -> Scad

-- | An OpenSCAD geometry object
data Object
Module :: Ident -> [Argument Expr] -> (Maybe Object) -> Object
ForLoop :: Ident -> Expr -> Object -> Object

-- | Implicit union
Objects :: [Object] -> Object
If :: Expr -> Object -> (Maybe Object) -> Object
BackgroundMod :: Object -> Object
DebugMod :: Object -> Object
RootMod :: Object -> Object
DisableMod :: Object -> Object

-- | An OpenSCAD expression
data Expr
EVar :: Ident -> Expr
EIndex :: Expr -> Expr -> Expr
ENum :: Double -> Expr
EVec :: [Expr] -> Expr
ERange :: (Range Expr) -> Expr
EString :: String -> Expr
EBool :: Bool -> Expr
EFunc :: Ident -> [Argument Expr] -> Expr
ENegate :: Expr -> Expr
EPlus :: Expr -> Expr -> Expr
EMinus :: Expr -> Expr -> Expr
EMult :: Expr -> Expr -> Expr
EDiv :: Expr -> Expr -> Expr
EMod :: Expr -> Expr -> Expr
EEquals :: Expr -> Expr -> Expr
ENotEquals :: Expr -> Expr -> Expr
EGT :: Expr -> Expr -> Expr
EGE :: Expr -> Expr -> Expr
ELT :: Expr -> Expr -> Expr
ELE :: Expr -> Expr -> Expr
ENot :: Expr -> Expr
EOr :: Expr -> Expr -> Expr
EAnd :: Expr -> Expr -> Expr
ETernary :: Expr -> Expr -> Expr -> Expr
EParen :: Expr -> Expr

-- | An item in an argument list
data Argument a

-- | Just a plain value
Argument :: a -> Argument a

-- | A named argument
NamedArgument :: Ident -> a -> Argument a

-- | <tt>Range start end step</tt> denotes a list starting at
--   <tt>start</tt> and stopping at <tt>end</tt> with increments of
--   <tt>step</tt>.
data Range a
Range :: a -> a -> (Maybe a) -> Range a
instance Show Ident
instance Eq Ident
instance Ord Ident
instance Show a => Show (Argument a)
instance Show a => Show (Range a)
instance Show Expr
instance Show Object
instance Show Scad
instance Show TopLevel
