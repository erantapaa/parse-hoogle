-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Dingo is a Rich Internet Application platform based on the Warp web server.
--   
--   Dingo is a Rich Internet Application platform based on the Warp web
--   server. It allows you to write code which looks very much like regular
--   GUI code and have it work in the browser. This package contains the
--   core modules.
@package dingo-core
@version 0.1.0

module Dingo.Selector

-- | A selector that can be refined.
class RefinableSelector a
with :: RefinableSelector a => a -> Qualifier -> a
data Selector
data SimpleSelector
class ToSelector a
toSelector :: ToSelector a => a -> Selector

-- | Descendant combinator.
(.>*.) :: (ToSimpleSelector a, ToSelector b) => a -> b -> Selector

-- | Adjacent combinator.
(.+.) :: (ToSimpleSelector a, ToSelector b) => a -> b -> Selector

-- | Child combinator.
(.>.) :: (ToSimpleSelector a, ToSelector b) => a -> b -> Selector

-- | Following combinator.
(.~.) :: (ToSimpleSelector a, ToSelector b) => a -> b -> Selector

-- | Match any element.
anyElement :: SimpleSelector

-- | Match a particular element type.
element :: Text -> SimpleSelector
fromSelector :: ToSelector a => a -> Builder

-- | Match by HTML/XML element ID.
withId :: RefinableSelector a => a -> Text -> a

-- | Match by HTML class.
withClass :: RefinableSelector a => a -> Text -> a

-- | Match by attribute presence
withAttribute :: RefinableSelector a => a -> Text -> a

-- | Match by attribute value.
withAttributeValue :: RefinableSelector a => a -> Text -> Text -> a

-- | Match by value contained in a space-separated attribute value.
withAttributeValueElement :: RefinableSelector a => a -> Text -> Text -> a

-- | Match by value at the left of a hyphen-separated attribute value.
withAttributeValuePrefix :: RefinableSelector a => a -> Text -> Text -> a
instance ToSimpleSelector SimpleSelector
instance ToSelector Selector
instance ToSelector SimpleSelector
instance ToSelector Qualifier
instance RefinableSelector SimpleSelector
instance RefinableSelector Discriminators


-- | This module is used to embed resource bundles for use by widgets and
--   applications.
--   
--   Typical usage looks like:
--   
--   <pre>
--   import Dingo.ResourceBundle
--   
--   myResourceDirectory :: ResourceDirectory
--   myResourceDirectory = $(embedDir "bundles/my-resources")
--   
--   myResourceBundle :: ResourceBundle
--   myResourceBundle = makeResourceBundle myResourceDirecory
--   </pre>
--   
--   You can then use <tt>myResourceBundle</tt> as a resource bundle in a
--   widget or supply it in the application settings when starting the
--   Dingo server.
module Dingo.ResourceBundle

-- | Resource bundle data structure.
data ResourceBundle

-- | Type alias for convience for using <a>embedDir</a>.
type ResourceDirectory = [(String, ByteString)]

-- | Make a resource bundle from an embedded directory structure returned
--   by <a>embedDir</a>.
makeResourceBundle :: ResourceDirectory -> ResourceBundle

-- | Embed a directory recusrively in your source code.
--   
--   <pre>
--   import qualified Data.ByteString
--   
--   myDir :: [(FilePath, Data.ByteString.ByteString)]
--   myDir = $(embedDir "dirName")
--   </pre>
embedDir :: FilePath -> Q Exp

module Dingo.Event

-- | Event types.
data Event
OnClick :: Event
OnDblClick :: Event
OnChange :: Event

-- | Perform a callback when the given event triggers.
onEvent :: ToSelector a => a -> Event -> CallbackM () -> CallbackM ()

-- | Emit an event notification for a widget. This function behaves exactly
--   as if the event had occurred in the browser.
emitEvent :: Widget w s => w -> Event -> CallbackM ()


-- | Module which defines the Widget data type and operations which apply
--   to all widgets.
module Dingo.Widget
class (Typeable c, Typeable s, Show c, FromJSON s, ToJSON s) => Widget c s | c -> s
getWidgetId :: Widget c s => c -> WidgetId
renderWidget :: Widget c s => c -> Html
encodeClientStateJs :: Widget c s => WidgetType c -> JavascriptUrl Text
decodeClientStateJs :: Widget c s => WidgetType c -> JavascriptUrl Text
showWidget :: Widget c s => c -> s -> String
headMergeContent :: Widget c s => WidgetType c -> Html
widgetResources :: Widget c s => WidgetType c -> [ResourceBundle]

-- | Widget ID.
data WidgetId

-- | Get the current value of widget.
getWidgetState :: Widget w s => w -> CallbackM (Maybe s)

-- | Update the value of a widget. This function pushes the new value to
--   the browser.
setWidgetState :: Widget w s => w -> s -> CallbackM ()

-- | Widget selector.
widgetSelector :: Widget w s => w -> SimpleSelector

module Dingo.Server

-- | Settings for the Dingo application. This is kept as an abstract type
--   to avoid breaking applications when fields are added. You should use
--   record syntax to change the defaults, e.g.
--   
--   <pre>
--   defaultDingoSettings { dsPort = 4900 }
--   </pre>
data DingoSettings

-- | Default settings for the Dingo application.
defaultDingoSettings :: DingoSettings

-- | Port to listen on. Default value: 3000
dsPort :: DingoSettings -> Int

-- | Starting resource bundles. Default value: []
dsResourceBundles :: DingoSettings -> [ResourceBundle]

-- | Run the application with the given settings.
runApplication :: DingoSettings -> Text -> (Application -> CallbackM ()) -> IO ()


-- | Module which defines the Application widget and operations on it.
module Dingo.Widget.Application

-- | Application widget. There is exactly one instance of this widget per
--   client browser.
data Application

-- | Set application title.
setApplicationTitle :: Application -> Text -> CallbackM ()

module Dingo.Callback
type CallbackM = CallbackT (SessionT WrapCallback IO)

-- | Add a new widget using a given parent. The widget is constructed using
--   the given function which receives the new widget's ID as a parameter.
addWidget :: (Widget w s, Widget w' s') => w' -> (WidgetId -> CallbackM (w, s)) -> CallbackM w

-- | Send raw Javascript to the browser.
sendJavascript :: JavascriptUrl Text -> CallbackM ()

-- | Set the widget contents to the given HTML element.
setWidgetContents :: Widget w s => w -> Html -> CallbackM ()
