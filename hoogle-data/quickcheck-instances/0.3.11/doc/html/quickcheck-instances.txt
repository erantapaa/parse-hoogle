-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Common quickcheck instances
--   
@package quickcheck-instances
@version 0.3.11


-- | Instances are provided for the types in the packages:
--   
--   <ul>
--   <li>array</li>
--   <li>bytestring</li>
--   <li>containers</li>
--   <li>old-time</li>
--   <li>text</li>
--   <li>time</li>
--   <li>unordered-containers</li>
--   </ul>
--   
--   Since all of these instances are provided as orphans, I recommend that
--   you do not use this library within another library module, so that you
--   don't impose these instances on down-stream consumers of your code.
--   
--   For information on writing a test-suite with Cabal see
--   <a>http://www.haskell.org/cabal/users-guide/#test-suites</a>
module Test.QuickCheck.Instances
instance CoArbitrary AbsoluteTime
instance Arbitrary AbsoluteTime
instance CoArbitrary ZonedTime
instance Arbitrary ZonedTime
instance CoArbitrary LocalTime
instance Arbitrary LocalTime
instance CoArbitrary TimeOfDay
instance Arbitrary TimeOfDay
instance CoArbitrary TimeZone
instance Arbitrary TimeZone
instance CoArbitrary NominalDiffTime
instance Arbitrary NominalDiffTime
instance Function UTCTime
instance CoArbitrary UTCTime
instance Arbitrary UTCTime
instance Function DiffTime
instance CoArbitrary DiffTime
instance Arbitrary DiffTime
instance CoArbitrary UniversalTime
instance Arbitrary UniversalTime
instance Function Day
instance CoArbitrary Day
instance Arbitrary Day
instance CoArbitrary CalendarTime
instance Arbitrary CalendarTime
instance CoArbitrary TimeDiff
instance Arbitrary TimeDiff
instance CoArbitrary ClockTime
instance Arbitrary ClockTime
instance CoArbitrary Day
instance Arbitrary Day
instance CoArbitrary Month
instance Arbitrary Month
instance CoArbitrary a => CoArbitrary (Tree a)
instance Arbitrary a => Arbitrary (Tree a)
instance (CoArbitrary k, CoArbitrary v) => CoArbitrary (HashMap k v)
instance (Hashable k, Eq k, Arbitrary k, Arbitrary v) => Arbitrary (HashMap k v)
instance CoArbitrary a => CoArbitrary (HashSet a)
instance (Hashable a, Eq a, Arbitrary a) => Arbitrary (HashSet a)
instance (Ord a, Function a) => Function (Set a)
instance CoArbitrary a => CoArbitrary (Set a)
instance (Ord a, Arbitrary a) => Arbitrary (Set a)
instance CoArbitrary a => CoArbitrary (Seq a)
instance Arbitrary a => Arbitrary (Seq a)
instance (CoArbitrary k, CoArbitrary v) => CoArbitrary (Map k v)
instance (Ord k, Arbitrary k, Arbitrary v) => Arbitrary (Map k v)
instance CoArbitrary IntSet
instance Arbitrary IntSet
instance CoArbitrary a => CoArbitrary (IntMap a)
instance Arbitrary a => Arbitrary (IntMap a)
instance Function Text
instance Function Text
instance CoArbitrary Text
instance CoArbitrary Text
instance Arbitrary Text
instance Arbitrary Text
instance CoArbitrary ByteString
instance CoArbitrary ByteString
instance Arbitrary ByteString
instance Arbitrary ByteString
instance (IArray UArray e, Ix i, CoArbitrary i, CoArbitrary e) => CoArbitrary (UArray i e)
instance (Ix i, CoArbitrary i, CoArbitrary e) => CoArbitrary (Array i e)
instance (IArray UArray e, Ix i, Arbitrary i, Arbitrary e) => Arbitrary (UArray i e)
instance (Ix i, Arbitrary i, Arbitrary e) => Arbitrary (Array i e)
