-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Portable temporary files and directories with automatic deletion
--   
--   The functions for creating temporary files and directories in the base
--   library are quite limited. The <tt>unixutils</tt> package contains
--   some good ones, but they aren't portable to Windows.
--   
--   This library repackages the Cabal implementations of its own temporary
--   file and folder functions so that you can use them without linking
--   against Cabal or depending on it being installed.
--   
--   This library provides the same functionality as the <tt>temporary</tt>
--   package, but uses <tt>resourcet</tt> to provide automatic deletion
--   without nesting <tt>withTempFile</tt>.
@package temporary-resourcet
@version 0.1.0.0

module System.IO.Temp

-- | Create a temporary directory. The directory will be deleted if empty
--   when the resource is released. If a parent directory is supplied, the
--   temporary directory will be created there; otherwise, it will be
--   created in the system temporary directory returned by
--   <a>getTemporaryDirectory</a>.
createTempDirectory :: MonadResource m => Maybe FilePath -> String -> m (ReleaseKey, FilePath)

-- | Open a temporary file in binary mode. The file will be readable and
--   writeable, but only by the current user. The file will be deleted when
--   the resource is released, if it still exists. If a parent directory is
--   supplied, the file will be created there; otherwise, it will be
--   created in the system temporary directory returned by
--   <a>getTemporaryDirectory</a>.
openBinaryTempFile :: MonadResource m => Maybe FilePath -> String -> m (ReleaseKey, FilePath, Handle)

-- | Open a temporary file. The file will be readable and writeable, but
--   only by the current user. The file will be deleted when the resource
--   is released, if it still exists. If a parent directory is supplied,
--   the file will be created there; otherwise, it will be created in the
--   system temporary directory returned by <a>getTemporaryDirectory</a>.
openTempFile :: MonadResource m => Maybe FilePath -> String -> m (ReleaseKey, FilePath, Handle)
