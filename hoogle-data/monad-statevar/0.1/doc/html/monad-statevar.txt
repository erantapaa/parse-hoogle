-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Concise, overloaded accessors for IORef, STRef, TVar
--   
--   Overloaded <a>get</a> and <a>put</a> for state variables
--   (<a>IORef</a>, <a>STRef</a>, <a>TVar</a>) to make reading and writing
--   more concise.
--   
--   Inspired by the StateVar package by Sven Panne, with the following
--   differences:
--   
--   <ul>
--   <li>Supports variables in other monads besides <a>IO</a> (e.g.
--   <a>TVar</a>, <a>STRef</a>).</li>
--   <li>Provides non-infix <a>put</a>, <a>modify</a>, etc.</li>
--   <li>Does not provide concrete state variables (i.e. ones where you
--   supply get and put callbacks). If you want this feature, please submit
--   an issue.</li>
--   <li>Named "Control.Monad.StateVar" instead of "Data.StateVar", to
--   avoid a module naming conflict.</li>
--   </ul>
@package monad-statevar
@version 0.1


-- | Overloaded <a>get</a> and <a>put</a> for state variables
--   (<a>IORef</a>, <a>TVar</a>, etc.) to make reading and writing more
--   concise.
module Control.Monad.StateVar
class HasGet m v
get :: HasGet m v => v a -> m a
class HasPut m v
put :: HasPut m v => v a -> a -> m ()

-- | Variant of <a>put</a> that forces the value before writing it.
put' :: HasPut m v => v a -> a -> m ()

-- | Modify the value inside the variable with the given function.
--   
--   <pre>
--   list &lt;- newIORef [1,2,3]
--   modify list (0:)  -- prepend 0 to the list
--   </pre>
modify :: (HasGet m v, HasPut m v, Monad m) => v a -> (a -> a) -> m ()

-- | Variant of <a>modify</a> that forces the result of the function.
--   
--   <pre>
--   tally &lt;- newIORef (0 :: Int)
--   modify tally (+ 10)  -- add 10 to the tally
--   </pre>
modify' :: (HasGet m v, HasPut m v, Monad m) => v a -> (a -> a) -> m ()

-- | Write a new value and return the old value.
swap :: (HasGet m v, HasPut m v, Monad m) => v a -> a -> m a

-- | Infix alias for <a>put</a>
($=) :: HasPut m v => v a -> a -> m ()

-- | Infix alias for <a>modify</a>
($~) :: (HasGet m v, HasPut m v, Monad m) => v a -> (a -> a) -> m ()

-- | Infix alias for <a>put'</a>
($=!) :: HasPut m v => v a -> a -> m ()

-- | Infix alias for <a>modify'</a>
($~!) :: (HasGet m v, HasPut m v, Monad m) => v a -> (a -> a) -> m ()
instance HasPut (ST s) (STRef s)
instance HasGet (ST s) (STRef s)
instance HasPut (ST s) (STRef s)
instance HasGet (ST s) (STRef s)
instance HasPut STM TVar
instance HasGet STM TVar
instance HasPut IO IORef
instance HasGet IO IORef
instance (HasPut m v, MonadTrans t, Monad m) => HasPut (t m) v
instance (HasGet m v, MonadTrans t, Monad m) => HasGet (t m) v
