-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | (.:) and friends, syntax for Functor and Applicative.
--   
--   Alternative syntax for Functor and Applicative. Includes
--   <a>Caleskell</a> idioms like (.) = fmap, and also extensions like (.:)
--   = fmap . fmap and (&amp;) = (<a>*</a>).
@package functors
@version 0.1

module Data.Functor.Syntax

-- | Generalised version of <a>.</a> that is equivalent to <a>fmap</a>, but
--   with the fixity of standard <a>.</a>.
--   
--   <pre>
--   infixr 9 .
--   </pre>
(.) :: Functor f => (a -> b) -> f a -> f b

-- | Alias for <a>fmap</a>.
unary :: Functor f => (a -> b) -> f a -> f b

-- | Nested <a>fmap</a> for <a>Functor</a>s inside Functors (two levels).
--   
--   <pre>
--   infixr 9 .:
--   </pre>
(.:) :: (Functor f, Functor g) => (a -> b) -> f (g a) -> f (g b)

-- | Alias for <a>.:</a>.
binary :: (Functor f, Functor g) => (a -> b) -> f (g a) -> f (g b)

-- | Nested <a>fmap</a> for <a>Functor</a>s inside Functors inside Functors
--   (three levels).
--   
--   <pre>
--   infixr 9 .::
--   </pre>
(.::) :: (Functor f, Functor g, Functor h) => (a -> b) -> f (g (h a)) -> f (g (h b))

-- | Alias for <a>.::</a>.
trinary :: (Functor f, Functor g, Functor h) => (a -> b) -> f (g (h a)) -> f (g (h b))

-- | Generalised version of <a>flip</a>.
flip :: Functor f => f (a -> b) -> a -> f b

-- | Alternative syntax for <a>&lt;*&gt;</a> that fits better with the
--   one-letter <a>.</a> from this module.
--   
--   <pre>
--   infixl 4 &amp;
--   </pre>
(&) :: Applicative f => f (a -> b) -> f a -> f b
