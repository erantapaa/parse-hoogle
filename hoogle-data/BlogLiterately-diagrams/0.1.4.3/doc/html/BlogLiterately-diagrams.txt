-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Include images in blog posts with inline diagrams code
--   
--   A plugin for <tt>BlogLiterately</tt>
--   (<a>http://hackage.haskell.org/package/BlogLiterately</a>) which turns
--   inline diagrams code into images. This library also provides an
--   executable, <tt>BlogLiteratelyD</tt>, providing a standard instance of
--   <tt>BlogLiterately</tt> extended with support for inline diagrams
--   code. For most users it should suffice to simply use
--   <tt>BlogLiteratelyD</tt> in place of <tt>BlogLiterately</tt>.
--   
--   To use it, include code blocks with the <tt>dia</tt> or
--   <tt>dia-def</tt> class (using pandoc's special extended Markdown
--   syntax
--   (<a>http://johnmacfarlane.net/pandoc/demo/example9/pandocs-markdown.html</a>),
--   or BlogLiterately's extended syntax for tagged code blocks
--   (<a>http://byorgey.wordpress.com/blogliterately/</a>)), like so:
--   
--   <pre>
--       [dia-def]
--       -- This block produces no output but its
--       -- declarations will be in scope in all the
--       -- rest of the diagram blocks.
--   
--       gSq = square 1 # fc green
--   
--   NOTE: Square brackets below should be replaced
--   by curly braces.  Haddock chokes on curly
--   braces.
--   
--   Here is a green square:
--   
--   ```[.dia width='200']
--   dia = gSq
--   ```
--   
--   Green squares like `gSq`[.dia height='16']
--   and blue circles like `circle 1 # fc blue`[.dia height='16']
--   are extremely important.
--   </pre>
--   
--   Note that attributes like width and height can also be specified, but
--   be sure to put the numbers in quotes or else they will not parse
--   properly.
--   
--   Running this through <tt>BlogLiteratelyD</tt> (after replacing square
--   brackets with curly braces) should result in HTML that looks something
--   like this:
--   
--   
--   In addition to simple diagrams, <tt>IO</tt> actions producing diagrams
--   may also be used. In that case the <tt>IO</tt> action will simply be
--   run, and the resulting diagram rendered. This can be useful, for
--   example, when producing a diagram built from some external data or
--   using randomness.
@package BlogLiterately-diagrams
@version 0.1.4.3


-- | Custom transformation passes for the <tt>BlogLiterately</tt>
--   blog-writing tool
--   (<a>http://hackage.haskell.org/package/BlogLiterately</a>), allowing
--   inclusion of inline code using the <tt>diagrams</tt> framework
--   (<a>http://projects.haskell.org/diagrams</a>) which are compiled into
--   images. See <a>Text.BlogLiterately.Run</a> for more information.
--   
--   Note that this package provides an executable,
--   <tt>BlogLiteratelyD</tt>, which compiles embedded diagrams code as
--   well as all the standard transforms provided by BlogLiterately.
module Text.BlogLiterately.Diagrams

-- | Transform a blog post by looking for code blocks with class
--   <tt>dia</tt>, and replacing them with images generated by evaluating
--   the identifier <tt>dia</tt> and rendering the resulting diagram. In
--   addition, blocks with class <tt>dia-def</tt> are collected (and
--   deleted from the output) and provided as additional definitions that
--   will be in scope during evaluation of all <tt>dia</tt> blocks.
--   
--   Be sure to use this transform <i>before</i> the standard
--   <a>highlightXF</a> transform, <i>i.e.</i> with the
--   <a>blogLiteratelyCustom</a> function. For example,
--   
--   <pre>
--   main = blogLiteratelyCustom (diagramsXF : standardTransforms)
--   </pre>
--   
--   It also works well in conjunction with <a>centerImagesXF</a> (which,
--   of course, should be placed after <tt>diagramsXF</tt> in the
--   pipeline). This package provides an executable
--   <tt>BlogLiteratelyD</tt> which includes <tt>diagramsInlineXF</tt>,
--   <tt>diagramsXF</tt>, and <tt>centerImagesXF</tt>.
diagramsXF :: Transform

-- | Transform a blog post by looking for <i>inline</i> code snippets with
--   class <tt>dia</tt>, and replacing them with images generated by
--   evaluating the contents of each code snippet as a Haskell expression
--   representing a diagram. Any code blocks with class <tt>dia-def</tt>
--   will be in scope for the evaluation of these expressions (such code
--   blocks are unaffected).
--   
--   Because <tt>diagramsXF</tt> and <tt>diagramsInlineXF</tt> both use
--   blocks with class <tt>dia-def</tt>, but <tt>diagramsInlineXF</tt>
--   leaves them alone whereas <tt>diagramsXF</tt> deletes them,
--   <tt>diagramsInlineXF</tt> must be placed before <tt>diagramsXF</tt> in
--   the pipeline.
diagramsInlineXF :: Transform
