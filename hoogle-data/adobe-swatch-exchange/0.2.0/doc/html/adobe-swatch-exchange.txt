-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | parse Adobe Swatch Exchange files and (optionally) output .css files with the colors
--   
--   parse Adobe Swatch Exchange files and (optionally) output .css files
--   with the colors
@package adobe-swatch-exchange
@version 0.2.0


-- | This module defines the types for <tt>AdobeStageExchange</tt> and a
--   suitable <a>Binary</a> instance. All the get/put helper functions are
--   also exported, but, in general, you will just want the types and the
--   <a>Binary</a> instance.
module Data.AdobeSwatchExchange

-- | A color
data Color
CYMK :: Float -> Float -> Float -> Float -> Color
RGB :: Float -> Float -> Float -> Color
LAB :: Float -> Float -> Float -> Color
Gray :: Float -> Color

-- | color type
data ColorType
Global :: ColorType
Spot :: ColorType
Normal :: ColorType

-- | A named color
data ColorEntry
ColorEntry :: String -> Color -> ColorType -> ColorEntry
colorName :: ColorEntry -> String
color :: ColorEntry -> Color
colorType :: ColorEntry -> ColorType

-- | An Adobe Swatch Exchange block
data ASEBlock
GroupStart :: String -> ASEBlock
groupName :: ASEBlock -> String
GroupEnd :: ASEBlock
CE :: ColorEntry -> ASEBlock

-- | AdobeSwatchExchange
data AdobeSwatchExchange
AdobeSwatchExchange :: (Word16, Word16) -> [ASEBlock] -> AdobeSwatchExchange
version :: AdobeSwatchExchange -> (Word16, Word16)
blocks :: AdobeSwatchExchange -> [ASEBlock]

-- | get the ASEF file signature
getFileSig :: Get ()
putFileSig :: Put
getVersion :: Get (Word16, Word16)
putVersion :: (Word16, Word16) -> Put
getBlock :: Get ASEBlock
putBlock :: ASEBlock -> Put
getName :: Get String
putName :: String -> Put
blName :: Integral a => String -> a
getColor :: Get Color
putColor :: Color -> Put
blColor :: Integral a => Color -> a
getColorType :: Get ColorType
putColorType :: ColorType -> Put
blColorType :: Integral a => a
getColorEntry :: Get ColorEntry
putColorEntry :: ColorEntry -> Put
getASE :: Get AdobeSwatchExchange
putASE :: AdobeSwatchExchange -> Put

-- | Convert a <a>Color</a> to an RGB hex value.
colorToHex :: Color -> String
instance Typeable Color
instance Typeable ColorType
instance Typeable ColorEntry
instance Typeable ASEBlock
instance Typeable AdobeSwatchExchange
instance Eq Color
instance Ord Color
instance Read Color
instance Show Color
instance Data Color
instance Eq ColorType
instance Ord ColorType
instance Read ColorType
instance Show ColorType
instance Data ColorType
instance Eq ColorEntry
instance Ord ColorEntry
instance Read ColorEntry
instance Show ColorEntry
instance Data ColorEntry
instance Eq ASEBlock
instance Ord ASEBlock
instance Read ASEBlock
instance Show ASEBlock
instance Data ASEBlock
instance Eq AdobeSwatchExchange
instance Ord AdobeSwatchExchange
instance Read AdobeSwatchExchange
instance Show AdobeSwatchExchange
instance Data AdobeSwatchExchange
instance Binary AdobeSwatchExchange
instance Binary ColorEntry
instance Binary ColorType


-- | Create a <tt>.css</tt> file from a <tt>.ase</tt> file. For each color
--   in the <tt>.ase</tt> the <tt>.css</tt> will contain three entries:
--   
--   fg-color-ase-n bg-color-ase-n border-color-ase-n
--   
--   Where <tt>n</tt> is an integer based on the order the color was found
--   in the <tt>.ase</tt> file.
module Data.AdobeSwatchExchange.CSS

-- | generate a <a>StyleSheet</a> from an <a>AdobeSwatchExchange</a>
ase2css :: AdobeSwatchExchange -> StyleSheet

-- | generate a color rules from an indexed <tt>ColorEntry</tt>
--   
--   generates:
--   
--   fg-color-ase-n bg-color-ase-n border-color-ase-n
--   
--   Currently only <a>RGB</a> color is supported. Since CSS only supports
--   rgb, supporting other colors would require the conversion to RGB color
--   space. Feel free to send a patch! genColor :: (Int, ASEBlock) -&gt;
--   (Int, [RuleSet])
genBlock :: ASEBlock -> State Int [RuleSet]


-- | Create a <tt>.less</tt> file from a <tt>.ase</tt> file. For each color
--   in the <tt>.ase</tt> the <tt>.css</tt> will contain an entry:
--   
--   color-ase-n
--   
--   Where <tt>n</tt> is an integer based on the order the color was found
--   in the <tt>.ase</tt> file.
module Data.AdobeSwatchExchange.LESS

-- | generate a less document from an <a>AdobeSwatchExchange</a>
ase2less :: AdobeSwatchExchange -> Doc

-- | generate a color rules from an indexed <tt>ColorEntry</tt>
--   
--   generates:
--   
--   fg-color-ase-n bg-color-ase-n border-color-ase-n
--   
--   Currently only <a>RGB</a> color is supported. Since CSS only supports
--   rgb, supporting other colors would require the conversion to RGB color
--   space. Feel free to send a patch!
genColor :: ASEBlock -> State Int Doc
