-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Efficient conversion of values into Text
--   
@package text-show
@version 2


-- | Monomorphic <tt>TextShow</tt> function for <tt>StaticPtrInfo</tt>
--   values. This module only exports functions if using
--   <tt>base-4.8.0.0</tt> or later.
--   
--   <i>Since: 2</i>
module TextShow.GHC.StaticPtr


-- | Monomorphic <tt>TextShow</tt> functions for data types in the
--   <a>Flags</a> module. This module only exports functions if using
--   <tt>base-4.8.0.0</tt> or later.
--   
--   <i>Since: 2</i>
module TextShow.GHC.RTS.Flags


-- | Monomorphic <tt>TextShow</tt> function for <tt>ConsoleEvent</tt>. This
--   module only exports functions if using Windows, and not using GHCJS.
--   
--   <i>Since: 2</i>
module TextShow.GHC.Conc.Windows


-- | Monomorphic <a>TextShow</a> functions for concurrency-related data
--   types.
--   
--   <i>Since: 2</i>
module TextShow.Control.Concurrent

-- | Convert a <a>ThreadId</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbThreadIdPrec :: Int -> ThreadId -> Builder

-- | Convert a <a>ThreadStatus</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbThreadStatusPrec :: Int -> ThreadStatus -> Builder

-- | Convert a <a>BlockReason</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbBlockReason :: BlockReason -> Builder
instance TextShow BlockReason
instance TextShow ThreadStatus
instance TextShow ThreadId


-- | Monomorphic <a>TextShow</a> functions for <a>Exception</a>s.
--   
--   <i>Since: 2</i>
module TextShow.Control.Exception

-- | Convert a <a>SomeException</a> value to a <a>Builder</a> with the
--   given precedence.
--   
--   <i>Since: 2</i>
showbSomeExceptionPrec :: Int -> SomeException -> Builder

-- | Convert an <a>IOException</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbIOException :: IOException -> Builder

-- | Convert an <a>ArithException</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbArithException :: ArithException -> Builder

-- | Convert an <a>ArrayException</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbArrayException :: ArrayException -> Builder

-- | Convert an <a>AssertionFailed</a> exception to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbAssertionFailed :: AssertionFailed -> Builder

-- | Convert a <a>SomeAsyncException</a> value to a <a>Builder</a>. This
--   function is only available with <tt>base-4.7.0.0</tt> or later.
--   
--   <i>Since: 2</i>
showbSomeAsyncException :: SomeAsyncException -> Builder

-- | Convert an <a>AsyncException</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbAsyncException :: AsyncException -> Builder

-- | Convert a <a>NonTermination</a> exception to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbNonTermination :: NonTermination -> Builder

-- | Convert a <a>NestedAtomically</a> exception to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbNestedAtomically :: NestedAtomically -> Builder

-- | Convert a <a>BlockedIndefinitelyOnMVar</a> exception to a
--   <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbBlockedIndefinitelyOnMVar :: BlockedIndefinitelyOnMVar -> Builder

-- | Convert a <a>BlockedIndefinitelyOnSTM</a> exception to a
--   <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbBlockedIndefinitelyOnSTM :: BlockedIndefinitelyOnSTM -> Builder

-- | Convert a <a>Deadlock</a> exception to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbDeadlock :: Deadlock -> Builder

-- | Convert a <a>NoMethodError</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbNoMethodError :: NoMethodError -> Builder

-- | Convert a <a>PatternMatchFail</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbPatternMatchFail :: PatternMatchFail -> Builder

-- | Convert a <a>RecConError</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbRecConError :: RecConError -> Builder

-- | Convert a <a>RecSelError</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbRecSelError :: RecSelError -> Builder

-- | Convert a <a>RecUpdError</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbRecUpdError :: RecUpdError -> Builder

-- | Convert an <a>ErrorCall</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbErrorCall :: ErrorCall -> Builder

-- | Convert a <a>MaskingState</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbMaskingState :: MaskingState -> Builder
instance TextShow MaskingState
instance TextShow ErrorCall
instance TextShow RecUpdError
instance TextShow RecSelError
instance TextShow RecConError
instance TextShow PatternMatchFail
instance TextShow NoMethodError
instance TextShow Deadlock
instance TextShow BlockedIndefinitelyOnSTM
instance TextShow BlockedIndefinitelyOnMVar
instance TextShow NestedAtomically
instance TextShow NonTermination
instance TextShow AsyncException
instance TextShow SomeAsyncException
instance TextShow AssertionFailed
instance TextShow ArrayException
instance TextShow ArithException
instance TextShow IOException
instance TextShow SomeException


-- | Monomorphic <a>TextShow</a> functions for strict <a>ST</a> values.
--   
--   <i>Since: 2</i>
module TextShow.Control.Monad.ST

-- | Convert a strict <a>ST</a> value to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbST :: ST s a -> Builder
instance TextShow2 ST
instance TextShow1 (ST s)
instance TextShow (ST s a)


-- | Monomorphic <a>TextShow</a> functions for tuple types.
--   
--   <i>Since: 2</i>
module TextShow.Data.Tuple

-- | Converts <tt>()</tt> into a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbUnit :: () -> Builder

-- | Converts a 2-tuple into a <a>Builder</a> with the given show
--   functions.
--   
--   <i>Since: 2</i>
showb2TupleWith2 :: (a -> Builder) -> (b -> Builder) -> (a, b) -> Builder

-- | Converts a 3-tuple into a <a>Builder</a> with the given show
--   functions.
--   
--   <i>Since: 2</i>
showb3TupleWith2 :: TextShow a => (b -> Builder) -> (c -> Builder) -> (a, b, c) -> Builder

-- | Converts a 4-tuple into a <a>Builder</a> with the given show
--   functions.
--   
--   <i>Since: 2</i>
showb4TupleWith2 :: (TextShow a, TextShow b) => (c -> Builder) -> (d -> Builder) -> (a, b, c, d) -> Builder

-- | Converts a 5-tuple into a <a>Builder</a> with the given show
--   functions.
--   
--   <i>Since: 2</i>
showb5TupleWith2 :: (TextShow a, TextShow b, TextShow c) => (d -> Builder) -> (e -> Builder) -> (a, b, c, d, e) -> Builder

-- | Converts a 6-tuple into a <a>Builder</a> with the given show
--   functions.
--   
--   <i>Since: 2</i>
showb6TupleWith2 :: (TextShow a, TextShow b, TextShow c, TextShow d) => (e -> Builder) -> (f -> Builder) -> (a, b, c, d, e, f) -> Builder

-- | Converts a 7-tuple into a <a>Builder</a> with the given show
--   functions.
--   
--   <i>Since: 2</i>
showb7TupleWith2 :: (TextShow a, TextShow b, TextShow c, TextShow d, TextShow e) => (f -> Builder) -> (g -> Builder) -> (a, b, c, d, e, f, g) -> Builder

-- | Converts an 8-tuple into a <a>Builder</a> with the given show
--   functions.
--   
--   <i>Since: 2</i>
showb8TupleWith2 :: (TextShow a, TextShow b, TextShow c, TextShow d, TextShow e, TextShow f) => (g -> Builder) -> (h -> Builder) -> (a, b, c, d, e, f, g, h) -> Builder

-- | Converts a 9-tuple into a <a>Builder</a> with the given show
--   functions.
--   
--   <i>Since: 2</i>
showb9TupleWith2 :: (TextShow a, TextShow b, TextShow c, TextShow d, TextShow e, TextShow f, TextShow g) => (h -> Builder) -> (i -> Builder) -> (a, b, c, d, e, f, g, h, i) -> Builder

-- | Converts a 10-tuple into a <a>Builder</a> with the given show
--   functions.
--   
--   <i>Since: 2</i>
showb10TupleWith2 :: (TextShow a, TextShow b, TextShow c, TextShow d, TextShow e, TextShow f, TextShow g, TextShow h) => (i -> Builder) -> (j -> Builder) -> (a, b, c, d, e, f, g, h, i, j) -> Builder

-- | Converts an 11-tuple into a <a>Builder</a> with the given show
--   functions.
--   
--   <i>Since: 2</i>
showb11TupleWith2 :: (TextShow a, TextShow b, TextShow c, TextShow d, TextShow e, TextShow f, TextShow g, TextShow h, TextShow i) => (j -> Builder) -> (k -> Builder) -> (a, b, c, d, e, f, g, h, i, j, k) -> Builder

-- | Converts a 12-tuple into a <a>Builder</a> with the given show
--   functions.
--   
--   <i>Since: 2</i>
showb12TupleWith2 :: (TextShow a, TextShow b, TextShow c, TextShow d, TextShow e, TextShow f, TextShow g, TextShow h, TextShow i, TextShow j) => (k -> Builder) -> (l -> Builder) -> (a, b, c, d, e, f, g, h, i, j, k, l) -> Builder

-- | Converts a 13-tuple into a <a>Builder</a> with the given show
--   functions.
--   
--   <i>Since: 2</i>
showb13TupleWith2 :: (TextShow a, TextShow b, TextShow c, TextShow d, TextShow e, TextShow f, TextShow g, TextShow h, TextShow i, TextShow j, TextShow k) => (l -> Builder) -> (m -> Builder) -> (a, b, c, d, e, f, g, h, i, j, k, l, m) -> Builder

-- | Converts a 14-tuple into a <a>Builder</a> with the given show
--   functions.
--   
--   <i>Since: 2</i>
showb14TupleWith2 :: (TextShow a, TextShow b, TextShow c, TextShow d, TextShow e, TextShow f, TextShow g, TextShow h, TextShow i, TextShow j, TextShow k, TextShow l) => (m -> Builder) -> (n -> Builder) -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n) -> Builder

-- | Converts a 15-tuple into a <a>Builder</a> with the given show
--   functions.
--   
--   <i>Since: 2</i>
showb15TupleWith2 :: (TextShow a, TextShow b, TextShow c, TextShow d, TextShow e, TextShow f, TextShow g, TextShow h, TextShow i, TextShow j, TextShow k, TextShow l, TextShow m) => (n -> Builder) -> (o -> Builder) -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) -> Builder
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0, TextShow i0, TextShow j0, TextShow k0, TextShow l0, TextShow m0) => TextShow2 ((,,,,,,,,,,,,,,) a0 b0 c0 d0 e0 f0 g0 h0 i0 j0 k0 l0 m0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0, TextShow i0, TextShow j0, TextShow k0, TextShow l0) => TextShow2 ((,,,,,,,,,,,,,) a0 b0 c0 d0 e0 f0 g0 h0 i0 j0 k0 l0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0, TextShow i0, TextShow j0, TextShow k0) => TextShow2 ((,,,,,,,,,,,,) a0 b0 c0 d0 e0 f0 g0 h0 i0 j0 k0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0, TextShow i0, TextShow j0) => TextShow2 ((,,,,,,,,,,,) a0 b0 c0 d0 e0 f0 g0 h0 i0 j0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0, TextShow i0) => TextShow2 ((,,,,,,,,,,) a0 b0 c0 d0 e0 f0 g0 h0 i0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0) => TextShow2 ((,,,,,,,,,) a0 b0 c0 d0 e0 f0 g0 h0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0) => TextShow2 ((,,,,,,,,) a0 b0 c0 d0 e0 f0 g0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0) => TextShow2 ((,,,,,,,) a0 b0 c0 d0 e0 f0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0) => TextShow2 ((,,,,,,) a0 b0 c0 d0 e0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0) => TextShow2 ((,,,,,) a0 b0 c0 d0)
instance (TextShow a0, TextShow b0, TextShow c0) => TextShow2 ((,,,,) a0 b0 c0)
instance (TextShow a0, TextShow b0) => TextShow2 ((,,,) a0 b0)
instance TextShow a0 => TextShow2 ((,,) a0)
instance TextShow2 (,)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0, TextShow i0, TextShow j0, TextShow k0, TextShow l0, TextShow m0, TextShow n0) => TextShow1 ((,,,,,,,,,,,,,,) a0 b0 c0 d0 e0 f0 g0 h0 i0 j0 k0 l0 m0 n0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0, TextShow i0, TextShow j0, TextShow k0, TextShow l0, TextShow m0) => TextShow1 ((,,,,,,,,,,,,,) a0 b0 c0 d0 e0 f0 g0 h0 i0 j0 k0 l0 m0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0, TextShow i0, TextShow j0, TextShow k0, TextShow l0) => TextShow1 ((,,,,,,,,,,,,) a0 b0 c0 d0 e0 f0 g0 h0 i0 j0 k0 l0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0, TextShow i0, TextShow j0, TextShow k0) => TextShow1 ((,,,,,,,,,,,) a0 b0 c0 d0 e0 f0 g0 h0 i0 j0 k0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0, TextShow i0, TextShow j0) => TextShow1 ((,,,,,,,,,,) a0 b0 c0 d0 e0 f0 g0 h0 i0 j0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0, TextShow i0) => TextShow1 ((,,,,,,,,,) a0 b0 c0 d0 e0 f0 g0 h0 i0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0) => TextShow1 ((,,,,,,,,) a0 b0 c0 d0 e0 f0 g0 h0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0) => TextShow1 ((,,,,,,,) a0 b0 c0 d0 e0 f0 g0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0) => TextShow1 ((,,,,,,) a0 b0 c0 d0 e0 f0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0) => TextShow1 ((,,,,,) a0 b0 c0 d0 e0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0) => TextShow1 ((,,,,) a0 b0 c0 d0)
instance (TextShow a0, TextShow b0, TextShow c0) => TextShow1 ((,,,) a0 b0 c0)
instance (TextShow a0, TextShow b0) => TextShow1 ((,,) a0 b0)
instance TextShow a0 => TextShow1 ((,) a0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0, TextShow i0, TextShow j0, TextShow k0, TextShow l0, TextShow m0, TextShow n0, TextShow o0) => TextShow (a0, b0, c0, d0, e0, f0, g0, h0, i0, j0, k0, l0, m0, n0, o0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0, TextShow i0, TextShow j0, TextShow k0, TextShow l0, TextShow m0, TextShow n0) => TextShow (a0, b0, c0, d0, e0, f0, g0, h0, i0, j0, k0, l0, m0, n0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0, TextShow i0, TextShow j0, TextShow k0, TextShow l0, TextShow m0) => TextShow (a0, b0, c0, d0, e0, f0, g0, h0, i0, j0, k0, l0, m0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0, TextShow i0, TextShow j0, TextShow k0, TextShow l0) => TextShow (a0, b0, c0, d0, e0, f0, g0, h0, i0, j0, k0, l0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0, TextShow i0, TextShow j0, TextShow k0) => TextShow (a0, b0, c0, d0, e0, f0, g0, h0, i0, j0, k0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0, TextShow i0, TextShow j0) => TextShow (a0, b0, c0, d0, e0, f0, g0, h0, i0, j0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0, TextShow i0) => TextShow (a0, b0, c0, d0, e0, f0, g0, h0, i0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0, TextShow h0) => TextShow (a0, b0, c0, d0, e0, f0, g0, h0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0, TextShow g0) => TextShow (a0, b0, c0, d0, e0, f0, g0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0, TextShow f0) => TextShow (a0, b0, c0, d0, e0, f0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0, TextShow e0) => TextShow (a0, b0, c0, d0, e0)
instance (TextShow a0, TextShow b0, TextShow c0, TextShow d0) => TextShow (a0, b0, c0, d0)
instance (TextShow a0, TextShow b0, TextShow c0) => TextShow (a0, b0, c0)
instance (TextShow a0, TextShow b0) => TextShow (a0, b0)
instance TextShow ()


-- | Monomorphic <tt>TextShow</tt> function for <a>Bool</a> values.
--   
--   <i>Since: 2</i>
module TextShow.Data.Bool

-- | Convert a <a>Bool</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbBool :: Bool -> Builder
instance TextShow Bool


-- | Monomorphic <a>TextShow</a> functions for data types in the
--   <tt>bytestring</tt> library.
--   
--   <i>Since: 2</i>
module TextShow.Data.ByteString

-- | Convert a strict <a>ByteString</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbByteStringStrict :: ByteString -> Builder

-- | Convert a lazy <a>ByteString</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbByteStringLazy :: ByteString -> Builder

-- | Convert a lazy <a>ByteString</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   With <tt>bytestring-0.10.0.0</tt> or later, this function ignores the
--   precedence argument, since lazy <a>ByteString</a>s are printed out
--   identically to <a>String</a>s. On earlier versions of
--   <tt>bytestring</tt>, however, lazy <a>ByteString</a>s can be printed
--   with parentheses (e.g., <tt>Chunk "example" Empty</tt> vs. <tt>(Chunk
--   "example" Empty)</tt>) depending on the precedence.
--   
--   <i>Since: 2</i>
showbByteStringLazyPrec :: Int -> ByteString -> Builder

-- | Convert a <a>ShortByteString</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbShortByteString :: ShortByteString -> Builder
instance TextShow ShortByteString
instance TextShow ByteString
instance TextShow ByteString


-- | Monomorphic <a>TextShow</a> functions for integral types.
--   
--   <i>Since: 2</i>
module TextShow.Data.Integral

-- | Convert an <a>Int</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbIntPrec :: Int -> Int -> Builder

-- | Convert an <a>Int8</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbInt8Prec :: Int -> Int8 -> Builder

-- | Convert an <a>Int16</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbInt16Prec :: Int -> Int16 -> Builder

-- | Convert an <a>Int32</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbInt32Prec :: Int -> Int32 -> Builder

-- | Convert an <a>Int64</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbInt64Prec :: Int -> Int64 -> Builder

-- | Convert an <a>Integer</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbIntegerPrec :: Int -> Integer -> Builder

-- | Convert an <a>Integral</a> type to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbIntegralPrec :: Integral a => Int -> a -> Builder

-- | Shows a <i>non-negative</i> <a>Integral</a> number using the base
--   specified by the first argument, and the character representation
--   specified by the second.
--   
--   <i>Since: 2</i>
showbIntAtBase :: (Integral a, TextShow a) => a -> (Int -> Char) -> a -> Builder

-- | Show <i>non-negative</i> <a>Integral</a> numbers in base 2.
--   
--   <i>Since: 2</i>
showbBin :: (Integral a, TextShow a) => a -> Builder

-- | Show <i>non-negative</i> <a>Integral</a> numbers in base 16.
--   
--   <i>Since: 2</i>
showbHex :: (Integral a, TextShow a) => a -> Builder

-- | Show <i>non-negative</i> <a>Integral</a> numbers in base 8.
--   
--   <i>Since: 2</i>
showbOct :: (Integral a, TextShow a) => a -> Builder

-- | Convert a <a>Word</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbWord :: Word -> Builder

-- | Convert a <a>Word8</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbWord8 :: Word8 -> Builder

-- | Convert a <a>Word16</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbWord16 :: Word16 -> Builder

-- | Convert a <a>Word32</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbWord32 :: Word32 -> Builder

-- | Convert a <a>Word64</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbWord64 :: Word64 -> Builder
instance TextShow Word64
instance TextShow Word32
instance TextShow Word16
instance TextShow Word8
instance TextShow Word
instance TextShow Integer
instance TextShow Int64
instance TextShow Int32
instance TextShow Int16
instance TextShow Int8
instance TextShow Int


-- | Monomorphic <a>TextShow</a> functions for <a>Char</a> and
--   <a>String</a>.
--   
--   <i>Since: 2</i>
module TextShow.Data.Char

-- | Convert a <a>Char</a> to a <a>Builder</a> (surrounded by single
--   quotes).
--   
--   <i>Since: 2</i>
showbChar :: Char -> Builder

-- | Convert a <a>Char</a> to a <a>Builder</a> (without single quotes).
--   
--   <i>Since: 2</i>
showbLitChar :: Char -> Builder

-- | Convert a <a>String</a> to a <a>Builder</a> (surrounded by double
--   quotes).
--   
--   <i>Since: 2</i>
showbString :: String -> Builder

-- | Convert a <a>String</a> to a <a>Builder</a> (without double quotes).
--   
--   <i>Since: 2</i>
showbLitString :: String -> Builder

-- | Convert a <a>GeneralCategory</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbGeneralCategory :: GeneralCategory -> Builder

-- | A table of ASCII control characters that needs to be escaped with a
--   backslash.
--   
--   <i>Since: 2</i>
asciiTabB :: Array Int Builder
instance TextShow GeneralCategory
instance TextShow Char


-- | Exports <a>showbListWith</a>.
module TextShow.Data.List

-- | Converts a list of values into a <a>Builder</a> in which the values
--   are surrounded by square brackets and each value is separated by a
--   comma. The function argument controls how each element is shown.
showbListWith :: (a -> Builder) -> [a] -> Builder
instance TextShow1 []
instance TextShow a => TextShow [a]


-- | Monomorphic <a>TextShow</a> functions for <a>Const</a> and
--   <a>ZipList</a>.
--   
--   <i>Since: 2</i>
module TextShow.Control.Applicative

-- | Convert a <a>Const</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbConstPrecWith :: (Int -> a -> Builder) -> Int -> Const a b -> Builder

-- | Convert a <a>ZipList</a> to a <a>Builder</a> with the given show
--   function precedence.
--   
--   <i>Since: 2</i>
showbZipListPrecWith :: (Int -> a -> Builder) -> Int -> ZipList a -> Builder
instance TextShow1 ZipList
instance TextShow a0 => TextShow (ZipList a0)
instance TextShow2 Const
instance TextShow a => TextShow1 (Const a)
instance TextShow a => TextShow (Const a b)


-- | Monomorphic <a>TextShow</a> function for <a>Array</a> values.
--   
--   <i>Since: 2</i>
module TextShow.Data.Array

-- | Convert an <a>Array</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbArrayPrec :: (TextShow i, TextShow e, Ix i) => Int -> Array i e -> Builder

-- | Convert a <a>UArray</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbUArrayPrec :: (IArray UArray e, Ix i, TextShow i, TextShow e) => Int -> UArray i e -> Builder

-- | Convert an <a>IArray</a> instance to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbIArrayPrec :: (IArray a e, Ix i, TextShow i, TextShow e) => Int -> a i e -> Builder
instance (IArray UArray e, Ix i, TextShow i, TextShow e) => TextShow (UArray i e)
instance (TextShow i, TextShow e, Ix i) => TextShow (Array i e)


-- | Monomorphic <a>TextShow</a> functions for floating-point types.
--   
--   <i>Since: 2</i>
module TextShow.Data.Floating

-- | Convert a <a>RealFloat</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbRealFloatPrec :: RealFloat a => Int -> a -> Builder

-- | Convert a <a>Float</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbFloatPrec :: Int -> Float -> Builder

-- | Convert a <a>Double</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbDoublePrec :: Int -> Double -> Builder

-- | Show a signed <a>RealFloat</a> value using scientific (exponential)
--   notation (e.g. <tt>2.45e2</tt>, <tt>1.5e-3</tt>).
--   
--   In the call <tt><a>showbEFloat</a> digs val</tt>, if <tt>digs</tt> is
--   <a>Nothing</a>, the value is shown to full precision; if <tt>digs</tt>
--   is <tt><a>Just</a> d</tt>, then at most <tt>d</tt> digits after the
--   decimal point are shown.
--   
--   <i>Since: 2</i>
showbEFloat :: RealFloat a => Maybe Int -> a -> Builder

-- | Show a signed <a>RealFloat</a> value using standard decimal notation
--   (e.g. <tt>245000</tt>, <tt>0.0015</tt>).
--   
--   In the call <tt><a>showbFFloat</a> digs val</tt>, if <tt>digs</tt> is
--   <a>Nothing</a>, the value is shown to full precision; if <tt>digs</tt>
--   is <tt><a>Just</a> d</tt>, then at most <tt>d</tt> digits after the
--   decimal point are shown.
--   
--   <i>Since: 2</i>
showbFFloat :: RealFloat a => Maybe Int -> a -> Builder

-- | Show a signed <a>RealFloat</a> value using standard decimal notation
--   for arguments whose absolute value lies between <tt>0.1</tt> and
--   <tt>9,999,999</tt>, and scientific notation otherwise.
--   
--   In the call <tt><a>showbGFloat</a> digs val</tt>, if <tt>digs</tt> is
--   <a>Nothing</a>, the value is shown to full precision; if <tt>digs</tt>
--   is <tt><a>Just</a> d</tt>, then at most <tt>d</tt> digits after the
--   decimal point are shown.
--   
--   <i>Since: 2</i>
showbGFloat :: RealFloat a => Maybe Int -> a -> Builder

-- | Show a signed <a>RealFloat</a> value using standard decimal notation
--   (e.g. <tt>245000</tt>, <tt>0.0015</tt>).
--   
--   This behaves as <tt>showFFloat</tt>, except that a decimal point is
--   always guaranteed, even if not needed.
--   
--   <i>Since: 2</i>
showbFFloatAlt :: RealFloat a => Maybe Int -> a -> Builder

-- | Show a signed <a>RealFloat</a> value using standard decimal notation
--   for arguments whose absolute value lies between <tt>0.1</tt> and
--   <tt>9,999,999</tt>, and scientific notation otherwise.
--   
--   This behaves as <tt>showFFloat</tt>, except that a decimal point is
--   always guaranteed, even if not needed.
--   
--   <i>Since: 2</i>
showbGFloatAlt :: RealFloat a => Maybe Int -> a -> Builder

-- | Convert an <a>FPFormat</a> value to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbFPFormat :: FPFormat -> Builder

-- | Control the rendering of floating point numbers.
data FPFormat :: *

-- | Scientific notation (e.g. <tt>2.3e123</tt>).
Exponent :: FPFormat

-- | Standard decimal notation.
Fixed :: FPFormat

-- | Use decimal notation for values between <tt>0.1</tt> and
--   <tt>9,999,999</tt>, and scientific notation otherwise.
Generic :: FPFormat

-- | Like <a>formatRealFloatAltB</a>, except that the decimal is only shown
--   for arguments whose absolute value is between <tt>0.1</tt> and
--   <tt>9,999,999</tt>.
--   
--   <i>Since: 2</i>
formatRealFloatB :: RealFloat a => FPFormat -> Maybe Int -> a -> Builder

-- | Converts a <a>RealFloat</a> value to a Builder, specifying if a
--   decimal point should always be shown.
--   
--   <i>Since: 2</i>
formatRealFloatAltB :: RealFloat a => FPFormat -> Maybe Int -> Bool -> a -> Builder
instance TextShow FPFormat
instance TextShow Double
instance TextShow Float


-- | Monomorphic <a>TextShow</a> function for <tt>Ratio</tt> values.
--   
--   Due to use of the <tt>DatatypeContexts</tt> extension, there is no
--   <tt>TextShow1 Complex</tt> instance on <tt>base-4.3.0.0</tt>.
--   
--   <i>Since: 2</i>
module TextShow.Data.Complex

-- | Convert a <a>Complex</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   Note that on <tt>base-4.3.0.0</tt>, this function must have a
--   <tt>(<a>TextShow</a> a, <a>RealFloat</a> a)</tt> constraint instead of
--   just a <tt>(<a>TextShow</a> a)</tt> constraint.
--   
--   <i>Since: 2</i>
showbComplexPrec :: TextShow a => Int -> Complex a -> Builder
instance TextShow1 Complex
instance TextShow a => TextShow (Complex a)


-- | Monomorphic <a>TextShow</a> function for <a>Ratio</a> values.
--   
--   <i>Since: 2</i>
module TextShow.Data.Ratio

-- | Convert a <a>Ratio</a> to a <a>Builder</a> with the given precedence.
--   
--   Note that on <tt>base-4.3.0.0</tt>, this function must have a
--   <tt>(<a>Show</a> a, <a>Integral</a> a)</tt> constraint instead of just
--   a <tt>(<a>Show</a> a)</tt> constraint.
--   
--   <i>Since: 2</i>
showbRatioPrec :: TextShow a => Int -> Ratio a -> Builder
instance TextShow1 Ratio
instance TextShow a => TextShow (Ratio a)


-- | Monomorphic <a>TextShow</a> functions for data types in the
--   <tt>Data.Data</tt> module.
--   
--   <i>Since: 2</i>
module TextShow.Data.Data

-- | Convert a <a>Constr</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbConstr :: Constr -> Builder

-- | Convert a <a>ConstrRep</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbConstrRepPrec :: Int -> ConstrRep -> Builder

-- | Convert a <a>DataRep</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbDataRepPrec :: Int -> DataRep -> Builder

-- | Convert a <a>DataType</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbDataTypePrec :: Int -> DataType -> Builder

-- | Convert a <a>Fixity</a> value to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbFixity :: Fixity -> Builder
instance TextShow Constr
instance TextShow Fixity
instance TextShow ConstrRep
instance TextShow DataRep
instance TextShow DataType


-- | Monomorphic <tt>TextShow</tt> function for <a>Either</a> values.
--   
--   <i>Since: 2</i>
module TextShow.Data.Either

-- | Convert a <a>Either</a> value to a <a>Builder</a> with the given show
--   functions and precedence.
--   
--   <i>Since: 2</i>
showbEitherPrecWith2 :: (Int -> a -> Builder) -> (Int -> b -> Builder) -> Int -> Either a b -> Builder
instance TextShow2 Either
instance TextShow a0 => TextShow1 (Either a0)
instance (TextShow a0, TextShow b0) => TextShow (Either a0 b0)


-- | Monomorphic <a>Show</a> function for <a>Fixed</a> values.
--   
--   <i>Since: 2</i>
module TextShow.Data.Fixed

-- | Convert a <a>Fixed</a> value to a <a>Builder</a>, where the first
--   argument indicates whether to chop off trailing zeroes.
--   
--   <i>Since: 2</i>
showbFixed :: HasResolution a => Bool -> Fixed a -> Builder
instance HasResolution a => TextShow (Fixed a)


-- | Monomorphic <a>TextShow</a> function for <a>Identity</a> values.
--   
--   <i>Since: 2</i>
module TextShow.Data.Functor.Identity

-- | Convert an <a>Identity</a> value to a <a>Builder</a> with the given
--   show function and precedence.
--   
--   <i>Since: 2</i>
showbIdentityPrecWith :: (Int -> a -> Builder) -> Int -> Identity a -> Builder
instance TextShow1 Identity
instance TextShow a => TextShow (Identity a)


-- | Monomorphic <tt>TextShow</tt> function for <a>Maybe</a> values.
--   
--   <i>Since: 2</i>
module TextShow.Data.Maybe

-- | Convert a <a>Maybe</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbMaybePrecWith :: (Int -> a -> Builder) -> Int -> Maybe a -> Builder
instance TextShow1 Maybe
instance TextShow a0 => TextShow (Maybe a0)


-- | Monomorphic <a>Show</a> functions for <tt>Monoid</tt>-related
--   newtypes.
--   
--   <i>Since: 2</i>
module TextShow.Data.Monoid

-- | Convert an <a>All</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbAllPrec :: Int -> All -> Builder

-- | Convert an <a>Any</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbAnyPrec :: Int -> Any -> Builder

-- | Convert a <a>Dual</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbDualPrecWith :: (Int -> a -> Builder) -> Int -> Dual a -> Builder

-- | Convert a <a>First</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbFirstPrecWith :: (Int -> a -> Builder) -> Int -> First a -> Builder

-- | Convert a <a>Last</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbLastPrecWith :: (Int -> a -> Builder) -> Int -> Last a -> Builder

-- | Convert a <a>Product</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbProductPrecWith :: (Int -> a -> Builder) -> Int -> Product a -> Builder

-- | Convert a <a>Sum</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbSumPrecWith :: (Int -> a -> Builder) -> Int -> Sum a -> Builder
instance TextShow1 Sum
instance TextShow a0 => TextShow (Sum a0)
instance TextShow1 Product
instance TextShow a0 => TextShow (Product a0)
instance TextShow1 Last
instance TextShow a0 => TextShow (Last a0)
instance TextShow1 First
instance TextShow a0 => TextShow (First a0)
instance TextShow1 Dual
instance TextShow a0 => TextShow (Dual a0)
instance TextShow Any
instance TextShow All


-- | Monomorphic <tt>TextShow</tt> functions for <a>Ordering</a> and
--   <a>Down</a>.
--   
--   <i>Since: 2</i>
module TextShow.Data.Ord

-- | Convert a <a>Ordering</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbOrdering :: Ordering -> Builder

-- | Convert a <a>Down</a> value to a <a>Builder</a> with the given show
--   function and precedence. This function is only available with
--   <tt>base-4.6.0.0</tt> or later.
--   
--   <i>Since: 2</i>
showbDownPrecWith :: (Int -> a -> Builder) -> Int -> Down a -> Builder
instance TextShow1 Down
instance TextShow a0 => TextShow (Down a0)
instance TextShow Ordering


-- | Monomorphic <a>TextShow</a> function for <a>Proxy</a> values.
--   
--   <i>Since: 2</i>
module TextShow.Data.Proxy

-- | Convert a <a>Proxy</a> type to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbProxy :: Proxy s -> Builder
instance TextShow1 Proxy
instance TextShow (Proxy s)


-- | Monomorphic <a>TextShow</a> functions for <tt>Text</tt> types.
--   
--   <i>Since: 2</i>
module TextShow.Data.Text

-- | Convert a strict <a>Text</a> to a <a>Builder</a>. <a>showbText</a>
--   should not be confused with <tt>fromText</tt>, as <a>showbText</a>
--   escapes certain characters (such as double quotes).
--   
--   <i>Since: 2</i>
showbText :: Text -> Builder

-- | Convert a lazy <a>Text</a> to a <a>Builder</a>. <a>showbTextLazy</a>
--   should not be confused with <tt>fromTextLazy</tt>, as
--   <a>showbTextLazy</a> escapes certain characters (such as double
--   quotes).
--   
--   <i>Since: 2</i>
showbTextLazy :: Text -> Builder

-- | Show a <a>Builder</a> as if it were a <a>String</a> (i.e., escape
--   certain characters, such as double quotes).
--   
--   <i>Since: 2</i>
showbBuilder :: Builder -> Builder

-- | Convert an <a>I16</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbI16Prec :: Int -> I16 -> Builder

-- | Convert a <a>UnicodeException</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbUnicodeException :: UnicodeException -> Builder

-- | Convert a <a>Decoding</a> value to a <a>Builder</a> with the given
--   precedence. This function is only available with <tt>text-1.0.0.0</tt>
--   or later.
--   
--   <i>Since: 2</i>
showbDecodingPrec :: Int -> Decoding -> Builder

-- | Convert a <a>Size</a> value to a <a>Builder</a> with the given
--   precedence. This function is only available with <tt>text-1.1.0.0</tt>
--   or later.
--   
--   <i>Since: 2</i>
showbSizePrec :: Int -> Size -> Builder
instance TextShow Size
instance TextShow Decoding
instance TextShow UnicodeException
instance TextShow I16
instance TextShow Builder
instance TextShow Text
instance TextShow Text


-- | Monomorphic <a>TextShow</a> functions for data types in the
--   <tt>Typeable</tt> module.
--   
--   <i>Since: 2</i>
module TextShow.Data.Typeable

-- | Convert a <a>TyCon</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbTyCon :: TyCon -> Builder

-- | Convert a <a>TypeRep</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbTypeRepPrec :: Int -> TypeRep -> Builder
instance TextShow TyCon
instance TextShow TypeRep


-- | Monomorphic <a>TextShow</a> function for <a>Dynamic</a>.
--   
--   <i>Since: 2</i>
module TextShow.Data.Dynamic

-- | Convert a <a>Dynamic</a> value to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbDynamic :: Dynamic -> Builder
instance TextShow Dynamic


-- | Monomorphic <tt>TextShow</tt> functions for <a>Version</a>.
--   
--   <i>Since: 2</i>
module TextShow.Data.Version

-- | Convert a <a>Version</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbVersionPrec :: Int -> Version -> Builder

-- | Provides one possible concrete representation for <a>Version</a>. For
--   a version with <a>versionBranch</a> <tt>= [1,2,3]</tt> and
--   <a>versionTags</a> <tt>= ["tag1","tag2"]</tt>, the output will be
--   <tt>1.2.3-tag1-tag2</tt>.
--   
--   <i>Since: 2</i>
showbVersionConcrete :: Version -> Builder
instance TextShow Version


-- | Monomorphic <a>TextShow</a> function for <a>Void</a> values.
--   
--   <i>Since: 2</i>
module TextShow.Data.Void

-- | Since <a>Void</a> values logically don't exist, attempting to convert
--   one to a <a>Builder</a> will never terminate.
--   
--   <i>Since: 2</i>
showbVoid :: Void -> Builder
instance TextShow Void


-- | Monomorphic <a>TextShow</a> functions for Haskell newtypes
--   corresponding to C types in the Foreign Function Interface (FFI).
--   
--   <i>Since: 2</i>
module TextShow.Foreign.C.Types

-- | Convert a <a>CChar</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbCCharPrec :: Int -> CChar -> Builder

-- | Convert a <a>CSChar</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbCSCharPrec :: Int -> CSChar -> Builder

-- | Convert a <a>CUChar</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCUChar :: CUChar -> Builder

-- | Convert a <a>CShort</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbCShortPrec :: Int -> CShort -> Builder

-- | Convert a <a>CUShort</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCUShort :: CUShort -> Builder

-- | Convert a <a>CInt</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbCIntPrec :: Int -> CInt -> Builder

-- | Convert a <a>CUInt</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCUInt :: CUInt -> Builder

-- | Convert a <a>CLong</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbCLongPrec :: Int -> CLong -> Builder

-- | Convert a <a>CULong</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCULong :: CULong -> Builder

-- | Convert a <a>CPtrdiff</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbCPtrdiffPrec :: Int -> CPtrdiff -> Builder

-- | Convert a <a>CSize</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCSize :: CSize -> Builder

-- | Convert a <a>CWchar</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbCWcharPrec :: Int -> CWchar -> Builder

-- | Convert a <a>CSigAtomic</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbCSigAtomicPrec :: Int -> CSigAtomic -> Builder

-- | Convert a <a>CLLong</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbCLLongPrec :: Int -> CLLong -> Builder

-- | Convert a <a>CULLong</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCULLong :: CULLong -> Builder

-- | Convert a <a>CIntPtr</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbCIntPtrPrec :: Int -> CIntPtr -> Builder

-- | Convert a <a>CUIntPtr</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCUIntPtr :: CUIntPtr -> Builder

-- | Convert a <a>CIntMax</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbCIntMaxPrec :: Int -> CIntMax -> Builder

-- | Convert a <a>CUIntMax</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCUIntMax :: CUIntMax -> Builder

-- | Convert a <a>CClock</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbCClockPrec :: Int -> CClock -> Builder

-- | Convert a <a>CTime</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbCTimePrec :: Int -> CTime -> Builder

-- | Convert a <a>CUSeconds</a> value to a <a>Builder</a>. This function is
--   only available with <tt>base-4.4.0.0</tt> or later.
--   
--   <i>Since: 2</i>
showbCUSeconds :: CUSeconds -> Builder

-- | Convert a <a>CSUSeconds</a> value to a <a>Builder</a> with the given
--   precedence. This function is only available with <tt>base-4.4.0.0</tt>
--   or later.
--   
--   <i>Since: 2</i>
showbCSUSecondsPrec :: Int -> CSUSeconds -> Builder

-- | Convert a <a>CFloat</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbCFloatPrec :: Int -> CFloat -> Builder

-- | Convert a <a>CDouble</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbCDoublePrec :: Int -> CDouble -> Builder
instance TextShow CDouble
instance TextShow CFloat
instance TextShow CSUSeconds
instance TextShow CUSeconds
instance TextShow CTime
instance TextShow CClock
instance TextShow CUIntMax
instance TextShow CIntMax
instance TextShow CUIntPtr
instance TextShow CIntPtr
instance TextShow CULLong
instance TextShow CLLong
instance TextShow CSigAtomic
instance TextShow CWchar
instance TextShow CSize
instance TextShow CPtrdiff
instance TextShow CULong
instance TextShow CLong
instance TextShow CUInt
instance TextShow CInt
instance TextShow CUShort
instance TextShow CShort
instance TextShow CUChar
instance TextShow CSChar
instance TextShow CChar


-- | Monomorphic <a>TextShow</a> functions for pointer types used in the
--   Haskell Foreign Function Interface (FFI).
--   
--   <i>Since: 2</i>
module TextShow.Foreign.Ptr

-- | Convert a <a>Ptr</a> to a <a>Builder</a>. Note that this does not
--   require the parameterized type to be an instance of <a>Show</a>
--   itself.
--   
--   <i>Since: 2</i>
showbPtr :: Ptr a -> Builder

-- | Convert a <a>FunPtr</a> to a <a>Builder</a>. Note that this does not
--   require the parameterized type to be an instance of <a>Show</a>
--   itself.
--   
--   <i>Since: 2</i>
showbFunPtr :: FunPtr a -> Builder

-- | Convert an <a>IntPtr</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbIntPtrPrec :: Int -> IntPtr -> Builder

-- | Convert a <a>WordPtr</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbWordPtr :: WordPtr -> Builder

-- | Convert a <a>ForeignPtr</a> to a <a>Builder</a>. Note that this does
--   not require the parameterized type to be an instance of <a>Show</a>
--   itself.
--   
--   <i>Since: 2</i>
showbForeignPtr :: ForeignPtr a -> Builder
instance TextShow1 ForeignPtr
instance TextShow (ForeignPtr a)
instance TextShow WordPtr
instance TextShow IntPtr
instance TextShow1 FunPtr
instance TextShow (FunPtr a)
instance TextShow1 Ptr
instance TextShow (Ptr a)


-- | Optional <a>TextShow</a>, <a>TextShow1</a>, and <a>TextShow2</a>
--   instances for functions.
--   
--   <i>Since: 2</i>
module TextShow.Functions

-- | Convert a function to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbFunction :: (a -> b) -> Builder
instance TextShow2 (->)
instance TextShow1 ((->) a)
instance TextShow (a -> b)


-- | Monomorphic <a>TextShow</a> functions for generics-related data types.
--   
--   <i>Since: 2</i>
module TextShow.GHC.Generics

-- | Convert a <a>U1</a> value to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbU1 :: U1 p -> Builder

-- | Convert a <a>Par1</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbPar1PrecWith :: (Int -> p -> Builder) -> Int -> Par1 p -> Builder

-- | Convert a <a>Rec1</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbRec1Prec :: TextShow (f p) => Int -> Rec1 f p -> Builder

-- | Convert a <a>Rec1</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbRec1PrecWith :: TextShow1 f => (Int -> p -> Builder) -> Int -> Rec1 f p -> Builder

-- | Convert a <a>K1</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbK1PrecWith :: (Int -> c -> Builder) -> Int -> K1 i c p -> Builder

-- | Convert an <a>M1</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbM1Prec :: TextShow (f p) => Int -> M1 i c f p -> Builder

-- | Convert an <a>M1</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbM1PrecWith :: TextShow1 f => (Int -> p -> Builder) -> Int -> M1 i c f p -> Builder

-- | Convert a '(:+:)' value to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbSumTypePrec :: (TextShow (f p), TextShow (g p)) => Int -> (f :+: g) p -> Builder

-- | Convert a '(:+:)' value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbSumTypePrecWith :: (TextShow1 f, TextShow1 g) => (Int -> p -> Builder) -> Int -> (f :+: g) p -> Builder

-- | Convert a '(:*:)' value to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbProductTypePrec :: (TextShow (f p), TextShow (g p)) => Int -> (f :*: g) p -> Builder

-- | Convert a '(:*:)' value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbProductTypePrecWith :: (TextShow1 f, TextShow1 g) => (Int -> p -> Builder) -> Int -> (f :*: g) p -> Builder

-- | Convert a '(:.:)' value to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbCompFunctorsPrec :: TextShow (f (g p)) => Int -> (f :.: g) p -> Builder

-- | Convert a '(:.:)' value to a <a>Builder</a> with the given show
--   function and precedence. This function is only available with
--   <tt>base-4.4.0.0</tt> or later.
--   
--   <i>Since: 2</i>
showbCompFunctorsPrecWith :: (TextShow1 f, TextShow1 g) => (Int -> p -> Builder) -> Int -> (f :.: g) p -> Builder

-- | Convert a <a>Fixity</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbFixityPrec :: Int -> Fixity -> Builder

-- | Convert an <a>Associativity</a> value to a <a>Builder</a>. This
--   function is only available with <tt>base-4.4.0.0</tt> or later.
--   
--   <i>Since: 2</i>
showbAssociativity :: Associativity -> Builder

-- | Convert an <a>Arity</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbArityPrec :: Int -> Arity -> Builder
instance TextShow Arity
instance TextShow Associativity
instance TextShow Fixity
instance (TextShow1 f0, TextShow1 g0) => TextShow1 (f0 :.: g0)
instance TextShow (f (g p)) => TextShow ((:.:) f g p)
instance (TextShow1 f0, TextShow1 g0) => TextShow1 (f0 :*: g0)
instance (TextShow (f p), TextShow (g p)) => TextShow ((:*:) f g p)
instance (TextShow1 f0, TextShow1 g0) => TextShow1 (f0 :+: g0)
instance (TextShow (f p), TextShow (g p)) => TextShow ((:+:) f g p)
instance TextShow1 f => TextShow1 (M1 i c f)
instance TextShow (f p) => TextShow (M1 i c f p)
instance TextShow2 (K1 i)
instance TextShow c => TextShow1 (K1 i c)
instance TextShow c => TextShow (K1 i c p)
instance TextShow1 f0 => TextShow1 (Rec1 f0)
instance TextShow (f p) => TextShow (Rec1 f p)
instance TextShow1 Par1
instance TextShow p0 => TextShow (Par1 p0)
instance TextShow1 U1
instance TextShow (U1 p)


-- | Monomorphic <a>TextShow</a> function for <a>Natural</a>s.
--   
--   <i>Since: 2</i>
module TextShow.Numeric.Natural

-- | Convert a <a>Natural</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbNaturalPrec :: Int -> Natural -> Builder
instance TextShow Natural


-- | Monomorphic <tt>TextShow</tt> function for <a>ExitCode</a>.
--   
--   <i>Since: 2</i>
module TextShow.System.Exit

-- | Convert an <a>ExitCode</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbExitCodePrec :: Int -> ExitCode -> Builder
instance TextShow ExitCode


-- | Monomorphic <a>TextShow</a> function for <a>IO</a>-related data types.
--   
--   <i>Since: 2</i>
module TextShow.System.IO

-- | Convert a <a>Handle</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbHandle :: Handle -> Builder

-- | Convert an <a>IOMode</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbIOMode :: IOMode -> Builder

-- | Convert a <a>BufferMode</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbBufferModePrec :: Int -> BufferMode -> Builder

-- | Convert a <a>HandlePosn</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbHandlePosn :: HandlePosn -> Builder

-- | Convert a <a>SeekMode</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbSeekMode :: SeekMode -> Builder

-- | Convert a <a>TextEncoding</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbTextEncoding :: TextEncoding -> Builder

-- | Convert a <a>CodingProgress</a> to a <a>Builder</a>. This function is
--   only available with <tt>base-4.4.0.0</tt> or later.
--   
--   <i>Since: 2</i>
showbCodingProgress :: CodingProgress -> Builder

-- | Convert a <a>CodingFailureMode</a> value to a <a>Builder</a>. This
--   function is only available with <tt>base-4.4.0.0</tt> or later.
--   
--   <i>Since: 2</i>
showbCodingFailureMode :: CodingFailureMode -> Builder

-- | Convert a <a>Newline</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbNewline :: Newline -> Builder

-- | Convert a <a>NewlineMode</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbNewlineModePrec :: Int -> NewlineMode -> Builder
instance TextShow NewlineMode
instance TextShow Newline
instance TextShow CodingFailureMode
instance TextShow CodingProgress
instance TextShow TextEncoding
instance TextShow SeekMode
instance TextShow HandlePosn
instance TextShow BufferMode
instance TextShow IOMode
instance TextShow Handle


-- | Monomorphic <a>TextShow</a> functions for Haskell equivalents of POSIX
--   data types. Note that these functions are only available if the
--   operating system supports them, so some OSes (e.g., Windows) will not
--   be able to use all of the functions in this module.
--   
--   <i>Since: 2</i>
module TextShow.System.Posix.Types

-- | Convert an <a>Fd</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbFdPrec :: Int -> Fd -> Builder

-- | Convert a <a>CDev</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCDev :: CDev -> Builder

-- | Convert a <a>CIno</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCIno :: CIno -> Builder

-- | Convert a <a>CMode</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCMode :: CMode -> Builder

-- | Convert a <a>COff</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbCOffPrec :: Int -> COff -> Builder

-- | Convert a <a>CPid</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbCPidPrec :: Int -> CPid -> Builder

-- | Convert a <a>CSsize</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbCSsizePrec :: Int -> CSsize -> Builder

-- | Convert a <a>CGid</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCGid :: CGid -> Builder

-- | Convert a <a>CNlink</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCNlink :: CNlink -> Builder

-- | Convert a <a>CUid</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCUid :: CUid -> Builder

-- | Convert a <a>CCc</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCCc :: CCc -> Builder

-- | Convert a <a>CSpeed</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCSpeed :: CSpeed -> Builder

-- | Convert a <a>CTcflag</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCTcflag :: CTcflag -> Builder

-- | Convert a <a>CRLim</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCRLim :: CRLim -> Builder
instance TextShow Fd
instance TextShow CRLim
instance TextShow CTcflag
instance TextShow CSpeed
instance TextShow CCc
instance TextShow CUid
instance TextShow CNlink
instance TextShow CGid
instance TextShow CSsize
instance TextShow CPid
instance TextShow COff
instance TextShow CMode
instance TextShow CIno
instance TextShow CDev


-- | Monomorphic <a>TextShow</a> function for <a>Lexeme</a> (and
--   <a>Number</a>, if using a recent-enough version of <tt>base</tt>).
--   
--   <i>Since: 2</i>
module TextShow.Text.Read

-- | Convert a <a>Lexeme</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbLexemePrec :: Int -> Lexeme -> Builder

-- | Convert a <a>Number</a> to a <a>Builder</a> with the given precedence.
--   This function is only available with <tt>base-4.7.0.0</tt> or later.
--   
--   <i>Since: 2</i>
showbNumberPrec :: Int -> Number -> Builder
instance TextShow Number
instance TextShow Lexeme


-- | Monomorphic <a>TextShow</a> function for <a>Fingerprint</a> values.
--   This module only exports functions if using <tt>base-4.4.0.0</tt> or
--   later.
--   
--   <i>Since: 2</i>
module TextShow.GHC.Fingerprint

-- | Convert a <a>Fingerprint</a> to a <a>Builder</a>. This function is
--   only available with <tt>base-4.4.0.0</tt> or later.
--   
--   <i>Since: 2</i>
showbFingerprint :: Fingerprint -> Builder
instance TextShow Fingerprint


-- | Monomorphic <a>TextShow</a> functions for data types in the
--   <tt>Event</tt> module. This module only exports functions if using
--   <tt>base-4.4.0.0</tt> on a platform other than Windows or GHCJS.
--   
--   <i>Since: 2</i>
module TextShow.GHC.Event

-- | Convert an <a>Event</a> to a <a>Builder</a>. This function is only
--   available with <tt>base-4.4.0.0</tt> or later and is not available on
--   Windows.
--   
--   <i>Since: 2</i>
showbEvent :: Event -> Builder

-- | Convert an <a>FdKey</a> to a <a>Builder</a> with the given precedence.
--   This function is only available with <tt>base-4.4.0.0</tt> or later
--   and is not available on Windows.
--   
--   <i>Since: 2</i>
showbFdKeyPrec :: Int -> FdKey -> Builder
instance TextShow FdKey
instance TextShow Event


-- | Monomorphic <tt>TextShow</tt> function for <a>GCStats</a>. This module
--   only exports functions if using <tt>base-4.5.0.0</tt> or later.
--   
--   <i>Since: 2</i>
module TextShow.GHC.Stats

-- | Convert a <a>GCStats</a> value to a <a>Builder</a> with the given
--   precedence. This function is only available with <tt>base-4.5.0.0</tt>
--   or later.
--   
--   <i>Since: 2</i>
showbGCStatsPrec :: Int -> GCStats -> Builder
instance TextShow GCStats


-- | Monomorphic <a>TextShow</a> functions for data types in the
--   <tt>GHC.TypeLits</tt> module. This module only exports functions if
--   using <tt>base-4.6.0.0</tt> or later.
--   
--   <i>Since: 2</i>
module TextShow.GHC.TypeLits

-- | Convert a <a>SomeNat</a> value to a <a>Builder</a> with the given
--   precedence. This function is only available with <tt>base-4.7.0.0</tt>
--   or later.
--   
--   <i>Since: 2</i>
showbSomeNatPrec :: Int -> SomeNat -> Builder

-- | Convert a <a>SomeSymbol</a> value to a <a>Builder</a> with the given
--   precedence. This function is only available with <tt>base-4.7.0.0</tt>
--   or later.
--   
--   <i>Since: 2</i>
showbSomeSymbol :: SomeSymbol -> Builder
instance TextShow SomeSymbol
instance TextShow SomeNat


-- | Monomorphic <a>TextShow</a> function for representational equality.
--   This module only exports functions if using <tt>base-4.7.0.0</tt> or
--   later.
--   
--   <i>Since: 2</i>
module TextShow.Data.Type.Coercion

-- | Convert a representational equality value to a <a>Builder</a>. This
--   function is only available with <tt>base-4.7.0.0</tt> or later.
--   
--   <i>Since: 2</i>
showbCoercion :: Coercion a b -> Builder
instance TextShow2 Coercion
instance TextShow1 (Coercion a)
instance TextShow (Coercion a b)


-- | Monomorphic <a>TextShow</a> function for propositional equality. This
--   module only exports functions if using <tt>base-4.7.0.0</tt> or later.
--   
--   <i>Since: 2</i>
module TextShow.Data.Type.Equality

-- | Convert a propositional equality value to a <a>Builder</a>. This
--   function is only available with <tt>base-4.7.0.0</tt> or later.
--   
--   <i>Since: 2</i>
showbPropEquality :: (a :~: b) -> Builder
instance TextShow2 (:~:)
instance TextShow1 ((:~:) a)
instance TextShow (a :~: b)


-- | Monomorphic <a>TextShow</a> functions for data types in the
--   <tt>OldTypeable</tt> module. This module only exports functions if
--   using <tt>base-4.7</tt>.
--   
--   <i>Since: 2</i>
module TextShow.Data.OldTypeable

-- | Convert a <a>TyCon</a> to a <a>Builder</a>. This function is only
--   available with <tt>base-4.7</tt>.
--   
--   <i>Since: 2</i>
showbTyCon :: TyCon -> Builder

-- | Convert a <a>TypeRep</a> to a <a>Builder</a> with the given
--   precedence. This function is only available with <tt>base-4.7</tt>.
--   
--   <i>Since: 2</i>
showbTypeRepPrec :: Int -> TypeRep -> Builder
instance TextShow TypeRep
instance TextShow TyCon


-- | Functions to mechanically derive <tt>TextShow</tt>,
--   <tt>TextShow1</tt>, or <tt>TextShow2</tt> instances, or to splice
--   <tt>show</tt>-related expressions into Haskell source code. You need
--   to enable the <tt>TemplateHaskell</tt> language extension in order to
--   use this module.
--   
--   <i>Since: 2</i>
module TextShow.TH

-- | Generates a <a>TextShow</a> instance declaration for the given data
--   type or data family instance.
--   
--   <i>Since: 2</i>
deriveTextShow :: Name -> Q [Dec]

-- | Generates a <a>TextShow1</a> instance declaration for the given data
--   type or data family instance.
--   
--   <i>Since: 2</i>
deriveTextShow1 :: Name -> Q [Dec]

-- | Generates a <a>TextShow2</a> instance declaration for the given data
--   type or data family instance.
--   
--   <i>Since: 2</i>
deriveTextShow2 :: Name -> Q [Dec]

-- | Generates a lambda expression which behaves like <tt>showt</tt>
--   (without requiring a <a>TextShow</a> instance).
--   
--   <i>Since: 2</i>
makeShowt :: Name -> Q Exp

-- | Generates a lambda expression which behaves like <tt>showtl</tt>
--   (without requiring a <a>TextShow</a> instance).
--   
--   <i>Since: 2</i>
makeShowtl :: Name -> Q Exp

-- | Generates a lambda expression which behaves like <tt>showtPrec</tt>
--   (without requiring a <a>TextShow</a> instance).
--   
--   <i>Since: 2</i>
makeShowtPrec :: Name -> Q Exp

-- | Generates a lambda expression which behaves like <tt>showtlPrec</tt>
--   (without requiring a <a>TextShow</a> instance).
--   
--   <i>Since: 2</i>
makeShowtlPrec :: Name -> Q Exp

-- | Generates a lambda expression which behaves like <tt>showtList</tt>
--   (without requiring a <a>TextShow</a> instance).
--   
--   <i>Since: 2</i>
makeShowtList :: Name -> Q Exp

-- | Generates a lambda expression which behaves like <tt>showtlList</tt>
--   (without requiring a <a>TextShow</a> instance).
--   
--   <i>Since: 2</i>
makeShowtlList :: Name -> Q Exp

-- | Generates a lambda expression which behaves like <a>showb</a> (without
--   requiring a <a>TextShow</a> instance).
--   
--   <i>Since: 2</i>
makeShowb :: Name -> Q Exp

-- | Generates a lambda expression which behaves like <a>showbPrec</a>
--   (without requiring a <a>TextShow</a> instance).
--   
--   <i>Since: 2</i>
makeShowbPrec :: Name -> Q Exp

-- | Generates a lambda expression which behaves like <a>showbList</a>
--   (without requiring a <a>TextShow</a> instance).
--   
--   <i>Since: 2</i>
makeShowbList :: Name -> Q Exp

-- | Generates a lambda expression which behaves like <tt>printT</tt>
--   (without requiring a <a>TextShow</a> instance).
--   
--   <i>Since: 2</i>
makePrintT :: Name -> Q Exp

-- | Generates a lambda expression which behaves like <tt>printTL</tt>
--   (without requiring a <a>TextShow</a> instance).
--   
--   <i>Since: 2</i>
makePrintTL :: Name -> Q Exp

-- | Generates a lambda expression which behaves like <tt>hPrintT</tt>
--   (without requiring a <a>TextShow</a> instance).
--   
--   <i>Since: 2</i>
makeHPrintT :: Name -> Q Exp

-- | Generates a lambda expression which behaves like <tt>hPrintTL</tt>
--   (without requiring a <a>TextShow</a> instance).
--   
--   <i>Since: 2</i>
makeHPrintTL :: Name -> Q Exp

-- | Generates a lambda expression which behaves like <a>showbPrecWith</a>
--   (without requiring a <a>TextShow1</a> instance).
--   
--   <i>Since: 2</i>
makeShowbPrecWith :: Name -> Q Exp

-- | Generates a lambda expression which behaves like <tt>showbPrec1</tt>
--   (without requiring a <a>TextShow1</a> instance).
--   
--   <i>Since: 2</i>
makeShowbPrec1 :: Name -> Q Exp

-- | Generates a lambda expression which behaves like <a>showbPrecWith2</a>
--   (without requiring a <a>TextShow2</a> instance).
--   
--   <i>Since: 2</i>
makeShowbPrecWith2 :: Name -> Q Exp

-- | Generates a lambda expression which behaves like <a>showbPrecWith2</a>
--   (without requiring a <a>TextShow2</a> instance).
--   
--   <i>Since: 2</i>
makeShowbPrec2 :: Name -> Q Exp


-- | Functions for tracing and monitoring execution.
--   
--   These can be useful for investigating bugs or performance problems.
--   They should <i>not</i> be used in production code.
--   
--   If you do not wish to require <a>TextShow</a> instances for your
--   <tt>trace</tt> functions, the <a>TextShow.Debug.Trace.TH</a> and
--   <a>Text.Show.Text.Debug.Trace.Generic</a> modules exist to convert the
--   input to a debug message using Template Haskell or generics,
--   respectively.
--   
--   <i>Since: 2</i>
module TextShow.Debug.Trace

-- | The <a>tracet</a> function outputs the trace message given as its
--   first argument, before returning the second argument as its result.
--   
--   For example, this returns the value of <tt>f x</tt> but first outputs
--   the message.
--   
--   <pre>
--   tracet ("calling f with x = " &lt;&gt; showt x) (f x)
--   </pre>
--   
--   The <a>tracet</a> function should <i>only</i> be used for debugging,
--   or for monitoring execution. The function is not referentially
--   transparent: its type indicates that it is a pure function but it has
--   the side effect of outputting the trace message.
--   
--   <i>Since: 2</i>
tracet :: Text -> a -> a

-- | Like <a>tracet</a> but accepts a lazy <a>Text</a> argument.
--   
--   <i>Since: 2</i>
tracetl :: Text -> a -> a

-- | Like <a>tracet</a> but returns the message instead of a third value.
--   
--   <i>Since: 2</i>
tracetId :: Text -> Text

-- | Like <a>tracetId</a> but accepts a lazy <a>Text</a> argument.
--   
--   <i>Since: 2</i>
tracetlId :: Text -> Text

-- | Like <a>tracet</a>, but uses <a>showt</a> on the argument to convert
--   it to a <a>Text</a>.
--   
--   This makes it convenient for printing the values of interesting
--   variables or expressions inside a function. For example here we print
--   the value of the variables <tt>x</tt> and <tt>z</tt>:
--   
--   <pre>
--   f x y =
--       traceTextShow (x, z) $ result
--     where
--       z = ...
--       ...
--   </pre>
--   
--   <i>Since: 2</i>
traceTextShow :: TextShow a => a -> b -> b

-- | Like <a>traceTextShow</a> but returns the shown value instead of a
--   third value.
--   
--   <i>Since: 2</i>
traceTextShowId :: TextShow a => a -> a

-- | Like <a>tracet</a> but additionally prints a call stack if one is
--   available.
--   
--   In the current GHC implementation, the call stack is only availble if
--   the program was compiled with <tt>-prof</tt>; otherwise
--   <a>tracetStack</a> behaves exactly like <a>tracet</a>. Entries in the
--   call stack correspond to <tt>SCC</tt> annotations, so it is a good
--   idea to use <tt>-fprof-auto</tt> or <tt>-fprof-auto-calls</tt> to add
--   SCC annotations automatically.
--   
--   <i>Since: 2</i>
tracetStack :: Text -> a -> a

-- | Like <a>tracetStack</a> but accepts a lazy <a>Text</a> argument.
--   
--   <i>Since: 2</i>
tracetlStack :: Text -> a -> a

-- | The <a>tracetIO</a> function outputs the trace message from the IO
--   monad. This sequences the output with respect to other IO actions.
--   
--   <i>Since: 2</i>
tracetIO :: Text -> IO ()

-- | Like <a>tracetIO</a> but accepts a lazy <a>Text</a> argument.
--   
--   <i>Since: 2</i>
tracetlIO :: Text -> IO ()

-- | Like <a>tracet</a> but returning unit in an arbitrary
--   <a>Applicative</a> context. Allows for convenient use in do-notation.
--   Note that the application of <a>tracet</a> is not an action in the
--   <a>Applicative</a> context, as <a>tracetIO</a> is in the <a>IO</a>
--   type.
--   
--   <pre>
--   ... = do
--     x &lt;- ...
--     tracetM $ "x: " &lt;&gt; showt x
--     y &lt;- ...
--     tracetM $ "y: " &lt;&gt; showt y
--   </pre>
--   
--   <i>Since: 2</i>
tracetM :: Applicative f => Text -> f ()

-- | Like <a>tracetM</a> but accepts a lazy <a>Text</a> argument.
tracetlM :: Applicative f => Text -> f ()

-- | Like <a>tracetM</a>, but uses <a>showt</a> on the argument to convert
--   it to a <a>Text</a>.
--   
--   <pre>
--   ... = do
--     x &lt;- ...
--     traceTextShowM x
--     y &lt;- ...
--     traceTextShowM $ x + y
--   </pre>
--   
--   <i>Since: 2</i>
traceTextShowM :: (TextShow a, Applicative f) => a -> f ()

-- | The <a>tracetEvent</a> function behaves like <a>tracet</a> with the
--   difference that the message is emitted to the eventlog, if eventlog
--   profiling is available and enabled at runtime.
--   
--   It is suitable for use in pure code. In an IO context use
--   <a>tracetEventIO</a> instead.
--   
--   Note that when using GHC's SMP runtime, it is possible (but rare) to
--   get duplicate events emitted if two CPUs simultaneously evaluate the
--   same thunk that uses <a>traceEvent</a>.
--   
--   <i>Since: 2</i>
tracetEvent :: Text -> a -> a

-- | Like <a>tracetEvent</a> but accepts a lazy <a>Text</a> argument.
--   
--   <i>Since: 2</i>
tracetlEvent :: Text -> a -> a

-- | The <a>tracetEventIO</a> function emits a message to the eventlog, if
--   eventlog profiling is available and enabled at runtime.
--   
--   Compared to <a>tracetEvent</a>, <a>tracetEventIO</a> sequences the
--   event with respect to other IO actions.
--   
--   <i>Since: 2</i>
tracetEventIO :: Text -> IO ()

-- | Like <a>tracetEventIO</a> but accepts a lazy <a>Text</a> argument.
--   
--   <i>Since: 2</i>
tracetlEventIO :: Text -> IO ()

-- | The <a>tracetMarker</a> function emits a marker to the eventlog, if
--   eventlog profiling is available and enabled at runtime. The
--   <a>Text</a> is the name of the marker. The name is just used in the
--   profiling tools to help you keep clear which marker is which.
--   
--   This function is suitable for use in pure code. In an IO context use
--   <a>tracetMarkerIO</a> instead.
--   
--   Note that when using GHC's SMP runtime, it is possible (but rare) to
--   get duplicate events emitted if two CPUs simultaneously evaluate the
--   same thunk that uses <a>traceMarker</a>.
--   
--   <i>Since: 2</i>
tracetMarker :: Text -> a -> a

-- | Like <a>tracetMarker</a> but accepts a lazy <a>Text</a> argument.
--   
--   <i>Since: 2</i>
tracetlMarker :: Text -> a -> a

-- | The <a>tracetMarkerIO</a> function emits a marker to the eventlog, if
--   eventlog profiling is available and enabled at runtime.
--   
--   Compared to <a>tracetMarker</a>, <a>tracetMarkerIO</a> sequences the
--   event with respect to other IO actions.
--   
--   <i>Since: 2</i>
tracetMarkerIO :: Text -> IO ()

-- | Like <a>tracetMarkerIO</a> but accepts a lazy <a>Text</a> argument.
--   
--   <i>Since: 2</i>
tracetlMarkerIO :: Text -> IO ()


-- | Functions that splice traces into source code which take an arbitrary
--   data type or data family instance as an argument (even if it is not an
--   instance of <tt>TextShow</tt>). You need to enable the
--   <tt>TemplateHaskell</tt> language extension in order to use this
--   module.
--   
--   <i>Since: 2</i>
module TextShow.Debug.Trace.TH

-- | Generates a lambda expression which behaves like <a>traceTextShow</a>
--   (without requiring a <tt>TextShow</tt> instance).
--   
--   <i>Since: 2</i>
makeTraceTextShow :: Name -> Q Exp

-- | Generates a lambda expression which behaves like
--   <a>traceTextShowId</a> (without requiring a <tt>TextShow</tt>
--   instance).
--   
--   <i>Since: 2</i>
makeTraceTextShowId :: Name -> Q Exp

-- | Generates a lambda expression which behaves like <a>traceTextShowM</a>
--   (without requiring a <tt>TextShow</tt> instance).
--   
--   <i>Since: 2</i>
makeTraceTextShowM :: Name -> Q Exp


-- | Generic versions of <a>TextShow</a> and <a>TextShow1</a> class
--   functions, as an alternative to <a>TextShow.TH</a>, which uses
--   Template Haskell. Because there is no <tt>Generic2</tt> class,
--   <tt>TextShow2</tt> cannot be implemented generically.
--   
--   This implementation is based off of the
--   <tt>Generics.Deriving.Show</tt> module from the
--   <tt>generic-deriving</tt> library.
--   
--   <i>Since: 2</i>
module TextShow.Generic

-- | A <a>Generic</a> implementation of <tt>showt</tt>.
--   
--   <i>Since: 2</i>
genericShowt :: (Generic a, GTextShow (Rep a)) => a -> Text

-- | A <a>Generic</a> implementation of <tt>showtl</tt>.
--   
--   <i>Since: 2</i>
genericShowtl :: (Generic a, GTextShow (Rep a)) => a -> Text

-- | A <a>Generic</a> implementation of <tt>showPrect</tt>.
--   
--   <i>Since: 2</i>
genericShowtPrec :: (Generic a, GTextShow (Rep a)) => Int -> a -> Text

-- | A <a>Generic</a> implementation of <tt>showtlPrec</tt>.
--   
--   <i>Since: 2</i>
genericShowtlPrec :: (Generic a, GTextShow (Rep a)) => Int -> a -> Text

-- | A <a>Generic</a> implementation of <tt>showtList</tt>.
--   
--   <i>Since: 2</i>
genericShowtList :: (Generic a, GTextShow (Rep a)) => [a] -> Text

-- | A <a>Generic</a> implementation of <tt>showtlList</tt>.
--   
--   <i>Since: 2</i>
genericShowtlList :: (Generic a, GTextShow (Rep a)) => [a] -> Text

-- | A <a>Generic</a> implementation of <tt>showb</tt>.
--   
--   <i>Since: 2</i>
genericShowb :: (Generic a, GTextShow (Rep a)) => a -> Builder

-- | A <a>Generic</a> implementation of <a>showbPrec</a>.
--   
--   <i>Since: 2</i>
genericShowbPrec :: (Generic a, GTextShow (Rep a)) => Int -> a -> Builder

-- | A <a>Generic</a> implementation of <tt>showbList</tt>.
--   
--   <i>Since: 2</i>
genericShowbList :: (Generic a, GTextShow (Rep a)) => [a] -> Builder

-- | A <a>Generic</a> implementation of <tt>printT</tt>.
--   
--   <i>Since: 2</i>
genericPrintT :: (Generic a, GTextShow (Rep a)) => a -> IO ()

-- | A <a>Generic</a> implementation of <tt>printTL</tt>.
--   
--   <i>Since: 2</i>
genericPrintTL :: (Generic a, GTextShow (Rep a)) => a -> IO ()

-- | A <a>Generic</a> implementation of <tt>hPrintT</tt>.
--   
--   <i>Since: 2</i>
genericHPrintT :: (Generic a, GTextShow (Rep a)) => Handle -> a -> IO ()

-- | A <a>Generic</a> implementation of <tt>hPrintTL</tt>.
--   
--   <i>Since: 2</i>
genericHPrintTL :: (Generic a, GTextShow (Rep a)) => Handle -> a -> IO ()

-- | A <a>Generic1</a> implementation of <a>showbPrecWith</a>.
--   
--   <i>Since: 2</i>
genericShowbPrecWith :: (Generic1 f, GTextShow1 (Rep1 f)) => (Int -> a -> Builder) -> Int -> f a -> Builder

-- | A 'Generic'/'Generic1' implementation of <tt>showbPrec1</tt>.
--   
--   <i>Since: 2</i>
genericShowbPrec1 :: (Generic a, Generic1 f, GTextShow (Rep a), GTextShow1 (Rep1 f)) => Int -> f a -> Builder

-- | Class of generic representation types (<a>Rep</a>) that can be
--   converted to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
class GTextShow f where isNullary = error "generic showbPrec (isNullary): unnecessary case"
gShowbPrec :: GTextShow f => ConType -> Int -> f a -> Builder
isNullary :: GTextShow f => f a -> Bool

-- | Class of generic representation types (<a>Rep1</a>) that can be
--   converted to a <a>Builder</a> by lifting through a unary type
--   constructor.
--   
--   <i>Since: 2</i>
class GTextShow1 f where isNullary1 = error "generic showbPrecWith (isNullary1): unnecessary case"
gShowbPrecWith :: GTextShow1 f => ConType -> (Int -> a -> Builder) -> Int -> f a -> Builder
isNullary1 :: GTextShow1 f => f a -> Bool

-- | Whether a constructor is a record (<a>Rec</a>), a tuple (<a>Tup</a>),
--   is prefix (<a>Pref</a>), or infix (<a>Inf</a>).
--   
--   <i>Since: 2</i>
data ConType
Rec :: ConType
Tup :: ConType
Pref :: ConType
Inf :: String -> ConType
instance Typeable ConType
instance Typeable GTextShow1
instance Typeable GTextShow
instance Eq ConType
instance Ord ConType
instance Read ConType
instance Show ConType
instance Generic ConType
instance Datatype D1ConType
instance Constructor C1_0ConType
instance Constructor C1_1ConType
instance Constructor C1_2ConType
instance Constructor C1_3ConType
instance (TextShow1 f, GTextShow1 g) => GTextShow1 (f :.: g)
instance (GTextShow1 f, GTextShow1 g) => GTextShow1 (f :*: g)
instance (GTextShow1 f, GTextShow1 g) => GTextShow1 (f :+: g)
instance GTextShow1 f => GTextShow1 (D1 d f)
instance (Selector s, GTextShow1 f) => GTextShow1 (S1 s f)
instance (Constructor c, GTextShow1 f) => GTextShow1 (C1 c f)
instance TextShow1 f => GTextShow1 (Rec1 f)
instance TextShow c => GTextShow1 (K1 i c)
instance GTextShow1 Par1
instance GTextShow1 U1
instance (GTextShow f, GTextShow g) => GTextShow (f :*: g)
instance (GTextShow f, GTextShow g) => GTextShow (f :+: g)
instance GTextShow f => GTextShow (D1 d f)
instance (Selector s, GTextShow f) => GTextShow (S1 s f)
instance (Constructor c, GTextShow f) => GTextShow (C1 c f)
instance TextShow c => GTextShow (K1 i c)
instance GTextShow U1
instance TextShow ConType


-- | Functions that trace the values of <a>Generic</a> instances (even if
--   they are not instances of <tt>TextShow</tt>).
--   
--   <i>Since: 2</i>
module TextShow.Debug.Trace.Generic

-- | A <a>Generic</a> implementation of <a>traceTextShow</a>.
--   
--   <i>Since: 2</i>
genericTraceTextShow :: (Generic a, GTextShow (Rep a)) => a -> b -> b

-- | A <a>Generic</a> implementation of <a>traceTextShowId</a>.
--   
--   <i>Since: 2</i>
genericTraceTextShowId :: (Generic a, GTextShow (Rep a)) => a -> a

-- | A <a>Generic</a> implementation of <tt>traceShowM</tt>.
--   
--   <i>Since: 2</i>
genericTraceTextShowM :: (Generic a, GTextShow (Rep a), Applicative f) => a -> f ()


-- | Efficiently convert from values to <tt>Text</tt> via <a>Builder</a>s.
--   
--   <i>Since: 2</i>
module TextShow

-- | Conversion of values to <tt>Text</tt>. Because there are both strict
--   and lazy <tt>Text</tt> variants, the <a>TextShow</a> class
--   deliberately avoids using <tt>Text</tt> in its functions. Instead,
--   <a>showbPrec</a>, <a>showb</a>, and <a>showbList</a> all return
--   <a>Builder</a>, an efficient intermediate form that can be converted
--   to either kind of <tt>Text</tt>.
--   
--   <a>Builder</a> is a <a>Monoid</a>, so it is useful to use the
--   <a>mappend</a> (or <a>&lt;&gt;</a>) function to combine
--   <a>Builder</a>s when creating <a>TextShow</a> instances. As an
--   example:
--   
--   <pre>
--   import Data.Monoid
--   import TextShow
--   
--   data Example = Example Int Int
--   instance TextShow Example where
--       showb (Example i1 i2) = showb i1 &lt;&gt; showbSpace &lt;&gt; showb i2
--   </pre>
--   
--   If you do not want to create <a>TextShow</a> instances manually, you
--   can alternatively use the <a>TextShow.TH</a> module to automatically
--   generate default <a>TextShow</a> instances using Template Haskell, or
--   the <a>TextShow.Generic</a> module to quickly define <a>TextShow</a>
--   instances using <tt>genericShowbPrec</tt>.
--   
--   <i>Since: 2</i>
class TextShow a where showbPrec _ = showb showb = showbPrec 0 showbList = showbListWith showb
showbPrec :: TextShow a => Int -> a -> Builder
showb :: TextShow a => a -> Builder
showbList :: TextShow a => [a] -> Builder

-- | Constructs a strict <a>Text</a> from a single value.
--   
--   <i>Since: 2</i>
showt :: TextShow a => a -> Text

-- | Constructs a lazy <a>Text</a> from a single value.
--   
--   <i>Since: 2</i>
showtl :: TextShow a => a -> Text

-- | Constructs a strict <a>Text</a> from a single value with the given
--   precedence.
--   
--   <i>Since: 2</i>
showtPrec :: TextShow a => Int -> a -> Text

-- | Constructs a lazy <a>Text</a> from a single value with the given
--   precedence.
--   
--   <i>Since: 2</i>
showtlPrec :: TextShow a => Int -> a -> Text

-- | Construct a strict <a>Text</a> from a list of values.
--   
--   <i>Since: 2</i>
showtList :: TextShow a => [a] -> Text

-- | Construct a lazy <a>Text</a> from a list of values.
--   
--   <i>Since: 2</i>
showtlList :: TextShow a => [a] -> Text

-- | Surrounds <a>Builder</a> output with parentheses if the <a>Bool</a>
--   parameter is <a>True</a>.
--   
--   <i>Since: 2</i>
showbParen :: Bool -> Builder -> Builder

-- | Construct a <a>Builder</a> containing a single space character.
--   
--   <i>Since: 2</i>
showbSpace :: Builder

-- | Lifting of the <a>TextShow</a> class to unary type constructors.
--   
--   <i>Since: 2</i>
class TextShow1 f
showbPrecWith :: TextShow1 f => (Int -> a -> Builder) -> Int -> f a -> Builder

-- | Lift the standard <a>showbPrec</a> function through the type
--   constructor.
--   
--   <i>Since: 2</i>
showbPrec1 :: (TextShow1 f, TextShow a) => Int -> f a -> Builder

-- | <tt><a>showbUnaryWith</a> sp n p x</tt> produces the <a>Builder</a>
--   representation of a unary data constructor with name <tt>n</tt> and
--   argument <tt>x</tt>, in precedence context <tt>p</tt>, using the
--   function <tt>sp</tt> to show occurrences of the type argument.
--   
--   <i>Since: 2</i>
showbUnaryWith :: (Int -> a -> Builder) -> Builder -> Int -> a -> Builder

-- | Lifting of the <a>TextShow</a> class to binary type constructors.
--   
--   <i>Since: 2</i>
class TextShow2 f
showbPrecWith2 :: TextShow2 f => (Int -> a -> Builder) -> (Int -> b -> Builder) -> Int -> f a b -> Builder

-- | Lift two <a>showbPrec</a> functions through the type constructor.
--   
--   <i>Since: 2</i>
showbPrec2 :: (TextShow2 f, TextShow a, TextShow b) => Int -> f a b -> Builder

-- | <tt><a>showbBinaryWith</a> sp n p x y</tt> produces the <a>Builder</a>
--   representation of a binary data constructor with name <tt>n</tt> and
--   arguments <tt>x</tt> and <tt>y</tt>, in precedence context <tt>p</tt>,
--   using the functions <tt>sp1</tt> and <tt>sp2</tt> to show occurrences
--   of the type arguments.
--   
--   <i>Since: 2</i>
showbBinaryWith :: (Int -> a -> Builder) -> (Int -> b -> Builder) -> Builder -> Int -> a -> b -> Builder

-- | A <tt>Builder</tt> is an efficient way to build lazy <tt>Text</tt>
--   values. There are several functions for constructing builders, but
--   only one to inspect them: to extract any data, you have to turn them
--   into lazy <tt>Text</tt> values using <tt>toLazyText</tt>.
--   
--   Internally, a builder constructs a lazy <tt>Text</tt> by filling
--   arrays piece by piece. As each buffer is filled, it is 'popped' off,
--   to become a new chunk of the resulting lazy <tt>Text</tt>. All this is
--   hidden from the user of the <tt>Builder</tt>.
data Builder :: *

-- | Convert a <a>Builder</a> to a strict <a>Text</a>.
--   
--   <i>Since: 2</i>
toText :: Builder -> Text

-- | <i>O(n).</i> Extract a lazy <tt>Text</tt> from a <tt>Builder</tt> with
--   a default buffer size. The construction work takes place if and when
--   the relevant part of the lazy <tt>Text</tt> is demanded.
toLazyText :: Builder -> Text

-- | <i>O(n).</i> Extract a lazy <tt>Text</tt> from a <tt>Builder</tt>,
--   using the given size for the initial buffer. The construction work
--   takes place if and when the relevant part of the lazy <tt>Text</tt> is
--   demanded.
--   
--   If the initial buffer is too small to hold all data, subsequent
--   buffers will be the default buffer size.
toLazyTextWith :: Int -> Builder -> Text

-- | Convert a <a>Builder</a> to a <a>String</a> (without surrounding it
--   with double quotes, as <a>show</a> would).
--   
--   <i>Since: 2</i>
toString :: Builder -> String

-- | <i>O(1).</i> A <tt>Builder</tt> taking a single character, satisfying
--   
--   <ul>
--   <li><pre><a>toLazyText</a> (<a>singleton</a> c) = <a>singleton</a>
--   c</pre></li>
--   </ul>
singleton :: Char -> Builder

-- | <i>O(1).</i> A <tt>Builder</tt> taking a <a>Text</a>, satisfying
--   
--   <ul>
--   <li><pre><a>toLazyText</a> (<a>fromText</a> t) = <a>fromChunks</a>
--   [t]</pre></li>
--   </ul>
fromText :: Text -> Builder

-- | <i>O(1).</i> A <tt>Builder</tt> taking a lazy <tt>Text</tt>,
--   satisfying
--   
--   <ul>
--   <li><pre><a>toLazyText</a> (<a>fromLazyText</a> t) = t</pre></li>
--   </ul>
fromLazyText :: Text -> Builder

-- | <i>O(1).</i> A Builder taking a <tt>String</tt>, satisfying
--   
--   <ul>
--   <li><pre><a>toLazyText</a> (<a>fromString</a> s) = <a>fromChunks</a>
--   [S.pack s]</pre></li>
--   </ul>
fromString :: String -> Builder

-- | <i>O(1).</i> Pop the strict <tt>Text</tt> we have constructed so far,
--   if any, yielding a new chunk in the result lazy <tt>Text</tt>.
flush :: Builder

-- | Computes the length of a <a>Builder</a>.
--   
--   <i>Since: 2</i>
lengthB :: Builder -> Int64

-- | Merges several <a>Builder</a>s, separating them by newlines.
--   
--   <i>Since: 2</i>
unlinesB :: [Builder] -> Builder

-- | Merges several <a>Builder</a>s, separating them by spaces.
--   
--   <i>Since: 2</i>
unwordsB :: [Builder] -> Builder

-- | Writes a value's strict <a>Text</a> representation to the standard
--   output, followed by a newline.
--   
--   <i>Since: 2</i>
printT :: TextShow a => a -> IO ()

-- | Writes a value's lazy <a>Text</a> representation to the standard
--   output, followed by a newline.
--   
--   <i>Since: 2</i>
printTL :: TextShow a => a -> IO ()

-- | Writes a value's strict <a>Text</a> representation to a file handle,
--   followed by a newline.
--   
--   <i>Since: 2</i>
hPrintT :: TextShow a => Handle -> a -> IO ()

-- | Writes a value's lazy <a>Text</a> representation to a file handle,
--   followed by a newline.
--   
--   <i>Since: 2</i>
hPrintTL :: TextShow a => Handle -> a -> IO ()

-- | The <a>TextShow</a> instance for <a>FromStringShow</a> is based on its
--   <tt>String</tt> <a>Show</a> instance. That is,
--   
--   <pre>
--   showbPrec p (<a>FromStringShow</a> x) = <a>fromString</a> (showsPrec p x "")
--   </pre>
--   
--   <i>Since: 2</i>
newtype FromStringShow a
FromStringShow :: a -> FromStringShow a
fromStringShow :: FromStringShow a -> a

-- | The <tt>String</tt> <a>Show</a> instance for <a>FromTextShow</a> is
--   based on its <a>TextShow</a> instance. That is,
--   
--   <pre>
--   showsPrec p (<a>FromTextShow</a> x) = <a>showString</a> (<a>toString</a> (showbPrec p x))
--   </pre>
--   
--   <i>Since: 2</i>
newtype FromTextShow a
FromTextShow :: a -> FromTextShow a
fromTextShow :: FromTextShow a -> a
