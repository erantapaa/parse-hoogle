-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell interface to embedded Perl 5 interpreter
--   
--   This module provides a Haskell interface to embedded Perl 5
--   interpreter. Documentation and functionality is scarce at the moment;
--   see test.hs for some basic usage examples. Currently supported
--   features are: * Function calls * Method calls * Module imports *
--   Callbacks Eventually, the entirety of Pugs.Embed.Perl5 and
--   Pugs.Run.Perl5 will be carried into this module.
@package HsPerl5
@version 0.0.6

module Language.Perl5

-- | Perl 5's calling context.
data Context
Void :: Context
Item :: Context
List :: Context

-- | Data types that can be casted into a Perl 5 value (SV).
class ToSV a
toSV :: (ToSV a) => a -> IO SV

-- | Data types that can be casted from a Perl 5 value (SV).
class FromSV a
fromSV :: (FromSV a) => SV -> IO a

-- | Run a computation within the context of a Perl 5 interpreter.
withPerl5 :: IO a -> IO a

-- | Call a Perl 5 subroutine.
callSub :: (ToCV s, ToArgs a, FromArgs r) => s -> a -> IO r
(.:) :: (ToCV sub, ToArgs args, FromArgs ret) => sub -> args -> IO ret
(.!) :: (ToCV sub, ToArgs args) => sub -> args -> IO ()

-- | Call a Perl 5 method.
callMethod :: (ToSV i, ToSV m, ToArgs a, FromArgs r) => i -> m -> a -> IO r
(.$) :: (ToSV meth, ToArgs args, FromArgs ret) => SV -> meth -> args -> IO ret
(.$!) :: (ToSV meth, ToArgs args) => SV -> meth -> args -> IO ()

-- | Evaluate a snippet of Perl 5 code.
eval :: (FromArgs a) => String -> IO a

-- | Same as <a>eval</a> but always in void context.
eval_ :: String -> IO ()
type SV = Ptr ()

-- | Use a module. Returns a prototype object representing the module.
use :: String -> IO SV
instance [incoherent] (ToArgs a, FromArgs (r1, r2)) => ToSV (r1 -> r2 -> a)
instance [incoherent] (ToArgs a, FromArgs r) => ToSV (r -> a)
instance [incoherent] (ToArgs a, FromArgs (r1, r2)) => ToSV (r1 -> r2 -> IO a)
instance [incoherent] (ToArgs a, FromArgs r) => ToSV (r -> IO a)
instance [incoherent] (ToArgs a) => ToSV (IO a)
instance [incoherent] FromArgs [SV]
instance [incoherent] ToArgs [SV]
instance [incoherent] (ToArgs a, ToArgs b, FromArgs r) => FromSV (a -> b -> IO r)
instance [incoherent] (ToArgs a, FromArgs r) => FromSV (a -> IO r)
instance [incoherent] (FromArgs r) => FromSV (IO r)
instance [incoherent] (FromSV a, FromSV b) => FromArgs (a, b)
instance [incoherent] (FromSV a) => FromArgs a
instance [incoherent] (ToSV a, ToSV b) => ToArgs (a, b)
instance [incoherent] (ToSV a) => ToArgs a
instance [incoherent] ToArgs ()
instance [incoherent] FromArgs ()
instance [incoherent] ToSV Bool
instance [incoherent] FromSV Bool
instance [incoherent] FromSV Double
instance [incoherent] FromSV Int
instance [incoherent] ToSV Double
instance [incoherent] ToSV Int
instance [incoherent] FromSV String
instance [incoherent] ToSV String
instance [incoherent] FromArgs [String]
instance [incoherent] ToArgs [String]
instance [incoherent] FromSV ()
instance [incoherent] ToSV ()
instance [incoherent] FromSV SV
instance [incoherent] ToSV SV
instance [incoherent] ToCV String
instance [incoherent] (ToSV a) => ToCV a
