-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Evil inventions in the Tri-State area
--   
--   Construction and operation of evil inventions in the Tri-State area.
--   Based on the pioneering work of Dr. Heinz Doofenshmirtz.
@package acme-inator
@version 0.1.0.0


-- | Construction and operation of evil inventions in the Tri-State area.
--   Based on the pioneering work of Dr. Heinz Doofenschmirtz.
module Acme.Inator

-- | An <a>EvilInvention</a> is like a normal function <tt>a -&gt; b</tt>,
--   only used in evil plans. It will only function in the context of a
--   <a>TrappedAgent</a>. See <a>activate</a> for how to turn one one.
type EvilInvention a b = (TrappedAgent, a) -> b

-- | Combinator to turn a function into an <a>EvilInvention</a>. Typically
--   applied via the <a>.</a> operator, like so:
--   
--   <pre>
--   incrementinator :: EvilInvention Int Int
--   incrementinator = (+1) . inator
--   </pre>
inator :: (TrappedAgent, a) -> a

-- | <i>Warning:</i> All <a>EvilInvention</a>s have a <a>selfDestruct</a>
--   ability. When an <a>EvilInvention</a> self-destructs, all effects of
--   evil plans in the <a>TriStateArea</a> are nullified, as if
--   <a>Nothing</a> ever happened.
selfDestruct :: EvilInvention a b -> TriStateArea ()

-- | Agents are secret, and distinguished only by their letter
--   designations.
data Agent
Agent :: Char -> Agent

-- | <a>Agent</a> <tt>'P'</tt>
perryThePlatypus :: Agent

-- | When trapped, an <a>Agent</a> enables an <a>EvilInvention</a> to be
--   <a>activate</a>d and then used. The scope of trapping an <a>Agent</a>
--   is strictly delimited. See <a>whileTrapping</a>.
data TrappedAgent

-- | Activation and operation of an <a>EvilInvention</a> is strictly
--   limited to the <a>TriStateArea</a>. Plans executed in the
--   <a>TriStateArea</a> may <a>fail</a>, causing the whole plan to have no
--   externally visible effect.
data TriStateArea a

-- | <a>EvilInvention</a>s must be activated before use. The activated
--   machine can then be applied to suitable targets of scorn and dislike.
--   <i>N.B.:</i> Activation and subsequent operation of an
--   <a>EvilInvention</a> can only be performed in the <a>TriStateArea</a>.
--   
--   <pre>
--   evilPlan :: TriStateArea Int
--   evilPlan = do
--      zap &lt;- activate incrementinator
--      as &lt;- mapM zap [1..37]
--      b &lt;- zap 38 -- I never really liked the number 38
--      selfDestruct incrementinator
--      cs &lt;- mapM zap [39..100]
--      return $ sum as + b + sum cs
--   </pre>
activate :: EvilInvention a b -> TriStateArea (a -> TriStateArea b)

-- | To execute any plan (evil or <a>otherwise</a>) in the
--   <a>TriStateArea</a>, an <a>Agent</a> must be trapped with this
--   function, and held for the duration of of the plan.
--   
--   <pre>
--   executeEvilPlan = whileTrapping perryThePlatypus evilPlan
--   
--   main :: IO ()
--   main = do
--       putStrLn $
--           case executeEvilPlan of
--               Nothing -&gt; "Curse you, Perry the Platypus!"
--               Just a -&gt; "Ha ha! I have incremented the TriStateArea to " ++ show a
--   </pre>
whileTrapping :: Agent -> TriStateArea a -> Maybe a
instance Eq Agent
instance Ord Agent
instance Bounded Agent
instance Read Agent
instance Show Agent
instance Monad TriStateArea
instance Functor TriStateArea
