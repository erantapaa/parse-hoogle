-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Export sheet music and audio from Windows/Mac app Jammit
--   
@package jammittools
@version 0.5.0.1


-- | Basic types and functions for dealing with Jammit song packages.
module Sound.Jammit.Base

-- | The <a>Enum</a> instance corresponds to the number used in the
--   <a>instrument</a> property, and the names (used by <a>Show</a> and
--   <a>Read</a>) are capitalized versions of those used in the
--   <a>skillLevel</a> property.
data Instrument
Guitar :: Instrument
Bass :: Instrument
Drums :: Instrument
Keyboard :: Instrument
Vocal :: Instrument
data Part

-- | Used for both Guitar and Guitar 1
PartGuitar1 :: Part
PartGuitar2 :: Part
PartBass :: Part

-- | Used for both Drums and Drums 1
PartDrums1 :: Part

-- | Rarely used. Seen in "Space Truckin'"
PartDrums2 :: Part

-- | Used for both Keys and Keys 1
PartKeys1 :: Part
PartKeys2 :: Part

-- | Rarely used. Seen in "The Answer Lies Within" and "Wait for Sleep"
PartPiano :: Part

-- | Rarely used. Seen in "Wait for Sleep"
PartSynth :: Part

-- | Rarely used. Seen in "Smoke on the Water"
PartOrgan :: Part
PartVocal :: Part
PartBVocals :: Part
data AudioPart

-- | An audio file for a single notated part.
Only :: Part -> AudioPart

-- | The backing track for an instrument package.
Without :: Instrument -> AudioPart
data SheetPart

-- | For any instrument, the notation sheet music.
Notation :: Part -> SheetPart

-- | For guitar and bass, the tablature sheet music.
Tab :: Part -> SheetPart
titleToPart :: String -> Maybe Part
titleToAudioPart :: String -> Instrument -> Maybe AudioPart
partToInstrument :: Part -> Instrument
audioPartToInstrument :: AudioPart -> Instrument
data Info
Info :: String -> String -> String -> String -> Integer -> String -> Bool -> Bool -> String -> Instrument -> String -> SkillLevel -> String -> Double -> String -> Integer -> String -> Info
album :: Info -> String
artist :: Info -> String
bpm :: Info -> String
copyright :: Info -> String
countInBeats :: Info -> Integer
courtesyOf :: Info -> String
demo :: Info -> Bool
explicit :: Info -> Bool
genre :: Info -> String
instrument :: Info -> Instrument
publishedBy :: Info -> String
skillLevel :: Info -> SkillLevel
sku :: Info -> String
slow :: Info -> Double
title :: Info -> String
version :: Info -> Integer
writtenBy :: Info -> String
loadInfo :: FilePath -> IO (Maybe Info)
data Track
Track :: String -> String -> Maybe Integer -> Maybe Integer -> Maybe String -> Track
trackClass :: Track -> String
identifier :: Track -> String
scoreSystemHeight :: Track -> Maybe Integer
scoreSystemInterval :: Track -> Maybe Integer
trackTitle :: Track -> Maybe String
loadTracks :: FilePath -> IO (Maybe [Track])
data SkillLevel
OneSkill :: Integer -> SkillLevel
ManySkills :: [(Instrument, Integer)] -> SkillLevel

-- | Tries to find the top-level Jammit library directory on Windows or Mac
--   OS X.
findJammitDir :: IO (Maybe FilePath)

-- | Searches a directory and all subdirectories for folders containing a
--   Jammit info file.
songSubdirs :: FilePath -> IO [FilePath]
data Beat
Beat :: Bool -> Bool -> Double -> Beat
isDownbeat :: Beat -> Bool
isGhostBeat :: Beat -> Bool
position :: Beat -> Double
loadBeats :: FilePath -> IO (Maybe [Beat])
loadGhost :: FilePath -> IO (Maybe [Beat])
data Section
Section :: Integer -> Integer -> Integer -> Section
sectionBeat :: Section -> Integer
sectionNumber :: Section -> Integer
sectionType :: Section -> Integer
loadSections :: FilePath -> IO (Maybe [Section])
findNotation :: Track -> FilePath -> IO [FilePath]
findTab :: Track -> FilePath -> IO [FilePath]
findAudio :: Track -> FilePath -> IO (Maybe FilePath)
sheetWidth :: Num a => a
sheetHeight :: Num a => a
instance Eq Instrument
instance Ord Instrument
instance Show Instrument
instance Read Instrument
instance Enum Instrument
instance Bounded Instrument
instance Eq Part
instance Ord Part
instance Show Part
instance Read Part
instance Enum Part
instance Bounded Part
instance Eq AudioPart
instance Ord AudioPart
instance Show AudioPart
instance Read AudioPart
instance Eq SheetPart
instance Ord SheetPart
instance Show SheetPart
instance Read SheetPart
instance Eq SkillLevel
instance Ord SkillLevel
instance Show SkillLevel
instance Read SkillLevel
instance Eq Info
instance Ord Info
instance Show Info
instance Read Info
instance Eq Track
instance Ord Track
instance Show Track
instance Read Track
instance Eq Beat
instance Ord Beat
instance Show Beat
instance Read Beat
instance Eq Section
instance Ord Section
instance Show Section
instance Read Section
instance PropertyListItem Section
instance PropertyListItem Beat
instance PropertyListItem Track
instance PropertyListItem Info
instance PropertyListItem SkillLevel
instance PropertyListItem Instrument


-- | Functions for exporting Jammit audio (as WAV) and sheet music (as
--   PDF).
module Sound.Jammit.Export
type Library = [(FilePath, Info, [Track])]

-- | Filter the library based on some string selector. The selector is
--   applied case-insensitively, and the song's field only has to contain
--   the search term rather than match it exactly.
fuzzySearchBy :: (Info -> String) -> String -> Library -> Library

-- | Filter the library based on some string selector. The selector must
--   match exactly.
exactSearchBy :: (Info -> String) -> String -> Library -> Library

-- | Given the top-level Jammit library directory, finds all song packages.
loadLibrary :: FilePath -> IO Library

-- | A mapping from audio part to absolute filename of an audio file.
getAudioParts :: Library -> [(AudioPart, FilePath)]

-- | A mapping from sheet part to <tt>(prefix of image files, line height
--   in pixels)</tt>.
getSheetParts :: Library -> [(SheetPart, (FilePath, Integer))]
audioSource :: MonadResource m => FilePath -> IO (AudioSource m Int16)
runAudio :: [FilePath] -> [FilePath] -> FilePath -> IO ()
runSheet :: [(FilePath, Integer)] -> Int -> FilePath -> IO ()
