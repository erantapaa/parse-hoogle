-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bidirectional state monad transformer
--   
--   A Tardis is a combination of both a forwards and a backwards state
--   transformer, providing two state values that "travel" in opposite
--   directions.
--   
--   You can install this library with the
--   <tt>use-undecidable-instances</tt> flag, but this feature is only
--   provided for toying around. If you depend on this library, or install
--   any libraries that depend on this library, then you should install
--   this library <i>without</i> that flag.
--   
--   A detailed description of what a Tardis is and how to use it can be
--   found in the documentation for Control.Monad.Tardis.
@package tardis
@version 0.3.0.0


-- | The class definition of a Tardis, as well as a few straightforward
--   combinators based on its primitives.
--   
--   See Control.Monad.Tardis for the general explanation of what a Tardis
--   is and how to use it.
module Control.Monad.Tardis.Class

-- | A Tardis is parameterized by two state streams: a
--   'backwards-traveling' state and a 'forwards-traveling' state. This
--   library consistently puts the backwards-traveling state first whenever
--   the two are seen together.
--   
--   Minimal complete definition: (<a>tardis</a>) or (<a>getPast</a>,
--   <a>getFuture</a>, <a>sendPast</a>, and <a>sendFuture</a>).
class (Applicative m, MonadFix m) => MonadTardis bw fw m | m -> bw, m -> fw where getPast = tardis $ \ ~(bw, fw) -> (fw, (bw, fw)) getFuture = tardis $ \ ~(bw, fw) -> (bw, (bw, fw)) sendPast bw' = tardis $ \ ~(_bw, fw) -> ((), (bw', fw)) sendFuture fw' = tardis $ \ ~(bw, _fw) -> ((), (bw, fw')) tardis f = do { rec {let (a, (future', past')) = f (future, past) sendPast future' past <- getPast future <- getFuture}; sendFuture past'; return a }
getPast :: MonadTardis bw fw m => m fw
getFuture :: MonadTardis bw fw m => m bw
sendPast :: MonadTardis bw fw m => bw -> m ()
sendFuture :: MonadTardis bw fw m => fw -> m ()
tardis :: MonadTardis bw fw m => ((bw, fw) -> (a, (bw, fw))) -> m a

-- | Modify the forwards-traveling state as it passes through from past to
--   future.
modifyForwards :: MonadTardis bw fw m => (fw -> fw) -> m ()

-- | Modify the backwards-traveling state as it passes through from future
--   to past.
modifyBackwards :: MonadTardis bw fw m => (bw -> bw) -> m ()

-- | Retrieve a specific view of the forwards-traveling state.
getsPast :: MonadTardis bw fw m => (fw -> a) -> m a

-- | Retrieve a specific view of the backwards-traveling state.
getsFuture :: MonadTardis bw fw m => (bw -> a) -> m a


-- | The data definition of a <a>TardisT</a> as well as its primitive
--   operations, and straightforward combinators based on the primitives.
--   
--   See Control.Monad.Tardis for the general explanation of what a Tardis
--   is and how to use it.
module Control.Monad.Trans.Tardis

-- | A TardisT is parameterized by two state streams: a
--   'backwards-traveling' state and a 'forwards-traveling' state. This
--   library consistently puts the backwards-traveling state first whenever
--   the two are seen together.
data TardisT bw fw m a

-- | A TardisT is merely an effectful state transformation
runTardisT :: TardisT bw fw m a -> (bw, fw) -> m (a, (bw, fw))

-- | Run a Tardis, and discard the final state, observing only the
--   resultant value.
evalTardisT :: Monad m => TardisT bw fw m a -> (bw, fw) -> m a

-- | Run a Tardis, and discard the resultant value, observing only the
--   final state (of both streams). Note that the <tt>final</tt> state of
--   the backwards-traveling state is the state it reaches by traveling
--   from the <tt>bottom</tt> of your code to the <tt>top</tt>.
execTardisT :: Monad m => TardisT bw fw m a -> (bw, fw) -> m (bw, fw)

-- | Using a Tardis with no monad underneath will prove to be most common
--   use case. Practical uses of a TardisT require that the underlying
--   monad be an instance of MonadFix, but note that the IO instance of
--   MonadFix is almost certainly unsuitable for use with Tardis code.
type Tardis bw fw = TardisT bw fw Identity

-- | A Tardis is merely a pure state transformation.
runTardis :: Tardis bw fw a -> (bw, fw) -> (a, (bw, fw))

-- | Run a Tardis, and discard the final state, observing only the
--   resultant value.
evalTardis :: Tardis bw fw a -> (bw, fw) -> a

-- | Run a Tardis, and discard the resultant value, observing only the
--   final state (of both streams).
execTardis :: Tardis bw fw a -> (bw, fw) -> (bw, fw)

-- | From a stateful computation, construct a Tardis. This is the pure
--   parallel to the constructor <a>TardisT</a>, and is polymorphic in the
--   transformed monad.
tardis :: Monad m => ((bw, fw) -> (a, (bw, fw))) -> TardisT bw fw m a

-- | Retrieve the current value of the 'forwards-traveling' state, which
--   therefore came forwards from the past. You can think of
--   forwards-traveling state as traveling <tt>downwards</tt> through your
--   code.
getPast :: Monad m => TardisT bw fw m fw

-- | Retrieve the current value of the 'backwards-traveling' state, which
--   therefore came backwards from the future. You can think of
--   backwards-traveling state as traveling <tt>upwards</tt> through your
--   code.
getFuture :: Monad m => TardisT bw fw m bw

-- | Set the current value of the 'backwards-traveling' state, which will
--   therefore be sent backwards to the past. This value can be retrieved
--   by calls to <a>getFuture</a> located <tt>above</tt> the current
--   location, unless it is overwritten by an intervening <a>sendPast</a>.
sendPast :: Monad m => bw -> TardisT bw fw m ()

-- | Set the current value of the 'forwards-traveling' state, which will
--   therefore be sent forwards to the future. This value can be retrieved
--   by calls to <a>getPast</a> located <tt>below</tt> the current
--   location, unless it is overwritten by an intervening
--   <a>sendFuture</a>.
sendFuture :: Monad m => fw -> TardisT bw fw m ()

-- | Modify the forwards-traveling state as it passes through from past to
--   future.
modifyForwards :: MonadFix m => (fw -> fw) -> TardisT bw fw m ()

-- | Modify the backwards-traveling state as it passes through from future
--   to past.
modifyBackwards :: MonadFix m => (bw -> bw) -> TardisT bw fw m ()

-- | Retrieve a specific view of the forwards-traveling state.
getsPast :: MonadFix m => (fw -> a) -> TardisT bw fw m a

-- | Retrieve a specific view of the backwards-traveling state.
getsFuture :: MonadFix m => (bw -> a) -> TardisT bw fw m a

-- | Some Tardises never observe the <tt>initial</tt> state of either state
--   stream, so it is convenient to simply hand dummy values to such
--   Tardises.
--   
--   <pre>
--   noState = (undefined, undefined)
--   </pre>
noState :: (a, b)
instance MonadFix m => MonadFix (TardisT bw fw m)
instance MonadTrans (TardisT bw fw)
instance MonadFix m => Applicative (TardisT bw fw m)
instance MonadFix m => Functor (TardisT bw fw m)
instance MonadFix m => Monad (TardisT bw fw m)


-- | This module re-exports both <a>MonadTardis</a> and <a>TardisT</a>
--   (Wherever there is overlap, the <a>MonadTardis</a> version is
--   preferred.), as well as the <a>TardisT</a> instance of
--   <a>MonadTardis</a>. If you installed this library with the
--   use-undecidable-instances flag, then another instance was also
--   exported: any <tt>MonadTrans</tt> on top of any <a>MonadTardis</a> is
--   also a <a>MonadTardis</a>.
--   
--   The recommended usage of a Tardis is to import this module.
module Control.Monad.Tardis
instance MonadFix m => MonadState fw (TardisT bw fw m)
instance MonadFix m => MonadTardis bw fw (TardisT bw fw m)
