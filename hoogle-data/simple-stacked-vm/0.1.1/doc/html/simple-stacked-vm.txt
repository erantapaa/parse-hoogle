-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple stacked virtual machine: assembler, disassembler, bytecode interpreter
--   
--   This is a simple stacked virtual machine. It works like Forth or JVM.
--   This package includes declarations of data types, assembler,
--   disassembler, and bytecode interpreter.
@package simple-stacked-vm
@version 0.1.1

module Language.SSVM.Types
type DArray = Array Int StackItem

-- | Stack item
data StackItem
SInteger :: Integer -> StackItem
SString :: String -> StackItem
SInstruction :: Instruction -> StackItem
SArray :: DArray -> StackItem
Quote :: StackItem -> StackItem

-- | Show type of item
showType :: StackItem -> String
showItem :: StackItem -> String
showPrint :: StackItem -> String
showCode :: Code -> String
type Stack = [StackItem]
type Marks = Map String Int
showMarks :: Marks -> String

-- | VM code
data Code
Code :: [Marks] -> [StackItem] -> Code

-- | marks stack
cMarks :: Code -> [Marks]
cCode :: Code -> [StackItem]
class (Data a, Typeable a) => StackType a
toStack :: StackType a => a -> StackItem
fromStack :: StackType a => StackItem -> Maybe a

-- | VM instructions
data Instruction

-- | Do nothing
NOP :: Instruction
PUSH :: StackItem -> Instruction
DROP :: Instruction
DUP :: Instruction
SWAP :: Instruction
OVER :: Instruction
PRINT :: Instruction
PRINTALL :: Instruction
ADD :: Instruction
MUL :: Instruction
DIV :: Instruction
REM :: Instruction
SUB :: Instruction
NEG :: Instruction
ABS :: Instruction
CMP :: Instruction
DEFINE :: Instruction
COLON :: Instruction

-- | Call named user-defined word
CALL :: String -> Instruction
VARIABLE :: Instruction
ASSIGN :: Instruction
READ :: Instruction
INPUT :: Instruction
MARK :: Instruction
GETMARK :: String -> Instruction
GOTO :: Instruction
JZ :: Instruction
JNZ :: Instruction
JGT :: Instruction
JLT :: Instruction
JGE :: Instruction
JLE :: Instruction
ARRAY :: Instruction
READ_ARRAY :: Instruction
ASSIGN_ARRAY :: Instruction

-- | Word definition
data Definition
Definition :: Int -> Stack -> Definition

-- | VM state
data VMState
VMState :: Stack -> Stack -> Map String Definition -> Map Int StackItem -> Int -> Int -> Bool -> VMState

-- | current VM stack
vmStack :: VMState -> Stack

-- | current definition
vmCurrentDefinition :: VMState -> Stack

-- | already defined words
vmDefinitions :: VMState -> Map String Definition

-- | variables values
vmVariables :: VMState -> Map Int StackItem

-- | next variable number
vmNextVariable :: VMState -> Int

-- | program counter
vmPC :: VMState -> Int

-- | trace mode
vmTraceMode :: VMState -> Bool

-- | Starting VM state
emptyVMState :: VMState

-- | VM monad
type VM a = StateT VMState IO a
instance Typeable Instruction
instance Typeable StackItem
instance Typeable Code
instance Eq Instruction
instance Data Instruction
instance Eq StackItem
instance Data StackItem
instance Eq Code
instance Show Code
instance Data Code
instance Eq Definition
instance Show Definition
instance Eq VMState
instance Show VMState
instance Show Instruction
instance StackType DArray
instance StackType Instruction
instance StackType String
instance StackType Int
instance StackType Integer
instance Monoid Code
instance Show StackItem

module Language.SSVM.Parser
parseVM :: FilePath -> String -> Either ParseError Code
parseSourceFile :: FilePath -> IO (Either ParseError Code)
instance Eq ParserState
instance Show ParserState

module Language.SSVM.Operations

-- | Push value to the stack
push :: StackType a => a -> VM ()

-- | Push stack item to the stack
pushS :: StackItem -> VM ()

-- | Add item to current definition
pushD :: StackItem -> VM ()

-- | Drop stack head (a -- )
pop :: VM ()

-- | Duplicate stack head (a -- a a)
dup :: VM ()

-- | Swap two top items on the stack (a b -- b a)
swap :: VM ()

-- | (a b -- a b a)
over :: VM ()

-- | Print stack content
printStack :: VM ()

-- | Print current definition
printCurrentDef :: VM ()

-- | Print stack head (a -- )
printF :: VM ()
add :: VM ()
sub :: VM ()
neg :: VM ()
mul :: VM ()
divide :: VM ()
absF :: VM ()
remF :: VM ()
cmpF :: VM ()

-- | Define variable
variable :: VM ()

-- | Recall word definition
recall :: String -> VM Definition

-- | Assign value to variable (value variable-number -- )
assign :: VM ()

-- | Read variable value (variable-number -- value)
readVar :: VM ()

-- | Define word
define :: VM ()

-- | Allocate an array (size variable-number -- )
allocArray :: VM ()

-- | Read item from array. (array-or-variable-number index -- value)
readArray :: VM ()

-- | Assign value to array item. (value array-or-variable-number index -- )
assignArray :: VM ()

-- | Get PC from stack (pc -- )
goto :: VM ()

-- | Jump to given address if condition is satisfied
jumpIf :: (Integer -> Bool) -> VM ()

-- | Mark at current PC ( -- pc)
mark :: VM ()

-- | Get mark by name ( -- pc)
getMark :: [Marks] -> String -> VM ()

-- | Read value from stdin ( -- value)
input :: VM ()

-- | Increment PC
step :: VM ()

module Language.SSVM.Interpreter

-- | Interpret code
interpret :: Code -> VM ()

-- | Run VM
runVM :: VM () -> IO ()
runVM' :: VMState -> VM () -> IO ()

-- | Run VM in trace mode
traceVM :: VM () -> IO ()

module Language.SSVM.Binary

-- | Dump bytecode to file
dumpCode :: FilePath -> Code -> IO ()

-- | Load bytecode from file
loadCode :: FilePath -> IO Code
instance Eq BState
instance Show BState
instance BinaryState BState [StackItem]
instance BinaryState BState StackItem
instance BinaryState BState Instruction
