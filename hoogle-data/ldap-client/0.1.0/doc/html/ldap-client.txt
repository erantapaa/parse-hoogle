-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Pure Haskell LDAP Client Library
--   
@package ldap-client
@version 0.1.0

module Ldap.Asn1.Type

-- | Message envelope. (Section 4.1.1.)
data LdapMessage op
LdapMessage :: !Id -> !op -> !(Maybe Controls) -> LdapMessage op
ldapMessageId :: LdapMessage op -> !Id
ldapMessageOp :: LdapMessage op -> !op
ldapMessageControls :: LdapMessage op -> !(Maybe Controls)

-- | Every message being processed has a unique non-zero integer ID.
--   (Section 4.1.1.1.)
newtype Id
Id :: Int32 -> Id
unId :: Id -> Int32

-- | Client requests. The RFC doesn't make a difference between
--   <a>ProtocolClientOp</a> and <a>ProtocolServerOp</a> but it's useful to
--   distinguish between them in Haskell.
data ProtocolClientOp
BindRequest :: !Int8 -> !LdapDn -> !AuthenticationChoice -> ProtocolClientOp
UnbindRequest :: ProtocolClientOp
SearchRequest :: !LdapDn -> !Scope -> !DerefAliases -> !Int32 -> !Int32 -> !Bool -> !Filter -> !AttributeSelection -> ProtocolClientOp
ModifyRequest :: !LdapDn -> ![(Operation, PartialAttribute)] -> ProtocolClientOp
AddRequest :: !LdapDn -> !AttributeList -> ProtocolClientOp
DeleteRequest :: !LdapDn -> ProtocolClientOp
ModifyDnRequest :: !LdapDn -> !RelativeLdapDn -> !Bool -> !(Maybe LdapDn) -> ProtocolClientOp
CompareRequest :: !LdapDn -> !AttributeValueAssertion -> ProtocolClientOp
ExtendedRequest :: !LdapOid -> !(Maybe ByteString) -> ProtocolClientOp

-- | Server responses. The RFC doesn't make a difference between
--   <a>ProtocolClientOp</a> and <a>ProtocolServerOp</a> but it's useful to
--   distinguish between them in Haskell.
data ProtocolServerOp
BindResponse :: !LdapResult -> !(Maybe ByteString) -> ProtocolServerOp
SearchResultEntry :: !LdapDn -> !PartialAttributeList -> ProtocolServerOp
SearchResultReference :: !(NonEmpty Uri) -> ProtocolServerOp
SearchResultDone :: !(LdapResult) -> ProtocolServerOp
ModifyResponse :: !LdapResult -> ProtocolServerOp
AddResponse :: !LdapResult -> ProtocolServerOp
DeleteResponse :: !LdapResult -> ProtocolServerOp
ModifyDnResponse :: !LdapResult -> ProtocolServerOp
CompareResponse :: !LdapResult -> ProtocolServerOp
ExtendedResponse :: !LdapResult -> !(Maybe LdapOid) -> !(Maybe ByteString) -> ProtocolServerOp
IntermediateResponse :: !(Maybe LdapOid) -> !(Maybe ByteString) -> ProtocolServerOp

-- | Not really a choice until SASL is supported.
newtype AuthenticationChoice
Simple :: ByteString -> AuthenticationChoice

-- | Scope of the search to be performed.
data Scope

-- | Constrained to the entry named by baseObject.
BaseObject :: Scope

-- | Constrained to the immediate subordinates of the entry named by
--   baseObject.
SingleLevel :: Scope

-- | Constrained to the entry named by baseObject and to all its
--   subordinates.
WholeSubtree :: Scope

-- | An indicator as to whether or not alias entries (as defined in
--   [RFC4512]) are to be dereferenced during stages of the Search
--   operation.
data DerefAliases

-- | Do not dereference aliases in searching or in locating the base object
--   of the Search.
NeverDerefAliases :: DerefAliases

-- | While searching subordinates of the base object, dereference any alias
--   within the search scope.
DerefInSearching :: DerefAliases

-- | Dereference aliases in locating the base object of the Search.
DerefFindingBaseObject :: DerefAliases

-- | Dereference aliases both in searching and in locating the base object
--   of the Search.
DerefAlways :: DerefAliases

-- | Conditions that must be fulfilled in order for the Search to match a
--   given entry.
data Filter

-- | All filters evaluate to <tt>TRUE</tt>
And :: !(NonEmpty Filter) -> Filter

-- | Any filter evaluates to <tt>TRUE</tt>
Or :: !(NonEmpty Filter) -> Filter

-- | Filter evaluates to <tt>FALSE</tt>
Not :: Filter -> Filter

-- | <tt>EQUALITY</tt> rule returns <tt>TRUE</tt>
EqualityMatch :: AttributeValueAssertion -> Filter

-- | <tt>SUBSTR</tt> rule returns <tt>TRUE</tt>
Substrings :: SubstringFilter -> Filter

-- | <tt>ORDERING</tt> rule returns <tt>FALSE</tt>
GreaterOrEqual :: AttributeValueAssertion -> Filter

-- | <tt>ORDERING</tt> or <tt>EQUALITY</tt> rule returns <tt>TRUE</tt>
LessOrEqual :: AttributeValueAssertion -> Filter

-- | Attribute is present in the entry
Present :: AttributeDescription -> Filter

-- | Same as <a>EqualityMatch</a> for most servers
ApproxMatch :: AttributeValueAssertion -> Filter
ExtensibleMatch :: MatchingRuleAssertion -> Filter
data SubstringFilter
SubstringFilter :: !AttributeDescription -> !(NonEmpty Substring) -> SubstringFilter
data Substring
Initial :: !AssertionValue -> Substring
Any :: !AssertionValue -> Substring
Final :: !AssertionValue -> Substring
data MatchingRuleAssertion
MatchingRuleAssertion :: !(Maybe MatchingRuleId) -> !(Maybe AttributeDescription) -> !AssertionValue -> !Bool -> MatchingRuleAssertion

-- | Matching rules are defined in Section 4.1.3 of [RFC4512]. A matching
--   rule is identified in the protocol by the printable representation of
--   either its <a>numericoid</a> or one of its short name descriptors
--   [RFC4512], e.g., <tt>caseIgnoreMatch</tt> or '2.5.13.2'. (Section
--   4.1.8.)
newtype MatchingRuleId
MatchingRuleId :: LdapString -> MatchingRuleId
newtype AttributeSelection
AttributeSelection :: [LdapString] -> AttributeSelection
newtype AttributeList
AttributeList :: [Attribute] -> AttributeList
newtype PartialAttributeList
PartialAttributeList :: [PartialAttribute] -> PartialAttributeList
newtype Controls
Controls :: [Control] -> Controls
data Control
Control :: !LdapOid -> !Bool -> !(Maybe ByteString) -> Control
data LdapResult
LdapResult :: !ResultCode -> !LdapDn -> !LdapString -> !(Maybe ReferralUris) -> LdapResult

-- | LDAP operation's result.
data ResultCode
Success :: ResultCode
OperationError :: ResultCode
ProtocolError :: ResultCode
TimeLimitExceeded :: ResultCode
SizeLimitExceeded :: ResultCode
CompareFalse :: ResultCode
CompareTrue :: ResultCode
AuthMethodNotSupported :: ResultCode
StrongerAuthRequired :: ResultCode
Referral :: ResultCode
AdminLimitExceeded :: ResultCode
UnavailableCriticalExtension :: ResultCode
ConfidentialityRequired :: ResultCode
SaslBindInProgress :: ResultCode
NoSuchAttribute :: ResultCode
UndefinedAttributeType :: ResultCode
InappropriateMatching :: ResultCode
ConstraintViolation :: ResultCode
AttributeOrValueExists :: ResultCode
InvalidAttributeSyntax :: ResultCode
NoSuchObject :: ResultCode
AliasProblem :: ResultCode
InvalidDNSyntax :: ResultCode
AliasDereferencingProblem :: ResultCode
InappropriateAuthentication :: ResultCode
InvalidCredentials :: ResultCode
InsufficientAccessRights :: ResultCode
Busy :: ResultCode
Unavailable :: ResultCode
UnwillingToPerform :: ResultCode
LoopDetect :: ResultCode
NamingViolation :: ResultCode
ObjectClassViolation :: ResultCode
NotAllowedOnNonLeaf :: ResultCode
NotAllowedOnRDN :: ResultCode
EntryAlreadyExists :: ResultCode
ObjectClassModsProhibited :: ResultCode
AffectsMultipleDSAs :: ResultCode
Other :: ResultCode
newtype AttributeDescription
AttributeDescription :: LdapString -> AttributeDescription
newtype AttributeValue
AttributeValue :: ByteString -> AttributeValue
data AttributeValueAssertion
AttributeValueAssertion :: !AttributeDescription -> !AssertionValue -> AttributeValueAssertion
newtype AssertionValue
AssertionValue :: ByteString -> AssertionValue
data Attribute
Attribute :: !AttributeDescription -> !(NonEmpty AttributeValue) -> Attribute
data PartialAttribute
PartialAttribute :: !AttributeDescription -> ![AttributeValue] -> PartialAttribute

-- | An LDAPDN is defined to be the representation of a Distinguished Name
--   (DN) after encoding according to the specification in [RFC4514].
newtype LdapDn
LdapDn :: LdapString -> LdapDn

-- | A RelativeLDAPDN is defined to be the representation of a Relative
--   Distinguished Name (RDN) after encoding according to the specification
--   in [RFC4514].
newtype RelativeLdapDn
RelativeLdapDn :: LdapString -> RelativeLdapDn
newtype ReferralUris
ReferralUris :: (NonEmpty Uri) -> ReferralUris
newtype Uri
Uri :: LdapString -> Uri
data Operation
Add :: Operation
Delete :: Operation
Replace :: Operation

-- | The LDAPString is a notational convenience to indicate that, although
--   strings of LDAPString type encode as ASN.1 OCTET STRING types, the
--   [ISO10646] character set (a superset of [Unicode]) is used, encoded
--   following the UTF-8 [RFC3629] algorithm. (Section 4.1.2.)
newtype LdapString
LdapString :: Text -> LdapString

-- | The LDAPOID is a notational convenience to indicate that the permitted
--   value of this string is a (UTF-8 encoded) dotted-decimal
--   representation of an OBJECT IDENTIFIER. Although an LDAPOID is encoded
--   as an OCTET STRING, values are limited to the definition of
--   &lt;numericoid&gt; given in Section 1.4 of [RFC4512].
newtype LdapOid
LdapOid :: Text -> LdapOid
instance Show Id
instance Eq Id
instance Ord Id
instance Show AuthenticationChoice
instance Eq AuthenticationChoice
instance Show Scope
instance Eq Scope
instance Show DerefAliases
instance Eq DerefAliases
instance Show ResultCode
instance Eq ResultCode
instance Show AttributeValue
instance Eq AttributeValue
instance Show AssertionValue
instance Eq AssertionValue
instance Show Substring
instance Eq Substring
instance Show Operation
instance Eq Operation
instance Show LdapString
instance Eq LdapString
instance Show Uri
instance Eq Uri
instance Show ReferralUris
instance Eq ReferralUris
instance Show RelativeLdapDn
instance Eq RelativeLdapDn
instance Show LdapDn
instance Eq LdapDn
instance Show AttributeDescription
instance Eq AttributeDescription
instance Show PartialAttribute
instance Eq PartialAttribute
instance Show PartialAttributeList
instance Eq PartialAttributeList
instance Show Attribute
instance Eq Attribute
instance Show AttributeList
instance Eq AttributeList
instance Show AttributeValueAssertion
instance Eq AttributeValueAssertion
instance Show SubstringFilter
instance Eq SubstringFilter
instance Show LdapResult
instance Eq LdapResult
instance Show AttributeSelection
instance Eq AttributeSelection
instance Show MatchingRuleId
instance Eq MatchingRuleId
instance Show MatchingRuleAssertion
instance Eq MatchingRuleAssertion
instance Show Filter
instance Eq Filter
instance Show LdapOid
instance Eq LdapOid
instance Show Control
instance Eq Control
instance Show Controls
instance Eq Controls
instance Show op => Show (LdapMessage op)
instance Eq op => Eq (LdapMessage op)
instance Show ProtocolServerOp
instance Eq ProtocolServerOp
instance Show ProtocolClientOp
instance Eq ProtocolClientOp


-- | This module contains convertions from LDAP types to ASN.1.
--   
--   Various hacks are employed because "asn1-encoding" only encodes to
--   DER, but LDAP demands BER-encoding. So, when a definition looks
--   suspiciously different from the spec in the comment, that's why. I
--   hope all that will be fixed eventually.
module Ldap.Asn1.ToAsn1

-- | Convert a LDAP type to ASN.1.
--   
--   When it's relevant, instances include the part of RFC describing the
--   encoding.
class ToAsn1 a
toAsn1 :: ToAsn1 a => a -> Endo [ASN1]
instance ToAsn1 a => ToAsn1 (NonEmpty a)
instance ToAsn1 a => ToAsn1 [a]
instance ToAsn1 AttributeList
instance ToAsn1 MatchingRuleAssertion
instance ToAsn1 SubstringFilter
instance ToAsn1 Filter
instance ToAsn1 AttributeSelection
instance ToAsn1 AuthenticationChoice
instance ToAsn1 ProtocolClientOp
instance ToAsn1 Control
instance ToAsn1 Controls
instance ToAsn1 MatchingRuleId
instance ToAsn1 Attribute
instance ToAsn1 PartialAttribute
instance ToAsn1 AssertionValue
instance ToAsn1 AttributeValueAssertion
instance ToAsn1 AttributeValue
instance ToAsn1 AttributeDescription
instance ToAsn1 RelativeLdapDn
instance ToAsn1 LdapDn
instance ToAsn1 LdapOid
instance ToAsn1 LdapString
instance ToAsn1 Id
instance ToAsn1 op => ToAsn1 (LdapMessage op)

module Ldap.Client.Internal

-- | LDAP host.
data Host

-- | Plain LDAP. Do not use!
Plain :: String -> Host

-- | LDAP over TLS without the certificate validity check. Only use for
--   testing!
Insecure :: String -> Host

-- | LDAP over TLS. Use!
Secure :: String -> Host
data PortNumber :: *

-- | A token. All functions that interact with the Directory require one.
data Ldap
Ldap :: TQueue ClientMessage -> Ldap
client :: Ldap -> TQueue ClientMessage
data ClientMessage
New :: Request -> (TMVar (NonEmpty ProtocolServerOp)) -> ClientMessage

-- | LDAP operation's result.
data ResultCode
Success :: ResultCode
OperationError :: ResultCode
ProtocolError :: ResultCode
TimeLimitExceeded :: ResultCode
SizeLimitExceeded :: ResultCode
CompareFalse :: ResultCode
CompareTrue :: ResultCode
AuthMethodNotSupported :: ResultCode
StrongerAuthRequired :: ResultCode
Referral :: ResultCode
AdminLimitExceeded :: ResultCode
UnavailableCriticalExtension :: ResultCode
ConfidentialityRequired :: ResultCode
SaslBindInProgress :: ResultCode
NoSuchAttribute :: ResultCode
UndefinedAttributeType :: ResultCode
InappropriateMatching :: ResultCode
ConstraintViolation :: ResultCode
AttributeOrValueExists :: ResultCode
InvalidAttributeSyntax :: ResultCode
NoSuchObject :: ResultCode
AliasProblem :: ResultCode
InvalidDNSyntax :: ResultCode
AliasDereferencingProblem :: ResultCode
InappropriateAuthentication :: ResultCode
InvalidCredentials :: ResultCode
InsufficientAccessRights :: ResultCode
Busy :: ResultCode
Unavailable :: ResultCode
UnwillingToPerform :: ResultCode
LoopDetect :: ResultCode
NamingViolation :: ResultCode
ObjectClassViolation :: ResultCode
NotAllowedOnNonLeaf :: ResultCode
NotAllowedOnRDN :: ResultCode
EntryAlreadyExists :: ResultCode
ObjectClassModsProhibited :: ResultCode
AffectsMultipleDSAs :: ResultCode
Other :: ResultCode

-- | Asynchronous LDAP operation. Use <a>wait</a> or <a>waitSTM</a> to wait
--   for its completion.
data Async a

-- | List of attributes and their values. <tt>f</tt> is the structure these
--   values are in, e.g. <a>NonEmpty</a>.
type AttrList f = [(Attr, f AttrValue)]

-- | Wait for operation completion.
wait :: Async a -> IO (Either ResponseError a)

-- | Wait for operation completion inside <a>STM</a>.
--   
--   Do not use this inside the same <a>STM</a> transaction the operation
--   was requested in! To give LDAP the chance to respond to it that
--   transaction should commit. After that, applying <a>waitSTM</a> to the
--   corresponding <a>Async</a> starts to make sense.
waitSTM :: Async a -> STM (Either ResponseError a)
type Response = NonEmpty InMessage

-- | Response indicates a failed operation.
data ResponseError

-- | LDAP server did not follow the protocol, so <tt>ldap-client</tt>
--   couldn't make sense of the response.
ResponseInvalid :: Request -> Response -> ResponseError

-- | The response contains a result code indicating failure and an error
--   message.
ResponseErrorCode :: Request -> ResultCode -> Dn -> Text -> ResponseError
type Request = ProtocolClientOp
raise :: Exception e => Either e a -> IO a
sendRequest :: Ldap -> (Response -> Either ResponseError a) -> Request -> STM (Async a)

-- | Unique identifier of an LDAP entry.
newtype Dn
Dn :: Text -> Dn

-- | Attribute name.
newtype Attr
Attr :: Text -> Attr

-- | Attribute value.
type AttrValue = ByteString
unAttr :: Attr -> Text

-- | Terminate the connection to the Directory.
--   
--   Note that <a>unbindAsync</a> does not return an <a>Async</a>, because
--   LDAP server never responds to <tt>UnbindRequest</tt>s, hence a call to
--   <a>wait</a> on a hypothetical <a>Async</a> would have resulted in an
--   exception anyway.
unbindAsync :: Ldap -> IO ()

-- | Terminate the connection to the Directory.
--   
--   Note that <a>unbindAsyncSTM</a> does not return an <a>Async</a>,
--   because LDAP server never responds to <tt>UnbindRequest</tt>s, hence a
--   call to <a>wait</a> on a hypothetical <a>Async</a> would have resulted
--   in an exception anyway.
unbindAsyncSTM :: Ldap -> STM ()
instance Typeable ResponseError
instance Show Host
instance Eq Host
instance Ord Host
instance Eq Ldap
instance Show Dn
instance Eq Dn
instance Show ResponseError
instance Eq ResponseError
instance Show Attr
instance Eq Attr
instance Exception ResponseError
instance Functor Async


-- | <a>Bind</a> operation.
--   
--   This operation comes in four flavours:
--   
--   <ul>
--   <li>synchronous, exception throwing (<a>bind</a>)</li>
--   <li>synchronous, returning <a>Either</a> <a>ResponseError</a>
--   <tt>()</tt> (<a>bindEither</a>)</li>
--   <li>asynchronous, <a>IO</a> based (<a>bindAsync</a>)</li>
--   <li>asynchronous, <a>STM</a> based (<a>bindAsyncSTM</a>)</li>
--   </ul>
--   
--   Of those, the first one (<a>bind</a>) is probably the most useful for
--   the typical usecase.
module Ldap.Client.Bind

-- | User's password.
newtype Password
Password :: ByteString -> Password

-- | Perform the Bind operation synchronously. Raises <a>ResponseError</a>
--   on failures.
bind :: Ldap -> Dn -> Password -> IO ()

-- | Perform the Bind operation synchronously. Returns <tt>Left e</tt>
--   where <tt>e</tt> is a <a>ResponseError</a> on failures.
bindEither :: Ldap -> Dn -> Password -> IO (Either ResponseError ())

-- | Perform the Bind operation asynchronously. Call <a>wait</a> to wait
--   for its completion.
bindAsync :: Ldap -> Dn -> Password -> IO (Async ())

-- | Perform the Bind operation asynchronously.
--   
--   Don't wait for its completion (with <a>waitSTM</a>) in the same
--   transaction you've performed it in.
bindAsyncSTM :: Ldap -> Dn -> Password -> STM (Async ())

-- | Asynchronous LDAP operation. Use <a>wait</a> or <a>waitSTM</a> to wait
--   for its completion.
data Async a

-- | Wait for operation completion.
wait :: Async a -> IO (Either ResponseError a)

-- | Wait for operation completion inside <a>STM</a>.
--   
--   Do not use this inside the same <a>STM</a> transaction the operation
--   was requested in! To give LDAP the chance to respond to it that
--   transaction should commit. After that, applying <a>waitSTM</a> to the
--   corresponding <a>Async</a> starts to make sense.
waitSTM :: Async a -> STM (Either ResponseError a)
instance Show Password
instance Eq Password


-- | <a>Search</a> operation.
--   
--   This operation comes in four flavours:
--   
--   <ul>
--   <li>synchronous, exception throwing (<a>search</a>)</li>
--   <li>synchronous, returning <a>Either</a> <a>ResponseError</a>
--   <tt>()</tt> (<a>searchEither</a>)</li>
--   <li>asynchronous, <a>IO</a> based (<a>searchAsync</a>)</li>
--   <li>asynchronous, <a>STM</a> based (<a>searchAsyncSTM</a>)</li>
--   </ul>
--   
--   Of those, the first one (<a>search</a>) is probably the most useful
--   for the typical usecase.
module Ldap.Client.Search

-- | Perform the Search operation synchronously. Raises
--   <a>ResponseError</a> on failures.
search :: Ldap -> Dn -> Mod Search -> Filter -> [Attr] -> IO [SearchEntry]

-- | Perform the Search operation synchronously. Returns <tt>Left e</tt>
--   where <tt>e</tt> is a <a>ResponseError</a> on failures.
searchEither :: Ldap -> Dn -> Mod Search -> Filter -> [Attr] -> IO (Either ResponseError [SearchEntry])

-- | Perform the Search operation asynchronously. Call <a>wait</a> to wait
--   for its completion.
searchAsync :: Ldap -> Dn -> Mod Search -> Filter -> [Attr] -> IO (Async [SearchEntry])

-- | Perform the Search operation asynchronously.
--   
--   Don't wait for its completion (with <a>waitSTM</a>) in the same
--   transaction you've performed it in.
searchAsyncSTM :: Ldap -> Dn -> Mod Search -> Filter -> [Attr] -> STM (Async [SearchEntry])

-- | Search options. Use <a>Mod</a> to change some of those.
data Search

-- | Search modifier. Combine using <a>Semigroup</a> and/or <a>Monoid</a>
--   instance.
data Mod a

-- | Scope of the search to be performed.
data Scope

-- | Constrained to the entry named by baseObject.
BaseObject :: Scope

-- | Constrained to the immediate subordinates of the entry named by
--   baseObject.
SingleLevel :: Scope

-- | Constrained to the entry named by baseObject and to all its
--   subordinates.
WholeSubtree :: Scope

-- | Scope of the search (default: <tt>WholeSubtree</tt>).
scope :: Scope -> Mod Search

-- | Maximum number of entries to be returned as a result of the Search. No
--   limit if the value is <tt>0</tt> (default: <tt>0</tt>).
size :: Int32 -> Mod Search

-- | Maximum time (in seconds) allowed for the Search. No limit if the
--   value is <tt>0</tt> (default: <tt>0</tt>).
time :: Int32 -> Mod Search

-- | Whether Search results are to contain just attribute descriptions, or
--   both attribute descriptions and values (default: <a>False</a>).
typesOnly :: Bool -> Mod Search

-- | An indicator as to whether or not alias entries (as defined in
--   [RFC4512]) are to be dereferenced during stages of the Search
--   operation.
data DerefAliases

-- | Do not dereference aliases in searching or in locating the base object
--   of the Search.
NeverDerefAliases :: DerefAliases

-- | While searching subordinates of the base object, dereference any alias
--   within the search scope.
DerefInSearching :: DerefAliases

-- | Dereference aliases in locating the base object of the Search.
DerefFindingBaseObject :: DerefAliases

-- | Dereference aliases both in searching and in locating the base object
--   of the Search.
DerefAlways :: DerefAliases

-- | Alias dereference policy (default: <tt>NeverDerefAliases</tt>).
derefAliases :: DerefAliases -> Mod Search

-- | Conditions that must be fulfilled in order for the Search to match a
--   given entry.
data Filter

-- | Filter does not match the entry
Not :: !Filter -> Filter

-- | All filters match the entry
And :: !(NonEmpty Filter) -> Filter

-- | Any filter matches the entry
Or :: !(NonEmpty Filter) -> Filter

-- | Attribute is present in the entry
Present :: !Attr -> Filter

-- | Attribute's value is equal to the assertion
(:=) :: !Attr -> !AttrValue -> Filter

-- | Attribute's value is equal to or greater than the assertion
(:>=) :: !Attr -> !AttrValue -> Filter

-- | Attribute's value is equal to or less than the assertion
(:<=) :: !Attr -> !AttrValue -> Filter

-- | Attribute's value approximately matches the assertion
(:~=) :: !Attr -> !AttrValue -> Filter

-- | Glob match
(:=*) :: !Attr -> !(Maybe AttrValue, [AttrValue], Maybe AttrValue) -> Filter

-- | Extensible match
(::=) :: (Maybe Attr, Maybe Attr, Bool) -> AttrValue -> Filter

-- | Entry found during the Search.
data SearchEntry
SearchEntry :: !Dn -> !(AttrList []) -> SearchEntry

-- | Asynchronous LDAP operation. Use <a>wait</a> or <a>waitSTM</a> to wait
--   for its completion.
data Async a

-- | Wait for operation completion.
wait :: Async a -> IO (Either ResponseError a)

-- | Wait for operation completion inside <a>STM</a>.
--   
--   Do not use this inside the same <a>STM</a> transaction the operation
--   was requested in! To give LDAP the chance to respond to it that
--   transaction should commit. After that, applying <a>waitSTM</a> to the
--   corresponding <a>Async</a> starts to make sense.
waitSTM :: Async a -> STM (Either ResponseError a)
instance Show Search
instance Eq Search
instance Show SearchEntry
instance Eq SearchEntry
instance Monoid (Mod a)
instance Semigroup (Mod a)


-- | <a>Modify</a> and <a>Modify DN</a> operations.
--   
--   These operations come in four flavours:
--   
--   <ul>
--   <li>synchronous, exception throwing (<a>modify</a> /
--   <a>modifyDn</a>)</li>
--   <li>synchronous, returning <a>Either</a> <a>ResponseError</a>
--   <tt>()</tt> (<a>modifyEither</a> / <a>modifyDnEither</a>)</li>
--   <li>asynchronous, <a>IO</a> based (<a>modifyAsync</a> /
--   <a>modifyDnAsync</a>)</li>
--   <li>asynchronous, <a>STM</a> based (<a>modifyAsyncSTM</a> /
--   <a>modifyDnAsyncSTM</a>)</li>
--   </ul>
--   
--   Of those, the first one (<a>modify</a> / <a>modifyDn</a>) is probably
--   the most useful for the typical usecase.
module Ldap.Client.Modify

-- | Type of modification being performed.
data Operation

-- | Delete values from the attribute. Deletes the attribute if the list is
--   empty or all current values are listed.
Delete :: Attr -> [AttrValue] -> Operation

-- | Add values to the attribute, creating it if necessary.
Add :: Attr -> [AttrValue] -> Operation

-- | Replace all existing values of the attribute with the new list.
--   Deletes the attribute if the list is empty.
Replace :: Attr -> [AttrValue] -> Operation

-- | Perform the Modify operation synchronously. Raises
--   <a>ResponseError</a> on failures.
modify :: Ldap -> Dn -> [Operation] -> IO ()

-- | Perform the Modify operation synchronously. Returns <tt>Left e</tt>
--   where <tt>e</tt> is a <a>ResponseError</a> on failures.
modifyEither :: Ldap -> Dn -> [Operation] -> IO (Either ResponseError ())

-- | Perform the Modify operation asynchronously. Call <a>wait</a> to wait
--   for its completion.
modifyAsync :: Ldap -> Dn -> [Operation] -> IO (Async ())

-- | Perform the Modify operation asynchronously.
--   
--   Don't wait for its completion (with <a>waitSTM</a>) in the same
--   transaction you've performed it in.
modifyAsyncSTM :: Ldap -> Dn -> [Operation] -> STM (Async ())

-- | A component of <a>Dn</a>.
newtype RelativeDn
RelativeDn :: Text -> RelativeDn

-- | Perform the Modify DN operation synchronously. Raises
--   <a>ResponseError</a> on failures.
modifyDn :: Ldap -> Dn -> RelativeDn -> Bool -> Maybe Dn -> IO ()

-- | Perform the Modify DN operation synchronously. Returns <tt>Left e</tt>
--   where <tt>e</tt> is a <a>ResponseError</a> on failures.
modifyDnEither :: Ldap -> Dn -> RelativeDn -> Bool -> Maybe Dn -> IO (Either ResponseError ())

-- | Perform the Modify DN operation asynchronously. Call <a>wait</a> to
--   wait for its completion.
modifyDnAsync :: Ldap -> Dn -> RelativeDn -> Bool -> Maybe Dn -> IO (Async ())

-- | Perform the Modify DN operation asynchronously.
--   
--   Don't wait for its completion (with <a>waitSTM</a>) in the same
--   transaction you've performed it in.
modifyDnAsyncSTM :: Ldap -> Dn -> RelativeDn -> Bool -> Maybe Dn -> STM (Async ())

-- | Asynchronous LDAP operation. Use <a>wait</a> or <a>waitSTM</a> to wait
--   for its completion.
data Async a

-- | Wait for operation completion.
wait :: Async a -> IO (Either ResponseError a)

-- | Wait for operation completion inside <a>STM</a>.
--   
--   Do not use this inside the same <a>STM</a> transaction the operation
--   was requested in! To give LDAP the chance to respond to it that
--   transaction should commit. After that, applying <a>waitSTM</a> to the
--   corresponding <a>Async</a> starts to make sense.
waitSTM :: Async a -> STM (Either ResponseError a)
instance Show Operation
instance Eq Operation
instance Show RelativeDn
instance Eq RelativeDn


-- | <a>Add</a> operation.
--   
--   This operation comes in four flavours:
--   
--   <ul>
--   <li>synchronous, exception throwing (<a>add</a>)</li>
--   <li>synchronous, returning <a>Either</a> <a>ResponseError</a>
--   <tt>()</tt> (<a>addEither</a>)</li>
--   <li>asynchronous, <a>IO</a> based (<a>addAsync</a>)</li>
--   <li>asynchronous, <a>STM</a> based (<a>addAsyncSTM</a>)</li>
--   </ul>
--   
--   Of those, the first one (<a>add</a>) is probably the most useful for
--   the typical usecase.
module Ldap.Client.Add

-- | Perform the Add operation synchronously. Raises <a>ResponseError</a>
--   on failures.
add :: Ldap -> Dn -> AttrList NonEmpty -> IO ()

-- | Perform the Add operation synchronously. Returns <tt>Left e</tt> where
--   <tt>e</tt> is a <a>ResponseError</a> on failures.
addEither :: Ldap -> Dn -> AttrList NonEmpty -> IO (Either ResponseError ())

-- | Perform the Add operation asynchronously. Call <a>wait</a> to wait for
--   its completion.
addAsync :: Ldap -> Dn -> AttrList NonEmpty -> IO (Async ())

-- | Perform the Add operation asynchronously.
--   
--   Don't wait for its completion (with <a>waitSTM</a>) in the same
--   transaction you've performed it in.
addAsyncSTM :: Ldap -> Dn -> AttrList NonEmpty -> STM (Async ())

-- | Asynchronous LDAP operation. Use <a>wait</a> or <a>waitSTM</a> to wait
--   for its completion.
data Async a

-- | Wait for operation completion.
wait :: Async a -> IO (Either ResponseError a)

-- | Wait for operation completion inside <a>STM</a>.
--   
--   Do not use this inside the same <a>STM</a> transaction the operation
--   was requested in! To give LDAP the chance to respond to it that
--   transaction should commit. After that, applying <a>waitSTM</a> to the
--   corresponding <a>Async</a> starts to make sense.
waitSTM :: Async a -> STM (Either ResponseError a)


-- | <a>Delete</a> operation.
--   
--   This operation comes in four flavours:
--   
--   <ul>
--   <li>synchronous, exception throwing (<a>delete</a>)</li>
--   <li>synchronous, returning <a>Either</a> <a>ResponseError</a>
--   <tt>()</tt> (<a>deleteEither</a>)</li>
--   <li>asynchronous, <a>IO</a> based (<a>deleteAsync</a>)</li>
--   <li>asynchronous, <a>STM</a> based (<a>deleteAsyncSTM</a>)</li>
--   </ul>
--   
--   Of those, the first one (<a>delete</a>) is probably the most useful
--   for the typical usecase.
module Ldap.Client.Delete

-- | Perform the Delete operation synchronously. Raises
--   <a>ResponseError</a> on failures.
delete :: Ldap -> Dn -> IO ()

-- | Perform the Delete operation synchronously. Returns <tt>Left e</tt>
--   where <tt>e</tt> is a <a>ResponseError</a> on failures.
deleteEither :: Ldap -> Dn -> IO (Either ResponseError ())

-- | Perform the Delete operation asynchronously. Call <a>wait</a> to wait
--   for its completion.
deleteAsync :: Ldap -> Dn -> IO (Async ())

-- | Perform the Delete operation asynchronously.
--   
--   Don't wait for its completion (with <a>waitSTM</a>) in the same
--   transaction you've performed it in.
deleteAsyncSTM :: Ldap -> Dn -> STM (Async ())

-- | Asynchronous LDAP operation. Use <a>wait</a> or <a>waitSTM</a> to wait
--   for its completion.
data Async a

-- | Wait for operation completion.
wait :: Async a -> IO (Either ResponseError a)

-- | Wait for operation completion inside <a>STM</a>.
--   
--   Do not use this inside the same <a>STM</a> transaction the operation
--   was requested in! To give LDAP the chance to respond to it that
--   transaction should commit. After that, applying <a>waitSTM</a> to the
--   corresponding <a>Async</a> starts to make sense.
waitSTM :: Async a -> STM (Either ResponseError a)


-- | <a>Compare</a> operation.
--   
--   This operation comes in four flavours:
--   
--   <ul>
--   <li>synchronous, exception throwing (<a>compare</a>)</li>
--   <li>synchronous, returning <a>Either</a> <a>ResponseError</a>
--   <tt>()</tt> (<a>compareEither</a>)</li>
--   <li>asynchronous, <a>IO</a> based (<a>compareAsync</a>)</li>
--   <li>asynchronous, <a>STM</a> based (<a>compareAsyncSTM</a>)</li>
--   </ul>
--   
--   Of those, the first one (<a>compare</a>) is probably the most useful
--   for the typical usecase.
module Ldap.Client.Compare

-- | Perform the Compare operation synchronously. Raises
--   <a>ResponseError</a> on failures.
compare :: Ldap -> Dn -> Attr -> AttrValue -> IO Bool

-- | Perform the Compare operation synchronously. Returns <tt>Left e</tt>
--   where <tt>e</tt> is a <a>ResponseError</a> on failures.
compareEither :: Ldap -> Dn -> Attr -> AttrValue -> IO (Either ResponseError Bool)

-- | Perform the Compare operation asynchronously. Call <a>wait</a> to wait
--   for its completion.
compareAsync :: Ldap -> Dn -> Attr -> AttrValue -> IO (Async Bool)

-- | Perform the Compare operation asynchronously.
--   
--   Don't wait for its completion (with <a>waitSTM</a>) in the same
--   transaction you've performed it in.
compareAsyncSTM :: Ldap -> Dn -> Attr -> AttrValue -> STM (Async Bool)

-- | Asynchronous LDAP operation. Use <a>wait</a> or <a>waitSTM</a> to wait
--   for its completion.
data Async a

-- | Wait for operation completion.
wait :: Async a -> IO (Either ResponseError a)

-- | Wait for operation completion inside <a>STM</a>.
--   
--   Do not use this inside the same <a>STM</a> transaction the operation
--   was requested in! To give LDAP the chance to respond to it that
--   transaction should commit. After that, applying <a>waitSTM</a> to the
--   corresponding <a>Async</a> starts to make sense.
waitSTM :: Async a -> STM (Either ResponseError a)


-- | <a>Extended</a> operation.
--   
--   This operation comes in four flavours:
--   
--   <ul>
--   <li>synchronous, exception throwing (<a>extended</a>)</li>
--   <li>synchronous, returning <a>Either</a> <a>ResponseError</a>
--   <tt>()</tt> (<a>extendedEither</a>)</li>
--   <li>asynchronous, <a>IO</a> based (<a>extendedAsync</a>)</li>
--   <li>asynchronous, <a>STM</a> based (<a>extendedAsyncSTM</a>)</li>
--   </ul>
--   
--   Of those, the first one (<a>extended</a>) is probably the most useful
--   for the typical usecase.
module Ldap.Client.Extended

-- | Globally unique LDAP object identifier.
newtype Oid
Oid :: Text -> Oid

-- | Perform the Extended operation synchronously. Raises
--   <a>ResponseError</a> on failures.
extended :: Ldap -> Oid -> Maybe ByteString -> IO ()

-- | Perform the Extended operation synchronously. Returns <tt>Left e</tt>
--   where <tt>e</tt> is a <a>ResponseError</a> on failures.
extendedEither :: Ldap -> Oid -> Maybe ByteString -> IO (Either ResponseError ())

-- | Perform the Extended operation asynchronously. Call <a>wait</a> to
--   wait for its completion.
extendedAsync :: Ldap -> Oid -> Maybe ByteString -> IO (Async ())

-- | Perform the Extended operation asynchronously.
--   
--   Don't wait for its completion (with <a>waitSTM</a>) in the same
--   transaction you've performed it in.
extendedAsyncSTM :: Ldap -> Oid -> Maybe ByteString -> STM (Async ())

-- | An example of <tt>Extended Operation</tt>, cf. <a>extended</a>.
startTls :: Ldap -> IO ()

-- | An example of <tt>Extended Operation</tt>, cf. <a>extendedEither</a>.
startTlsEither :: Ldap -> IO (Either ResponseError ())

-- | An example of <tt>Extended Operation</tt>, cf. <a>extendedAsync</a>.
startTlsAsync :: Ldap -> IO (Async ())

-- | An example of <tt>Extended Operation</tt>, cf.
--   <a>extendedAsyncSTM</a>.
startTlsAsyncSTM :: Ldap -> STM (Async ())

-- | Asynchronous LDAP operation. Use <a>wait</a> or <a>waitSTM</a> to wait
--   for its completion.
data Async a

-- | Wait for operation completion.
wait :: Async a -> IO (Either ResponseError a)

-- | Wait for operation completion inside <a>STM</a>.
--   
--   Do not use this inside the same <a>STM</a> transaction the operation
--   was requested in! To give LDAP the chance to respond to it that
--   transaction should commit. After that, applying <a>waitSTM</a> to the
--   corresponding <a>Async</a> starts to make sense.
waitSTM :: Async a -> STM (Either ResponseError a)
instance Show Oid
instance Eq Oid


-- | This module contains convertions from ASN.1 to LDAP types.
module Ldap.Asn1.FromAsn1

-- | Convert a part of ASN.1 stream to a LDAP type returning the remainder
--   of the stream.
parseAsn1 :: FromAsn1 a => [ASN1] -> Maybe ([ASN1], a)

-- | ASN.1 stream parsers.
--   
--   When it's relevant, instances include the part of RFC describing the
--   encoding.
class FromAsn1 a
instance MonadPlus (Parser s)
instance Monad (Parser s)
instance Alternative (Parser s)
instance Applicative (Parser s)
instance Functor (Parser s)
instance (FromAsn1 a, FromAsn1 b) => FromAsn1 (a, b)
instance FromAsn1 PartialAttributeList
instance FromAsn1 ProtocolServerOp
instance FromAsn1 Uri
instance FromAsn1 ReferralUris
instance FromAsn1 LdapResult
instance FromAsn1 PartialAttribute
instance FromAsn1 AttributeValue
instance FromAsn1 AttributeDescription
instance FromAsn1 LdapDn
instance FromAsn1 LdapOid
instance FromAsn1 LdapString
instance FromAsn1 Id
instance FromAsn1 op => FromAsn1 (LdapMessage op)


-- | This module is intended to be imported qualified
--   
--   <pre>
--   import qualified Ldap.Client as Ldap
--   </pre>
module Ldap.Client

-- | The entrypoint into LDAP.
--   
--   It catches all LDAP-related exceptions.
with :: Host -> PortNumber -> (Ldap -> IO a) -> IO (Either LdapError a)

-- | LDAP host.
data Host

-- | Plain LDAP. Do not use!
Plain :: String -> Host

-- | LDAP over TLS without the certificate validity check. Only use for
--   testing!
Insecure :: String -> Host

-- | LDAP over TLS. Use!
Secure :: String -> Host
data PortNumber :: *

-- | A token. All functions that interact with the Directory require one.
data Ldap

-- | Various failures that can happen when working with LDAP.
data LdapError

-- | Network failure.
IOError :: IOError -> LdapError

-- | Invalid ASN.1 data received from the server.
ParseError :: ASN1Error -> LdapError

-- | An LDAP operation failed.
ResponseError :: ResponseError -> LdapError

-- | Notice of Disconnection has been received.
DisconnectError :: Disconnect -> LdapError

-- | Response indicates a failed operation.
data ResponseError

-- | LDAP server did not follow the protocol, so <tt>ldap-client</tt>
--   couldn't make sense of the response.
ResponseInvalid :: Request -> Response -> ResponseError

-- | The response contains a result code indicating failure and an error
--   message.
ResponseErrorCode :: Request -> ResultCode -> Dn -> Text -> ResponseError

-- | LDAP operation's result.
data ResultCode
Success :: ResultCode
OperationError :: ResultCode
ProtocolError :: ResultCode
TimeLimitExceeded :: ResultCode
SizeLimitExceeded :: ResultCode
CompareFalse :: ResultCode
CompareTrue :: ResultCode
AuthMethodNotSupported :: ResultCode
StrongerAuthRequired :: ResultCode
Referral :: ResultCode
AdminLimitExceeded :: ResultCode
UnavailableCriticalExtension :: ResultCode
ConfidentialityRequired :: ResultCode
SaslBindInProgress :: ResultCode
NoSuchAttribute :: ResultCode
UndefinedAttributeType :: ResultCode
InappropriateMatching :: ResultCode
ConstraintViolation :: ResultCode
AttributeOrValueExists :: ResultCode
InvalidAttributeSyntax :: ResultCode
NoSuchObject :: ResultCode
AliasProblem :: ResultCode
InvalidDNSyntax :: ResultCode
AliasDereferencingProblem :: ResultCode
InappropriateAuthentication :: ResultCode
InvalidCredentials :: ResultCode
InsufficientAccessRights :: ResultCode
Busy :: ResultCode
Unavailable :: ResultCode
UnwillingToPerform :: ResultCode
LoopDetect :: ResultCode
NamingViolation :: ResultCode
ObjectClassViolation :: ResultCode
NotAllowedOnNonLeaf :: ResultCode
NotAllowedOnRDN :: ResultCode
EntryAlreadyExists :: ResultCode
ObjectClassModsProhibited :: ResultCode
AffectsMultipleDSAs :: ResultCode
Other :: ResultCode

-- | User's password.
newtype Password
Password :: ByteString -> Password

-- | Perform the Bind operation synchronously. Raises <a>ResponseError</a>
--   on failures.
bind :: Ldap -> Dn -> Password -> IO ()

-- | Perform the Search operation synchronously. Raises
--   <a>ResponseError</a> on failures.
search :: Ldap -> Dn -> Mod Search -> Filter -> [Attr] -> IO [SearchEntry]

-- | Entry found during the Search.
data SearchEntry
SearchEntry :: !Dn -> !(AttrList []) -> SearchEntry

-- | Search options. Use <a>Mod</a> to change some of those.
data Search

-- | Search modifier. Combine using <a>Semigroup</a> and/or <a>Monoid</a>
--   instance.
data Mod a

-- | Scope of the search to be performed.
data Scope

-- | Constrained to the entry named by baseObject.
BaseObject :: Scope

-- | Constrained to the immediate subordinates of the entry named by
--   baseObject.
SingleLevel :: Scope

-- | Constrained to the entry named by baseObject and to all its
--   subordinates.
WholeSubtree :: Scope

-- | Scope of the search (default: <tt>WholeSubtree</tt>).
scope :: Scope -> Mod Search

-- | Maximum number of entries to be returned as a result of the Search. No
--   limit if the value is <tt>0</tt> (default: <tt>0</tt>).
size :: Int32 -> Mod Search

-- | Maximum time (in seconds) allowed for the Search. No limit if the
--   value is <tt>0</tt> (default: <tt>0</tt>).
time :: Int32 -> Mod Search

-- | Whether Search results are to contain just attribute descriptions, or
--   both attribute descriptions and values (default: <a>False</a>).
typesOnly :: Bool -> Mod Search

-- | An indicator as to whether or not alias entries (as defined in
--   [RFC4512]) are to be dereferenced during stages of the Search
--   operation.
data DerefAliases

-- | Do not dereference aliases in searching or in locating the base object
--   of the Search.
NeverDerefAliases :: DerefAliases

-- | While searching subordinates of the base object, dereference any alias
--   within the search scope.
DerefInSearching :: DerefAliases

-- | Dereference aliases in locating the base object of the Search.
DerefFindingBaseObject :: DerefAliases

-- | Dereference aliases both in searching and in locating the base object
--   of the Search.
DerefAlways :: DerefAliases

-- | Alias dereference policy (default: <tt>NeverDerefAliases</tt>).
derefAliases :: DerefAliases -> Mod Search

-- | Conditions that must be fulfilled in order for the Search to match a
--   given entry.
data Filter

-- | Filter does not match the entry
Not :: !Filter -> Filter

-- | All filters match the entry
And :: !(NonEmpty Filter) -> Filter

-- | Any filter matches the entry
Or :: !(NonEmpty Filter) -> Filter

-- | Attribute is present in the entry
Present :: !Attr -> Filter

-- | Attribute's value is equal to the assertion
(:=) :: !Attr -> !AttrValue -> Filter

-- | Attribute's value is equal to or greater than the assertion
(:>=) :: !Attr -> !AttrValue -> Filter

-- | Attribute's value is equal to or less than the assertion
(:<=) :: !Attr -> !AttrValue -> Filter

-- | Attribute's value approximately matches the assertion
(:~=) :: !Attr -> !AttrValue -> Filter

-- | Glob match
(:=*) :: !Attr -> !(Maybe AttrValue, [AttrValue], Maybe AttrValue) -> Filter

-- | Extensible match
(::=) :: (Maybe Attr, Maybe Attr, Bool) -> AttrValue -> Filter

-- | Perform the Modify operation synchronously. Raises
--   <a>ResponseError</a> on failures.
modify :: Ldap -> Dn -> [Operation] -> IO ()

-- | Type of modification being performed.
data Operation

-- | Delete values from the attribute. Deletes the attribute if the list is
--   empty or all current values are listed.
Delete :: Attr -> [AttrValue] -> Operation

-- | Add values to the attribute, creating it if necessary.
Add :: Attr -> [AttrValue] -> Operation

-- | Replace all existing values of the attribute with the new list.
--   Deletes the attribute if the list is empty.
Replace :: Attr -> [AttrValue] -> Operation

-- | Perform the Add operation synchronously. Raises <a>ResponseError</a>
--   on failures.
add :: Ldap -> Dn -> AttrList NonEmpty -> IO ()

-- | Perform the Delete operation synchronously. Raises
--   <a>ResponseError</a> on failures.
delete :: Ldap -> Dn -> IO ()

-- | A component of <a>Dn</a>.
newtype RelativeDn
RelativeDn :: Text -> RelativeDn

-- | Perform the Modify DN operation synchronously. Raises
--   <a>ResponseError</a> on failures.
modifyDn :: Ldap -> Dn -> RelativeDn -> Bool -> Maybe Dn -> IO ()

-- | Perform the Compare operation synchronously. Raises
--   <a>ResponseError</a> on failures.
compare :: Ldap -> Dn -> Attr -> AttrValue -> IO Bool

-- | Globally unique LDAP object identifier.
newtype Oid
Oid :: Text -> Oid

-- | Perform the Extended operation synchronously. Raises
--   <a>ResponseError</a> on failures.
extended :: Ldap -> Oid -> Maybe ByteString -> IO ()

-- | Unique identifier of an LDAP entry.
newtype Dn
Dn :: Text -> Dn

-- | Attribute name.
newtype Attr
Attr :: Text -> Attr

-- | Attribute value.
type AttrValue = ByteString

-- | List of attributes and their values. <tt>f</tt> is the structure these
--   values are in, e.g. <a>NonEmpty</a>.
type AttrList f = [(Attr, f AttrValue)]
data NonEmpty a :: * -> *
instance Typeable WrappedIOError
instance Typeable Disconnect
instance Show WrappedIOError
instance Eq WrappedIOError
instance Show Disconnect
instance Eq Disconnect
instance Show LdapError
instance Eq LdapError
instance Exception Disconnect
instance Exception WrappedIOError
