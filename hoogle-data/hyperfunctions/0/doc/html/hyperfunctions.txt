-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Hyperfunctions
--   
@package hyperfunctions
@version 0


-- | Hyperfunctions as an explicit nu form, but using a representable
--   functor to describe the state space of the hyperfunction. This permits
--   memoization but doesn't require it.
--   
--   If we start with a 'function with state' <tt>(x -&gt; a) -&gt; x -&gt;
--   b</tt> we can view it as either <tt>(x -&gt; a, x) -&gt; b</tt> wich
--   is a <tt>Store x</tt> Cokleisli morphism or as <tt>φ :: x -&gt; (x
--   -&gt; a) -&gt; b</tt> which given <tt>H a b x = (x -&gt; a) -&gt;
--   b</tt> is a <tt>(H a b)</tt>-coalgebra: <tt>(x, φ)</tt> . Given that
--   we can think of anamorphisms of this 'function with state' as giving
--   us a fixed point for <tt>H a b</tt> and the morphism to the final
--   coalgebra @(Hyper a b, ana φ) is unique (by definition).
--   
--   A representable functor <tt>f</tt> is isomorphic to <tt>(-&gt;)
--   (<a>Rep</a> f)</tt>. <tt>((-&gt;) x)</tt> is an obvious selection for
--   such a representable functor, so if we switch out the functions from
--   <tt>x</tt> in the above, for a representable functor with <tt>x</tt>
--   as its representation we get opportunities for memoization on the
--   internal 'state space' of our hyperfunctions.
module Control.Monad.Hyper.Rep

-- | Represented Hyperfunctions
--   
--   <a>arr</a> is a faithful functor, so
--   
--   <tt><a>arr</a> f ≡ <a>arr</a> g</tt> implies <tt>f ≡ g</tt>
data Hyper a b
Hyper :: g (g a -> b) -> Rep g -> Hyper a b
ana :: (x -> (x -> a) -> b) -> x -> Hyper a b

-- | <pre>
--   <a>cata</a> phi (<a>push</a> f h) ≡ phi $ \g -&gt; f $ g (<a>cata</a> phi h)
--   </pre>
cata :: (((y -> a) -> b) -> y) -> Hyper a b -> y

-- | Memoizing catamorphism
cata' :: Representable f => ((f a -> b) -> Rep f) -> Hyper a b -> Rep f

-- | <pre>
--   <a>arr</a> f ≡ <a>push</a> f (<a>arr</a> f)
--   <a>invoke</a> (<a>push</a> f q) k ≡ f (<a>invoke</a> k q)
--   <a>push</a> f p . <a>push</a> g q ≡ <a>push</a> (f . g) (p . q)
--   </pre>
push :: (a -> b) -> Hyper a b -> Hyper a b

-- | Unroll a hyperfunction
unroll :: Hyper a b -> (Hyper a b -> a) -> b

-- | Re-roll a hyperfunction using Lambek's lemma.
roll :: ((Hyper a b -> a) -> b) -> Hyper a b
invoke :: Hyper a b -> Hyper b a -> b
uninvoke :: (Hyper b a -> b) -> Hyper a b

-- | <pre>
--   <a>run</a> f ≡ <a>invoke</a> f <a>id</a>
--   <a>run</a> (<a>arr</a> f) ≡ <a>fix</a> f
--   <a>run</a> (<a>push</a> f q) ≡ f (<a>run</a> q)
--   <a>run</a> (<a>push</a> f p . q) ≡ f (<a>run</a> (q . p)) = f (<a>invoke</a> q p)
--   </pre>
run :: Hyper a a -> a

-- | <pre>
--   <a>project</a> . <a>arr</a> ≡ <a>id</a>
--   <a>project</a> h a ≡ <a>invoke</a> h (<a>pure</a> a)
--   <a>project</a> (<a>push</a> f q) ≡ f
--   </pre>
project :: Hyper a b -> a -> b

-- | <a>Under "nice" conditions</a>
--   
--   <pre>
--   <a>fold</a> . <a>build</a> ≡ <a>id</a>
--   </pre>
fold :: [a] -> (a -> b -> c) -> c -> Hyper b c
build :: (forall b c. (a -> b -> c) -> c -> Hyper b c) -> [a]
instance Costrong Hyper
instance Strong Hyper
instance Profunctor Hyper
instance MonadZip (Hyper a)
instance Monad (Hyper a)
instance Applicative (Hyper a)
instance Functor (Hyper a)
instance ArrowLoop Hyper
instance Arrow Hyper
instance Category Hyper


module Control.Monad.Hyper

-- | <pre>
--   <a>invoke</a> f g ≡ <a>run</a> (f . g)
--   <a>arr</a> f ≡ <a>push</a> f (<a>arr</a> f)
--   <a>invoke</a> <a>id</a> <a>id</a> ≡ _|_
--   </pre>
--   
--   <a>arr</a> is a faithful functor, so <tt><a>arr</a> f ≡ <a>arr</a>
--   g</tt> implies <tt>f ≡ g</tt>
newtype Hyper a b
Hyper :: (Hyper b a -> b) -> Hyper a b
invoke :: Hyper a b -> Hyper b a -> b
unroll :: Hyper a b -> (Hyper a b -> a) -> b
roll :: ((Hyper a b -> a) -> b) -> Hyper a b
ana :: (x -> (x -> a) -> b) -> x -> Hyper a b

-- | From "Generalizing the augment combinator" by Ghani, Uustali and Vene.
--   
--   <pre>
--   <a>cata</a> phi (<a>push</a> f h) ≡ phi $ \g -&gt; f $ g (<a>cata</a> phi h)
--   </pre>
cata :: (((x -> a) -> b) -> x) -> Hyper a b -> x

-- | <pre>
--   <a>push</a> f p . <a>push</a> g q ≡ <a>push</a> (f . g) (p . q)
--   <a>invoke</a> (<a>push</a> f p) q ≡ f (<a>invoke</a> q p)
--   </pre>
push :: (a -> b) -> Hyper a b -> Hyper a b

-- | <pre>
--   <a>run</a> (<a>arr</a> f) ≡ <a>fix</a> f
--   <a>run</a> (<a>push</a> f q) ≡ f (<a>run</a> q)
--   <a>run</a> (<a>push</a> f p . q) ≡ f (<a>run</a> (q . p)) = f (<a>invoke</a> q p)
--   </pre>
run :: Hyper a a -> a

-- | <pre>
--   <a>project</a> (<a>push</a> f q) ≡ f
--   </pre>
--   
--   <a>project</a> is a left inverse for <a>arr</a>:
--   
--   <pre>
--   <a>project</a> <a>.</a> <a>arr</a> ≡ <a>id</a>
--   </pre>
project :: Hyper a b -> a -> b
fold :: [a] -> (a -> b -> c) -> c -> Hyper b c

-- | <a>Under nice conditions:</a>
--   
--   <pre>
--   <a>fold</a> . <a>build</a> ≡ <a>id</a>
--   </pre>
build :: (forall b c. (a -> b -> c) -> c -> Hyper b c) -> [a]
instance MonadZip (Hyper a)
instance Monad (Hyper a)
instance Applicative (Hyper a)
instance Functor (Hyper a)
instance Costrong Hyper
instance Strong Hyper
instance ArrowLoop Hyper
instance Arrow Hyper
instance Profunctor Hyper
instance Category Hyper
