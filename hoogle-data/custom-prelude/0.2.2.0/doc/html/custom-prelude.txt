-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An enhanced prelude, serving as a foundation for my projects
--   
--   An enhanced prelude, serving as a foundation for my projects
@package custom-prelude
@version 0.2.2.0

module CustomPrelude

-- | Equivalent to <a>*</a>
(<&>) :: Monad m => m (a -> b) -> m a -> m b

-- | Equivalent to <a>$</a>
(<@>) :: Monad m => (a -> b) -> m a -> m b

-- | Split lists at delimiter specified by a condition Drops empty groups
--   (similar to <a>words</a>)
splitWhen :: (a -> Bool) -> [a] -> [[a]]

-- | Split lists at the specified delimiter Drops empty groups (similar to
--   <a>words</a>)
splitOn :: Eq a => a -> [a] -> [[a]]

-- | A Standard strict version of foldl
foldlStrict :: (a -> b -> a) -> a -> [b] -> a

-- | Specialised foldl' with short circuit evaluation A Nothing stops
--   processing for the rest of the list
foldlMaybe :: (a -> b -> Maybe a) -> a -> [b] -> a

-- | Strict version of specialised foldl' with short circuit evaluation
foldlStrictMaybe :: (a -> b -> Maybe a) -> a -> [b] -> a

-- | Seamless composition of a one and a two arg function
(.:) :: (c -> d) -> (a -> b -> c) -> a -> b -> d

-- | An alias for (.:)
oo :: (c -> d) -> (a -> b -> c) -> a -> b -> d

-- | Seamless composition of a one and a three arg function
ooo :: (d -> e) -> (a -> b -> c -> d) -> a -> b -> c -> e

-- | Seamless composition of a one and a four arg function
oooo :: (e -> f) -> (a -> b -> c -> d -> e) -> a -> b -> c -> d -> f

-- | Bool deconstructor in the spirit of <a>either</a> and <a>maybe</a>
--   Similar to the lambda-if proposal
bool :: a -> a -> Bool -> a

-- | <a>whileIterateM b f a</a> will execute action (f a) while (b a) is
--   true and also feed the results back to the next iteration. NOTE:
--   Suggestions for a better name are welcome!
whileIterateM :: Monad m => (a -> m Bool) -> (a -> m a) -> a -> m a

-- | Monadic version of the if condition
ifM :: Monad m => m Bool -> m a -> m a -> m a

-- | Computes the next power of two for integers Works only on a 32/64 bit
--   machine (is there any other kind?)
nextPowerOf2 :: Int -> Int
