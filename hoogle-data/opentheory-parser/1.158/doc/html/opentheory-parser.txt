-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Stream parsers
--   
@package opentheory-parser
@version 1.158


module OpenTheory.Parser.Stream
data Stream a
Error :: Stream a
Eof :: Stream a
Cons :: a -> (Stream a) -> Stream a
append :: [a] -> Stream a -> Stream a
fromList :: [a] -> Stream a
lengthStream :: Stream a -> Natural
mapStream :: (a -> b) -> Stream a -> Stream b
toList :: Stream a -> ([a], Bool)
instance Eq a => Eq (Stream a)
instance Ord a => Ord (Stream a)
instance Show a => Show (Stream a)
instance Arbitrary a => Arbitrary (Stream a)


module OpenTheory.Parser
newtype Parser a b
Parser :: (a -> Stream a -> Maybe (b, Stream a)) -> Parser a b
unParser :: Parser a b -> a -> Stream a -> Maybe (b, Stream a)
token :: (a -> Maybe b) -> Parser a b
some :: (a -> Bool) -> Parser a a
anyToken :: Parser a a
apply :: Parser a b -> Stream a -> Maybe (b, Stream a)
mapPartial :: Parser a b -> (b -> Maybe c) -> Parser a c
filterParser :: Parser a b -> (b -> Bool) -> Parser a b
fold :: (a -> c -> Maybe (Either b c)) -> c -> Parser a b
foldN :: (a -> b -> Maybe b) -> Natural -> b -> Parser a b
mapParser :: Parser a b -> (b -> c) -> Parser a c
none :: Parser a b
orelse :: Parser a b -> Parser a b -> Parser a b
sequenceParser :: Parser a (Parser a b) -> Parser a b
pair :: Parser a b -> Parser a c -> Parser a (b, c)
parse :: Parser a b -> Stream a -> Stream b
