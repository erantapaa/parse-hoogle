-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | fastest Haskell PONG server in the world
--   
--   winning the PONG benchmark at all costs
@package acme-http
@version 0.2.2

module Acme.Types
data HTTPVersion
HTTP10 :: HTTPVersion
HTTP11 :: HTTPVersion
ppHTTPVersion :: HTTPVersion -> Doc
data Method
OPTIONS :: Method
GET :: Method
GETONLY :: Method
HEAD :: Method
POST :: Method
PUT :: Method
DELETE :: Method
TRACE :: Method
CONNECT :: Method
EXTENSION :: ByteString -> Method
ppMethod :: Method -> Doc
data Request
Request :: !Method -> !ByteString -> !HTTPVersion -> ![(ByteString, ByteString)] -> !Bool -> !ByteString -> Request
rqMethod :: Request -> !Method
rqURIbs :: Request -> !ByteString
rqHTTPVersion :: Request -> !HTTPVersion
rqHeaders :: Request -> ![(ByteString, ByteString)]
rqSecure :: Request -> !Bool
rqBody :: Request -> !ByteString
ppRequest :: Request -> Doc
data Response

-- | return PONG in the request body
PongResponse :: Response
ByteStringResponse :: !Int -> ![(ByteString, ByteString)] -> !ByteString -> Response
rsCode :: Response -> !Int
rsHeaders :: Response -> ![(ByteString, ByteString)]
rsBody :: Response -> !ByteString
ppResponse :: Response -> Doc

-- | thrown when the remote-side closes the connection
data ConnectionClosed
ConnectionClosed :: ConnectionClosed

-- | render a <a>ByteString</a> to <a>Doc</a>
bytestring :: ByteString -> Doc

-- | render, field = value
field :: String -> Doc -> Doc

-- | pretty-print an HTTP header
ppHeader :: (ByteString, ByteString) -> Doc
colon :: Word8
space :: Word8
nl :: Word8
cr :: Word8
instance Typeable HTTPVersion
instance Typeable Method
instance Typeable Request
instance Typeable ConnectionClosed
instance Eq HTTPVersion
instance Ord HTTPVersion
instance Read HTTPVersion
instance Show HTTPVersion
instance Data HTTPVersion
instance Eq Method
instance Ord Method
instance Read Method
instance Show Method
instance Data Method
instance Show ConnectionClosed
instance Exception ConnectionClosed
instance Show Response
instance Show Request

module Acme.Request
data ParseError
Unexpected :: ParseError
MalformedRequestLine :: ByteString -> ParseError
MalformedHeader :: ByteString -> ParseError
UnknownHTTPVersion :: ByteString -> ParseError
parseRequest :: IO ByteString -> ByteString -> Bool -> IO (Request, ByteString)
parseRequestLine :: ByteString -> (Method, ByteString, HTTPVersion)
parseMethod :: ByteString -> Method
parseHTTPVersion :: ByteString -> HTTPVersion
parseHeaders :: IO ByteString -> ByteString -> IO ([(ByteString, ByteString)], ByteString)
parseHeader :: ByteString -> (ByteString, ByteString)
parseToken :: ByteString -> (ByteString, ByteString)

-- | find a line terminated by a '\r\n'
takeLine :: IO ByteString -> ByteString -> IO (ByteString, ByteString)
instance Typeable ParseError
instance Show ParseError
instance Eq ParseError
instance Exception ParseError

module Acme.Response
pong :: (ByteString -> IO ()) -> IO ()
sendResponse :: (ByteString -> IO ()) -> Response -> IO ()
statusLine :: Int -> ByteString
ok_status :: ByteString

module Acme.Serve

-- | start TCP listening on a port
listenOn :: Int -> IO Socket

-- | listen on a port and handle <tt>Requests</tt>
serve :: Int -> (Request -> IO Response) -> IO ()

-- | handle <tt>Requests</tt> from an already listening <a>Socket</a>
serveSocket :: Socket -> (Request -> IO Response) -> IO ()
requestLoop :: Bool -> SockAddr -> IO ByteString -> (ByteString -> IO ()) -> (Request -> IO Response) -> IO ()
