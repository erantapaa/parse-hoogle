-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell SuperCollider Auditor
--   
@package hsc3-auditor
@version 0.15


-- | Auditor sampler synthdef.
module Sound.SC3.Auditor.Smplr

-- | If a note is not in range, shift until it is in range and set playback
--   rate.
--   
--   map (fold_midi (59,87)) [(1,50.5),(1,60.5),(1,90.5)] ==
--   [(0.5,62.5),(1.0,60.5),(2.0,78.5)]
fold_midi :: (Ord n, Num n, Num r, Fractional r) => (n, n) -> (r, n) -> (r, n)
type Param = [(String, Double)]

-- | Right biased
param_merge :: Param -> Param -> Param

-- | Trivial file playback instrument. The <i>rdelay</i> parameter sets the
--   maximum pre-delay time (in seconds), each instance is randomly
--   pre-delayed betwee zero and the indicated time. The <i>ramplitude</i>
--   parameter sets the maximum amplitude offset of the <i>amp</i>
--   parameter, each instance is randomly amplified between zero and the
--   indicated value.
--   
--   If <i>use_gate</i> is <a>True</a> the synth ends either when the sound
--   file ends or the gate closes, else there is a <i>sustain</i> parameter
--   and a linear envelope with a decay time of <i>decay</i> is applied.
--   
--   If <i>pan</i> is <a>True</a> the sampler pans according to the
--   <tt>pan</tt> parameter, else it writes directly to <tt>bus</tt>.
--   
--   <pre>
--   let {u = [False,True]; opt = [(a,b) | a &lt;- u, b &lt;- u]}
--   in withSC3 (mapM_ async (map (d_recv . smplr) opt))
--   </pre>
--   
--   <pre>
--   import Sound.SC3.Lang.Control.Event
--   import Sound.SC3.Lang.Pattern.ID
--   </pre>
--   
--   <pre>
--   audition (pbind [(K_instr,psynth (smplr (True,True)))
--                   ,(K_param "bufnum",pseries 0 1 (29 * 3))
--                   ,(K_param "attack",0.25)
--                   ,(K_param "decay",0.15)
--                   ,(K_dur,0.35)])
--   </pre>
--   
--   <pre>
--   audition (pbind [(K_instr,psynth (smplr (True,True)))
--                   ,(K_param "bufnum",pwhitei 'a' 0 (6 * 6) inf)
--                   ,(K_param "startpos",0.15 * 48000)
--                   ,(K_param "attack",0.15)
--                   ,(K_amp,pwhite 'b' 0.15 0.65 inf)
--                   ,(K_param "pan",pwhite 'c' (-1) 1 inf)
--                   ,(K_dur,pwhite 'd' 0.15 1.65 inf)])
--   </pre>
smplr :: (Bool, Bool) -> Synthdef
mcons :: Maybe a -> [a] -> [a]

-- | Sampler options, (rng,ch,nid,b0,(aT,rT),bus,grp,p2)
--   
--   ch = channel assignment mode, nid = node id, b0 = buffer zero, aT =
--   attack time, rT = release time, bus = output bus, grp = group to
--   allocate node at, p2 = further synthesis parameters
type SMPLR_OPT = ((Int, Int), String, Int, Int, (Double, Double), Int, Int, Param)

-- | Make <tt>smplr</tt> control <a>Message</a>.
--   
--   m = midi note number, dt = detune (cents), du = duration, g = gain,
smplr_msg :: SMPLR_OPT -> (Int, Double) -> Maybe Double -> Double -> Message

-- | <a>d_recv</a> messages for all smplr variants.
smplr_recv_all_msg :: [Message]

-- | Load all smplr variants.
smplr_load_all :: IO ()
smplr_nc_osc :: Int -> Message
smplr_nc_load :: Int -> IO Message
smplr_nc :: Int -> UGen


-- | Farfisa (electronics)
--   
--   Recordings of FARFISA COMPACT DUO from B3 to D#6.
--   
--   Registrations flute8, oboe8, trumpet8, strings8.
--   
--   With and without vibrato.
--   
--   Files are each recorded in one pass, metronome m=54, measure=6/4.
--   
--   flute8, oboe8, trumpet8 were recorded together and balance is natural.
--   
--   strings8 was recorded later, balance is below.
--   
--   strings8 ought to balance with trumpet8.
module Sound.SC3.Auditor.FCD
fcd_dir :: FilePath

-- | There are four separate registrations (three used in aad).
fcd_registrations_plain :: [String]

-- | Each has a vibrato variant.
fcd_registrations_vib :: [String]

-- | Making eight registrations in total.
fcd_registrations :: [String]

-- | Having indices <tt>0</tt> through <tt>7</tt>.
fcd_registrations_ix :: [Int]

-- | Stored as <tt>flac</tt>.
fcd_format :: String

-- | The files of the recordings of the eight registrations.
fcd_fnames :: [FilePath]

-- | <tt>header</tt> of 'fcd_fnames.
--   
--   <pre>
--   h &lt;- fcd_hdr
--   length h == 8
--   map frameCount h
--   </pre>
fcd_hdr :: IO [Header]

-- | The recorded duration for each tone (in seconds), ie. ts=6/4 at q=54.
--   
--   <pre>
--   fcd_sample_dur == 6 + 2/3
--   </pre>
fcd_sample_dur :: Fractional n => n

-- | Range (inclusive) of recorded tones.
fcd_range :: (OctPC, OctPC)
bimap1 :: (t -> u) -> (t, t) -> (u, u)

-- | As midi note numbers.
fcd_range_midi :: Num n => (n, n)

-- | All of the recorded midi note numbers.
--   
--   <pre>
--   length fcd_gamut_midi == 29
--   </pre>
fcd_gamut_midi :: (Enum n, Num n) => [n]

-- | (note-predicate,sf-header,sf-name)
type SF_LD = (Int -> Bool, Header, FilePath)

-- | The odd form allows selective loading based on <i>m</i>, where the
--   buffer numbers are as if all were loaded.
--   
--   st = start time (sec.), du = duration (sec.), b = buffer-id, m =
--   midi-note number
sf_load_msg :: SF_LD -> Double -> Double -> Int -> Int -> Maybe Message
sf_load_seq_msg :: SF_LD -> Int -> Double -> (Double, Double) -> Int -> [Message]
fcd_load_seq_msg :: (Int -> Bool) -> Int -> [Header] -> [[Message]]
fcd_load_sel :: (Int -> Bool) -> Int -> IO ()

-- | Here <i>k</i> is the set of registrations to load.
fcd_load_all_msg :: Int -> [Int] -> IO [Message]
fcd_load_all :: Int -> [Int] -> IO ()
range_degree :: Num a => (a, a) -> a
fcd_smplr :: SMPLR_OPT -> Int -> (Int, Double) -> Maybe Double -> Double -> Message
fcd_init :: Int -> [Int] -> IO [Bundle]


-- | Auditor functions common to all sample libraries.
module Sound.SC3.Auditor

-- | Amplitude (linear gain)
type Amplitude = Double

-- | Buffer index.
type Index = Int

-- | Number of channels
type NC = Int

-- | <a>Index</a> and <a>Amplitude</a>
data Note
Note :: Index -> Amplitude -> Note
note_index :: Note -> Index
note_amplitude :: Note -> Amplitude

-- | Chord
type Chord = [Note]

-- | Function to generate the set of <a>OSC</a> commands required to load
--   the set of <a>Index</a>ed files.
type Sample_Loader = [Index] -> [Message]

-- | Shorthand
type PP = Tseq Time Chord
to_p :: (a -> Index, a -> Amplitude) -> (Time, [a]) -> (Time, Chord)
chord_indices :: Chord -> [Index]
pp_start_times :: Tseq Time Chord -> [Time]
pp_chords :: Tseq Time Chord -> [Chord]

-- | Start time of last element (this is not the same as
--   <tt>tseq_dur</tt>).
pp_duration :: Tseq Time Chord -> Time

-- | The set (unique, sorted) of indices referenced.
pp_indices :: Tseq Time Chord -> [Index]
chd_osc :: Chord -> [Message]
p_osc :: (Time, Chord) -> Bundle

-- | Generate <a>NRT</a> given <a>NC</a>, <a>Sample_Loader</a> and
--   <a>PP</a>.
pp_nrt :: NC -> Maybe Sample_Loader -> Tseq Time Chord -> NRT

-- | Variant of <tt>pp_osc</tt> that writes <tt>NRT</tt> score to named
--   file using <a>writeNRT</a>.
pp_nrt_write :: FilePath -> NC -> Sample_Loader -> Tseq Time Chord -> IO ()

-- | <a>audition</a> of <a>pp_nrt</a> (two channels, no loader).
pp_audition :: Tseq Time Chord -> IO ()

-- | Given 0-indexed list of channels to read, and an ordered sequence of
--   filenames make <a>Sample_Loader</a>.
au_loader :: [Int] -> [String] -> Sample_Loader

-- | Variant where all files are in the same directory, so given as
--   directory and file list.
au_loader_dir :: [Int] -> FilePath -> [FilePath] -> Sample_Loader
instance Eq Note
instance Ord Note
instance Show Note


-- | Functions to generate a click track from a metric structure.
module Sound.SC3.Auditor.CT
type CT_SF = (FilePath, Index, Amplitude)
type CT_Node_SF = CT_Node -> [CT_SF]
ct_note :: CT_SF -> Note
ct_realise :: CT_Node_SF -> Dseq Double CT_Node -> Tseq Double [CT_SF]
ct_normalise_sf :: [CT_SF] -> [(Index, FilePath)]
ct_sf_seq :: [(Index, FilePath)] -> [FilePath]
ct_auditor :: CT_Node_SF -> Dseq Double CT_Node -> ([FilePath], PP)
ct_ldr :: [FilePath] -> Sample_Loader
ct_sc :: CT_Node_SF -> CT -> NRT
ct_render :: FilePath -> FilePath -> CT_Node_SF -> CT -> IO ()


-- | <i>Bosendorfer</i> piano sample library based auditioner.
module Sound.SC3.Auditor.PF
pf_dir :: FilePath

-- | <tt>Derive_Index</tt> function for <i>Bosendorfer</i> sample set. The
--   offset from buffer number to midi note number, adjusted for by this
--   function, is <tt>24</tt>.
bosendorfer_octpc_to_index :: OctPC -> Index

-- | Convert set of <a>OctPC</a> based <tt>P</tt> to <tt>PP</tt> with
--   appropriate <tt>Derive_Index</tt> function.
for_pf :: Tseq Time [(OctPC, Amplitude)] -> Tseq Time Chord
note_names :: [String]
file_names :: [String]
bosendorfer_osc :: [Int] -> FilePath -> (String, Int) -> Message

-- | Generate set of <a>OSC</a> messages to load <i>Bosendorfer</i> sample
--   library.
bosendorfer_set_osc :: [Int] -> FilePath -> Int -> [Message]

-- | Variant of <a>bosendorfer_set_osc</a> to load required subset of
--   library.
bosendorfer_subset_osc :: [Int] -> FilePath -> Int -> Sample_Loader

-- | Send <a>OSC</a> set given by <a>bosendorfer_set_osc</a> to
--   <tt>scsynth</tt> at <a>Transport</a>.
au_load_bosendorfer_set :: Transport m => [Int] -> FilePath -> Int -> m ()
pf_init :: String -> [Int] -> Int -> [Bundle]


-- | <i>TR808</i> sample library based auditioner.
module Sound.SC3.Auditor.TR808

-- | Enumeration of TR808 instruments.
data TR808

-- | Bass Drum
BD :: TR808

-- | Snare Drum
SD :: TR808

-- | Low Tom
LT' :: TR808

-- | Mid Tom
MT :: TR808

-- | High Tom
HT :: TR808

-- | Low Conga
LC :: TR808

-- | Mid Conga
MC :: TR808

-- | High Conga
HC :: TR808

-- | Rim Shot
RS :: TR808

-- | Claves
CL :: TR808

-- | Hand Clap
CP :: TR808

-- | Maracas
MA :: TR808

-- | Cow Bell
CB :: TR808

-- | Cymbal
CY :: TR808

-- | Open Hi-Hat
OH :: TR808

-- | Closed Hi-Hat
CH :: TR808

-- | Controller positions to index sample library.
data Position
P0 :: Position
P1 :: Position
P2 :: Position
P3 :: Position
P4 :: Position

-- | Set of relevant <a>Position</a> data.
type Parameters = [Position]

-- | Translate <a>Position</a> to <a>String</a> encoding in file names.
position_text :: Position -> String

-- | Function to give number of parameters for each <a>TR808</a>
--   instrument.
tr808_n_param :: TR808 -> Int

-- | Prettty printer variant of <a>Show</a> instance for <a>TR808</a>.
tr808_abbrev :: TR808 -> String

-- | <a>TR808</a> instrument names.
tr808_name :: TR808 -> String

-- | Generate <a>FilePath</a> for <a>TR808</a> instrument with indicated
--   <a>Parameters</a>.
tr808_file_name :: TR808 -> Parameters -> FilePath

-- | Generate full set of <a>FilePath</a> for all <a>Position</a>s of
--   <a>TR808</a>.
tr808_file_names :: TR808 -> [FilePath]

-- | The complete set of <a>TR808</a> sample <a>FilePath</a>s.
tr808_file_map :: [FilePath]

-- | The set of all <a>Parameters</a> for a <a>TR808</a> instrument.
tr808_set :: [(TR808, [Parameters])]

-- | Lookup <a>tr808_set</a> for the <i>n</i>th variant of <a>TR808</a>.
tr808_variant :: TR808 -> Int -> Maybe Parameters

-- | The set of all <a>TR808</a> data.
tr808_u :: [(TR808, Parameters)]

-- | Lookup <tt>Index</tt> for <a>TR808</a> at indicated <a>Parameters</a>.
tr808_index :: TR808 -> Parameters -> Index

-- | Buffer <i>allocate and read</i> message for <tt>scsynth</tt>.
tr808_alloc_osc :: FilePath -> (FilePath, Int) -> Message

-- | Complete set of <a>tr808_alloc_osc</a> messages for <a>TR808</a>.
tr808_alloc_all_osc :: FilePath -> [Message]

-- | Variant of <a>tr808_alloc_all_osc</a> to load required subset of
--   library.
tr808_alloc_subset_osc :: FilePath -> Sample_Loader

-- | Send <a>OSC</a> set given by <a>tr808_alloc_all_osc</a> to
--   <tt>scsynth</tt> at <a>Transport</a>.
au_load_tr808_set :: Transport m => FilePath -> m ()
instance Eq TR808
instance Ord TR808
instance Enum TR808
instance Bounded TR808
instance Show TR808
instance Eq Position
instance Ord Position
instance Enum Position
instance Bounded Position
instance Show Position
