-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A wrapper for the chart library to assist with basic plots (Deprecated - use the Easy module instead)
--   
--   A wrapper for the chart library to assist with basic plots (Deprecated
--   - use the Easy module instead)
@package Chart-simple
@version 1.3.3

module Graphics.Rendering.Chart.Simple.Internal
styleColor :: Int -> AlphaColour Double
styleSymbol :: Int -> PlotKind
iplot :: (PlotValue x, PlotValue y) => [InternalPlot x y] -> Layout x y
name :: [PlotKind] -> String
str2k :: String -> [PlotKind]
str2khelper :: String -> PlotKind -> [PlotKind]

-- | Type to define a few simple properties of each plot.
data PlotKind
Name :: String -> PlotKind
FilledCircle :: PlotKind
HollowCircle :: PlotKind
Triangle :: PlotKind
DownTriangle :: PlotKind
Square :: PlotKind
Diamond :: PlotKind
Plus :: PlotKind
Ex :: PlotKind
Star :: PlotKind
Symbols :: PlotKind
LittleDot :: PlotKind
Dashed :: PlotKind
Dotted :: PlotKind
Solid :: PlotKind
data InternalPlot x y
IPY :: [y] -> [PlotKind] -> InternalPlot x y
IPX :: [x] -> [PlotKind] -> InternalPlot x y
newtype LayoutDDD
LayoutDDD :: Layout Double Double -> LayoutDDD
plotLayout :: LayoutDDD -> Layout Double Double
layoutDddToRenderable :: LayoutDDD -> Renderable (LayoutPick Double Double Double)

-- | <i>Deprecated: use Chart.Graphics.Rendering.Chart.Easy</i>
uplot :: [UPlot] -> LayoutDDD

-- | The main plotting function. The idea behind PlotType is shamelessly
--   copied from Text.Printf (and is not exported). All you need to know is
--   that your arguments need to be in class PlotArg. And PlotArg consists
--   of functions and [Double] and String and PlotKind or [PlotKind].

-- | <i>Deprecated: use Chart.Graphics.Rendering.Chart.Easy</i>
plot :: PlotType a => a
class PlotType t
pl :: PlotType t => [UPlot] -> t

-- | Save a plot as a PDF file.

-- | <i>Deprecated: use Chart.Graphics.Rendering.Chart.Easy</i>
plotPDF :: PlotPDFType a => String -> a
class PlotPDFType t
pld :: PlotPDFType t => FilePath -> [UPlot] -> t

-- | Save a plot as a postscript file.

-- | <i>Deprecated: use Chart.Graphics.Rendering.Chart.Easy</i>
plotPS :: PlotPSType a => String -> a
class PlotPSType t
pls :: PlotPSType t => FilePath -> [UPlot] -> t

-- | Save a plot as a png file.

-- | <i>Deprecated: use Chart.Graphics.Rendering.Chart.Easy</i>
plotPNG :: PlotPNGType a => String -> a
class PlotPNGType t
plp :: PlotPNGType t => FilePath -> [UPlot] -> t
data UPlot
UString :: String -> UPlot
UDoubles :: [Double] -> UPlot
UFunction :: (Double -> Double) -> UPlot
UKind :: [PlotKind] -> UPlot
X :: [Double] -> UPlot
xcoords :: [Double] -> UPlot
class PlotArg a
toUPlot :: PlotArg a => a -> [UPlot]
class IsPlot c
toUPlot' :: IsPlot c => [c] -> [UPlot]

-- | Display a plot on the screen.

-- | <i>Deprecated: use Chart.Graphics.Rendering.Chart.Easy</i>
plotWindow :: PlotWindowType a => a
class PlotWindowType t
plw :: PlotWindowType t => [UPlot] -> t
instance Eq PlotKind
instance Show PlotKind
instance Ord PlotKind
instance PlotWindowType (IO a)
instance (PlotArg a, PlotWindowType r) => PlotWindowType (a -> r)
instance PlotPNGType (IO a)
instance PlotPSType (IO a)
instance PlotPDFType (IO a)
instance (IsPlot p, IsPlot q) => IsPlot (p, q)
instance (IsPlot p, IsPlot q, IsPlot r) => IsPlot (p, q, r)
instance IsPlot p => IsPlot [p]
instance IsPlot Char
instance IsPlot Double
instance IsPlot PlotKind
instance PlotArg PlotKind
instance PlotArg UPlot
instance (Real a, Real b, Fractional a, Fractional b) => IsPlot (a -> b)
instance (Real a, Real b, Fractional a, Fractional b) => PlotArg (a -> b)
instance IsPlot p => PlotArg [p]
instance (PlotArg a, PlotPNGType r) => PlotPNGType (a -> r)
instance (PlotArg a, PlotPSType r) => PlotPSType (a -> r)
instance (PlotArg a, PlotPDFType r) => PlotPDFType (a -> r)
instance PlotType LayoutDDD
instance (PlotArg a, PlotType r) => PlotType (a -> r)
instance ToRenderable LayoutDDD


-- | An even simpler framework for creating 2D charts in Haskell.
--   
--   The basic idea is to make it as easy to plot as octave, which means
--   that you provide no more information than you wish to provide. We
--   provide four plotting functions, which differ only in their output.
--   One produces a <a>Layout1</a> that you can customize using other
--   Graphics.Rendering.Chart functions. The other three produce their
--   output directly. All three accept the same input and produce the same
--   plots.
--   
--   The plot functions accept a variable number of arguments. You must
--   provide a [Double] which defines the points on the x axis, which must
--   precede any of the "y" values. The y values may either be [Double] or
--   functions. After any given y value, you can give either Strings or
--   PlotKinds describing how you'd like that y printed.
--   
--   Examples:
--   
--   <pre>
--   -- this plotters
--   import Graphics.Rendering.Chart.Simple
--   -- rendering instances from 'chart-cairo' package
--   import Graphics.Rendering.Chart.Backend.Cairo
--   </pre>
--   
--   <pre>
--   main = do
--       plotPDF "foo.pdf" [0 :: Double, 0.1..10] sin "- " cos ". " cos "o"
--   </pre>
--   
--   <pre>
--   plotPS "foo.ps" [0 :: Double, 0.1..10] (sin . exp) "- " (sin . exp) "o-"
--   </pre>
module Graphics.Rendering.Chart.Simple

-- | The main plotting function. The idea behind PlotType is shamelessly
--   copied from Text.Printf (and is not exported). All you need to know is
--   that your arguments need to be in class PlotArg. And PlotArg consists
--   of functions and [Double] and String and PlotKind or [PlotKind].

-- | <i>Deprecated: use Chart.Graphics.Rendering.Chart.Easy</i>
plot :: PlotType a => a

-- | Type to define a few simple properties of each plot.
data PlotKind
Name :: String -> PlotKind
FilledCircle :: PlotKind
HollowCircle :: PlotKind
Triangle :: PlotKind
DownTriangle :: PlotKind
Square :: PlotKind
Diamond :: PlotKind
Plus :: PlotKind
Ex :: PlotKind
Star :: PlotKind
Symbols :: PlotKind
LittleDot :: PlotKind
Dashed :: PlotKind
Dotted :: PlotKind
Solid :: PlotKind
xcoords :: [Double] -> UPlot

-- | Save a plot as a PDF file.

-- | <i>Deprecated: use Chart.Graphics.Rendering.Chart.Easy</i>
plotPDF :: PlotPDFType a => String -> a

-- | Save a plot as a postscript file.

-- | <i>Deprecated: use Chart.Graphics.Rendering.Chart.Easy</i>
plotPS :: PlotPSType a => String -> a
plotLayout :: LayoutDDD -> Layout Double Double

-- | Save a plot as a png file.

-- | <i>Deprecated: use Chart.Graphics.Rendering.Chart.Easy</i>
plotPNG :: PlotPNGType a => String -> a
data LayoutDDD

-- | Display a plot on the screen.

-- | <i>Deprecated: use Chart.Graphics.Rendering.Chart.Easy</i>
plotWindow :: PlotWindowType a => a
layoutDddToRenderable :: LayoutDDD -> Renderable (LayoutPick Double Double Double)
class PlotPDFType t
pld :: PlotPDFType t => FilePath -> [UPlot] -> t
class PlotPSType t
pls :: PlotPSType t => FilePath -> [UPlot] -> t
class PlotWindowType t
plw :: PlotWindowType t => [UPlot] -> t

-- | <i>Deprecated: use Chart.Graphics.Rendering.Chart.Easy</i>
uplot :: [UPlot] -> LayoutDDD
