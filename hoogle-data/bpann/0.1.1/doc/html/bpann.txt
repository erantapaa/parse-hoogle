-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | backpropagation neuronal network
--   
--   <ul>
--   <li>fully-connected multylayer perceptron - uses bias neurons -
--   creation of randomly initialized networks of arbitrary size - easy
--   (de-)serialization</li>
--   </ul>
@package bpann
@version 0.1.1


-- | Basic backpropagation neuronal network inspired by hnn
module AI.BPANN
type ALayer a = [(Neuron, a)]
type ANetwork a = [ALayer a]
type Network = ANetwork ()

-- | information generated during a simple forward pass
data ForwardPassInfo
FPInfo :: Double -> Double -> [Double] -> ForwardPassInfo

-- | output
o :: ForwardPassInfo -> Double

-- | sum of weighted inputs
net :: ForwardPassInfo -> Double

-- | inputs
xs :: ForwardPassInfo -> [Double]

-- | the neuron
data Neuron
Neuron :: [Double] -> (Double -> Double) -> (Double -> Double) -> Neuron

-- | input weights
ws :: Neuron -> [Double]

-- | activation function
fun :: Neuron -> (Double -> Double)

-- | first derivation of the activation function
fun' :: Neuron -> (Double -> Double)
type PackedNeuron = [Double]

-- | 1/(1+e^(-x))
sigmoid :: Double -> Double

-- | first derivation
sigmoid' :: Double -> Double
type NeuronCreator = PackedNeuron -> Neuron
sigmoidNeuron :: PackedNeuron -> Neuron

-- | activation function is <a>id</a>
outputNeuron :: PackedNeuron -> Neuron
biasNeuron :: Int -> Neuron
createLayer :: [PackedNeuron] -> NeuronCreator -> ALayer ()
sigmoidLayer :: [PackedNeuron] -> ALayer ()
outputLayer :: [PackedNeuron] -> ALayer ()
createRandomNetwork :: Int -> [Int] -> Network
icNcToPackedNeurons :: Int -> Int -> [Double] -> ([PackedNeuron], [Double])
unpackNetwork :: [[PackedNeuron]] -> Network
packNetwork :: Network -> [[PackedNeuron]]

-- | generate forward pass info for a network
passForward :: Network -> [Double] -> ANetwork ForwardPassInfo

-- | generate forward pass info for a layer
passForward' :: ALayer a -> [Double] -> ALayer ForwardPassInfo

-- | generate forward pass info for a neuron
passForward'' :: Neuron -> [Double] -> ForwardPassInfo

-- | calculate the weigtet input of the neuron
calcNet :: [Double] -> [Double] -> Double

-- | updates the weigts for an entire network
weightUpdate :: Double -> ANetwork ForwardPassInfo -> [Double] -> Network

-- | updates the weigts for a layer
weightUpdate' :: Double -> ALayer ForwardPassInfo -> (Network, [Double]) -> (Network, [Double])

-- | updates the weigts for a neuron
weightUpdate'' :: Double -> (Neuron, ForwardPassInfo) -> Double -> (Neuron, Double)
backprop :: Double -> Network -> ([Double], [Double]) -> Network

-- | calculates the output of a network for a given input vector
calculate :: Network -> [Double] -> [Double]

-- | calculates the output of a layer for a given input vector
calculate' :: [Double] -> ALayer a -> [Double]

-- | quadratic error for a single vector pair
quadErrorNet :: Network -> ([Double], [Double]) -> Double

-- | quadratic error for for multiple pairs
globalQuadError :: Network -> [([Double], [Double])] -> Double

-- | produces an indefinite sequence of networks
trainAlot :: Double -> Network -> [([Double], [Double])] -> [Network]

-- | trains a network with a set of vector pairs until a the
--   <a>globalQuadError</a> is smaller than epsilon
train :: Double -> Double -> Network -> [([Double], [Double])] -> Network
instance Show ForwardPassInfo
instance Show Neuron
