-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Convenient monadic HTTP request modifiers
--   
@package http-client-request-modifiers
@version 0.1


-- | Each of the functions in this module is a monadic request modifier,
--   using the <a>ReqMod</a> type. Most of them do not have any side
--   effects; however, the consistent use of <a>Monad</a> allows for easy
--   chaining with bind (<a>&gt;&gt;=</a>) or Kleisli composition
--   (<a>&gt;=&gt;</a>).
--   
--   <h2>Example</h2>
--   
--   The example that inspired this package is modifying the <a>Request</a>
--   from <a>parseUrl</a>:
--   
--   <pre>
--   <a>parseUrl</a> "http://httpbin.org/post"
--     &gt;&gt;= <a>setMethod</a> <a>POST</a>
--     &gt;&gt;= <a>setBodyLBS</a> "hello"
--   </pre>
--   
--   Suppose I want to reuse the URL post request but not the body. I can
--   define a function for just that part:
--   
--   <pre>
--   let httpbinPost :: <a>MonadThrow</a> m =&gt; m <a>Request</a>
--       httpbinPost = <a>parseUrl</a> "http://httpbin.org/post" &gt;&gt;= <a>setMethod</a> <a>POST</a>
--   </pre>
--   
--   Alternative formulations of the above, without using request
--   modifiers, are:
--   
--   <pre>
--   <a>parseUrl</a> "http://httpbin.org/post"
--     &gt;&gt;= req -&gt; return $ req
--       { <a>method</a> = <a>renderStdMethod</a> <a>POST</a>
--       , <a>requestBody</a> = <a>RequestBodyLBS</a> "hello"
--       }
--   </pre>
--   
--   and
--   
--   <pre>
--   let httpbinPost :: <a>MonadThrow</a> m =&gt; m <a>Request</a>
--       httpbinPost = do req &lt;- <a>parseUrl</a> "http://httpbin.org/post"
--                        return $ req { <a>method</a> = <a>renderStdMethod</a> <a>POST</a> }
--   </pre>
--   
--   <h2>Benefits</h2>
--   
--   The main benefits of monadic request modifiers are:
--   
--   <ul>
--   <li>composability,</li>
--   <li>conciseness, and</li>
--   <li>allowing an arbitrary combination of <a>Monad</a>s.</li>
--   </ul>
--   
--   <h2>Naming Scheme</h2>
--   
--   The naming scheme used for functions in this module is:
--   
--   <ul>
--   <li><tt>set</tt> - Set a value, overriding any existing value.</li>
--   <li><tt>add</tt> - Append a value to the end of a list and do not
--   override any existing values.</li>
--   <li><tt>BS</tt> - Use a strict <a>ByteString</a> as a parameter.</li>
--   <li><tt>LBS</tt> - Use a lazy <a>ByteString</a> as a parameter.</li>
--   </ul>
module Network.HTTP.Client.Request.Modifiers

-- | Request modifier, abbreviated
--   
--   Since 0.1
type ReqMod m = Request -> m Request

-- | Validate and set the request URI.
--   
--   Since 0.1
setUri :: MonadThrow m => URI -> ReqMod m

-- | Extend the request URI with a relative URI.
--   
--   Since 0.1
setUriRelative :: MonadThrow m => URI -> ReqMod m

-- | Set the query string with a strict <a>ByteString</a>.
--   
--   Since 0.1
setQueryBS :: Monad m => ByteString -> ReqMod m

-- | Set the query string with a rendered <a>Query</a>.
--   
--   Since 0.1
setQuery :: (Monad m, QueryLike q) => q -> ReqMod m

-- | Add a rendered <a>Query</a> to the end of the query string.
--   
--   Since 0.1
addQuery :: (Monad m, QueryLike q) => q -> ReqMod m

-- | Add a single query key/value pair to the end of the query string.
--   
--   Since 0.1
addQueryPair :: (Monad m, QueryKeyLike k, QueryValueLike v) => k -> v -> ReqMod m

-- | Set the method with a strict <a>ByteString</a>.
--   
--   See <a>Network.HTTP.Types.Method</a> for the methods, e.g.
--   <a>methodGet</a> or <a>methodPost</a>.
--   
--   Since 0.1
setMethodBS :: Monad m => Method -> ReqMod m

-- | Set the method with a standard method, e.g. <a>GET</a> or <a>POST</a>.
--   
--   Since 0.1
setMethod :: Monad m => StdMethod -> ReqMod m

-- | Set the request headers.
--   
--   Since 0.1
setHeaders :: Monad m => RequestHeaders -> ReqMod m

-- | Set the request header by name, removing any other headers with the
--   same name.
--   
--   Since 0.1
setHeader :: Monad m => HeaderName -> ByteString -> ReqMod m

-- | Add headers to the request.
--   
--   Since 0.1
addHeaders :: Monad m => RequestHeaders -> ReqMod m

-- | Add a single header.
--   
--   Since 0.1
addHeader :: Monad m => HeaderName -> ByteString -> ReqMod m

-- | Set the <tt>Content-Type</tt> header with a <a>MediaType</a>.
--   
--   Since 0.1
setContentTypeHeader :: Monad m => MediaType -> ReqMod m

-- | Set the <tt>Accept</tt> header with a <a>MediaType</a>.
--   
--   Since 0.1
setAcceptHeader :: Monad m => MediaType -> ReqMod m

-- | Set the request body.
--   
--   Since 0.1
setBody :: Monad m => RequestBody -> Request -> m Request

-- | Set the request body with a strict <a>ByteString</a>.
--   
--   Since 0.1
setBodyBS :: Monad m => ByteString -> Request -> m Request

-- | Set the request body with a lazy <a>ByteString</a>.
--   
--   Since 0.1
setBodyLBS :: Monad m => ByteString -> Request -> m Request

-- | Set the request body with URL-encoded key/value pairs.
--   
--   Since 0.1
setUrlEncodedBody :: Monad m => [(ByteString, ByteString)] -> ReqMod m

-- | Set the method, <tt>Content-Type</tt>, and strict <a>ByteString</a>
--   body.
--   
--   Since 0.1
setSimpleRequestBS :: Monad m => StdMethod -> MediaType -> ByteString -> ReqMod m

-- | Set the method, <tt>Content-Type</tt>, and lazy <a>ByteString</a>
--   body.
--   
--   Since 0.1
setSimpleRequestLBS :: Monad m => StdMethod -> MediaType -> ByteString -> ReqMod m
