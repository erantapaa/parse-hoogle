-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Unicode-normalized text
--   
--   This package provides types and functions for normalizing and
--   comparing <tt>Text</tt> values according to Unicode equivalence.
--   
--   An in-depth explanation of the forms of Unicode equivalence can be
--   found <a>on Wikipedia</a>.
--   
--   The modules in this package are named and function according to the
--   four methods of Unicode normalization. The <tt>Normal</tt> types
--   exported by each are purposefully not compatible with functions
--   exported by the other modules.
--   
--   This package depends on <tt>text-icu</tt>, which means it requires
--   that the <tt>icu</tt> C library is installed.
@package text-normal
@version 0.2.1.0


-- | Strings normalized according to Normalization Form Compatibility
--   Decomposition.
module Data.Text.Normal.NFKD

-- | Normalized text.
data Normal

-- | Convert <a>Text</a> efficiently to <a>Normal</a>.
fromText :: Text -> Normal

-- | Convert <a>Normal</a> to <a>Text</a>. This function just unwraps the
--   newtype, so there is zero runtime cost.
toText :: Normal -> Text
instance Typeable Normal
instance Eq Normal
instance Ord Normal
instance Data Normal
instance NFData Normal
instance IsString Normal
instance Monoid Normal
instance Read Normal
instance Show Normal


-- | Strings normalized according to Normalization Form Compatibility
--   Composition.
module Data.Text.Normal.NFKC

-- | Normalized text.
data Normal

-- | Convert <a>Text</a> efficiently to <a>Normal</a>.
fromText :: Text -> Normal

-- | Convert <a>Normal</a> to <a>Text</a>. This function just unwraps the
--   newtype, so there is zero runtime cost.
toText :: Normal -> Text
instance Typeable Normal
instance Eq Normal
instance Ord Normal
instance Data Normal
instance NFData Normal
instance IsString Normal
instance Monoid Normal
instance Read Normal
instance Show Normal


-- | Strings normalized according to Normalization Form Canonical
--   Decomposition.
module Data.Text.Normal.NFD

-- | Normalized text.
data Normal

-- | Convert <a>Text</a> efficiently to <a>Normal</a>.
fromText :: Text -> Normal

-- | Convert <a>Normal</a> to <a>Text</a>. This function just unwraps the
--   newtype, so there is zero runtime cost.
toText :: Normal -> Text
instance Typeable Normal
instance Eq Normal
instance Ord Normal
instance Data Normal
instance NFData Normal
instance IsString Normal
instance Monoid Normal
instance Read Normal
instance Show Normal


-- | Strings normalized according to Normalization Form Canonical
--   Composition.
module Data.Text.Normal.NFC

-- | Normalized text.
data Normal

-- | Convert <a>Text</a> efficiently to <a>Normal</a>.
fromText :: Text -> Normal

-- | Convert <a>Normal</a> to <a>Text</a>. This function just unwraps the
--   newtype, so there is zero runtime cost.
toText :: Normal -> Text
instance Typeable Normal
instance Eq Normal
instance Ord Normal
instance Data Normal
instance NFData Normal
instance IsString Normal
instance Monoid Normal
instance Read Normal
instance Show Normal
