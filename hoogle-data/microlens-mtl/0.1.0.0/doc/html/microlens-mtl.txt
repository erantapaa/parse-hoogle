-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | microlens support for Reader/Writer/State from mtl
--   
@package microlens-mtl
@version 0.1.0.0

module Lens.Micro.Mtl

-- | <a>view</a> is a synonym for (<a>^.</a>), generalised for
--   <a>MonadReader</a> (since functions are instances of the
--   <a>MonadReader</a> class).
--   
--   <pre>
--   &gt;&gt;&gt; view _1 (1, 2)
--   1
--   </pre>
--   
--   It's often used when dealing with environment, for instance:
--   
--   <pre>
--   doSomething :: (<a>MonadReader</a> Config m) =&gt; m Int
--   doSomething = do
--     thingy        &lt;- <a>view</a> setting1  -- same as “<a>asks</a> (^. setting1)”
--     anotherThingy &lt;- <a>view</a> setting2
--     ...
--   </pre>
view :: MonadReader s m => Getting a s a -> m a

-- | <a>use</a> is <a>view</a> which implicitly operates on the state.
--   
--   <pre>
--   <a>use</a> l = <a>gets</a> (<a>view</a> l)
--   </pre>
use :: MonadState s m => Getting a s a -> m a

-- | Assign value to the target. This is <a>.~</a> which works in
--   <a>State</a>.
--   
--   <pre>
--   l <a>.=</a> b = <a>modify</a> (l <a>.~</a> b)
--   </pre>
(.=) :: MonadState s m => ASetter s s a b -> b -> m ()

-- | Apply a function to the target. This is <a>%~</a> which works in
--   <a>State</a>.
--   
--   <pre>
--   &gt;&gt;&gt; execState (do _1 %= (+1); _2 %= reverse) (1,"hello")
--   (2,"olleh")
--   </pre>
(%=) :: MonadState s m => ASetter s s a b -> (a -> b) -> m ()

-- | Add a number to the target.
--   
--   <pre>
--   l <a>+=</a> x = l <a>%=</a> (+x)
--   </pre>
(+=) :: (MonadState s m, Num a) => ASetter s s a a -> a -> m ()

-- | Subtract a number from the target.
--   
--   <pre>
--   l <a>-=</a> x = l <a>%=</a> (<a>subtract</a> x)
--   </pre>
(-=) :: (MonadState s m, Num a) => ASetter s s a a -> a -> m ()

-- | Multiply the target by a number.
--   
--   <pre>
--   l <a>*=</a> x = l <a>%=</a> (*x)
--   </pre>
(*=) :: (MonadState s m, Num a) => ASetter s s a a -> a -> m ()

-- | Divide the target by a number.
--   
--   <pre>
--   l /<i>= x = l %= (</i>x)
--   </pre>
(//=) :: (MonadState s m, Fractional a) => ASetter s s a a -> a -> m ()
