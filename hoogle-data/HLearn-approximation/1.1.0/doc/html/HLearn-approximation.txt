-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Approximation algorithms for NP-hard problems
@package HLearn-approximation
@version 1.1.0


-- | Bin packing is one of the most well studied NP-hard problems. See
--   wikipedia for a detailed description
--   <a>https://en.wikipedia.org/wiki/Bin_packing</a>
module HLearn.NPHard.BinPacking
data BinPacking (n :: Nat) a
BinPacking :: !(SortedVector a) -> Map Int [a] -> BinPacking a
vector :: BinPacking a -> !(SortedVector a)
packing :: BinPacking a -> Map Int [a]
instance Read a => Read (BinPacking n a)
instance Show a => Show (BinPacking n a)
instance Eq a => Eq (BinPacking n a)
instance Ord a => Ord (BinPacking n a)
instance (Ord a, Ord (Ring a), Norm a, SingI Nat n) => HomTrainer (BinPacking n a)
instance Monad (BinPacking n)
instance Functor (BinPacking n)
instance (Ord a, Ord (Ring a), Norm a, SingI Nat n, Module (SortedVector a)) => Module (BinPacking n a)
instance HasRing (SortedVector a) => HasRing (BinPacking n a)
instance (Ord a, Ord (Ring a), Norm a, SingI Nat n, Group (SortedVector a)) => Group (BinPacking n a)
instance (Ord a, Ord (Ring a), Norm a, SingI Nat n) => Monoid (BinPacking n a)
instance (Ord a, Ord (Ring a), Norm a, SingI Nat n) => Abelian (BinPacking n a)


-- | See the wikipedia article for details about the Multiprocessor
--   Scheduling problem
--   <a>https://en.wikipedia.org/wiki/Multiprocessor_scheduling</a>
module HLearn.NPHard.Scheduling
data Scheduling (n :: Nat) a
Scheduling :: !(SortedVector a) -> Map Bin [a] -> Scheduling a
vector :: Scheduling a -> !(SortedVector a)
schedule :: Scheduling a -> Map Bin [a]

-- | Returns a list of all schedules. The schedules are represented by a
--   list of the elements within them.
getSchedules :: Scheduling n a -> [[a]]

-- | Returns the size of the largest bin
maxpartition :: (Ord (Ring a), Norm a) => Scheduling n a -> Ring a

-- | Returns the size of the smallest bin
minpartition :: (Ord (Ring a), Norm a) => Scheduling n a -> Ring a

-- | A schedule's spread is a measure of it's "goodness." The smaller the
--   spread, the better the schedule. It is equal to <a>maxpartition</a> -
--   <a>minpartition</a>
spread :: (Ord (Ring a), Norm a) => Scheduling n a -> Ring a
instance Read a => Read (Scheduling n a)
instance Show a => Show (Scheduling n a)
instance Eq a => Eq (Scheduling n a)
instance Ord a => Ord (Scheduling n a)
instance (Ord a, Ord (Ring a), Norm a, SingI Nat n) => HomTrainer (Scheduling n a)
instance Monad (Scheduling n)
instance Functor (Scheduling n)
instance (Ord a, Ord (Ring a), Norm a, SingI Nat n, Module (SortedVector a)) => Module (Scheduling n a)
instance HasRing (SortedVector a) => HasRing (Scheduling n a)
instance (Ord a, Ord (Ring a), Norm a, SingI Nat n, Group (SortedVector a)) => Group (Scheduling n a)
instance (Ord a, Ord (Ring a), Norm a, SingI Nat n) => Monoid (Scheduling n a)
instance (Ord a, Ord (Ring a), Norm a, SingI Nat n) => Abelian (Scheduling n a)
