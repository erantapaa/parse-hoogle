-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Creating Bar Charts in Haskell
--   
--   This package provides a program that generates bar charts from CSV
--   files and has special support for visualising the benchmark results of
--   the criterion and progression tools. It comes with an associated API
--   that can be used to generate custom bar charts in case the charts
--   generated by the command-line program are insufficient for your needs.
@package barchart
@version 0.1.1.1


-- | This library provides functions and data type for generating bar
--   charts, for example, from CSV files. If the functionality provided by
--   the command-line program is insufficient for your needs, you can use
--   the API provided by this library to draw custom bar charts.
--   
--   The library provides high-level functions to generate bar-chart values
--   from different types but also exports the underlying datatype and all
--   functions used for rendering such that you have access to all internal
--   details.
module Graphics.BarChart

-- | The first column of the CSV file is parsed as names of the bars. The
--   height of each bar corresponds to the sum of all subsequent entries.
--   If there is more than one entry, the bars are split into blocks.
writeMultiBarChart :: Config -> FilePath -> [Label] -> IO ()

-- | The first column of the CSV file is parsed as names of the bars. Three
--   entries following each bar name are parsed as mean, minimum, and
--   maximum value and depicted using an interval next to the bar.
writeIntervalChart :: Config -> FilePath -> IO ()

-- | The first column of the CSV file is parsed as names of the bars. The
--   entries following each bar name are parsed as triples of mean,
--   minimum, and maximum value and depicted using an interval next to the
--   bar. The number of subsequent entries must be a multiple of three and
--   each bar is divided into a corresponding number of blocks.
writeMultiBarIntervalChart :: Config -> FilePath -> [Label] -> IO ()

-- | Specifies how bar charts are rendered
data Config
Config :: FilePath -> OutputType -> Label -> Label -> Label -> [SomeColor] -> (Int, Int) -> Double -> Double -> Double -> Config

-- | file to which the bar chart is written
outFile :: Config -> FilePath

-- | Type of generated file
outputType :: Config -> OutputType

-- | Title of the generated chart
caption :: Config -> Label

-- | Label of the x-axis
xLabel :: Config -> Label

-- | label of the y-axis
yLabel :: Config -> Label

-- | Colors for the different blocks of a bar. If there are fewer colors
--   than blocks, then colors are reused in a cyclic fashion.
barColors :: Config -> [SomeColor]

-- | Dimensions of the generated chart. The image will be a bit larger
--   because of additiona space used for labels.
dimensions :: Config -> (Int, Int)

-- | Scales the height of the chart. The given ratio is multiplied with the
--   <a>size</a> of bars as given by the corresponding <a>Measurable</a>
--   instance.
ratio :: Config -> Double

-- | Specifies the size of fonts used for labels.
fontSize :: Config -> Double

-- | Value between 0.0 and 1.0 which pecifies the width of bars. Zero means
--   that the bars are lines and 1.0 means that the is no space between
--   bars.
barRatio :: Config -> Double
type Label = String

-- | Used by <a>writeMultiBarChart</a> to create a <a>BarChart</a> from a
--   CSV file.
multiBarChart :: (Measurable a, Read a) => [Label] -> CSV -> BarChart a

-- | Used by <a>writeIntervalChart</a> to create a <a>BarChart</a> from a
--   CSV file.
intervalChart :: (Measurable a, Read a) => CSV -> BarChart a

-- | Used by <a>writeMultiBarIntervalChart</a> to create a <a>BarChart</a>
--   from | a CSV file.
multiBarIntervalChart :: (Measurable a, Read a) => [Label] -> CSV -> BarChart a

-- | Instances of this class can be depicted in bar charts.
class Num a => Measurable a
size :: Measurable a => a -> Double

-- | Values of this type are drawn as charts where each bar may consist of
--   multiple blocks.
data MultiBars a
MultiBars :: [Label] -> [(Label, [a])] -> MultiBars a

-- | Converts a CSV file to be drawn as a chart where each bar may consist
--   of multiple blocks.
parseMultiBars :: Read a => [Label] -> CSV -> MultiBars a

-- | Converts bars with multiple blocks into their <a>BarChart</a>
--   representation.
drawMultiBars :: Measurable a => MultiBars a -> BarChart a

-- | Values of this type are drawn as charts where each bar has an
--   associated deviation depicted as an interval next to the bar.
newtype Intervals a
Intervals :: [(Label, (a, a, a))] -> Intervals a

-- | Converts a CSV file to be drawn as a chart where each bar has an
--   attached deviation depicted as an interval next to the bar.
parseIntervals :: Read a => CSV -> Intervals a

-- | Converts bars with associated deviation into their <a>BarChart</a>
--   representation.
drawIntervals :: Measurable a => Intervals a -> BarChart a

-- | Values of this type are drawn as charts where each bar may be divided
--   into multiple blocks with an associated deviation depicted as
--   intervals next to them.
data MultiBarIntervals a
MBIntervals :: [Label] -> [(Label, [(a, a, a)])] -> MultiBarIntervals a

-- | Converts a CSV file to be drawn as a chart where each bar may consist
--   of multiple blocks which have an attached deviation depicted as an
--   interval next to them.
parseMultiBarIntervals :: Read a => [Label] -> CSV -> MultiBarIntervals a

-- | Converts bars with multiple blocks and associated deviations into
--   their <a>BarChart</a> representation.
drawMultiBarIntervals :: Measurable a => MultiBarIntervals a -> BarChart a

-- | Merges several interval charts into a chart where each bar has
--   multiple blocks that represent the different interval charts.
mergeIntervals :: Num a => [(Label, Intervals a)] -> MultiBarIntervals a

-- | Swaps bars and blocks of a chart that contains both and associated
--   deviations.
flipMultiBarIntervals :: MultiBarIntervals a -> MultiBarIntervals a

-- | Bar charts consist of a (possibly empty) list of labels for the
--   diferent blcks of bars and the bars themselves.
data BarChart a
BarChart :: [Label] -> [Bar a] -> BarChart a

-- | Labels of blocks in bars. Drawn as a legend if non-empty.
block_labels :: BarChart a -> [Label]

-- | The different bars of the chart.
bars :: BarChart a -> [Bar a]

-- | Represents one bar of a bar chart.
data Bar a
Bar :: Label -> [Block a] -> Bar a

-- | Label written underneath
label :: Bar a -> Label

-- | Different blocks of the bar. Simple charts contain only one block per
--   bar.
blocks :: Bar a -> [Block a]

-- | Bocks either have a single associated value or a mean value along with
--   minimum and maximum deviation.
data Block a
Value :: a -> Block a
Interval :: a -> a -> a -> Block a
mean :: Block a -> a
lower :: Block a -> a
upper :: Block a -> a

-- | Renders a bar chart as <tt>barchart.png</tt> according to the default
--   configuration <a>conf</a>.
render :: Measurable a => BarChart a -> IO ()

-- | Renders a bar chart according to a custom configuration.
renderWith :: Measurable a => Config -> BarChart a -> IO ()

-- | The default configuration generates a PNG file with a chart of size
--   600x300 pixels. The output file is left unspecified and you should
--   provide one if you use a cstom configuration.
conf :: Config

-- | This function can be used to embed bar charts into bigger
--   <a>Diagram</a>s.
diagram :: Measurable a => Config -> BarChart a -> Diagram

-- | Reads a summary file generated by criterion and writes a corresponding
--   bar chart.
writeCriterionChart :: Config -> FilePath -> IO ()

-- | Reads multiple summary files generated by criterion and creates a bar
--   chart to compare them. If the first argument is <a>True</a> the chart
--   is flipped such that the bars represent different benchmarks rather
--   than summaries.
writeComparisonChart :: Bool -> Config -> [FilePath] -> IO ()

-- | Used by <a>writeCriterionChart</a> to generate a bar chart from
--   criterion's summary file.
criterionChart :: CSV -> BarChart RunTime

-- | Used by <a>writeComparisonChart</a> to generate a bar chart from
--   multiple summary files generated by criterion.
comparisonChart :: Bool -> [(Label, CSV)] -> BarChart RunTime

-- | Wrapper around the <a>Double</a> type used in bar charts for criterion
--   summary files. It has a custom <a>Show</a> instance to produce labels
--   like <tt>10ms</tt> or <tt>2h</tt> rather than showing the plain
--   <a>Double</a> values.
newtype RunTime
RunTime :: Double -> RunTime

-- | Reads the <tt>plot.csv</tt> file generated by progression and creates
--   a corresponding bar chart.
writeProgressionChart :: Bool -> Config -> FilePath -> [Label] -> IO ()

-- | Used by <a>writeProgressionChart</a> to generate a bar chart from
--   progression's <tt>plot.csv</tt> file.
progressionChart :: Bool -> [Label] -> CSV -> BarChart Ratio

-- | Wrapper around the double type used in bar charts for progression
--   summaries. It has a custom <a>Show</a> instance that shows the
--   <a>Double</a> values as percentages.
newtype Ratio
Ratio :: Double -> Ratio
