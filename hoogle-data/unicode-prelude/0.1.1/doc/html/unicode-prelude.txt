-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Unicode notation for some definitions in Prelude
--   
--   This package adds unicode notation for some definitions in Prelude.
@package unicode-prelude
@version 0.1.1


-- | <i>If the Haddock documentation is unreadable, look the source.</i>
--   
--   This module adds unicode notation for some definitions in Prelude.
--   
--   The following notations are built in GHC (enabled with the
--   <tt>UnicodeSyntax</tt> language extension):
--   
--   <ul>
--   <li>'' ('\x2192') is equivalent to '-&gt;'.</li>
--   <li>'' ('\x2190') is equivalent to '&lt;-'.</li>
--   <li>'' ('\x2237') is equivalent to '::'.</li>
--   <li>'' ('\x21d2') is equivalent to '=&gt;'.</li>
--   <li>'' ('\x2200') is equivalent to <tt>forall</tt> (use the
--   <tt>Rank2Types</tt> language extension).</li>
--   </ul>
--   
--   The following notations are <i>not</i> built in GHC (see also
--   <a>http://hackage.haskell.org/trac/haskell-prime/wiki/UnicodeInHaskellSource</a>):
--   
--   <ul>
--   <li>'' ('\x2025') is equivalent to '..'.</li>
--   <li>'' ('\x2203') is equivalent to <tt>exists</tt> (with
--   <tt>ExistentialQuantification</tt>).</li>
--   </ul>
--   
--   Usage examples
--   
--   <pre>
--   even  succ    Integral a  a  Bool 
--   </pre>
--   
--   <pre>
--   25  [xx | x[1..10], x2]    Bool
--   </pre>
--   
--   <pre>
--   foldl (flip (:)) ()    [a]  [a]
--   </pre>
--   
--   <pre>
--   (\a  a  a  a)    a  a : a : a
--   </pre>
--   
--   <pre>
--   (\a b  ()(a  b)  ()a  ()b)    Bool  Bool  Bool
--   </pre>
module Prelude.Unicode

-- | Pair.
type :× a b = (a, b)

-- | Pair creation. It is not a constructor so can not be used in patterns.
(×) :: a -> b -> a :× b

-- | Boolean <a>not</a>.
(¬) :: Bool -> Bool

-- | Boolean <a>and</a>.
(∧) :: Bool -> Bool -> Bool

-- | Boolean <a>or</a>.
(∨) :: Bool -> Bool -> Bool

-- | Boolean equality check.
(⇔) :: Bool -> Bool -> Bool

-- | Equal.
(≡) :: Eq a => a -> a -> Bool

-- | Not equal.
(≠) :: Eq a => a -> a -> Bool

-- | Not equal.
(≢) :: Eq a => a -> a -> Bool

-- | Less or equal.
(≤) :: Ord a => a -> a -> Bool

-- | Greater or equal.
(≥) :: Ord a => a -> a -> Bool

-- | Not less.
(≮) :: Ord a => a -> a -> Bool

-- | Not greater.
(≯) :: Ord a => a -> a -> Bool

-- | <ol>
--   <li>1415..</li>
--   </ol>
π :: Floating a => a

-- | Division.
(÷) :: Fractional a => a -> a -> a

-- | Multiplication.
(⋅) :: Num a => a -> a -> a

-- | Function composition.
(◦) :: (b -> c) -> (a -> b) -> (a -> c)

-- | The empty list.
(∅) :: [a]

-- | The list membership predicate.
(∈) :: Eq a => a -> [a] -> Bool

-- | The negation of the list membership predicate.
(∉) :: Eq a => a -> [a] -> Bool

-- | Undefined value.
(⊥) :: a
