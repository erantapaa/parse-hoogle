-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Lab Assignments Environment at Univeriteit Twente
--   
@package twentefp-number
@version 0.1.0.2

module FPPrac.Prelude.Number

-- | Combined integral and floating number type
data Number
I :: Integer -> Number
F :: Double -> Number
instance Read Number
instance Floating Number
instance RealFrac Number
instance Fractional Number
instance Integral Number
instance Enum Number
instance Real Number
instance Num Number
instance Show Number
instance Ord Number
instance Eq Number

module FPPrac

-- | Combined integral and floating number type
data Number
ord :: Char -> Number
chr :: Number -> Char

-- | <i>O(n)</i>. <a>length</a> returns the length of a finite list as a
--   <a>Number</a>.
length :: [a] -> Number

-- | List index (subscript) operator, starting from 0.
(!!) :: [a] -> Number -> a

-- | <a>replicate</a> <tt>n x</tt> is a list of length <tt>n</tt> with
--   <tt>x</tt> the value of every element.
--   
--   Fails when <tt>n</tt> is not an integral number
replicate :: Number -> a -> [a]

-- | <a>take</a> <tt>n</tt>, applied to a list <tt>xs</tt>, returns the
--   prefix of <tt>xs</tt> of length <tt>n</tt>, or <tt>xs</tt> itself if
--   <tt>n &gt; <a>length</a> xs</tt>:
--   
--   <pre>
--   take 5 "Hello World!" == "Hello"
--   take 3 [1,2,3,4,5] == [1,2,3]
--   take 3 [1,2] == [1,2]
--   take 3 [] == []
--   take (-1) [1,2] == []
--   take 0 [1,2] == []
--   </pre>
--   
--   Fails when <tt>n</tt> is not an integral number
take :: Number -> [a] -> [a]

-- | <a>drop</a> <tt>n xs</tt> returns the suffix of <tt>xs</tt> after the
--   first <tt>n</tt> elements, or <tt>[]</tt> if <tt>n &gt; <a>length</a>
--   xs</tt>:
--   
--   <pre>
--   drop 6 "Hello World!" == "World!"
--   drop 3 [1,2,3,4,5] == [4,5]
--   drop 3 [1,2] == []
--   drop 3 [] == []
--   drop (-1) [1,2] == [1,2]
--   drop 0 [1,2] == [1,2]
--   </pre>
--   
--   Fails when <tt>n</tt> is not an integral number
drop :: Number -> [a] -> [a]

-- | <a>splitAt</a> <tt>n xs</tt> returns a tuple where first element is
--   <tt>xs</tt> prefix of length <tt>n</tt> and second element is the
--   remainder of the list:
--   
--   <pre>
--   splitAt 6 "Hello World!" == ("Hello ","World!")
--   splitAt 3 [1,2,3,4,5] == ([1,2,3],[4,5])
--   splitAt 1 [1,2,3] == ([1],[2,3])
--   splitAt 3 [1,2,3] == ([1,2,3],[])
--   splitAt 4 [1,2,3] == ([1,2,3],[])
--   splitAt 0 [1,2,3] == ([],[1,2,3])
--   splitAt (-1) [1,2,3] == ([],[1,2,3])
--   </pre>
--   
--   It is equivalent to <tt>(<a>take</a> n xs, <a>drop</a> n xs)</tt> when
--   <tt>n</tt> is not <tt>_|_</tt> (<tt>splitAt _|_ xs = _|_</tt>).
--   
--   Fails when <tt>n</tt> is not an integral number
splitAt :: Number -> [a] -> ([a], [a])
