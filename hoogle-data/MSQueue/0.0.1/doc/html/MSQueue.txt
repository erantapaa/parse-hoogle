-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Michael-Scott queue.
--   
@package MSQueue
@version 0.0.1


-- | An Implementation of a Michael-Scott Lock-Free queues.
module Data.NonBlocking.LockFree.MSQueue

-- | Implementation of Michael-Scott Lock-Free queues. Specification and
--   pseudo-code can be found at
--   <a>http://www.research.ibm.com/people/m/michael/podc-1996.pdf</a>.
--   Works with any combination of <a>Monad</a> and reference satsfying the
--   <a>MonadAtomicRef</a> class.
data MSQueue r a

-- | <a>MSQueue</a> inside the <a>IO</a> <a>Monad</a>.
type MSQueueIO a = MSQueue IORef a

-- | <a>MSQueue</a> inside the <a>STM</a> <a>Monad</a>.
type MSQueueSTM a = MSQueue TVar a

-- | Creates a new instance of <a>MSQueue</a>. Internally implemented with
--   a reference of type r, which is why they must be atomically
--   modifiable. Initially empty.
newMSQueue :: MonadAtomicRef r m => m (MSQueue r a)

-- | Dequeues an element from a <a>MSQueue</a> in a lock-free manner.
--   Returns Nothing if the queue is empty, otherwise return the element
--   wrapped in a <a>Just</a>.
dequeueMSQueue :: MonadAtomicRef r m => MSQueue r a -> m (Maybe a)

-- | Enqueues an element in a <a>MSQueue</a> in a lock-free manner.
enqueueMSQueue :: MonadAtomicRef r m => MSQueue r a -> a -> m ()
instance Eq a => Eq (MSQueueElem r a)
