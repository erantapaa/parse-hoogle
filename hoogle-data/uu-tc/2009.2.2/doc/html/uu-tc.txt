-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell 98 parser combintors for INFOB3TC at Utrecht University
--   
--   Course software for INFOB3TC (Languages &amp; Compilers)
--   
--   This library currently contains three Haskell 98 parser combinator
--   libraries.
--   
--   <ul>
--   <li>The default library, available as <tt>ParseLib</tt> or more
--   explicitly by importing <tt>ParseLib.Simple</tt>, is the one described
--   in the lecture notes, using a type synonym as the type for
--   parsers.</li>
--   <li>The second library can be chosen by importing
--   <tt>ParseLib.Abstract</tt>. It defines the same functions as
--   <tt>ParseLib.Simple</tt>, but keeps the parser type abstract. * The
--   third library is an implementation of Koen Claessen's <i>Parallel
--   Parsing Processes</i>, available as <tt>ParseLib.Parallel</tt>.</li>
--   </ul>
--   
--   In future versions of this package, more libraries with more advanced
--   implementations of parser combinators may be added.
@package uu-tc
@version 2009.2.2

module ParseLib.Parallel.Core

-- | The parser is a CPS version of Parser'
data Parser s r

-- | Parses any single symbol.
anySymbol :: Parser s s

-- | Takes a predicate and returns a parser that parses a single symbol
--   satisfying that predicate.
satisfy :: (s -> Bool) -> Parser s s

-- | The identity of <a>&lt;|&gt;</a>
empty :: Alternative f => forall a. f a

-- | Same as <a>empty</a>; provided for compatibility with the lecture
--   notes.
failp :: Parser s a

-- | Parser that always succeeds, i.e., for epsilon.
succeed :: a -> Parser s a

-- | Lift a value.
pure :: Applicative f => forall a. a -> f a

-- | An associative binary operation
(<|>) :: Alternative f => forall a. f a -> f a -> f a

-- | Biased choice. Not implemented by the parallel parser combinators.
--   Just maps to parallel choice.
(<<|>) :: Parser s a -> Parser s a -> Parser s a

-- | Sequential application.
(<*>) :: Applicative f => forall a b. f (a -> b) -> f a -> f b

-- | An infix synonym for <a>fmap</a>.
(<$>) :: Functor f => (a -> b) -> f a -> f b

-- | Sequentially compose two actions, passing any value produced by the
--   first as an argument to the second.
(>>=) :: Monad m => forall a b. m a -> (a -> m b) -> m b

-- | Returns the rest of the input without consuming anything.
look :: Parser s [s]

-- | Runs a parser to a given string.
parse :: Parser s a -> [s] -> [(a, [s])]
instance MonadPlus (Parser s)
instance Monad (Parser s)
instance Alternative (Parser s)
instance Applicative (Parser s)
instance Functor (Parser s)

module ParseLib.Parallel.Derived

-- | Variant of <a>&lt;$&gt;</a> that ignores the result of the parser.
--   
--   <pre>
--   f &lt;$ p = const f &lt;$&gt; p
--   </pre>
(<$) :: b -> Parser s a -> Parser s b

-- | Variant of <a>&lt;*&gt;</a> that ignores the result of the right
--   argument.
--   
--   <pre>
--   f &lt;* p = const &lt;$&gt; p &lt;*&gt; q
--   </pre>
(<*) :: Parser s a -> Parser s b -> Parser s a

-- | Variant of <a>*&gt;</a> that ignores the result of the left argument.
--   
--   <pre>
--   f *&gt; p = flip const &lt;$&gt; p &lt;*&gt; q
--   </pre>
(*>) :: Parser s a -> Parser s b -> Parser s b

-- | Parser for epsilon that does return '()'.
epsilon :: Parser s ()

-- | Parses a specific given symbol.
symbol :: Eq s => s -> Parser s s

-- | Parses a specific given sequence of symbols.
token :: Eq s => [s] -> Parser s [s]

-- | Takes three parsers: a delimiter, the parser for the content, and
--   another delimiter. Constructs a sequence of the three, but returns
--   only the result of the enclosed parser.
pack :: Parser s a -> Parser s b -> Parser s c -> Parser s b

-- | Takes a list of parsers and combines them in sequence, returning a
--   list of results.
sequence :: [Parser s a] -> Parser s [a]

-- | Takes a list of parsers and combines them using choice.
choice :: [Parser s a] -> Parser s a

-- | Parses an optional element. Takes the default value as its second
--   argument.
option :: Parser s a -> a -> Parser s a

-- | Variant of <a>option</a> that returns a <a>Maybe</a>, provided for
--   compatibility with the applicative interface.
optional :: Parser s a -> Parser s (Maybe a)

-- | Parses many, i.e., zero or more, occurrences of a given parser.
many :: Parser s a -> Parser s [a]

-- | Parser some, i.e., one or more, occurrences of a given parser.
some :: Parser s a -> Parser s [a]

-- | Same as <a>some</a>. Provided for compatibility with the lecture
--   notes.
many1 :: Parser s a -> Parser s [a]

-- | Takes a parser <tt>p</tt> and a separator parser <tt>s</tt>. Parses a
--   sequence of <tt>p</tt>s that is separated by <tt>s</tt>s.
listOf :: Parser s a -> Parser s b -> Parser s [a]

-- | Takes a parser <tt>pe</tt> and an operator parser <tt>po</tt>. Parses
--   a sequence of <tt>pe</tt>s separated by <tt>po</tt>s. The results are
--   combined using the operator associated with <tt>po</tt> in a
--   right-associative way.
chainr :: Parser s a -> Parser s (a -> a -> a) -> Parser s a

-- | Takes a parser <tt>pe</tt> and an operator parser <tt>po</tt>. Parses
--   a sequence of <tt>pe</tt>s separated by <tt>po</tt>s. The results are
--   combined using the operator associated with <tt>po</tt> in a
--   left-associative way.
chainl :: Parser s a -> Parser s (a -> a -> a) -> Parser s a

-- | Greedy variant of <a>many</a>.
greedy :: Parser s b -> Parser s [b]

-- | Greedy variant of <a>many1</a>.
greedy1 :: Parser s b -> Parser s [b]

-- | Succeeds only on the end of the input.
eof :: Parser s ()

module ParseLib.Parallel.Applications
digit :: Parser Char Char
newdigit :: Parser Char Int
natural :: Parser Char Int
integer :: Parser Char Int
identifier :: Parser Char String
parenthesised :: Parser Char a -> Parser Char a
bracketed :: Parser Char a -> Parser Char a
braced :: Parser Char a -> Parser Char a
commaList :: Parser Char a -> Parser Char [a]
semiList :: Parser Char a -> Parser Char [a]

module ParseLib.Parallel

module ParseLib.Simple.Core

-- | An input string is mapped to a list of successful parses. For each
--   succesful parse, we return the result of type <tt>r</tt>, and the
--   remaining input string. The input must be a list of symbols.
type Parser s r = [s] -> [(r, [s])]

-- | Parses any single symbol.
anySymbol :: Parser s s

-- | Takes a predicate and returns a parser that parses a single symbol
--   satisfying that predicate.
satisfy :: (s -> Bool) -> Parser s s

-- | Parser for the empty language, i.e., parser that always fails.
empty :: Parser s a

-- | Same as <a>empty</a>; provided for compatibility with the lecture
--   notes.
failp :: Parser s a

-- | Parser that always succeeds, i.e., for epsilon.
succeed :: a -> Parser s a

-- | Same as <a>succeed</a>; provided for compatiblity with the applicative
--   interface.
pure :: a -> Parser s a

-- | Choice between two parsers with the same result type.
(<|>) :: Parser s a -> Parser s a -> Parser s a
(<<|>) :: (t -> [a]) -> (t -> [a]) -> t -> [a]

-- | Biased choice. If the left hand side parser succeeds, the right hand
--   side is not considered. Use with care!
--   
--   Sequence of two parsers.
(<*>) :: Parser s (b -> a) -> Parser s b -> Parser s a

-- | Map a function over the results of a parser. The <a>&lt;$&gt;</a>
--   combinator can also be defined in terms of <a>succeed</a> and
--   <a>&lt;*&gt;</a>:
--   
--   <pre>
--   f &lt;$&gt; p  =  succeed f &lt;*&gt; p
--   </pre>
(<$>) :: (a -> b) -> Parser s a -> Parser s b

-- | Monadic bind. Do not use this combinator unless absolutely required.
--   Most sequencing can be done with <a>&lt;*&gt;</a>.
(>>=) :: Parser s a -> (a -> Parser s b) -> Parser s b

-- | Returns the rest of the input without consuming anything.
look :: Parser s [s]

-- | For compatibility with the <a>newtype</a> version of the library: runs
--   a parser on a given string.
parse :: Parser s a -> [s] -> [(a, [s])]

module ParseLib.Abstract.Core

-- | An input string is mapped to a list of successful parses. For each
--   succesful parse, we return the result of type <tt>r</tt>, and the
--   remaining input string. The input must be a list of symbols.
data Parser s r

-- | Parses any single symbol.
anySymbol :: Parser s s

-- | Takes a predicate and returns a parser that parses a single symbol
--   satisfying that predicate.
satisfy :: (s -> Bool) -> Parser s s

-- | The identity of <a>&lt;|&gt;</a>
empty :: Alternative f => forall a. f a

-- | Same as <a>empty</a>; provided for compatibility with the lecture
--   notes.
failp :: Parser s a

-- | Parser that always succeeds, i.e., for epsilon.
succeed :: a -> Parser s a

-- | Lift a value.
pure :: Applicative f => forall a. a -> f a

-- | An associative binary operation
(<|>) :: Alternative f => forall a. f a -> f a -> f a

-- | Biased choice. If the left hand side parser succeeds, the right hand
--   side is not considered. Use with care!
(<<|>) :: Parser s a -> Parser s a -> Parser s a

-- | Sequential application.
(<*>) :: Applicative f => forall a b. f (a -> b) -> f a -> f b

-- | An infix synonym for <a>fmap</a>.
(<$>) :: Functor f => (a -> b) -> f a -> f b

-- | Sequentially compose two actions, passing any value produced by the
--   first as an argument to the second.
(>>=) :: Monad m => forall a b. m a -> (a -> m b) -> m b

-- | Returns the rest of the input without consuming anything.
look :: Parser s [s]

-- | Runs a parser on a given string.
parse :: Parser s a -> [s] -> [(a, [s])]
instance MonadPlus (Parser s)
instance Monad (Parser s)
instance Alternative (Parser s)
instance Applicative (Parser s)
instance Functor (Parser s)

module ParseLib.Abstract.Derived

-- | Variant of <a>&lt;$&gt;</a> that ignores the result of the parser.
--   
--   <pre>
--   f &lt;$ p = const f &lt;$&gt; p
--   </pre>
(<$) :: b -> Parser s a -> Parser s b

-- | Variant of <a>&lt;*&gt;</a> that ignores the result of the right
--   argument.
--   
--   <pre>
--   f &lt;* p = const &lt;$&gt; p &lt;*&gt; q
--   </pre>
(<*) :: Parser s a -> Parser s b -> Parser s a

-- | Variant of <a>*&gt;</a> that ignores the result of the left argument.
--   
--   <pre>
--   f *&gt; p = flip const &lt;$&gt; p &lt;*&gt; q
--   </pre>
(*>) :: Parser s a -> Parser s b -> Parser s b

-- | Parser for epsilon that does return '()'.
epsilon :: Parser s ()

-- | Parses a specific given symbol.
symbol :: Eq s => s -> Parser s s

-- | Parses a specific given sequence of symbols.
token :: Eq s => [s] -> Parser s [s]

-- | Takes three parsers: a delimiter, the parser for the content, and
--   another delimiter. Constructs a sequence of the three, but returns
--   only the result of the enclosed parser.
pack :: Parser s a -> Parser s b -> Parser s c -> Parser s b

-- | Takes a list of parsers and combines them in sequence, returning a
--   list of results.
sequence :: [Parser s a] -> Parser s [a]

-- | Takes a list of parsers and combines them using choice.
choice :: [Parser s a] -> Parser s a

-- | Parses an optional element. Takes the default value as its second
--   argument.
option :: Parser s a -> a -> Parser s a

-- | Variant of <a>option</a> that returns a <a>Maybe</a>, provided for
--   compatibility with the applicative interface.
optional :: Parser s a -> Parser s (Maybe a)

-- | Parses many, i.e., zero or more, occurrences of a given parser.
many :: Parser s a -> Parser s [a]

-- | Parser some, i.e., one or more, occurrences of a given parser.
some :: Parser s a -> Parser s [a]

-- | Same as <a>some</a>. Provided for compatibility with the lecture
--   notes.
many1 :: Parser s a -> Parser s [a]

-- | Takes a parser <tt>p</tt> and a separator parser <tt>s</tt>. Parses a
--   sequence of <tt>p</tt>s that is separated by <tt>s</tt>s.
listOf :: Parser s a -> Parser s b -> Parser s [a]

-- | Takes a parser <tt>pe</tt> and an operator parser <tt>po</tt>. Parses
--   a sequence of <tt>pe</tt>s separated by <tt>po</tt>s. The results are
--   combined using the operator associated with <tt>po</tt> in a
--   right-associative way.
chainr :: Parser s a -> Parser s (a -> a -> a) -> Parser s a

-- | Takes a parser <tt>pe</tt> and an operator parser <tt>po</tt>. Parses
--   a sequence of <tt>pe</tt>s separated by <tt>po</tt>s. The results are
--   combined using the operator associated with <tt>po</tt> in a
--   left-associative way.
chainl :: Parser s a -> Parser s (a -> a -> a) -> Parser s a

-- | Greedy variant of <a>many</a>.
greedy :: Parser s b -> Parser s [b]

-- | Greedy variant of <a>many1</a>.
greedy1 :: Parser s b -> Parser s [b]

-- | Succeeds only on the end of the input.
eof :: Parser s ()

module ParseLib.Abstract.Applications
digit :: Parser Char Char
newdigit :: Parser Char Int
natural :: Parser Char Int
integer :: Parser Char Int
identifier :: Parser Char String
parenthesised :: Parser Char a -> Parser Char a
bracketed :: Parser Char a -> Parser Char a
braced :: Parser Char a -> Parser Char a
commaList :: Parser Char a -> Parser Char [a]
semiList :: Parser Char a -> Parser Char [a]

module ParseLib.Abstract

module ParseLib.Simple.Derived

-- | Variant of <a>&lt;$&gt;</a> that ignores the result of the parser.
--   
--   <pre>
--   f &lt;$ p = const f &lt;$&gt; p
--   </pre>
(<$) :: b -> Parser s a -> Parser s b

-- | Variant of <a>&lt;*&gt;</a> that ignores the result of the right
--   argument.
--   
--   <pre>
--   f &lt;* p = const &lt;$&gt; p &lt;*&gt; q
--   </pre>
(<*) :: Parser s a -> Parser s b -> Parser s a

-- | Variant of <a>*&gt;</a> that ignores the result of the left argument.
--   
--   <pre>
--   f *&gt; p = flip const &lt;$&gt; p &lt;*&gt; q
--   </pre>
(*>) :: Parser s a -> Parser s b -> Parser s b

-- | Parser for epsilon that does return '()'.
epsilon :: Parser s ()

-- | Parses a specific given symbol.
symbol :: Eq s => s -> Parser s s

-- | Parses a specific given sequence of symbols.
token :: Eq s => [s] -> Parser s [s]

-- | Takes three parsers: a delimiter, the parser for the content, and
--   another delimiter. Constructs a sequence of the three, but returns
--   only the result of the enclosed parser.
pack :: Parser s a -> Parser s b -> Parser s c -> Parser s b

-- | Takes a list of parsers and combines them in sequence, returning a
--   list of results.
sequence :: [Parser s a] -> Parser s [a]

-- | Takes a list of parsers and combines them using choice.
choice :: [Parser s a] -> Parser s a

-- | Parses an optional element. Takes the default value as its second
--   argument.
option :: Parser s a -> a -> Parser s a

-- | Variant of <a>option</a> that returns a <a>Maybe</a>, provided for
--   compatibility with the applicative interface.
optional :: Parser s a -> Parser s (Maybe a)

-- | Parses many, i.e., zero or more, occurrences of a given parser.
many :: Parser s a -> Parser s [a]

-- | Parser some, i.e., one or more, occurrences of a given parser.
some :: Parser s a -> Parser s [a]

-- | Same as <a>some</a>. Provided for compatibility with the lecture
--   notes.
many1 :: Parser s a -> Parser s [a]

-- | Takes a parser <tt>p</tt> and a separator parser <tt>s</tt>. Parses a
--   sequence of <tt>p</tt>s that is separated by <tt>s</tt>s.
listOf :: Parser s a -> Parser s b -> Parser s [a]

-- | Takes a parser <tt>pe</tt> and an operator parser <tt>po</tt>. Parses
--   a sequence of <tt>pe</tt>s separated by <tt>po</tt>s. The results are
--   combined using the operator associated with <tt>po</tt> in a
--   right-associative way.
chainr :: Parser s a -> Parser s (a -> a -> a) -> Parser s a

-- | Takes a parser <tt>pe</tt> and an operator parser <tt>po</tt>. Parses
--   a sequence of <tt>pe</tt>s separated by <tt>po</tt>s. The results are
--   combined using the operator associated with <tt>po</tt> in a
--   left-associative way.
chainl :: Parser s a -> Parser s (a -> a -> a) -> Parser s a

-- | Greedy variant of <a>many</a>.
greedy :: Parser s b -> Parser s [b]

-- | Greedy variant of <a>many1</a>.
greedy1 :: Parser s b -> Parser s [b]

-- | Succeeds only on the end of the input.
eof :: Parser s ()

module ParseLib.Simple.Applications
digit :: Parser Char Char
newdigit :: Parser Char Int
natural :: Parser Char Int
integer :: Parser Char Int
identifier :: Parser Char String
parenthesised :: Parser Char a -> Parser Char a
bracketed :: Parser Char a -> Parser Char a
braced :: Parser Char a -> Parser Char a
commaList :: Parser Char a -> Parser Char [a]
semiList :: Parser Char a -> Parser Char [a]

module ParseLib.Simple

module ParseLib
