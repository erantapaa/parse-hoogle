-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Modular Haskell Web Server
--   
--   A web server with a module system and support for CGI. Based on Simon
--   Marlow's original Haskell Web Server.
@package mohws
@version 0.2.1.1

module Paths_mohws
version :: Version
getBinDir :: IO FilePath
getLibDir :: IO FilePath
getDataDir :: IO FilePath
getLibexecDir :: IO FilePath
getDataFileName :: FilePath -> IO FilePath

module Network.MoHWS.Logger.Level
data T
Debug :: T
Info :: T
Notice :: T
Warn :: T
Error :: T
Crit :: T
Alert :: T
Emerg :: T
instance Eq T
instance Ord T
instance Enum T
instance Bounded T
instance Read T
instance Show T

module Network.MoHWS.HTTP.Version
data T
Cons :: Int -> Int -> T
major :: T -> Int
minor :: T -> Int
http1_1 :: T
http1_0 :: T
pInRequest :: Parser T
instance Eq T
instance Ord T
instance Show T

module Network.MoHWS.HTTP.Header
data Group
group :: [T] -> Group
ungroup :: Group -> [T]
setGroup :: HasHeaders x => x -> Group -> x
getGroup :: HasHeaders x => x -> Group
list :: HasHeaders x => x -> [T]
modifyMany :: HasHeaders x => ([T] -> [T]) -> x -> x
type T = Header

-- | The <tt>Header</tt> data type pairs header names &amp; values.
data Header :: *
Header :: HeaderName -> String -> Header
make :: Name -> String -> T
getName :: T -> Name
getValue :: T -> String
name :: T T Name
value :: T T String
type Name = HeaderName

-- | HTTP <tt>HeaderName</tt> type, a Haskell data constructor for each
--   specification-defined header, prefixed with <tt>Hdr</tt> and
--   CamelCased, (i.e., eliding the <tt>-</tt> in the process.) Should you
--   require using a custom header, there's the <tt>HdrCustom</tt>
--   constructor which takes a <tt>String</tt> argument.
--   
--   Encoding HTTP header names differently, as Strings perhaps, is an
--   equally fine choice..no decidedly clear winner, but let's stick with
--   data constructors here.
data HeaderName :: *
HdrCacheControl :: HeaderName
HdrConnection :: HeaderName
HdrDate :: HeaderName
HdrPragma :: HeaderName
HdrTransferEncoding :: HeaderName
HdrUpgrade :: HeaderName
HdrVia :: HeaderName
HdrAccept :: HeaderName
HdrAcceptCharset :: HeaderName
HdrAcceptEncoding :: HeaderName
HdrAcceptLanguage :: HeaderName
HdrAuthorization :: HeaderName
HdrCookie :: HeaderName
HdrExpect :: HeaderName
HdrFrom :: HeaderName
HdrHost :: HeaderName
HdrIfModifiedSince :: HeaderName
HdrIfMatch :: HeaderName
HdrIfNoneMatch :: HeaderName
HdrIfRange :: HeaderName
HdrIfUnmodifiedSince :: HeaderName
HdrMaxForwards :: HeaderName
HdrProxyAuthorization :: HeaderName
HdrRange :: HeaderName
HdrReferer :: HeaderName
HdrUserAgent :: HeaderName
HdrAge :: HeaderName
HdrLocation :: HeaderName
HdrProxyAuthenticate :: HeaderName
HdrPublic :: HeaderName
HdrRetryAfter :: HeaderName
HdrServer :: HeaderName
HdrSetCookie :: HeaderName
HdrTE :: HeaderName
HdrTrailer :: HeaderName
HdrVary :: HeaderName
HdrWarning :: HeaderName
HdrWWWAuthenticate :: HeaderName
HdrAllow :: HeaderName
HdrContentBase :: HeaderName
HdrContentEncoding :: HeaderName
HdrContentLanguage :: HeaderName
HdrContentLength :: HeaderName
HdrContentLocation :: HeaderName
HdrContentMD5 :: HeaderName
HdrContentRange :: HeaderName
HdrContentType :: HeaderName
HdrETag :: HeaderName
HdrExpires :: HeaderName
HdrLastModified :: HeaderName

-- | MIME entity headers (for sub-parts)
HdrContentTransferEncoding :: HeaderName

-- | Allows for unrecognised or experimental headers.
HdrCustom :: String -> HeaderName

-- | <tt>HasHeaders</tt> is a type class for types containing HTTP headers,
--   allowing you to write overloaded header manipulation functions for
--   both <tt>Request</tt> and <tt>Response</tt> data types, for instance.
class HasHeaders x
pGroup :: Parser Group
makeName :: String -> Name
insert :: HasHeaders a => Name -> String -> a -> a
insertIfMissing :: HasHeaders a => Name -> String -> a -> a
replace :: HasHeaders a => Name -> String -> a -> a
insertMany :: HasHeaders a => [T] -> a -> a
lookupMany :: HasHeaders a => Name -> a -> [String]
lookup :: HasHeaders a => Name -> a -> Maybe String
makeContentLength :: Integer -> T
makeContentType :: String -> T
makeLocation :: URI -> T
makeLastModified :: ClockTime -> T
data TransferCoding
ChunkedTransferCoding :: TransferCoding
GzipTransferCoding :: TransferCoding
CompressTransferCoding :: TransferCoding
DeflateTransferCoding :: TransferCoding
makeTransferCoding :: TransferCoding -> T
getContentType :: HasHeaders a => a -> Maybe String
getContentLength :: HasHeaders a => a -> Maybe Integer
instance Eq TransferCoding
instance HasHeaders Group
instance Show Group

module Network.MoHWS.HTTP.Request
data T body
Cons :: Command -> URI -> T -> Group -> body -> T body
command :: T body -> Command
uri :: T body -> URI
httpVersion :: T body -> T
headers :: T body -> Group
body :: T body -> body
toHTTPbis :: T body -> Request body
fromHTTPbis :: Request body -> T body
type Command = RequestMethod

-- | The HTTP request method, to be used in the <a>Request</a> object. We
--   are missing a few of the stranger methods, but these are not really
--   necessary until we add full TLS.
data RequestMethod :: *
HEAD :: RequestMethod
PUT :: RequestMethod
GET :: RequestMethod
POST :: RequestMethod
DELETE :: RequestMethod
OPTIONS :: RequestMethod
TRACE :: RequestMethod
CONNECT :: RequestMethod
Custom :: String -> RequestMethod
data Connection
ConnectionClose :: Connection
ConnectionKeepAlive :: Connection
ConnectionOther :: String -> Connection
data Expect
ExpectContinue :: Expect
pHeaders :: Monoid body => Parser (T body)
getHost :: HasHeaders a => a -> Maybe (HostName, Maybe Int)
getConnection :: HasHeaders a => a -> [Connection]
instance Show Expect
instance Eq Connection
instance Show Connection
instance Functor T
instance HasHeaders (T body)
instance Show (T body)


-- | Unified interface to String and ByteStrings.
module Network.MoHWS.Stream
class Monoid stream => C stream
fromString :: C stream => Int -> String -> stream
toString :: C stream => stream -> String
isEmpty :: C stream => stream -> Bool
length :: C stream => stream -> Integer
isPrefixOf :: C stream => stream -> stream -> Bool
break :: C stream => (Char -> Bool) -> stream -> (stream, stream)
drop :: C stream => Int -> stream -> stream
read :: C stream => Handle -> Integer -> IO stream
readAll :: C stream => Int -> Handle -> IO stream
write :: C stream => Handle -> stream -> IO ()
writeChunked :: C stream => Int -> Handle -> stream -> IO ()
class Eq char => CharType char
fromChar :: CharType char => Char -> char
toChar :: CharType char => char -> Char
instance C ByteString
instance CharType char => C [char]
instance CharType Char

module Network.MoHWS.Server.Options
data T
Cons :: FilePath -> FilePath -> T
configPath :: T -> FilePath
inServerRoot :: T -> FilePath -> FilePath
parse :: [String] -> Either String T

module Network.MoHWS.HTTP.MimeType
type Dictionary = Map String T
data T
Cons :: String -> String -> T
loadDictionary :: FilePath -> IO Dictionary
fromFileName :: Dictionary -> FilePath -> Maybe T
instance Show T

module Network.MoHWS.Configuration
data T ext
Cons :: String -> String -> [(Maybe String, PortNumber)] -> Int -> Int -> Int -> String -> String -> Set String -> Bool -> Bool -> FilePath -> FilePath -> Bool -> Bool -> Int -> String -> String -> [(String, String)] -> [String] -> [(FilePath, String)] -> FilePath -> T -> ext -> T ext
user :: T ext -> String
group :: T ext -> String
listen :: T ext -> [(Maybe String, PortNumber)]
requestTimeout :: T ext -> Int
keepAliveTimeout :: T ext -> Int
maxClients :: T ext -> Int
serverAdmin :: T ext -> String
serverName :: T ext -> String
serverAlias :: T ext -> Set String
useCanonicalName :: T ext -> Bool
hostnameLookups :: T ext -> Bool
documentRoot :: T ext -> FilePath
accessFileName :: T ext -> FilePath
indexes :: T ext -> Bool
followSymbolicLinks :: T ext -> Bool
chunkSize :: T ext -> Int
typesConfig :: T ext -> String
defaultType :: T ext -> String
addLanguage :: T ext -> [(String, String)]
languagePriority :: T ext -> [String]
customLogs :: T ext -> [(FilePath, String)]
errorLogFile :: T ext -> FilePath
logLevel :: T ext -> T
extension :: T ext -> ext
deflt :: ext -> T ext
serverVersion :: String
serverSoftware :: String
extensionAcc :: T (T ext) ext
instance Show ext => Show (T ext)
instance Functor T

module Network.MoHWS.HTTP.Response
data Body body
Body :: String -> Maybe Integer -> IO () -> body -> Body body
source :: Body body -> String
size :: Body body -> Maybe Integer
close :: Body body -> IO ()
content :: Body body -> body
data T body
Cons :: Int -> String -> Group -> [TransferCoding] -> Bool -> Body body -> T body
code :: T body -> Int
description :: T body -> String
headers :: T body -> Group
coding :: T body -> [TransferCoding]
doSendBody :: T body -> Bool
body :: T body -> Body body
decomposeCode :: Int -> ResponseCode
toHTTPbis :: T body -> Response body
fromHTTPbis :: Response body -> T body
showStatusLine :: T body -> String
hasBody :: C body => Body body -> Bool
getFileName :: Body body -> String
sendBody :: C body => Handle -> Body body -> IO ()
sendBodyChunked :: C body => Int -> Handle -> Body body -> IO ()
bodyFromString :: C body => body -> Body body
bodyWithSizeFromString :: C body => body -> Body body
statusLine :: Int -> String -> String
httpVersion :: String
dateHeader :: IO T
serverHeader :: T
makeCont :: C body => T ext -> T body
makeSwitchingProtocols :: C body => T ext -> T body
makeOk :: T ext -> Bool -> Group -> Body body -> T body
makeCreated :: C body => T ext -> T body
makeAccepted :: C body => T ext -> T body
makeNonAuthoritiveInformation :: C body => T ext -> T body
makeNoContent :: C body => T ext -> T body
makeResetContent :: C body => T ext -> T body
makePartialContent :: C body => T ext -> T body
makeMultipleChoices :: C body => T ext -> T body
makeMovedPermanently :: T ext -> Group -> Body body -> URI -> T body
makeFound :: C body => T ext -> T body
makeSeeOther :: C body => T ext -> T body
makeNotModified :: C body => T ext -> T body
makeUseProxy :: C body => T ext -> T body
makeTemporaryRedirect :: C body => T ext -> T body
makeBadRequest :: C body => T ext -> T body
makeUnauthorized :: C body => T ext -> T body
makePaymentRequired :: C body => T ext -> T body
makeForbidden :: C body => T ext -> T body
makeNotFound :: C body => T ext -> T body
makeMethodNotAllowed :: C body => T ext -> T body
makeNotAcceptable :: C body => T ext -> T body
makeProxyAuthenticationRequired :: C body => T ext -> T body
makeRequestTimeOut :: C body => T ext -> T body
makeConflict :: C body => T ext -> T body
makeGone :: C body => T ext -> T body
makeLengthRequired :: C body => T ext -> T body
makePreconditionFailed :: C body => T ext -> T body
makeRequestEntityTooLarge :: C body => T ext -> T body
makeRequestURITooLarge :: C body => T ext -> T body
makeUnsupportedMediaType :: C body => T ext -> T body
makeRequestedRangeNotSatisfiable :: C body => T ext -> T body
makeExpectationFailed :: C body => T ext -> T body
makeInternalServerError :: C body => T ext -> T body
makeNotImplemented :: C body => T ext -> T body
makeBadGateway :: C body => T ext -> T body
makeServiceUnavailable :: C body => T ext -> T body
makeGatewayTimeOut :: C body => T ext -> T body
makeVersionNotSupported :: C body => T ext -> T body
descriptionDictionary :: Map Int String
descriptionFromCode :: Int -> String
makeError :: C body => Int -> T ext -> T body
makeWithBody :: Int -> T ext -> Bool -> Group -> Body body -> T body
generateErrorPage :: C body => Int -> T ext -> Body body
genErrorHtml :: Int -> T ext -> Html
instance HasHeaders (T body)
instance Show (T body)
instance Functor T
instance Functor Body


module Network.MoHWS.Configuration.Accessor
user :: T (T ext) String
group :: T (T ext) String
listen :: T (T ext) [(Maybe String, PortNumber)]
requestTimeout :: T (T ext) Int
keepAliveTimeout :: T (T ext) Int
maxClients :: T (T ext) Int
serverAdmin :: T (T ext) String
serverName :: T (T ext) String
serverAlias :: T (T ext) (Set String)
useCanonicalName :: T (T ext) Bool
hostnameLookups :: T (T ext) Bool
documentRoot :: T (T ext) FilePath
accessFileName :: T (T ext) FilePath
indexes :: T (T ext) Bool
followSymbolicLinks :: T (T ext) Bool
chunkSize :: T (T ext) Int
typesConfig :: T (T ext) String
defaultType :: T (T ext) String
addLanguage :: T (T ext) [(String, String)]
languagePriority :: T (T ext) [String]
customLogs :: T (T ext) [(FilePath, String)]
errorLogFile :: T (T ext) FilePath
logLevel :: T (T ext) T
extension :: T (T ext) ext

module Network.MoHWS.Configuration.Parser
type T st ext = GenParser Char st (Builder ext)
lift :: T fullExt partExt -> T st partExt -> T st fullExt
run :: T () ext -> String -> IO (Either ParseError (Builder ext))
field :: String -> T st ext -> T st ext
set :: T r a -> GenParser Char st a -> GenParser Char st (r -> r)
addToList :: T r [a] -> GenParser Char st a -> GenParser Char st (r -> r)
stringLiteral :: GenParser Char st String
bool :: GenParser Char st Bool
int :: GenParser Char st Int

module Network.MoHWS.Logger
data Handle a
start :: (a -> IO String) -> FilePath -> IO (Handle a)
stop :: Handle a -> IO ()
log :: Handle a -> a -> IO ()

module Network.MoHWS.Logger.Error
data Handle
start :: FilePath -> T -> IO Handle
stop :: Handle -> IO ()
log :: Handle -> T -> String -> IO ()
class HasHandle h
getHandle :: HasHandle h => h -> Handle
debug :: (HasHandle h, MonadIO io) => h -> String -> io ()
abort :: HasHandle h => h -> String -> MaybeT IO a
debugOnAbort :: HasHandle h => h -> String -> MaybeT IO a -> MaybeT IO a
logError :: HasHandle h => h -> String -> IO ()
logInfo :: HasHandle h => h -> String -> IO ()
logDebug :: HasHandle h => h -> String -> IO ()
instance HasHandle Handle

module Network.MoHWS.Server.Request

-- | All the server's information about a request
data T body
Cons :: T body -> HostAddress -> Maybe HostEntry -> HostEntry -> String -> FilePath -> PortNumber -> T body
clientRequest :: T body -> T body
clientAddress :: T body -> HostAddress
clientName :: T body -> Maybe HostEntry
requestHostName :: T body -> HostEntry
serverURIPath :: T body -> String
serverFilename :: T body -> FilePath
serverPort :: T body -> PortNumber
instance Show (T body)
instance Functor T


-- | Copyright: 2009, Henning Thielemann
module Network.MoHWS.Module

-- | <a>isServerHost</a> allows for advanced checks of the appropriate
--   domain, e.g. we can catch all subdomains of a certain domain.
data T body
Cons :: (HostName -> Bool) -> (String -> String -> MaybeT IO FilePath) -> (T body -> IO (T body)) -> (T body -> MaybeT IO (T body)) -> T body
isServerHost :: T body -> HostName -> Bool
translatePath :: T body -> String -> String -> MaybeT IO FilePath
tweakRequest :: T body -> T body -> IO (T body)
handleRequest :: T body -> T body -> MaybeT IO (T body)
empty :: T body

-- | We use the type variable <tt>server</tt> although it will be always
--   instantiated with <tt>ServerContext.T</tt>. However, with this type
--   variable we avoid mutual recursive Haskell modules for Module and
--   ServerContext.
tweakFilename :: (server -> FilePath -> IO FilePath) -> server -> T body -> IO (T body)

module Network.MoHWS.Logger.Access
type Handle = Handle Request
data Request
Request :: T () -> T () -> HostEntry -> ClockTime -> TimeDiff -> Request
request :: Request -> T ()
response :: Request -> T ()
serverHost :: Request -> HostEntry
time :: Request -> ClockTime
delay :: Request -> TimeDiff
start :: String -> FilePath -> IO Handle
stop :: Handle -> IO ()
mkRequest :: T body -> T body -> HostEntry -> TimeDiff -> IO Request
log :: Handle -> Request -> IO ()
instance Help IO


-- | Copyright: 2009, Henning Thielemann
module Network.MoHWS.Server.Context
data T ext
Cons :: T -> T ext -> HostEntry -> Dictionary -> Handle -> [Handle] -> T ext
options :: T ext -> T
config :: T ext -> T ext
hostName :: T ext -> HostEntry
mimeTypes :: T ext -> Dictionary
errorLogger :: T ext -> Handle
accessLoggers :: T ext -> [Handle]
getMimeType :: T ext -> FilePath -> String
logAccess :: T ext -> T body -> T body -> TimeDiff -> IO ()
instance HasHandle (T ext)
instance Functor T


-- | Copyright: 2009, Henning Thielemann
module Network.MoHWS.Module.Description
data T body ext
Cons :: String -> (T ext -> IO (T body)) -> T () ext -> (ext -> ext) -> T body ext
name :: T body ext -> String
load :: T body ext -> T ext -> IO (T body)
configParser :: T body ext -> T () ext
setDefltConfig :: T body ext -> ext -> ext
empty :: T body ext
lift :: T fullExt partExt -> T body partExt -> T body fullExt

module Network.MoHWS.Initialization
data T body ext
Cons :: [T body ext] -> ext -> T body ext
moduleList :: T body ext -> [T body ext]
configurationExtensionDefault :: T body ext -> ext


-- | Copyright: 2006, Bjorn Bringert. Copyright: 2009, Henning Thielemann.
module Network.MoHWS.Part.UserDirectory
data Configuration
desc :: T body Configuration

module Network.MoHWS.Part.VirtualHost
data Configuration
desc :: T body Configuration
virtualDocumentRoot :: T Configuration (Map HostName FilePath)
virtualFile :: T Configuration (Map HostName (Map String FilePath))


-- | When we get a request for http:<i></i>foo.com/bar, where <tt>bar</tt>
--   is a directory and contains an index.html, we need to send back a
--   redirect for http:<i></i>foo.com<i>bar</i> (i.e. add the final slash),
--   otherwise relative links from index.html will be relative to
--   http:<i></i>foo.com/ instead of http:<i></i>foo.com<i>bar</i>. E.g.
--   look at http:<i></i>www.haskell.org<i>happy</i>.
module Network.MoHWS.Part.AddSlash
data Configuration
desc :: C body => T body Configuration


-- | Copyright: 2006, Bjorn Bringert. Copyright: 2009, Henning Thielemann.
--   
--   Show <tt>index.html</tt> or another configured file whenever the URI
--   path is a directory. However, this module gets only active if the
--   directory path is terminated with a slash. Without a slash the
--   relative paths will not be processed correct by the web clients (they
--   will consider relative paths as relative to the superdirectory). See
--   also <a>Network.MoHWS.Part.AddSlash</a>.
module Network.MoHWS.Part.Index
data Configuration
desc :: T body Configuration


-- | Copyright: 2009, Henning Thielemann.
module Network.MoHWS.Part.CGI
data Configuration
desc :: C body => T body Configuration
mkCGIEnv :: T ext -> T body -> String -> IO [(String, String)]
mkCGIResponse :: Group -> body -> Handle -> IO (T body)


-- | Copyright: 2006, Bjorn Bringert. Copyright: 2009, Henning Thielemann.
module Network.MoHWS.Part.File

-- | Dummy Configuration that forces users to use the lifting mechanism,
--   which in turn asserts that future extensions are respected.
data Configuration
desc :: C body => T body Configuration


-- | Deliver a HTML document containing the contents of a directory.
module Network.MoHWS.Part.Listing
data Configuration
desc :: C body => T body Configuration


-- | Copyright: 2009, Henning Thielemann
module Network.MoHWS.Initialization.Standard
data Extension
init :: C body => T body Extension

module Network.MoHWS.Server
main :: C body => T body ext -> IO ()
mainWithOptions :: C body => T body ext -> T -> IO ()
