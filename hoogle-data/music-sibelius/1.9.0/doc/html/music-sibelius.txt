-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Interaction with Sibelius.
--   
@package music-sibelius
@version 1.9.0

module Data.Music.Sibelius
data SibeliusScore
SibeliusScore :: String -> String -> String -> Double -> Bool -> [SibeliusStaff] -> SibeliusSystemStaff -> SibeliusScore
scoreTitle :: SibeliusScore -> String
scoreComposer :: SibeliusScore -> String
scoreInformation :: SibeliusScore -> String
scoreStaffHeight :: SibeliusScore -> Double
scoreTransposing :: SibeliusScore -> Bool
scoreStaves :: SibeliusScore -> [SibeliusStaff]
scoreSystemStaff :: SibeliusScore -> SibeliusSystemStaff
data SibeliusStaff
SibeliusStaff :: [SibeliusBar] -> String -> String -> SibeliusStaff
staffBars :: SibeliusStaff -> [SibeliusBar]
staffName :: SibeliusStaff -> String
staffShortName :: SibeliusStaff -> String
data SibeliusSystemStaff
SibeliusSystemStaff :: [SibeliusBar] -> SibeliusSystemStaff
systemStaffBars :: SibeliusSystemStaff -> [SibeliusBar]
data SibeliusBar
SibeliusBar :: [SibeliusBarObject] -> SibeliusBar
barElements :: SibeliusBar -> [SibeliusBarObject]
data SibeliusBarObject
SibeliusBarObjectText :: SibeliusText -> SibeliusBarObject
SibeliusBarObjectClef :: SibeliusClef -> SibeliusBarObject
SibeliusBarObjectSlur :: SibeliusSlur -> SibeliusBarObject
SibeliusBarObjectCrescendoLine :: SibeliusCrescendoLine -> SibeliusBarObject
SibeliusBarObjectDiminuendoLine :: SibeliusDiminuendoLine -> SibeliusBarObject
SibeliusBarObjectTimeSignature :: SibeliusTimeSignature -> SibeliusBarObject
SibeliusBarObjectKeySignature :: SibeliusKeySignature -> SibeliusBarObject
SibeliusBarObjectTuplet :: SibeliusTuplet -> SibeliusBarObject
SibeliusBarObjectChord :: SibeliusChord -> SibeliusBarObject
SibeliusBarObjectUnknown :: String -> SibeliusBarObject
isTimeSignature :: SibeliusBarObject -> Bool
data SibeliusChord
SibeliusChord :: Int -> Int -> Int -> [SibeliusArticulation] -> Int -> Int -> Bool -> Bool -> [SibeliusNote] -> SibeliusChord
chordPosition :: SibeliusChord -> Int
chordDuration :: SibeliusChord -> Int
chordVoice :: SibeliusChord -> Int
chordArticulations :: SibeliusChord -> [SibeliusArticulation]
chordSingleTremolos :: SibeliusChord -> Int
chordDoubleTremolos :: SibeliusChord -> Int
chordAcciaccatura :: SibeliusChord -> Bool
chordAppoggiatura :: SibeliusChord -> Bool
chordNotes :: SibeliusChord -> [SibeliusNote]
data SibeliusNote
SibeliusNote :: Int -> Int -> Int -> Bool -> Maybe Int -> SibeliusNote
notePitch :: SibeliusNote -> Int
noteDiatonicPitch :: SibeliusNote -> Int
noteAccidental :: SibeliusNote -> Int
noteTied :: SibeliusNote -> Bool
noteStyle :: SibeliusNote -> Maybe Int
data SibeliusSlur
SibeliusSlur :: Int -> Int -> Int -> Maybe String -> SibeliusSlur
slurVoice :: SibeliusSlur -> Int
slurPosition :: SibeliusSlur -> Int
slurDuration :: SibeliusSlur -> Int
slurStyle :: SibeliusSlur -> Maybe String
data SibeliusCrescendoLine
SibeliusCrescendoLine :: Int -> Int -> Int -> Maybe String -> SibeliusCrescendoLine
crescVoice :: SibeliusCrescendoLine -> Int
crescPosition :: SibeliusCrescendoLine -> Int
crescDuration :: SibeliusCrescendoLine -> Int
crescStyle :: SibeliusCrescendoLine -> Maybe String
data SibeliusDiminuendoLine
SibeliusDiminuendoLine :: Int -> Int -> Int -> Maybe String -> SibeliusDiminuendoLine
dimVoice :: SibeliusDiminuendoLine -> Int
dimPosition :: SibeliusDiminuendoLine -> Int
dimDuration :: SibeliusDiminuendoLine -> Int
dimStyle :: SibeliusDiminuendoLine -> Maybe String
data SibeliusTuplet
SibeliusTuplet :: Int -> Int -> Int -> Int -> [Int] -> SibeliusTuplet
tupletVoice :: SibeliusTuplet -> Int
tupletPosition :: SibeliusTuplet -> Int
tupletDuration :: SibeliusTuplet -> Int
tupletPlayedDuration :: SibeliusTuplet -> Int
tupletValue :: SibeliusTuplet -> [Int]
data SibeliusArticulation
UpBow :: SibeliusArticulation
DownBow :: SibeliusArticulation
Plus :: SibeliusArticulation
Harmonic :: SibeliusArticulation
Marcato :: SibeliusArticulation
Accent :: SibeliusArticulation
Tenuto :: SibeliusArticulation
Wedge :: SibeliusArticulation
Staccatissimo :: SibeliusArticulation
Staccato :: SibeliusArticulation
readSibeliusArticulation :: String -> Maybe SibeliusArticulation
data SibeliusClef
SibeliusClef :: Int -> Int -> Maybe String -> SibeliusClef
clefVoice :: SibeliusClef -> Int
clefPosition :: SibeliusClef -> Int
clefStyle :: SibeliusClef -> Maybe String
data SibeliusKeySignature
SibeliusKeySignature :: Int -> Int -> Bool -> Int -> Bool -> SibeliusKeySignature
keyVoice :: SibeliusKeySignature -> Int
keyPosition :: SibeliusKeySignature -> Int
keyMajor :: SibeliusKeySignature -> Bool
keySharps :: SibeliusKeySignature -> Int
keyIsOpen :: SibeliusKeySignature -> Bool
data SibeliusTimeSignature
SibeliusTimeSignature :: Int -> Int -> [Int] -> Bool -> Bool -> SibeliusTimeSignature
timeVoice :: SibeliusTimeSignature -> Int
timePosition :: SibeliusTimeSignature -> Int
timeValue :: SibeliusTimeSignature -> [Int]
timeIsCommon :: SibeliusTimeSignature -> Bool
timeIsAllaBreve :: SibeliusTimeSignature -> Bool
data SibeliusText
SibeliusText :: Int -> Int -> String -> Maybe String -> SibeliusText
textVoice :: SibeliusText -> Int
textPosition :: SibeliusText -> Int
textText :: SibeliusText -> String
textStyle :: SibeliusText -> Maybe String
instance Eq SibeliusText
instance Ord SibeliusText
instance Show SibeliusText
instance Eq SibeliusClef
instance Ord SibeliusClef
instance Show SibeliusClef
instance Eq SibeliusSlur
instance Ord SibeliusSlur
instance Show SibeliusSlur
instance Eq SibeliusCrescendoLine
instance Ord SibeliusCrescendoLine
instance Show SibeliusCrescendoLine
instance Eq SibeliusDiminuendoLine
instance Ord SibeliusDiminuendoLine
instance Show SibeliusDiminuendoLine
instance Eq SibeliusTimeSignature
instance Ord SibeliusTimeSignature
instance Show SibeliusTimeSignature
instance Eq SibeliusKeySignature
instance Ord SibeliusKeySignature
instance Show SibeliusKeySignature
instance Eq SibeliusTuplet
instance Ord SibeliusTuplet
instance Show SibeliusTuplet
instance Eq SibeliusArticulation
instance Ord SibeliusArticulation
instance Show SibeliusArticulation
instance Enum SibeliusArticulation
instance Eq SibeliusNote
instance Ord SibeliusNote
instance Show SibeliusNote
instance Eq SibeliusChord
instance Ord SibeliusChord
instance Show SibeliusChord
instance Eq SibeliusBarObject
instance Ord SibeliusBarObject
instance Show SibeliusBarObject
instance Eq SibeliusBar
instance Ord SibeliusBar
instance Show SibeliusBar
instance Eq SibeliusStaff
instance Ord SibeliusStaff
instance Show SibeliusStaff
instance Eq SibeliusSystemStaff
instance Ord SibeliusSystemStaff
instance Show SibeliusSystemStaff
instance Eq SibeliusScore
instance Ord SibeliusScore
instance Show SibeliusScore
instance FromJSON SibeliusNote
instance FromJSON SibeliusChord
instance FromJSON SibeliusTuplet
instance FromJSON SibeliusKeySignature
instance FromJSON SibeliusTimeSignature
instance FromJSON SibeliusDiminuendoLine
instance FromJSON SibeliusCrescendoLine
instance FromJSON SibeliusSlur
instance FromJSON SibeliusClef
instance FromJSON SibeliusText
instance FromJSON SibeliusBarObject
instance FromJSON SibeliusBar
instance FromJSON SibeliusStaff
instance FromJSON SibeliusSystemStaff
instance FromJSON SibeliusScore

module Music.Score.Import.Sibelius

-- | This constraint includes all note types that can be constructed from a
--   Sibelius representation.
type IsSibelius a = (HasPitches' a, IsPitch a, HasPart' a, Part a ~ Part, HasArticulation' a, Articulation a ~ Articulation, HasDynamic' a, Dynamic a ~ Dynamics, HasText a, HasTremolo a, Tiable a)

-- | Convert a score from a Sibelius representation.
fromSibelius :: IsSibelius a => SibeliusScore -> Score a

-- | Read a Sibelius score from a file. Fails if the file could not be read
--   or if a parsing error occurs.
readSibelius :: IsSibelius a => FilePath -> IO (Score a)

-- | Read a Sibelius score from a file. Fails if the file could not be
--   read, and returns <tt>Nothing</tt> if a parsing error occurs.
readSibeliusMaybe :: IsSibelius a => FilePath -> IO (Maybe (Score a))

-- | Read a Sibelius score from a file. Fails if the file could not be
--   read, and returns <tt>Left m</tt> if a parsing error occurs.
readSibeliusEither :: IsSibelius a => FilePath -> IO (Either String (Score a))
