-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Finite directed cubical complexes and associated algorithms
--   
--   Finite directed cubical complexes and associated algorithms
@package directed-cubical
@version 0.1.2.0


-- | Finite directed cubical complexes and associated algorithms for
--   creating and transforming them.
module Math.Topology.CubeCmplx.DirCubeCmplx

-- | A generic notation for coordinate values.
type T = Int8

-- | A vertex with lexicographic ordering.
data Vertex

-- | Safe constructor for vertices.
vertex :: [T] -> Maybe Vertex

-- | Coordinates as a vector.
coords :: Vertex -> Vector T

-- | Unsafe constructor for vertices.
vertexUnsafe :: [T] -> Vertex

-- | Unsafe constructor for vertices from vectors.
vertexVectorUnsafe :: Vector T -> Vertex

-- | Fetch coordinates for a vertex.
vertexToList :: Vertex -> [T]

-- | Combine two vertices coordinate-wise with a given operation, with
--   floor of 0 on each coordinate.
vertexPtWise :: (T -> T -> T) -> Vertex -> Vertex -> Vertex

-- | Add two vertices coordinate-wise.
vAdd :: Vertex -> Vertex -> Vertex

-- | Subtract two vertices coordinate-wise.
vSub :: Vertex -> Vertex -> Vertex

-- | Subtract two vertices coordinate-wise without bounds checking.
vSubUnsafe :: Vertex -> Vertex -> Vertex

-- | Coordinate-wise minimum.
vMin :: Vertex -> Vertex -> Vertex

-- | Coordinate-wise maximum.
vMax :: Vertex -> Vertex -> Vertex

-- | Test whether vertex is greater than another in cubical partial
--   ordering.
vGT :: Vertex -> Vertex -> Bool

-- | Test whether vertex is less than another in cubical partial ordering.
vLT :: Vertex -> Vertex -> Bool

-- | Fetch ambient dimension of a vertex.
vDim :: Vertex -> Int

-- | A cubical vertex span.
data VertSpan

-- | Safe constructor for vertex spans. Sanity checks for matching ambient
--   coordinate systems.
vertSpan :: Vertex -> Vertex -> Maybe VertSpan

-- | Minimum vertex for span.
vsFst :: VertSpan -> Vertex

-- | Maximum vertex for span.
vsSnd :: VertSpan -> Vertex

-- | Unsafe constructor for vertex spans.
vsUnsafe :: Vertex -> Vertex -> VertSpan

-- | View a vertex as a 0-dimensional vertex span.
vsVert :: Vertex -> VertSpan

-- | Get coordinates for lower vertex in coordinate span.
vsFstList :: VertSpan -> [T]

-- | Get coordinates for upper vertex in coordinate span.
vsSndList :: VertSpan -> [T]

-- | Safe constructor for vertex spans from coordinates.
vsCoords :: [T] -> [T] -> Maybe VertSpan

-- | Unsafe constructor for vertex spans from coordinates.
vsCoordsUnsafe :: [T] -> [T] -> VertSpan

-- | Given a vertex span, determine the corresponding cubical dimension.
vsDim :: VertSpan -> Int

-- | Test whether a vertex span is a cubical cell.
vsIsCell :: VertSpan -> Bool

-- | Given a vertex span, extend it by one more unit in every direction in
--   which it already extends.
vsFatten :: VertSpan -> VertSpan

-- | Given a vertex span, efficiently determine all pairs of (cell,vertex)
--   where the vertices are corner vertices of the span and the cells are
--   the unique top-cells containing them.
vsCornerPairs :: VertSpan -> HashSet (CubeCell, Vertex)

-- | Given a vertex span, efficiently determine its <a>corner</a> vertices.
vsCornerVerts :: VertSpan -> HashSet Vertex

-- | Given a coordinate span, list all coordinate spans of its boundary.
vsBdry :: VertSpan -> [VertSpan]

-- | A cubical cell.
data CubeCell

-- | Get the minimum vertex for a cubical cell.
minVert :: CubeCell -> Vertex

-- | Get the maximum vertex for a cubical cell.
maxVert :: CubeCell -> Vertex

-- | Safe constructor for cubical cells from coordinates.
cell :: [T] -> [T] -> Maybe CubeCell

-- | Unsafe constructor for cubical cells from coordinates.
cellUnsafe :: [T] -> [T] -> CubeCell

-- | Get dimension of a cell.
cellDim :: CubeCell -> Int

-- | Unsafe constructor for cubical cells from vertices.
cellVertsUnsafe :: Vertex -> Vertex -> CubeCell

-- | Safe constructor for cubical cells from vertices.
cellVerts :: Vertex -> Vertex -> Maybe CubeCell

-- | Given a coordinate span, list its top-dimensional cubical cells.
spanTopCells :: VertSpan -> [CubeCell]

-- | Treat a vertex as a cell.
vertToCell :: Vertex -> CubeCell

-- | Test whether a cubical cell belongs to a given vertex span.
inSpan :: CubeCell -> VertSpan -> Bool

-- | Test whether a cubical cell would be a top-cell if added to a complex
isTopCell :: CubeCell -> CubeCmplx -> Bool

-- | Test whether a vertex belongs to a given vertex span.
vInSpan :: Vertex -> VertSpan -> Bool

-- | Test if a cubical cell is in the boundary of a cubical coordinate
--   span. See also vsBdry and spanBdryCells
inBdry :: CubeCell -> VertSpan -> Bool

-- | Given a coordinate span, provide a list of top-cells in each face.
spanBdryCells :: VertSpan -> [[CubeCell]]

-- | List of all possible generic n-cubes, presented as cells (memoized).
nCubes :: [CubeCell]

-- | Vertices of generic n-cube, as subcells (memoized).
nCubeVerts :: Int -> [CubeCell]

-- | Subcells of a generic n-cube (memoized).
nCubeCells :: Int -> [CubeCell]

-- | Proper subcells of a generic n-cube (mostly memoized).
nCubeProperCells :: Int -> [CubeCell]

-- | List of cells in boundary of a generic n-cube (memoized).
nCubeBdry :: Int -> [CubeCell]

-- | List top-cells in k-skeleta of generic n-cube (memoized).
nCubeKSkels :: Int -> Int -> [CubeCell]

-- | Given a (nongeneric) cubical cell, list its vertices.
verts :: CubeCell -> [Vertex]

-- | Given a (nongeneric) cubical cell, get all cubical subcells.
subCells :: CubeCell -> [CubeCell]

-- | Given a (nongeneric) cubical cell, get all proper cubical subcells.
properSubCells :: CubeCell -> [CubeCell]

-- | Given a (nongeneric) cubical cell of dim n in ambient dim n, get its
--   boundary.
bdry :: CubeCell -> [CubeCell]

-- | Given a (nongeneric) cubical cell, get top-cells of its k-skeleton.
kSkel :: Int -> CubeCell -> [CubeCell]

-- | Test if the former cubical cell is a subcell of the latter.
isSubCell :: CubeCell -> CubeCell -> Bool

-- | Test if the former cubical cell is a proper subcell of the latter.
isPropSubCell :: CubeCell -> CubeCell -> Bool

-- | Given a face f in some n-cube, get its opposite face (memoized).
opFaceUnsafe :: CubeCell -> CubeCell -> CubeCell

-- | Given a (nongeneric) cell c and a generic cell g representing a
--   subcell of a generic cell of dimension dim c, return the translation
--   of g into the nongeneric coordinates of c.
genToNonGen :: CubeCell -> CubeCell -> CubeCell

-- | Given a subcell s of a (nongeneric) cell c, express s as a subcell of
--   a generic cell of the same dimension as c.
nonGenToGen :: CubeCell -> CubeCell -> CubeCell

-- | A cubical complex consists of a set of top-cells.
data CubeCmplx

-- | Get set of top-cells of complex.
cells :: CubeCmplx -> HashSet CubeCell

-- | An empty complex.
cmplxEmpty :: CubeCmplx

-- | Detect if complex is empty.
cmplxNull :: CubeCmplx -> Bool

-- | Get the size of a cubical complex.
cmplxSize :: CubeCmplx -> Int

-- | Given a function producing a set of cubical cells from any cubical
--   cell, apply it to a cubical complex to yield a new complex.
cmplxApply :: CubeCmplx -> (CubeCell -> HashSet CubeCell) -> CubeCmplx

-- | Given a cubical complex and an integer k, determine the k-skeleton of
--   the complex.
cmplxKSkel :: CubeCmplx -> Int -> CubeCmplx

-- | Given a cubical complex, provide a set of lists of vertices giving the
--   triangulation of its 2-skeleton.
cmplx2Triang :: CubeCmplx -> HashSet [Vertex]

-- | Given a complex and a vertex of the same ambient dimension, translate
--   every cell of the complex by the vertex via the given operation.
--   Typical operation is to add (1,...,1) to force nonzero coordinates
--   without affecting the topology.
cmplxVertOp :: CubeCmplx -> Vertex -> (Vertex -> Vertex -> Vertex) -> CubeCmplx

-- | Basic means of constructing cubical complexes via vertex spans.
vsCmplx :: VertSpan -> CubeCmplx

-- | Given a single cell to delete from a complex, delete it if present.
cmplxDelCell :: CubeCmplx -> CubeCell -> CubeCmplx

-- | Given a set of cells to delete from a complex, delete them if present.
cmplxDelCells :: CubeCmplx -> HashSet CubeCell -> CubeCmplx

-- | Given a vertex span and a complex, delete all top-cells belonging to
--   the span and replace them with the boundaries of these top-cells that
--   belong to the span's boundary. This <a>punches a hole</a> in the
--   complex.
cmplxDelVsInt :: CubeCmplx -> VertSpan -> CubeCmplx

-- | Given a set of cells to insert into a complex, insert them all.
cmplxAddCells :: CubeCmplx -> HashSet CubeCell -> CubeCmplx

-- | Union a list of complexes.
cmplxUnions :: [CubeCmplx] -> CubeCmplx

-- | Filter the top-cells of a complex on some predicate.
cmplxFilter :: (CubeCell -> Bool) -> CubeCmplx -> CubeCmplx

-- | Given a non-empty complex, determine the minimal vertex span
--   containing it. The resulting span need not have the same dimension as
--   the ambient space.
cmplxHullUnsafe :: CubeCmplx -> VertSpan

-- | Given a complex cx and a vertex span vs, filter the complex down to
--   the subcomplex of all top-cells of cx contained in vs.
cmplxFilterSpan :: CubeCmplx -> VertSpan -> CubeCmplx

-- | Given a complex and a list of vertex spans, determine the list of
--   subcomplexes of top-cells supported on these spans, paired up with the
--   spans so that the original boundaries are known.
cmplxFilterSpans :: CubeCmplx -> [VertSpan] -> [(CubeCmplx, VertSpan)]

-- | Given a cell c in a cubical complex, get a subcomplex that includes
--   all all top-cells that could be adjacent to c (including c). Handy for
--   reducing search problems.
cellNhd :: CubeCmplx -> CubeCell -> CubeCmplx

-- | Standard example of finite directed cubical complex: two classes of
--   paths expected in path category.
swissFlag :: (CubeCmplx, [VertSpan])

-- | Standard example: four classes of paths expected in path category.
sqPairFwd :: (CubeCmplx, [VertSpan])

-- | Standard example: three classes of paths expected in path category.
sqPairBack :: (CubeCmplx, [VertSpan])

-- | Standard example: two classes of paths expected in path category.
torus3d :: (CubeCmplx, [VertSpan])

-- | Standard example: three classes of paths expected in path category.
genusTwo3d :: (CubeCmplx, [VertSpan])

-- | Space-efficient cartesian product of list of finite domains
lazyProd :: [[a]] -> [[a]]
instance Eq Vertex
instance Ord Vertex
instance Show VertSpan
instance Eq VertSpan
instance Ord VertSpan
instance Show BitVector
instance Eq CubeCell
instance Show VertType
instance Eq VertType
instance Show CubeCmplx
instance Eq CubeCmplx
instance Arbitrary CubeCmplx
instance NFData CubeCmplx
instance Arbitrary CubeCell
instance Show CubeCell
instance Ord CubeCell
instance Hashable CubeCell
instance NFData CubeCell
instance Arbitrary BitVector
instance Arbitrary VertSpan
instance NFData VertSpan
instance NFData Vertex
instance Hashable Vertex
instance Arbitrary Vertex
instance Show Vertex


-- | Model directed process traces in a directed cubical framework.
module Math.Topology.CubeCmplx.DPTrace

-- | Type for resource IDs.
type ResId = Int

-- | Classical acquire/release notation.
data ReqType
P :: ReqType
V :: ReqType

-- | Resource request consists of acquiring/releasing a given resource.
type ResReq = (ReqType, ResId)

-- | Type for process IDs.
type PID = Int

-- | Process trace is Process ID together with valid list of requests.
data PTrace

-- | Attempt to build valid process trace from ID and list of requests.
pTrace :: PID -> [ResReq] -> Maybe PTrace

-- | Attempt to build list of process traces with default process IDs from
--   list of lists of requests.
pTraces :: [[ResReq]] -> Maybe [PTrace]

-- | Given a list of process traces, determine a minimal vertex span
--   suitable for modeling a resource contention problem.
ptsAmbReg :: [PTrace] -> VertSpan

-- | Given a list of process traces, calculate associated list of
--   <a>forbidden regions</a> which represent resource contention. These
--   regions may overlap to form more complex regions.
ptsForbRegs :: [PTrace] -> [VertSpan]

-- | Given a list of process traces, represent the associated resource
--   contention problem by a finite directed cubical complex. The ordering
--   of the coordinates is the same as the ordering of the processes in the
--   list.
ptsCmplx :: [PTrace] -> CubeCmplx
instance Show ReqType
instance Eq ReqType
instance Show PTrace
instance Eq PTrace
instance Eq ReqPt
instance Show ResTrace
instance Ord ReqPt
instance Show ReqPt
instance Show ResReqs
instance Eq ResReqs


-- | Algorithms for simplifying finite directed cubical complexes by
--   removing corner vertices; this operation is fully faithful on path
--   categories, as demonstrated by the author.
module Math.Topology.CubeCmplx.CornerReduce

-- | Naive algorithm for finding corner vertices of a cubical complex.
--   Works well whenever the complex has relatively few top-cells.
cmplxCornersNaive :: CubeCmplx -> HashSet (Vertex, CubeCell)

-- | Given a cubical complex and a vertex span to which it belongs,
--   determine the set of corner vertices that belong to the interior of
--   the span using the naive algorithm.
cmplxSpanIntCorners :: CubeCmplx -> VertSpan -> HashSet (Vertex, CubeCell)

-- | Memory-efficient parallelized algorithm for determining corner
--   vertices of any finite directed cubical complex whose vertices all
--   have nonzero coordinates.
cmplxCorners :: CubeCmplx -> HashSet (Vertex, CubeCell)

-- | Given a cubical complex where all vertices have nonzero coordinates,
--   determine the set of corner vertices that belong to the interior of
--   the given span using the parallel algorithm.
cmplxCornersInt :: CubeCmplx -> VertSpan -> HashSet (Vertex, CubeCell)

-- | Given a complex whose vertices have nonzero coordinates, reduce it in
--   parallel, optionally excluding some spans from the set of corner
--   vertices. Return the intermediate complexes in a list.
cmplxReduce' :: CubeCmplx -> [VertSpan] -> [CubeCmplx]

-- | Given a complex whose vertices have nonzero coordinates, reduce it in
--   parallel, optionally excluding some spans from the set of corner
--   vertices.
cmplxReduce :: CubeCmplx -> [VertSpan] -> CubeCmplx


-- | Output finite directed cubical complexes in VTK polydata format.
module Math.Topology.CubeCmplx.Vtk

-- | Type for file titles.
type Title = String

-- | Given a cubical complex, take its 2-skeleton and render a VTK ascii
--   file in polydata format that represents this complex.
vtkPolyAscBS :: Title -> CubeCmplx -> ByteString

-- | Given a base filename, base title, and list of cubical complexes,
--   generate a list of named bytestrings of VTK ascii files associated to
--   these complexes. Filenames and titles are appended with integers for
--   compatibility with tools like ParaView.
vtkPolyAscBSs :: FileName -> Title -> [CubeCmplx] -> [(FileName, ByteString)]

-- | Type for file names.
type FileName = String

-- | Given a filename, title, and cubical complex, take the 2-skeleton,
--   render to VTK polydata ascii format, and write to storage.
vtkPolyAscFile :: FileName -> Title -> CubeCmplx -> IO ()

-- | Same as vtkPolyAscBSs, but write the resulting files.
vtkPolyAscFiles :: FileName -> Title -> [CubeCmplx] -> IO ()
instance Eq VtkPoint
instance Show VtkPoint
instance Eq VtkPoly
instance Show VtkPoly
instance Show VtkPolyData
instance Show VtkPolyDataAscii
instance Hashable VtkPoint
