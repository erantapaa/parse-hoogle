-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Utility for drawing attribute grammar pictures with the diagrams package
--   
@package uuagc-diagrams
@version 0.1.1.0


-- | Example usage of this package:
--   
--   <pre>
--   import UU.UUAGC.Diagrams
--   
--   dia :: AGBackend b =&gt; AGDiagram b
--   dia = production ["count", "level"] "Docs" ["html", "count"]
--           [ child ["count", "level"] "hd" ["html", "count"]
--           , child ["count", "level"] "tl" ["html", "count"]
--           ]
--         # agrule shaftL "lhs.count" "hd.count"
--         # agrule shaftL "lhs.level" "hd.level"
--         # agrule shaftR "lhs.level" "tl.level"
--         # agrule shaftL "hd.html" "lhs.html"
--         # agrule shaftR "tl.html" "lhs.html"
--         # agrule shaftR "tl.count" "lhs.count"
--         # agrule shaftT "hd.count" "tl.count"
--   </pre>
module UU.UUAGC.Diagrams

-- | Construct a diagram for a full production, given its inherited
--   attributes, name, synthesized attributes and children
production :: AGBackend b => [String] -> String -> [String] -> [Child b] -> AGDiagram b

-- | Construct a child given its inherited attributes, name and sythesized
--   attributes.
child :: AGBackend b => [String] -> String -> [String] -> Child b

-- | Construct an arrow between two attributes. The first argument
--   specifies the shape of the arrow and can be <a>shaftL</a>,
--   <a>shaftR</a>, <a>shaftT</a>, <a>shaftB</a> of <a>shaftD</a>, or a
--   special trial constructed with the diagrams library.
agrule :: AGBackend b => Trail R2 -> String -> String -> AGDiagram b -> AGDiagram b

-- | Construct an induced dependency arrow between two attributes, similar
--   to <a>agrule</a> but with an explicit trial.
indrule :: AGBackend b => String -> String -> AGDiagram b -> AGDiagram b

-- | Line that first moves left and then right
shaftL :: Trail R2

-- | Line that first moves right and then left
shaftR :: Trail R2

-- | Top half of a circle
shaftT :: Trail R2

-- | Bottom half of a circle
shaftB :: Trail R2

-- | Straight line
shaftD :: Trail R2

-- | Postfix function application, for conveniently applying attributes.
--   Unlike <tt>($)</tt>, <tt>(#)</tt> has a high precedence (8), so <tt>d
--   # foo # bar</tt> can be combined with other things using operators
--   like <tt>(|||)</tt> or <tt>(&lt;&gt;)</tt> without needing
--   parentheses.
(#) :: a -> (a -> b) -> b
type AGDiagram b = Diagram b R2
class (Renderable (Path R2) b, Backend b R2) => AGBackend b

-- | Child with backend <tt>b</tt>, this type has been left abstract on
--   purpose.
data Child b
instance (Renderable (Path R2) b, Backend b R2) => AGBackend b
