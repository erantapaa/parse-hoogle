-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An SMTP client EDSL
--   
@package smtp-mail-ng
@version 0.1.0.1

module Network.Mail.SMTP.Types

-- | Type of SMTP authorization scheme.
data AuthType
LOGIN :: AuthType
type UserName = String
type Password = String

-- | SMTP command description.
data Command
HELO :: ByteString -> Command
EHLO :: ByteString -> Command
MAIL :: ByteString -> Command
RCPT :: ByteString -> Command
DATA :: Command
EXPN :: ByteString -> Command
VRFY :: ByteString -> Command
HELP :: ByteString -> Command
NOOP :: Command
RSET :: Command
QUIT :: Command
STARTTLS :: Command

-- | Dump an SMTP command to a bytestring, suitable for transmission to a
--   server. No CRLF is appended.
toByteString :: Command -> ByteString

-- | Reply code from a server.
type ReplyCode = Int

-- | This poor datatype... It doesn't look like it's used anywhere
data Response
Ok :: Response
SystemStatus :: Response
HelpMessage :: Response
ServiceReady :: Response
ServiceClosing :: Response
UserNotLocal :: Response
CannotVerify :: Response
StartMailInput :: Response
ServiceNotAvailable :: Response
MailboxUnavailable :: Response
ErrorInProcessing :: Response
InsufficientSystemStorage :: Response
SyntaxError :: Response
ParameterError :: Response
CommandNotImplemented :: Response
BadSequence :: Response
ParameterNotImplemented :: Response
MailboxUnavailableError :: Response
UserNotLocalError :: Response
ExceededStorage :: Response
MailboxNotAllowed :: Response
TransactionFailed :: Response
data Address :: *
Address :: Maybe Text -> Text -> Address
addressName :: Address -> Maybe Text
addressEmail :: Address -> Text
instance Show AuthType
instance Show Command
instance Eq Command
instance Show Response
instance Eq Response


module Network.Mail.SMTP.SMTPParameters

-- | Data necessary to kick-start an SMTP session, plus a flag to indicate
--   verbosity (actually a misnomer I though; should be smtpQuiet, since we
--   have only two options: verbose or not verbose).
data SMTPParameters
SMTPParameters :: HostName -> PortNumber -> Bool -> SMTPParameters
smtpHost :: SMTPParameters -> HostName
smtpPort :: SMTPParameters -> PortNumber
smtpVerbose :: SMTPParameters -> Bool

-- | Either a host name e.g., <tt>"haskell.org"</tt> or a numeric host
--   address string consisting of a dotted decimal IPv4 address or an IPv6
--   address e.g., <tt>"192.168.0.1"</tt>.
type HostName = String
newtype PortNumber :: *
PortNum :: Word16 -> PortNumber

-- | Default SMTP parameters for some hostname. Uses port 25, non-verbose.
defaultSMTPParameters :: HostName -> SMTPParameters
instance Show SMTPParameters


module Network.Mail.SMTP.ReplyLine

-- | A reply from a server: code and message.
data ReplyLine

-- | A greeting from a server: domain/host name and message(s).
data Greeting

-- | Projection onto ReplyCode.
replyCode :: ReplyLine -> ReplyCode

-- | Parser for a Greeting.
greeting :: Parser Greeting

-- | Parser for one or more server replies.
replyLines :: Parser [ReplyLine]
instance Show ReplyLine
instance Show Greeting


module Network.Mail.SMTP.SMTPRaw

-- | An SMTPRaw has arbitrary push<i>pull</i>close methods, and ALWAYS a
--   Handle, but that Handle is not assumed to be the direct means by which
--   we push pull or close. This is for STARTTLS support.
data SMTPRaw
SMTPRaw :: (ByteString -> IO ()) -> IO ByteString -> IO () -> Handle -> SMTPRaw
smtpPush :: SMTPRaw -> ByteString -> IO ()
smtpPull :: SMTPRaw -> IO ByteString
smtpClose :: SMTPRaw -> IO ()
smtpHandle :: SMTPRaw -> Handle

-- | Try to open an SMTPRaw, taking the server greeting as well. No
--   exception handling is performed.
smtpConnect :: String -> Int -> IO (SMTPRaw, Maybe Greeting)

-- | Send an SMTP command. No exception handling is performed.
smtpSendCommand :: SMTPRaw -> Command -> IO ()

-- | Send an SMTP command and wait for the reply. You get Nothing in case
--   the reply does not parse. No exception handling is performed.
smtpSendCommandAndWait :: SMTPRaw -> Command -> IO (Maybe [ReplyLine])

-- | Send a raw byte string. Use with care. No exception handling is
--   performed.
smtpSendRaw :: SMTPRaw -> ByteString -> IO ()

-- | Try to read ReplyLines from the SMTPRaw. No exception handling is
--   performed.
smtpGetReplyLines :: SMTPRaw -> IO (Maybe [ReplyLine])

-- | Close an SMTPRaw handle Be sure not to use the SMTPHandle after this.
smtpDisconnect :: SMTPRaw -> IO ()


module Network.Mail.SMTP.SMTP

-- | An SMTP client EDSL: it can do effects, things can go wrong, and it
--   carries state.
data SMTP a

-- | Run an expression in the SMTP monad. Should be exception safe, but I
--   am not confident in this.
smtp :: SMTPParameters -> SMTP a -> IO (Either SMTPError a)

-- | Send a command, without waiting for the reply.
command :: Command -> SMTP ()

-- | Send some bytes, with a crlf inserted at the end, without waiting for
--   the reply.
bytes :: ByteString -> SMTP ()

-- | Pull a response from the server, passing it through a function which
--   checks that it's an expected response. If the response doesn't parse
--   as an SMTP response, we give an UnexpectedResponse.
expect :: ([ReplyLine] -> Maybe SMTPError) -> SMTP ()

-- | Like expect, but you give only the ReplyCode that is expected. Any
--   other reply code, or an unexpected reponse, is considered a failure.
expectCode :: ReplyCode -> SMTP ()

-- | Description of the state which an SMTP term needs in order to be
--   evaluated.
data SMTPContext

-- | Grab the SMTPContext.
smtpContext :: SMTP SMTPContext
getSMTPServerHostName :: SMTPContext -> HostName
getSMTPClientHostName :: SMTPContext -> HostName

-- | Try to get TLS going on an SMTP connection.
startTLS :: SMTP ()

-- | Description of an error in the SMTP monad evaluation.
data SMTPError
UnexpectedResponse :: SMTPError
ConnectionFailure :: SMTPError
EncryptionError :: SMTPError
UnknownError :: SMTPError
instance Show SMTPError
instance Eq SMTPError
instance Functor SMTP
instance Applicative SMTP
instance Monad SMTP
instance MonadIO SMTP


module Network.Mail.SMTP.Auth

-- | Do LOGIN authentication.
authLogin :: UserName -> Password -> SMTP ()


module Network.Mail.SMTP.Send

-- | Attempt to send an email. This involves sending MAIL, RCPT, and DATA
--   commands.
send :: Mail -> SMTP ()
