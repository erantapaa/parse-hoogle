-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Class and instances for conversion to list of SqlValue.
--   
--   Class and instances for conversion to list of SqlValue.
@package sqlvalue-list
@version 0.2


-- | <i>Example Use:</i>
--   
--   <pre>
--   data Record = R {who :: String, age :: Int} deriving (Show, Eq)
--   deriveSqlValueList ''Record
--   </pre>
module Database.HDBC.SqlValue.List.Derive
deriveSqlValueList :: Name -> Q [Dec]

module Database.HDBC.SqlValue.List
class SqlValueList a
toSqlList :: SqlValueList a => a -> [SqlValue]
fromSqlList :: SqlValueList a => [SqlValue] -> a
instance (Convertible SqlValue t1, Convertible t1 SqlValue, Convertible SqlValue t2, Convertible t2 SqlValue, Convertible SqlValue t3, Convertible t3 SqlValue, Convertible SqlValue t4, Convertible t4 SqlValue, Convertible SqlValue t5, Convertible t5 SqlValue) => SqlValueList (t1, t2, t3, t4, t5)
instance (Convertible SqlValue t1, Convertible t1 SqlValue, Convertible SqlValue t2, Convertible t2 SqlValue, Convertible SqlValue t3, Convertible t3 SqlValue, Convertible SqlValue t4, Convertible t4 SqlValue) => SqlValueList (t1, t2, t3, t4)
instance (Convertible SqlValue t1, Convertible t1 SqlValue, Convertible SqlValue t2, Convertible t2 SqlValue, Convertible SqlValue t3, Convertible t3 SqlValue) => SqlValueList (t1, t2, t3)
instance (Convertible SqlValue t1, Convertible t1 SqlValue, Convertible SqlValue t2, Convertible t2 SqlValue) => SqlValueList (t1, t2)
instance (Convertible SqlValue a, Convertible a SqlValue) => SqlValueList [a]
