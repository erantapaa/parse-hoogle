-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Windows Game Engine for the Haskell Programmer - SFML Bindings
--   
--   HGamer3D is a game engine for developing 3D games in the programming
--   language Haskell. The game engine uses available libraries for 3D
--   graphics, sound, input device handling, gui programming and other
--   areas and make those functions available for the Haskell programmer by
--   providing a Haskell API on top of that. HGamer3D is available on
--   Windows only.
@package HGamer3D-SFML-Binding
@version 0.2.0

module HGamer3D.Bindings.SFML.StructVec3
newtype Vector3f
Vector3f :: Vec3 -> Vector3f
type Vector3fPtr = Ptr (Vector3f)
type Vec3Ptr = Ptr (Vec3)
withVec3 :: Vec3 -> (Vec3Ptr -> IO b) -> IO b
peekVec3 :: Ptr a -> IO Vec3
instance Storable Vector3f

module HGamer3D.Bindings.SFML.EnumSoundSourceStatus
data EnumSoundSourceStatus
SoundSourceStatusStopped :: EnumSoundSourceStatus
SoundSourceStatusPaused :: EnumSoundSourceStatus
SoundSourceStatusPlaying :: EnumSoundSourceStatus
instance Enum EnumSoundSourceStatus
instance Eq EnumSoundSourceStatus

module HGamer3D.Bindings.SFML.EnumMouseButton
data EnumMouseButton
MouseButtonLeft :: EnumMouseButton
MouseButtonRight :: EnumMouseButton
MouseButtonMiddle :: EnumMouseButton
MouseButtonXButton1 :: EnumMouseButton
MouseButtonXButton2 :: EnumMouseButton
MouseButtonButtonCount :: EnumMouseButton
instance Enum EnumMouseButton
instance Eq EnumMouseButton

module HGamer3D.Bindings.SFML.EnumKey
data EnumKey
KeyA :: EnumKey
KeyB :: EnumKey
KeyC :: EnumKey
KeyD :: EnumKey
KeyE :: EnumKey
KeyF :: EnumKey
KeyG :: EnumKey
KeyH :: EnumKey
KeyI :: EnumKey
KeyJ :: EnumKey
KeyK :: EnumKey
KeyL :: EnumKey
KeyM :: EnumKey
KeyN :: EnumKey
KeyO :: EnumKey
KeyP :: EnumKey
KeyQ :: EnumKey
KeyR :: EnumKey
KeyS :: EnumKey
KeyT :: EnumKey
KeyU :: EnumKey
KeyV :: EnumKey
KeyW :: EnumKey
KeyX :: EnumKey
KeyY :: EnumKey
KeyZ :: EnumKey
KeyNum0 :: EnumKey
KeyNum1 :: EnumKey
KeyNum2 :: EnumKey
KeyNum3 :: EnumKey
KeyNum4 :: EnumKey
KeyNum5 :: EnumKey
KeyNum6 :: EnumKey
KeyNum7 :: EnumKey
KeyNum8 :: EnumKey
KeyNum9 :: EnumKey
KeyEscape :: EnumKey
KeyLControl :: EnumKey
KeyLShift :: EnumKey
KeyLAlt :: EnumKey
KeyLSystem :: EnumKey
KeyRControl :: EnumKey
KeyRShift :: EnumKey
KeyRAlt :: EnumKey
KeyRSystem :: EnumKey
KeyMenu :: EnumKey
KeyLBracket :: EnumKey
KeyRBracket :: EnumKey
KeySemiColon :: EnumKey
KeyComma :: EnumKey
KeyPeriod :: EnumKey
KeyQuote :: EnumKey
KeySlash :: EnumKey
KeyBackSlash :: EnumKey
KeyTilde :: EnumKey
KeyEqual :: EnumKey
KeyDash :: EnumKey
KeySpace :: EnumKey
KeyReturn :: EnumKey
KeyBack :: EnumKey
KeyTab :: EnumKey
KeyPageUp :: EnumKey
KeyPageDown :: EnumKey
KeyEnd :: EnumKey
KeyHome :: EnumKey
KeyInsert :: EnumKey
KeyDelete :: EnumKey
KeyAdd :: EnumKey
KeySubtract :: EnumKey
KeyMultiply :: EnumKey
KeyDivide :: EnumKey
KeyLeft :: EnumKey
KeyRight :: EnumKey
KeyUp :: EnumKey
KeyDown :: EnumKey
KeyNumpad0 :: EnumKey
KeyNumpad1 :: EnumKey
KeyNumpad2 :: EnumKey
KeyNumpad3 :: EnumKey
KeyNumpad4 :: EnumKey
KeyNumpad5 :: EnumKey
KeyNumpad6 :: EnumKey
KeyNumpad7 :: EnumKey
KeyNumpad8 :: EnumKey
KeyNumpad9 :: EnumKey
KeyF1 :: EnumKey
KeyF2 :: EnumKey
KeyF3 :: EnumKey
KeyF4 :: EnumKey
KeyF5 :: EnumKey
KeyF6 :: EnumKey
KeyF7 :: EnumKey
KeyF8 :: EnumKey
KeyF9 :: EnumKey
KeyF10 :: EnumKey
KeyF11 :: EnumKey
KeyF12 :: EnumKey
KeyF13 :: EnumKey
KeyF14 :: EnumKey
KeyF15 :: EnumKey
KeyPause :: EnumKey
KeyKeyCount :: EnumKey
instance Enum EnumKey
instance Eq EnumKey

module HGamer3D.Bindings.SFML.EnumJoystickAxis
data EnumJoystickAxis
JoystickAxisX :: EnumJoystickAxis
JoystickAxisY :: EnumJoystickAxis
JoystickAxisZ :: EnumJoystickAxis
JoystickAxisR :: EnumJoystickAxis
JoystickAxisU :: EnumJoystickAxis
JoystickAxisV :: EnumJoystickAxis
JoystickAxisPovX :: EnumJoystickAxis
JoystickAxisPovY :: EnumJoystickAxis
instance Enum EnumJoystickAxis
instance Eq EnumJoystickAxis

module HGamer3D.Bindings.SFML.StructHG3DClass
type HG3DClassPtr = Ptr (HG3DClass)
withHG3DClass :: HG3DClass -> (HG3DClassPtr -> IO b) -> IO b
peekHG3DClass :: HG3DClassPtr -> IO HG3DClass

module HGamer3D.Bindings.SFML.Utils
withCStringLenIntConv :: Num n => String -> ((CString, n) -> IO a) -> IO a
peekCStringLenIntConv :: Integral n => (CString, n) -> IO String
withIntConv :: (Storable b, Integral a, Integral b) => a -> (Ptr b -> IO c) -> IO c
withFloatConv :: (Storable b, RealFloat a, RealFloat b) => a -> (Ptr b -> IO c) -> IO c
peekIntConv :: (Storable a, Integral a, Integral b) => Ptr a -> IO b
peekFloatConv :: (Storable a, RealFloat a, RealFloat b) => Ptr a -> IO b
withCUString :: String -> (Ptr b -> IO a) -> IO a
peekCUString :: Ptr a -> IO String
alloc64k :: (Ptr a -> IO b) -> IO b
cIntFromEnum :: Enum a => a -> CInt
cIntToEnum :: Enum a => CInt -> a
withBoolUtil :: (Integral a, Storable a) => Bool -> (Ptr a -> IO b) -> IO b
peekBoolUtil :: (Integral a, Storable a) => Ptr a -> IO Bool
withEnumUtil :: (Enum a, Integral b, Storable b) => a -> (Ptr b -> IO c) -> IO c
peekEnumUtil :: (Enum a, Integral b, Storable b) => Ptr b -> IO a

-- | Integral conversion
cIntConv :: (Integral a, Integral b) => a -> b

-- | Floating conversion
cFloatConv :: (RealFloat a, RealFloat b) => a -> b

-- | Convert a C enumeration to Haskell.
cToEnum :: (Integral i, Enum e) => i -> e

-- | Convert a Haskell enumeration to C.
cFromEnum :: (Enum e, Integral i) => e -> i

module HGamer3D.Bindings.SFML.ClassPtr
type ClassMouseHG3D = Ptr (())
type ClassJoystick = Ptr (())
type ClassKeyboard = Ptr (())
type ClassListener = Ptr (())
type ClassMouse = Ptr (())
type ClassMusic = Ptr (())
type ClassSound = Ptr (())
type ClassSoundBuffer = Ptr (())
type ClassSoundSource = Ptr (())
type ClassSoundStream = Ptr (())

module HGamer3D.Bindings.SFML.ClassJoystick
isConnected :: Int -> IO (Bool)
getButtonCount :: Int -> IO (Int)
hasAxis :: Int -> EnumJoystickAxis -> IO (Bool)
isButtonPressed :: Int -> Int -> IO (Bool)
getAxisPosition :: Int -> EnumJoystickAxis -> IO (Float)
update :: IO ()
isConnected'_ :: CUInt -> ((Ptr CInt) -> (IO ()))
getButtonCount'_ :: CUInt -> ((Ptr CUInt) -> (IO ()))
hasAxis'_ :: CUInt -> (CInt -> ((Ptr CInt) -> (IO ())))
isButtonPressed'_ :: CUInt -> (CUInt -> ((Ptr CInt) -> (IO ())))
getAxisPosition'_ :: CUInt -> (CInt -> ((Ptr CFloat) -> (IO ())))
update'_ :: IO ()

module HGamer3D.Bindings.SFML.ClassKeyboard
isKeyPressed :: EnumKey -> IO (Bool)
isKeyPressed'_ :: CInt -> ((Ptr CInt) -> (IO ()))

module HGamer3D.Bindings.SFML.ClassListener
setGlobalVolume :: Float -> IO ()
getGlobalVolume :: IO (Float)
setPosition :: Float -> Float -> Float -> IO ()
getPosition :: IO (Vec3)
setDirection :: Float -> Float -> Float -> IO ()
getDirection :: IO (Vec3)
setGlobalVolume'_ :: CFloat -> (IO ())
getGlobalVolume'_ :: (Ptr CFloat) -> (IO ())
setPosition'_ :: CFloat -> (CFloat -> (CFloat -> (IO ())))
getPosition'_ :: (Vec3Ptr) -> (IO ())
setDirection'_ :: CFloat -> (CFloat -> (CFloat -> (IO ())))
getDirection'_ :: (Vec3Ptr) -> (IO ())

module HGamer3D.Bindings.SFML.ClassMouse
isButtonPressed :: EnumMouseButton -> IO (Bool)
isButtonPressed'_ :: CInt -> ((Ptr CInt) -> (IO ()))

module HGamer3D.Bindings.SFML.ClassMouseHG3D
getPosition :: IO (Int, Int)
getPosition'_ :: (Ptr CInt) -> ((Ptr CInt) -> (IO ()))

module HGamer3D.Bindings.SFML.ClassMusic
new :: IO (HG3DClass)
delete :: HG3DClass -> IO ()
openFromFile :: HG3DClass -> String -> IO (Bool)
new'_ :: (HG3DClassPtr) -> (IO ())
delete'_ :: (HG3DClassPtr) -> (IO ())
openFromFile'_ :: (HG3DClassPtr) -> ((Ptr CChar) -> ((Ptr CInt) -> (IO ())))

module HGamer3D.Bindings.SFML.ClassSound
new :: IO (HG3DClass)
delete :: HG3DClass -> IO ()
play :: HG3DClass -> IO ()
pause :: HG3DClass -> IO ()
stop :: HG3DClass -> IO ()
setBuffer :: HG3DClass -> HG3DClass -> IO ()
setLoop :: HG3DClass -> Bool -> IO ()
getLoop :: HG3DClass -> IO (Bool)
resetBuffer :: HG3DClass -> IO ()
new'_ :: (HG3DClassPtr) -> (IO ())
delete'_ :: (HG3DClassPtr) -> (IO ())
play'_ :: (HG3DClassPtr) -> (IO ())
pause'_ :: (HG3DClassPtr) -> (IO ())
stop'_ :: (HG3DClassPtr) -> (IO ())
setBuffer'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
setLoop'_ :: (HG3DClassPtr) -> (CInt -> (IO ()))
getLoop'_ :: (HG3DClassPtr) -> ((Ptr CInt) -> (IO ()))
resetBuffer'_ :: (HG3DClassPtr) -> (IO ())

module HGamer3D.Bindings.SFML.ClassSoundBuffer
new :: IO (HG3DClass)
delete :: HG3DClass -> IO ()
loadFromFile :: HG3DClass -> String -> IO (Bool)
saveToFile :: HG3DClass -> String -> IO (Bool)
getSampleRate :: HG3DClass -> IO (Int)
getChannelCount :: HG3DClass -> IO (Int)
new'_ :: (HG3DClassPtr) -> (IO ())
delete'_ :: (HG3DClassPtr) -> (IO ())
loadFromFile'_ :: (HG3DClassPtr) -> ((Ptr CChar) -> ((Ptr CInt) -> (IO ())))
saveToFile'_ :: (HG3DClassPtr) -> ((Ptr CChar) -> ((Ptr CInt) -> (IO ())))
getSampleRate'_ :: (HG3DClassPtr) -> ((Ptr CUInt) -> (IO ()))
getChannelCount'_ :: (HG3DClassPtr) -> ((Ptr CUInt) -> (IO ()))

module HGamer3D.Bindings.SFML.ClassSoundSource
delete :: HG3DClass -> IO ()
setPitch :: HG3DClass -> Float -> IO ()
setVolume :: HG3DClass -> Float -> IO ()
setPosition :: HG3DClass -> Float -> Float -> Float -> IO ()
setRelativeToListener :: HG3DClass -> Bool -> IO ()
setMinDistance :: HG3DClass -> Float -> IO ()
setAttenuation :: HG3DClass -> Float -> IO ()
getPitch :: HG3DClass -> IO (Float)
getVolume :: HG3DClass -> IO (Float)
getPosition :: HG3DClass -> IO (Vec3)
isRelativeToListener :: HG3DClass -> IO (Bool)
getMinDistance :: HG3DClass -> IO (Float)
getAttenuation :: HG3DClass -> IO (Float)
delete'_ :: (HG3DClassPtr) -> (IO ())
setPitch'_ :: (HG3DClassPtr) -> (CFloat -> (IO ()))
setVolume'_ :: (HG3DClassPtr) -> (CFloat -> (IO ()))
setPosition'_ :: (HG3DClassPtr) -> (CFloat -> (CFloat -> (CFloat -> (IO ()))))
setRelativeToListener'_ :: (HG3DClassPtr) -> (CInt -> (IO ()))
setMinDistance'_ :: (HG3DClassPtr) -> (CFloat -> (IO ()))
setAttenuation'_ :: (HG3DClassPtr) -> (CFloat -> (IO ()))
getPitch'_ :: (HG3DClassPtr) -> ((Ptr CFloat) -> (IO ()))
getVolume'_ :: (HG3DClassPtr) -> ((Ptr CFloat) -> (IO ()))
getPosition'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
isRelativeToListener'_ :: (HG3DClassPtr) -> ((Ptr CInt) -> (IO ()))
getMinDistance'_ :: (HG3DClassPtr) -> ((Ptr CFloat) -> (IO ()))
getAttenuation'_ :: (HG3DClassPtr) -> ((Ptr CFloat) -> (IO ()))

module HGamer3D.Bindings.SFML.ClassSoundStream
delete :: HG3DClass -> IO ()
play :: HG3DClass -> IO ()
pause :: HG3DClass -> IO ()
stop :: HG3DClass -> IO ()
getChannelCount :: HG3DClass -> IO (Int)
getSampleRate :: HG3DClass -> IO (Int)
setLoop :: HG3DClass -> Bool -> IO ()
getLoop :: HG3DClass -> IO (Bool)
delete'_ :: (HG3DClassPtr) -> (IO ())
play'_ :: (HG3DClassPtr) -> (IO ())
pause'_ :: (HG3DClassPtr) -> (IO ())
stop'_ :: (HG3DClassPtr) -> (IO ())
getChannelCount'_ :: (HG3DClassPtr) -> ((Ptr CUInt) -> (IO ()))
getSampleRate'_ :: (HG3DClassPtr) -> ((Ptr CUInt) -> (IO ()))
setLoop'_ :: (HG3DClassPtr) -> (CInt -> (IO ()))
getLoop'_ :: (HG3DClassPtr) -> ((Ptr CInt) -> (IO ()))
