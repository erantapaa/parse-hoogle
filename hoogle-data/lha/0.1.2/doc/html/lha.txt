-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Data structures for the Les Houches Accord
--   
--   This package provides data structures for HEP events, as outlined by
--   the Les Houches Accord (hep-ph/0109068v1)
@package lha
@version 0.1.2


-- | This module provides data structures for HEP events, as outlined by
--   the Les Houches Accord (hep-ph/0109068v1). It attempts to be as close
--   as possible to a direct haskell translation of the accord. Other
--   relevant documents include:
--   
--   <ul>
--   <li>L. Garren, I. G. Knowles, T. Sjostrand and T. Trippe, Eur. Phys.
--   J. C 15, 205 (2000).</li>
--   <li>H. Plothow-Besch, Comput. Phys. Commun. 75, 396 (1993); CERN
--   Program Library Long Writeup W5051 (2000); refer to
--   <a>http://consult.cern.ch/writeup/pdflib/</a>.</li>
--   </ul>
module Data.LHA

-- | Describes a generated event.
data Event
Event :: Int -> Int -> Double -> Double -> Double -> Double -> [Particle] -> Event

-- | The number of particles in this event.
nPart :: Event -> Int

-- | The ID of the subprocess used to generate this event.
evProcId :: Event -> Int
evWeight :: Event -> Double

-- | The scale of the event, in GeV.
scale :: Event -> Double
aQED :: Event -> Double
aQCD :: Event -> Double
parts :: Event -> [Particle]

-- | Describes the properties of an event generation run. Note that this
--   data structure does not contain the generated event information.
data Run
Run :: (Beam, Beam) -> Int -> Int -> [Subprocess] -> Run

-- | The properties of the two beams being used in this run.
runBeam :: Run -> (Beam, Beam)

-- | Switch dictating how the event weights are to be interpreted.
idwt :: Run -> Int

-- | The number of different subprocesses being used.
nProc :: Run -> Int

-- | List of all subprocesses being used.
procs :: Run -> [Subprocess]

-- | Represents the properties of a single beam particle.
data Beam
Beam :: Int -> Double -> Int -> Int -> Beam

-- | ID of the beam particle according to the Particle Data Group
--   convention.
beamPDG :: Beam -> Int

-- | Energy in GeV of the beam particle.
beamE :: Beam -> Double

-- | Author group for the beam, according to the Cernlib PDFlib
--   specification.
pdfg :: Beam -> Int

-- | PDF set ID for the beam, according to the Cernlib PDFlib
--   specification.
pdfs :: Beam -> Int

-- | Describes the properties of a subprocess.
data Subprocess
Subprocess :: Double -> Double -> Double -> Int -> Subprocess

-- | The cross-section of this subprocess, in pb.
procXSec :: Subprocess -> Double

-- | The statistical error associated with the value of procXSec.
procXErr :: Subprocess -> Double
procXMax :: Subprocess -> Double
procId :: Subprocess -> Int

-- | Describes a single particle component of a generated event.
data Particle
Particle :: Int -> ParticleStatus -> MaybePair Int -> (Int, Int) -> Double -> Double -> Double -> Double -> Double -> Double -> Double -> Particle

-- | ID of the particle according to the Particle Data Group convention.
partPDG :: Particle -> Int

-- | Status code of the particle.
status :: Particle -> ParticleStatus

-- | The mother particles.
mothers :: Particle -> MaybePair Int
iColor :: Particle -> (Int, Int)
partPx :: Particle -> Double
partPy :: Particle -> Double
partPz :: Particle -> Double
partE :: Particle -> Double
partM :: Particle -> Double

-- | The lifetime of the particle, in mm.
lifetime :: Particle -> Double
spin :: Particle -> Double

-- | Status codes for particles.
data ParticleStatus

-- | Corresponds to status code -1.
Incoming :: ParticleStatus

-- | Corresponds to status code +1.
OutgoingFinal :: ParticleStatus

-- | Corresponds to status code -2.
IntermediateSpaceLike :: ParticleStatus

-- | Corresponds to status code +2.
IntermediateResonance :: ParticleStatus

-- | Corresponds to status code +3.
DocumentationOnly :: ParticleStatus

-- | Corresponds to status code -9.
IncomingBeam :: ParticleStatus
statusToInt :: Num a => ParticleStatus -> a
statusFromInt :: (Eq a, Num a) => a -> ParticleStatus
data MaybePair a
PZero :: MaybePair a
POne :: a -> MaybePair a
PBoth :: (a, a) -> MaybePair a
