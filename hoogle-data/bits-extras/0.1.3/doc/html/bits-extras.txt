-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Efficient high-level bit operations not found in Data.Bits
--   
--   This package contains efficient implementations of high-level bit
--   operations missing from Data.Bits. The implementation is based on GCC
--   builtins, which translate to specialized instructions where available.
--   
--   All operations in this package can also be (less efficiently)
--   implemented in terms of Data.Bits operations.
--   
--   <i>Issues:</i> A GCC-provided library, <tt>libgcc_s</tt>, is
--   dynamically linked to provide software fallbacks on architectures
--   without instructions corresponding to specific operations. This is
--   currently only expected to work on Linux systems, and even there can
--   lead to issues with GHCi's custom linker. A workaround for GHCi on a
--   linux system: <tt>ln -s /lib/libgcc_s.so.1 /lib/libgcc_s.so</tt>.
--   
--   The current plan for broader support is to replace the libgcc
--   dependency with built-in fallbacks in C or Haskell code. This needs to
--   closely follow GCC's fall-back behaviour for each architecture.
--   Alternative ideas would be appreciated.
--   
--   Relevant Hackage tickets:
--   
--   <ul>
--   <li><a>http://hackage.haskell.org/trac/ghc/ticket/3563</a></li>
--   <li><a>http://hackage.haskell.org/trac/ghc/ticket/4102</a></li>
--   </ul>
--   
--   <i>Changes</i>:
--   
--   <ul>
--   <li>0.1.3: Added a first test and tweaked documentation. No functional
--   changes.</li>
--   <li>0.1.2: Moved the <a>Data.Bits.Atomic</a> module to the package
--   <tt>bits-atomic</tt>. Those operations do not depend on libgcc_s and
--   should work wherever GCC 4.X is available. Link to
--   <tt>bits-atomic</tt> on hackage:
--   <a>http://hackage.haskell.org/package/bits-atomic</a></li>
--   </ul>
@package bits-extras
@version 0.1.3


-- | Extended bit operations, implemented using GCC builtins (see
--   <a>http://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html</a>).
module Data.Bits.Extras

-- | Instances provided: <a>Word</a>, <a>Word8</a>, <a>Word16</a>,
--   <a>Word32</a>, <a>Word64</a>, <a>Int</a>, <a>Int8</a>, <a>Int16</a>,
--   <a>Int32</a>, <a>Int64</a>
class Bits x => ExtraBits x
lowestBitPlus1 :: ExtraBits x => x -> Word32
leadingZeros :: ExtraBits x => x -> Word32
trailingZeros :: ExtraBits x => x -> Word32
populationCount :: ExtraBits x => x -> Word32
parity :: ExtraBits x => x -> Word32
byteSwap :: ExtraBits x => x -> x
instance ExtraBits Int64
instance ExtraBits Int32
instance ExtraBits Int16
instance ExtraBits Int8
instance ExtraBits Int
instance ExtraBits Word64
instance ExtraBits Word32
instance ExtraBits Word16
instance ExtraBits Word8
instance ExtraBits Word
