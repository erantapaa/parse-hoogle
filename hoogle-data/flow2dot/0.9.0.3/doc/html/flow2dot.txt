-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Library and binary to generate sequence/flow diagrams from plain text source
--   
--   Generates sequence diagrams from textual descriptions with help of
--   Graphviz graph drawing tool. Check out
--   <a>http://adept.linux.kiev.ua:8080/repos/flow2dot/sample.flow</a>
--   (source) and
--   <a>http://adept.linux.kiev.ua:8080/repos/flow2dot/sample.png</a>
--   (output).
@package flow2dot
@version 0.9.0.3


-- | Converts flow diagrams to the Graphviz (Dot) files for subsequent
--   rendering into nice pictures.
module Text.FlowDiagram

-- | <a>flow2dot</a> take a list of flow diagram items (<a>Flow</a>) and
--   converts them to Graphviz code
flow2dot :: [Flow] -> String

-- | Parse given string and return Flow Diagram contained therein. All
--   syntax errors are thrown via <a>error</a>
parseFlow :: String -> String -> [Flow]

-- | Parse specified file and return Flow Diagram contained therein. All
--   syntax errors are thrown via <a>error</a>
parseFlowFromFile :: FilePath -> IO [Flow]

-- | Print element of the flow diagram as String
showFlow :: Flow -> String

-- | Flow could include messages and actions, one item per source line
data Flow

-- | Message (from, to, message text). Syntax in the source file: <tt>from
--   -&gt; to: message text</tt>
Msg :: String -> String -> String -> Flow

-- | Action (actor, message text). Syntax in the source file: <tt>actor:
--   message text</tt>
Action :: String -> String -> Flow

-- | Tries to put swimlines in the specified order. Syntax: <tt>order
--   swimline1 swimline2 ...</tt>
Order :: [String] -> Flow
instance Eq Flow
instance Show Flow
instance Arbitrary Flow
instance Arbitrary Message
instance Arbitrary Name
