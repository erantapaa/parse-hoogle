-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Uniform IO over files, network, watever.
--   
@package uniform-io
@version 0.1.0.0


-- | Uniform-IO provides a typeclass for uniform access of different types
--   of targets, and implementations for abstracting standard streams,
--   files and network connections. This module also provides TLS wraping
--   over other IO targets.
module System.IO.Uniform

-- | Settings for starttls functions.
data TlsSettings
TlsSettings :: String -> String -> TlsSettings
tlsPrivateKeyFile :: TlsSettings -> String
tlsCertificateChainFile :: TlsSettings -> String

-- | Typeclass for uniform IO targets.
class UniformIO a
uRead :: UniformIO a => a -> Int -> IO ByteString
uPut :: UniformIO a => a -> ByteString -> IO ()
uClose :: UniformIO a => a -> IO ()
startTls :: UniformIO a => TlsSettings -> a -> IO TlsStream
isSecure :: UniformIO a => a -> Bool
data SocketIO
data FileIO
data TlsStream

-- | A bounded IP port from where to accept SocketIO connections.
data BoundedPort

-- | A type that wraps any type in the UniformIO class.
data SomeIO
SomeIO :: a -> SomeIO

-- | ConnecctTo ipAddress port
--   
--   Connects to the given port of the host at the given IP address.
connectTo :: IP -> Int -> IO SocketIO

-- | connectToHost hostName port
--   
--   Connects to the given host and port.
connectToHost :: String -> Int -> IO SocketIO

-- | bindPort port Binds to the given IP port, becoming ready to accept
--   connections on it. Binding to port numbers under 1024 will fail unless
--   performed by the superuser, once bounded, a process can reduce its
--   privileges and still accept clients on that port.
bindPort :: Int -> IO BoundedPort

-- | accept port
--   
--   Accept clients on a port previously bound with bindPort.
accept :: BoundedPort -> IO SocketIO

-- | Open a file for bidirectional IO.
openFile :: String -> IO FileIO

-- | Gets the address of the peer socket of a internet connection.
getPeer :: SocketIO -> IO (IP, Int)

-- | Closes a BoundedPort, and releases any resource used by it.
closePort :: BoundedPort -> IO ()


-- | Streamline exports a monad that, given an uniform IO target, emulates
--   character tream IO using high performance block IO.
module System.IO.Uniform.Streamline

-- | Monad that emulates character stream IO over block IO.
data Streamline m a

-- | withClient f boundPort
--   
--   Accepts a connection at the bound port, runs f and closes the
--   connection.
withClient :: MonadIO m => (IP -> Int -> Streamline m a) -> BoundedPort -> m a

-- | withServer f serverIP port
--   
--   Connects to the given server port, runs f, and closes the connection.
withServer :: MonadIO m => Streamline m a -> IP -> Int -> m a

-- | withTarget f someIO
--   
--   Runs f wrapped on a Streamline monad that does IO on nomeIO.
withTarget :: (MonadIO m, UniformIO a) => Streamline m b -> a -> m b

-- | Sends data over the streamlines an IO target.
send :: MonadIO m => ByteString -> Streamline m ()

-- | Receives a line from the streamlined IO target.
receiveLine :: MonadIO m => Streamline m ByteString

-- | Receives a line from the streamlined IO target, but breaks the line on
--   reasonably sized chuncks, and reads them lazyly, so that IO can be
--   done in constant memory space.
lazyRecieveLine :: MonadIO m => Streamline m [ByteString]

-- | lazyReceiveN n Receives n bytes of data from the streamlined IO
--   target, but breaks the data on reasonably sized chuncks, and reads
--   them lazyly, so that IO can be done in constant memory space.
lazyReceiveN :: (Functor m, MonadIO m) => Int -> Streamline m [ByteString]

-- | Wraps the streamlined IO target on TLS, streamlining the new wrapper
--   afterwads.
startTls :: MonadIO m => TlsSettings -> Streamline m ()

-- | Runs an Attoparsec parser over the data read from the streamlined IO
--   target. Returning the parser result.
runAttoparsec :: MonadIO m => Parser a -> Streamline m (Either String a)

-- | Runs an Attoparsec parser over the data read from the streamlined IO
--   target. Returns both the parser result and the string consumed by it.
runAttoparsecAndReturn :: MonadIO m => Parser a -> Streamline m (ByteString, Either String a)

-- | Indicates whether transport layer security is being used.
isSecure :: Monad m => Streamline m Bool

-- | Sets the timeout for the streamlined IO target.
setTimeout :: Monad m => Int -> Streamline m ()

-- | Sets echo of the streamlines IO target. If echo is set, all the data
--   read an written to the target will be echoed in stdout, with "&gt;"
--   and "&lt;" markers indicating what is read and written.
setEcho :: Monad m => Bool -> Streamline m ()
instance MonadIO m => MonadIO (Streamline m)
instance MonadTrans Streamline
instance (Functor m, Monad m) => Applicative (Streamline m)
instance Monad m => Functor (Streamline m)
instance Monad m => Monad (Streamline m)
