-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Safe top-level mutable variables which scope like ordinary values
--   
--   This library provides a way to declare <tt>IORef</tt>s,
--   <tt>TVar</tt>s, <tt>Chan</tt>s, etc. at the top level of a module.
--   
--   <ul>
--   <li>Declarations are safe. User code does not invoke
--   <tt>unsafePerformIO</tt> or compiler pragmas.</li>
--   <li>Variables are ordinary module-level bindings. Their scope can be
--   controlled through the usual module import/export mechanism. Unrelated
--   code cannot interfere with private variables by guessing some global
--   identifier.</li>
--   <li>References are statically typed, and polymorphic references are
--   statically forbidden.</li>
--   <li>The implementation is simple, and closely follows existing common
--   practice.</li>
--   </ul>
--   
--   This library does not prevent the software design problems caused by
--   global state. Rather, it provides some implementation safety for those
--   circumstances where global state really is necessary.
--   
--   Fundamentally this library just provides Template Haskell macros for
--   the usual <tt>unsafePerformIO</tt> trick, so it is subject to the same
--   caveats. In particular, linking a module and then loading the same
--   module dynamically through the GHC API may produce two copies of the
--   same top-level variable. See the documentation of
--   <tt>unsafePerformIO</tt> for additional compiler-specific
--   requirements.
--   
--   This library may not work properly on GHC before 7.4, due to a GHC
--   bug: <a>http://hackage.haskell.org/trac/ghc/ticket/5558</a>
@package safe-globals
@version 0.1.1


-- | Declare safe top-level mutable variables which scope like ordinary
--   values.
module Data.Global

-- | Declare an <tt><a>IORef</a></tt> with an initial value.
--   
--   <pre>
--   declareIORef "foo" [t| Char |] [e| 'x' |]
--   </pre>
declareIORef :: DeclareInit

-- | Declare an <tt><a>MVar</a></tt> with an initial value.
--   
--   <pre>
--   declareMVar "foo" [t| Char |] [e| 'x' |]
--   </pre>
declareMVar :: DeclareInit

-- | Declare an empty <tt><a>MVar</a></tt>.
--   
--   <pre>
--   declareEmptyMVar "foo" [t| Char |]
--   </pre>
declareEmptyMVar :: Declare

-- | Declare a <tt><a>SampleVar</a></tt> with an initial value.
--   
--   <pre>
--   declareSampleVar "foo" [t| Char |] [e| 'x' |]
--   </pre>
declareSampleVar :: DeclareInit

-- | Declare an empty <tt><a>Chan</a></tt>.
--   
--   <pre>
--   declareChan "foo" [t| Char |]
--   </pre>
declareChan :: Declare

-- | Declare a <tt><a>QSem</a></tt> with the specified quantity.
--   
--   <pre>
--   declareQSem "foo" [e| 3 |]
--   </pre>
declareQSem :: DeclareSem

-- | Declare a <tt><a>QSemN</a></tt> with the specified quantity.
--   
--   <pre>
--   declareQSemN "foo" [e| 3 |]
--   </pre>
declareQSemN :: DeclareSem

-- | Declare a <tt><a>TVar</a></tt> with an initial value.
--   
--   <pre>
--   declareTVar "foo" [t| Char |] [e| 'x' |]
--   </pre>
declareTVar :: DeclareInit

-- | Declare a <tt><a>TMVar</a></tt> with an initial value.
--   
--   <pre>
--   declareTMVar "foo" [t| Char |] [e| 'x' |]
--   </pre>
declareTMVar :: DeclareInit

-- | Declare an empty <tt><a>TMVar</a></tt>.
--   
--   <pre>
--   declareEmptyTMVar "foo" [t| Char |]
--   </pre>
declareEmptyTMVar :: Declare

-- | Declare an empty <tt><a>TChan</a></tt>.
--   
--   <pre>
--   declareTChan "foo" [t| Char |]
--   </pre>
declareTChan :: Declare

-- | The type of macros for declaring variables.
type Declare = String -> Q Type -> Q [Dec]

-- | The type of macros for declaring variables with initializers.
type DeclareInit = String -> Q Type -> Q Exp -> Q [Dec]

-- | The type of macros for declaring semaphores.
type DeclareSem = String -> Q Exp -> Q [Dec]
