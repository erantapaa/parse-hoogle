-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | automatic C++ binding generation
--   
@package fficxx
@version 0.2.1


module FFICXX.Generate.QQ.Verbatim
verbatim :: QuasiQuoter


module FFICXX.Generate.Type.Module
data Module
Module :: String -> [String] -> Module
module_name :: Module -> String
module_exports :: Module -> [String]
mkModuleExports :: Module -> String

module FFICXX.Paths_fficxx
version :: Version
getBinDir :: IO FilePath
getLibDir :: IO FilePath
getDataDir :: IO FilePath
getLibexecDir :: IO FilePath
getDataFileName :: FilePath -> IO FilePath
getSysconfDir :: IO FilePath


module FFICXX.Generate.Util
moduleDirFile :: String -> (String, String)
hline :: IO ()
toUppers :: String -> String
toLowers :: String -> String
firstLower :: String -> String
conn :: String -> String -> String -> String
connspace :: String -> String -> String
conncomma :: String -> String -> String
connBSlash :: String -> String -> String
connSemicolonBSlash :: String -> String -> String
connRet :: String -> String -> String
connRet2 :: String -> String -> String
connArrow :: String -> String -> String
intercalateWith :: (String -> String -> String) -> (a -> String) -> [a] -> String
intercalateWithM :: Monad m => (String -> String -> String) -> (a -> m String) -> [a] -> m String
render :: String -> [(String, String)] -> String
renderTemplateGroup :: ToSElem a => STGroup String -> [(String, a)] -> [Char] -> String
setManyAttribSafer :: (Stringable b, ToSElem a) => [(String, a)] -> StringTemplate b -> StringTemplate b


module FFICXX.Generate.Type.PackageInterface
newtype PackageName
PkgName :: String -> PackageName
newtype ClassName
ClsName :: String -> ClassName
newtype HeaderName
HdrName :: String -> HeaderName
unHdrName :: HeaderName -> String
type PackageInterface = HashMap (PackageName, ClassName) HeaderName
newtype TypeMacro
TypMcro :: String -> TypeMacro
unTypMcro :: TypeMacro -> String
instance Hashable PackageName
instance Show PackageName
instance Eq PackageName
instance Ord PackageName
instance Hashable ClassName
instance Show ClassName
instance Eq ClassName
instance Ord ClassName
instance Hashable HeaderName
instance Show HeaderName
instance Eq HeaderName
instance Ord HeaderName
instance Show TypeMacro
instance Eq TypeMacro
instance Ord TypeMacro
instance IsString HeaderName


module FFICXX.Generate.Type.Class

-- | C types
data CTypes
CTString :: CTypes
CTChar :: CTypes
CTInt :: CTypes
CTUInt :: CTypes
CTLong :: CTypes
CTULong :: CTypes
CTDouble :: CTypes
CTBool :: CTypes
CTDoubleStar :: CTypes
CTVoidStar :: CTypes
CTIntStar :: CTypes
CTCharStarStar :: CTypes
CPointer :: CTypes -> CTypes
CRef :: CTypes -> CTypes

-- | C++ types
data CPPTypes
CPTClass :: Class -> CPPTypes
CPTClassRef :: Class -> CPPTypes

-- | const flag
data IsConst
Const :: IsConst
NoConst :: IsConst
data Types
Void :: Types
SelfType :: Types
CT :: CTypes -> IsConst -> Types
CPT :: CPPTypes -> IsConst -> Types
cvarToStr :: CTypes -> IsConst -> String -> String
ctypToStr :: CTypes -> IsConst -> String
self_ :: Types
cstring_ :: Types
cint_ :: Types
int_ :: Types
uint_ :: Types
ulong_ :: Types
long_ :: Types
culong_ :: Types
clong_ :: Types
cchar_ :: Types
char_ :: Types
short_ :: Types
cdouble_ :: Types
double_ :: Types
doublep_ :: Types
float_ :: Types
bool_ :: Types
void_ :: Types
voidp_ :: Types
intp_ :: Types
intref_ :: Types
charpp_ :: Types
star_ :: CTypes -> Types
cstar_ :: CTypes -> Types
self :: String -> (Types, String)
voidp :: String -> (Types, String)
cstring :: String -> (Types, String)
cint :: String -> (Types, String)
int :: String -> (Types, String)
uint :: String -> (Types, String)
long :: String -> (Types, String)
ulong :: String -> (Types, String)
clong :: String -> (Types, String)
culong :: String -> (Types, String)
cchar :: String -> (Types, String)
char :: String -> (Types, String)
short :: String -> (Types, String)
cdouble :: String -> (Types, String)
double :: String -> (Types, String)
doublep :: String -> (Types, String)
float :: String -> (Types, String)
bool :: String -> (Types, String)
intp :: String -> (Types, String)
intref :: String -> (Types, String)
charpp :: String -> (Types, String)
star :: CTypes -> String -> (Types, String)
cstar :: CTypes -> String -> (Types, String)
cppclass_ :: Class -> Types
cppclass :: Class -> String -> (Types, String)
cppclassconst :: Class -> String -> (Types, String)
cppclassref_ :: Class -> Types
cppclassref :: Class -> String -> (Types, String)
hsCTypeName :: CTypes -> String
hsCppTypeName :: CPPTypes -> String
type Args = [(Types, String)]
data Function
Constructor :: Args -> Maybe String -> Function
func_args :: Function -> Args
func_alias :: Function -> Maybe String
Virtual :: Types -> String -> Args -> Maybe String -> Function
func_ret :: Function -> Types
func_name :: Function -> String
func_args :: Function -> Args
func_alias :: Function -> Maybe String
NonVirtual :: Types -> String -> Args -> Maybe String -> Function
func_ret :: Function -> Types
func_name :: Function -> String
func_args :: Function -> Args
func_alias :: Function -> Maybe String
Static :: Types -> String -> Args -> Maybe String -> Function
func_ret :: Function -> Types
func_name :: Function -> String
func_args :: Function -> Args
func_alias :: Function -> Maybe String
Destructor :: Maybe String -> Function
func_alias :: Function -> Maybe String
data TopLevelFunction
TopLevelFunction :: Types -> String -> Args -> Maybe String -> TopLevelFunction
toplevelfunc_ret :: TopLevelFunction -> Types
toplevelfunc_name :: TopLevelFunction -> String
toplevelfunc_args :: TopLevelFunction -> Args
toplevelfunc_alias :: TopLevelFunction -> Maybe String
TopLevelVariable :: Types -> String -> Maybe String -> TopLevelFunction
toplevelvar_ret :: TopLevelFunction -> Types
toplevelvar_name :: TopLevelFunction -> String
toplevelvar_alias :: TopLevelFunction -> Maybe String
hsFrontNameForTopLevelFunction :: TopLevelFunction -> String
data TopLevelImportHeader
TopLevelImportHeader :: String -> [ClassImportHeader] -> [TopLevelFunction] -> TopLevelImportHeader
tihHeaderFileName :: TopLevelImportHeader -> String
tihClassDep :: TopLevelImportHeader -> [ClassImportHeader]
tihFuncs :: TopLevelImportHeader -> [TopLevelFunction]
isNewFunc :: Function -> Bool
isDeleteFunc :: Function -> Bool
isVirtualFunc :: Function -> Bool
isStaticFunc :: Function -> Bool
virtualFuncs :: [Function] -> [Function]
constructorFuncs :: [Function] -> [Function]
nonVirtualNotNewFuncs :: [Function] -> [Function]
staticFuncs :: [Function] -> [Function]
argToString :: (Types, String) -> String
argsToString :: Args -> String
argsToStringNoSelf :: Args -> String
argToCallString :: (Types, String) -> String
argsToCallString :: Args -> String
rettypeToString :: Types -> String
newtype ProtectedMethod
Protected :: [String] -> ProtectedMethod
unProtected :: ProtectedMethod -> [String]
data Cabal
Cabal :: String -> String -> String -> Cabal
cabal_pkgname :: Cabal -> String
cabal_cheaderprefix :: Cabal -> String
cabal_moduleprefix :: Cabal -> String
data CabalAttr
CabalAttr :: Maybe String -> Maybe String -> [FilePath] -> [FilePath] -> CabalAttr
cabalattr_license :: CabalAttr -> Maybe String
cabalattr_licensefile :: CabalAttr -> Maybe String
cabalattr_extraincludedirs :: CabalAttr -> [FilePath]
cabalattr_extralibdirs :: CabalAttr -> [FilePath]
data Class
Class :: Cabal -> String -> [Class] -> ProtectedMethod -> Maybe String -> [Function] -> Class
class_cabal :: Class -> Cabal
class_name :: Class -> String
class_parents :: Class -> [Class]
class_protected :: Class -> ProtectedMethod
class_alias :: Class -> Maybe String
class_funcs :: Class -> [Function]
AbstractClass :: Cabal -> String -> [Class] -> ProtectedMethod -> Maybe String -> [Function] -> Class
class_cabal :: Class -> Cabal
class_name :: Class -> String
class_parents :: Class -> [Class]
class_protected :: Class -> ProtectedMethod
class_alias :: Class -> Maybe String
class_funcs :: Class -> [Function]
newtype Namespace
NS :: String -> Namespace
unNamespace :: Namespace -> String
data ClassImportHeader
ClassImportHeader :: Class -> HeaderName -> [Namespace] -> String -> [HeaderName] -> [HeaderName] -> [HeaderName] -> ClassImportHeader
cihClass :: ClassImportHeader -> Class
cihSelfHeader :: ClassImportHeader -> HeaderName
cihNamespace :: ClassImportHeader -> [Namespace]
cihSelfCpp :: ClassImportHeader -> String
cihIncludedHPkgHeadersInH :: ClassImportHeader -> [HeaderName]
cihIncludedHPkgHeadersInCPP :: ClassImportHeader -> [HeaderName]
cihIncludedCPkgHeaders :: ClassImportHeader -> [HeaderName]
data ClassModule
ClassModule :: String -> [Class] -> [ClassImportHeader] -> [String] -> [String] -> [String] -> [String] -> ClassModule
cmModule :: ClassModule -> String
cmClass :: ClassModule -> [Class]
cmCIH :: ClassModule -> [ClassImportHeader]
cmImportedModulesHighNonSource :: ClassModule -> [String]
cmImportedModulesRaw :: ClassModule -> [String]
cmImportedModulesHighSource :: ClassModule -> [String]
cmImportedModulesForFFI :: ClassModule -> [String]
data ClassGlobal
ClassGlobal :: DaughterMap -> DaughterMap -> ClassGlobal
cgDaughterSelfMap :: ClassGlobal -> DaughterMap
cgDaughterMap :: ClassGlobal -> DaughterMap

-- | Check abstract class
isAbstractClass :: Class -> Bool
type DaughterMap = Map String [Class]
class_allparents :: Class -> [Class]
getClassModuleBase :: Class -> String

-- | Daughter map not including itself
mkDaughterMap :: [Class] -> DaughterMap

-- | Daughter Map including itself as a daughter
mkDaughterSelfMap :: [Class] -> DaughterMap
ctypToHsTyp :: Maybe Class -> Types -> String
typeclassName :: Class -> String
typeclassNameFromStr :: String -> String
hsClassName :: Class -> (String, String)
existConstructorName :: Class -> String

-- | this is for FFI type.
hsFuncTyp :: Class -> Function -> String

-- | this is for FFI
hsFuncTypNoSelf :: Class -> Function -> String
hscFuncName :: Class -> Function -> String
hsFuncName :: Class -> Function -> String
hsFuncXformer :: Function -> String
genericFuncRet :: Function -> Types
genericFuncArgs :: Function -> Args
aliasedFuncName :: Class -> Function -> String
cppStaticName :: Class -> Function -> String
cppFuncName :: Class -> Function -> String
constructorName :: Class -> String
nonvirtualName :: Class -> String -> String
destructorName :: String
instance Show CTypes
instance Show IsConst
instance Monoid ProtectedMethod
instance Show Function
instance Show Types
instance Show CPPTypes
instance Show TopLevelFunction
instance Show Namespace
instance Show ClassImportHeader
instance Show ClassModule
instance Ord Class
instance Eq Class
instance Show Class
instance Default CabalAttr


module FFICXX.Generate.Code.MethodDef
funcToDecl :: Class -> Function -> String
funcsToDecls :: Class -> [Function] -> String
funcToDef :: Class -> Function -> String
funcsToDefs :: Class -> [Function] -> String


module FFICXX.Generate.Code.HsFFI
genHsFFI :: ClassImportHeader -> String
genAllHsFFI :: [ClassImportHeader] -> String

-- | this template will be deprecated
ffistub :: String

-- | this template will be used.
ffiTemplate :: String
hsFFIClassFunc :: HeaderName -> Class -> Function -> String
genTopLevelFuncFFI :: TopLevelImportHeader -> TopLevelFunction -> String


module FFICXX.Generate.Type.Annotate
data PkgType
PkgModule :: PkgType
PkgClass :: PkgType
PkgMethod :: PkgType
type AnnotateMap = Map (PkgType, String) String
instance Show PkgType
instance Eq PkgType
instance Ord PkgType


module FFICXX.Generate.Code.HsFrontEnd
mkComment :: Int -> String -> String
mkPostComment :: String -> String
hsModuleDeclTmpl :: String
genModuleDecl :: Module -> Reader AnnotateMap String
classprefix :: Class -> String
hsClassDeclHeaderTmpl :: String
genHsFrontDecl :: Class -> Reader AnnotateMap String
genAllHsFrontDecl :: [Class] -> Reader AnnotateMap String
genHsFrontInst :: Class -> Class -> String
hsClassInstExistCommonTmpl :: String
genHsFrontInstExistCommon :: Class -> String
genAllHsFrontInstExistCommon :: [Class] -> String
hsClassInstExistVirtualTmpl :: String
hsClassInstExistVirtualMethodNoSelfTmpl :: String
hsClassInstExistVirtualMethodSelfTmpl :: String
genHsFrontInstExistVirtual :: Class -> Class -> String
genHsFrontInstExistVirtualMethod :: Class -> Class -> Function -> String
genAllHsFrontInstExistVirtual :: [Class] -> DaughterMap -> String
genHsFrontInstNew :: Class -> Reader AnnotateMap (Maybe String)
genAllHsFrontInstNew :: [Class] -> Reader AnnotateMap String
genHsFrontInstNonVirtual :: Class -> Maybe String
genAllHsFrontInstNonVirtual :: [Class] -> String
genHsFrontInstStatic :: Class -> Maybe String
genHsFrontInstCastable :: Class -> String
genAllHsFrontInstCastable :: [Class] -> String
genHsFrontInstCastableSelf :: Class -> String
rawToHighDecl :: String
rawToHighInstance :: String
existableInstance :: String
hsClassRawType :: Class -> String
hsClassExistType :: Class -> String
hsClassDeclFuncTmpl :: String
hsArgs :: Class -> Args -> String
mkHsFuncArgType :: Args -> ([String], [String])
mkHsFuncRetType :: Types -> (String, [String])
hsInterfaceCastableInstanceTmpl :: String
hsInterfaceCastableInstanceSelfTmpl :: String
hsExistentialGADTBodyTmpl :: String
hsExistentialCastBodyTmpl :: String
genHsFrontUpcastClass :: Class -> Reader AnnotateMap String
genAllHsFrontUpcastClass :: [Class] -> Reader AnnotateMap String
hsUpcastClassTmpl :: String
genHsFrontDowncastClass :: Class -> Reader AnnotateMap String
genAllHsFrontDowncastClass :: [Class] -> Reader AnnotateMap String
hsDowncastClassTmpl :: String
genExport :: Class -> String

-- | constructor and non-virtual function
genExportConstructorAndNonvirtual :: Class -> String

-- | staic function export list
genExportStatic :: Class -> String
genExportList :: [Class] -> String
importOneClass :: String -> String -> String
importSOURCEOneClass :: String -> String -> String
genImportInModule :: [Class] -> String
genImportInFFI :: ClassModule -> String
genImportInInterface :: ClassModule -> String
genImportInCast :: ClassModule -> String
genImportInImplementation :: ClassModule -> String
genImportInExistential :: DaughterMap -> ClassModule -> String
genTopLevelFuncDef :: TopLevelFunction -> String


module FFICXX.Generate.Config
data FFICXXConfig
FFICXXConfig :: FilePath -> FilePath -> FilePath -> FFICXXConfig
fficxxconfig_scriptBaseDir :: FFICXXConfig -> FilePath
fficxxconfig_workingDir :: FFICXXConfig -> FilePath
fficxxconfig_installBaseDir :: FFICXXConfig -> FilePath
instance Show FFICXXConfig


module FFICXX.Generate.Code.Dependency
mkPkgHeaderFileName :: Class -> HeaderName
mkPkgCppFileName :: Class -> String
mkPkgIncludeHeadersInH :: Class -> [HeaderName]
mkPkgIncludeHeadersInCPP :: Class -> [HeaderName]
mkCIH :: (Class -> ([Namespace], [HeaderName])) -> Class -> ClassImportHeader
extractClassFromType :: Types -> Maybe Class

-- | class dependency for a given function
data Dep4Func
Dep4Func :: Maybe Class -> [Class] -> Dep4Func
returnDependency :: Dep4Func -> Maybe Class
argumentDependency :: Dep4Func -> [Class]
extractClassDep :: Function -> Dep4Func
extractClassDepForTopLevelFunction :: TopLevelFunction -> Dep4Func
mkModuleDepRaw :: Class -> [Class]
mkModuleDepHighNonSource :: Class -> [Class]
mkModuleDepHighSource :: Class -> [Class]
mkModuleDepCpp :: Class -> [Class]
mkModuleDepFFI4One :: Class -> [Class]
mkModuleDepFFI :: Class -> [Class]
mkClassModule :: (Class -> ([Namespace], [HeaderName])) -> Class -> ClassModule
mkClassNSHeaderFromMap :: HashMap String ([Namespace], [HeaderName]) -> Class -> ([Namespace], [HeaderName])
mkAll_ClassModules_CIH_TIH :: (String, Class -> ([Namespace], [HeaderName])) -> ([Class], [TopLevelFunction]) -> ([ClassModule], [ClassImportHeader], TopLevelImportHeader)
mkHSBOOTCandidateList :: [ClassModule] -> [String]


module FFICXX.Generate.Code.Cabal
cabalIndentation :: String

-- | generate exposed module list in cabal file
genExposedModules :: String -> [ClassModule] -> String

-- | generate other modules in cabal file
genOtherModules :: [ClassModule] -> String


module FFICXX.Generate.Code.Cpp
genCppHeaderTmplType :: Class -> String
genAllCppHeaderTmplType :: [Class] -> String
genCppHeaderTmplVirtual :: Class -> String
genAllCppHeaderTmplVirtual :: [Class] -> String
genCppHeaderTmplNonVirtual :: Class -> String
genAllCppHeaderTmplNonVirtual :: [Class] -> String
genCppHeaderInstVirtual :: (Class, Class) -> String
genCppHeaderInstNonVirtual :: Class -> String
genAllCppHeaderInstNonVirtual :: [Class] -> String
genCppDefTmplVirtual :: Class -> String
genAllCppDefTmplVirtual :: [Class] -> String
genCppDefTmplNonVirtual :: Class -> String
genAllCppDefTmplNonVirtual :: [Class] -> String
genCppDefInstVirtual :: (Class, Class) -> String
genCppDefInstNonVirtual :: Class -> String
genAllCppDefInstNonVirtual :: [Class] -> String
genAllCppHeaderInclude :: ClassImportHeader -> String
genModuleIncludeHeader :: [ClassImportHeader] -> String
genIncludeFiles :: String -> [ClassModule] -> String
genCsrcFiles :: (TopLevelImportHeader, [ClassModule]) -> String
genCppFiles :: (TopLevelImportHeader, [ClassModule]) -> String
genTopLevelFuncCppHeader :: TopLevelFunction -> String
genTopLevelFuncCppDefinition :: TopLevelFunction -> String


module FFICXX.Generate.Generator.ContentMaker
srcDir :: FilePath -> FilePath
csrcDir :: FilePath -> FilePath
pkgModuleTemplate :: String
moduleTemplate :: String
hsbootTemplate :: String
declarationTemplate :: String
typeDeclHeaderFileName :: String
declbodyTemplate :: String
funcdeclTemplate :: String
definitionTemplate :: String
classDefTemplate :: String
functionTemplate :: String
funcbodyTemplate :: String
headerFileName :: String
cppFileName :: String
hscFileName :: String
hsFileName :: String
typeHsFileName :: String
existHsFileName :: String
rawtypeHsFileName :: String
ffiHscFileName :: String
interfaceHsFileName :: String
castHsFileName :: String
implementationHsFileName :: String
existentialHsFileName :: String
mkGlobal :: [Class] -> ClassGlobal
mkDaughterDef :: ((String, [Class]) -> String) -> DaughterMap -> String
mkParentDef :: ((Class, Class) -> String) -> Class -> String
mkProtectedFunctionList :: Class -> String
mkTypeDeclHeader :: STGroup String -> TypeMacro -> [Class] -> String
mkDeclHeader :: STGroup String -> TypeMacro -> String -> ClassImportHeader -> String
mkDefMain :: STGroup String -> ClassImportHeader -> String
mkTopLevelFunctionHeader :: STGroup String -> TypeMacro -> String -> TopLevelImportHeader -> String
mkTopLevelFunctionCppDef :: STGroup String -> String -> TopLevelImportHeader -> String
mkFFIHsc :: STGroup String -> ClassModule -> String
mkRawTypeHs :: STGroup String -> ClassModule -> String
mkInterfaceHs :: AnnotateMap -> STGroup String -> ClassModule -> String
mkCastHs :: STGroup String -> ClassModule -> String
mkImplementationHs :: AnnotateMap -> STGroup String -> ClassModule -> String
mkExistentialEach :: STGroup String -> Class -> [Class] -> String
mkExistentialHs :: STGroup String -> ClassGlobal -> ClassModule -> String
mkInterfaceHSBOOT :: STGroup String -> String -> String
mkModuleHs :: STGroup String -> ClassModule -> String
mkPkgHs :: String -> STGroup String -> [ClassModule] -> TopLevelImportHeader -> String
mkPackageInterface :: PackageInterface -> PackageName -> [ClassImportHeader] -> PackageInterface


module FFICXX.Generate.Generator.Driver
writeTypeDeclHeaders :: STGroup String -> FilePath -> TypeMacro -> String -> [ClassImportHeader] -> IO ()
writeDeclHeaders :: STGroup String -> FilePath -> TypeMacro -> String -> ClassImportHeader -> IO ()
writeTopLevelFunctionHeaders :: STGroup String -> FilePath -> TypeMacro -> String -> TopLevelImportHeader -> IO ()
writeCppDef :: STGroup String -> FilePath -> ClassImportHeader -> IO ()
writeTopLevelFunctionCppDef :: STGroup String -> FilePath -> TypeMacro -> String -> TopLevelImportHeader -> IO ()
writeRawTypeHs :: STGroup String -> FilePath -> ClassModule -> IO ()
writeFFIHsc :: STGroup String -> FilePath -> ClassModule -> IO ()
writeInterfaceHs :: AnnotateMap -> STGroup String -> FilePath -> ClassModule -> IO ()
writeCastHs :: STGroup String -> FilePath -> ClassModule -> IO ()
writeImplementationHs :: AnnotateMap -> STGroup String -> FilePath -> ClassModule -> IO ()
writeExistentialHs :: STGroup String -> ClassGlobal -> FilePath -> ClassModule -> IO ()
writeInterfaceHSBOOT :: STGroup String -> FilePath -> String -> IO ()
writeModuleHs :: STGroup String -> FilePath -> ClassModule -> IO ()
writePkgHs :: String -> STGroup String -> FilePath -> [ClassModule] -> TopLevelImportHeader -> IO ()
notExistThenCreate :: FilePath -> IO ()
copyFileWithMD5Check :: FilePath -> FilePath -> IO ()
copyCppFiles :: FilePath -> FilePath -> String -> (TopLevelImportHeader, [ClassImportHeader]) -> IO ()
copyModule :: FilePath -> FilePath -> String -> ClassModule -> IO ()


module FFICXX.Generate.Builder
cabalTemplate :: String
mkCabalFile :: FFICXXConfig -> STGroup String -> (Cabal, CabalAttr) -> String -> (TopLevelImportHeader, [ClassModule]) -> [String] -> FilePath -> IO ()
macrofy :: String -> String
simpleBuilder :: String -> [(String, ([Namespace], [HeaderName]))] -> (Cabal, CabalAttr, [Class], [TopLevelFunction]) -> [String] -> IO ()

-- | some dirty hack. later, we will do it with more proper approcah.
touch :: FilePath -> IO ()
