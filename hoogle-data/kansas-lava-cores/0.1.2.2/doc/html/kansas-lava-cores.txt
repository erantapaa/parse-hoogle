-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | FPGA Cores Written in Kansas Lava.
--   
@package kansas-lava-cores
@version 0.1.2.2


-- | <ul>
--   <li>Remember to call init_board for your specific board.</li>
--   </ul>
module Hardware.KansasLava.Simulators.Polyester
data Polyester a

-- | Checks an input list for diffences between adjacent elements, and for
--   changes, maps a graphical event onto the internal stepper. The idea is
--   that sending a graphical event twice should be idempotent, but
--   internally the system only writes events when things change.
outPolyester :: (Eq a, Graphic g) => (a -> g) -> [a] -> Polyester ()

-- | Turn a list of graphical events into a <a>Polyester</a>, without
--   processing.
outPolyesterEvents :: Graphic g => [Maybe g] -> Polyester ()

-- | creates single graphical events, based on the number of Events, when
--   the first real event is event 1, and there is a beginning of time
--   event 0. Example of use: count the number of bytes send or recieved on
--   a device.
outPolyesterCount :: Graphic g => (Integer -> g) -> [Maybe a] -> Polyester ()

-- | write a socket from a clocked list input. Example of use is emulating
--   RS232 (which only used empty or singleton strings), for the inside of
--   a list.
writeSocketPolyester :: String -> [Maybe String] -> Polyester ()

-- | Turn an observation of the keyboard into a list of values.
inPolyester :: a -> (Char -> a -> a) -> Polyester [a]

-- | <a>readSocketPolyester</a> reads from a socket. The stream is
--   on-demand, and is not controlled by any clock inside the function.
--   Typically would be read one cons per clock, but slower reading is
--   acceptable. This does not make any attempt to register what is being
--   observed on the screen; another process needs to do this.
readSocketPolyester :: String -> Polyester [Maybe Word8]
getPolyesterExecMode :: Polyester ExecMode
getPolyesterClkSpeed :: Polyester Integer
getPolyesterSimSpeed :: Polyester Integer

-- | <a>runPolyester</a> executes the Polyester, never returns, and
--   ususally replaces <tt>reifyPolyester</tt>.
runPolyester :: ExecMode -> Integer -> Integer -> Polyester () -> IO ()
data ExecMode

-- | run as fast as possible, and do not display the clock
Fast :: ExecMode

-- | run in friendly mode, with <a>threadDelay</a> to run slower, to be CPU
--   friendly.
Friendly :: ExecMode

-- | <a>generic_init</a> builds a generic board_init, including setting up
--   the drawing of the board, and printing the (optional) clock.
generic_init :: (Graphic g1, Graphic g2) => g1 -> (Integer -> g2) -> Polyester ()
data ANSI a
REVERSE :: ANSI () -> ANSI ()
COLOR :: Color -> ANSI () -> ANSI ()
PRINT :: String -> ANSI ()
AT :: ANSI () -> (Int, Int) -> ANSI ()
BIND :: ANSI b -> (b -> ANSI a) -> ANSI a
RETURN :: a -> ANSI a

-- | ANSI colors: come in various intensities, which are controlled by
--   <a>ColorIntensity</a>
data Color :: *
Black :: Color
Red :: Color
Green :: Color
Yellow :: Color
Blue :: Color
Magenta :: Color
Cyan :: Color
White :: Color
class Graphic g
drawGraphic :: Graphic g => g -> ANSI ()
instance Typeable PolyesterException
instance Eq ExecMode
instance Show ExecMode
instance Exception PolyesterException
instance Show PolyesterException
instance Graphic (ANSI a)
instance Monad ANSI
instance Applicative ANSI
instance Functor ANSI
instance MonadFix Polyester
instance Monad Polyester
instance Applicative Polyester
instance Functor Polyester

module Hardware.KansasLava.Boards.UCF
filterUCF :: Maybe String -> KLEG -> String -> String
copyUCFFrom :: FilePath -> Maybe String -> FilePath -> KLEG -> IO ()
copyUCF :: FilePath -> Maybe String -> FilePath -> KLEG -> IO ()

module Hardware.KansasLava.Text

-- | <a>mm_text_driver</a> is a memory-mapped driver for a (small) display.
--   It gets passed the background "image", and the mapping from active
--   location number to row,col on the screen. It outputs values sutable
--   for input into the LCD mm drivers.
mm_text_driver :: (Clock c, sig ~ Signal c, Rep loc, Rep row, Rep col, Size row, Size col, Rep (MUL row col), Num (MUL row col), Size (MUL row col)) => Matrix (row, col) U8 -> (loc -> (row, col)) -> Patch (sig (Enabled (loc, U8))) (sig (Enabled ((row, col), U8))) (sig Ack) (sig Ack)

-- | Simple digit counter.
aliveGlyph :: (Clock c, sig ~ Signal c) => Patch (sig (Enabled ())) (sig (Enabled (X1, U8))) (sig Ack) (sig Ack)

-- | In a scrollbar, what ever you write appears on the right hand side,
--   pushing everything to the left.
scrollBar :: (Clock c, sig ~ Signal c, Size x, Bounded x, Num x, Enum x, Rep x) => Patch (sig (Enabled U8)) (sig (Enabled (x, U8))) (sig Ack) (sig Ack)
hexForm :: (Clock c, sig ~ Signal c, Size (MUL X4 w), Integral (MUL X4 w), Integral w, Bounded w, Rep w, Size w) => Patch (sig (Enabled (Unsigned (MUL X4 w)))) (sig (Enabled (w, U8))) (sig Ack) (sig Ack)

-- | ord for U8.
ordU8 :: Char -> U8

-- | chr for U8.
chrU8 :: U8 -> Char

-- | Turn a string into a 1D matrix
rowU8 :: Size x => String -> Matrix x U8

-- | Turn a string into a 2D matrix, ready for background.
boxU8 :: (Size x, Size row, Num row, Enum row, Size col, Num col, Enum col, x ~ MUL row col) => [String] -> Matrix x ((row, col), U8)
boxU8' :: (Size row, Num row, Enum row, Size col, Num col, Enum col) => [String] -> Matrix (row, col) U8

module Hardware.KansasLava.LCD.ST7066U

-- | <tt>phy_4bit_Inst</tt> gives a instruction-level interface, in terms
--   of the 4-bit interface.
phy_Inst_4bit_LCD :: (Clock c, sig ~ Signal c) => Patch (sig (Enabled LCDInstruction)) (sig (U1, U4, Bool)) (sig Ack) ()
init_LCD :: (Clock c, sig ~ Signal c) => Patch (sig (Enabled LCDInstruction)) (sig (Enabled LCDInstruction)) (sig Ack) (sig Ack)
mm_LCD_Inst :: (Clock c, sig ~ Signal c) => Patch (sig (Enabled ((X2, X16), U8))) (sig (Enabled LCDInstruction)) (sig Ack) (sig Ack)
data LCDInstruction
ClearDisplay :: LCDInstruction
ReturnHome :: LCDInstruction
EntryMode :: Bool -> Bool -> LCDInstruction
moveRight :: LCDInstruction -> Bool
displayShift :: LCDInstruction -> Bool
SetDisplay :: Bool -> Bool -> Bool -> LCDInstruction
displayOn :: LCDInstruction -> Bool
cursorOn :: LCDInstruction -> Bool
blinkingCursor :: LCDInstruction -> Bool
SetShift :: Bool -> Bool -> LCDInstruction
displayShift :: LCDInstruction -> Bool
rightShift :: LCDInstruction -> Bool
FunctionSet :: Bool -> Bool -> Bool -> LCDInstruction
eightBit :: LCDInstruction -> Bool
twoLines :: LCDInstruction -> Bool
fiveByEleven :: LCDInstruction -> Bool
SetCGAddr :: U6 -> LCDInstruction
cg_addr :: LCDInstruction -> U6
SetDDAddr :: U7 -> LCDInstruction
dd_addr :: LCDInstruction -> U7
ReadBusyAddr :: LCDInstruction
ReadRam :: LCDInstruction
WriteChar :: U8 -> LCDInstruction
char :: LCDInstruction -> U8
setDDAddr :: Signal comb U7 -> Signal comb LCDInstruction
writeChar :: Signal comb U8 -> Signal comb LCDInstruction
phy_4bit_LCD :: (Clock c, sig ~ Signal c) => Patch (sig (Enabled (U5, U18))) (sig (U1, U4, Bool)) (sig Ack) ()
instance BitRep LCDInstruction
instance Rep LCDInstruction
instance Eq LCDInstruction
instance Ord LCDInstruction
instance Show LCDInstruction


-- | The <a>Clock</a> module provides a utility function for simulating
--   clock rate downsampling.
module Hardware.KansasLava.Rate

-- | <a>rate</a> constructs a stream of enable bits used for clock-rate
--   downsampling. For example, with a rate of n=1/2, every other value in
--   the output stream will be True. If 1/n is not a integer, then the
--   function uses
--   <a>http://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm</a> to
--   approximate the given rate.
rate :: (Clock clk, Size x) => Witness x -> Rational -> (Signal clk Bool)

-- | <a>powerOfTwoRate</a> generates a pulse every 2^n cycles, which is
--   often good enough for polling, timeouts, etc.
powerOfTwoRate :: (Clock clk, Size x) => Witness x -> Signal clk Bool

-- | <a>rateP</a> takes a result from rate, and generates token, one per
--   pulse, with unused tokens being discared.
rateP :: (Clock c, sig ~ Signal c) => sig Bool -> Patch () (sig (Enabled ())) () (sig Ack)

-- | <a>throttleP</a> throttles input based on a given rate counter.
throttleP :: (sig ~ Signal c, Clock c, Rep a) => sig Bool -> Patch (sig (Enabled a)) (sig (Enabled a)) (sig Ack) (sig Ack)

module Hardware.KansasLava.Random

-- | Provides a pseudorandom stream of values. On a test using the first
--   100K bytes, all 256 values occurred with the same probability (390 or
--   391 times).
randomBytes :: (Clock c, Signal c ~ sig) => sig U8

module Hardware.KansasLava.FIFO

-- | Make a sequence obey the given reset signal, returning given value on
--   a reset.
resetable :: (Clock c, Rep a) => Signal c Bool -> a -> Signal c a -> Signal c a
fifoFE :: (Size counter, Size ix, counter ~ ADD ix X1, Rep a, Rep counter, Rep ix, Num counter, Num ix, Clock c, sig ~ Signal c) => Witness ix -> Signal c Bool -> Patch (sig (Enabled a)) (sig (Enabled (ix, a)) :> sig Bool) (sig Ack) (sig Ready :> sig counter)
fifoBE :: (Size counter, Size ix, counter ~ ADD ix X1, Rep a, Rep counter, Rep ix, Num counter, Num ix, Clock c, sig ~ Signal c) => Witness ix -> Signal c Bool -> Patch (sig (Enabled a) :> sig counter) (sig (Enabled a)) (sig (Enabled ix) :> sig Bool) (sig Ack)
fifoMem :: (Size counter, Size ix, counter ~ ADD ix X1, Rep a, Rep counter, Rep ix, Num counter, Num ix, Clock c1, Clock c2, sig1 ~ Signal c1, sig2 ~ Signal c2, c1 ~ c2) => Witness ix -> Patch (sig1 (Enabled (ix, a)) :> sig1 Bool) (sig2 (Enabled a) :> sig2 counter) (sig1 Ready :> sig1 counter) (sig2 (Enabled ix) :> sig2 Bool)
fifoCounter :: (Num counter, Rep counter) => Seq Bool -> Seq Bool -> Seq Bool -> Seq counter
fifoCounter' :: (Num counter, Rep counter) => Seq Bool -> Seq counter -> Seq counter -> Seq counter
fifo :: (Size counter, Size ix, counter ~ ADD ix X1, Rep a, Rep counter, Rep ix, Num counter, Num ix, Clock c) => Witness ix -> Signal c Bool -> Patch (Signal c (Enabled a)) (Signal c (Enabled a)) (Signal c Ack) (Signal c Ack)
mulBy :: (Clock c, Size sz, Num sz, Num x, Rep x) => Witness sz -> Signal c Bool -> Signal c x
divBy :: (Clock c, Size sz, Num sz, Rep sz, Num x, Rep x) => Witness sz -> Signal c Bool -> Signal c Bool -> Signal c x

module Hardware.KansasLava.RS232
rs232out :: (Clock clk, sig ~ Signal clk) => Integer -> Integer -> Patch (sig (Enabled U8)) (sig Bool) (sig Ack) ()

-- | rs232in accepts data from UART line, and turns it into bytes. There is
--   no Ack or Ready, because there is no way to pause the 232. For the
--   same reason, this does not use a Patch.
rs232in :: (Clock clk, sig ~ Signal clk) => Integer -> Integer -> Patch (sig Bool) (sig (Enabled U8)) () ()
instance Rep RS232_TX
instance Show RS232_TX
instance Eq RS232_TX
instance Ord RS232_TX
instance BitRep RS232_TX

module Hardware.KansasLava.Boards.Spartan3e
class MonadFix fabric => Spartan3e fabric
board_init :: Spartan3e fabric => fabric ()
rot_as_reset :: Spartan3e fabric => fabric ()
mm_lcdP :: Spartan3e fabric => FabricPatch fabric (Seq (Enabled ((X2, X16), U8))) () (Seq Ack) ()
rs232_txP :: Spartan3e fabric => Serial -> Integer -> FabricPatch fabric (Seq (Enabled U8)) () (Seq Ack) ()
rs232_rxP :: Spartan3e fabric => Serial -> Integer -> FabricPatch fabric () (Seq (Enabled U8)) () ()
tickTock :: (Spartan3e fabric, Size w) => Witness w -> Integer -> fabric (Seq Bool)
switches :: Spartan3e fabric => fabric (Matrix X4 (Seq Bool))
buttons :: Spartan3e fabric => fabric (Matrix X4 (Seq Bool))
leds :: Spartan3e fabric => Matrix X8 (Seq Bool) -> fabric ()
dial_button :: Spartan3e fabric => fabric (Seq Bool)
dial_rot :: Spartan3e fabric => fabric (Seq (Enabled Bool))

-- | The clock rate on the Spartan3e (50MHz), in hertz.
clockRate :: Integer

-- | show out a suggested UCF file for Spartan3e, for a specific circuit.
writeUCF :: FilePath -> KLEG -> IO ()
data Serial
DCE :: Serial
DTE :: Serial

-- | <a>switchesP</a> gives a patch-level API for the toggle switches.
switchesP :: Spartan3e fabric => fabric (Patch () (Matrix X4 (Seq Bool)) () (Matrix X4 ()))

-- | <a>buttonsP</a> gives a patch-level API for the toggle switches.
buttonsP :: Spartan3e fabric => fabric (Patch () (Matrix X4 (Seq Bool)) () (Matrix X4 ()))

-- | <tt>ledP</tt> gives a patch-level API for the leds.
ledsP :: Spartan3e fabric => Patch (Matrix X8 (Seq Bool)) (fabric ()) (Matrix X8 ()) ()
instance Eq Serial
instance Ord Serial
instance Show Serial
instance Spartan3e Fabric


-- | This API mirrors <a>Spartan3e</a> via a class abstaction. The other
--   API also contains some Board specific utilties that can also be used
--   for simulation.
module Hardware.KansasLava.Simulators.Spartan3e
class MonadFix fabric => Spartan3e fabric
board_init :: Spartan3e fabric => fabric ()
rot_as_reset :: Spartan3e fabric => fabric ()
mm_lcdP :: Spartan3e fabric => FabricPatch fabric (Seq (Enabled ((X2, X16), U8))) () (Seq Ack) ()
rs232_txP :: Spartan3e fabric => Serial -> Integer -> FabricPatch fabric (Seq (Enabled U8)) () (Seq Ack) ()
rs232_rxP :: Spartan3e fabric => Serial -> Integer -> FabricPatch fabric () (Seq (Enabled U8)) () ()
tickTock :: (Spartan3e fabric, Size w) => Witness w -> Integer -> fabric (Seq Bool)
switches :: Spartan3e fabric => fabric (Matrix X4 (Seq Bool))
buttons :: Spartan3e fabric => fabric (Matrix X4 (Seq Bool))
leds :: Spartan3e fabric => Matrix X8 (Seq Bool) -> fabric ()
dial_button :: Spartan3e fabric => fabric (Seq Bool)
dial_rot :: Spartan3e fabric => fabric (Seq (Enabled Bool))
class Graphic g
drawGraphic :: Graphic g => g -> ANSI ()
instance Eq Dial
instance Graphic Output
instance Spartan3e Polyester

module Hardware.KansasLava.Chunker

-- | We use network byte order
--   <a>http://en.wikipedia.org/wiki/Endianness#Endianness_in_networking</a>
waitForIt :: (Clock c, sig ~ Signal c, Rep a, b ~ Unsigned x, Size x, Size t) => b -> Witness t -> Patch (sig (Enabled a)) (sig (Enabled b)) (sig Ack) (sig Ack)

-- | Count a (fixed-sized) header with 1's, and a payload with 0's. The
--   fixed sized header counting is done before reading the payload size.
chunkCounter :: (Clock c, sig ~ Signal c, Size x, Num x, Rep x, Size y, Rep y, Num y) => Witness x -> Patch (sig (Enabled (Unsigned y))) (sig (Enabled Bool)) (sig Ack) (sig Ack)
chunkJoinHeader :: (Clock c, sig ~ Signal c, Rep a, Rep x, Size x, Num x, Enum x, Rep y, Size y, Num y) => (forall comb. Signal comb (Matrix x a) -> Signal comb (Unsigned y)) -> Patch (sig (Enabled (Matrix x a)) :> sig (Enabled a)) (sig (Enabled a)) (sig Ack :> sig Ack) (sig Ack)
chunkSplitHeader :: (Clock c, sig ~ Signal c, Rep a, Rep x, Size x, Num x, Enum x, Rep y, Size y, Num y) => (forall comb. Signal comb (Matrix x a) -> Signal comb (Unsigned y)) -> Patch (sig (Enabled a)) (sig (Enabled (Matrix x a)) :> sig (Enabled a)) (sig Ack) (sig Ack :> sig Ack)
chunker :: (Size t, Clock c, sig ~ Signal c) => Unsigned X8 -> Witness t -> (forall comb. Signal comb (Matrix X1 U8) -> Signal comb U8) -> (forall comb. Signal comb (Unsigned X8) -> Signal comb (Matrix X1 U8)) -> Patch (sig (Enabled U8)) (sig (Enabled U8)) (sig Ack) (sig Ack)
rdByteHeader :: Signal comb (Matrix X1 U8) -> Signal comb U8
mkByteHeader :: Signal comb U8 -> Signal comb (Matrix X1 U8)
