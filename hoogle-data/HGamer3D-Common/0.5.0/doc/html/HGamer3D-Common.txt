-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Toolset for the Haskell Game Programmer - Game Engine and Utilities
--   
--   HGamer3D is a toolset for developing 3D games in the programming
--   language Haskell. HGamer3D is available on Windows and Linux. This
--   package provides common engine definitions and utility functions for
--   HGamer3D.
@package HGamer3D-Common
@version 0.5.0


-- | Utility to provide a unique name, carries internal state in a IORef
module HGamer3D.Common.UniqueName
data UniqueName

-- | creates a unique name holder
createUniqueName :: String -> IO UniqueName

-- | delivers the next unique name from the name holder
nextUniqueName :: UniqueName -> IO String


-- | Utility to provide file location information to other parts of
--   HGamer3D
module HGamer3D.Common.FileLocation

-- | path of media, relative to user app dir for HGamer3D
getAppMediaDirectory :: IO [Char]

-- | path of configuration, relative to user app dir for HGamer3D
getAppConfigDirectory :: IO [Char]

-- | path of libraries, relative to user app dir for HGamer3D
getAppLibDirectory :: IO [Char]

-- | path separator for the filesystem
osSep :: [Char]

-- | create a directory
createDir :: FilePath -> IO ()

-- | find a file by searching in multiple directories
findFileInDirs :: [Char] -> [[Char]] -> IO (Maybe FilePath)


-- | Common Elements for HGamer3D
module HGamer3D.Common

-- | Possible Components, which are known, this list needs to be extended,
--   if additional components are introduced. Each component can occur only
--   once in an Entity.
data Component

-- | Position
CTPos :: Component

-- | Orientation
CTOri :: Component

-- | Size
CTSiz :: Component

-- | Scale
CTSca :: Component

-- | Figure
CTFig :: Component

-- | Audio Source
CTASr :: Component

-- | Audio Listener
CTALs :: Component

-- | Camera
CTCam :: Component

-- | Light
CTLig :: Component

-- | Scene Parameter
CTScP :: Component

-- | GUI Form
CTGFo :: Component

-- | Window
CTWin :: Component

-- | internal, used for sending commands, created automatically
CTCmd :: Component

-- | internal, used for receiving events, created automatically
CTEvt :: Component

-- | Entities
--   
--   Entity, Maps from Component to Dynamic
type Entity = Map Component Dynamic

-- | Pair builder for nice construction syntax, allows [ ct #: val, ...]
--   syntax
(#:) :: Typeable a => Component -> a -> (Component, Dynamic)

-- | Builder for entities, allows newE = entity [ct #: val, ...] syntax
entity :: [(Component, Dynamic)] -> Entity

-- | does the entity have the component
(#?) :: Entity -> Component -> Bool

-- | get the component, throws exception, if component not present, or
--   wrong type
(#) :: Typeable a => Entity -> Component -> a

-- | get the component as an maybe, in case wrong type
(?#) :: Typeable a => Entity -> Component -> Maybe a

-- | modification function, throws exception, if component not present
updateEntity :: Typeable a => Entity -> Component -> (a -> a) -> Entity

-- | modification function, sets entity component, needed for events
_setComponent :: Typeable a => Entity -> Component -> a -> Entity
type Listeners = TVar (Map Component [Entity -> Entity -> IO ()])
addListener :: Listeners -> Component -> (Entity -> Entity -> IO ()) -> IO ()
clearAllListeners :: Listeners -> IO ()
fireListeners :: Listeners -> Component -> Entity -> Entity -> IO ()
data ERef
ERef :: (TVar Entity) -> Listeners -> ERef
newE :: [(Component, Dynamic)] -> IO ERef
readE :: ERef -> IO Entity
updateE :: Typeable a => ERef -> Component -> (a -> a) -> IO ()
_setE :: Typeable a => ERef -> Component -> a -> IO ()
sendCmd :: Typeable a => ERef -> a -> IO ()
sendEvt :: Typeable a => ERef -> a -> IO ()
regEvtH :: Typeable a => ERef -> (a -> IO ()) -> IO ()

-- | ComponentListener are tracking the change of a component of a specific
--   entity. Ones this component changes, they contain the latest value of
--   the entity. ComponentListener are implemented with the Listener
--   mechanism for ERefs
type ComponentListener = TVar (Maybe (Entity, Entity))
componentListener :: ERef -> Component -> IO ComponentListener
queryComponentListener :: ComponentListener -> IO (Maybe (Entity, Entity))
type OnUpdateFunction = Entity -> Entity -> IO ()
type OnDeleteFunction = IO ()
type SystemRecord = (ComponentListener, OnUpdateFunction, OnDeleteFunction)
type SystemFunction a = a -> ERef -> IO [SystemRecord]
data SystemData a
SystemData :: MVar () -> IORef [ERef] -> IORef [ERef] -> [SystemRecord] -> a -> SystemFunction a -> SystemData a
sdLock :: SystemData a -> MVar ()
sdNewERefs :: SystemData a -> IORef [ERef]
sdDelERefs :: SystemData a -> IORef [ERef]
sdRecords :: SystemData a -> [SystemRecord]
sdSystem :: SystemData a -> a
sdSystemFunction :: SystemData a -> SystemFunction a
class System a where addERef sd eref = do { let ref = sdNewERefs sd; let lock = sdLock sd; takeMVar lock; nrefs <- readIORef ref; writeIORef ref (eref : nrefs); putMVar lock (); return () } removeERef sd eref = do { let ref = sdDelERefs sd; let lock = sdLock sd; takeMVar lock; drefs <- readIORef ref; writeIORef ref (eref : drefs); putMVar lock (); return () } runSystem stepT = do { mv <- newEmptyMVar; forkOS $ (\ mv' -> do { status <- initializeSystem; putMVar mv' status; let runS s = do { nowT <- getTime; (s', qFlag) <- stepSystem' s; if qFlag then do { shutdownSystem s'; return () } else do { nowT' <- getTime; let timeUsed = nowT' - nowT; if timeUsed < stepT then do { threadDelay ((fromIntegral . usec) (stepT - timeUsed)) } else do { return () }; runS s' } }; runS status }) mv; status' <- takeMVar mv; return status' } shutdownSystem system = return () stepSystem' sd@(SystemData lock nrefs drefs records system systemfunction) = do { takeMVar lock; adds <- readIORef nrefs; writeIORef nrefs []; dels <- readIORef drefs; writeIORef drefs []; putMVar lock (); newRecords <- mapM ((sdSystemFunction sd) (sdSystem sd)) adds; let records' = (concat newRecords) ++ records; let records'' = records'; let stepRecord (listener, updateF, deleteF) = do { me <- queryComponentListener listener; case me of { Just (e, e') -> updateF e e' Nothing -> return () } }; mapM stepRecord records''; let newSD = (SystemData lock nrefs drefs records'' system systemfunction); qFlag <- stepSystem newSD; return (newSD, qFlag) }
initializeSystem :: System a => IO (SystemData a)
stepSystem :: System a => (SystemData a) -> IO Bool
addERef :: System a => (SystemData a) -> ERef -> IO ()
removeERef :: System a => (SystemData a) -> ERef -> IO ()
runSystem :: System a => GameTime -> IO (SystemData a)
shutdownSystem :: System a => (SystemData a) -> IO ()
stepSystem' :: System a => (SystemData a) -> IO (SystemData a, Bool)
data SomeSystem
SomeSystem :: (SystemData a) -> SomeSystem
(#+) :: [SomeSystem] -> [SomeSystem] -> [SomeSystem]
addToWorld :: [SomeSystem] -> ERef -> IO ()
removeFromWorld :: [SomeSystem] -> ERef -> IO ()
