-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Easy Mustache templating support for Scotty
--   
--   This library provides a small templating DSL extension for Scotty via
--   the <a>hastache</a> library.
--   
--   <ul>
--   <li><i>Scotty</i> is a light-weighted Web framework/router
--   <a>http://hackage.haskell.org/package/scotty</a></li>
--   <li><i>Hashache</i> is a Haskell implementation of the Mustache
--   templates: <a>http://mustache.github.io/</a>,
--   <a>http://hackage.haskell.org/package/hastache</a></li>
--   </ul>
@package scotty-hastache
@version 0.1.0


-- | Hastache templating for Scotty
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings #-}
--   module Main where
--   
--   import Text.Hastache
--   import Web.Scotty.Trans as S
--   import Web.Scotty.Hastache
--   
--   main :: IO ()
--   main = scottyH 3000 $ do
--     setTemplatesDir "templates"
--     -- ^ Setting up the director with templates
--     get "/:word" $ do
--       beam &lt;- param "word"
--       setH "action" $ MuVariable (beam :: String)
--       -- ^ "action" will be binded to the contents of 'beam'
--       hastache "greet.html"
--   </pre>
--   
--   Given the following template:
--   
--   <pre>
--   &lt;h1&gt;Scotty, {{action}} me up!&lt;/h1&gt;
--   </pre>
--   
--   Upon the <tt>GET /beam</tt> the result will be:
--   
--   <pre>
--   &lt;h1&gt;Scotty, beam me up!&lt;/h1&gt;
--   </pre>
module Web.Scotty.Hastache

-- | The runner to use instead of <tt>scotty</tt>
scottyH :: Port -> ScottyH () -> IO ()

-- | The runner to use instead of <tt>scottyOpts</tt>
scottyHOpts :: Options -> ScottyH () -> IO ()

-- | A type synonym for <tt>ScottyT HState</tt>
type ScottyH = ScottyT HState

-- | A type synonym for <tt>ScottyT HState</tt>
type ActionH = ActionT HState

-- | Update the Hastache configuration as whole
setHastacheConfig :: MuConfig IO -> ScottyH ()

-- | Modify the Hastache configuration as whole
modifyHastacheConfig :: (MuConfig IO -> MuConfig IO) -> ScottyH ()

-- | Set the path to the directory with templates. This affects how
--   <i>both</i> <a>hastache</a> and the <tt>{{&gt; template}}</tt> bit
--   searches for the template files.
setTemplatesDir :: FilePath -> ScottyH ()

-- | Set the default extension for template files. This affects how
--   <i>both</i> <a>hastache</a> and the <tt>{{&gt; template}}</tt> bit
--   searches for the template files.
setTemplateFileExt :: String -> ScottyH ()

-- | This is a function, just like <a>html</a> or <a>text</a>. It takes a
--   name of the template (the path is computed using the information about
--   the templates dir and template files extension) and renders it using
--   Hastache.
--   
--   The variables that have been initialized using <a>setH</a> are
--   substituted for their values, uninitialized variables are considered
--   to be empty/null.
hastache :: FilePath -> ActionT HState ()

-- | Set the value of a mustache variable.
setH :: String -> MuType IO -> ActionT HState ()

-- | State with the Hastache config
type HState = StateT (MuConfig IO, Map String (MuType IO)) IO
mkHStateRunners :: MuConfig IO -> IO (forall a. HState a -> IO a, HState Response -> IO Response)
scottyHApp :: MuConfig IO -> ScottyH () -> IO Application
instance MuVar Markup
instance Show Markup
