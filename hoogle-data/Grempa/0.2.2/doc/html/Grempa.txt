-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Embedded grammar DSL and LALR parser generator
--   
--   A library for expressing programming language grammars in a form
--   similar to BNF, which is extended with the semantic actions to take
--   when a production has been parsed. The grammars are typed and are to
--   be be used with the LALR(1) parser generator, also part of the
--   library, which can generate a parser for the language either at
--   compile time using Template Haskell, producing fast parsers with no
--   initial runtime overhead, or dynamically, which has the initial
--   overhead of generating the parser, but can be used for example when
--   the grammar depends on an input.
@package Grempa
@version 0.2.2


-- | Create parsers from grammars statically (at compile time).
module Data.Parser.Grempa.Static

-- | Make a static parser from a grammar.
--   
--   Example usage:
--   
--   <pre>
--   g :: Grammar s a
--   gparser = $(mkStaticParser g [|g|])
--   </pre>
--   
--   Note that <tt>gparser</tt> must be in a different module than
--   <tt>g</tt>, due to Template Haskell restrictions. The token type of
--   the grammar must also be an instance of <a>ToPat</a>, and the result
--   type an instance of <a>Typeable</a> (the GHC extension
--   DeriveDataTypeable may be useful for this).
--   
--   If there are conflicts in the parsing tables, they will be displayed
--   as warnings when compiling the parser.
mkStaticParser :: (Typeable a, ToPat t, Token t, Lift t) => Grammar t a -> ExpQ -> ExpQ

-- | Make a Template Haskell pattern from a value. This is used to create a
--   case expression from a parsing table when using <a>mkStaticParser</a>,
--   and it is thus required that the token type that the parser is to
--   operate on is an instance of this class.
--   
--   The parser will behave differently depending on how its <a>ToPat</a>
--   instance works. If only comparing constructors (<a>toConstrPat</a>),
--   it will regard <tt>Just 1</tt> as the same compared to <tt>Just
--   2</tt>.
--   
--   <a>toConstrPat</a> and <a>Language.Haskell.TH</a> can help in creating
--   an instance.
class ToPat a
toPat :: ToPat a => a -> PatQ

-- | Automatically create a <a>ToPat</a> instance which only compares the
--   constructor of the token type. For example, the pattern yielded from
--   using this on the value <tt>Just 3</tt> is the pattern <tt>Just
--   _</tt>.
--   
--   Example usage:
--   
--   <pre>
--   instance ToPat TokenType where
--       toPat = toConstrPat
--   </pre>
toConstrPat :: (Token t, Lift t) => t -> PatQ

-- | The result of running a parser
type ParseResult t a = Either (ParseError t) a

-- | The type of a parser generated by Grempa
type Parser t a = [t] -> ParseResult t a

-- | The different kinds of errors that can occur
data ParseError t

-- | The parser did not get an accepted string of tokens.
ParseError :: [Tok t] -> Integer -> ParseError t

-- | A list of tokens that would have been acceptable inputs when the error
--   occured.
expectedTokens :: ParseError t -> [Tok t]

-- | The position at which something went horribly wrong.
--   
--   The position (index into the input token list) at which the error
--   occured.
position :: ParseError t -> Integer

-- | This should not happen. Please file a bug report if it does.
InternalParserError :: Integer -> ParseError t

-- | The position at which something went horribly wrong.
--   
--   The position (index into the input token list) at which the error
--   occured.
position :: ParseError t -> Integer

-- | Make a prettier error string from a <a>ParseError</a>. This shows the
--   position as an index into the input string of tokens, which may not
--   always be preferable, as that position may differ to the position in
--   the input if it is first processed by a lexer. It also shows the
--   expected tokens.
showError :: Show t => ParseError t -> String

-- | Throw away the <a>Either</a> from the <a>ParseResult</a> and throw an
--   exception using <a>showError</a> if something went wrong.
parse :: Show t => Parser t a -> [t] -> a


-- | Create parsers from grammars dynamically (at runtime).
module Data.Parser.Grempa.Dynamic

-- | Make a parser at runtime given a grammar
mkDynamicParser :: (Token t, Token t', Typeable a) => (t -> t', t' -> t) -> Grammar t a -> Parser t a

-- | Wrap the input tokens in the <a>CTok</a> datatype, which has <a>Eq</a>
--   and <a>Ord</a> instances which only look at the constructors of the
--   input values. This is for use as an argument to
--   <a>mkDynamicParser</a>.
--   
--   Example, which will evaluate to <tt>True</tt>:
--   
--   <pre>
--   CTok (Just 1) == CTok (Just 2)
--   </pre>
--   
--   This is useful when using a lexer that may give back a list of
--   something like:
--   
--   <pre>
--   data Token = Ident String | Number Integer | LParen | RParen | Plus | ...
--   </pre>
--   
--   If you want to specify a grammar that accepts any <tt>Ident</tt> and
--   any <tt>Number</tt> and not just specific ones, use
--   <a>constrWrapper</a>.
constrWrapper :: (t -> CTok t, CTok t -> t)

-- | Don't wrap the input tokens. This is for use as an argument to
--   <a>mkDynamicParser</a>. An example usage of <a>idWrapper</a> is if the
--   parser operates directly on <a>String</a>.
idWrapper :: (t -> t, t -> t)

-- | The result of running a parser
type ParseResult t a = Either (ParseError t) a

-- | The type of a parser generated by Grempa
type Parser t a = [t] -> ParseResult t a

-- | The different kinds of errors that can occur
data ParseError t

-- | The parser did not get an accepted string of tokens.
ParseError :: [Tok t] -> Integer -> ParseError t

-- | A list of tokens that would have been acceptable inputs when the error
--   occured.
expectedTokens :: ParseError t -> [Tok t]

-- | The position at which something went horribly wrong.
--   
--   The position (index into the input token list) at which the error
--   occured.
position :: ParseError t -> Integer

-- | This should not happen. Please file a bug report if it does.
InternalParserError :: Integer -> ParseError t

-- | The position at which something went horribly wrong.
--   
--   The position (index into the input token list) at which the error
--   occured.
position :: ParseError t -> Integer

-- | Make a prettier error string from a <a>ParseError</a>. This shows the
--   position as an index into the input string of tokens, which may not
--   always be preferable, as that position may differ to the position in
--   the input if it is first processed by a lexer. It also shows the
--   expected tokens.
showError :: Show t => ParseError t -> String

-- | Throw away the <a>Either</a> from the <a>ParseResult</a> and throw an
--   exception using <a>showError</a> if something went wrong.
parse :: Show t => Parser t a -> [t] -> a


-- | Grammar construction combinators.
--   
--   A grammar in grempa consists of a number of rules and an entry rule.
--   Constructing a grammar is similar to doing it in BNF, but the grammars
--   also have the information of what semantic action to take when a
--   production has been found, which is used by the parsers that can be
--   generated from the grammars.
--   
--   Rules, constructed with the <a>rule</a> function, consist of lists of
--   productions.
--   
--   A production in Grempa starts with a function which acts as the
--   semantic action to be taken when that production has been parsed.
--   After the <a>&lt;@&gt;</a> operator follows what the production
--   accepts, which consists of a number of grammar symbols (terminals
--   (tokens) or non-terminals (grammar rules)).
--   
--   The two combinator functions that construct productions come in two
--   flavours each: One that signals that the result from parsing the
--   symbol to the right of it should be used in the semantic action
--   function and one that signals that it should not:
--   
--   <tt>action <a>&lt;@&gt;</a> symbol =</tt> An action function followed
--   by a symbol
--   
--   <tt>action <a>&lt;@</a> symbol =</tt> An action function followed by a
--   symbol which will not be used when taking the semantic action of the
--   production.
--   
--   <tt>prod <a>&lt;#&gt;</a> symbol = </tt>A production followed by a
--   symbol
--   
--   <tt>prod <a>&lt;#</a> symbol = </tt>A production followed by a symbol
--   which will not be used when taking the semantic action of the
--   production. The grammars have the type <tt><a>Grammar</a> t a</tt>,
--   which tells us that the grammar describes a language operating on
--   <tt>[t]</tt> returning <tt>a</tt>.
--   
--   Grammars can be recursively defined by using recursive do-notation.
module Data.Parser.Grempa.Grammar
type Grammar t a = GrammarState t (RId t a)
type Rule t a = [Prod t a]

-- | A grammar production
data Prod t a
PSeq :: Prod t (b -> a) -> Symbol t b -> Prod t a
PSeqN :: Prod t a -> Symbol t b -> Prod t a
PFun :: a -> Prod t a

-- | A grammar symbol
data Symbol t a
STerm :: t -> Symbol t t
SRule :: RId t a -> Symbol t a

-- | Rule ID
data RId s a
RId :: RuleI -> Rule t a -> RId t a
rId :: RId t a -> RuleI
rIdRule :: RId t a -> Rule t a
type GrammarState t = State (RuleIDs t)

-- | Create a new rule in a grammar
rule :: (Typeable a, Typeable t) => Rule t a -> Grammar t a

-- | Get the result from a Grammar computation
evalGrammar :: GrammarState t a -> a

-- | Create an augmented grammar (with a new start symbol)
augment :: (Typeable t, Typeable a) => Grammar t a -> Grammar t a

-- | Get the semantic action from a production
getFun :: Prod t a -> DynFun

-- | Class for writing grammars in a nicer syntax. This class allows one to
--   use both rules and tokens with the grammar combinator functions. For
--   the grammars to typecheck, it is often necessary to give their type.
class ToSym t a where type family ToSymT t a :: *
toSym :: ToSym t a => a -> Symbol t (ToSymT t a)

-- | Start a production, where the symbol directly to the right of the
--   operator is used in the semantic action.
(<@>) :: (ToSym t x, ToSymT t x ~ b, Typeable a, Typeable b) => (b -> a) -> x -> Prod t a

-- | Start a production, where the symbol directly to the right of the
--   operator is not used in the semantic action.
(<@) :: (ToSym t x, Typeable a) => a -> x -> Prod t a

-- | Sequence a production and a grammar symbol, where the symbol directly
--   to the right of the operator is used in the semantic action.
(<#>) :: (ToSym t x, ToSymT t x ~ b) => Prod t (b -> a) -> x -> Prod t a

-- | Sequence a production and a grammar symbol, where the symbol directly
--   to the right of the operator is not used in the semantic action.
(<#) :: ToSym t x => Prod t a -> x -> Prod t a

-- | The empty production, taking the semantic action (in this case just
--   the value to return) as the argument.
epsilon :: Typeable a => a -> Prod t a

-- | Start a levels block. Usage:
--   
--   <pre>
--   expr &lt;- levels $ do
--     rec
--       e &lt;- lrule [ Plus  &lt;@&gt; e &lt;# '+' &lt;#&gt; t ]
--       t &lt;- lrule [ Times &lt;@&gt; t &lt;# '*' &lt;#&gt; f ]
--       f &lt;- lrule [ Var   &lt;@ 'x'
--                  , id    &lt;@ '(' &lt;#&gt; e &lt;# ')']
--     return e
--   </pre>
--   
--   is equivalent to
--   
--   <pre>
--   e &lt;- rule [ Plus  &lt;@&gt; e &lt;# '+' &lt;#&gt; t 
--             , id    &lt;@&gt; t
--             ]
--   t &lt;- rule [ Times &lt;@&gt; t &lt;# '*' &lt;#&gt; f 
--             , id    &lt;@&gt; f
--             ]
--   f &lt;- rule [ Var   &lt;@ 'x'
--             , id    &lt;@ '(' &lt;#&gt; e &lt;# ')'
--             ]
--   </pre>
--   
--   Put simply, every lrule save for the last one gets an additional
--   identity production pointing to the next lrule. This is a common
--   pattern when creating grammars with precedence levels.
levels :: Monad m => RStateT (Maybe a) m r -> m r

-- | A rule in a levels block
lrule :: (Typeable a, Typeable t) => Rule t a -> RStateT (Maybe (RId t a)) (GrammarState t) (RId t a)

-- | Create a new rule which consists of 0 or more of the argument symbol.
--   Example: <tt>several0 x</tt> matches <tt>x x ... x</tt>
--   
--   Creates one new rule.
several0 :: (ToSym s x, ToSymT s x ~ a, Typeable a, Typeable s) => x -> Grammar s [a]

-- | Return a new rule which consists of 1 or more of the argument symbol.
--   Example: <tt>several x</tt> matches <tt>x x ... x</tt>
--   
--   Creates one new rule.
several :: (ToSym s x, ToSymT s x ~ a, Typeable a, Typeable s) => x -> Grammar s [a]

-- | Create a new rule which consists of a list of size 0 or more
--   interspersed with a symbol. Example: <tt>severalInter0 ';' x</tt>
--   matches <tt>x ';' x ';' ... ';' x</tt> If <tt>x :: a</tt> then the
--   result is of type <tt>[a]</tt>.
--   
--   Creates two new rules.
severalInter0 :: (ToSym s x, ToSymT s x ~ a, ToSym s t, ToSymT s t ~ s, Typeable a, Typeable s) => t -> x -> Grammar s [a]

-- | Return a new rule which consists of a list of size 1 or more
--   interspersed with a symbol. Example: <tt>severalInter ';' x</tt>
--   matches <tt>x ';' x ';' ... ';' x</tt>
--   
--   Creates one new rule.
severalInter :: (ToSym s x, ToSymT s x ~ a, ToSym s t, ToSymT s t ~ s, Typeable a, Typeable s) => t -> x -> Grammar s [a]

-- | Takes two symbols and combines them with <tt>(:)</tt>.
--   
--   Creates one new rule.
--   
--   This can for example be used instead of using both <a>several</a> and
--   <a>several0</a> on the same symbol, as that will create three new
--   rules, whereas the equivalent using <a>cons</a> will only create two
--   new rules. Example transformation:
--   
--   <pre>
--   xs0 &lt;- several0 x
--   xs  &lt;- several  x
--     ==&gt;
--   xs0 &lt;- several0 x
--   xs  &lt;- x `cons` xs0
--   </pre>
cons :: (ToSym s x, ToSymT s x ~ a, ToSym s xs, ToSymT s xs ~ [a], Typeable a, Typeable s) => x -> xs -> Grammar s [a]


-- | Generate arbitrary input strings for a grammar and see that it is able
--   to parse them.
module Data.Parser.Grempa.Test

-- | QuickCheck property for seeing if a parser can parse everything
--   produced by a grammar and get the expected result.
--   
--   There are cases where the property will fail even though the parser is
--   correct. That can happen when there is an <tt>epsilon</tt> production
--   that makes it valid to make the result tree nest one more level
--   without eating any of the input. The parsers generated will not do
--   this, but the random input generator currently will (this is a bug).
--   An example of this is the following:
--   
--   <pre>
--   data Expr = ... | EApp Expr [Expr]
--   grammar = ...
--       expr &lt;- rule [...
--                    , EApp &lt;@&gt; expr &lt;#&gt; exprs
--                    ]
--       exprs &lt;- several expr
--   </pre>
--   
--   Here, the random generator may produce <tt>EApp expr []</tt> for some
--   <tt>expr</tt>, as the rule <tt>several</tt> <tt>expr</tt> matches 0 or
--   more <tt>expr</tt>s. which will have the same input token string as
--   just <tt>expr</tt> which is what the parser will parse, so the
--   expected result and the parsed result will differ.
prop_parser :: (Show a, Show s, Eq a, Typeable a, Typeable s) => Parser s a -> Grammar s a -> Property
