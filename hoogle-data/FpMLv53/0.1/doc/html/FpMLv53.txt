-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A binding for the Financial Products Markup Language (v5.3)
--   
--   FpML, the Financial Products Markup Language, is the business exchange
--   standard for electronic dealing and processing of financial
--   derivatives instruments. It establishes a protocol for sharing
--   information on, and dealing in, swaps, derivatives, and structured
--   products. It is based on XML, the standard meta-language for
--   describing data shared between applications. All categories of
--   over-the-counter (OTC) derivatives will eventually be incorporated
--   into the standard. This package is an automatically-generated binding
--   to version 5.3 of the FpML standard. The object-oriented typing
--   discipline of the original XSD definition of FpML has been translated
--   into Haskell's algebraic types. Type classes for parsing from, and
--   outputting to, XML documents are instantiated for all types.
@package FpMLv53
@version 0.1

module Data.Xmldsig.Core.Schema
newtype CryptoBinary
CryptoBinary :: Base64Binary -> CryptoBinary
elementSignature :: XMLParser SignatureType
elementToXMLSignature :: SignatureType -> [Content ()]
data SignatureType
SignatureType :: Maybe ID -> SignedInfoType -> SignatureValueType -> Maybe KeyInfoType -> [ObjectType] -> SignatureType
signatType_id :: SignatureType -> Maybe ID
signatType_signedInfo :: SignatureType -> SignedInfoType
signatType_signatureValue :: SignatureType -> SignatureValueType
signatType_keyInfo :: SignatureType -> Maybe KeyInfoType
signatType_object :: SignatureType -> [ObjectType]
elementSignatureValue :: XMLParser SignatureValueType
elementToXMLSignatureValue :: SignatureValueType -> [Content ()]
data SignatureValueType
SignatureValueType :: Base64Binary -> SignatureValueTypeAttributes -> SignatureValueType
data SignatureValueTypeAttributes
SignatureValueTypeAttributes :: Maybe ID -> SignatureValueTypeAttributes
signatValueTypeAttrib_id :: SignatureValueTypeAttributes -> Maybe ID
elementSignedInfo :: XMLParser SignedInfoType
elementToXMLSignedInfo :: SignedInfoType -> [Content ()]
data SignedInfoType
SignedInfoType :: Maybe ID -> CanonicalizationMethodType -> SignatureMethodType -> [ReferenceType] -> SignedInfoType
signedInfoType_id :: SignedInfoType -> Maybe ID
signedInfoType_canonicalizationMethod :: SignedInfoType -> CanonicalizationMethodType
signedInfoType_signatureMethod :: SignedInfoType -> SignatureMethodType
signedInfoType_reference :: SignedInfoType -> [ReferenceType]
elementCanonicalizationMethod :: XMLParser CanonicalizationMethodType
elementToXMLCanonicalizationMethod :: CanonicalizationMethodType -> [Content ()]
data CanonicalizationMethodType
CanonicalizationMethodType :: AnyURI -> String -> [AnyElement] -> String -> CanonicalizationMethodType
canonMethodType_algorithm :: CanonicalizationMethodType -> AnyURI
canonMethodType_text0 :: CanonicalizationMethodType -> String
canonMethodType_any1 :: CanonicalizationMethodType -> [AnyElement]
canonMethodType_text2 :: CanonicalizationMethodType -> String
elementSignatureMethod :: XMLParser SignatureMethodType
elementToXMLSignatureMethod :: SignatureMethodType -> [Content ()]
data SignatureMethodType
SignatureMethodType :: AnyURI -> String -> Maybe HMACOutputLengthType -> String -> [AnyElement] -> String -> SignatureMethodType
signatMethodType_algorithm :: SignatureMethodType -> AnyURI
signatMethodType_text0 :: SignatureMethodType -> String
signatMethodType_hMACOutputLength :: SignatureMethodType -> Maybe HMACOutputLengthType
signatMethodType_text2 :: SignatureMethodType -> String
signatMethodType_any3 :: SignatureMethodType -> [AnyElement]
signatMethodType_text4 :: SignatureMethodType -> String
elementReference :: XMLParser ReferenceType
elementToXMLReference :: ReferenceType -> [Content ()]
data ReferenceType
ReferenceType :: Maybe ID -> Maybe AnyURI -> Maybe AnyURI -> Maybe TransformsType -> DigestMethodType -> DigestValueType -> ReferenceType
refType_id :: ReferenceType -> Maybe ID
refType_uRI :: ReferenceType -> Maybe AnyURI
refType_type :: ReferenceType -> Maybe AnyURI
refType_transforms :: ReferenceType -> Maybe TransformsType
refType_digestMethod :: ReferenceType -> DigestMethodType
refType_digestValue :: ReferenceType -> DigestValueType
elementTransforms :: XMLParser TransformsType
elementToXMLTransforms :: TransformsType -> [Content ()]
data TransformsType
TransformsType :: [TransformType] -> TransformsType
transfType_transform :: TransformsType -> [TransformType]
elementTransform :: XMLParser TransformType
elementToXMLTransform :: TransformType -> [Content ()]
data TransformType
TransformType :: AnyURI -> [OneOf3 String XsdString (AnyElement)] -> TransformType
transfType_algorithm :: TransformType -> AnyURI

-- | Choice between:
--   
--   <ol>
--   <li>mixed text</li>
--   <li>XPath</li>
--   <li>unknown</li>
--   </ol>
transfType_choice0 :: TransformType -> [OneOf3 String XsdString (AnyElement)]
elementDigestMethod :: XMLParser DigestMethodType
elementToXMLDigestMethod :: DigestMethodType -> [Content ()]
data DigestMethodType
DigestMethodType :: AnyURI -> String -> [AnyElement] -> String -> DigestMethodType
digestMethodType_algorithm :: DigestMethodType -> AnyURI
digestMethodType_text0 :: DigestMethodType -> String
digestMethodType_any1 :: DigestMethodType -> [AnyElement]
digestMethodType_text2 :: DigestMethodType -> String
elementDigestValue :: XMLParser DigestValueType
elementToXMLDigestValue :: DigestValueType -> [Content ()]
newtype DigestValueType
DigestValueType :: Base64Binary -> DigestValueType
elementKeyInfo :: XMLParser KeyInfoType
elementToXMLKeyInfo :: KeyInfoType -> [Content ()]
data KeyInfoType
KeyInfoType :: Maybe ID -> [OneOf9 String XsdString KeyValueType RetrievalMethodType X509DataType PGPDataType SPKIDataType XsdString (AnyElement)] -> KeyInfoType
keyInfoType_id :: KeyInfoType -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>mixed text</li>
--   <li>KeyName</li>
--   <li>KeyValue</li>
--   <li>RetrievalMethod</li>
--   <li>X509Data</li>
--   <li>PGPData</li>
--   <li>SPKIData</li>
--   <li>MgmtData</li>
--   <li>unknown</li>
--   </ol>
keyInfoType_choice0 :: KeyInfoType -> [OneOf9 String XsdString KeyValueType RetrievalMethodType X509DataType PGPDataType SPKIDataType XsdString (AnyElement)]
elementKeyName :: XMLParser XsdString
elementToXMLKeyName :: XsdString -> [Content ()]
elementMgmtData :: XMLParser XsdString
elementToXMLMgmtData :: XsdString -> [Content ()]
elementKeyValue :: XMLParser KeyValueType
elementToXMLKeyValue :: KeyValueType -> [Content ()]
data KeyValueType
KeyValueType :: OneOf4 String DSAKeyValueType RSAKeyValueType (AnyElement) -> KeyValueType

-- | Choice between:
--   
--   <ol>
--   <li>mixed text</li>
--   <li>DSAKeyValue</li>
--   <li>RSAKeyValue</li>
--   <li>unknown</li>
--   </ol>
keyValueType_choice0 :: KeyValueType -> OneOf4 String DSAKeyValueType RSAKeyValueType (AnyElement)
elementRetrievalMethod :: XMLParser RetrievalMethodType
elementToXMLRetrievalMethod :: RetrievalMethodType -> [Content ()]
data RetrievalMethodType
RetrievalMethodType :: Maybe AnyURI -> Maybe AnyURI -> Maybe TransformsType -> RetrievalMethodType
retriMethodType_uRI :: RetrievalMethodType -> Maybe AnyURI
retriMethodType_type :: RetrievalMethodType -> Maybe AnyURI
retriMethodType_transforms :: RetrievalMethodType -> Maybe TransformsType
elementX509Data :: XMLParser X509DataType
elementToXMLX509Data :: X509DataType -> [Content ()]
data X509DataType
X509DataType :: OneOf6 X509IssuerSerialType Base64Binary XsdString Base64Binary Base64Binary (AnyElement) -> X509DataType

-- | Choice between:
--   
--   <ol>
--   <li>X509IssuerSerial</li>
--   <li>X509SKI</li>
--   <li>X509SubjectName</li>
--   <li>X509Certificate</li>
--   <li>X509CRL</li>
--   <li>unknown</li>
--   </ol>
x509DataType_choice0 :: X509DataType -> OneOf6 X509IssuerSerialType Base64Binary XsdString Base64Binary Base64Binary (AnyElement)
data X509IssuerSerialType
X509IssuerSerialType :: XsdString -> Integer -> X509IssuerSerialType
x509IssuerSerialType_x509IssuerName :: X509IssuerSerialType -> XsdString
x509IssuerSerialType_x509SerialNumber :: X509IssuerSerialType -> Integer
elementPGPData :: XMLParser PGPDataType
elementToXMLPGPData :: PGPDataType -> [Content ()]
data PGPDataType
PGPDataType :: OneOf2 (Base64Binary, Maybe (Base64Binary), [AnyElement]) (Base64Binary, [AnyElement]) -> PGPDataType

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>PGPKeyID</li>
--   <li>PGPKeyPacket</li>
--   <li>unknown</li>
--   </ul>
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>PGPKeyPacket</li>
--   <li>unknown</li>
--   </ul>
pGPDataType_choice0 :: PGPDataType -> OneOf2 (Base64Binary, Maybe (Base64Binary), [AnyElement]) (Base64Binary, [AnyElement])
elementSPKIData :: XMLParser SPKIDataType
elementToXMLSPKIData :: SPKIDataType -> [Content ()]
data SPKIDataType
SPKIDataType :: Base64Binary -> Maybe AnyElement -> SPKIDataType
sPKIDataType_sPKISexp :: SPKIDataType -> Base64Binary
sPKIDataType_any1 :: SPKIDataType -> Maybe AnyElement
elementObject :: XMLParser ObjectType
elementToXMLObject :: ObjectType -> [Content ()]
data ObjectType
ObjectType :: Maybe ID -> Maybe XsdString -> Maybe AnyURI -> String -> AnyElement -> String -> ObjectType
objectType_id :: ObjectType -> Maybe ID
objectType_mimeType :: ObjectType -> Maybe XsdString
objectType_encoding :: ObjectType -> Maybe AnyURI
objectType_text0 :: ObjectType -> String
objectType_any1 :: ObjectType -> AnyElement
objectType_text2 :: ObjectType -> String
elementManifest :: XMLParser ManifestType
elementToXMLManifest :: ManifestType -> [Content ()]
data ManifestType
ManifestType :: Maybe ID -> [ReferenceType] -> ManifestType
manifestType_id :: ManifestType -> Maybe ID
manifestType_reference :: ManifestType -> [ReferenceType]
elementSignatureProperties :: XMLParser SignaturePropertiesType
elementToXMLSignatureProperties :: SignaturePropertiesType -> [Content ()]
data SignaturePropertiesType
SignaturePropertiesType :: Maybe ID -> [SignaturePropertyType] -> SignaturePropertiesType
signatPropsType_id :: SignaturePropertiesType -> Maybe ID
signatPropsType_signatureProperty :: SignaturePropertiesType -> [SignaturePropertyType]
elementSignatureProperty :: XMLParser SignaturePropertyType
elementToXMLSignatureProperty :: SignaturePropertyType -> [Content ()]
data SignaturePropertyType
SignaturePropertyType :: AnyURI -> Maybe ID -> [OneOf2 String (AnyElement)] -> SignaturePropertyType
signatPropType_target :: SignaturePropertyType -> AnyURI
signatPropType_id :: SignaturePropertyType -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>mixed text</li>
--   <li>unknown</li>
--   </ol>
signatPropType_choice0 :: SignaturePropertyType -> [OneOf2 String (AnyElement)]
newtype HMACOutputLengthType
HMACOutputLengthType :: Integer -> HMACOutputLengthType
elementDSAKeyValue :: XMLParser DSAKeyValueType
elementToXMLDSAKeyValue :: DSAKeyValueType -> [Content ()]
data DSAKeyValueType
DSAKeyValueType :: CryptoBinary -> CryptoBinary -> Maybe CryptoBinary -> CryptoBinary -> Maybe CryptoBinary -> CryptoBinary -> CryptoBinary -> DSAKeyValueType
dSAKeyValueType_p :: DSAKeyValueType -> CryptoBinary
dSAKeyValueType_q :: DSAKeyValueType -> CryptoBinary
dSAKeyValueType_g :: DSAKeyValueType -> Maybe CryptoBinary
dSAKeyValueType_y :: DSAKeyValueType -> CryptoBinary
dSAKeyValueType_j :: DSAKeyValueType -> Maybe CryptoBinary
dSAKeyValueType_seed :: DSAKeyValueType -> CryptoBinary
dSAKeyValueType_pgenCounter :: DSAKeyValueType -> CryptoBinary
elementRSAKeyValue :: XMLParser RSAKeyValueType
elementToXMLRSAKeyValue :: RSAKeyValueType -> [Content ()]
data RSAKeyValueType
RSAKeyValueType :: CryptoBinary -> CryptoBinary -> RSAKeyValueType
rSAKeyValueType_modulus :: RSAKeyValueType -> CryptoBinary
rSAKeyValueType_exponent :: RSAKeyValueType -> CryptoBinary
instance Eq CryptoBinary
instance Show CryptoBinary
instance Eq SignatureValueTypeAttributes
instance Show SignatureValueTypeAttributes
instance Eq SignatureValueType
instance Show SignatureValueType
instance Eq CanonicalizationMethodType
instance Show CanonicalizationMethodType
instance Eq TransformType
instance Show TransformType
instance Eq TransformsType
instance Show TransformsType
instance Eq DigestMethodType
instance Show DigestMethodType
instance Eq DigestValueType
instance Show DigestValueType
instance Eq ReferenceType
instance Show ReferenceType
instance Eq RetrievalMethodType
instance Show RetrievalMethodType
instance Eq X509IssuerSerialType
instance Show X509IssuerSerialType
instance Eq X509DataType
instance Show X509DataType
instance Eq PGPDataType
instance Show PGPDataType
instance Eq SPKIDataType
instance Show SPKIDataType
instance Eq ObjectType
instance Show ObjectType
instance Eq ManifestType
instance Show ManifestType
instance Eq SignaturePropertyType
instance Show SignaturePropertyType
instance Eq SignaturePropertiesType
instance Show SignaturePropertiesType
instance Eq HMACOutputLengthType
instance Show HMACOutputLengthType
instance Eq SignatureMethodType
instance Show SignatureMethodType
instance Eq SignedInfoType
instance Show SignedInfoType
instance Eq DSAKeyValueType
instance Show DSAKeyValueType
instance Eq RSAKeyValueType
instance Show RSAKeyValueType
instance Eq KeyValueType
instance Show KeyValueType
instance Eq KeyInfoType
instance Show KeyInfoType
instance Eq SignatureType
instance Show SignatureType
instance SchemaType RSAKeyValueType
instance SchemaType DSAKeyValueType
instance SimpleType HMACOutputLengthType
instance SchemaType HMACOutputLengthType
instance Restricts HMACOutputLengthType Integer
instance SchemaType SignaturePropertyType
instance SchemaType SignaturePropertiesType
instance SchemaType ManifestType
instance SchemaType ObjectType
instance SchemaType SPKIDataType
instance SchemaType PGPDataType
instance SchemaType X509IssuerSerialType
instance SchemaType X509DataType
instance SchemaType RetrievalMethodType
instance SchemaType KeyValueType
instance SchemaType KeyInfoType
instance SimpleType DigestValueType
instance SchemaType DigestValueType
instance Restricts DigestValueType Base64Binary
instance SchemaType DigestMethodType
instance SchemaType TransformType
instance SchemaType TransformsType
instance SchemaType ReferenceType
instance SchemaType SignatureMethodType
instance SchemaType CanonicalizationMethodType
instance SchemaType SignedInfoType
instance Extension SignatureValueType Base64Binary
instance SchemaType SignatureValueType
instance SchemaType SignatureType
instance SimpleType CryptoBinary
instance SchemaType CryptoBinary
instance Restricts CryptoBinary Base64Binary

module Data.FpML.V53.Enum

-- | The type of averaging used in an Asian option.
data AveragingInOutEnum

-- | The average price is used to derive the strike price. Also known as
--   <a>Asian strike</a> style option.
AveragingInOutEnum_In :: AveragingInOutEnum

-- | The average price is used to derive the expiration price. Also known
--   as <a>Asian price</a> style option.
AveragingInOutEnum_Out :: AveragingInOutEnum

-- | The average price is used to derive both the strike and the expiration
--   price.
AveragingInOutEnum_Both :: AveragingInOutEnum

-- | The method of calculation to be used when averaging rates. Per ISDA
--   2000 Definitions, Section 6.2. Certain Definitions Relating to
--   Floating Amounts.
data AveragingMethodEnum

-- | The arithmetic mean of the relevant rates for each reset date.
AveragingMethodEnum_Unweighted :: AveragingMethodEnum

-- | The arithmetic mean of the relevant rates in effect for each day in a
--   calculation period calculated by multiplying each relevant rate by the
--   number of days such relevant rate is in effect, determining the sum of
--   such products and dividing such sum by the number of days in the
--   calculation period.
AveragingMethodEnum_Weighted :: AveragingMethodEnum

-- | When breakage cost is applicable, defines who is calculating it.
data BreakageCostEnum

-- | Breakage cost is calculated by the agent bank.
BreakageCostEnum_AgentBank :: BreakageCostEnum

-- | Breakage cost is calculated by the lender.
BreakageCostEnum_Lender :: BreakageCostEnum

-- | Defines which type of bullion is applicable for a Bullion Transaction.
data BullionTypeEnum

-- | Gold. Quality as per the Good Delivery Rules issued by the London
--   Bullion Market Association.
BullionTypeEnum_Gold :: BullionTypeEnum

-- | Palladium. Quality as per the Good Delivery Rules issued by the London
--   Platinum and Palladium Market.
BullionTypeEnum_Palladium :: BullionTypeEnum

-- | Palladium. Quality as per the Good Delivery Rules issued by the London
--   Platinum and Palladium Market.
BullionTypeEnum_Platinum :: BullionTypeEnum

-- | Silver. Quality as per the Good Delivery Rules issued by the London
--   Bullion Market Association.
BullionTypeEnum_Silver :: BullionTypeEnum

-- | Quality as per the Good Delivery Rules for Rhodium (Sponge).
BullionTypeEnum_RhodiumSponge :: BullionTypeEnum

-- | The convention for adjusting any relevant date if it would otherwise
--   fall on a day that is not a valid business day. Note that FRN is
--   included here as a type of business day convention although it does
--   not strictly fall within ISDA's definition of a Business Day
--   Convention and does not conform to the simple definition given above.
data BusinessDayConventionEnum

-- | The non-business date will be adjusted to the first following day that
--   is a business day
BusinessDayConventionEnum_FOLLOWING :: BusinessDayConventionEnum

-- | Per 2000 ISDA Definitions, Section 4.11. FRN Convention; Eurodollar
--   Convention.
BusinessDayConventionEnum_FRN :: BusinessDayConventionEnum

-- | The non-business date will be adjusted to the first following day that
--   is a business day unless that day falls in the next calendar month, in
--   which case that date will be the first preceding day that is a
--   business day.
BusinessDayConventionEnum_MODFOLLOWING :: BusinessDayConventionEnum

-- | The non-business day will be adjusted to the first preceding day that
--   is a business day.
BusinessDayConventionEnum_PRECEDING :: BusinessDayConventionEnum

-- | The non-business date will be adjusted to the first preceding day that
--   is a business day unless that day falls in the previous calendar
--   month, in which case that date will be the first following day that us
--   a business day.
BusinessDayConventionEnum_MODPRECEDING :: BusinessDayConventionEnum

-- | The non-business date will be adjusted to the nearest day that is a
--   business day - i.e. if the non-business day falls on any day other
--   than a Sunday or a Monday, it will be the first preceding day that is
--   a business day, and will be the first following business day if it
--   falls on a Sunday or a Monday.
BusinessDayConventionEnum_NEAREST :: BusinessDayConventionEnum

-- | The date will not be adjusted if it falls on a day that is not a
--   business day.
BusinessDayConventionEnum_NONE :: BusinessDayConventionEnum

-- | The date adjustments conventions are defined elsewhere, so it is not
--   required to specify them here.
BusinessDayConventionEnum_NotApplicable :: BusinessDayConventionEnum

-- | Shows how the transaction is to be settled when it is exercised.
data CashPhysicalEnum

-- | The intrinsic value of the option will be delivered by way of a cash
--   settlement amount determined, (i) by reference to the differential
--   between the strike price and the settlement price; or (ii) in
--   accordance with a bilateral agreement between the parties
CashPhysicalEnum_Cash :: CashPhysicalEnum

-- | The securities underlying the transaction will be delivered by (i) in
--   the case of a call, the seller to the buyer, or (ii) in the case of a
--   put, the buyer to the seller versus a settlement amount equivalent to
--   the strike price per share
CashPhysicalEnum_Physical :: CashPhysicalEnum

-- | The specification of how a calculation agent will be determined.
data CalculationAgentPartyEnum

-- | The party that gives notice of exercise. Per 2000 ISDA Definitions,
--   Section 11.1. Parties, paragraph (d).
CalculationAgentPartyEnum_ExercisingParty :: CalculationAgentPartyEnum

-- | The party that is given notice of exercise. Per 2000 ISDA Definitions,
--   Section 11.1. Parties, paragraph (e).
CalculationAgentPartyEnum_NonExercisingParty :: CalculationAgentPartyEnum

-- | The Calculation Agent is determined by reference to the relevant
--   master agreement.
CalculationAgentPartyEnum_AsSpecifiedInMasterAgreement :: CalculationAgentPartyEnum

-- | The Calculation Agent is determined by reference to the relevant
--   standard terms supplement.
CalculationAgentPartyEnum_AsSpecifiedInStandardTermsSupplement :: CalculationAgentPartyEnum

-- | The unit in which a commission is denominated.
data CommissionDenominationEnum

-- | The commission is expressed in basis points, in reference to the price
--   referenced in the document.
CommissionDenominationEnum_BPS :: CommissionDenominationEnum

-- | The commission is expressed as a percentage of the gross price
--   referenced in the document.
CommissionDenominationEnum_Percentage :: CommissionDenominationEnum

-- | The commission is expressed in cents per share.
CommissionDenominationEnum_CentsPerShare :: CommissionDenominationEnum

-- | The commission is expressed as a absolute amount.
CommissionDenominationEnum_FixedAmount :: CommissionDenominationEnum

-- | The consequences of Bullion Settlement Disruption Events.
data CommodityBullionSettlementDisruptionEnum

-- | Negotiation will apply in the event of Bullion Settlement Disruption
--   as per Section 10.5.(d) of the 2005 Commodity Definitions.
CommodityBullionSettlementDisruptionEnum_Negotiation :: CommodityBullionSettlementDisruptionEnum

-- | Cancellation and Payment will apply in the event of Bullion Settlement
--   Disruption as per Section 10.5.(d) of the 2005 Commodity Definitions.
CommodityBullionSettlementDisruptionEnum_CancellationandPayment :: CommodityBullionSettlementDisruptionEnum

-- | A day type classification used in counting the number of days between
--   two dates for a commodity transaction.
data CommodityDayTypeEnum

-- | When calculating the number of days between two dates the count
--   includes only business days.
CommodityDayTypeEnum_Business :: CommodityDayTypeEnum

-- | When calculating the number of days between two dates the count
--   includes all calendar days.
CommodityDayTypeEnum_Calendar :: CommodityDayTypeEnum

-- | When calculating the number of days between two dates the count
--   includes only commodity business days.
CommodityDayTypeEnum_CommodityBusiness :: CommodityDayTypeEnum

-- | When calculating the number of days between two dates the count
--   includes only currency business days.
CommodityDayTypeEnum_CurrencyBusiness :: CommodityDayTypeEnum

-- | When calculating the number of days between two dates the count
--   includes only stock exchange business days.
CommodityDayTypeEnum_ExchangeBusiness :: CommodityDayTypeEnum

-- | When calculating the number of days between two dates the count
--   includes only scheduled trading days.
CommodityDayTypeEnum_ScheduledTradingDay :: CommodityDayTypeEnum

-- | When calculating the number of days between two dates the count
--   includes only gas flow days (dates on which gas is delivered).
CommodityDayTypeEnum_GasFlow :: CommodityDayTypeEnum

-- | The compounding calculation method
data CompoundingMethodEnum

-- | Flat compounding. Compounding excludes the spread. Note that the first
--   compounding period has it's interest calculated including any spread
--   then subsequent periods compound this at a rate excluding the spread.
CompoundingMethodEnum_Flat :: CompoundingMethodEnum

-- | No compounding is to be applied.
CompoundingMethodEnum_None :: CompoundingMethodEnum

-- | Straight compounding. Compounding includes the spread.
CompoundingMethodEnum_Straight :: CompoundingMethodEnum

-- | Spread Exclusive compounding.
CompoundingMethodEnum_SpreadExclusive :: CompoundingMethodEnum

-- | A day of the seven-day week.
data DayOfWeekEnum

-- | Monday
DayOfWeekEnum_MON :: DayOfWeekEnum

-- | Tuesday
DayOfWeekEnum_TUE :: DayOfWeekEnum

-- | Wednesday
DayOfWeekEnum_WED :: DayOfWeekEnum

-- | Thursday
DayOfWeekEnum_THU :: DayOfWeekEnum

-- | Friday
DayOfWeekEnum_FRI :: DayOfWeekEnum

-- | Saturday
DayOfWeekEnum_SAT :: DayOfWeekEnum

-- | Sunday
DayOfWeekEnum_SUN :: DayOfWeekEnum

-- | A day type classification used in counting the number of days between
--   two dates.
data DayTypeEnum

-- | When calculating the number of days between two dates the count
--   includes only business days.
DayTypeEnum_Business :: DayTypeEnum

-- | When calculating the number of days between two dates the count
--   includes all calendar days.
DayTypeEnum_Calendar :: DayTypeEnum

-- | When calculating the number of days between two dates the count
--   includes only commodity business days.
DayTypeEnum_CommodityBusiness :: DayTypeEnum

-- | When calculating the number of days between two dates the count
--   includes only currency business days.
DayTypeEnum_CurrencyBusiness :: DayTypeEnum

-- | When calculating the number of days between two dates the count
--   includes only stock exchange business days.
DayTypeEnum_ExchangeBusiness :: DayTypeEnum

-- | When calculating the number of days between two dates the count
--   includes only scheduled trading days.
DayTypeEnum_ScheduledTradingDay :: DayTypeEnum
data DealtCurrencyEnum
DealtCurrencyEnum_ExchangedCurrency1 :: DealtCurrencyEnum
DealtCurrencyEnum_ExchangedCurrency2 :: DealtCurrencyEnum

-- | In respect of a Transaction and a Commodity Reference Price, the
--   relevant date or month for delivery of the underlying Commodity.
data DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be the month of
--   expiration of the futures contract that corresponds to the month and
--   year of the Calculation Period. e.g. The JAN 09 contract when pricing
--   in January '09 (In the case of contracts like Brent crude, this will
--   mean that the contract expired in DEC 08.)
DeliveryDatesEnum_CalculationPeriod :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be the month of
--   expiration of the First Nearby Month futures contract.
DeliveryDatesEnum_FirstNearby :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be the month of
--   expiration of the Second Nearby Month futures contract.
DeliveryDatesEnum_SecondNearby :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be the month of
--   expiration of the Third Nearby Month futures contract.
DeliveryDatesEnum_ThirdNearby :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be the month of
--   expiration of the Fourth Nearby Month futures contract.
DeliveryDatesEnum_FourthNearby :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be the month of
--   expiration of the Fifth Nearby Month futures contract.
DeliveryDatesEnum_FifthNearby :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be the month of
--   expiration of the Sixth Nearby Month futures contract.
DeliveryDatesEnum_SixthNearby :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be the month of
--   expiration of the Seventh Nearby Month futures contract.
DeliveryDatesEnum_SeventhNearby :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be the month of
--   expiration of the Eighth Nearby Month futures contract.
DeliveryDatesEnum_EighthNearby :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be the month of
--   expiration of the Ninth Nearby Month futures contract.
DeliveryDatesEnum_NinthNearby :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be the month of
--   expiration of the Tenth Nearby Month futures contract.
DeliveryDatesEnum_TenthNearby :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be the month of
--   expiration of the Eleventh Nearby Month futures contract.
DeliveryDatesEnum_EleventhNearby :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be the month of
--   expiration of the Twelfth Nearby Month futures contract.
DeliveryDatesEnum_TwelfthNearby :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be the month of
--   expiration of the Thirteenth Nearby Month futures contract.
DeliveryDatesEnum_ThirteenthNearby :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be the month of
--   expiration of the Fourteenth Nearby Month futures contract.
DeliveryDatesEnum_FourteenthNearby :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be the Spot date.
DeliveryDatesEnum_Spot :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   First Nearby Week.
DeliveryDatesEnum_V1stNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Second Nearby Week.
DeliveryDatesEnum_V2ndNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Third Nearby Week.
DeliveryDatesEnum_V3rdNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Fourth Nearby Week.
DeliveryDatesEnum_V4thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Fifth Nearby Week.
DeliveryDatesEnum_V5thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Sixth Nearby Week.
DeliveryDatesEnum_V6thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Seventh Nearby Week.
DeliveryDatesEnum_V7thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Eighth Nearby Week.
DeliveryDatesEnum_V8thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Ninth Nearby Week.
DeliveryDatesEnum_V9thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Tenth Nearby Week.
DeliveryDatesEnum_V10thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Eleventh Nearby Week.
DeliveryDatesEnum_V11thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Twelfth Nearby Week.
DeliveryDatesEnum_V12thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Thirteenth Nearby Week.
DeliveryDatesEnum_V13thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Fourteenth Nearby Week.
DeliveryDatesEnum_V14thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Fifteenth Nearby Week.
DeliveryDatesEnum_V15thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Sixteenth Nearby Week.
DeliveryDatesEnum_V16thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Seventeenth Nearby Week.
DeliveryDatesEnum_V17thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Eighteenth Nearby Week.
DeliveryDatesEnum_V18thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Nineteenth Nearby Week.
DeliveryDatesEnum_V19thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Twentieth Nearby Week.
DeliveryDatesEnum_V20thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Twenty First Nearby Week.
DeliveryDatesEnum_V21stNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Twenty Second Nearby Week.
DeliveryDatesEnum_V22ndNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Twenty Third Nearby Week.
DeliveryDatesEnum_V23rdNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Twenty Fourth Nearby Week.
DeliveryDatesEnum_V24thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Twenty Fifth Nearby Week.
DeliveryDatesEnum_V25thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Twenty Sixth Nearby Week.
DeliveryDatesEnum_V26thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Twenty Seventh Nearby Week.
DeliveryDatesEnum_V27thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Twenty Eighth Nearby Week.
DeliveryDatesEnum_V28thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Twenty Ninth Nearby Week.
DeliveryDatesEnum_V29thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Thirtieth Nearby Week.
DeliveryDatesEnum_V30thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Thirty First Nearby Week.
DeliveryDatesEnum_V31stNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Thirty Second Nearby Week.
DeliveryDatesEnum_V32ndNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Thirty Third Nearby Week.
DeliveryDatesEnum_V33rdNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Thirty Fourth Nearby Week.
DeliveryDatesEnum_V34thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Thirty Fifth Nearby Week.
DeliveryDatesEnum_V35thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Thirty Sixth Nearby Week.
DeliveryDatesEnum_V36thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Thirty Seventh Nearby Week.
DeliveryDatesEnum_V37thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Thirty Eighth Nearby Week.
DeliveryDatesEnum_V38thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Thirty Ninth Nearby Week.
DeliveryDatesEnum_V39thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Fortieth Nearby Week.
DeliveryDatesEnum_V40thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Forty First Nearby Week.
DeliveryDatesEnum_V41stNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Forty Second Nearby Week.
DeliveryDatesEnum_V42ndNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Forty Third Nearby Week.
DeliveryDatesEnum_V43rdNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Forty Fourth Nearby Week.
DeliveryDatesEnum_V44thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Forty Fifth Nearby Week.
DeliveryDatesEnum_V45thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Forty Sixth Nearby Week.
DeliveryDatesEnum_V46thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Forty Seventh Nearby Week.
DeliveryDatesEnum_V47thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Forty Eighth Nearby Week.
DeliveryDatesEnum_V48thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Forty Ninth Nearby Week.
DeliveryDatesEnum_V49thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Fiftieth Nearby Week.
DeliveryDatesEnum_V50thNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Fifty First Nearby Week.
DeliveryDatesEnum_V51stNearbyWeek :: DeliveryDatesEnum

-- | The Delivery Date of the underlying Commodity shall be during the
--   Fifty Second Nearby Week.
DeliveryDatesEnum_V52ndNearbyWeek :: DeliveryDatesEnum
data DeliveryTypeEnum
DeliveryTypeEnum_Firm :: DeliveryTypeEnum
DeliveryTypeEnum_Interruptible :: DeliveryTypeEnum

-- | The ISDA defined value indicating the severity of a difference.
data DifferenceSeverityEnum
DifferenceSeverityEnum_Warning :: DifferenceSeverityEnum
DifferenceSeverityEnum_Error :: DifferenceSeverityEnum

-- | The ISDA defined value indicating the nature of a difference.
data DifferenceTypeEnum
DifferenceTypeEnum_Value :: DifferenceTypeEnum
DifferenceTypeEnum_Reference :: DifferenceTypeEnum
DifferenceTypeEnum_Structure :: DifferenceTypeEnum
DifferenceTypeEnum_Scheme :: DifferenceTypeEnum

-- | The method of calculating discounted payment amounts
data DiscountingTypeEnum

-- | Per ISDA 2000 Definitions, Section 8.4. Discounting, paragraph (a)
DiscountingTypeEnum_Standard :: DiscountingTypeEnum

-- | Per ISDA 2000 Definitions, Section 8.4. Discounting, paragraph (b)
DiscountingTypeEnum_FRA :: DiscountingTypeEnum

-- | The specification of how disruption fallbacks will be represented.
data DisruptionFallbacksEnum

-- | The Disruption Fallback(s) are determined by reference to the relevant
--   Master Agreement.
DisruptionFallbacksEnum_AsSpecifiedInMasterAgreement :: DisruptionFallbacksEnum

-- | The Disruption Fallback(s) are determined by reference to the relevant
--   Confirmation.
DisruptionFallbacksEnum_AsSpecifiedInConfirmation :: DisruptionFallbacksEnum

-- | Refers to one on the 3 Amounts
data DividendAmountTypeEnum

-- | 100% of the gross cash dividend per Share paid over record date during
--   relevant Dividend Period
DividendAmountTypeEnum_RecordAmount :: DividendAmountTypeEnum

-- | 100% of gross cash dividend per Share paid after the Ex Div date
--   during relevant Dividend Period.
DividendAmountTypeEnum_ExAmount :: DividendAmountTypeEnum

-- | 100% of gross cash dividend per Share paid during relevant Dividend
--   Period.
DividendAmountTypeEnum_PaidAmount :: DividendAmountTypeEnum

-- | The Amount is determined as provided in the relevant Master
--   Confirmation.
DividendAmountTypeEnum_AsSpecifiedInMasterConfirmation :: DividendAmountTypeEnum

-- | Defines how the composition of dividends is to be determined.
data DividendCompositionEnum

-- | The Equity Amount Receiver determines the composition of dividends
--   (subject to conditions).
DividendCompositionEnum_EquityAmountReceiverElection :: DividendCompositionEnum

-- | The Calculation Agent determines the composition of dividends (subject
--   to conditions).
DividendCompositionEnum_CalculationAgentElection :: DividendCompositionEnum

-- | The reference to a dividend date.
data DividendDateReferenceEnum

-- | Date on which a holder of the security is entitled to the dividend.
DividendDateReferenceEnum_ExDate :: DividendDateReferenceEnum

-- | Date on which the dividend will be paid by the issuer.
DividendDateReferenceEnum_DividendPaymentDate :: DividendDateReferenceEnum

-- | In respect of each Dividend Period, number of days offset from the
--   relevant Dividend Valuation Date.
DividendDateReferenceEnum_DividendValuationDate :: DividendDateReferenceEnum

-- | Date on which the dividend will be recorded in the books of the paying
--   agent.
DividendDateReferenceEnum_RecordDate :: DividendDateReferenceEnum

-- | Termination date of the swap.
DividendDateReferenceEnum_TerminationDate :: DividendDateReferenceEnum

-- | Equity payment date of the swap.
DividendDateReferenceEnum_EquityPaymentDate :: DividendDateReferenceEnum

-- | The next payment date of the swap.
DividendDateReferenceEnum_FollowingPaymentDate :: DividendDateReferenceEnum

-- | The dividend date will be specified ad hoc by the parties, typically
--   on the dividend ex-date
DividendDateReferenceEnum_AdHocDate :: DividendDateReferenceEnum

-- | Total of paid dividends, paid on next following Cash Settlement
--   Payment Date, which is immediately following the Dividend Period
--   during which the dividend is paid by the Issuer to the holders of
--   record of a Share.
DividendDateReferenceEnum_CumulativeEquityPaid :: DividendDateReferenceEnum

-- | Total of paid dividends, paid on next following Payment Date, which is
--   immediately following the Dividend Period during which the dividend is
--   paid by the Issuer to the holders of record of a Share.
DividendDateReferenceEnum_CumulativeLiborPaid :: DividendDateReferenceEnum

-- | Total of dividends which go ex, paid on next following Cash Settlement
--   Payment Date, which is immediately following the Dividend Period
--   during which the Shares commence trading ex-dividend on the Exchange
DividendDateReferenceEnum_CumulativeEquityExDiv :: DividendDateReferenceEnum

-- | Total of dividends which go ex, paid on next following Payment Date,
--   which is immediately following the Dividend Period during which the
--   Shares commence trading ex-dividend on the Exchange, or where the date
--   on which the Shares commence trading ex-dividend is a Payment Date,
--   such Payment Date.
DividendDateReferenceEnum_CumulativeLiborExDiv :: DividendDateReferenceEnum

-- | If <a>Dividend Payment Date(s)</a> is specified in the Transaction
--   Supplement as <a>Share Payment</a>, then the Dividend Payment Date in
--   respect of a Dividend Amount shall fall on a date on or before the
--   date that is two (or any other number that is specified in the
--   Transaction Supplement) Currency Business Days following the day on
--   which the Issuer of the Shares pays the relevant dividend to holders
--   of record of the Shares
DividendDateReferenceEnum_SharePayment :: DividendDateReferenceEnum

-- | If <a>Dividend Payment Date(s)</a> is specified in the Transaction
--   Supplement as <a>Cash Settlement Payment Date</a>, then the Dividend
--   Payment Date in respect of a Dividend Amount shall be the Cash
--   Settlement Payment Date relating to the end of the Dividend Period
--   during which the Shares commenced trading <a>ex</a> the relevant
--   dividend on the Exchange
DividendDateReferenceEnum_CashSettlementPaymentDate :: DividendDateReferenceEnum

-- | If <a>Dividend Payment Date(s)</a> is specified in the Transaction
--   Supplement as <a>Floating Amount Payment Date</a>, then the Dividend
--   Payment Date in respect of a Dividend Amount shall be the first
--   Payment Date falling at least one Settlement Cycle after the date that
--   the Shares have commenced trading <a>ex</a> the relevant dividend on
--   the Exchange.
DividendDateReferenceEnum_FloatingAmountPaymentDate :: DividendDateReferenceEnum

-- | If <a>Dividend Payment Date(s)</a> is specified in the Transaction
--   Supplement as <a>Cash Settlement Payment Date – Ex Dividend</a>, then
--   the Dividend Payment Date in respect of a Dividend Amount shall be the
--   Cash Settlement Payment Date relating to the end of the Dividend
--   Period during which the Shares commenced trading “ex” the relevant
--   dividend on the Exchange.
DividendDateReferenceEnum_CashSettlePaymentDateExDiv :: DividendDateReferenceEnum

-- | If <a>Dividend Payment Date(s)</a> is specified in the Transaction
--   Supplement as <a>Cash Settlement Payment Date – Issuer Payment</a>,
--   then the Dividend Payment Date in respect of a Dividend Amount shall
--   be the Cash Settlement Payment Date relating to the end of the
--   Dividend Period during which the issuer pays the relevant dividend to
--   a holder of record provided that in the case where the Equity Amount
--   Payer is the party specified to be the sole Hedging Party and the
--   Hedging Party has not received the Dividend Amount by such date, then
--   the date falling a number of Currency Business Days as specified in
--   the Cash Settlement Payment Date after actual receipt by the Hedging
--   Party of the Received Ex Amount or Paid Ex Amount (as applicable).
DividendDateReferenceEnum_CashSettlePaymentDateIssuerPayment :: DividendDateReferenceEnum

-- | If <a>Dividend Payment Date(s)</a> is specified in the Transaction
--   Supplement as <a>Ex-dividend Payment Date</a>, then the Dividend
--   Payment Date in respect of a Dividend Amount shall be the number of
--   Currency Business Days as provided in the Transaction Supplement
--   following the day on which the Shares commence trading ‘ex’ on the
--   Exchange.
DividendDateReferenceEnum_ExDividendPaymentDate :: DividendDateReferenceEnum

-- | The date on which the receiver of the equity return is entitled to the
--   dividend.
data DividendEntitlementEnum

-- | Dividend entitlement is on the dividend ex-date.
DividendEntitlementEnum_ExDate :: DividendEntitlementEnum

-- | Dividend entitlement is on the dividend record date.
DividendEntitlementEnum_RecordDate :: DividendEntitlementEnum

-- | Defines the First Period or the Second Period, as specified in the
--   2002 ISDA Equity Derivatives Definitions.
data DividendPeriodEnum

-- | <a>First Period</a> per the 2002 ISDA Equity Derivatives Definitions
--   will apply.
DividendPeriodEnum_FirstPeriod :: DividendPeriodEnum

-- | <a>Second Period</a> per the 2002 ISDA Equity Derivatives Definitions
--   will apply.
DividendPeriodEnum_SecondPeriod :: DividendPeriodEnum

-- | A type which permits the Dual Currency strike quote basis to be
--   expressed in terms of the deposit and alternate currencies.
data DualCurrencyStrikeQuoteBasisEnum
DualCurrencyStrikeQuoteBasisEnum_DepositCurrencyPerAlternateCurrency :: DualCurrencyStrikeQuoteBasisEnum
DualCurrencyStrikeQuoteBasisEnum_AlternateCurrencyPerDepositCurrency :: DualCurrencyStrikeQuoteBasisEnum

-- | The type of electricity product.
data ElectricityProductTypeEnum
ElectricityProductTypeEnum_Electricity :: ElectricityProductTypeEnum

-- | Specifies an additional Forward type.
data EquityOptionTypeEnum

-- | A put option gives the holder the right to sell the underlying asset
--   by a certain date for a certain price.
EquityOptionTypeEnum_Put :: EquityOptionTypeEnum

-- | A call option gives the holder the right to buy the underlying asset
--   by a certain date for a certain price.
EquityOptionTypeEnum_Call :: EquityOptionTypeEnum

-- | DEPRECATED value which will be removed in FpML-5-0 onwards A forward
--   contract is an agreement to buy or sell the underlying asset at a
--   certain future time for a certain price.
EquityOptionTypeEnum_Forward :: EquityOptionTypeEnum

-- | The specification of how an OTC option will be exercised.
data ExerciseStyleEnum

-- | Option can be exercised on any date up to the expiry date.
ExerciseStyleEnum_American :: ExerciseStyleEnum

-- | Option can be exercised on specified dates up to the expiry date.
ExerciseStyleEnum_Bermuda :: ExerciseStyleEnum

-- | Option can only be exercised on the expiry date.
ExerciseStyleEnum_European :: ExerciseStyleEnum

-- | Defines the fee type.
data FeeElectionEnum

-- | The product of (i) the Break Fee Rate multiplied by (ii) the Equity
--   Notional Amount corresponding to the Early Termination Portion.
FeeElectionEnum_FlatFee :: FeeElectionEnum

-- | The product of (i) the Break Fee Rate multiplied by (ii) the Equity
--   Notional Amount corresponding to the Early Termination Portion
--   multiplied by (iii) the number of days from the Early Termination Date
--   to the later of the Termination Date or the Cash Settlement Payment
--   Date corresponding to the latest Valuation Date.
FeeElectionEnum_AmortizedFee :: FeeElectionEnum

-- | The product of (i) the Equity Notional Amount corresponding to the
--   Early Termination Portion multiplied by (ii) the Break Funding Rate
--   multiplied by (iii) the number of days from the Early Termination Date
--   to the next scheduled Reset Date divided by (iv) a number equivalent
--   to the denominator of the Day Count Fraction applicable to the
--   Floating Rate Option.
FeeElectionEnum_FundingFee :: FeeElectionEnum

-- | Both Flat Fee and Funding Fee are applicable.
FeeElectionEnum_FlatFeeAndFundingFee :: FeeElectionEnum

-- | Amortized Fee and Funding Fee are applicable.
FeeElectionEnum_AmortizedFeeAndFundingFee :: FeeElectionEnum

-- | The method by which the Flat Rate is calculated for a commodity
--   freight transaction.
data FlatRateEnum

-- | The Flat Rate will be the New Worldwide Tanker Nominal Freight Scale
--   for the Freight Index Route for the Trade Date for the transaction.
FlatRateEnum_Fixed :: FlatRateEnum

-- | The Flat Rate for each Pricing Date will be the New Worldwide Tanker
--   Nominal Freight Scale for the Freight Index Route for the Pricing
--   Date..
FlatRateEnum_Floating :: FlatRateEnum

-- | Specifies the fallback provisions in respect to the applicable Futures
--   Price Valuation.
data FPVFinalPriceElectionFallbackEnum

-- | In respect of the Early Final Valuation Date, the provisions for FPV
--   Close shall apply.
FPVFinalPriceElectionFallbackEnum_FPVClose :: FPVFinalPriceElectionFallbackEnum

-- | In respect of the Early Final Valuation Date, the provisions for FPV
--   Hedge Execution shall apply.
FPVFinalPriceElectionFallbackEnum_FPVHedgeExecution :: FPVFinalPriceElectionFallbackEnum

-- | The method of FRA discounting, if any, that will apply.
data FraDiscountingEnum

-- | <a>FRA Discounting</a> per the ISDA Definitions will apply.
FraDiscountingEnum_ISDA :: FraDiscountingEnum

-- | FRA discounting per the Australian Financial Markets Association
--   (AFMA) OTC Financial Product Conventions will apply.
FraDiscountingEnum_AFMA :: FraDiscountingEnum

-- | No discounting will apply.
FraDiscountingEnum_NONE :: FraDiscountingEnum

-- | The schedule frequency type
data FrequencyTypeEnum

-- | Day is the unit of frequency.
FrequencyTypeEnum_Day :: FrequencyTypeEnum

-- | TBD
FrequencyTypeEnum_Business :: FrequencyTypeEnum

-- | The specification of whether a barrier within an FX OTC option is a
--   knockin or knockout, as well as whether it is a standard barrier or a
--   reverse barrier.
data FxBarrierTypeEnum

-- | Option exists once the barrier is hit. The trigger rate is out-of-the
--   money in relation to the strike rate.
FxBarrierTypeEnum_Knockin :: FxBarrierTypeEnum

-- | Option ceases to exist once the barrier is hit. The trigger rate is
--   out-of the-money in relation to the strike rate.
FxBarrierTypeEnum_Knockout :: FxBarrierTypeEnum

-- | Option exists once the barrier is hit. The trigger rate is in-the
--   money in relation to the strike rate.
FxBarrierTypeEnum_ReverseKnockin :: FxBarrierTypeEnum

-- | Option ceases to exist once the barrier is hit. The trigger rate is
--   in-the money in relation to the strike rate.
FxBarrierTypeEnum_ReverseKnockout :: FxBarrierTypeEnum

-- | The specification of a time period containing values such as Today,
--   Tomorrow etc.
data FxTenorPeriodEnum

-- | Broken/non conventional Tenor Period.
FxTenorPeriodEnum_Broken :: FxTenorPeriodEnum

-- | Today Tenor Period.
FxTenorPeriodEnum_Today :: FxTenorPeriodEnum

-- | Tomorrow Tenor Period.
FxTenorPeriodEnum_Tomorrow :: FxTenorPeriodEnum

-- | Day after Tomorrow Tenor Period.
FxTenorPeriodEnum_TomorrowNext :: FxTenorPeriodEnum

-- | Spot Tenor Period.
FxTenorPeriodEnum_Spot :: FxTenorPeriodEnum

-- | Day after Spot Tenor period.
FxTenorPeriodEnum_SpotNext :: FxTenorPeriodEnum

-- | The type of gas product.
data GasProductTypeEnum
GasProductTypeEnum_NaturalGas :: GasProductTypeEnum

-- | The type of independent amount convention.
data IndependentAmountConventionEnum
IndependentAmountConventionEnum_NettedAfterThreshold :: IndependentAmountConventionEnum
IndependentAmountConventionEnum_NettedBeforeThreshold :: IndependentAmountConventionEnum
IndependentAmountConventionEnum_Segregated :: IndependentAmountConventionEnum

-- | The specification of the consequences of Index Events.
data IndexEventConsequenceEnum

-- | Calculation Agent Adjustment
IndexEventConsequenceEnum_CalculationAgentAdjustment :: IndexEventConsequenceEnum

-- | Negotiated Close Out
IndexEventConsequenceEnum_NegotiatedCloseOut :: IndexEventConsequenceEnum

-- | Cancellation and Payment
IndexEventConsequenceEnum_CancellationAndPayment :: IndexEventConsequenceEnum

-- | Related Exchange Adjustment
IndexEventConsequenceEnum_RelatedExchange :: IndexEventConsequenceEnum

-- | &amp;gt;Defines whether agent bank is making an interest payment based
--   on the lender pro-rata share at the end of the period or based on the
--   lender position throughout the period. Agent Banks decide which way to
--   calculate the interest for a deal.
data InterestCalculationMethodEnum

-- | Agent bank is making an interest payment based on the lender pro-rata
--   share.
InterestCalculationMethodEnum_ProRataShare :: InterestCalculationMethodEnum

-- | Agent bank is making an interest payment based on the lender position
--   throughout the period.
InterestCalculationMethodEnum_FacilityPosition :: InterestCalculationMethodEnum

-- | The type of calculation.
data InterestCalculationTypeEnum
InterestCalculationTypeEnum_Simple :: InterestCalculationTypeEnum
InterestCalculationTypeEnum_Compounding :: InterestCalculationTypeEnum

-- | The type of method.
data InterestMethodEnum
InterestMethodEnum_PhysicalSettlement :: InterestMethodEnum
InterestMethodEnum_RollIn :: InterestMethodEnum

-- | The specification of the interest shortfall cap, applicable to
--   mortgage derivatives.
data InterestShortfallCapEnum
InterestShortfallCapEnum_Fixed :: InterestShortfallCapEnum
InterestShortfallCapEnum_Variable :: InterestShortfallCapEnum

-- | Defines applicable periods for interpolation.
data InterpolationPeriodEnum

-- | Interpolation is applicable to the initial period only.
InterpolationPeriodEnum_Initial :: InterpolationPeriodEnum

-- | Interpolation is applicable to the initial and final periods only.
InterpolationPeriodEnum_InitialAndFinal :: InterpolationPeriodEnum

-- | Interpolation is applicable to the final period only.
InterpolationPeriodEnum_Final :: InterpolationPeriodEnum

-- | Interpolation is applicable to any non-standard period.
InterpolationPeriodEnum_AnyPeriod :: InterpolationPeriodEnum

-- | Used for indicating the length unit in the Resource type.
data LengthUnitEnum
LengthUnitEnum_Pages :: LengthUnitEnum
LengthUnitEnum_TimeUnit :: LengthUnitEnum

-- | The specification of how market disruption events will be represented.
data MarketDisruptionEventsEnum

-- | Market Disruption Events are applicable.
MarketDisruptionEventsEnum_Applicable :: MarketDisruptionEventsEnum

-- | Market Disruption Events are not applicable.
MarketDisruptionEventsEnum_NotApplicable :: MarketDisruptionEventsEnum

-- | The Market Disruption Event(s) are determined by reference to the
--   relevant Master Agreement.
MarketDisruptionEventsEnum_AsSpecifiedInMasterAgreement :: MarketDisruptionEventsEnum

-- | The Market Disruption Event(s) are determined by reference to the
--   relevant Confirmation.
MarketDisruptionEventsEnum_AsSpecifiedInConfirmation :: MarketDisruptionEventsEnum

-- | The type of mark to market convention.
data MarkToMarketConventionEnum
MarkToMarketConventionEnum_Gross :: MarkToMarketConventionEnum
MarkToMarketConventionEnum_Netted :: MarkToMarketConventionEnum

-- | Defines how adjustments will be made to the contract should one or
--   more of the extraordinary events occur.
data MethodOfAdjustmentEnum

-- | The Calculation Agent has the right to adjust the terms of the trade
--   following a corporate action.
MethodOfAdjustmentEnum_CalculationAgent :: MethodOfAdjustmentEnum

-- | The trade will be adjusted in accordance with any adjustment made by
--   the exchange on which options on the underlying are listed.
MethodOfAdjustmentEnum_OptionsExchange :: MethodOfAdjustmentEnum

-- | Defines the consequences of nationalisation, insolvency and delisting
--   events relating to the underlying.
data NationalisationOrInsolvencyOrDelistingEventEnum

-- | The parties may, but are not obliged, to terminate the transaction on
--   mutually acceptable terms and if the terms are not agreed then the
--   transaction continues.
NationalisationOrInsolvencyOrDelistingEventEnum_NegotiatedCloseout :: NationalisationOrInsolvencyOrDelistingEventEnum

-- | The trade is terminated.
NationalisationOrInsolvencyOrDelistingEventEnum_CancellationAndPayment :: NationalisationOrInsolvencyOrDelistingEventEnum

-- | The method of calculating payment obligations when a floating rate is
--   negative (either due to a quoted negative floating rate or by
--   operation of a spread that is subtracted from the floating rate).
data NegativeInterestRateTreatmentEnum

-- | Negative Interest Rate Method. Per 2000 ISDA Definitions, Section 6.4
--   Negative Interest Rates, paragraphs (b) and (c).
NegativeInterestRateTreatmentEnum_NegativeInterestRateMethod :: NegativeInterestRateTreatmentEnum

-- | Zero Interest Rate Method. Per 2000 ISDA Definitions, Section 6.4.
--   Negative Interest Rates, paragraphs (d) and (e).
NegativeInterestRateTreatmentEnum_ZeroInterestRateMethod :: NegativeInterestRateTreatmentEnum

-- | Defines treatment of non-cash dividends.
data NonCashDividendTreatmentEnum

-- | The treatment of any non-cash dividend shall be determined in
--   accordance with the Potential Adjustment Event provisions.
NonCashDividendTreatmentEnum_PotentialAdjustmentEvent :: NonCashDividendTreatmentEnum

-- | Any non-cash dividend shall be treated as a Declared Cash Equivalent
--   Dividend.
NonCashDividendTreatmentEnum_CashEquivalent :: NonCashDividendTreatmentEnum

-- | The conditions that govern the adjustment to the number of units of
--   the equity swap.
data NotionalAdjustmentEnum

-- | The adjustments to the number of units are governed by an execution
--   clause.
NotionalAdjustmentEnum_Execution :: NotionalAdjustmentEnum

-- | The adjustments to the number of units are governed by a portfolio
--   rebalancing clause.
NotionalAdjustmentEnum_PortfolioRebalancing :: NotionalAdjustmentEnum

-- | The adjustments to the number of units are not governed by any
--   specific clause.
NotionalAdjustmentEnum_Standard :: NotionalAdjustmentEnum

-- | Used in both the obligations and deliverable obligations of the credit
--   default swap to represent a class or type of securities which apply.
data ObligationCategoryEnum

-- | ISDA term <a>Payment</a>.
ObligationCategoryEnum_Payment :: ObligationCategoryEnum

-- | ISDA term <a>Borrowed Money</a>.
ObligationCategoryEnum_BorrowedMoney :: ObligationCategoryEnum

-- | ISDA term <a>Reference Obligations Only</a>.
ObligationCategoryEnum_ReferenceObligationsOnly :: ObligationCategoryEnum

-- | ISDA term <a>Bond</a>.
ObligationCategoryEnum_Bond :: ObligationCategoryEnum

-- | ISDA term <a>Loan</a>.
ObligationCategoryEnum_Loan :: ObligationCategoryEnum

-- | ISDA term <a>Bond or Loan</a>.
ObligationCategoryEnum_BondOrLoan :: ObligationCategoryEnum

-- | Specifies the type of the option.
data OptionTypeEnum

-- | A put option gives the holder the right to sell the underlying asset
--   by a certain date for a certain price.
OptionTypeEnum_Put :: OptionTypeEnum

-- | A call option gives the holder the right to buy the underlying asset
--   by a certain date for a certain price.
OptionTypeEnum_Call :: OptionTypeEnum

-- | A <a>payer</a> option: If you buy a <a>payer</a> option you have the
--   right but not the obligation to enter into the underlying swap
--   transaction as the <a>fixed</a> rate/price payer and receive float.
OptionTypeEnum_Payer :: OptionTypeEnum

-- | A receiver option: If you buy a <a>receiver</a> option you have the
--   right but not the obligation to enter into the underlying swap
--   transaction as the <a>fixed</a> rate/price receiver and pay float.
OptionTypeEnum_Receiver :: OptionTypeEnum

-- | A straddle strategy.
OptionTypeEnum_Straddle :: OptionTypeEnum

-- | The specification of an interest rate stream payer or receiver party.
data PayerReceiverEnum

-- | The party identified as the stream payer.
PayerReceiverEnum_Payer :: PayerReceiverEnum

-- | The party identified as the stream receiver.
PayerReceiverEnum_Receiver :: PayerReceiverEnum

-- | The specification of how an FX OTC option with a trigger payout will
--   be paid if the trigger condition is met. The contract will specify
--   whether the payout will occur immediately or on the original value
--   date of the option.
data PayoutEnum

-- | If the trigger is hit, the option payout will not be paid now but will
--   be paid on the value date of the original option.
PayoutEnum_Deferred :: PayoutEnum

-- | If the trigger is hit, the option payout will be paid immediately
--   (i.e., spot from the payout date).
PayoutEnum_Immediate :: PayoutEnum

-- | The specification of whether payments occur relative to the
--   calculation period start or end date, or the reset date.
data PayRelativeToEnum

-- | Payments will occur relative to the first day of each calculation
--   period.
PayRelativeToEnum_CalculationPeriodStartDate :: PayRelativeToEnum

-- | Payments will occur relative to the last day of each calculation
--   period.
PayRelativeToEnum_CalculationPeriodEndDate :: PayRelativeToEnum

-- | Payments will occur relative to the last Pricing Date of each
--   Calculation Period.
PayRelativeToEnum_LastPricingDate :: PayRelativeToEnum

-- | Payments will occur relative to the reset date.
PayRelativeToEnum_ResetDate :: PayRelativeToEnum

-- | Payments will occur relative to the valuation date.
PayRelativeToEnum_ValuationDate :: PayRelativeToEnum

-- | The specification of a time period
data PeriodEnum

-- | Day.
PeriodEnum_D :: PeriodEnum

-- | Week.
PeriodEnum_W :: PeriodEnum

-- | Month.
PeriodEnum_M :: PeriodEnum

-- | Year.
PeriodEnum_Y :: PeriodEnum

-- | The specification of a time period containing additional values such
--   as Term.
data PeriodExtendedEnum

-- | Day.
PeriodExtendedEnum_D :: PeriodExtendedEnum

-- | Week.
PeriodExtendedEnum_W :: PeriodExtendedEnum

-- | Month.
PeriodExtendedEnum_M :: PeriodExtendedEnum

-- | Year.
PeriodExtendedEnum_Y :: PeriodExtendedEnum

-- | Term. The period commencing on the effective date and ending on the
--   termination date. The T period always appears in association with
--   periodMultiplier = 1, and the notation is intended for use in contexts
--   where the interval thus qualified (e.g. accrual period, payment
--   period, reset period, ...) spans the entire term of the trade.
PeriodExtendedEnum_T :: PeriodExtendedEnum

-- | A type used to report how a position originated.
data PositionOriginEnum

-- | The position originated directly from a trade.
PositionOriginEnum_Trade :: PositionOriginEnum

-- | The position originated from an allocation of a block trade.
PositionOriginEnum_Allocation :: PositionOriginEnum

-- | The position originated from a novation or post-trade transfer.
PositionOriginEnum_Novation :: PositionOriginEnum

-- | The position originated from netting or portfolio compression.
PositionOriginEnum_Netting :: PositionOriginEnum

-- | The position originated from an exercise of a physically-settled
--   option.
PositionOriginEnum_Exercise :: PositionOriginEnum
data PositionStatusEnum

-- | The position is open and has been newly added since the last position
--   report.
PositionStatusEnum_New :: PositionStatusEnum

-- | The position is open and was present in the last position report.
PositionStatusEnum_Existing :: PositionStatusEnum

-- | The position is no longer open, for example because it has matured,
--   was assigned, or was terminated.
PositionStatusEnum_Closed :: PositionStatusEnum

-- | The specification of how the premium for an FX OTC option is quoted.
data PremiumQuoteBasisEnum

-- | Premium is quoted as a percentage of the callCurrencyAmount.
PremiumQuoteBasisEnum_PercentageOfCallCurrencyAmount :: PremiumQuoteBasisEnum

-- | Premium is quoted as a percentage of the putCurrencyAmount.
PremiumQuoteBasisEnum_PercentageOfPutCurrencyAmount :: PremiumQuoteBasisEnum

-- | Premium is quoted in the call currency as a percentage of the put
--   currency.
PremiumQuoteBasisEnum_CallCurrencyPerPutCurrency :: PremiumQuoteBasisEnum

-- | Premium is quoted in the put currency as a percentage of the call
--   currency.
PremiumQuoteBasisEnum_PutCurrencyPerCallCurrency :: PremiumQuoteBasisEnum

-- | Premium is quoted as an explicit amount.
PremiumQuoteBasisEnum_Explicit :: PremiumQuoteBasisEnum

-- | Premium Type for Forward Start Equity Option
data PremiumTypeEnum

-- | TODO
PremiumTypeEnum_PrePaid :: PremiumTypeEnum

-- | TODO
PremiumTypeEnum_PostPaid :: PremiumTypeEnum

-- | TODO
PremiumTypeEnum_Variable :: PremiumTypeEnum

-- | TODO
PremiumTypeEnum_Fixed :: PremiumTypeEnum

-- | The mode of expression of a price.
data PriceExpressionEnum

-- | The price is expressed as an absolute amount.&amp;gt;
PriceExpressionEnum_AbsoluteTerms :: PriceExpressionEnum

-- | The price is expressed in percentage of the notional amount.
PriceExpressionEnum_PercentageOfNotional :: PriceExpressionEnum

-- | Specifies whether the option is a call or a put.
data PutCallEnum

-- | A put option gives the holder the right to sell the underlying asset
--   by a certain date for a certain price.
PutCallEnum_Put :: PutCallEnum

-- | A call option gives the holder the right to buy the underlying asset
--   by a certain date for a certain price.
PutCallEnum_Call :: PutCallEnum

-- | The specification of the type of quotation rate to be obtained from
--   each cash settlement reference bank.
data QuotationRateTypeEnum

-- | A bid rate.
QuotationRateTypeEnum_Bid :: QuotationRateTypeEnum

-- | An ask rate.
QuotationRateTypeEnum_Ask :: QuotationRateTypeEnum

-- | A mid-market rate.
QuotationRateTypeEnum_Mid :: QuotationRateTypeEnum

-- | If optional early termination is applicable to a swap transaction, the
--   rate, which may be a bid or ask rate, which would result, if seller is
--   in-the-money, in the higher absolute value of the cash settlement
--   amount, or, is seller is out-of-the-money, in the lower absolute value
--   of the cash settlement amount.
QuotationRateTypeEnum_ExercisingPartyPays :: QuotationRateTypeEnum

-- | The side from which perspective a value is quoted.
data QuotationSideEnum

-- | A value <a>bid</a> by a buyer for an asset, i.e. the value a buyer is
--   willing to pay.
QuotationSideEnum_Bid :: QuotationSideEnum

-- | A value <a>asked</a> by a seller for an asset, i.e. the value at which
--   a seller is willing to sell.
QuotationSideEnum_Ask :: QuotationSideEnum

-- | A value midway between the bid and the ask value.
QuotationSideEnum_Mid :: QuotationSideEnum

-- | Indicates the actual quotation style of of PointsUpFront or
--   TradedSpread that was used to quote this trade.
data QuotationStyleEnum

-- | When quotation style is <a>PointsUpFront</a>, the initialPoints
--   element of the feeLeg should be populated.
QuotationStyleEnum_PointsUpFront :: QuotationStyleEnum

-- | When quotation style is <a>TradedSpread</a>, the marketFixedRate
--   element of the feeLeg should be populated.
QuotationStyleEnum_TradedSpread :: QuotationStyleEnum

-- | How an exchange rate is quoted.
data QuoteBasisEnum

-- | The amount of currency1 for one unit of currency2
QuoteBasisEnum_Currency1PerCurrency2 :: QuoteBasisEnum

-- | The amount of currency2 for one unit of currency1
QuoteBasisEnum_Currency2PerCurrency1 :: QuoteBasisEnum

-- | The specification of methods for converting rates from one basis to
--   another.
data RateTreatmentEnum

-- | Bond Equivalent Yield. Per Annex to the 2000 ISDA Definitions (June
--   2000 Version), Section 7.3. Certain General Definitions Relating to
--   Floating Rate Options, paragraph (g).
RateTreatmentEnum_BondEquivalentYield :: RateTreatmentEnum

-- | Money Market Yield. Per Annex to the 2000 ISDA Definitions (June 2000
--   Version), Section 7.3. Certain General Definitions Relating to
--   Floating Rate Options, paragraph (h).
RateTreatmentEnum_MoneyMarketYield :: RateTreatmentEnum

-- | The contract specifies whether which price must satisfy the boundary
--   condition.
data RealisedVarianceMethodEnum

-- | For a return on day T, the observed price on T-1 must be in range.
RealisedVarianceMethodEnum_Previous :: RealisedVarianceMethodEnum

-- | For a return on day T, the observed price on T must be in range.
RealisedVarianceMethodEnum_Last :: RealisedVarianceMethodEnum

-- | For a return on day T, the observed prices on both T and T-1 must be
--   in range
RealisedVarianceMethodEnum_Both :: RealisedVarianceMethodEnum

-- | The specification of whether resets occur relative to the first or
--   last day of a calculation period.
data ResetRelativeToEnum

-- | Resets will occur relative to the first day of each calculation
--   period.
ResetRelativeToEnum_CalculationPeriodStartDate :: ResetRelativeToEnum

-- | Resets will occur relative to the last day of each calculation period.
ResetRelativeToEnum_CalculationPeriodEndDate :: ResetRelativeToEnum

-- | The type of return associated with the equity swap.
data ReturnTypeEnum

-- | Dividend return swap.
ReturnTypeEnum_Dividend :: ReturnTypeEnum

-- | Price return swap.
ReturnTypeEnum_Price :: ReturnTypeEnum

-- | Total return swap.
ReturnTypeEnum_Total :: ReturnTypeEnum

-- | The convention for determining the sequence of calculation period end
--   dates. It is used in conjunction with a specified frequency and the
--   regular period start date of a calculation period, e.g. semi-annual
--   IMM roll dates.
data RollConventionEnum

-- | Rolls on month end dates irrespective of the length of the month and
--   the previous roll day.
RollConventionEnum_EOM :: RollConventionEnum

-- | Roll days are determined according to the FRN Convention or Eurodollar
--   Convention as described in ISDA 2000 definitions.
RollConventionEnum_FRN :: RollConventionEnum

-- | IMM Settlement Dates. The third Wednesday of the (delivery) month.
RollConventionEnum_IMM :: RollConventionEnum

-- | The last trading day/expiration day of the Canadian Derivatives
--   Exchange (Bourse de Montreal Inc) Three-month Canadian Bankers'
--   Acceptance Futures (Ticker Symbol BAX). The second London banking day
--   prior to the third Wednesday of the contract month. If the determined
--   day is a Bourse or bank holiday in Montreal or Toronto, the last
--   trading day shall be the previous bank business day. Per Canadian
--   Derivatives Exchange BAX contract specification.
RollConventionEnum_IMMCAD :: RollConventionEnum

-- | The last trading day of the Sydney Futures Exchange 90 Day Bank
--   Accepted Bills Futures contract (see
--   http:<i></i>www.sfe.com.au<i>content</i>sfe<i>trading</i>con_specs.pdf).
--   One Sydney business day preceding the second Friday of the relevant
--   settlement month.
RollConventionEnum_IMMAUD :: RollConventionEnum

-- | The last trading day of the Sydney Futures Exchange NZ 90 Day Bank
--   Bill Futures contract (see
--   http:<i></i>www.sfe.com.au<i>content</i>sfe<i>trading</i>con_specs.pdf).
--   The first Wednesday after the ninth day of the relevant settlement
--   month.
RollConventionEnum_IMMNZD :: RollConventionEnum

-- | Sydney Futures Exchange 90-Day Bank Accepted Bill Futures Settlement
--   Dates. The second Friday of the (delivery) month.
RollConventionEnum_SFE :: RollConventionEnum

-- | The roll convention is not required. For example, in the case of a
--   daily calculation frequency.
RollConventionEnum_NONE :: RollConventionEnum

-- | 13-week and 26-week U.S. Treasury Bill Auction Dates. Each Monday
--   except for U.S. (New York) holidays when it will occur on a Tuesday.
RollConventionEnum_TBILL :: RollConventionEnum

-- | Rolls on the 1st day of the month.
RollConventionEnum_V1 :: RollConventionEnum

-- | Rolls on the 2nd day of the month.
RollConventionEnum_V2 :: RollConventionEnum

-- | Rolls on the 3rd day of the month.
RollConventionEnum_V3 :: RollConventionEnum

-- | Rolls on the 4th day of the month.
RollConventionEnum_V4 :: RollConventionEnum

-- | Rolls on the 4th day of the month.
RollConventionEnum_V5 :: RollConventionEnum

-- | Rolls on the 6th day of the month.
RollConventionEnum_V6 :: RollConventionEnum

-- | Rolls on the 7th day of the month.
RollConventionEnum_V7 :: RollConventionEnum

-- | Rolls on the 8th day of the month.
RollConventionEnum_V8 :: RollConventionEnum

-- | Rolls on the 9th day of the month.
RollConventionEnum_V9 :: RollConventionEnum

-- | Rolls on the 10th day of the month.
RollConventionEnum_V10 :: RollConventionEnum

-- | Rolls on the 11th day of the month.
RollConventionEnum_V11 :: RollConventionEnum

-- | Rolls on the 12th day of the month.
RollConventionEnum_V12 :: RollConventionEnum

-- | Rolls on the 13th day of the month.
RollConventionEnum_V13 :: RollConventionEnum

-- | Rolls on the 14th day of the month.
RollConventionEnum_V14 :: RollConventionEnum

-- | Rolls on the 15th day of the month.
RollConventionEnum_V15 :: RollConventionEnum

-- | Rolls on the 16th day of the month.
RollConventionEnum_V16 :: RollConventionEnum

-- | Rolls on the 17th day of the month.
RollConventionEnum_V17 :: RollConventionEnum

-- | Rolls on the 18th day of the month.
RollConventionEnum_V18 :: RollConventionEnum

-- | Rolls on the 19th day of the month.
RollConventionEnum_V19 :: RollConventionEnum

-- | Rolls on the 20th day of the month.
RollConventionEnum_V20 :: RollConventionEnum

-- | Rolls on the 21st day of the month.
RollConventionEnum_V21 :: RollConventionEnum

-- | Rolls on the 22nd day of the month.
RollConventionEnum_V22 :: RollConventionEnum

-- | Rolls on the 23rd day of the month.
RollConventionEnum_V23 :: RollConventionEnum

-- | Rolls on the 24th day of the month.
RollConventionEnum_V24 :: RollConventionEnum

-- | Rolls on the 25th day of the month.
RollConventionEnum_V25 :: RollConventionEnum

-- | Rolls on the 26th day of the month.
RollConventionEnum_V26 :: RollConventionEnum

-- | Rolls on the 27th day of the month.
RollConventionEnum_V27 :: RollConventionEnum

-- | Rolls on the 28th day of the month.
RollConventionEnum_V28 :: RollConventionEnum

-- | Rolls on the 29th day of the month.
RollConventionEnum_V29 :: RollConventionEnum

-- | Rolls on the 30th day of the month.
RollConventionEnum_V30 :: RollConventionEnum

-- | Rolling weekly on a Monday.
RollConventionEnum_MON :: RollConventionEnum

-- | Rolling weekly on a Tuesday.
RollConventionEnum_TUE :: RollConventionEnum

-- | Rolling weekly on a Wednesday.
RollConventionEnum_WED :: RollConventionEnum

-- | Rolling weekly on a Thursday.
RollConventionEnum_THU :: RollConventionEnum

-- | Rolling weekly on a Friday.
RollConventionEnum_FRI :: RollConventionEnum

-- | Rolling weekly on a Saturday.
RollConventionEnum_SAT :: RollConventionEnum

-- | Rolling weekly on a Sunday.
RollConventionEnum_SUN :: RollConventionEnum

-- | The method of rounding a fractional number.
data RoundingDirectionEnum

-- | A fractional number will be rounded up to the specified number of
--   decimal places (the precision). For example, 5.21 and 5.25 rounded up
--   to 1 decimal place are 5.3 and 5.3 respectively.
RoundingDirectionEnum_Up :: RoundingDirectionEnum

-- | A fractional number will be rounded down to the specified number of
--   decimal places (the precision). For example, 5.29 and 5.25 rounded
--   down to 1 decimal place are 5.2 and 5.2 respectively.
RoundingDirectionEnum_Down :: RoundingDirectionEnum

-- | A fractional number will be rounded either up or down to the specified
--   number of decimal places (the precision) depending on its value. For
--   example, 5.24 would be rounded down to 5.2 and 5.25 would be rounded
--   up to 5.3 if a precision of 1 decimal place were specified.
RoundingDirectionEnum_Nearest :: RoundingDirectionEnum

-- | Defines the Settlement Period Duration for an Electricity Transaction.
data SettlementPeriodDurationEnum

-- | Two-hourly duration applies.
SettlementPeriodDurationEnum_V2Hours :: SettlementPeriodDurationEnum

-- | Hourly duration applies.
SettlementPeriodDurationEnum_V1Hour :: SettlementPeriodDurationEnum

-- | Half-hourly duration applies.
SettlementPeriodDurationEnum_V30Minutes :: SettlementPeriodDurationEnum

-- | Quarter-hourly duration applies.
SettlementPeriodDurationEnum_V15Minutes :: SettlementPeriodDurationEnum

-- | Shows how the transaction is to be settled when it is exercised.
data SettlementTypeEnum

-- | The intrinsic value of the option will be delivered by way of a cash
--   settlement amount determined, (i) by reference to the differential
--   between the strike price and the settlement price; or (ii) in
--   accordance with a bilateral agreement between the parties
SettlementTypeEnum_Cash :: SettlementTypeEnum

-- | The securities underlying the transaction will be delivered by (i) in
--   the case of a call, the seller to the buyer, or (ii) in the case of a
--   put, the buyer to the seller versus a settlement amount equivalent to
--   the strike price per share
SettlementTypeEnum_Physical :: SettlementTypeEnum

-- | Allow Election of either Cash or Physical settlement
SettlementTypeEnum_Election :: SettlementTypeEnum

-- | Defines the consequences of extraordinary events relating to the
--   underlying.
data ShareExtraordinaryEventEnum

-- | The trade continues such that the underlying now consists of the New
--   Shares and/or the Other Consideration, if any, and the proceeds of any
--   redemption, if any, that the holder of the underlying Shares would
--   have been entitled to.
ShareExtraordinaryEventEnum_AlternativeObligation :: ShareExtraordinaryEventEnum

-- | The trade is cancelled and a cancellation fee will be paid by one
--   party to the other.
ShareExtraordinaryEventEnum_CancellationAndPayment :: ShareExtraordinaryEventEnum

-- | The trade will be adjusted by the Calculation Agent in accordance with
--   the adjustments made by any exchange on which options on the
--   underlying are listed.
ShareExtraordinaryEventEnum_OptionsExchange :: ShareExtraordinaryEventEnum

-- | The Calculation Agent will determine what adjustment is required to
--   offset any change to the economics of the trade. If the Calculation
--   Agent cannot achieve this, the trade goes to Cancellation and Payment
--   with the Calculation Agent deciding on the value of the cancellation
--   fee. Adjustments may not be made to account solely for changes in
--   volatility, expected dividends, stock loan rate or liquidity.
ShareExtraordinaryEventEnum_CalculationAgent :: ShareExtraordinaryEventEnum

-- | The Calculation Agent will determine what adjustment is required to
--   offset any change to the economics of the trade. If the Calculation
--   Agent cannot achieve this, the trade goes to Cancellation and Payment
--   with the Calculation Agent deciding on the value of the cancellation
--   fee. Adjustments to account for changes in volatility, expected
--   dividends, stock loan rate or liquidity are allowed.
ShareExtraordinaryEventEnum_ModifiedCalculationAgent :: ShareExtraordinaryEventEnum

-- | Applies to Basket Transactions. The portion of the Basket made up by
--   the affected Share will be cancelled and a cancellation fee will be
--   paid from one party to the other. The remainder of the trade
--   continues.
ShareExtraordinaryEventEnum_PartialCancellationAndPayment :: ShareExtraordinaryEventEnum

-- | If this is a Share-for-Combined merger event (Shares are replaced with
--   New Shares and Other Consideration), then different treatment can be
--   applied to each component if the parties have specified this.
ShareExtraordinaryEventEnum_Component :: ShareExtraordinaryEventEnum

-- | The Specified Price in respect of a Transaction and a Commodity
--   Reference Price.
data SpecifiedPriceEnum

-- | The Specified Price shall be the Afternoon fixing reported in or by
--   the relevant Price Source as specified in the relevant Confirmation.
SpecifiedPriceEnum_Afternoon :: SpecifiedPriceEnum

-- | The Specified Price shall be the Ask price reported in or by the
--   relevant Price Source as specified in the relevant Confirmation.
SpecifiedPriceEnum_Ask :: SpecifiedPriceEnum

-- | The Specified Price shall be the Bid price reported in or by the
--   relevant Price Source as specified in the relevant Confirmation.
SpecifiedPriceEnum_Bid :: SpecifiedPriceEnum

-- | The Specified Price shall be the Closing price reported in or by the
--   relevant Price Source as specified in the relevant Confirmation.
SpecifiedPriceEnum_Closing :: SpecifiedPriceEnum

-- | The Specified Price shall be the High price reported in or by the
--   relevant Price Source as specified in the relevant Confirmation.
SpecifiedPriceEnum_High :: SpecifiedPriceEnum

-- | The Specified Price shall be the Index price reported in or by the
--   relevant Price Source as specified in the relevant Confirmation.
SpecifiedPriceEnum_Index :: SpecifiedPriceEnum

-- | The Specified Price shall be the Average of the Bid and Ask prices
--   reported in or by the relevant Price Source as specified in the
--   relevant Confirmation.
SpecifiedPriceEnum_MeanOfBidAndAsk :: SpecifiedPriceEnum

-- | The Specified Price shall be the Low price reported in or by the
--   relevant Price Source as specified in the relevant Confirmation.
SpecifiedPriceEnum_Low :: SpecifiedPriceEnum

-- | The Specified Price shall be the Average of the High and Low prices
--   reported in or by the relevant Price Source as specified in the
--   relevant Confirmation.
SpecifiedPriceEnum_MeanOfHighAndLow :: SpecifiedPriceEnum

-- | The Specified Price shall be the Morning fixing reported in or by the
--   relevant Price Source as specified in the relevant Confirmation.
SpecifiedPriceEnum_Morning :: SpecifiedPriceEnum

-- | The Specified Price shall be the Official price reported in or by the
--   relevant Price Source as specified in the relevant Confirmation.
SpecifiedPriceEnum_Official :: SpecifiedPriceEnum

-- | The Specified Price shall be the Opening price reported in or by the
--   relevant Price Source as specified in the relevant Confirmation.
SpecifiedPriceEnum_Opening :: SpecifiedPriceEnum

-- | The Specified Price shall be the Official Settlement Price reported in
--   or by the relevant Price Source as specified in the relevant
--   Confirmation.
SpecifiedPriceEnum_OSP :: SpecifiedPriceEnum

-- | The Specified Price shall be the Settlement price reported in or by
--   the relevant Price Source as specified in the relevant Confirmation.
SpecifiedPriceEnum_Settlement :: SpecifiedPriceEnum

-- | The Specified Price shall be the Spot price reported in or by the
--   relevant Price Source as specified in the relevant Confirmation.
SpecifiedPriceEnum_Spot :: SpecifiedPriceEnum

-- | The Specified Price shall be the Average of the Midpoint of prices
--   reported in or by the relevant Price Source as specified in the
--   relevant Confirmation.
SpecifiedPriceEnum_Midpoint :: SpecifiedPriceEnum

-- | The Specified Price shall be the volume Weighted Average of prices
--   effective on the Pricing Date reported in or by the relevant Price
--   Source as specified.
SpecifiedPriceEnum_WeightedAverage :: SpecifiedPriceEnum

-- | The code specification of whether a trade is settling using standard
--   settlement instructions as well as whether it is a candidate for
--   settlement netting.
data StandardSettlementStyleEnum

-- | This trade will settle using standard pre-determined funds settlement
--   instructions.
StandardSettlementStyleEnum_Standard :: StandardSettlementStyleEnum

-- | This trade is a candidate for settlement netting.
StandardSettlementStyleEnum_Net :: StandardSettlementStyleEnum

-- | This trade will settle using standard pre-determined funds settlement
--   instructions and is a candidate for settlement netting.
StandardSettlementStyleEnum_StandardAndNet :: StandardSettlementStyleEnum

-- | The specification of whether a percentage rate change, used to
--   calculate a change in notional outstanding, is expressed as a
--   percentage of the initial notional amount or the previously
--   outstanding notional amount.
data StepRelativeToEnum

-- | Change in notional to be applied is calculated by multiplying the
--   percentage rate by the initial notional amount.
StepRelativeToEnum_Initial :: StepRelativeToEnum

-- | Change in notional to be applied is calculated by multiplying the
--   percentage rate by the previously outstanding notional amount.
StepRelativeToEnum_Previous :: StepRelativeToEnum

-- | Element to define how to deal with a none standard calculation period
--   within a swap stream.
data StubPeriodTypeEnum

-- | If there is a non regular period remaining it is left shorter than the
--   streams calculation period frequency and placed at the start of the
--   stream
StubPeriodTypeEnum_ShortInitial :: StubPeriodTypeEnum

-- | If there is a non regular period remaining it is left shorter than the
--   streams calculation period frequency and placed at the end of the
--   stream
StubPeriodTypeEnum_ShortFinal :: StubPeriodTypeEnum

-- | If there is a non regular period remaining it is placed at the start
--   of the stream and combined with the adjacent calculation period to
--   give a long first calculation period
StubPeriodTypeEnum_LongInitial :: StubPeriodTypeEnum

-- | If there is a non regular period remaining it is placed at the end of
--   the stream and combined with the adjacent calculation period to give a
--   long last calculation period
StubPeriodTypeEnum_LongFinal :: StubPeriodTypeEnum

-- | The specification of how an FX OTC option strike price is quoted.
data StrikeQuoteBasisEnum

-- | The strike price is an amount of putCurrency per one unit of
--   callCurrency.
StrikeQuoteBasisEnum_PutCurrencyPerCallCurrency :: StrikeQuoteBasisEnum

-- | The strike price is an amount of callCurrency per one unit of
--   putCurrency.
StrikeQuoteBasisEnum_CallCurrencyPerPutCurrency :: StrikeQuoteBasisEnum

-- | The type of threshold.
data ThresholdTypeEnum
ThresholdTypeEnum_Secured :: ThresholdTypeEnum
ThresholdTypeEnum_Unsecured :: ThresholdTypeEnum

-- | Defines points in the day when equity option exercise and valuation
--   can occur.
data TimeTypeEnum

-- | The official closing time of the exchange on the valuation date.
TimeTypeEnum_Close :: TimeTypeEnum

-- | The official opening time of the exchange on the valuation date.
TimeTypeEnum_Open :: TimeTypeEnum

-- | The time at which the official settlement price is determined.
TimeTypeEnum_OSP :: TimeTypeEnum

-- | The time specified in the element equityExpirationTime or
--   valuationTime (as appropriate)
TimeTypeEnum_SpecificTime :: TimeTypeEnum

-- | The time at which the official settlement price (following the auction
--   by the exchange) is determined by the exchange.
TimeTypeEnum_XETRA :: TimeTypeEnum

-- | The official closing time of the derivatives exchange on which a
--   derivative contract is listed on that security underlyer.
TimeTypeEnum_DerivativesClose :: TimeTypeEnum

-- | The time is determined as provided in the relevant Master
--   Confirmation.
TimeTypeEnum_AsSpecifiedInMasterConfirmation :: TimeTypeEnum

-- | The time of day which would be considered for valuing the knock event.
data TriggerTimeTypeEnum

-- | The close of trading on a day would be considered for valuation.
TriggerTimeTypeEnum_Closing :: TriggerTimeTypeEnum

-- | At any time during the Knock Determination period (continuous
--   barrier).
TriggerTimeTypeEnum_Anytime :: TriggerTimeTypeEnum

-- | The specification of whether an option would trigger or expire
--   depending upon whether the spot rate is above or below the barrier
--   rate.
data TriggerTypeEnum

-- | The underlyer price must be equal to or less than the Trigger level.
TriggerTypeEnum_EqualOrLess :: TriggerTypeEnum

-- | The underlyer price must be equal to or greater than the Trigger
--   level.
TriggerTypeEnum_EqualOrGreater :: TriggerTypeEnum

-- | The underlyer price must be equal to the Trigger level.
TriggerTypeEnum_Equal :: TriggerTypeEnum

-- | The underlyer price must be less than the Trigger level.
TriggerTypeEnum_Less :: TriggerTypeEnum

-- | The underlyer price must be greater than the Trigger level.
TriggerTypeEnum_Greater :: TriggerTypeEnum

-- | The specification of, for American-style digitals, whether the trigger
--   level must be touched or not touched.
data TouchConditionEnum

-- | The spot rate must have touched the predetermined trigger rate at any
--   time over the life of the option for the payout to occur.
TouchConditionEnum_Touch :: TouchConditionEnum

-- | The spot rate has not touched the predetermined trigger rate at any
--   time over the life of the option for the payout to occur.
TouchConditionEnum_Notouch :: TouchConditionEnum

-- | The specification of whether a payout will occur on an option
--   depending upon whether the spot rate is above or below the trigger
--   rate.
data TriggerConditionEnum

-- | The spot rate must be greater than or equal to the trigger rate.
TriggerConditionEnum_Above :: TriggerConditionEnum

-- | The spot rate must be less than or equal to the trigger rate.
TriggerConditionEnum_Below :: TriggerConditionEnum

-- | The ISDA defined methodology for determining the final price of the
--   reference obligation for purposes of cash settlement.
data ValuationMethodEnum
ValuationMethodEnum_Market :: ValuationMethodEnum
ValuationMethodEnum_Highest :: ValuationMethodEnum
ValuationMethodEnum_AverageMarket :: ValuationMethodEnum
ValuationMethodEnum_AverageHighest :: ValuationMethodEnum
ValuationMethodEnum_BlendedMarket :: ValuationMethodEnum
ValuationMethodEnum_BlendedHighest :: ValuationMethodEnum
ValuationMethodEnum_AverageBlendedMarket :: ValuationMethodEnum
ValuationMethodEnum_AverageBlendedHighest :: ValuationMethodEnum

-- | The specification of a weekly roll day.
data WeeklyRollConventionEnum

-- | Monday
WeeklyRollConventionEnum_MON :: WeeklyRollConventionEnum

-- | Tuesday
WeeklyRollConventionEnum_TUE :: WeeklyRollConventionEnum

-- | Wednesday
WeeklyRollConventionEnum_WED :: WeeklyRollConventionEnum

-- | Thursday
WeeklyRollConventionEnum_THU :: WeeklyRollConventionEnum

-- | Friday
WeeklyRollConventionEnum_FRI :: WeeklyRollConventionEnum

-- | Saturday
WeeklyRollConventionEnum_SAT :: WeeklyRollConventionEnum

-- | Sunday
WeeklyRollConventionEnum_SUN :: WeeklyRollConventionEnum

-- | 13-week and 26-week U.S. Treasury Bill Auction Dates. Each Monday
--   except for U.S. (New York) holidays when it will occur on a Tuesday.
WeeklyRollConventionEnum_TBILL :: WeeklyRollConventionEnum

-- | The type of telephone number used to reach a contact.
data TelephoneTypeEnum

-- | A number used primarily for work-related calls. Includes home office
--   numbers used primarily for work purposes.
TelephoneTypeEnum_Work :: TelephoneTypeEnum

-- | A number on a mobile telephone or pager that is often or usually used
--   for work-related calls. This type of number can be used for urgent
--   work related business when a work number is not sufficient to contact
--   the person or firm.
TelephoneTypeEnum_Mobile :: TelephoneTypeEnum

-- | A number used primarily for work-related facsimile transmissions.
TelephoneTypeEnum_Fax :: TelephoneTypeEnum

-- | A number used primarily for nonwork-related calls. (Normally this type
--   of number would be used only as an emergency backup number, not as a
--   regular course of business).
TelephoneTypeEnum_Personal :: TelephoneTypeEnum
instance Eq AveragingInOutEnum
instance Show AveragingInOutEnum
instance Enum AveragingInOutEnum
instance Eq AveragingMethodEnum
instance Show AveragingMethodEnum
instance Enum AveragingMethodEnum
instance Eq BreakageCostEnum
instance Show BreakageCostEnum
instance Enum BreakageCostEnum
instance Eq BullionTypeEnum
instance Show BullionTypeEnum
instance Enum BullionTypeEnum
instance Eq BusinessDayConventionEnum
instance Show BusinessDayConventionEnum
instance Enum BusinessDayConventionEnum
instance Eq CashPhysicalEnum
instance Show CashPhysicalEnum
instance Enum CashPhysicalEnum
instance Eq CalculationAgentPartyEnum
instance Show CalculationAgentPartyEnum
instance Enum CalculationAgentPartyEnum
instance Eq CommissionDenominationEnum
instance Show CommissionDenominationEnum
instance Enum CommissionDenominationEnum
instance Eq CommodityBullionSettlementDisruptionEnum
instance Show CommodityBullionSettlementDisruptionEnum
instance Enum CommodityBullionSettlementDisruptionEnum
instance Eq CommodityDayTypeEnum
instance Show CommodityDayTypeEnum
instance Enum CommodityDayTypeEnum
instance Eq CompoundingMethodEnum
instance Show CompoundingMethodEnum
instance Enum CompoundingMethodEnum
instance Eq DayOfWeekEnum
instance Show DayOfWeekEnum
instance Enum DayOfWeekEnum
instance Eq DayTypeEnum
instance Show DayTypeEnum
instance Enum DayTypeEnum
instance Eq DealtCurrencyEnum
instance Show DealtCurrencyEnum
instance Enum DealtCurrencyEnum
instance Eq DeliveryDatesEnum
instance Show DeliveryDatesEnum
instance Enum DeliveryDatesEnum
instance Eq DeliveryTypeEnum
instance Show DeliveryTypeEnum
instance Enum DeliveryTypeEnum
instance Eq DifferenceSeverityEnum
instance Show DifferenceSeverityEnum
instance Enum DifferenceSeverityEnum
instance Eq DifferenceTypeEnum
instance Show DifferenceTypeEnum
instance Enum DifferenceTypeEnum
instance Eq DiscountingTypeEnum
instance Show DiscountingTypeEnum
instance Enum DiscountingTypeEnum
instance Eq DisruptionFallbacksEnum
instance Show DisruptionFallbacksEnum
instance Enum DisruptionFallbacksEnum
instance Eq DividendAmountTypeEnum
instance Show DividendAmountTypeEnum
instance Enum DividendAmountTypeEnum
instance Eq DividendCompositionEnum
instance Show DividendCompositionEnum
instance Enum DividendCompositionEnum
instance Eq DividendDateReferenceEnum
instance Show DividendDateReferenceEnum
instance Enum DividendDateReferenceEnum
instance Eq DividendEntitlementEnum
instance Show DividendEntitlementEnum
instance Enum DividendEntitlementEnum
instance Eq DividendPeriodEnum
instance Show DividendPeriodEnum
instance Enum DividendPeriodEnum
instance Eq DualCurrencyStrikeQuoteBasisEnum
instance Show DualCurrencyStrikeQuoteBasisEnum
instance Enum DualCurrencyStrikeQuoteBasisEnum
instance Eq ElectricityProductTypeEnum
instance Show ElectricityProductTypeEnum
instance Enum ElectricityProductTypeEnum
instance Eq EquityOptionTypeEnum
instance Show EquityOptionTypeEnum
instance Enum EquityOptionTypeEnum
instance Eq ExerciseStyleEnum
instance Show ExerciseStyleEnum
instance Enum ExerciseStyleEnum
instance Eq FeeElectionEnum
instance Show FeeElectionEnum
instance Enum FeeElectionEnum
instance Eq FlatRateEnum
instance Show FlatRateEnum
instance Enum FlatRateEnum
instance Eq FPVFinalPriceElectionFallbackEnum
instance Show FPVFinalPriceElectionFallbackEnum
instance Enum FPVFinalPriceElectionFallbackEnum
instance Eq FraDiscountingEnum
instance Show FraDiscountingEnum
instance Enum FraDiscountingEnum
instance Eq FrequencyTypeEnum
instance Show FrequencyTypeEnum
instance Enum FrequencyTypeEnum
instance Eq FxBarrierTypeEnum
instance Show FxBarrierTypeEnum
instance Enum FxBarrierTypeEnum
instance Eq FxTenorPeriodEnum
instance Show FxTenorPeriodEnum
instance Enum FxTenorPeriodEnum
instance Eq GasProductTypeEnum
instance Show GasProductTypeEnum
instance Enum GasProductTypeEnum
instance Eq IndependentAmountConventionEnum
instance Show IndependentAmountConventionEnum
instance Enum IndependentAmountConventionEnum
instance Eq IndexEventConsequenceEnum
instance Show IndexEventConsequenceEnum
instance Enum IndexEventConsequenceEnum
instance Eq InterestCalculationMethodEnum
instance Show InterestCalculationMethodEnum
instance Enum InterestCalculationMethodEnum
instance Eq InterestCalculationTypeEnum
instance Show InterestCalculationTypeEnum
instance Enum InterestCalculationTypeEnum
instance Eq InterestMethodEnum
instance Show InterestMethodEnum
instance Enum InterestMethodEnum
instance Eq InterestShortfallCapEnum
instance Show InterestShortfallCapEnum
instance Enum InterestShortfallCapEnum
instance Eq InterpolationPeriodEnum
instance Show InterpolationPeriodEnum
instance Enum InterpolationPeriodEnum
instance Eq LengthUnitEnum
instance Show LengthUnitEnum
instance Enum LengthUnitEnum
instance Eq MarketDisruptionEventsEnum
instance Show MarketDisruptionEventsEnum
instance Enum MarketDisruptionEventsEnum
instance Eq MarkToMarketConventionEnum
instance Show MarkToMarketConventionEnum
instance Enum MarkToMarketConventionEnum
instance Eq MethodOfAdjustmentEnum
instance Show MethodOfAdjustmentEnum
instance Enum MethodOfAdjustmentEnum
instance Eq NationalisationOrInsolvencyOrDelistingEventEnum
instance Show NationalisationOrInsolvencyOrDelistingEventEnum
instance Enum NationalisationOrInsolvencyOrDelistingEventEnum
instance Eq NegativeInterestRateTreatmentEnum
instance Show NegativeInterestRateTreatmentEnum
instance Enum NegativeInterestRateTreatmentEnum
instance Eq NonCashDividendTreatmentEnum
instance Show NonCashDividendTreatmentEnum
instance Enum NonCashDividendTreatmentEnum
instance Eq NotionalAdjustmentEnum
instance Show NotionalAdjustmentEnum
instance Enum NotionalAdjustmentEnum
instance Eq ObligationCategoryEnum
instance Show ObligationCategoryEnum
instance Enum ObligationCategoryEnum
instance Eq OptionTypeEnum
instance Show OptionTypeEnum
instance Enum OptionTypeEnum
instance Eq PayerReceiverEnum
instance Show PayerReceiverEnum
instance Enum PayerReceiverEnum
instance Eq PayoutEnum
instance Show PayoutEnum
instance Enum PayoutEnum
instance Eq PayRelativeToEnum
instance Show PayRelativeToEnum
instance Enum PayRelativeToEnum
instance Eq PeriodEnum
instance Show PeriodEnum
instance Enum PeriodEnum
instance Eq PeriodExtendedEnum
instance Show PeriodExtendedEnum
instance Enum PeriodExtendedEnum
instance Eq PositionOriginEnum
instance Show PositionOriginEnum
instance Enum PositionOriginEnum
instance Eq PositionStatusEnum
instance Show PositionStatusEnum
instance Enum PositionStatusEnum
instance Eq PremiumQuoteBasisEnum
instance Show PremiumQuoteBasisEnum
instance Enum PremiumQuoteBasisEnum
instance Eq PremiumTypeEnum
instance Show PremiumTypeEnum
instance Enum PremiumTypeEnum
instance Eq PriceExpressionEnum
instance Show PriceExpressionEnum
instance Enum PriceExpressionEnum
instance Eq PutCallEnum
instance Show PutCallEnum
instance Enum PutCallEnum
instance Eq QuotationRateTypeEnum
instance Show QuotationRateTypeEnum
instance Enum QuotationRateTypeEnum
instance Eq QuotationSideEnum
instance Show QuotationSideEnum
instance Enum QuotationSideEnum
instance Eq QuotationStyleEnum
instance Show QuotationStyleEnum
instance Enum QuotationStyleEnum
instance Eq QuoteBasisEnum
instance Show QuoteBasisEnum
instance Enum QuoteBasisEnum
instance Eq RateTreatmentEnum
instance Show RateTreatmentEnum
instance Enum RateTreatmentEnum
instance Eq RealisedVarianceMethodEnum
instance Show RealisedVarianceMethodEnum
instance Enum RealisedVarianceMethodEnum
instance Eq ResetRelativeToEnum
instance Show ResetRelativeToEnum
instance Enum ResetRelativeToEnum
instance Eq ReturnTypeEnum
instance Show ReturnTypeEnum
instance Enum ReturnTypeEnum
instance Eq RollConventionEnum
instance Show RollConventionEnum
instance Enum RollConventionEnum
instance Eq RoundingDirectionEnum
instance Show RoundingDirectionEnum
instance Enum RoundingDirectionEnum
instance Eq SettlementPeriodDurationEnum
instance Show SettlementPeriodDurationEnum
instance Enum SettlementPeriodDurationEnum
instance Eq SettlementTypeEnum
instance Show SettlementTypeEnum
instance Enum SettlementTypeEnum
instance Eq ShareExtraordinaryEventEnum
instance Show ShareExtraordinaryEventEnum
instance Enum ShareExtraordinaryEventEnum
instance Eq SpecifiedPriceEnum
instance Show SpecifiedPriceEnum
instance Enum SpecifiedPriceEnum
instance Eq StandardSettlementStyleEnum
instance Show StandardSettlementStyleEnum
instance Enum StandardSettlementStyleEnum
instance Eq StepRelativeToEnum
instance Show StepRelativeToEnum
instance Enum StepRelativeToEnum
instance Eq StubPeriodTypeEnum
instance Show StubPeriodTypeEnum
instance Enum StubPeriodTypeEnum
instance Eq StrikeQuoteBasisEnum
instance Show StrikeQuoteBasisEnum
instance Enum StrikeQuoteBasisEnum
instance Eq ThresholdTypeEnum
instance Show ThresholdTypeEnum
instance Enum ThresholdTypeEnum
instance Eq TimeTypeEnum
instance Show TimeTypeEnum
instance Enum TimeTypeEnum
instance Eq TriggerTimeTypeEnum
instance Show TriggerTimeTypeEnum
instance Enum TriggerTimeTypeEnum
instance Eq TriggerTypeEnum
instance Show TriggerTypeEnum
instance Enum TriggerTypeEnum
instance Eq TouchConditionEnum
instance Show TouchConditionEnum
instance Enum TouchConditionEnum
instance Eq TriggerConditionEnum
instance Show TriggerConditionEnum
instance Enum TriggerConditionEnum
instance Eq ValuationMethodEnum
instance Show ValuationMethodEnum
instance Enum ValuationMethodEnum
instance Eq WeeklyRollConventionEnum
instance Show WeeklyRollConventionEnum
instance Enum WeeklyRollConventionEnum
instance Eq TelephoneTypeEnum
instance Show TelephoneTypeEnum
instance Enum TelephoneTypeEnum
instance SimpleType TelephoneTypeEnum
instance SchemaType TelephoneTypeEnum
instance SimpleType WeeklyRollConventionEnum
instance SchemaType WeeklyRollConventionEnum
instance SimpleType ValuationMethodEnum
instance SchemaType ValuationMethodEnum
instance SimpleType TriggerConditionEnum
instance SchemaType TriggerConditionEnum
instance SimpleType TouchConditionEnum
instance SchemaType TouchConditionEnum
instance SimpleType TriggerTypeEnum
instance SchemaType TriggerTypeEnum
instance SimpleType TriggerTimeTypeEnum
instance SchemaType TriggerTimeTypeEnum
instance SimpleType TimeTypeEnum
instance SchemaType TimeTypeEnum
instance SimpleType ThresholdTypeEnum
instance SchemaType ThresholdTypeEnum
instance SimpleType StrikeQuoteBasisEnum
instance SchemaType StrikeQuoteBasisEnum
instance SimpleType StubPeriodTypeEnum
instance SchemaType StubPeriodTypeEnum
instance SimpleType StepRelativeToEnum
instance SchemaType StepRelativeToEnum
instance SimpleType StandardSettlementStyleEnum
instance SchemaType StandardSettlementStyleEnum
instance SimpleType SpecifiedPriceEnum
instance SchemaType SpecifiedPriceEnum
instance SimpleType ShareExtraordinaryEventEnum
instance SchemaType ShareExtraordinaryEventEnum
instance SimpleType SettlementTypeEnum
instance SchemaType SettlementTypeEnum
instance SimpleType SettlementPeriodDurationEnum
instance SchemaType SettlementPeriodDurationEnum
instance SimpleType RoundingDirectionEnum
instance SchemaType RoundingDirectionEnum
instance SimpleType RollConventionEnum
instance SchemaType RollConventionEnum
instance SimpleType ReturnTypeEnum
instance SchemaType ReturnTypeEnum
instance SimpleType ResetRelativeToEnum
instance SchemaType ResetRelativeToEnum
instance SimpleType RealisedVarianceMethodEnum
instance SchemaType RealisedVarianceMethodEnum
instance SimpleType RateTreatmentEnum
instance SchemaType RateTreatmentEnum
instance SimpleType QuoteBasisEnum
instance SchemaType QuoteBasisEnum
instance SimpleType QuotationStyleEnum
instance SchemaType QuotationStyleEnum
instance SimpleType QuotationSideEnum
instance SchemaType QuotationSideEnum
instance SimpleType QuotationRateTypeEnum
instance SchemaType QuotationRateTypeEnum
instance SimpleType PutCallEnum
instance SchemaType PutCallEnum
instance SimpleType PriceExpressionEnum
instance SchemaType PriceExpressionEnum
instance SimpleType PremiumTypeEnum
instance SchemaType PremiumTypeEnum
instance SimpleType PremiumQuoteBasisEnum
instance SchemaType PremiumQuoteBasisEnum
instance SimpleType PositionStatusEnum
instance SchemaType PositionStatusEnum
instance SimpleType PositionOriginEnum
instance SchemaType PositionOriginEnum
instance SimpleType PeriodExtendedEnum
instance SchemaType PeriodExtendedEnum
instance SimpleType PeriodEnum
instance SchemaType PeriodEnum
instance SimpleType PayRelativeToEnum
instance SchemaType PayRelativeToEnum
instance SimpleType PayoutEnum
instance SchemaType PayoutEnum
instance SimpleType PayerReceiverEnum
instance SchemaType PayerReceiverEnum
instance SimpleType OptionTypeEnum
instance SchemaType OptionTypeEnum
instance SimpleType ObligationCategoryEnum
instance SchemaType ObligationCategoryEnum
instance SimpleType NotionalAdjustmentEnum
instance SchemaType NotionalAdjustmentEnum
instance SimpleType NonCashDividendTreatmentEnum
instance SchemaType NonCashDividendTreatmentEnum
instance SimpleType NegativeInterestRateTreatmentEnum
instance SchemaType NegativeInterestRateTreatmentEnum
instance SimpleType NationalisationOrInsolvencyOrDelistingEventEnum
instance SchemaType NationalisationOrInsolvencyOrDelistingEventEnum
instance SimpleType MethodOfAdjustmentEnum
instance SchemaType MethodOfAdjustmentEnum
instance SimpleType MarkToMarketConventionEnum
instance SchemaType MarkToMarketConventionEnum
instance SimpleType MarketDisruptionEventsEnum
instance SchemaType MarketDisruptionEventsEnum
instance SimpleType LengthUnitEnum
instance SchemaType LengthUnitEnum
instance SimpleType InterpolationPeriodEnum
instance SchemaType InterpolationPeriodEnum
instance SimpleType InterestShortfallCapEnum
instance SchemaType InterestShortfallCapEnum
instance SimpleType InterestMethodEnum
instance SchemaType InterestMethodEnum
instance SimpleType InterestCalculationTypeEnum
instance SchemaType InterestCalculationTypeEnum
instance SimpleType InterestCalculationMethodEnum
instance SchemaType InterestCalculationMethodEnum
instance SimpleType IndexEventConsequenceEnum
instance SchemaType IndexEventConsequenceEnum
instance SimpleType IndependentAmountConventionEnum
instance SchemaType IndependentAmountConventionEnum
instance SimpleType GasProductTypeEnum
instance SchemaType GasProductTypeEnum
instance SimpleType FxTenorPeriodEnum
instance SchemaType FxTenorPeriodEnum
instance SimpleType FxBarrierTypeEnum
instance SchemaType FxBarrierTypeEnum
instance SimpleType FrequencyTypeEnum
instance SchemaType FrequencyTypeEnum
instance SimpleType FraDiscountingEnum
instance SchemaType FraDiscountingEnum
instance SimpleType FPVFinalPriceElectionFallbackEnum
instance SchemaType FPVFinalPriceElectionFallbackEnum
instance SimpleType FlatRateEnum
instance SchemaType FlatRateEnum
instance SimpleType FeeElectionEnum
instance SchemaType FeeElectionEnum
instance SimpleType ExerciseStyleEnum
instance SchemaType ExerciseStyleEnum
instance SimpleType EquityOptionTypeEnum
instance SchemaType EquityOptionTypeEnum
instance SimpleType ElectricityProductTypeEnum
instance SchemaType ElectricityProductTypeEnum
instance SimpleType DualCurrencyStrikeQuoteBasisEnum
instance SchemaType DualCurrencyStrikeQuoteBasisEnum
instance SimpleType DividendPeriodEnum
instance SchemaType DividendPeriodEnum
instance SimpleType DividendEntitlementEnum
instance SchemaType DividendEntitlementEnum
instance SimpleType DividendDateReferenceEnum
instance SchemaType DividendDateReferenceEnum
instance SimpleType DividendCompositionEnum
instance SchemaType DividendCompositionEnum
instance SimpleType DividendAmountTypeEnum
instance SchemaType DividendAmountTypeEnum
instance SimpleType DisruptionFallbacksEnum
instance SchemaType DisruptionFallbacksEnum
instance SimpleType DiscountingTypeEnum
instance SchemaType DiscountingTypeEnum
instance SimpleType DifferenceTypeEnum
instance SchemaType DifferenceTypeEnum
instance SimpleType DifferenceSeverityEnum
instance SchemaType DifferenceSeverityEnum
instance SimpleType DeliveryTypeEnum
instance SchemaType DeliveryTypeEnum
instance SimpleType DeliveryDatesEnum
instance SchemaType DeliveryDatesEnum
instance SimpleType DealtCurrencyEnum
instance SchemaType DealtCurrencyEnum
instance SimpleType DayTypeEnum
instance SchemaType DayTypeEnum
instance SimpleType DayOfWeekEnum
instance SchemaType DayOfWeekEnum
instance SimpleType CompoundingMethodEnum
instance SchemaType CompoundingMethodEnum
instance SimpleType CommodityDayTypeEnum
instance SchemaType CommodityDayTypeEnum
instance SimpleType CommodityBullionSettlementDisruptionEnum
instance SchemaType CommodityBullionSettlementDisruptionEnum
instance SimpleType CommissionDenominationEnum
instance SchemaType CommissionDenominationEnum
instance SimpleType CalculationAgentPartyEnum
instance SchemaType CalculationAgentPartyEnum
instance SimpleType CashPhysicalEnum
instance SchemaType CashPhysicalEnum
instance SimpleType BusinessDayConventionEnum
instance SchemaType BusinessDayConventionEnum
instance SimpleType BullionTypeEnum
instance SchemaType BullionTypeEnum
instance SimpleType BreakageCostEnum
instance SchemaType BreakageCostEnum
instance SimpleType AveragingMethodEnum
instance SchemaType AveragingMethodEnum
instance SimpleType AveragingInOutEnum
instance SchemaType AveragingInOutEnum

module Data.FpML.V53.Shared

-- | A type defining a number specified as a decimal between -1 and 1
--   inclusive.
newtype CorrelationValue
CorrelationValue :: Decimal -> CorrelationValue

-- | A type defining a time specified in hh:mm:ss format where the second
--   component must be '00', e.g. 11am would be represented as 11:00:00.
newtype HourMinuteTime
HourMinuteTime :: Time -> HourMinuteTime

-- | A type defining a number specified as non negative decimal greater
--   than 0 inclusive.
newtype NonNegativeDecimal
NonNegativeDecimal :: Decimal -> NonNegativeDecimal

-- | A type defining a number specified as positive decimal greater than 0
--   exclusive.
newtype PositiveDecimal
PositiveDecimal :: Decimal -> PositiveDecimal

-- | A type defining a percentage specified as decimal from 0 to 1. A
--   percentage of 5% would be represented as 0.05.
newtype RestrictedPercentage
RestrictedPercentage :: Decimal -> RestrictedPercentage

-- | The base class for all types which define coding schemes.
newtype Scheme
Scheme :: NormalizedString -> Scheme

-- | A type defining a token of length between 1 and 60 characters
--   inclusive.
newtype Token60
Token60 :: Token -> Token60

-- | A generic account that represents any party's account at another
--   party. Parties may be identified by the account at another party.
data Account
Account :: ID -> Maybe AccountId -> Maybe AccountName -> Maybe PartyReference -> Maybe PartyReference -> Account

-- | The unique identifier for the account within the document.
account_ID :: Account -> ID

-- | An account identifier. For example an Account number.
account_id :: Account -> Maybe AccountId

-- | The name by which the account is known.
account_name :: Account -> Maybe AccountName

-- | A reference to the party beneficiary of the account.
account_beneficiary :: Account -> Maybe PartyReference

-- | A reference to the party that services/supports the account.
account_servicingParty :: Account -> Maybe PartyReference

-- | The data type used for account identifiers.
data AccountId
AccountId :: Scheme -> AccountIdAttributes -> AccountId
data AccountIdAttributes
AccountIdAttributes :: Maybe AnyURI -> AccountIdAttributes

-- | The identifier scheme used with this accountId. A unique URI to
--   determine the authoritative issuer of these identifiers.
accountIdAttrib_accountIdScheme :: AccountIdAttributes -> Maybe AnyURI

-- | The data type used for the name of the account.
data AccountName
AccountName :: Scheme -> AccountNameAttributes -> AccountName
data AccountNameAttributes
AccountNameAttributes :: Maybe AnyURI -> AccountNameAttributes

-- | The identifier scheme used with this accountName. A unique URI to
--   determine the source of the account name.
accountNameAttrib_accountNameScheme :: AccountNameAttributes -> Maybe AnyURI

-- | Reference to an account.
data AccountReference
AccountReference :: IDREF -> AccountReference
accountRef_href :: AccountReference -> IDREF

-- | A type that represents a physical postal address.
data Address
Address :: Maybe StreetAddress -> Maybe XsdString -> Maybe XsdString -> Maybe CountryCode -> Maybe XsdString -> Address

-- | The set of street and building number information that identifies a
--   postal address within a city.
address_streetAddress :: Address -> Maybe StreetAddress

-- | The city component of a postal address.
address_city :: Address -> Maybe XsdString

-- | A country subdivision used in postal addresses in some countries. For
--   example, US states, Canadian provinces, Swiss cantons.
address_state :: Address -> Maybe XsdString

-- | The ISO 3166 standard code for the country within which the postal
--   address is located.
address_country :: Address -> Maybe CountryCode

-- | The code, required for computerised mail sorting systems, that is
--   allocated to a physical address by a national postal authority.
address_postalCode :: Address -> Maybe XsdString

-- | A type that represents information about a unit within an
--   organization.
data BusinessUnit
BusinessUnit :: Maybe ID -> Maybe XsdString -> Maybe Unit -> Maybe ContactInformation -> Maybe CountryCode -> BusinessUnit
businessUnit_ID :: BusinessUnit -> Maybe ID

-- | A name used to describe the organization unit
businessUnit_name :: BusinessUnit -> Maybe XsdString

-- | An identifier used to uniquely identify organization unit
businessUnit_id :: BusinessUnit -> Maybe Unit

-- | Information on how to contact the unit using various means.
businessUnit_contactInfo :: BusinessUnit -> Maybe ContactInformation

-- | The ISO 3166 standard code for the country where the individual works.
businessUnit_country :: BusinessUnit -> Maybe CountryCode

-- | A type that represents information about a person connected with a
--   trade or business process.
data Person
Person :: Maybe ID -> Maybe NormalizedString -> Maybe NormalizedString -> (Maybe (OneOf2 [NormalizedString] [Initial])) -> Maybe NormalizedString -> Maybe NormalizedString -> [PersonId] -> Maybe BusinessUnitReference -> Maybe ContactInformation -> Maybe CountryCode -> Person
person_ID :: Person -> Maybe ID

-- | An honorific title, such as Mr., Ms., Dr. etc.
person_honorific :: Person -> Maybe NormalizedString

-- | Given name, such as John or Mary.
person_firstName :: Person -> Maybe NormalizedString

-- | Choice between:
--   
--   <ol>
--   <li>middleName</li>
--   <li>initial</li>
--   </ol>
person_choice2 :: Person -> (Maybe (OneOf2 [NormalizedString] [Initial]))

-- | Family name, such as Smith or Jones.
person_surname :: Person -> Maybe NormalizedString

-- | Name suffix, such as Jr., III, etc.
person_suffix :: Person -> Maybe NormalizedString

-- | An identifier assigned by a system for uniquely identifying the
--   individual
person_id :: Person -> [PersonId]

-- | The unit for which the indvidual works.
person_businessUnitReference :: Person -> Maybe BusinessUnitReference

-- | Information on how to contact the individual using various means.
person_contactInfo :: Person -> Maybe ContactInformation

-- | The ISO 3166 standard code for the country where the individual works.
person_country :: Person -> Maybe CountryCode
newtype Initial
Initial :: NormalizedString -> Initial

-- | An identifier used to identify an individual person.
data PersonId
PersonId :: Scheme -> PersonIdAttributes -> PersonId
data PersonIdAttributes
PersonIdAttributes :: Maybe AnyURI -> PersonIdAttributes
personIdAttrib_personIdScheme :: PersonIdAttributes -> Maybe AnyURI

-- | A type used to record information about a unit, subdivision, desk, or
--   other similar business entity.
data Unit
Unit :: Scheme -> UnitAttributes -> Unit
data UnitAttributes
UnitAttributes :: Maybe AnyURI -> UnitAttributes
unitAttrib_unitScheme :: UnitAttributes -> Maybe AnyURI

-- | A type that represents how to contact an individual or organization.
data ContactInformation
ContactInformation :: [TelephoneNumber] -> [NormalizedString] -> Maybe Address -> ContactInformation

-- | A telephonic contact.
contactInfo_telephone :: ContactInformation -> [TelephoneNumber]

-- | An address on an electronic mail or messaging sysem .
contactInfo_email :: ContactInformation -> [NormalizedString]

-- | A postal or street address.
contactInfo_address :: ContactInformation -> Maybe Address

-- | A type that represents a telephonic contact.
data TelephoneNumber
TelephoneNumber :: Maybe TelephoneTypeEnum -> Maybe XsdString -> TelephoneNumber

-- | The type of telephone number (work, personal, mobile).
telephNumber_type :: TelephoneNumber -> Maybe TelephoneTypeEnum

-- | A telephonic contact.
telephNumber_number :: TelephoneNumber -> Maybe XsdString

-- | A type for defining a date that shall be subject to adjustment if it
--   would otherwise fall on a day that is not a business day in the
--   specified business centers, together with the convention for adjusting
--   the date.
data AdjustableDate
AdjustableDate :: Maybe ID -> IdentifiedDate -> Maybe BusinessDayAdjustments -> Maybe IdentifiedDate -> AdjustableDate
adjustDate_ID :: AdjustableDate -> Maybe ID

-- | A date subject to adjustment.
adjustDate_unadjustedDate :: AdjustableDate -> IdentifiedDate

-- | The business day convention and financial business centers used for
--   adjusting the date if it would otherwise fall on a day that is not a
--   business date in the specified business centers.
adjustDate_dateAdjustments :: AdjustableDate -> Maybe BusinessDayAdjustments

-- | The date once the adjustment has been performed. (Note that this date
--   may change if the business center holidays change).
adjustDate_adjustedDate :: AdjustableDate -> Maybe IdentifiedDate

-- | A type that is different from AdjustableDate in two regards. First,
--   date adjustments can be specified with either a dateAdjustments
--   element or a reference to an existing dateAdjustments element. Second,
--   it does not require the specification of date adjustments.
data AdjustableDate2
AdjustableDate2 :: Maybe ID -> IdentifiedDate -> (Maybe (OneOf2 BusinessDayAdjustments BusinessDayAdjustmentsReference)) -> Maybe IdentifiedDate -> AdjustableDate2
adjustDate2_ID :: AdjustableDate2 -> Maybe ID

-- | A date subject to adjustment.
adjustDate2_unadjustedDate :: AdjustableDate2 -> IdentifiedDate

-- | Choice between:
--   
--   <ol>
--   <li>The business day convention and financial business centers used
--   for adjusting the date if it would otherwise fall on a day that is not
--   a business dat in the specified business centers.</li>
--   <li>A pointer style reference to date adjustments defined elsewhere in
--   the document.</li>
--   </ol>
adjustDate2_choice1 :: AdjustableDate2 -> (Maybe (OneOf2 BusinessDayAdjustments BusinessDayAdjustmentsReference))

-- | The date once the adjustment has been performed. (Note that this date
--   may change if the business center holidays change).
adjustDate2_adjustedDate :: AdjustableDate2 -> Maybe IdentifiedDate

-- | A type for defining a series of dates that shall be subject to
--   adjustment if they would otherwise fall on a day that is not a
--   business day in the specified business centers, together with the
--   convention for adjusting the dates.
data AdjustableDates
AdjustableDates :: Maybe ID -> [IdentifiedDate] -> Maybe BusinessDayAdjustments -> [IdentifiedDate] -> AdjustableDates
adjustDates_ID :: AdjustableDates -> Maybe ID

-- | A date subject to adjustment.
adjustDates_unadjustedDate :: AdjustableDates -> [IdentifiedDate]

-- | The business day convention and financial business centers used for
--   adjusting the date if it would otherwise fall on a day that is not a
--   business dat in the specified business centers.
adjustDates_dateAdjustments :: AdjustableDates -> Maybe BusinessDayAdjustments

-- | The date once the adjustment has been performed. (Note that this date
--   may change if the business center holidays change).
adjustDates_adjustedDate :: AdjustableDates -> [IdentifiedDate]

-- | A type for defining a series of dates, either as a list of adjustable
--   dates, or a as a repeating sequence from a base date
data AdjustableDatesOrRelativeDateOffset
AdjustableDatesOrRelativeDateOffset :: (Maybe (OneOf2 AdjustableDates RelativeDateOffset)) -> AdjustableDatesOrRelativeDateOffset

-- | Choice between:
--   
--   <ol>
--   <li>A series of adjustable dates</li>
--   <li>A series of dates specified as a repeating sequence from a base
--   date.</li>
--   </ol>
adordo_choice0 :: AdjustableDatesOrRelativeDateOffset -> (Maybe (OneOf2 AdjustableDates RelativeDateOffset))

-- | A type for defining a date that shall be subject to adjustment if it
--   would otherwise fall on a day that is not a business day in the
--   specified business centers, together with the convention for adjusting
--   the date.
data AdjustableOrAdjustedDate
AdjustableOrAdjustedDate :: Maybe ID -> OneOf2 (IdentifiedDate, Maybe (BusinessDayAdjustments), Maybe (IdentifiedDate)) IdentifiedDate -> AdjustableOrAdjustedDate
adjustOrAdjustDate_ID :: AdjustableOrAdjustedDate -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>A date subject to adjustment.</li>
--   <li>The business day convention and financial business centers used
--   for adjusting the date if it would otherwise fall on a day that is not
--   a business date in the specified business centers.</li>
--   <li>The date once the adjustment has been performed. (Note that this
--   date may change if the business center holidays change).</li>
--   </ul>
--   
--   <ol>
--   <li>The date once the adjustment has been performed. (Note that this
--   date may change if the business center holidays change).</li>
--   </ol>
adjustOrAdjustDate_choice0 :: AdjustableOrAdjustedDate -> OneOf2 (IdentifiedDate, Maybe (BusinessDayAdjustments), Maybe (IdentifiedDate)) IdentifiedDate

-- | A type giving the choice between defining a date as an explicit date
--   together with applicable adjustments or as relative to some other
--   (anchor) date.
data AdjustableOrRelativeDate
AdjustableOrRelativeDate :: Maybe ID -> (Maybe (OneOf2 AdjustableDate RelativeDateOffset)) -> AdjustableOrRelativeDate
adjustOrRelatDate_ID :: AdjustableOrRelativeDate -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>A date that shall be subject to adjustment if it would otherwise
--   fall on a day that is not a business day in the specified business
--   centers, together with the convention for adjusting the date.</li>
--   <li>A date specified as some offset to another date (the anchor
--   date).</li>
--   </ol>
adjustOrRelatDate_choice0 :: AdjustableOrRelativeDate -> (Maybe (OneOf2 AdjustableDate RelativeDateOffset))

-- | A type giving the choice between defining a series of dates as an
--   explicit list of dates together with applicable adjustments or as
--   relative to some other series of (anchor) dates.
data AdjustableOrRelativeDates
AdjustableOrRelativeDates :: Maybe ID -> (Maybe (OneOf2 AdjustableDates RelativeDates)) -> AdjustableOrRelativeDates
adjustOrRelatDates_ID :: AdjustableOrRelativeDates -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>A series of dates that shall be subject to adjustment if they
--   would otherwise fall on a day that is not a business day in the
--   specified business centers, together with the convention for adjusting
--   the date.</li>
--   <li>A series of dates specified as some offset to another series of
--   dates (the anchor dates).</li>
--   </ol>
adjustOrRelatDates_choice0 :: AdjustableOrRelativeDates -> (Maybe (OneOf2 AdjustableDates RelativeDates))
data AdjustableRelativeOrPeriodicDates
AdjustableRelativeOrPeriodicDates :: Maybe ID -> (Maybe (OneOf3 AdjustableDates RelativeDateSequence PeriodicDates)) -> AdjustableRelativeOrPeriodicDates
adjustRelatOrPeriodDates_ID :: AdjustableRelativeOrPeriodicDates -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>A series of dates that shall be subject to adjustment if they
--   would otherwise fall on a day that is not a business day in the
--   specified business centers, together with the convention for adjusting
--   the date.</li>
--   <li>A series of dates specified as some offset to other dates (the
--   anchor dates) which can</li>
--   <li>periodicDates</li>
--   </ol>
adjustRelatOrPeriodDates_choice0 :: AdjustableRelativeOrPeriodicDates -> (Maybe (OneOf3 AdjustableDates RelativeDateSequence PeriodicDates))

-- | A type giving the choice between defining a series of dates as an
--   explicit list of dates together with applicable adjustments, or as
--   relative to some other series of (anchor) dates, or as a set of
--   factors to specify periodic occurences.
data AdjustableRelativeOrPeriodicDates2
AdjustableRelativeOrPeriodicDates2 :: Maybe ID -> (Maybe (OneOf3 AdjustableDates RelativeDates PeriodicDates)) -> AdjustableRelativeOrPeriodicDates2
adjustRelatOrPeriodDates2_ID :: AdjustableRelativeOrPeriodicDates2 -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>A series of dates that shall be subject to adjustment if they
--   would otherwise fall on a day that is not a business day in the
--   specified business centers, together with the convention for adjusting
--   the date.</li>
--   <li>A series of dates specified as some offset to another series of
--   dates (the anchor dates).</li>
--   <li>periodicDates</li>
--   </ol>
adjustRelatOrPeriodDates2_choice0 :: AdjustableRelativeOrPeriodicDates2 -> (Maybe (OneOf3 AdjustableDates RelativeDates PeriodicDates))

-- | A type defining a date (referred to as the derived date) as a relative
--   offset from another date (referred to as the anchor date) plus
--   optional date adjustments.
data AdjustedRelativeDateOffset
AdjustedRelativeDateOffset :: Maybe ID -> Integer -> PeriodEnum -> Maybe DayTypeEnum -> Maybe BusinessDayConventionEnum -> (Maybe (OneOf2 BusinessCentersReference BusinessCenters)) -> Maybe DateReference -> Maybe IdentifiedDate -> Maybe BusinessDayAdjustments -> AdjustedRelativeDateOffset
adjustRelatDateOffset_ID :: AdjustedRelativeDateOffset -> Maybe ID

-- | A time period multiplier, e.g. 1, 2 or 3 etc. A negative value can be
--   used when specifying an offset relative to another date, e.g. -2 days.
adjustRelatDateOffset_periodMultiplier :: AdjustedRelativeDateOffset -> Integer

-- | A time period, e.g. a day, week, month or year of the stream. If the
--   periodMultiplier value is 0 (zero) then period must contain the value
--   D (day).
adjustRelatDateOffset_period :: AdjustedRelativeDateOffset -> PeriodEnum

-- | In the case of an offset specified as a number of days, this element
--   defines whether consideration is given as to whether a day is a good
--   business day or not. If a day type of business days is specified then
--   non-business days are ignored when calculating the offset. The
--   financial business centers to use for determination of business days
--   are implied by the context in which this element is used. This element
--   must only be included when the offset is specified as a number of
--   days. If the offset is zero days then the dayType element should not
--   be included.
adjustRelatDateOffset_dayType :: AdjustedRelativeDateOffset -> Maybe DayTypeEnum

-- | The convention for adjusting a date if it would otherwise fall on a
--   day that is not a business day.
adjustRelatDateOffset_businessDayConvention :: AdjustedRelativeDateOffset -> Maybe BusinessDayConventionEnum

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to a set of financial business centers
--   defined elsewhere in the document. This set of business centers is
--   used to determine whether a particular day is a business day or
--   not.</li>
--   <li>businessCenters</li>
--   </ol>
adjustRelatDateOffset_choice4 :: AdjustedRelativeDateOffset -> (Maybe (OneOf2 BusinessCentersReference BusinessCenters))

-- | Specifies the anchor as an href attribute. The href attribute value is
--   a pointer style reference to the element or component elsewhere in the
--   document where the anchor date is defined.
adjustRelatDateOffset_dateRelativeTo :: AdjustedRelativeDateOffset -> Maybe DateReference

-- | The date once the adjustment has been performed. (Note that this date
--   may change if the business center holidays change).
adjustRelatDateOffset_adjustedDate :: AdjustedRelativeDateOffset -> Maybe IdentifiedDate

-- | The business day convention and financial business centers used for
--   adjusting the relative date if it would otherwise fall on a day that
--   is not a business date in the specified business centers.
adjustRelatDateOffset_relativeDateAdjustments :: AdjustedRelativeDateOffset -> Maybe BusinessDayAdjustments
data AgreementType
AgreementType :: Scheme -> AgreementTypeAttributes -> AgreementType
data AgreementTypeAttributes
AgreementTypeAttributes :: Maybe AnyURI -> AgreementTypeAttributes
agreemTypeAttrib_agreementTypeScheme :: AgreementTypeAttributes -> Maybe AnyURI
data AgreementVersion
AgreementVersion :: Scheme -> AgreementVersionAttributes -> AgreementVersion
data AgreementVersionAttributes
AgreementVersionAttributes :: Maybe AnyURI -> AgreementVersionAttributes
agreemVersionAttrib_agreementVersionScheme :: AgreementVersionAttributes -> Maybe AnyURI

-- | A type defining the exercise period for an American style option
--   together with any rules governing the notional amount of the
--   underlying which can be exercised on any given exercise date and any
--   associated exercise fees.
data AmericanExercise
AmericanExercise :: Maybe ID -> Maybe AdjustableOrRelativeDate -> Maybe AdjustableOrRelativeDate -> Maybe AdjustableOrRelativeDates -> Maybe BusinessCenterTime -> Maybe BusinessCenterTime -> Maybe BusinessCenterTime -> Maybe MultipleExercise -> Maybe ExerciseFeeSchedule -> AmericanExercise
americExerc_ID :: AmericanExercise -> Maybe ID

-- | The first day of the exercise period for an American style option.
americExerc_commencementDate :: AmericanExercise -> Maybe AdjustableOrRelativeDate

-- | The last day within an exercise period for an American style option.
--   For a European style option it is the only day within the exercise
--   period.
americExerc_expirationDate :: AmericanExercise -> Maybe AdjustableOrRelativeDate

-- | The date on the underlying set by the exercise of an option. What this
--   date is depends on the option (e.g. in a swaption it is the swap
--   effective date, in an extendible/cancelable provision it is the swap
--   termination date).
americExerc_relevantUnderlyingDate :: AmericanExercise -> Maybe AdjustableOrRelativeDates

-- | The earliest time at which notice of exercise can be given by the
--   buyer to the seller (or seller's agent) i) on the expriation date, in
--   the case of a European style option, (ii) on each bermuda option
--   exercise date and the expiration date, in the case of a Bermuda style
--   option the commencement date to, and including, the expiration date ,
--   in the case of an American option.
americExerc_earliestExerciseTime :: AmericanExercise -> Maybe BusinessCenterTime

-- | For a Bermuda or American style option, the latest time on an exercise
--   business day (excluding the expiration date) within the exercise
--   period that notice can be given by the buyer to the seller or seller's
--   agent. Notice of exercise given after this time will be deemed to have
--   been given on the next exercise business day.
americExerc_latestExerciseTime :: AmericanExercise -> Maybe BusinessCenterTime

-- | The latest time for exercise on expirationDate.
americExerc_expirationTime :: AmericanExercise -> Maybe BusinessCenterTime

-- | As defined in the 2000 ISDA Definitions, Section 12.4. Multiple
--   Exercise, the buyer of the option has the right to exercise all or
--   less than all the unexercised notional amount of the underlying swap
--   on one or more days in the exercise period, but on any such day may
--   not exercise less than the minimum notional amount or more that the
--   maximum notional amount, and if an integral multiple amount is
--   specified, the notional amount exercised must be equal to, or be an
--   intergral multiple of, the integral multiple amount.
americExerc_multipleExercise :: AmericanExercise -> Maybe MultipleExercise

-- | The fees associated with an exercise date. The fees are conditional on
--   the exercise occuring. The fees can be specified as actual currency
--   amounts or as percentages of the notional amount being exercised.
americExerc_exerciseFeeSchedule :: AmericanExercise -> Maybe ExerciseFeeSchedule

-- | Specifies a reference to a monetary amount.
data AmountReference
AmountReference :: IDREF -> AmountReference
amountRef_href :: AmountReference -> IDREF

-- | A type defining a currency amount or a currency amount schedule.
data AmountSchedule
AmountSchedule :: Maybe ID -> Decimal -> [Step] -> Maybe Currency -> AmountSchedule
amountSched_ID :: AmountSchedule -> Maybe ID

-- | The initial rate or amount, as the case may be. An initial rate of 5%
--   would be represented as 0.05.
amountSched_initialValue :: AmountSchedule -> Decimal

-- | The schedule of step date and value pairs. On each step date the
--   associated step value becomes effective A list of steps may be ordered
--   in the document by ascending step date. An FpML document containing an
--   unordered list of steps is still regarded as a conformant document.
amountSched_step :: AmountSchedule -> [Step]

-- | The currency in which an amount is denominated.
amountSched_currency :: AmountSchedule -> Maybe Currency
data AssetClass
AssetClass :: Scheme -> AssetClassAttributes -> AssetClass
data AssetClassAttributes
AssetClassAttributes :: Maybe AnyURI -> AssetClassAttributes
assetClassAttrib_assetClassScheme :: AssetClassAttributes -> Maybe AnyURI

-- | A type to define automatic exercise of a swaption. With automatic
--   exercise the option is deemed to have exercised if it is in the money
--   by more than the threshold amount on the exercise date.
data AutomaticExercise
AutomaticExercise :: Maybe Decimal -> AutomaticExercise

-- | A threshold rate. The threshold of 0.10% would be represented as 0.001
automExerc_thresholdRate :: AutomaticExercise -> Maybe Decimal

-- | To indicate the limitation percentage and limitation period.
data AverageDailyTradingVolumeLimit
AverageDailyTradingVolumeLimit :: Maybe RestrictedPercentage -> Maybe NonNegativeInteger -> AverageDailyTradingVolumeLimit

-- | Specifies the limitation percentage in Average Daily trading volume.
averageDailyTradingVolumeLimit_limitationPercentage :: AverageDailyTradingVolumeLimit -> Maybe RestrictedPercentage

-- | Specifies the limitation period for Average Daily trading volume in
--   number of days.
averageDailyTradingVolumeLimit_limitationPeriod :: AverageDailyTradingVolumeLimit -> Maybe NonNegativeInteger

-- | A type defining the beneficiary of the funds.
data Beneficiary
Beneficiary :: (Maybe (OneOf3 RoutingIds RoutingExplicitDetails RoutingIdsAndExplicitDetails)) -> Maybe PartyReference -> Beneficiary

-- | Choice between:
--   
--   <ol>
--   <li>A set of unique identifiers for a party, eachone identifying the
--   party within a payment system. The assumption is that each party will
--   not have more than one identifier within the same payment system.</li>
--   <li>A set of details that is used to identify a party involved in the
--   routing of a payment when the party does not have a code that
--   identifies it within one of the recognized payment systems.</li>
--   <li>A combination of coded payment system identifiers and details for
--   physical addressing for a party involved in the routing of a
--   payment.</li>
--   </ol>
beneficiary_choice0 :: Beneficiary -> (Maybe (OneOf3 RoutingIds RoutingExplicitDetails RoutingIdsAndExplicitDetails))

-- | Link to the party acting as beneficiary. This element can only appear
--   within the beneficiary container element.
beneficiary_partyReference :: Beneficiary -> Maybe PartyReference

-- | A type defining the Bermuda option exercise dates and the expiration
--   date together with any rules govenerning the notional amount of the
--   underlying which can be exercised on any given exercise date and any
--   associated exercise fee.
data BermudaExercise
BermudaExercise :: Maybe ID -> Maybe AdjustableOrRelativeDates -> Maybe AdjustableOrRelativeDates -> Maybe BusinessCenterTime -> Maybe BusinessCenterTime -> Maybe BusinessCenterTime -> Maybe MultipleExercise -> Maybe ExerciseFeeSchedule -> BermudaExercise
bermudaExerc_ID :: BermudaExercise -> Maybe ID

-- | The dates the define the Bermuda option exercise dates and the
--   expiration date. The last specified date is assumed to be the
--   expiration date. The dates can either be specified as a series of
--   explicit dates and associated adjustments or as a series of dates
--   defined relative to another schedule of dates, for example, the
--   calculation period start dates. Where a relative series of dates are
--   defined the first and last possible exercise dates can be separately
--   specified.
bermudaExercise_dates :: BermudaExercise -> Maybe AdjustableOrRelativeDates

-- | The date on the underlying set by the exercise of an option. What this
--   date is depends on the option (e.g. in a swaption it is the swap
--   effective date, in an extendible/cancelable provision it is the swap
--   termination date).
bermudaExerc_relevantUnderlyingDate :: BermudaExercise -> Maybe AdjustableOrRelativeDates

-- | The earliest time at which notice of exercise can be given by the
--   buyer to the seller (or seller's agent) i) on the expriation date, in
--   the case of a European style option, (ii) on each bermuda option
--   exercise date and the expiration date, in the case of a Bermuda style
--   option the commencement date to, and including, the expiration date ,
--   in the case of an American option.
bermudaExerc_earliestExerciseTime :: BermudaExercise -> Maybe BusinessCenterTime

-- | For a Bermuda or American style option, the latest time on an exercise
--   business day (excluding the expiration date) within the exercise
--   period that notice can be given by the buyer to the seller or seller's
--   agent. Notice of exercise given after this time will be deemed to have
--   been given on the next exercise business day.
bermudaExerc_latestExerciseTime :: BermudaExercise -> Maybe BusinessCenterTime

-- | The latest time for exercise on expirationDate.
bermudaExerc_expirationTime :: BermudaExercise -> Maybe BusinessCenterTime

-- | As defined in the 2000 ISDA Definitions, Section 12.4. Multiple
--   Exercise, the buyer of the option has the right to exercise all or
--   less than all the unexercised notional amount of the underlying swap
--   on one or more days in the exercise period, but on any such day may
--   not exercise less than the minimum notional amount or more that the
--   maximum notional amount, and if an integral multiple amount is
--   specified, the notional amount exercised must be equal to, or be an
--   intergral multiple of, the integral multiple amount.
bermudaExerc_multipleExercise :: BermudaExercise -> Maybe MultipleExercise

-- | The fees associated with an exercise date. The fees are conditional on
--   the exercise occuring. The fees can be specified as actual currency
--   amounts or as percentages of the notional amount being exercised.
bermudaExerc_exerciseFeeSchedule :: BermudaExercise -> Maybe ExerciseFeeSchedule

-- | Identifies the market sector in which the trade has been arranged.
data BrokerConfirmation
BrokerConfirmation :: Maybe BrokerConfirmationType -> BrokerConfirmation

-- | The type of broker confirmation executed between the parties.
brokerConfirmation_type :: BrokerConfirmation -> Maybe BrokerConfirmationType

-- | Identifies the market sector in which the trade has been arranged.
data BrokerConfirmationType
BrokerConfirmationType :: Scheme -> BrokerConfirmationTypeAttributes -> BrokerConfirmationType
data BrokerConfirmationTypeAttributes
BrokerConfirmationTypeAttributes :: Maybe AnyURI -> BrokerConfirmationTypeAttributes
brokerConfirTypeAttrib_brokerConfirmationTypeScheme :: BrokerConfirmationTypeAttributes -> Maybe AnyURI

-- | A code identifying a business day calendar location. A business day
--   calendar location is drawn from the list identified by the business
--   day calendar location scheme.
data BusinessCenter
BusinessCenter :: Scheme -> BusinessCenterAttributes -> BusinessCenter
data BusinessCenterAttributes
BusinessCenterAttributes :: Maybe AnyURI -> Maybe ID -> BusinessCenterAttributes
busCenterAttrib_businessCenterScheme :: BusinessCenterAttributes -> Maybe AnyURI
busCenterAttrib_ID :: BusinessCenterAttributes -> Maybe ID

-- | A type for defining business day calendar used in determining whether
--   a day is a business day or not. A list of business day calendar
--   locations may be ordered in the document alphabetically based on
--   business day calendar location code. An FpML document containing an
--   unordered business day calendar location list is still regarded as a
--   conformant document.
data BusinessCenters
BusinessCenters :: Maybe ID -> [BusinessCenter] -> BusinessCenters
busCenters_ID :: BusinessCenters -> Maybe ID
busCenters_businessCenter :: BusinessCenters -> [BusinessCenter]

-- | A pointer style reference to a set of business day calendar defined
--   elsewhere in the document.
data BusinessCentersReference
BusinessCentersReference :: IDREF -> BusinessCentersReference
busCentersRef_href :: BusinessCentersReference -> IDREF

-- | A type for defining a time with respect to a business day calendar
--   location. For example, 11:00am London time.
data BusinessCenterTime
BusinessCenterTime :: Maybe HourMinuteTime -> Maybe BusinessCenter -> BusinessCenterTime

-- | A time specified in hh:mm:ss format where the second component must be
--   '00', e.g. 11am would be represented as 11:00:00.
busCenterTime_hourMinuteTime :: BusinessCenterTime -> Maybe HourMinuteTime
busCenterTime_businessCenter :: BusinessCenterTime -> Maybe BusinessCenter

-- | A type defining a range of contiguous business days by defining an
--   unadjusted first date, an unadjusted last date and a business day
--   convention and business centers for adjusting the first and last dates
--   if they would otherwise fall on a non business day in the specified
--   business centers. The days between the first and last date must also
--   be good business days in the specified centers to be counted in the
--   range.
data BusinessDateRange
BusinessDateRange :: Maybe Date -> Maybe Date -> Maybe BusinessDayConventionEnum -> (Maybe (OneOf2 BusinessCentersReference BusinessCenters)) -> BusinessDateRange

-- | The first date of a date range.
busDateRange_unadjustedFirstDate :: BusinessDateRange -> Maybe Date

-- | The last date of a date range.
busDateRange_unadjustedLastDate :: BusinessDateRange -> Maybe Date

-- | The convention for adjusting a date if it would otherwise fall on a
--   day that is not a business day.
busDateRange_businessDayConvention :: BusinessDateRange -> Maybe BusinessDayConventionEnum

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to a set of financial business centers
--   defined elsewhere in the document. This set of business centers is
--   used to determine whether a particular day is a business day or
--   not.</li>
--   <li>businessCenters</li>
--   </ol>
busDateRange_choice3 :: BusinessDateRange -> (Maybe (OneOf2 BusinessCentersReference BusinessCenters))

-- | A type defining the business day convention and financial business
--   centers used for adjusting any relevant date if it would otherwise
--   fall on a day that is not a business day in the specified business
--   centers.
data BusinessDayAdjustments
BusinessDayAdjustments :: Maybe ID -> Maybe BusinessDayConventionEnum -> (Maybe (OneOf2 BusinessCentersReference BusinessCenters)) -> BusinessDayAdjustments
busDayAdjust_ID :: BusinessDayAdjustments -> Maybe ID

-- | The convention for adjusting a date if it would otherwise fall on a
--   day that is not a business day.
busDayAdjust_businessDayConvention :: BusinessDayAdjustments -> Maybe BusinessDayConventionEnum

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to a set of financial business centers
--   defined elsewhere in the document. This set of business centers is
--   used to determine whether a particular day is a business day or
--   not.</li>
--   <li>businessCenters</li>
--   </ol>
busDayAdjust_choice1 :: BusinessDayAdjustments -> (Maybe (OneOf2 BusinessCentersReference BusinessCenters))

-- | Reference to a business day adjustments structure.
data BusinessDayAdjustmentsReference
BusinessDayAdjustmentsReference :: IDREF -> BusinessDayAdjustmentsReference
busDayAdjustRef_href :: BusinessDayAdjustmentsReference -> IDREF

-- | A type defining the ISDA calculation agent responsible for performing
--   duties as defined in the applicable product definitions.
data CalculationAgent
CalculationAgent :: (Maybe (OneOf2 [PartyReference] CalculationAgentPartyEnum)) -> CalculationAgent

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to a party identifier defined elsewhere
--   in the document. The party referenced is the ISDA Calculation Agent
--   for the trade. If more than one party is referenced then the parties
--   are assumed to be co-calculation agents, i.e. they have joint
--   responsibility.</li>
--   <li>The ISDA calculation agent responsible for performing duties as
--   defined in the applicable product definitions. For example, the
--   Calculation Agent may be defined as being the Non-exercising
--   Party.</li>
--   </ol>
calcAgent_choice0 :: CalculationAgent -> (Maybe (OneOf2 [PartyReference] CalculationAgentPartyEnum))

-- | A type defining the frequency at which calculation period end dates
--   occur within the regular part of the calculation period schedule and
--   thier roll date convention. In case the calculation frequency is of
--   value T (term), the period is defined by the
--   swapswapStreamcalculationPerioDateseffectiveDate and the
--   swapswapStreamcalculationPerioDatesterminationDate.
data CalculationPeriodFrequency
CalculationPeriodFrequency :: Maybe ID -> Maybe PositiveInteger -> Maybe PeriodExtendedEnum -> Maybe RollConventionEnum -> CalculationPeriodFrequency
calcPeriodFrequ_ID :: CalculationPeriodFrequency -> Maybe ID

-- | A time period multiplier, e.g. 1, 2 or 3 etc. If the period value is T
--   (Term) then periodMultiplier must contain the value 1.
calcPeriodFrequ_periodMultiplier :: CalculationPeriodFrequency -> Maybe PositiveInteger

-- | A time period, e.g. a day, week, month, year or term of the stream.
calcPeriodFrequ_period :: CalculationPeriodFrequency -> Maybe PeriodExtendedEnum

-- | Used in conjunction with a frequency and the regular period start date
--   of a calculation period, determines each calculation period end date
--   within the regular part of a calculation period schedule.
calcPeriodFrequ_rollConvention :: CalculationPeriodFrequency -> Maybe RollConventionEnum

-- | An identifier used to identify a single component cashflow.
data CashflowId
CashflowId :: Scheme -> CashflowIdAttributes -> CashflowId
data CashflowIdAttributes
CashflowIdAttributes :: Maybe AnyURI -> CashflowIdAttributes
cashflIdAttrib_cashflowIdScheme :: CashflowIdAttributes -> Maybe AnyURI

-- | The notional<i>principal value</i>quantity/volume used to compute the
--   cashflow.
data CashflowNotional
CashflowNotional :: Maybe ID -> (Maybe (OneOf2 Currency NormalizedString)) -> Decimal -> CashflowNotional
cashflNotion_ID :: CashflowNotional -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>The currency in which an amount is denominated.</li>
--   <li>The units in which an amount (not monetary) is denominated.</li>
--   </ol>
cashflNotion_choice0 :: CashflowNotional -> (Maybe (OneOf2 Currency NormalizedString))

-- | The quantity of notional (in currency or other units).
cashflNotion_amount :: CashflowNotional -> Decimal

-- | A coding scheme used to describe the type or purpose of a cash flow or
--   cash flow component.
data CashflowType
CashflowType :: Scheme -> CashflowTypeAttributes -> CashflowType
data CashflowTypeAttributes
CashflowTypeAttributes :: Maybe AnyURI -> CashflowTypeAttributes
cashflTypeAttrib_cashflowTypeScheme :: CashflowTypeAttributes -> Maybe AnyURI

-- | A type defining the list of reference institutions polled for relevant
--   rates or prices when determining the cash settlement amount for a
--   product where cash settlement is applicable.
data CashSettlementReferenceBanks
CashSettlementReferenceBanks :: Maybe ID -> [ReferenceBank] -> CashSettlementReferenceBanks
cashSettlRefBanks_ID :: CashSettlementReferenceBanks -> Maybe ID

-- | An institution (party) identified by means of a coding scheme and an
--   optional name.
cashSettlRefBanks_referenceBank :: CashSettlementReferenceBanks -> [ReferenceBank]

-- | Unless otherwise specified, the principal clearance system customarily
--   used for settling trades in the relevant underlying.
data ClearanceSystem
ClearanceSystem :: Scheme -> ClearanceSystemAttributes -> ClearanceSystem
data ClearanceSystemAttributes
ClearanceSystemAttributes :: Maybe AnyURI -> ClearanceSystemAttributes
clearSystemAttrib_clearanceSystemScheme :: ClearanceSystemAttributes -> Maybe AnyURI

-- | The definitions, such as those published by ISDA, that will define the
--   terms of the trade.
data ContractualDefinitions
ContractualDefinitions :: Scheme -> ContractualDefinitionsAttributes -> ContractualDefinitions
data ContractualDefinitionsAttributes
ContractualDefinitionsAttributes :: Maybe AnyURI -> ContractualDefinitionsAttributes
contrDefinAttrib_contractualDefinitionsScheme :: ContractualDefinitionsAttributes -> Maybe AnyURI
data ContractualMatrix
ContractualMatrix :: Maybe MatrixType -> Maybe Date -> Maybe MatrixTerm -> ContractualMatrix

-- | Identifies the form of applicable matrix.
contrMatrix_matrixType :: ContractualMatrix -> Maybe MatrixType

-- | Specifies the publication date of the applicable version of the
--   matrix. When this element is omitted, the ISDA supplemental language
--   for incorporation of the relevant matrix will generally define rules
--   for which version of the matrix is applicable.
contrMatrix_publicationDate :: ContractualMatrix -> Maybe Date

-- | Defines any applicable key into the relevant matrix. For example, the
--   Transaction Type would be the single term required for the Credit
--   Derivatives Physical Settlement Matrix. This element should be omitted
--   in the case of the 2000 ISDA Definitions Settlement Matrix for Early
--   Termination and Swaptions.
contrMatrix_matrixTerm :: ContractualMatrix -> Maybe MatrixTerm

-- | A contractual supplement (such as those published by ISDA) that will
--   apply to the trade.
data ContractualSupplement
ContractualSupplement :: Scheme -> ContractualSupplementAttributes -> ContractualSupplement
data ContractualSupplementAttributes
ContractualSupplementAttributes :: Maybe AnyURI -> ContractualSupplementAttributes
contrSupplAttrib_contractualSupplementScheme :: ContractualSupplementAttributes -> Maybe AnyURI

-- | A contractual supplement (such as those published by ISDA) and its
--   publication date that will apply to the trade.
data ContractualTermsSupplement
ContractualTermsSupplement :: Maybe ContractualSupplement -> Maybe Date -> ContractualTermsSupplement

-- | Identifies the form of applicable contractual supplement.
contrTermsSuppl_type :: ContractualTermsSupplement -> Maybe ContractualSupplement

-- | Specifies the publication date of the applicable version of the
--   contractual supplement.
contrTermsSuppl_publicationDate :: ContractualTermsSupplement -> Maybe Date

-- | A type that describes the information to identify a correspondent bank
--   that will make delivery of the funds on the paying bank's behalf in
--   the country where the payment is to be made.
data CorrespondentInformation
CorrespondentInformation :: (Maybe (OneOf3 RoutingIds RoutingExplicitDetails RoutingIdsAndExplicitDetails)) -> Maybe PartyReference -> CorrespondentInformation

-- | Choice between:
--   
--   <ol>
--   <li>A set of unique identifiers for a party, eachone identifying the
--   party within a payment system. The assumption is that each party will
--   not have more than one identifier within the same payment system.</li>
--   <li>A set of details that is used to identify a party involved in the
--   routing of a payment when the party does not have a code that
--   identifies it within one of the recognized payment systems.</li>
--   <li>A combination of coded payment system identifiers and details for
--   physical addressing for a party involved in the routing of a
--   payment.</li>
--   </ol>
corresInfo_choice0 :: CorrespondentInformation -> (Maybe (OneOf3 RoutingIds RoutingExplicitDetails RoutingIdsAndExplicitDetails))

-- | Link to the party acting as correspondent. This element can only
--   appear within the correspondentInformation container element.
corresInfo_correspondentPartyReference :: CorrespondentInformation -> Maybe PartyReference

-- | The code representation of a country or an area of special
--   sovereignty. By default it is a valid 2 character country code as
--   defined by the ISO standard 3166-1 alpha-2 - Codes for representation
--   of countries
--   http:<i></i>www.niso.org<i>standards</i>resources/3166.html.
data CountryCode
CountryCode :: Token -> CountryCodeAttributes -> CountryCode
data CountryCodeAttributes
CountryCodeAttributes :: Maybe AnyURI -> CountryCodeAttributes
countryCodeAttrib_countryScheme :: CountryCodeAttributes -> Maybe AnyURI

-- | The repayment precedence of a debt instrument.
data CreditSeniority
CreditSeniority :: Scheme -> CreditSeniorityAttributes -> CreditSeniority
data CreditSeniorityAttributes
CreditSeniorityAttributes :: Maybe AnyURI -> CreditSeniorityAttributes

-- | creditSeniorityTradingScheme overrides creditSeniorityScheme when the
--   underlyer defines the reference obligation used in a single name
--   credit default swap trade.
creditSeniorAttrib_creditSeniorityScheme :: CreditSeniorityAttributes -> Maybe AnyURI

-- | The agreement executed between the parties and intended to govern
--   collateral arrangement for all OTC derivatives transactions between
--   those parties.
data CreditSupportAgreement
CreditSupportAgreement :: Maybe CreditSupportAgreementType -> Maybe Date -> Maybe CreditSupportAgreementIdentifier -> CreditSupportAgreement

-- | The type of ISDA Credit Support Agreement
creditSupportAgreem_type :: CreditSupportAgreement -> Maybe CreditSupportAgreementType

-- | The date of the agreement executed between the parties and intended to
--   govern collateral arrangements for all OTC derivatives transactions
--   between those parties.
creditSupportAgreem_date :: CreditSupportAgreement -> Maybe Date

-- | An identifier used to uniquely identify the CSA
creditSupportAgreem_identifier :: CreditSupportAgreement -> Maybe CreditSupportAgreementIdentifier
data CreditSupportAgreementIdentifier
CreditSupportAgreementIdentifier :: Scheme -> CreditSupportAgreementIdentifierAttributes -> CreditSupportAgreementIdentifier
data CreditSupportAgreementIdentifierAttributes
CreditSupportAgreementIdentifierAttributes :: Maybe AnyURI -> CreditSupportAgreementIdentifierAttributes
csaia_creditSupportAgreementIdScheme :: CreditSupportAgreementIdentifierAttributes -> Maybe AnyURI
data CreditSupportAgreementType
CreditSupportAgreementType :: Scheme -> CreditSupportAgreementTypeAttributes -> CreditSupportAgreementType
data CreditSupportAgreementTypeAttributes
CreditSupportAgreementTypeAttributes :: Maybe AnyURI -> CreditSupportAgreementTypeAttributes
csata_creditSupportAgreementTypeScheme :: CreditSupportAgreementTypeAttributes -> Maybe AnyURI

-- | A party's credit rating.
data CreditRating
CreditRating :: Scheme -> CreditRatingAttributes -> CreditRating
data CreditRatingAttributes
CreditRatingAttributes :: Maybe AnyURI -> CreditRatingAttributes
creditRatingAttrib_creditRatingScheme :: CreditRatingAttributes -> Maybe AnyURI

-- | The code representation of a currency or fund. By default it is a
--   valid currency code as defined by the ISO standard 4217 - Codes for
--   representation of currencies and funds
--   http:<i></i>www.iso.org<i>iso</i>en<i>prods-services</i>popstds/currencycodeslist.html.
data Currency
Currency :: Scheme -> CurrencyAttributes -> Currency
data CurrencyAttributes
CurrencyAttributes :: Maybe AnyURI -> CurrencyAttributes
currenAttrib_currencyScheme :: CurrencyAttributes -> Maybe AnyURI

-- | List of Dates
data DateList
DateList :: [Date] -> DateList
dateList_date :: DateList -> [Date]

-- | A type defining an offset used in calculating a date when this date is
--   defined in reference to another date through a date offset. The type
--   includes the convention for adjusting the date and an optional
--   sequence element to indicate the order in a sequence of multiple date
--   offsets.
data DateOffset
DateOffset :: Maybe ID -> Integer -> PeriodEnum -> Maybe DayTypeEnum -> Maybe BusinessDayConventionEnum -> DateOffset
dateOffset_ID :: DateOffset -> Maybe ID

-- | A time period multiplier, e.g. 1, 2 or 3 etc. A negative value can be
--   used when specifying an offset relative to another date, e.g. -2 days.
dateOffset_periodMultiplier :: DateOffset -> Integer

-- | A time period, e.g. a day, week, month or year of the stream. If the
--   periodMultiplier value is 0 (zero) then period must contain the value
--   D (day).
dateOffset_period :: DateOffset -> PeriodEnum

-- | In the case of an offset specified as a number of days, this element
--   defines whether consideration is given as to whether a day is a good
--   business day or not. If a day type of business days is specified then
--   non-business days are ignored when calculating the offset. The
--   financial business centers to use for determination of business days
--   are implied by the context in which this element is used. This element
--   must only be included when the offset is specified as a number of
--   days. If the offset is zero days then the dayType element should not
--   be included.
dateOffset_dayType :: DateOffset -> Maybe DayTypeEnum

-- | The convention for adjusting a date if it would otherwise fall on a
--   day that is not a business day.
dateOffset_businessDayConvention :: DateOffset -> Maybe BusinessDayConventionEnum

-- | A type defining a contiguous series of calendar dates. The date range
--   is defined as all the dates between and including the first and the
--   last date. The first date must fall before the last date.
data DateRange
DateRange :: Maybe Date -> Maybe Date -> DateRange

-- | The first date of a date range.
dateRange_unadjustedFirstDate :: DateRange -> Maybe Date

-- | The last date of a date range.
dateRange_unadjustedLastDate :: DateRange -> Maybe Date

-- | Reference to an identified date or a complex date structure.
data DateReference
DateReference :: IDREF -> DateReference
dateRef_href :: DateReference -> IDREF

-- | List of DateTimes
data DateTimeList
DateTimeList :: [DateTime] -> DateTimeList
dateTimeList_dateTime :: DateTimeList -> [DateTime]

-- | The specification for how the number of days between two dates is
--   calculated for purposes of calculation of a fixed or floating payment
--   amount and the basis for how many days are assumed to be in a year.
--   Day Count Fraction is an ISDA term. The equivalent AFB (Association
--   Francaise de Banques) term is Calculation Basis.
data DayCountFraction
DayCountFraction :: Scheme -> DayCountFractionAttributes -> DayCountFraction
data DayCountFractionAttributes
DayCountFractionAttributes :: Maybe AnyURI -> DayCountFractionAttributes
dayCountFractAttrib_dayCountFractionScheme :: DayCountFractionAttributes -> Maybe AnyURI

-- | Coding scheme that specifies the method according to which an amount
--   or a date is determined.
data DeterminationMethod
DeterminationMethod :: Scheme -> DeterminationMethodAttributes -> DeterminationMethod
data DeterminationMethodAttributes
DeterminationMethodAttributes :: Maybe AnyURI -> Maybe ID -> DeterminationMethodAttributes
determMethodAttrib_determinationMethodScheme :: DeterminationMethodAttributes -> Maybe AnyURI
determMethodAttrib_ID :: DeterminationMethodAttributes -> Maybe ID

-- | A reference to the return swap notional determination method.
data DeterminationMethodReference
DeterminationMethodReference :: IDREF -> DeterminationMethodReference
determMethodRef_href :: DeterminationMethodReference -> IDREF

-- | An entity for defining the definitions that govern the document and
--   should include the year and type of definitions referenced, along with
--   any relevant documentation (such as master agreement) and the date it
--   was signed.
data Documentation
Documentation :: Maybe MasterAgreement -> (Maybe (OneOf2 MasterConfirmation BrokerConfirmation)) -> [ContractualDefinitions] -> [ContractualTermsSupplement] -> [ContractualMatrix] -> Maybe CreditSupportAgreement -> [Resource] -> Documentation

-- | The agreement executed between the parties and intended to govern all
--   OTC derivatives transactions between those parties.
docum_masterAgreement :: Documentation -> Maybe MasterAgreement

-- | Choice between:
--   
--   <ol>
--   <li>The agreement executed between the parties and intended to govern
--   all OTC derivatives transactions between those parties.</li>
--   <li>Specifies the deails for a broker confirm.</li>
--   </ol>
docum_choice1 :: Documentation -> (Maybe (OneOf2 MasterConfirmation BrokerConfirmation))

-- | The definitions such as those published by ISDA that will define the
--   terms of the trade.
docum_contractualDefinitions :: Documentation -> [ContractualDefinitions]

-- | A contractual supplement (such as those published by ISDA) that will
--   apply to the trade.
docum_contractualTermsSupplement :: Documentation -> [ContractualTermsSupplement]

-- | A reference to a contractual matrix of elected terms/values (such as
--   those published by ISDA) that shall be deemed to apply to the trade.
--   The applicable matrix is identified by reference to a name and
--   optionally a publication date. Depending on the structure of the
--   matrix, an additional term (specified in the matrixTerm element) may
--   be required to further identify a subset of applicable terms/values
--   within the matrix.
docum_contractualMatrix :: Documentation -> [ContractualMatrix]

-- | The agreement executed between the parties and intended to govern
--   collateral arrangement for all OTC derivatives transactions between
--   those parties.
docum_creditSupportAgreement :: Documentation -> Maybe CreditSupportAgreement

-- | A human readable document related to this transaction, for example a
--   confirmation.
docum_attachment :: Documentation -> [Resource]

-- | A for holding information about documents external to the FpML.
data ExternalDocument
ExternalDocument :: Maybe MimeType -> (Maybe (OneOf5 XsdString HexBinary Base64Binary AnyURI HTTPAttachmentReference)) -> ExternalDocument

-- | Indicates the type of media used to store the content. mimeType is
--   used to determine the software product(s) that can read the content.
--   MIME Types are described in RFC 2046.
externDocum_mimeType :: ExternalDocument -> Maybe MimeType

-- | Choice between:
--   
--   <ol>
--   <li>Provides extra information as string. In case the extra
--   information is in XML format, a CDATA section must be placed around
--   the source message to prevent its interpretation as XML content.</li>
--   <li>Provides extra information as binary contents coded in
--   hexadecimal.</li>
--   <li>Provides extra information as binary contents coded in
--   base64.</li>
--   <li>Provides extra information as URL that references the information
--   on a web server accessible to the message recipient.</li>
--   <li>Provides a place to put a reference to an attachment on an HTTP
--   message, such as is used by SOAP with Attachments and ebXML.</li>
--   </ol>
externDocum_choice1 :: ExternalDocument -> (Maybe (OneOf5 XsdString HexBinary Base64Binary AnyURI HTTPAttachmentReference))

-- | A special type that allows references to HTTP attachments identified
--   with an HTTP <a>Content-ID</a> header, as is done with SOAP with
--   Attachments (http:<i></i>www.w3.org<i>TR</i>SOAP-attachments). Unlike
--   with a normal FpML <tt>href, the type is not IDREF, as the target is
--   not identified by an XML </tt>id attribute.
data HTTPAttachmentReference
HTTPAttachmentReference :: XsdString -> HTTPAttachmentReference
hTTPAttachRef_href :: HTTPAttachmentReference -> XsdString

-- | A special type meant to be used for elements with no content and no
--   attributes.
data Empty
Empty :: Empty

-- | A legal entity identifier (e.g. RED entity code).
data EntityId
EntityId :: Scheme -> EntityIdAttributes -> EntityId
data EntityIdAttributes
EntityIdAttributes :: Maybe AnyURI -> EntityIdAttributes
entityIdAttrib_entityIdScheme :: EntityIdAttributes -> Maybe AnyURI

-- | The name of the reference entity. A free format string. FpML does not
--   define usage rules for this element.
data EntityName
EntityName :: Scheme -> EntityNameAttributes -> EntityName
data EntityNameAttributes
EntityNameAttributes :: Maybe AnyURI -> EntityNameAttributes
entityNameAttrib_entityNameScheme :: EntityNameAttributes -> Maybe AnyURI

-- | A type defining the exercise period for a European style option
--   together with any rules governing the notional amount of the
--   underlying which can be exercised on any given exercise date and any
--   associated exercise fees.
data EuropeanExercise
EuropeanExercise :: Maybe ID -> AdjustableOrRelativeDate -> Maybe AdjustableOrRelativeDates -> Maybe BusinessCenterTime -> Maybe BusinessCenterTime -> Maybe PartialExercise -> Maybe ExerciseFee -> EuropeanExercise
europExerc_ID :: EuropeanExercise -> Maybe ID

-- | The last day within an exercise period for an American style option.
--   For a European style option it is the only day within the exercise
--   period.
europExerc_expirationDate :: EuropeanExercise -> AdjustableOrRelativeDate

-- | The date on the underlying set by the exercise of an option. What this
--   date is depends on the option (e.g. in a swaption it is the swap
--   effective date, in an extendible/cancelable provision it is the swap
--   termination date).
europExerc_relevantUnderlyingDate :: EuropeanExercise -> Maybe AdjustableOrRelativeDates

-- | The earliest time at which notice of exercise can be given by the
--   buyer to the seller (or seller's agent) i) on the expriation date, in
--   the case of a European style option, (ii) on each bermuda option
--   exercise date and the expiration date, in the case of a Bermuda style
--   option the commencement date to, and including, the expiration date ,
--   in the case of an American option.
europExerc_earliestExerciseTime :: EuropeanExercise -> Maybe BusinessCenterTime

-- | The latest time for exercise on expirationDate.
europExerc_expirationTime :: EuropeanExercise -> Maybe BusinessCenterTime

-- | As defined in the 2000 ISDA Definitions, Section 12.3. Partial
--   Exercise, the buyer of the option has the right to exercise all or
--   less than all the notional amount of the underlying swap on the
--   expiration date, but may not exercise less than the minimum notional
--   amount, and if an integral multiple amount is specified, the notional
--   amount exercised must be equal to, or be an integral multiple of, the
--   integral multiple amount.
europExerc_partialExercise :: EuropeanExercise -> Maybe PartialExercise

-- | A fee to be paid on exercise. This could be represented as an amount
--   or a rate and notional reference on which to apply the rate.
europExerc_exerciseFee :: EuropeanExercise -> Maybe ExerciseFee

-- | A short form unique identifier for an exchange. If the element is not
--   present then the exchange shall be the primary exchange on which the
--   underlying is listed. The term <a>Exchange</a> is assumed to have the
--   meaning as defined in the ISDA 2002 Equity Derivatives Definitions.
data ExchangeId
ExchangeId :: Scheme -> ExchangeIdAttributes -> ExchangeId
data ExchangeIdAttributes
ExchangeIdAttributes :: Maybe AnyURI -> ExchangeIdAttributes
exchIdAttrib_exchangeIdScheme :: ExchangeIdAttributes -> Maybe AnyURI

-- | The abstract base class for all types which define way in which
--   options may be exercised.
data Exercise
Exercise_SharedAmericanExercise :: SharedAmericanExercise -> Exercise
Exercise_EuropeanExercise :: EuropeanExercise -> Exercise
Exercise_BermudaExercise :: BermudaExercise -> Exercise
Exercise_AmericanExercise :: AmericanExercise -> Exercise
Exercise_FxEuropeanExercise :: FxEuropeanExercise -> Exercise
Exercise_FxDigitalAmericanExercise :: FxDigitalAmericanExercise -> Exercise
Exercise_CommodityPhysicalEuropeanExercise :: CommodityPhysicalEuropeanExercise -> Exercise
Exercise_CommodityPhysicalAmericanExercise :: CommodityPhysicalAmericanExercise -> Exercise
Exercise_CommodityEuropeanExercise :: CommodityEuropeanExercise -> Exercise
Exercise_CommodityAmericanExercise :: CommodityAmericanExercise -> Exercise
Exercise_EquityEuropeanExercise :: EquityEuropeanExercise -> Exercise

-- | A type defining the fee payable on exercise of an option. This fee may
--   be defined as an amount or a percentage of the notional exercised.
data ExerciseFee
ExerciseFee :: Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe NotionalReference -> (Maybe (OneOf2 Decimal Decimal)) -> Maybe RelativeDateOffset -> ExerciseFee

-- | A reference to the party responsible for making the payments defined
--   by this structure.
exerciseFee_payerPartyReference :: ExerciseFee -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
exerciseFee_payerAccountReference :: ExerciseFee -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
exerciseFee_receiverPartyReference :: ExerciseFee -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
exerciseFee_receiverAccountReference :: ExerciseFee -> Maybe AccountReference

-- | A pointer style reference to the associated notional schedule defined
--   elsewhere in the document.
exerciseFee_notionalReference :: ExerciseFee -> Maybe NotionalReference

-- | Choice between:
--   
--   <ol>
--   <li>The amount of fee to be paid on exercise. The fee currency is that
--   of the referenced notional.</li>
--   <li>A fee represented as a percentage of some referenced notional. A
--   percentage of 5% would be represented as 0.05.</li>
--   </ol>
exerciseFee_choice5 :: ExerciseFee -> (Maybe (OneOf2 Decimal Decimal))

-- | The date on which exercise fee(s) will be paid. It is specified as a
--   relative date.
exerciseFee_feePaymentDate :: ExerciseFee -> Maybe RelativeDateOffset

-- | A type to define a fee or schedule of fees to be payable on the
--   exercise of an option. This fee may be defined as an amount or a
--   percentage of the notional exercised.
data ExerciseFeeSchedule
ExerciseFeeSchedule :: Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe ScheduleReference -> (Maybe (OneOf2 AmountSchedule Schedule)) -> Maybe RelativeDateOffset -> ExerciseFeeSchedule

-- | A reference to the party responsible for making the payments defined
--   by this structure.
exercFeeSched_payerPartyReference :: ExerciseFeeSchedule -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
exercFeeSched_payerAccountReference :: ExerciseFeeSchedule -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
exercFeeSched_receiverPartyReference :: ExerciseFeeSchedule -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
exercFeeSched_receiverAccountReference :: ExerciseFeeSchedule -> Maybe AccountReference

-- | A pointer style reference to the associated notional schedule defined
--   elsewhere in the document.
exercFeeSched_notionalReference :: ExerciseFeeSchedule -> Maybe ScheduleReference

-- | Choice between:
--   
--   <ol>
--   <li>The exercise fee amount schedule. The fees are expressed as
--   currency amounts. The currency of the fee is assumed to be that of the
--   notional schedule referenced.</li>
--   <li>The exercise free rate schedule. The fees are expressed as
--   percentage rates of the notional being exercised. The currency of the
--   fee is assumed to be that of the notional schedule referenced.</li>
--   </ol>
exercFeeSched_choice5 :: ExerciseFeeSchedule -> (Maybe (OneOf2 AmountSchedule Schedule))

-- | The date on which exercise fee(s) will be paid. It is specified as a
--   relative date.
exercFeeSched_feePaymentDate :: ExerciseFeeSchedule -> Maybe RelativeDateOffset

-- | A type defining to whom and where notice of execution should be given.
--   The partyReference refers to one of the principal parties of the
--   trade. If present the exerciseNoticePartyReference refers to a party,
--   other than the principal party, to whome notice should be given.
data ExerciseNotice
ExerciseNotice :: Maybe PartyReference -> Maybe PartyReference -> Maybe BusinessCenter -> ExerciseNotice

-- | The party referenced has allocated the trade identifier.
exercNotice_partyReference :: ExerciseNotice -> Maybe PartyReference

-- | The party referenced is the party to which notice of exercise should
--   be given by the buyer.
exerciseNotice_partyReference :: ExerciseNotice -> Maybe PartyReference
exercNotice_businessCenter :: ExerciseNotice -> Maybe BusinessCenter

-- | A type describing how notice of exercise should be given. This can be
--   either manual or automatic.
data ExerciseProcedure
ExerciseProcedure :: (Maybe (OneOf2 ManualExercise AutomaticExercise)) -> Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> ExerciseProcedure

-- | Choice between:
--   
--   <ol>
--   <li>Specifies that the notice of exercise must be given by the buyer
--   to the seller or seller's agent.</li>
--   <li>If automatic is specified then the notional amount of the
--   underlying swap, not previously exercised under the swaption will be
--   automatically exercised at the expriration time on the expiration date
--   if at such time the buyer is in-the-money, provided that the
--   difference between the settlement rate and the fixed rate under the
--   relevant underlying swap is not less than the specified threshold
--   rate. The term in-the-money is assumed to have the meaning defining in
--   the 2000 ISDA Definitions, Section 17.4 In-the-money.</li>
--   </ol>
exercProced_choice0 :: ExerciseProcedure -> (Maybe (OneOf2 ManualExercise AutomaticExercise))

-- | A flag to indicate whether follow-up confirmation of exercise (written
--   or electronic) is required following telephonic notice by the buyer to
--   the seller or seller's agent.
exercProced_followUpConfirmation :: ExerciseProcedure -> Maybe Boolean

-- | Has the meaning defined as part of the 1997 ISDA Government Bond
--   Option Definitions, section 4.5 Limited Right to Confirm Exercise. If
--   present, (i) the Seller may request the Buyer to confirm its intent if
--   not done on or before the expiration time on the Expiration date (ii)
--   specific rules will apply in relation to the settlement mode.
exercProced_limitedRightToConfirm :: ExerciseProcedure -> Maybe Boolean

-- | Typically applicable to the physical settlement of bond and
--   convertible bond options. If present, means that the Party required to
--   deliver the bonds will divide those to be delivered as notifying party
--   desires to facilitate delivery obligations.
exercProced_splitTicket :: ExerciseProcedure -> Maybe Boolean

-- | A type describing how notice of exercise should be given. This can be
--   either manual or automatic.
data ExerciseProcedureOption
ExerciseProcedureOption :: OneOf2 Empty Empty -> ExerciseProcedureOption

-- | Choice between:
--   
--   <ol>
--   <li>Specifies that the notice of exercise must be given by the buyer
--   to the seller or seller's agent.</li>
--   <li>If automatic is specified then the notional amount of the
--   underlying swap, not previously exercised under the swaption will be
--   automatically exercised at the expriration time on the expiration date
--   if at such time the buyer is in-the-money, provided that the
--   difference between the settlement rate and the fixed rate under the
--   relevant underlying swap is not less than the specified threshold
--   rate. The term in-the-money is assumed to have the meaning defining in
--   the 2000 ISDA Definitions, Section 17.4 In-the-money.</li>
--   </ol>
exercProcedOption_choice0 :: ExerciseProcedureOption -> OneOf2 Empty Empty

-- | A type defining a floating rate.
data FloatingRate
FloatingRate :: Maybe ID -> FloatingRateIndex -> Maybe Period -> Maybe Schedule -> [SpreadSchedule] -> Maybe RateTreatmentEnum -> [StrikeSchedule] -> [StrikeSchedule] -> FloatingRate
floatingRate_ID :: FloatingRate -> Maybe ID
floatingRate_index :: FloatingRate -> FloatingRateIndex

-- | The ISDA Designated Maturity, i.e. the tenor of the floating rate.
floatingRate_indexTenor :: FloatingRate -> Maybe Period

-- | A rate multiplier or multiplier schedule to apply to the floating
--   rate. A multiplier schedule is expressed as explicit multipliers and
--   dates. In the case of a schedule, the step dates may be subject to
--   adjustment in accordance with any adjustments specified in the
--   calculationPeriodDatesAdjustments. The multiplier can be a positive or
--   negative decimal. This element should only be included if the
--   multiplier is not equal to 1 (one) for the term of the stream.
floatingRate_multiplierSchedule :: FloatingRate -> Maybe Schedule

-- | The ISDA Spread or a Spread schedule expressed as explicit spreads and
--   dates. In the case of a schedule, the step dates may be subject to
--   adjustment in accordance with any adjustments specified in
--   calculationPeriodDatesAdjustments. The spread is a per annum rate,
--   expressed as a decimal. For purposes of determining a calculation
--   period amount, if positive the spread will be added to the floating
--   rate and if negative the spread will be subtracted from the floating
--   rate. A positive 10 basis point (0.1%) spread would be represented as
--   0.001.
floatingRate_spreadSchedule :: FloatingRate -> [SpreadSchedule]

-- | The specification of any rate conversion which needs to be applied to
--   the observed rate before being used in any calculations. The two
--   common conversions are for securities quoted on a bank discount basis
--   which will need to be converted to either a Money Market Yield or Bond
--   Equivalent Yield. See the Annex to the 2000 ISDA Definitions, Section
--   7.3. Certain General Definitions Relating to Floating Rate Options,
--   paragraphs (g) and (h) for definitions of these terms.
floatingRate_rateTreatment :: FloatingRate -> Maybe RateTreatmentEnum

-- | The cap rate or cap rate schedule, if any, which applies to the
--   floating rate. The cap rate (strike) is only required where the
--   floating rate on a swap stream is capped at a certain level. A cap
--   rate schedule is expressed as explicit cap rates and dates and the
--   step dates may be subject to adjustment in accordance with any
--   adjustments specified in calculationPeriodDatesAdjustments. The cap
--   rate is assumed to be exclusive of any spread and is a per annum rate,
--   expressed as a decimal. A cap rate of 5% would be represented as 0.05.
floatingRate_capRateSchedule :: FloatingRate -> [StrikeSchedule]

-- | The floor rate or floor rate schedule, if any, which applies to the
--   floating rate. The floor rate (strike) is only required where the
--   floating rate on a swap stream is floored at a certain strike level. A
--   floor rate schedule is expressed as explicit floor rates and dates and
--   the step dates may be subject to adjustment in accordance with any
--   adjustments specified in calculationPeriodDatesAdjustments. The floor
--   rate is assumed to be exclusive of any spread and is a per annum rate,
--   expressed as a decimal. A floor rate of 5% would be represented as
--   0.05.
floatingRate_floorRateSchedule :: FloatingRate -> [StrikeSchedule]

-- | A type defining the floating rate and definitions relating to the
--   calculation of floating rate amounts.
data FloatingRateCalculation
FloatingRateCalculation :: Maybe ID -> FloatingRateIndex -> Maybe Period -> Maybe Schedule -> [SpreadSchedule] -> Maybe RateTreatmentEnum -> [StrikeSchedule] -> [StrikeSchedule] -> Maybe Decimal -> Maybe Rounding -> Maybe AveragingMethodEnum -> Maybe NegativeInterestRateTreatmentEnum -> FloatingRateCalculation
floatRateCalc_ID :: FloatingRateCalculation -> Maybe ID
floatRateCalc_floatingRateIndex :: FloatingRateCalculation -> FloatingRateIndex

-- | The ISDA Designated Maturity, i.e. the tenor of the floating rate.
floatRateCalc_indexTenor :: FloatingRateCalculation -> Maybe Period

-- | A rate multiplier or multiplier schedule to apply to the floating
--   rate. A multiplier schedule is expressed as explicit multipliers and
--   dates. In the case of a schedule, the step dates may be subject to
--   adjustment in accordance with any adjustments specified in the
--   calculationPeriodDatesAdjustments. The multiplier can be a positive or
--   negative decimal. This element should only be included if the
--   multiplier is not equal to 1 (one) for the term of the stream.
floatRateCalc_floatingRateMultiplierSchedule :: FloatingRateCalculation -> Maybe Schedule

-- | The ISDA Spread or a Spread schedule expressed as explicit spreads and
--   dates. In the case of a schedule, the step dates may be subject to
--   adjustment in accordance with any adjustments specified in
--   calculationPeriodDatesAdjustments. The spread is a per annum rate,
--   expressed as a decimal. For purposes of determining a calculation
--   period amount, if positive the spread will be added to the floating
--   rate and if negative the spread will be subtracted from the floating
--   rate. A positive 10 basis point (0.1%) spread would be represented as
--   0.001.
floatRateCalc_spreadSchedule :: FloatingRateCalculation -> [SpreadSchedule]

-- | The specification of any rate conversion which needs to be applied to
--   the observed rate before being used in any calculations. The two
--   common conversions are for securities quoted on a bank discount basis
--   which will need to be converted to either a Money Market Yield or Bond
--   Equivalent Yield. See the Annex to the 2000 ISDA Definitions, Section
--   7.3. Certain General Definitions Relating to Floating Rate Options,
--   paragraphs (g) and (h) for definitions of these terms.
floatRateCalc_rateTreatment :: FloatingRateCalculation -> Maybe RateTreatmentEnum

-- | The cap rate or cap rate schedule, if any, which applies to the
--   floating rate. The cap rate (strike) is only required where the
--   floating rate on a swap stream is capped at a certain level. A cap
--   rate schedule is expressed as explicit cap rates and dates and the
--   step dates may be subject to adjustment in accordance with any
--   adjustments specified in calculationPeriodDatesAdjustments. The cap
--   rate is assumed to be exclusive of any spread and is a per annum rate,
--   expressed as a decimal. A cap rate of 5% would be represented as 0.05.
floatRateCalc_capRateSchedule :: FloatingRateCalculation -> [StrikeSchedule]

-- | The floor rate or floor rate schedule, if any, which applies to the
--   floating rate. The floor rate (strike) is only required where the
--   floating rate on a swap stream is floored at a certain strike level. A
--   floor rate schedule is expressed as explicit floor rates and dates and
--   the step dates may be subject to adjustment in accordance with any
--   adjustments specified in calculationPeriodDatesAdjustments. The floor
--   rate is assumed to be exclusive of any spread and is a per annum rate,
--   expressed as a decimal. A floor rate of 5% would be represented as
--   0.05.
floatRateCalc_floorRateSchedule :: FloatingRateCalculation -> [StrikeSchedule]

-- | The initial floating rate reset agreed between the principal parties
--   involved in the trade. This is assumed to be the first required reset
--   rate for the first regular calculation period. It should only be
--   included when the rate is not equal to the rate published on the
--   source implied by the floating rate index. An initial rate of 5% would
--   be represented as 0.05.
floatRateCalc_initialRate :: FloatingRateCalculation -> Maybe Decimal

-- | The rounding convention to apply to the final rate used in
--   determination of a calculation period amount.
floatRateCalc_finalRateRounding :: FloatingRateCalculation -> Maybe Rounding

-- | If averaging is applicable, this component specifies whether a
--   weighted or unweighted average method of calculation is to be used.
--   The component must only be included when averaging applies.
floatRateCalc_averagingMethod :: FloatingRateCalculation -> Maybe AveragingMethodEnum

-- | The specification of any provisions for calculating payment
--   obligations when a floating rate is negative (either due to a quoted
--   negative floating rate or by operation of a spread that is subtracted
--   from the floating rate).
floatRateCalc_negativeInterestRateTreatment :: FloatingRateCalculation -> Maybe NegativeInterestRateTreatmentEnum

-- | The ISDA Floating Rate Option, i.e. the floating rate index.
data FloatingRateIndex
FloatingRateIndex :: Scheme -> FloatingRateIndexAttributes -> FloatingRateIndex
data FloatingRateIndexAttributes
FloatingRateIndexAttributes :: Maybe AnyURI -> FloatingRateIndexAttributes
floatRateIndexAttrib_floatingRateIndexScheme :: FloatingRateIndexAttributes -> Maybe AnyURI

-- | A type defining a rate index.
data ForecastRateIndex
ForecastRateIndex :: Maybe FloatingRateIndex -> Maybe Period -> ForecastRateIndex

-- | The ISDA Floating Rate Option, i.e. the floating rate index.
forecRateIndex_floatingRateIndex :: ForecastRateIndex -> Maybe FloatingRateIndex

-- | The ISDA Designated Maturity, i.e. the tenor of the floating rate.
forecRateIndex_indexTenor :: ForecastRateIndex -> Maybe Period

-- | A type describing a financial formula, with its description and
--   components.
data Formula
Formula :: Maybe XsdString -> Maybe Math -> [FormulaComponent] -> Formula

-- | Text description of the formula
formula_description :: Formula -> Maybe XsdString

-- | An element for containing an XML representation of the formula.
--   Defined using xsd:any currently for flexibility in choice of language
--   (MathML, OpenMath)
formula_math :: Formula -> Maybe Math

-- | Elements describing the components of the formula. The name attribute
--   points to a value used in the math element. The href attribute points
--   to a value elsewhere in the document
formula_component :: Formula -> [FormulaComponent]

-- | Elements describing the components of the formula. The name attribute
--   points to a value used in the math element. The href attribute points
--   to a numeric value defined elsewhere in the document that is used by
--   the formula component.
data FormulaComponent
FormulaComponent :: Maybe NormalizedString -> Maybe XsdString -> Maybe Formula -> FormulaComponent
formulaCompon_name :: FormulaComponent -> Maybe NormalizedString

-- | Text description of the component
formulaCompon_componentDescription :: FormulaComponent -> Maybe XsdString

-- | Additional formulas required to describe this component
formulaCompon_formula :: FormulaComponent -> Maybe Formula

-- | A type defining a time frequency, e.g. one day, three months. Used for
--   specifying payment or calculation frequencies at which the value T
--   (Term) is applicable.
data Frequency
Frequency :: Maybe ID -> Maybe PositiveInteger -> Maybe PeriodExtendedEnum -> Frequency
frequency_ID :: Frequency -> Maybe ID

-- | A time period multiplier, e.g. 1, 2 or 3 etc. If the period value is T
--   (Term) then periodMultiplier must contain the value 1.
frequency_periodMultiplier :: Frequency -> Maybe PositiveInteger

-- | A time period, e.g. a day, week, month, year or term of the stream.
frequency_period :: Frequency -> Maybe PeriodExtendedEnum

-- | A type defining a currency amount as at a future value date.
data FutureValueAmount
FutureValueAmount :: Maybe ID -> Currency -> NonNegativeDecimal -> Maybe PositiveInteger -> Maybe Date -> FutureValueAmount
futureValueAmount_ID :: FutureValueAmount -> Maybe ID

-- | The currency in which an amount is denominated.
futureValueAmount_currency :: FutureValueAmount -> Currency

-- | The non negative monetary quantity in currency units.
futureValueAmount_amount :: FutureValueAmount -> NonNegativeDecimal

-- | The number of days from the adjusted calculation period start date to
--   the adjusted value date, calculated in accordance with the applicable
--   day count fraction.
futureValueAmount_calculationPeriodNumberOfDays :: FutureValueAmount -> Maybe PositiveInteger

-- | Adjusted value date of the future value amount.
futureValueAmount_valueDate :: FutureValueAmount -> Maybe Date

-- | A type that specifies the source for and timing of a fixing of an
--   exchange rate. This is used in the agreement of non-deliverable
--   forward trades as well as various types of FX OTC options that require
--   observations against a particular rate.
data FxFixing
FxFixing :: Maybe QuotedCurrencyPair -> Maybe Date -> Maybe FxSpotRateSource -> FxFixing

-- | Defines the two currencies for an FX trade and the quotation
--   relationship between the two currencies.
fxFixing_quotedCurrencyPair :: FxFixing -> Maybe QuotedCurrencyPair

-- | Describes the specific date when a non-deliverable forward or
--   cash-settled option will <a>fix</a> against a particular rate, which
--   will be used to compute the ultimate cash settlement. This element
--   should be omitted where a single, discrete fixing date cannot be
--   identified e.g. on an american option, where fixing may occur at any
--   date on a continuous range.
fxFixing_fixingDate :: FxFixing -> Maybe Date

-- | Specifies the methodology (reference source and, optionally, fixing
--   time) to be used for determining a currency conversion rate.
fxFixing_fxSpotRateSource :: FxFixing -> Maybe FxSpotRateSource

-- | A type that is used for describing cash settlement of an option / non
--   deliverable forward. It includes the currency to settle into together
--   with the fixings required to calculate the currency amount.
data FxCashSettlement
FxCashSettlement :: Maybe Currency -> [FxFixing] -> FxCashSettlement

-- | The currency in which cash settlement occurs for non-deliverable
--   forwards and cash-settled options (non-deliverable or otherwise).
fxCashSettl_settlementCurrency :: FxCashSettlement -> Maybe Currency

-- | Specifies the source for and timing of a fixing of an exchange rate.
--   This is used in the agreement of non-deliverable forward trades as
--   well as various types of FX OTC options that require observations
--   against a particular rate. This element is optional, permitting it to
--   be omitted where fixing details are unavailable at the point of
--   message creation. It has multiple occurrence to support the case where
--   fixing details must be specified for more than one currency pair e.g.
--   on an option settled into a third currency (that is not one of the
--   option currencies).
fxCashSettl_fixing :: FxCashSettlement -> [FxFixing]

-- | A type describing the rate of a currency conversion: pair of currency,
--   quotation mode and exchange rate.
data FxRate
FxRate :: Maybe QuotedCurrencyPair -> Maybe Decimal -> FxRate

-- | Defines the two currencies for an FX trade and the quotation
--   relationship between the two currencies.
fxRate_quotedCurrencyPair :: FxRate -> Maybe QuotedCurrencyPair

-- | The rate of exchange between the two currencies of the leg of a deal.
--   Must be specified with a quote basis.
fxRate_rate :: FxRate -> Maybe Decimal

-- | A type defining the source and time for an fx rate.
data FxSpotRateSource
FxSpotRateSource :: Maybe InformationSource -> Maybe InformationSource -> Maybe BusinessCenterTime -> FxSpotRateSource

-- | The primary source for where the rate observation will occur. Will
--   typically be either a page or a reference bank published rate.
fxSpotRateSource_primaryRateSource :: FxSpotRateSource -> Maybe InformationSource

-- | An alternative, or secondary, source for where the rate observation
--   will occur. Will typically be either a page or a reference bank
--   published rate.
fxSpotRateSource_secondaryRateSource :: FxSpotRateSource -> Maybe InformationSource

-- | The time at which the spot currency exchange rate will be observed. It
--   is specified as a time in a business day calendar location, e.g.
--   11:00am London time.
fxSpotRateSource_fixingTime :: FxSpotRateSource -> Maybe BusinessCenterTime

-- | An entity for defining a generic agreement executed between two
--   parties for any purpose.
data GenericAgreement
GenericAgreement :: Maybe AgreementType -> Maybe AgreementVersion -> Maybe Date -> [Date] -> Maybe GoverningLaw -> GenericAgreement

-- | The type of agreement executed between the parties.
genericAgreem_type :: GenericAgreement -> Maybe AgreementType

-- | The version of the agreement.
genericAgreem_version :: GenericAgreement -> Maybe AgreementVersion

-- | The date on which the agreement was signed.
genericAgreem_date :: GenericAgreement -> Maybe Date

-- | A date on which the agreement was amended.
genericAgreem_amendmentDate :: GenericAgreement -> [Date]

-- | Identification of the law governing the agreement.
genericAgreem_governingLaw :: GenericAgreement -> Maybe GoverningLaw

-- | Identification of the law governing the transaction.
data GoverningLaw
GoverningLaw :: Scheme -> GoverningLawAttributes -> GoverningLaw
data GoverningLawAttributes
GoverningLawAttributes :: Maybe AnyURI -> GoverningLawAttributes
governLawAttrib_governingLawScheme :: GoverningLawAttributes -> Maybe AnyURI

-- | A payment component owed from one party to the other for the cash flow
--   date. This payment component should by of only a single type, e.g. a
--   fee or a cashflow from a cashflow stream.
data GrossCashflow
GrossCashflow :: Maybe CashflowId -> Maybe PartyTradeIdentifierReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe Money -> Maybe CashflowType -> GrossCashflow

-- | Unique identifier for a cash flow.
grossCashfl_cashflowId :: GrossCashflow -> Maybe CashflowId

-- | Pointer-style reference to the partyTradeIdentifier block within the
--   tradeIdentifyingItems collection, which identifies the parent trade
--   for this cashflow.
grossCashfl_partyTradeIdentifierReference :: GrossCashflow -> Maybe PartyTradeIdentifierReference

-- | A reference to the party responsible for making the payments defined
--   by this structure.
grossCashfl_payerPartyReference :: GrossCashflow -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
grossCashfl_payerAccountReference :: GrossCashflow -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
grossCashfl_receiverPartyReference :: GrossCashflow -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
grossCashfl_receiverAccountReference :: GrossCashflow -> Maybe AccountReference

-- | Cash flow amount in a given currency to be paid/received.
grossCashfl_cashflowAmount :: GrossCashflow -> Maybe Money

-- | Defines the type of cash flow. For instance, a type of fee, premium,
--   principal exchange, leg fee.
grossCashfl_cashflowType :: GrossCashflow -> Maybe CashflowType

-- | Specifies Currency with ID attribute.
data IdentifiedCurrency
IdentifiedCurrency :: Currency -> IdentifiedCurrencyAttributes -> IdentifiedCurrency
data IdentifiedCurrencyAttributes
IdentifiedCurrencyAttributes :: Maybe ID -> IdentifiedCurrencyAttributes
identCurrenAttrib_ID :: IdentifiedCurrencyAttributes -> Maybe ID

-- | Reference to a currency with ID attribute
data IdentifiedCurrencyReference
IdentifiedCurrencyReference :: IDREF -> IdentifiedCurrencyReference
identCurrenRef_href :: IdentifiedCurrencyReference -> IDREF

-- | A date which can be referenced elsewhere.
data IdentifiedDate
IdentifiedDate :: Date -> IdentifiedDateAttributes -> IdentifiedDate
data IdentifiedDateAttributes
IdentifiedDateAttributes :: Maybe ID -> IdentifiedDateAttributes
identDateAttrib_ID :: IdentifiedDateAttributes -> Maybe ID

-- | A type extending the PayerReceiverEnum type wih an id attribute.
data IdentifiedPayerReceiver
IdentifiedPayerReceiver :: PayerReceiverEnum -> IdentifiedPayerReceiverAttributes -> IdentifiedPayerReceiver
data IdentifiedPayerReceiverAttributes
IdentifiedPayerReceiverAttributes :: Maybe ID -> IdentifiedPayerReceiverAttributes
identPayerReceivAttrib_ID :: IdentifiedPayerReceiverAttributes -> Maybe ID

-- | A party's industry sector classification.
data IndustryClassification
IndustryClassification :: Scheme -> IndustryClassificationAttributes -> IndustryClassification
data IndustryClassificationAttributes
IndustryClassificationAttributes :: Maybe AnyURI -> IndustryClassificationAttributes
industClassAttrib_industryClassificationScheme :: IndustryClassificationAttributes -> Maybe AnyURI
data InformationProvider
InformationProvider :: Scheme -> InformationProviderAttributes -> InformationProvider
data InformationProviderAttributes
InformationProviderAttributes :: Maybe AnyURI -> InformationProviderAttributes
infoProvidAttrib_informationProviderScheme :: InformationProviderAttributes -> Maybe AnyURI

-- | A type defining the source for a piece of information (e.g. a rate
--   refix or an fx fixing).
data InformationSource
InformationSource :: Maybe InformationProvider -> Maybe RateSourcePage -> Maybe XsdString -> InformationSource

-- | An information source for obtaining a market rate. For example
--   Bloomberg, Reuters, Telerate etc.
infoSource_rateSource :: InformationSource -> Maybe InformationProvider

-- | A specific page for the rate source for obtaining a market rate.
infoSource_rateSourcePage :: InformationSource -> Maybe RateSourcePage

-- | The heading for the rate source on a given rate source page.
infoSource_rateSourcePageHeading :: InformationSource -> Maybe XsdString

-- | A short form unique identifier for a security.
data InstrumentId
InstrumentId :: Scheme -> InstrumentIdAttributes -> InstrumentId
data InstrumentIdAttributes
InstrumentIdAttributes :: AnyURI -> InstrumentIdAttributes
instrIdAttrib_instrumentIdScheme :: InstrumentIdAttributes -> AnyURI

-- | A type defining the way in which interests are accrued: the applicable
--   rate (fixed or floating reference) and the compounding method.
data InterestAccrualsCompoundingMethod
InterestAccrualsCompoundingMethod :: OneOf2 FloatingRateCalculation Decimal -> Maybe CompoundingMethodEnum -> InterestAccrualsCompoundingMethod

-- | Choice between:
--   
--   <ol>
--   <li>The floating rate calculation definitions</li>
--   <li>The calculation period fixed rate. A per annum rate, expressed as
--   a decimal. A fixed rate of 5% would be represented as 0.05.</li>
--   </ol>
interAccruCompoMethod_choice0 :: InterestAccrualsCompoundingMethod -> OneOf2 FloatingRateCalculation Decimal

-- | If more that one calculation period contributes to a single payment
--   amount this element specifies whether compounding is applicable, and
--   if so, what compounding method is to be used. This element must only
--   be included when more that one calculation period contributes to a
--   single payment amount.
interAccruCompoMethod_compoundingMethod :: InterestAccrualsCompoundingMethod -> Maybe CompoundingMethodEnum

-- | A type describing the method for accruing interests on dividends. Can
--   be either a fixed rate reference or a floating rate reference.
data InterestAccrualsMethod
InterestAccrualsMethod :: OneOf2 FloatingRateCalculation Decimal -> InterestAccrualsMethod

-- | Choice between:
--   
--   <ol>
--   <li>The floating rate calculation definitions</li>
--   <li>The calculation period fixed rate. A per annum rate, expressed as
--   a decimal. A fixed rate of 5% would be represented as 0.05.</li>
--   </ol>
interAccruMethod_choice0 :: InterestAccrualsMethod -> OneOf2 FloatingRateCalculation Decimal

-- | A type that describes the information to identify an intermediary
--   through which payment will be made by the correspondent bank to the
--   ultimate beneficiary of the funds.
data IntermediaryInformation
IntermediaryInformation :: (Maybe (OneOf3 RoutingIds RoutingExplicitDetails RoutingIdsAndExplicitDetails)) -> Maybe PositiveInteger -> Maybe PartyReference -> IntermediaryInformation

-- | Choice between:
--   
--   <ol>
--   <li>A set of unique identifiers for a party, eachone identifying the
--   party within a payment system. The assumption is that each party will
--   not have more than one identifier within the same payment system.</li>
--   <li>A set of details that is used to identify a party involved in the
--   routing of a payment when the party does not have a code that
--   identifies it within one of the recognized payment systems.</li>
--   <li>A combination of coded payment system identifiers and details for
--   physical addressing for a party involved in the routing of a
--   payment.</li>
--   </ol>
intermInfo_choice0 :: IntermediaryInformation -> (Maybe (OneOf3 RoutingIds RoutingExplicitDetails RoutingIdsAndExplicitDetails))

-- | A sequence number that gives the position of the current intermediary
--   in the chain of payment intermediaries. The assumed domain value set
--   is an ascending sequence of integers starting from 1.
intermInfo_intermediarySequenceNumber :: IntermediaryInformation -> Maybe PositiveInteger

-- | Reference to the party acting as intermediary.
intermInfo_intermediaryPartyReference :: IntermediaryInformation -> Maybe PartyReference

-- | The type of interpolation used.
data InterpolationMethod
InterpolationMethod :: Scheme -> InterpolationMethodAttributes -> InterpolationMethod
data InterpolationMethodAttributes
InterpolationMethodAttributes :: Maybe AnyURI -> InterpolationMethodAttributes
interpMethodAttrib_interpolationMethodScheme :: InterpolationMethodAttributes -> Maybe AnyURI

-- | The data type used for indicating the language of the resource,
--   described using the ISO 639-2/T Code.
data Language
Language :: Scheme -> LanguageAttributes -> Language
data LanguageAttributes
LanguageAttributes :: Maybe AnyURI -> LanguageAttributes
languAttrib_languageScheme :: LanguageAttributes -> Maybe AnyURI

-- | A supertype of leg. All swap legs extend this type.
data Leg
Leg_InterestRateStream :: InterestRateStream -> Leg
Leg_FxSwapLeg :: FxSwapLeg -> Leg
Leg_DirectionalLeg :: DirectionalLeg -> Leg
Leg_CommoditySwapLeg :: CommoditySwapLeg -> Leg
Leg_CommodityForwardLeg :: CommodityForwardLeg -> Leg
Leg_FeeLeg :: FeeLeg -> Leg

-- | A type defining a legal entity.
data LegalEntity
LegalEntity :: Maybe ID -> (Maybe (OneOf1 (Maybe (EntityName), [EntityId]))) -> LegalEntity
legalEntity_ID :: LegalEntity -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The name of the reference entity. A free format string. FpML does
--   not define usage rules for this element.</li>
--   <li>A legal entity identifier (e.g. RED entity code).</li>
--   </ul>
legalEntity_choice0 :: LegalEntity -> (Maybe (OneOf1 (Maybe (EntityName), [EntityId])))

-- | References a credit entity defined elsewhere in the document.
data LegalEntityReference
LegalEntityReference :: IDREF -> LegalEntityReference
legalEntityRef_href :: LegalEntityReference -> IDREF

-- | A type to define the main publication source.
data MainPublication
MainPublication :: Scheme -> MainPublicationAttributes -> MainPublication
data MainPublicationAttributes
MainPublicationAttributes :: Maybe AnyURI -> MainPublicationAttributes
mainPublicAttrib_mainPublicationScheme :: MainPublicationAttributes -> Maybe AnyURI

-- | A type defining manual exercise, i.e. that the option buyer
--   counterparty must give notice to the option seller of exercise.
data ManualExercise
ManualExercise :: Maybe ExerciseNotice -> Maybe Boolean -> ManualExercise

-- | Definition of the party to whom notice of exercise should be given.
manualExerc_exerciseNotice :: ManualExercise -> Maybe ExerciseNotice

-- | If fallback exercise is specified then the notional amount of the
--   underlying swap, not previously exercised under the swaption, will be
--   automatically exercised at the expiration time on the expiration date
--   if at such time the buyer is in-the-money, provided that the
--   difference between the settlement rate and the fixed rate under the
--   relevant underlying swap is not less than one tenth of a percentage
--   point (0.10% or 0.001). The term in-the-money is assumed to have the
--   meaning defined in the 2000 ISDA Definitions, Section 17.4.
--   In-the-money.
manualExerc_fallbackExercise :: ManualExercise -> Maybe Boolean

-- | An entity for defining the agreement executed between the parties and
--   intended to govern all OTC derivatives transactions between those
--   parties.
data MasterAgreement
MasterAgreement :: Maybe MasterAgreementType -> Maybe MasterAgreementVersion -> Maybe Date -> MasterAgreement

-- | The agreement executed between the parties and intended to govern
--   product-specific derivatives transactions between those parties.
masterAgreement_type :: MasterAgreement -> Maybe MasterAgreementType

-- | The version of the master agreement.
masterAgreement_version :: MasterAgreement -> Maybe MasterAgreementVersion

-- | The date on which the master agreement was signed.
masterAgreement_date :: MasterAgreement -> Maybe Date
data MasterAgreementType
MasterAgreementType :: Scheme -> MasterAgreementTypeAttributes -> MasterAgreementType
data MasterAgreementTypeAttributes
MasterAgreementTypeAttributes :: Maybe AnyURI -> MasterAgreementTypeAttributes
masterAgreemTypeAttrib_masterAgreementTypeScheme :: MasterAgreementTypeAttributes -> Maybe AnyURI
data MasterAgreementVersion
MasterAgreementVersion :: Scheme -> MasterAgreementVersionAttributes -> MasterAgreementVersion
data MasterAgreementVersionAttributes
MasterAgreementVersionAttributes :: Maybe AnyURI -> MasterAgreementVersionAttributes
masterAgreemVersionAttrib_masterAgreementVersionScheme :: MasterAgreementVersionAttributes -> Maybe AnyURI

-- | An entity for defining the master confirmation agreement executed
--   between the parties.
data MasterConfirmation
MasterConfirmation :: Maybe MasterConfirmationType -> Maybe Date -> Maybe Date -> Maybe MasterConfirmationAnnexType -> MasterConfirmation

-- | The type of master confirmation executed between the parties.
masterConfirmation_type :: MasterConfirmation -> Maybe MasterConfirmationType

-- | The date of the confirmation executed between the parties and intended
--   to govern all relevant transactions between those parties.
masterConfirmation_date :: MasterConfirmation -> Maybe Date

-- | The date that an annex to the master confirmation was executed between
--   the parties.
masterConfirmation_annexDate :: MasterConfirmation -> Maybe Date

-- | The type of master confirmation annex executed between the parties.
masterConfirmation_annexType :: MasterConfirmation -> Maybe MasterConfirmationAnnexType
data MasterConfirmationAnnexType
MasterConfirmationAnnexType :: Scheme -> MasterConfirmationAnnexTypeAttributes -> MasterConfirmationAnnexType
data MasterConfirmationAnnexTypeAttributes
MasterConfirmationAnnexTypeAttributes :: Maybe AnyURI -> MasterConfirmationAnnexTypeAttributes
mcata_masterConfirmationAnnexTypeScheme :: MasterConfirmationAnnexTypeAttributes -> Maybe AnyURI
data MasterConfirmationType
MasterConfirmationType :: Scheme -> MasterConfirmationTypeAttributes -> MasterConfirmationType
data MasterConfirmationTypeAttributes
MasterConfirmationTypeAttributes :: Maybe AnyURI -> MasterConfirmationTypeAttributes
masterConfirTypeAttrib_masterConfirmationTypeScheme :: MasterConfirmationTypeAttributes -> Maybe AnyURI

-- | An identifier used to identify matched cashflows.
data MatchId
MatchId :: Scheme -> MatchIdAttributes -> MatchId
data MatchIdAttributes
MatchIdAttributes :: Maybe AnyURI -> MatchIdAttributes
matchIdAttrib_matchIdScheme :: MatchIdAttributes -> Maybe AnyURI

-- | A type defining a mathematical expression.
data Math
Math :: String -> [AnyElement] -> String -> Math
math_text0 :: Math -> String
math_any1 :: Math -> [AnyElement]
math_text2 :: Math -> String
data MatrixType
MatrixType :: Scheme -> MatrixTypeAttributes -> MatrixType
data MatrixTypeAttributes
MatrixTypeAttributes :: Maybe AnyURI -> MatrixTypeAttributes
matrixTypeAttrib_matrixTypeScheme :: MatrixTypeAttributes -> Maybe AnyURI
data MatrixTerm
MatrixTerm :: Scheme -> MatrixTermAttributes -> MatrixTerm
data MatrixTermAttributes
MatrixTermAttributes :: Maybe AnyURI -> MatrixTermAttributes
matrixTermAttrib_matrixTermScheme :: MatrixTermAttributes -> Maybe AnyURI

-- | The type that indicates the type of media used to store the content.
--   MimeType is used to determine the software product(s) that can read
--   the content. MIME types are described in RFC 2046.
data MimeType
MimeType :: Scheme -> MimeTypeAttributes -> MimeType
data MimeTypeAttributes
MimeTypeAttributes :: Maybe AnyURI -> MimeTypeAttributes
mimeTypeAttrib_mimeTypeScheme :: MimeTypeAttributes -> Maybe AnyURI

-- | A type defining a currency amount.
data Money
Money :: Maybe ID -> Currency -> Decimal -> Money
money_ID :: Money -> Maybe ID

-- | The currency in which an amount is denominated.
money_currency :: Money -> Currency

-- | The monetary quantity in currency units.
money_amount :: Money -> Decimal

-- | Abstract base class for all money types.
data MoneyBase
MoneyBase_PositiveMoney :: PositiveMoney -> MoneyBase
MoneyBase_NonNegativeMoney :: NonNegativeMoney -> MoneyBase
MoneyBase_Money :: Money -> MoneyBase

-- | A type defining multiple exercises. As defining in the 2000 ISDA
--   Definitions, Section 12.4. Multiple Exercise, the buyer of the option
--   has the right to exercise all or less than all the unexercised
--   notional amount of the underlying swap on one or more days in the
--   exercise period, but on any such day may not exercise less than the
--   minimum notional amount or more than the maximum notional amount, and
--   if an integral multiple amount is specified, the notional exercised
--   must be equal to or, be an integral multiple of, the integral multiple
--   amount.
data MultipleExercise
MultipleExercise :: [NotionalReference] -> Maybe Decimal -> (Maybe (OneOf2 Decimal NonNegativeInteger)) -> (Maybe (OneOf2 Decimal NonNegativeDecimal)) -> MultipleExercise

-- | A pointer style reference to the associated notional schedule defined
--   elsewhere in the document. This element has been made optional as part
--   of its integration in the OptionBaseExtended, because not required for
--   the options on securities.
multiExerc_notionalReference :: MultipleExercise -> [NotionalReference]

-- | A notional amount which restricts the amount of notional that can be
--   exercised when partial exercise or multiple exercise is applicable.
--   The integral multiple amount defines a lower limit of notional that
--   can be exercised and also defines a unit multiple of notional that can
--   be exercised, i.e. only integer multiples of this amount can be
--   exercised.
multiExerc_integralMultipleAmount :: MultipleExercise -> Maybe Decimal

-- | Choice between:
--   
--   <ol>
--   <li>The minimum notional amount that can be exercised on a given
--   exercise date. See multipleExercise.</li>
--   <li>The minimum number of options that can be exercised on a given
--   exercise date.</li>
--   </ol>
multiExerc_choice2 :: MultipleExercise -> (Maybe (OneOf2 Decimal NonNegativeInteger))

-- | Choice between:
--   
--   <ol>
--   <li>The maximum notional amount that can be exercised on a given
--   exercise date.</li>
--   <li>The maximum number of options that can be exercised on a given
--   exercise date. If the number is not specified, it means that the
--   maximum number of options corresponds to the remaining unexercised
--   options.</li>
--   </ol>
multiExerc_choice3 :: MultipleExercise -> (Maybe (OneOf2 Decimal NonNegativeDecimal))

-- | A type defining a currency amount or a currency amount schedule.
data NonNegativeAmountSchedule
NonNegativeAmountSchedule :: Maybe ID -> NonNegativeDecimal -> [NonNegativeStep] -> Maybe Currency -> NonNegativeAmountSchedule
nonNegatAmountSched_ID :: NonNegativeAmountSchedule -> Maybe ID

-- | The non-negative initial rate or amount, as the case may be. An
--   initial rate of 5% would be represented as 0.05.
nonNegatAmountSched_initialValue :: NonNegativeAmountSchedule -> NonNegativeDecimal

-- | The schedule of step date and non-negative value pairs. On each step
--   date the associated step value becomes effective. A list of steps may
--   be ordered in the document by ascending step date. An FpML document
--   containing an unordered list of steps is still regarded as a
--   conformant document.
nonNegatAmountSched_step :: NonNegativeAmountSchedule -> [NonNegativeStep]

-- | The currency in which an amount is denominated.
nonNegatAmountSched_currency :: NonNegativeAmountSchedule -> Maybe Currency

-- | A type defining a non negative money amount.
data NonNegativeMoney
NonNegativeMoney :: Maybe ID -> Currency -> NonNegativeDecimal -> NonNegativeMoney
nonNegatMoney_ID :: NonNegativeMoney -> Maybe ID

-- | The currency in which an amount is denominated.
nonNegatMoney_currency :: NonNegativeMoney -> Currency

-- | The non negative monetary quantity in currency units.
nonNegatMoney_amount :: NonNegativeMoney -> NonNegativeDecimal

-- | A complex type to specify non negative payments.
data NonNegativePayment
NonNegativePayment :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe AdjustableOrRelativeDate -> Maybe NonNegativeMoney -> NonNegativePayment
nonNegatPayment_ID :: NonNegativePayment -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
nonNegatPayment_payerPartyReference :: NonNegativePayment -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
nonNegatPayment_payerAccountReference :: NonNegativePayment -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
nonNegatPayment_receiverPartyReference :: NonNegativePayment -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
nonNegatPayment_receiverAccountReference :: NonNegativePayment -> Maybe AccountReference

-- | The payment date, which can be expressed as either an adjustable or
--   relative date.
nonNegatPayment_paymentDate :: NonNegativePayment -> Maybe AdjustableOrRelativeDate

-- | Non negative payment amount.
nonNegatPayment_paymentAmount :: NonNegativePayment -> Maybe NonNegativeMoney

-- | A type defining a schedule of non-negative rates or amounts in terms
--   of an initial value and then a series of step date and value pairs. On
--   each step date the rate or amount changes to the new step value. The
--   series of step date and value pairs are optional. If not specified,
--   this implies that the initial value remains unchanged over time.
data NonNegativeSchedule
NonNegativeSchedule :: Maybe ID -> NonNegativeDecimal -> [NonNegativeStep] -> NonNegativeSchedule
nonNegatSched_ID :: NonNegativeSchedule -> Maybe ID

-- | The non-negative initial rate or amount, as the case may be. An
--   initial rate of 5% would be represented as 0.05.
nonNegatSched_initialValue :: NonNegativeSchedule -> NonNegativeDecimal

-- | The schedule of step date and non-negative value pairs. On each step
--   date the associated step value becomes effective. A list of steps may
--   be ordered in the document by ascending step date. An FpML document
--   containing an unordered list of steps is still regarded as a
--   conformant document.
nonNegatSched_step :: NonNegativeSchedule -> [NonNegativeStep]

-- | A type defining a step date and non-negative step value pair. This
--   step definitions are used to define varying rate or amount schedules,
--   e.g. a notional amortization or a step-up coupon schedule.
data NonNegativeStep
NonNegativeStep :: Maybe ID -> Maybe Date -> Maybe NonNegativeDecimal -> NonNegativeStep
nonNegatStep_ID :: NonNegativeStep -> Maybe ID

-- | The date on which the associated stepValue becomes effective. This day
--   may be subject to adjustment in accordance with a business day
--   convention.
nonNegatStep_stepDate :: NonNegativeStep -> Maybe Date

-- | The non-negative rate or amount which becomes effective on the
--   associated stepDate. A rate of 5% would be represented as 0.05.
nonNegatStep_stepValue :: NonNegativeStep -> Maybe NonNegativeDecimal

-- | A complex type to specify the notional amount.
data NotionalAmount
NotionalAmount :: Maybe ID -> Currency -> NonNegativeDecimal -> NotionalAmount
notionAmount_ID :: NotionalAmount -> Maybe ID

-- | The currency in which an amount is denominated.
notionAmount_currency :: NotionalAmount -> Currency

-- | The non negative monetary quantity in currency units.
notionAmount_amount :: NotionalAmount -> NonNegativeDecimal

-- | A reference to the notional amount.
data NotionalAmountReference
NotionalAmountReference :: IDREF -> NotionalAmountReference
notionAmountRef_href :: NotionalAmountReference -> IDREF

-- | A reference to the notional amount.
data NotionalReference
NotionalReference :: IDREF -> NotionalReference
notionRef_href :: NotionalReference -> IDREF

-- | A type defining an offset used in calculating a new date relative to a
--   reference date. Currently, the only offsets defined are expected to be
--   expressed as either calendar or business day offsets.
data Offset
Offset :: Maybe ID -> Integer -> PeriodEnum -> Maybe DayTypeEnum -> Offset
offset_ID :: Offset -> Maybe ID

-- | A time period multiplier, e.g. 1, 2 or 3 etc. A negative value can be
--   used when specifying an offset relative to another date, e.g. -2 days.
offset_periodMultiplier :: Offset -> Integer

-- | A time period, e.g. a day, week, month or year of the stream. If the
--   periodMultiplier value is 0 (zero) then period must contain the value
--   D (day).
offset_period :: Offset -> PeriodEnum

-- | In the case of an offset specified as a number of days, this element
--   defines whether consideration is given as to whether a day is a good
--   business day or not. If a day type of business days is specified then
--   non-business days are ignored when calculating the offset. The
--   financial business centers to use for determination of business days
--   are implied by the context in which this element is used. This element
--   must only be included when the offset is specified as a number of
--   days. If the offset is zero days then the dayType element should not
--   be included.
offset_dayType :: Offset -> Maybe DayTypeEnum

-- | Allows the specification of a time that may be on a day prior or
--   subsequent to the day in question. This type is intended for use with
--   a day of the week (i.e. where no actual date is specified) as part of,
--   for example, a period that runs from 23:00-07:00 on a series of days
--   and where holidays on the actual days would affect the entire time
--   period.
data OffsetPrevailingTime
OffsetPrevailingTime :: Maybe PrevailingTime -> Maybe Offset -> OffsetPrevailingTime
offsetPrevaTime_time :: OffsetPrevailingTime -> Maybe PrevailingTime

-- | Indicates whether time applies to the actual day specified (in which
--   case this element should be omitted) the day prior to that day (in
--   which case periodMultiplier should be -1 and period should be Day) or
--   the day subsequent to that day (in which case periodMultiplier should
--   be 1 and period should be Day).
offsetPrevaTime_offset :: OffsetPrevailingTime -> Maybe Offset
data OnBehalfOf
OnBehalfOf :: Maybe PartyReference -> [AccountReference] -> OnBehalfOf

-- | The party for which the message reciever should work.
onBehalfOf_partyReference :: OnBehalfOf -> Maybe PartyReference

-- | Identifies the account(s) related to the party when they can be
--   determined from the party alone, for example in a inter-book trade.
onBehalfOf_accountReference :: OnBehalfOf -> [AccountReference]
data OriginatingEvent
OriginatingEvent :: Scheme -> OriginatingEventAttributes -> OriginatingEvent
data OriginatingEventAttributes
OriginatingEventAttributes :: Maybe AnyURI -> OriginatingEventAttributes
originEventAttrib_originatingEventScheme :: OriginatingEventAttributes -> Maybe AnyURI

-- | A type defining partial exercise. As defined in the 2000 ISDA
--   Definitions, Section 12.3 Partial Exercise, the buyer of the option
--   may exercise all or less than all the notional amount of the
--   underlying swap but may not be less than the minimum notional amount
--   (if specified) and must be an integral multiple of the integral
--   multiple amount if specified.
data PartialExercise
PartialExercise :: [NotionalReference] -> Maybe Decimal -> (Maybe (OneOf2 Decimal NonNegativeInteger)) -> PartialExercise

-- | A pointer style reference to the associated notional schedule defined
--   elsewhere in the document. This element has been made optional as part
--   of its integration in the OptionBaseExtended, because not required for
--   the options on securities.
partialExerc_notionalReference :: PartialExercise -> [NotionalReference]

-- | A notional amount which restricts the amount of notional that can be
--   exercised when partial exercise or multiple exercise is applicable.
--   The integral multiple amount defines a lower limit of notional that
--   can be exercised and also defines a unit multiple of notional that can
--   be exercised, i.e. only integer multiples of this amount can be
--   exercised.
partialExerc_integralMultipleAmount :: PartialExercise -> Maybe Decimal

-- | Choice between:
--   
--   <ol>
--   <li>The minimum notional amount that can be exercised on a given
--   exercise date. See multipleExercise.</li>
--   <li>The minimum number of options that can be exercised on a given
--   exercise date.</li>
--   </ol>
partialExerc_choice2 :: PartialExercise -> (Maybe (OneOf2 Decimal NonNegativeInteger))
data Party
Party :: ID -> [PartyId] -> Maybe PartyName -> [IndustryClassification] -> [CreditRating] -> Maybe CountryCode -> [GoverningLaw] -> Maybe OrganizationType -> Maybe ContactInformation -> [BusinessUnit] -> [Person] -> Party

-- | The id uniquely identifying the Party within the document.
party_ID :: Party -> ID

-- | A party identifier, e.g. a S.W.I.F.T. bank identifier code (BIC).
party_id :: Party -> [PartyId]

-- | The legal name of the organization. A free format string. FpML does
--   not define usage rules for this element.
party_name :: Party -> Maybe PartyName

-- | The party's industry sector classification.
party_classification :: Party -> [IndustryClassification]

-- | The party's credit rating.
party_creditRating :: Party -> [CreditRating]

-- | The country where the party is domiciled.
party_country :: Party -> Maybe CountryCode

-- | The legal jurisdiction of the entity's registration.
party_jurisdiction :: Party -> [GoverningLaw]

-- | The country where the party is domiciled.
party_organizationType :: Party -> Maybe OrganizationType

-- | Information on how to contact the party using various means.
party_contactInfo :: Party -> Maybe ContactInformation

-- | Optional organization unit information used to describe the
--   organization units (e.g. trading desks) involved in a transaction or
--   business process .
party_businessUnit :: Party -> [BusinessUnit]

-- | Optional information about people involved in a transaction or busines
--   process. (These are eomployees of the party).
party_person :: Party -> [Person]

-- | The data type used for party identifiers.
data PartyId
PartyId :: Scheme -> PartyIdAttributes -> PartyId
data PartyIdAttributes
PartyIdAttributes :: Maybe AnyURI -> PartyIdAttributes
partyIdAttrib_partyIdScheme :: PartyIdAttributes -> Maybe AnyURI

-- | The data type used for the legal name of an organization.
data PartyName
PartyName :: Scheme -> PartyNameAttributes -> PartyName
data PartyNameAttributes
PartyNameAttributes :: Maybe AnyURI -> PartyNameAttributes
partyNameAttrib_partyNameScheme :: PartyNameAttributes -> Maybe AnyURI

-- | Reference to a party.
data PartyReference
PartyReference :: IDREF -> PartyReference
partyRef_href :: PartyReference -> IDREF
data PartyRelationship
PartyRelationship :: PartyReference -> Maybe AccountReference -> Maybe PartyRole -> Maybe PartyRoleType -> Maybe Date -> Maybe Date -> Maybe PartyRelationshipDocumentation -> PartyRelationship

-- | Reference to a party.
partyRelat_partyReference :: PartyRelationship -> PartyReference

-- | Reference to an account.
partyRelat_accountReference :: PartyRelationship -> Maybe AccountReference

-- | The category of the relationship. The related party performs the role
--   specified in this field for the base party. For example, if the role
--   is <a>Guarantor</a>, the related party acts as a guarantor for the
--   base party.
partyRelat_role :: PartyRelationship -> Maybe PartyRole

-- | Additional definition refining the type of relationship. For example,
--   if the <a>role</a> is Guarantor, this element may be used to specify
--   whether all positions are guaranteed, or only a subset of them.
partyRelat_type :: PartyRelationship -> Maybe PartyRoleType

-- | The date on which the relationship begins or began.
partyRelat_effectiveDate :: PartyRelationship -> Maybe Date

-- | The date on which the relationship ends or ended.
partyRelat_terminationDate :: PartyRelationship -> Maybe Date

-- | Describes the agreements that define the party relationship.
partyRelat_documentation :: PartyRelationship -> Maybe PartyRelationshipDocumentation

-- | A description of the legal agreement(s) and definitions that document
--   a party's relationships with other parties
data PartyRelationshipDocumentation
PartyRelationshipDocumentation :: [OneOf3 MasterAgreement CreditSupportAgreement GenericAgreement] -> PartyRelationshipDocumentation

-- | Choice between:
--   
--   <ol>
--   <li>A agreement executed between two parties that includes or
--   references the related party.</li>
--   <li>An agreement executed between two parties intended to govern
--   collateral arrangement for OTC derivatives transactions between those
--   parties, and that references the related party.</li>
--   <li>An agrement that references the related party.</li>
--   </ol>
partyRelatDocum_choice0 :: PartyRelationshipDocumentation -> [OneOf3 MasterAgreement CreditSupportAgreement GenericAgreement]

-- | A type describing a role played by a party in one or more
--   transactions. Examples include roles such as guarantor, custodian,
--   confirmation service provider, etc. This can be extended to provide
--   custom roles.
data PartyRole
PartyRole :: Scheme -> PartyRoleAttributes -> PartyRole
data PartyRoleAttributes
PartyRoleAttributes :: Maybe AnyURI -> PartyRoleAttributes
partyRoleAttrib_partyRoleScheme :: PartyRoleAttributes -> Maybe AnyURI

-- | A type refining the role a role played by a party in one or more
--   transactions. Examples include <a>AllPositions</a> and
--   <a>SomePositions</a> for Guarantor. This can be extended to provide
--   custom types.
data PartyRoleType
PartyRoleType :: Scheme -> PartyRoleTypeAttributes -> PartyRoleType
data PartyRoleTypeAttributes
PartyRoleTypeAttributes :: Maybe AnyURI -> PartyRoleTypeAttributes
partyRoleTypeAttrib_partyRoleTypeScheme :: PartyRoleTypeAttributes -> Maybe AnyURI

-- | Reference to an organizational unit.
data BusinessUnitReference
BusinessUnitReference :: IDREF -> BusinessUnitReference
busUnitRef_href :: BusinessUnitReference -> IDREF

-- | Reference to an individual.
data PersonReference
PersonReference :: IDREF -> PersonReference
personRef_href :: PersonReference -> IDREF

-- | A reference to a partyTradeIdentifier object.
data PartyTradeIdentifierReference
PartyTradeIdentifierReference :: IDREF -> PartyTradeIdentifierReference
partyTradeIdentRef_href :: PartyTradeIdentifierReference -> IDREF

-- | A type for defining payments
data Payment
Payment :: Maybe ID -> Maybe IDREF -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> NonNegativeMoney -> Maybe AdjustableOrAdjustedDate -> Maybe PaymentType -> Maybe SettlementInformation -> Maybe Decimal -> Maybe Money -> Payment
payment_ID :: Payment -> Maybe ID

-- | Can be used to reference the yield curve used to estimate the discount
--   factor
payment_href :: Payment -> Maybe IDREF

-- | A reference to the party responsible for making the payments defined
--   by this structure.
payment_payerPartyReference :: Payment -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
payment_payerAccountReference :: Payment -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
payment_receiverPartyReference :: Payment -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
payment_receiverAccountReference :: Payment -> Maybe AccountReference

-- | The currency amount of the payment.
payment_amount :: Payment -> NonNegativeMoney

-- | The payment date. This date is subject to adjustment in accordance
--   with any applicable business day convention.
payment_date :: Payment -> Maybe AdjustableOrAdjustedDate

-- | A classification of the type of fee or additional payment, e.g.
--   brokerage, upfront fee etc. FpML does not define domain values for
--   this element.
payment_type :: Payment -> Maybe PaymentType

-- | The information required to settle a currency payment that results
--   from a trade.
payment_settlementInformation :: Payment -> Maybe SettlementInformation

-- | The value representing the discount factor used to calculate the
--   present value of the cash flow.
payment_discountFactor :: Payment -> Maybe Decimal

-- | The amount representing the present value of the forecast payment.
payment_presentValueAmount :: Payment -> Maybe Money

-- | An abstract base class for payment types.
data PaymentBase
PaymentBase_SimplePayment :: SimplePayment -> PaymentBase
PaymentBase_PaymentBaseExtended :: PaymentBaseExtended -> PaymentBase
PaymentBase_Payment :: Payment -> PaymentBase
PaymentBase_PendingPayment :: PendingPayment -> PaymentBase
PaymentBase_FeaturePayment :: FeaturePayment -> PaymentBase
PaymentBase_PaymentCalculationPeriod :: PaymentCalculationPeriod -> PaymentBase
PaymentBase_ReturnSwapAdditionalPayment :: ReturnSwapAdditionalPayment -> PaymentBase
PaymentBase_EquityPremium :: EquityPremium -> PaymentBase
PaymentBase_PaymentDetail :: PaymentDetail -> PaymentBase
PaymentBase_FixedPaymentAmount :: FixedPaymentAmount -> PaymentBase
PaymentBase_SinglePayment :: SinglePayment -> PaymentBase
PaymentBase_PeriodicPayment :: PeriodicPayment -> PaymentBase
PaymentBase_InitialPayment :: InitialPayment -> PaymentBase
PaymentBase_PrePayment :: PrePayment -> PaymentBase

-- | Base type for payments.
data PaymentBaseExtended
PaymentBaseExtended_PositivePayment :: PositivePayment -> PaymentBaseExtended
PaymentBaseExtended_NonNegativePayment :: NonNegativePayment -> PaymentBaseExtended

-- | Details on the referenced payment. e.g. Its cashflow components,
--   settlement details.
data PaymentDetails
PaymentDetails :: Maybe PaymentReference -> [GrossCashflow] -> Maybe SettlementInformation -> PaymentDetails

-- | The reference to the identified payment strucutre.
paymentDetails_paymentReference :: PaymentDetails -> Maybe PaymentReference

-- | Payment details of this cash flow component, including currency,
--   amount and payer/payee.
paymentDetails_grossCashflow :: PaymentDetails -> [GrossCashflow]

-- | The information required to settle a currency payment.
paymentDetails_settlementInformation :: PaymentDetails -> Maybe SettlementInformation

-- | An identifier used to identify a matchable payment.
data PaymentId
PaymentId :: Scheme -> PaymentIdAttributes -> PaymentId
data PaymentIdAttributes
PaymentIdAttributes :: Maybe AnyURI -> PaymentIdAttributes
paymentIdAttrib_paymentIdScheme :: PaymentIdAttributes -> Maybe AnyURI

-- | Reference to a payment.
data PaymentReference
PaymentReference :: IDREF -> PaymentReference
paymentRef_href :: PaymentReference -> IDREF
data PaymentType
PaymentType :: Scheme -> PaymentTypeAttributes -> PaymentType
data PaymentTypeAttributes
PaymentTypeAttributes :: Maybe AnyURI -> PaymentTypeAttributes
paymentTypeAttrib_paymentTypeScheme :: PaymentTypeAttributes -> Maybe AnyURI

-- | A type to define recurring periods or time offsets.
data Period
Period :: Maybe ID -> Integer -> PeriodEnum -> Period
period_ID :: Period -> Maybe ID

-- | A time period multiplier, e.g. 1, 2 or 3 etc. A negative value can be
--   used when specifying an offset relative to another date, e.g. -2 days.
period_multiplier :: Period -> Integer

-- | A time period, e.g. a day, week, month or year of the stream. If the
--   periodMultiplier value is 0 (zero) then period must contain the value
--   D (day).
period :: Period -> PeriodEnum
data PeriodicDates
PeriodicDates :: Maybe AdjustableOrRelativeDate -> Maybe AdjustableOrRelativeDate -> Maybe CalculationPeriodFrequency -> Maybe BusinessDayAdjustments -> PeriodicDates
periodDates_calculationStartDate :: PeriodicDates -> Maybe AdjustableOrRelativeDate
periodDates_calculationEndDate :: PeriodicDates -> Maybe AdjustableOrRelativeDate

-- | The frequency at which calculation period end dates occur with the
--   regular part of the calculation period schedule and their roll date
--   convention.
periodDates_calculationPeriodFrequency :: PeriodicDates -> Maybe CalculationPeriodFrequency

-- | The business day convention to apply to each calculation period end
--   date if it would otherwise fall on a day that is not a business day in
--   the specified financial business centers.
periodDates_calculationPeriodDatesAdjustments :: PeriodicDates -> Maybe BusinessDayAdjustments

-- | A type defining a currency amount or a currency amount schedule.
data PositiveAmountSchedule
PositiveAmountSchedule :: Maybe ID -> PositiveDecimal -> [PositiveStep] -> Maybe Currency -> PositiveAmountSchedule
positAmountSched_ID :: PositiveAmountSchedule -> Maybe ID

-- | The strictly-positive initial rate or amount, as the case may be. An
--   initial rate of 5% would be represented as 0.05.
positAmountSched_initialValue :: PositiveAmountSchedule -> PositiveDecimal

-- | The schedule of step date and strictly-positive value pairs. On each
--   step date the associated step value becomes effective. A list of steps
--   may be ordered in the document by ascending step date. An FpML
--   document containing an unordered list of steps is still regarded as a
--   conformant document.
positAmountSched_step :: PositiveAmountSchedule -> [PositiveStep]

-- | The currency in which an amount is denominated.
positAmountSched_currency :: PositiveAmountSchedule -> Maybe Currency

-- | A type defining a positive money amount
data PositiveMoney
PositiveMoney :: Maybe ID -> Currency -> Maybe PositiveDecimal -> PositiveMoney
positMoney_ID :: PositiveMoney -> Maybe ID

-- | The currency in which an amount is denominated.
positMoney_currency :: PositiveMoney -> Currency

-- | The positive monetary quantity in currency units.
positMoney_amount :: PositiveMoney -> Maybe PositiveDecimal

-- | A complex type to specify positive payments.
data PositivePayment
PositivePayment :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe AdjustableOrRelativeDate -> Maybe PositiveMoney -> PositivePayment
positPayment_ID :: PositivePayment -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
positPayment_payerPartyReference :: PositivePayment -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
positPayment_payerAccountReference :: PositivePayment -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
positPayment_receiverPartyReference :: PositivePayment -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
positPayment_receiverAccountReference :: PositivePayment -> Maybe AccountReference

-- | The payment date, which can be expressed as either an adjustable or
--   relative date.
positPayment_paymentDate :: PositivePayment -> Maybe AdjustableOrRelativeDate

-- | Positive payment amount.
positPayment_paymentAmount :: PositivePayment -> Maybe PositiveMoney

-- | A type defining a schedule of strictly-postive rates or amounts in
--   terms of an initial value and then a series of step date and value
--   pairs. On each step date the rate or amount changes to the new step
--   value. The series of step date and value pairs are optional. If not
--   specified, this implies that the initial value remains unchanged over
--   time.
data PositiveSchedule
PositiveSchedule :: Maybe ID -> PositiveDecimal -> [PositiveStep] -> PositiveSchedule
positSched_ID :: PositiveSchedule -> Maybe ID

-- | The strictly-positive initial rate or amount, as the case may be. An
--   initial rate of 5% would be represented as 0.05.
positSched_initialValue :: PositiveSchedule -> PositiveDecimal

-- | The schedule of step date and strictly-positive value pairs. On each
--   step date the associated step value becomes effective. A list of steps
--   may be ordered in the document by ascending step date. An FpML
--   document containing an unordered list of steps is still regarded as a
--   conformant document.
positSched_step :: PositiveSchedule -> [PositiveStep]

-- | A type defining a step date and strictly-positive step value pair.
--   This step definitions are used to define varying rate or amount
--   schedules, e.g. a notional amortization or a step-up coupon schedule.
data PositiveStep
PositiveStep :: Maybe ID -> Maybe Date -> Maybe PositiveDecimal -> PositiveStep
positiveStep_ID :: PositiveStep -> Maybe ID

-- | The date on which the associated stepValue becomes effective. This day
--   may be subject to adjustment in accordance with a business day
--   convention.
positiveStep_stepDate :: PositiveStep -> Maybe Date

-- | The strictly positive rate or amount which becomes effective on the
--   associated stepDate. A rate of 5% would be represented as 0.05.
positiveStep_stepValue :: PositiveStep -> Maybe PositiveDecimal

-- | A type for defining a time with respect to a geographic location, for
--   example 11:00 Phoenix, USA. This type should be used where a wider
--   range of locations than those available as business centres is
--   required.
data PrevailingTime
PrevailingTime :: Maybe HourMinuteTime -> Maybe TimezoneLocation -> PrevailingTime

-- | A time specified in hh:mm:ss format where the second component must be
--   '00', e.g. 11am would be represented as 11:00:00.
prevaTime_hourMinuteTime :: PrevailingTime -> Maybe HourMinuteTime

-- | The geographic location to which the hourMinuteTime applies. The time
--   takes into account any current day light saving changes or other
--   adjustments i.e. it is the prevaling time at the location.
prevaTime_location :: PrevailingTime -> Maybe TimezoneLocation

-- | An abstract pricing structure base type. Used as a base for structures
--   such as yield curves and volatility matrices.
data PricingStructure
PricingStructure_YieldCurve :: YieldCurve -> PricingStructure
PricingStructure_VolatilityRepresentation :: VolatilityRepresentation -> PricingStructure
PricingStructure_FxCurve :: FxCurve -> PricingStructure
PricingStructure_CreditCurve :: CreditCurve -> PricingStructure

-- | Reference to a pricing structure or any derived components (i.e. yield
--   curve).
data PricingStructureReference
PricingStructureReference :: IDREF -> PricingStructureReference
pricingStructRef_href :: PricingStructureReference -> IDREF

-- | A type defining which principal exchanges occur for the stream.
data PrincipalExchanges
PrincipalExchanges :: Maybe ID -> Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> PrincipalExchanges
princExchan_ID :: PrincipalExchanges -> Maybe ID

-- | A true/false flag to indicate whether there is an initial exchange of
--   principal on the effective date.
princExchan_initialExchange :: PrincipalExchanges -> Maybe Boolean

-- | A true/false flag to indicate whether there is a final exchange of
--   principal on the termination date.
princExchan_finalExchange :: PrincipalExchanges -> Maybe Boolean

-- | A true/false flag to indicate whether there are intermediate or
--   interim exchanges of principal during the term of the swap.
princExchan_intermediateExchange :: PrincipalExchanges -> Maybe Boolean

-- | The base type which all FpML products extend.
data Product
Product_StandardProduct :: StandardProduct -> Product
Product_Option :: Option -> Product
Product_Swaption :: Swaption -> Product
Product_Swap :: Swap -> Product
Product_Fra :: Fra -> Product
Product_CapFloor :: CapFloor -> Product
Product_BulletPayment :: BulletPayment -> Product
Product_GenericProduct :: GenericProduct -> Product
Product_TermDeposit :: TermDeposit -> Product
Product_FxSwap :: FxSwap -> Product
Product_FxSingleLeg :: FxSingleLeg -> Product
Product_ReturnSwapBase :: ReturnSwapBase -> Product
Product_NettedSwapBase :: NettedSwapBase -> Product
Product_Strategy :: Strategy -> Product
Product_InstrumentTradeDetails :: InstrumentTradeDetails -> Product
Product_DividendSwapTransactionSupplement :: DividendSwapTransactionSupplement -> Product
Product_CommoditySwaption :: CommoditySwaption -> Product
Product_CommoditySwap :: CommoditySwap -> Product
Product_CommodityOption :: CommodityOption -> Product
Product_CommodityForward :: CommodityForward -> Product
Product_CreditDefaultSwap :: CreditDefaultSwap -> Product
Product_EquityDerivativeBase :: EquityDerivativeBase -> Product
Product_VarianceSwapTransactionSupplement :: VarianceSwapTransactionSupplement -> Product
data ProductId
ProductId :: Scheme -> ProductIdAttributes -> ProductId
data ProductIdAttributes
ProductIdAttributes :: Maybe AnyURI -> ProductIdAttributes
productIdAttrib_productIdScheme :: ProductIdAttributes -> Maybe AnyURI

-- | Reference to a full FpML product.
data ProductReference
ProductReference :: IDREF -> ProductReference
productRef_href :: ProductReference -> IDREF
data ProductType
ProductType :: Scheme -> ProductTypeAttributes -> ProductType
data ProductTypeAttributes
ProductTypeAttributes :: Maybe AnyURI -> ProductTypeAttributes
productTypeAttrib_productTypeScheme :: ProductTypeAttributes -> Maybe AnyURI

-- | A type that describes the composition of a rate that has been quoted
--   or is to be quoted. This includes the two currencies and the quotation
--   relationship between the two currencies and is used as a building
--   block throughout the FX specification.
data QuotedCurrencyPair
QuotedCurrencyPair :: Maybe Currency -> Maybe Currency -> Maybe QuoteBasisEnum -> QuotedCurrencyPair

-- | The first currency specified when a pair of currencies is to be
--   evaluated.
quotedCurrenPair_currency1 :: QuotedCurrencyPair -> Maybe Currency

-- | The second currency specified when a pair of currencies is to be
--   evaluated.
quotedCurrenPair_currency2 :: QuotedCurrencyPair -> Maybe Currency

-- | The method by which the exchange rate is quoted.
quotedCurrenPair_quoteBasis :: QuotedCurrencyPair -> Maybe QuoteBasisEnum

-- | The abstract base class for all types which define interest rate
--   streams.
data Rate
Rate_FloatingRate :: FloatingRate -> Rate

-- | Reference to any rate (floating, inflation) derived from the abstract
--   Rate component.
data RateReference
RateReference :: IDREF -> RateReference
rateRef_href :: RateReference -> IDREF

-- | A type defining parameters associated with an individual observation
--   or fixing. This type forms part of the cashflow representation of a
--   stream.
data RateObservation
RateObservation :: Maybe ID -> Maybe Date -> Maybe Date -> Maybe Decimal -> Maybe Decimal -> Maybe PositiveInteger -> Maybe RateReference -> Maybe Decimal -> Maybe Decimal -> RateObservation
rateObserv_ID :: RateObservation -> Maybe ID

-- | The reset date.
rateObserv_resetDate :: RateObservation -> Maybe Date

-- | The adjusted fixing date, i.e. the actual date the rate is observed.
--   The date should already be adjusted for any applicable business day
--   convention.
rateObserv_adjustedFixingDate :: RateObservation -> Maybe Date

-- | The actual observed rate before any required rate treatment is
--   applied, e.g. before converting a rate quoted on a discount basis to
--   an equivalent yield. An observed rate of 5% would be represented as
--   0.05.
rateObserv_observedRate :: RateObservation -> Maybe Decimal

-- | The observed rate after any required rate treatment is applied. A
--   treated rate of 5% would be represented as 0.05.
rateObserv_treatedRate :: RateObservation -> Maybe Decimal

-- | The number of days weighting to be associated with the rate
--   observation, i.e. the number of days such rate is in effect. This is
--   applicable in the case of a weighted average method of calculation
--   where more than one reset date is established for a single calculation
--   period.
rateObserv_observationWeight :: RateObservation -> Maybe PositiveInteger

-- | A pointer style reference to a floating rate component defined as part
--   of a stub calculation period amount component. It is only required
--   when it is necessary to distinguish two rate observations for the same
--   fixing date which could occur when linear interpolation of two
--   different rates occurs for a stub calculation period.
rateObserv_rateReference :: RateObservation -> Maybe RateReference

-- | The value representing the forecast rate used to calculate the
--   forecast future value of the accrual period.A value of 1% should be
--   represented as 0.01
rateObserv_forecastRate :: RateObservation -> Maybe Decimal

-- | The value representing the forecast rate after applying rate treatment
--   rules. A value of 1% should be represented as 0.01
rateObserv_treatedForecastRate :: RateObservation -> Maybe Decimal
data RateSourcePage
RateSourcePage :: Scheme -> RateSourcePageAttributes -> RateSourcePage
data RateSourcePageAttributes
RateSourcePageAttributes :: Maybe AnyURI -> RateSourcePageAttributes
rateSourcePageAttrib_rateSourcePageScheme :: RateSourcePageAttributes -> Maybe AnyURI

-- | The abstract base class for all types which define intra-document
--   pointers.
data Reference
Reference_SpreadScheduleReference :: SpreadScheduleReference -> Reference
Reference_ScheduleReference :: ScheduleReference -> Reference
Reference_ReturnSwapNotionalAmountReference :: ReturnSwapNotionalAmountReference -> Reference
Reference_ProductReference :: ProductReference -> Reference
Reference_PricingStructureReference :: PricingStructureReference -> Reference
Reference_PaymentReference :: PaymentReference -> Reference
Reference_PartyTradeIdentifierReference :: PartyTradeIdentifierReference -> Reference
Reference_PersonReference :: PersonReference -> Reference
Reference_BusinessUnitReference :: BusinessUnitReference -> Reference
Reference_PartyReference :: PartyReference -> Reference
Reference_NotionalReference :: NotionalReference -> Reference
Reference_NotionalAmountReference :: NotionalAmountReference -> Reference
Reference_LegalEntityReference :: LegalEntityReference -> Reference
Reference_IdentifiedCurrencyReference :: IdentifiedCurrencyReference -> Reference
Reference_HTTPAttachmentReference :: HTTPAttachmentReference -> Reference
Reference_DeterminationMethodReference :: DeterminationMethodReference -> Reference
Reference_DateReference :: DateReference -> Reference
Reference_BusinessDayAdjustmentsReference :: BusinessDayAdjustmentsReference -> Reference
Reference_BusinessCentersReference :: BusinessCentersReference -> Reference
Reference_AmountReference :: AmountReference -> Reference
Reference_AccountReference :: AccountReference -> Reference
Reference_AssetReference :: AssetReference -> Reference
Reference_AnyAssetReference :: AnyAssetReference -> Reference
Reference_CreditEventsReference :: CreditEventsReference -> Reference
Reference_ValuationDatesReference :: ValuationDatesReference -> Reference
Reference_ResetDatesReference :: ResetDatesReference -> Reference
Reference_RelevantUnderlyingDateReference :: RelevantUnderlyingDateReference -> Reference
Reference_PaymentDatesReference :: PaymentDatesReference -> Reference
Reference_InterestRateStreamReference :: InterestRateStreamReference -> Reference
Reference_CalculationPeriodDatesReference :: CalculationPeriodDatesReference -> Reference
Reference_MoneyReference :: MoneyReference -> Reference
Reference_InterestLegCalculationPeriodDatesReference :: InterestLegCalculationPeriodDatesReference -> Reference
Reference_FloatingRateCalculationReference :: FloatingRateCalculationReference -> Reference
Reference_SettlementPeriodsReference :: SettlementPeriodsReference -> Reference
Reference_QuantityReference :: QuantityReference -> Reference
Reference_QuantityScheduleReference :: QuantityScheduleReference -> Reference
Reference_LagReference :: LagReference -> Reference
Reference_CalculationPeriodsScheduleReference :: CalculationPeriodsScheduleReference -> Reference
Reference_CalculationPeriodsReference :: CalculationPeriodsReference -> Reference
Reference_CalculationPeriodsDatesReference :: CalculationPeriodsDatesReference -> Reference
Reference_SettlementTermsReference :: SettlementTermsReference -> Reference
Reference_ProtectionTermsReference :: ProtectionTermsReference -> Reference
Reference_FixedRateReference :: FixedRateReference -> Reference
Reference_ValuationScenarioReference :: ValuationScenarioReference -> Reference
Reference_ValuationReference :: ValuationReference -> Reference
Reference_SensitivitySetDefinitionReference :: SensitivitySetDefinitionReference -> Reference
Reference_PricingParameterDerivativeReference :: PricingParameterDerivativeReference -> Reference
Reference_PricingDataPointCoordinateReference :: PricingDataPointCoordinateReference -> Reference
Reference_MarketReference :: MarketReference -> Reference
Reference_AssetOrTermPointOrPricingStructureReference :: AssetOrTermPointOrPricingStructureReference -> Reference

-- | Specifies the reference amount using a scheme.
data ReferenceAmount
ReferenceAmount :: Scheme -> ReferenceAmountAttributes -> ReferenceAmount
data ReferenceAmountAttributes
ReferenceAmountAttributes :: Maybe AnyURI -> ReferenceAmountAttributes
refAmountAttrib_referenceAmountScheme :: ReferenceAmountAttributes -> Maybe AnyURI

-- | A type to describe an institution (party) identified by means of a
--   coding scheme and an optional name.
data ReferenceBank
ReferenceBank :: Maybe ReferenceBankId -> Maybe XsdString -> ReferenceBank

-- | An institution (party) identifier, e.g. a bank identifier code (BIC).
referenceBank_id :: ReferenceBank -> Maybe ReferenceBankId

-- | The name of the institution (party). A free format string. FpML does
--   not define usage rules for the element.
referenceBank_name :: ReferenceBank -> Maybe XsdString
data ReferenceBankId
ReferenceBankId :: Scheme -> ReferenceBankIdAttributes -> ReferenceBankId
data ReferenceBankIdAttributes
ReferenceBankIdAttributes :: Maybe AnyURI -> ReferenceBankIdAttributes
refBankIdAttrib_referenceBankIdScheme :: ReferenceBankIdAttributes -> Maybe AnyURI
data RelatedBusinessUnit
RelatedBusinessUnit :: BusinessUnitReference -> BusinessUnitRole -> RelatedBusinessUnit

-- | The unit that is related to this.
relatedBusUnit_businessUnitReference :: RelatedBusinessUnit -> BusinessUnitReference

-- | The category of the relationship. The related unit performs the role
--   specified in this field for the base party. For example, if the role
--   is <a>Trader</a>, the related unit acts acts or acted as the base
--   party's trading unit.
relatedBusUnit_role :: RelatedBusinessUnit -> BusinessUnitRole
data RelatedParty
RelatedParty :: PartyReference -> Maybe AccountReference -> PartyRole -> Maybe PartyRoleType -> RelatedParty

-- | Reference to a party.
relatedParty_partyReference :: RelatedParty -> PartyReference

-- | Reference to an account.
relatedParty_accountReference :: RelatedParty -> Maybe AccountReference

-- | The category of the relationship. The related party performs the role
--   specified in this field for the base party. For example, if the role
--   is <a>Guarantor</a>, the related party acts as a guarantor for the
--   base party.
relatedParty_role :: RelatedParty -> PartyRole

-- | Additional definition refining the type of relationship. For example,
--   if the <a>role</a> is Guarantor, this element may be used to specify
--   whether all positions are guaranteed, or only a subset of them.
relatedParty_type :: RelatedParty -> Maybe PartyRoleType
data RelatedPerson
RelatedPerson :: PersonReference -> PersonRole -> RelatedPerson

-- | The individual person that is related to this.
relatedPerson_personReference :: RelatedPerson -> PersonReference

-- | The category of the relationship. The related individual performs the
--   role specified in this field for the base party. For example, if the
--   role is <a>Trader</a>, the related person acts acts or acted as the
--   base party's trader.
relatedPerson_role :: RelatedPerson -> PersonRole

-- | A type describing a role played by a unit in one or more transactions.
--   Examples include roles such as Trader, Collateral, Confirmation,
--   Settlement, etc. This can be extended to provide custom roles.
data BusinessUnitRole
BusinessUnitRole :: Scheme -> BusinessUnitRoleAttributes -> BusinessUnitRole
data BusinessUnitRoleAttributes
BusinessUnitRoleAttributes :: Maybe AnyURI -> BusinessUnitRoleAttributes
busUnitRoleAttrib_unitRoleScheme :: BusinessUnitRoleAttributes -> Maybe AnyURI

-- | A type describing a role played by a person in one or more
--   transactions. Examples include roles such as Trader, Broker,
--   MiddleOffice, Legal, etc. This can be extended to provide custom
--   roles.
data PersonRole
PersonRole :: Scheme -> PersonRoleAttributes -> PersonRole
data PersonRoleAttributes
PersonRoleAttributes :: Maybe AnyURI -> PersonRoleAttributes
personRoleAttrib_personRoleScheme :: PersonRoleAttributes -> Maybe AnyURI

-- | A type defining a date (referred to as the derived date) as a relative
--   offset from another date (referred to as the anchor date). If the
--   anchor date is itself an adjustable date then the offset is assumed to
--   be calculated from the adjusted anchor date. A number of different
--   scenarios can be supported, namely; 1) the derived date may simply be
--   a number of calendar periods (days, weeks, months or years) preceding
--   or following the anchor date; 2) the unadjusted derived date may be a
--   number of calendar periods (days, weeks, months or years) preceding or
--   following the anchor date with the resulting unadjusted derived date
--   subject to adjustment in accordance with a specified business day
--   convention, i.e. the derived date must fall on a good business day; 3)
--   the derived date may be a number of business days preceding or
--   following the anchor date. Note that the businessDayConvention
--   specifies any required adjustment to the unadjusted derived date. A
--   negative or positive value in the periodMultiplier indicates whether
--   the unadjusted derived precedes or follows the anchor date. The
--   businessDayConvention should contain a value NONE if the day type
--   element contains a value of Business (since specifying a negative or
--   positive business days offset would already guarantee that the derived
--   date would fall on a good business day in the specified business
--   centers).
data RelativeDateOffset
RelativeDateOffset :: Maybe ID -> Integer -> PeriodEnum -> Maybe DayTypeEnum -> Maybe BusinessDayConventionEnum -> (Maybe (OneOf2 BusinessCentersReference BusinessCenters)) -> Maybe DateReference -> Maybe IdentifiedDate -> RelativeDateOffset
relatDateOffset_ID :: RelativeDateOffset -> Maybe ID

-- | A time period multiplier, e.g. 1, 2 or 3 etc. A negative value can be
--   used when specifying an offset relative to another date, e.g. -2 days.
relatDateOffset_periodMultiplier :: RelativeDateOffset -> Integer

-- | A time period, e.g. a day, week, month or year of the stream. If the
--   periodMultiplier value is 0 (zero) then period must contain the value
--   D (day).
relatDateOffset_period :: RelativeDateOffset -> PeriodEnum

-- | In the case of an offset specified as a number of days, this element
--   defines whether consideration is given as to whether a day is a good
--   business day or not. If a day type of business days is specified then
--   non-business days are ignored when calculating the offset. The
--   financial business centers to use for determination of business days
--   are implied by the context in which this element is used. This element
--   must only be included when the offset is specified as a number of
--   days. If the offset is zero days then the dayType element should not
--   be included.
relatDateOffset_dayType :: RelativeDateOffset -> Maybe DayTypeEnum

-- | The convention for adjusting a date if it would otherwise fall on a
--   day that is not a business day.
relatDateOffset_businessDayConvention :: RelativeDateOffset -> Maybe BusinessDayConventionEnum

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to a set of financial business centers
--   defined elsewhere in the document. This set of business centers is
--   used to determine whether a particular day is a business day or
--   not.</li>
--   <li>businessCenters</li>
--   </ol>
relatDateOffset_choice4 :: RelativeDateOffset -> (Maybe (OneOf2 BusinessCentersReference BusinessCenters))

-- | Specifies the anchor as an href attribute. The href attribute value is
--   a pointer style reference to the element or component elsewhere in the
--   document where the anchor date is defined.
relatDateOffset_dateRelativeTo :: RelativeDateOffset -> Maybe DateReference

-- | The date once the adjustment has been performed. (Note that this date
--   may change if the business center holidays change).
relatDateOffset_adjustedDate :: RelativeDateOffset -> Maybe IdentifiedDate

-- | A type describing a set of dates defined as relative to another set of
--   dates.
data RelativeDates
RelativeDates :: Maybe ID -> Integer -> PeriodEnum -> Maybe DayTypeEnum -> Maybe BusinessDayConventionEnum -> (Maybe (OneOf2 BusinessCentersReference BusinessCenters)) -> Maybe DateReference -> Maybe IdentifiedDate -> Maybe PositiveInteger -> Maybe DateRange -> RelativeDates
relatDates_ID :: RelativeDates -> Maybe ID

-- | A time period multiplier, e.g. 1, 2 or 3 etc. A negative value can be
--   used when specifying an offset relative to another date, e.g. -2 days.
relatDates_periodMultiplier :: RelativeDates -> Integer

-- | A time period, e.g. a day, week, month or year of the stream. If the
--   periodMultiplier value is 0 (zero) then period must contain the value
--   D (day).
relatDates_period :: RelativeDates -> PeriodEnum

-- | In the case of an offset specified as a number of days, this element
--   defines whether consideration is given as to whether a day is a good
--   business day or not. If a day type of business days is specified then
--   non-business days are ignored when calculating the offset. The
--   financial business centers to use for determination of business days
--   are implied by the context in which this element is used. This element
--   must only be included when the offset is specified as a number of
--   days. If the offset is zero days then the dayType element should not
--   be included.
relatDates_dayType :: RelativeDates -> Maybe DayTypeEnum

-- | The convention for adjusting a date if it would otherwise fall on a
--   day that is not a business day.
relatDates_businessDayConvention :: RelativeDates -> Maybe BusinessDayConventionEnum

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to a set of financial business centers
--   defined elsewhere in the document. This set of business centers is
--   used to determine whether a particular day is a business day or
--   not.</li>
--   <li>businessCenters</li>
--   </ol>
relatDates_choice4 :: RelativeDates -> (Maybe (OneOf2 BusinessCentersReference BusinessCenters))

-- | Specifies the anchor as an href attribute. The href attribute value is
--   a pointer style reference to the element or component elsewhere in the
--   document where the anchor date is defined.
relatDates_dateRelativeTo :: RelativeDates -> Maybe DateReference

-- | The date once the adjustment has been performed. (Note that this date
--   may change if the business center holidays change).
relatDates_adjustedDate :: RelativeDates -> Maybe IdentifiedDate

-- | The number of periods in the referenced date schedule that are between
--   each date in the relative date schedule. Thus a skip of 2 would mean
--   that dates are relative to every second date in the referenced
--   schedule. If present this should have a value greater than 1.
relatDates_periodSkip :: RelativeDates -> Maybe PositiveInteger

-- | The first and last dates of a schedule. This can be used to restrict
--   the range of values in a reference series of dates.
relatDates_scheduleBounds :: RelativeDates -> Maybe DateRange

-- | A type describing a date when this date is defined in reference to
--   another date through one or several date offsets.
data RelativeDateSequence
RelativeDateSequence :: Maybe DateReference -> [DateOffset] -> (Maybe (OneOf2 BusinessCentersReference BusinessCenters)) -> RelativeDateSequence

-- | Specifies the anchor as an href attribute. The href attribute value is
--   a pointer style reference to the element or component elsewhere in the
--   document where the anchor date is defined.
relatDateSequen_dateRelativeTo :: RelativeDateSequence -> Maybe DateReference
relatDateSequen_dateOffset :: RelativeDateSequence -> [DateOffset]

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to a set of financial business centers
--   defined elsewhere in the document. This set of business centers is
--   used to determine whether a particular day is a business day or
--   not.</li>
--   <li>businessCenters</li>
--   </ol>
relatDateSequen_choice2 :: RelativeDateSequence -> (Maybe (OneOf2 BusinessCentersReference BusinessCenters))

-- | A date with a required identifier which can be referenced elsewhere.
data RequiredIdentifierDate
RequiredIdentifierDate :: Date -> RequiredIdentifierDateAttributes -> RequiredIdentifierDate
data RequiredIdentifierDateAttributes
RequiredIdentifierDateAttributes :: ID -> RequiredIdentifierDateAttributes
requirIdentDateAttrib_ID :: RequiredIdentifierDateAttributes -> ID

-- | A type defining the reset frequency. In the case of a weekly reset,
--   also specifies the day of the week that the reset occurs. If the reset
--   frequency is greater than the calculation period frequency the this
--   implies that more or more reset dates is established for each
--   calculation period and some form of rate averaginhg is applicable. The
--   specific averaging method of calculation is specified in
--   FloatingRateCalculation. In case the reset frequency is of value T
--   (term), the period is defined by the
--   swapswapStreamcalculationPerioDateseffectiveDate and the
--   swapswapStreamcalculationPerioDatesterminationDate.
data ResetFrequency
ResetFrequency :: Maybe ID -> Maybe PositiveInteger -> Maybe PeriodExtendedEnum -> Maybe WeeklyRollConventionEnum -> ResetFrequency
resetFrequ_ID :: ResetFrequency -> Maybe ID

-- | A time period multiplier, e.g. 1, 2 or 3 etc. If the period value is T
--   (Term) then periodMultiplier must contain the value 1.
resetFrequ_periodMultiplier :: ResetFrequency -> Maybe PositiveInteger

-- | A time period, e.g. a day, week, month, year or term of the stream.
resetFrequ_period :: ResetFrequency -> Maybe PeriodExtendedEnum

-- | The day of the week on which a weekly reset date occurs. This element
--   must be included if the reset frequency is defined as weekly and not
--   otherwise.
resetFrequ_weeklyRollConvention :: ResetFrequency -> Maybe WeeklyRollConventionEnum
data RequestedAction
RequestedAction :: Scheme -> RequestedActionAttributes -> RequestedAction
data RequestedActionAttributes
RequestedActionAttributes :: Maybe AnyURI -> RequestedActionAttributes
requesActionAttrib_requestedActionScheme :: RequestedActionAttributes -> Maybe AnyURI

-- | Describes the resource that contains the media representation of a
--   business event (i.e used for stating the Publicly Available
--   Information). For example, can describe a file or a URL that
--   represents the event. This type is an extended version of a type
--   defined by RIXML (www.rixml.org).
data Resource
Resource :: Maybe ResourceId -> Maybe ResourceType -> Maybe Language -> Maybe Decimal -> Maybe ResourceLength -> Maybe MimeType -> Maybe NormalizedString -> Maybe XsdString -> (Maybe (OneOf4 XsdString HexBinary Base64Binary AnyURI)) -> Resource

-- | The unique identifier of the resource within the event.
resource_id :: Resource -> Maybe ResourceId

-- | A description of the type of the resource, e.g. a confirmation.
resource_type :: Resource -> Maybe ResourceType

-- | Indicates the language of the resource, described using the ISO
--   639-2/T Code.
resource_language :: Resource -> Maybe Language

-- | Indicates the size of the resource in bytes. It could be used by the
--   end user to estimate the download time and storage needs.
resource_sizeInBytes :: Resource -> Maybe Decimal

-- | Indicates the length of the resource. For example, if the resource
--   were a PDF file, the length would be in pages.
resource_length :: Resource -> Maybe ResourceLength

-- | Indicates the type of media used to store the content. mimeType is
--   used to determine the software product(s) that can read the content.
--   MIME Types are described in RFC 2046.
resource_mimeType :: Resource -> Maybe MimeType

-- | The name of the resource.
resource_name :: Resource -> Maybe NormalizedString

-- | Any additional comments that are deemed necessary. For example, which
--   software version is required to open the document? Or, how does this
--   resource relate to the others for this event?
resource_comments :: Resource -> Maybe XsdString

-- | Choice between:
--   
--   <ol>
--   <li>Provides extra information as string. In case the extra
--   information is in XML format, a CDATA section must be placed around
--   the source message to prevent its interpretation as XML content.</li>
--   <li>Provides extra information as binary contents coded in
--   hexadecimal.</li>
--   <li>Provides extra information as binary contents coded in
--   base64.</li>
--   <li>Indicates where the resource can be found, as a URL that
--   references the information on a web server accessible to the message
--   recipient.</li>
--   </ol>
resource_choice8 :: Resource -> (Maybe (OneOf4 XsdString HexBinary Base64Binary AnyURI))

-- | The data type used for resource identifiers.
data ResourceId
ResourceId :: Scheme -> ResourceIdAttributes -> ResourceId
data ResourceIdAttributes
ResourceIdAttributes :: Maybe AnyURI -> ResourceIdAttributes
resourIdAttrib_resourceIdScheme :: ResourceIdAttributes -> Maybe AnyURI

-- | The type that indicates the length of the resource.
data ResourceLength
ResourceLength :: Maybe LengthUnitEnum -> Maybe Decimal -> ResourceLength

-- | The length unit of the resource. For example, pages (pdf, text
--   documents) or time (audio, video files).
resourLength_lengthUnit :: ResourceLength -> Maybe LengthUnitEnum

-- | The length value of the resource.
resourLength_lengthValue :: ResourceLength -> Maybe Decimal

-- | The data type used for describing the type or purpose of a resource,
--   e.g. <a>Confirmation</a>.
data ResourceType
ResourceType :: Scheme -> ResourceTypeAttributes -> ResourceType
data ResourceTypeAttributes
ResourceTypeAttributes :: Maybe AnyURI -> ResourceTypeAttributes
resourTypeAttrib_resourceTypeScheme :: ResourceTypeAttributes -> Maybe AnyURI

-- | A reference to the return swap notional amount.
data ReturnSwapNotionalAmountReference
ReturnSwapNotionalAmountReference :: IDREF -> ReturnSwapNotionalAmountReference
returnSwapNotionAmountRef_href :: ReturnSwapNotionalAmountReference -> IDREF

-- | A type defining a rounding direction and precision to be used in the
--   rounding of a rate.
data Rounding
Rounding :: Maybe RoundingDirectionEnum -> Maybe NonNegativeInteger -> Rounding

-- | Specifies the rounding direction.
rounding_direction :: Rounding -> Maybe RoundingDirectionEnum

-- | Specifies the rounding precision in terms of a number of decimal
--   places. Note how a percentage rate rounding of 5 decimal places is
--   expressed as a rounding precision of 7 in the FpML document since the
--   percentage is expressed as a decimal, e.g. 9.876543% (or 0.09876543)
--   being rounded to the nearest 5 decimal places is 9.87654% (or
--   0.0987654).
rounding_precision :: Rounding -> Maybe NonNegativeInteger

-- | A type that provides three alternative ways of identifying a party
--   involved in the routing of a payment. The identification may use
--   payment system identifiers only; actual name, address and other
--   reference information; or a combination of both.
data Routing
Routing :: (Maybe (OneOf3 RoutingIds RoutingExplicitDetails RoutingIdsAndExplicitDetails)) -> Routing

-- | Choice between:
--   
--   <ol>
--   <li>A set of unique identifiers for a party, eachone identifying the
--   party within a payment system. The assumption is that each party will
--   not have more than one identifier within the same payment system.</li>
--   <li>A set of details that is used to identify a party involved in the
--   routing of a payment when the party does not have a code that
--   identifies it within one of the recognized payment systems.</li>
--   <li>A combination of coded payment system identifiers and details for
--   physical addressing for a party involved in the routing of a
--   payment.</li>
--   </ol>
routing_choice0 :: Routing -> (Maybe (OneOf3 RoutingIds RoutingExplicitDetails RoutingIdsAndExplicitDetails))

-- | A type that models name, address and supplementary textual information
--   for the purposes of identifying a party involved in the routing of a
--   payment.
data RoutingExplicitDetails
RoutingExplicitDetails :: Maybe XsdString -> Maybe Address -> Maybe XsdString -> [XsdString] -> RoutingExplicitDetails

-- | A real name that is used to identify a party involved in the routing
--   of a payment.
routingExplicDetails_routingName :: RoutingExplicitDetails -> Maybe XsdString

-- | A physical postal address via which a payment can be routed.
routingExplicDetails_routingAddress :: RoutingExplicitDetails -> Maybe Address

-- | An account number via which a payment can be routed.
routingExplicDetails_routingAccountNumber :: RoutingExplicitDetails -> Maybe XsdString

-- | A piece of free-format text used to assist the identification of a
--   party involved in the routing of a payment.
routingExplicDetails_routingReferenceText :: RoutingExplicitDetails -> [XsdString]
data RoutingId
RoutingId :: Scheme -> RoutingIdAttributes -> RoutingId
data RoutingIdAttributes
RoutingIdAttributes :: Maybe AnyURI -> RoutingIdAttributes
routingIdAttrib_routingIdCodeScheme :: RoutingIdAttributes -> Maybe AnyURI

-- | A type that provides for identifying a party involved in the routing
--   of a payment by means of one or more standard identification codes.
--   For example, both a SWIFT BIC code and a national bank identifier may
--   be required.
data RoutingIds
RoutingIds :: [RoutingId] -> RoutingIds

-- | A unique identifier for party that is a participant in a recognized
--   payment system.
routingIds_routingId :: RoutingIds -> [RoutingId]

-- | A type that provides a combination of payment system identification
--   codes with physical postal address details, for the purposes of
--   identifying a party involved in the routing of a payment.
data RoutingIdsAndExplicitDetails
RoutingIdsAndExplicitDetails :: [RoutingIds] -> Maybe XsdString -> Maybe Address -> Maybe XsdString -> [XsdString] -> RoutingIdsAndExplicitDetails

-- | A set of unique identifiers for a party, eachone identifying the party
--   within a payment system. The assumption is that each party will not
--   have more than one identifier within the same payment system.
routingIdsAndExplicDetails_routingIds :: RoutingIdsAndExplicitDetails -> [RoutingIds]

-- | A real name that is used to identify a party involved in the routing
--   of a payment.
routingIdsAndExplicDetails_routingName :: RoutingIdsAndExplicitDetails -> Maybe XsdString

-- | A physical postal address via which a payment can be routed.
routingIdsAndExplicDetails_routingAddress :: RoutingIdsAndExplicitDetails -> Maybe Address

-- | An account number via which a payment can be routed.
routingIdsAndExplicDetails_routingAccountNumber :: RoutingIdsAndExplicitDetails -> Maybe XsdString

-- | A piece of free-format text used to assist the identification of a
--   party involved in the routing of a payment.
routingIdsAndExplicDetails_routingReferenceText :: RoutingIdsAndExplicitDetails -> [XsdString]

-- | A type defining a schedule of rates or amounts in terms of an initial
--   value and then a series of step date and value pairs. On each step
--   date the rate or amount changes to the new step value. The series of
--   step date and value pairs are optional. If not specified, this implies
--   that the initial value remains unchanged over time.
data Schedule
Schedule :: Maybe ID -> Decimal -> [Step] -> Schedule
schedule_ID :: Schedule -> Maybe ID

-- | The initial rate or amount, as the case may be. An initial rate of 5%
--   would be represented as 0.05.
schedule_initialValue :: Schedule -> Decimal

-- | The schedule of step date and value pairs. On each step date the
--   associated step value becomes effective A list of steps may be ordered
--   in the document by ascending step date. An FpML document containing an
--   unordered list of steps is still regarded as a conformant document.
schedule_step :: Schedule -> [Step]

-- | Reference to a schedule of rates or amounts.
data ScheduleReference
ScheduleReference :: IDREF -> ScheduleReference
schedRef_href :: ScheduleReference -> IDREF

-- | A type that represents the choice of methods for settling a potential
--   currency payment resulting from a trade: by means of a standard
--   settlement instruction, by netting it out with other payments, or with
--   an explicit settlement instruction.
data SettlementInformation
SettlementInformation :: (Maybe (OneOf2 StandardSettlementStyleEnum SettlementInstruction)) -> SettlementInformation

-- | Choice between:
--   
--   <ol>
--   <li>An optional element used to describe how a trade will settle. This
--   defines a scheme and is used for identifying trades that are
--   identified as settling standard and/or flagged for settlement
--   netting.</li>
--   <li>An explicit specification of how a currency payment is to be made,
--   when the payment is not netted and the route is other than the
--   recipient's standard settlement instruction.</li>
--   </ol>
settlInfo_choice0 :: SettlementInformation -> (Maybe (OneOf2 StandardSettlementStyleEnum SettlementInstruction))

-- | A type that models a complete instruction for settling a currency
--   payment, including the settlement method to be used, the correspondent
--   bank, any intermediary banks and the ultimate beneficary.
data SettlementInstruction
SettlementInstruction :: Maybe SettlementMethod -> Maybe CorrespondentInformation -> [IntermediaryInformation] -> Maybe Beneficiary -> Maybe Beneficiary -> Maybe PartyReference -> [SplitSettlement] -> SettlementInstruction

-- | The mechanism by which settlement is to be made. The scheme of domain
--   values will include standard mechanisms such as CLS, Fedwire, Chips
--   ABA, Chips UID, SWIFT, CHAPS and DDA.
settlInstr_settlementMethod :: SettlementInstruction -> Maybe SettlementMethod

-- | The information required to identify the correspondent bank that will
--   make delivery of the funds on the paying bank's behalf in the country
--   where the payment is to be made
settlInstr_correspondentInformation :: SettlementInstruction -> Maybe CorrespondentInformation

-- | Information to identify an intermediary through which payment will be
--   made by the correspondent bank to the ultimate beneficiary of the
--   funds.
settlInstr_intermediaryInformation :: SettlementInstruction -> [IntermediaryInformation]

-- | The bank that acts for the ultimate beneficiary of the funds in
--   receiving payments.
settlInstr_beneficiaryBank :: SettlementInstruction -> Maybe Beneficiary

-- | The ultimate beneficiary of the funds. The beneficiary can be
--   identified either by an account at the beneficiaryBank (qv) or by
--   explicit routingInformation. This element provides for the latter.
settlInstr_beneficiary :: SettlementInstruction -> Maybe Beneficiary

-- | Reference to the depository of the settlement.
settlInstr_depositoryPartyReference :: SettlementInstruction -> Maybe PartyReference

-- | The set of individual payments that are to be made when a currency
--   payment settling a trade needs to be split between a number of
--   ultimate beneficiaries. Each split payment may need to have its own
--   routing information.
settlInstr_splitSettlement :: SettlementInstruction -> [SplitSettlement]
data SettlementMethod
SettlementMethod :: Scheme -> SettlementMethodAttributes -> SettlementMethod
data SettlementMethodAttributes
SettlementMethodAttributes :: Maybe AnyURI -> SettlementMethodAttributes
settlMethodAttrib_settlementMethodScheme :: SettlementMethodAttributes -> Maybe AnyURI

-- | Coding scheme that specifies the settlement price default election.
data SettlementPriceDefaultElection
SettlementPriceDefaultElection :: Scheme -> SettlementPriceDefaultElectionAttributes -> SettlementPriceDefaultElection
data SettlementPriceDefaultElectionAttributes
SettlementPriceDefaultElectionAttributes :: Maybe AnyURI -> SettlementPriceDefaultElectionAttributes
spdea_settlementPriceDefaultElectionScheme :: SettlementPriceDefaultElectionAttributes -> Maybe AnyURI

-- | The source from which the settlement price is to be obtained, e.g. a
--   Reuters page, Prezzo di Riferimento, etc.
data SettlementPriceSource
SettlementPriceSource :: Scheme -> SettlementPriceSourceAttributes -> SettlementPriceSource
data SettlementPriceSourceAttributes
SettlementPriceSourceAttributes :: Maybe AnyURI -> SettlementPriceSourceAttributes
settlPriceSourceAttrib_settlementPriceSourceScheme :: SettlementPriceSourceAttributes -> Maybe AnyURI

-- | A type describing the method for obtaining a settlement rate.
data SettlementRateSource
SettlementRateSource :: (Maybe (OneOf2 InformationSource CashSettlementReferenceBanks)) -> SettlementRateSource

-- | Choice between:
--   
--   <ol>
--   <li>The information source where a published or displayed market rate
--   will be obtained, e.g. Telerate Page 3750.</li>
--   <li>A container for a set of reference institutions. These reference
--   institutions may be called upon to provide rate quotations as part of
--   the method to determine the applicable cash settlement amount. If
--   institutions are not specified, it is assumed that reference
--   institutions will be agreed between the parties on the exercise date,
--   or in the case of swap transaction to which mandatory early
--   termination is applicable, the cash settlement valuation date.</li>
--   </ol>
settlRateSource_choice0 :: SettlementRateSource -> (Maybe (OneOf2 InformationSource CashSettlementReferenceBanks))

-- | TBA
data SharedAmericanExercise
SharedAmericanExercise :: Maybe ID -> Maybe AdjustableOrRelativeDate -> Maybe AdjustableOrRelativeDate -> (Maybe (OneOf2 BusinessCenterTime DeterminationMethod)) -> SharedAmericanExercise
sharedAmericExerc_ID :: SharedAmericanExercise -> Maybe ID

-- | The first day of the exercise period for an American style option.
sharedAmericExerc_commencementDate :: SharedAmericanExercise -> Maybe AdjustableOrRelativeDate

-- | The last day within an exercise period for an American style option.
--   For a European style option it is the only day within the exercise
--   period.
sharedAmericExerc_expirationDate :: SharedAmericanExercise -> Maybe AdjustableOrRelativeDate

-- | Choice between latest exercise time expressed as literal time, or
--   using a determination method.
--   
--   Choice between:
--   
--   <ol>
--   <li>For a Bermuda or American style option, the latest time on an
--   exercise business day (excluding the expiration date) within the
--   exercise period that notice can be given by the buyer to the seller or
--   seller's agent. Notice of exercise given after this time will be
--   deemed to have been given on the next exercise business day.</li>
--   <li>Latest exercise time determination method.</li>
--   </ol>
sharedAmericExerc_choice2 :: SharedAmericanExercise -> (Maybe (OneOf2 BusinessCenterTime DeterminationMethod))

-- | A complex type to specified payments in a simpler fashion than the
--   Payment type. This construct should be used from the version 4.3
--   onwards.
data SimplePayment
SimplePayment :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe NonNegativeMoney -> Maybe AdjustableOrRelativeDate -> SimplePayment
simplePayment_ID :: SimplePayment -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
simplePayment_payerPartyReference :: SimplePayment -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
simplePayment_payerAccountReference :: SimplePayment -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
simplePayment_receiverPartyReference :: SimplePayment -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
simplePayment_receiverAccountReference :: SimplePayment -> Maybe AccountReference
simplePayment_paymentAmount :: SimplePayment -> Maybe NonNegativeMoney

-- | The payment date. This date is subject to adjustment in accordance
--   with any applicable business day convention.
simplePayment_paymentDate :: SimplePayment -> Maybe AdjustableOrRelativeDate

-- | A type that supports the division of a gross settlement amount into a
--   number of split settlements, each requiring its own settlement
--   instruction.
data SplitSettlement
SplitSettlement :: Maybe Money -> Maybe Routing -> Maybe Routing -> SplitSettlement

-- | One of the monetary amounts in a split settlement payment.
splitSettlement_amount :: SplitSettlement -> Maybe Money

-- | The bank that acts for the ultimate beneficiary of the funds in
--   receiving payments.
splitSettl_beneficiaryBank :: SplitSettlement -> Maybe Routing

-- | The ultimate beneficiary of the funds. The beneficiary can be
--   identified either by an account at the beneficiaryBank (qv) or by
--   explicit routingInformation. This element provides for the latter.
splitSettl_beneficiary :: SplitSettlement -> Maybe Routing

-- | Adds an optional spread type element to the Schedule to identify a
--   long or short spread value.
data SpreadSchedule
SpreadSchedule :: Maybe ID -> Decimal -> [Step] -> Maybe SpreadScheduleType -> SpreadSchedule
spreadSched_ID :: SpreadSchedule -> Maybe ID

-- | The initial rate or amount, as the case may be. An initial rate of 5%
--   would be represented as 0.05.
spreadSched_initialValue :: SpreadSchedule -> Decimal

-- | The schedule of step date and value pairs. On each step date the
--   associated step value becomes effective A list of steps may be ordered
--   in the document by ascending step date. An FpML document containing an
--   unordered list of steps is still regarded as a conformant document.
spreadSched_step :: SpreadSchedule -> [Step]
spreadSched_type :: SpreadSchedule -> Maybe SpreadScheduleType

-- | Provides a reference to a spread schedule.
data SpreadScheduleReference
SpreadScheduleReference :: IDREF -> SpreadScheduleReference
spreadSchedRef_href :: SpreadScheduleReference -> IDREF

-- | Defines a Spread Type Scheme to identify a long or short spread value.
data SpreadScheduleType
SpreadScheduleType :: Scheme -> SpreadScheduleTypeAttributes -> SpreadScheduleType
data SpreadScheduleTypeAttributes
SpreadScheduleTypeAttributes :: Maybe AnyURI -> SpreadScheduleTypeAttributes
spreadSchedTypeAttrib_spreadScheduleTypeScheme :: SpreadScheduleTypeAttributes -> Maybe AnyURI

-- | A type defining a step date and step value pair. This step definitions
--   are used to define varying rate or amount schedules, e.g. a notional
--   amortization or a step-up coupon schedule.
data Step
Step :: Maybe ID -> Maybe Date -> Maybe Decimal -> Step
step_ID :: Step -> Maybe ID

-- | The date on which the associated stepValue becomes effective. This day
--   may be subject to adjustment in accordance with a business day
--   convention.
step_date :: Step -> Maybe Date

-- | The rate or amount which becomes effective on the associated stepDate.
--   A rate of 5% would be represented as 0.05.
step_value :: Step -> Maybe Decimal

-- | A type defining a step date and step value pair. This step definitions
--   are used to define varying rate or amount schedules, e.g. a notional
--   amortization or a step-up coupon schedule.
data StepBase
StepBase_Step :: Step -> StepBase
StepBase_PositiveStep :: PositiveStep -> StepBase
StepBase_NonNegativeStep :: NonNegativeStep -> StepBase

-- | A type that describes the set of street and building number
--   information that identifies a postal address within a city.
data StreetAddress
StreetAddress :: [XsdString] -> StreetAddress

-- | An individual line of street and building number information, forming
--   part of a postal address.
streetAddress_streetLine :: StreetAddress -> [XsdString]

-- | A type describing a single cap or floor rate.
data Strike
Strike :: Maybe ID -> Maybe Decimal -> Maybe IdentifiedPayerReceiver -> Maybe IdentifiedPayerReceiver -> Strike
strike_ID :: Strike -> Maybe ID

-- | The rate for a cap or floor.
strike_rate :: Strike -> Maybe Decimal

-- | The buyer of the option
strike_buyer :: Strike -> Maybe IdentifiedPayerReceiver

-- | The party that has sold.
strike_seller :: Strike -> Maybe IdentifiedPayerReceiver

-- | A type describing a schedule of cap or floor rates.
data StrikeSchedule
StrikeSchedule :: Maybe ID -> Decimal -> [Step] -> Maybe IdentifiedPayerReceiver -> Maybe IdentifiedPayerReceiver -> StrikeSchedule
strikeSched_ID :: StrikeSchedule -> Maybe ID

-- | The initial rate or amount, as the case may be. An initial rate of 5%
--   would be represented as 0.05.
strikeSched_initialValue :: StrikeSchedule -> Decimal

-- | The schedule of step date and value pairs. On each step date the
--   associated step value becomes effective A list of steps may be ordered
--   in the document by ascending step date. An FpML document containing an
--   unordered list of steps is still regarded as a conformant document.
strikeSched_step :: StrikeSchedule -> [Step]

-- | The buyer of the option
strikeSched_buyer :: StrikeSchedule -> Maybe IdentifiedPayerReceiver

-- | The party that has sold.
strikeSched_seller :: StrikeSchedule -> Maybe IdentifiedPayerReceiver

-- | A type defining how a stub calculation period amount is calculated and
--   the start and end date of the stub. A single floating rate tenor
--   different to that used for the regular part of the calculation periods
--   schedule may be specified, or two floating rate tenors many be
--   specified. If two floating rate tenors are specified then Linear
--   Interpolation (in accordance with the 2000 ISDA Definitions, Section
--   8.3 Interpolation) is assumed to apply. Alternatively, an actual known
--   stub rate or stub amount may be specified.
data Stub
Stub :: (Maybe (OneOf3 [FloatingRate] Decimal Money)) -> Maybe AdjustableOrRelativeDate -> Maybe AdjustableOrRelativeDate -> Stub

-- | Choice between:
--   
--   <ol>
--   <li>The rates to be applied to the initial or final stub may be the
--   linear interpolation of two different rates. While the majority of the
--   time, the rate indices will be the same as that specified in the
--   stream and only the tenor itself will be different, it is possible to
--   specift two different rates. For example, a 2 month stub period may
--   use the linear interpolation of a 1 month and 3 month rate. The
--   different rates would be specified in this component. Note that a
--   maximum of two rates can be specified. If a stub period uses the same
--   floating rate index, including tenor, as the regular calculation
--   periods then this should not be specified again within this component,
--   i.e. the stub calculation period amount component may not need to be
--   specified even if there is an initial or final stub period. If a stub
--   period uses a different floating rate index compared to the regular
--   calculation periods then this should be specified within this
--   component. If specified here, they are likely to have id attributes,
--   allowing them to be referenced from within the cashflows
--   component.</li>
--   <li>An actual rate to apply for the initial or final stub period may
--   have been agreed between the principal parties (in a similar way to
--   how an initial rate may have been agreed for the first regular
--   period). If an actual stub rate has been agreed then it would be
--   included in this component. It will be a per annum rate, expressed as
--   a decimal. A stub rate of 5% would be represented as 0.05.</li>
--   <li>An actual amount to apply for the initial or final stub period may
--   have been agreed between th two parties. If an actual stub amount has
--   been agreed then it would be included in this component.</li>
--   </ol>
stub_choice0 :: Stub -> (Maybe (OneOf3 [FloatingRate] Decimal Money))

-- | Start date of stub period. This was created to support use of the
--   InterestRateStream within the Equity Derivative sphere, and this
--   element is not expected to be produced in the representation of
--   Interest Rate products.
stub_startDate :: Stub -> Maybe AdjustableOrRelativeDate

-- | End date of stub period. This was created to support use of the
--   InterestRateStream within the Equity Derivative sphere, and this
--   element is not expected to be produced in the representation of
--   Interest Rate products.
stub_endDate :: Stub -> Maybe AdjustableOrRelativeDate

-- | A type defining how a stub calculation period amount is calculated. A
--   single floating rate tenor different to that used for the regular part
--   of the calculation periods schedule may be specified, or two floating
--   rate tenors many be specified. If two floating rate tenors are
--   specified then Linear Interpolation (in accordance with the 2000 ISDA
--   Definitions, Section 8.3 Interpolation) is assumed to apply.
--   Alternatively, an actual known stub rate or stub amount may be
--   specified.
data StubValue
StubValue :: (Maybe (OneOf3 [FloatingRate] Decimal Money)) -> StubValue

-- | Choice between:
--   
--   <ol>
--   <li>The rates to be applied to the initial or final stub may be the
--   linear interpolation of two different rates. While the majority of the
--   time, the rate indices will be the same as that specified in the
--   stream and only the tenor itself will be different, it is possible to
--   specift two different rates. For example, a 2 month stub period may
--   use the linear interpolation of a 1 month and 3 month rate. The
--   different rates would be specified in this component. Note that a
--   maximum of two rates can be specified. If a stub period uses the same
--   floating rate index, including tenor, as the regular calculation
--   periods then this should not be specified again within this component,
--   i.e. the stub calculation period amount component may not need to be
--   specified even if there is an initial or final stub period. If a stub
--   period uses a different floating rate index compared to the regular
--   calculation periods then this should be specified within this
--   component. If specified here, they are likely to have id attributes,
--   allowing them to be referenced from within the cashflows
--   component.</li>
--   <li>An actual rate to apply for the initial or final stub period may
--   have been agreed between the principal parties (in a similar way to
--   how an initial rate may have been agreed for the first regular
--   period). If an actual stub rate has been agreed then it would be
--   included in this component. It will be a per annum rate, expressed as
--   a decimal. A stub rate of 5% would be represented as 0.05.</li>
--   <li>An actual amount to apply for the initial or final stub period may
--   have been agreed between th two parties. If an actual stub amount has
--   been agreed then it would be included in this component.</li>
--   </ol>
stubValue_choice0 :: StubValue -> (Maybe (OneOf3 [FloatingRate] Decimal Money))

-- | A geophraphic location for the purposes of defining a prevailing time
--   according to the tz database.
data TimezoneLocation
TimezoneLocation :: Scheme -> TimezoneLocationAttributes -> TimezoneLocation
data TimezoneLocationAttributes
TimezoneLocationAttributes :: Maybe AnyURI -> TimezoneLocationAttributes
timezLocatAttrib_timezoneLocationScheme :: TimezoneLocationAttributes -> Maybe AnyURI

-- | The parameters for defining the exercise period for an American style
--   option together with any rules governing the notional amount of the
--   underlying which can be exercised on any given exercise date and any
--   associated exercise fees.
elementAmericanExercise :: XMLParser AmericanExercise
elementToXMLAmericanExercise :: AmericanExercise -> [Content ()]

-- | The parameters for defining the exercise period for a Bermuda style
--   option together with any rules governing the notional amount of the
--   underlying which can be exercised on any given exercise date and any
--   associated exercise fees.
elementBermudaExercise :: XMLParser BermudaExercise
elementToXMLBermudaExercise :: BermudaExercise -> [Content ()]

-- | The parameters for defining the exercise period for a European style
--   option together with any rules governing the notional amount of the
--   underlying which can be exercised on any given exercise date and any
--   associated exercise fees.
elementEuropeanExercise :: XMLParser EuropeanExercise
elementToXMLEuropeanExercise :: EuropeanExercise -> [Content ()]

-- | An placeholder for the actual option exercise definitions.
elementExercise :: XMLParser Exercise
elementToXMLExercise :: Exercise -> [Content ()]

-- | An abstract element used as a place holder for the substituting
--   product elements.
elementProduct :: XMLParser Product
elementToXMLProduct :: Product -> [Content ()]

-- | A code that describes what type of role an organization plays, for
--   example a SwapsDealer, a Major Swaps Participant, or Other
data OrganizationType
OrganizationType :: Token -> OrganizationTypeAttributes -> OrganizationType
data OrganizationTypeAttributes
OrganizationTypeAttributes :: Maybe AnyURI -> OrganizationTypeAttributes
organTypeAttrib_organizationTypeScheme :: OrganizationTypeAttributes -> Maybe AnyURI
instance Eq CorrelationValue
instance Show CorrelationValue
instance Eq HourMinuteTime
instance Show HourMinuteTime
instance Eq NonNegativeDecimal
instance Show NonNegativeDecimal
instance Eq PositiveDecimal
instance Show PositiveDecimal
instance Eq RestrictedPercentage
instance Show RestrictedPercentage
instance Eq Scheme
instance Show Scheme
instance Eq Token60
instance Show Token60
instance Eq AccountIdAttributes
instance Show AccountIdAttributes
instance Eq AccountNameAttributes
instance Show AccountNameAttributes
instance Eq AccountReference
instance Show AccountReference
instance Eq Initial
instance Show Initial
instance Eq PersonIdAttributes
instance Show PersonIdAttributes
instance Eq UnitAttributes
instance Show UnitAttributes
instance Eq AgreementTypeAttributes
instance Show AgreementTypeAttributes
instance Eq AgreementVersionAttributes
instance Show AgreementVersionAttributes
instance Eq AmountReference
instance Show AmountReference
instance Eq AssetClassAttributes
instance Show AssetClassAttributes
instance Eq AutomaticExercise
instance Show AutomaticExercise
instance Eq BrokerConfirmationTypeAttributes
instance Show BrokerConfirmationTypeAttributes
instance Eq BusinessCenterAttributes
instance Show BusinessCenterAttributes
instance Eq BusinessCentersReference
instance Show BusinessCentersReference
instance Eq BusinessDayAdjustmentsReference
instance Show BusinessDayAdjustmentsReference
instance Eq CashflowIdAttributes
instance Show CashflowIdAttributes
instance Eq CashflowTypeAttributes
instance Show CashflowTypeAttributes
instance Eq ClearanceSystemAttributes
instance Show ClearanceSystemAttributes
instance Eq ContractualDefinitionsAttributes
instance Show ContractualDefinitionsAttributes
instance Eq ContractualSupplementAttributes
instance Show ContractualSupplementAttributes
instance Eq CountryCodeAttributes
instance Show CountryCodeAttributes
instance Eq CreditSeniorityAttributes
instance Show CreditSeniorityAttributes
instance Eq CreditSupportAgreementIdentifierAttributes
instance Show CreditSupportAgreementIdentifierAttributes
instance Eq CreditSupportAgreementTypeAttributes
instance Show CreditSupportAgreementTypeAttributes
instance Eq CreditRatingAttributes
instance Show CreditRatingAttributes
instance Eq CurrencyAttributes
instance Show CurrencyAttributes
instance Eq DateList
instance Show DateList
instance Eq DateRange
instance Show DateRange
instance Eq DateReference
instance Show DateReference
instance Eq DateTimeList
instance Show DateTimeList
instance Eq DayCountFractionAttributes
instance Show DayCountFractionAttributes
instance Eq DeterminationMethodAttributes
instance Show DeterminationMethodAttributes
instance Eq DeterminationMethodReference
instance Show DeterminationMethodReference
instance Eq HTTPAttachmentReference
instance Show HTTPAttachmentReference
instance Eq Empty
instance Show Empty
instance Eq EntityIdAttributes
instance Show EntityIdAttributes
instance Eq EntityNameAttributes
instance Show EntityNameAttributes
instance Eq ExchangeIdAttributes
instance Show ExchangeIdAttributes
instance Eq FloatingRateIndexAttributes
instance Show FloatingRateIndexAttributes
instance Eq GoverningLawAttributes
instance Show GoverningLawAttributes
instance Eq IdentifiedCurrencyAttributes
instance Show IdentifiedCurrencyAttributes
instance Eq IdentifiedCurrencyReference
instance Show IdentifiedCurrencyReference
instance Eq IdentifiedDateAttributes
instance Show IdentifiedDateAttributes
instance Eq IdentifiedPayerReceiverAttributes
instance Show IdentifiedPayerReceiverAttributes
instance Eq IndustryClassificationAttributes
instance Show IndustryClassificationAttributes
instance Eq InformationProviderAttributes
instance Show InformationProviderAttributes
instance Eq InstrumentIdAttributes
instance Show InstrumentIdAttributes
instance Eq InterpolationMethodAttributes
instance Show InterpolationMethodAttributes
instance Eq LanguageAttributes
instance Show LanguageAttributes
instance Eq LegalEntityReference
instance Show LegalEntityReference
instance Eq MainPublicationAttributes
instance Show MainPublicationAttributes
instance Eq MasterAgreementTypeAttributes
instance Show MasterAgreementTypeAttributes
instance Eq MasterAgreementVersionAttributes
instance Show MasterAgreementVersionAttributes
instance Eq MasterConfirmationAnnexTypeAttributes
instance Show MasterConfirmationAnnexTypeAttributes
instance Eq MasterConfirmationTypeAttributes
instance Show MasterConfirmationTypeAttributes
instance Eq MatchIdAttributes
instance Show MatchIdAttributes
instance Eq Math
instance Show Math
instance Eq MatrixTypeAttributes
instance Show MatrixTypeAttributes
instance Eq MatrixTermAttributes
instance Show MatrixTermAttributes
instance Eq MimeTypeAttributes
instance Show MimeTypeAttributes
instance Eq NotionalAmountReference
instance Show NotionalAmountReference
instance Eq NotionalReference
instance Show NotionalReference
instance Eq OriginatingEventAttributes
instance Show OriginatingEventAttributes
instance Eq PartyIdAttributes
instance Show PartyIdAttributes
instance Eq PartyNameAttributes
instance Show PartyNameAttributes
instance Eq PartyReference
instance Show PartyReference
instance Eq PartyRoleAttributes
instance Show PartyRoleAttributes
instance Eq PartyRoleTypeAttributes
instance Show PartyRoleTypeAttributes
instance Eq BusinessUnitReference
instance Show BusinessUnitReference
instance Eq PersonReference
instance Show PersonReference
instance Eq PartyTradeIdentifierReference
instance Show PartyTradeIdentifierReference
instance Eq PaymentIdAttributes
instance Show PaymentIdAttributes
instance Eq PaymentReference
instance Show PaymentReference
instance Eq PaymentTypeAttributes
instance Show PaymentTypeAttributes
instance Eq PricingStructureReference
instance Show PricingStructureReference
instance Eq PrincipalExchanges
instance Show PrincipalExchanges
instance Eq ProductIdAttributes
instance Show ProductIdAttributes
instance Eq ProductReference
instance Show ProductReference
instance Eq ProductTypeAttributes
instance Show ProductTypeAttributes
instance Eq RateReference
instance Show RateReference
instance Eq RateSourcePageAttributes
instance Show RateSourcePageAttributes
instance Eq ReferenceAmountAttributes
instance Show ReferenceAmountAttributes
instance Eq ReferenceBankIdAttributes
instance Show ReferenceBankIdAttributes
instance Eq BusinessUnitRoleAttributes
instance Show BusinessUnitRoleAttributes
instance Eq PersonRoleAttributes
instance Show PersonRoleAttributes
instance Eq RequiredIdentifierDateAttributes
instance Show RequiredIdentifierDateAttributes
instance Eq RequestedActionAttributes
instance Show RequestedActionAttributes
instance Eq ResourceIdAttributes
instance Show ResourceIdAttributes
instance Eq ResourceTypeAttributes
instance Show ResourceTypeAttributes
instance Eq ReturnSwapNotionalAmountReference
instance Show ReturnSwapNotionalAmountReference
instance Eq RoutingIdAttributes
instance Show RoutingIdAttributes
instance Eq ScheduleReference
instance Show ScheduleReference
instance Eq SettlementMethodAttributes
instance Show SettlementMethodAttributes
instance Eq SettlementPriceDefaultElectionAttributes
instance Show SettlementPriceDefaultElectionAttributes
instance Eq SettlementPriceSourceAttributes
instance Show SettlementPriceSourceAttributes
instance Eq SpreadScheduleReference
instance Show SpreadScheduleReference
instance Eq SpreadScheduleTypeAttributes
instance Show SpreadScheduleTypeAttributes
instance Eq Step
instance Show Step
instance Eq StreetAddress
instance Show StreetAddress
instance Eq TimezoneLocationAttributes
instance Show TimezoneLocationAttributes
instance Eq OrganizationTypeAttributes
instance Show OrganizationTypeAttributes
instance Eq Account
instance Show Account
instance Eq OrganizationType
instance Show OrganizationType
instance Eq TimezoneLocation
instance Show TimezoneLocation
instance Eq StubValue
instance Show StubValue
instance Eq Stub
instance Show Stub
instance Eq StrikeSchedule
instance Show StrikeSchedule
instance Eq Strike
instance Show Strike
instance Eq StepBase
instance Show StepBase
instance Eq SpreadScheduleType
instance Show SpreadScheduleType
instance Eq SpreadSchedule
instance Show SpreadSchedule
instance Eq SplitSettlement
instance Show SplitSettlement
instance Eq SimplePayment
instance Show SimplePayment
instance Eq SharedAmericanExercise
instance Show SharedAmericanExercise
instance Eq SettlementRateSource
instance Show SettlementRateSource
instance Eq SettlementPriceSource
instance Show SettlementPriceSource
instance Eq SettlementPriceDefaultElection
instance Show SettlementPriceDefaultElection
instance Eq SettlementMethod
instance Show SettlementMethod
instance Eq SettlementInstruction
instance Show SettlementInstruction
instance Eq SettlementInformation
instance Show SettlementInformation
instance Eq Schedule
instance Show Schedule
instance Eq RoutingIdsAndExplicitDetails
instance Show RoutingIdsAndExplicitDetails
instance Eq RoutingIds
instance Show RoutingIds
instance Eq RoutingId
instance Show RoutingId
instance Eq RoutingExplicitDetails
instance Show RoutingExplicitDetails
instance Eq Routing
instance Show Routing
instance Eq Rounding
instance Show Rounding
instance Eq ResourceType
instance Show ResourceType
instance Eq ResourceLength
instance Show ResourceLength
instance Eq ResourceId
instance Show ResourceId
instance Eq Resource
instance Show Resource
instance Eq RequestedAction
instance Show RequestedAction
instance Eq ResetFrequency
instance Show ResetFrequency
instance Eq RequiredIdentifierDate
instance Show RequiredIdentifierDate
instance Eq RelativeDateSequence
instance Show RelativeDateSequence
instance Eq RelativeDates
instance Show RelativeDates
instance Eq RelativeDateOffset
instance Show RelativeDateOffset
instance Eq PersonRole
instance Show PersonRole
instance Eq BusinessUnitRole
instance Show BusinessUnitRole
instance Eq RelatedPerson
instance Show RelatedPerson
instance Eq RelatedParty
instance Show RelatedParty
instance Eq RelatedBusinessUnit
instance Show RelatedBusinessUnit
instance Eq ReferenceBankId
instance Show ReferenceBankId
instance Eq ReferenceBank
instance Show ReferenceBank
instance Eq ReferenceAmount
instance Show ReferenceAmount
instance Eq Reference
instance Show Reference
instance Eq RateSourcePage
instance Show RateSourcePage
instance Eq RateObservation
instance Show RateObservation
instance Eq Rate
instance Show Rate
instance Eq QuotedCurrencyPair
instance Show QuotedCurrencyPair
instance Eq ProductType
instance Show ProductType
instance Eq ProductId
instance Show ProductId
instance Eq Product
instance Show Product
instance Eq PricingStructure
instance Show PricingStructure
instance Eq PrevailingTime
instance Show PrevailingTime
instance Eq PositiveStep
instance Show PositiveStep
instance Eq PositiveSchedule
instance Show PositiveSchedule
instance Eq PositivePayment
instance Show PositivePayment
instance Eq PositiveMoney
instance Show PositiveMoney
instance Eq PositiveAmountSchedule
instance Show PositiveAmountSchedule
instance Eq PeriodicDates
instance Show PeriodicDates
instance Eq Period
instance Show Period
instance Eq PaymentType
instance Show PaymentType
instance Eq PaymentId
instance Show PaymentId
instance Eq PaymentDetails
instance Show PaymentDetails
instance Eq PaymentBaseExtended
instance Show PaymentBaseExtended
instance Eq PaymentBase
instance Show PaymentBase
instance Eq Payment
instance Show Payment
instance Eq PartyRoleType
instance Show PartyRoleType
instance Eq PartyRole
instance Show PartyRole
instance Eq PartyRelationshipDocumentation
instance Show PartyRelationshipDocumentation
instance Eq PartyRelationship
instance Show PartyRelationship
instance Eq PartyName
instance Show PartyName
instance Eq PartyId
instance Show PartyId
instance Eq Party
instance Show Party
instance Eq PartialExercise
instance Show PartialExercise
instance Eq OriginatingEvent
instance Show OriginatingEvent
instance Eq OnBehalfOf
instance Show OnBehalfOf
instance Eq OffsetPrevailingTime
instance Show OffsetPrevailingTime
instance Eq Offset
instance Show Offset
instance Eq NotionalAmount
instance Show NotionalAmount
instance Eq NonNegativeStep
instance Show NonNegativeStep
instance Eq NonNegativeSchedule
instance Show NonNegativeSchedule
instance Eq NonNegativePayment
instance Show NonNegativePayment
instance Eq NonNegativeMoney
instance Show NonNegativeMoney
instance Eq NonNegativeAmountSchedule
instance Show NonNegativeAmountSchedule
instance Eq MultipleExercise
instance Show MultipleExercise
instance Eq MoneyBase
instance Show MoneyBase
instance Eq Money
instance Show Money
instance Eq MimeType
instance Show MimeType
instance Eq MatrixTerm
instance Show MatrixTerm
instance Eq MatrixType
instance Show MatrixType
instance Eq MatchId
instance Show MatchId
instance Eq MasterConfirmationType
instance Show MasterConfirmationType
instance Eq MasterConfirmationAnnexType
instance Show MasterConfirmationAnnexType
instance Eq MasterConfirmation
instance Show MasterConfirmation
instance Eq MasterAgreementVersion
instance Show MasterAgreementVersion
instance Eq MasterAgreementType
instance Show MasterAgreementType
instance Eq MasterAgreement
instance Show MasterAgreement
instance Eq ManualExercise
instance Show ManualExercise
instance Eq MainPublication
instance Show MainPublication
instance Eq LegalEntity
instance Show LegalEntity
instance Eq Leg
instance Show Leg
instance Eq Language
instance Show Language
instance Eq InterpolationMethod
instance Show InterpolationMethod
instance Eq IntermediaryInformation
instance Show IntermediaryInformation
instance Eq InterestAccrualsMethod
instance Show InterestAccrualsMethod
instance Eq InterestAccrualsCompoundingMethod
instance Show InterestAccrualsCompoundingMethod
instance Eq InstrumentId
instance Show InstrumentId
instance Eq InformationSource
instance Show InformationSource
instance Eq InformationProvider
instance Show InformationProvider
instance Eq IndustryClassification
instance Show IndustryClassification
instance Eq IdentifiedPayerReceiver
instance Show IdentifiedPayerReceiver
instance Eq IdentifiedDate
instance Show IdentifiedDate
instance Eq IdentifiedCurrency
instance Show IdentifiedCurrency
instance Eq GrossCashflow
instance Show GrossCashflow
instance Eq GoverningLaw
instance Show GoverningLaw
instance Eq GenericAgreement
instance Show GenericAgreement
instance Eq FxSpotRateSource
instance Show FxSpotRateSource
instance Eq FxRate
instance Show FxRate
instance Eq FxCashSettlement
instance Show FxCashSettlement
instance Eq FxFixing
instance Show FxFixing
instance Eq FutureValueAmount
instance Show FutureValueAmount
instance Eq Frequency
instance Show Frequency
instance Eq FormulaComponent
instance Show FormulaComponent
instance Eq Formula
instance Show Formula
instance Eq ForecastRateIndex
instance Show ForecastRateIndex
instance Eq FloatingRateIndex
instance Show FloatingRateIndex
instance Eq FloatingRateCalculation
instance Show FloatingRateCalculation
instance Eq FloatingRate
instance Show FloatingRate
instance Eq ExerciseProcedureOption
instance Show ExerciseProcedureOption
instance Eq ExerciseProcedure
instance Show ExerciseProcedure
instance Eq ExerciseNotice
instance Show ExerciseNotice
instance Eq ExerciseFeeSchedule
instance Show ExerciseFeeSchedule
instance Eq ExerciseFee
instance Show ExerciseFee
instance Eq Exercise
instance Show Exercise
instance Eq ExchangeId
instance Show ExchangeId
instance Eq EuropeanExercise
instance Show EuropeanExercise
instance Eq EntityName
instance Show EntityName
instance Eq EntityId
instance Show EntityId
instance Eq ExternalDocument
instance Show ExternalDocument
instance Eq Documentation
instance Show Documentation
instance Eq DeterminationMethod
instance Show DeterminationMethod
instance Eq DayCountFraction
instance Show DayCountFraction
instance Eq DateOffset
instance Show DateOffset
instance Eq Currency
instance Show Currency
instance Eq CreditRating
instance Show CreditRating
instance Eq CreditSupportAgreementType
instance Show CreditSupportAgreementType
instance Eq CreditSupportAgreementIdentifier
instance Show CreditSupportAgreementIdentifier
instance Eq CreditSupportAgreement
instance Show CreditSupportAgreement
instance Eq CreditSeniority
instance Show CreditSeniority
instance Eq CountryCode
instance Show CountryCode
instance Eq CorrespondentInformation
instance Show CorrespondentInformation
instance Eq ContractualTermsSupplement
instance Show ContractualTermsSupplement
instance Eq ContractualSupplement
instance Show ContractualSupplement
instance Eq ContractualMatrix
instance Show ContractualMatrix
instance Eq ContractualDefinitions
instance Show ContractualDefinitions
instance Eq ClearanceSystem
instance Show ClearanceSystem
instance Eq CashSettlementReferenceBanks
instance Show CashSettlementReferenceBanks
instance Eq CashflowType
instance Show CashflowType
instance Eq CashflowNotional
instance Show CashflowNotional
instance Eq CashflowId
instance Show CashflowId
instance Eq CalculationPeriodFrequency
instance Show CalculationPeriodFrequency
instance Eq CalculationAgent
instance Show CalculationAgent
instance Eq BusinessDayAdjustments
instance Show BusinessDayAdjustments
instance Eq BusinessDateRange
instance Show BusinessDateRange
instance Eq BusinessCenterTime
instance Show BusinessCenterTime
instance Eq BusinessCenters
instance Show BusinessCenters
instance Eq BusinessCenter
instance Show BusinessCenter
instance Eq BrokerConfirmationType
instance Show BrokerConfirmationType
instance Eq BrokerConfirmation
instance Show BrokerConfirmation
instance Eq BermudaExercise
instance Show BermudaExercise
instance Eq Beneficiary
instance Show Beneficiary
instance Eq AverageDailyTradingVolumeLimit
instance Show AverageDailyTradingVolumeLimit
instance Eq AssetClass
instance Show AssetClass
instance Eq AmountSchedule
instance Show AmountSchedule
instance Eq AmericanExercise
instance Show AmericanExercise
instance Eq AgreementVersion
instance Show AgreementVersion
instance Eq AgreementType
instance Show AgreementType
instance Eq AdjustedRelativeDateOffset
instance Show AdjustedRelativeDateOffset
instance Eq AdjustableRelativeOrPeriodicDates2
instance Show AdjustableRelativeOrPeriodicDates2
instance Eq AdjustableRelativeOrPeriodicDates
instance Show AdjustableRelativeOrPeriodicDates
instance Eq AdjustableOrRelativeDates
instance Show AdjustableOrRelativeDates
instance Eq AdjustableOrRelativeDate
instance Show AdjustableOrRelativeDate
instance Eq AdjustableOrAdjustedDate
instance Show AdjustableOrAdjustedDate
instance Eq AdjustableDatesOrRelativeDateOffset
instance Show AdjustableDatesOrRelativeDateOffset
instance Eq AdjustableDates
instance Show AdjustableDates
instance Eq AdjustableDate2
instance Show AdjustableDate2
instance Eq AdjustableDate
instance Show AdjustableDate
instance Eq TelephoneNumber
instance Show TelephoneNumber
instance Eq ContactInformation
instance Show ContactInformation
instance Eq Unit
instance Show Unit
instance Eq PersonId
instance Show PersonId
instance Eq Person
instance Show Person
instance Eq BusinessUnit
instance Show BusinessUnit
instance Eq Address
instance Show Address
instance Eq AccountName
instance Show AccountName
instance Eq AccountId
instance Show AccountId
instance Extension OrganizationType Token
instance SchemaType OrganizationType
instance Extension TimezoneLocation Scheme
instance SchemaType TimezoneLocation
instance SchemaType StubValue
instance Extension Stub StubValue
instance SchemaType Stub
instance Extension StrikeSchedule Schedule
instance SchemaType StrikeSchedule
instance SchemaType Strike
instance SchemaType StreetAddress
instance SchemaType StepBase
instance Extension Step StepBase
instance SchemaType Step
instance Extension SpreadScheduleType Scheme
instance SchemaType SpreadScheduleType
instance Extension SpreadScheduleReference Reference
instance SchemaType SpreadScheduleReference
instance Extension SpreadSchedule Schedule
instance SchemaType SpreadSchedule
instance SchemaType SplitSettlement
instance Extension SimplePayment PaymentBase
instance SchemaType SimplePayment
instance Extension SharedAmericanExercise Exercise
instance SchemaType SharedAmericanExercise
instance SchemaType SettlementRateSource
instance Extension SettlementPriceSource Scheme
instance SchemaType SettlementPriceSource
instance Extension SettlementPriceDefaultElection Scheme
instance SchemaType SettlementPriceDefaultElection
instance Extension SettlementMethod Scheme
instance SchemaType SettlementMethod
instance SchemaType SettlementInstruction
instance SchemaType SettlementInformation
instance Extension ScheduleReference Reference
instance SchemaType ScheduleReference
instance SchemaType Schedule
instance SchemaType RoutingIdsAndExplicitDetails
instance SchemaType RoutingIds
instance Extension RoutingId Scheme
instance SchemaType RoutingId
instance SchemaType RoutingExplicitDetails
instance SchemaType Routing
instance SchemaType Rounding
instance Extension ReturnSwapNotionalAmountReference Reference
instance SchemaType ReturnSwapNotionalAmountReference
instance Extension ResourceType Scheme
instance SchemaType ResourceType
instance SchemaType ResourceLength
instance Extension ResourceId Scheme
instance SchemaType ResourceId
instance SchemaType Resource
instance Extension RequestedAction Scheme
instance SchemaType RequestedAction
instance Extension ResetFrequency Frequency
instance SchemaType ResetFrequency
instance Extension RequiredIdentifierDate Date
instance SchemaType RequiredIdentifierDate
instance SchemaType RelativeDateSequence
instance Extension RelativeDates Period
instance Extension RelativeDates Offset
instance Extension RelativeDates RelativeDateOffset
instance SchemaType RelativeDates
instance Extension RelativeDateOffset Period
instance Extension RelativeDateOffset Offset
instance SchemaType RelativeDateOffset
instance Extension PersonRole Scheme
instance SchemaType PersonRole
instance Extension BusinessUnitRole Scheme
instance SchemaType BusinessUnitRole
instance SchemaType RelatedPerson
instance SchemaType RelatedParty
instance SchemaType RelatedBusinessUnit
instance Extension ReferenceBankId Scheme
instance SchemaType ReferenceBankId
instance SchemaType ReferenceBank
instance Extension ReferenceAmount Scheme
instance SchemaType ReferenceAmount
instance SchemaType Reference
instance Extension RateSourcePage Scheme
instance SchemaType RateSourcePage
instance SchemaType RateObservation
instance SchemaType RateReference
instance SchemaType Rate
instance SchemaType QuotedCurrencyPair
instance Extension ProductType Scheme
instance SchemaType ProductType
instance Extension ProductReference Reference
instance SchemaType ProductReference
instance Extension ProductId Scheme
instance SchemaType ProductId
instance SchemaType Product
instance SchemaType PrincipalExchanges
instance Extension PricingStructureReference Reference
instance SchemaType PricingStructureReference
instance SchemaType PricingStructure
instance SchemaType PrevailingTime
instance Extension PositiveStep StepBase
instance SchemaType PositiveStep
instance SchemaType PositiveSchedule
instance Extension PositivePayment PaymentBase
instance Extension PositivePayment PaymentBaseExtended
instance SchemaType PositivePayment
instance Extension PositiveMoney MoneyBase
instance SchemaType PositiveMoney
instance Extension PositiveAmountSchedule PositiveSchedule
instance SchemaType PositiveAmountSchedule
instance SchemaType PeriodicDates
instance SchemaType Period
instance Extension PaymentType Scheme
instance SchemaType PaymentType
instance Extension PaymentReference Reference
instance SchemaType PaymentReference
instance Extension PaymentId Scheme
instance SchemaType PaymentId
instance SchemaType PaymentDetails
instance Extension PaymentBaseExtended PaymentBase
instance SchemaType PaymentBaseExtended
instance SchemaType PaymentBase
instance Extension Payment PaymentBase
instance SchemaType Payment
instance Extension PartyTradeIdentifierReference Reference
instance SchemaType PartyTradeIdentifierReference
instance Extension PersonReference Reference
instance SchemaType PersonReference
instance Extension BusinessUnitReference Reference
instance SchemaType BusinessUnitReference
instance Extension PartyRoleType Scheme
instance SchemaType PartyRoleType
instance Extension PartyRole Scheme
instance SchemaType PartyRole
instance SchemaType PartyRelationshipDocumentation
instance SchemaType PartyRelationship
instance Extension PartyReference Reference
instance SchemaType PartyReference
instance Extension PartyName Scheme
instance SchemaType PartyName
instance Extension PartyId Scheme
instance SchemaType PartyId
instance SchemaType Party
instance SchemaType PartialExercise
instance Extension OriginatingEvent Scheme
instance SchemaType OriginatingEvent
instance SchemaType OnBehalfOf
instance SchemaType OffsetPrevailingTime
instance Extension Offset Period
instance SchemaType Offset
instance Extension NotionalReference Reference
instance SchemaType NotionalReference
instance Extension NotionalAmountReference Reference
instance SchemaType NotionalAmountReference
instance Extension NotionalAmount MoneyBase
instance Extension NotionalAmount NonNegativeMoney
instance SchemaType NotionalAmount
instance Extension NonNegativeStep StepBase
instance SchemaType NonNegativeStep
instance SchemaType NonNegativeSchedule
instance Extension NonNegativePayment PaymentBase
instance Extension NonNegativePayment PaymentBaseExtended
instance SchemaType NonNegativePayment
instance Extension NonNegativeMoney MoneyBase
instance SchemaType NonNegativeMoney
instance Extension NonNegativeAmountSchedule NonNegativeSchedule
instance SchemaType NonNegativeAmountSchedule
instance SchemaType MultipleExercise
instance SchemaType MoneyBase
instance Extension Money MoneyBase
instance SchemaType Money
instance Extension MimeType Scheme
instance SchemaType MimeType
instance Extension MatrixTerm Scheme
instance SchemaType MatrixTerm
instance Extension MatrixType Scheme
instance SchemaType MatrixType
instance SchemaType Math
instance Extension MatchId Scheme
instance SchemaType MatchId
instance Extension MasterConfirmationType Scheme
instance SchemaType MasterConfirmationType
instance Extension MasterConfirmationAnnexType Scheme
instance SchemaType MasterConfirmationAnnexType
instance SchemaType MasterConfirmation
instance Extension MasterAgreementVersion Scheme
instance SchemaType MasterAgreementVersion
instance Extension MasterAgreementType Scheme
instance SchemaType MasterAgreementType
instance SchemaType MasterAgreement
instance SchemaType ManualExercise
instance Extension MainPublication Scheme
instance SchemaType MainPublication
instance Extension LegalEntityReference Reference
instance SchemaType LegalEntityReference
instance SchemaType LegalEntity
instance SchemaType Leg
instance Extension Language Scheme
instance SchemaType Language
instance Extension InterpolationMethod Scheme
instance SchemaType InterpolationMethod
instance SchemaType IntermediaryInformation
instance SchemaType InterestAccrualsMethod
instance Extension InterestAccrualsCompoundingMethod InterestAccrualsMethod
instance SchemaType InterestAccrualsCompoundingMethod
instance Extension InstrumentId Scheme
instance SchemaType InstrumentId
instance SchemaType InformationSource
instance Extension InformationProvider Scheme
instance SchemaType InformationProvider
instance Extension IndustryClassification Scheme
instance SchemaType IndustryClassification
instance Extension IdentifiedPayerReceiver PayerReceiverEnum
instance SchemaType IdentifiedPayerReceiver
instance Extension IdentifiedDate Date
instance SchemaType IdentifiedDate
instance Extension IdentifiedCurrencyReference Reference
instance SchemaType IdentifiedCurrencyReference
instance Extension IdentifiedCurrency Currency
instance SchemaType IdentifiedCurrency
instance SchemaType GrossCashflow
instance Extension GoverningLaw Scheme
instance SchemaType GoverningLaw
instance SchemaType GenericAgreement
instance SchemaType FxSpotRateSource
instance SchemaType FxRate
instance SchemaType FxCashSettlement
instance SchemaType FxFixing
instance Extension FutureValueAmount MoneyBase
instance Extension FutureValueAmount NonNegativeMoney
instance SchemaType FutureValueAmount
instance SchemaType Frequency
instance SchemaType FormulaComponent
instance SchemaType Formula
instance SchemaType ForecastRateIndex
instance Extension FloatingRateIndex Scheme
instance SchemaType FloatingRateIndex
instance Extension FloatingRateCalculation Rate
instance Extension FloatingRateCalculation FloatingRate
instance SchemaType FloatingRateCalculation
instance Extension FloatingRate Rate
instance SchemaType FloatingRate
instance SchemaType ExerciseProcedureOption
instance SchemaType ExerciseProcedure
instance SchemaType ExerciseNotice
instance SchemaType ExerciseFeeSchedule
instance SchemaType ExerciseFee
instance SchemaType Exercise
instance Extension ExchangeId Scheme
instance SchemaType ExchangeId
instance Extension EuropeanExercise Exercise
instance SchemaType EuropeanExercise
instance Extension EntityName Scheme
instance SchemaType EntityName
instance Extension EntityId Scheme
instance SchemaType EntityId
instance SchemaType Empty
instance Extension HTTPAttachmentReference Reference
instance SchemaType HTTPAttachmentReference
instance SchemaType ExternalDocument
instance SchemaType Documentation
instance Extension DeterminationMethodReference Reference
instance SchemaType DeterminationMethodReference
instance Extension DeterminationMethod Scheme
instance SchemaType DeterminationMethod
instance Extension DayCountFraction Scheme
instance SchemaType DayCountFraction
instance SchemaType DateTimeList
instance Extension DateReference Reference
instance SchemaType DateReference
instance SchemaType DateRange
instance Extension DateOffset Period
instance Extension DateOffset Offset
instance SchemaType DateOffset
instance SchemaType DateList
instance Extension Currency Scheme
instance SchemaType Currency
instance Extension CreditRating Scheme
instance SchemaType CreditRating
instance Extension CreditSupportAgreementType Scheme
instance SchemaType CreditSupportAgreementType
instance Extension CreditSupportAgreementIdentifier Scheme
instance SchemaType CreditSupportAgreementIdentifier
instance SchemaType CreditSupportAgreement
instance Extension CreditSeniority Scheme
instance SchemaType CreditSeniority
instance Extension CountryCode Token
instance SchemaType CountryCode
instance SchemaType CorrespondentInformation
instance SchemaType ContractualTermsSupplement
instance Extension ContractualSupplement Scheme
instance SchemaType ContractualSupplement
instance SchemaType ContractualMatrix
instance Extension ContractualDefinitions Scheme
instance SchemaType ContractualDefinitions
instance Extension ClearanceSystem Scheme
instance SchemaType ClearanceSystem
instance SchemaType CashSettlementReferenceBanks
instance Extension CashflowType Scheme
instance SchemaType CashflowType
instance SchemaType CashflowNotional
instance Extension CashflowId Scheme
instance SchemaType CashflowId
instance Extension CalculationPeriodFrequency Frequency
instance SchemaType CalculationPeriodFrequency
instance SchemaType CalculationAgent
instance Extension BusinessDayAdjustmentsReference Reference
instance SchemaType BusinessDayAdjustmentsReference
instance SchemaType BusinessDayAdjustments
instance Extension BusinessDateRange DateRange
instance SchemaType BusinessDateRange
instance SchemaType BusinessCenterTime
instance Extension BusinessCentersReference Reference
instance SchemaType BusinessCentersReference
instance SchemaType BusinessCenters
instance Extension BusinessCenter Scheme
instance SchemaType BusinessCenter
instance Extension BrokerConfirmationType Scheme
instance SchemaType BrokerConfirmationType
instance SchemaType BrokerConfirmation
instance Extension BermudaExercise Exercise
instance SchemaType BermudaExercise
instance SchemaType Beneficiary
instance SchemaType AverageDailyTradingVolumeLimit
instance SchemaType AutomaticExercise
instance Extension AssetClass Scheme
instance SchemaType AssetClass
instance Extension AmountSchedule Schedule
instance SchemaType AmountSchedule
instance Extension AmountReference Reference
instance SchemaType AmountReference
instance Extension AmericanExercise Exercise
instance SchemaType AmericanExercise
instance Extension AgreementVersion Scheme
instance SchemaType AgreementVersion
instance Extension AgreementType Scheme
instance SchemaType AgreementType
instance Extension AdjustedRelativeDateOffset Period
instance Extension AdjustedRelativeDateOffset Offset
instance Extension AdjustedRelativeDateOffset RelativeDateOffset
instance SchemaType AdjustedRelativeDateOffset
instance SchemaType AdjustableRelativeOrPeriodicDates2
instance SchemaType AdjustableRelativeOrPeriodicDates
instance SchemaType AdjustableOrRelativeDates
instance SchemaType AdjustableOrRelativeDate
instance SchemaType AdjustableOrAdjustedDate
instance SchemaType AdjustableDatesOrRelativeDateOffset
instance SchemaType AdjustableDates
instance SchemaType AdjustableDate2
instance SchemaType AdjustableDate
instance SchemaType TelephoneNumber
instance SchemaType ContactInformation
instance Extension Unit Scheme
instance SchemaType Unit
instance Extension PersonId Scheme
instance SchemaType PersonId
instance SimpleType Initial
instance SchemaType Initial
instance Restricts Initial NormalizedString
instance SchemaType Person
instance SchemaType BusinessUnit
instance SchemaType Address
instance Extension AccountReference Reference
instance SchemaType AccountReference
instance Extension AccountName Scheme
instance SchemaType AccountName
instance Extension AccountId Scheme
instance SchemaType AccountId
instance SchemaType Account
instance SimpleType Token60
instance SchemaType Token60
instance Restricts Token60 Token
instance SimpleType Scheme
instance SchemaType Scheme
instance Restricts Scheme NormalizedString
instance SimpleType RestrictedPercentage
instance SchemaType RestrictedPercentage
instance Restricts RestrictedPercentage Decimal
instance SimpleType PositiveDecimal
instance SchemaType PositiveDecimal
instance Restricts PositiveDecimal Decimal
instance SimpleType NonNegativeDecimal
instance SchemaType NonNegativeDecimal
instance Restricts NonNegativeDecimal Decimal
instance SimpleType HourMinuteTime
instance SchemaType HourMinuteTime
instance Restricts HourMinuteTime Time
instance SimpleType CorrelationValue
instance SchemaType CorrelationValue
instance Restricts CorrelationValue Decimal

module Data.FpML.V53.Asset
data ActualPrice
ActualPrice :: Maybe Currency -> Maybe Decimal -> Maybe PriceExpressionEnum -> ActualPrice

-- | Specifies the currency associated with the net price. This element is
--   not present if the price is expressed in percentage terms (as
--   specified through the priceExpression element).
actualPrice_currency :: ActualPrice -> Maybe Currency

-- | Specifies the net price amount. In the case of a fixed income security
--   or a convertible bond, this price includes the accrued interests.
actualPrice_amount :: ActualPrice -> Maybe Decimal

-- | Specifies whether the price is expressed in absolute or relative
--   terms.
actualPrice_priceExpression :: ActualPrice -> Maybe PriceExpressionEnum

-- | A reference to an asset, e.g. a portfolio, trade, or reference
--   instrument..
data AnyAssetReference
AnyAssetReference :: IDREF -> AnyAssetReference
anyAssetRef_href :: AnyAssetReference -> IDREF

-- | Abstract base class for all underlying assets.
data Asset
Asset_IdentifiedAsset :: IdentifiedAsset -> Asset
Asset_Cash :: Cash -> Asset
Asset_Basket :: Basket -> Asset

-- | A scheme identifying the types of measures that can be used to
--   describe an asset.
data AssetMeasureType
AssetMeasureType :: Scheme -> AssetMeasureTypeAttributes -> AssetMeasureType
data AssetMeasureTypeAttributes
AssetMeasureTypeAttributes :: Maybe AnyURI -> AssetMeasureTypeAttributes
assetMeasureTypeAttrib_assetMeasureScheme :: AssetMeasureTypeAttributes -> Maybe AnyURI

-- | A scheme identifying the types of pricing model used to evaluate the
--   price of an asset. Examples include Intrinsic, ClosedForm, MonteCarlo,
--   BackwardInduction.
data PricingModel
PricingModel :: Scheme -> PricingModelAttributes -> PricingModel
data PricingModelAttributes
PricingModelAttributes :: Maybe AnyURI -> PricingModelAttributes
pricingModelAttrib_pricingModelScheme :: PricingModelAttributes -> Maybe AnyURI

-- | Characterise the asset pool behind an asset backed bond.
data AssetPool
AssetPool :: Maybe NonNegativeInteger -> Maybe IdentifiedDate -> Maybe Decimal -> Maybe Decimal -> AssetPool

-- | The version number
assetPool_version :: AssetPool -> Maybe NonNegativeInteger

-- | Optionally it is possible to specify a version effective date when a
--   versionId is supplied.
assetPool_effectiveDate :: AssetPool -> Maybe IdentifiedDate

-- | The part of the mortgage that is outstanding on trade inception, i.e.
--   has not been repaid yet as principal. It is expressed as a multiplier
--   factor to the morgage: 1 means that the whole mortage amount is
--   outstanding, 0.8 means that 20% has been repaid.
assetPool_initialFactor :: AssetPool -> Maybe Decimal

-- | The part of the mortgage that is currently outstanding. It is
--   expressed similarly to the initial factor, as factor multiplier to the
--   mortgage. This term is formally defined as part of the <a>ISDA
--   Standard Terms Supplement for use with credit derivatives transactions
--   on mortgage-backed security with pas-as-you-go or physical
--   settlement</a>.
assetPool_currentFactor :: AssetPool -> Maybe Decimal

-- | Reference to an underlying asset.
data AssetReference
AssetReference :: IDREF -> AssetReference
assetRef_href :: AssetReference -> IDREF

-- | Some kind of numerical measure about an asset, eg. its NPV, together
--   with characteristics of that measure.
data BasicQuotation
BasicQuotation :: Maybe ID -> Maybe Decimal -> Maybe AssetMeasureType -> Maybe PriceQuoteUnits -> Maybe QuotationSideEnum -> Maybe Currency -> Maybe ReportingCurrencyType -> Maybe QuoteTiming -> (Maybe (OneOf2 BusinessCenter ExchangeId)) -> [InformationSource] -> Maybe PricingModel -> Maybe DateTime -> Maybe Date -> Maybe DateTime -> Maybe CashflowType -> BasicQuotation
basicQuot_ID :: BasicQuotation -> Maybe ID

-- | The value of the the quotation.
basicQuot_value :: BasicQuotation -> Maybe Decimal

-- | The type of the value that is measured. This could be an NPV, a cash
--   flow, a clean price, etc.
basicQuot_measureType :: BasicQuotation -> Maybe AssetMeasureType

-- | The optional units that the measure is expressed in. If not supplied,
--   this is assumed to be a price/value in currency units.
basicQuot_quoteUnits :: BasicQuotation -> Maybe PriceQuoteUnits

-- | The side (bid<i>mid</i>ask) of the measure.
basicQuot_side :: BasicQuotation -> Maybe QuotationSideEnum

-- | The optional currency that the measure is expressed in. If not
--   supplied, this is defaulted from the reportingCurrency in the
--   valuationScenarioDefinition.
basicQuot_currency :: BasicQuotation -> Maybe Currency

-- | The optional currency that the measure is expressed in. If not
--   supplied, this is defaulted from the reportingCurrency in the
--   valuationScenarioDefinition.
basicQuot_currencyType :: BasicQuotation -> Maybe ReportingCurrencyType

-- | When during a day the quote is for. Typically, if this element is
--   supplied, the QuoteLocation needs also to be supplied.
basicQuot_timing :: BasicQuotation -> Maybe QuoteTiming

-- | Choice between:
--   
--   <ol>
--   <li>A city or other business center.</li>
--   <li>The exchange (e.g. stock or futures exchange) from which the quote
--   is obtained.</li>
--   </ol>
basicQuot_choice7 :: BasicQuotation -> (Maybe (OneOf2 BusinessCenter ExchangeId))

-- | The information source where a published or displayed market rate will
--   be obtained, e.g. Telerate Page 3750.
basicQuot_informationSource :: BasicQuotation -> [InformationSource]

-- | .
basicQuot_pricingModel :: BasicQuotation -> Maybe PricingModel

-- | When the quote was observed or derived.
basicQuot_time :: BasicQuotation -> Maybe DateTime

-- | When the quote was computed.
basicQuot_valuationDate :: BasicQuotation -> Maybe Date

-- | When does the quote cease to be valid.
basicQuot_expiryTime :: BasicQuotation -> Maybe DateTime

-- | For cash flows, the type of the cash flows. Examples include: Coupon
--   payment, Premium Fee, Settlement Fee, Brokerage Fee, etc.
basicQuot_cashflowType :: BasicQuotation -> Maybe CashflowType

-- | A type describing the underlyer features of a basket swap. Each of the
--   basket constituents are described through an embedded component, the
--   basketConstituentsType.
data Basket
Basket :: Maybe ID -> Maybe Decimal -> [BasketConstituent] -> Maybe Decimal -> (Maybe (OneOf1 (Maybe (BasketName), [BasketId]))) -> Maybe Currency -> Basket
basket_ID :: Basket -> Maybe ID

-- | The number of units (index or securities) that constitute the
--   underlyer of the swap. In the case of a basket swap, this element is
--   used to reference both the number of basket units, and the number of
--   each asset components of the basket when these are expressed in
--   absolute terms.
basket_openUnits :: Basket -> Maybe Decimal

-- | Describes each of the components of the basket.
basket_constituent :: Basket -> [BasketConstituent]

-- | Specifies the basket divisor amount. This value is normally used to
--   adjust the constituent weight for pricing or to adjust for dividends,
--   or other corporate actions.
basket_divisor :: Basket -> Maybe Decimal

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The name of the basket expressed as a free format string. FpML
--   does not define usage rules for this element.</li>
--   <li>A CDS basket identifier</li>
--   </ul>
basket_choice3 :: Basket -> (Maybe (OneOf1 (Maybe (BasketName), [BasketId])))

-- | Specifies the currency for this basket.
basket_currency :: Basket -> Maybe Currency

-- | A type describing each of the constituents of a basket.
data BasketConstituent
BasketConstituent :: Maybe ID -> Maybe Asset -> Maybe ConstituentWeight -> Maybe DividendPayout -> Maybe Price -> Maybe Money -> Maybe SpreadScheduleReference -> Maybe PendingPayment -> BasketConstituent
basketConstit_ID :: BasketConstituent -> Maybe ID

-- | Define the underlying asset, either a listed security or other
--   instrument.
basketConstit_underlyingAsset :: BasketConstituent -> Maybe Asset

-- | Specifies the weight of each of the underlyer constituent within the
--   basket, either in absolute or relative terms. This is an optional
--   component, as certain swaps do not specify a specific weight for each
--   of their basket constituents.
basketConstit_constituentWeight :: BasketConstituent -> Maybe ConstituentWeight

-- | Specifies the dividend payout ratio associated with an equity
--   underlyer. A basket swap can have different payout ratios across the
--   various underlying constituents. In certain cases the actual ratio is
--   not known on trade inception, and only general conditions are then
--   specified. Users should note that FpML makes a distinction between the
--   derivative contract and the underlyer of the contract. It would be
--   better if the agreed dividend payout on a derivative contract was
--   modelled at the level of the derivative contract, an approach which
--   may be adopted in the next major version of FpML.
basketConstit_dividendPayout :: BasketConstituent -> Maybe DividendPayout

-- | Specifies the price that is associated with each of the basket
--   constituents. This component is optional, as it is not absolutely
--   required to accurately describe the economics of the trade,
--   considering the price that characterizes the equity swap is associated
--   to the leg of the trade.
basketConstit_underlyerPrice :: BasketConstituent -> Maybe Price

-- | Specifies the notional (i.e. price * quantity) that is associated with
--   each of the basket constituents. This component is optional, as it is
--   not absolutely required to accurately describe the economics of the
--   trade, considering the notional that characterizes the equity swap is
--   associated to the leg of the trade.
basketConstit_underlyerNotional :: BasketConstituent -> Maybe Money

-- | Provides a link to the spread schedule used for this underlyer.
basketConstit_underlyerSpread :: BasketConstituent -> Maybe SpreadScheduleReference

-- | The next upcoming coupon payment.
basketConstit_couponPayment :: BasketConstituent -> Maybe PendingPayment
data BasketId
BasketId :: Scheme -> BasketIdAttributes -> BasketId
data BasketIdAttributes
BasketIdAttributes :: Maybe AnyURI -> BasketIdAttributes
basketIdAttrib_basketIdScheme :: BasketIdAttributes -> Maybe AnyURI
data BasketName
BasketName :: Scheme -> BasketNameAttributes -> BasketName
data BasketNameAttributes
BasketNameAttributes :: Maybe AnyURI -> BasketNameAttributes
basketNameAttrib_basketNameScheme :: BasketNameAttributes -> Maybe AnyURI

-- | An exchange traded bond.
data Bond
Bond :: Maybe ID -> [InstrumentId] -> Maybe XsdString -> Maybe IdentifiedCurrency -> Maybe ExchangeId -> Maybe ClearanceSystem -> Maybe ProductReference -> (Maybe (OneOf2 XsdString PartyReference)) -> Maybe CreditSeniority -> Maybe CouponType -> Maybe Decimal -> Maybe Date -> Maybe Decimal -> Maybe Decimal -> Maybe Period -> Maybe DayCountFraction -> Bond
bond_ID :: Bond -> Maybe ID

-- | Identification of the underlying asset, using public and/or private
--   identifiers.
bond_instrumentId :: Bond -> [InstrumentId]

-- | Long name of the underlying asset.
bond_description :: Bond -> Maybe XsdString

-- | Trading currency of the underlyer when transacted as a cash
--   instrument.
bond_currency :: Bond -> Maybe IdentifiedCurrency

-- | Identification of the exchange on which this asset is transacted for
--   the purposes of calculating a contractural payoff. The term
--   <a>Exchange</a> is assumed to have the meaning as defined in the ISDA
--   2002 Equity Derivatives Definitions.
bond_exchangeId :: Bond -> Maybe ExchangeId

-- | Identification of the clearance system associated with the transaction
--   exchange.
bond_clearanceSystem :: Bond -> Maybe ClearanceSystem

-- | An optional reference to a full FpML product that defines the simple
--   product in greater detail. In case of inconsistency between the terms
--   of the simple product and those of the detailed definition, the values
--   in the simple product override those in the detailed definition.
bond_definition :: Bond -> Maybe ProductReference

-- | Specifies the issuer name of a fixed income security or convertible
--   bond. This name can either be explicitly stated, or specified as an
--   href into another element of the document, such as the obligor.
--   
--   Choice between:
--   
--   <ol>
--   <li>issuerName</li>
--   <li>issuerPartyReference</li>
--   </ol>
bond_choice6 :: Bond -> (Maybe (OneOf2 XsdString PartyReference))

-- | The repayment precedence of a debt instrument.
bond_seniority :: Bond -> Maybe CreditSeniority

-- | Specifies if the bond has a variable coupon, step-up/down coupon or a
--   zero-coupon.
bond_couponType :: Bond -> Maybe CouponType

-- | Specifies the coupon rate (expressed in percentage) of a fixed income
--   security or convertible bond.
bond_couponRate :: Bond -> Maybe Decimal

-- | The date when the principal amount of a security becomes due and
--   payable.
bond_maturity :: Bond -> Maybe Date

-- | Specifies the nominal amount of a fixed income security or convertible
--   bond.
bond_parValue :: Bond -> Maybe Decimal

-- | Specifies the total amount of the issue. Corresponds to the par value
--   multiplied by the number of issued security.
bond_faceAmount :: Bond -> Maybe Decimal

-- | Specifies the frequency at which the bond pays, e.g. 6M.
bond_paymentFrequency :: Bond -> Maybe Period

-- | The day count basis for the bond.
bond_dayCountFraction :: Bond -> Maybe DayCountFraction
data Cash
Cash :: Maybe ID -> [InstrumentId] -> Maybe XsdString -> Maybe Currency -> Cash
cash_ID :: Cash -> Maybe ID

-- | Identification of the underlying asset, using public and/or private
--   identifiers.
cash_instrumentId :: Cash -> [InstrumentId]

-- | Long name of the underlying asset.
cash_description :: Cash -> Maybe XsdString

-- | The currency in which an amount is denominated.
cash_currency :: Cash -> Maybe Currency

-- | A type describing the commission that will be charged for each of the
--   hedge transactions.
data Commission
Commission :: Maybe CommissionDenominationEnum -> Maybe Decimal -> Maybe Currency -> Maybe Decimal -> [FxRate] -> Commission

-- | The type of units used to express a commission.
commission_denomination :: Commission -> Maybe CommissionDenominationEnum

-- | The commission amount, expressed in the way indicated by the
--   commissionType element.
commission_amount :: Commission -> Maybe Decimal

-- | The currency in which an amount is denominated.
commission_currency :: Commission -> Maybe Currency

-- | The total commission per trade.
commission_perTrade :: Commission -> Maybe Decimal

-- | FX Rates that have been used to convert commissions to a single
--   currency.
commission_fxRate :: Commission -> [FxRate]

-- | A type describing a commodity underlying asset.
data Commodity
Commodity :: Maybe ID -> [InstrumentId] -> Maybe XsdString -> Maybe CommodityBase -> Maybe CommodityDetails -> Maybe QuantityUnit -> Maybe Currency -> (Maybe (OneOf2 ExchangeId InformationSource)) -> Maybe SpecifiedPriceEnum -> (Maybe (OneOf3 DeliveryDatesEnum AdjustableDate GYearMonth)) -> Maybe Offset -> Maybe PositiveDecimal -> Commodity
commodity_ID :: Commodity -> Maybe ID

-- | Identification of the underlying asset, using public and/or private
--   identifiers.
commodity_instrumentId :: Commodity -> [InstrumentId]

-- | Long name of the underlying asset.
commodity_description :: Commodity -> Maybe XsdString

-- | A coding scheme value to identify the base type of the commodity being
--   traded. Where possible, this should follow the naming convention used
--   in the 2005 ISDA Commodity Definitions. For example, <tt>Oil</tt>.
commodity_base :: Commodity -> Maybe CommodityBase

-- | A coding scheme value to identify the commodity being traded more
--   specifically. Where possible, this should follow the naming convention
--   used in the 2005 ISDA Commodity Definitions. For example,
--   <tt>Brent</tt>.
commodity_details :: Commodity -> Maybe CommodityDetails

-- | A coding scheme value to identify the unit in which the undelryer is
--   denominated. Where possible, this should follow the naming convention
--   used in the 2005 ISDA Commodity Definitions.
commodity_unit :: Commodity -> Maybe QuantityUnit

-- | The currency in which the Commodity Reference Price is published.
commodity_currency :: Commodity -> Maybe Currency

-- | Choice between:
--   
--   <ol>
--   <li>For those commodities being traded with reference to the price of
--   a listed future, the exchange where that future is listed should be
--   specified here.</li>
--   <li>For those commodities being traded with reference to a price
--   distributed by a publication, that publication should be specified
--   here.</li>
--   </ol>
commodity_choice6 :: Commodity -> (Maybe (OneOf2 ExchangeId InformationSource))

-- | The Specified Price is not defined in the Commodity Reference Price
--   and so needs to be stated in the Underlyer definition as it will
--   impact the calculation of the Floating Price.
commodity_specifiedPrice :: Commodity -> Maybe SpecifiedPriceEnum

-- | Choice between:
--   
--   <ol>
--   <li>The Delivery Date is a NearbyMonth, for use when the Commodity
--   Transaction references Futures Contract.</li>
--   <li>The Delivery Date is a fixed, single day.</li>
--   <li>The Delivery Date is a fixed, single month.</li>
--   </ol>
commodity_choice8 :: Commodity -> (Maybe (OneOf3 DeliveryDatesEnum AdjustableDate GYearMonth))

-- | Specifies, for a Commodity Transaction that references a listed future
--   via the deliveryDates element, the day on which the specified future
--   will roll to the next nearby month when the referenced future expires.
--   If the future will not roll at all - i.e. the price will be taken from
--   the expiring contract, 0 should be specified here. If the future will
--   roll to the next nearby on the last trading day - i.e. the price will
--   be taken from the next nearby on the last trading day, then 1 should
--   be specified and so on.
commodity_deliveryDateRollConvention :: Commodity -> Maybe Offset

-- | Specifies the multiplier associated with a Transaction.
commodity_multiplier :: Commodity -> Maybe PositiveDecimal
data CommodityBase
CommodityBase :: Scheme -> CommodityBaseAttributes -> CommodityBase
data CommodityBaseAttributes
CommodityBaseAttributes :: Maybe AnyURI -> CommodityBaseAttributes
commodBaseAttrib_commodityBaseScheme :: CommodityBaseAttributes -> Maybe AnyURI

-- | Defines a commodity business day calendar.
data CommodityBusinessCalendar
CommodityBusinessCalendar :: Scheme -> CommodityBusinessCalendarAttributes -> CommodityBusinessCalendar
data CommodityBusinessCalendarAttributes
CommodityBusinessCalendarAttributes :: Maybe AnyURI -> CommodityBusinessCalendarAttributes
cbca_commodityBusinessCalendarScheme :: CommodityBusinessCalendarAttributes -> Maybe AnyURI

-- | Specifies the time with respect to a commodity business calendar.
data CommodityBusinessCalendarTime
CommodityBusinessCalendarTime :: Maybe HourMinuteTime -> Maybe TimeZone -> Maybe CommodityBusinessCalendar -> CommodityBusinessCalendarTime

-- | A time specified as Hour Ending in hh:mm:ss format where the second
--   component must be '00', e.g. 11am would be represented as 11:00:00.
commodBusCalTime_hourMinuteTime :: CommodityBusinessCalendarTime -> Maybe HourMinuteTime

-- | An identifier for a specific location or region which translates into
--   a combination of rules for calculating the UTC offset.
commodBusCalTime_timeZone :: CommodityBusinessCalendarTime -> Maybe TimeZone

-- | Identifies a commodity business day calendar.
commodBusCalTime_businessCalendar :: CommodityBusinessCalendarTime -> Maybe CommodityBusinessCalendar
data CommodityDetails
CommodityDetails :: Scheme -> CommodityDetailsAttributes -> CommodityDetails
data CommodityDetailsAttributes
CommodityDetailsAttributes :: Maybe AnyURI -> CommodityDetailsAttributes
commodDetailsAttrib_commodityDetailsScheme :: CommodityDetailsAttributes -> Maybe AnyURI

-- | A type describing the weight of each of the underlyer constituent
--   within the basket, either in absolute or relative terms.
data ConstituentWeight
ConstituentWeight :: (Maybe (OneOf3 Decimal RestrictedPercentage Money)) -> ConstituentWeight

-- | Choice between:
--   
--   <ol>
--   <li>The number of units (index or securities) that constitute the
--   underlyer of the swap. In the case of a basket swap, this element is
--   used to reference both the number of basket units, and the number of
--   each asset components of the basket when these are expressed in
--   absolute terms.</li>
--   <li>The relative weight of each respective basket constituent,
--   expressed in percentage. A basket percentage of 5% would be
--   represented as 0.05.</li>
--   <li>DEPRECATED. The relative weight of each respective basket
--   constituent, expressed as a monetary amount.</li>
--   </ol>
constitWeight_choice0 :: ConstituentWeight -> (Maybe (OneOf3 Decimal RestrictedPercentage Money))
data ConvertibleBond
ConvertibleBond :: Maybe ID -> [InstrumentId] -> Maybe XsdString -> Maybe IdentifiedCurrency -> Maybe ExchangeId -> Maybe ClearanceSystem -> Maybe ProductReference -> (Maybe (OneOf2 XsdString PartyReference)) -> Maybe CreditSeniority -> Maybe CouponType -> Maybe Decimal -> Maybe Date -> Maybe Decimal -> Maybe Decimal -> Maybe Period -> Maybe DayCountFraction -> Maybe EquityAsset -> Maybe Date -> ConvertibleBond
convertBond_ID :: ConvertibleBond -> Maybe ID

-- | Identification of the underlying asset, using public and/or private
--   identifiers.
convertBond_instrumentId :: ConvertibleBond -> [InstrumentId]

-- | Long name of the underlying asset.
convertBond_description :: ConvertibleBond -> Maybe XsdString

-- | Trading currency of the underlyer when transacted as a cash
--   instrument.
convertBond_currency :: ConvertibleBond -> Maybe IdentifiedCurrency

-- | Identification of the exchange on which this asset is transacted for
--   the purposes of calculating a contractural payoff. The term
--   <a>Exchange</a> is assumed to have the meaning as defined in the ISDA
--   2002 Equity Derivatives Definitions.
convertBond_exchangeId :: ConvertibleBond -> Maybe ExchangeId

-- | Identification of the clearance system associated with the transaction
--   exchange.
convertBond_clearanceSystem :: ConvertibleBond -> Maybe ClearanceSystem

-- | An optional reference to a full FpML product that defines the simple
--   product in greater detail. In case of inconsistency between the terms
--   of the simple product and those of the detailed definition, the values
--   in the simple product override those in the detailed definition.
convertBond_definition :: ConvertibleBond -> Maybe ProductReference

-- | Specifies the issuer name of a fixed income security or convertible
--   bond. This name can either be explicitly stated, or specified as an
--   href into another element of the document, such as the obligor.
--   
--   Choice between:
--   
--   <ol>
--   <li>issuerName</li>
--   <li>issuerPartyReference</li>
--   </ol>
convertBond_choice6 :: ConvertibleBond -> (Maybe (OneOf2 XsdString PartyReference))

-- | The repayment precedence of a debt instrument.
convertBond_seniority :: ConvertibleBond -> Maybe CreditSeniority

-- | Specifies if the bond has a variable coupon, step-up/down coupon or a
--   zero-coupon.
convertBond_couponType :: ConvertibleBond -> Maybe CouponType

-- | Specifies the coupon rate (expressed in percentage) of a fixed income
--   security or convertible bond.
convertBond_couponRate :: ConvertibleBond -> Maybe Decimal

-- | The date when the principal amount of a security becomes due and
--   payable.
convertBond_maturity :: ConvertibleBond -> Maybe Date

-- | Specifies the nominal amount of a fixed income security or convertible
--   bond.
convertBond_parValue :: ConvertibleBond -> Maybe Decimal

-- | Specifies the total amount of the issue. Corresponds to the par value
--   multiplied by the number of issued security.
convertBond_faceAmount :: ConvertibleBond -> Maybe Decimal

-- | Specifies the frequency at which the bond pays, e.g. 6M.
convertBond_paymentFrequency :: ConvertibleBond -> Maybe Period

-- | The day count basis for the bond.
convertBond_dayCountFraction :: ConvertibleBond -> Maybe DayCountFraction

-- | Specifies the equity in which the convertible bond can be converted.
convertBond_underlyingEquity :: ConvertibleBond -> Maybe EquityAsset

-- | Earlier date between the convertible bond put dates and its maturity
--   date.
convertBond_redemptionDate :: ConvertibleBond -> Maybe Date

-- | Defines a scheme of values for specifiying if the bond has a variable
--   coupon, step-up/down coupon or a zero-coupon.
data CouponType
CouponType :: Scheme -> CouponTypeAttributes -> CouponType
data CouponTypeAttributes
CouponTypeAttributes :: Maybe AnyURI -> CouponTypeAttributes
couponTypeAttrib_couponTypeScheme :: CouponTypeAttributes -> Maybe AnyURI

-- | Abstract base class for instruments intended to be used primarily for
--   building curves. (There are no subtypes defined for this abstract
--   type.)
data CurveInstrument
CurveInstrument :: CurveInstrument
data Deposit
Deposit :: Maybe ID -> [InstrumentId] -> Maybe XsdString -> Maybe IdentifiedCurrency -> Maybe ExchangeId -> Maybe ClearanceSystem -> Maybe ProductReference -> Maybe Period -> Maybe Period -> Maybe DayCountFraction -> Deposit
deposit_ID :: Deposit -> Maybe ID

-- | Identification of the underlying asset, using public and/or private
--   identifiers.
deposit_instrumentId :: Deposit -> [InstrumentId]

-- | Long name of the underlying asset.
deposit_description :: Deposit -> Maybe XsdString

-- | Trading currency of the underlyer when transacted as a cash
--   instrument.
deposit_currency :: Deposit -> Maybe IdentifiedCurrency

-- | Identification of the exchange on which this asset is transacted for
--   the purposes of calculating a contractural payoff. The term
--   <a>Exchange</a> is assumed to have the meaning as defined in the ISDA
--   2002 Equity Derivatives Definitions.
deposit_exchangeId :: Deposit -> Maybe ExchangeId

-- | Identification of the clearance system associated with the transaction
--   exchange.
deposit_clearanceSystem :: Deposit -> Maybe ClearanceSystem

-- | An optional reference to a full FpML product that defines the simple
--   product in greater detail. In case of inconsistency between the terms
--   of the simple product and those of the detailed definition, the values
--   in the simple product override those in the detailed definition.
deposit_definition :: Deposit -> Maybe ProductReference

-- | Specifies the term of the deposit, e.g. 5Y.
deposit_term :: Deposit -> Maybe Period

-- | Specifies the frequency at which the deposit pays, e.g. 6M.
deposit_paymentFrequency :: Deposit -> Maybe Period

-- | The day count basis for the deposit.
deposit_dayCountFraction :: Deposit -> Maybe DayCountFraction

-- | A type describing the dividend payout ratio associated with an equity
--   underlyer. In certain cases the actual ratio is not known on trade
--   inception, and only general conditions are then specified.
data DividendPayout
DividendPayout :: (Maybe (OneOf2 Decimal XsdString)) -> [PendingPayment] -> DividendPayout

-- | Choice between:
--   
--   <ol>
--   <li>Specifies the actual dividend payout ratio associated with the
--   equity underlyer.</li>
--   <li>Specifies the dividend payout conditions that will be applied in
--   the case where the actual ratio is not known, typically because of
--   regulatory or legal uncertainties.</li>
--   </ol>
dividPayout_choice0 :: DividendPayout -> (Maybe (OneOf2 Decimal XsdString))

-- | The next upcoming dividend payment or payments.
dividPayout_dividendPayment :: DividendPayout -> [PendingPayment]

-- | An exchange traded equity asset.
data EquityAsset
EquityAsset :: Maybe ID -> [InstrumentId] -> Maybe XsdString -> Maybe IdentifiedCurrency -> Maybe ExchangeId -> Maybe ClearanceSystem -> Maybe ProductReference -> [ExchangeId] -> [ExchangeId] -> [ExchangeId] -> EquityAsset
equityAsset_ID :: EquityAsset -> Maybe ID

-- | Identification of the underlying asset, using public and/or private
--   identifiers.
equityAsset_instrumentId :: EquityAsset -> [InstrumentId]

-- | Long name of the underlying asset.
equityAsset_description :: EquityAsset -> Maybe XsdString

-- | Trading currency of the underlyer when transacted as a cash
--   instrument.
equityAsset_currency :: EquityAsset -> Maybe IdentifiedCurrency

-- | Identification of the exchange on which this asset is transacted for
--   the purposes of calculating a contractural payoff. The term
--   <a>Exchange</a> is assumed to have the meaning as defined in the ISDA
--   2002 Equity Derivatives Definitions.
equityAsset_exchangeId :: EquityAsset -> Maybe ExchangeId

-- | Identification of the clearance system associated with the transaction
--   exchange.
equityAsset_clearanceSystem :: EquityAsset -> Maybe ClearanceSystem

-- | An optional reference to a full FpML product that defines the simple
--   product in greater detail. In case of inconsistency between the terms
--   of the simple product and those of the detailed definition, the values
--   in the simple product override those in the detailed definition.
equityAsset_definition :: EquityAsset -> Maybe ProductReference

-- | A short form unique identifier for a related exchange. If the element
--   is not present then the exchange shall be the primary exchange on
--   which listed futures and options on the underlying are listed. The
--   term <a>Exchange</a> is assumed to have the meaning as defined in the
--   ISDA 2002 Equity Derivatives Definitions.
equityAsset_relatedExchangeId :: EquityAsset -> [ExchangeId]

-- | A short form unique identifier for an exchange on which the reference
--   option contract is listed. This is to address the case where the
--   reference exchange for the future is different than the one for the
--   option. The options Exchange is referenced on share options when
--   Merger Elections are selected as Options Exchange Adjustment.
equityAsset_optionsExchangeId :: EquityAsset -> [ExchangeId]

-- | A short form unique identifier for a specified exchange. If the
--   element is not present then the exchange shall be default terms as
--   defined in the MCA; unless otherwise specified in the Transaction
--   Supplement.
equityAsset_specifiedExchangeId :: EquityAsset -> [ExchangeId]

-- | An abstract base class for all exchange traded financial products.
data ExchangeTraded
ExchangeTraded_Future :: Future -> ExchangeTraded
ExchangeTraded_ExchangeTradedContract :: ExchangeTradedContract -> ExchangeTraded
ExchangeTraded_ExchangeTradedCalculatedPrice :: ExchangeTradedCalculatedPrice -> ExchangeTraded
ExchangeTraded_EquityAsset :: EquityAsset -> ExchangeTraded

-- | Abstract base class for all exchange traded financial products with a
--   price which is calculated from exchange traded constituents.
data ExchangeTradedCalculatedPrice
ExchangeTradedCalculatedPrice_Index :: Index -> ExchangeTradedCalculatedPrice
ExchangeTradedCalculatedPrice_ExchangeTradedFund :: ExchangeTradedFund -> ExchangeTradedCalculatedPrice

-- | An exchange traded derivative contract.
data ExchangeTradedContract
ExchangeTradedContract :: Maybe ID -> [InstrumentId] -> Maybe XsdString -> Maybe IdentifiedCurrency -> Maybe ExchangeId -> Maybe ClearanceSystem -> Maybe ProductReference -> [ExchangeId] -> [ExchangeId] -> [ExchangeId] -> Maybe PositiveInteger -> Maybe XsdString -> Maybe AdjustableOrRelativeDate -> ExchangeTradedContract
exchTradedContr_ID :: ExchangeTradedContract -> Maybe ID

-- | Identification of the underlying asset, using public and/or private
--   identifiers.
exchTradedContr_instrumentId :: ExchangeTradedContract -> [InstrumentId]

-- | Long name of the underlying asset.
exchTradedContr_description :: ExchangeTradedContract -> Maybe XsdString

-- | Trading currency of the underlyer when transacted as a cash
--   instrument.
exchTradedContr_currency :: ExchangeTradedContract -> Maybe IdentifiedCurrency

-- | Identification of the exchange on which this asset is transacted for
--   the purposes of calculating a contractural payoff. The term
--   <a>Exchange</a> is assumed to have the meaning as defined in the ISDA
--   2002 Equity Derivatives Definitions.
exchTradedContr_exchangeId :: ExchangeTradedContract -> Maybe ExchangeId

-- | Identification of the clearance system associated with the transaction
--   exchange.
exchTradedContr_clearanceSystem :: ExchangeTradedContract -> Maybe ClearanceSystem

-- | An optional reference to a full FpML product that defines the simple
--   product in greater detail. In case of inconsistency between the terms
--   of the simple product and those of the detailed definition, the values
--   in the simple product override those in the detailed definition.
exchTradedContr_definition :: ExchangeTradedContract -> Maybe ProductReference

-- | A short form unique identifier for a related exchange. If the element
--   is not present then the exchange shall be the primary exchange on
--   which listed futures and options on the underlying are listed. The
--   term <a>Exchange</a> is assumed to have the meaning as defined in the
--   ISDA 2002 Equity Derivatives Definitions.
exchTradedContr_relatedExchangeId :: ExchangeTradedContract -> [ExchangeId]

-- | A short form unique identifier for an exchange on which the reference
--   option contract is listed. This is to address the case where the
--   reference exchange for the future is different than the one for the
--   option. The options Exchange is referenced on share options when
--   Merger Elections are selected as Options Exchange Adjustment.
exchTradedContr_optionsExchangeId :: ExchangeTradedContract -> [ExchangeId]

-- | A short form unique identifier for a specified exchange. If the
--   element is not present then the exchange shall be default terms as
--   defined in the MCA; unless otherwise specified in the Transaction
--   Supplement.
exchTradedContr_specifiedExchangeId :: ExchangeTradedContract -> [ExchangeId]

-- | Specifies the contract multiplier that can be associated with the
--   number of units.
exchTradedContr_multiplier :: ExchangeTradedContract -> Maybe PositiveInteger

-- | Specifies the contract that can be referenced, besides the undelyer
--   type.
exchTradedContr_contractReference :: ExchangeTradedContract -> Maybe XsdString

-- | The date when the contract expires.
exchTradedContr_expirationDate :: ExchangeTradedContract -> Maybe AdjustableOrRelativeDate

-- | An exchange traded fund whose price depends on exchange traded
--   constituents.
data ExchangeTradedFund
ExchangeTradedFund :: Maybe ID -> [InstrumentId] -> Maybe XsdString -> Maybe IdentifiedCurrency -> Maybe ExchangeId -> Maybe ClearanceSystem -> Maybe ProductReference -> [ExchangeId] -> [ExchangeId] -> [ExchangeId] -> [ExchangeId] -> Maybe XsdString -> ExchangeTradedFund
exchTradedFund_ID :: ExchangeTradedFund -> Maybe ID

-- | Identification of the underlying asset, using public and/or private
--   identifiers.
exchTradedFund_instrumentId :: ExchangeTradedFund -> [InstrumentId]

-- | Long name of the underlying asset.
exchTradedFund_description :: ExchangeTradedFund -> Maybe XsdString

-- | Trading currency of the underlyer when transacted as a cash
--   instrument.
exchTradedFund_currency :: ExchangeTradedFund -> Maybe IdentifiedCurrency

-- | Identification of the exchange on which this asset is transacted for
--   the purposes of calculating a contractural payoff. The term
--   <a>Exchange</a> is assumed to have the meaning as defined in the ISDA
--   2002 Equity Derivatives Definitions.
exchTradedFund_exchangeId :: ExchangeTradedFund -> Maybe ExchangeId

-- | Identification of the clearance system associated with the transaction
--   exchange.
exchTradedFund_clearanceSystem :: ExchangeTradedFund -> Maybe ClearanceSystem

-- | An optional reference to a full FpML product that defines the simple
--   product in greater detail. In case of inconsistency between the terms
--   of the simple product and those of the detailed definition, the values
--   in the simple product override those in the detailed definition.
exchTradedFund_definition :: ExchangeTradedFund -> Maybe ProductReference

-- | A short form unique identifier for a related exchange. If the element
--   is not present then the exchange shall be the primary exchange on
--   which listed futures and options on the underlying are listed. The
--   term <a>Exchange</a> is assumed to have the meaning as defined in the
--   ISDA 2002 Equity Derivatives Definitions.
exchTradedFund_relatedExchangeId :: ExchangeTradedFund -> [ExchangeId]

-- | A short form unique identifier for an exchange on which the reference
--   option contract is listed. This is to address the case where the
--   reference exchange for the future is different than the one for the
--   option. The options Exchange is referenced on share options when
--   Merger Elections are selected as Options Exchange Adjustment.
exchTradedFund_optionsExchangeId :: ExchangeTradedFund -> [ExchangeId]

-- | A short form unique identifier for a specified exchange. If the
--   element is not present then the exchange shall be default terms as
--   defined in the MCA; unless otherwise specified in the Transaction
--   Supplement.
exchTradedFund_specifiedExchangeId :: ExchangeTradedFund -> [ExchangeId]

-- | Identification of all the exchanges where constituents are traded. The
--   term <a>Exchange</a> is assumed to have the meaning as defined in the
--   ISDA 2002 Equity Derivatives Definitions.
exchTradedFund_constituentExchangeId :: ExchangeTradedFund -> [ExchangeId]

-- | Specifies the fund manager that is in charge of the fund.
exchTradedFund_fundManager :: ExchangeTradedFund -> Maybe XsdString

-- | A type describing the type of loan facility.
data FacilityType
FacilityType :: Scheme -> FacilityTypeAttributes -> FacilityType
data FacilityTypeAttributes
FacilityTypeAttributes :: Maybe AnyURI -> FacilityTypeAttributes
facilTypeAttrib_facilityTypeScheme :: FacilityTypeAttributes -> Maybe AnyURI

-- | An exchange traded future contract.
data Future
Future :: Maybe ID -> [InstrumentId] -> Maybe XsdString -> Maybe IdentifiedCurrency -> Maybe ExchangeId -> Maybe ClearanceSystem -> Maybe ProductReference -> [ExchangeId] -> [ExchangeId] -> [ExchangeId] -> Maybe PositiveInteger -> Maybe XsdString -> Maybe Date -> Future
future_ID :: Future -> Maybe ID

-- | Identification of the underlying asset, using public and/or private
--   identifiers.
future_instrumentId :: Future -> [InstrumentId]

-- | Long name of the underlying asset.
future_description :: Future -> Maybe XsdString

-- | Trading currency of the underlyer when transacted as a cash
--   instrument.
future_currency :: Future -> Maybe IdentifiedCurrency

-- | Identification of the exchange on which this asset is transacted for
--   the purposes of calculating a contractural payoff. The term
--   <a>Exchange</a> is assumed to have the meaning as defined in the ISDA
--   2002 Equity Derivatives Definitions.
future_exchangeId :: Future -> Maybe ExchangeId

-- | Identification of the clearance system associated with the transaction
--   exchange.
future_clearanceSystem :: Future -> Maybe ClearanceSystem

-- | An optional reference to a full FpML product that defines the simple
--   product in greater detail. In case of inconsistency between the terms
--   of the simple product and those of the detailed definition, the values
--   in the simple product override those in the detailed definition.
future_definition :: Future -> Maybe ProductReference

-- | A short form unique identifier for a related exchange. If the element
--   is not present then the exchange shall be the primary exchange on
--   which listed futures and options on the underlying are listed. The
--   term <a>Exchange</a> is assumed to have the meaning as defined in the
--   ISDA 2002 Equity Derivatives Definitions.
future_relatedExchangeId :: Future -> [ExchangeId]

-- | A short form unique identifier for an exchange on which the reference
--   option contract is listed. This is to address the case where the
--   reference exchange for the future is different than the one for the
--   option. The options Exchange is referenced on share options when
--   Merger Elections are selected as Options Exchange Adjustment.
future_optionsExchangeId :: Future -> [ExchangeId]

-- | A short form unique identifier for a specified exchange. If the
--   element is not present then the exchange shall be default terms as
--   defined in the MCA; unless otherwise specified in the Transaction
--   Supplement.
future_specifiedExchangeId :: Future -> [ExchangeId]

-- | Specifies the contract multiplier that can be associated with the
--   number of units.
future_multiplier :: Future -> Maybe PositiveInteger

-- | Specifies the future contract that can be referenced, besides the
--   equity or index reference defined as part of the UnderlyerAsset type.
future_contractReference :: Future -> Maybe XsdString

-- | The date when the future contract expires.
future_maturity :: Future -> Maybe Date

-- | A type defining a short form unique identifier for a future contract.
data FutureId
FutureId :: Scheme -> FutureIdAttributes -> FutureId
data FutureIdAttributes
FutureIdAttributes :: Maybe AnyURI -> FutureIdAttributes
futureIdAttrib_futureIdScheme :: FutureIdAttributes -> Maybe AnyURI
data FxConversion
FxConversion :: (Maybe (OneOf2 AmountReference [FxRate])) -> FxConversion

-- | Choice between:
--   
--   <ol>
--   <li>amountRelativeTo</li>
--   <li>Specifies a currency conversion rate.</li>
--   </ol>
fxConversion_choice0 :: FxConversion -> (Maybe (OneOf2 AmountReference [FxRate]))
data FxRateAsset
FxRateAsset :: Maybe ID -> [InstrumentId] -> Maybe XsdString -> Maybe IdentifiedCurrency -> Maybe ExchangeId -> Maybe ClearanceSystem -> Maybe ProductReference -> Maybe QuotedCurrencyPair -> Maybe FxSpotRateSource -> FxRateAsset
fxRateAsset_ID :: FxRateAsset -> Maybe ID

-- | Identification of the underlying asset, using public and/or private
--   identifiers.
fxRateAsset_instrumentId :: FxRateAsset -> [InstrumentId]

-- | Long name of the underlying asset.
fxRateAsset_description :: FxRateAsset -> Maybe XsdString

-- | Trading currency of the underlyer when transacted as a cash
--   instrument.
fxRateAsset_currency :: FxRateAsset -> Maybe IdentifiedCurrency

-- | Identification of the exchange on which this asset is transacted for
--   the purposes of calculating a contractural payoff. The term
--   <a>Exchange</a> is assumed to have the meaning as defined in the ISDA
--   2002 Equity Derivatives Definitions.
fxRateAsset_exchangeId :: FxRateAsset -> Maybe ExchangeId

-- | Identification of the clearance system associated with the transaction
--   exchange.
fxRateAsset_clearanceSystem :: FxRateAsset -> Maybe ClearanceSystem

-- | An optional reference to a full FpML product that defines the simple
--   product in greater detail. In case of inconsistency between the terms
--   of the simple product and those of the detailed definition, the values
--   in the simple product override those in the detailed definition.
fxRateAsset_definition :: FxRateAsset -> Maybe ProductReference

-- | Defines the two currencies for an FX trade and the quotation
--   relationship between the two currencies.
fxRateAsset_quotedCurrencyPair :: FxRateAsset -> Maybe QuotedCurrencyPair

-- | Defines the source of the FX rate.
fxRateAsset_rateSource :: FxRateAsset -> Maybe FxSpotRateSource

-- | A generic type describing an identified asset.
data IdentifiedAsset
IdentifiedAsset_UnderlyingAsset :: UnderlyingAsset -> IdentifiedAsset
IdentifiedAsset_CurveInstrument :: CurveInstrument -> IdentifiedAsset
IdentifiedAsset_Commodity :: Commodity -> IdentifiedAsset

-- | A published index whose price depends on exchange traded constituents.
data Index
Index :: Maybe ID -> [InstrumentId] -> Maybe XsdString -> Maybe IdentifiedCurrency -> Maybe ExchangeId -> Maybe ClearanceSystem -> Maybe ProductReference -> [ExchangeId] -> [ExchangeId] -> [ExchangeId] -> [ExchangeId] -> Maybe FutureId -> Index
index_ID :: Index -> Maybe ID

-- | Identification of the underlying asset, using public and/or private
--   identifiers.
index_instrumentId :: Index -> [InstrumentId]

-- | Long name of the underlying asset.
index_description :: Index -> Maybe XsdString

-- | Trading currency of the underlyer when transacted as a cash
--   instrument.
index_currency :: Index -> Maybe IdentifiedCurrency

-- | Identification of the exchange on which this asset is transacted for
--   the purposes of calculating a contractural payoff. The term
--   <a>Exchange</a> is assumed to have the meaning as defined in the ISDA
--   2002 Equity Derivatives Definitions.
index_exchangeId :: Index -> Maybe ExchangeId

-- | Identification of the clearance system associated with the transaction
--   exchange.
index_clearanceSystem :: Index -> Maybe ClearanceSystem

-- | An optional reference to a full FpML product that defines the simple
--   product in greater detail. In case of inconsistency between the terms
--   of the simple product and those of the detailed definition, the values
--   in the simple product override those in the detailed definition.
index_definition :: Index -> Maybe ProductReference

-- | A short form unique identifier for a related exchange. If the element
--   is not present then the exchange shall be the primary exchange on
--   which listed futures and options on the underlying are listed. The
--   term <a>Exchange</a> is assumed to have the meaning as defined in the
--   ISDA 2002 Equity Derivatives Definitions.
index_relatedExchangeId :: Index -> [ExchangeId]

-- | A short form unique identifier for an exchange on which the reference
--   option contract is listed. This is to address the case where the
--   reference exchange for the future is different than the one for the
--   option. The options Exchange is referenced on share options when
--   Merger Elections are selected as Options Exchange Adjustment.
index_optionsExchangeId :: Index -> [ExchangeId]

-- | A short form unique identifier for a specified exchange. If the
--   element is not present then the exchange shall be default terms as
--   defined in the MCA; unless otherwise specified in the Transaction
--   Supplement.
index_specifiedExchangeId :: Index -> [ExchangeId]

-- | Identification of all the exchanges where constituents are traded. The
--   term <a>Exchange</a> is assumed to have the meaning as defined in the
--   ISDA 2002 Equity Derivatives Definitions.
index_constituentExchangeId :: Index -> [ExchangeId]

-- | A short form unique identifier for the reference future contract in
--   the case of an index underlyer.
index_futureId :: Index -> Maybe FutureId

-- | A type describing the liens associated with a loan facility.
data Lien
Lien :: Scheme -> LienAttributes -> Lien
data LienAttributes
LienAttributes :: Maybe AnyURI -> LienAttributes
lienAttrib_lienScheme :: LienAttributes -> Maybe AnyURI

-- | A type describing a loan underlying asset.
data Loan
Loan :: Maybe ID -> [InstrumentId] -> Maybe XsdString -> Maybe IdentifiedCurrency -> Maybe ExchangeId -> Maybe ClearanceSystem -> Maybe ProductReference -> [OneOf2 LegalEntity LegalEntityReference] -> Maybe Lien -> Maybe FacilityType -> Maybe Date -> Maybe Date -> Maybe UnderlyingAssetTranche -> Loan
loan_ID :: Loan -> Maybe ID

-- | Identification of the underlying asset, using public and/or private
--   identifiers.
loan_instrumentId :: Loan -> [InstrumentId]

-- | Long name of the underlying asset.
loan_description :: Loan -> Maybe XsdString

-- | Trading currency of the underlyer when transacted as a cash
--   instrument.
loan_currency :: Loan -> Maybe IdentifiedCurrency

-- | Identification of the exchange on which this asset is transacted for
--   the purposes of calculating a contractural payoff. The term
--   <a>Exchange</a> is assumed to have the meaning as defined in the ISDA
--   2002 Equity Derivatives Definitions.
loan_exchangeId :: Loan -> Maybe ExchangeId

-- | Identification of the clearance system associated with the transaction
--   exchange.
loan_clearanceSystem :: Loan -> Maybe ClearanceSystem

-- | An optional reference to a full FpML product that defines the simple
--   product in greater detail. In case of inconsistency between the terms
--   of the simple product and those of the detailed definition, the values
--   in the simple product override those in the detailed definition.
loan_definition :: Loan -> Maybe ProductReference

-- | Specifies the borrower. There can be more than one borrower. It is
--   meant to be used in the event that there is no Bloomberg Id or the
--   Secured List isn't applicable.
--   
--   Choice between:
--   
--   <ol>
--   <li>borrower</li>
--   <li>borrowerReference</li>
--   </ol>
loan_choice6 :: Loan -> [OneOf2 LegalEntity LegalEntityReference]

-- | Specifies the seniority level of the lien.
loan_lien :: Loan -> Maybe Lien

-- | The type of loan facility (letter of credit, revolving, ...).
loan_facilityType :: Loan -> Maybe FacilityType

-- | The date when the principal amount of the loan becomes due and
--   payable.
loan_maturity :: Loan -> Maybe Date

-- | The credit agreement date is the closing date (the date where the
--   agreement has been signed) for the loans in the credit agreement.
--   Funding of the facilities occurs on (or sometimes a little after) the
--   Credit Agreement date. This underlyer attribute is used to help
--   identify which of the company's outstanding loans are being referenced
--   by knowing to which credit agreement it belongs. ISDA Standards Terms
--   Supplement term: Date of Original Credit Agreement.
loan_creditAgreementDate :: Loan -> Maybe Date

-- | The loan tranche that is subject to the derivative transaction. It
--   will typically be referenced as the Bloomberg tranche number. ISDA
--   Standards Terms Supplement term: Bloomberg Tranche Number.
loan_tranche :: Loan -> Maybe UnderlyingAssetTranche

-- | A type describing a mortgage asset.
data Mortgage
Mortgage :: Maybe ID -> [InstrumentId] -> Maybe XsdString -> Maybe IdentifiedCurrency -> Maybe ExchangeId -> Maybe ClearanceSystem -> Maybe ProductReference -> (Maybe (OneOf2 LegalEntity LegalEntityReference)) -> (Maybe (OneOf2 XsdString PartyReference)) -> Maybe CreditSeniority -> Maybe CouponType -> Maybe Decimal -> Maybe Date -> Maybe Period -> Maybe DayCountFraction -> Maybe Decimal -> Maybe AssetPool -> Maybe MortgageSector -> Maybe Token -> Mortgage
mortgage_ID :: Mortgage -> Maybe ID

-- | Identification of the underlying asset, using public and/or private
--   identifiers.
mortgage_instrumentId :: Mortgage -> [InstrumentId]

-- | Long name of the underlying asset.
mortgage_description :: Mortgage -> Maybe XsdString

-- | Trading currency of the underlyer when transacted as a cash
--   instrument.
mortgage_currency :: Mortgage -> Maybe IdentifiedCurrency

-- | Identification of the exchange on which this asset is transacted for
--   the purposes of calculating a contractural payoff. The term
--   <a>Exchange</a> is assumed to have the meaning as defined in the ISDA
--   2002 Equity Derivatives Definitions.
mortgage_exchangeId :: Mortgage -> Maybe ExchangeId

-- | Identification of the clearance system associated with the transaction
--   exchange.
mortgage_clearanceSystem :: Mortgage -> Maybe ClearanceSystem

-- | An optional reference to a full FpML product that defines the simple
--   product in greater detail. In case of inconsistency between the terms
--   of the simple product and those of the detailed definition, the values
--   in the simple product override those in the detailed definition.
mortgage_definition :: Mortgage -> Maybe ProductReference

-- | Applicable to the case of default swaps on MBS terms. For specifying
--   the insurer name, when applicable (when the element is not present, it
--   signifies that the insurer is Not Applicable)
--   
--   Choice between:
--   
--   <ol>
--   <li>insurer</li>
--   <li>insurerReference</li>
--   </ol>
mortgage_choice6 :: Mortgage -> (Maybe (OneOf2 LegalEntity LegalEntityReference))

-- | Specifies the issuer name of a fixed income security or convertible
--   bond. This name can either be explicitly stated, or specified as an
--   href into another element of the document, such as the obligor.
--   
--   Choice between:
--   
--   <ol>
--   <li>issuerName</li>
--   <li>issuerPartyReference</li>
--   </ol>
mortgage_choice7 :: Mortgage -> (Maybe (OneOf2 XsdString PartyReference))

-- | The repayment precedence of a debt instrument.
mortgage_seniority :: Mortgage -> Maybe CreditSeniority

-- | Specifies if the bond has a variable coupon, step-up/down coupon or a
--   zero-coupon.
mortgage_couponType :: Mortgage -> Maybe CouponType

-- | Specifies the coupon rate (expressed in percentage) of a fixed income
--   security or convertible bond.
mortgage_couponRate :: Mortgage -> Maybe Decimal

-- | The date when the principal amount of a security becomes due and
--   payable.
mortgage_maturity :: Mortgage -> Maybe Date

-- | Specifies the frequency at which the bond pays, e.g. 6M.
mortgage_paymentFrequency :: Mortgage -> Maybe Period

-- | The day count basis for the bond.
mortgage_dayCountFraction :: Mortgage -> Maybe DayCountFraction

-- | The initial issued amount of the mortgage obligation.
mortgage_originalPrincipalAmount :: Mortgage -> Maybe Decimal

-- | The morgage pool that is underneath the mortgage obligation.
mortgage_pool :: Mortgage -> Maybe AssetPool

-- | The sector classification of the mortgage obligation.
mortgage_sector :: Mortgage -> Maybe MortgageSector

-- | The mortgage obligation tranche that is subject to the derivative
--   transaction.
mortgage_tranche :: Mortgage -> Maybe Token

-- | A type describing the typology of mortgage obligations.
data MortgageSector
MortgageSector :: Scheme -> MortgageSectorAttributes -> MortgageSector
data MortgageSectorAttributes
MortgageSectorAttributes :: Maybe AnyURI -> MortgageSectorAttributes
mortgSectorAttrib_mortgageSectorScheme :: MortgageSectorAttributes -> Maybe AnyURI
data MutualFund
MutualFund :: Maybe ID -> [InstrumentId] -> Maybe XsdString -> Maybe IdentifiedCurrency -> Maybe ExchangeId -> Maybe ClearanceSystem -> Maybe ProductReference -> Maybe Boolean -> Maybe XsdString -> MutualFund
mutualFund_ID :: MutualFund -> Maybe ID

-- | Identification of the underlying asset, using public and/or private
--   identifiers.
mutualFund_instrumentId :: MutualFund -> [InstrumentId]

-- | Long name of the underlying asset.
mutualFund_description :: MutualFund -> Maybe XsdString

-- | Trading currency of the underlyer when transacted as a cash
--   instrument.
mutualFund_currency :: MutualFund -> Maybe IdentifiedCurrency

-- | Identification of the exchange on which this asset is transacted for
--   the purposes of calculating a contractural payoff. The term
--   <a>Exchange</a> is assumed to have the meaning as defined in the ISDA
--   2002 Equity Derivatives Definitions.
mutualFund_exchangeId :: MutualFund -> Maybe ExchangeId

-- | Identification of the clearance system associated with the transaction
--   exchange.
mutualFund_clearanceSystem :: MutualFund -> Maybe ClearanceSystem

-- | An optional reference to a full FpML product that defines the simple
--   product in greater detail. In case of inconsistency between the terms
--   of the simple product and those of the detailed definition, the values
--   in the simple product override those in the detailed definition.
mutualFund_definition :: MutualFund -> Maybe ProductReference

-- | Boolean indicator to specify whether the mutual fund is an open-ended
--   mutual fund.
mutualFund_openEndedFund :: MutualFund -> Maybe Boolean

-- | Specifies the fund manager that is in charge of the fund.
mutualFund_fundManager :: MutualFund -> Maybe XsdString

-- | A structure representing a pending dividend or coupon payment.
data PendingPayment
PendingPayment :: Maybe ID -> Maybe Date -> Maybe Money -> Maybe Money -> PendingPayment
pendingPayment_ID :: PendingPayment -> Maybe ID

-- | The date that the dividend or coupon is due.
pendingPayment_paymentDate :: PendingPayment -> Maybe Date

-- | The amount of the dividend or coupon payment. Value of dividends or
--   coupon between ex and pay date. Stock: if we are between ex-date and
--   pay-date and the dividend is payable under the swap, then this should
--   be the ex-div amount * # of securities. Bond: regardless of where we
--   are vis-a-vis resets: (coupon % * face of bonds on swap * (bond day
--   count fraction using days last coupon pay date of the bond through
--   today).
pendingPayment_amount :: PendingPayment -> Maybe Money

-- | Accrued interest on the dividend or coupon payment. When the TRS is
--   structured to pay a dividend or coupon on reset after payable date,
--   you may earn interest on these amounts. This field indicates the
--   interest accrued on dividend/coupon from pay date to statement date.
--   This will only apply to a handful of agreements where dividendss are
--   held to the next reset AND you receive/pay interest on unpaid amounts.
pendingPayment_accruedInterest :: PendingPayment -> Maybe Money

-- | A type describing the strike price.
data Price
Price :: Maybe Commission -> OneOf3 (DeterminationMethod, Maybe (ActualPrice), Maybe (ActualPrice), Maybe (Decimal), Maybe (FxConversion)) AmountReference (Maybe (ActualPrice), Maybe (ActualPrice), Maybe (Decimal), Maybe (FxConversion)) -> Maybe Decimal -> Maybe QuotationCharacteristics -> Price

-- | This optional component specifies the commission to be charged for
--   executing the hedge transactions.
price_commission :: Price -> Maybe Commission

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>Specifies the method according to which an amount or a date is
--   determined.</li>
--   <li>Specifies the price of the underlyer, before commissions.</li>
--   <li>Specifies the price of the underlyer, net of commissions.</li>
--   <li>Specifies the accrued interest that are part of the dirty price in
--   the case of a fixed income security or a convertible bond. Expressed
--   in percentage of the notional.</li>
--   <li>Specifies the currency conversion rate that applies to an amount.
--   This rate can either be defined elsewhere in the document (case of a
--   quanto swap), or explicitly described through this component.</li>
--   </ul>
--   
--   <ol>
--   <li>The href attribute value will be a pointer style reference to the
--   element or component elsewhere in the document where the anchor amount
--   is defined.</li>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>Specifies the price of the underlyer, before commissions.</li>
--   <li>Specifies the price of the underlyer, net of commissions.</li>
--   <li>Specifies the accrued interest that are part of the dirty price in
--   the case of a fixed income security or a convertible bond. Expressed
--   in percentage of the notional.</li>
--   <li>Specifies the currency conversion rate that applies to an amount.
--   This rate can either be defined elsewhere in the document (case of a
--   quanto swap), or explicitly described through this component.</li>
--   </ul>
price_choice1 :: Price -> OneOf3 (DeterminationMethod, Maybe (ActualPrice), Maybe (ActualPrice), Maybe (Decimal), Maybe (FxConversion)) AmountReference (Maybe (ActualPrice), Maybe (ActualPrice), Maybe (Decimal), Maybe (FxConversion))

-- | The net price excluding accrued interest. The <a>Dirty Price</a> for
--   bonds is put in the <a>netPrice</a> element, which includes accrued
--   interest. Thus netPrice - cleanNetPrice = accruedInterest. The
--   currency and price expression for this field are the same as those for
--   the (dirty) netPrice.
price_cleanNetPrice :: Price -> Maybe Decimal

-- | Allows information about how the price was quoted to be provided.
price_quotationCharacteristics :: Price -> Maybe QuotationCharacteristics

-- | The units in which a price is quoted.
data PriceQuoteUnits
PriceQuoteUnits :: Scheme -> PriceQuoteUnitsAttributes -> PriceQuoteUnits
data PriceQuoteUnitsAttributes
PriceQuoteUnitsAttributes :: Maybe AnyURI -> PriceQuoteUnitsAttributes
priceQuoteUnitsAttrib_priceQuoteUnitsScheme :: PriceQuoteUnitsAttributes -> Maybe AnyURI
data QuantityUnit
QuantityUnit :: Scheme -> QuantityUnitAttributes -> QuantityUnit
data QuantityUnitAttributes
QuantityUnitAttributes :: Maybe AnyURI -> QuantityUnitAttributes
quantUnitAttrib_quantityUnitScheme :: QuantityUnitAttributes -> Maybe AnyURI

-- | A type representing a set of characteristics that describe a
--   quotation.
data QuotationCharacteristics
QuotationCharacteristics :: Maybe AssetMeasureType -> Maybe PriceQuoteUnits -> Maybe QuotationSideEnum -> Maybe Currency -> Maybe ReportingCurrencyType -> Maybe QuoteTiming -> (Maybe (OneOf2 BusinessCenter ExchangeId)) -> [InformationSource] -> Maybe PricingModel -> Maybe DateTime -> Maybe Date -> Maybe DateTime -> Maybe CashflowType -> QuotationCharacteristics

-- | The type of the value that is measured. This could be an NPV, a cash
--   flow, a clean price, etc.
quotChar_measureType :: QuotationCharacteristics -> Maybe AssetMeasureType

-- | The optional units that the measure is expressed in. If not supplied,
--   this is assumed to be a price/value in currency units.
quotChar_quoteUnits :: QuotationCharacteristics -> Maybe PriceQuoteUnits

-- | The side (bid<i>mid</i>ask) of the measure.
quotChar_side :: QuotationCharacteristics -> Maybe QuotationSideEnum

-- | The optional currency that the measure is expressed in. If not
--   supplied, this is defaulted from the reportingCurrency in the
--   valuationScenarioDefinition.
quotChar_currency :: QuotationCharacteristics -> Maybe Currency

-- | The optional currency that the measure is expressed in. If not
--   supplied, this is defaulted from the reportingCurrency in the
--   valuationScenarioDefinition.
quotChar_currencyType :: QuotationCharacteristics -> Maybe ReportingCurrencyType

-- | When during a day the quote is for. Typically, if this element is
--   supplied, the QuoteLocation needs also to be supplied.
quotChar_timing :: QuotationCharacteristics -> Maybe QuoteTiming

-- | Choice between:
--   
--   <ol>
--   <li>A city or other business center.</li>
--   <li>The exchange (e.g. stock or futures exchange) from which the quote
--   is obtained.</li>
--   </ol>
quotChar_choice6 :: QuotationCharacteristics -> (Maybe (OneOf2 BusinessCenter ExchangeId))

-- | The information source where a published or displayed market rate will
--   be obtained, e.g. Telerate Page 3750.
quotChar_informationSource :: QuotationCharacteristics -> [InformationSource]

-- | .
quotChar_pricingModel :: QuotationCharacteristics -> Maybe PricingModel

-- | When the quote was observed or derived.
quotChar_time :: QuotationCharacteristics -> Maybe DateTime

-- | When the quote was computed.
quotChar_valuationDate :: QuotationCharacteristics -> Maybe Date

-- | When does the quote cease to be valid.
quotChar_expiryTime :: QuotationCharacteristics -> Maybe DateTime

-- | For cash flows, the type of the cash flows. Examples include: Coupon
--   payment, Premium Fee, Settlement Fee, Brokerage Fee, etc.
quotChar_cashflowType :: QuotationCharacteristics -> Maybe CashflowType

-- | The type of the time of the quote.
data QuoteTiming
QuoteTiming :: Scheme -> QuoteTimingAttributes -> QuoteTiming
data QuoteTimingAttributes
QuoteTimingAttributes :: Maybe AnyURI -> QuoteTimingAttributes
quoteTimingAttrib_quoteTimingScheme :: QuoteTimingAttributes -> Maybe AnyURI
data RateIndex
RateIndex :: Maybe ID -> [InstrumentId] -> Maybe XsdString -> Maybe IdentifiedCurrency -> Maybe ExchangeId -> Maybe ClearanceSystem -> Maybe ProductReference -> Maybe FloatingRateIndex -> Maybe Period -> Maybe Period -> Maybe DayCountFraction -> RateIndex
rateIndex_ID :: RateIndex -> Maybe ID

-- | Identification of the underlying asset, using public and/or private
--   identifiers.
rateIndex_instrumentId :: RateIndex -> [InstrumentId]

-- | Long name of the underlying asset.
rateIndex_description :: RateIndex -> Maybe XsdString

-- | Trading currency of the underlyer when transacted as a cash
--   instrument.
rateIndex_currency :: RateIndex -> Maybe IdentifiedCurrency

-- | Identification of the exchange on which this asset is transacted for
--   the purposes of calculating a contractural payoff. The term
--   <a>Exchange</a> is assumed to have the meaning as defined in the ISDA
--   2002 Equity Derivatives Definitions.
rateIndex_exchangeId :: RateIndex -> Maybe ExchangeId

-- | Identification of the clearance system associated with the transaction
--   exchange.
rateIndex_clearanceSystem :: RateIndex -> Maybe ClearanceSystem

-- | An optional reference to a full FpML product that defines the simple
--   product in greater detail. In case of inconsistency between the terms
--   of the simple product and those of the detailed definition, the values
--   in the simple product override those in the detailed definition.
rateIndex_definition :: RateIndex -> Maybe ProductReference
rateIndex_floatingRateIndex :: RateIndex -> Maybe FloatingRateIndex

-- | Specifies the term of the simple swap, e.g. 5Y.
rateIndex_term :: RateIndex -> Maybe Period

-- | Specifies the frequency at which the index pays, e.g. 6M.
rateIndex_paymentFrequency :: RateIndex -> Maybe Period

-- | The day count basis for the index.
rateIndex_dayCountFraction :: RateIndex -> Maybe DayCountFraction

-- | A scheme identifying the type of currency that was used to report the
--   value of an asset. For example, this could contain values like
--   SettlementCurrency, QuoteCurrency, UnitCurrency, etc.
data ReportingCurrencyType
ReportingCurrencyType :: Scheme -> ReportingCurrencyTypeAttributes -> ReportingCurrencyType
data ReportingCurrencyTypeAttributes
ReportingCurrencyTypeAttributes :: Maybe AnyURI -> ReportingCurrencyTypeAttributes
reportCurrenTypeAttrib_reportingCurrencyTypeScheme :: ReportingCurrencyTypeAttributes -> Maybe AnyURI
data SimpleCreditDefaultSwap
SimpleCreditDefaultSwap :: Maybe ID -> [InstrumentId] -> Maybe XsdString -> Maybe IdentifiedCurrency -> Maybe ExchangeId -> Maybe ClearanceSystem -> Maybe ProductReference -> (Maybe (OneOf2 LegalEntity LegalEntityReference)) -> Maybe Period -> Maybe Period -> SimpleCreditDefaultSwap
simpleCreditDefaultSwap_ID :: SimpleCreditDefaultSwap -> Maybe ID

-- | Identification of the underlying asset, using public and/or private
--   identifiers.
simpleCreditDefaultSwap_instrumentId :: SimpleCreditDefaultSwap -> [InstrumentId]

-- | Long name of the underlying asset.
simpleCreditDefaultSwap_description :: SimpleCreditDefaultSwap -> Maybe XsdString

-- | Trading currency of the underlyer when transacted as a cash
--   instrument.
simpleCreditDefaultSwap_currency :: SimpleCreditDefaultSwap -> Maybe IdentifiedCurrency

-- | Identification of the exchange on which this asset is transacted for
--   the purposes of calculating a contractural payoff. The term
--   <a>Exchange</a> is assumed to have the meaning as defined in the ISDA
--   2002 Equity Derivatives Definitions.
simpleCreditDefaultSwap_exchangeId :: SimpleCreditDefaultSwap -> Maybe ExchangeId

-- | Identification of the clearance system associated with the transaction
--   exchange.
simpleCreditDefaultSwap_clearanceSystem :: SimpleCreditDefaultSwap -> Maybe ClearanceSystem

-- | An optional reference to a full FpML product that defines the simple
--   product in greater detail. In case of inconsistency between the terms
--   of the simple product and those of the detailed definition, the values
--   in the simple product override those in the detailed definition.
simpleCreditDefaultSwap_definition :: SimpleCreditDefaultSwap -> Maybe ProductReference

-- | Choice between:
--   
--   <ol>
--   <li>The entity for which this is defined.</li>
--   <li>An XML reference a credit entity defined elsewhere in the
--   document.</li>
--   </ol>
simpleCreditDefaultSwap_choice6 :: SimpleCreditDefaultSwap -> (Maybe (OneOf2 LegalEntity LegalEntityReference))

-- | Specifies the term of the simple CD swap, e.g. 5Y.
simpleCreditDefaultSwap_term :: SimpleCreditDefaultSwap -> Maybe Period

-- | Specifies the frequency at which the swap pays, e.g. 6M.
simpleCreditDefaultSwap_paymentFrequency :: SimpleCreditDefaultSwap -> Maybe Period
data SimpleFra
SimpleFra :: Maybe ID -> [InstrumentId] -> Maybe XsdString -> Maybe IdentifiedCurrency -> Maybe ExchangeId -> Maybe ClearanceSystem -> Maybe ProductReference -> Maybe Period -> Maybe Period -> Maybe DayCountFraction -> SimpleFra
simpleFra_ID :: SimpleFra -> Maybe ID

-- | Identification of the underlying asset, using public and/or private
--   identifiers.
simpleFra_instrumentId :: SimpleFra -> [InstrumentId]

-- | Long name of the underlying asset.
simpleFra_description :: SimpleFra -> Maybe XsdString

-- | Trading currency of the underlyer when transacted as a cash
--   instrument.
simpleFra_currency :: SimpleFra -> Maybe IdentifiedCurrency

-- | Identification of the exchange on which this asset is transacted for
--   the purposes of calculating a contractural payoff. The term
--   <a>Exchange</a> is assumed to have the meaning as defined in the ISDA
--   2002 Equity Derivatives Definitions.
simpleFra_exchangeId :: SimpleFra -> Maybe ExchangeId

-- | Identification of the clearance system associated with the transaction
--   exchange.
simpleFra_clearanceSystem :: SimpleFra -> Maybe ClearanceSystem

-- | An optional reference to a full FpML product that defines the simple
--   product in greater detail. In case of inconsistency between the terms
--   of the simple product and those of the detailed definition, the values
--   in the simple product override those in the detailed definition.
simpleFra_definition :: SimpleFra -> Maybe ProductReference

-- | Specifies the start term of the simple fra, e.g. 3M.
simpleFra_startTerm :: SimpleFra -> Maybe Period

-- | Specifies the end term of the simple fra, e.g. 9M.
simpleFra_endTerm :: SimpleFra -> Maybe Period

-- | The day count basis for the FRA.
simpleFra_dayCountFraction :: SimpleFra -> Maybe DayCountFraction
data SimpleIRSwap
SimpleIRSwap :: Maybe ID -> [InstrumentId] -> Maybe XsdString -> Maybe IdentifiedCurrency -> Maybe ExchangeId -> Maybe ClearanceSystem -> Maybe ProductReference -> Maybe Period -> Maybe Period -> Maybe DayCountFraction -> SimpleIRSwap
simpleIRSwap_ID :: SimpleIRSwap -> Maybe ID

-- | Identification of the underlying asset, using public and/or private
--   identifiers.
simpleIRSwap_instrumentId :: SimpleIRSwap -> [InstrumentId]

-- | Long name of the underlying asset.
simpleIRSwap_description :: SimpleIRSwap -> Maybe XsdString

-- | Trading currency of the underlyer when transacted as a cash
--   instrument.
simpleIRSwap_currency :: SimpleIRSwap -> Maybe IdentifiedCurrency

-- | Identification of the exchange on which this asset is transacted for
--   the purposes of calculating a contractural payoff. The term
--   <a>Exchange</a> is assumed to have the meaning as defined in the ISDA
--   2002 Equity Derivatives Definitions.
simpleIRSwap_exchangeId :: SimpleIRSwap -> Maybe ExchangeId

-- | Identification of the clearance system associated with the transaction
--   exchange.
simpleIRSwap_clearanceSystem :: SimpleIRSwap -> Maybe ClearanceSystem

-- | An optional reference to a full FpML product that defines the simple
--   product in greater detail. In case of inconsistency between the terms
--   of the simple product and those of the detailed definition, the values
--   in the simple product override those in the detailed definition.
simpleIRSwap_definition :: SimpleIRSwap -> Maybe ProductReference

-- | Specifies the term of the simple swap, e.g. 5Y.
simpleIRSwap_term :: SimpleIRSwap -> Maybe Period

-- | Specifies the frequency at which the swap pays, e.g. 6M.
simpleIRSwap_paymentFrequency :: SimpleIRSwap -> Maybe Period

-- | The day count basis for the swap.
simpleIRSwap_dayCountFraction :: SimpleIRSwap -> Maybe DayCountFraction

-- | A type describing a single underlyer
data SingleUnderlyer
SingleUnderlyer :: Maybe Asset -> Maybe Decimal -> Maybe DividendPayout -> Maybe PendingPayment -> Maybe AverageDailyTradingVolumeLimit -> Maybe Boolean -> SingleUnderlyer

-- | Define the underlying asset, either a listed security or other
--   instrument.
singleUnderly_underlyingAsset :: SingleUnderlyer -> Maybe Asset

-- | The number of units (index or securities) that constitute the
--   underlyer of the swap. In the case of a basket swap, this element is
--   used to reference both the number of basket units, and the number of
--   each asset components of the basket when these are expressed in
--   absolute terms.
singleUnderly_openUnits :: SingleUnderlyer -> Maybe Decimal

-- | Specifies the dividend payout ratio associated with an equity
--   underlyer. A basket swap can have different payout ratios across the
--   various underlying constituents. In certain cases the actual ratio is
--   not known on trade inception, and only general conditions are then
--   specified. Users should note that FpML makes a distinction between the
--   derivative contract and the underlyer of the contract. It would be
--   better if the agreed dividend payout on a derivative contract was
--   modelled at the level of the derivative contract, an approach which
--   may be adopted in the next major version of FpML.
singleUnderly_dividendPayout :: SingleUnderlyer -> Maybe DividendPayout

-- | The next upcoming coupon payment.
singleUnderly_couponPayment :: SingleUnderlyer -> Maybe PendingPayment

-- | The average amount of individual securities traded in a day or over a
--   specified amount of time.
singleUnderly_averageDailyTradingVolume :: SingleUnderlyer -> Maybe AverageDailyTradingVolumeLimit

-- | A Depository Receipt is a negotiable certificate issued by a trust
--   company or security depository. This element is used to represent
--   whether a Depository Receipt is applicable or not to the underlyer.
singleUnderly_depositoryReceipt :: SingleUnderlyer -> Maybe Boolean

-- | Defines an identifier for a specific location or region which
--   translates into a combination of rules for calculating the UTC offset.
data TimeZone
TimeZone :: Scheme -> TimeZoneAttributes -> TimeZone
data TimeZoneAttributes
TimeZoneAttributes :: Maybe AnyURI -> TimeZoneAttributes
timeZoneAttrib_timeZoneScheme :: TimeZoneAttributes -> Maybe AnyURI

-- | A type describing the whole set of possible underlyers: single
--   underlyers or multiple underlyers, each of these having either
--   security or index components.
data Underlyer
Underlyer :: (Maybe (OneOf2 SingleUnderlyer Basket)) -> Underlyer

-- | Choice between:
--   
--   <ol>
--   <li>Describes the swap's underlyer when it has only one asset
--   component.</li>
--   <li>Describes the swap's underlyer when it has multiple asset
--   components.</li>
--   </ol>
underlyer_choice0 :: Underlyer -> (Maybe (OneOf2 SingleUnderlyer Basket))

-- | Abstract base class for all underlying assets.
data UnderlyingAsset
UnderlyingAsset_SimpleIRSwap :: SimpleIRSwap -> UnderlyingAsset
UnderlyingAsset_SimpleFra :: SimpleFra -> UnderlyingAsset
UnderlyingAsset_SimpleCreditDefaultSwap :: SimpleCreditDefaultSwap -> UnderlyingAsset
UnderlyingAsset_RateIndex :: RateIndex -> UnderlyingAsset
UnderlyingAsset_MutualFund :: MutualFund -> UnderlyingAsset
UnderlyingAsset_Mortgage :: Mortgage -> UnderlyingAsset
UnderlyingAsset_Loan :: Loan -> UnderlyingAsset
UnderlyingAsset_FxRateAsset :: FxRateAsset -> UnderlyingAsset
UnderlyingAsset_ExchangeTraded :: ExchangeTraded -> UnderlyingAsset
UnderlyingAsset_Deposit :: Deposit -> UnderlyingAsset
UnderlyingAsset_Bond :: Bond -> UnderlyingAsset
data UnderlyingAssetTranche
UnderlyingAssetTranche :: Scheme -> UnderlyingAssetTrancheAttributes -> UnderlyingAssetTranche
data UnderlyingAssetTrancheAttributes
UnderlyingAssetTrancheAttributes :: Maybe AnyURI -> UnderlyingAssetTrancheAttributes
underlyAssetTrancheAttrib_loanTrancheScheme :: UnderlyingAssetTrancheAttributes -> Maybe AnyURI

-- | Defines the underlying asset when it is a basket.
elementBasket :: XMLParser Basket
elementToXMLBasket :: Basket -> [Content ()]

-- | Identifies the underlying asset when it is a series or a class of
--   bonds.
elementBond :: XMLParser Bond
elementToXMLBond :: Bond -> [Content ()]

-- | Identifies a simple underlying asset type that is a cash payment. Used
--   for specifying discounting factors for future cash flows in the
--   pricing and risk model.
elementCash :: XMLParser Cash
elementToXMLCash :: Cash -> [Content ()]

-- | Identifies the underlying asset when it is a listed commodity.
elementCommodity :: XMLParser Commodity
elementToXMLCommodity :: Commodity -> [Content ()]

-- | Identifies the underlying asset when it is a convertible bond.
elementConvertibleBond :: XMLParser ConvertibleBond
elementToXMLConvertibleBond :: ConvertibleBond -> [Content ()]

-- | Defines the underlying asset when it is a curve instrument.
elementCurveInstrument :: XMLParser Asset
elementToXMLCurveInstrument :: Asset -> [Content ()]

-- | Identifies a simple underlying asset that is a term deposit.
elementDeposit :: XMLParser Deposit
elementToXMLDeposit :: Deposit -> [Content ()]

-- | Identifies the underlying asset when it is a listed equity.
elementEquity :: XMLParser EquityAsset
elementToXMLEquity :: EquityAsset -> [Content ()]

-- | Identifies the underlying asset when it is an exchange-traded fund.
elementExchangeTradedFund :: XMLParser ExchangeTradedFund
elementToXMLExchangeTradedFund :: ExchangeTradedFund -> [Content ()]

-- | Identifies the underlying asset when it is a listed future contract.
elementFuture :: XMLParser Future
elementToXMLFuture :: Future -> [Content ()]

-- | Identifies a simple underlying asset type that is an FX rate. Used for
--   specifying FX rates in the pricing and risk model.
elementFx :: XMLParser FxRateAsset
elementToXMLFx :: FxRateAsset -> [Content ()]

-- | Identifies the underlying asset when it is a financial index.
elementIndex :: XMLParser Index
elementToXMLIndex :: Index -> [Content ()]

-- | Identifies a simple underlying asset that is a loan.
elementLoan :: XMLParser Loan
elementToXMLLoan :: Loan -> [Content ()]

-- | Identifies a mortgage backed security.
elementMortgage :: XMLParser Mortgage
elementToXMLMortgage :: Mortgage -> [Content ()]

-- | Identifies the class of unit issued by a fund.
elementMutualFund :: XMLParser MutualFund
elementToXMLMutualFund :: MutualFund -> [Content ()]

-- | Identifies a simple underlying asset that is an interest rate index.
--   Used for specifying benchmark assets in the market environment in the
--   pricing and risk model.
elementRateIndex :: XMLParser RateIndex
elementToXMLRateIndex :: RateIndex -> [Content ()]

-- | Identifies a simple underlying asset that is a credit default swap.
elementSimpleCreditDefaultSwap :: XMLParser SimpleCreditDefaultSwap
elementToXMLSimpleCreditDefaultSwap :: SimpleCreditDefaultSwap -> [Content ()]

-- | Identifies a simple underlying asset that is a forward rate agreement.
elementSimpleFra :: XMLParser SimpleFra
elementToXMLSimpleFra :: SimpleFra -> [Content ()]

-- | Identifies a simple underlying asset that is a swap.
elementSimpleIrSwap :: XMLParser SimpleIRSwap
elementToXMLSimpleIrSwap :: SimpleIRSwap -> [Content ()]

-- | Define the underlying asset, either a listed security or other
--   instrument.
elementUnderlyingAsset :: XMLParser Asset
elementToXMLUnderlyingAsset :: Asset -> [Content ()]
instance Eq AnyAssetReference
instance Show AnyAssetReference
instance Eq AssetMeasureTypeAttributes
instance Show AssetMeasureTypeAttributes
instance Eq PricingModelAttributes
instance Show PricingModelAttributes
instance Eq AssetReference
instance Show AssetReference
instance Eq BasketIdAttributes
instance Show BasketIdAttributes
instance Eq BasketNameAttributes
instance Show BasketNameAttributes
instance Eq CommodityBaseAttributes
instance Show CommodityBaseAttributes
instance Eq CommodityBusinessCalendarAttributes
instance Show CommodityBusinessCalendarAttributes
instance Eq CommodityDetailsAttributes
instance Show CommodityDetailsAttributes
instance Eq CouponTypeAttributes
instance Show CouponTypeAttributes
instance Eq CurveInstrument
instance Show CurveInstrument
instance Eq FacilityTypeAttributes
instance Show FacilityTypeAttributes
instance Eq FutureIdAttributes
instance Show FutureIdAttributes
instance Eq LienAttributes
instance Show LienAttributes
instance Eq MortgageSectorAttributes
instance Show MortgageSectorAttributes
instance Eq PriceQuoteUnitsAttributes
instance Show PriceQuoteUnitsAttributes
instance Eq QuantityUnitAttributes
instance Show QuantityUnitAttributes
instance Eq QuoteTimingAttributes
instance Show QuoteTimingAttributes
instance Eq ReportingCurrencyTypeAttributes
instance Show ReportingCurrencyTypeAttributes
instance Eq TimeZoneAttributes
instance Show TimeZoneAttributes
instance Eq UnderlyingAssetTrancheAttributes
instance Show UnderlyingAssetTrancheAttributes
instance Eq ActualPrice
instance Show ActualPrice
instance Eq UnderlyingAssetTranche
instance Show UnderlyingAssetTranche
instance Eq UnderlyingAsset
instance Show UnderlyingAsset
instance Eq Underlyer
instance Show Underlyer
instance Eq TimeZone
instance Show TimeZone
instance Eq SingleUnderlyer
instance Show SingleUnderlyer
instance Eq SimpleIRSwap
instance Show SimpleIRSwap
instance Eq SimpleFra
instance Show SimpleFra
instance Eq SimpleCreditDefaultSwap
instance Show SimpleCreditDefaultSwap
instance Eq ReportingCurrencyType
instance Show ReportingCurrencyType
instance Eq RateIndex
instance Show RateIndex
instance Eq QuoteTiming
instance Show QuoteTiming
instance Eq QuotationCharacteristics
instance Show QuotationCharacteristics
instance Eq QuantityUnit
instance Show QuantityUnit
instance Eq PriceQuoteUnits
instance Show PriceQuoteUnits
instance Eq Price
instance Show Price
instance Eq PendingPayment
instance Show PendingPayment
instance Eq MutualFund
instance Show MutualFund
instance Eq MortgageSector
instance Show MortgageSector
instance Eq Mortgage
instance Show Mortgage
instance Eq Loan
instance Show Loan
instance Eq Lien
instance Show Lien
instance Eq Index
instance Show Index
instance Eq IdentifiedAsset
instance Show IdentifiedAsset
instance Eq FxRateAsset
instance Show FxRateAsset
instance Eq FxConversion
instance Show FxConversion
instance Eq FutureId
instance Show FutureId
instance Eq Future
instance Show Future
instance Eq FacilityType
instance Show FacilityType
instance Eq ExchangeTradedFund
instance Show ExchangeTradedFund
instance Eq ExchangeTradedContract
instance Show ExchangeTradedContract
instance Eq ExchangeTradedCalculatedPrice
instance Show ExchangeTradedCalculatedPrice
instance Eq ExchangeTraded
instance Show ExchangeTraded
instance Eq EquityAsset
instance Show EquityAsset
instance Eq DividendPayout
instance Show DividendPayout
instance Eq Deposit
instance Show Deposit
instance Eq CouponType
instance Show CouponType
instance Eq ConvertibleBond
instance Show ConvertibleBond
instance Eq ConstituentWeight
instance Show ConstituentWeight
instance Eq CommodityDetails
instance Show CommodityDetails
instance Eq CommodityBusinessCalendarTime
instance Show CommodityBusinessCalendarTime
instance Eq CommodityBusinessCalendar
instance Show CommodityBusinessCalendar
instance Eq CommodityBase
instance Show CommodityBase
instance Eq Commodity
instance Show Commodity
instance Eq Commission
instance Show Commission
instance Eq Cash
instance Show Cash
instance Eq Bond
instance Show Bond
instance Eq BasketName
instance Show BasketName
instance Eq BasketId
instance Show BasketId
instance Eq BasketConstituent
instance Show BasketConstituent
instance Eq Basket
instance Show Basket
instance Eq BasicQuotation
instance Show BasicQuotation
instance Eq AssetPool
instance Show AssetPool
instance Eq PricingModel
instance Show PricingModel
instance Eq AssetMeasureType
instance Show AssetMeasureType
instance Eq Asset
instance Show Asset
instance Extension UnderlyingAssetTranche Scheme
instance SchemaType UnderlyingAssetTranche
instance Extension UnderlyingAsset IdentifiedAsset
instance SchemaType UnderlyingAsset
instance SchemaType Underlyer
instance Extension TimeZone Scheme
instance SchemaType TimeZone
instance SchemaType SingleUnderlyer
instance Extension SimpleIRSwap Asset
instance Extension SimpleIRSwap IdentifiedAsset
instance Extension SimpleIRSwap UnderlyingAsset
instance SchemaType SimpleIRSwap
instance Extension SimpleFra Asset
instance Extension SimpleFra IdentifiedAsset
instance Extension SimpleFra UnderlyingAsset
instance SchemaType SimpleFra
instance Extension SimpleCreditDefaultSwap Asset
instance Extension SimpleCreditDefaultSwap IdentifiedAsset
instance Extension SimpleCreditDefaultSwap UnderlyingAsset
instance SchemaType SimpleCreditDefaultSwap
instance Extension ReportingCurrencyType Scheme
instance SchemaType ReportingCurrencyType
instance Extension RateIndex Asset
instance Extension RateIndex IdentifiedAsset
instance Extension RateIndex UnderlyingAsset
instance SchemaType RateIndex
instance Extension QuoteTiming Scheme
instance SchemaType QuoteTiming
instance SchemaType QuotationCharacteristics
instance Extension QuantityUnit Scheme
instance SchemaType QuantityUnit
instance Extension PriceQuoteUnits Scheme
instance SchemaType PriceQuoteUnits
instance SchemaType Price
instance Extension PendingPayment PaymentBase
instance SchemaType PendingPayment
instance Extension MutualFund Asset
instance Extension MutualFund IdentifiedAsset
instance Extension MutualFund UnderlyingAsset
instance SchemaType MutualFund
instance Extension MortgageSector Scheme
instance SchemaType MortgageSector
instance Extension Mortgage Asset
instance Extension Mortgage IdentifiedAsset
instance Extension Mortgage UnderlyingAsset
instance SchemaType Mortgage
instance Extension Loan Asset
instance Extension Loan IdentifiedAsset
instance Extension Loan UnderlyingAsset
instance SchemaType Loan
instance Extension Lien Scheme
instance SchemaType Lien
instance Extension Index Asset
instance Extension Index IdentifiedAsset
instance Extension Index UnderlyingAsset
instance Extension Index ExchangeTraded
instance Extension Index ExchangeTradedCalculatedPrice
instance SchemaType Index
instance Extension IdentifiedAsset Asset
instance SchemaType IdentifiedAsset
instance Extension FxRateAsset Asset
instance Extension FxRateAsset IdentifiedAsset
instance Extension FxRateAsset UnderlyingAsset
instance SchemaType FxRateAsset
instance SchemaType FxConversion
instance Extension FutureId Scheme
instance SchemaType FutureId
instance Extension Future Asset
instance Extension Future IdentifiedAsset
instance Extension Future UnderlyingAsset
instance Extension Future ExchangeTraded
instance SchemaType Future
instance Extension FacilityType Scheme
instance SchemaType FacilityType
instance Extension ExchangeTradedFund Asset
instance Extension ExchangeTradedFund IdentifiedAsset
instance Extension ExchangeTradedFund UnderlyingAsset
instance Extension ExchangeTradedFund ExchangeTraded
instance Extension ExchangeTradedFund ExchangeTradedCalculatedPrice
instance SchemaType ExchangeTradedFund
instance Extension ExchangeTradedContract Asset
instance Extension ExchangeTradedContract IdentifiedAsset
instance Extension ExchangeTradedContract UnderlyingAsset
instance Extension ExchangeTradedContract ExchangeTraded
instance SchemaType ExchangeTradedContract
instance Extension ExchangeTradedCalculatedPrice ExchangeTraded
instance SchemaType ExchangeTradedCalculatedPrice
instance Extension ExchangeTraded UnderlyingAsset
instance SchemaType ExchangeTraded
instance Extension EquityAsset Asset
instance Extension EquityAsset IdentifiedAsset
instance Extension EquityAsset UnderlyingAsset
instance Extension EquityAsset ExchangeTraded
instance SchemaType EquityAsset
instance SchemaType DividendPayout
instance Extension Deposit Asset
instance Extension Deposit IdentifiedAsset
instance Extension Deposit UnderlyingAsset
instance SchemaType Deposit
instance Extension CurveInstrument IdentifiedAsset
instance SchemaType CurveInstrument
instance Extension CouponType Scheme
instance SchemaType CouponType
instance Extension ConvertibleBond Asset
instance Extension ConvertibleBond IdentifiedAsset
instance Extension ConvertibleBond UnderlyingAsset
instance Extension ConvertibleBond Bond
instance SchemaType ConvertibleBond
instance SchemaType ConstituentWeight
instance Extension CommodityDetails Scheme
instance SchemaType CommodityDetails
instance SchemaType CommodityBusinessCalendarTime
instance Extension CommodityBusinessCalendar Scheme
instance SchemaType CommodityBusinessCalendar
instance Extension CommodityBase Scheme
instance SchemaType CommodityBase
instance Extension Commodity Asset
instance Extension Commodity IdentifiedAsset
instance SchemaType Commodity
instance SchemaType Commission
instance Extension Cash Asset
instance SchemaType Cash
instance Extension Bond Asset
instance Extension Bond IdentifiedAsset
instance Extension Bond UnderlyingAsset
instance SchemaType Bond
instance Extension BasketName Scheme
instance SchemaType BasketName
instance Extension BasketId Scheme
instance SchemaType BasketId
instance SchemaType BasketConstituent
instance Extension Basket Asset
instance SchemaType Basket
instance SchemaType BasicQuotation
instance Extension AssetReference Reference
instance SchemaType AssetReference
instance SchemaType AssetPool
instance Extension PricingModel Scheme
instance SchemaType PricingModel
instance Extension AssetMeasureType Scheme
instance SchemaType AssetMeasureType
instance SchemaType Asset
instance Extension AnyAssetReference Reference
instance SchemaType AnyAssetReference
instance SchemaType ActualPrice

module Data.FpML.V53.Shared.Option

-- | As per ISDA 2002 Definitions.
data Asian
Asian :: Maybe AveragingInOutEnum -> Maybe Decimal -> Maybe AveragingPeriod -> Maybe AveragingPeriod -> Asian
asian_averagingInOut :: Asian -> Maybe AveragingInOutEnum

-- | The factor of strike.
asian_strikeFactor :: Asian -> Maybe Decimal

-- | The averaging in period.
asian_averagingPeriodIn :: Asian -> Maybe AveragingPeriod

-- | The averaging out period.
asian_averagingPeriodOut :: Asian -> Maybe AveragingPeriod

-- | An un ordered list of weighted averaging observations.
data AveragingObservationList
AveragingObservationList :: [WeightedAveragingObservation] -> AveragingObservationList

-- | A single weighted averaging observation.
averagObservList_averagingObservation :: AveragingObservationList -> [WeightedAveragingObservation]

-- | Period over which an average value is taken.
data AveragingPeriod
AveragingPeriod :: [AveragingSchedule] -> (Maybe (OneOf2 DateTimeList AveragingObservationList)) -> Maybe MarketDisruption -> AveragingPeriod

-- | A schedule for generating averaging observation dates.
averagPeriod_schedule :: AveragingPeriod -> [AveragingSchedule]

-- | A choice between unweighted and weighted averaging date and times.
--   
--   Choice between:
--   
--   <ol>
--   <li>An unweighted list of averaging observation date and times.</li>
--   <li>A weighted list of averaging observation date and times.</li>
--   </ol>
averagPeriod_choice1 :: AveragingPeriod -> (Maybe (OneOf2 DateTimeList AveragingObservationList))

-- | The market disruption event as defined by ISDA 2002 Definitions.
averagPeriod_marketDisruption :: AveragingPeriod -> Maybe MarketDisruption

-- | Method of generating a series of dates.
data AveragingSchedule
AveragingSchedule :: Maybe Date -> Maybe Date -> Maybe CalculationPeriodFrequency -> AveragingSchedule

-- | Date on which this period begins.
averagSched_startDate :: AveragingSchedule -> Maybe Date

-- | Date on which this period ends.
averagSched_endDate :: AveragingSchedule -> Maybe Date

-- | The frequency at which averaging period occurs with the regular part
--   of the valuation schedule and their roll date convention.
averagSched_averagingPeriodFrequency :: AveragingSchedule -> Maybe CalculationPeriodFrequency

-- | As per ISDA 2002 Definitions.
data Barrier
Barrier :: Maybe TriggerEvent -> Maybe TriggerEvent -> Barrier

-- | A trigger level approached from beneath.
barrier_cap :: Barrier -> Maybe TriggerEvent

-- | A trigger level approached from above.
barrier_floor :: Barrier -> Maybe TriggerEvent

-- | A type for defining a calendar spread feature.
data CalendarSpread
CalendarSpread :: Maybe AdjustableOrRelativeDate -> CalendarSpread
calSpread_expirationDateTwo :: CalendarSpread -> Maybe AdjustableOrRelativeDate

-- | A classified non negative payment.
data ClassifiedPayment
ClassifiedPayment :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe AdjustableOrRelativeDate -> Maybe NonNegativeMoney -> [PaymentType] -> ClassifiedPayment
classPayment_ID :: ClassifiedPayment -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
classPayment_payerPartyReference :: ClassifiedPayment -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
classPayment_payerAccountReference :: ClassifiedPayment -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
classPayment_receiverPartyReference :: ClassifiedPayment -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
classPayment_receiverAccountReference :: ClassifiedPayment -> Maybe AccountReference

-- | The payment date, which can be expressed as either an adjustable or
--   relative date.
classPayment_paymentDate :: ClassifiedPayment -> Maybe AdjustableOrRelativeDate

-- | Non negative payment amount.
classPayment_paymentAmount :: ClassifiedPayment -> Maybe NonNegativeMoney

-- | Payment classification.
classPayment_paymentType :: ClassifiedPayment -> [PaymentType]

-- | Specifies the conditions to be applied for converting into a reference
--   currency when the actual currency rate is not determined upfront.
data Composite
Composite :: Maybe DeterminationMethod -> Maybe RelativeDateOffset -> Maybe FxSpotRateSource -> Composite

-- | Specifies the method according to which an amount or a date is
--   determined.
composite_determinationMethod :: Composite -> Maybe DeterminationMethod

-- | A date specified as some offset to another date (the anchor date).
composite_relativeDate :: Composite -> Maybe RelativeDateOffset

-- | Specifies the methodology (reference source and, optionally, fixing
--   time) to be used for determining a currency conversion rate.
composite_fxSpotRateSource :: Composite -> Maybe FxSpotRateSource
data CreditEventNotice
CreditEventNotice :: Maybe NotifyingParty -> Maybe BusinessCenter -> Maybe PubliclyAvailableInformation -> CreditEventNotice

-- | Pointer style references to a party identifier defined elsewhere in
--   the document. The notifying party is the party that notifies the other
--   party when a credit event has occurred by means of a credit event
--   notice. If more than one party is referenced as being the notifying
--   party then either party may notify the other of a credit event
--   occurring. ISDA 2003 Term: Notifying Party.
creditEventNotice_notifyingParty :: CreditEventNotice -> Maybe NotifyingParty

-- | Inclusion of this business center element implies that Greenwich Mean
--   Time in Section 3.3 of the 2003 ISDA Credit Derivatives Definitions is
--   replaced by the local time of the city indicated by the businessCenter
--   element value.
creditEventNotice_businessCenter :: CreditEventNotice -> Maybe BusinessCenter

-- | A specified condition to settlement. Publicly available information
--   means information that reasonably confirms any of the facts relevant
--   to determining that a credit event or potential
--   repudiation/moratorium, as applicable, has occurred. The ISDA defined
--   list (2003) is the market standard and is considered comprehensive,
--   and a minimum of two differing public sources must have published the
--   relevant information, to declare a Credit Event. ISDA 2003 Term:
--   Notice of Publicly Available Information Applicable.
creditEventNotice_publiclyAvailableInformation :: CreditEventNotice -> Maybe PubliclyAvailableInformation
data CreditEvents
CreditEvents :: Maybe ID -> Maybe Boolean -> Maybe FailureToPay -> Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> Maybe Restructuring -> Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> Maybe Money -> Maybe CreditEventNotice -> CreditEvents
creditEvents_ID :: CreditEvents -> Maybe ID

-- | A credit event. The reference entity has been dissolved or has become
--   insolvent. It also covers events that may be a precursor to insolvency
--   such as instigation of bankruptcy or insolvency proceedings. Sovereign
--   trades are not subject to Bankruptcy as <a>technically</a> a Sovereign
--   cannot become bankrupt. ISDA 2003 Term: Bankruptcy.
creditEvents_bankruptcy :: CreditEvents -> Maybe Boolean

-- | A credit event. This credit event triggers, after the expiration of
--   any applicable grace period, if the reference entity fails to make due
--   payments in an aggregrate amount of not less than the payment
--   requirement on one or more obligations (e.g. a missed coupon payment).
--   ISDA 2003 Term: Failure to Pay.
creditEvents_failureToPay :: CreditEvents -> Maybe FailureToPay

-- | A credit event. Corresponds to the failure by the Reference Entity to
--   pay an expected principal amount or the payment of an actual principal
--   amount that is less than the expected principal amount. ISDA 2003
--   Term: Failure to Pay Principal.
creditEvents_failureToPayPrincipal :: CreditEvents -> Maybe Boolean

-- | A credit event. Corresponds to the failure by the Reference Entity to
--   pay an expected interest amount or the payment of an actual interest
--   amount that is less than the expected interest amount. ISDA 2003 Term:
--   Failure to Pay Interest.
creditEvents_failureToPayInterest :: CreditEvents -> Maybe Boolean

-- | A credit event. One or more of the obligations have become capable of
--   being declared due and payable before they would otherwise have been
--   due and payable as a result of, or on the basis of, the occurrence of
--   a default, event of default or other similar condition or event other
--   than failure to pay. ISDA 2003 Term: Obligation Default.
creditEvents_obligationDefault :: CreditEvents -> Maybe Boolean

-- | A credit event. One or more of the obligations have been declared due
--   and payable before they would otherwise have been due and payable as a
--   result of, or on the basis of, the occurrence of a default, event of
--   default or other similar condition or event other than failure to pay
--   (preferred by the market over Obligation Default, because more
--   definitive and encompasses the definition of Obligation Default - this
--   is more favorable to the Seller). Subject to the default requirement
--   amount. ISDA 2003 Term: Obligation Acceleration.
creditEvents_obligationAcceleration :: CreditEvents -> Maybe Boolean

-- | A credit event. The reference entity, or a governmental authority,
--   either refuses to recognise or challenges the validity of one or more
--   obligations of the reference entity, or imposes a moratorium thereby
--   postponing payments on one or more of the obligations of the reference
--   entity. Subject to the default requirement amount. ISDA 2003 Term:
--   Repudiation/Moratorium.
creditEvents_repudiationMoratorium :: CreditEvents -> Maybe Boolean

-- | A credit event. A restructuring is an event that materially impacts
--   the reference entity's obligations, such as an interest rate
--   reduction, principal reduction, deferral of interest or principal,
--   change in priority ranking, or change in currency or composition of
--   payment. ISDA 2003 Term: Restructuring.
creditEvents_restructuring :: CreditEvents -> Maybe Restructuring

-- | A credit event. Results from the fact that the rating of the reference
--   obligation is downgraded to a distressed rating level. From a usage
--   standpoint, this credit event is typically not applicable in case of
--   RMBS trades.
creditEvents_distressedRatingsDowngrade :: CreditEvents -> Maybe Boolean

-- | A credit event. Results from the fact that the underlier fails to make
--   principal payments as expected.
creditEvents_maturityExtension :: CreditEvents -> Maybe Boolean

-- | A credit event. Results from the fact that the underlier writes down
--   its outstanding principal amount.
creditEvents_writedown :: CreditEvents -> Maybe Boolean

-- | A credit event. Results from the fact that losses occur to the
--   underlying instruments that do not result in reductions of the
--   outstanding principal of the reference obligation.
creditEvents_impliedWritedown :: CreditEvents -> Maybe Boolean

-- | In relation to certain credit events, serves as a threshold for
--   Obligation Acceleration, Obligation Default, Repudiation/Moratorium
--   and Restructuring. Market standard is USD 10,000,000 (JPY
--   1,000,000,000 for all Japanese Yen trades). This is applied on an
--   aggregate or total basis across all Obligations of the Reference
--   Entity. Used to prevent technical/operational errors from triggering
--   credit events. ISDA 2003 Term: Default Requirement.
creditEvents_defaultRequirement :: CreditEvents -> Maybe Money

-- | A specified condition to settlement. An irrevocable written or verbal
--   notice that describes a credit event that has occurred. The notice is
--   sent from the notifying party (either the buyer or the seller) to the
--   counterparty. It provides information relevant to determining that a
--   credit event has occurred. This is typically accompanied by Publicly
--   Available Information. ISDA 2003 Term: Credit Event Notice.
creditEvents_creditEventNotice :: CreditEvents -> Maybe CreditEventNotice

-- | Reference to credit events.
data CreditEventsReference
CreditEventsReference :: IDREF -> CreditEventsReference
creditEventsRef_href :: CreditEventsReference -> IDREF
data FailureToPay
FailureToPay :: Maybe Boolean -> Maybe GracePeriodExtension -> Maybe Money -> FailureToPay

-- | Indicates whether the failure to pay provision is applicable.
failureToPay_applicable :: FailureToPay -> Maybe Boolean

-- | If this element is specified, indicates whether or not a grace period
--   extension is applicable. ISDA 2003 Term: Grace Period Extension
--   Applicable.
failureToPay_gracePeriodExtension :: FailureToPay -> Maybe GracePeriodExtension

-- | Specifies a threshold for the failure to pay credit event. Market
--   standard is USD 1,000,000 (JPY 100,000,000 for Japanese Yen trades) or
--   its equivalent in the relevant obligation currency. This is applied on
--   an aggregate basis across all Obligations of the Reference Entity.
--   Intended to prevent technical/operational errors from triggering
--   credit events. ISDA 2003 Term: Payment Requirement.
failureToPay_paymentRequirement :: FailureToPay -> Maybe Money

-- | Payment made following trigger occurence.
data FeaturePayment
FeaturePayment :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> (Maybe (OneOf2 Decimal NonNegativeDecimal)) -> Maybe TimeTypeEnum -> Maybe Currency -> Maybe AdjustableOrRelativeDate -> FeaturePayment
featurePayment_ID :: FeaturePayment -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
featurePayment_payerPartyReference :: FeaturePayment -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
featurePayment_payerAccountReference :: FeaturePayment -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
featurePayment_receiverPartyReference :: FeaturePayment -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
featurePayment_receiverAccountReference :: FeaturePayment -> Maybe AccountReference

-- | Choice between:
--   
--   <ol>
--   <li>The trigger level percentage.</li>
--   <li>The monetary quantity in currency units.</li>
--   </ol>
featurePayment_choice4 :: FeaturePayment -> (Maybe (OneOf2 Decimal NonNegativeDecimal))

-- | The feature payment time.
featurePayment_time :: FeaturePayment -> Maybe TimeTypeEnum

-- | The currency in which an amount is denominated.
featurePayment_currency :: FeaturePayment -> Maybe Currency

-- | The feature payment date.
featurePayment_date :: FeaturePayment -> Maybe AdjustableOrRelativeDate

-- | Frequency Type.
data FrequencyType
FrequencyType :: Scheme -> FrequencyTypeAttributes -> FrequencyType
data FrequencyTypeAttributes
FrequencyTypeAttributes :: Maybe AnyURI -> FrequencyTypeAttributes
frequTypeAttrib_frequencyTypeScheme :: FrequencyTypeAttributes -> Maybe AnyURI

-- | A type for defining Fx Features.
data FxFeature
FxFeature :: Maybe IdentifiedCurrency -> (Maybe (OneOf3 Composite Quanto Composite)) -> FxFeature

-- | Specifies the reference currency of the trade.
fxFeature_referenceCurrency :: FxFeature -> Maybe IdentifiedCurrency

-- | Choice between:
--   
--   <ol>
--   <li>If “Composite” is specified as the Settlement Type in the relevant
--   Transaction Supplement, an amount in the Settlement Currency,
--   determined by the Calculation Agent as being equal to the number of
--   Options exercised or deemed exercised, multiplied by: (Settlement
--   Price – Strike Price) / (Strike Price – Settlement Price) x Multiplier
--   provided that if the above is equal to a negative amount the Option
--   Cash Settlement Amount shall be deemed to be zero.</li>
--   <li>If “Quanto” is specified as the Settlement Type in the relevant
--   Transaction Supplement, an amount, as determined by the Calculation
--   Agent in accordance with the Section 8.2 of the Equity
--   Definitions.</li>
--   <li>If “Cross-Currency” is specified as the Settlement Type in the
--   relevant Transaction Supplement, an amount in the Settlement Currency,
--   determined by the Calculation Agent as being equal to the number of
--   Options exercised or deemed exercised, multiplied by: (Settlement
--   Price – Strike Price) / (Strike Price – Settlement Price) x Multiplier
--   x one unit of the Reference Currency converted into an amount in the
--   Settlement Currency using the rate of exchange of the Settlement
--   Currency as quoted on the Reference Price Source on the Valuation
--   Date, provided that if the above is equal to a negative amount the
--   Option Cash Settlement Amount shall be deemed to be zero.</li>
--   </ol>
fxFeature_choice1 :: FxFeature -> (Maybe (OneOf3 Composite Quanto Composite))
data GracePeriodExtension
GracePeriodExtension :: Maybe Boolean -> Maybe Offset -> GracePeriodExtension

-- | Indicates whether the grace period extension provision is applicable.
gracePeriodExtens_applicable :: GracePeriodExtension -> Maybe Boolean

-- | The number of calendar or business days after any due date that the
--   reference entity has to fulfil its obligations before a failure to pay
--   credit event is deemed to have occurred. ISDA 2003 Term: Grace Period.
gracePeriodExtens_gracePeriod :: GracePeriodExtension -> Maybe Offset

-- | Knock In means option to exercise comes into existence. Knock Out
--   means option to exercise goes out of existence.
data Knock
Knock :: Maybe TriggerEvent -> Maybe TriggerEvent -> Knock

-- | The knock in.
knock_in :: Knock -> Maybe TriggerEvent

-- | The knock out.
knock_out :: Knock -> Maybe TriggerEvent

-- | Defines the handling of an averaging date market disruption for an
--   equity derivative transaction.
data MarketDisruption
MarketDisruption :: Scheme -> MarketDisruptionAttributes -> MarketDisruption
data MarketDisruptionAttributes
MarketDisruptionAttributes :: Maybe AnyURI -> MarketDisruptionAttributes
marketDisrupAttrib_marketDisruptionScheme :: MarketDisruptionAttributes -> Maybe AnyURI
data NotifyingParty
NotifyingParty :: Maybe PartyReference -> Maybe PartyReference -> NotifyingParty
notifParty_buyerPartyReference :: NotifyingParty -> Maybe PartyReference
notifParty_sellerPartyReference :: NotifyingParty -> Maybe PartyReference

-- | A type for defining the common features of options.
data Option
Option_OptionBase :: OptionBase -> Option
Option_FxOption :: FxOption -> Option
Option_FxDigitalOption :: FxDigitalOption -> Option

-- | A type for defining the common features of options.
data OptionBase
OptionBase_OptionBaseExtended :: OptionBaseExtended -> OptionBase
OptionBase_VarianceOptionTransactionSupplement :: VarianceOptionTransactionSupplement -> OptionBase

-- | Base type for options starting with the 4-3 release, until we refactor
--   the schema as part of the 5-0 release series.
data OptionBaseExtended
OptionBaseExtended_CreditDefaultSwapOption :: CreditDefaultSwapOption -> OptionBaseExtended
OptionBaseExtended_BondOption :: BondOption -> OptionBaseExtended

-- | A type for defining option features.
data OptionFeature
OptionFeature :: Maybe FxFeature -> Maybe StrategyFeature -> Maybe Asian -> Maybe Barrier -> Maybe Knock -> Maybe PassThrough -> OptionFeature

-- | A quanto or composite FX feature.
optionFeature_fxFeature :: OptionFeature -> Maybe FxFeature

-- | A simple strategy feature.
optionFeature_strategyFeature :: OptionFeature -> Maybe StrategyFeature

-- | An option where and average price is taken on valuation.
optionFeature_asian :: OptionFeature -> Maybe Asian

-- | An option with a barrier feature.
optionFeature_barrier :: OptionFeature -> Maybe Barrier

-- | A knock feature.
optionFeature_knock :: OptionFeature -> Maybe Knock

-- | Pass through payments from the underlyer, such as dividends.
optionFeature_passThrough :: OptionFeature -> Maybe PassThrough

-- | A type for defining the strike price for an option as a numeric value
--   without currency.
data OptionNumericStrike
OptionNumericStrike :: (Maybe (OneOf2 Decimal Decimal)) -> OptionNumericStrike

-- | Choice between:
--   
--   <ol>
--   <li>The price or level at which the option has been struck.</li>
--   <li>The price or level expressed as a percentage of the forward
--   starting spot price.</li>
--   </ol>
optionNumericStrike_choice0 :: OptionNumericStrike -> (Maybe (OneOf2 Decimal Decimal))

-- | A type for defining the strike price for an equity option. The strike
--   price is either: (i) in respect of an index option transaction, the
--   level of the relevant index specified or otherwise determined in the
--   transaction; or (ii) in respect of a share option transaction, the
--   price per share specified or otherwise determined in the transaction.
--   This can be expressed either as a percentage of notional amount or as
--   an absolute value.
data OptionStrike
OptionStrike :: (Maybe (OneOf2 Decimal Decimal)) -> Maybe Currency -> OptionStrike

-- | Choice between:
--   
--   <ol>
--   <li>The price or level at which the option has been struck.</li>
--   <li>The price or level expressed as a percentage of the forward
--   starting spot price.</li>
--   </ol>
optionStrike_choice0 :: OptionStrike -> (Maybe (OneOf2 Decimal Decimal))

-- | The currency in which an amount is denominated.
optionStrike_currency :: OptionStrike -> Maybe Currency

-- | Type which contains pass through payments.
data PassThrough
PassThrough :: [PassThroughItem] -> PassThrough

-- | One to many pass through payment items.
passThrough_item :: PassThrough -> [PassThroughItem]

-- | Type to represent a single pass through payment.
data PassThroughItem
PassThroughItem :: Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe AssetReference -> Maybe Decimal -> PassThroughItem

-- | A reference to the party responsible for making the payments defined
--   by this structure.
passThroughItem_payerPartyReference :: PassThroughItem -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
passThroughItem_payerAccountReference :: PassThroughItem -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
passThroughItem_receiverPartyReference :: PassThroughItem -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
passThroughItem_receiverAccountReference :: PassThroughItem -> Maybe AccountReference

-- | Reference to the underlyer whose payments are being passed through.
passThroughItem_underlyerReference :: PassThroughItem -> Maybe AssetReference

-- | Percentage of payments from the underlyer which are passed through.
passThroughItem_passThroughPercentage :: PassThroughItem -> Maybe Decimal

-- | A type for defining a premium.
data Premium
Premium :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe NonNegativeMoney -> Maybe AdjustableOrRelativeDate -> Maybe PremiumTypeEnum -> Maybe Money -> Maybe Decimal -> Maybe Decimal -> Maybe Money -> Premium
premium_ID :: Premium -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
premium_payerPartyReference :: Premium -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
premium_payerAccountReference :: Premium -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
premium_receiverPartyReference :: Premium -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
premium_receiverAccountReference :: Premium -> Maybe AccountReference
premium_paymentAmount :: Premium -> Maybe NonNegativeMoney

-- | The payment date. This date is subject to adjustment in accordance
--   with any applicable business day convention.
premium_paymentDate :: Premium -> Maybe AdjustableOrRelativeDate

-- | Forward start Premium type
premium_type :: Premium -> Maybe PremiumTypeEnum

-- | The amount of premium to be paid expressed as a function of the number
--   of options.
premium_pricePerOption :: Premium -> Maybe Money

-- | The amount of premium to be paid expressed as a percentage of the
--   notional value of the transaction. A percentage of 5% would be
--   expressed as 0.05.
premium_percentageOfNotional :: Premium -> Maybe Decimal

-- | The value representing the discount factor used to calculate the
--   present value of the cash flow.
premium_discountFactor :: Premium -> Maybe Decimal

-- | The amount representing the present value of the forecast payment.
premium_presentValueAmount :: Premium -> Maybe Money
data PubliclyAvailableInformation
PubliclyAvailableInformation :: Maybe Boolean -> [XsdString] -> Maybe PositiveInteger -> PubliclyAvailableInformation

-- | If this element is specified and set to <tt>true</tt>, indicates that
--   ISDA defined Standard Public Sources are applicable.
publicAvailInfo_standardPublicSources :: PubliclyAvailableInformation -> Maybe Boolean

-- | A public information source, e.g. a particular newspaper or electronic
--   news service, that may publish relevant information used in the
--   determination of whether or not a credit event has occurred. ISDA 2003
--   Term: Public Source.
publicAvailInfo_publicSource :: PubliclyAvailableInformation -> [XsdString]

-- | The minimum number of the specified public information sources that
--   must publish information that reasonably confirms that a credit event
--   has occurred. The market convention is two. ISDA 2003 Term: Specified
--   Number.
publicAvailInfo_specifiedNumber :: PubliclyAvailableInformation -> Maybe PositiveInteger

-- | Determines the currency rate that the seller of the equity amounts
--   will apply at each valuation date for converting the respective
--   amounts into a currency that is different from the currency
--   denomination of the underlyer.
data Quanto
Quanto :: [FxRate] -> Maybe FxSpotRateSource -> Quanto

-- | Specifies a currency conversion rate.
quanto_fxRate :: Quanto -> [FxRate]

-- | Specifies the methodology (reference source and, optionally, fixing
--   time) to be used for determining a currency conversion rate.
quanto_fxSpotRateSource :: Quanto -> Maybe FxSpotRateSource
data Restructuring
Restructuring :: Maybe Boolean -> Maybe RestructuringType -> Maybe Boolean -> Maybe Boolean -> Restructuring

-- | Indicates whether the restructuring provision is applicable.
restr_applicable :: Restructuring -> Maybe Boolean

-- | Specifies the type of restructuring that is applicable.
restructuring_type :: Restructuring -> Maybe RestructuringType

-- | In relation to a restructuring credit event, unless multiple holder
--   obligation is not specified restructurings are limited to multiple
--   holder obligations. A multiple holder obligation means an obligation
--   that is held by more than three holders that are not affiliates of
--   each other and where at least two thirds of the holders must agree to
--   the event that constitutes the restructuring credit event. ISDA 2003
--   Term: Multiple Holder Obligation.
restr_multipleHolderObligation :: Restructuring -> Maybe Boolean

-- | Presence of this element and value set to <tt>true</tt> indicates that
--   Section 3.9 of the 2003 Credit Derivatives Definitions shall apply.
--   Absence of this element indicates that Section 3.9 shall not apply.
--   NOTE: Not allowed under ISDA Credit 1999.
restr_multipleCreditEventNotices :: Restructuring -> Maybe Boolean
data RestructuringType
RestructuringType :: Scheme -> RestructuringTypeAttributes -> RestructuringType
data RestructuringTypeAttributes
RestructuringTypeAttributes :: Maybe AnyURI -> RestructuringTypeAttributes
restrTypeAttrib_restructuringScheme :: RestructuringTypeAttributes -> Maybe AnyURI

-- | A type for definining equity option simple strike or calendar spread
--   strategy features.
data StrategyFeature
StrategyFeature :: (Maybe (OneOf2 StrikeSpread CalendarSpread)) -> StrategyFeature

-- | Choice between:
--   
--   <ol>
--   <li>Definition of the upper strike in a strike spread.</li>
--   <li>Definition of the later expiration date in a calendar spread.</li>
--   </ol>
stratFeature_choice0 :: StrategyFeature -> (Maybe (OneOf2 StrikeSpread CalendarSpread))

-- | A type for defining a strike spread feature.
data StrikeSpread
StrikeSpread :: Maybe OptionStrike -> Maybe PositiveDecimal -> StrikeSpread

-- | Upper strike in a strike spread.
strikeSpread_upperStrike :: StrikeSpread -> Maybe OptionStrike

-- | Number of options at the upper strike price in a strike spread.
strikeSpread_upperStrikeNumberOfOptions :: StrikeSpread -> Maybe PositiveDecimal

-- | Trigger point at which feature is effective.
data Trigger
Trigger :: OneOf3 Decimal Decimal ((Maybe (OneOf2 CreditEvents CreditEventsReference))) -> Maybe TriggerTypeEnum -> Maybe TriggerTimeTypeEnum -> Trigger

-- | Choice between:
--   
--   <ol>
--   <li>The trigger level.</li>
--   <li>The trigger level percentage.</li>
--   <li>Choice between either an explicit representation of Credit Events,
--   or Credit Events defined elsewhere in the document.</li>
--   </ol>
trigger_choice0 :: Trigger -> OneOf3 Decimal Decimal ((Maybe (OneOf2 CreditEvents CreditEventsReference)))

-- | The Triggering condition.
trigger_type :: Trigger -> Maybe TriggerTypeEnum

-- | The valuation time type of knock condition.
trigger_timeType :: Trigger -> Maybe TriggerTimeTypeEnum

-- | Observation point for trigger.
data TriggerEvent
TriggerEvent :: [AveragingSchedule] -> Maybe DateList -> Maybe Trigger -> Maybe FeaturePayment -> TriggerEvent

-- | A Equity Derivative schedule.
triggerEvent_schedule :: TriggerEvent -> [AveragingSchedule]

-- | The trigger Dates.
triggerEvent_triggerDates :: TriggerEvent -> Maybe DateList

-- | The trigger level.
triggerEvent_trigger :: TriggerEvent -> Maybe Trigger

-- | The feature payment.
triggerEvent_featurePayment :: TriggerEvent -> Maybe FeaturePayment

-- | A single weighted averaging observation.
data WeightedAveragingObservation
WeightedAveragingObservation :: (Maybe (OneOf2 DateTime PositiveInteger)) -> Maybe NonNegativeDecimal -> WeightedAveragingObservation

-- | Choice between date times for literal date values, and observation
--   numbers for schedule generated observations.
--   
--   Choice between:
--   
--   <ol>
--   <li>Observation date time, which should be used when literal
--   observation dates are required.</li>
--   <li>Observation number, which should be unique, within a series
--   generated by a date schedule.</li>
--   </ol>
weightAveragObserv_choice0 :: WeightedAveragingObservation -> (Maybe (OneOf2 DateTime PositiveInteger))

-- | Observation weight, which is used as a multiplier for the observation
--   value.
weightAveragObserv_weight :: WeightedAveragingObservation -> Maybe NonNegativeDecimal
instance Eq CreditEventsReference
instance Show CreditEventsReference
instance Eq FrequencyTypeAttributes
instance Show FrequencyTypeAttributes
instance Eq MarketDisruptionAttributes
instance Show MarketDisruptionAttributes
instance Eq OptionNumericStrike
instance Show OptionNumericStrike
instance Eq PubliclyAvailableInformation
instance Show PubliclyAvailableInformation
instance Eq RestructuringTypeAttributes
instance Show RestructuringTypeAttributes
instance Eq WeightedAveragingObservation
instance Show WeightedAveragingObservation
instance Eq TriggerEvent
instance Show TriggerEvent
instance Eq Trigger
instance Show Trigger
instance Eq StrikeSpread
instance Show StrikeSpread
instance Eq StrategyFeature
instance Show StrategyFeature
instance Eq RestructuringType
instance Show RestructuringType
instance Eq Restructuring
instance Show Restructuring
instance Eq Quanto
instance Show Quanto
instance Eq Premium
instance Show Premium
instance Eq PassThroughItem
instance Show PassThroughItem
instance Eq PassThrough
instance Show PassThrough
instance Eq OptionStrike
instance Show OptionStrike
instance Eq OptionFeature
instance Show OptionFeature
instance Eq OptionBaseExtended
instance Show OptionBaseExtended
instance Eq OptionBase
instance Show OptionBase
instance Eq Option
instance Show Option
instance Eq NotifyingParty
instance Show NotifyingParty
instance Eq MarketDisruption
instance Show MarketDisruption
instance Eq Knock
instance Show Knock
instance Eq GracePeriodExtension
instance Show GracePeriodExtension
instance Eq FxFeature
instance Show FxFeature
instance Eq FrequencyType
instance Show FrequencyType
instance Eq FeaturePayment
instance Show FeaturePayment
instance Eq FailureToPay
instance Show FailureToPay
instance Eq CreditEvents
instance Show CreditEvents
instance Eq CreditEventNotice
instance Show CreditEventNotice
instance Eq Composite
instance Show Composite
instance Eq ClassifiedPayment
instance Show ClassifiedPayment
instance Eq CalendarSpread
instance Show CalendarSpread
instance Eq Barrier
instance Show Barrier
instance Eq AveragingSchedule
instance Show AveragingSchedule
instance Eq AveragingPeriod
instance Show AveragingPeriod
instance Eq AveragingObservationList
instance Show AveragingObservationList
instance Eq Asian
instance Show Asian
instance SchemaType WeightedAveragingObservation
instance SchemaType TriggerEvent
instance SchemaType Trigger
instance SchemaType StrikeSpread
instance SchemaType StrategyFeature
instance Extension RestructuringType Scheme
instance SchemaType RestructuringType
instance SchemaType Restructuring
instance SchemaType Quanto
instance SchemaType PubliclyAvailableInformation
instance Extension Premium PaymentBase
instance Extension Premium SimplePayment
instance SchemaType Premium
instance SchemaType PassThroughItem
instance SchemaType PassThrough
instance Extension OptionStrike OptionNumericStrike
instance SchemaType OptionStrike
instance SchemaType OptionNumericStrike
instance SchemaType OptionFeature
instance Extension OptionBaseExtended OptionBase
instance SchemaType OptionBaseExtended
instance Extension OptionBase Option
instance SchemaType OptionBase
instance Extension Option Product
instance SchemaType Option
instance SchemaType NotifyingParty
instance Extension MarketDisruption Scheme
instance SchemaType MarketDisruption
instance SchemaType Knock
instance SchemaType GracePeriodExtension
instance SchemaType FxFeature
instance Extension FrequencyType Scheme
instance SchemaType FrequencyType
instance Extension FeaturePayment PaymentBase
instance SchemaType FeaturePayment
instance SchemaType FailureToPay
instance Extension CreditEventsReference Reference
instance SchemaType CreditEventsReference
instance SchemaType CreditEvents
instance SchemaType CreditEventNotice
instance SchemaType Composite
instance Extension ClassifiedPayment PaymentBase
instance Extension ClassifiedPayment PaymentBaseExtended
instance Extension ClassifiedPayment NonNegativePayment
instance SchemaType ClassifiedPayment
instance SchemaType CalendarSpread
instance SchemaType Barrier
instance SchemaType AveragingSchedule
instance SchemaType AveragingPeriod
instance SchemaType AveragingObservationList
instance SchemaType Asian

module Data.FpML.V53.CD
data AdditionalFixedPayments
AdditionalFixedPayments :: Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> AdditionalFixedPayments

-- | An additional Fixed Payment Event. Corresponds to the payment by or on
--   behalf of the Issuer of an actual interest amount in respect to the
--   reference obligation that is greater than the expected interest
--   amount. ISDA 2003 Term: Interest Shortfall Reimbursement.
addFixedPaymen_interestShortfallReimbursement :: AdditionalFixedPayments -> Maybe Boolean

-- | An additional Fixed Payment Event. Corresponds to the payment by or on
--   behalf of the Issuer of an actual principal amount in respect to the
--   reference obligation that is greater than the expected principal
--   amount. ISDA 2003 Term: Principal Shortfall Reimbursement.
addFixedPaymen_principalShortfallReimbursement :: AdditionalFixedPayments -> Maybe Boolean

-- | An Additional Fixed Payment. Corresponds to the payment by or on
--   behalf of the issuer of an amount in respect to the reference
--   obligation in reduction of the prior writedowns. ISDA 2003 Term:
--   Writedown Reimbursement.
addFixedPaymen_writedownReimbursement :: AdditionalFixedPayments -> Maybe Boolean
data AdditionalTerm
AdditionalTerm :: Scheme -> AdditionalTermAttributes -> AdditionalTerm
data AdditionalTermAttributes
AdditionalTermAttributes :: Maybe AnyURI -> AdditionalTermAttributes
addTermAttrib_additionalTermScheme :: AdditionalTermAttributes -> Maybe AnyURI
data AdjustedPaymentDates
AdjustedPaymentDates :: Maybe Date -> Maybe Money -> AdjustedPaymentDates

-- | The adjusted payment date. This date should already be adjusted for
--   any applicable business day convention. This component is not intended
--   for use in trade confirmation but my be specified to allow the fee
--   structure to also serve as a cashflow type component (all dates the
--   the Cashflows type are adjusted payment dates).
adjustPaymentDates_adjustedPaymentDate :: AdjustedPaymentDates -> Maybe Date

-- | The currency amount of the payment.
adjustPaymentDates_paymentAmount :: AdjustedPaymentDates -> Maybe Money

-- | CDS Basket Reference Information
data BasketReferenceInformation
BasketReferenceInformation :: (Maybe (OneOf1 (Maybe (BasketName), [BasketId]))) -> Maybe ReferencePool -> (Maybe (OneOf2 (Maybe (PositiveInteger), Maybe (PositiveInteger)) Tranche)) -> BasketReferenceInformation

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The name of the basket expressed as a free format string. FpML
--   does not define usage rules for this element.</li>
--   <li>A CDS basket identifier</li>
--   </ul>
basketRefInfo_choice0 :: BasketReferenceInformation -> (Maybe (OneOf1 (Maybe (BasketName), [BasketId])))

-- | This element contains all the reference pool items to define the
--   reference entity and reference obligation(s) in the basket
basketRefInfo_referencePool :: BasketReferenceInformation -> Maybe ReferencePool

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>N th reference obligation to default triggers payout.</li>
--   <li>M th reference obligation to default to allow representation of N
--   th to M th defaults.</li>
--   </ul>
--   
--   <ol>
--   <li>This element contains CDS tranche terms.</li>
--   </ol>
basketRefInfo_choice2 :: BasketReferenceInformation -> (Maybe (OneOf2 (Maybe (PositiveInteger), Maybe (PositiveInteger)) Tranche))
data CalculationAmount
CalculationAmount :: Maybe ID -> Currency -> Decimal -> [Step] -> CalculationAmount
calcAmount_ID :: CalculationAmount -> Maybe ID

-- | The currency in which an amount is denominated.
calcAmount_currency :: CalculationAmount -> Currency

-- | The monetary quantity in currency units.
calcAmount_amount :: CalculationAmount -> Decimal

-- | A schedule of step date and value pairs. On each step date the
--   associated step value becomes effective. A list of steps may be
--   ordered in the document by ascending step date. An FpML document
--   containing an unordered list of steps is still regarded as a
--   conformant document.
calcAmount_step :: CalculationAmount -> [Step]
data CashSettlementTerms
CashSettlementTerms :: Maybe ID -> Maybe Currency -> Maybe ValuationDate -> Maybe BusinessCenterTime -> Maybe QuotationRateTypeEnum -> Maybe Money -> Maybe Money -> [XsdString] -> Maybe NonNegativeInteger -> (Maybe (OneOf2 Money RestrictedPercentage)) -> Maybe Boolean -> Maybe Boolean -> Maybe ValuationMethodEnum -> CashSettlementTerms
cashSettlTerms_ID :: CashSettlementTerms -> Maybe ID

-- | ISDA 2003 Term: Settlement Currency
cashSettlTerms_settlementCurrency :: CashSettlementTerms -> Maybe Currency

-- | The number of business days after conditions to settlement have been
--   satisfied when the calculation agent obtains a price quotation on the
--   Reference Obligation for purposes of cash settlement. There may be one
--   or more valuation dates. This is typically specified if the cash
--   settlement amount is not a fixed amount. ISDA 2003 Term: Valuation
--   Date
cashSettlTerms_valuationDate :: CashSettlementTerms -> Maybe ValuationDate

-- | The time of day in the specified business center when the calculation
--   agent seeks quotations for an amount of the reference obligation for
--   purposes of cash settlement. ISDA 2003 Term: Valuation Time
cashSettlTerms_valuationTime :: CashSettlementTerms -> Maybe BusinessCenterTime

-- | The type of price quotations to be requested from dealers when
--   determining the market value of the reference obligation for purposes
--   of cash settlement. For example, Bid, Offer or Mid-market. ISDA 2003
--   Term: Quotation Method
cashSettlTerms_quotationMethod :: CashSettlementTerms -> Maybe QuotationRateTypeEnum

-- | In the determination of a cash settlement amount, if weighted average
--   quotations are to be obtained, the quotation amount specifies an upper
--   limit to the outstanding principal balance of the reference obligation
--   for which the quote should be obtained. If not specified, the ISDA
--   definitions provide for a fallback amount equal to the floating rate
--   payer calculation amount. ISDA 2003 Term: Quotation Amount
cashSettlTerms_quotationAmount :: CashSettlementTerms -> Maybe Money

-- | In the determination of a cash settlement amount, if weighted average
--   quotations are to be obtained, the minimum quotation amount specifies
--   a minimum intended threshold amount of outstanding principal balance
--   of the reference obligation for which the quote should be obtained. If
--   not specified, the ISDA definitions provide for a fallback amount of
--   the lower of either USD 1,000,000 (or its equivalent in the relevant
--   obligation currency) or the quotation amount. ISDA 2003 Term: Minimum
--   Quotation Amount
cashSettlTerms_minimumQuotationAmount :: CashSettlementTerms -> Maybe Money

-- | A dealer from whom quotations are obtained by the calculation agent on
--   the reference obligation for purposes of cash settlement. ISDA 2003
--   Term: Dealer
cashSettlTerms_dealer :: CashSettlementTerms -> [XsdString]

-- | The number of business days used in the determination of the cash
--   settlement payment date. If a cash settlement amount is specified, the
--   cash settlement payment date will be this number of business days
--   following the calculation of the final price. If a cash settlement
--   amount is not specified, the cash settlement payment date will be this
--   number of business days after all conditions to settlement are
--   satisfied. ISDA 2003 Term: Cash Settlement Date
cashSettlTerms_cashSettlementBusinessDays :: CashSettlementTerms -> Maybe NonNegativeInteger

-- | Choice between:
--   
--   <ol>
--   <li>The amount paid by the seller to the buyer for cash settlement on
--   the cash settlement date. If not otherwise specified, would typically
--   be calculated as 100 (or the Reference Price) minus the price of the
--   Reference Obligation (all expressed as a percentage) times Floating
--   Rate Payer Calculation Amount. ISDA 2003 Term: Cash Settlement
--   Amount.</li>
--   <li>Used for fixed recovery, specifies the recovery level, determined
--   at contract inception, to be applied on a default. Used to calculate
--   the amount paid by the seller to the buyer for cash settlement on the
--   cash settlement date. Amount calculation is (1 minus the Recovery
--   Factor) multiplied by the Floating Rate Payer Calculation Amount. The
--   currency will be derived from the Floating Rate Payer Calculation
--   Amount.</li>
--   </ol>
cashSettlTerms_choice8 :: CashSettlementTerms -> (Maybe (OneOf2 Money RestrictedPercentage))

-- | Used for Recovery Lock, to indicate whether fixed Settlement is
--   Applicable or Not Applicable. If Buyer fails to deliver an effective
--   Notice of Physical Settlement on or before the Buyer NOPS Cut-off
--   Date, and If Seller fails to deliver an effective Seller NOPS on or
--   before the Seller NOPS Cut-off Date, then either: (a) if Fixed
--   Settlement is specified in the related Confirmation as not applicable,
--   then the Seller NOPS Cut-off Date shall be the Termination Date; or
--   (b) if Fixed Settlement is specified in the related Confirmation as
--   applicable, then: (i) if the Fixed Settlement Amount is a positive
--   number, Seller shall, subject to Section 3.1 (except for the
--   requirement of satisfaction of the Notice of Physical Settlement
--   Condition to Settlement), pay the Fixed Settlement Amount to Buyer on
--   the Fixed Settlement Payment Date; and (ii) if the Fixed Settlement
--   Amount is a negative number, Buyer shall, subject to Section 3.1
--   (except for the requirement of satisfaction of the Notice of Physical
--   Settlement Condition to Settlement), pay the absolute value of the
--   Fixed Settlement Amount to Seller on the Fixed Settlement Payment
--   Date.
cashSettlTerms_fixedSettlement :: CashSettlementTerms -> Maybe Boolean

-- | Indicates whether accrued interest is included (true) or not (false).
--   For cash settlement this specifies whether quotations should be
--   obtained inclusive or not of accrued interest. For physical settlement
--   this specifies whether the buyer should deliver the obligation with an
--   outstanding principal balance that includes or excludes accrued
--   interest. ISDA 2003 Term: Include/Exclude Accrued Interest
cashSettlTerms_accruedInterest :: CashSettlementTerms -> Maybe Boolean

-- | The ISDA defined methodology for determining the final price of the
--   reference obligation for purposes of cash settlement. (ISDA 2003 Term:
--   Valuation Method). For example, Market, Highest etc.
cashSettlTerms_valuationMethod :: CashSettlementTerms -> Maybe ValuationMethodEnum
data CreditDefaultSwap
CreditDefaultSwap :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> GeneralTerms -> FeeLeg -> [ProtectionTerms] -> [OneOf2 CashSettlementTerms PhysicalSettlementTerms] -> CreditDefaultSwap
creditDefaultSwap_ID :: CreditDefaultSwap -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
creditDefaultSwap_primaryAssetClass :: CreditDefaultSwap -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
creditDefaultSwap_secondaryAssetClass :: CreditDefaultSwap -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
creditDefaultSwap_productType :: CreditDefaultSwap -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
creditDefaultSwap_productId :: CreditDefaultSwap -> [ProductId]

-- | This element contains all the data that appears in the section
--   entitled <a>1. General Terms</a> in the 2003 ISDA Credit Derivatives
--   Confirmation.
creditDefaultSwap_generalTerms :: CreditDefaultSwap -> GeneralTerms

-- | This element contains all the terms relevant to defining the fixed
--   amounts/payments per the applicable ISDA definitions.
creditDefaultSwap_feeLeg :: CreditDefaultSwap -> FeeLeg

-- | This element contains all the terms relevant to defining the
--   applicable floating rate payer calculation amount, credit events and
--   associated conditions to settlement, and reference obligations.
creditDefaultSwap_protectionTerms :: CreditDefaultSwap -> [ProtectionTerms]

-- | Choice between:
--   
--   <ol>
--   <li>This element contains all the ISDA terms relevant to cash
--   settlement for when cash settlement is applicable. ISDA 2003 Term:
--   Cash Settlement</li>
--   <li>This element contains all the ISDA terms relevant to physical
--   settlement for when physical settlement is applicable. ISDA 2003 Term:
--   Physical Settlement</li>
--   </ol>
creditDefaultSwap_choice7 :: CreditDefaultSwap -> [OneOf2 CashSettlementTerms PhysicalSettlementTerms]

-- | A complex type to support the credit default swap option.
data CreditDefaultSwapOption
CreditDefaultSwapOption :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> OptionTypeEnum -> Premium -> Exercise -> Maybe ExerciseProcedure -> Maybe OptionFeature -> (Maybe (OneOf2 NotionalAmountReference Money)) -> Maybe PositiveDecimal -> Maybe Currency -> Maybe PositiveDecimal -> Maybe SettlementTypeEnum -> Maybe AdjustableOrRelativeDate -> (Maybe (OneOf2 Money Currency)) -> CreditOptionStrike -> CreditDefaultSwap -> CreditDefaultSwapOption
creditDefaultSwapOption_ID :: CreditDefaultSwapOption -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
creditDefaultSwapOption_primaryAssetClass :: CreditDefaultSwapOption -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
creditDefaultSwapOption_secondaryAssetClass :: CreditDefaultSwapOption -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
creditDefaultSwapOption_productType :: CreditDefaultSwapOption -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
creditDefaultSwapOption_productId :: CreditDefaultSwapOption -> [ProductId]

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
creditDefaultSwapOption_buyerPartyReference :: CreditDefaultSwapOption -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
creditDefaultSwapOption_buyerAccountReference :: CreditDefaultSwapOption -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
creditDefaultSwapOption_sellerPartyReference :: CreditDefaultSwapOption -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
creditDefaultSwapOption_sellerAccountReference :: CreditDefaultSwapOption -> Maybe AccountReference

-- | The type of option transaction. From a usage standpoint, put<i>call is
--   the default option type, while payer</i>receiver indicator is used for
--   options index credit default swaps, consistently with the industry
--   practice. Straddle is used for the case of straddle strategy, that
--   combine a call and a put with the same strike.
creditDefaultSwapOption_optionType :: CreditDefaultSwapOption -> OptionTypeEnum

-- | The option premium payable by the buyer to the seller.
creditDefaultSwapOption_premium :: CreditDefaultSwapOption -> Premium

-- | An placeholder for the actual option exercise definitions.
creditDefaultSwapOption_exercise :: CreditDefaultSwapOption -> Exercise

-- | A set of parameters defining procedures associated with the exercise.
creditDefaultSwapOption_exerciseProcedure :: CreditDefaultSwapOption -> Maybe ExerciseProcedure

-- | An Option feature such as quanto, asian, barrier, knock.
creditDefaultSwapOption_feature :: CreditDefaultSwapOption -> Maybe OptionFeature

-- | A choice between an explicit representation of the notional amount, or
--   a reference to a notional amount defined elsewhere in this document.
--   
--   Choice between:
--   
--   <ol>
--   <li>notionalReference</li>
--   <li>notionalAmount</li>
--   </ol>
creditDefaultSwapOption_choice13 :: CreditDefaultSwapOption -> (Maybe (OneOf2 NotionalAmountReference Money))

-- | The number of units of underlyer per option comprised in the option
--   transaction.
creditDefaultSwapOption_optionEntitlement :: CreditDefaultSwapOption -> Maybe PositiveDecimal

-- | TODO
creditDefaultSwapOption_entitlementCurrency :: CreditDefaultSwapOption -> Maybe Currency

-- | The number of options comprised in the option transaction.
creditDefaultSwapOption_numberOfOptions :: CreditDefaultSwapOption -> Maybe PositiveDecimal
creditDefaultSwapOption_settlementType :: CreditDefaultSwapOption -> Maybe SettlementTypeEnum
creditDefaultSwapOption_settlementDate :: CreditDefaultSwapOption -> Maybe AdjustableOrRelativeDate

-- | Choice between:
--   
--   <ol>
--   <li>Settlement Amount</li>
--   <li>Settlement Currency for use where the Settlement Amount cannot be
--   known in advance</li>
--   </ol>
creditDefaultSwapOption_choice19 :: CreditDefaultSwapOption -> (Maybe (OneOf2 Money Currency))

-- | Specifies the strike of the option on credit default swap.
creditDefaultSwapOption_strike :: CreditDefaultSwapOption -> CreditOptionStrike
creditDefaultSwapOption_creditDefaultSwap :: CreditDefaultSwapOption -> CreditDefaultSwap

-- | A complex type to specify the strike of a credit swaption or a credit
--   default swap option.
data CreditOptionStrike
CreditOptionStrike :: (Maybe (OneOf3 Decimal Decimal FixedRateReference)) -> CreditOptionStrike

-- | Choice between:
--   
--   <ol>
--   <li>The strike of a credit default swap option or credit swaption when
--   expressed as a spread per annum.</li>
--   <li>The strike of a credit default swap option or credit swaption when
--   expressed as in reference to the price of the underlying obligation(s)
--   or index.</li>
--   <li>The strike of a credit default swap option or credit swaption when
--   expressed in reference to the spread of the underlying swap (typical
--   practice in the case of single name swaps).</li>
--   </ol>
creditOptionStrike_choice0 :: CreditOptionStrike -> (Maybe (OneOf3 Decimal Decimal FixedRateReference))
data DeliverableObligations
DeliverableObligations :: Maybe Boolean -> Maybe ObligationCategoryEnum -> Maybe Boolean -> Maybe SpecifiedCurrency -> Maybe Boolean -> Maybe NotDomesticCurrency -> Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> Maybe PCDeliverableObligationCharac -> Maybe PCDeliverableObligationCharac -> Maybe LoanParticipation -> Maybe Boolean -> Maybe Period -> Maybe Boolean -> Maybe Boolean -> (Maybe (OneOf3 Boolean Boolean Boolean)) -> Maybe LoanParticipation -> Maybe XsdString -> Maybe XsdString -> DeliverableObligations

-- | Indicates whether accrued interest is included (true) or not (false).
--   For cash settlement this specifies whether quotations should be
--   obtained inclusive or not of accrued interest. For physical settlement
--   this specifies whether the buyer should deliver the obligation with an
--   outstanding principal balance that includes or excludes accrued
--   interest. ISDA 2003 Term: Include/Exclude Accrued Interest
delivOblig_accruedInterest :: DeliverableObligations -> Maybe Boolean

-- | Used in both obligations and deliverable obligations to represent a
--   class or type of securities which apply. ISDA 2003 Term: Obligation
--   Category/Deliverable Obligation Category
delivOblig_category :: DeliverableObligations -> Maybe ObligationCategoryEnum

-- | An obligation and deliverable obligation characteristic. An obligation
--   that ranks at least equal with the most senior Reference Obligation in
--   priority of payment or, if no Reference Obligation is specified in the
--   related Confirmation, the obligations of the Reference Entity that are
--   senior. ISDA 2003 Term: Not Subordinated
delivOblig_notSubordinated :: DeliverableObligations -> Maybe Boolean

-- | An obligation and deliverable obligation characteristic. The currency
--   or currencies in which an obligation or deliverable obligation must be
--   payable. ISDA 2003 Term: Specified Currency
delivOblig_specifiedCurrency :: DeliverableObligations -> Maybe SpecifiedCurrency

-- | An obligation and deliverable obligation characteristic. Any
--   obligation that is not primarily (majority) owed to a Sovereign or
--   Supranational Organization. ISDA 2003 Term: Not Sovereign Lender
delivOblig_notSovereignLender :: DeliverableObligations -> Maybe Boolean

-- | An obligation and deliverable obligation characteristic. Any
--   obligation that is payable in any currency other than the domestic
--   currency. Domestic currency is either the currency so specified or, if
--   no currency is specified, the currency of (a) the reference entity, if
--   the reference entity is a sovereign, or (b) the jurisdiction in which
--   the relevant reference entity is organised, if the reference entity is
--   not a sovereign. ISDA 2003 Term: Not Domestic Currency
delivOblig_notDomesticCurrency :: DeliverableObligations -> Maybe NotDomesticCurrency

-- | An obligation and deliverable obligation characteristic. If the
--   reference entity is a Sovereign, this means any obligation that is not
--   subject to the laws of the reference entity. If the reference entity
--   is not a sovereign, this means any obligation that is not subject to
--   the laws of the jurisdiction of the reference entity. ISDA 2003 Term:
--   Not Domestic Law
delivOblig_notDomesticLaw :: DeliverableObligations -> Maybe Boolean

-- | An obligation and deliverable obligation characteristic. Indicates
--   whether or not the obligation is quoted, listed or ordinarily
--   purchased and sold on an exchange. ISDA 2003 Term: Listed
delivOblig_listed :: DeliverableObligations -> Maybe Boolean

-- | A deliverable obligation characteristic. In essence Not Contingent
--   means the repayment of principal cannot be dependant on a
--   formula/index, i.e. to prevent the risk of being delivered an
--   instrument that may never pay any element of principal, and to ensure
--   that the obligation is interest bearing (on a regular schedule). ISDA
--   2003 Term: Not Contingent
delivOblig_notContingent :: DeliverableObligations -> Maybe Boolean

-- | An obligation and deliverable obligation characteristic. Any
--   obligation other than an obligation that was intended to be offered
--   for sale primarily in the domestic market of the relevant Reference
--   Entity. This specifies that the obligation must be an internationally
--   recognized bond. ISDA 2003 Term: Not Domestic Issuance
delivOblig_notDomesticIssuance :: DeliverableObligations -> Maybe Boolean

-- | A deliverable obligation characteristic. A loan that is freely
--   assignable to a bank or financial institution without the consent of
--   the Reference Entity or the guarantor, if any, of the loan (or the
--   consent of the applicable borrower if a Reference Entity is
--   guaranteeing the loan) or any agent. ISDA 2003 Term: Assignable Loan
delivOblig_assignableLoan :: DeliverableObligations -> Maybe PCDeliverableObligationCharac

-- | A deliverable obligation characteristic. A loan that is capable of
--   being assigned with the consent of the Reference Entity or the
--   guarantor, if any, of the loan or any agent. ISDA 2003 Term: Consent
--   Required Loan
delivOblig_consentRequiredLoan :: DeliverableObligations -> Maybe PCDeliverableObligationCharac

-- | A deliverable obligation characteristic. A loan with a participation
--   agreement whereby the buyer is capable of creating, or procuring the
--   creation of, a contractual right in favour of the seller that provides
--   the seller with recourse to the participation seller for a specified
--   share in any payments due under the relevant loan which are received
--   by the participation seller. ISDA 2003 Term: Direct Loan Participation
delivOblig_directLoanParticipation :: DeliverableObligations -> Maybe LoanParticipation

-- | A deliverable obligation characteristic. An obligation that is
--   transferable to institutional investors without any contractual,
--   statutory or regulatory restrictions. ISDA 2003 Term: Transferable
delivOblig_transferable :: DeliverableObligations -> Maybe Boolean

-- | A deliverable obligation characteristic. An obligation that has a
--   remaining maturity from the Physical Settlement Date of not greater
--   than the period specified. ISDA 2003 Term: Maximum Maturity
delivOblig_maximumMaturity :: DeliverableObligations -> Maybe Period

-- | A deliverable obligation characteristic. An obligation at time of
--   default is due to mature and due to be repaid, or as a result of
--   downgrade/bankruptcy is due to be repaid as a result of an
--   acceleration clause. ISDA 2003 Term: Accelerated or Matured
delivOblig_acceleratedOrMatured :: DeliverableObligations -> Maybe Boolean

-- | A deliverable obligation characteristic. Any obligation that is not a
--   bearer instrument. This applies to Bonds only and is meant to avoid
--   tax, fraud and security/delivery provisions that can potentially be
--   associated with Bearer Bonds. ISDA 2003 Term: Not Bearer
delivOblig_notBearer :: DeliverableObligations -> Maybe Boolean

-- | Choice between:
--   
--   <ol>
--   <li>An obligation and deliverable obligation characteristic. Defined
--   in the ISDA published additional provisions for U.S. Municipal as
--   Reference Entity. ISDA 2003 Term: Full Faith and Credit Obligation
--   Liability</li>
--   <li>An obligation and deliverable obligation characteristic. Defined
--   in the ISDA published additional provisions for U.S. Municipal as
--   Reference Entity. ISDA 2003 Term: General Fund Obligation
--   Liability</li>
--   <li>An obligation and deliverable obligation characteristic. Defined
--   in the ISDA published additional provisions for U.S. Municipal as
--   Reference Entity. ISDA 2003 Term: Revenue Obligation Liability</li>
--   </ol>
delivOblig_choice17 :: DeliverableObligations -> (Maybe (OneOf3 Boolean Boolean Boolean))

-- | ISDA 1999 Term: Indirect Loan Participation. NOTE: Only applicable as
--   a deliverable obligation under ISDA Credit 1999.
delivOblig_indirectLoanParticipation :: DeliverableObligations -> Maybe LoanParticipation

-- | A free format string to specify any excluded obligations or
--   deliverable obligations, as the case may be, of the reference entity
--   or excluded types of obligations or deliverable obligations. ISDA 2003
--   Term: Excluded Obligations/Excluded Deliverable Obligations
delivOblig_excluded :: DeliverableObligations -> Maybe XsdString

-- | This element is used to specify any other obligations of a reference
--   entity in both obligations and deliverable obligations. The
--   obligations can be specified free-form. ISDA 2003 Term: Other
--   Obligations of a Reference Entity
delivOblig_othReferenceEntityObligations :: DeliverableObligations -> Maybe XsdString

-- | Defines a coding scheme of the entity types defined in the ISDA First
--   to Default documentation.
data EntityType
EntityType :: Scheme -> EntityTypeAttributes -> EntityType
data EntityTypeAttributes
EntityTypeAttributes :: Maybe AnyURI -> EntityTypeAttributes
entityTypeAttrib_entityTypeScheme :: EntityTypeAttributes -> Maybe AnyURI
data FeeLeg
FeeLeg :: Maybe ID -> Maybe InitialPayment -> [SinglePayment] -> Maybe PeriodicPayment -> Maybe Decimal -> Maybe Boolean -> Maybe Decimal -> Maybe QuotationStyleEnum -> FeeLeg
feeLeg_ID :: FeeLeg -> Maybe ID

-- | Specifies a single fixed payment that is payable by the payer to the
--   receiver on the initial payment date. The fixed payment to be paid is
--   specified in terms of a known currency amount. This element should be
--   used for CDS Index trades and can be used for CDS trades where it is
--   necessary to represent a payment from Seller to Buyer. For CDS trades
--   where a payment is to be made from Buyer to Seller the
--   feeLeg/singlePayment structure must be used.
feeLeg_initialPayment :: FeeLeg -> Maybe InitialPayment

-- | Specifies a single fixed amount that is payable by the buyer to the
--   seller on the fixed rate payer payment date. The fixed amount to be
--   paid is specified in terms of a known currency amount.
feeLeg_singlePayment :: FeeLeg -> [SinglePayment]

-- | Specifies a periodic schedule of fixed amounts that are payable by the
--   buyer to the seller on the fixed rate payer payment dates. The fixed
--   amount to be paid on each payment date can be specified in terms of a
--   known currency amount or as an amount calculated on a formula basis by
--   reference to a per annum fixed rate. The applicable business day
--   convention and business day for adjusting any fixed rate payer payment
--   date if it would otherwise fall on a day that is not a business day
--   are those specified in the dateAdjustments element within the
--   generalTerms component. ISDA 2003 Term:
feeLeg_periodicPayment :: FeeLeg -> Maybe PeriodicPayment

-- | An optional element that only has meaning in a credit index trade.
--   This element contains the credit spread (<a>fair value</a>) at which
--   the trade was executed. Unlike the fixedRate of an index, the
--   marketFixedRate varies over the life of the index depending on market
--   conditions. The marketFixedRate is the price of the index as quoted by
--   trading desks.
feeLeg_marketFixedRate :: FeeLeg -> Maybe Decimal

-- | Applicable to CDS on MBS to specify whether payment delays are
--   applicable to the fixed Amount. RMBS typically have a payment delay of
--   5 days between the coupon date of the reference obligation and the
--   payment date of the synthetic swap. CMBS do not, on the other hand,
--   with both payment dates being on the 25th of each month.
feeLeg_paymentDelay :: FeeLeg -> Maybe Boolean

-- | An optional element that contains the up-front points expressed as a
--   percentage of the notional. An initialPoints value of 5% would be
--   represented as 0.05. The initialPoints element is an alternative to
--   marketFixedRate in quoting the traded level of a trade. When
--   initialPoints is used, the traded level is the sum of fixedRate and
--   initialPoints. The initialPoints is one of the items that are factored
--   into the initialPayment calculation and is payable by the Buyer to the
--   Seller. Note that initialPoints and marketFixedRate may both be
--   present in the same document when both implied values are desired.
feeLeg_initialPoints :: FeeLeg -> Maybe Decimal

-- | The type of quotation that was used between the trading desks. The
--   purpose of this element is to indicate the actual quotation style that
--   was used to quote this trade which may not be apparent when both
--   marketFixedRate and initialPoints are included in the document. When
--   quotationStyle is ‘PointsUpFront’, the initialPoints element should be
--   populated. When quotationStyle is ‘TradedSpread’, the marketFixedRate
--   element should be populated.
feeLeg_quotationStyle :: FeeLeg -> Maybe QuotationStyleEnum
data FixedAmountCalculation
FixedAmountCalculation :: Maybe CalculationAmount -> FixedRate -> Maybe DayCountFraction -> FixedAmountCalculation

-- | The notional amount used in the calculation of fixed amounts where an
--   amount is calculated on a formula basis, i.e. fixed amount = fixed
--   rate payer calculation amount x fixed rate x fixed rate day count
--   fraction. ISDA 2003 Term: Fixed Rate Payer Calculation Amount.
fixedAmountCalc_calculationAmount :: FixedAmountCalculation -> Maybe CalculationAmount

-- | The calculation period fixed rate. A per annum rate, expressed as a
--   decimal. A fixed rate of 5% would be represented as 0.05.
fixedAmountCalc_fixedRate :: FixedAmountCalculation -> FixedRate

-- | The day count fraction. ISDA 2003 Term: Fixed Rate Day Count Fraction.
fixedAmountCalc_dayCountFraction :: FixedAmountCalculation -> Maybe DayCountFraction

-- | The calculation period fixed rate. A per annum rate, expressed as a
--   decimal. A fixed rate of 5% would be represented as 0.05.
data FixedRate
FixedRate :: Decimal -> FixedRateAttributes -> FixedRate
data FixedRateAttributes
FixedRateAttributes :: Maybe ID -> FixedRateAttributes
fixedRateAttrib_ID :: FixedRateAttributes -> Maybe ID
data FixedRateReference
FixedRateReference :: IDREF -> FixedRateReference
fixedRateRef_href :: FixedRateReference -> IDREF
data FloatingAmountEvents
FloatingAmountEvents :: Maybe Boolean -> Maybe InterestShortFall -> Maybe Boolean -> Maybe Boolean -> Maybe FloatingAmountProvisions -> Maybe AdditionalFixedPayments -> FloatingAmountEvents

-- | A floating rate payment event. Corresponds to the failure by the
--   Reference Entity to pay an expected principal amount or the payment of
--   an actual principal amount that is less than the expected principal
--   amount. ISDA 2003 Term: Failure to Pay Principal.
floatAmountEvents_failureToPayPrincipal :: FloatingAmountEvents -> Maybe Boolean

-- | A floating rate payment event. With respect to any Reference
--   Obligation Payment Date, either (a) the non-payment of an Expected
--   Interest Amount or (b) the payment of an Actual Interest Amount that
--   is less than the Expected Interest Amount. ISDA 2003 Term: Interest
--   Shortfall.
floatAmountEvents_interestShortfall :: FloatingAmountEvents -> Maybe InterestShortFall

-- | A floating rate payment event. Results from the fact that the
--   underlyer writes down its outstanding principal amount. ISDA 2003
--   Term: Writedown.
floatAmountEvents_writedown :: FloatingAmountEvents -> Maybe Boolean

-- | A floating rate payment event. Results from the fact that losses occur
--   to the underlying instruments that do not result in reductions of the
--   outstanding principal of the reference obligation.
floatAmountEvents_impliedWritedown :: FloatingAmountEvents -> Maybe Boolean

-- | Specifies the floating amount provisions associated with the
--   floatingAmountEvents.
floatAmountEvents_floatingAmountProvisions :: FloatingAmountEvents -> Maybe FloatingAmountProvisions

-- | Specifies the events that will give rise to the payment a additional
--   fixed payments.
floatAmountEvents_additionalFixedPayments :: FloatingAmountEvents -> Maybe AdditionalFixedPayments
data FloatingAmountProvisions
FloatingAmountProvisions :: Maybe Boolean -> Maybe Boolean -> FloatingAmountProvisions

-- | As specified by the ISDA Supplement for use with trades on
--   mortgage-backed securities, <a>WAC Cap</a> means a weighted average
--   coupon or weighted average rate cap provision (however defined in the
--   Underlying Instruments) of the Underlying Instruments that limits,
--   increases or decreases the interest rate or interest entitlement, as
--   set out in the Underlying Instruments on the Effective Date without
--   regard to any subsequent amendment The presence of the element with
--   value set to <tt>true</tt> signifies that the provision is applicable.
--   From a usage standpoint, this provision is typically applicable in the
--   case of CMBS and not applicable in case of RMBS trades.
floatAmountProvis_wACCapInterestProvision :: FloatingAmountProvisions -> Maybe Boolean

-- | As specified by the ISDA Standard Terms Supplement for use with trades
--   on mortgage-backed securities. The presence of the element with value
--   set to <tt>true</tt> signifies that the provision is applicable. If
--   applicable, the applicable step-up terms are specified as part of that
--   ISDA Standard Terms Supplement. From a usage standpoint, this
--   provision is typically applicable in the case of RMBS and not
--   applicable in case of CMBS trades.
floatAmountProvis_stepUpProvision :: FloatingAmountProvisions -> Maybe Boolean
data GeneralTerms
GeneralTerms :: AdjustableDate2 -> AdjustableDate2 -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe BusinessDayAdjustments -> OneOf3 ReferenceInformation IndexReferenceInformation BasketReferenceInformation -> [AdditionalTerm] -> Maybe Boolean -> Maybe Boolean -> GeneralTerms

-- | The first day of the term of the trade. This day may be subject to
--   adjustment in accordance with a business day convention. ISDA 2003
--   Term: Effective Date.
generalTerms_effectiveDate :: GeneralTerms -> AdjustableDate2

-- | The scheduled date on which the credit protection will lapse. This day
--   may be subject to adjustment in accordance with a business day
--   convention. ISDA 2003 Term: Scheduled Termination Date.
generalTerms_scheduledTerminationDate :: GeneralTerms -> AdjustableDate2

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
generalTerms_buyerPartyReference :: GeneralTerms -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
generalTerms_buyerAccountReference :: GeneralTerms -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
generalTerms_sellerPartyReference :: GeneralTerms -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
generalTerms_sellerAccountReference :: GeneralTerms -> Maybe AccountReference

-- | ISDA 2003 Terms: Business Day and Business Day Convention.
generalTerms_dateAdjustments :: GeneralTerms -> Maybe BusinessDayAdjustments

-- | Choice between:
--   
--   <ol>
--   <li>This element contains all the terms relevant to defining the
--   reference entity and reference obligation(s).</li>
--   <li>This element contains all the terms relevant to defining the
--   Credit DefaultSwap Index.</li>
--   <li>This element contains all the terms relevant to defining the
--   Credit Default Swap Basket.</li>
--   </ol>
generalTerms_choice7 :: GeneralTerms -> OneOf3 ReferenceInformation IndexReferenceInformation BasketReferenceInformation

-- | This element is used for representing information contained in the
--   Additional Terms field of the 2003 Master Credit Derivatives confirm.
generalTerms_additionalTerm :: GeneralTerms -> [AdditionalTerm]

-- | Value of this element set to <tt>true</tt> indicates that substitution
--   is applicable.
generalTerms_substitution :: GeneralTerms -> Maybe Boolean

-- | Value of this element set to <tt>true</tt> indicates that modified
--   equity delivery is applicable.
generalTerms_modifiedEquityDelivery :: GeneralTerms -> Maybe Boolean
data IndexAnnexSource
IndexAnnexSource :: Scheme -> IndexAnnexSourceAttributes -> IndexAnnexSource
data IndexAnnexSourceAttributes
IndexAnnexSourceAttributes :: Maybe AnyURI -> IndexAnnexSourceAttributes
indexAnnexSourceAttrib_indexAnnexSourceScheme :: IndexAnnexSourceAttributes -> Maybe AnyURI
data IndexId
IndexId :: Scheme -> IndexIdAttributes -> IndexId
data IndexIdAttributes
IndexIdAttributes :: Maybe AnyURI -> IndexIdAttributes
indexIdAttrib_indexIdScheme :: IndexIdAttributes -> Maybe AnyURI
data IndexName
IndexName :: Scheme -> IndexNameAttributes -> IndexName
data IndexNameAttributes
IndexNameAttributes :: Maybe AnyURI -> IndexNameAttributes
indexNameAttrib_indexNameScheme :: IndexNameAttributes -> Maybe AnyURI

-- | A type defining a Credit Default Swap Index.
data IndexReferenceInformation
IndexReferenceInformation :: Maybe ID -> OneOf2 (IndexName, [IndexId]) [IndexId] -> Maybe PositiveInteger -> Maybe PositiveInteger -> Maybe Date -> Maybe IndexAnnexSource -> [LegalEntity] -> Maybe Tranche -> Maybe SettledEntityMatrix -> IndexReferenceInformation
indexRefInfo_ID :: IndexReferenceInformation -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The name of the index expressed as a free format string. FpML does
--   not define usage rules for this element.</li>
--   <li>A CDS index identifier (e.g. RED pair code).</li>
--   </ul>
--   
--   <ol>
--   <li>A CDS index identifier (e.g. RED pair code).</li>
--   </ol>
indexRefInfo_choice0 :: IndexReferenceInformation -> OneOf2 (IndexName, [IndexId]) [IndexId]

-- | A CDS index series identifier, e.g. 1, 2, 3 etc.
indexRefInfo_indexSeries :: IndexReferenceInformation -> Maybe PositiveInteger

-- | A CDS index series version identifier, e.g. 1, 2, 3 etc.
indexRefInfo_indexAnnexVersion :: IndexReferenceInformation -> Maybe PositiveInteger

-- | A CDS index series annex date.
indexRefInfo_indexAnnexDate :: IndexReferenceInformation -> Maybe Date

-- | A CDS index series annex source.
indexRefInfo_indexAnnexSource :: IndexReferenceInformation -> Maybe IndexAnnexSource

-- | Excluded reference entity.
indexRefInfo_excludedReferenceEntity :: IndexReferenceInformation -> [LegalEntity]

-- | This element contains CDS tranche terms.
indexRefInfo_tranche :: IndexReferenceInformation -> Maybe Tranche

-- | Used to specify the Relevant Settled Entity Matrix when there are
--   settled entities at the time of the trade.
indexRefInfo_settledEntityMatrix :: IndexReferenceInformation -> Maybe SettledEntityMatrix
data InitialPayment
InitialPayment :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe Date -> Maybe Date -> Money -> InitialPayment
initialPayment_ID :: InitialPayment -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
initialPayment_payerPartyReference :: InitialPayment -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
initialPayment_payerAccountReference :: InitialPayment -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
initialPayment_receiverPartyReference :: InitialPayment -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
initialPayment_receiverAccountReference :: InitialPayment -> Maybe AccountReference

-- | A fixed payment date that shall be subject to adjustment in accordance
--   with the applicable business day convention if it would otherwise fall
--   on a day that is not a business day. The applicable business day
--   convention and business day are those specified in the dateAdjustments
--   element within the generalTerms component.
initialPayment_adjustablePaymentDate :: InitialPayment -> Maybe Date

-- | The adjusted payment date. This date should already be adjusted for
--   any applicable business day convention. This component is not intended
--   for use in trade confirmation but may be specified to allow the fee
--   structure to also serve as a cashflow type component.
initialPayment_adjustedPaymentDate :: InitialPayment -> Maybe Date

-- | A fixed payment amount.
initialPayment_paymentAmount :: InitialPayment -> Money
data InterestShortFall
InterestShortFall :: Maybe InterestShortfallCapEnum -> Maybe Boolean -> Maybe FloatingRateIndex -> InterestShortFall

-- | Specifies the nature of the interest Shortfall cap (i.e. Fixed Cap or
--   Variable Cap) in the case where it is applicable. ISDA 2003 Term:
--   Interest Shortfall Cap.
interShortFall_interestShortfallCap :: InterestShortFall -> Maybe InterestShortfallCapEnum
interShortFall_compounding :: InterestShortFall -> Maybe Boolean

-- | The rate source in the case of a variable cap.
interShortFall_rateSource :: InterestShortFall -> Maybe FloatingRateIndex
data LoanParticipation
LoanParticipation :: Maybe Boolean -> Maybe Boolean -> Maybe XsdString -> LoanParticipation

-- | Indicates whether the provision is applicable.
loanPartic_applicable :: LoanParticipation -> Maybe Boolean

-- | Specifies whether either 'Partial Cash Settlement of Assignable
--   Loans', 'Partial Cash Settlement of Consent Required Loans' or
--   'Partial Cash Settlement of Participations' is applicable. If this
--   element is specified and Assignable Loan is a Deliverable Obligation
--   Chracteristic, any Assignable Loan that is deliverable, but where a
--   non-receipt of Consent by the Physical Settlement Date has occurred,
--   the Loan can be cash settled rather than physically delivered. If this
--   element is specified and Consent Required Loan is a Deliverable
--   Obligation Characterisitc, any Consent Required Loan that is
--   deliverable, but where a non-receipt of Consent by the Physical
--   Settlement Date has occurred, the Loan can be cash settled rather than
--   physically delivered. If this element is specified and Direct Loan
--   Participation is a Deliverable Obligation Characterisitic, any
--   Participation that is deliverable, but where this participation has
--   not been effected (has not come into effect) by the Physical
--   Settlement Date, the participation can be cash settled rather than
--   physically delivered.
loanPartic_partialCashSettlement :: LoanParticipation -> Maybe Boolean

-- | If Direct Loan Participation is specified as a deliverable obligation
--   characteristic, this specifies any requirements for the Qualifying
--   Participation Seller. The requirements may be listed free-form. ISDA
--   2003 Term: Qualifying Participation Seller
loanPartic_qualifyingParticipationSeller :: LoanParticipation -> Maybe XsdString
data MatrixSource
MatrixSource :: Scheme -> MatrixSourceAttributes -> MatrixSource
data MatrixSourceAttributes
MatrixSourceAttributes :: Maybe AnyURI -> MatrixSourceAttributes
matrixSourceAttrib_settledEntityMatrixSourceScheme :: MatrixSourceAttributes -> Maybe AnyURI
data MultipleValuationDates
MultipleValuationDates :: Maybe NonNegativeInteger -> Maybe PositiveInteger -> Maybe PositiveInteger -> MultipleValuationDates

-- | A number of business days. Its precise meaning is dependant on the
--   context in which this element is used. ISDA 2003 Term: Business Day
multiValDates_businessDays :: MultipleValuationDates -> Maybe NonNegativeInteger

-- | The number of business days between successive valuation dates when
--   multiple valuation dates are applicable for cash settlement. ISDA 2003
--   Term: Business Days thereafter
multiValDates_businessDaysThereafter :: MultipleValuationDates -> Maybe PositiveInteger

-- | Where multiple valuation dates are specified as being applicable for
--   cash settlement, this element specifies (a) the number of applicable
--   valuation dates, and (b) the number of business days after
--   satisfaction of all conditions to settlement when the first such
--   valuation date occurs, and (c) the number of business days thereafter
--   of each successive valuation date. ISDA 2003 Term: Multiple Valuation
--   Dates
multiValDates_numberValuationDates :: MultipleValuationDates -> Maybe PositiveInteger
data NotDomesticCurrency
NotDomesticCurrency :: Maybe Boolean -> Maybe Currency -> NotDomesticCurrency

-- | Indicates whether the not domestic currency provision is applicable.
notDomestCurren_applicable :: NotDomesticCurrency -> Maybe Boolean

-- | An explicit specification of the domestic currency.
notDomestCurren_currency :: NotDomesticCurrency -> Maybe Currency
data Obligations
Obligations :: Maybe ObligationCategoryEnum -> Maybe Boolean -> Maybe SpecifiedCurrency -> Maybe Boolean -> Maybe NotDomesticCurrency -> Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> (Maybe (OneOf3 Boolean Boolean Boolean)) -> Maybe Boolean -> Maybe XsdString -> Maybe XsdString -> Maybe Lien -> Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> Obligations

-- | Used in both obligations and deliverable obligations to represent a
--   class or type of securities which apply. ISDA 2003 Term: Obligation
--   Category/Deliverable Obligation Category
obligations_category :: Obligations -> Maybe ObligationCategoryEnum

-- | An obligation and deliverable obligation characteristic. An obligation
--   that ranks at least equal with the most senior Reference Obligation in
--   priority of payment or, if no Reference Obligation is specified in the
--   related Confirmation, the obligations of the Reference Entity that are
--   senior. ISDA 2003 Term: Not Subordinated
obligations_notSubordinated :: Obligations -> Maybe Boolean

-- | An obligation and deliverable obligation characteristic. The currency
--   or currencies in which an obligation or deliverable obligation must be
--   payable. ISDA 2003 Term: Specified Currency
obligations_specifiedCurrency :: Obligations -> Maybe SpecifiedCurrency

-- | An obligation and deliverable obligation characteristic. Any
--   obligation that is not primarily (majority) owed to a Sovereign or
--   Supranational Organization. ISDA 2003 Term: Not Sovereign Lender
obligations_notSovereignLender :: Obligations -> Maybe Boolean

-- | An obligation and deliverable obligation characteristic. Any
--   obligation that is payable in any currency other than the domestic
--   currency. Domestic currency is either the currency so specified or, if
--   no currency is specified, the currency of (a) the reference entity, if
--   the reference entity is a sovereign, or (b) the jurisdiction in which
--   the relevant reference entity is organised, if the reference entity is
--   not a sovereign. ISDA 2003 Term: Not Domestic Currency
obligations_notDomesticCurrency :: Obligations -> Maybe NotDomesticCurrency

-- | An obligation and deliverable obligation characteristic. If the
--   reference entity is a Sovereign, this means any obligation that is not
--   subject to the laws of the reference entity. If the reference entity
--   is not a sovereign, this means any obligation that is not subject to
--   the laws of the jurisdiction of the reference entity. ISDA 2003 Term:
--   Not Domestic Law
obligations_notDomesticLaw :: Obligations -> Maybe Boolean

-- | An obligation and deliverable obligation characteristic. Indicates
--   whether or not the obligation is quoted, listed or ordinarily
--   purchased and sold on an exchange. ISDA 2003 Term: Listed
obligations_listed :: Obligations -> Maybe Boolean

-- | An obligation and deliverable obligation characteristic. Any
--   obligation other than an obligation that was intended to be offered
--   for sale primarily in the domestic market of the relevant Reference
--   Entity. This specifies that the obligation must be an internationally
--   recognized bond. ISDA 2003 Term: Not Domestic Issuance
obligations_notDomesticIssuance :: Obligations -> Maybe Boolean

-- | Choice between:
--   
--   <ol>
--   <li>An obligation and deliverable obligation characteristic. Defined
--   in the ISDA published additional provisions for U.S. Municipal as
--   Reference Entity. ISDA 2003 Term: Full Faith and Credit Obligation
--   Liability</li>
--   <li>An obligation and deliverable obligation characteristic. Defined
--   in the ISDA published additional provisions for U.S. Municipal as
--   Reference Entity. ISDA 2003 Term: General Fund Obligation
--   Liability</li>
--   <li>An obligation and deliverable obligation characteristic. Defined
--   in the ISDA published additional provisions for U.S. Municipal as
--   Reference Entity. ISDA 2003 Term: Revenue Obligation Liability</li>
--   </ol>
obligations_choice8 :: Obligations -> (Maybe (OneOf3 Boolean Boolean Boolean))

-- | NOTE: Only allowed as an obligation charcteristic under ISDA Credit
--   1999. In essence Not Contingent means the repayment of principal
--   cannot be dependant on a formula/index, i.e. to prevent the risk of
--   being delivered an instrument that may never pay any element of
--   principal, and to ensure that the obligation is interest bearing (on a
--   regular schedule). ISDA 2003 Term: Not Contingent
obligations_notContingent :: Obligations -> Maybe Boolean

-- | A free format string to specify any excluded obligations or
--   deliverable obligations, as the case may be, of the reference entity
--   or excluded types of obligations or deliverable obligations. ISDA 2003
--   Term: Excluded Obligations/Excluded Deliverable Obligations
obligations_excluded :: Obligations -> Maybe XsdString

-- | This element is used to specify any other obligations of a reference
--   entity in both obligations and deliverable obligations. The
--   obligations can be specified free-form. ISDA 2003 Term: Other
--   Obligations of a Reference Entity
obligations_othReferenceEntityObligations :: Obligations -> Maybe XsdString

-- | Applies to Loan CDS, to indicate what lien level is appropriate for a
--   deliverable obligation. Applies to European Loan CDS, to indicate the
--   Ranking of the obligation. Example: a 2nd lien Loan CDS would imply
--   that the deliverable obligations are 1st or 2nd lien loans.
obligations_designatedPriority :: Obligations -> Maybe Lien

-- | An obligation and deliverable obligation characteristic. Defined in
--   the ISDA published Standard Terms Supplement for use with CDS
--   Transactions on Leveraged Loans. ISDA 2003 Term: Cash Settlement Only.
obligations_cashSettlementOnly :: Obligations -> Maybe Boolean

-- | An obligation and deliverable obligation characteristic. Defined in
--   the ISDA published Standard Terms Supplement for use with CDS
--   Transactions on Leveraged Loans. ISDA 2003 Term: Delivery of
--   Commitments.
obligations_deliveryOfCommitments :: Obligations -> Maybe Boolean

-- | An obligation and deliverable obligation characteristic. Defined in
--   the ISDA published Standard Terms Supplement for use with CDS
--   Transactions on Leveraged Loans. ISDA 2003 Term: Continuity.
obligations_continuity :: Obligations -> Maybe Boolean
data PCDeliverableObligationCharac
PCDeliverableObligationCharac :: Maybe Boolean -> Maybe Boolean -> PCDeliverableObligationCharac

-- | Indicates whether the provision is applicable.
pCDelivObligCharac_applicable :: PCDeliverableObligationCharac -> Maybe Boolean

-- | Specifies whether either 'Partial Cash Settlement of Assignable
--   Loans', 'Partial Cash Settlement of Consent Required Loans' or
--   'Partial Cash Settlement of Participations' is applicable. If this
--   element is specified and Assignable Loan is a Deliverable Obligation
--   Chracteristic, any Assignable Loan that is deliverable, but where a
--   non-receipt of Consent by the Physical Settlement Date has occurred,
--   the Loan can be cash settled rather than physically delivered. If this
--   element is specified and Consent Required Loan is a Deliverable
--   Obligation Characterisitc, any Consent Required Loan that is
--   deliverable, but where a non-receipt of Consent by the Physical
--   Settlement Date has occurred, the Loan can be cash settled rather than
--   physically delivered. If this element is specified and Direct Loan
--   Participation is a Deliverable Obligation Characterisitic, any
--   Participation that is deliverable, but where this participation has
--   not been effected (has not come into effect) by the Physical
--   Settlement Date, the participation can be cash settled rather than
--   physically delivered.
pCDelivObligCharac_partialCashSettlement :: PCDeliverableObligationCharac -> Maybe Boolean
data PeriodicPayment
PeriodicPayment :: Maybe ID -> Maybe Period -> Maybe Date -> Maybe Date -> Maybe Date -> Maybe RollConventionEnum -> OneOf2 Money FixedAmountCalculation -> [AdjustedPaymentDates] -> PeriodicPayment
periodPayment_ID :: PeriodicPayment -> Maybe ID

-- | The time interval between regular fixed rate payer payment dates.
periodPayment_paymentFrequency :: PeriodicPayment -> Maybe Period

-- | The start date of the initial calculation period if such date is not
--   equal to the trade’s effective date. It must only be specified if it
--   is not equal to the effective date. The applicable business day
--   convention and business day are those specified in the dateAdjustments
--   element within the generalTerms component (or in a transaction
--   supplement FpML representation defined within the referenced general
--   terms confirmation agreement).
periodPayment_firstPeriodStartDate :: PeriodicPayment -> Maybe Date

-- | The first unadjusted fixed rate payer payment date. The applicable
--   business day convention and business day are those specified in the
--   dateAdjustments element within the generalTerms component (or in a
--   transaction supplement FpML representation defined within the
--   referenced general terms confirmation agreement). ISDA 2003 Term:
--   Fixed Rate Payer Payment Date
periodPayment_firstPaymentDate :: PeriodicPayment -> Maybe Date

-- | The last regular unadjusted fixed rate payer payment date. The
--   applicable business day convention and business day are those
--   specified in the dateAdjustments element within the generalTerms
--   component (or in a transaction supplement FpML representation defined
--   within the referenced general terms confirmation agreement). This
--   element should only be included if there is a final payment stub, i.e.
--   where the last regular unadjusted fixed rate payer payment date is not
--   equal to the scheduled termination date. ISDA 2003 Term: Fixed Rate
--   Payer Payment Date
periodPayment_lastRegularPaymentDate :: PeriodicPayment -> Maybe Date

-- | Used in conjunction with the effectiveDate, scheduledTerminationDate,
--   firstPaymentDate, lastRegularPaymentDate and paymentFrequency to
--   determine the regular fixed rate payer payment dates.
periodPayment_rollConvention :: PeriodicPayment -> Maybe RollConventionEnum

-- | Choice between:
--   
--   <ol>
--   <li>A fixed payment amount. ISDA 2003 Term: Fixed Amount</li>
--   <li>This element contains all the terms relevant to calculating a
--   fixed amount where the fixed amount is calculated by reference to a
--   per annum fixed rate. There is no corresponding ISDA 2003 Term. The
--   equivalent is Sec 5.1 <a>Calculation of Fixed Amount</a> but this in
--   itself is not a defined Term.</li>
--   </ol>
periodPayment_choice5 :: PeriodicPayment -> OneOf2 Money FixedAmountCalculation

-- | An optional cashflow-like structure allowing the equivalent
--   representation of the periodic fixed payments in terms of a series of
--   adjusted payment dates and amounts. This is intended to support
--   application integration within an organisation and is not intended for
--   use in inter-firm communication or confirmations. ISDA 2003 Term:
--   Fixed Rate Payer Payment Date
periodPayment_adjustedPaymentDates :: PeriodicPayment -> [AdjustedPaymentDates]
data PhysicalSettlementPeriod
PhysicalSettlementPeriod :: (Maybe (OneOf3 Boolean NonNegativeInteger NonNegativeInteger)) -> PhysicalSettlementPeriod

-- | Choice between:
--   
--   <ol>
--   <li>An explicit indication that a number of business days are not
--   specified and therefore ISDA fallback provisions should apply.</li>
--   <li>A number of business days. Its precise meaning is dependant on the
--   context in which this element is used. ISDA 2003 Term: Business
--   Day</li>
--   <li>A maximum number of business days. Its precise meaning is
--   dependant on the context in which this element is used. Intended to be
--   used to limit a particular ISDA fallback provision.</li>
--   </ol>
physicSettlPeriod_choice0 :: PhysicalSettlementPeriod -> (Maybe (OneOf3 Boolean NonNegativeInteger NonNegativeInteger))
data PhysicalSettlementTerms
PhysicalSettlementTerms :: Maybe ID -> Maybe Currency -> Maybe PhysicalSettlementPeriod -> Maybe DeliverableObligations -> Maybe Boolean -> Maybe Boolean -> PhysicalSettlementTerms
physicSettlTerms_ID :: PhysicalSettlementTerms -> Maybe ID

-- | ISDA 2003 Term: Settlement Currency
physicSettlTerms_settlementCurrency :: PhysicalSettlementTerms -> Maybe Currency

-- | The number of business days used in the determination of the physical
--   settlement date. The physical settlement date is this number of
--   business days after all applicable conditions to settlement are
--   satisfied. If a number of business days is not specified fallback
--   provisions apply for determining the number of business days. If
--   Section 8.5<i>8.6 of the 1999</i>2003 ISDA Definitions are to apply
--   the businessDaysNotSpecified element should be included. If a
--   specified number of business days are to apply these should be
--   specified in the businessDays element. If Section 8.5<i>8.6 of the
--   1999</i>2003 ISDA Definitions are to apply but capped at a maximum
--   number of business days then the maximum number should be specified in
--   the maximumBusinessDays element. ISDA 2003 Term: Physical Settlement
--   Period
physicSettlTerms_physicalSettlementPeriod :: PhysicalSettlementTerms -> Maybe PhysicalSettlementPeriod

-- | This element contains all the ISDA terms relevant to defining the
--   deliverable obligations.
physicSettlTerms_deliverableObligations :: PhysicalSettlementTerms -> Maybe DeliverableObligations

-- | If this element is specified and set to <tt>true</tt>, indicates that
--   physical settlement must take place through the use of an escrow
--   agent. (For Canadian counterparties this is always <a>Not
--   Applicable</a>. ISDA 2003 Term: Escrow.
physicSettlTerms_escrow :: PhysicalSettlementTerms -> Maybe Boolean

-- | If this element is specified and set to <tt>true</tt>, for a
--   transaction documented under the 2003 ISDA Credit Derivatives
--   Definitions, has the effect of incorporating the language set forth
--   below into the confirmation. The section references are to the 2003
--   ISDA Credit Derivatives Definitions. Notwithstanding Section 1.7 or
--   any provisions of Sections 9.9 or 9.10 to the contrary, but without
--   prejudice to Section 9.3 and (where applicable) Sections 9.4, 9.5 and
--   9.6, if the Termination Date has not occurred on or prior to the date
--   that is 60 Business Days following the Physical Settlement Date, such
--   60th Business Day shall be deemed to be the Termination Date with
--   respect to this Transaction except in relation to any portion of the
--   Transaction (an <a>Affected Portion</a>) in respect of which: (1) a
--   valid notice of Buy-in Price has been delivered that is effective
--   fewer than three Business Days prior to such 60th Business Day, in
--   which case the Termination Date for that Affected Portion shall be the
--   third Business Day following the date on which such notice is
--   effective; or (2) Buyer has purchased but not Delivered Deliverable
--   Obligations validly specified by Seller pursuant to Section 9.10(b),
--   in which case the Termination Date for that Affected Portion shall be
--   the tenth Business Day following the date on which Seller validly
--   specified such Deliverable Obligations to Buyer.
physicSettlTerms_sixtyBusinessDaySettlementCap :: PhysicalSettlementTerms -> Maybe Boolean
data ProtectionTerms
ProtectionTerms :: Maybe ID -> Money -> Maybe CreditEvents -> Maybe Obligations -> Maybe FloatingAmountEvents -> ProtectionTerms
protecTerms_ID :: ProtectionTerms -> Maybe ID

-- | The notional amount of protection coverage. ISDA 2003 Term: Floating
--   Rate Payer Calculation Amount
protecTerms_calculationAmount :: ProtectionTerms -> Money

-- | This element contains all the ISDA terms relating to credit events.
protecTerms_creditEvents :: ProtectionTerms -> Maybe CreditEvents

-- | The underlying obligations of the reference entity on which you are
--   buying or selling protection. The credit events Failure to Pay,
--   Obligation Acceleration, Obligation Default, Restructuring,
--   Repudiation/Moratorium are defined with respect to these obligations.
--   ISDA 2003 Term:
protecTerms_obligations :: ProtectionTerms -> Maybe Obligations

-- | This element contains the ISDA terms relating to the floating rate
--   payment events and the implied additional fixed payments, applicable
--   to the credit derivatives transactions on mortgage-backed securities
--   with pay-as-you-go or physical settlement.
protecTerms_floatingAmountEvents :: ProtectionTerms -> Maybe FloatingAmountEvents

-- | Reference to protectionTerms component.
data ProtectionTermsReference
ProtectionTermsReference :: IDREF -> ProtectionTermsReference
protecTermsRef_href :: ProtectionTermsReference -> IDREF
data ReferenceInformation
ReferenceInformation :: LegalEntity -> (Maybe (OneOf3 [ReferenceObligation] Boolean Boolean)) -> Maybe Boolean -> Maybe Decimal -> Maybe Boolean -> Maybe Boolean -> ReferenceInformation

-- | The corporate or sovereign entity on which you are buying or selling
--   protection and any successor that assumes all or substantially all of
--   its contractual and other obligations. It is vital to use the correct
--   legal name of the entity and to be careful not to choose a subsidiary
--   if you really want to trade protection on a parent company. Please
--   note, Reference Entities cannot be senior or subordinated. It is the
--   obligations of the Reference Entities that can be senior or
--   subordinated. ISDA 2003 Term: Reference Entity
refInfo_referenceEntity :: ReferenceInformation -> LegalEntity

-- | Choice between:
--   
--   <ol>
--   <li>The Reference Obligation is a financial instrument that is either
--   issued or guaranteed by the reference entity. It serves to clarify the
--   precise reference entity protection is being offered upon, and its
--   legal position with regard to other related firms
--   (parents/subsidiaries). Furthermore the Reference Obligation is ALWAYS
--   deliverable and establishes the Pari Passu ranking (as the deliverable
--   bonds must rank equal to the reference obligation). ISDA 2003 Term:
--   Reference Obligation</li>
--   <li>Used to indicate that there is no Reference Obligation associated
--   with this Credit Default Swap and that there will never be one.</li>
--   <li>Used to indicate that the Reference obligation associated with the
--   Credit Default Swap is currently not known. This is not valid for
--   Legal Confirmation purposes, but is valid for earlier stages in the
--   trade life cycle (e.g. Broker Confirmation).</li>
--   </ol>
refInfo_choice1 :: ReferenceInformation -> (Maybe (OneOf3 [ReferenceObligation] Boolean Boolean))

-- | Indicates whether an obligation of the Reference Entity, guaranteed by
--   the Reference Entity on behalf of a non-Affiliate, is to be considered
--   an Obligation for the purpose of the transaction. It will be
--   considered an obligation if allGuarantees is applicable (true) and not
--   if allGuarantees is inapplicable (false). ISDA 2003 Term: All
--   Guarantees
refInfo_allGuarantees :: ReferenceInformation -> Maybe Boolean

-- | Used to determine (a) for physically settled trades, the Physical
--   Settlement Amount, which equals the Floating Rate Payer Calculation
--   Amount times the Reference Price and (b) for cash settled trades, the
--   Cash Settlement Amount, which equals the greater of (i) the difference
--   between the Reference Price and the Final Price and (ii) zero. ISDA
--   2003 Term: Reference Price
refInfo_referencePrice :: ReferenceInformation -> Maybe Decimal

-- | Applicable to the transactions on mortgage-backed security, which can
--   make use of a reference policy. Presence of the element with value set
--   to <tt>true</tt> indicates that the reference policy is applicable;
--   absence implies that it is not.
refInfo_referencePolicy :: ReferenceInformation -> Maybe Boolean

-- | With respect to any day, the list of Syndicated Secured Obligations of
--   the Designated Priority of the Reference Entity published by Markit
--   Group Limited or any successor thereto appointed by the Specified
--   Dealers (the <a>Secured List Publisher</a>) on or most recently before
--   such day, which list is currently available at
--   [http:<i></i>www.markit.com]. ISDA 2003 Term: Relevant Secured List.
refInfo_securedList :: ReferenceInformation -> Maybe Boolean
data ReferenceObligation
ReferenceObligation :: (Maybe (OneOf4 Bond ConvertibleBond Mortgage Loan)) -> (Maybe (OneOf2 LegalEntity LegalEntityReference)) -> [OneOf2 LegalEntity LegalEntityReference] -> ReferenceObligation

-- | Choice between:
--   
--   <ol>
--   <li>Identifies the underlying asset when it is a series or a class of
--   bonds.</li>
--   <li>Identifies the underlying asset when it is a convertible
--   bond.</li>
--   <li>Identifies a mortgage backed security.</li>
--   <li>Identifies a simple underlying asset that is a loan.</li>
--   </ol>
refOblig_choice0 :: ReferenceObligation -> (Maybe (OneOf4 Bond ConvertibleBond Mortgage Loan))

-- | Choice between:
--   
--   <ol>
--   <li>The entity primarily responsible for repaying debt to a creditor
--   as a result of borrowing or issuing bonds. ISDA 2003 Term: Primary
--   Obligor</li>
--   <li>A pointer style reference to a reference entity defined elsewhere
--   in the document. Used when the reference entity is the primary
--   obligor.</li>
--   </ol>
refOblig_choice1 :: ReferenceObligation -> (Maybe (OneOf2 LegalEntity LegalEntityReference))

-- | Choice between:
--   
--   <ol>
--   <li>The party that guarantees by way of a contractual arrangement to
--   pay the debts of an obligor if the obligor is unable to make the
--   required payments itself. ISDA 2003 Term: Guarantor</li>
--   <li>A pointer style reference to a reference entity defined elsewhere
--   in the document. Used when the reference entity is the guarantor.</li>
--   </ol>
refOblig_choice2 :: ReferenceObligation -> [OneOf2 LegalEntity LegalEntityReference]
data ReferencePair
ReferencePair :: Maybe LegalEntity -> (Maybe (OneOf2 ReferenceObligation Boolean)) -> Maybe EntityType -> ReferencePair

-- | The corporate or sovereign entity on which you are buying or selling
--   protection and any successor that assumes all or substantially all of
--   its contractual and other obligations. It is vital to use the correct
--   legal name of the entity and to be careful not to choose a subsidiary
--   if you really want to trade protection on a parent company. Please
--   note, Reference Entities cannot be senior or subordinated. It is the
--   obligations of the Reference Entities that can be senior or
--   subordinated. ISDA 2003 Term: Reference Entity
refPair_referenceEntity :: ReferencePair -> Maybe LegalEntity

-- | Choice between:
--   
--   <ol>
--   <li>The Reference Obligation is a financial instrument that is either
--   issued or guaranteed by the reference entity. It serves to clarify the
--   precise reference entity protection is being offered upon, and its
--   legal position with regard to other related firms
--   (parents/subsidiaries). Furthermore the Reference Obligation is ALWAYS
--   deliverable and establishes the Pari Passu ranking (as the deliverable
--   bonds must rank equal to the reference obligation). ISDA 2003 Term:
--   Reference Obligation</li>
--   <li>Used to indicate that there is no Reference Obligation associated
--   with this Credit Default Swap and that there will never be one.</li>
--   </ol>
refPair_choice1 :: ReferencePair -> (Maybe (OneOf2 ReferenceObligation Boolean))

-- | Defines the reference entity types corresponding to a list of types in
--   the ISDA First to Default documentation.
refPair_entityType :: ReferencePair -> Maybe EntityType

-- | This type contains all the reference pool items to define the
--   reference entity and reference obligation(s) in the basket.
data ReferencePool
ReferencePool :: [ReferencePoolItem] -> ReferencePool
referencePool_item :: ReferencePool -> [ReferencePoolItem]

-- | This type contains all the constituent weight and reference
--   information.
data ReferencePoolItem
ReferencePoolItem :: Maybe ConstituentWeight -> Maybe ReferencePair -> Maybe ProtectionTermsReference -> Maybe SettlementTermsReference -> ReferencePoolItem

-- | Describes the weight of each of the constituents within the basket. If
--   not provided, it is assumed to be equal weighted.
refPoolItem_constituentWeight :: ReferencePoolItem -> Maybe ConstituentWeight
refPoolItem_referencePair :: ReferencePoolItem -> Maybe ReferencePair

-- | Reference to the documentation terms applicable to this item.
refPoolItem_protectionTermsReference :: ReferencePoolItem -> Maybe ProtectionTermsReference

-- | Reference to the settlement terms applicable to this item.
refPoolItem_settlementTermsReference :: ReferencePoolItem -> Maybe SettlementTermsReference
data SettledEntityMatrix
SettledEntityMatrix :: Maybe MatrixSource -> Maybe Date -> SettledEntityMatrix

-- | Relevant settled entity matrix source.
settledEntityMatrix_matrixSource :: SettledEntityMatrix -> Maybe MatrixSource

-- | Specifies the publication date of the applicable version of the
--   matrix. When this element is omitted, the Standard Terms Supplement
--   defines rules for which version of the matrix is applicable.
settledEntityMatrix_publicationDate :: SettledEntityMatrix -> Maybe Date
data SettlementTerms
SettlementTerms :: Maybe ID -> Maybe Currency -> SettlementTerms
settlTerms_ID :: SettlementTerms -> Maybe ID

-- | ISDA 2003 Term: Settlement Currency
settlTerms_settlementCurrency :: SettlementTerms -> Maybe Currency

-- | Reference to a settlement terms derived construct (cashSettlementTerms
--   or physicalSettlementTerms).
data SettlementTermsReference
SettlementTermsReference :: IDREF -> SettlementTermsReference
settlTermsRef_href :: SettlementTermsReference -> IDREF
data SinglePayment
SinglePayment :: Maybe ID -> Maybe Date -> Maybe Date -> Money -> SinglePayment
singlePayment_ID :: SinglePayment -> Maybe ID

-- | A fixed amount payment date that shall be subject to adjustment in
--   accordance with the applicable business day convention if it would
--   otherwise fall on a day that is not a business day. The applicable
--   business day convention and business day are those specified in the
--   dateAdjustments element within the generalTerms component. ISDA 2003
--   Term: Fixed Rate Payer Payment Date
singlePayment_adjustablePaymentDate :: SinglePayment -> Maybe Date

-- | The adjusted payment date. This date should already be adjusted for
--   any applicable business day convention. This component is not intended
--   for use in trade confirmation but may be specified to allow the fee
--   structure to also serve as a cashflow type component.
singlePayment_adjustedPaymentDate :: SinglePayment -> Maybe Date

-- | A fixed payment amount. ISDA 2003 Term: Fixed Amount
singlePayment_fixedAmount :: SinglePayment -> Money
data SingleValuationDate
SingleValuationDate :: Maybe NonNegativeInteger -> SingleValuationDate

-- | A number of business days. Its precise meaning is dependant on the
--   context in which this element is used. ISDA 2003 Term: Business Day
singleValDate_businessDays :: SingleValuationDate -> Maybe NonNegativeInteger
data SpecifiedCurrency
SpecifiedCurrency :: Maybe Boolean -> [Currency] -> SpecifiedCurrency

-- | Indicates whether the specified currency provision is applicable.
specifCurren_applicable :: SpecifiedCurrency -> Maybe Boolean

-- | The currency in which an amount is denominated.
specifCurren_currency :: SpecifiedCurrency -> [Currency]

-- | This type represents a CDS Tranche.
data Tranche
Tranche :: Maybe Decimal -> Maybe Decimal -> Maybe Boolean -> Tranche

-- | Lower bound percentage of the loss that the Tranche can endure,
--   expressed as a decimal. An attachment point of 5% would be represented
--   as 0.05. The difference between Attachment and Exhaustion points is
--   call the width of the Tranche. A schema facet to constraint the value
--   between 0 to 1 will be introduced in FpML 4.3.
tranche_attachmentPoint :: Tranche -> Maybe Decimal

-- | Upper bound percentage of the loss that the Tranche can endure,
--   expressed as a decimal. An exhaustion point of 5% would be represented
--   as 0.05. The difference between Attachment and Exhaustion points is
--   call the width of the Tranche. A schema facet to constraint the value
--   between 0 to 1 will be introduced in FpML 4.3.
tranche_exhaustionPoint :: Tranche -> Maybe Decimal

-- | Outstanding Swap Notional Amount is defined at any time on any day, as
--   the greater of: (a) Zero; If Incurred Recovery Amount Applicable: (b)
--   The Original Swap Notional Amount minus the sum of all Incurred Loss
--   Amounts and all Incurred Recovery Amounts (if any) determined under
--   this Confirmation at or prior to such time.Incurred Recovery Amount
--   not populated: (b) The Original Swap Notional Amount minus the sum of
--   all Incurred Loss Amounts determined under this Confirmation at or
--   prior to such time.
tranche_incurredRecoveryApplicable :: Tranche -> Maybe Boolean
data ValuationDate
ValuationDate :: (Maybe (OneOf2 SingleValuationDate MultipleValuationDates)) -> ValuationDate

-- | Choice between:
--   
--   <ol>
--   <li>Where single valuation date is specified as being applicable for
--   cash settlement, this element specifies the number of business days
--   after satisfaction of all conditions to settlement when such valuation
--   date occurs. ISDA 2003 Term: Single Valuation Date</li>
--   <li>Where multiple valuation dates are specified as being applicable
--   for cash settlement, this element specifies (a) the number of
--   applicable valuation dates, and (b) the number of business days after
--   satisfaction of all conditions to settlement when the first such
--   valuation date occurs, and (c) the number of business days thereafter
--   of each successive valuation date. ISDA 2003 Term: Multiple Valuation
--   Dates</li>
--   </ol>
valDate_choice0 :: ValuationDate -> (Maybe (OneOf2 SingleValuationDate MultipleValuationDates))

-- | A limited version of the CDS type used as an underlyer to CDS options
--   in Transparency view, to avoid requiring product type etc.
data LimitedCreditDefaultSwap
LimitedCreditDefaultSwap :: GeneralTerms -> FeeLeg -> [ProtectionTerms] -> LimitedCreditDefaultSwap

-- | This element contains all the data that appears in the section
--   entitled <a>1. General Terms</a> in the 2003 ISDA Credit Derivatives
--   Confirmation.
limitedCreditDefaultSwap_generalTerms :: LimitedCreditDefaultSwap -> GeneralTerms

-- | This element contains all the terms relevant to defining the fixed
--   amounts/payments per the applicable ISDA definitions.
limitedCreditDefaultSwap_feeLeg :: LimitedCreditDefaultSwap -> FeeLeg

-- | This element contains all the terms relevant to defining the
--   applicable floating rate payer calculation amount, credit events and
--   associated conditions to settlement, and reference obligations.
limitedCreditDefaultSwap_protectionTerms :: LimitedCreditDefaultSwap -> [ProtectionTerms]

-- | In a credit default swap one party (the protection seller) agrees to
--   compensate another party (the protection buyer) if a specified company
--   or Sovereign (the reference entity) experiences a credit event,
--   indicating it is or may be unable to service its debts. The protection
--   seller is typically paid a fee and/or premium, expressed as an
--   annualized percent of the notional in basis points, regularly over the
--   life of the transaction or otherwise as agreed by the parties.
elementCreditDefaultSwap :: XMLParser CreditDefaultSwap
elementToXMLCreditDefaultSwap :: CreditDefaultSwap -> [Content ()]

-- | An option on a credit default swap.
elementCreditDefaultSwapOption :: XMLParser CreditDefaultSwapOption
elementToXMLCreditDefaultSwapOption :: CreditDefaultSwapOption -> [Content ()]
instance Eq AdditionalFixedPayments
instance Show AdditionalFixedPayments
instance Eq AdditionalTermAttributes
instance Show AdditionalTermAttributes
instance Eq EntityTypeAttributes
instance Show EntityTypeAttributes
instance Eq FixedRateAttributes
instance Show FixedRateAttributes
instance Eq FixedRateReference
instance Show FixedRateReference
instance Eq FloatingAmountProvisions
instance Show FloatingAmountProvisions
instance Eq IndexAnnexSourceAttributes
instance Show IndexAnnexSourceAttributes
instance Eq IndexIdAttributes
instance Show IndexIdAttributes
instance Eq IndexNameAttributes
instance Show IndexNameAttributes
instance Eq LoanParticipation
instance Show LoanParticipation
instance Eq MatrixSourceAttributes
instance Show MatrixSourceAttributes
instance Eq MultipleValuationDates
instance Show MultipleValuationDates
instance Eq PCDeliverableObligationCharac
instance Show PCDeliverableObligationCharac
instance Eq PhysicalSettlementPeriod
instance Show PhysicalSettlementPeriod
instance Eq ProtectionTermsReference
instance Show ProtectionTermsReference
instance Eq SettlementTermsReference
instance Show SettlementTermsReference
instance Eq SingleValuationDate
instance Show SingleValuationDate
instance Eq Tranche
instance Show Tranche
instance Eq LimitedCreditDefaultSwap
instance Show LimitedCreditDefaultSwap
instance Eq ValuationDate
instance Show ValuationDate
instance Eq SpecifiedCurrency
instance Show SpecifiedCurrency
instance Eq SinglePayment
instance Show SinglePayment
instance Eq SettlementTerms
instance Show SettlementTerms
instance Eq SettledEntityMatrix
instance Show SettledEntityMatrix
instance Eq ReferencePoolItem
instance Show ReferencePoolItem
instance Eq ReferencePool
instance Show ReferencePool
instance Eq ReferencePair
instance Show ReferencePair
instance Eq ReferenceObligation
instance Show ReferenceObligation
instance Eq ReferenceInformation
instance Show ReferenceInformation
instance Eq ProtectionTerms
instance Show ProtectionTerms
instance Eq PhysicalSettlementTerms
instance Show PhysicalSettlementTerms
instance Eq PeriodicPayment
instance Show PeriodicPayment
instance Eq Obligations
instance Show Obligations
instance Eq NotDomesticCurrency
instance Show NotDomesticCurrency
instance Eq MatrixSource
instance Show MatrixSource
instance Eq InterestShortFall
instance Show InterestShortFall
instance Eq InitialPayment
instance Show InitialPayment
instance Eq IndexReferenceInformation
instance Show IndexReferenceInformation
instance Eq IndexName
instance Show IndexName
instance Eq IndexId
instance Show IndexId
instance Eq IndexAnnexSource
instance Show IndexAnnexSource
instance Eq GeneralTerms
instance Show GeneralTerms
instance Eq FloatingAmountEvents
instance Show FloatingAmountEvents
instance Eq FixedRate
instance Show FixedRate
instance Eq FixedAmountCalculation
instance Show FixedAmountCalculation
instance Eq FeeLeg
instance Show FeeLeg
instance Eq EntityType
instance Show EntityType
instance Eq DeliverableObligations
instance Show DeliverableObligations
instance Eq CreditOptionStrike
instance Show CreditOptionStrike
instance Eq CreditDefaultSwapOption
instance Show CreditDefaultSwapOption
instance Eq CreditDefaultSwap
instance Show CreditDefaultSwap
instance Eq CashSettlementTerms
instance Show CashSettlementTerms
instance Eq CalculationAmount
instance Show CalculationAmount
instance Eq BasketReferenceInformation
instance Show BasketReferenceInformation
instance Eq AdjustedPaymentDates
instance Show AdjustedPaymentDates
instance Eq AdditionalTerm
instance Show AdditionalTerm
instance SchemaType LimitedCreditDefaultSwap
instance SchemaType ValuationDate
instance SchemaType Tranche
instance SchemaType SpecifiedCurrency
instance SchemaType SingleValuationDate
instance Extension SinglePayment PaymentBase
instance SchemaType SinglePayment
instance Extension SettlementTermsReference Reference
instance SchemaType SettlementTermsReference
instance SchemaType SettlementTerms
instance SchemaType SettledEntityMatrix
instance SchemaType ReferencePoolItem
instance SchemaType ReferencePool
instance SchemaType ReferencePair
instance SchemaType ReferenceObligation
instance SchemaType ReferenceInformation
instance Extension ProtectionTermsReference Reference
instance SchemaType ProtectionTermsReference
instance SchemaType ProtectionTerms
instance Extension PhysicalSettlementTerms SettlementTerms
instance SchemaType PhysicalSettlementTerms
instance SchemaType PhysicalSettlementPeriod
instance Extension PeriodicPayment PaymentBase
instance SchemaType PeriodicPayment
instance SchemaType PCDeliverableObligationCharac
instance SchemaType Obligations
instance SchemaType NotDomesticCurrency
instance Extension MultipleValuationDates SingleValuationDate
instance SchemaType MultipleValuationDates
instance Extension MatrixSource Scheme
instance SchemaType MatrixSource
instance Extension LoanParticipation PCDeliverableObligationCharac
instance SchemaType LoanParticipation
instance SchemaType InterestShortFall
instance Extension InitialPayment PaymentBase
instance SchemaType InitialPayment
instance SchemaType IndexReferenceInformation
instance Extension IndexName Scheme
instance SchemaType IndexName
instance Extension IndexId Scheme
instance SchemaType IndexId
instance Extension IndexAnnexSource Scheme
instance SchemaType IndexAnnexSource
instance SchemaType GeneralTerms
instance SchemaType FloatingAmountProvisions
instance SchemaType FloatingAmountEvents
instance Extension FixedRateReference Reference
instance SchemaType FixedRateReference
instance Extension FixedRate Decimal
instance SchemaType FixedRate
instance SchemaType FixedAmountCalculation
instance Extension FeeLeg Leg
instance SchemaType FeeLeg
instance Extension EntityType Scheme
instance SchemaType EntityType
instance SchemaType DeliverableObligations
instance SchemaType CreditOptionStrike
instance Extension CreditDefaultSwapOption Product
instance Extension CreditDefaultSwapOption Option
instance Extension CreditDefaultSwapOption OptionBase
instance Extension CreditDefaultSwapOption OptionBaseExtended
instance SchemaType CreditDefaultSwapOption
instance Extension CreditDefaultSwap Product
instance SchemaType CreditDefaultSwap
instance Extension CashSettlementTerms SettlementTerms
instance SchemaType CashSettlementTerms
instance Extension CalculationAmount MoneyBase
instance Extension CalculationAmount Money
instance SchemaType CalculationAmount
instance SchemaType BasketReferenceInformation
instance SchemaType AdjustedPaymentDates
instance Extension AdditionalTerm Scheme
instance SchemaType AdditionalTerm
instance SchemaType AdditionalFixedPayments

module Data.FpML.V53.Com

-- | The acceptable tolerance in the delivered quantity of a physical
--   commodity product in terms of a number of units of that product.
data AbsoluteTolerance
AbsoluteTolerance :: Maybe Decimal -> Maybe Decimal -> Maybe QuantityUnit -> Maybe PartyReference -> AbsoluteTolerance

-- | The maxmium amount by which the quantity delivered can exceed the
--   agreed quantity.
absToler_positive :: AbsoluteTolerance -> Maybe Decimal

-- | The maximum amount by which the quantity delivered can be less than
--   the agreed quantity.
absToler_negative :: AbsoluteTolerance -> Maybe Decimal

-- | The unit in which the tolerance is specified.
absToler_unit :: AbsoluteTolerance -> Maybe QuantityUnit

-- | Indicates whether the tolerance is at the seller's or buyer's option.
absToler_optionOwnerPartyReference :: AbsoluteTolerance -> Maybe PartyReference

-- | A scheme defining where bullion is to be delivered for a Bullion
--   Transaction.
data BullionDeliveryLocation
BullionDeliveryLocation :: Scheme -> BullionDeliveryLocationAttributes -> BullionDeliveryLocation
data BullionDeliveryLocationAttributes
BullionDeliveryLocationAttributes :: Maybe AnyURI -> BullionDeliveryLocationAttributes
bullionDelivLocatAttrib_bullionDeliveryLocationScheme :: BullionDeliveryLocationAttributes -> Maybe AnyURI

-- | Physically settled leg of a physically settled Bullion Transaction.
data BullionPhysicalLeg
BullionPhysicalLeg :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe BullionTypeEnum -> Maybe BullionDeliveryLocation -> (Maybe (OneOf2 CommodityNotionalQuantity CommodityPhysicalQuantitySchedule)) -> UnitQuantity -> Maybe AdjustableOrRelativeDate -> BullionPhysicalLeg
bullionPhysicLeg_ID :: BullionPhysicalLeg -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
bullionPhysicLeg_payerPartyReference :: BullionPhysicalLeg -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
bullionPhysicLeg_payerAccountReference :: BullionPhysicalLeg -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
bullionPhysicLeg_receiverPartyReference :: BullionPhysicalLeg -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
bullionPhysicLeg_receiverAccountReference :: BullionPhysicalLeg -> Maybe AccountReference

-- | The type of Bullion underlying a Bullion Transaction.
bullionPhysicLeg_bullionType :: BullionPhysicalLeg -> Maybe BullionTypeEnum

-- | The physical delivery location for the transaction.
bullionPhysicLeg_deliveryLocation :: BullionPhysicalLeg -> Maybe BullionDeliveryLocation

-- | Choice between:
--   
--   <ol>
--   <li>The Quantity per Delivery Period.</li>
--   <li>Allows the documentation of a shaped quantity trade where the
--   quantity changes over the life of the transaction.</li>
--   </ol>
bullionPhysicLeg_choice6 :: BullionPhysicalLeg -> (Maybe (OneOf2 CommodityNotionalQuantity CommodityPhysicalQuantitySchedule))

-- | The Total Quantity of the commodity to be delivered.
bullionPhysicLeg_totalPhysicalQuantity :: BullionPhysicalLeg -> UnitQuantity

-- | Date on which the bullion will settle.
bullionPhysicLeg_settlementDate :: BullionPhysicalLeg -> Maybe AdjustableOrRelativeDate

-- | A pointer style reference to single-day-duration calculation periods
--   defined elsewhere - note that this schedule consists of a
--   parameterised schedule in a calculationPeriodsSchedule container.
data CalculationPeriodsDatesReference
CalculationPeriodsDatesReference :: IDREF -> CalculationPeriodsDatesReference
calcPeriodsDatesRef_href :: CalculationPeriodsDatesReference -> IDREF

-- | A pointer style reference to a calculation periods schedule defined
--   elsewhere - note that this schedule consists of a series of actual
--   dates in a calculationPeriods container.
data CalculationPeriodsReference
CalculationPeriodsReference :: IDREF -> CalculationPeriodsReference
calcPeriodsRef_href :: CalculationPeriodsReference -> IDREF

-- | A pointer style reference to a calculation periods schedule defined
--   elsewhere - note that this schedule consists of a parameterised
--   schedule in a calculationPeriodsSchedule container.
data CalculationPeriodsScheduleReference
CalculationPeriodsScheduleReference :: IDREF -> CalculationPeriodsScheduleReference
cpsr_href :: CalculationPeriodsScheduleReference -> IDREF

-- | The different options for specifying the attributes of a coal quality
--   measure as a decimal value.
data CoalAttributeDecimal
CoalAttributeDecimal :: (Maybe (OneOf1 (Maybe (Decimal), Maybe (Decimal)))) -> CoalAttributeDecimal

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The actual content of the quality characteristics of the Coal
--   Product Shipment expected by the Buyer.</li>
--   <li>The actual limits of the quality characteristics of the Coal
--   Product above or below which the Buyer may reject a Shipment.</li>
--   </ul>
coalAttribDecimal_choice0 :: CoalAttributeDecimal -> (Maybe (OneOf1 (Maybe (Decimal), Maybe (Decimal))))

-- | The different options for specifying the attributes of a coal quality
--   measure as a percentage of the measured value.
data CoalAttributePercentage
CoalAttributePercentage :: (Maybe (OneOf1 (Maybe (RestrictedPercentage), Maybe (RestrictedPercentage)))) -> CoalAttributePercentage

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The actual content of the quality characteristics of the Coal
--   Product Shipment expected by the Buyer.</li>
--   <li>The actual limits of the quality characteristics of the Coal
--   Product above or below which the Buyer may reject a Shipment.</li>
--   </ul>
coalAttribPercen_choice0 :: CoalAttributePercentage -> (Maybe (OneOf1 (Maybe (RestrictedPercentage), Maybe (RestrictedPercentage))))

-- | The physical delivery conditions for coal.
data CoalDelivery
CoalDelivery :: OneOf2 CoalDeliveryPoint Boolean -> Maybe Boolean -> Maybe CoalTransportationEquipment -> Maybe CommodityDeliveryRisk -> CoalDelivery

-- | Choice between:
--   
--   <ol>
--   <li>The point at which the Coal Product will be delivered and
--   received.</li>
--   <li>The point at which the Coal Product as a reference to the Source
--   of the Coal Product. This should be a reference to the source element
--   within product.</li>
--   </ol>
coalDelivery_choice0 :: CoalDelivery -> OneOf2 CoalDeliveryPoint Boolean

-- | If true, indicates that QVA is applicable. If false, indicates that
--   QVA is inapplicable.
coalDelivery_quantityVariationAdjustment :: CoalDelivery -> Maybe Boolean

-- | The transportation equipment with which the Coal Product will be
--   delivered and received.
coalDelivery_transportationEquipment :: CoalDelivery -> Maybe CoalTransportationEquipment

-- | Specifies how the risk associated with the delivery is assigned.
coalDelivery_risk :: CoalDelivery -> Maybe CommodityDeliveryRisk

-- | A scheme identifying the types of the Delivery Point for a physically
--   settled coal trade.
data CoalDeliveryPoint
CoalDeliveryPoint :: Scheme -> CoalDeliveryPointAttributes -> CoalDeliveryPoint
data CoalDeliveryPointAttributes
CoalDeliveryPointAttributes :: Maybe AnyURI -> CoalDeliveryPointAttributes
coalDelivPointAttrib_deliveryPointScheme :: CoalDeliveryPointAttributes -> Maybe AnyURI

-- | Physically settled leg of a physically settled coal transaction.
data CoalPhysicalLeg
CoalPhysicalLeg :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe CommodityDeliveryPeriods -> CoalProduct -> CoalDelivery -> CommodityPhysicalQuantity -> CoalPhysicalLeg
coalPhysicLeg_ID :: CoalPhysicalLeg -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
coalPhysicLeg_payerPartyReference :: CoalPhysicalLeg -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
coalPhysicLeg_payerAccountReference :: CoalPhysicalLeg -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
coalPhysicLeg_receiverPartyReference :: CoalPhysicalLeg -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
coalPhysicLeg_receiverAccountReference :: CoalPhysicalLeg -> Maybe AccountReference

-- | The period during which delivery/deliveries of Coal Products may be
--   scheduled. Equivalent to Nomination Period(s) for US Coal.
coalPhysicLeg_deliveryPeriods :: CoalPhysicalLeg -> Maybe CommodityDeliveryPeriods

-- | The specification of the Coal Product to be delivered.
coalPhysicLeg_coal :: CoalPhysicalLeg -> CoalProduct

-- | The physical delivery conditions for the transaction.
coalPhysicLeg_deliveryConditions :: CoalPhysicalLeg -> CoalDelivery

-- | The different options for specifying the quantity.
coalPhysicLeg_deliveryQuantity :: CoalPhysicalLeg -> CommodityPhysicalQuantity

-- | A type defining the characteristics of the coal being traded in a
--   physically settled gas transaction.
data CoalProduct
CoalProduct :: OneOf2 CoalProductType CoalProductSpecifications -> [CoalProductSource] -> Maybe CoalQualityAdjustments -> Maybe CoalQualityAdjustments -> CoalProduct

-- | Choice between:
--   
--   <ol>
--   <li>The type of coal product to be delivered by reference to a
--   pre-defined specification.</li>
--   <li>The type of coal product to be delivered specified in full.</li>
--   </ol>
coalProduct_choice0 :: CoalProduct -> OneOf2 CoalProductType CoalProductSpecifications

-- | The mining region, mine(s), mining complex(es), loadout(s) or river
--   dock(s) or other point(s) of origin that Seller and Buyer agree are
--   acceptable origins for the Coal Product. For International Coal
--   transactions, this is the Origin of the Coal Product.
coalProduct_source :: CoalProduct -> [CoalProductSource]

-- | The Quality Adjustment formula to be used where the Actual Shipment
--   BTU<i>Lb value differs from the Standard BTU</i>Lb value.
coalProduct_btuQualityAdjustment :: CoalProduct -> Maybe CoalQualityAdjustments

-- | The Quality Adjustment formula to be used where the Actual Shipment
--   SO2/MMBTU value differs from the Standard SO2/MMBTU value.
coalProduct_so2QualityAdjustment :: CoalProduct -> Maybe CoalQualityAdjustments

-- | A scheme identifying the sources of coal for a physically settled coal
--   trade.
data CoalProductSource
CoalProductSource :: Scheme -> CoalProductSourceAttributes -> CoalProductSource
data CoalProductSourceAttributes
CoalProductSourceAttributes :: Maybe AnyURI -> CoalProductSourceAttributes
coalProductSourceAttrib_commodityCoalProductSourceScheme :: CoalProductSourceAttributes -> Maybe AnyURI

-- | The different options for specifying the quality attributes of the
--   coal to be delivered.
data CoalProductSpecifications
CoalProductSpecifications :: (Maybe (OneOf2 CoalStandardQuality CoalStandardQualitySchedule)) -> CoalProductSpecifications

-- | Choice between:
--   
--   <ol>
--   <li>standardQuality</li>
--   <li>standardQualitySchedule</li>
--   </ol>
coalProductSpecif_choice0 :: CoalProductSpecifications -> (Maybe (OneOf2 CoalStandardQuality CoalStandardQualitySchedule))

-- | A scheme identifying the types of coal for a physically settled coal
--   trade.
data CoalProductType
CoalProductType :: Scheme -> CoalProductTypeAttributes -> CoalProductType
data CoalProductTypeAttributes
CoalProductTypeAttributes :: Maybe AnyURI -> CoalProductTypeAttributes
coalProductTypeAttrib_commodityCoalProductTypeScheme :: CoalProductTypeAttributes -> Maybe AnyURI

-- | A scheme identifying the quality adjustment formulae for a physically
--   settled coal trade.
data CoalQualityAdjustments
CoalQualityAdjustments :: Scheme -> CoalQualityAdjustmentsAttributes -> CoalQualityAdjustments
data CoalQualityAdjustmentsAttributes
CoalQualityAdjustmentsAttributes :: Maybe AnyURI -> CoalQualityAdjustmentsAttributes
coalQualityAdjustAttrib_commodityCoalQualityAdjustmentsScheme :: CoalQualityAdjustmentsAttributes -> Maybe AnyURI

-- | The quality attributes of the coal to be delivered.
data CoalStandardQuality
CoalStandardQuality :: Maybe CoalAttributePercentage -> Maybe CoalAttributePercentage -> Maybe CoalAttributePercentage -> Maybe CoalAttributePercentage -> Maybe CoalAttributePercentage -> Maybe CoalAttributeDecimal -> Maybe CoalAttributeDecimal -> Maybe CoalAttributeDecimal -> Maybe CoalAttributeDecimal -> Maybe CoalAttributeDecimal -> Maybe CoalAttributeDecimal -> Maybe CoalAttributeDecimal -> Maybe CoalAttributeDecimal -> Maybe CoalAttributeDecimal -> CoalStandardQuality

-- | The moisture content of the coal product.
coalStdQuality_moisture :: CoalStandardQuality -> Maybe CoalAttributePercentage

-- | The ash content of the coal product.
coalStdQuality_ash :: CoalStandardQuality -> Maybe CoalAttributePercentage

-- | The sulfur/sulphur content of the coal product.
coalStdQuality_sulfur :: CoalStandardQuality -> Maybe CoalAttributePercentage

-- | The sulfur/sulphur dioxide content of the coal product.
coalStdQuality_sO2 :: CoalStandardQuality -> Maybe CoalAttributePercentage

-- | The volatile content of the coal product.
coalStdQuality_volatile :: CoalStandardQuality -> Maybe CoalAttributePercentage

-- | The number of British Thermal Units per Pound of the coal product.
coalStdQuality_bTUperLB :: CoalStandardQuality -> Maybe CoalAttributeDecimal

-- | The smallest sieve opening that will result in less than 5% of a
--   sample of the coal product remaining.
coalStdQuality_topSize :: CoalStandardQuality -> Maybe CoalAttributeDecimal
coalStdQuality_finesPassingScreen :: CoalStandardQuality -> Maybe CoalAttributeDecimal

-- | The Hardgrove Grindability Index value of the coal to be delivered.
coalStdQuality_grindability :: CoalStandardQuality -> Maybe CoalAttributeDecimal

-- | The temperature at which the ash form of the coal product fuses
--   completely in accordance with the ASTM International D1857 Standard
--   Test Methodology.
coalStdQuality_ashFusionTemperature :: CoalStandardQuality -> Maybe CoalAttributeDecimal

-- | The temperature at which an ash cone shows evidence of deformation.
coalStdQuality_initialDeformation :: CoalStandardQuality -> Maybe CoalAttributeDecimal

-- | The temperature at which the height of an ash cone equals its width.
--   (Softening temperature).
coalStdQuality_softeningHeightWidth :: CoalStandardQuality -> Maybe CoalAttributeDecimal

-- | The temperature at which the height of an ash cone equals half its
--   width. (Hemisphere temperature).
coalStdQuality_softeningHeightHalfWidth :: CoalStandardQuality -> Maybe CoalAttributeDecimal

-- | The temperature at which the ash cone flattens.
coalStdQuality_fluid :: CoalStandardQuality -> Maybe CoalAttributeDecimal

-- | The quality attributes of the coal to be delivered, specified on a
--   periodic basis.
data CoalStandardQualitySchedule
CoalStandardQualitySchedule :: [CoalStandardQuality] -> (Maybe (OneOf2 CalculationPeriodsReference CalculationPeriodsScheduleReference)) -> CoalStandardQualitySchedule
coalStdQualitySched_standardQualityStep :: CoalStandardQualitySchedule -> [CoalStandardQuality]

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to the Delivery Periods defined
--   elsewhere.</li>
--   <li>A pointer style reference to the Calculation Periods Schedule
--   defined elsewhere.</li>
--   </ol>
coalStdQualitySched_choice1 :: CoalStandardQualitySchedule -> (Maybe (OneOf2 CalculationPeriodsReference CalculationPeriodsScheduleReference))

-- | A scheme identifying the methods by which coal may be transported.
data CoalTransportationEquipment
CoalTransportationEquipment :: Scheme -> CoalTransportationEquipmentAttributes -> CoalTransportationEquipment
data CoalTransportationEquipmentAttributes
CoalTransportationEquipmentAttributes :: Maybe AnyURI -> CoalTransportationEquipmentAttributes
ctea_commodityCoalTransportationEquipmentScheme :: CoalTransportationEquipmentAttributes -> Maybe AnyURI

-- | A type for defining exercise procedures associated with an American
--   style exercise of a commodity option.
data CommodityAmericanExercise
CommodityAmericanExercise :: Maybe ID -> [CommodityExercisePeriods] -> Maybe Frequency -> (Maybe (OneOf2 BusinessCenterTime DeterminationMethod)) -> Maybe BusinessCenterTime -> Maybe CommodityMultipleExercise -> CommodityAmericanExercise
commodAmericExerc_ID :: CommodityAmericanExercise -> Maybe ID

-- | Describes the American exercise periods.
commodAmericExerc_exercisePeriod :: CommodityAmericanExercise -> [CommodityExercisePeriods]

-- | The exercise frequency for the strip.
commodAmericExerc_exerciseFrequency :: CommodityAmericanExercise -> Maybe Frequency

-- | Choice between latest exercise time expressed as literal time, or
--   using a determination method.
--   
--   Choice between:
--   
--   <ol>
--   <li>For a Bermuda or American style option, the latest time on an
--   exercise business day (excluding the expiration date) within the
--   exercise period that notice can be given by the buyer to the seller or
--   seller's agent. Notice of exercise given after this time will be
--   deemed to have been given on the next exercise business day.</li>
--   <li>Latest exercise time determination method.</li>
--   </ol>
commodAmericExerc_choice2 :: CommodityAmericanExercise -> (Maybe (OneOf2 BusinessCenterTime DeterminationMethod))

-- | The specific time of day on which the option expires.
commodAmericExerc_expirationTime :: CommodityAmericanExercise -> Maybe BusinessCenterTime

-- | The presence of this element indicates that the option may be
--   partially exercised. It is not applicable to European or Asian
--   options.
commodAmericExerc_multipleExercise :: CommodityAmericanExercise -> Maybe CommodityMultipleExercise

-- | A parametric representation of the Calculation Periods for on Asian
--   option or a leg of a swap. In case the calculation frequency is of
--   value T (term), the period is defined by the
--   commoditySwapeffectiveDate and the commoditySwapterminationDate.
data CommodityCalculationPeriodsSchedule
CommodityCalculationPeriodsSchedule :: Maybe ID -> Maybe PositiveInteger -> Maybe PeriodExtendedEnum -> Maybe Boolean -> CommodityCalculationPeriodsSchedule
ccps_ID :: CommodityCalculationPeriodsSchedule -> Maybe ID

-- | A time period multiplier, e.g. 1, 2 or 3 etc. If the period value is T
--   (Term) then periodMultiplier must contain the value 1.
ccps_periodMultiplier :: CommodityCalculationPeriodsSchedule -> Maybe PositiveInteger

-- | A time period, e.g. a day, week, month, year or term of the stream.
ccps_period :: CommodityCalculationPeriodsSchedule -> Maybe PeriodExtendedEnum

-- | If true, indicates that that the first Calculation Period should run
--   from the Effective Date to the end of the calendar period in which the
--   Effective Date falls, e.g. Jan 15 - Jan 31 if the calculation periods
--   are one month long and Effective Date is Jan 15. If false, the first
--   Calculation Period should run from the Effective Date for one whole
--   period, e.g. Jan 15 to Feb 14 if the calculation periods are one month
--   long and Effective Date is Jan 15.
ccps_balanceOfFirstPeriod :: CommodityCalculationPeriodsSchedule -> Maybe Boolean

-- | The different options for specifying the Delivery Periods of a
--   physical leg.
data CommodityDeliveryPeriods
CommodityDeliveryPeriods :: Maybe ID -> OneOf3 AdjustableDates CommodityCalculationPeriodsSchedule ((Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference))) -> CommodityDeliveryPeriods
commodDelivPeriods_ID :: CommodityDeliveryPeriods -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>The Delivery Periods for this leg of the swap. This type is only
--   intended to be used if the Delivery Periods differ from the
--   Calculation Periods on the fixed or floating leg. If DeliveryPeriods
--   mirror another leg, then the calculationPeriodsReference element
--   should be used to point to the Calculation Periods on that leg - or
--   the calculationPeriodsScheduleReference can be used to point to the
--   Calculation Periods Schedule for that leg.</li>
--   <li>The Delivery Periods for this leg of the swap. This type is only
--   intended to be used if the Delivery Periods differ from the
--   Calculation Periods on the fixed or floating leg. If DeliveryPeriods
--   mirror another leg, then the calculationPeriodsReference element
--   should be used to point to the Calculation Periods on that leg - or
--   the calculationPeriodsScheduleReference can be used to point to the
--   Calculation Periods Schedule for that leg.</li>
--   <li>unknown</li>
--   </ol>
commodDelivPeriods_choice0 :: CommodityDeliveryPeriods -> OneOf3 AdjustableDates CommodityCalculationPeriodsSchedule ((Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference)))

-- | A scheme identifying the types of the Delivery Point for a physically
--   settled commodity trade.
data CommodityDeliveryPoint
CommodityDeliveryPoint :: Scheme -> CommodityDeliveryPointAttributes -> CommodityDeliveryPoint
data CommodityDeliveryPointAttributes
CommodityDeliveryPointAttributes :: Maybe AnyURI -> CommodityDeliveryPointAttributes
commodDelivPointAttrib_deliveryPointScheme :: CommodityDeliveryPointAttributes -> Maybe AnyURI

-- | A scheme identifying how the parties to the trade aportion
--   responsibility for the delivery of the commodity product (for example
--   Free On Board, Cost, Insurance, Freight)
data CommodityDeliveryRisk
CommodityDeliveryRisk :: Scheme -> CommodityDeliveryRiskAttributes -> CommodityDeliveryRisk
data CommodityDeliveryRiskAttributes
CommodityDeliveryRiskAttributes :: Maybe AnyURI -> CommodityDeliveryRiskAttributes
commodDelivRiskAttrib_deliveryRiskScheme :: CommodityDeliveryRiskAttributes -> Maybe AnyURI

-- | A type for defining exercise procedures associated with a European
--   style exercise of a commodity option.
data CommodityEuropeanExercise
CommodityEuropeanExercise :: Maybe ID -> [AdjustableOrRelativeDate] -> Maybe Frequency -> Maybe BusinessCenterTime -> CommodityEuropeanExercise
commodEuropExerc_ID :: CommodityEuropeanExercise -> Maybe ID

-- | The last day within an exercise period for an American style option.
--   For a European style option it is the only day within the exercise
--   period. For an averaging option this is equivalent to the Termination
--   Date.
commodEuropExerc_expirationDate :: CommodityEuropeanExercise -> [AdjustableOrRelativeDate]

-- | The exercise frequency for the strip.
commodEuropExerc_exerciseFrequency :: CommodityEuropeanExercise -> Maybe Frequency

-- | The specific time of day on which the option expires.
commodEuropExerc_expirationTime :: CommodityEuropeanExercise -> Maybe BusinessCenterTime

-- | The parameters for defining how the commodity option can be exercised,
--   how it is priced and how it is settled.
data CommodityExercise
CommodityExercise :: (Maybe (OneOf2 CommodityAmericanExercise CommodityEuropeanExercise)) -> Maybe Boolean -> Maybe Boolean -> Maybe IdentifiedCurrency -> Maybe CommodityFx -> Maybe Decimal -> OneOf2 CommodityRelativePaymentDates ((Maybe (OneOf2 AdjustableDatesOrRelativeDateOffset Boolean))) -> CommodityExercise

-- | Choice between:
--   
--   <ol>
--   <li>The parameters for defining the exercise period for an American
--   style option together with the rules governing the quantity of the
--   commodity that can be exercised on any given exercise date.</li>
--   <li>The parameters for defining the expiration date and time for a
--   European or Asian style option. For an Asian style option the
--   expiration date is equivalent to the termination date.</li>
--   </ol>
commodExerc_choice0 :: CommodityExercise -> (Maybe (OneOf2 CommodityAmericanExercise CommodityEuropeanExercise))

-- | Specifies whether or not Automatic Exercise applies to a Commodity
--   Option Transaction.
commodExerc_automaticExercise :: CommodityExercise -> Maybe Boolean

-- | Specifies whether or not Written Confirmation applies to a Commodity
--   Option Transaction.
commodExerc_writtenConfirmation :: CommodityExercise -> Maybe Boolean

-- | The currency into which the Commodity Option Transaction will settle.
--   If this is not the same as the currency in which the Commodity
--   Reference Price is quoted, then an FX determination method should also
--   be specified.
commodExerc_settlementCurrency :: CommodityExercise -> Maybe IdentifiedCurrency

-- | FX observations to be used to convert the observed Commodity Reference
--   Price to the Settlement Currency.
commodExerc_fx :: CommodityExercise -> Maybe CommodityFx

-- | If the Notional Quantity is specified in a unit that does not match
--   the unit in which the Commodity Reference Price is quoted, the scaling
--   or conversion factor used to convert the Commodity Reference Price
--   unit into the Notional Quantity unit should be stated here. If there
--   is no conversion, this element is not intended to be used.
commodExerc_conversionFactor :: CommodityExercise -> Maybe Decimal

-- | Choice between:
--   
--   <ol>
--   <li>The Payment Dates of the trade relative to the Calculation
--   Periods.</li>
--   <li>unknown</li>
--   </ol>
commodExerc_choice6 :: CommodityExercise -> OneOf2 CommodityRelativePaymentDates ((Maybe (OneOf2 AdjustableDatesOrRelativeDateOffset Boolean)))
data CommodityExercisePeriods
CommodityExercisePeriods :: Maybe AdjustableOrRelativeDate -> Maybe AdjustableOrRelativeDate -> CommodityExercisePeriods

-- | The first day of the exercise period for an American style option.
commodExercPeriods_commencementDate :: CommodityExercisePeriods -> Maybe AdjustableOrRelativeDate

-- | The last day within an exercise period for an American style option.
--   For a European style option it is the only day within the exercise
--   period.
commodExercPeriods_expirationDate :: CommodityExercisePeriods -> Maybe AdjustableOrRelativeDate

-- | A scheme identifying the physical event relative to which option
--   expiration occurs.
data CommodityExpireRelativeToEvent
CommodityExpireRelativeToEvent :: Scheme -> CommodityExpireRelativeToEventAttributes -> CommodityExpireRelativeToEvent
data CommodityExpireRelativeToEventAttributes
CommodityExpireRelativeToEventAttributes :: Maybe AnyURI -> CommodityExpireRelativeToEventAttributes
certea_commodityExpireRelativeToEventScheme :: CommodityExpireRelativeToEventAttributes -> Maybe AnyURI

-- | Commodity Forward
data CommodityForward
CommodityForward :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe AdjustableOrRelativeDate -> Maybe NonPeriodicFixedPriceLeg -> Maybe CommodityForwardLeg -> Maybe Boolean -> Maybe CommodityMarketDisruption -> Maybe CommodityBullionSettlementDisruptionEnum -> Maybe Rounding -> CommodityForward
commodForward_ID :: CommodityForward -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
commodForward_primaryAssetClass :: CommodityForward -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
commodForward_secondaryAssetClass :: CommodityForward -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
commodForward_productType :: CommodityForward -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
commodForward_productId :: CommodityForward -> [ProductId]

-- | Specifies the value date of the Commodity Forward Transaction. This is
--   the day on which both the cash and the physical commodity settle.
commodForward_valueDate :: CommodityForward -> Maybe AdjustableOrRelativeDate

-- | The fixed leg of a Commodity Forward Transaction
commodForward_fixedLeg :: CommodityForward -> Maybe NonPeriodicFixedPriceLeg

-- | Defines the substitutable commodity forward leg
commodityForward_leg :: CommodityForward -> Maybe CommodityForwardLeg

-- | Common pricing may be relevant for a Transaction that references more
--   than one Commodity Reference Price. If Common Pricing is not specified
--   as applicable, it will be deemed not to apply.
commodForward_commonPricing :: CommodityForward -> Maybe Boolean

-- | Market disruption events as defined in the ISDA 1993 Commodity
--   Definitions or in ISDA 2005 Commodity Definitions, as applicable.
commodForward_marketDisruption :: CommodityForward -> Maybe CommodityMarketDisruption

-- | The consequences of Bullion Settlement Disruption Events.
commodForward_settlementDisruption :: CommodityForward -> Maybe CommodityBullionSettlementDisruptionEnum

-- | Rounding direction and precision for amounts.
commodForward_rounding :: CommodityForward -> Maybe Rounding

-- | The Fixed Price for a given Calculation Period during the life of the
--   trade. There must be a Fixed Price step specified for each Calculation
--   Period, regardless of whether the Fixed Price changes or remains the
--   same between periods.
data CommodityFixedPriceSchedule
CommodityFixedPriceSchedule :: (Maybe (OneOf4 [FixedPrice] [Decimal] [NonNegativeMoney] [CommoditySettlementPeriodsPriceSchedule])) -> (Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference)) -> CommodityFixedPriceSchedule

-- | Choice between:
--   
--   <ol>
--   <li>The Fixed Price for a given Calculation Period during the life of
--   the trade. There must be a Fixed Price step specified for each
--   Calculation Period, regardless of whether the Fixed Price changes or
--   remains the same between periods.</li>
--   <li>For a Wet Voyager Charter Freight Swap, the number of Worldscale
--   Points for purposes of the calculation of a Fixed Amount for a given
--   Calculation Period during the life of the trade. There must be
--   Worldscale Rate Step specified for each Calculation Period, regardless
--   of whether the Worldscale Rate Step changes or remains the same
--   between periods.</li>
--   <li>For a DRY Voyage Charter or Time Charter Freight Swap, the price
--   per relevant unit for pruposes of the calculation of a Fixed Amount
--   for a given Calculation Period during the life of the trade. There
--   must be Worldscale Rate Step specified for each Calculation Period,
--   regardless of whether the Worldscale Rate Step changes or remains the
--   same between periods.</li>
--   <li>For an electricity transaction, the fixed price schedule for one
--   or more groups of Settlement Periods on which fixed payments are
--   based. if the schedule differs for different groups of Settlement
--   Periods, this element should be repeated.</li>
--   </ol>
commodFixedPriceSched_choice0 :: CommodityFixedPriceSchedule -> (Maybe (OneOf4 [FixedPrice] [Decimal] [NonNegativeMoney] [CommoditySettlementPeriodsPriceSchedule]))

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to the Calculation Periods defined on
--   another leg.</li>
--   <li>A pointer style reference to the Calculation Periods Schedule
--   defined on another leg.</li>
--   <li>A pointer style reference to single-day-duration Calculation
--   Periods defined on another leg.</li>
--   </ol>
commodFixedPriceSched_choice1 :: CommodityFixedPriceSchedule -> (Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference))

-- | Abstract base class for all commodity forward legs
data CommodityForwardLeg
CommodityForwardLeg_PhysicalForwardLeg :: PhysicalForwardLeg -> CommodityForwardLeg

-- | Frequency Type for use in Pricing Date specifications.
data CommodityFrequencyType
CommodityFrequencyType :: Scheme -> CommodityFrequencyTypeAttributes -> CommodityFrequencyType
data CommodityFrequencyTypeAttributes
CommodityFrequencyTypeAttributes :: Maybe AnyURI -> CommodityFrequencyTypeAttributes
commodFrequTypeAttrib_commodityFrequencyTypeScheme :: CommodityFrequencyTypeAttributes -> Maybe AnyURI

-- | A type defining the FX observations to be used to convert the observed
--   Commodity Reference Price to the Settlement Currency. The rate source
--   must be specified. Additionally, a time for the spot price to be
--   observed on that source may be specified, or else an averaging
--   schedule for trades priced using an average FX rate.
data CommodityFx
CommodityFx :: Maybe InformationSource -> Maybe InformationSource -> Maybe CommodityFxType -> Maybe AveragingMethodEnum -> OneOf2 [AdjustableDates] (Maybe (CommodityDayTypeEnum), Maybe (OneOf2 (Maybe (CommodityFrequencyType), Maybe (PositiveInteger)) ([DayOfWeekEnum], Maybe (Integer))), Maybe (OneOf2 Lag LagReference), Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference)) -> Maybe BusinessCenterTime -> CommodityFx

-- | The primary source for where the rate observation will occur. Will
--   typically be either a page or a reference bank published rate.
commodityFx_primaryRateSource :: CommodityFx -> Maybe InformationSource

-- | An alternative, or secondary, source for where the rate observation
--   will occur. Will typically be either a page or a reference bank
--   published rate.
commodityFx_secondaryRateSource :: CommodityFx -> Maybe InformationSource

-- | A type to identify how the FX rate will be applied. This is intended
--   to differentiate between the various methods for applying FX to the
--   floating price such as a daily calculation, or averaging the FX and
--   applying the average at the end of each CalculationPeriod.
commodityFx_fxType :: CommodityFx -> Maybe CommodityFxType

-- | The parties may specify a Method of Averaging when averaging of the FX
--   rate is applicable.
commodityFx_averagingMethod :: CommodityFx -> Maybe AveragingMethodEnum

-- | Choice between:
--   
--   <ol>
--   <li>A list of the fx observation dates for a given Calculation
--   Period.</li>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The type of day on which pricing occurs.</li>
--   <li>unknown</li>
--   <li>unknown</li>
--   <li>unknown</li>
--   </ul>
commodityFx_choice4 :: CommodityFx -> OneOf2 [AdjustableDates] (Maybe (CommodityDayTypeEnum), Maybe (OneOf2 (Maybe (CommodityFrequencyType), Maybe (PositiveInteger)) ([DayOfWeekEnum], Maybe (Integer))), Maybe (OneOf2 Lag LagReference), Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference))

-- | The time at which the spot currency exchange rate will be observed. It
--   is specified as a time in a specific business center, e.g. 11:00am
--   London time.
commodityFx_fixingTime :: CommodityFx -> Maybe BusinessCenterTime

-- | Identifes how the FX rate will be applied. This is intended to
--   differentiate between the various methods for applying FX to the
--   floating price such as a daily calculation, or averaging the FX and
--   applying the average at the end of each CalculationPeriod.
data CommodityFxType
CommodityFxType :: Scheme -> CommodityFxTypeAttributes -> CommodityFxType
data CommodityFxTypeAttributes
CommodityFxTypeAttributes :: Maybe AnyURI -> CommodityFxTypeAttributes
commodFxTypeAttrib_commodityFxTypeScheme :: CommodityFxTypeAttributes -> Maybe AnyURI

-- | A type defining a hub or other reference for a physically settled
--   commodity trade.
data CommodityHub
CommodityHub :: PartyReference -> Maybe AccountReference -> Maybe CommodityHubCode -> CommodityHub

-- | Reference to a party.
commodityHub_partyReference :: CommodityHub -> PartyReference

-- | Reference to an account.
commodityHub_accountReference :: CommodityHub -> Maybe AccountReference
commodityHub_hubCode :: CommodityHub -> Maybe CommodityHubCode

-- | A scheme identifying the code for a hub or other reference for a
--   physically settled commodity trade.
data CommodityHubCode
CommodityHubCode :: Scheme -> CommodityHubCodeAttributes -> CommodityHubCode
data CommodityHubCodeAttributes
CommodityHubCodeAttributes :: AnyURI -> CommodityHubCodeAttributes
commodHubCodeAttrib_hubCodeScheme :: CommodityHubCodeAttributes -> AnyURI

-- | ISDA 1993 or 2005 commodity market disruption elements.
data CommodityMarketDisruption
CommodityMarketDisruption :: (Maybe (OneOf2 (Maybe (MarketDisruptionEventsEnum), [MarketDisruptionEvent]) [MarketDisruptionEvent])) -> (Maybe (OneOf2 DisruptionFallbacksEnum [SequencedDisruptionFallback])) -> Maybe Underlyer -> Maybe NonNegativeInteger -> Maybe Decimal -> Maybe PositiveInteger -> CommodityMarketDisruption

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>If Market disruption Events are stated to be Applicable then the
--   default Market Disruption Events of Section 7.4(d)(i) of the ISDA
--   Commodity Definitions shall apply unless specific Market Disruption
--   Events are stated hereunder, in which case these shall override the
--   ISDA defaults. If Market Disruption Events are stated to be Not
--   Applicable, Market Disruption Events are not applicable to the trade
--   at all. It is also possible to reference the Market Disruption Events
--   set out in the relevant Master Agreement governing the trade.</li>
--   <li>To be used when marketDisruptionEvents is set to <a>Applicable</a>
--   and additional market disruption events(s) apply to the default market
--   disruption events of Section 7.4(d)(i) of the ISDA Commodity
--   Definitions.</li>
--   </ul>
--   
--   <ol>
--   <li>Market disruption event(s) that apply. Note that these should only
--   be specified if the default market disruption events of Section
--   7.4(d)(i) of the ISDA Commodity Definitions are to be overridden.</li>
--   </ol>
commodMarketDisrup_choice0 :: CommodityMarketDisruption -> (Maybe (OneOf2 (Maybe (MarketDisruptionEventsEnum), [MarketDisruptionEvent]) [MarketDisruptionEvent]))

-- | If omitted then the standard disruption fallbacks of Section 7.5(d)(i)
--   of the ISDA Commodity Definitions shall apply.
--   
--   Choice between:
--   
--   <ol>
--   <li>To be used where disruption fallbacks are set out in the relevant
--   Master Agreement governing the trade.</li>
--   <li>disruptionFallback</li>
--   </ol>
commodMarketDisrup_choice1 :: CommodityMarketDisruption -> (Maybe (OneOf2 DisruptionFallbacksEnum [SequencedDisruptionFallback]))

-- | A fallback commodity reference price for use when relying on
--   Disruption Fallbacks in Section 7.5(d)(i) of the ISDA Commodity
--   Definitions or have selected <a>Fallback Reference Price</a> as a
--   disruptionFallback.
commodMarketDisrup_fallbackReferencePrice :: CommodityMarketDisruption -> Maybe Underlyer

-- | 2005 Commodity Definitions only. If omitted , the number of days
--   specified in Section 7.6(a) of the Definitions will apply.
commodMarketDisrup_maximumNumberOfDaysOfDisruption :: CommodityMarketDisruption -> Maybe NonNegativeInteger

-- | 2005 Commodity Definitions only. To be used where a price materiality
--   percentage applies to the <a>Price Source Disruption</a> event and
--   this event has been specified by setting marketDisruption to true or
--   including it in additionalMarketDisruptionEvent
commodMarketDisrup_priceMaterialityPercentage :: CommodityMarketDisruption -> Maybe Decimal

-- | 1993 Commodity Definitions only. Specifies the Mimum Futures Contracts
--   level that dictates whether or not a <a>De Minimis Trading</a> event
--   has occurred. Only relevant if 'De Minimis Trading' has been specified
--   in marketDisruptionEvent or additionalMarketDisruptionEvent.
commodMarketDisrup_minimumFuturesContracts :: CommodityMarketDisruption -> Maybe PositiveInteger

-- | A type for defining the multiple exercise provisions of an American
--   style commodity option.
data CommodityMultipleExercise
CommodityMultipleExercise :: Maybe CommodityNotionalQuantity -> Maybe CommodityNotionalQuantity -> CommodityMultipleExercise

-- | The integral multiple quantity defines a lower limit of the Notional
--   Quantity that can be exercised and also defines a unit multiple of the
--   Notional Quantity that can be exercised, i.e. only integer multiples
--   of this Notional Quantity can be exercised.
commodMultiExerc_integralMultipleQuantity :: CommodityMultipleExercise -> Maybe CommodityNotionalQuantity

-- | The minimum Notional Quantity that can be exercised on a given
--   Exercise Date. See multipleExercise.
commodMultiExerc_minimumNotionalQuantity :: CommodityMultipleExercise -> Maybe CommodityNotionalQuantity

-- | Commodity Notional.
data CommodityNotionalQuantity
CommodityNotionalQuantity :: Maybe ID -> QuantityUnit -> Maybe CommodityQuantityFrequency -> Maybe Decimal -> CommodityNotionalQuantity
commodNotionQuant_ID :: CommodityNotionalQuantity -> Maybe ID

-- | Quantity Unit is the unit of measure applicable for the quantity on
--   the Transaction.
commodNotionQuant_quantityUnit :: CommodityNotionalQuantity -> QuantityUnit

-- | The frequency at which the Notional Quantity is deemed to apply for
--   purposes of calculating the Total Notional Quantity.
commodNotionQuant_quantityFrequency :: CommodityNotionalQuantity -> Maybe CommodityQuantityFrequency

-- | Amount of commodity per quantity frequency.
commodNotionQuant_quantity :: CommodityNotionalQuantity -> Maybe Decimal

-- | The Notional Quantity per Calculation Period. There must be a Notional
--   Quantity step specified for each Calculation Period, regardless of
--   whether the Notional Quantity changes or remains the same between
--   periods.
data CommodityNotionalQuantitySchedule
CommodityNotionalQuantitySchedule :: Maybe ID -> (Maybe (OneOf2 [CommodityNotionalQuantity] [CommoditySettlementPeriodsNotionalQuantitySchedule])) -> (Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference)) -> CommodityNotionalQuantitySchedule
commodNotionQuantSched_ID :: CommodityNotionalQuantitySchedule -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>The Notional Quantity per Calculation Period. There must be a
--   Notional Quantity specified for each Calculation Period, regardless of
--   whether the quantity changes or remains the same between periods.</li>
--   <li>For an electricity transaction, the Notional Quantity schedule for
--   a one or more groups of Settlement Periods to which the Notional
--   Quantity is based. If the schedule differs for different groups of
--   Settlement Periods, this element should be repeated.</li>
--   </ol>
commodNotionQuantSched_choice0 :: CommodityNotionalQuantitySchedule -> (Maybe (OneOf2 [CommodityNotionalQuantity] [CommoditySettlementPeriodsNotionalQuantitySchedule]))

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to the Calculation Periods defined on
--   another leg.</li>
--   <li>A pointer style reference to the Calculation Periods Schedule
--   defined on another leg.</li>
--   <li>A pointer style reference to single-day-duration Calculation
--   Periods defined on another leg.</li>
--   </ol>
commodNotionQuantSched_choice1 :: CommodityNotionalQuantitySchedule -> (Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference))

-- | Commodity Option.
data CommodityOption
CommodityOption :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe PutCallEnum -> OneOf2 (Maybe (Commodity), Maybe (AdjustableOrRelativeDate), Maybe (OneOf2 CommodityCalculationPeriodsSchedule AdjustableDates), Maybe (CommodityPricingDates), Maybe (AveragingMethodEnum), OneOf2 (OneOf3 CommodityNotionalQuantitySchedule CommodityNotionalQuantity [CommoditySettlementPeriodsNotionalQuantity], Decimal) QuantityReference, Maybe (CommodityExercise), OneOf2 NonNegativeMoney CommodityStrikeSchedule) (Maybe (OneOf2 CommoditySwap CommodityForward), Maybe (CommodityPhysicalExercise)) -> [CommodityPremium] -> Maybe Boolean -> Maybe CommodityMarketDisruption -> Maybe CommodityBullionSettlementDisruptionEnum -> Maybe Rounding -> CommodityOption
commodOption_ID :: CommodityOption -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
commodOption_primaryAssetClass :: CommodityOption -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
commodOption_secondaryAssetClass :: CommodityOption -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
commodOption_productType :: CommodityOption -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
commodOption_productId :: CommodityOption -> [ProductId]

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
commodOption_buyerPartyReference :: CommodityOption -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
commodOption_buyerAccountReference :: CommodityOption -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
commodOption_sellerPartyReference :: CommodityOption -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
commodOption_sellerAccountReference :: CommodityOption -> Maybe AccountReference

-- | The type of option transaction.
commodOption_optionType :: CommodityOption -> Maybe PutCallEnum

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>Specifies the underlying component. At the time of the initial
--   schema design, only underlyers of type Commodity are supported; the
--   choice group in the future could offer the possibility of adding other
--   types later.</li>
--   <li>The effective date of the Commodity Option Transaction. Note that
--   the Termination/Expiration Date should be specified in expirationDate
--   within the CommodityAmericanExercise type or the
--   CommodityEuropeanExercise type, as applicable.</li>
--   <li>unknown</li>
--   <li>The dates on which the option will price.</li>
--   <li>The Method of Averaging if there is more than one Pricing
--   Date.</li>
--   <li>unknown</li>
--   <li>The parameters for defining how the commodity option can be
--   exercised and how it is settled.</li>
--   <li>unknown</li>
--   </ul>
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>unknown</li>
--   <li>The parameters for defining how the commodity option can be
--   exercised into a physical transaction.</li>
--   </ul>
commodOption_choice9 :: CommodityOption -> OneOf2 (Maybe (Commodity), Maybe (AdjustableOrRelativeDate), Maybe (OneOf2 CommodityCalculationPeriodsSchedule AdjustableDates), Maybe (CommodityPricingDates), Maybe (AveragingMethodEnum), OneOf2 (OneOf3 CommodityNotionalQuantitySchedule CommodityNotionalQuantity [CommoditySettlementPeriodsNotionalQuantity], Decimal) QuantityReference, Maybe (CommodityExercise), OneOf2 NonNegativeMoney CommodityStrikeSchedule) (Maybe (OneOf2 CommoditySwap CommodityForward), Maybe (CommodityPhysicalExercise))

-- | The option premium payable by the buyer to the seller.
commodOption_premium :: CommodityOption -> [CommodityPremium]

-- | Common pricing may be relevant for a Transaction that references more
--   than one Commodity Reference Price. If Common Pricing is not specified
--   as applicable, it will be deemed not to apply.
commodOption_commonPricing :: CommodityOption -> Maybe Boolean

-- | Market disruption events as defined in the ISDA 1993 Commodity
--   Definitions or in ISDA 2005 Commodity Definitions, as applicable.
commodOption_marketDisruption :: CommodityOption -> Maybe CommodityMarketDisruption

-- | The consequences of Bullion Settlement Disruption Events.
commodOption_settlementDisruption :: CommodityOption -> Maybe CommodityBullionSettlementDisruptionEnum

-- | Rounding direction and precision for amounts.
commodOption_rounding :: CommodityOption -> Maybe Rounding

-- | A scheme identifying the physical event relative to which payment
--   occurs.
data CommodityPayRelativeToEvent
CommodityPayRelativeToEvent :: Scheme -> CommodityPayRelativeToEventAttributes -> CommodityPayRelativeToEvent
data CommodityPayRelativeToEventAttributes
CommodityPayRelativeToEventAttributes :: Maybe AnyURI -> CommodityPayRelativeToEventAttributes
cprtea_commodityPayRelativeToEventScheme :: CommodityPayRelativeToEventAttributes -> Maybe AnyURI

-- | The parameters for defining the expiration date(s) and time(s) for an
--   American style option.
data CommodityPhysicalAmericanExercise
CommodityPhysicalAmericanExercise :: Maybe ID -> (Maybe (OneOf2 (Maybe (AdjustableOrRelativeDates), Maybe (AdjustableOrRelativeDates)) (Maybe (CommodityRelativeExpirationDates), Maybe (CommodityRelativeExpirationDates)))) -> Maybe PrevailingTime -> Maybe PrevailingTime -> CommodityPhysicalAmericanExercise
commodPhysicAmericExerc_ID :: CommodityPhysicalAmericanExercise -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The first day(s) of the exercise period(s) for an American-style
--   option.</li>
--   <li>The Expiration Date(s) of an American-style option.</li>
--   </ul>
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The first day(s) of the exercise period(s) for an American-style
--   option where it is relative to the occurrence of an external
--   event.</li>
--   <li>The Expiration Date(s) of an American-style option where it is
--   relative to the occurrence of an external event.</li>
--   </ul>
commodPhysicAmericExerc_choice0 :: CommodityPhysicalAmericanExercise -> (Maybe (OneOf2 (Maybe (AdjustableOrRelativeDates), Maybe (AdjustableOrRelativeDates)) (Maybe (CommodityRelativeExpirationDates), Maybe (CommodityRelativeExpirationDates))))

-- | For a Bermuda or American style option, the latest time on an exercise
--   business day (excluding the expiration date) within the exercise
--   period that notice can be given by the buyer to the seller or seller's
--   agent. Notice of exercise given after this time will be deemed to have
--   been given on the next exercise business day.
commodPhysicAmericExerc_latestExerciseTime :: CommodityPhysicalAmericanExercise -> Maybe PrevailingTime

-- | The specific time of day at which the option expires.
commodPhysicAmericExerc_expirationTime :: CommodityPhysicalAmericanExercise -> Maybe PrevailingTime

-- | The parameters for defining the expiration date(s) and time(s) for a
--   European style option.
data CommodityPhysicalEuropeanExercise
CommodityPhysicalEuropeanExercise :: Maybe ID -> (Maybe (OneOf3 AdjustableOrRelativeDate AdjustableRelativeOrPeriodicDates2 CommodityRelativeExpirationDates)) -> Maybe PrevailingTime -> CommodityPhysicalEuropeanExercise
commodPhysicEuropExerc_ID :: CommodityPhysicalEuropeanExercise -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>The Expiration Date of a single expiry European-style option or
--   the first Expiration Date of a multiple expiry or daily expiring
--   option.</li>
--   <li>The Expiration Date(s) of a European-style option.</li>
--   <li>The Expiration Date(s) of a European-style option where it is
--   relative to the occurrence of an external event.</li>
--   </ol>
commodPhysicEuropExerc_choice0 :: CommodityPhysicalEuropeanExercise -> (Maybe (OneOf3 AdjustableOrRelativeDate AdjustableRelativeOrPeriodicDates2 CommodityRelativeExpirationDates))

-- | The specific time of day at which the option expires.
commodPhysicEuropExerc_expirationTime :: CommodityPhysicalEuropeanExercise -> Maybe PrevailingTime

-- | The parameters for defining how the physically-settled commodity
--   option can be exercised and how it is settled.
data CommodityPhysicalExercise
CommodityPhysicalExercise :: (Maybe (OneOf2 CommodityPhysicalAmericanExercise CommodityPhysicalEuropeanExercise)) -> Maybe Boolean -> Maybe Boolean -> CommodityPhysicalExercise

-- | Choice between:
--   
--   <ol>
--   <li>The parameters for defining the expiration date(s) and time(s) for
--   an American style option.</li>
--   <li>The parameters for defining the expiration date(s) and time(s) for
--   a European style option.</li>
--   </ol>
commodPhysicExerc_choice0 :: CommodityPhysicalExercise -> (Maybe (OneOf2 CommodityPhysicalAmericanExercise CommodityPhysicalEuropeanExercise))

-- | Specifies whether or not Automatic Exercise applies to a Commodity
--   Option Transaction.
commodPhysicExerc_automaticExercise :: CommodityPhysicalExercise -> Maybe Boolean

-- | Specifies whether or not Written Confirmation applies to a Commodity
--   Option Transaction.
commodPhysicExerc_writtenConfirmation :: CommodityPhysicalExercise -> Maybe Boolean

-- | A type defining the physical quantity of the commodity to be
--   delivered.
data CommodityPhysicalQuantity
CommodityPhysicalQuantity :: Maybe ID -> (Maybe (OneOf2 CommodityNotionalQuantity CommodityPhysicalQuantitySchedule)) -> UnitQuantity -> CommodityPhysicalQuantity
commodPhysicQuant_ID :: CommodityPhysicalQuantity -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>The Quantity per Delivery Period.</li>
--   <li>Allows the documentation of a shaped quantity trade where the
--   quantity changes over the life of the transaction.</li>
--   </ol>
commodPhysicQuant_choice0 :: CommodityPhysicalQuantity -> (Maybe (OneOf2 CommodityNotionalQuantity CommodityPhysicalQuantitySchedule))

-- | The Total Quantity of the commodity to be delivered.
commodPhysicQuant_totalPhysicalQuantity :: CommodityPhysicalQuantity -> UnitQuantity

-- | An abstract base class for physical quantity types.
data CommodityPhysicalQuantityBase
CommodityPhysicalQuantityBase_GasPhysicalQuantity :: GasPhysicalQuantity -> CommodityPhysicalQuantityBase
CommodityPhysicalQuantityBase_ElectricityPhysicalQuantity :: ElectricityPhysicalQuantity -> CommodityPhysicalQuantityBase
CommodityPhysicalQuantityBase_CommodityPhysicalQuantity :: CommodityPhysicalQuantity -> CommodityPhysicalQuantityBase

-- | The Quantity per Delivery Period. There must be a Quantity step
--   specified for each Delivery Period, regardless of whether the Quantity
--   changes or remains the same between periods.
data CommodityPhysicalQuantitySchedule
CommodityPhysicalQuantitySchedule :: Maybe ID -> [CommodityNotionalQuantity] -> (Maybe (OneOf2 CalculationPeriodsReference CalculationPeriodsScheduleReference)) -> CommodityPhysicalQuantitySchedule
commodPhysicQuantSched_ID :: CommodityPhysicalQuantitySchedule -> Maybe ID

-- | The quantity per Calculation Period. There must be a quantity
--   specified for each Calculation Period, regardless of whether the
--   quantity changes or remains the same between periods.
commodPhysicQuantSched_quantityStep :: CommodityPhysicalQuantitySchedule -> [CommodityNotionalQuantity]

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to the Delivery Periods defined
--   elsewhere.</li>
--   <li>A pointer style reference to the Calculation Periods Schedule
--   defined elsewhere.</li>
--   </ol>
commodPhysicQuantSched_choice1 :: CommodityPhysicalQuantitySchedule -> (Maybe (OneOf2 CalculationPeriodsReference CalculationPeriodsScheduleReference))

-- | The pipeline through which the physical commodity will be delivered.
data CommodityPipeline
CommodityPipeline :: Scheme -> CommodityPipelineAttributes -> CommodityPipeline
data CommodityPipelineAttributes
CommodityPipelineAttributes :: Maybe AnyURI -> CommodityPipelineAttributes
commodPipelAttrib_pipelineScheme :: CommodityPipelineAttributes -> Maybe AnyURI

-- | The pipeline cycle during which the physical commodity will be
--   delivered.
data CommodityPipelineCycle
CommodityPipelineCycle :: Scheme -> CommodityPipelineCycleAttributes -> CommodityPipelineCycle
data CommodityPipelineCycleAttributes
CommodityPipelineCycleAttributes :: AnyURI -> CommodityPipelineCycleAttributes
commodPipelCycleAttrib_pipelineCycleScheme :: CommodityPipelineCycleAttributes -> AnyURI

-- | The commodity option premium payable by the buyer to the seller.
data CommodityPremium
CommodityPremium :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe AdjustableOrRelativeDate -> Maybe NonNegativeMoney -> NonNegativeMoney -> CommodityPremium
commodPremium_ID :: CommodityPremium -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
commodPremium_payerPartyReference :: CommodityPremium -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
commodPremium_payerAccountReference :: CommodityPremium -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
commodPremium_receiverPartyReference :: CommodityPremium -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
commodPremium_receiverAccountReference :: CommodityPremium -> Maybe AccountReference

-- | The payment date, which can be expressed as either an adjustable or
--   relative date.
commodPremium_paymentDate :: CommodityPremium -> Maybe AdjustableOrRelativeDate

-- | Non negative payment amount.
commodPremium_paymentAmount :: CommodityPremium -> Maybe NonNegativeMoney

-- | The currency amount of premium to be paid per Unit of the Total
--   Notional Quantity.
commodPremium_premiumPerUnit :: CommodityPremium -> NonNegativeMoney

-- | The dates on which prices are observed for the underlyer.
data CommodityPricingDates
CommodityPricingDates :: Maybe ID -> (Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference)) -> OneOf2 (Maybe (Lag), OneOf3 (Maybe (CommodityDayTypeEnum), Maybe (OneOf2 (Maybe (CommodityFrequencyType), Maybe (PositiveInteger)) ([DayOfWeekEnum], Maybe (Integer))), Maybe (CommodityBusinessCalendar)) [SettlementPeriods] [SettlementPeriodsReference]) [AdjustableDates] -> CommodityPricingDates
commodPricingDates_ID :: CommodityPricingDates -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to the Calculation Periods defined on
--   another leg.</li>
--   <li>A pointer style reference to the Calculation Periods Schedule
--   defined on another leg.</li>
--   <li>A pointer style reference to single-day-duration Calculation
--   Periods defined on another leg.</li>
--   </ol>
commodPricingDates_choice0 :: CommodityPricingDates -> (Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference))

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The pricing period per calculation period if the pricing days do
--   not wholly fall within the respective calculation period.</li>
--   <li>unknown</li>
--   </ul>
--   
--   <ol>
--   <li>A list of adjustable dates on which the trade would price. Each
--   date will price for the Calculation Period within which it falls.</li>
--   </ol>
commodPricingDates_choice1 :: CommodityPricingDates -> OneOf2 (Maybe (Lag), OneOf3 (Maybe (CommodityDayTypeEnum), Maybe (OneOf2 (Maybe (CommodityFrequencyType), Maybe (PositiveInteger)) ([DayOfWeekEnum], Maybe (Integer))), Maybe (CommodityBusinessCalendar)) [SettlementPeriods] [SettlementPeriodsReference]) [AdjustableDates]

-- | A scheme identifying the grade of physical commodity product to be
--   delivered.
data CommodityProductGrade
CommodityProductGrade :: Scheme -> CommodityProductGradeAttributes -> CommodityProductGrade
data CommodityProductGradeAttributes
CommodityProductGradeAttributes :: Maybe AnyURI -> CommodityProductGradeAttributes
commodProductGradeAttrib_productGradeScheme :: CommodityProductGradeAttributes -> Maybe AnyURI

-- | A type for defining the frequency at which the Notional Quantity is
--   deemed to apply for purposes of calculating the Total Notional
--   Quantity.
data CommodityQuantityFrequency
CommodityQuantityFrequency :: Scheme -> CommodityQuantityFrequencyAttributes -> CommodityQuantityFrequency
data CommodityQuantityFrequencyAttributes
CommodityQuantityFrequencyAttributes :: Maybe AnyURI -> CommodityQuantityFrequencyAttributes
cqfa_quantityFrequencyScheme :: CommodityQuantityFrequencyAttributes -> Maybe AnyURI

-- | The Expiration Dates of the trade relative to the Calculation Periods.
data CommodityRelativeExpirationDates
CommodityRelativeExpirationDates :: Maybe ID -> Maybe CommodityExpireRelativeToEvent -> Maybe DateOffset -> (Maybe (OneOf2 BusinessCentersReference BusinessCenters)) -> CommodityRelativeExpirationDates
commodRelatExpirDates_ID :: CommodityRelativeExpirationDates -> Maybe ID

-- | Specifies whether the payment(s) occur relative to the date of a
--   physical event.
commodRelatExpirDates_expireRelativeToEvent :: CommodityRelativeExpirationDates -> Maybe CommodityExpireRelativeToEvent

-- | Specifies any offset from the adjusted Calculation Period start date
--   or adjusted Calculation Period end date applicable to each Payment
--   Date.
commodRelatExpirDates_expirationDateOffset :: CommodityRelativeExpirationDates -> Maybe DateOffset

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to a set of financial business centers
--   defined elsewhere in the document. This set of business centers is
--   used to determine whether a particular day is a business day or
--   not.</li>
--   <li>businessCenters</li>
--   </ol>
commodRelatExpirDates_choice2 :: CommodityRelativeExpirationDates -> (Maybe (OneOf2 BusinessCentersReference BusinessCenters))

-- | The Payment Dates of the trade relative to the Calculation Periods.
data CommodityRelativePaymentDates
CommodityRelativePaymentDates :: Maybe ID -> (Maybe (OneOf2 PayRelativeToEnum CommodityPayRelativeToEvent)) -> (Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference)) -> Maybe DateOffset -> (Maybe (OneOf2 BusinessCentersReference BusinessCenters)) -> CommodityRelativePaymentDates
commodRelatPaymentDates_ID :: CommodityRelativePaymentDates -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>Specifies whether the payment(s) occur relative to a date such as
--   the end of each Calculation Period or the last Pricing Date in each
--   Calculation Period.</li>
--   <li>Specifies whether the payment(s) occur relative to the date of a
--   physical event.</li>
--   </ol>
commodRelatPaymentDates_choice0 :: CommodityRelativePaymentDates -> (Maybe (OneOf2 PayRelativeToEnum CommodityPayRelativeToEvent))

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to the Calculation Periods defined on
--   another leg.</li>
--   <li>A pointer style reference to the Calculation Periods Schedule
--   defined on another leg.</li>
--   <li>A pointer style reference to single-day-duration Calculation
--   Periods defined on another leg.</li>
--   </ol>
commodRelatPaymentDates_choice1 :: CommodityRelativePaymentDates -> (Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference))

-- | Specifies any offset from the adjusted Calculation Period start date
--   or adjusted Calculation Period end date applicable to each Payment
--   Date.
commodRelatPaymentDates_paymentDaysOffset :: CommodityRelativePaymentDates -> Maybe DateOffset

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to a set of financial business centers
--   defined elsewhere in the document. This set of business centers is
--   used to determine whether a particular day is a business day or
--   not.</li>
--   <li>businessCenters</li>
--   </ol>
commodRelatPaymentDates_choice3 :: CommodityRelativePaymentDates -> (Maybe (OneOf2 BusinessCentersReference BusinessCenters))

-- | The notional quantity of electricity that applies to one or more
--   groups of Settlement Periods.
data CommoditySettlementPeriodsNotionalQuantity
CommoditySettlementPeriodsNotionalQuantity :: Maybe ID -> QuantityUnit -> Maybe CommodityQuantityFrequency -> Maybe Decimal -> [SettlementPeriodsReference] -> CommoditySettlementPeriodsNotionalQuantity
cspnq_ID :: CommoditySettlementPeriodsNotionalQuantity -> Maybe ID

-- | Quantity Unit is the unit of measure applicable for the quantity on
--   the Transaction.
cspnq_quantityUnit :: CommoditySettlementPeriodsNotionalQuantity -> QuantityUnit

-- | The frequency at which the Notional Quantity is deemed to apply for
--   purposes of calculating the Total Notional Quantity.
cspnq_quantityFrequency :: CommoditySettlementPeriodsNotionalQuantity -> Maybe CommodityQuantityFrequency

-- | Amount of commodity per quantity frequency.
cspnq_quantity :: CommoditySettlementPeriodsNotionalQuantity -> Maybe Decimal

-- | The range(s) of Settlement Periods to which the Notional Quantity
--   applies.
cspnq_settlementPeriodsReference :: CommoditySettlementPeriodsNotionalQuantity -> [SettlementPeriodsReference]

-- | The notional quantity schedule of electricity that applies to one or
--   more groups of Settlement Periods.
data CommoditySettlementPeriodsNotionalQuantitySchedule
CommoditySettlementPeriodsNotionalQuantitySchedule :: [CommodityNotionalQuantity] -> [SettlementPeriodsReference] -> CommoditySettlementPeriodsNotionalQuantitySchedule

-- | For an electricity transaction, the Notional Quantity for a given
--   Calculation Period during the life of the trade which applies to the
--   range(s) of Settlement Periods referenced by
--   settlementPeriodsReference. There must be a
--   settlementPeriodsNotionalQuantityStep specified for each Calculation
--   Period, regardless of whether the NotionalQuantity changes or remains
--   the same between periods.
cspnqs_settlementPeriodsNotionalQuantityStep :: CommoditySettlementPeriodsNotionalQuantitySchedule -> [CommodityNotionalQuantity]

-- | The range(s) of Settlement Periods to which the Fixed Price steps
--   apply.
cspnqs_settlementPeriodsReference :: CommoditySettlementPeriodsNotionalQuantitySchedule -> [SettlementPeriodsReference]

-- | The fixed price schedule for electricity that applies to one or more
--   groups of Settlement Periods.
data CommoditySettlementPeriodsPriceSchedule
CommoditySettlementPeriodsPriceSchedule :: [FixedPrice] -> [SettlementPeriodsReference] -> CommoditySettlementPeriodsPriceSchedule

-- | For an electricity transaction, the Fixed Price for a given
--   Calculation Period during the life of the trade which applies to the
--   range(s) of Settlement Periods referenced by settlementPeriods
--   Reference. There must be a Fixed Price step specified for each
--   Calculation Period, regardless of whether the Fixed Price changes or
--   remains the same between periods.
cspps_settlementPeriodsPriceStep :: CommoditySettlementPeriodsPriceSchedule -> [FixedPrice]

-- | The range(s) of Settlement Periods to which the Fixed Price steps
--   apply.
cspps_settlementPeriodsReference :: CommoditySettlementPeriodsPriceSchedule -> [SettlementPeriodsReference]
data CommoditySpread
CommoditySpread :: Maybe ID -> Currency -> Decimal -> Maybe Decimal -> Maybe QuantityUnit -> CommoditySpread
commodSpread_ID :: CommoditySpread -> Maybe ID

-- | The currency in which an amount is denominated.
commodSpread_currency :: CommoditySpread -> Currency

-- | The monetary quantity in currency units.
commodSpread_amount :: CommoditySpread -> Decimal

-- | spreadConversionFactor should be used when the unit of measure of the
--   Commodity Reference Price and the unit of measure in which the spread
--   is quoted are different. The value of spreadConversionFactor is the
--   number of units of measure in which the spread is quoted per unit of
--   measure of the Commodity Reference Price.
commodSpread_spreadConversionFactor :: CommoditySpread -> Maybe Decimal

-- | spreadUnit should be used when the unit of measure of the Commodity
--   Reference Price and the unit of measure in which the spread is quoted
--   are different. The value of spreadUnit is the unit of measure in which
--   the spread is quoted.
commodSpread_spreadUnit :: CommoditySpread -> Maybe QuantityUnit

-- | The Spread per Calculation Period. There must be a Spread specified
--   for each Calculation Period, regardless of whether the Spread changes
--   or remains the same between periods.
data CommoditySpreadSchedule
CommoditySpreadSchedule :: [CommoditySpread] -> (Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference)) -> CommoditySpreadSchedule

-- | The spread per Calculation Period. There must be a spread step
--   specified for each Calculation Period, regardless of whether the
--   spread changes or remains the same between periods.
commodSpreadSched_spreadStep :: CommoditySpreadSchedule -> [CommoditySpread]

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to the Calculation Periods defined on
--   another leg.</li>
--   <li>A pointer style reference to the Calculation Periods Schedule
--   defined on another leg.</li>
--   <li>A pointer style reference to single-day-duration Calculation
--   Periods defined on another leg.</li>
--   </ol>
commodSpreadSched_choice1 :: CommoditySpreadSchedule -> (Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference))

-- | The Strike Price per Unit per Calculation Period. There must be a
--   Strike Price per Unit step specified for each Calculation Period,
--   regardless of whether the Strike changes or remains the same between
--   periods.
data CommodityStrikeSchedule
CommodityStrikeSchedule :: [NonNegativeMoney] -> (Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference)) -> CommodityStrikeSchedule

-- | The strike price per unit per Calculation Period. There must be a
--   strike price per unit specified for each Calculation Period,
--   regardless of whether the price changes or remains the same between
--   periods.
commodStrikeSched_strikePricePerUnitStep :: CommodityStrikeSchedule -> [NonNegativeMoney]

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to the Calculation Periods defined on
--   another leg.</li>
--   <li>A pointer style reference to the Calculation Periods Schedule
--   defined on another leg.</li>
--   <li>A pointer style reference to single-day-duration Calculation
--   Periods defined on another leg.</li>
--   </ol>
commodStrikeSched_choice1 :: CommodityStrikeSchedule -> (Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference))

-- | Commodity Swap.
data CommoditySwap
CommoditySwap :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> AdjustableOrRelativeDate -> AdjustableOrRelativeDate -> Maybe IdentifiedCurrency -> [CommoditySwapLeg] -> Maybe Boolean -> Maybe CommodityMarketDisruption -> Maybe CommodityBullionSettlementDisruptionEnum -> Maybe Rounding -> CommoditySwap
commodSwap_ID :: CommoditySwap -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
commodSwap_primaryAssetClass :: CommoditySwap -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
commodSwap_secondaryAssetClass :: CommoditySwap -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
commodSwap_productType :: CommoditySwap -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
commodSwap_productId :: CommoditySwap -> [ProductId]

-- | Specifies the effective date of this leg of the swap. When defined in
--   relation to a date specified somewhere else in the document (through
--   the relativeDate component), this element will typically point to the
--   effective date of the other leg of the swap.
commodSwap_effectiveDate :: CommoditySwap -> AdjustableOrRelativeDate

-- | Specifies the termination date of this leg of the swap. When defined
--   in relation to a date specified somewhere else in the document
--   (through the relativeDate component), this element will typically
--   point to the termination date of the other leg of the swap.
commodSwap_terminationDate :: CommoditySwap -> AdjustableOrRelativeDate

-- | The currency into which the Commodity Swap Transaction will settle. If
--   this is not the same as the currency in which the Commodity Reference
--   Price is quoted on a given floating leg of the Commodity Swap
--   Transaction, then an FX rate should also be specified for that leg.
commodSwap_settlementCurrency :: CommoditySwap -> Maybe IdentifiedCurrency

-- | Defines the substitutable commodity swap leg
commoditySwap_leg :: CommoditySwap -> [CommoditySwapLeg]

-- | Common pricing may be relevant for a Transaction that references more
--   than one Commodity Reference Price. If Common Pricing is not specified
--   as applicable, it will be deemed not to apply.
commodSwap_commonPricing :: CommoditySwap -> Maybe Boolean

-- | Market disruption events as defined in the ISDA 1993 Commodity
--   Definitions or in ISDA 2005 Commodity Definitions, as applicable.
commodSwap_marketDisruption :: CommoditySwap -> Maybe CommodityMarketDisruption

-- | The consequences of Bullion Settlement Disruption Events.
commodSwap_settlementDisruption :: CommoditySwap -> Maybe CommodityBullionSettlementDisruptionEnum

-- | Rounding direction and precision for amounts.
commodSwap_rounding :: CommoditySwap -> Maybe Rounding

-- | Commodity Swaption.
data CommoditySwaption
CommoditySwaption :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe PutCallEnum -> Maybe CommoditySwaptionUnderlying -> Maybe CommodityPhysicalExercise -> Maybe CommodityPremium -> Maybe Boolean -> Maybe CommodityMarketDisruption -> Maybe CommodityBullionSettlementDisruptionEnum -> Maybe Rounding -> CommoditySwaption
commodSwapt_ID :: CommoditySwaption -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
commodSwapt_primaryAssetClass :: CommoditySwaption -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
commodSwapt_secondaryAssetClass :: CommoditySwaption -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
commodSwapt_productType :: CommoditySwaption -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
commodSwapt_productId :: CommoditySwaption -> [ProductId]

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
commodSwapt_buyerPartyReference :: CommoditySwaption -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
commodSwapt_buyerAccountReference :: CommoditySwaption -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
commodSwapt_sellerPartyReference :: CommoditySwaption -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
commodSwapt_sellerAccountReference :: CommoditySwaption -> Maybe AccountReference

-- | The type of option transaction.
commodSwapt_optionType :: CommoditySwaption -> Maybe PutCallEnum

-- | The underlying commodity swap definiton.
commodSwapt_commoditySwap :: CommoditySwaption -> Maybe CommoditySwaptionUnderlying

-- | The parameters for defining how the commodity option can be exercised
--   into a physical transaction.
commodSwapt_physicalExercise :: CommoditySwaption -> Maybe CommodityPhysicalExercise

-- | The option premium payable by the buyer to the seller.
commodSwapt_premium :: CommoditySwaption -> Maybe CommodityPremium

-- | Common pricing may be relevant for a Transaction that references more
--   than one Commodity Reference Price. If Common Pricing is not specified
--   as applicable, it will be deemed not to apply.
commodSwapt_commonPricing :: CommoditySwaption -> Maybe Boolean

-- | Market disruption events as defined in the ISDA 1993 Commodity
--   Definitions or in ISDA 2005 Commodity Definitions, as applicable.
commodSwapt_marketDisruption :: CommoditySwaption -> Maybe CommodityMarketDisruption

-- | The consequences of Bullion Settlement Disruption Events.
commodSwapt_settlementDisruption :: CommoditySwaption -> Maybe CommodityBullionSettlementDisruptionEnum

-- | Rounding direction and precision for amounts.
commodSwapt_rounding :: CommoditySwaption -> Maybe Rounding
data CommoditySwaptionUnderlying
CommoditySwaptionUnderlying :: AdjustableOrRelativeDate -> AdjustableOrRelativeDate -> Maybe IdentifiedCurrency -> [CommoditySwapLeg] -> Maybe Boolean -> Maybe CommodityMarketDisruption -> Maybe CommodityBullionSettlementDisruptionEnum -> Maybe Rounding -> CommoditySwaptionUnderlying

-- | Specifies the effective date of this leg of the swap. When defined in
--   relation to a date specified somewhere else in the document (through
--   the relativeDate component), this element will typically point to the
--   effective date of the other leg of the swap.
commodSwaptUnderly_effectiveDate :: CommoditySwaptionUnderlying -> AdjustableOrRelativeDate

-- | Specifies the termination date of this leg of the swap. When defined
--   in relation to a date specified somewhere else in the document
--   (through the relativeDate component), this element will typically
--   point to the termination date of the other leg of the swap.
commodSwaptUnderly_terminationDate :: CommoditySwaptionUnderlying -> AdjustableOrRelativeDate

-- | The currency into which the Commodity Swap Transaction will settle. If
--   this is not the same as the currency in which the Commodity Reference
--   Price is quoted on a given floating leg of the Commodity Swap
--   Transaction, then an FX rate should also be specified for that leg.
commodSwaptUnderly_settlementCurrency :: CommoditySwaptionUnderlying -> Maybe IdentifiedCurrency

-- | Defines the substitutable commodity swap leg
commodSwaptUnderly_commoditySwapLeg :: CommoditySwaptionUnderlying -> [CommoditySwapLeg]

-- | Common pricing may be relevant for a Transaction that references more
--   than one Commodity Reference Price. If Common Pricing is not specified
--   as applicable, it will be deemed not to apply.
commodSwaptUnderly_commonPricing :: CommoditySwaptionUnderlying -> Maybe Boolean

-- | Market disruption events as defined in the ISDA 1993 Commodity
--   Definitions or in ISDA 2005 Commodity Definitions, as applicable.
commodSwaptUnderly_marketDisruption :: CommoditySwaptionUnderlying -> Maybe CommodityMarketDisruption

-- | The consequences of Bullion Settlement Disruption Events.
commodSwaptUnderly_settlementDisruption :: CommoditySwaptionUnderlying -> Maybe CommodityBullionSettlementDisruptionEnum

-- | Rounding direction and precision for amounts.
commodSwaptUnderly_rounding :: CommoditySwaptionUnderlying -> Maybe Rounding

-- | Abstract base class for all commodity swap legs
data CommoditySwapLeg
CommoditySwapLeg_PhysicalSwapLeg :: PhysicalSwapLeg -> CommoditySwapLeg
CommoditySwapLeg_NonPeriodicFixedPriceLeg :: NonPeriodicFixedPriceLeg -> CommoditySwapLeg
CommoditySwapLeg_FinancialSwapLeg :: FinancialSwapLeg -> CommoditySwapLeg

-- | A Disruption Fallback.
data DisruptionFallback
DisruptionFallback :: Scheme -> DisruptionFallbackAttributes -> DisruptionFallback
data DisruptionFallbackAttributes
DisruptionFallbackAttributes :: Maybe AnyURI -> DisruptionFallbackAttributes
disrupFallbAttrib_commodityMarketDisruptionFallbackScheme :: DisruptionFallbackAttributes -> Maybe AnyURI

-- | The physical delivery conditions for electricity.
data ElectricityDelivery
ElectricityDelivery :: OneOf2 (ElectricityDeliveryPoint, ElectricityDeliveryType, Maybe (ElectricityTransmissionContingency)) (Maybe (CommodityDeliveryPoint), Maybe (PartyReference)) -> ElectricityDelivery

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The point at which delivery of the electricity will occur.</li>
--   <li>Indicates the under what conditions the Parties' delivery
--   obligations apply.</li>
--   <li>Indicates that the performance of the buyer or seller shall be
--   excused (under the conditions specified) if transmission of the
--   elctricity is unavailable or interrupted.</li>
--   </ul>
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The zone covering potential delivery points for the
--   electricity.</li>
--   <li>Indicates the party able to decide which delivery point within the
--   deliveryPoint is used for delivery. For EEI transactions, this should
--   reference the seller of the electricity.</li>
--   </ul>
electrDeliv_choice0 :: ElectricityDelivery -> OneOf2 (ElectricityDeliveryPoint, ElectricityDeliveryType, Maybe (ElectricityTransmissionContingency)) (Maybe (CommodityDeliveryPoint), Maybe (PartyReference))

-- | The physical delivery obligation options specific to a firm
--   transaction.
data ElectricityDeliveryFirm
ElectricityDeliveryFirm :: Maybe Boolean -> ElectricityDeliveryFirm

-- | If true, indicates that the buyer and seller should be excused of
--   their delivery obligations when such performance is prevented by Force
--   Majeure. For EEI transactions, this would indicate <a>Firm (LD)</a> If
--   false, indicates that the buyer and seller should not be excused of
--   their delivery obligations when such performance is prevented by Force
--   Majeure. For EEI transactions, this would indicate <a>Firm (No Force
--   Majeure)</a>
electrDelivFirm_forceMajeure :: ElectricityDeliveryFirm -> Maybe Boolean

-- | The different options for specifying the Delivery Periods for a
--   physically settled electricity trade.
data ElectricityDeliveryPeriods
ElectricityDeliveryPeriods :: Maybe ID -> OneOf3 AdjustableDates CommodityCalculationPeriodsSchedule ((Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference))) -> [SettlementPeriods] -> ElectricityDeliveryPeriods
electrDelivPeriods_ID :: ElectricityDeliveryPeriods -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>The Delivery Periods for this leg of the swap. This type is only
--   intended to be used if the Delivery Periods differ from the
--   Calculation Periods on the fixed or floating leg. If DeliveryPeriods
--   mirror another leg, then the calculationPeriodsReference element
--   should be used to point to the Calculation Periods on that leg - or
--   the calculationPeriodsScheduleReference can be used to point to the
--   Calculation Periods Schedule for that leg.</li>
--   <li>The Delivery Periods for this leg of the swap. This type is only
--   intended to be used if the Delivery Periods differ from the
--   Calculation Periods on the fixed or floating leg. If DeliveryPeriods
--   mirror another leg, then the calculationPeriodsReference element
--   should be used to point to the Calculation Periods on that leg - or
--   the calculationPeriodsScheduleReference can be used to point to the
--   Calculation Periods Schedule for that leg.</li>
--   <li>unknown</li>
--   </ol>
electrDelivPeriods_choice0 :: ElectricityDeliveryPeriods -> OneOf3 AdjustableDates CommodityCalculationPeriodsSchedule ((Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference)))

-- | The periods within the Delivery Periods during which the electricity
--   will be delivered.
electrDelivPeriods_settlementPeriods :: ElectricityDeliveryPeriods -> [SettlementPeriods]

-- | A scheme identifying the types of the Delivery Point for a physically
--   settled electricity trade.
data ElectricityDeliveryPoint
ElectricityDeliveryPoint :: Scheme -> ElectricityDeliveryPointAttributes -> ElectricityDeliveryPoint
data ElectricityDeliveryPointAttributes
ElectricityDeliveryPointAttributes :: Maybe AnyURI -> ElectricityDeliveryPointAttributes
electrDelivPointAttrib_deliveryPointScheme :: ElectricityDeliveryPointAttributes -> Maybe AnyURI

-- | The physical delivery obligation options specific to a system firm
--   transaction.
data ElectricityDeliverySystemFirm
ElectricityDeliverySystemFirm :: Maybe Boolean -> Maybe CommodityDeliveryPoint -> ElectricityDeliverySystemFirm

-- | Indicates that the trade is for a System Firm product. Should always
--   be set to <a>true</a>.
electrDelivSystemFirm_applicable :: ElectricityDeliverySystemFirm -> Maybe Boolean
electrDelivSystemFirm_system :: ElectricityDeliverySystemFirm -> Maybe CommodityDeliveryPoint
data ElectricityDeliveryType
ElectricityDeliveryType :: (Maybe (OneOf4 ElectricityDeliveryFirm Boolean ElectricityDeliverySystemFirm ElectricityDeliveryUnitFirm)) -> ElectricityDeliveryType

-- | Choice between:
--   
--   <ol>
--   <li>Indicates under what condtitions the Parties' delivery obligations
--   apply.</li>
--   <li>If present and set to true, indicates that delivery or receipt of
--   the electricity may be interrupted for any reason or for no reason,
--   without liability on the part of either Party. This element should
--   never have a value of false.</li>
--   <li>Indicates that the electricity is intended to be supplied from the
--   owned or controlled generation or pre-existing purchased power assets
--   of the system specified.</li>
--   <li>Indicates that the electricity is intended to be supplied from a
--   generation asset which can optionally be specified.</li>
--   </ol>
electrDelivType_choice0 :: ElectricityDeliveryType -> (Maybe (OneOf4 ElectricityDeliveryFirm Boolean ElectricityDeliverySystemFirm ElectricityDeliveryUnitFirm))

-- | The physical delivery obligation options specific to a unit firm
--   transaction.
data ElectricityDeliveryUnitFirm
ElectricityDeliveryUnitFirm :: Maybe Boolean -> Maybe CommodityDeliveryPoint -> ElectricityDeliveryUnitFirm

-- | Indicates that the trade is for a Unit Firm product. Should always be
--   set to <a>true</a>.
electrDelivUnitFirm_applicable :: ElectricityDeliveryUnitFirm -> Maybe Boolean
electrDelivUnitFirm_generationAsset :: ElectricityDeliveryUnitFirm -> Maybe CommodityDeliveryPoint

-- | A type defining the physical quantity of the electricity to be
--   delivered.
data ElectricityPhysicalDeliveryQuantity
ElectricityPhysicalDeliveryQuantity :: Maybe ID -> QuantityUnit -> Maybe CommodityQuantityFrequency -> Maybe Decimal -> [SettlementPeriodsReference] -> ElectricityPhysicalDeliveryQuantity
epdq_ID :: ElectricityPhysicalDeliveryQuantity -> Maybe ID

-- | Quantity Unit is the unit of measure applicable for the quantity on
--   the Transaction.
epdq_quantityUnit :: ElectricityPhysicalDeliveryQuantity -> QuantityUnit

-- | The frequency at which the Notional Quantity is deemed to apply for
--   purposes of calculating the Total Notional Quantity.
epdq_quantityFrequency :: ElectricityPhysicalDeliveryQuantity -> Maybe CommodityQuantityFrequency

-- | Amount of commodity per quantity frequency.
epdq_quantity :: ElectricityPhysicalDeliveryQuantity -> Maybe Decimal

-- | A pointer style reference to the range(s) of Settlement Periods to
--   which this quantity applies.
epdq_settlementPeriodsReference :: ElectricityPhysicalDeliveryQuantity -> [SettlementPeriodsReference]

-- | Allows the documentation of a shaped quantity trade where the quantity
--   changes over the life of the transaction.
data ElectricityPhysicalDeliveryQuantitySchedule
ElectricityPhysicalDeliveryQuantitySchedule :: Maybe ID -> [CommodityNotionalQuantity] -> (Maybe (OneOf2 CalculationPeriodsReference CalculationPeriodsScheduleReference)) -> [SettlementPeriodsReference] -> ElectricityPhysicalDeliveryQuantitySchedule
epdqs_ID :: ElectricityPhysicalDeliveryQuantitySchedule -> Maybe ID

-- | The quantity per Calculation Period. There must be a quantity
--   specified for each Calculation Period, regardless of whether the
--   quantity changes or remains the same between periods.
epdqs_quantityStep :: ElectricityPhysicalDeliveryQuantitySchedule -> [CommodityNotionalQuantity]

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to the Delivery Periods defined
--   elsewhere.</li>
--   <li>A pointer style reference to the Calculation Periods Schedule
--   defined elsewhere.</li>
--   </ol>
epdqs_choice1 :: ElectricityPhysicalDeliveryQuantitySchedule -> (Maybe (OneOf2 CalculationPeriodsReference CalculationPeriodsScheduleReference))

-- | A pointer style reference to the range(s) of Settlement Periods to
--   which this quantity applies.
epdqs_settlementPeriodsReference :: ElectricityPhysicalDeliveryQuantitySchedule -> [SettlementPeriodsReference]

-- | Physically settled leg of a physically settled electricity
--   transaction.
data ElectricityPhysicalLeg
ElectricityPhysicalLeg :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe CommodityDeliveryPeriods -> [SettlementPeriods] -> Maybe SettlementPeriodsSchedule -> ElectricityProduct -> ElectricityDelivery -> ElectricityPhysicalQuantity -> ElectricityPhysicalLeg
electrPhysicLeg_ID :: ElectricityPhysicalLeg -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
electrPhysicLeg_payerPartyReference :: ElectricityPhysicalLeg -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
electrPhysicLeg_payerAccountReference :: ElectricityPhysicalLeg -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
electrPhysicLeg_receiverPartyReference :: ElectricityPhysicalLeg -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
electrPhysicLeg_receiverAccountReference :: ElectricityPhysicalLeg -> Maybe AccountReference

-- | The different options for specifying the Delivery or Supply Periods.
--   Unless the quantity or price is to vary periodically during the trade
--   or physical delivery occurs on a periodic basis, periodsSchedule
--   should be used and set to 1T.
electrPhysicLeg_deliveryPeriods :: ElectricityPhysicalLeg -> Maybe CommodityDeliveryPeriods

-- | The specification of the Settlement Periods in which the electricity
--   will be delivered. The Settlement Periods will apply from and
--   including the Effective Date up to and including the Termination Date.
--   If more than one settlementPeriods element is present this indicates
--   multiple ranges of Settlement Periods apply to the entire trade - for
--   example off-peak weekdays and all day weekends. Settlement Period
--   ranges should not overlap.
electrPhysicLeg_settlementPeriods :: ElectricityPhysicalLeg -> [SettlementPeriods]

-- | The specification of the Settlement Periods in which the electricity
--   will be delivered for a <a>shaped</a> trade i.e. where different
--   Settlement Period ranges will apply to different periods of the trade.
electrPhysicLeg_settlementPeriodsSchedule :: ElectricityPhysicalLeg -> Maybe SettlementPeriodsSchedule

-- | The specification of the electricity to be delivered.
electrPhysicLeg_electricity :: ElectricityPhysicalLeg -> ElectricityProduct

-- | The physical delivery conditions for the transaction.
electrPhysicLeg_deliveryConditions :: ElectricityPhysicalLeg -> ElectricityDelivery

-- | The different options for specifying the quantity.
electrPhysicLeg_deliveryQuantity :: ElectricityPhysicalLeg -> ElectricityPhysicalQuantity

-- | The quantity of gas to be delivered.
data ElectricityPhysicalQuantity
ElectricityPhysicalQuantity :: Maybe ID -> (Maybe (OneOf2 [ElectricityPhysicalDeliveryQuantity] [ElectricityPhysicalDeliveryQuantitySchedule])) -> UnitQuantity -> ElectricityPhysicalQuantity
electrPhysicQuant_ID :: ElectricityPhysicalQuantity -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>The Quantity per Delivery Period.</li>
--   <li>Allows the documentation of a shaped quantity trade where the
--   quantity changes over the life of the transaction. Note that if the
--   range of Settlement Periods also varies over the life of the
--   transaction this element should not be used. Instead, physicalQuantity
--   should be repeated for each range of Settlement Periods that apply at
--   any point during the trade.</li>
--   </ol>
electrPhysicQuant_choice0 :: ElectricityPhysicalQuantity -> (Maybe (OneOf2 [ElectricityPhysicalDeliveryQuantity] [ElectricityPhysicalDeliveryQuantitySchedule]))

-- | The Total Quantity of the commodity to be delivered.
electrPhysicQuant_totalPhysicalQuantity :: ElectricityPhysicalQuantity -> UnitQuantity

-- | The specification of the electricity to be delivered.
data ElectricityProduct
ElectricityProduct :: Maybe ElectricityProductTypeEnum -> Maybe PositiveDecimal -> ElectricityProduct

-- | The type of electricity product to be delivered.
electrProduct_type :: ElectricityProduct -> Maybe ElectricityProductTypeEnum

-- | The voltage, expressed as a number of volts, of the electricity to be
--   delivered.
electrProduct_voltage :: ElectricityProduct -> Maybe PositiveDecimal

-- | A structure to specify the tranmission contingency and the party that
--   bears the obligation.
data ElectricityTransmissionContingency
ElectricityTransmissionContingency :: Maybe ElectricityTransmissionContingencyType -> [PartyReference] -> ElectricityTransmissionContingency

-- | The conditions under which the party specified in contingentParty will
--   be excused from damages if transmission is interrupted or curtailed.
electrTransmContin_contingency :: ElectricityTransmissionContingency -> Maybe ElectricityTransmissionContingencyType

-- | The party to which the contingency applies.
electrTransmContin_contingentParty :: ElectricityTransmissionContingency -> [PartyReference]

-- | The type of transmission contingency, i.e. what portion of the
--   transmission the delivery obligations are applicable.
data ElectricityTransmissionContingencyType
ElectricityTransmissionContingencyType :: Scheme -> ElectricityTransmissionContingencyTypeAttributes -> ElectricityTransmissionContingencyType
data ElectricityTransmissionContingencyTypeAttributes
ElectricityTransmissionContingencyTypeAttributes :: Maybe AnyURI -> ElectricityTransmissionContingencyTypeAttributes
etcta_electricityTransmissionContingencyScheme :: ElectricityTransmissionContingencyTypeAttributes -> Maybe AnyURI

-- | The common components of a financially settled leg of a Commodity
--   Swap. This is an abstract type and should be extended by
--   commodity-specific types.
data FinancialSwapLeg
FinancialSwapLeg_FloatingPriceLeg :: FloatingPriceLeg -> FinancialSwapLeg
FinancialSwapLeg_FixedPriceLeg :: FixedPriceLeg -> FinancialSwapLeg

-- | A type defining the Fixed Price.
data FixedPrice
FixedPrice :: Maybe ID -> Decimal -> Currency -> QuantityUnit -> FixedPrice
fixedPrice_ID :: FixedPrice -> Maybe ID

-- | The Fixed Price.
fixedPrice_price :: FixedPrice -> Decimal

-- | Currency of the fixed price.
fixedPrice_priceCurrency :: FixedPrice -> Currency

-- | The unit of measure used to calculate the Fixed Price.
fixedPrice_priceUnit :: FixedPrice -> QuantityUnit

-- | Fixed Price Leg of a Commodity Swap.
data FixedPriceLeg
FixedPriceLeg :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> OneOf4 AdjustableDates AdjustableDates CommodityCalculationPeriodsSchedule ((Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference))) -> OneOf2 CommodityFixedPriceSchedule (OneOf4 FixedPrice Decimal NonNegativeMoney [SettlementPeriodsFixedPrice]) -> Maybe NonNegativeMoney -> OneOf2 (OneOf3 CommodityNotionalQuantitySchedule CommodityNotionalQuantity [CommoditySettlementPeriodsNotionalQuantity], Decimal) QuantityReference -> OneOf2 CommodityRelativePaymentDates ((Maybe (OneOf2 AdjustableDatesOrRelativeDateOffset Boolean))) -> Maybe FlatRateEnum -> Maybe NonNegativeMoney -> FixedPriceLeg
fixedPriceLeg_ID :: FixedPriceLeg -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
fixedPriceLeg_payerPartyReference :: FixedPriceLeg -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
fixedPriceLeg_payerAccountReference :: FixedPriceLeg -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
fixedPriceLeg_receiverPartyReference :: FixedPriceLeg -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
fixedPriceLeg_receiverAccountReference :: FixedPriceLeg -> Maybe AccountReference

-- | Choice between:
--   
--   <ol>
--   <li>The Calculation Period dates for this leg of the trade where the
--   Calculation Periods are all one day long, typically a
--   physically-settled emissions or metals trade. Only dates explicitly
--   included determine the Calculation Periods and there is a Calculation
--   Period for each date specified.</li>
--   <li>The Calculation Period start dates for this leg of the swap. This
--   type is only intended to be used if the Calculation Periods differ on
--   each leg. If Calculation Periods mirror another leg, then the
--   calculationPeriodsReference element should be used to point to the
--   Calculation Periods on that leg - or the
--   calculationPeriodsScheduleReference can be used to point to the
--   Calculation Periods Schedule for that leg.</li>
--   <li>The Calculation Periods for this leg of the swap. This type is
--   only intended to be used if the Calculation Periods differ on each
--   leg. If Calculation Periods mirror another leg, then the
--   calculationPeriodsReference element should be used to point to the
--   Calculation Periods on the other leg - or the
--   calculationPeriodsScheduleReference can be used to point to the
--   Calculation Periods Schedule for that leg.</li>
--   <li>unknown</li>
--   </ol>
fixedPriceLeg_choice4 :: FixedPriceLeg -> OneOf4 AdjustableDates AdjustableDates CommodityCalculationPeriodsSchedule ((Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference)))

-- | Choice between:
--   
--   <ol>
--   <li>Allows the specification of a Fixed Price that varies over the
--   life of the trade.</li>
--   <li>unknown</li>
--   </ol>
fixedPriceLeg_choice5 :: FixedPriceLeg -> OneOf2 CommodityFixedPriceSchedule (OneOf4 FixedPrice Decimal NonNegativeMoney [SettlementPeriodsFixedPrice])

-- | The total amount of all fixed payments due during the term of the
--   trade.
fixedPriceLeg_totalPrice :: FixedPriceLeg -> Maybe NonNegativeMoney

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>unknown</li>
--   <li>The Total Notional Quantity.</li>
--   </ul>
--   
--   <ol>
--   <li>A pointer style reference to a quantity defined on another
--   leg.</li>
--   </ol>
fixedPriceLeg_choice7 :: FixedPriceLeg -> OneOf2 (OneOf3 CommodityNotionalQuantitySchedule CommodityNotionalQuantity [CommoditySettlementPeriodsNotionalQuantity], Decimal) QuantityReference

-- | Choice between:
--   
--   <ol>
--   <li>The Payment Dates of the trade relative to the Calculation
--   Periods.</li>
--   <li>unknown</li>
--   </ol>
fixedPriceLeg_choice8 :: FixedPriceLeg -> OneOf2 CommodityRelativePaymentDates ((Maybe (OneOf2 AdjustableDatesOrRelativeDateOffset Boolean)))

-- | Whether the Flat Rate is the New Worldwide Tanker Nominal Freight
--   Scale for the Freight Index Route taken at the Trade Date of the
--   transaction or taken on each Pricing Date.
fixedPriceLeg_flatRate :: FixedPriceLeg -> Maybe FlatRateEnum

-- | If flatRate is set to <a>Fixed</a>, the actual value of the Flat Rate.
fixedPriceLeg_flatRateAmount :: FixedPriceLeg -> Maybe NonNegativeMoney

-- | A type to capture details relevant to the calculation of the floating
--   price.
data FloatingLegCalculation
FloatingLegCalculation :: CommodityPricingDates -> Maybe AveragingMethodEnum -> Maybe Decimal -> Maybe Rounding -> (Maybe (OneOf2 CommoditySpread [CommoditySpreadSchedule])) -> Maybe CommodityFx -> FloatingLegCalculation

-- | Commodity Pricing Dates.
floatLegCalc_pricingDates :: FloatingLegCalculation -> CommodityPricingDates

-- | The parties may specify a Method of Averaging where more than one
--   pricing Dates is being specified as being applicable.
floatLegCalc_averagingMethod :: FloatingLegCalculation -> Maybe AveragingMethodEnum

-- | If the Notional Quantity is specified in a unit that does not match
--   the unit in which the Commodity Reference Price is quoted, the scaling
--   or conversion factor used to convert the Commodity Reference Price
--   unit into the Notional Quantity unit should be stated here. If there
--   is no conversion, this element is not intended to be used.
floatLegCalc_conversionFactor :: FloatingLegCalculation -> Maybe Decimal

-- | Rounding direction and precision for price values.
floatLegCalc_rounding :: FloatingLegCalculation -> Maybe Rounding

-- | Choice between:
--   
--   <ol>
--   <li>The spread over or under the Commodity Reference Price for this
--   leg of the trade. This element is intended to be used for basis
--   trades.</li>
--   <li>The spread over or under the Commodity Reference Price for this
--   leg of the trade for each Calculation Period. This element is intended
--   to be used for basis trades.</li>
--   </ol>
floatLegCalc_choice4 :: FloatingLegCalculation -> (Maybe (OneOf2 CommoditySpread [CommoditySpreadSchedule]))

-- | FX observations to be used to convert the observed Commodity Reference
--   Price to the Settlement Currency.
floatLegCalc_fx :: FloatingLegCalculation -> Maybe CommodityFx

-- | Floating Price Leg of a Commodity Swap.
data FloatingPriceLeg
FloatingPriceLeg :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> OneOf4 AdjustableDates AdjustableDates CommodityCalculationPeriodsSchedule ((Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference))) -> Commodity -> OneOf2 (OneOf3 CommodityNotionalQuantitySchedule CommodityNotionalQuantity [CommoditySettlementPeriodsNotionalQuantity], Decimal) QuantityReference -> FloatingLegCalculation -> OneOf2 CommodityRelativePaymentDates ((Maybe (OneOf2 AdjustableDatesOrRelativeDateOffset Boolean))) -> Maybe FlatRateEnum -> Maybe NonNegativeMoney -> FloatingPriceLeg
floatPriceLeg_ID :: FloatingPriceLeg -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
floatPriceLeg_payerPartyReference :: FloatingPriceLeg -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
floatPriceLeg_payerAccountReference :: FloatingPriceLeg -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
floatPriceLeg_receiverPartyReference :: FloatingPriceLeg -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
floatPriceLeg_receiverAccountReference :: FloatingPriceLeg -> Maybe AccountReference

-- | Choice between:
--   
--   <ol>
--   <li>The Calculation Period dates for this leg of the trade where the
--   Calculation Periods are all one day long, typically a
--   physically-settled emissions or metals trade. Only dates explicitly
--   included determine the Calculation Periods and there is a Calculation
--   Period for each date specified.</li>
--   <li>The Calculation Period start dates for this leg of the swap. This
--   type is only intended to be used if the Calculation Periods differ on
--   each leg. If Calculation Periods mirror another leg, then the
--   calculationPeriodsReference element should be used to point to the
--   Calculation Periods on that leg - or the
--   calculationPeriodsScheduleReference can be used to point to the
--   Calculation Periods Schedule for that leg.</li>
--   <li>The Calculation Periods for this leg of the swap. This type is
--   only intended to be used if the Calculation Periods differ on each
--   leg. If Calculation Periods mirror another leg, then the
--   calculationPeriodsReference element should be used to point to the
--   Calculation Periods on the other leg - or the
--   calculationPeriodsScheduleReference can be used to point to the
--   Calculation Periods Schedule for that leg.</li>
--   <li>unknown</li>
--   </ol>
floatPriceLeg_choice4 :: FloatingPriceLeg -> OneOf4 AdjustableDates AdjustableDates CommodityCalculationPeriodsSchedule ((Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference)))

-- | Specifies the underlying instrument. At this time, only underlyers of
--   type Commodity are supported; the choice group in the future could
--   offer the possibility of adding other types later.
floatPriceLeg_commodity :: FloatingPriceLeg -> Commodity

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>unknown</li>
--   <li>The Total Notional Quantity.</li>
--   </ul>
--   
--   <ol>
--   <li>A pointer style reference to a quantity defined on another
--   leg.</li>
--   </ol>
floatPriceLeg_choice6 :: FloatingPriceLeg -> OneOf2 (OneOf3 CommodityNotionalQuantitySchedule CommodityNotionalQuantity [CommoditySettlementPeriodsNotionalQuantity], Decimal) QuantityReference

-- | Defines details relevant to the calculation of the floating price.
floatPriceLeg_calculation :: FloatingPriceLeg -> FloatingLegCalculation

-- | Choice between:
--   
--   <ol>
--   <li>The Payment Dates of the trade relative to the Calculation
--   Periods.</li>
--   <li>unknown</li>
--   </ol>
floatPriceLeg_choice8 :: FloatingPriceLeg -> OneOf2 CommodityRelativePaymentDates ((Maybe (OneOf2 AdjustableDatesOrRelativeDateOffset Boolean)))

-- | Whether the Flat Rate is the New Worldwide Tanker Nominal Freight
--   Scale for the Freight Index Route taken at the Trade Date of the
--   transaction or taken on each Pricing Date.
floatPriceLeg_flatRate :: FloatingPriceLeg -> Maybe FlatRateEnum

-- | If flatRate is set to <a>Fixed</a>, the actual value of the Flat Rate.
floatPriceLeg_flatRateAmount :: FloatingPriceLeg -> Maybe NonNegativeMoney

-- | The specification of the gas to be delivered.
data GasDelivery
GasDelivery :: (Maybe (OneOf2 GasDeliveryPoint (Maybe (CommodityDeliveryPoint), Maybe (CommodityDeliveryPoint)))) -> Maybe DeliveryTypeEnum -> Maybe CommodityHub -> Maybe CommodityHub -> GasDelivery

-- | Choice between:
--   
--   <ol>
--   <li>The physical or virtual point at which the commodity will be
--   delivered.</li>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The physical or virtual point at which the commodity enters a
--   transportation system.</li>
--   <li>The physical or virtual point at which the commodity is withdrawn
--   from a transportation system.</li>
--   </ul>
gasDelivery_choice0 :: GasDelivery -> (Maybe (OneOf2 GasDeliveryPoint (Maybe (CommodityDeliveryPoint), Maybe (CommodityDeliveryPoint))))

-- | Indicates whether the buyer and seller are contractually obliged to
--   consume and supply the specified quantities of the commodity.
gasDelivery_deliveryType :: GasDelivery -> Maybe DeliveryTypeEnum

-- | The hub code of the gas buyer.
gasDelivery_buyerHub :: GasDelivery -> Maybe CommodityHub

-- | The hub code of the has seller.
gasDelivery_sellerHub :: GasDelivery -> Maybe CommodityHub

-- | A scheme identifying the types of the Delivery Point for a physically
--   settled gas trade.
data GasDeliveryPoint
GasDeliveryPoint :: Scheme -> GasDeliveryPointAttributes -> GasDeliveryPoint
data GasDeliveryPointAttributes
GasDeliveryPointAttributes :: Maybe AnyURI -> GasDeliveryPointAttributes
gasDelivPointAttrib_deliveryPointScheme :: GasDeliveryPointAttributes -> Maybe AnyURI

-- | The different options for specifying the Delivery Periods for a
--   physically settled gas trade.
data GasDeliveryPeriods
GasDeliveryPeriods :: Maybe ID -> OneOf3 AdjustableDates CommodityCalculationPeriodsSchedule ((Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference))) -> PrevailingTime -> PrevailingTime -> GasDeliveryPeriods
gasDelivPeriods_ID :: GasDeliveryPeriods -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>The Delivery Periods for this leg of the swap. This type is only
--   intended to be used if the Delivery Periods differ from the
--   Calculation Periods on the fixed or floating leg. If DeliveryPeriods
--   mirror another leg, then the calculationPeriodsReference element
--   should be used to point to the Calculation Periods on that leg - or
--   the calculationPeriodsScheduleReference can be used to point to the
--   Calculation Periods Schedule for that leg.</li>
--   <li>The Delivery Periods for this leg of the swap. This type is only
--   intended to be used if the Delivery Periods differ from the
--   Calculation Periods on the fixed or floating leg. If DeliveryPeriods
--   mirror another leg, then the calculationPeriodsReference element
--   should be used to point to the Calculation Periods on that leg - or
--   the calculationPeriodsScheduleReference can be used to point to the
--   Calculation Periods Schedule for that leg.</li>
--   <li>unknown</li>
--   </ol>
gasDelivPeriods_choice0 :: GasDeliveryPeriods -> OneOf3 AdjustableDates CommodityCalculationPeriodsSchedule ((Maybe (OneOf3 CalculationPeriodsReference CalculationPeriodsScheduleReference CalculationPeriodsDatesReference)))

-- | The time at which gas delivery should start on each day of the
--   Delivery Period(s).
gasDelivPeriods_supplyStartTime :: GasDeliveryPeriods -> PrevailingTime

-- | The time at which gas delivery should end on each day of the Delivery
--   Period(s).
gasDelivPeriods_supplyEndTime :: GasDeliveryPeriods -> PrevailingTime

-- | Physically settled leg of a physically settled gas transaction.
data GasPhysicalLeg
GasPhysicalLeg :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> GasDeliveryPeriods -> GasProduct -> Maybe GasDelivery -> GasPhysicalQuantity -> GasPhysicalLeg
gasPhysicLeg_ID :: GasPhysicalLeg -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
gasPhysicLeg_payerPartyReference :: GasPhysicalLeg -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
gasPhysicLeg_payerAccountReference :: GasPhysicalLeg -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
gasPhysicLeg_receiverPartyReference :: GasPhysicalLeg -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
gasPhysicLeg_receiverAccountReference :: GasPhysicalLeg -> Maybe AccountReference

-- | The different options for specifying the Delivery or Supply Periods.
--   Unless the quantity or price is to vary periodically during the trade
--   or physical delivery occurs on a periodic basis, periodsSchedule
--   should be used and set to 1T.
gasPhysicLeg_deliveryPeriods :: GasPhysicalLeg -> GasDeliveryPeriods

-- | The specification of the gas to be delivered.
gasPhysicLeg_gas :: GasPhysicalLeg -> GasProduct

-- | The physical delivery conditions for the transaction.
gasPhysicLeg_deliveryConditions :: GasPhysicalLeg -> Maybe GasDelivery

-- | The different options for specifying the quantity. For Fixed trades
--   where the quantity is known at the time of confirmation, a single
--   quantity or a quantity per Delivery Period may be specified. For
--   Variable trades minimum and maximum trades may be specified.
gasPhysicLeg_deliveryQuantity :: GasPhysicalLeg -> GasPhysicalQuantity

-- | The quantity of gas to be delivered.
data GasPhysicalQuantity
GasPhysicalQuantity :: Maybe ID -> OneOf2 (Maybe (OneOf2 CommodityNotionalQuantity CommodityPhysicalQuantitySchedule), UnitQuantity) ([CommodityNotionalQuantity], [CommodityNotionalQuantity], Maybe (PartyReference)) -> GasPhysicalQuantity
gasPhysicQuant_ID :: GasPhysicalQuantity -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>unknown</li>
--   <li>The Total Quantity of the commodity to be delivered.</li>
--   </ul>
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The minimum quantity to be delivered. If separate minimums need to
--   be specified for different periods (e.g. a minimum per day and a
--   minimum per month) this element should be repeated.</li>
--   <li>The maximum quantity to be delivered. If separate minimums need to
--   be specified for different periods (e.g. a minimum per day and a
--   minimum per month) this element should be repeated.</li>
--   <li>Indicates the party able to choose whether the gas is delivered
--   for a particular period e.g. a swing or interruptible contract.</li>
--   </ul>
gasPhysicQuant_choice0 :: GasPhysicalQuantity -> OneOf2 (Maybe (OneOf2 CommodityNotionalQuantity CommodityPhysicalQuantitySchedule), UnitQuantity) ([CommodityNotionalQuantity], [CommodityNotionalQuantity], Maybe (PartyReference))

-- | A type defining the characteristics of the gas being traded in a
--   physically settled gas transaction.
data GasProduct
GasProduct :: GasProductTypeEnum -> (Maybe (OneOf2 NonNegativeDecimal GasQuality)) -> GasProduct

-- | The type of gas to be delivered.
gasProduct_type :: GasProduct -> GasProductTypeEnum

-- | Choice between:
--   
--   <ol>
--   <li>The calorific value of the gas to be delivered, specified in
--   megajoules per cubic meter (MJ/m3).</li>
--   <li>The quality of the gas to be delivered.</li>
--   </ol>
gasProduct_choice1 :: GasProduct -> (Maybe (OneOf2 NonNegativeDecimal GasQuality))

-- | The quantity of gas to be delivered.
data GasQuality
GasQuality :: Scheme -> GasQualityAttributes -> GasQuality
data GasQualityAttributes
GasQualityAttributes :: Maybe AnyURI -> GasQualityAttributes
gasQualityAttrib_gasQualityScheme :: GasQualityAttributes -> Maybe AnyURI

-- | An observation period that is offset from a Calculation Period.
data Lag
Lag :: Maybe ID -> Maybe Period -> Maybe Period -> Lag
lag_ID :: Lag -> Maybe ID

-- | The period during which observations will be made. If a
--   firstObservationDateOffset is specified, the observation period will
--   start the specified interval prior to each Calculation Period - i.e.
--   if the firstObservationDateOffset is 4 months and the lagDuration is 3
--   months, observations will be taken in months 4,3 and 2 (but not 1)
--   prior to each Calculation Period. If no firstObservationDate is
--   specified, the observation period will end immediately preceding each
--   Calculation Period.
lag_duration :: Lag -> Maybe Period

-- | The interval between the start of each lagDuration and the start of
--   each respective calculation period.
lag_firstObservationDateOffset :: Lag -> Maybe Period

-- | Allows a lag to reference one already defined elsewhere in the trade.
data LagReference
LagReference :: IDREF -> LagReference
lagReference_href :: LagReference -> IDREF

-- | A Market Disruption Event.
data MarketDisruptionEvent
MarketDisruptionEvent :: Scheme -> MarketDisruptionEventAttributes -> MarketDisruptionEvent
data MarketDisruptionEventAttributes
MarketDisruptionEventAttributes :: Maybe AnyURI -> MarketDisruptionEventAttributes
marketDisrupEventAttrib_commodityMarketDisruptionScheme :: MarketDisruptionEventAttributes -> Maybe AnyURI

-- | The details of a fixed payment. Can be used for a forward transaction
--   or as the base for a more complex fixed leg component such as the
--   fixed leg of a swap.
data NonPeriodicFixedPriceLeg
NonPeriodicFixedPriceLeg :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> FixedPrice -> Maybe NonNegativeMoney -> Maybe QuantityReference -> OneOf2 CommodityRelativePaymentDates ((Maybe (OneOf2 AdjustableDatesOrRelativeDateOffset Boolean))) -> NonPeriodicFixedPriceLeg
nonPeriodFixedPriceLeg_ID :: NonPeriodicFixedPriceLeg -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
nonPeriodFixedPriceLeg_payerPartyReference :: NonPeriodicFixedPriceLeg -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
nonPeriodFixedPriceLeg_payerAccountReference :: NonPeriodicFixedPriceLeg -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
nonPeriodFixedPriceLeg_receiverPartyReference :: NonPeriodicFixedPriceLeg -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
nonPeriodFixedPriceLeg_receiverAccountReference :: NonPeriodicFixedPriceLeg -> Maybe AccountReference

-- | Fixed price on which fixed payments are based.
nonPeriodFixedPriceLeg_fixedPrice :: NonPeriodicFixedPriceLeg -> FixedPrice

-- | The total amount of the fixed payment for all units of the underlying
--   commodity.
nonPeriodFixedPriceLeg_totalPrice :: NonPeriodicFixedPriceLeg -> Maybe NonNegativeMoney

-- | A pointer style reference to a quantity defined on another leg.
nonPeriodFixedPriceLeg_quantityReference :: NonPeriodicFixedPriceLeg -> Maybe QuantityReference

-- | Choice between:
--   
--   <ol>
--   <li>The Payment Dates of the trade relative to the Calculation
--   Periods.</li>
--   <li>unknown</li>
--   </ol>
nonPeriodFixedPriceLeg_choice7 :: NonPeriodicFixedPriceLeg -> OneOf2 CommodityRelativePaymentDates ((Maybe (OneOf2 AdjustableDatesOrRelativeDateOffset Boolean)))

-- | The physical delivery conditions for an oil product.
data OilDelivery
OilDelivery :: (Maybe (OneOf2 OilPipelineDelivery OilTransferDelivery)) -> Maybe PartyReference -> (Maybe (OneOf2 AbsoluteTolerance PercentageTolerance)) -> OilDelivery

-- | Choice between:
--   
--   <ol>
--   <li>Specified the delivery conditions where the oil product is to be
--   delivered by pipeline.</li>
--   <li>Specified the delivery conditions where the oil product is to be
--   delivered by title transfer.</li>
--   </ol>
oilDelivery_choice0 :: OilDelivery -> (Maybe (OneOf2 OilPipelineDelivery OilTransferDelivery))

-- | Specifies which party is the Importer of Record for the purposes of
--   paying customs duties and applicable taxes or costs related to the
--   import of the oil product.
oilDelivery_importerOfRecord :: OilDelivery -> Maybe PartyReference

-- | Choice between:
--   
--   <ol>
--   <li>Specifies the allowable quantity tolerance as an absolute
--   quantity.</li>
--   <li>Specifies the allowable quantity tolerance as a percentage of the
--   quantity.</li>
--   </ol>
oilDelivery_choice2 :: OilDelivery -> (Maybe (OneOf2 AbsoluteTolerance PercentageTolerance))

-- | Physically settled leg of a physically settled oil product
--   transaction.
data OilPhysicalLeg
OilPhysicalLeg :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe CommodityDeliveryPeriods -> OilProduct -> Maybe OilDelivery -> CommodityPhysicalQuantity -> OilPhysicalLeg
oilPhysicLeg_ID :: OilPhysicalLeg -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
oilPhysicLeg_payerPartyReference :: OilPhysicalLeg -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
oilPhysicLeg_payerAccountReference :: OilPhysicalLeg -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
oilPhysicLeg_receiverPartyReference :: OilPhysicalLeg -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
oilPhysicLeg_receiverAccountReference :: OilPhysicalLeg -> Maybe AccountReference

-- | The different options for specifying the Delivery or Supply Periods.
--   Unless the quantity or price is to vary periodically during the trade
--   or physical delivery occurs on a periodic basis, periodsSchedule
--   should be used and set to 1T.
oilPhysicLeg_deliveryPeriods :: OilPhysicalLeg -> Maybe CommodityDeliveryPeriods

-- | The specification of the oil product to be delivered.
oilPhysicLeg_oil :: OilPhysicalLeg -> OilProduct

-- | The physical delivery conditions for the transaction.
oilPhysicLeg_deliveryConditions :: OilPhysicalLeg -> Maybe OilDelivery

-- | The different options for specifying the quantity.
oilPhysicLeg_deliveryQuantity :: OilPhysicalLeg -> CommodityPhysicalQuantity

-- | The physical delivery conditions specific to an oil product delivered
--   by pipeline.
data OilPipelineDelivery
OilPipelineDelivery :: Maybe CommodityPipeline -> Maybe CommodityDeliveryPoint -> Maybe CommodityDeliveryPoint -> Maybe Boolean -> Maybe CommodityDeliveryRisk -> [CommodityPipelineCycle] -> OilPipelineDelivery

-- | The name of pipeline by which the oil product will be delivered.
oilPipelDeliv_pipelineName :: OilPipelineDelivery -> Maybe CommodityPipeline

-- | The location at which the transfer of the title to the commodity takes
--   place.
oilPipelDeliv_withdrawalPoint :: OilPipelineDelivery -> Maybe CommodityDeliveryPoint

-- | The point at which the oil product will enter the pipeline.
oilPipelDeliv_entryPoint :: OilPipelineDelivery -> Maybe CommodityDeliveryPoint

-- | Whether or not the delivery can go to barge. For trades documented
--   under the ISDA Master Agreement and Oil Annex, this should always be
--   set to <tt>false</tt>.
oilPipelDeliv_deliverableByBarge :: OilPipelineDelivery -> Maybe Boolean

-- | Specifies how the risk associated with the delivery is assigned. For
--   trades documented under the ISDA Master Agreement and Oil Annex, this
--   presence of this element indicates that the provisions of clause
--   (b)(i) of the ISDA Oil Annex are being varied.
oilPipelDeliv_risk :: OilPipelineDelivery -> Maybe CommodityDeliveryRisk

-- | The cycle(s) during which the oil product will be transported in the
--   pipeline.
oilPipelDeliv_cycle :: OilPipelineDelivery -> [CommodityPipelineCycle]

-- | The specification of the oil product to be delivered.
data OilProduct
OilProduct :: OilProductType -> CommodityProductGrade -> OilProduct

-- | The type of oil product to be delivered.
oilProduct_type :: OilProduct -> OilProductType

-- | The grade of oil product to be delivered.
oilProduct_grade :: OilProduct -> CommodityProductGrade

-- | The type of physical commodity product to be delivered.
data OilProductType
OilProductType :: Scheme -> OilProductTypeAttributes -> OilProductType
data OilProductTypeAttributes
OilProductTypeAttributes :: Maybe AnyURI -> OilProductTypeAttributes
oilProductTypeAttrib_commodityOilProductTypeScheme :: OilProductTypeAttributes -> Maybe AnyURI

-- | The physical delivery conditions specific to an oil product delivered
--   by title transfer.
data OilTransferDelivery
OilTransferDelivery :: Maybe Boolean -> Maybe CommodityDeliveryPoint -> OilTransferDelivery

-- | Indicates that the oil product will be delivered by title transfer.
--   Should always be set to <a>true</a>.
oilTransfDeliv_applicable :: OilTransferDelivery -> Maybe Boolean

-- | The location at which the transfer of the title to the commodity takes
--   place.
oilTransfDeliv_deliveryLocation :: OilTransferDelivery -> Maybe CommodityDeliveryPoint

-- | The acceptable tolerance in the delivered quantity of a physical
--   commodity product in terms of a percentage of the agreed delivery
--   quantity.
data PercentageTolerance
PercentageTolerance :: Maybe RestrictedPercentage -> Maybe RestrictedPercentage -> Maybe PartyReference -> PercentageTolerance

-- | The maximum percentage amount by which the quantity delivered can
--   exceed the agreed quantity.
percenToler_postitive :: PercentageTolerance -> Maybe RestrictedPercentage

-- | The maximum percentage amount by which the quantity delivered can be
--   less than the agreed quantity.
percenToler_negative :: PercentageTolerance -> Maybe RestrictedPercentage

-- | Indicates whether the tolerance it at the seller's or buyer's option.
percenToler_option :: PercentageTolerance -> Maybe PartyReference

-- | The common components of a physically settled leg of a Commodity
--   Forward. This is an abstract type and should be extended by
--   commodity-specific types.
data PhysicalForwardLeg
PhysicalForwardLeg_BullionPhysicalLeg :: BullionPhysicalLeg -> PhysicalForwardLeg

-- | The common components of a physically settled leg of a Commodity Swap.
--   This is an abstract type and should be extended by commodity-specific
--   types.
data PhysicalSwapLeg
PhysicalSwapLeg_OilPhysicalLeg :: OilPhysicalLeg -> PhysicalSwapLeg
PhysicalSwapLeg_GasPhysicalLeg :: GasPhysicalLeg -> PhysicalSwapLeg
PhysicalSwapLeg_ElectricityPhysicalLeg :: ElectricityPhysicalLeg -> PhysicalSwapLeg
PhysicalSwapLeg_CoalPhysicalLeg :: CoalPhysicalLeg -> PhysicalSwapLeg

-- | A pointer tyle reference to a Quantity schedule defined elsewhere.
data QuantityScheduleReference
QuantityScheduleReference :: IDREF -> QuantityScheduleReference
quantSchedRef_href :: QuantityScheduleReference -> IDREF

-- | A pointer tyle reference to a Quantity defined elsewhere.
data QuantityReference
QuantityReference :: IDREF -> QuantityReference
quantRef_href :: QuantityReference -> IDREF

-- | A Disruption Fallback with the sequence in which it should be applied
--   relative to other Disruption Fallbacks.
data SequencedDisruptionFallback
SequencedDisruptionFallback :: Maybe DisruptionFallback -> Maybe PositiveInteger -> SequencedDisruptionFallback

-- | Disruption fallback that applies to the trade.
sequenDisrupFallb_fallback :: SequencedDisruptionFallback -> Maybe DisruptionFallback

-- | Sequence in which the reference to the disruption fallback should be
--   applied.
sequenDisrupFallb_sequence :: SequencedDisruptionFallback -> Maybe PositiveInteger

-- | Specifies a set of Settlement Periods associated with an Electricity
--   Transaction for delivery on an Applicable Day or for a series of
--   Applicable Days.
data SettlementPeriods
SettlementPeriods :: Maybe ID -> Maybe SettlementPeriodDurationEnum -> [DayOfWeekEnum] -> Maybe OffsetPrevailingTime -> Maybe OffsetPrevailingTime -> (Maybe (OneOf2 CommodityBusinessCalendar CommodityBusinessCalendar)) -> SettlementPeriods
settlPeriods_ID :: SettlementPeriods -> Maybe ID

-- | The length of each Settlement Period.
settlPeriods_duration :: SettlementPeriods -> Maybe SettlementPeriodDurationEnum

-- | Specifies the Applicable Day with respect to a range of Settlement
--   Periods. This element can only be omitted if includesHolidays is
--   present, in which case this range of Settlement Periods will apply to
--   days that are holidays only.
settlPeriods_applicableDay :: SettlementPeriods -> [DayOfWeekEnum]

-- | Specifies the hour-ending Start Time with respect to a range of
--   Settlement Periods.
settlPeriods_startTime :: SettlementPeriods -> Maybe OffsetPrevailingTime

-- | Specifies the hour-ending End Time with respect to a range of
--   Settlement Periods. If neither startTime nor endTime contain an offset
--   element and endTime is earlier than startTime, this indicates that the
--   time period <a>wraps around</a> midnight. For example, if startTime is
--   23:00 and endTime is 01:00 then Settlement Periods apply from 00:00 to
--   01:00 and 23:00 to 00:00 on each included day.
settlPeriods_endTime :: SettlementPeriods -> Maybe OffsetPrevailingTime

-- | Choice between:
--   
--   <ol>
--   <li>Indicates that days that are holidays according to the referenced
--   commodity business calendar should be excluded from this range of
--   Settlement Periods, even if such day is an applicable day.</li>
--   <li>Indicates that days that are holidays according to the referenced
--   commodity business calendar should be included in this range of
--   Settlement Periods, even if such day is not an applicable day.</li>
--   </ol>
settlPeriods_choice4 :: SettlementPeriods -> (Maybe (OneOf2 CommodityBusinessCalendar CommodityBusinessCalendar))

-- | A type defining the Fixed Price applicable to a range or ranges of
--   Settlement Periods.
data SettlementPeriodsFixedPrice
SettlementPeriodsFixedPrice :: Maybe ID -> Decimal -> Currency -> QuantityUnit -> [SettlementPeriodsReference] -> SettlementPeriodsFixedPrice
settlPeriodsFixedPrice_ID :: SettlementPeriodsFixedPrice -> Maybe ID

-- | The Fixed Price.
settlPeriodsFixedPrice_price :: SettlementPeriodsFixedPrice -> Decimal

-- | Currency of the fixed price.
settlPeriodsFixedPrice_priceCurrency :: SettlementPeriodsFixedPrice -> Currency

-- | The unit of measure used to calculate the Fixed Price.
settlPeriodsFixedPrice_priceUnit :: SettlementPeriodsFixedPrice -> QuantityUnit
settlPeriodsFixedPrice_settlementPeriodsReference :: SettlementPeriodsFixedPrice -> [SettlementPeriodsReference]

-- | Allows a set of Settlement Periods to reference one already defined
--   elsewhere in the trade.
data SettlementPeriodsReference
SettlementPeriodsReference :: IDREF -> SettlementPeriodsReference
settlPeriodsRef_href :: SettlementPeriodsReference -> IDREF

-- | The specification of the Settlement Periods in which the electricity
--   will be delivered for a <a>shaped</a> trade i.e. where different
--   Settlement Period ranges will apply to different periods of the trade.
data SettlementPeriodsSchedule
SettlementPeriodsSchedule :: [SettlementPeriodsStep] -> (Maybe (OneOf2 CalculationPeriodsReference CalculationPeriodsScheduleReference)) -> SettlementPeriodsSchedule

-- | The range of Settlement Periods per Calculation Period. There must be
--   a range of Settlement Periods specified for each Calculation Period,
--   regardless of whether the range of Settlement Periods changes or stays
--   the same between periods.
settlPeriodsSched_settlementPeriodsStep :: SettlementPeriodsSchedule -> [SettlementPeriodsStep]

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to the Delivery Periods defined
--   elsewhere.</li>
--   <li>A pointer style reference to the Calculation Periods Schedule
--   defined elsewhere.</li>
--   </ol>
settlPeriodsSched_choice1 :: SettlementPeriodsSchedule -> (Maybe (OneOf2 CalculationPeriodsReference CalculationPeriodsScheduleReference))

-- | A reference to the range of Settlement Periods that applies to a given
--   period of a transaction.
data SettlementPeriodsStep
SettlementPeriodsStep :: [SettlementPeriodsReference] -> SettlementPeriodsStep

-- | The specification of the Settlement Periods in which the electricity
--   will be delivered. The Settlement Periods will apply for the duration
--   of the appliable period. If more than one settlementPeriods element is
--   present this indicates multiple ranges of Settlement Periods apply for
--   the duration of the applicable period.
settlPeriodsStep_settlementPeriodsReference :: SettlementPeriodsStep -> [SettlementPeriodsReference]

-- | A quantity and associated unit.
data UnitQuantity
UnitQuantity :: Maybe ID -> QuantityUnit -> NonNegativeDecimal -> UnitQuantity
unitQuantity_ID :: UnitQuantity -> Maybe ID

-- | Quantity Unit is the unit of measure applicable for the quantity on
--   the Transaction.
unitQuantity_quantityUnit :: UnitQuantity -> QuantityUnit

-- | Amount of commodity per quantity frequency.
unitQuantity_quantity :: UnitQuantity -> NonNegativeDecimal

-- | The physical leg of a Commodity Forward Transaction for which the
--   underlyer is Bullion.
elementBullionPhysicalLeg :: XMLParser BullionPhysicalLeg
elementToXMLBullionPhysicalLeg :: BullionPhysicalLeg -> [Content ()]

-- | Physically settled coal leg.
elementCoalPhysicalLeg :: XMLParser CoalPhysicalLeg
elementToXMLCoalPhysicalLeg :: CoalPhysicalLeg -> [Content ()]

-- | Defines a commodity forward product.
elementCommodityForward :: XMLParser CommodityForward
elementToXMLCommodityForward :: CommodityForward -> [Content ()]

-- | Defines the substitutable commodity forward leg
elementCommodityForwardLeg :: XMLParser CommodityForwardLeg
elementToXMLCommodityForwardLeg :: CommodityForwardLeg -> [Content ()]

-- | Defines a commodity option product.
elementCommodityOption :: XMLParser CommodityOption
elementToXMLCommodityOption :: CommodityOption -> [Content ()]

-- | Defines a commodity swap product.
elementCommoditySwap :: XMLParser CommoditySwap
elementToXMLCommoditySwap :: CommoditySwap -> [Content ()]

-- | Defines a commodity swaption product
elementCommoditySwaption :: XMLParser CommoditySwaption
elementToXMLCommoditySwaption :: CommoditySwaption -> [Content ()]

-- | Defines the substitutable commodity swap leg
elementCommoditySwapLeg :: XMLParser CommoditySwapLeg
elementToXMLCommoditySwapLeg :: CommoditySwapLeg -> [Content ()]

-- | Physically settled electricity leg.
elementElectricityPhysicalLeg :: XMLParser ElectricityPhysicalLeg
elementToXMLElectricityPhysicalLeg :: ElectricityPhysicalLeg -> [Content ()]

-- | Fixed Price Leg.
elementFixedLeg :: XMLParser FixedPriceLeg
elementToXMLFixedLeg :: FixedPriceLeg -> [Content ()]

-- | Floating Price leg.
elementFloatingLeg :: XMLParser FloatingPriceLeg
elementToXMLFloatingLeg :: FloatingPriceLeg -> [Content ()]

-- | Physically settled natural gas leg.
elementGasPhysicalLeg :: XMLParser GasPhysicalLeg
elementToXMLGasPhysicalLeg :: GasPhysicalLeg -> [Content ()]

-- | Physically settled oil or refined products leg.
elementOilPhysicalLeg :: XMLParser OilPhysicalLeg
elementToXMLOilPhysicalLeg :: OilPhysicalLeg -> [Content ()]
instance Eq BullionDeliveryLocationAttributes
instance Show BullionDeliveryLocationAttributes
instance Eq CalculationPeriodsDatesReference
instance Show CalculationPeriodsDatesReference
instance Eq CalculationPeriodsReference
instance Show CalculationPeriodsReference
instance Eq CalculationPeriodsScheduleReference
instance Show CalculationPeriodsScheduleReference
instance Eq CoalAttributeDecimal
instance Show CoalAttributeDecimal
instance Eq CoalDeliveryPointAttributes
instance Show CoalDeliveryPointAttributes
instance Eq CoalProductSourceAttributes
instance Show CoalProductSourceAttributes
instance Eq CoalProductTypeAttributes
instance Show CoalProductTypeAttributes
instance Eq CoalQualityAdjustmentsAttributes
instance Show CoalQualityAdjustmentsAttributes
instance Eq CoalTransportationEquipmentAttributes
instance Show CoalTransportationEquipmentAttributes
instance Eq CommodityDeliveryPointAttributes
instance Show CommodityDeliveryPointAttributes
instance Eq CommodityDeliveryRiskAttributes
instance Show CommodityDeliveryRiskAttributes
instance Eq CommodityExpireRelativeToEventAttributes
instance Show CommodityExpireRelativeToEventAttributes
instance Eq CommodityFrequencyTypeAttributes
instance Show CommodityFrequencyTypeAttributes
instance Eq CommodityFxTypeAttributes
instance Show CommodityFxTypeAttributes
instance Eq CommodityHubCodeAttributes
instance Show CommodityHubCodeAttributes
instance Eq CommodityPayRelativeToEventAttributes
instance Show CommodityPayRelativeToEventAttributes
instance Eq CommodityPipelineAttributes
instance Show CommodityPipelineAttributes
instance Eq CommodityPipelineCycleAttributes
instance Show CommodityPipelineCycleAttributes
instance Eq CommodityProductGradeAttributes
instance Show CommodityProductGradeAttributes
instance Eq CommodityQuantityFrequencyAttributes
instance Show CommodityQuantityFrequencyAttributes
instance Eq DisruptionFallbackAttributes
instance Show DisruptionFallbackAttributes
instance Eq ElectricityDeliveryFirm
instance Show ElectricityDeliveryFirm
instance Eq ElectricityDeliveryPointAttributes
instance Show ElectricityDeliveryPointAttributes
instance Eq ElectricityTransmissionContingencyTypeAttributes
instance Show ElectricityTransmissionContingencyTypeAttributes
instance Eq GasDeliveryPointAttributes
instance Show GasDeliveryPointAttributes
instance Eq GasQualityAttributes
instance Show GasQualityAttributes
instance Eq LagReference
instance Show LagReference
instance Eq MarketDisruptionEventAttributes
instance Show MarketDisruptionEventAttributes
instance Eq OilProductTypeAttributes
instance Show OilProductTypeAttributes
instance Eq QuantityScheduleReference
instance Show QuantityScheduleReference
instance Eq QuantityReference
instance Show QuantityReference
instance Eq SettlementPeriodsReference
instance Show SettlementPeriodsReference
instance Eq UnitQuantity
instance Show UnitQuantity
instance Eq SettlementPeriodsStep
instance Show SettlementPeriodsStep
instance Eq SettlementPeriodsSchedule
instance Show SettlementPeriodsSchedule
instance Eq SettlementPeriodsFixedPrice
instance Show SettlementPeriodsFixedPrice
instance Eq SettlementPeriods
instance Show SettlementPeriods
instance Eq SequencedDisruptionFallback
instance Show SequencedDisruptionFallback
instance Eq PhysicalSwapLeg
instance Show PhysicalSwapLeg
instance Eq PhysicalForwardLeg
instance Show PhysicalForwardLeg
instance Eq PercentageTolerance
instance Show PercentageTolerance
instance Eq OilTransferDelivery
instance Show OilTransferDelivery
instance Eq OilProductType
instance Show OilProductType
instance Eq OilProduct
instance Show OilProduct
instance Eq OilPipelineDelivery
instance Show OilPipelineDelivery
instance Eq OilPhysicalLeg
instance Show OilPhysicalLeg
instance Eq OilDelivery
instance Show OilDelivery
instance Eq NonPeriodicFixedPriceLeg
instance Show NonPeriodicFixedPriceLeg
instance Eq MarketDisruptionEvent
instance Show MarketDisruptionEvent
instance Eq Lag
instance Show Lag
instance Eq GasQuality
instance Show GasQuality
instance Eq GasProduct
instance Show GasProduct
instance Eq GasPhysicalQuantity
instance Show GasPhysicalQuantity
instance Eq GasPhysicalLeg
instance Show GasPhysicalLeg
instance Eq GasDeliveryPeriods
instance Show GasDeliveryPeriods
instance Eq GasDeliveryPoint
instance Show GasDeliveryPoint
instance Eq GasDelivery
instance Show GasDelivery
instance Eq FloatingPriceLeg
instance Show FloatingPriceLeg
instance Eq FloatingLegCalculation
instance Show FloatingLegCalculation
instance Eq FixedPriceLeg
instance Show FixedPriceLeg
instance Eq FixedPrice
instance Show FixedPrice
instance Eq FinancialSwapLeg
instance Show FinancialSwapLeg
instance Eq ElectricityTransmissionContingencyType
instance Show ElectricityTransmissionContingencyType
instance Eq ElectricityTransmissionContingency
instance Show ElectricityTransmissionContingency
instance Eq ElectricityProduct
instance Show ElectricityProduct
instance Eq ElectricityPhysicalQuantity
instance Show ElectricityPhysicalQuantity
instance Eq ElectricityPhysicalLeg
instance Show ElectricityPhysicalLeg
instance Eq ElectricityPhysicalDeliveryQuantitySchedule
instance Show ElectricityPhysicalDeliveryQuantitySchedule
instance Eq ElectricityPhysicalDeliveryQuantity
instance Show ElectricityPhysicalDeliveryQuantity
instance Eq ElectricityDeliveryUnitFirm
instance Show ElectricityDeliveryUnitFirm
instance Eq ElectricityDeliveryType
instance Show ElectricityDeliveryType
instance Eq ElectricityDeliverySystemFirm
instance Show ElectricityDeliverySystemFirm
instance Eq ElectricityDeliveryPoint
instance Show ElectricityDeliveryPoint
instance Eq ElectricityDeliveryPeriods
instance Show ElectricityDeliveryPeriods
instance Eq ElectricityDelivery
instance Show ElectricityDelivery
instance Eq DisruptionFallback
instance Show DisruptionFallback
instance Eq CommoditySwapLeg
instance Show CommoditySwapLeg
instance Eq CommoditySwaptionUnderlying
instance Show CommoditySwaptionUnderlying
instance Eq CommoditySwaption
instance Show CommoditySwaption
instance Eq CommoditySwap
instance Show CommoditySwap
instance Eq CommodityStrikeSchedule
instance Show CommodityStrikeSchedule
instance Eq CommoditySpreadSchedule
instance Show CommoditySpreadSchedule
instance Eq CommoditySpread
instance Show CommoditySpread
instance Eq CommoditySettlementPeriodsPriceSchedule
instance Show CommoditySettlementPeriodsPriceSchedule
instance Eq CommoditySettlementPeriodsNotionalQuantitySchedule
instance Show CommoditySettlementPeriodsNotionalQuantitySchedule
instance Eq CommoditySettlementPeriodsNotionalQuantity
instance Show CommoditySettlementPeriodsNotionalQuantity
instance Eq CommodityRelativePaymentDates
instance Show CommodityRelativePaymentDates
instance Eq CommodityRelativeExpirationDates
instance Show CommodityRelativeExpirationDates
instance Eq CommodityQuantityFrequency
instance Show CommodityQuantityFrequency
instance Eq CommodityProductGrade
instance Show CommodityProductGrade
instance Eq CommodityPricingDates
instance Show CommodityPricingDates
instance Eq CommodityPremium
instance Show CommodityPremium
instance Eq CommodityPipelineCycle
instance Show CommodityPipelineCycle
instance Eq CommodityPipeline
instance Show CommodityPipeline
instance Eq CommodityPhysicalQuantitySchedule
instance Show CommodityPhysicalQuantitySchedule
instance Eq CommodityPhysicalQuantityBase
instance Show CommodityPhysicalQuantityBase
instance Eq CommodityPhysicalQuantity
instance Show CommodityPhysicalQuantity
instance Eq CommodityPhysicalExercise
instance Show CommodityPhysicalExercise
instance Eq CommodityPhysicalEuropeanExercise
instance Show CommodityPhysicalEuropeanExercise
instance Eq CommodityPhysicalAmericanExercise
instance Show CommodityPhysicalAmericanExercise
instance Eq CommodityPayRelativeToEvent
instance Show CommodityPayRelativeToEvent
instance Eq CommodityOption
instance Show CommodityOption
instance Eq CommodityNotionalQuantitySchedule
instance Show CommodityNotionalQuantitySchedule
instance Eq CommodityNotionalQuantity
instance Show CommodityNotionalQuantity
instance Eq CommodityMultipleExercise
instance Show CommodityMultipleExercise
instance Eq CommodityMarketDisruption
instance Show CommodityMarketDisruption
instance Eq CommodityHubCode
instance Show CommodityHubCode
instance Eq CommodityHub
instance Show CommodityHub
instance Eq CommodityFxType
instance Show CommodityFxType
instance Eq CommodityFx
instance Show CommodityFx
instance Eq CommodityFrequencyType
instance Show CommodityFrequencyType
instance Eq CommodityForwardLeg
instance Show CommodityForwardLeg
instance Eq CommodityFixedPriceSchedule
instance Show CommodityFixedPriceSchedule
instance Eq CommodityForward
instance Show CommodityForward
instance Eq CommodityExpireRelativeToEvent
instance Show CommodityExpireRelativeToEvent
instance Eq CommodityExercisePeriods
instance Show CommodityExercisePeriods
instance Eq CommodityExercise
instance Show CommodityExercise
instance Eq CommodityEuropeanExercise
instance Show CommodityEuropeanExercise
instance Eq CommodityDeliveryRisk
instance Show CommodityDeliveryRisk
instance Eq CommodityDeliveryPoint
instance Show CommodityDeliveryPoint
instance Eq CommodityDeliveryPeriods
instance Show CommodityDeliveryPeriods
instance Eq CommodityCalculationPeriodsSchedule
instance Show CommodityCalculationPeriodsSchedule
instance Eq CommodityAmericanExercise
instance Show CommodityAmericanExercise
instance Eq CoalTransportationEquipment
instance Show CoalTransportationEquipment
instance Eq CoalStandardQualitySchedule
instance Show CoalStandardQualitySchedule
instance Eq CoalStandardQuality
instance Show CoalStandardQuality
instance Eq CoalQualityAdjustments
instance Show CoalQualityAdjustments
instance Eq CoalProductType
instance Show CoalProductType
instance Eq CoalProductSpecifications
instance Show CoalProductSpecifications
instance Eq CoalProductSource
instance Show CoalProductSource
instance Eq CoalProduct
instance Show CoalProduct
instance Eq CoalPhysicalLeg
instance Show CoalPhysicalLeg
instance Eq CoalDeliveryPoint
instance Show CoalDeliveryPoint
instance Eq CoalDelivery
instance Show CoalDelivery
instance Eq CoalAttributePercentage
instance Show CoalAttributePercentage
instance Eq BullionPhysicalLeg
instance Show BullionPhysicalLeg
instance Eq BullionDeliveryLocation
instance Show BullionDeliveryLocation
instance Eq AbsoluteTolerance
instance Show AbsoluteTolerance
instance SchemaType UnitQuantity
instance SchemaType SettlementPeriodsStep
instance SchemaType SettlementPeriodsSchedule
instance Extension SettlementPeriodsReference Reference
instance SchemaType SettlementPeriodsReference
instance Extension SettlementPeriodsFixedPrice FixedPrice
instance SchemaType SettlementPeriodsFixedPrice
instance SchemaType SettlementPeriods
instance SchemaType SequencedDisruptionFallback
instance Extension QuantityReference Reference
instance SchemaType QuantityReference
instance Extension QuantityScheduleReference Reference
instance SchemaType QuantityScheduleReference
instance Extension PhysicalSwapLeg CommoditySwapLeg
instance SchemaType PhysicalSwapLeg
instance Extension PhysicalForwardLeg CommodityForwardLeg
instance SchemaType PhysicalForwardLeg
instance SchemaType PercentageTolerance
instance SchemaType OilTransferDelivery
instance Extension OilProductType Scheme
instance SchemaType OilProductType
instance SchemaType OilProduct
instance SchemaType OilPipelineDelivery
instance Extension OilPhysicalLeg Leg
instance Extension OilPhysicalLeg CommoditySwapLeg
instance Extension OilPhysicalLeg PhysicalSwapLeg
instance SchemaType OilPhysicalLeg
instance SchemaType OilDelivery
instance Extension NonPeriodicFixedPriceLeg Leg
instance Extension NonPeriodicFixedPriceLeg CommoditySwapLeg
instance SchemaType NonPeriodicFixedPriceLeg
instance Extension MarketDisruptionEvent Scheme
instance SchemaType MarketDisruptionEvent
instance Extension LagReference Reference
instance SchemaType LagReference
instance SchemaType Lag
instance Extension GasQuality Scheme
instance SchemaType GasQuality
instance SchemaType GasProduct
instance Extension GasPhysicalQuantity CommodityPhysicalQuantityBase
instance SchemaType GasPhysicalQuantity
instance Extension GasPhysicalLeg Leg
instance Extension GasPhysicalLeg CommoditySwapLeg
instance Extension GasPhysicalLeg PhysicalSwapLeg
instance SchemaType GasPhysicalLeg
instance Extension GasDeliveryPeriods CommodityDeliveryPeriods
instance SchemaType GasDeliveryPeriods
instance Extension GasDeliveryPoint Scheme
instance SchemaType GasDeliveryPoint
instance SchemaType GasDelivery
instance Extension FloatingPriceLeg Leg
instance Extension FloatingPriceLeg CommoditySwapLeg
instance Extension FloatingPriceLeg FinancialSwapLeg
instance SchemaType FloatingPriceLeg
instance SchemaType FloatingLegCalculation
instance Extension FixedPriceLeg Leg
instance Extension FixedPriceLeg CommoditySwapLeg
instance Extension FixedPriceLeg FinancialSwapLeg
instance SchemaType FixedPriceLeg
instance SchemaType FixedPrice
instance Extension FinancialSwapLeg CommoditySwapLeg
instance SchemaType FinancialSwapLeg
instance Extension ElectricityTransmissionContingencyType Scheme
instance SchemaType ElectricityTransmissionContingencyType
instance SchemaType ElectricityTransmissionContingency
instance SchemaType ElectricityProduct
instance Extension ElectricityPhysicalQuantity CommodityPhysicalQuantityBase
instance SchemaType ElectricityPhysicalQuantity
instance Extension ElectricityPhysicalLeg Leg
instance Extension ElectricityPhysicalLeg CommoditySwapLeg
instance Extension ElectricityPhysicalLeg PhysicalSwapLeg
instance SchemaType ElectricityPhysicalLeg
instance Extension ElectricityPhysicalDeliveryQuantitySchedule CommodityPhysicalQuantitySchedule
instance SchemaType ElectricityPhysicalDeliveryQuantitySchedule
instance Extension ElectricityPhysicalDeliveryQuantity CommodityNotionalQuantity
instance SchemaType ElectricityPhysicalDeliveryQuantity
instance SchemaType ElectricityDeliveryUnitFirm
instance SchemaType ElectricityDeliveryType
instance SchemaType ElectricityDeliverySystemFirm
instance Extension ElectricityDeliveryPoint Scheme
instance SchemaType ElectricityDeliveryPoint
instance Extension ElectricityDeliveryPeriods CommodityDeliveryPeriods
instance SchemaType ElectricityDeliveryPeriods
instance SchemaType ElectricityDeliveryFirm
instance SchemaType ElectricityDelivery
instance Extension DisruptionFallback Scheme
instance SchemaType DisruptionFallback
instance Extension CommoditySwapLeg Leg
instance SchemaType CommoditySwapLeg
instance SchemaType CommoditySwaptionUnderlying
instance Extension CommoditySwaption Product
instance SchemaType CommoditySwaption
instance Extension CommoditySwap Product
instance SchemaType CommoditySwap
instance SchemaType CommodityStrikeSchedule
instance SchemaType CommoditySpreadSchedule
instance Extension CommoditySpread MoneyBase
instance Extension CommoditySpread Money
instance SchemaType CommoditySpread
instance SchemaType CommoditySettlementPeriodsPriceSchedule
instance SchemaType CommoditySettlementPeriodsNotionalQuantitySchedule
instance Extension CommoditySettlementPeriodsNotionalQuantity CommodityNotionalQuantity
instance SchemaType CommoditySettlementPeriodsNotionalQuantity
instance SchemaType CommodityRelativePaymentDates
instance SchemaType CommodityRelativeExpirationDates
instance Extension CommodityQuantityFrequency Scheme
instance SchemaType CommodityQuantityFrequency
instance Extension CommodityProductGrade Scheme
instance SchemaType CommodityProductGrade
instance SchemaType CommodityPricingDates
instance Extension CommodityPremium PaymentBase
instance Extension CommodityPremium PaymentBaseExtended
instance Extension CommodityPremium NonNegativePayment
instance SchemaType CommodityPremium
instance Extension CommodityPipelineCycle Scheme
instance SchemaType CommodityPipelineCycle
instance Extension CommodityPipeline Scheme
instance SchemaType CommodityPipeline
instance SchemaType CommodityPhysicalQuantitySchedule
instance SchemaType CommodityPhysicalQuantityBase
instance Extension CommodityPhysicalQuantity CommodityPhysicalQuantityBase
instance SchemaType CommodityPhysicalQuantity
instance SchemaType CommodityPhysicalExercise
instance Extension CommodityPhysicalEuropeanExercise Exercise
instance SchemaType CommodityPhysicalEuropeanExercise
instance Extension CommodityPhysicalAmericanExercise Exercise
instance SchemaType CommodityPhysicalAmericanExercise
instance Extension CommodityPayRelativeToEvent Scheme
instance SchemaType CommodityPayRelativeToEvent
instance Extension CommodityOption Product
instance SchemaType CommodityOption
instance SchemaType CommodityNotionalQuantitySchedule
instance SchemaType CommodityNotionalQuantity
instance SchemaType CommodityMultipleExercise
instance SchemaType CommodityMarketDisruption
instance Extension CommodityHubCode Scheme
instance SchemaType CommodityHubCode
instance SchemaType CommodityHub
instance Extension CommodityFxType Scheme
instance SchemaType CommodityFxType
instance SchemaType CommodityFx
instance Extension CommodityFrequencyType Scheme
instance SchemaType CommodityFrequencyType
instance Extension CommodityForwardLeg Leg
instance SchemaType CommodityForwardLeg
instance SchemaType CommodityFixedPriceSchedule
instance Extension CommodityForward Product
instance SchemaType CommodityForward
instance Extension CommodityExpireRelativeToEvent Scheme
instance SchemaType CommodityExpireRelativeToEvent
instance SchemaType CommodityExercisePeriods
instance SchemaType CommodityExercise
instance Extension CommodityEuropeanExercise Exercise
instance SchemaType CommodityEuropeanExercise
instance Extension CommodityDeliveryRisk Scheme
instance SchemaType CommodityDeliveryRisk
instance Extension CommodityDeliveryPoint Scheme
instance SchemaType CommodityDeliveryPoint
instance SchemaType CommodityDeliveryPeriods
instance Extension CommodityCalculationPeriodsSchedule Frequency
instance SchemaType CommodityCalculationPeriodsSchedule
instance Extension CommodityAmericanExercise Exercise
instance SchemaType CommodityAmericanExercise
instance Extension CoalTransportationEquipment Scheme
instance SchemaType CoalTransportationEquipment
instance SchemaType CoalStandardQualitySchedule
instance SchemaType CoalStandardQuality
instance Extension CoalQualityAdjustments Scheme
instance SchemaType CoalQualityAdjustments
instance Extension CoalProductType Scheme
instance SchemaType CoalProductType
instance SchemaType CoalProductSpecifications
instance Extension CoalProductSource Scheme
instance SchemaType CoalProductSource
instance SchemaType CoalProduct
instance Extension CoalPhysicalLeg Leg
instance Extension CoalPhysicalLeg CommoditySwapLeg
instance Extension CoalPhysicalLeg PhysicalSwapLeg
instance SchemaType CoalPhysicalLeg
instance Extension CoalDeliveryPoint Scheme
instance SchemaType CoalDeliveryPoint
instance SchemaType CoalDelivery
instance SchemaType CoalAttributePercentage
instance SchemaType CoalAttributeDecimal
instance Extension CalculationPeriodsScheduleReference Reference
instance SchemaType CalculationPeriodsScheduleReference
instance Extension CalculationPeriodsReference Reference
instance SchemaType CalculationPeriodsReference
instance Extension CalculationPeriodsDatesReference Reference
instance SchemaType CalculationPeriodsDatesReference
instance Extension BullionPhysicalLeg Leg
instance Extension BullionPhysicalLeg CommodityForwardLeg
instance Extension BullionPhysicalLeg PhysicalForwardLeg
instance SchemaType BullionPhysicalLeg
instance Extension BullionDeliveryLocation Scheme
instance SchemaType BullionDeliveryLocation
instance SchemaType AbsoluteTolerance

module Data.FpML.V53.Shared.EQ

-- | A type for defining ISDA 2002 Equity Derivative Additional Disruption
--   Events.
data AdditionalDisruptionEvents
AdditionalDisruptionEvents :: Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> Maybe RestrictedPercentage -> Maybe Boolean -> Maybe RestrictedPercentage -> Maybe Boolean -> Maybe PartyReference -> Maybe Boolean -> AdditionalDisruptionEvents

-- | If true, then change in law is applicable.
addDisrupEvents_changeInLaw :: AdditionalDisruptionEvents -> Maybe Boolean

-- | Where the underlying is shares and the transaction is physically
--   settled, then, if true, a failure to deliver the shares on the
--   settlement date will not be an event of default for the purposes of
--   the master agreement.
addDisrupEvents_failureToDeliver :: AdditionalDisruptionEvents -> Maybe Boolean

-- | If true, then insolvency filing is applicable.
addDisrupEvents_insolvencyFiling :: AdditionalDisruptionEvents -> Maybe Boolean

-- | If true, then hedging disruption is applicable.
addDisrupEvents_hedgingDisruption :: AdditionalDisruptionEvents -> Maybe Boolean

-- | If true, then loss of stock borrow is applicable.
addDisrupEvents_lossOfStockBorrow :: AdditionalDisruptionEvents -> Maybe Boolean

-- | Specifies the maximum stock loan rate for Loss of Stock Borrow.
addDisrupEvents_maximumStockLoanRate :: AdditionalDisruptionEvents -> Maybe RestrictedPercentage

-- | If true, then increased cost of stock borrow is applicable.
addDisrupEvents_increasedCostOfStockBorrow :: AdditionalDisruptionEvents -> Maybe Boolean

-- | Specifies the initial stock loan rate for Increased Cost of Stock
--   Borrow.
addDisrupEvents_initialStockLoanRate :: AdditionalDisruptionEvents -> Maybe RestrictedPercentage

-- | If true, then increased cost of hedging is applicable.
addDisrupEvents_increasedCostOfHedging :: AdditionalDisruptionEvents -> Maybe Boolean

-- | A reference to the party which determines additional disruption
--   events.
addDisrupEvents_determiningPartyReference :: AdditionalDisruptionEvents -> Maybe PartyReference

-- | If true, then foreign ownership event is applicable.
addDisrupEvents_foreignOwnershipEvent :: AdditionalDisruptionEvents -> Maybe Boolean

-- | Specifies the amount of the fee along with, when applicable, the
--   formula that supports its determination.
data AdditionalPaymentAmount
AdditionalPaymentAmount :: Maybe NonNegativeMoney -> Maybe Formula -> AdditionalPaymentAmount

-- | The currency amount of the payment.
addPaymentAmount_paymentAmount :: AdditionalPaymentAmount -> Maybe NonNegativeMoney

-- | Specifies a formula, with its description and components.
addPaymentAmount_formula :: AdditionalPaymentAmount -> Maybe Formula

-- | A type describing a date defined as subject to adjustment or defined
--   in reference to another date through one or several date offsets.
data AdjustableDateOrRelativeDateSequence
AdjustableDateOrRelativeDateSequence :: Maybe ID -> (Maybe (OneOf2 AdjustableDate RelativeDateSequence)) -> AdjustableDateOrRelativeDateSequence
adords_ID :: AdjustableDateOrRelativeDateSequence -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>A date that shall be subject to adjustment if it would otherwise
--   fall on a day that is not a business day in the specified business
--   centers, together with the convention for adjusting the date.</li>
--   <li>A date specified in relation to some other date defined in the
--   document (the anchor date), where there is the opportunity to specify
--   a combination of offset rules. This component will typically be used
--   for defining the valuation date in relation to the payment date, as
--   both the currency and the exchange holiday calendars need to be
--   considered.</li>
--   </ol>
adords_choice0 :: AdjustableDateOrRelativeDateSequence -> (Maybe (OneOf2 AdjustableDate RelativeDateSequence))

-- | A type describing correlation bounds, which form a cap and a floor on
--   the realized correlation.
data BoundedCorrelation
BoundedCorrelation :: Maybe Decimal -> Maybe Decimal -> BoundedCorrelation

-- | Minimum Boundary as a percentage of the Strike Price.
boundedCorrel_minimumBoundaryPercent :: BoundedCorrelation -> Maybe Decimal

-- | Maximum Boundary as a percentage of the Strike Price.
boundedCorrel_maximumBoundaryPercent :: BoundedCorrelation -> Maybe Decimal

-- | A type describing variance bounds, which are used to exclude money
--   price values outside of the specified range In a Up Conditional Swap
--   Underlyer price must be equal to or higher than Lower Barrier In a
--   Down Conditional Swap Underlyer price must be equal to or lower than
--   Upper Barrier In a Corridor Conditional Swap Underlyer price must be
--   equal to or higher than Lower Barrier and must be equal to or lower
--   than Upper Barrier.
data BoundedVariance
BoundedVariance :: Maybe RealisedVarianceMethodEnum -> Maybe Boolean -> Maybe NonNegativeDecimal -> Maybe NonNegativeDecimal -> BoundedVariance

-- | The contract specifies whether which price must satisfy the boundary
--   condition.
boundedVarian_realisedVarianceMethod :: BoundedVariance -> Maybe RealisedVarianceMethodEnum

-- | The contract specifies whether the notional should be scaled by the
--   Number of Days in Range divided by the Expected N. The number of Days
--   in Ranges refers to the number of returns that contribute to the
--   realized volatility.
boundedVarian_daysInRangeAdjustment :: BoundedVariance -> Maybe Boolean

-- | All observations above this price level will be excluded from the
--   variance calculation.
boundedVarian_upperBarrier :: BoundedVariance -> Maybe NonNegativeDecimal

-- | All observations below this price level will be excluded from the
--   variance calculation.
boundedVarian_lowerBarrier :: BoundedVariance -> Maybe NonNegativeDecimal

-- | An abstract base class for all calculated money amounts, which are in
--   the currency of the cash multiplier of the calculation.
data CalculatedAmount
CalculatedAmount_CorrelationAmount :: CorrelationAmount -> CalculatedAmount
CalculatedAmount_VarianceAmount :: VarianceAmount -> CalculatedAmount

-- | Abstract base class for all calculation from observed values.
data CalculationFromObservation
CalculationFromObservation_Variance :: Variance -> CalculationFromObservation
CalculationFromObservation_Correlation :: Correlation -> CalculationFromObservation

-- | Specifies the compounding method and the compounding rate.
data Compounding
Compounding :: Maybe CompoundingMethodEnum -> Maybe CompoundingRate -> Maybe Decimal -> Maybe AdjustableRelativeOrPeriodicDates2 -> Compounding

-- | If more that one calculation period contributes to a single payment
--   amount this element specifies whether compounding is applicable, and
--   if so, what compounding method is to be used. This element must only
--   be included when more that one calculation period contributes to a
--   single payment amount.
compounding_method :: Compounding -> Maybe CompoundingMethodEnum

-- | Defines a compounding rate. The compounding interest can either point
--   back to the interest calculation node on the Interest Leg, or be
--   defined specifically.
compounding_rate :: Compounding -> Maybe CompoundingRate

-- | Defines the spread to be used for compounding. This field should be
--   used in scenarios where the interest payment is based on a compounding
--   formula that uses a compounding spread in addition to the regular
--   spread.
compounding_spread :: Compounding -> Maybe Decimal

-- | Defines the compounding dates.
compounding_dates :: Compounding -> Maybe AdjustableRelativeOrPeriodicDates2

-- | A type defining a compounding rate. The compounding interest can
--   either point back to the floating rate calculation of interest
--   calculation node on the Interest Leg, or be defined specifically.
data CompoundingRate
CompoundingRate :: (Maybe (OneOf2 FloatingRateCalculationReference InterestAccrualsMethod)) -> CompoundingRate

-- | Choice between:
--   
--   <ol>
--   <li>Reference to the floating rate calculation of interest calculation
--   node on the Interest Leg.</li>
--   <li>Defines a specific rate.</li>
--   </ol>
compoRate_choice0 :: CompoundingRate -> (Maybe (OneOf2 FloatingRateCalculationReference InterestAccrualsMethod))

-- | A type describing the correlation amount of a correlation swap.
data Correlation
Correlation :: (Maybe (OneOf3 Decimal Boolean Boolean)) -> Maybe PositiveInteger -> Maybe NonNegativeMoney -> Maybe CorrelationValue -> Maybe BoundedCorrelation -> Maybe PositiveInteger -> Correlation

-- | Choice between:
--   
--   <ol>
--   <li>Contract will strike off this initial level.</li>
--   <li>If true this contract will strike off the closing level of the
--   default exchange traded contract.</li>
--   <li>If true this contract will strike off the expiring level of the
--   default exchange traded contract.</li>
--   </ol>
correlation_choice0 :: Correlation -> (Maybe (OneOf3 Decimal Boolean Boolean))

-- | Expected number of trading days.
correlation_expectedN :: Correlation -> Maybe PositiveInteger

-- | Notional amount, which is a cash multiplier.
correlation_notionalAmount :: Correlation -> Maybe NonNegativeMoney

-- | Correlation Strike Price.
correlation_strikePrice :: Correlation -> Maybe CorrelationValue

-- | Bounded Correlation.
correlation_boundedCorrelation :: Correlation -> Maybe BoundedCorrelation

-- | Number of data series, normal market practice is that correlation data
--   sets are drawn from geographic market areas, such as America, Europe
--   and Asia Pacific, each of these geographic areas will have its own
--   data series to avoid contagion.
correlation_numberOfDataSeries :: Correlation -> Maybe PositiveInteger

-- | An abstract base class for all directional leg types with effective
--   date, termination date, where a payer makes a stream of payments of
--   greater than zero value to a receiver.
data DirectionalLeg
DirectionalLeg_ReturnSwapLegUnderlyer :: ReturnSwapLegUnderlyer -> DirectionalLeg
DirectionalLeg_InterestLeg :: InterestLeg -> DirectionalLeg
DirectionalLeg_DirectionalLegUnderlyer :: DirectionalLegUnderlyer -> DirectionalLeg
DirectionalLeg_FixedPaymentLeg :: FixedPaymentLeg -> DirectionalLeg

-- | An abstract base class for all directional leg types with effective
--   date, termination date, and underlyer where a payer makes a stream of
--   payments of greater than zero value to a receiver.
data DirectionalLegUnderlyer
DirectionalLegUnderlyer_DirectionalLegUnderlyerValuation :: DirectionalLegUnderlyerValuation -> DirectionalLegUnderlyer
DirectionalLegUnderlyer_DividendLeg :: DividendLeg -> DirectionalLegUnderlyer

-- | An abstract base class for all directional leg types with effective
--   date, termination date, and underlyer, where a payer makes a stream of
--   payments of greater than zero value to a receiver.
data DirectionalLegUnderlyerValuation
DirectionalLegUnderlyerValuation_CorrelationLeg :: CorrelationLeg -> DirectionalLegUnderlyerValuation
DirectionalLegUnderlyerValuation_VarianceLeg :: VarianceLeg -> DirectionalLegUnderlyerValuation

-- | Container for Dividend Adjustment Periods, which are used to calculate
--   the Deviation between Expected Dividend and Actual Dividend in that
--   Period.
data DividendAdjustment
DividendAdjustment :: [DividendPeriodDividend] -> DividendAdjustment

-- | A single Dividend Adjustment Period.
dividAdjust_dividendPeriod :: DividendAdjustment -> [DividendPeriodDividend]

-- | A type describing the conditions governing the payment of dividends to
--   the receiver of the equity return. With the exception of the dividend
--   payout ratio, which is defined for each of the underlying components.
data DividendConditions
DividendConditions :: Maybe Boolean -> Maybe DividendEntitlementEnum -> Maybe DividendAmountTypeEnum -> Maybe DividendPaymentDate -> (Maybe (OneOf2 (Maybe (DateReference), Maybe (DateReference)) DividendPeriodEnum)) -> Maybe PartyReference -> Maybe DividendAmountTypeEnum -> (Maybe (OneOf3 IdentifiedCurrency DeterminationMethod IdentifiedCurrencyReference)) -> Maybe DividendPaymentDate -> Maybe InterestAccrualsCompoundingMethod -> Maybe NonNegativeDecimal -> Maybe NonNegativeDecimal -> Maybe NonNegativeDecimal -> Maybe NonCashDividendTreatmentEnum -> Maybe DividendCompositionEnum -> Maybe Boolean -> DividendConditions

-- | Boolean element that defines whether the dividend will be reinvested
--   or not.
dividCondit_dividendReinvestment :: DividendConditions -> Maybe Boolean

-- | Defines the date on which the receiver on the equity return is
--   entitled to the dividend.
dividCondit_dividendEntitlement :: DividendConditions -> Maybe DividendEntitlementEnum
dividCondit_dividendAmount :: DividendConditions -> Maybe DividendAmountTypeEnum

-- | Specifies when the dividend will be paid to the receiver of the equity
--   return. Has the meaning as defined in the ISDA 2002 Equity Derivatives
--   Definitions. Is not applicable in the case of a dividend reinvestment
--   election.
dividCondit_dividendPaymentDate :: DividendConditions -> Maybe DividendPaymentDate

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>Dividend period has the meaning as defined in the ISDA 2002 Equity
--   Derivatives Definitions. This element specifies the date on which the
--   dividend period will commence.</li>
--   <li>Dividend period has the meaning as defined in the ISDA 2002 Equity
--   Derivatives Definitions. This element specifies the date on which the
--   dividend period will end. It includes a boolean attribute for defining
--   whether this end date is included or excluded from the dividend
--   period.</li>
--   </ul>
--   
--   <ol>
--   <li>Defines the First Period or the Second Period, as defined in the
--   2002 ISDA Equity Derivatives Definitions.</li>
--   </ol>
dividCondit_choice4 :: DividendConditions -> (Maybe (OneOf2 (Maybe (DateReference), Maybe (DateReference)) DividendPeriodEnum))

-- | Reference to the party which determines if dividends are extraordinary
--   in relation to normal levels.
dividCondit_extraOrdinaryDividends :: DividendConditions -> Maybe PartyReference

-- | Determination of Gross Cash Dividend per Share.
dividCondit_excessDividendAmount :: DividendConditions -> Maybe DividendAmountTypeEnum

-- | Choice between:
--   
--   <ol>
--   <li>The currency in which an amount is denominated.</li>
--   <li>Specifies the method according to which an amount or a date is
--   determined.</li>
--   <li>Reference to a currency defined elsewhere in the document</li>
--   </ol>
dividCondit_choice7 :: DividendConditions -> (Maybe (OneOf3 IdentifiedCurrency DeterminationMethod IdentifiedCurrencyReference))

-- | Specifies the date on which the FX rate will be considered in the case
--   of a Composite FX swap.
dividCondit_dividendFxTriggerDate :: DividendConditions -> Maybe DividendPaymentDate
dividCondit_interestAccrualsMethod :: DividendConditions -> Maybe InterestAccrualsCompoundingMethod

-- | Defines the Number Of Index Units applicable to a Dividend.
dividCondit_numberOfIndexUnits :: DividendConditions -> Maybe NonNegativeDecimal

-- | Declared Cash Dividend Percentage.
dividCondit_declaredCashDividendPercentage :: DividendConditions -> Maybe NonNegativeDecimal

-- | Declared Cash Equivalent Dividend Percentage.
dividCondit_declaredCashEquivalentDividendPercentage :: DividendConditions -> Maybe NonNegativeDecimal

-- | Defines treatment of Non-Cash Dividends.
dividCondit_nonCashDividendTreatment :: DividendConditions -> Maybe NonCashDividendTreatmentEnum

-- | Defines how the composition of Dividends is to be determined.
dividCondit_dividendComposition :: DividendConditions -> Maybe DividendCompositionEnum

-- | Specifies the method according to which special dividends are
--   determined.
dividCondit_specialDividends :: DividendConditions -> Maybe Boolean

-- | A type describing the date on which the dividend will be
--   paid/received. This type is also used to specify the date on which the
--   FX rate will be determined, when applicable.
data DividendPaymentDate
DividendPaymentDate :: (Maybe (OneOf2 (Maybe (DividendDateReferenceEnum), Maybe (Offset)) AdjustableDate)) -> DividendPaymentDate

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>Specification of the dividend date using an enumeration, with
--   values such as the pay date, the ex date or the record date.</li>
--   <li>Only to be used when SharePayment has been specified in the
--   dividendDateReference element. The number of Currency Business Days
--   following the day on which the Issuer of the Shares pays the relevant
--   dividend to holders of record of the Shares.</li>
--   </ul>
--   
--   <ol>
--   <li>A date that shall be subject to adjustment if it would otherwise
--   fall on a day that is not a business day in the specified business
--   centers, together with the convention for adjusting the date.</li>
--   </ol>
dividPaymentDate_choice0 :: DividendPaymentDate -> (Maybe (OneOf2 (Maybe (DividendDateReferenceEnum), Maybe (Offset)) AdjustableDate))

-- | Abstract base class of all time bounded dividend period types.
data DividendPeriod
DividendPeriod_DividendPeriodDividend :: DividendPeriodDividend -> DividendPeriod
DividendPeriod_DividendPeriodPayment :: DividendPeriodPayment -> DividendPeriod

-- | A time bounded dividend period, with an expected dividend for each
--   period.
data DividendPeriodDividend
DividendPeriodDividend :: Maybe ID -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe BusinessDayAdjustments -> Maybe AssetReference -> Maybe NonNegativeMoney -> Maybe PositiveDecimal -> DividendPeriodDividend
dividPeriodDivid_ID :: DividendPeriodDividend -> Maybe ID

-- | Unadjusted inclusive dividend period start date.
dividPeriodDivid_unadjustedStartDate :: DividendPeriodDividend -> Maybe IdentifiedDate

-- | Unadjusted inclusive dividend period end date.
dividPeriodDivid_unadjustedEndDate :: DividendPeriodDividend -> Maybe IdentifiedDate

-- | Date adjustments for all unadjusted dates in this dividend period.
dividPeriodDivid_dateAdjustments :: DividendPeriodDividend -> Maybe BusinessDayAdjustments

-- | Reference to the underlyer which is paying dividends. This should be
--   used in all cases, and must be used where there are multiple
--   underlying assets, to avoid any ambiguity about which asset the
--   dividend period relates to.
dividPeriodDivid_underlyerReference :: DividendPeriodDividend -> Maybe AssetReference

-- | Expected dividend in this period.
dividPeriodDivid_dividend :: DividendPeriodDividend -> Maybe NonNegativeMoney

-- | Multiplier is a percentage value which is used to produce Deviation by
--   multiplying the difference between Expected Dividend and Actual
--   Dividend Deviation = Multiplier * (Expected Dividend — Actual
--   Dividend).
dividPeriodDivid_multiplier :: DividendPeriodDividend -> Maybe PositiveDecimal

-- | A type for defining the merger events and their treatment.
data EquityCorporateEvents
EquityCorporateEvents :: Maybe ShareExtraordinaryEventEnum -> Maybe ShareExtraordinaryEventEnum -> Maybe ShareExtraordinaryEventEnum -> EquityCorporateEvents

-- | The consideration paid for the original shares following the Merger
--   Event consists wholly of new shares.
equityCorporEvents_shareForShare :: EquityCorporateEvents -> Maybe ShareExtraordinaryEventEnum

-- | The consideration paid for the original shares following the Merger
--   Event consists wholly of cash/securities other than new shares.
equityCorporEvents_shareForOther :: EquityCorporateEvents -> Maybe ShareExtraordinaryEventEnum

-- | The consideration paid for the original shares following the Merger
--   Event consists of both cash/securities and new shares.
equityCorporEvents_shareForCombined :: EquityCorporateEvents -> Maybe ShareExtraordinaryEventEnum

-- | A type used to describe the amount paid for an equity option.
data EquityPremium
EquityPremium :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe PremiumTypeEnum -> Maybe NonNegativeMoney -> Maybe AdjustableDate -> Maybe Boolean -> Maybe NonNegativeMoney -> Maybe NonNegativeDecimal -> EquityPremium
equityPremium_ID :: EquityPremium -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
equityPremium_payerPartyReference :: EquityPremium -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
equityPremium_payerAccountReference :: EquityPremium -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
equityPremium_receiverPartyReference :: EquityPremium -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
equityPremium_receiverAccountReference :: EquityPremium -> Maybe AccountReference

-- | Forward start Premium type
equityPremium_premiumType :: EquityPremium -> Maybe PremiumTypeEnum

-- | The currency amount of the payment.
equityPremium_paymentAmount :: EquityPremium -> Maybe NonNegativeMoney

-- | The payment date. This date is subject to adjustment in accordance
--   with any applicable business day convention.
equityPremium_paymentDate :: EquityPremium -> Maybe AdjustableDate

-- | Specifies whether or not the premium is to be paid in the style of
--   payments under an interest rate swap contract.
equityPremium_swapPremium :: EquityPremium -> Maybe Boolean

-- | The amount of premium to be paid expressed as a function of the number
--   of options.
equityPremium_pricePerOption :: EquityPremium -> Maybe NonNegativeMoney

-- | The amount of premium to be paid expressed as a percentage of the
--   notional value of the transaction. A percentage of 5% would be
--   expressed as 0.05.
equityPremium_percentageOfNotional :: EquityPremium -> Maybe NonNegativeDecimal

-- | A type for defining the strike price for an equity option. The strike
--   price is either: (i) in respect of an index option transaction, the
--   level of the relevant index specified or otherwise determined in the
--   transaction; or (ii) in respect of a share option transaction, the
--   price per share specified or otherwise determined in the transaction.
--   This can be expressed either as a percentage of notional amount or as
--   an absolute value.
data EquityStrike
EquityStrike :: (Maybe (OneOf2 Decimal (Maybe (Decimal), Maybe (AdjustableOrRelativeDate)))) -> Maybe Currency -> EquityStrike

-- | Choice between:
--   
--   <ol>
--   <li>The price or level at which the option has been struck.</li>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The price or level expressed as a percentage of the forward
--   starting spot price.</li>
--   <li>The date on which the strike is determined, where this is not the
--   effective date of a forward starting option.</li>
--   </ul>
equityStrike_choice0 :: EquityStrike -> (Maybe (OneOf2 Decimal (Maybe (Decimal), Maybe (AdjustableOrRelativeDate))))

-- | The currency in which an amount is denominated.
equityStrike_currency :: EquityStrike -> Maybe Currency

-- | A type for defining how and when an equity option is to be valued.
data EquityValuation
EquityValuation :: Maybe ID -> (Maybe (OneOf2 AdjustableDateOrRelativeDateSequence AdjustableRelativeOrPeriodicDates)) -> Maybe TimeTypeEnum -> Maybe BusinessCenterTime -> Maybe Boolean -> Maybe Boolean -> Maybe NonNegativeInteger -> Maybe AdjustableRelativeOrPeriodicDates -> Maybe FPVFinalPriceElectionFallbackEnum -> EquityValuation
equityVal_ID :: EquityValuation -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>The term <a>Valuation Date</a> is assumed to have the meaning as
--   defined in the ISDA 2002 Equity Derivatives Definitions.</li>
--   <li>Specifies the interim equity valuation dates of a swap.</li>
--   </ol>
equityVal_choice0 :: EquityValuation -> (Maybe (OneOf2 AdjustableDateOrRelativeDateSequence AdjustableRelativeOrPeriodicDates))

-- | The time of day at which the calculation agent values the underlying,
--   for example the official closing time of the exchange.
equityVal_valuationTimeType :: EquityValuation -> Maybe TimeTypeEnum

-- | The specific time of day at which the calculation agent values the
--   underlying.
equityVal_valuationTime :: EquityValuation -> Maybe BusinessCenterTime

-- | The official settlement price as announced by the related exchange is
--   applicable, in accordance with the ISDA 2002 definitions.
equityVal_futuresPriceValuation :: EquityValuation -> Maybe Boolean

-- | The official settlement price as announced by the related exchange is
--   applicable, in accordance with the ISDA 2002 definitions.
equityVal_optionsPriceValuation :: EquityValuation -> Maybe Boolean

-- | The number of valuation dates between valuation start date and
--   valuation end date.
equityVal_numberOfValuationDates :: EquityValuation -> Maybe NonNegativeInteger

-- | Specifies the dividend valuation dates of the swap.
equityVal_dividendValuationDates :: EquityValuation -> Maybe AdjustableRelativeOrPeriodicDates

-- | Specifies the fallback provisions for Hedging Party in the
--   determination of the Final Price.
equityVal_fPVFinalPriceElectionFallback :: EquityValuation -> Maybe FPVFinalPriceElectionFallbackEnum

-- | Where the underlying is shares, defines market events affecting the
--   issuer of those shares that may require the terms of the transaction
--   to be adjusted.
data ExtraordinaryEvents
ExtraordinaryEvents :: Maybe EquityCorporateEvents -> Maybe Boolean -> Maybe EquityCorporateEvents -> Maybe Boolean -> Maybe IndexAdjustmentEvents -> (Maybe (OneOf2 AdditionalDisruptionEvents Boolean)) -> Maybe Representations -> Maybe NationalisationOrInsolvencyOrDelistingEventEnum -> Maybe NationalisationOrInsolvencyOrDelistingEventEnum -> [ExchangeId] -> [ExchangeId] -> [ExchangeId] -> ExtraordinaryEvents

-- | Occurs when the underlying ceases to exist following a merger between
--   the Issuer and another company.
extraEvents_mergerEvents :: ExtraordinaryEvents -> Maybe EquityCorporateEvents

-- | If present and true, then tender offer is applicable.
extraEvents_tenderOffer :: ExtraordinaryEvents -> Maybe Boolean

-- | ISDA 2002 Equity Tender Offer Events.
extraEvents_tenderOfferEvents :: ExtraordinaryEvents -> Maybe EquityCorporateEvents

-- | If present and true, then composition of combined consideration is
--   applicable.
extraEvents_compositionOfCombinedConsideration :: ExtraordinaryEvents -> Maybe Boolean

-- | ISDA 2002 Equity Index Adjustment Events.
extraEvents_indexAdjustmentEvents :: ExtraordinaryEvents -> Maybe IndexAdjustmentEvents

-- | Choice between:
--   
--   <ol>
--   <li>ISDA 2002 Equity Additional Disruption Events.</li>
--   <li>If true, failure to deliver is applicable.</li>
--   </ol>
extraEvents_choice5 :: ExtraordinaryEvents -> (Maybe (OneOf2 AdditionalDisruptionEvents Boolean))

-- | ISDA 2002 Equity Derivative Representations.
extraEvents_representations :: ExtraordinaryEvents -> Maybe Representations

-- | The terms <a>Nationalisation</a> and <a>Insolvency</a> have the
--   meaning as defined in the ISDA 2002 Equity Derivatives Definitions.
extraEvents_nationalisationOrInsolvency :: ExtraordinaryEvents -> Maybe NationalisationOrInsolvencyOrDelistingEventEnum

-- | The term <a>Delisting</a> has the meaning defined in the ISDA 2002
--   Equity Derivatives Definitions.
extraEvents_delisting :: ExtraordinaryEvents -> Maybe NationalisationOrInsolvencyOrDelistingEventEnum

-- | A short form unique identifier for a related exchange. If the element
--   is not present then the exchange shall be the primary exchange on
--   which listed futures and options on the underlying are listed. The
--   term <a>Exchange</a> is assumed to have the meaning as defined in the
--   ISDA 2002 Equity Derivatives Definitions.
extraEvents_relatedExchangeId :: ExtraordinaryEvents -> [ExchangeId]

-- | A short form unique identifier for an exchange on which the reference
--   option contract is listed. This is to address the case where the
--   reference exchange for the future is different than the one for the
--   option. The options Exchange is referenced on share options when
--   Merger Elections are selected as Options Exchange Adjustment.
extraEvents_optionsExchangeId :: ExtraordinaryEvents -> [ExchangeId]

-- | A short form unique identifier for a specified exchange. If the
--   element is not present then the exchange shall be default terms as
--   defined in the MCA; unless otherwise specified in the Transaction
--   Supplement.
extraEvents_specifiedExchangeId :: ExtraordinaryEvents -> [ExchangeId]

-- | Reference to a floating rate calculation of interest calculation
--   component.
data FloatingRateCalculationReference
FloatingRateCalculationReference :: IDREF -> FloatingRateCalculationReference
floatRateCalcRef_href :: FloatingRateCalculationReference -> IDREF

-- | Defines the specification of the consequences of Index Events as
--   defined by the 2002 ISDA Equity Derivatives Definitions.
data IndexAdjustmentEvents
IndexAdjustmentEvents :: Maybe IndexEventConsequenceEnum -> Maybe IndexEventConsequenceEnum -> Maybe IndexEventConsequenceEnum -> IndexAdjustmentEvents

-- | Consequence of index modification.
indexAdjustEvents_indexModification :: IndexAdjustmentEvents -> Maybe IndexEventConsequenceEnum

-- | Consequence of index cancellation.
indexAdjustEvents_indexCancellation :: IndexAdjustmentEvents -> Maybe IndexEventConsequenceEnum

-- | Consequence of index disruption.
indexAdjustEvents_indexDisruption :: IndexAdjustmentEvents -> Maybe IndexEventConsequenceEnum

-- | Specifies the calculation method of the interest rate leg of the
--   return swap. Includes the floating or fixed rate calculation
--   definitions, along with the determination of the day count fraction.
data InterestCalculation
InterestCalculation :: Maybe ID -> OneOf2 FloatingRateCalculation Decimal -> Maybe DayCountFraction -> Maybe Compounding -> Maybe InterpolationMethod -> Maybe InterpolationPeriodEnum -> InterestCalculation
interCalc_ID :: InterestCalculation -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>The floating rate calculation definitions</li>
--   <li>The calculation period fixed rate. A per annum rate, expressed as
--   a decimal. A fixed rate of 5% would be represented as 0.05.</li>
--   </ol>
interCalc_choice0 :: InterestCalculation -> OneOf2 FloatingRateCalculation Decimal

-- | The day count fraction.
interCalc_dayCountFraction :: InterestCalculation -> Maybe DayCountFraction

-- | Defines compounding rates on the Interest Leg.
interCalc_compounding :: InterestCalculation -> Maybe Compounding

-- | Specifies the type of interpolation used.
interCalc_interpolationMethod :: InterestCalculation -> Maybe InterpolationMethod

-- | Defines applicable periods for interpolation.
interCalc_interpolationPeriod :: InterestCalculation -> Maybe InterpolationPeriodEnum

-- | A type describing the fixed income leg of the equity swap.
data InterestLeg
InterestLeg :: Maybe ID -> [LegIdentifier] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe AdjustableOrRelativeDate -> Maybe AdjustableOrRelativeDate -> Maybe InterestLegCalculationPeriodDates -> Maybe ReturnSwapNotional -> Maybe LegAmount -> InterestCalculation -> Maybe StubCalculationPeriod -> InterestLeg
interestLeg_ID :: InterestLeg -> Maybe ID

-- | Version aware identification of this leg.
interestLeg_legIdentifier :: InterestLeg -> [LegIdentifier]

-- | A reference to the party responsible for making the payments defined
--   by this structure.
interestLeg_payerPartyReference :: InterestLeg -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
interestLeg_payerAccountReference :: InterestLeg -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
interestLeg_receiverPartyReference :: InterestLeg -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
interestLeg_receiverAccountReference :: InterestLeg -> Maybe AccountReference

-- | Specifies the effective date of this leg of the swap. When defined in
--   relation to a date specified somewhere else in the document (through
--   the relativeDate component), this element will typically point to the
--   effective date of the other leg of the swap.
interestLeg_effectiveDate :: InterestLeg -> Maybe AdjustableOrRelativeDate

-- | Specifies the termination date of this leg of the swap. When defined
--   in relation to a date specified somewhere else in the document
--   (through the relativeDate component), this element will typically
--   point to the termination date of the other leg of the swap.
interestLeg_terminationDate :: InterestLeg -> Maybe AdjustableOrRelativeDate

-- | Component that holds the various dates used to specify the interest
--   leg of the equity swap. It is used to define the InterestPeriodDates
--   identifyer.
interestLeg_calculationPeriodDates :: InterestLeg -> Maybe InterestLegCalculationPeriodDates

-- | Specifies the notional of a return type swap. When used in the equity
--   leg, the definition will typically combine the actual amount (using
--   the notional component defined by the FpML industry group) and the
--   determination method. When used in the interest leg, the definition
--   will typically point to the definition of the equity leg.
interestLeg_notional :: InterestLeg -> Maybe ReturnSwapNotional

-- | Specifies, in relation to each Interest Payment Date, the amount to
--   which the Interest Payment Date relates. Unless otherwise specified,
--   this term has the meaning defined in the ISDA 2000 ISDA Definitions.
interestLeg_interestAmount :: InterestLeg -> Maybe LegAmount

-- | Specifies the calculation method of the interest rate leg of the
--   equity swap. Includes the floating or fixed rate calculation
--   definitions, along with the determination of the day count fraction.
interestLeg_interestCalculation :: InterestLeg -> InterestCalculation

-- | Specifies the stub calculation period.
interestLeg_stubCalculationPeriod :: InterestLeg -> Maybe StubCalculationPeriod

-- | Component that holds the various dates used to specify the interest
--   leg of the return swap. It is used to define the InterestPeriodDates
--   identifyer.
data InterestLegCalculationPeriodDates
InterestLegCalculationPeriodDates :: ID -> Maybe AdjustableOrRelativeDate -> Maybe AdjustableOrRelativeDate -> Maybe InterestLegResetDates -> Maybe AdjustableRelativeOrPeriodicDates2 -> InterestLegCalculationPeriodDates
interLegCalcPeriodDates_ID :: InterestLegCalculationPeriodDates -> ID

-- | Specifies the effective date of the return swap. This global element
--   is valid within the return swaps namespace. Within the FpML namespace,
--   another effectiveDate global element has been defined, that is
--   different in the sense that it does not propose the choice of refering
--   to another date in the document.
interLegCalcPeriodDates_effectiveDate :: InterestLegCalculationPeriodDates -> Maybe AdjustableOrRelativeDate

-- | Specifies the termination date of the return swap. This global element
--   is valid within the return swaps namespace. Within the FpML namespace,
--   another terminationDate global element has been defined, that is
--   different in the sense that it does not propose the choice of refering
--   to another date in the document.
interLegCalcPeriodDates_terminationDate :: InterestLegCalculationPeriodDates -> Maybe AdjustableOrRelativeDate

-- | Specifies the reset dates of the interest leg of the swap.
interLegCalcPeriodDates_interestLegResetDates :: InterestLegCalculationPeriodDates -> Maybe InterestLegResetDates

-- | Specifies the payment dates of the interest leg of the swap. When
--   defined in relation to a date specified somewhere else in the document
--   (through the relativeDates component), this element will typically
--   point to the payment dates of the equity leg of the swap.
interLegCalcPeriodDates_interestLegPaymentDates :: InterestLegCalculationPeriodDates -> Maybe AdjustableRelativeOrPeriodicDates2

-- | Reference to the calculation period dates of the interest leg.
data InterestLegCalculationPeriodDatesReference
InterestLegCalculationPeriodDatesReference :: IDREF -> InterestLegCalculationPeriodDatesReference
ilcpdr_href :: InterestLegCalculationPeriodDatesReference -> IDREF
data InterestLegResetDates
InterestLegResetDates :: Maybe InterestLegCalculationPeriodDatesReference -> (Maybe (OneOf2 ResetRelativeToEnum ResetFrequency)) -> Maybe RelativeDateOffset -> Maybe AdjustableDatesOrRelativeDateOffset -> InterestLegResetDates

-- | A pointer style reference to the associated calculation period dates
--   component defined elsewhere in the document.
interLegResetDates_calculationPeriodDatesReference :: InterestLegResetDates -> Maybe InterestLegCalculationPeriodDatesReference

-- | Choice between:
--   
--   <ol>
--   <li>Specifies whether the reset dates are determined with respect to
--   each adjusted calculation period start date or adjusted calculation
--   period end date. If the reset frequency is specified as daily this
--   element must not be included.</li>
--   <li>The frequency at which reset dates occur. In the case of a weekly
--   reset frequency, also specifies the day of the week that the reset
--   occurs. If the reset frequency is greater than the calculation period
--   frequency then this implies that more than one reset date is
--   established for each calculation period and some form of rate
--   averaging is applicable.</li>
--   </ol>
interLegResetDates_choice1 :: InterestLegResetDates -> (Maybe (OneOf2 ResetRelativeToEnum ResetFrequency))

-- | Initial fixing date expressed as an offset to another date defined
--   elsewhere in the document.
interLegResetDates_initialFixingDate :: InterestLegResetDates -> Maybe RelativeDateOffset

-- | Specifies the fixing date relative to the reset date in terms of a
--   business days offset, or by providing a series of adjustable dates.
interLegResetDates_fixingDates :: InterestLegResetDates -> Maybe AdjustableDatesOrRelativeDateOffset

-- | A type describing the amount that will paid or received on each of the
--   payment dates. This type is used to define both the Equity Amount and
--   the Interest Amount.
data LegAmount
LegAmount :: (Maybe (OneOf3 IdentifiedCurrency DeterminationMethod IdentifiedCurrencyReference)) -> (Maybe (OneOf3 ReferenceAmount Formula Base64Binary)) -> Maybe AdjustableRelativeOrPeriodicDates -> LegAmount

-- | Choice between:
--   
--   <ol>
--   <li>The currency in which an amount is denominated.</li>
--   <li>Specifies the method according to which an amount or a date is
--   determined.</li>
--   <li>Reference to a currency defined elsewhere in the document</li>
--   </ol>
legAmount_choice0 :: LegAmount -> (Maybe (OneOf3 IdentifiedCurrency DeterminationMethod IdentifiedCurrencyReference))

-- | Choice between:
--   
--   <ol>
--   <li>Specifies the reference Amount when this term either corresponds
--   to the standard ISDA Definition (either the 2002 Equity Definition for
--   the Equity Amount, or the 2000 Definition for the Interest Amount), or
--   points to a term defined elsewhere in the swap document.</li>
--   <li>Specifies a formula, with its description and components.</li>
--   <li>Description of the leg amount when represented through an encoded
--   image.</li>
--   </ol>
legAmount_choice1 :: LegAmount -> (Maybe (OneOf3 ReferenceAmount Formula Base64Binary))

-- | Specifies the date on which a calculation or an observation will be
--   performed for the purpose of defining the Equity Amount, and in
--   accordance to the definition terms of this latter.
legAmount_calculationDates :: LegAmount -> Maybe AdjustableRelativeOrPeriodicDates

-- | Leg identity.
data LegId
LegId :: Token60 -> LegIdAttributes -> LegId
data LegIdAttributes
LegIdAttributes :: AnyURI -> LegIdAttributes
legIdAttrib_legIdScheme :: LegIdAttributes -> AnyURI

-- | Version aware identification of a leg.
data LegIdentifier
LegIdentifier :: Maybe LegId -> Maybe NonNegativeInteger -> Maybe IdentifiedDate -> LegIdentifier

-- | Identity of this leg.
legIdent_legId :: LegIdentifier -> Maybe LegId

-- | The version number
legIdent_version :: LegIdentifier -> Maybe NonNegativeInteger

-- | Optionally it is possible to specify a version effective date when a
--   versionId is supplied.
legIdent_effectiveDate :: LegIdentifier -> Maybe IdentifiedDate

-- | A type to hold early exercise provisions.
data MakeWholeProvisions
MakeWholeProvisions :: Maybe Date -> Maybe Decimal -> MakeWholeProvisions

-- | Date through which option can not be exercised without penalty.
makeWholeProvis_makeWholeDate :: MakeWholeProvisions -> Maybe Date

-- | Spread used if exercised before make whole date. Early termination
--   penalty. Expressed in bp, e.g. 25 bp.
makeWholeProvis_recallSpread :: MakeWholeProvisions -> Maybe Decimal

-- | An abstract base class for all swap types which have a single netted
--   leg, such as Variance Swaps, and Correlation Swaps.
data NettedSwapBase
NettedSwapBase_CorrelationSwap :: CorrelationSwap -> NettedSwapBase
NettedSwapBase_VarianceSwap :: VarianceSwap -> NettedSwapBase

-- | A type for defining option features.
data OptionFeatures
OptionFeatures :: Maybe Asian -> Maybe Barrier -> Maybe Knock -> Maybe PassThrough -> Maybe DividendAdjustment -> OptionFeatures

-- | An option where and average price is taken on valuation.
optionFeatur_asian :: OptionFeatures -> Maybe Asian

-- | An option with a barrier feature.
optionFeatur_barrier :: OptionFeatures -> Maybe Barrier

-- | A knock feature.
optionFeatur_knock :: OptionFeatures -> Maybe Knock

-- | Pass through payments from the underlyer, such as dividends.
optionFeatur_passThrough :: OptionFeatures -> Maybe PassThrough

-- | Dividend adjustment of the contract is driven by the difference
--   between the Expected Dividend, and the Actual Dividend, which is
--   multiplied by an agreed Factor to produce a Deviation, which is used
--   as the basis for adjusting the contract. The parties acknowledge that
--   in determining the Call Strike Price of the Transaction the parties
--   have assumed that the Dividend scheduled to be paid by the Issuer to
--   holders of record of the Shares, in the period set out in Column
--   headed Relevant Period will equal per Share the amount stated in
--   respect of such Relevant Period.
optionFeatur_dividendAdjustment :: OptionFeatures -> Maybe DividendAdjustment

-- | Specifies the principal exchange amount, either by explicitly defining
--   it, or by point to an amount defined somewhere else in the swap
--   document.
data PrincipalExchangeAmount
PrincipalExchangeAmount :: (Maybe (OneOf3 AmountReference DeterminationMethod NonNegativeMoney)) -> PrincipalExchangeAmount

-- | Choice between:
--   
--   <ol>
--   <li>Reference to an amount defined elsewhere in the document.</li>
--   <li>Specifies the method according to which an amount or a date is
--   determined.</li>
--   <li>Principal exchange amount when explictly stated.</li>
--   </ol>
princExchAmount_choice0 :: PrincipalExchangeAmount -> (Maybe (OneOf3 AmountReference DeterminationMethod NonNegativeMoney))

-- | Specifies each of the characteristics of the principal exchange
--   cashflows, in terms of paying/receiving counterparties, amounts and
--   dates.
data PrincipalExchangeDescriptions
PrincipalExchangeDescriptions :: Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe PrincipalExchangeAmount -> Maybe AdjustableOrRelativeDate -> PrincipalExchangeDescriptions

-- | A reference to the party responsible for making the payments defined
--   by this structure.
princExchDescr_payerPartyReference :: PrincipalExchangeDescriptions -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
princExchDescr_payerAccountReference :: PrincipalExchangeDescriptions -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
princExchDescr_receiverPartyReference :: PrincipalExchangeDescriptions -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
princExchDescr_receiverAccountReference :: PrincipalExchangeDescriptions -> Maybe AccountReference

-- | Specifies the principal echange amount, either by explicitly defining
--   it, or by point to an amount defined somewhere else in the swap
--   document.
princExchDescr_principalExchangeAmount :: PrincipalExchangeDescriptions -> Maybe PrincipalExchangeAmount

-- | Date on which each of the principal exchanges will take place. This
--   date is either explictly stated, or is defined by reference to another
--   date in the swap document. In this latter case, it will typically
--   refer to one other date of the equity leg: either the effective date
--   (initial exchange), or the last payment date (final exchange).
princExchDescr_principalExchangeDate :: PrincipalExchangeDescriptions -> Maybe AdjustableOrRelativeDate

-- | A type describing the principal exchange features of the return swap.
data PrincipalExchangeFeatures
PrincipalExchangeFeatures :: Maybe PrincipalExchanges -> [PrincipalExchangeDescriptions] -> PrincipalExchangeFeatures

-- | The true/false flags indicating whether initial, intermediate or final
--   exchanges of principal should occur.
princExchFeatur_principalExchanges :: PrincipalExchangeFeatures -> Maybe PrincipalExchanges

-- | Specifies each of the characteristics of the principal exchange
--   cashflows, in terms of paying/receiving counterparties, amounts and
--   dates.
princExchFeatur_principalExchangeDescriptions :: PrincipalExchangeFeatures -> [PrincipalExchangeDescriptions]

-- | A type for defining ISDA 2002 Equity Derivative Representations.
data Representations
Representations :: Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> Representations

-- | If true, then non reliance is applicable.
repres_nonReliance :: Representations -> Maybe Boolean

-- | If true, then agreements regarding hedging are applicable.
repres_agreementsRegardingHedging :: Representations -> Maybe Boolean

-- | If present and true, then index disclaimer is applicable.
repres_indexDisclaimer :: Representations -> Maybe Boolean

-- | If true, then additional acknowledgements are applicable.
repres_additionalAcknowledgements :: Representations -> Maybe Boolean

-- | A type describing the dividend return conditions applicable to the
--   swap.
data Return
Return :: ReturnTypeEnum -> Maybe DividendConditions -> Return

-- | Defines the type of return associated with the return swap.
return_type :: Return -> ReturnTypeEnum

-- | Specifies the conditions governing the payment of the dividends to the
--   receiver of the equity return. With the exception of the dividend
--   payout ratio, which is defined for each of the underlying components.
return_dividendConditions :: Return -> Maybe DividendConditions

-- | A type describing the return leg of a return type swap.
data ReturnLeg
ReturnLeg :: Maybe ID -> [LegIdentifier] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe AdjustableOrRelativeDate -> Maybe AdjustableOrRelativeDate -> Maybe AdjustableOrRelativeDate -> Underlyer -> ReturnLegValuation -> Maybe ReturnSwapNotional -> ReturnSwapAmount -> Maybe Return -> Maybe NotionalAdjustmentEnum -> Maybe FxFeature -> Maybe AveragingPeriod -> ReturnLeg
returnLeg_ID :: ReturnLeg -> Maybe ID

-- | Version aware identification of this leg.
returnLeg_legIdentifier :: ReturnLeg -> [LegIdentifier]

-- | A reference to the party responsible for making the payments defined
--   by this structure.
returnLeg_payerPartyReference :: ReturnLeg -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
returnLeg_payerAccountReference :: ReturnLeg -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
returnLeg_receiverPartyReference :: ReturnLeg -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
returnLeg_receiverAccountReference :: ReturnLeg -> Maybe AccountReference

-- | Specifies the effective date of this leg of the swap. When defined in
--   relation to a date specified somewhere else in the document (through
--   the relativeDate component), this element will typically point to the
--   effective date of the other leg of the swap.
returnLeg_effectiveDate :: ReturnLeg -> Maybe AdjustableOrRelativeDate

-- | Specifies the termination date of this leg of the swap. When defined
--   in relation to a date specified somewhere else in the document
--   (through the relativeDate component), this element will typically
--   point to the termination date of the other leg of the swap.
returnLeg_terminationDate :: ReturnLeg -> Maybe AdjustableOrRelativeDate

-- | Specifies the strike date of this leg of the swap, used for forward
--   starting swaps. When defined in relation to a date specified somewhere
--   else in the document (through the relativeDate component), this
--   element will typically by relative to the trade date of the swap.
returnLeg_strikeDate :: ReturnLeg -> Maybe AdjustableOrRelativeDate

-- | Specifies the underlying component of the leg, which can be either one
--   or many and consists in either equity, index or convertible bond
--   component, or a combination of these.
returnLeg_underlyer :: ReturnLeg -> Underlyer

-- | Specifies the terms of the initial price of the return type swap and
--   of the subsequent valuations of the underlyer.
returnLeg_rateOfReturn :: ReturnLeg -> ReturnLegValuation

-- | Specifies the notional of a return type swap. When used in the equity
--   leg, the definition will typically combine the actual amount (using
--   the notional component defined by the FpML industry group) and the
--   determination method. When used in the interest leg, the definition
--   will typically point to the definition of the equity leg.
returnLeg_notional :: ReturnLeg -> Maybe ReturnSwapNotional

-- | Specifies, in relation to each Payment Date, the amount to which the
--   Payment Date relates. For return swaps this element is equivalent to
--   the Equity Amount term as defined in the ISDA 2002 Equity Derivatives
--   Definitions.
returnLeg_amount :: ReturnLeg -> ReturnSwapAmount

-- | Specifies the conditions under which dividend affecting the underlyer
--   will be paid to the receiver of the amounts.
returnLeg_return :: ReturnLeg -> Maybe Return

-- | Specifies the conditions that govern the adjustment to the number of
--   units of the return swap.
returnLeg_notionalAdjustments :: ReturnLeg -> Maybe NotionalAdjustmentEnum

-- | A quanto or composite FX feature.
returnLeg_fxFeature :: ReturnLeg -> Maybe FxFeature

-- | Averaging Dates used in the swap.
returnLeg_averagingDates :: ReturnLeg -> Maybe AveragingPeriod

-- | A type describing the initial and final valuation of the underlyer.
data ReturnLegValuation
ReturnLegValuation :: Maybe ReturnLegValuationPrice -> Maybe Boolean -> Maybe ReturnLegValuationPrice -> Maybe ReturnLegValuationPrice -> Maybe ReturnSwapPaymentDates -> Maybe ExchangeTradedContract -> ReturnLegValuation

-- | Specifies the initial reference price of the underlyer. This price can
--   be expressed either as an actual amount/currency, as a determination
--   method, or by reference to another value specified in the swap
--   document.
returnLegVal_initialPrice :: ReturnLegValuation -> Maybe ReturnLegValuationPrice
returnLegVal_notionalReset :: ReturnLegValuation -> Maybe Boolean

-- | Specifies the final valuation price of the underlyer. This price can
--   be expressed either as an actual amount/currency, as a determination
--   method, or by reference to another value specified in the swap
--   document.
returnLegVal_valuationPriceInterim :: ReturnLegValuation -> Maybe ReturnLegValuationPrice

-- | Specifies the final valuation price of the underlyer. This price can
--   be expressed either as an actual amount/currency, as a determination
--   method, or by reference to another value specified in the swap
--   document.
returnLegVal_valuationPriceFinal :: ReturnLegValuation -> Maybe ReturnLegValuationPrice

-- | Specifies the payment dates of the swap.
returnLegVal_paymentDates :: ReturnLegValuation -> Maybe ReturnSwapPaymentDates

-- | References a Contract on the Exchange.
returnLegVal_exchangeTradedContractNearest :: ReturnLegValuation -> Maybe ExchangeTradedContract
data ReturnLegValuationPrice
ReturnLegValuationPrice :: Maybe Commission -> OneOf3 (DeterminationMethod, Maybe (ActualPrice), Maybe (ActualPrice), Maybe (Decimal), Maybe (FxConversion)) AmountReference (Maybe (ActualPrice), Maybe (ActualPrice), Maybe (Decimal), Maybe (FxConversion)) -> Maybe Decimal -> Maybe QuotationCharacteristics -> Maybe EquityValuation -> ReturnLegValuationPrice

-- | This optional component specifies the commission to be charged for
--   executing the hedge transactions.
returnLegValPrice_commission :: ReturnLegValuationPrice -> Maybe Commission

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>Specifies the method according to which an amount or a date is
--   determined.</li>
--   <li>Specifies the price of the underlyer, before commissions.</li>
--   <li>Specifies the price of the underlyer, net of commissions.</li>
--   <li>Specifies the accrued interest that are part of the dirty price in
--   the case of a fixed income security or a convertible bond. Expressed
--   in percentage of the notional.</li>
--   <li>Specifies the currency conversion rate that applies to an amount.
--   This rate can either be defined elsewhere in the document (case of a
--   quanto swap), or explicitly described through this component.</li>
--   </ul>
--   
--   <ol>
--   <li>The href attribute value will be a pointer style reference to the
--   element or component elsewhere in the document where the anchor amount
--   is defined.</li>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>Specifies the price of the underlyer, before commissions.</li>
--   <li>Specifies the price of the underlyer, net of commissions.</li>
--   <li>Specifies the accrued interest that are part of the dirty price in
--   the case of a fixed income security or a convertible bond. Expressed
--   in percentage of the notional.</li>
--   <li>Specifies the currency conversion rate that applies to an amount.
--   This rate can either be defined elsewhere in the document (case of a
--   quanto swap), or explicitly described through this component.</li>
--   </ul>
returnLegValPrice_choice1 :: ReturnLegValuationPrice -> OneOf3 (DeterminationMethod, Maybe (ActualPrice), Maybe (ActualPrice), Maybe (Decimal), Maybe (FxConversion)) AmountReference (Maybe (ActualPrice), Maybe (ActualPrice), Maybe (Decimal), Maybe (FxConversion))

-- | The net price excluding accrued interest. The <a>Dirty Price</a> for
--   bonds is put in the <a>netPrice</a> element, which includes accrued
--   interest. Thus netPrice - cleanNetPrice = accruedInterest. The
--   currency and price expression for this field are the same as those for
--   the (dirty) netPrice.
returnLegValPrice_cleanNetPrice :: ReturnLegValuationPrice -> Maybe Decimal

-- | Allows information about how the price was quoted to be provided.
returnLegValPrice_quotationCharacteristics :: ReturnLegValuationPrice -> Maybe QuotationCharacteristics

-- | Specifies valuation.
returnLegValPrice_valuationRules :: ReturnLegValuationPrice -> Maybe EquityValuation

-- | A type describing return swaps including return swaps (long form),
--   total return swaps, and variance swaps.
data ReturnSwap
ReturnSwap :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> [DirectionalLeg] -> Maybe PrincipalExchangeFeatures -> [ReturnSwapAdditionalPayment] -> [ReturnSwapEarlyTermination] -> Maybe ExtraordinaryEvents -> ReturnSwap
returnSwap_ID :: ReturnSwap -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
returnSwap_primaryAssetClass :: ReturnSwap -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
returnSwap_secondaryAssetClass :: ReturnSwap -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
returnSwap_productType :: ReturnSwap -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
returnSwap_productId :: ReturnSwap -> [ProductId]

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
returnSwap_buyerPartyReference :: ReturnSwap -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
returnSwap_buyerAccountReference :: ReturnSwap -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
returnSwap_sellerPartyReference :: ReturnSwap -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
returnSwap_sellerAccountReference :: ReturnSwap -> Maybe AccountReference

-- | An placeholder for the actual Return Swap Leg definition.
returnSwap_leg :: ReturnSwap -> [DirectionalLeg]

-- | This is used to document a Fully Funded Return Swap.
returnSwap_principalExchangeFeatures :: ReturnSwap -> Maybe PrincipalExchangeFeatures

-- | Specifies additional payment(s) between the principal parties to the
--   trade.
returnSwap_additionalPayment :: ReturnSwap -> [ReturnSwapAdditionalPayment]

-- | Specifies, for one or for both the parties to the trade, the date from
--   which it can early terminate it.
returnSwap_earlyTermination :: ReturnSwap -> [ReturnSwapEarlyTermination]

-- | Where the underlying is shares, specifies events affecting the issuer
--   of those shares that may require the terms of the transaction to be
--   adjusted.
returnSwap_extraordinaryEvents :: ReturnSwap -> Maybe ExtraordinaryEvents

-- | A type describing the additional payment(s) between the principal
--   parties to the trade. This component extends some of the features of
--   the additionalPayment component previously developed in FpML.
--   Appropriate discussions will determine whether it would be appropriate
--   to extend the shared component in order to meet the further
--   requirements of equity swaps.
data ReturnSwapAdditionalPayment
ReturnSwapAdditionalPayment :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe AdditionalPaymentAmount -> Maybe AdjustableOrRelativeDate -> Maybe PaymentType -> ReturnSwapAdditionalPayment
returnSwapAddPayment_ID :: ReturnSwapAdditionalPayment -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
returnSwapAddPayment_payerPartyReference :: ReturnSwapAdditionalPayment -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
returnSwapAddPayment_payerAccountReference :: ReturnSwapAdditionalPayment -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
returnSwapAddPayment_receiverPartyReference :: ReturnSwapAdditionalPayment -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
returnSwapAddPayment_receiverAccountReference :: ReturnSwapAdditionalPayment -> Maybe AccountReference

-- | Specifies the amount of the fee along with, when applicable, the
--   formula that supports its determination.
returnSwapAddPayment_additionalPaymentAmount :: ReturnSwapAdditionalPayment -> Maybe AdditionalPaymentAmount

-- | Specifies the value date of the fee payment/receipt.
returnSwapAddPayment_additionalPaymentDate :: ReturnSwapAdditionalPayment -> Maybe AdjustableOrRelativeDate

-- | Classification of the payment.
returnSwapAddPayment_paymentType :: ReturnSwapAdditionalPayment -> Maybe PaymentType

-- | Specifies, in relation to each Payment Date, the amount to which the
--   Payment Date relates. For Equity Swaps this element is equivalent to
--   the Equity Amount term as defined in the ISDA 2002 Equity Derivatives
--   Definitions.
data ReturnSwapAmount
ReturnSwapAmount :: (Maybe (OneOf3 IdentifiedCurrency DeterminationMethod IdentifiedCurrencyReference)) -> (Maybe (OneOf3 ReferenceAmount Formula Base64Binary)) -> Maybe AdjustableRelativeOrPeriodicDates -> Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> ReturnSwapAmount

-- | Choice between:
--   
--   <ol>
--   <li>The currency in which an amount is denominated.</li>
--   <li>Specifies the method according to which an amount or a date is
--   determined.</li>
--   <li>Reference to a currency defined elsewhere in the document</li>
--   </ol>
returnSwapAmount_choice0 :: ReturnSwapAmount -> (Maybe (OneOf3 IdentifiedCurrency DeterminationMethod IdentifiedCurrencyReference))

-- | Choice between:
--   
--   <ol>
--   <li>Specifies the reference Amount when this term either corresponds
--   to the standard ISDA Definition (either the 2002 Equity Definition for
--   the Equity Amount, or the 2000 Definition for the Interest Amount), or
--   points to a term defined elsewhere in the swap document.</li>
--   <li>Specifies a formula, with its description and components.</li>
--   <li>Description of the leg amount when represented through an encoded
--   image.</li>
--   </ol>
returnSwapAmount_choice1 :: ReturnSwapAmount -> (Maybe (OneOf3 ReferenceAmount Formula Base64Binary))

-- | Specifies the date on which a calculation or an observation will be
--   performed for the purpose of defining the Equity Amount, and in
--   accordance to the definition terms of this latter.
returnSwapAmount_calculationDates :: ReturnSwapAmount -> Maybe AdjustableRelativeOrPeriodicDates

-- | If true, then cash settlement is applicable.
returnSwapAmount_cashSettlement :: ReturnSwapAmount -> Maybe Boolean

-- | If present and true, then options exchange dividends are applicable.
returnSwapAmount_optionsExchangeDividends :: ReturnSwapAmount -> Maybe Boolean

-- | If present and true, then additional dividends are applicable.
returnSwapAmount_additionalDividends :: ReturnSwapAmount -> Maybe Boolean

-- | Represents the European Master Confirmation value of 'All Dividends'
--   which, when applicable, signifies that, for a given Ex-Date, the daily
--   observed Share Price for that day is adjusted (reduced) by the cash
--   dividend and/or the cash value of any non cash dividend per Share
--   (including Extraordinary Dividends) declared by the Issuer.
returnSwapAmount_allDividends :: ReturnSwapAmount -> Maybe Boolean

-- | A type describing the components that are common for return type
--   swaps, including short and long form return swaps representations.
data ReturnSwapBase
ReturnSwapBase_ReturnSwap :: ReturnSwap -> ReturnSwapBase
ReturnSwapBase_EquitySwapTransactionSupplement :: EquitySwapTransactionSupplement -> ReturnSwapBase

-- | A type describing the date from which each of the party may be allowed
--   to terminate the trade.
data ReturnSwapEarlyTermination
ReturnSwapEarlyTermination :: Maybe PartyReference -> Maybe StartingDate -> ReturnSwapEarlyTermination

-- | Reference to a party defined elsewhere in this document which may be
--   allowed to terminate the trade.
returnSwapEarlyTermin_partyReference :: ReturnSwapEarlyTermination -> Maybe PartyReference

-- | Specifies the date from which the early termination clause can be
--   exercised.
returnSwapEarlyTermin_startingDate :: ReturnSwapEarlyTermination -> Maybe StartingDate

-- | A base class for all return leg types with an underlyer.
data ReturnSwapLegUnderlyer
ReturnSwapLegUnderlyer_ReturnLeg :: ReturnLeg -> ReturnSwapLegUnderlyer

-- | Specifies the notional of return type swap. When used in the equity
--   leg, the definition will typically combine the actual amount (using
--   the notional component defined by the FpML industry group) and the
--   determination method. When used in the interest leg, the definition
--   will typically point to the definition of the equity leg.
data ReturnSwapNotional
ReturnSwapNotional :: Maybe ID -> (Maybe (OneOf4 ReturnSwapNotionalAmountReference DeterminationMethodReference DeterminationMethod NotionalAmount)) -> ReturnSwapNotional
returnSwapNotion_ID :: ReturnSwapNotional -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>A reference to the return swap notional amount defined elsewhere
--   in this document.</li>
--   <li>A reference to the return swap notional determination method
--   defined elsewhere in this document.</li>
--   <li>Specifies the method according to which an amount or a date is
--   determined.</li>
--   <li>The notional amount.</li>
--   </ol>
returnSwapNotion_choice0 :: ReturnSwapNotional -> (Maybe (OneOf4 ReturnSwapNotionalAmountReference DeterminationMethodReference DeterminationMethod NotionalAmount))

-- | A type describing the return payment dates of the swap.
data ReturnSwapPaymentDates
ReturnSwapPaymentDates :: Maybe ID -> Maybe AdjustableOrRelativeDates -> Maybe AdjustableOrRelativeDate -> ReturnSwapPaymentDates
returnSwapPaymentDates_ID :: ReturnSwapPaymentDates -> Maybe ID

-- | Specifies the interim payment dates of the swap. When defined in
--   relation to a date specified somewhere else in the document (through
--   the relativeDates component), this element will typically refer to the
--   valuation dates and add a lag corresponding to the settlement cycle of
--   the underlyer.
returnSwapPaymentDates_paymentDatesInterim :: ReturnSwapPaymentDates -> Maybe AdjustableOrRelativeDates

-- | Specifies the final payment date of the swap. When defined in relation
--   to a date specified somewhere else in the document (through the
--   relativeDate component), this element will typically refer to the
--   final valuation date and add a lag corresponding to the settlement
--   cycle of the underlyer.
returnSwapPaymentDates_paymentDateFinal :: ReturnSwapPaymentDates -> Maybe AdjustableOrRelativeDate

-- | A type specifying the date from which the early termination clause can
--   be exercised.
data StartingDate
StartingDate :: (Maybe (OneOf2 DateReference AdjustableDate)) -> StartingDate

-- | Choice between:
--   
--   <ol>
--   <li>Reference to a date defined elswhere in the document.</li>
--   <li>Date from which early termination clause can be exercised.</li>
--   </ol>
startingDate_choice0 :: StartingDate -> (Maybe (OneOf2 DateReference AdjustableDate))

-- | A type describing the Stub Calculation Period.
data StubCalculationPeriod
StubCalculationPeriod :: (Maybe (OneOf1 (Maybe (Stub), Maybe (Stub)))) -> StubCalculationPeriod

-- | Choice group between mandatory specification of initial stub and
--   optional specification of final stub, or mandatory final stub.
--   
--   Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>initialStub</li>
--   <li>finalStub</li>
--   </ul>
stubCalcPeriod_choice0 :: StubCalculationPeriod -> (Maybe (OneOf1 (Maybe (Stub), Maybe (Stub))))

-- | A type describing the variance amount of a variance swap.
data Variance
Variance :: (Maybe (OneOf3 Decimal Boolean Boolean)) -> Maybe PositiveInteger -> Maybe NonNegativeMoney -> (Maybe (OneOf2 NonNegativeDecimal NonNegativeDecimal)) -> Maybe Boolean -> Maybe PositiveDecimal -> Maybe BoundedVariance -> Maybe ExchangeTradedContract -> Maybe Decimal -> Variance

-- | Choice between:
--   
--   <ol>
--   <li>Contract will strike off this initial level.</li>
--   <li>If true this contract will strike off the closing level of the
--   default exchange traded contract.</li>
--   <li>If true this contract will strike off the expiring level of the
--   default exchange traded contract.</li>
--   </ol>
variance_choice0 :: Variance -> (Maybe (OneOf3 Decimal Boolean Boolean))

-- | Expected number of trading days.
variance_expectedN :: Variance -> Maybe PositiveInteger

-- | Variance amount, which is a cash multiplier.
variance_amount :: Variance -> Maybe NonNegativeMoney

-- | Choice between expressing the strike as volatility or variance.
--   
--   Choice between:
--   
--   <ol>
--   <li>volatilityStrikePrice</li>
--   <li>varianceStrikePrice</li>
--   </ol>
variance_choice3 :: Variance -> (Maybe (OneOf2 NonNegativeDecimal NonNegativeDecimal))

-- | If present and true, then variance cap is applicable.
variance_cap :: Variance -> Maybe Boolean

-- | For use when varianceCap is applicable. Contains the scaling factor of
--   the Variance Cap that can differ on a trade-by-trade basis in the
--   European market. For example, a Variance Cap of 2.5^2 x Variance
--   Strike Price has an unadjustedVarianceCap of 2.5.
variance_unadjustedVarianceCap :: Variance -> Maybe PositiveDecimal

-- | Conditions which bound variance. The contract specifies one or more
--   boundary levels. These levels are expressed as prices for confirmation
--   purposes Underlyer price must be equal to or higher than Lower Barrier
--   is known as Up Conditional Swap Underlyer price must be equal to or
--   lower than Upper Barrier is known as Down Conditional Swap Underlyer
--   price must be equal to or higher than Lower Barrier and must be equal
--   to or lower than Upper Barrier is known as Barrier Conditional Swap.
variance_boundedVariance :: Variance -> Maybe BoundedVariance

-- | Specification of the exchange traded contract nearest.
variance_exchangeTradedContractNearest :: Variance -> Maybe ExchangeTradedContract

-- | Vega Notional represents the approximate gain/loss at maturity for a
--   1% difference between RVol (realised vol) and KVol (strike vol). It
--   does not necessarily represent the Vega Risk of the trade.
variance_vegaNotionalAmount :: Variance -> Maybe Decimal

-- | The fixed income amounts of the return type swap.
elementInterestLeg :: XMLParser InterestLeg
elementToXMLInterestLeg :: InterestLeg -> [Content ()]

-- | Return amounts of the return type swap.
elementReturnLeg :: XMLParser ReturnLeg
elementToXMLReturnLeg :: ReturnLeg -> [Content ()]

-- | Specifies the structure of a return type swap. It can represent return
--   swaps, total return swaps, variance swaps.
elementReturnSwap :: XMLParser ReturnSwap
elementToXMLReturnSwap :: ReturnSwap -> [Content ()]

-- | An placeholder for the actual Return Swap Leg definition.
elementReturnSwapLeg :: XMLParser DirectionalLeg
elementToXMLReturnSwapLeg :: DirectionalLeg -> [Content ()]
instance Eq BoundedCorrelation
instance Show BoundedCorrelation
instance Eq FloatingRateCalculationReference
instance Show FloatingRateCalculationReference
instance Eq InterestLegCalculationPeriodDatesReference
instance Show InterestLegCalculationPeriodDatesReference
instance Eq LegIdAttributes
instance Show LegIdAttributes
instance Eq MakeWholeProvisions
instance Show MakeWholeProvisions
instance Eq Representations
instance Show Representations
instance Eq Variance
instance Show Variance
instance Eq StubCalculationPeriod
instance Show StubCalculationPeriod
instance Eq StartingDate
instance Show StartingDate
instance Eq ReturnSwapPaymentDates
instance Show ReturnSwapPaymentDates
instance Eq ReturnSwapNotional
instance Show ReturnSwapNotional
instance Eq ReturnSwapLegUnderlyer
instance Show ReturnSwapLegUnderlyer
instance Eq ReturnSwapEarlyTermination
instance Show ReturnSwapEarlyTermination
instance Eq ReturnSwapBase
instance Show ReturnSwapBase
instance Eq ReturnSwapAmount
instance Show ReturnSwapAmount
instance Eq ReturnSwapAdditionalPayment
instance Show ReturnSwapAdditionalPayment
instance Eq ReturnSwap
instance Show ReturnSwap
instance Eq ReturnLegValuationPrice
instance Show ReturnLegValuationPrice
instance Eq ReturnLegValuation
instance Show ReturnLegValuation
instance Eq ReturnLeg
instance Show ReturnLeg
instance Eq Return
instance Show Return
instance Eq PrincipalExchangeFeatures
instance Show PrincipalExchangeFeatures
instance Eq PrincipalExchangeDescriptions
instance Show PrincipalExchangeDescriptions
instance Eq PrincipalExchangeAmount
instance Show PrincipalExchangeAmount
instance Eq OptionFeatures
instance Show OptionFeatures
instance Eq NettedSwapBase
instance Show NettedSwapBase
instance Eq LegIdentifier
instance Show LegIdentifier
instance Eq LegId
instance Show LegId
instance Eq LegAmount
instance Show LegAmount
instance Eq InterestLegResetDates
instance Show InterestLegResetDates
instance Eq InterestLegCalculationPeriodDates
instance Show InterestLegCalculationPeriodDates
instance Eq InterestLeg
instance Show InterestLeg
instance Eq InterestCalculation
instance Show InterestCalculation
instance Eq IndexAdjustmentEvents
instance Show IndexAdjustmentEvents
instance Eq ExtraordinaryEvents
instance Show ExtraordinaryEvents
instance Eq EquityValuation
instance Show EquityValuation
instance Eq EquityStrike
instance Show EquityStrike
instance Eq EquityPremium
instance Show EquityPremium
instance Eq EquityCorporateEvents
instance Show EquityCorporateEvents
instance Eq DividendPeriodDividend
instance Show DividendPeriodDividend
instance Eq DividendPeriod
instance Show DividendPeriod
instance Eq DividendPaymentDate
instance Show DividendPaymentDate
instance Eq DividendConditions
instance Show DividendConditions
instance Eq DividendAdjustment
instance Show DividendAdjustment
instance Eq DirectionalLegUnderlyerValuation
instance Show DirectionalLegUnderlyerValuation
instance Eq DirectionalLegUnderlyer
instance Show DirectionalLegUnderlyer
instance Eq DirectionalLeg
instance Show DirectionalLeg
instance Eq Correlation
instance Show Correlation
instance Eq CompoundingRate
instance Show CompoundingRate
instance Eq Compounding
instance Show Compounding
instance Eq CalculationFromObservation
instance Show CalculationFromObservation
instance Eq CalculatedAmount
instance Show CalculatedAmount
instance Eq BoundedVariance
instance Show BoundedVariance
instance Eq AdjustableDateOrRelativeDateSequence
instance Show AdjustableDateOrRelativeDateSequence
instance Eq AdditionalPaymentAmount
instance Show AdditionalPaymentAmount
instance Eq AdditionalDisruptionEvents
instance Show AdditionalDisruptionEvents
instance Extension Variance CalculationFromObservation
instance SchemaType Variance
instance SchemaType StubCalculationPeriod
instance SchemaType StartingDate
instance SchemaType ReturnSwapPaymentDates
instance SchemaType ReturnSwapNotional
instance Extension ReturnSwapLegUnderlyer DirectionalLeg
instance SchemaType ReturnSwapLegUnderlyer
instance SchemaType ReturnSwapEarlyTermination
instance Extension ReturnSwapBase Product
instance SchemaType ReturnSwapBase
instance Extension ReturnSwapAmount LegAmount
instance SchemaType ReturnSwapAmount
instance Extension ReturnSwapAdditionalPayment PaymentBase
instance SchemaType ReturnSwapAdditionalPayment
instance Extension ReturnSwap Product
instance Extension ReturnSwap ReturnSwapBase
instance SchemaType ReturnSwap
instance Extension ReturnLegValuationPrice Price
instance SchemaType ReturnLegValuationPrice
instance SchemaType ReturnLegValuation
instance Extension ReturnLeg Leg
instance Extension ReturnLeg DirectionalLeg
instance Extension ReturnLeg ReturnSwapLegUnderlyer
instance SchemaType ReturnLeg
instance SchemaType Return
instance SchemaType Representations
instance SchemaType PrincipalExchangeFeatures
instance SchemaType PrincipalExchangeDescriptions
instance SchemaType PrincipalExchangeAmount
instance SchemaType OptionFeatures
instance Extension NettedSwapBase Product
instance SchemaType NettedSwapBase
instance SchemaType MakeWholeProvisions
instance SchemaType LegIdentifier
instance Extension LegId Token60
instance SchemaType LegId
instance SchemaType LegAmount
instance SchemaType InterestLegResetDates
instance Extension InterestLegCalculationPeriodDatesReference Reference
instance SchemaType InterestLegCalculationPeriodDatesReference
instance SchemaType InterestLegCalculationPeriodDates
instance Extension InterestLeg Leg
instance Extension InterestLeg DirectionalLeg
instance SchemaType InterestLeg
instance Extension InterestCalculation InterestAccrualsMethod
instance SchemaType InterestCalculation
instance SchemaType IndexAdjustmentEvents
instance Extension FloatingRateCalculationReference Reference
instance SchemaType FloatingRateCalculationReference
instance SchemaType ExtraordinaryEvents
instance SchemaType EquityValuation
instance SchemaType EquityStrike
instance Extension EquityPremium PaymentBase
instance SchemaType EquityPremium
instance SchemaType EquityCorporateEvents
instance Extension DividendPeriodDividend DividendPeriod
instance SchemaType DividendPeriodDividend
instance SchemaType DividendPeriod
instance SchemaType DividendPaymentDate
instance SchemaType DividendConditions
instance SchemaType DividendAdjustment
instance Extension DirectionalLegUnderlyerValuation DirectionalLegUnderlyer
instance SchemaType DirectionalLegUnderlyerValuation
instance Extension DirectionalLegUnderlyer DirectionalLeg
instance SchemaType DirectionalLegUnderlyer
instance Extension DirectionalLeg Leg
instance SchemaType DirectionalLeg
instance Extension Correlation CalculationFromObservation
instance SchemaType Correlation
instance SchemaType CompoundingRate
instance SchemaType Compounding
instance SchemaType CalculationFromObservation
instance SchemaType CalculatedAmount
instance SchemaType BoundedVariance
instance SchemaType BoundedCorrelation
instance SchemaType AdjustableDateOrRelativeDateSequence
instance SchemaType AdditionalPaymentAmount
instance SchemaType AdditionalDisruptionEvents

module Data.FpML.V53.Eqd

-- | A type for defining the broker equity options.
data BrokerEquityOption
BrokerEquityOption :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe EquityOptionTypeEnum -> Maybe Date -> Maybe Underlyer -> Maybe NonNegativeMoney -> Maybe EquityExerciseValuationSettlement -> Maybe OptionFeatures -> Maybe FxFeature -> Maybe StrategyFeature -> Maybe EquityStrike -> Maybe NonNegativeDecimal -> Maybe NonNegativeDecimal -> Maybe EquityPremium -> Maybe Boolean -> Maybe Money -> Maybe XsdString -> BrokerEquityOption
brokerEquityOption_ID :: BrokerEquityOption -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
brokerEquityOption_primaryAssetClass :: BrokerEquityOption -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
brokerEquityOption_secondaryAssetClass :: BrokerEquityOption -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
brokerEquityOption_productType :: BrokerEquityOption -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
brokerEquityOption_productId :: BrokerEquityOption -> [ProductId]

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
brokerEquityOption_buyerPartyReference :: BrokerEquityOption -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
brokerEquityOption_buyerAccountReference :: BrokerEquityOption -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
brokerEquityOption_sellerPartyReference :: BrokerEquityOption -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
brokerEquityOption_sellerAccountReference :: BrokerEquityOption -> Maybe AccountReference

-- | The type of option transaction.
brokerEquityOption_optionType :: BrokerEquityOption -> Maybe EquityOptionTypeEnum

-- | Effective date for a forward starting option.
brokerEquityOption_equityEffectiveDate :: BrokerEquityOption -> Maybe Date

-- | Specifies the underlying component, which can be either one or many
--   and consists in either equity, index or convertible bond component, or
--   a combination of these.
brokerEquityOption_underlyer :: BrokerEquityOption -> Maybe Underlyer

-- | The notional amount.
brokerEquityOption_notional :: BrokerEquityOption -> Maybe NonNegativeMoney

-- | The parameters for defining how the equity option can be exercised,
--   how it is valued and how it is settled.
brokerEquityOption_equityExercise :: BrokerEquityOption -> Maybe EquityExerciseValuationSettlement

-- | Asian, Barrier, Knock and Pass Through features.
brokerEquityOption_feature :: BrokerEquityOption -> Maybe OptionFeatures

-- | Quanto, Composite, or Cross Currency FX features.
brokerEquityOption_fxFeature :: BrokerEquityOption -> Maybe FxFeature

-- | A equity option simple strategy feature.
brokerEquityOption_strategyFeature :: BrokerEquityOption -> Maybe StrategyFeature

-- | Defines whether it is a price or level at which the option has been,
--   or will be, struck.
brokerEquityOption_strike :: BrokerEquityOption -> Maybe EquityStrike

-- | The price per share, index or basket observed on the trade or
--   effective date.
brokerEquityOption_spotPrice :: BrokerEquityOption -> Maybe NonNegativeDecimal

-- | The number of options comprised in the option transaction.
brokerEquityOption_numberOfOptions :: BrokerEquityOption -> Maybe NonNegativeDecimal

-- | The equity option premium payable by the buyer to the seller.
brokerEquityOption_equityPremium :: BrokerEquityOption -> Maybe EquityPremium
brokerEquityOption_deltaCrossed :: BrokerEquityOption -> Maybe Boolean
brokerEquityOption_brokerageFee :: BrokerEquityOption -> Maybe Money
brokerEquityOption_brokerNotes :: BrokerEquityOption -> Maybe XsdString

-- | A type for defining exercise procedures associated with an American
--   style exercise of an equity option. This entity inherits from the type
--   SharedAmericanExercise.
data EquityAmericanExercise
EquityAmericanExercise :: Maybe ID -> Maybe AdjustableOrRelativeDate -> Maybe AdjustableOrRelativeDate -> (Maybe (OneOf2 BusinessCenterTime DeterminationMethod)) -> Maybe TimeTypeEnum -> (Maybe (OneOf2 (Maybe (TimeTypeEnum), Maybe (BusinessCenterTime)) DeterminationMethod)) -> Maybe EquityMultipleExercise -> EquityAmericanExercise
equityAmericExerc_ID :: EquityAmericanExercise -> Maybe ID

-- | The first day of the exercise period for an American style option.
equityAmericExerc_commencementDate :: EquityAmericanExercise -> Maybe AdjustableOrRelativeDate

-- | The last day within an exercise period for an American style option.
--   For a European style option it is the only day within the exercise
--   period.
equityAmericExerc_expirationDate :: EquityAmericanExercise -> Maybe AdjustableOrRelativeDate

-- | Choice between latest exercise time expressed as literal time, or
--   using a determination method.
--   
--   Choice between:
--   
--   <ol>
--   <li>For a Bermuda or American style option, the latest time on an
--   exercise business day (excluding the expiration date) within the
--   exercise period that notice can be given by the buyer to the seller or
--   seller's agent. Notice of exercise given after this time will be
--   deemed to have been given on the next exercise business day.</li>
--   <li>Latest exercise time determination method.</li>
--   </ol>
equityAmericExerc_choice2 :: EquityAmericanExercise -> (Maybe (OneOf2 BusinessCenterTime DeterminationMethod))

-- | The latest time of day at which the equity option can be exercised,
--   for example the official closing time of the exchange.
equityAmericExerc_latestExerciseTimeType :: EquityAmericanExercise -> Maybe TimeTypeEnum

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The time of day at which the equity option expires, for example
--   the official closing time of the exchange.</li>
--   <li>The specific time of day at which the equity option expires.</li>
--   </ul>
--   
--   <ol>
--   <li>Expiration time determination method.</li>
--   </ol>
equityAmericExerc_choice4 :: EquityAmericanExercise -> (Maybe (OneOf2 (Maybe (TimeTypeEnum), Maybe (BusinessCenterTime)) DeterminationMethod))

-- | The presence of this element indicates that the option may be
--   exercised on different days. It is not applicable to European options.
equityAmericExerc_equityMultipleExercise :: EquityAmericanExercise -> Maybe EquityMultipleExercise

-- | A type for defining exercise procedures associated with a Bermuda
--   style exercise of an equity option. The term Bermuda is adopted in
--   FpML for consistency with the ISDA Definitions.
data EquityBermudaExercise
EquityBermudaExercise :: Maybe ID -> Maybe AdjustableOrRelativeDate -> Maybe AdjustableOrRelativeDate -> (Maybe (OneOf2 BusinessCenterTime DeterminationMethod)) -> Maybe DateList -> Maybe TimeTypeEnum -> (Maybe (OneOf2 (Maybe (TimeTypeEnum), Maybe (BusinessCenterTime)) DeterminationMethod)) -> Maybe EquityMultipleExercise -> EquityBermudaExercise
equityBermudaExerc_ID :: EquityBermudaExercise -> Maybe ID

-- | The first day of the exercise period for an American style option.
equityBermudaExerc_commencementDate :: EquityBermudaExercise -> Maybe AdjustableOrRelativeDate

-- | The last day within an exercise period for an American style option.
--   For a European style option it is the only day within the exercise
--   period.
equityBermudaExerc_expirationDate :: EquityBermudaExercise -> Maybe AdjustableOrRelativeDate

-- | Choice between latest exercise time expressed as literal time, or
--   using a determination method.
--   
--   Choice between:
--   
--   <ol>
--   <li>For a Bermuda or American style option, the latest time on an
--   exercise business day (excluding the expiration date) within the
--   exercise period that notice can be given by the buyer to the seller or
--   seller's agent. Notice of exercise given after this time will be
--   deemed to have been given on the next exercise business day.</li>
--   <li>Latest exercise time determination method.</li>
--   </ol>
equityBermudaExerc_choice2 :: EquityBermudaExercise -> (Maybe (OneOf2 BusinessCenterTime DeterminationMethod))

-- | List of Exercise Dates for a Bermuda option.
equityBermudaExerc_bermudaExerciseDates :: EquityBermudaExercise -> Maybe DateList

-- | The latest time of day at which the equity option can be exercised,
--   for example the official closing time of the exchange.
equityBermudaExerc_latestExerciseTimeType :: EquityBermudaExercise -> Maybe TimeTypeEnum

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The time of day at which the equity option expires, for example
--   the official closing time of the exchange.</li>
--   <li>The specific time of day at which the equity option expires.</li>
--   </ul>
--   
--   <ol>
--   <li>Expiration time determination method.</li>
--   </ol>
equityBermudaExerc_choice5 :: EquityBermudaExercise -> (Maybe (OneOf2 (Maybe (TimeTypeEnum), Maybe (BusinessCenterTime)) DeterminationMethod))

-- | The presence of this element indicates that the option may be
--   exercised on different days. It is not applicable to European options.
equityBermudaExerc_equityMultipleExercise :: EquityBermudaExercise -> Maybe EquityMultipleExercise

-- | A type for defining the common features of equity derivatives.
data EquityDerivativeBase
EquityDerivativeBase_EquityDerivativeShortFormBase :: EquityDerivativeShortFormBase -> EquityDerivativeBase
EquityDerivativeBase_EquityDerivativeLongFormBase :: EquityDerivativeLongFormBase -> EquityDerivativeBase

-- | type for defining the common features of equity derivatives.
data EquityDerivativeLongFormBase
EquityDerivativeLongFormBase_EquityOption :: EquityOption -> EquityDerivativeLongFormBase
EquityDerivativeLongFormBase_EquityForward :: EquityForward -> EquityDerivativeLongFormBase

-- | A type for defining short form equity option basic features.
data EquityDerivativeShortFormBase
EquityDerivativeShortFormBase_EquityOptionTransactionSupplement :: EquityOptionTransactionSupplement -> EquityDerivativeShortFormBase
EquityDerivativeShortFormBase_BrokerEquityOption :: BrokerEquityOption -> EquityDerivativeShortFormBase

-- | A type for defining exercise procedures associated with a European
--   style exercise of an equity option.
data EquityEuropeanExercise
EquityEuropeanExercise :: Maybe ID -> Maybe AdjustableOrRelativeDate -> (Maybe (OneOf2 (Maybe (TimeTypeEnum), Maybe (BusinessCenterTime)) DeterminationMethod)) -> EquityEuropeanExercise
equityEuropExerc_ID :: EquityEuropeanExercise -> Maybe ID

-- | The last day within an exercise period for an American style option.
--   For a European style option it is the only day within the exercise
--   period.
equityEuropExerc_expirationDate :: EquityEuropeanExercise -> Maybe AdjustableOrRelativeDate

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The time of day at which the equity option expires, for example
--   the official closing time of the exchange.</li>
--   <li>The specific time of day at which the equity option expires.</li>
--   </ul>
--   
--   <ol>
--   <li>Expiration time determination method.</li>
--   </ol>
equityEuropExerc_choice1 :: EquityEuropeanExercise -> (Maybe (OneOf2 (Maybe (TimeTypeEnum), Maybe (BusinessCenterTime)) DeterminationMethod))

-- | A type for defining exercise procedures for equity options.
data EquityExerciseValuationSettlement
EquityExerciseValuationSettlement :: (Maybe (OneOf3 EquityEuropeanExercise EquityAmericanExercise EquityBermudaExercise)) -> (Maybe (OneOf2 (Maybe (Boolean), Maybe (MakeWholeProvisions)) PrePayment)) -> Maybe EquityValuation -> Maybe AdjustableOrRelativeDate -> Maybe Currency -> Maybe SettlementPriceSource -> Maybe SettlementTypeEnum -> Maybe AdjustableOrRelativeDate -> Maybe PartyReference -> Maybe SettlementPriceDefaultElection -> EquityExerciseValuationSettlement

-- | The parameters for defining how the equity option can be exercised,
--   how it is valued and how it is settled.
--   
--   Choice between:
--   
--   <ol>
--   <li>The parameters for defining the expiration date and time for a
--   European style equity option.</li>
--   <li>The parameters for defining the exercise period for an American
--   style equity option together with the rules governing the quantity of
--   the underlying that can be exercised on any given exercise date.</li>
--   <li>The parameters for defining the exercise period for an Bermuda
--   style equity option together with the rules governing the quantity of
--   the underlying that can be exercised on any given exercise date.</li>
--   </ol>
equityExercValSettl_choice0 :: EquityExerciseValuationSettlement -> (Maybe (OneOf3 EquityEuropeanExercise EquityAmericanExercise EquityBermudaExercise))

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>If true then each option not previously exercised will be deemed
--   to be exercised at the expiration time on the expiration date without
--   service of notice unless the buyer notifies the seller that it no
--   longer wishes this to occur.</li>
--   <li>Provisions covering early exercise of option.</li>
--   </ul>
--   
--   <ol>
--   <li>Prepayment features for Forward.</li>
--   </ol>
equityExercValSettl_choice1 :: EquityExerciseValuationSettlement -> (Maybe (OneOf2 (Maybe (Boolean), Maybe (MakeWholeProvisions)) PrePayment))

-- | The parameters for defining when valuation of the underlying takes
--   place.
equityExercValSettl_equityValuation :: EquityExerciseValuationSettlement -> Maybe EquityValuation

-- | Date on which settlement of option premiums will occur.
equityExercValSettl_settlementDate :: EquityExerciseValuationSettlement -> Maybe AdjustableOrRelativeDate

-- | The currency in which a cash settlement for non-deliverable forward
--   and non-deliverable options.
equityExercValSettl_settlementCurrency :: EquityExerciseValuationSettlement -> Maybe Currency
equityExercValSettl_settlementPriceSource :: EquityExerciseValuationSettlement -> Maybe SettlementPriceSource

-- | How the option will be settled.
equityExercValSettl_settlementType :: EquityExerciseValuationSettlement -> Maybe SettlementTypeEnum
equityExercValSettl_settlementMethodElectionDate :: EquityExerciseValuationSettlement -> Maybe AdjustableOrRelativeDate
equityExercValSettl_settlementMethodElectingPartyReference :: EquityExerciseValuationSettlement -> Maybe PartyReference
equityExercValSettl_settlementPriceDefaultElection :: EquityExerciseValuationSettlement -> Maybe SettlementPriceDefaultElection

-- | A type for defining equity forwards.
data EquityForward
EquityForward :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe EquityOptionTypeEnum -> Maybe Date -> Maybe Underlyer -> Maybe NonNegativeMoney -> Maybe EquityExerciseValuationSettlement -> Maybe OptionFeatures -> Maybe FxFeature -> Maybe StrategyFeature -> Maybe DividendConditions -> Maybe MethodOfAdjustmentEnum -> Maybe ExtraordinaryEvents -> NonNegativeMoney -> EquityForward
equityForward_ID :: EquityForward -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
equityForward_primaryAssetClass :: EquityForward -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
equityForward_secondaryAssetClass :: EquityForward -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
equityForward_productType :: EquityForward -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
equityForward_productId :: EquityForward -> [ProductId]

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
equityForward_buyerPartyReference :: EquityForward -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
equityForward_buyerAccountReference :: EquityForward -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
equityForward_sellerPartyReference :: EquityForward -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
equityForward_sellerAccountReference :: EquityForward -> Maybe AccountReference

-- | The type of option transaction.
equityForward_optionType :: EquityForward -> Maybe EquityOptionTypeEnum

-- | Effective date for a forward starting option.
equityForward_equityEffectiveDate :: EquityForward -> Maybe Date

-- | Specifies the underlying component, which can be either one or many
--   and consists in either equity, index or convertible bond component, or
--   a combination of these.
equityForward_underlyer :: EquityForward -> Maybe Underlyer

-- | The notional amount.
equityForward_notional :: EquityForward -> Maybe NonNegativeMoney

-- | The parameters for defining how the equity option can be exercised,
--   how it is valued and how it is settled.
equityForward_equityExercise :: EquityForward -> Maybe EquityExerciseValuationSettlement

-- | Asian, Barrier, Knock and Pass Through features.
equityForward_feature :: EquityForward -> Maybe OptionFeatures

-- | Quanto, Composite, or Cross Currency FX features.
equityForward_fxFeature :: EquityForward -> Maybe FxFeature

-- | A equity option simple strategy feature.
equityForward_strategyFeature :: EquityForward -> Maybe StrategyFeature
equityForward_dividendConditions :: EquityForward -> Maybe DividendConditions

-- | Defines how adjustments will be made to the contract should one or
--   more of the extraordinary events occur.
equityForward_methodOfAdjustment :: EquityForward -> Maybe MethodOfAdjustmentEnum

-- | Where the underlying is shares, specifies events affecting the issuer
--   of those shares that may require the terms of the transaction to be
--   adjusted.
equityForward_extraordinaryEvents :: EquityForward -> Maybe ExtraordinaryEvents

-- | The forward price per share, index or basket.
equityForward_forwardPrice :: EquityForward -> NonNegativeMoney

-- | A type for defining the multiple exercise provisions of an American or
--   Bermuda style equity option.
data EquityMultipleExercise
EquityMultipleExercise :: Maybe PositiveDecimal -> Maybe NonNegativeDecimal -> Maybe NonNegativeDecimal -> EquityMultipleExercise

-- | When multiple exercise is applicable and this element is present it
--   specifies that the number of options that can be exercised on a given
--   exercise date must either be equal to the value of this element or be
--   an integral multiple of it.
equityMultiExerc_integralMultipleExercise :: EquityMultipleExercise -> Maybe PositiveDecimal

-- | When multiple exercise is applicable this element specifies the
--   minimum number of options that can be exercised on a given exercise
--   date. If this element is not present then the minimum number is deemed
--   to be 1. Its value can be a fractional number as a result of corporate
--   actions.
equityMultiExerc_minimumNumberOfOptions :: EquityMultipleExercise -> Maybe NonNegativeDecimal

-- | When multiple exercise is applicable this element specifies the
--   maximum number of options that can be exercised on a given exercise
--   date. If this element is not present then the maximum number is deemed
--   to be the same as the number of options. Its value can be a fractional
--   number as a result of corporate actions.
equityMultiExerc_maximumNumberOfOptions :: EquityMultipleExercise -> Maybe NonNegativeDecimal

-- | A type for defining equity options.
data EquityOption
EquityOption :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe EquityOptionTypeEnum -> Maybe Date -> Maybe Underlyer -> Maybe NonNegativeMoney -> Maybe EquityExerciseValuationSettlement -> Maybe OptionFeatures -> Maybe FxFeature -> Maybe StrategyFeature -> Maybe DividendConditions -> Maybe MethodOfAdjustmentEnum -> Maybe ExtraordinaryEvents -> Maybe EquityStrike -> Maybe NonNegativeDecimal -> Maybe NonNegativeDecimal -> Maybe PositiveDecimal -> Maybe EquityPremium -> EquityOption
equityOption_ID :: EquityOption -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
equityOption_primaryAssetClass :: EquityOption -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
equityOption_secondaryAssetClass :: EquityOption -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
equityOption_productType :: EquityOption -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
equityOption_productId :: EquityOption -> [ProductId]

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
equityOption_buyerPartyReference :: EquityOption -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
equityOption_buyerAccountReference :: EquityOption -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
equityOption_sellerPartyReference :: EquityOption -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
equityOption_sellerAccountReference :: EquityOption -> Maybe AccountReference

-- | The type of option transaction.
equityOption_optionType :: EquityOption -> Maybe EquityOptionTypeEnum

-- | Effective date for a forward starting option.
equityOption_equityEffectiveDate :: EquityOption -> Maybe Date

-- | Specifies the underlying component, which can be either one or many
--   and consists in either equity, index or convertible bond component, or
--   a combination of these.
equityOption_underlyer :: EquityOption -> Maybe Underlyer

-- | The notional amount.
equityOption_notional :: EquityOption -> Maybe NonNegativeMoney

-- | The parameters for defining how the equity option can be exercised,
--   how it is valued and how it is settled.
equityOption_equityExercise :: EquityOption -> Maybe EquityExerciseValuationSettlement

-- | Asian, Barrier, Knock and Pass Through features.
equityOption_feature :: EquityOption -> Maybe OptionFeatures

-- | Quanto, Composite, or Cross Currency FX features.
equityOption_fxFeature :: EquityOption -> Maybe FxFeature

-- | A equity option simple strategy feature.
equityOption_strategyFeature :: EquityOption -> Maybe StrategyFeature
equityOption_dividendConditions :: EquityOption -> Maybe DividendConditions

-- | Defines how adjustments will be made to the contract should one or
--   more of the extraordinary events occur.
equityOption_methodOfAdjustment :: EquityOption -> Maybe MethodOfAdjustmentEnum

-- | Where the underlying is shares, specifies events affecting the issuer
--   of those shares that may require the terms of the transaction to be
--   adjusted.
equityOption_extraordinaryEvents :: EquityOption -> Maybe ExtraordinaryEvents

-- | Defines whether it is a price or level at which the option has been,
--   or will be, struck.
equityOption_strike :: EquityOption -> Maybe EquityStrike

-- | The price per share, index or basket observed on the trade or
--   effective date.
equityOption_spotPrice :: EquityOption -> Maybe NonNegativeDecimal

-- | The number of options comprised in the option transaction.
equityOption_numberOfOptions :: EquityOption -> Maybe NonNegativeDecimal

-- | The number of shares per option comprised in the option transaction.
equityOption_optionEntitlement :: EquityOption -> Maybe PositiveDecimal

-- | The equity option premium payable by the buyer to the seller.
equityOption_equityPremium :: EquityOption -> Maybe EquityPremium

-- | A type for defining Equity Option Termination.
data EquityOptionTermination
EquityOptionTermination :: Maybe AdjustableDate -> Maybe NonNegativeMoney -> EquityOptionTermination
equityOptionTermin_settlementAmountPaymentDate :: EquityOptionTermination -> Maybe AdjustableDate
equityOptionTermin_settlementAmount :: EquityOptionTermination -> Maybe NonNegativeMoney

-- | A type for defining equity option transaction supplements.
data EquityOptionTransactionSupplement
EquityOptionTransactionSupplement :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe EquityOptionTypeEnum -> Maybe Date -> Maybe Underlyer -> Maybe NonNegativeMoney -> Maybe EquityExerciseValuationSettlement -> Maybe OptionFeatures -> Maybe FxFeature -> Maybe StrategyFeature -> Maybe EquityStrike -> Maybe NonNegativeDecimal -> Maybe NonNegativeDecimal -> Maybe EquityPremium -> Maybe Boolean -> Maybe Boolean -> (Maybe (OneOf2 Boolean Boolean)) -> Maybe MethodOfAdjustmentEnum -> Maybe CountryCode -> (Maybe (OneOf2 PositiveDecimal PositiveDecimal)) -> Maybe ExtraordinaryEvents -> EquityOptionTransactionSupplement
equityOptionTransSuppl_ID :: EquityOptionTransactionSupplement -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
equityOptionTransSuppl_primaryAssetClass :: EquityOptionTransactionSupplement -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
equityOptionTransSuppl_secondaryAssetClass :: EquityOptionTransactionSupplement -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
equityOptionTransSuppl_productType :: EquityOptionTransactionSupplement -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
equityOptionTransSuppl_productId :: EquityOptionTransactionSupplement -> [ProductId]

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
equityOptionTransSuppl_buyerPartyReference :: EquityOptionTransactionSupplement -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
equityOptionTransSuppl_buyerAccountReference :: EquityOptionTransactionSupplement -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
equityOptionTransSuppl_sellerPartyReference :: EquityOptionTransactionSupplement -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
equityOptionTransSuppl_sellerAccountReference :: EquityOptionTransactionSupplement -> Maybe AccountReference

-- | The type of option transaction.
equityOptionTransSuppl_optionType :: EquityOptionTransactionSupplement -> Maybe EquityOptionTypeEnum

-- | Effective date for a forward starting option.
equityOptionTransSuppl_equityEffectiveDate :: EquityOptionTransactionSupplement -> Maybe Date

-- | Specifies the underlying component, which can be either one or many
--   and consists in either equity, index or convertible bond component, or
--   a combination of these.
equityOptionTransSuppl_underlyer :: EquityOptionTransactionSupplement -> Maybe Underlyer

-- | The notional amount.
equityOptionTransSuppl_notional :: EquityOptionTransactionSupplement -> Maybe NonNegativeMoney

-- | The parameters for defining how the equity option can be exercised,
--   how it is valued and how it is settled.
equityOptionTransSuppl_equityExercise :: EquityOptionTransactionSupplement -> Maybe EquityExerciseValuationSettlement

-- | Asian, Barrier, Knock and Pass Through features.
equityOptionTransSuppl_feature :: EquityOptionTransactionSupplement -> Maybe OptionFeatures

-- | Quanto, Composite, or Cross Currency FX features.
equityOptionTransSuppl_fxFeature :: EquityOptionTransactionSupplement -> Maybe FxFeature

-- | A equity option simple strategy feature.
equityOptionTransSuppl_strategyFeature :: EquityOptionTransactionSupplement -> Maybe StrategyFeature

-- | Defines whether it is a price or level at which the option has been,
--   or will be, struck.
equityOptionTransSuppl_strike :: EquityOptionTransactionSupplement -> Maybe EquityStrike

-- | The price per share, index or basket observed on the trade or
--   effective date.
equityOptionTransSuppl_spotPrice :: EquityOptionTransactionSupplement -> Maybe NonNegativeDecimal

-- | The number of options comprised in the option transaction.
equityOptionTransSuppl_numberOfOptions :: EquityOptionTransactionSupplement -> Maybe NonNegativeDecimal

-- | The equity option premium payable by the buyer to the seller.
equityOptionTransSuppl_equityPremium :: EquityOptionTransactionSupplement -> Maybe EquityPremium

-- | For a share option transaction, a flag used to indicate whether the
--   transaction is to be treated as an 'exchange look-alike'. This
--   designation has significance for how share adjustments (arising from
--   corporate actions) will be determined for the transaction. For an
--   'exchange look-alike' transaction the relevant share adjustments will
--   follow that for a corresponding designated contract listed on the
--   related exchange (referred to as Options Exchange Adjustment (ISDA
--   defined term), otherwise the share adjustments will be determined by
--   the calculation agent (referred to as Calculation Agent Adjustment
--   (ISDA defined term)).
equityOptionTransSuppl_exchangeLookAlike :: EquityOptionTransactionSupplement -> Maybe Boolean

-- | For an index option transaction, a flag used in conjuction with
--   Futures Price Valuation (ISDA defined term) to indicate whether the
--   Nearest Index Contract provision is applicable. The Nearest Index
--   Contract provision is a rule for determining the Exchange-traded
--   Contract (ISDA defined term) without having to explicitly state the
--   actual contract, delivery month and exchange on which it is traded.
equityOptionTransSuppl_exchangeTradedContractNearest :: EquityOptionTransactionSupplement -> Maybe Boolean

-- | Choice between:
--   
--   <ol>
--   <li>For an index option transaction, a flag to indicate whether a
--   relevant Multiple Exchange Index Annex is applicable to the
--   transaction. This annex defines additional provisions which are
--   applicable where an index is comprised of component securities that
--   are traded on multiple exchanges.</li>
--   <li>For an index option transaction, a flag to indicate whether a
--   relevant Component Security Index Annex is applicable to the
--   transaction.</li>
--   </ol>
equityOptionTransSuppl_choice22 :: EquityOptionTransactionSupplement -> (Maybe (OneOf2 Boolean Boolean))
equityOptionTransSuppl_methodOfAdjustment :: EquityOptionTransactionSupplement -> Maybe MethodOfAdjustmentEnum

-- | Local Jurisdiction is a term used in the AEJ Master Confirmation,
--   which is used to determine local taxes, which shall mean taxes,
--   duties, and similar charges imposed by the taxing authority of the
--   Local Jurisdiction If this element is not present Local Jurisdiction
--   is Not Applicable.
equityOptionTransSuppl_localJurisdiction :: EquityOptionTransactionSupplement -> Maybe CountryCode

-- | Choice between:
--   
--   <ol>
--   <li>The number of shares per option comprised in the option
--   transaction supplement.</li>
--   <li>Specifies the contract multiplier that can be associated with an
--   index option.</li>
--   </ol>
equityOptionTransSuppl_choice25 :: EquityOptionTransactionSupplement -> (Maybe (OneOf2 PositiveDecimal PositiveDecimal))

-- | A component to contain elements that represent an extraordinary event.
equityOptionTransSuppl_extraordinaryEvents :: EquityOptionTransactionSupplement -> Maybe ExtraordinaryEvents

-- | A type for defining PrePayment.
data PrePayment
PrePayment :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe Boolean -> Maybe NonNegativeMoney -> Maybe AdjustableDate -> PrePayment
prePayment_ID :: PrePayment -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
prePayment_payerPartyReference :: PrePayment -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
prePayment_payerAccountReference :: PrePayment -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
prePayment_receiverPartyReference :: PrePayment -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
prePayment_receiverAccountReference :: PrePayment -> Maybe AccountReference
prePayment :: PrePayment -> Maybe Boolean
prePayment_amount :: PrePayment -> Maybe NonNegativeMoney
prePayment_date :: PrePayment -> Maybe AdjustableDate

-- | A component describing a Broker View of an Equity Option.
elementBrokerEquityOption :: XMLParser BrokerEquityOption
elementToXMLBrokerEquityOption :: BrokerEquityOption -> [Content ()]

-- | A component describing an Equity Forward product.
elementEquityForward :: XMLParser EquityForward
elementToXMLEquityForward :: EquityForward -> [Content ()]

-- | A component describing an Equity Option product.
elementEquityOption :: XMLParser EquityOption
elementToXMLEquityOption :: EquityOption -> [Content ()]

-- | A component describing an Equity Option Transaction Supplement.
elementEquityOptionTransactionSupplement :: XMLParser EquityOptionTransactionSupplement
elementToXMLEquityOptionTransactionSupplement :: EquityOptionTransactionSupplement -> [Content ()]
instance Eq PrePayment
instance Show PrePayment
instance Eq EquityOptionTransactionSupplement
instance Show EquityOptionTransactionSupplement
instance Eq EquityOptionTermination
instance Show EquityOptionTermination
instance Eq EquityOption
instance Show EquityOption
instance Eq EquityMultipleExercise
instance Show EquityMultipleExercise
instance Eq EquityForward
instance Show EquityForward
instance Eq EquityExerciseValuationSettlement
instance Show EquityExerciseValuationSettlement
instance Eq EquityEuropeanExercise
instance Show EquityEuropeanExercise
instance Eq EquityDerivativeShortFormBase
instance Show EquityDerivativeShortFormBase
instance Eq EquityDerivativeLongFormBase
instance Show EquityDerivativeLongFormBase
instance Eq EquityDerivativeBase
instance Show EquityDerivativeBase
instance Eq EquityBermudaExercise
instance Show EquityBermudaExercise
instance Eq EquityAmericanExercise
instance Show EquityAmericanExercise
instance Eq BrokerEquityOption
instance Show BrokerEquityOption
instance Extension PrePayment PaymentBase
instance SchemaType PrePayment
instance Extension EquityOptionTransactionSupplement Product
instance Extension EquityOptionTransactionSupplement EquityDerivativeBase
instance Extension EquityOptionTransactionSupplement EquityDerivativeShortFormBase
instance SchemaType EquityOptionTransactionSupplement
instance SchemaType EquityOptionTermination
instance Extension EquityOption Product
instance Extension EquityOption EquityDerivativeBase
instance Extension EquityOption EquityDerivativeLongFormBase
instance SchemaType EquityOption
instance SchemaType EquityMultipleExercise
instance Extension EquityForward Product
instance Extension EquityForward EquityDerivativeBase
instance Extension EquityForward EquityDerivativeLongFormBase
instance SchemaType EquityForward
instance SchemaType EquityExerciseValuationSettlement
instance Extension EquityEuropeanExercise Exercise
instance SchemaType EquityEuropeanExercise
instance Extension EquityDerivativeShortFormBase EquityDerivativeBase
instance SchemaType EquityDerivativeShortFormBase
instance Extension EquityDerivativeLongFormBase EquityDerivativeBase
instance SchemaType EquityDerivativeLongFormBase
instance Extension EquityDerivativeBase Product
instance SchemaType EquityDerivativeBase
instance Extension EquityBermudaExercise Exercise
instance Extension EquityBermudaExercise SharedAmericanExercise
instance SchemaType EquityBermudaExercise
instance Extension EquityAmericanExercise Exercise
instance Extension EquityAmericanExercise SharedAmericanExercise
instance SchemaType EquityAmericanExercise
instance Extension BrokerEquityOption Product
instance Extension BrokerEquityOption EquityDerivativeBase
instance Extension BrokerEquityOption EquityDerivativeShortFormBase
instance SchemaType BrokerEquityOption

module Data.FpML.V53.Swaps.Variance

-- | Calculation of a Variance Amount.
data VarianceAmount
VarianceAmount :: Maybe AdjustableRelativeOrPeriodicDates -> Maybe AdjustableOrRelativeDate -> Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> Maybe Variance -> VarianceAmount

-- | Specifies the date on which a calculation or an observation will be
--   performed for the purpose of calculating the amount.
varianAmount_calculationDates :: VarianceAmount -> Maybe AdjustableRelativeOrPeriodicDates

-- | The start of the period over which observations are made which are
--   used in the calculation Used when the observation start date differs
--   from the trade date such as for forward starting swaps.
varianAmount_observationStartDate :: VarianceAmount -> Maybe AdjustableOrRelativeDate

-- | If present and true, then options exchange dividends are applicable.
varianAmount_optionsExchangeDividends :: VarianceAmount -> Maybe Boolean

-- | If present and true, then additional dividends are applicable.
varianAmount_additionalDividends :: VarianceAmount -> Maybe Boolean

-- | Represents the European Master Confirmation value of 'All Dividends'
--   which, when applicable, signifies that, for a given Ex-Date, the daily
--   observed Share Price for that day is adjusted (reduced) by the cash
--   dividend and/or the cash value of any non cash dividend per Share
--   (including Extraordinary Dividends) declared by the Issuer.
varianAmount_allDividends :: VarianceAmount -> Maybe Boolean

-- | Specifies Variance.
varianAmount_variance :: VarianceAmount -> Maybe Variance

-- | A type describing return which is driven by a Variance Calculation.
data VarianceLeg
VarianceLeg :: Maybe ID -> [LegIdentifier] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe AdjustableOrRelativeDate -> Maybe AdjustableOrRelativeDate -> Maybe Underlyer -> Maybe SettlementTypeEnum -> Maybe AdjustableOrRelativeDate -> (Maybe (OneOf2 Money Currency)) -> Maybe FxFeature -> Maybe EquityValuation -> Maybe VarianceAmount -> VarianceLeg
varianceLeg_ID :: VarianceLeg -> Maybe ID

-- | Version aware identification of this leg.
varianceLeg_legIdentifier :: VarianceLeg -> [LegIdentifier]

-- | A reference to the party responsible for making the payments defined
--   by this structure.
varianceLeg_payerPartyReference :: VarianceLeg -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
varianceLeg_payerAccountReference :: VarianceLeg -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
varianceLeg_receiverPartyReference :: VarianceLeg -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
varianceLeg_receiverAccountReference :: VarianceLeg -> Maybe AccountReference

-- | Specifies the effective date of this leg of the swap. When defined in
--   relation to a date specified somewhere else in the document (through
--   the relativeDate component), this element will typically point to the
--   effective date of the other leg of the swap.
varianceLeg_effectiveDate :: VarianceLeg -> Maybe AdjustableOrRelativeDate

-- | Specifies the termination date of this leg of the swap. When defined
--   in relation to a date specified somewhere else in the document
--   (through the relativeDate component), this element will typically
--   point to the termination date of the other leg of the swap.
varianceLeg_terminationDate :: VarianceLeg -> Maybe AdjustableOrRelativeDate

-- | Specifies the underlyer of the leg.
varianceLeg_underlyer :: VarianceLeg -> Maybe Underlyer
varianceLeg_settlementType :: VarianceLeg -> Maybe SettlementTypeEnum
varianceLeg_settlementDate :: VarianceLeg -> Maybe AdjustableOrRelativeDate

-- | Choice between:
--   
--   <ol>
--   <li>Settlement Amount</li>
--   <li>Settlement Currency for use where the Settlement Amount cannot be
--   known in advance</li>
--   </ol>
varianceLeg_choice10 :: VarianceLeg -> (Maybe (OneOf2 Money Currency))

-- | Quanto, Composite, or Cross Currency FX features.
varianceLeg_fxFeature :: VarianceLeg -> Maybe FxFeature

-- | Valuation of the underlyer.
varianceLeg_valuation :: VarianceLeg -> Maybe EquityValuation

-- | Specifies, in relation to each Equity Payment Date, the amount to
--   which the Equity Payment Date relates. Unless otherwise specified,
--   this term has the meaning defined in the ISDA 2002 Equity Derivatives
--   Definitions.
varianceLeg_amount :: VarianceLeg -> Maybe VarianceAmount
data VarianceOptionTransactionSupplement
VarianceOptionTransactionSupplement :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> OptionTypeEnum -> Maybe EquityPremium -> Maybe EquityExerciseValuationSettlement -> Maybe Boolean -> Maybe MethodOfAdjustmentEnum -> (Maybe (OneOf2 PositiveDecimal PositiveDecimal)) -> VarianceSwapTransactionSupplement -> VarianceOptionTransactionSupplement
vots_ID :: VarianceOptionTransactionSupplement -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
vots_primaryAssetClass :: VarianceOptionTransactionSupplement -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
vots_secondaryAssetClass :: VarianceOptionTransactionSupplement -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
vots_productType :: VarianceOptionTransactionSupplement -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
vots_productId :: VarianceOptionTransactionSupplement -> [ProductId]

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
vots_buyerPartyReference :: VarianceOptionTransactionSupplement -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
vots_buyerAccountReference :: VarianceOptionTransactionSupplement -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
vots_sellerPartyReference :: VarianceOptionTransactionSupplement -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
vots_sellerAccountReference :: VarianceOptionTransactionSupplement -> Maybe AccountReference

-- | The type of option transaction. From a usage standpoint, put<i>call is
--   the default option type, while payer</i>receiver indicator is used for
--   options index credit default swaps, consistently with the industry
--   practice. Straddle is used for the case of straddle strategy, that
--   combine a call and a put with the same strike.
vots_optionType :: VarianceOptionTransactionSupplement -> OptionTypeEnum

-- | The variance option premium payable by the buyer to the seller.
vots_equityPremium :: VarianceOptionTransactionSupplement -> Maybe EquityPremium

-- | The parameters for defining how the equity option can be exercised,
--   how it is valued and how it is settled.
vots_equityExercise :: VarianceOptionTransactionSupplement -> Maybe EquityExerciseValuationSettlement

-- | For a share option transaction, a flag used to indicate whether the
--   transaction is to be treated as an 'exchange look-alike'. This
--   designation has significance for how share adjustments (arising from
--   corporate actions) will be determined for the transaction. For an
--   'exchange look-alike' transaction the relevant share adjustments will
--   follow that for a corresponding designated contract listed on the
--   related exchange (referred to as Options Exchange Adjustment (ISDA
--   defined term), otherwise the share adjustments will be determined by
--   the calculation agent (referred to as Calculation Agent Adjustment
--   (ISDA defined term)).
vots_exchangeLookAlike :: VarianceOptionTransactionSupplement -> Maybe Boolean

-- | Defines how adjustments will be made to the contract should one or
--   more of the extraordinary events occur.
vots_methodOfAdjustment :: VarianceOptionTransactionSupplement -> Maybe MethodOfAdjustmentEnum

-- | Choice between:
--   
--   <ol>
--   <li>The number of shares per option comprised in the option
--   transaction supplement.</li>
--   <li>Specifies the contract multiplier that can be associated with an
--   index option.</li>
--   </ol>
vots_choice13 :: VarianceOptionTransactionSupplement -> (Maybe (OneOf2 PositiveDecimal PositiveDecimal))

-- | The variance swap details.
vots_varianceSwapTransactionSupplement :: VarianceOptionTransactionSupplement -> VarianceSwapTransactionSupplement

-- | A Variance Swap.
data VarianceSwap
VarianceSwap :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> [ClassifiedPayment] -> Maybe ExtraordinaryEvents -> [VarianceLeg] -> VarianceSwap
varianceSwap_ID :: VarianceSwap -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
varianceSwap_primaryAssetClass :: VarianceSwap -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
varianceSwap_secondaryAssetClass :: VarianceSwap -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
varianceSwap_productType :: VarianceSwap -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
varianceSwap_productId :: VarianceSwap -> [ProductId]

-- | Specifies additional payment(s) between the principal parties to the
--   netted swap.
varianceSwap_additionalPayment :: VarianceSwap -> [ClassifiedPayment]

-- | Where the underlying is shares, specifies events affecting the issuer
--   of those shares that may require the terms of the transaction to be
--   adjusted.
varianceSwap_extraordinaryEvents :: VarianceSwap -> Maybe ExtraordinaryEvents

-- | Variance Leg.
varianceSwap_varianceLeg :: VarianceSwap -> [VarianceLeg]

-- | A Variance Swap Transaction Supplement.
data VarianceSwapTransactionSupplement
VarianceSwapTransactionSupplement :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> [VarianceLeg] -> (Maybe (OneOf2 Boolean Boolean)) -> Maybe CountryCode -> Maybe CountryCode -> VarianceSwapTransactionSupplement
varianSwapTransSuppl_ID :: VarianceSwapTransactionSupplement -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
varianSwapTransSuppl_primaryAssetClass :: VarianceSwapTransactionSupplement -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
varianSwapTransSuppl_secondaryAssetClass :: VarianceSwapTransactionSupplement -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
varianSwapTransSuppl_productType :: VarianceSwapTransactionSupplement -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
varianSwapTransSuppl_productId :: VarianceSwapTransactionSupplement -> [ProductId]

-- | Variance Leg.
varianSwapTransSuppl_varianceLeg :: VarianceSwapTransactionSupplement -> [VarianceLeg]

-- | Choice between:
--   
--   <ol>
--   <li>For an index option transaction, a flag to indicate whether a
--   relevant Multiple Exchange Index Annex is applicable to the
--   transaction. This annex defines additional provisions which are
--   applicable where an index is comprised of component securities that
--   are traded on multiple exchanges.</li>
--   <li>For an index option transaction, a flag to indicate whether a
--   relevant Component Security Index Annex is applicable to the
--   transaction.</li>
--   </ol>
varianSwapTransSuppl_choice5 :: VarianceSwapTransactionSupplement -> (Maybe (OneOf2 Boolean Boolean))

-- | Local Jurisdiction is a term used in the AEJ Master Confirmation,
--   which is used to determine local taxes, which shall mean taxes,
--   duties, and similar charges imposed by the taxing authority of the
--   Local Jurisdiction If this element is not present Local Jurisdiction
--   is Not Applicable.
varianSwapTransSuppl_localJurisdiction :: VarianceSwapTransactionSupplement -> Maybe CountryCode

-- | Relevent Jurisdiction is a term used in the AEJ Master Confirmation,
--   which is used to determine local taxes, which shall mean taxes, duties
--   and similar charges that would be imposed by the taxing authority of
--   the Country of Underlyer on a Hypothetical Broker Dealer assuming the
--   Applicable Hedge Positions are held by its office in the Relevant
--   Jurisdiction. If this element is not present Relevant Jurisdiction is
--   Not Applicable.
varianSwapTransSuppl_relevantJurisdiction :: VarianceSwapTransactionSupplement -> Maybe CountryCode

-- | Specifies the structure of a variance option.
elementVarianceOptionTransactionSupplement :: XMLParser VarianceOptionTransactionSupplement
elementToXMLVarianceOptionTransactionSupplement :: VarianceOptionTransactionSupplement -> [Content ()]

-- | Specifies the structure of a variance swap.
elementVarianceSwap :: XMLParser VarianceSwap
elementToXMLVarianceSwap :: VarianceSwap -> [Content ()]

-- | Specifies the structure of a variance swap transaction supplement.
elementVarianceSwapTransactionSupplement :: XMLParser VarianceSwapTransactionSupplement
elementToXMLVarianceSwapTransactionSupplement :: VarianceSwapTransactionSupplement -> [Content ()]
instance Eq VarianceSwapTransactionSupplement
instance Show VarianceSwapTransactionSupplement
instance Eq VarianceSwap
instance Show VarianceSwap
instance Eq VarianceOptionTransactionSupplement
instance Show VarianceOptionTransactionSupplement
instance Eq VarianceLeg
instance Show VarianceLeg
instance Eq VarianceAmount
instance Show VarianceAmount
instance Extension VarianceSwapTransactionSupplement Product
instance SchemaType VarianceSwapTransactionSupplement
instance Extension VarianceSwap Product
instance Extension VarianceSwap NettedSwapBase
instance SchemaType VarianceSwap
instance Extension VarianceOptionTransactionSupplement Product
instance Extension VarianceOptionTransactionSupplement Option
instance Extension VarianceOptionTransactionSupplement OptionBase
instance SchemaType VarianceOptionTransactionSupplement
instance Extension VarianceLeg Leg
instance Extension VarianceLeg DirectionalLeg
instance Extension VarianceLeg DirectionalLegUnderlyer
instance Extension VarianceLeg DirectionalLegUnderlyerValuation
instance SchemaType VarianceLeg
instance Extension VarianceAmount CalculatedAmount
instance SchemaType VarianceAmount

module Data.FpML.V53.Swaps.Return

-- | A type for defining Equity Swap Transaction Supplement
data EquitySwapTransactionSupplement
EquitySwapTransactionSupplement :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> [DirectionalLeg] -> Maybe PrincipalExchangeFeatures -> (Maybe (OneOf2 Boolean (Maybe (Boolean), Maybe (Boolean), Maybe (FeeElectionEnum), Maybe (NonNegativeDecimal)))) -> (Maybe (OneOf2 Boolean Boolean)) -> Maybe CountryCode -> Maybe CountryCode -> Maybe ExtraordinaryEvents -> EquitySwapTransactionSupplement
equitySwapTransSuppl_ID :: EquitySwapTransactionSupplement -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
equitySwapTransSuppl_primaryAssetClass :: EquitySwapTransactionSupplement -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
equitySwapTransSuppl_secondaryAssetClass :: EquitySwapTransactionSupplement -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
equitySwapTransSuppl_productType :: EquitySwapTransactionSupplement -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
equitySwapTransSuppl_productId :: EquitySwapTransactionSupplement -> [ProductId]

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
equitySwapTransSuppl_buyerPartyReference :: EquitySwapTransactionSupplement -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
equitySwapTransSuppl_buyerAccountReference :: EquitySwapTransactionSupplement -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
equitySwapTransSuppl_sellerPartyReference :: EquitySwapTransactionSupplement -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
equitySwapTransSuppl_sellerAccountReference :: EquitySwapTransactionSupplement -> Maybe AccountReference

-- | An placeholder for the actual Return Swap Leg definition.
equitySwapTransSuppl_returnSwapLeg :: EquitySwapTransactionSupplement -> [DirectionalLeg]

-- | This is used to document a Fully Funded Return Swap.
equitySwapTransSuppl_principalExchangeFeatures :: EquitySwapTransactionSupplement -> Maybe PrincipalExchangeFeatures

-- | Choice between:
--   
--   <ol>
--   <li>Used for specifying whether the Mutual Early Termination Right
--   that is detailed in the Master Confirmation will apply.</li>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>A Boolean element used for specifying whether the Optional Early
--   Termination clause detailed in the agreement will apply.</li>
--   <li>A Boolean element used for specifying whether the Break Funding
--   Recovery detailed in the agreement will apply.</li>
--   <li>Defines the fee type.</li>
--   <li>breakFeeRate</li>
--   </ul>
equitySwapTransSuppl_choice10 :: EquitySwapTransactionSupplement -> (Maybe (OneOf2 Boolean (Maybe (Boolean), Maybe (Boolean), Maybe (FeeElectionEnum), Maybe (NonNegativeDecimal))))

-- | Choice between:
--   
--   <ol>
--   <li>For an index option transaction, a flag to indicate whether a
--   relevant Multiple Exchange Index Annex is applicable to the
--   transaction. This annex defines additional provisions which are
--   applicable where an index is comprised of component securities that
--   are traded on multiple exchanges.</li>
--   <li>For an index option transaction, a flag to indicate whether a
--   relevant Component Security Index Annex is applicable to the
--   transaction.</li>
--   </ol>
equitySwapTransSuppl_choice11 :: EquitySwapTransactionSupplement -> (Maybe (OneOf2 Boolean Boolean))

-- | Local Jurisdiction is a term used in the AEJ Master Confirmation,
--   which is used to determine local taxes, which shall mean taxes,
--   duties, and similar charges imposed by the taxing authority of the
--   Local Jurisdiction If this element is not present Local Jurisdiction
--   is Not Applicable.
equitySwapTransSuppl_localJurisdiction :: EquitySwapTransactionSupplement -> Maybe CountryCode

-- | Relevent Jurisdiction is a term used in the AEJ Master Confirmation,
--   which is used to determine local taxes, which shall mean taxes, duties
--   and similar charges that would be imposed by the taxing authority of
--   the Country of Underlyer on a Hypothetical Broker Dealer assuming the
--   Applicable Hedge Positions are held by its office in the Relevant
--   Jurisdiction. If this element is not present Relevant Jurisdiction is
--   Not Applicable.
equitySwapTransSuppl_relevantJurisdiction :: EquitySwapTransactionSupplement -> Maybe CountryCode

-- | Where the underlying is shares, specifies events affecting the issuer
--   of those shares that may require the terms of the transaction to be
--   adjusted.
equitySwapTransSuppl_extraordinaryEvents :: EquitySwapTransactionSupplement -> Maybe ExtraordinaryEvents

-- | Specifies the structure of the equity swap transaction supplement.
elementEquitySwapTransactionSupplement :: XMLParser EquitySwapTransactionSupplement
elementToXMLEquitySwapTransactionSupplement :: EquitySwapTransactionSupplement -> [Content ()]
instance Eq EquitySwapTransactionSupplement
instance Show EquitySwapTransactionSupplement
instance Extension EquitySwapTransactionSupplement Product
instance Extension EquitySwapTransactionSupplement ReturnSwapBase
instance SchemaType EquitySwapTransactionSupplement

module Data.FpML.V53.Swaps.Correlation

-- | Correlation Amount.
data CorrelationAmount
CorrelationAmount :: Maybe AdjustableRelativeOrPeriodicDates -> Maybe AdjustableOrRelativeDate -> Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> Maybe Correlation -> CorrelationAmount

-- | Specifies the date on which a calculation or an observation will be
--   performed for the purpose of calculating the amount.
correlAmount_calculationDates :: CorrelationAmount -> Maybe AdjustableRelativeOrPeriodicDates

-- | The start of the period over which observations are made which are
--   used in the calculation Used when the observation start date differs
--   from the trade date such as for forward starting swaps.
correlAmount_observationStartDate :: CorrelationAmount -> Maybe AdjustableOrRelativeDate

-- | If present and true, then options exchange dividends are applicable.
correlAmount_optionsExchangeDividends :: CorrelationAmount -> Maybe Boolean

-- | If present and true, then additional dividends are applicable.
correlAmount_additionalDividends :: CorrelationAmount -> Maybe Boolean

-- | Represents the European Master Confirmation value of 'All Dividends'
--   which, when applicable, signifies that, for a given Ex-Date, the daily
--   observed Share Price for that day is adjusted (reduced) by the cash
--   dividend and/or the cash value of any non cash dividend per Share
--   (including Extraordinary Dividends) declared by the Issuer.
correlAmount_allDividends :: CorrelationAmount -> Maybe Boolean

-- | Specifies Correlation.
correlAmount_correlation :: CorrelationAmount -> Maybe Correlation

-- | A type describing return which is driven by a Correlation calculation.
data CorrelationLeg
CorrelationLeg :: Maybe ID -> [LegIdentifier] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe AdjustableOrRelativeDate -> Maybe AdjustableOrRelativeDate -> Maybe Underlyer -> Maybe SettlementTypeEnum -> Maybe AdjustableOrRelativeDate -> (Maybe (OneOf2 Money Currency)) -> Maybe FxFeature -> Maybe EquityValuation -> Maybe CorrelationAmount -> CorrelationLeg
correlLeg_ID :: CorrelationLeg -> Maybe ID

-- | Version aware identification of this leg.
correlLeg_legIdentifier :: CorrelationLeg -> [LegIdentifier]

-- | A reference to the party responsible for making the payments defined
--   by this structure.
correlLeg_payerPartyReference :: CorrelationLeg -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
correlLeg_payerAccountReference :: CorrelationLeg -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
correlLeg_receiverPartyReference :: CorrelationLeg -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
correlLeg_receiverAccountReference :: CorrelationLeg -> Maybe AccountReference

-- | Specifies the effective date of this leg of the swap. When defined in
--   relation to a date specified somewhere else in the document (through
--   the relativeDate component), this element will typically point to the
--   effective date of the other leg of the swap.
correlLeg_effectiveDate :: CorrelationLeg -> Maybe AdjustableOrRelativeDate

-- | Specifies the termination date of this leg of the swap. When defined
--   in relation to a date specified somewhere else in the document
--   (through the relativeDate component), this element will typically
--   point to the termination date of the other leg of the swap.
correlLeg_terminationDate :: CorrelationLeg -> Maybe AdjustableOrRelativeDate

-- | Specifies the underlyer of the leg.
correlLeg_underlyer :: CorrelationLeg -> Maybe Underlyer
correlLeg_settlementType :: CorrelationLeg -> Maybe SettlementTypeEnum
correlLeg_settlementDate :: CorrelationLeg -> Maybe AdjustableOrRelativeDate

-- | Choice between:
--   
--   <ol>
--   <li>Settlement Amount</li>
--   <li>Settlement Currency for use where the Settlement Amount cannot be
--   known in advance</li>
--   </ol>
correlLeg_choice10 :: CorrelationLeg -> (Maybe (OneOf2 Money Currency))

-- | Quanto, Composite, or Cross Currency FX features.
correlLeg_fxFeature :: CorrelationLeg -> Maybe FxFeature

-- | Valuation of the underlyer.
correlLeg_valuation :: CorrelationLeg -> Maybe EquityValuation

-- | Specifies, in relation to each Equity Payment Date, the Equity Amount
--   to which the Equity Payment Date relates. Unless otherwise specified,
--   this term has the meaning defined in the ISDA 2002 Equity Derivatives
--   Definitions.
correlLeg_amount :: CorrelationLeg -> Maybe CorrelationAmount

-- | A Correlation Swap modelled using a single netted leg.
data CorrelationSwap
CorrelationSwap :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> [ClassifiedPayment] -> Maybe ExtraordinaryEvents -> Maybe CorrelationLeg -> CorrelationSwap
correlSwap_ID :: CorrelationSwap -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
correlSwap_primaryAssetClass :: CorrelationSwap -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
correlSwap_secondaryAssetClass :: CorrelationSwap -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
correlSwap_productType :: CorrelationSwap -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
correlSwap_productId :: CorrelationSwap -> [ProductId]

-- | Specifies additional payment(s) between the principal parties to the
--   netted swap.
correlSwap_additionalPayment :: CorrelationSwap -> [ClassifiedPayment]

-- | Where the underlying is shares, specifies events affecting the issuer
--   of those shares that may require the terms of the transaction to be
--   adjusted.
correlSwap_extraordinaryEvents :: CorrelationSwap -> Maybe ExtraordinaryEvents

-- | Correlation Leg. Correlation Buyer is deemed to be the Equity Amount
--   Receiver, Correlation Seller is deemed to be the Equity Amount Payer.
correlSwap_correlationLeg :: CorrelationSwap -> Maybe CorrelationLeg

-- | Specifies the structure of a correlation swap.
elementCorrelationSwap :: XMLParser CorrelationSwap
elementToXMLCorrelationSwap :: CorrelationSwap -> [Content ()]
instance Eq CorrelationSwap
instance Show CorrelationSwap
instance Eq CorrelationLeg
instance Show CorrelationLeg
instance Eq CorrelationAmount
instance Show CorrelationAmount
instance Extension CorrelationSwap Product
instance Extension CorrelationSwap NettedSwapBase
instance SchemaType CorrelationSwap
instance Extension CorrelationLeg Leg
instance Extension CorrelationLeg DirectionalLeg
instance Extension CorrelationLeg DirectionalLegUnderlyer
instance Extension CorrelationLeg DirectionalLegUnderlyerValuation
instance SchemaType CorrelationLeg
instance Extension CorrelationAmount CalculatedAmount
instance SchemaType CorrelationAmount

module Data.FpML.V53.Swaps.Dividend

-- | Floating Payment Leg of a Dividend Swap.
data DividendLeg
DividendLeg :: Maybe ID -> [LegIdentifier] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe AdjustableOrRelativeDate -> Maybe AdjustableOrRelativeDate -> Maybe Underlyer -> Maybe SettlementTypeEnum -> Maybe AdjustableOrRelativeDate -> (Maybe (OneOf2 Money Currency)) -> Maybe FxFeature -> Maybe NonNegativeDecimal -> Maybe NonNegativeDecimal -> [DividendPeriodPayment] -> Maybe Boolean -> Maybe Boolean -> DividendLeg
dividendLeg_ID :: DividendLeg -> Maybe ID

-- | Version aware identification of this leg.
dividendLeg_legIdentifier :: DividendLeg -> [LegIdentifier]

-- | A reference to the party responsible for making the payments defined
--   by this structure.
dividendLeg_payerPartyReference :: DividendLeg -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
dividendLeg_payerAccountReference :: DividendLeg -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
dividendLeg_receiverPartyReference :: DividendLeg -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
dividendLeg_receiverAccountReference :: DividendLeg -> Maybe AccountReference

-- | Specifies the effective date of this leg of the swap. When defined in
--   relation to a date specified somewhere else in the document (through
--   the relativeDate component), this element will typically point to the
--   effective date of the other leg of the swap.
dividendLeg_effectiveDate :: DividendLeg -> Maybe AdjustableOrRelativeDate

-- | Specifies the termination date of this leg of the swap. When defined
--   in relation to a date specified somewhere else in the document
--   (through the relativeDate component), this element will typically
--   point to the termination date of the other leg of the swap.
dividendLeg_terminationDate :: DividendLeg -> Maybe AdjustableOrRelativeDate

-- | Specifies the underlyer of the leg.
dividendLeg_underlyer :: DividendLeg -> Maybe Underlyer
dividendLeg_settlementType :: DividendLeg -> Maybe SettlementTypeEnum
dividendLeg_settlementDate :: DividendLeg -> Maybe AdjustableOrRelativeDate

-- | Choice between:
--   
--   <ol>
--   <li>Settlement Amount</li>
--   <li>Settlement Currency for use where the Settlement Amount cannot be
--   known in advance</li>
--   </ol>
dividendLeg_choice10 :: DividendLeg -> (Maybe (OneOf2 Money Currency))

-- | Quanto, Composite, or Cross Currency FX features.
dividendLeg_fxFeature :: DividendLeg -> Maybe FxFeature

-- | Declared Cash Dividend Percentage.
dividendLeg_declaredCashDividendPercentage :: DividendLeg -> Maybe NonNegativeDecimal

-- | Declared Cash Equivalent Dividend Percentage.
dividendLeg_declaredCashEquivalentDividendPercentage :: DividendLeg -> Maybe NonNegativeDecimal

-- | One to many time bounded dividend payment periods, each with a fixed
--   strike and dividend payment date per period.
dividendLeg_dividendPeriod :: DividendLeg -> [DividendPeriodPayment]

-- | If present and true, then special dividends and memorial dividends are
--   applicable.
dividendLeg_specialDividends :: DividendLeg -> Maybe Boolean

-- | If present and true, then material non cash dividends are applicable.
dividendLeg_materialDividend :: DividendLeg -> Maybe Boolean

-- | A time bounded dividend period, with fixed strike and a dividend
--   payment date per period.
data DividendPeriodPayment
DividendPeriodPayment :: Maybe ID -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe BusinessDayAdjustments -> Maybe AssetReference -> Maybe PositiveDecimal -> Maybe AdjustableOrRelativeDate -> Maybe AdjustableOrRelativeDate -> DividendPeriodPayment
dividPeriodPayment_ID :: DividendPeriodPayment -> Maybe ID

-- | Unadjusted inclusive dividend period start date.
dividPeriodPayment_unadjustedStartDate :: DividendPeriodPayment -> Maybe IdentifiedDate

-- | Unadjusted inclusive dividend period end date.
dividPeriodPayment_unadjustedEndDate :: DividendPeriodPayment -> Maybe IdentifiedDate

-- | Date adjustments for all unadjusted dates in this dividend period.
dividPeriodPayment_dateAdjustments :: DividendPeriodPayment -> Maybe BusinessDayAdjustments

-- | Reference to the underlyer which is paying dividends. This should be
--   used in all cases, and must be used where there are multiple
--   underlying assets, to avoid any ambiguity about which asset the
--   dividend period relates to.
dividPeriodPayment_underlyerReference :: DividendPeriodPayment -> Maybe AssetReference

-- | Fixed strike.
dividPeriodPayment_fixedStrike :: DividendPeriodPayment -> Maybe PositiveDecimal

-- | Dividend period amount payment date.
dividPeriodPayment_paymentDate :: DividendPeriodPayment -> Maybe AdjustableOrRelativeDate

-- | Dividend period amount valuation date.
dividPeriodPayment_valuationDate :: DividendPeriodPayment -> Maybe AdjustableOrRelativeDate

-- | A Dividend Swap Transaction Supplement.
data DividendSwapTransactionSupplement
DividendSwapTransactionSupplement :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe DividendLeg -> Maybe FixedPaymentLeg -> (Maybe (OneOf2 Boolean Boolean)) -> Maybe CountryCode -> Maybe CountryCode -> DividendSwapTransactionSupplement
dividSwapTransSuppl_ID :: DividendSwapTransactionSupplement -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
dividSwapTransSuppl_primaryAssetClass :: DividendSwapTransactionSupplement -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
dividSwapTransSuppl_secondaryAssetClass :: DividendSwapTransactionSupplement -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
dividSwapTransSuppl_productType :: DividendSwapTransactionSupplement -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
dividSwapTransSuppl_productId :: DividendSwapTransactionSupplement -> [ProductId]

-- | Dividend leg.
dividSwapTransSuppl_dividendLeg :: DividendSwapTransactionSupplement -> Maybe DividendLeg

-- | Fixed payment leg.
dividSwapTransSuppl_fixedLeg :: DividendSwapTransactionSupplement -> Maybe FixedPaymentLeg

-- | Choice between:
--   
--   <ol>
--   <li>For an index option transaction, a flag to indicate whether a
--   relevant Multiple Exchange Index Annex is applicable to the
--   transaction. This annex defines additional provisions which are
--   applicable where an index is comprised of component securities that
--   are traded on multiple exchanges.</li>
--   <li>For an index option transaction, a flag to indicate whether a
--   relevant Component Security Index Annex is applicable to the
--   transaction.</li>
--   </ol>
dividSwapTransSuppl_choice6 :: DividendSwapTransactionSupplement -> (Maybe (OneOf2 Boolean Boolean))

-- | Local Jurisdiction is a term used in the AEJ Master Confirmation,
--   which is used to determine local taxes, which shall mean taxes,
--   duties, and similar charges imposed by the taxing authority of the
--   Local Jurisdiction If this element is not present Local Jurisdiction
--   is Not Applicable.
dividSwapTransSuppl_localJurisdiction :: DividendSwapTransactionSupplement -> Maybe CountryCode

-- | Relevent Jurisdiction is a term used in the AEJ Master Confirmation,
--   which is used to determine local taxes, which shall mean taxes, duties
--   and similar charges that would be imposed by the taxing authority of
--   the Country of Underlyer on a Hypothetical Broker Dealer assuming the
--   Applicable Hedge Positions are held by its office in the Relevant
--   Jurisdiction. If this element is not present Relevant Jurisdiction is
--   Not Applicable.
dividSwapTransSuppl_relevantJurisdiction :: DividendSwapTransactionSupplement -> Maybe CountryCode

-- | Fixed payment amount within a Dividend Swap.
data FixedPaymentAmount
FixedPaymentAmount :: Maybe ID -> Maybe NonNegativeMoney -> Maybe RelativeDateOffset -> FixedPaymentAmount
fixedPaymentAmount_ID :: FixedPaymentAmount -> Maybe ID

-- | Payment amount, which is optional since the payment amount may be
--   calculated using fixed strike and number of open units.
fixedPaymentAmount_paymentAmount :: FixedPaymentAmount -> Maybe NonNegativeMoney

-- | Payment date relative to another date.
fixedPaymentAmount_paymentDate :: FixedPaymentAmount -> Maybe RelativeDateOffset

-- | Fixed Payment Leg of a Dividend Swap.
data FixedPaymentLeg
FixedPaymentLeg :: Maybe ID -> [LegIdentifier] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe AdjustableOrRelativeDate -> Maybe AdjustableOrRelativeDate -> [FixedPaymentAmount] -> FixedPaymentLeg
fixedPaymentLeg_ID :: FixedPaymentLeg -> Maybe ID

-- | Version aware identification of this leg.
fixedPaymentLeg_legIdentifier :: FixedPaymentLeg -> [LegIdentifier]

-- | A reference to the party responsible for making the payments defined
--   by this structure.
fixedPaymentLeg_payerPartyReference :: FixedPaymentLeg -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
fixedPaymentLeg_payerAccountReference :: FixedPaymentLeg -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
fixedPaymentLeg_receiverPartyReference :: FixedPaymentLeg -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
fixedPaymentLeg_receiverAccountReference :: FixedPaymentLeg -> Maybe AccountReference

-- | Specifies the effective date of this leg of the swap. When defined in
--   relation to a date specified somewhere else in the document (through
--   the relativeDate component), this element will typically point to the
--   effective date of the other leg of the swap.
fixedPaymentLeg_effectiveDate :: FixedPaymentLeg -> Maybe AdjustableOrRelativeDate

-- | Specifies the termination date of this leg of the swap. When defined
--   in relation to a date specified somewhere else in the document
--   (through the relativeDate component), this element will typically
--   point to the termination date of the other leg of the swap.
fixedPaymentLeg_terminationDate :: FixedPaymentLeg -> Maybe AdjustableOrRelativeDate

-- | Fixed payment of a dividend swap, payment date is relative to a
--   dividend period payment date. Commonly the dividend leg and the fixed
--   payment leg will pay out on the same date, and the payments will be
--   netted.
fixedPaymentLeg_fixedPayment :: FixedPaymentLeg -> [FixedPaymentAmount]

-- | Specifies the structure of the dividend swap transaction supplement.
elementDividendSwapTransactionSupplement :: XMLParser DividendSwapTransactionSupplement
elementToXMLDividendSwapTransactionSupplement :: DividendSwapTransactionSupplement -> [Content ()]
instance Eq FixedPaymentLeg
instance Show FixedPaymentLeg
instance Eq FixedPaymentAmount
instance Show FixedPaymentAmount
instance Eq DividendSwapTransactionSupplement
instance Show DividendSwapTransactionSupplement
instance Eq DividendPeriodPayment
instance Show DividendPeriodPayment
instance Eq DividendLeg
instance Show DividendLeg
instance Extension FixedPaymentLeg Leg
instance Extension FixedPaymentLeg DirectionalLeg
instance SchemaType FixedPaymentLeg
instance Extension FixedPaymentAmount PaymentBase
instance SchemaType FixedPaymentAmount
instance Extension DividendSwapTransactionSupplement Product
instance SchemaType DividendSwapTransactionSupplement
instance Extension DividendPeriodPayment DividendPeriod
instance SchemaType DividendPeriodPayment
instance Extension DividendLeg Leg
instance Extension DividendLeg DirectionalLeg
instance Extension DividendLeg DirectionalLegUnderlyer
instance SchemaType DividendLeg

module Data.FpML.V53.FX

-- | Constrains the forward point tick/pip factor to 1, 0.1, 0.01, 0.001,
--   etc.
newtype PointValue
PointValue :: Decimal -> PointValue

-- | A type that is used for including the currency exchange rates used to
--   cross between the traded currencies for non-base currency FX
--   contracts.
data CrossRate
CrossRate :: Maybe Currency -> Maybe Currency -> Maybe QuoteBasisEnum -> Maybe PositiveDecimal -> Maybe PositiveDecimal -> Maybe Decimal -> CrossRate

-- | The first currency specified when a pair of currencies is to be
--   evaluated.
crossRate_currency1 :: CrossRate -> Maybe Currency

-- | The second currency specified when a pair of currencies is to be
--   evaluated.
crossRate_currency2 :: CrossRate -> Maybe Currency

-- | The method by which the exchange rate is quoted.
crossRate_quoteBasis :: CrossRate -> Maybe QuoteBasisEnum

-- | The exchange rate used to cross between the traded currencies.
crossRate_rate :: CrossRate -> Maybe PositiveDecimal

-- | An optional element used for FX forwards and certain types of FX OTC
--   options. For deals consumated in the FX Forwards Market, this
--   represents the current market rate for a particular currency pair.
crossRate_spotRate :: CrossRate -> Maybe PositiveDecimal

-- | An optional element used for deals consumated in the FX Forwards
--   market. Forward points represent the interest rate differential
--   between the two currencies traded and are quoted as a preminum or a
--   discount. Forward points are added to, or subtracted from, the spot
--   rate to create the rate of the forward trade.
crossRate_forwardPoints :: CrossRate -> Maybe Decimal

-- | Allows for an expiryDateTime cut to be described by name.
data CutName
CutName :: Scheme -> CutNameAttributes -> CutName
data CutNameAttributes
CutNameAttributes :: Maybe AnyURI -> CutNameAttributes
cutNameAttrib_cutNameScheme :: CutNameAttributes -> Maybe AnyURI

-- | Describes the parameters for a dual currency deposit.
data DualCurrencyFeature
DualCurrencyFeature :: Maybe Currency -> Maybe Date -> Maybe BusinessCenterTime -> Maybe DualCurrencyStrikePrice -> Maybe Decimal -> Maybe Boolean -> DualCurrencyFeature

-- | The currency in which the principal and interest will be repaid.
dualCurrenFeature_currency :: DualCurrencyFeature -> Maybe Currency

-- | The date on which the decion on delivery currency will be made.
dualCurrenFeature_fixingDate :: DualCurrencyFeature -> Maybe Date

-- | Time at which the option expires on the expiry date.
dualCurrenFeature_fixingTime :: DualCurrencyFeature -> Maybe BusinessCenterTime

-- | The strike rate at which the deposit will be converted.
dualCurrenFeature_strike :: DualCurrencyFeature -> Maybe DualCurrencyStrikePrice

-- | The spot rate at the time the trade was agreed.
dualCurrenFeature_spotRate :: DualCurrencyFeature -> Maybe Decimal

-- | Specifies whether the interest component of the redemption amount is
--   subject to conversion to the Alternate currency, in the event that the
--   spot rate is strictly lower than the strike level at the specified
--   fixing date and time.
dualCurrenFeature_interestAtRisk :: DualCurrencyFeature -> Maybe Boolean

-- | A type that describes the rate of exchange at which the embedded
--   option in a Dual Currency Deposit has been struck.
data DualCurrencyStrikePrice
DualCurrencyStrikePrice :: Maybe PositiveDecimal -> Maybe DualCurrencyStrikeQuoteBasisEnum -> DualCurrencyStrikePrice

-- | The rate of exchange between the two currencies of the leg of a deal.
dualCurrenStrikePrice_rate :: DualCurrencyStrikePrice -> Maybe PositiveDecimal

-- | The method by which the strike rate is quoted, in terms of the deposit
--   (principal) and alternate currencies.
dualCurrenStrikePrice_strikeQuoteBasis :: DualCurrencyStrikePrice -> Maybe DualCurrencyStrikeQuoteBasisEnum

-- | A type that is used for describing the exchange rate for a particular
--   transaction.
data ExchangeRate
ExchangeRate :: Maybe QuotedCurrencyPair -> Maybe PositiveDecimal -> Maybe PositiveDecimal -> Maybe Decimal -> Maybe PointValue -> [CrossRate] -> ExchangeRate

-- | Defines the two currencies for an FX trade and the quotation
--   relationship between the two currencies.
exchangeRate_quotedCurrencyPair :: ExchangeRate -> Maybe QuotedCurrencyPair

-- | The rate of exchange between the two currencies of the leg of a deal.
--   Must be specified with a quote basis.
exchangeRate_rate :: ExchangeRate -> Maybe PositiveDecimal

-- | An element used for FX forwards and certain types of FX OTC options.
--   For deals consumated in the FX Forwards Market, this represents the
--   current market rate for a particular currency pair. For barrier and
--   digital/binary options, it can be useful to include the spot rate at
--   the time the option was executed to make it easier to know whether the
--   option needs to move <a>up</a> or <a>down</a> to be triggered.
exchangeRate_spotRate :: ExchangeRate -> Maybe PositiveDecimal

-- | An optional element used for deals consumated in the FX Forwards
--   market. Forward points represent the interest rate differential
--   between the two currencies traded and are quoted as a preminum or a
--   discount. Forward points are added to, or subtracted from, the spot
--   rate to create the rate of the forward trade.
exchangeRate_forwardPoints :: ExchangeRate -> Maybe Decimal

-- | An optional element that documents the size of point (pip) in which a
--   rate was quoted (or in this case, forwardPoints are calculated). Point
--   (pip) size varies by currency pair: major currencies are all traded in
--   points of 0.0001, with the exception of JPY which has a point size of
--   0.01.
exchangeRate_pointValue :: ExchangeRate -> Maybe PointValue

-- | An optional element that allow for definition of the currency exchange
--   rates used to cross between the traded currencies for non-base
--   currency FX contracts.
exchangeRate_crossRate :: ExchangeRate -> [CrossRate]

-- | Describes the characteristics for american exercise of FX products.
data FxAmericanExercise
FxAmericanExercise :: Maybe ID -> Maybe AdjustableOrRelativeDate -> Maybe Date -> Maybe BusinessCenterTime -> Maybe CutName -> Maybe Date -> Maybe FxMultipleExercise -> FxAmericanExercise
fxAmericExerc_ID :: FxAmericanExercise -> Maybe ID

-- | The earliest date on which the option can be exercised.
fxAmericExerc_commencementDate :: FxAmericanExercise -> Maybe AdjustableOrRelativeDate

-- | The latest date on which the option can be exercised.
fxAmericExerc_expiryDate :: FxAmericanExercise -> Maybe Date

-- | Time at which the option expires on the expiry date.
fxAmericExerc_expiryTime :: FxAmericanExercise -> Maybe BusinessCenterTime

-- | The code by which the expiry time is known in the market.
fxAmericExerc_cutName :: FxAmericanExercise -> Maybe CutName

-- | The latest date on which both currencies traded will settle.
fxAmericExerc_latestValueDate :: FxAmericanExercise -> Maybe Date

-- | Characteristics for multiple exercise.
fxAmericExerc_multipleExercise :: FxAmericanExercise -> Maybe FxMultipleExercise

-- | Descibes the averaging period properties for an asian option.
data FxAsianFeature
FxAsianFeature :: Maybe InformationSource -> Maybe InformationSource -> Maybe BusinessCenterTime -> Maybe FxAverageRateObservationSchedule -> [FxAverageRateObservation] -> Maybe StrikeQuoteBasisEnum -> Maybe XsdString -> Maybe NonNegativeInteger -> FxAsianFeature

-- | The primary source for where the rate observation will occur. Will
--   typically be either a page or a reference bank published rate.
fxAsianFeature_primaryRateSource :: FxAsianFeature -> Maybe InformationSource

-- | An alternative, or secondary, source for where the rate observation
--   will occur. Will typically be either a page or a reference bank
--   published rate.
fxAsianFeature_secondaryRateSource :: FxAsianFeature -> Maybe InformationSource

-- | The time at which the spot currency exchange rate will be observed. It
--   is specified as a time in a business day calendar location, e.g.
--   11:00am London time.
fxAsianFeature_fixingTime :: FxAsianFeature -> Maybe BusinessCenterTime

-- | Parametric schedule of rate observations.
fxAsianFeature_observationSchedule :: FxAsianFeature -> Maybe FxAverageRateObservationSchedule

-- | One or more specific rate observation dates.
fxAsianFeature_rateObservation :: FxAsianFeature -> [FxAverageRateObservation]

-- | The method by which observed rate values are quoted, in terms of the
--   option put/call currencies. In the absence of this element, rate
--   observations are assumed to be quoted as per the option
--   strikeQuoteBasis.
fxAsianFeature_rateObservationQuoteBasis :: FxAsianFeature -> Maybe StrikeQuoteBasisEnum

-- | The description of the mathematical computation for how the payout is
--   computed.
fxAsianFeature_payoutFormula :: FxAsianFeature -> Maybe XsdString

-- | Specifies the rounding precision in terms of a number of decimal
--   places. Note how a percentage rate rounding of 5 decimal places is
--   expressed as a rounding precision of 7 in the FpML document since the
--   percentage is expressed as a decimal, e.g. 9.876543% (or 0.09876543)
--   being rounded to the nearest 5 decimal places is 9.87654% (or
--   0.0987654).
fxAsianFeature_precision :: FxAsianFeature -> Maybe NonNegativeInteger

-- | A type that, for average rate options, is used to describe each
--   specific observation date, as opposed to a parametric frequency of
--   rate observations.
data FxAverageRateObservation
FxAverageRateObservation :: Maybe Date -> Maybe Decimal -> Maybe NonNegativeDecimal -> FxAverageRateObservation

-- | A specific date for which an observation against a particular rate
--   will be made and will be used for subsequent computations.
fxAverageRateObserv_date :: FxAverageRateObservation -> Maybe Date

-- | An optional factor that can be used for weighting certain observation
--   dates. Typically, firms will weight each date with a factor of 1 if
--   there are standard, unweighted adjustments.
fxAverageRateObserv_averageRateWeightingFactor :: FxAverageRateObservation -> Maybe Decimal

-- | The observed rate of exchange between the two option currencies. In
--   the absence of rateObservationQuoteBasis, the rate is assumed to be
--   quoted as per option strike/strikeQuoteBasis.
fxAverageRateObserv_rate :: FxAverageRateObservation -> Maybe NonNegativeDecimal

-- | A type that describes average rate options rate observations. This is
--   used to describe a parametric frequency of rate observations against a
--   particular rate. Typical frequencies might include daily, every
--   Friday, etc.
data FxAverageRateObservationSchedule
FxAverageRateObservationSchedule :: Maybe Date -> Maybe Date -> Maybe CalculationPeriodFrequency -> FxAverageRateObservationSchedule

-- | The start of the period over which observations are made to determine
--   whether a trigger has occurred.
fxAverageRateObservSched_startDate :: FxAverageRateObservationSchedule -> Maybe Date

-- | The end of the period over which observations are made to determine
--   whether a trigger event has occurred.
fxAverageRateObservSched_endDate :: FxAverageRateObservationSchedule -> Maybe Date

-- | The frequency at which calculation period end dates occur with the
--   regular part of the calculation period schedule and their roll date
--   convention.
fxAverageRateObservSched_calculationPeriodFrequency :: FxAverageRateObservationSchedule -> Maybe CalculationPeriodFrequency

-- | Describes the properties of an Fx barrier.
data FxBarrierFeature
FxBarrierFeature :: Maybe FxBarrierTypeEnum -> Maybe QuotedCurrencyPair -> Maybe PositiveDecimal -> [InformationSource] -> Maybe Date -> Maybe Date -> FxBarrierFeature

-- | This specifies whether the option becomes effective (<a>knock-in</a>)
--   or is annulled (<a>knock-out</a>) when the respective trigger event
--   occurs.
fxBarrierFeature_barrierType :: FxBarrierFeature -> Maybe FxBarrierTypeEnum

-- | Defines the two currencies for an FX trade and the quotation
--   relationship between the two currencies.
fxBarrierFeature_quotedCurrencyPair :: FxBarrierFeature -> Maybe QuotedCurrencyPair

-- | The market rate is observed relative to the trigger rate, and if it is
--   found to be on the predefined side of (above or below) the trigger
--   rate, a trigger event is deemed to have occurred.
fxBarrierFeature_triggerRate :: FxBarrierFeature -> Maybe PositiveDecimal

-- | The information source where a published or displayed market rate will
--   be obtained, e.g. Telerate Page 3750.
fxBarrierFeature_informationSource :: FxBarrierFeature -> [InformationSource]

-- | The start of the period over which observations are made to determine
--   whether a trigger has occurred.
fxBarrierFeature_observationStartDate :: FxBarrierFeature -> Maybe Date

-- | The end of the period over which observations are made to determine
--   whether a trigger event has occurred.
fxBarrierFeature_observationEndDate :: FxBarrierFeature -> Maybe Date

-- | Describes a precise boundary value.
data FxBoundary
FxBoundary :: (Maybe (OneOf2 Inclusive Exclusive)) -> FxBoundary

-- | Choice between:
--   
--   <ol>
--   <li>inclusive</li>
--   <li>exclusive</li>
--   </ol>
fxBoundary_choice0 :: FxBoundary -> (Maybe (OneOf2 Inclusive Exclusive))
data Inclusive
Inclusive :: Inclusive
data Exclusive
Exclusive :: Exclusive
elementInclusive :: Parser (Content Posn) Inclusive
elementExclusive :: Parser (Content Posn) Exclusive
elementToXMLInclusive :: Inclusive -> [Content ()]
elementToXMLExclusive :: Exclusive -> [Content ()]

-- | Descrines the characteristics for American exercise in FX digital
--   options.
data FxDigitalAmericanExercise
FxDigitalAmericanExercise :: Maybe ID -> Maybe AdjustableOrRelativeDate -> Maybe Date -> Maybe BusinessCenterTime -> Maybe CutName -> Maybe Date -> FxDigitalAmericanExercise
fxDigitalAmericExerc_ID :: FxDigitalAmericanExercise -> Maybe ID

-- | The earliest date on which the option can be exercised.
fxDigitalAmericExerc_commencementDate :: FxDigitalAmericanExercise -> Maybe AdjustableOrRelativeDate

-- | The latest date on which the option can be exercised.
fxDigitalAmericExerc_expiryDate :: FxDigitalAmericanExercise -> Maybe Date

-- | Time at which the option expires on the expiry date.
fxDigitalAmericExerc_expiryTime :: FxDigitalAmericanExercise -> Maybe BusinessCenterTime

-- | The code by which the expiry time is known in the market.
fxDigitalAmericExerc_cutName :: FxDigitalAmericanExercise -> Maybe CutName

-- | The latest date on which both currencies traded will settle.
fxDigitalAmericExerc_latestValueDate :: FxDigitalAmericanExercise -> Maybe Date

-- | Describes an option having a triggerable fixed payout.
data FxDigitalOption
FxDigitalOption :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe AdjustableOrRelativeDate -> Maybe Period -> (Maybe (OneOf2 (Maybe (FxDigitalAmericanExercise), [FxTouch]) (Maybe (FxEuropeanExercise), [FxTrigger]))) -> Maybe ExerciseProcedure -> Maybe FxOptionPayout -> [FxOptionPremium] -> FxDigitalOption
fxDigitalOption_ID :: FxDigitalOption -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
fxDigitalOption_primaryAssetClass :: FxDigitalOption -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
fxDigitalOption_secondaryAssetClass :: FxDigitalOption -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
fxDigitalOption_productType :: FxDigitalOption -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
fxDigitalOption_productId :: FxDigitalOption -> [ProductId]

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
fxDigitalOption_buyerPartyReference :: FxDigitalOption -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
fxDigitalOption_buyerAccountReference :: FxDigitalOption -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
fxDigitalOption_sellerPartyReference :: FxDigitalOption -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
fxDigitalOption_sellerAccountReference :: FxDigitalOption -> Maybe AccountReference

-- | Effective date for a forward starting derivative. If this element is
--   not present, the effective date is the trade date.
fxDigitalOption_effectiveDate :: FxDigitalOption -> Maybe AdjustableOrRelativeDate

-- | A tenor expressed as a period type and multiplier (e.g. 1D, 1Y, etc.)
fxDigitalOption_tenorPeriod :: FxDigitalOption -> Maybe Period

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The parameters for defining the exercise period for an American
--   style option.</li>
--   <li>Defines one or more conditions underwhich the option will payout
--   if exercisable.</li>
--   </ul>
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The parameters for defining the exercise period for an European
--   style option.</li>
--   <li>Defines one or more conditions underwhich the option will payout
--   if exercisable.</li>
--   </ul>
fxDigitalOption_choice10 :: FxDigitalOption -> (Maybe (OneOf2 (Maybe (FxDigitalAmericanExercise), [FxTouch]) (Maybe (FxEuropeanExercise), [FxTrigger])))

-- | A set of parameters defining procedures associated with the exercise.
fxDigitalOption_exerciseProcedure :: FxDigitalOption -> Maybe ExerciseProcedure

-- | The amount of currency which becomes payable if and when a trigger
--   event occurs.
fxDigitalOption_payout :: FxDigitalOption -> Maybe FxOptionPayout

-- | Premium amount or premium installment amount for an option.
fxDigitalOption_premium :: FxDigitalOption -> [FxOptionPremium]

-- | Describes the characteristics for European exercise of FX products.
data FxEuropeanExercise
FxEuropeanExercise :: Maybe ID -> Maybe Date -> Maybe BusinessCenterTime -> Maybe CutName -> Maybe Date -> FxEuropeanExercise
fxEuropExerc_ID :: FxEuropeanExercise -> Maybe ID

-- | Represents a standard expiry date as defined for an FX OTC option.
fxEuropExerc_expiryDate :: FxEuropeanExercise -> Maybe Date

-- | Time at which the option expires on the expiry date.
fxEuropExerc_expiryTime :: FxEuropeanExercise -> Maybe BusinessCenterTime

-- | The code by which the expiry time is known in the market.
fxEuropExerc_cutName :: FxEuropeanExercise -> Maybe CutName

-- | The date on which both currencies traded will settle.
fxEuropExerc_valueDate :: FxEuropeanExercise -> Maybe Date

-- | Describes the limits on the size of notional when multiple exercise is
--   allowed.
data FxMultipleExercise
FxMultipleExercise :: Maybe NonNegativeMoney -> Maybe NonNegativeMoney -> FxMultipleExercise

-- | The minimum amount of notional that can be exercised.
fxMultiExerc_minimumNotionalAmount :: FxMultipleExercise -> Maybe NonNegativeMoney

-- | The maximum amount of notiional that can be exercised.
fxMultiExerc_maximumNotionalAmount :: FxMultipleExercise -> Maybe NonNegativeMoney

-- | Describes an FX option with optional asian and barrier features.
data FxOption
FxOption :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe AdjustableOrRelativeDate -> Maybe Period -> OneOf2 FxAmericanExercise FxEuropeanExercise -> Maybe ExerciseProcedure -> NonNegativeMoney -> NonNegativeMoney -> Maybe PutCallEnum -> FxStrikePrice -> Maybe PositiveDecimal -> Maybe FxOptionFeatures -> FxOptionPremium -> Maybe FxCashSettlement -> FxOption
fxOption_ID :: FxOption -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
fxOption_primaryAssetClass :: FxOption -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
fxOption_secondaryAssetClass :: FxOption -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
fxOption_productType :: FxOption -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
fxOption_productId :: FxOption -> [ProductId]

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
fxOption_buyerPartyReference :: FxOption -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
fxOption_buyerAccountReference :: FxOption -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
fxOption_sellerPartyReference :: FxOption -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
fxOption_sellerAccountReference :: FxOption -> Maybe AccountReference

-- | Effective date for a forward starting derivative. If this element is
--   not present, the effective date is the trade date.
fxOption_effectiveDate :: FxOption -> Maybe AdjustableOrRelativeDate

-- | A tenor expressed as a period type and multiplier (e.g. 1D, 1Y, etc.)
fxOption_tenorPeriod :: FxOption -> Maybe Period

-- | Choice between:
--   
--   <ol>
--   <li>The parameters for defining the exercise period for an American
--   style option.</li>
--   <li>The parameters for defining the exercise period for an European
--   style option.</li>
--   </ol>
fxOption_choice10 :: FxOption -> OneOf2 FxAmericanExercise FxEuropeanExercise

-- | A set of parameters defining procedures associated with the exercise.
fxOption_exerciseProcedure :: FxOption -> Maybe ExerciseProcedure

-- | The currency amount that the option gives the right to sell.
fxOption_putCurrencyAmount :: FxOption -> NonNegativeMoney

-- | The currency amount that the option gives the right to buy.
fxOption_callCurrencyAmount :: FxOption -> NonNegativeMoney

-- | Indicates how the product was original sold as a Put or a Call.
fxOption_soldAs :: FxOption -> Maybe PutCallEnum

-- | Defines the option strike price.
fxOption_strike :: FxOption -> FxStrikePrice

-- | An optional element used for FX forwards and certain types of FX OTC
--   options. For deals consumated in the FX Forwards Market, this
--   represents the current market rate for a particular currency pair. For
--   barrier and digital/binary options, it can be useful to include the
--   spot rate at the time the option was executed to make it easier to
--   know whether the option needs to move <a>up</a> or <a>down</a> to be
--   triggered.
fxOption_spotRate :: FxOption -> Maybe PositiveDecimal

-- | Describes additional features within the option.
fxOption_features :: FxOption -> Maybe FxOptionFeatures

-- | Premium amount or premium installment amount for an option.
fxOption_premium :: FxOption -> FxOptionPremium

-- | Specifies the currency and fixing details for cash settlement. This
--   optional element is produced only where it has been specified at
--   execution time that the option wlll be settled into a single cash
--   payment - for example, in the case of a non-deliverable option
--   (although note that an Fx option may be contractually cash settled,
--   without necessarily being non-deliverable).
fxOption_cashSettlement :: FxOption -> Maybe FxCashSettlement

-- | A type describing the features that may be present in an FX option.
data FxOptionFeatures
FxOptionFeatures :: OneOf2 (FxAsianFeature, [FxBarrierFeature]) [FxBarrierFeature] -> FxOptionFeatures

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>asian</li>
--   <li>barrier</li>
--   </ul>
--   
--   <ol>
--   <li>barrier</li>
--   </ol>
fxOptionFeatur_choice0 :: FxOptionFeatures -> OneOf2 (FxAsianFeature, [FxBarrierFeature]) [FxBarrierFeature]

-- | A type that contains full details of a predefined fixed payout which
--   may occur (or not) in a Barrier Option or Digital Option when a
--   trigger event occurs (or not).
data FxOptionPayout
FxOptionPayout :: Maybe ID -> Currency -> NonNegativeDecimal -> Maybe PayoutEnum -> Maybe SettlementInformation -> FxOptionPayout
fxOptionPayout_ID :: FxOptionPayout -> Maybe ID

-- | The currency in which an amount is denominated.
fxOptionPayout_currency :: FxOptionPayout -> Currency

-- | The non negative monetary quantity in currency units.
fxOptionPayout_amount :: FxOptionPayout -> NonNegativeDecimal

-- | The trigger event and payout may be asynchonous. A payout may become
--   due on the trigger event, or the payout may (by agreeement at
--   initiation) be deferred (for example) to the maturity date.
fxOptionPayout_payoutStyle :: FxOptionPayout -> Maybe PayoutEnum

-- | The information required to settle a currency payment that results
--   from a trade.
fxOptionPayout_settlementInformation :: FxOptionPayout -> Maybe SettlementInformation

-- | A type that specifies the premium exchanged for a single option trade
--   or option strategy.
data FxOptionPremium
FxOptionPremium :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe AdjustableOrRelativeDate -> Maybe NonNegativeMoney -> Maybe SettlementInformation -> Maybe PremiumQuote -> FxOptionPremium
fxOptionPremium_ID :: FxOptionPremium -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
fxOptionPremium_payerPartyReference :: FxOptionPremium -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
fxOptionPremium_payerAccountReference :: FxOptionPremium -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
fxOptionPremium_receiverPartyReference :: FxOptionPremium -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
fxOptionPremium_receiverAccountReference :: FxOptionPremium -> Maybe AccountReference

-- | The payment date, which can be expressed as either an adjustable or
--   relative date.
fxOptionPremium_paymentDate :: FxOptionPremium -> Maybe AdjustableOrRelativeDate

-- | Non negative payment amount.
fxOptionPremium_paymentAmount :: FxOptionPremium -> Maybe NonNegativeMoney

-- | The information required to settle a currency payment that results
--   from a trade.
fxOptionPremium_settlementInformation :: FxOptionPremium -> Maybe SettlementInformation

-- | This is the option premium as quoted. It is expected to be consistent
--   with the premiumAmount and is for information only.
fxOptionPremium_quote :: FxOptionPremium -> Maybe PremiumQuote

-- | A type defining either a spot or forward FX transactions.
data FxSingleLeg
FxSingleLeg :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Payment -> Payment -> Maybe DealtCurrencyEnum -> (Maybe (OneOf2 FxTenorPeriodEnum Period)) -> OneOf2 Date (Date, Date) -> ExchangeRate -> Maybe FxCashSettlement -> FxSingleLeg
fxSingleLeg_ID :: FxSingleLeg -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
fxSingleLeg_primaryAssetClass :: FxSingleLeg -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
fxSingleLeg_secondaryAssetClass :: FxSingleLeg -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
fxSingleLeg_productType :: FxSingleLeg -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
fxSingleLeg_productId :: FxSingleLeg -> [ProductId]

-- | This is the first of the two currency flows that define a single leg
--   of a standard foreign exchange transaction.
fxSingleLeg_exchangedCurrency1 :: FxSingleLeg -> Payment

-- | This is the second of the two currency flows that define a single leg
--   of a standard foreign exchange transaction.
fxSingleLeg_exchangedCurrency2 :: FxSingleLeg -> Payment

-- | Indicates which currency was dealt.
fxSingleLeg_dealtCurrency :: FxSingleLeg -> Maybe DealtCurrencyEnum

-- | Choice between:
--   
--   <ol>
--   <li>A tenor expressed with a standard business term (i.e. Spot,
--   TomorrowNext, etc.)</li>
--   <li>A tenor expressed as a period type and multiplier (e.g. 1D, 1Y,
--   etc.)</li>
--   </ol>
fxSingleLeg_choice7 :: FxSingleLeg -> (Maybe (OneOf2 FxTenorPeriodEnum Period))

-- | Choice between:
--   
--   <ol>
--   <li>The date on which both currencies traded will settle.</li>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The date on which the currency1 amount will be settled. To be used
--   in a split value date scenario.</li>
--   <li>The date on which the currency2 amount will be settled. To be used
--   in a split value date scenario.</li>
--   </ul>
fxSingleLeg_choice8 :: FxSingleLeg -> OneOf2 Date (Date, Date)

-- | The rate of exchange between the two currencies.
fxSingleLeg_exchangeRate :: FxSingleLeg -> ExchangeRate

-- | Used to describe a particular type of FX forward transaction that is
--   settled in a single currency (for example, a non-deliverable forward).
fxSingleLeg_nonDeliverableSettlement :: FxSingleLeg -> Maybe FxCashSettlement

-- | A type that describes the rate of exchange at which the option has
--   been struck.
data FxStrikePrice
FxStrikePrice :: Maybe PositiveDecimal -> Maybe StrikeQuoteBasisEnum -> FxStrikePrice

-- | The rate of exchange between the two currencies of the leg of a deal.
fxStrikePrice_rate :: FxStrikePrice -> Maybe PositiveDecimal

-- | The method by which the strike rate is quoted.
fxStrikePrice_strikeQuoteBasis :: FxStrikePrice -> Maybe StrikeQuoteBasisEnum

-- | A type defining either a spot<i>forward or forward</i>forward FX swap
--   transaction.
data FxSwap
FxSwap :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> FxSwapLeg -> FxSwapLeg -> FxSwap
fxSwap_ID :: FxSwap -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
fxSwap_primaryAssetClass :: FxSwap -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
fxSwap_secondaryAssetClass :: FxSwap -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
fxSwap_productType :: FxSwap -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
fxSwap_productId :: FxSwap -> [ProductId]

-- | The FX transaction with the earliest value date.
fxSwap_nearLeg :: FxSwap -> FxSwapLeg

-- | The FX transaction with the latest value date.
fxSwap_farLeg :: FxSwap -> FxSwapLeg

-- | A type defining the details for one of the transactions in an FX swap.
data FxSwapLeg
FxSwapLeg :: Maybe ID -> Payment -> Payment -> Maybe DealtCurrencyEnum -> (Maybe (OneOf2 FxTenorPeriodEnum Period)) -> OneOf2 Date (Date, Date) -> ExchangeRate -> Maybe FxCashSettlement -> FxSwapLeg
fxSwapLeg_ID :: FxSwapLeg -> Maybe ID

-- | This is the first of the two currency flows that define a single leg
--   of a standard foreign exchange transaction.
fxSwapLeg_exchangedCurrency1 :: FxSwapLeg -> Payment

-- | This is the second of the two currency flows that define a single leg
--   of a standard foreign exchange transaction.
fxSwapLeg_exchangedCurrency2 :: FxSwapLeg -> Payment

-- | Indicates which currency was dealt.
fxSwapLeg_dealtCurrency :: FxSwapLeg -> Maybe DealtCurrencyEnum

-- | Choice between:
--   
--   <ol>
--   <li>A tenor expressed with a standard business term (i.e. Spot,
--   TomorrowNext, etc.)</li>
--   <li>A tenor expressed as a period type and multiplier (e.g. 1D, 1Y,
--   etc.)</li>
--   </ol>
fxSwapLeg_choice3 :: FxSwapLeg -> (Maybe (OneOf2 FxTenorPeriodEnum Period))

-- | Choice between:
--   
--   <ol>
--   <li>The date on which both currencies traded will settle.</li>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The date on which the currency1 amount will be settled. To be used
--   in a split value date scenario.</li>
--   <li>The date on which the currency2 amount will be settled. To be used
--   in a split value date scenario.</li>
--   </ul>
fxSwapLeg_choice4 :: FxSwapLeg -> OneOf2 Date (Date, Date)

-- | The rate of exchange between the two currencies.
fxSwapLeg_exchangeRate :: FxSwapLeg -> ExchangeRate

-- | Used to describe a particular type of FX forward transaction that is
--   settled in a single currency (for example, a non-deliverable forward).
fxSwapLeg_nonDeliverableSettlement :: FxSwapLeg -> Maybe FxCashSettlement

-- | Describes an FX touch condition.
data FxTouch
FxTouch :: Maybe TouchConditionEnum -> Maybe QuotedCurrencyPair -> Maybe PositiveDecimal -> Maybe PositiveDecimal -> [InformationSource] -> Maybe Date -> Maybe Date -> FxTouch

-- | The binary condition that applies to an American-style trigger. There
--   can only be two domain values for this element: <a>touch</a> or <a>no
--   touch</a>.
fxTouch_touchCondition :: FxTouch -> Maybe TouchConditionEnum

-- | Defines the two currencies for an FX trade and the quotation
--   relationship between the two currencies.
fxTouch_quotedCurrencyPair :: FxTouch -> Maybe QuotedCurrencyPair

-- | The market rate is observed relative to the trigger rate, and if it is
--   found to be on the predefined side of (above or below) the trigger
--   rate, a trigger event is deemed to have occurred.
fxTouch_triggerRate :: FxTouch -> Maybe PositiveDecimal

-- | An optional element used for FX forwards and certain types of FX OTC
--   options. For deals consumated in the FX Forwards Market, this
--   represents the current market rate for a particular currency pair. For
--   barrier and digital/binary options, it can be useful to include the
--   spot rate at the time the option was executed to make it easier to
--   know whether the option needs to move <a>up</a> or <a>down</a> to be
--   triggered.
fxTouch_spotRate :: FxTouch -> Maybe PositiveDecimal

-- | The information source where a published or displayed market rate will
--   be obtained, e.g. Telerate Page 3750.
fxTouch_informationSource :: FxTouch -> [InformationSource]

-- | The start of the period over which observations are made to determine
--   whether a trigger has occurred.
fxTouch_observationStartDate :: FxTouch -> Maybe Date

-- | The end of the period over which observations are made to determine
--   whether a trigger event has occurred.
fxTouch_observationEndDate :: FxTouch -> Maybe Date

-- | Describes an FX trigger condition.
data FxTrigger
FxTrigger :: Maybe TriggerConditionEnum -> Maybe QuotedCurrencyPair -> Maybe PositiveDecimal -> Maybe PositiveDecimal -> [InformationSource] -> FxTrigger

-- | The condition that applies to a European-style trigger. It determines
--   where the rate at expiry date and time at must be relative to the
--   triggerRate for the option to be exercisable. The allowed values are
--   <a>Above</a> and <a>Below</a>.
fxTrigger_triggerCondition :: FxTrigger -> Maybe TriggerConditionEnum

-- | Defines the two currencies for an FX trade and the quotation
--   relationship between the two currencies.
fxTrigger_quotedCurrencyPair :: FxTrigger -> Maybe QuotedCurrencyPair

-- | The market rate is observed relative to the trigger rate, and if it is
--   found to be on the predefined side of (above or below) the trigger
--   rate, a trigger event is deemed to have occurred.
fxTrigger_triggerRate :: FxTrigger -> Maybe PositiveDecimal

-- | An optional element used for FX forwards and certain types of FX OTC
--   options. For deals consumated in the FX Forwards Market, this
--   represents the current market rate for a particular currency pair. For
--   barrier and digital/binary options, it can be useful to include the
--   spot rate at the time the option was executed to make it easier to
--   know whether the option needs to move <a>up</a> or <a>down</a> to be
--   triggered.
fxTrigger_spotRate :: FxTrigger -> Maybe PositiveDecimal

-- | The information source where a published or displayed market rate will
--   be obtained, e.g. Telerate Page 3750.
fxTrigger_informationSource :: FxTrigger -> [InformationSource]
data LowerBound
LowerBound :: (Maybe (OneOf2 PositiveDecimal PositiveDecimal)) -> LowerBound

-- | Choice between:
--   
--   <ol>
--   <li>minimumInclusive</li>
--   <li>minimumExclusive</li>
--   </ol>
lowerBound_choice0 :: LowerBound -> (Maybe (OneOf2 PositiveDecimal PositiveDecimal))

-- | References a Money instance.
data MoneyReference
MoneyReference :: Maybe IDREF -> MoneyReference
moneyRef_href :: MoneyReference -> Maybe IDREF
data ObservationSchedule
ObservationSchedule :: Maybe Date -> Maybe Date -> Maybe Frequency -> ObservationSchedule

-- | The start of the period over which observations are made to determine
--   whether a condition has occurred.
observSched_startDate :: ObservationSchedule -> Maybe Date

-- | The end of the period over which observations are made to determine
--   whether a condition has occurred.
observSched_endDate :: ObservationSchedule -> Maybe Date

-- | Describes how often observations are made.
observSched_observationPeriodFrequency :: ObservationSchedule -> Maybe Frequency

-- | A type that describes the option premium as quoted.
data PremiumQuote
PremiumQuote :: Maybe Decimal -> Maybe PremiumQuoteBasisEnum -> PremiumQuote

-- | The value of the premium quote. In general this will be either a
--   percentage or an explicit amount.
premiumQuote_value :: PremiumQuote -> Maybe Decimal

-- | The method by which the option premium was quoted.
premiumQuote_quoteBasis :: PremiumQuote -> Maybe PremiumQuoteBasisEnum

-- | A class defining the content model for a term deposit product.
data TermDeposit
TermDeposit :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe Date -> Maybe Date -> (Maybe (OneOf2 FxTenorPeriodEnum Period)) -> Maybe PositiveMoney -> Maybe PositiveDecimal -> Maybe DayCountFraction -> Maybe TermDepositFeatures -> Maybe Money -> [Payment] -> TermDeposit
termDeposit_ID :: TermDeposit -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
termDeposit_primaryAssetClass :: TermDeposit -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
termDeposit_secondaryAssetClass :: TermDeposit -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
termDeposit_productType :: TermDeposit -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
termDeposit_productId :: TermDeposit -> [ProductId]

-- | A reference to the party responsible for making the payments defined
--   by this structure.
termDeposit_payerPartyReference :: TermDeposit -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
termDeposit_payerAccountReference :: TermDeposit -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
termDeposit_receiverPartyReference :: TermDeposit -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
termDeposit_receiverAccountReference :: TermDeposit -> Maybe AccountReference

-- | The start date of the calculation period.
termDeposit_startDate :: TermDeposit -> Maybe Date

-- | The end date of the calculation period. This date should already be
--   adjusted for any applicable business day convention.
termDeposit_maturityDate :: TermDeposit -> Maybe Date

-- | Choice between:
--   
--   <ol>
--   <li>A tenor expressed with a standard business term (i.e. Spot,
--   TomorrowNext, etc.)</li>
--   <li>A tenor expressed as a period type and multiplier (e.g. 1D, 1Y,
--   etc.)</li>
--   </ol>
termDeposit_choice10 :: TermDeposit -> (Maybe (OneOf2 FxTenorPeriodEnum Period))

-- | The principal amount of the trade.
termDeposit_principal :: TermDeposit -> Maybe PositiveMoney

-- | The calculation period fixed rate. A per annum rate, expressed as a
--   decimal. A fixed rate of 5% would be represented as 0.05.
termDeposit_fixedRate :: TermDeposit -> Maybe PositiveDecimal

-- | The day count fraction.
termDeposit_dayCountFraction :: TermDeposit -> Maybe DayCountFraction

-- | An optional container that hold additional features of the deposit
--   (e.g. Dual Currency feature).
termDeposit_features :: TermDeposit -> Maybe TermDepositFeatures

-- | The total interest of at maturity of the trade.
termDeposit_interest :: TermDeposit -> Maybe Money

-- | A known payment between two parties.
termDeposit_payment :: TermDeposit -> [Payment]
data TermDepositFeatures
TermDepositFeatures :: Maybe DualCurrencyFeature -> TermDepositFeatures
termDepositFeatur_dualCurrency :: TermDepositFeatures -> Maybe DualCurrencyFeature
data UpperBound
UpperBound :: (Maybe (OneOf2 PositiveDecimal PositiveDecimal)) -> UpperBound

-- | Choice between:
--   
--   <ol>
--   <li>maximumInclusive</li>
--   <li>maximumExclusive</li>
--   </ol>
upperBound_choice0 :: UpperBound -> (Maybe (OneOf2 PositiveDecimal PositiveDecimal))

-- | A simple FX spot or forward transaction definition.
elementFxSingleLeg :: XMLParser FxSingleLeg
elementToXMLFxSingleLeg :: FxSingleLeg -> [Content ()]

-- | An FX Swap transaction definition.
elementFxSwap :: XMLParser FxSwap
elementToXMLFxSwap :: FxSwap -> [Content ()]

-- | An FX option transaction definition.
elementFxOption :: XMLParser FxOption
elementToXMLFxOption :: FxOption -> [Content ()]

-- | An FX digital option transaction definition.
elementFxDigitalOption :: XMLParser FxDigitalOption
elementToXMLFxDigitalOption :: FxDigitalOption -> [Content ()]

-- | A term deposit product definition.
elementTermDeposit :: XMLParser TermDeposit
elementToXMLTermDeposit :: TermDeposit -> [Content ()]
instance Eq Inclusive
instance Show Inclusive
instance Eq Exclusive
instance Show Exclusive
instance Eq PointValue
instance Show PointValue
instance Eq CutNameAttributes
instance Show CutNameAttributes
instance Eq MoneyReference
instance Show MoneyReference
instance Eq UpperBound
instance Show UpperBound
instance Eq TermDepositFeatures
instance Show TermDepositFeatures
instance Eq TermDeposit
instance Show TermDeposit
instance Eq PremiumQuote
instance Show PremiumQuote
instance Eq ObservationSchedule
instance Show ObservationSchedule
instance Eq LowerBound
instance Show LowerBound
instance Eq FxTrigger
instance Show FxTrigger
instance Eq FxTouch
instance Show FxTouch
instance Eq FxSwapLeg
instance Show FxSwapLeg
instance Eq FxSwap
instance Show FxSwap
instance Eq FxStrikePrice
instance Show FxStrikePrice
instance Eq FxSingleLeg
instance Show FxSingleLeg
instance Eq FxOptionPremium
instance Show FxOptionPremium
instance Eq FxOptionPayout
instance Show FxOptionPayout
instance Eq FxOptionFeatures
instance Show FxOptionFeatures
instance Eq FxOption
instance Show FxOption
instance Eq FxMultipleExercise
instance Show FxMultipleExercise
instance Eq FxEuropeanExercise
instance Show FxEuropeanExercise
instance Eq FxDigitalOption
instance Show FxDigitalOption
instance Eq FxDigitalAmericanExercise
instance Show FxDigitalAmericanExercise
instance Eq FxBoundary
instance Show FxBoundary
instance Eq FxBarrierFeature
instance Show FxBarrierFeature
instance Eq FxAverageRateObservationSchedule
instance Show FxAverageRateObservationSchedule
instance Eq FxAverageRateObservation
instance Show FxAverageRateObservation
instance Eq FxAsianFeature
instance Show FxAsianFeature
instance Eq FxAmericanExercise
instance Show FxAmericanExercise
instance Eq ExchangeRate
instance Show ExchangeRate
instance Eq DualCurrencyStrikePrice
instance Show DualCurrencyStrikePrice
instance Eq DualCurrencyFeature
instance Show DualCurrencyFeature
instance Eq CutName
instance Show CutName
instance Eq CrossRate
instance Show CrossRate
instance SchemaType UpperBound
instance SchemaType TermDepositFeatures
instance Extension TermDeposit Product
instance SchemaType TermDeposit
instance SchemaType PremiumQuote
instance SchemaType ObservationSchedule
instance Extension MoneyReference Reference
instance SchemaType MoneyReference
instance SchemaType LowerBound
instance SchemaType FxTrigger
instance SchemaType FxTouch
instance Extension FxSwapLeg Leg
instance SchemaType FxSwapLeg
instance Extension FxSwap Product
instance SchemaType FxSwap
instance SchemaType FxStrikePrice
instance Extension FxSingleLeg Product
instance SchemaType FxSingleLeg
instance Extension FxOptionPremium PaymentBase
instance Extension FxOptionPremium PaymentBaseExtended
instance Extension FxOptionPremium NonNegativePayment
instance SchemaType FxOptionPremium
instance Extension FxOptionPayout MoneyBase
instance Extension FxOptionPayout NonNegativeMoney
instance SchemaType FxOptionPayout
instance SchemaType FxOptionFeatures
instance Extension FxOption Product
instance Extension FxOption Option
instance SchemaType FxOption
instance SchemaType FxMultipleExercise
instance Extension FxEuropeanExercise Exercise
instance SchemaType FxEuropeanExercise
instance Extension FxDigitalOption Product
instance Extension FxDigitalOption Option
instance SchemaType FxDigitalOption
instance Extension FxDigitalAmericanExercise Exercise
instance SchemaType FxDigitalAmericanExercise
instance SchemaType FxBoundary
instance SchemaType FxBarrierFeature
instance SchemaType FxAverageRateObservationSchedule
instance SchemaType FxAverageRateObservation
instance SchemaType FxAsianFeature
instance Extension FxAmericanExercise Exercise
instance Extension FxAmericanExercise FxDigitalAmericanExercise
instance SchemaType FxAmericanExercise
instance SchemaType ExchangeRate
instance SchemaType DualCurrencyStrikePrice
instance SchemaType DualCurrencyFeature
instance Extension CutName Scheme
instance SchemaType CutName
instance Extension CrossRate QuotedCurrencyPair
instance SchemaType CrossRate
instance SimpleType PointValue
instance SchemaType PointValue
instance Restricts PointValue Decimal

module Data.FpML.V53.Option.Bond

-- | A Bond Option
data BondOption
BondOption :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> OptionTypeEnum -> Premium -> Exercise -> Maybe ExerciseProcedure -> Maybe OptionFeature -> (Maybe (OneOf2 NotionalAmountReference Money)) -> Maybe PositiveDecimal -> Maybe Currency -> Maybe PositiveDecimal -> Maybe SettlementTypeEnum -> Maybe AdjustableOrRelativeDate -> (Maybe (OneOf2 Money Currency)) -> BondOptionStrike -> OneOf2 Bond ConvertibleBond -> BondOption
bondOption_ID :: BondOption -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
bondOption_primaryAssetClass :: BondOption -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
bondOption_secondaryAssetClass :: BondOption -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
bondOption_productType :: BondOption -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
bondOption_productId :: BondOption -> [ProductId]

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
bondOption_buyerPartyReference :: BondOption -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
bondOption_buyerAccountReference :: BondOption -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
bondOption_sellerPartyReference :: BondOption -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
bondOption_sellerAccountReference :: BondOption -> Maybe AccountReference

-- | The type of option transaction. From a usage standpoint, put<i>call is
--   the default option type, while payer</i>receiver indicator is used for
--   options index credit default swaps, consistently with the industry
--   practice. Straddle is used for the case of straddle strategy, that
--   combine a call and a put with the same strike.
bondOption_optionType :: BondOption -> OptionTypeEnum

-- | The option premium payable by the buyer to the seller.
bondOption_premium :: BondOption -> Premium

-- | An placeholder for the actual option exercise definitions.
bondOption_exercise :: BondOption -> Exercise

-- | A set of parameters defining procedures associated with the exercise.
bondOption_exerciseProcedure :: BondOption -> Maybe ExerciseProcedure

-- | An Option feature such as quanto, asian, barrier, knock.
bondOption_feature :: BondOption -> Maybe OptionFeature

-- | A choice between an explicit representation of the notional amount, or
--   a reference to a notional amount defined elsewhere in this document.
--   
--   Choice between:
--   
--   <ol>
--   <li>notionalReference</li>
--   <li>notionalAmount</li>
--   </ol>
bondOption_choice13 :: BondOption -> (Maybe (OneOf2 NotionalAmountReference Money))

-- | The number of units of underlyer per option comprised in the option
--   transaction.
bondOption_optionEntitlement :: BondOption -> Maybe PositiveDecimal

-- | TODO
bondOption_entitlementCurrency :: BondOption -> Maybe Currency

-- | The number of options comprised in the option transaction.
bondOption_numberOfOptions :: BondOption -> Maybe PositiveDecimal
bondOption_settlementType :: BondOption -> Maybe SettlementTypeEnum
bondOption_settlementDate :: BondOption -> Maybe AdjustableOrRelativeDate

-- | Choice between:
--   
--   <ol>
--   <li>Settlement Amount</li>
--   <li>Settlement Currency for use where the Settlement Amount cannot be
--   known in advance</li>
--   </ol>
bondOption_choice19 :: BondOption -> (Maybe (OneOf2 Money Currency))

-- | Strike of the the Bond Option.
bondOption_strike :: BondOption -> BondOptionStrike

-- | Choice between:
--   
--   <ol>
--   <li>Identifies the underlying asset when it is a series or a class of
--   bonds.</li>
--   <li>Identifies the underlying asset when it is a convertible
--   bond.</li>
--   </ol>
bondOption_choice21 :: BondOption -> OneOf2 Bond ConvertibleBond

-- | A complex type to specify the strike of a bond or convertible bond
--   option.
data BondOptionStrike
BondOptionStrike :: (Maybe (OneOf2 ReferenceSwapCurve OptionStrike)) -> BondOptionStrike

-- | Choice between:
--   
--   <ol>
--   <li>The strike of an option when expressed by reference to a swap
--   curve. (Typically the case for a convertible bond option.)</li>
--   <li>price</li>
--   </ol>
bondOptionStrike_choice0 :: BondOptionStrike -> (Maybe (OneOf2 ReferenceSwapCurve OptionStrike))

-- | A complex type to specify the amount to be paid by the buyer of the
--   option if the option is exercised prior to the Early Call Date
--   (Typically applicable to the convertible bond options).
data MakeWholeAmount
MakeWholeAmount :: FloatingRateIndex -> Maybe Period -> Maybe Decimal -> Maybe QuotationSideEnum -> Maybe InterpolationMethod -> Maybe IdentifiedDate -> MakeWholeAmount
makeWholeAmount_floatingRateIndex :: MakeWholeAmount -> FloatingRateIndex

-- | The ISDA Designated Maturity, i.e. the tenor of the floating rate.
makeWholeAmount_indexTenor :: MakeWholeAmount -> Maybe Period

-- | Spread in basis points over the floating rate index.
makeWholeAmount_spread :: MakeWholeAmount -> Maybe Decimal

-- | The side (bid<i>mid</i>ask) of the measure.
makeWholeAmount_side :: MakeWholeAmount -> Maybe QuotationSideEnum

-- | The type of interpolation method that the calculation agent reserves
--   the right to use.
makeWholeAmount_interpolationMethod :: MakeWholeAmount -> Maybe InterpolationMethod

-- | Date prior to which the option buyer will have to pay a Make Whole
--   Amount to the option seller if he/she exercises the option.
makeWholeAmount_earlyCallDate :: MakeWholeAmount -> Maybe IdentifiedDate

-- | A complex type used to specify the option and convertible bond option
--   strike when expressed in reference to a swap curve.
data ReferenceSwapCurve
ReferenceSwapCurve :: Maybe SwapCurveValuation -> Maybe MakeWholeAmount -> ReferenceSwapCurve
refSwapCurve_swapUnwindValue :: ReferenceSwapCurve -> Maybe SwapCurveValuation

-- | Amount to be paid by the buyer of the option if the option is
--   exercised prior to the Early Call Date. (The market practice in the
--   convertible bond option space being that the buyer should be penalized
--   if he/she exercises the option early on.)
refSwapCurve_makeWholeAmount :: ReferenceSwapCurve -> Maybe MakeWholeAmount

-- | A complex type to specify a valuation swap curve, which is used as
--   part of the strike construct for the bond and convertible bond
--   options.
data SwapCurveValuation
SwapCurveValuation :: FloatingRateIndex -> Maybe Period -> Maybe Decimal -> Maybe QuotationSideEnum -> SwapCurveValuation
swapCurveVal_floatingRateIndex :: SwapCurveValuation -> FloatingRateIndex

-- | The ISDA Designated Maturity, i.e. the tenor of the floating rate.
swapCurveVal_indexTenor :: SwapCurveValuation -> Maybe Period

-- | Spread in basis points over the floating rate index.
swapCurveVal_spread :: SwapCurveValuation -> Maybe Decimal

-- | The side (bid<i>mid</i>ask) of the measure.
swapCurveVal_side :: SwapCurveValuation -> Maybe QuotationSideEnum

-- | A component describing a Bond Option product.
elementBondOption :: XMLParser BondOption
elementToXMLBondOption :: BondOption -> [Content ()]
instance Eq SwapCurveValuation
instance Show SwapCurveValuation
instance Eq ReferenceSwapCurve
instance Show ReferenceSwapCurve
instance Eq MakeWholeAmount
instance Show MakeWholeAmount
instance Eq BondOptionStrike
instance Show BondOptionStrike
instance Eq BondOption
instance Show BondOption
instance SchemaType SwapCurveValuation
instance SchemaType ReferenceSwapCurve
instance Extension MakeWholeAmount SwapCurveValuation
instance SchemaType MakeWholeAmount
instance SchemaType BondOptionStrike
instance Extension BondOption Product
instance Extension BondOption Option
instance Extension BondOption OptionBase
instance Extension BondOption OptionBaseExtended
instance SchemaType BondOption

module Data.FpML.V53.Doc

-- | A type representing a value corresponding to an identifier for a
--   parameter describing a query portfolio.
newtype QueryParameterValue
QueryParameterValue :: XsdString -> QueryParameterValue
data Allocation
Allocation :: Maybe TradeIdentifier -> PartyReference -> Maybe AccountReference -> (Maybe (OneOf2 Decimal [Money])) -> Maybe Collateral -> Maybe Money -> Maybe Approvals -> Maybe Date -> [RelatedParty] -> Allocation

-- | Unique ID for the allocation.
allocation_tradeId :: Allocation -> Maybe TradeIdentifier

-- | Reference to a party.
allocation_partyReference :: Allocation -> PartyReference

-- | Reference to an account.
allocation_accountReference :: Allocation -> Maybe AccountReference

-- | Choice between:
--   
--   <ol>
--   <li>The fractional allocation (0.45 = 45%) of the notional and
--   <a>block</a> fees to this particular client subaccount.</li>
--   <li>The notional allocation (amount and currency) to this particular
--   client account.</li>
--   </ol>
allocation_choice3 :: Allocation -> (Maybe (OneOf2 Decimal [Money]))

-- | The sum that must be posted upfront to collateralize against
--   counterparty credit risk.
allocation_collateral :: Allocation -> Maybe Collateral

-- | Special credit fee assessed to certain institutions.
allocation_creditChargeAmount :: Allocation -> Maybe Money

-- | A container for approval states in the workflow.
allocation_approvals :: Allocation -> Maybe Approvals

-- | The date of the confirmation executed between the parties and intended
--   to govern the allocated trade between those parties.
allocation_masterConfirmationDate :: Allocation -> Maybe Date

-- | Specifies any relevant parties to the allocation which should be
--   referenced.
allocation_relatedParty :: Allocation -> [RelatedParty]
data Allocations
Allocations :: [Allocation] -> Allocations
allocations_allocation :: Allocations -> [Allocation]

-- | A specific approval state in the workflow.
data Approval
Approval :: Maybe NormalizedString -> Maybe NormalizedString -> Maybe NormalizedString -> Approval

-- | The type of approval (e.g. <a>Credit</a>).
approval_type :: Approval -> Maybe NormalizedString

-- | The current state of approval (.e.g preapproved, pending approval,
--   etc.)
approval_status :: Approval -> Maybe NormalizedString

-- | The full name or identifiying ID of the relevant approver.
approval_approver :: Approval -> Maybe NormalizedString
data Approvals
Approvals :: [Approval] -> Approvals
approvals_approval :: Approvals -> [Approval]

-- | A type used to record the differences between the current trade and
--   another indicated trade.
data BestFitTrade
BestFitTrade :: Maybe TradeIdentifier -> [TradeDifference] -> BestFitTrade

-- | The identifier for the trade compared against.
bestFitTrade_tradeIdentifier :: BestFitTrade -> Maybe TradeIdentifier

-- | An optional set of detailed difference records.
bestFitTrade_differences :: BestFitTrade -> [TradeDifference]

-- | A type for defining the obligations of the counterparty subject to
--   credit support requirements.
data Collateral
Collateral :: Maybe IndependentAmount -> Collateral

-- | Independent Amount is an amount that usually less creditworthy
--   counterparties are asked to provide. It can either be a fixed amount
--   or a percentage of the Transaction's value. The Independent Amount can
--   be: (i) transferred before any trading between the parties occurs (as
--   a deposit at a third party's account or with the counterparty) or (ii)
--   callable after trading has occurred (typically because a downgrade has
--   occurred). In situation (i), the Independent Amount is not included in
--   the calculation of Exposure, but in situation (ii), it is included in
--   the calculation of Exposure. Thus, for situation (ii), the Independent
--   Amount may be transferred along with any collateral call. Independent
--   Amount is a defined term in the ISDA Credit Support Annex. (<a>with
--   respect to a party, the amount specified as such for that party in
--   Paragraph 13; if no amount is specified, zero</a>).
collateral_independentAmount :: Collateral -> Maybe IndependentAmount

-- | A contact id identifier allocated by a party. FpML does not define the
--   domain values associated with this element.
data ContractId
ContractId :: Scheme -> ContractIdAttributes -> ContractId
data ContractIdAttributes
ContractIdAttributes :: AnyURI -> Maybe ID -> ContractIdAttributes
contrIdAttrib_contractIdScheme :: ContractIdAttributes -> AnyURI
contrIdAttrib_ID :: ContractIdAttributes -> Maybe ID

-- | A type defining a contract identifier issued by the indicated party.
data ContractIdentifier
ContractIdentifier :: Maybe ID -> Maybe PartyReference -> (Maybe (OneOf2 [ContractId] [VersionedContractId])) -> ContractIdentifier
contrIdent_ID :: ContractIdentifier -> Maybe ID

-- | A pointer style reference to a party identifier defined elsewhere in
--   the document. The party referenced has allocated the contract
--   identifier.
contrIdent_partyReference :: ContractIdentifier -> Maybe PartyReference

-- | Where the legal activity is to agree a contract of variation then the
--   business process should be to modify a contract. This is a contract in
--   its own right and not a version of a previous contract. Where the
--   business process is to replace and supersede a contract then you have
--   a new contract and a contract version should not be used.
--   
--   Choice between:
--   
--   <ol>
--   <li>A contract id which is not version aware.</li>
--   <li>A contract id which is version aware.</li>
--   </ol>
contrIdent_choice1 :: ContractIdentifier -> (Maybe (OneOf2 [ContractId] [VersionedContractId]))
data CreditDerivativesNotices
CreditDerivativesNotices :: Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> CreditDerivativesNotices

-- | This element corresponds to the Credit Event Notice Delivered Under
--   Old Transaction and Deemed Delivered Under New Transaction under the
--   EXHIBIT C to 2004 ISDA Novation Definitions.
creditDerivNotices_creditEvent :: CreditDerivativesNotices -> Maybe Boolean

-- | This element corresponds to the Notice of Publicly Available
--   Information Delivered Under Old Transaction and Deemed Delivered Under
--   New Transaction under the EXHIBIT C to 2004 ISDA Novation Definitions.
creditDerivNotices_publiclyAvailableInformation :: CreditDerivativesNotices -> Maybe Boolean

-- | This element corresponds to the Notice of Intended Physical Settlement
--   Delivered Under Old Transaction under the EXHIBIT C to 2004 ISDA
--   Novation Definitions.
creditDerivNotices_physicalSettlement :: CreditDerivativesNotices -> Maybe Boolean

-- | A type defining a content model that is backwards compatible with
--   older FpML releases and which can be used to contain sets of data
--   without expressing any processing intention.
data DataDocument
DataDocument :: XsdString -> Maybe PositiveInteger -> Maybe PositiveInteger -> [Validation] -> (Maybe (OneOf2 Boolean Boolean)) -> Maybe OnBehalfOf -> Maybe OriginatingEvent -> [Trade] -> [Party] -> [Account] -> DataDocument

-- | Indicate which version of the FpML Schema an FpML message adheres to.
dataDocument_fpmlVersion :: DataDocument -> XsdString

-- | This optional attribute can be supplied by a message creator in an
--   FpML instance to specify which build number of the schema was used to
--   define the message when it was generated.
dataDocument_expectedBuild :: DataDocument -> Maybe PositiveInteger

-- | The specific build number of this schema version. This attribute is
--   not included in an instance document. Instead, it is supplied by the
--   XML parser when the document is validated against the FpML schema and
--   indicates the build number of the schema file. Every time FpML
--   publishes a change to the schema, validation rules, or examples within
--   a version (e.g., version 4.2) the actual build number is incremented.
--   If no changes have been made between releases within a version (i.e.
--   from Trial Recommendation to Recommendation) the actual build number
--   stays the same.
dataDocument_actualBuild :: DataDocument -> Maybe PositiveInteger

-- | A list of validation sets the sender asserts the document is valid
--   with respect to.
dataDocument_validation :: DataDocument -> [Validation]

-- | Choice between:
--   
--   <ol>
--   <li>Indicates if this message corrects an earlier request.</li>
--   <li>Indicates if this message corrects an earlier request.</li>
--   </ol>
dataDocument_choice1 :: DataDocument -> (Maybe (OneOf2 Boolean Boolean))

-- | Indicates which party (and accounts) a trade is being processed for.
dataDocument_onBehalfOf :: DataDocument -> Maybe OnBehalfOf
dataDocument_originatingEvent :: DataDocument -> Maybe OriginatingEvent

-- | The root element in an FpML trade document.
dataDocument_trade :: DataDocument -> [Trade]
dataDocument_party :: DataDocument -> [Party]

-- | Optional account information used to precisely define the origination
--   and destination of financial instruments.
dataDocument_account :: DataDocument -> [Account]

-- | The abstract base type from which all FpML compliant messages and
--   documents must be derived.
data Document
Document_DataDocument :: DataDocument -> Document
Document_Message :: Message -> Document

-- | A type defining the trade execution date time and the source of it.
--   For use inside containing types which already have a Reference to a
--   Party that has assigned this trade execution date time.
data ExecutionDateTime
ExecutionDateTime :: DateTime -> ExecutionDateTimeAttributes -> ExecutionDateTime
data ExecutionDateTimeAttributes
ExecutionDateTimeAttributes :: Maybe AnyURI -> ExecutionDateTimeAttributes

-- | Identification of the source (e.g. clock id) generating the execution
--   date time.
executDateTimeAttrib_executionDateTimeScheme :: ExecutionDateTimeAttributes -> Maybe AnyURI
data FirstPeriodStartDate
FirstPeriodStartDate :: Date -> FirstPeriodStartDateAttributes -> FirstPeriodStartDate
data FirstPeriodStartDateAttributes
FirstPeriodStartDateAttributes :: IDREF -> FirstPeriodStartDateAttributes
firstPeriodStartDateAttrib_href :: FirstPeriodStartDateAttributes -> IDREF
data IndependentAmount
IndependentAmount :: Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> [PaymentDetail] -> IndependentAmount

-- | A reference to the party responsible for making the payments defined
--   by this structure.
indepAmount_payerPartyReference :: IndependentAmount -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
indepAmount_payerAccountReference :: IndependentAmount -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
indepAmount_receiverPartyReference :: IndependentAmount -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
indepAmount_receiverAccountReference :: IndependentAmount -> Maybe AccountReference

-- | A container element allowing a schedule of payments associated with
--   the Independent Amount.
indepAmount_paymentDetail :: IndependentAmount -> [PaymentDetail]

-- | The economics of a trade of a multiply traded instrument.
data InstrumentTradeDetails
InstrumentTradeDetails :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe Asset -> Maybe InstrumentTradeQuantity -> Maybe InstrumentTradePricing -> Maybe InstrumentTradePrincipal -> InstrumentTradeDetails
instrTradeDetails_ID :: InstrumentTradeDetails -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
instrTradeDetails_primaryAssetClass :: InstrumentTradeDetails -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
instrTradeDetails_secondaryAssetClass :: InstrumentTradeDetails -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
instrTradeDetails_productType :: InstrumentTradeDetails -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
instrTradeDetails_productId :: InstrumentTradeDetails -> [ProductId]

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
instrTradeDetails_buyerPartyReference :: InstrumentTradeDetails -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
instrTradeDetails_buyerAccountReference :: InstrumentTradeDetails -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
instrTradeDetails_sellerPartyReference :: InstrumentTradeDetails -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
instrTradeDetails_sellerAccountReference :: InstrumentTradeDetails -> Maybe AccountReference

-- | Define the underlying asset, either a listed security or other
--   instrument.
instrTradeDetails_underlyingAsset :: InstrumentTradeDetails -> Maybe Asset

-- | A description of how much of the instrument was traded.
instrTradeDetails_quantity :: InstrumentTradeDetails -> Maybe InstrumentTradeQuantity

-- | The price paid for the instrument.
instrTradeDetails_pricing :: InstrumentTradeDetails -> Maybe InstrumentTradePricing

-- | The value, in instrument currency, of the amount of the instrument
--   that was traded.
instrTradeDetails_principal :: InstrumentTradeDetails -> Maybe InstrumentTradePrincipal

-- | A structure describing the amount of an instrument that was traded.
data InstrumentTradeQuantity
InstrumentTradeQuantity :: (Maybe (OneOf2 Decimal Money)) -> InstrumentTradeQuantity

-- | Choice between:
--   
--   <ol>
--   <li>The (absolute) number of units of the underlying instrument that
--   were traded.</li>
--   <li>The monetary value of the security (eg. fixed income security)
--   that was traded).</li>
--   </ol>
instrTradeQuant_choice0 :: InstrumentTradeQuantity -> (Maybe (OneOf2 Decimal Money))

-- | A structure describing the price paid for the instrument.
data InstrumentTradePricing
InstrumentTradePricing :: [BasicQuotation] -> InstrumentTradePricing
instrTradePricing_quote :: InstrumentTradePricing -> [BasicQuotation]

-- | A structure describing the value in <a>native</a> currency of an
--   instrument that was traded.
data InstrumentTradePrincipal
InstrumentTradePrincipal :: Maybe NetAndGross -> InstrumentTradePrincipal

-- | The net and/or gross value of the amount traded in native currency.
instrTradePrinc_principalAmount :: InstrumentTradePrincipal -> Maybe NetAndGross

-- | The data type used for link identifiers.
data LinkId
LinkId :: Scheme -> LinkIdAttributes -> LinkId
data LinkIdAttributes
LinkIdAttributes :: Maybe ID -> AnyURI -> LinkIdAttributes
linkIdAttrib_ID :: LinkIdAttributes -> Maybe ID
linkIdAttrib_linkIdScheme :: LinkIdAttributes -> AnyURI

-- | A structure including a net and/or a gross amount and possibly fees
--   and commissions.
data NetAndGross
NetAndGross :: OneOf2 Decimal (Decimal, Maybe (Decimal)) -> NetAndGross

-- | Choice between:
--   
--   <ol>
--   <li>Value including fees and commissions.</li>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>Value excluding fees and commissions.</li>
--   <li>Value including fees and commissions.</li>
--   </ul>
netAndGross_choice0 :: NetAndGross -> OneOf2 Decimal (Decimal, Maybe (Decimal))

-- | A type to represent a portfolio name for a particular party.
data PartyPortfolioName
PartyPortfolioName :: Maybe ID -> Maybe PartyReference -> [PortfolioName] -> PartyPortfolioName
partyPortfName_ID :: PartyPortfolioName -> Maybe ID

-- | A pointer style reference to a party identifier defined elsewhere in
--   the document. The party referenced has allocated the trade identifier.
partyPortfName_partyReference :: PartyPortfolioName -> Maybe PartyReference
partyPortfName_portfolioName :: PartyPortfolioName -> [PortfolioName]

-- | A type defining one or more trade identifiers allocated to the trade
--   by a party. A link identifier allows the trade to be associated with
--   other related trades, e.g. trades forming part of a larger structured
--   transaction. It is expected that for external communication of trade
--   there will be only one tradeId sent in the document per party.
data PartyTradeIdentifier
PartyTradeIdentifier :: Maybe ID -> OneOf2 (IssuerId, TradeId) (PartyReference, Maybe (AccountReference), [OneOf2 TradeId VersionedTradeId]) -> [LinkId] -> [TradeIdentifier] -> Maybe TradeIdentifier -> Maybe TradeIdentifier -> PartyTradeIdentifier
partyTradeIdent_ID :: PartyTradeIdentifier -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>issuer</li>
--   <li>tradeId</li>
--   </ul>
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>Reference to a party.</li>
--   <li>Reference to an account.</li>
--   <li>unknown</li>
--   </ul>
partyTradeIdent_choice0 :: PartyTradeIdentifier -> OneOf2 (IssuerId, TradeId) (PartyReference, Maybe (AccountReference), [OneOf2 TradeId VersionedTradeId])

-- | A link identifier allowing the trade to be associated with other
--   related trades, e.g. the linkId may contain a tradeId for an
--   associated trade or several related trades may be given the same
--   linkId. FpML does not define the domain values associated with this
--   element. Note that the domain values for this element are not strictly
--   an enumerated list.
partyTradeIdent_linkId :: PartyTradeIdentifier -> [LinkId]

-- | The trade id of the allocated trade. This is used by the block trade
--   to reference the allocated trade.
partyTradeIdent_allocationTradeId :: PartyTradeIdentifier -> [TradeIdentifier]

-- | The trade id of the block trade. This is used by each one of the
--   allocated trades to reference the block trade. This element can also
--   represent the trade id of the parent trade for N-level allocations. In
--   the case, this element is only used to model N-level allocations in
--   which the trade acts as block and allocated trade at the same time.
--   This basically means the ability to allocate a block trade to multiple
--   allocation trades, and then allocate these in turn to other allocation
--   trades (and so on if desired).
partyTradeIdent_blockTradeId :: PartyTradeIdentifier -> Maybe TradeIdentifier

-- | The trade id of the trade upon which this was based, for example the
--   ID of the trade that was submitted for clearing if this is a cleared
--   trade, or of the original trade if this was novated or cancelled and
--   rebooked. The originatingEvent will explain why the trade was created.
partyTradeIdent_originatingTradeId :: PartyTradeIdentifier -> Maybe TradeIdentifier

-- | A type containing multiple partyTradeIdentifier.
data PartyTradeIdentifiers
PartyTradeIdentifiers :: [PartyTradeIdentifier] -> PartyTradeIdentifiers
partyTradeIdent_partyTradeIdentifier :: PartyTradeIdentifiers -> [PartyTradeIdentifier]

-- | A type defining additional information that may be recorded against a
--   trade.
data PartyTradeInformation
PartyTradeInformation :: PartyReference -> Maybe AccountReference -> [RelatedParty] -> Maybe ReportingRole -> [RelatedBusinessUnit] -> [RelatedPerson] -> Maybe Boolean -> [TradeCategory] -> Maybe ExecutionDateTime -> Maybe TradeProcessingTimestamps -> Maybe Boolean -> Maybe AllocationReportingStatus -> Maybe Boolean -> Maybe ClearingStatusValue -> Maybe CollateralizationType -> [ReportingRegime] -> (Maybe (OneOf2 Boolean EndUserExceptionDeclaration)) -> Maybe Boolean -> Maybe Boolean -> Maybe Boolean -> Maybe ExecutionType -> Maybe ExecutionVenueType -> Maybe ConfirmationMethod -> Maybe ConfirmationMethod -> PartyTradeInformation

-- | Reference to a party.
partyTradeInfo_partyReference :: PartyTradeInformation -> PartyReference

-- | Reference to an account.
partyTradeInfo_accountReference :: PartyTradeInformation -> Maybe AccountReference

-- | Identifies a related party performing a role within the transaction.
partyTradeInfo_relatedParty :: PartyTradeInformation -> [RelatedParty]

-- | Identifies the role of this party in reporting this trade (e.g.
--   originator, counterparty).
partyTradeInfo_reportingRole :: PartyTradeInformation -> Maybe ReportingRole

-- | Provides information about a unit<i>division</i>desk etc. that
--   executed or supports this trade
partyTradeInfo_relatedBusinessUnit :: PartyTradeInformation -> [RelatedBusinessUnit]

-- | Provides information about a person that executed or supports this
--   trade
partyTradeInfo_relatedPerson :: PartyTradeInformation -> [RelatedPerson]

-- | Specifies whether the trade used to hedge a risk for accounting
--   purposes for the specified party. (TODO: do we need to distinguish
--   between asset and liability hedges?)
partyTradeInfo_isAccountingHedge :: PartyTradeInformation -> Maybe Boolean

-- | Used to categorize trades into user-defined categories, such as house
--   trades vs. customer trades.
partyTradeInfo_category :: PartyTradeInformation -> [TradeCategory]

-- | Trade execution date time provided by a central execution facility.
partyTradeInfo_executionDateTime :: PartyTradeInformation -> Maybe ExecutionDateTime

-- | Allows timing information about a trade to be recorded.
partyTradeInfo_timestamps :: PartyTradeInformation -> Maybe TradeProcessingTimestamps

-- | Specifies whether the trade is anticipated to be allocated.
partyTradeInfo_intentToAllocate :: PartyTradeInformation -> Maybe Boolean

-- | Specifies whether the trade is anticipated to be allocated, has been
--   allocated, or will not be allocated.
partyTradeInfo_allocationStatus :: PartyTradeInformation -> Maybe AllocationReportingStatus

-- | Specifies whether the trade is anticipated to be cleared via a
--   derivative clearing organization
partyTradeInfo_intentToClear :: PartyTradeInformation -> Maybe Boolean

-- | Describes the status with respect to clearing (e.g. Submitted,
--   Pending, Cleared, RejectedForClearing, etc.)
partyTradeInfo_clearingStatus :: PartyTradeInformation -> Maybe ClearingStatusValue

-- | Specifies whether this party posts collateral. For Recordkeeping, the
--   collateralization type refers to collateral that is posted by this
--   firm, and One-Way is not meaningful. In other words, if the
--   collateralization type is Full, this trade is fully collateralized by
--   this party. For Transparency view, the options include Full, Partial,
--   Uncollateralized, and One-Way.
partyTradeInfo_collateralizationType :: PartyTradeInformation -> Maybe CollateralizationType

-- | Allows the organization to specify which if any relevant regulators or
--   other supervisory bodies this is relevant for, and what reporting
--   rules apply.
partyTradeInfo_reportingRegime :: PartyTradeInformation -> [ReportingRegime]

-- | Choice between:
--   
--   <ol>
--   <li>Specifies whether the trade is not obligated to be cleared via a
--   derivative clearing organization because the <a>End User Exception</a>
--   was invoked.</li>
--   <li>Claims an end user exception and provides supporting
--   evidence.</li>
--   </ol>
partyTradeInfo_choice16 :: PartyTradeInformation -> (Maybe (OneOf2 Boolean EndUserExceptionDeclaration))

-- | Indicates that the trade has price-affecting characteristics in
--   addition to the standard real-time reportable terms. The flag
--   indicates that the price for this trade is not to be construed as
--   being indicative of the market for standardised trades with otherwise
--   identical reportable terms.
partyTradeInfo_nonStandardTerms :: PartyTradeInformation -> Maybe Boolean

-- | Indicates that the price does not reflect the current market. For
--   example, in a credit trade where the two counterparties are not of
--   equal credit standing, there is no initial margin and one party pays
--   collateral to the other in the form of an add-on to the price (say a
--   price that would otherwise be 100 at the market is struck at 105 to
--   include the collateral, resulting in a very off-market looking price.)
partyTradeInfo_offMarketPrice :: PartyTradeInformation -> Maybe Boolean

-- | Specifies whether the sender of this trade considers it to be a large
--   notional trade or block trade for reporting purposes, and thus
--   eligible for delayed public reporting. Normally this will only be
--   applicable for off-facility trades.
partyTradeInfo_largeSizeTrade :: PartyTradeInformation -> Maybe Boolean

-- | Used to describe how the trade was executed, e.g. via voice or
--   electronically.
partyTradeInfo_executionType :: PartyTradeInformation -> Maybe ExecutionType

-- | Used to describe the type of venue where trade was executed, e.g via
--   an execution facility or privately.
partyTradeInfo_executionVenueType :: PartyTradeInformation -> Maybe ExecutionVenueType

-- | Used to describe how the trade was or will be verified, e.g via a
--   confirmation facility, via private electronic service, or via written
--   documentation. This affect the timing of real-time reporting
--   requirements. This field is provisional pending detailed confirmation
--   of the data requirements, and may not be included in subsequent
--   working drafts.
partyTradeInfo_verificationMethod :: PartyTradeInformation -> Maybe ConfirmationMethod

-- | Used to describe how the trade was confirmed, e.g via a confirmation
--   facility, via private electronic service, or via written
--   documentation. This affects the process flow for confirmation
--   messages. This field is provisional pending detailed confirmation of
--   the data requirements, and may not be included in subsequent working
--   drafts.
partyTradeInfo_confirmationMethod :: PartyTradeInformation -> Maybe ConfirmationMethod

-- | Code that describes what type of allocation applies to the trade.
--   Options include Unallocated, ToBeAllocated, Allocated.
data AllocationReportingStatus
AllocationReportingStatus :: Scheme -> AllocationReportingStatusAttributes -> AllocationReportingStatus
data AllocationReportingStatusAttributes
AllocationReportingStatusAttributes :: Maybe AnyURI -> AllocationReportingStatusAttributes
arsa_allocationReportingStatusScheme :: AllocationReportingStatusAttributes -> Maybe AnyURI

-- | The current status value of a clearing request.
data ClearingStatusValue
ClearingStatusValue :: Scheme -> ClearingStatusValueAttributes -> ClearingStatusValue
data ClearingStatusValueAttributes
ClearingStatusValueAttributes :: Maybe AnyURI -> ClearingStatusValueAttributes
clearStatusValueAttrib_clearingStatusScheme :: ClearingStatusValueAttributes -> Maybe AnyURI

-- | Code that describes what type of collateral is posted by a party to a
--   transaction. Options include Uncollateralized, Partial, Full, One-Way.
data CollateralizationType
CollateralizationType :: Scheme -> CollateralizationTypeAttributes -> CollateralizationType
data CollateralizationTypeAttributes
CollateralizationTypeAttributes :: Maybe AnyURI -> CollateralizationTypeAttributes
collatTypeAttrib_collateralTypeScheme :: CollateralizationTypeAttributes -> Maybe AnyURI

-- | Records supporting information justifying an end user exception under
--   17 CFR part 39.
data EndUserExceptionDeclaration
EndUserExceptionDeclaration :: [CreditDocument] -> [OrganizationCharacteristic] -> [TransactionCharacteristic] -> [SupervisorRegistration] -> EndUserExceptionDeclaration

-- | What arrangements will be made to provide credit? (e.g. CSA,
--   collateral pledge, guaranty, available resources, financing).
endUserExceptDeclar_creditDocument :: EndUserExceptionDeclaration -> [CreditDocument]

-- | Allows the organization to specify which categories or characteristics
--   apply to it for end-user exception determination. Examples include
--   <a>FinancialEntity</a>, <a>CaptiveFinanceUnit</a>,
--   <a>BoardOfDirectorsApproval</a>.
endUserExceptDeclar_organizationCharacteristic :: EndUserExceptionDeclaration -> [OrganizationCharacteristic]

-- | Allows the relevant transaction level categories or characteristics to
--   be recorded for end-user exception determination. Examples include
--   <a>BoardOfDirectorsApproval</a>, <a>HedgesCommercialRisk</a>.
endUserExceptDeclar_transactionCharacteristic :: EndUserExceptionDeclaration -> [TransactionCharacteristic]

-- | Allows the organization to specify which if any relevant regulators it
--   is registered with, and if so their identification number. For
--   example, it could specify that it is SEC registered and provide its
--   Central Index Key.
endUserExceptDeclar_supervisorRegistration :: EndUserExceptionDeclaration -> [SupervisorRegistration]

-- | A credit arrangement used in support of swaps trading.
data CreditDocument
CreditDocument :: Scheme -> CreditDocumentAttributes -> CreditDocument
data CreditDocumentAttributes
CreditDocumentAttributes :: Maybe AnyURI -> CreditDocumentAttributes
creditDocumAttrib_creditDocumentScheme :: CreditDocumentAttributes -> Maybe AnyURI

-- | A characteristic of an organization used in declaring an end-user
--   exception.
data OrganizationCharacteristic
OrganizationCharacteristic :: Scheme -> OrganizationCharacteristicAttributes -> OrganizationCharacteristic
data OrganizationCharacteristicAttributes
OrganizationCharacteristicAttributes :: Maybe AnyURI -> OrganizationCharacteristicAttributes
oca_organizationCharacteristicScheme :: OrganizationCharacteristicAttributes -> Maybe AnyURI

-- | A characteristic of a transaction used in declaring an end-user
--   exception.
data TransactionCharacteristic
TransactionCharacteristic :: Scheme -> TransactionCharacteristicAttributes -> TransactionCharacteristic
data TransactionCharacteristicAttributes
TransactionCharacteristicAttributes :: Maybe AnyURI -> TransactionCharacteristicAttributes
tca_transactionCharacteristicScheme :: TransactionCharacteristicAttributes -> Maybe AnyURI

-- | A value that explains the reason or purpose that information is being
--   reported. Examples might include RealTimePublic reporting,
--   PrimaryEconomicTerms reporting, Confirmation reporting, or Snapshot
--   reporting.
data ReportingPurpose
ReportingPurpose :: Scheme -> ReportingPurposeAttributes -> ReportingPurpose
data ReportingPurposeAttributes
ReportingPurposeAttributes :: Maybe AnyURI -> ReportingPurposeAttributes
reportPurposeAttrib_reportingPurposeScheme :: ReportingPurposeAttributes -> Maybe AnyURI

-- | Provides information about a regulator or other supervisory body that
--   an organization is registered with.
data SupervisorRegistration
SupervisorRegistration :: SupervisoryBody -> Maybe RegulatorId -> SupervisorRegistration

-- | The regulator or other supervisory body the organization is registered
--   with (e.g. SEC).
supervRegist_supervisoryBody :: SupervisorRegistration -> SupervisoryBody

-- | The ID assigned by the regulator (e.g. SEC's Central Index Key).
supervRegist_registrationNumber :: SupervisorRegistration -> Maybe RegulatorId

-- | Provides information about how the information in this message is
--   applicable to a regulatory reporting process.
data ReportingRegime
ReportingRegime :: OneOf2 (ReportingRegimeName, [SupervisorRegistration]) [SupervisorRegistration] -> Maybe ReportingRole -> [ReportingPurpose] -> Maybe Boolean -> ReportingRegime

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>Identifies the reporting regime under which this data is reported.
--   For example, Dodd-Frank, MiFID, HongKongOTCDRepository, ODRF</li>
--   <li>Identifies the specific regulator or other supervisory body for
--   which this data is produced. For example, CFTC, SEC, UKFSA, ODRF, SFC,
--   ESMA.</li>
--   </ul>
--   
--   <ol>
--   <li>Identifies the specific regulator or other supervisory body for
--   which this data is produced. For example, CFTC, SEC, UKFSA, ODRF, SFC,
--   ESMA.</li>
--   </ol>
reportRegime_choice0 :: ReportingRegime -> OneOf2 (ReportingRegimeName, [SupervisorRegistration]) [SupervisorRegistration]

-- | Identifies the role of this party in reporting this trade for this
--   regulator; roles could include ReportingParty and Voluntary reporting.
reportRegime_reportingRole :: ReportingRegime -> Maybe ReportingRole

-- | The reason this message is being sent, for example Snapshot, PET,
--   Confirmation, RealTimePublic.
reportRegime_reportingPurpose :: ReportingRegime -> [ReportingPurpose]

-- | Whether the particular trade type in question is required by this
--   regulator to be cleared.
reportRegime_mandatorilyClearable :: ReportingRegime -> Maybe Boolean

-- | An ID assigned by a regulator to an organization registered with it.
--   (NOTE: should this just by represented by an alternate party ID?)
data RegulatorId
RegulatorId :: Scheme -> RegulatorIdAttributes -> RegulatorId
data RegulatorIdAttributes
RegulatorIdAttributes :: Maybe AnyURI -> RegulatorIdAttributes
regulIdAttrib_regulatorIdScheme :: RegulatorIdAttributes -> Maybe AnyURI

-- | Allows timing information about when a trade was processed and
--   reported to be recorded.
data TradeProcessingTimestamps
TradeProcessingTimestamps :: Maybe DateTime -> Maybe DateTime -> Maybe DateTime -> Maybe DateTime -> Maybe DateTime -> Maybe DateTime -> Maybe DateTime -> Maybe DateTime -> Maybe DateTime -> Maybe DateTime -> Maybe DateTime -> Maybe DateTime -> Maybe DateTime -> Maybe DateTime -> Maybe DateTime -> [TradeTimestamp] -> TradeProcessingTimestamps

-- | When an order was first generated, as recorded for the first time when
--   it was first entered by a person or generated by a trading algorithm
--   (i.e., the first record of the order).
tradeProcesTimest_orderEntered :: TradeProcessingTimestamps -> Maybe DateTime

-- | The time when an order is submitted by a market participant to an
--   execution facility, as recorded based on the timestamp of the message
--   that was sent by the participant. If the participant records this time
--   (i.e. it is in the participant's party trade information), it will be
--   the time the message was sent. If the execution facility records this
--   time (i.e. it is in the facility's party trade information), it will
--   be the time the message was received.
tradeProcesTimest_orderSubmitted :: TradeProcessingTimestamps -> Maybe DateTime

-- | When the public report of this was created or received by this party.
--   If the participant records this time (i.e. it is in the participant's
--   party trade information), it will be the time the message was sent. If
--   the execution records this time (i.e. it is in the facility's party
--   trade information), it will be the time the message was received.
tradeProcesTimest_publiclyReported :: TradeProcessingTimestamps -> Maybe DateTime

-- | When the public report of this was most recently corrected or
--   corrections were sent or received by this party.
tradeProcesTimest_publicReportUpdated :: TradeProcessingTimestamps -> Maybe DateTime

-- | When the non-public report of this was created or received by this
--   party.
tradeProcesTimest_nonpubliclyReported :: TradeProcessingTimestamps -> Maybe DateTime

-- | When the non-public report of this was most recently corrected or
--   corrections were received by this party.
tradeProcesTimest_nonpublicReportUpdated :: TradeProcessingTimestamps -> Maybe DateTime

-- | When this trade was supplied to a confirmation service or counterparty
--   for confirmation.
tradeProcesTimest_submittedForConfirmation :: TradeProcessingTimestamps -> Maybe DateTime

-- | When the most recent correction to this trade was supplied to a
--   confirmation service or counterparty for confirmation.
tradeProcesTimest_updatedForConfirmation :: TradeProcessingTimestamps -> Maybe DateTime

-- | When this trade was confirmed.
tradeProcesTimest_confirmed :: TradeProcessingTimestamps -> Maybe DateTime

-- | When this trade was supplied to a clearing service for clearing.
tradeProcesTimest_submittedForClearing :: TradeProcessingTimestamps -> Maybe DateTime

-- | When the most recent correction to this trade was supplied to a
--   clearing service for clearing.
tradeProcesTimest_updatedForClearing :: TradeProcessingTimestamps -> Maybe DateTime

-- | When this trade was cleared.
tradeProcesTimest_cleared :: TradeProcessingTimestamps -> Maybe DateTime

-- | When allocations for this trade were submitted or received by this
--   party.
tradeProcesTimest_allocationsSubmitted :: TradeProcessingTimestamps -> Maybe DateTime

-- | When allocations for this trade were most recently corrected.
tradeProcesTimest_allocationsUpdated :: TradeProcessingTimestamps -> Maybe DateTime

-- | When allocations for this trade were completely processed.
tradeProcesTimest_allocationsCompleted :: TradeProcessingTimestamps -> Maybe DateTime

-- | Other timestamps for this trade. This is provisional in Recordkeeping
--   and Transparency view and may be reviewed in a subsequent draft.
tradeProcesTimest_timestamp :: TradeProcessingTimestamps -> [TradeTimestamp]

-- | A generic trade timestamp
data TradeTimestamp
TradeTimestamp :: Maybe TimestampTypeScheme -> Maybe DateTime -> TradeTimestamp
tradeTimest_type :: TradeTimestamp -> Maybe TimestampTypeScheme
tradeTimest_value :: TradeTimestamp -> Maybe DateTime

-- | The type or meaning of a timestamp.
data TimestampTypeScheme
TimestampTypeScheme :: Scheme -> TimestampTypeSchemeAttributes -> TimestampTypeScheme
data TimestampTypeSchemeAttributes
TimestampTypeSchemeAttributes :: Maybe AnyURI -> TimestampTypeSchemeAttributes
timestTypeSchemeAttrib_timestampScheme :: TimestampTypeSchemeAttributes -> Maybe AnyURI

-- | An identifier of an reporting regime or format used for regulatory
--   reporting, for example DoddFrankAct, MiFID, HongKongOTCDRepository,
--   etc.
data ReportingRegimeName
ReportingRegimeName :: Scheme -> ReportingRegimeNameAttributes -> ReportingRegimeName
data ReportingRegimeNameAttributes
ReportingRegimeNameAttributes :: Maybe AnyURI -> ReportingRegimeNameAttributes
reportRegimeNameAttrib_reportingRegimeNameScheme :: ReportingRegimeNameAttributes -> Maybe AnyURI

-- | An identifier of an organization that supervises or regulates trading
--   activity, e.g. CFTC, SEC, FSA, ODRF, etc.
data SupervisoryBody
SupervisoryBody :: Scheme -> SupervisoryBodyAttributes -> SupervisoryBody
data SupervisoryBodyAttributes
SupervisoryBodyAttributes :: Maybe AnyURI -> SupervisoryBodyAttributes
supervBodyAttrib_supervisoryBodyScheme :: SupervisoryBodyAttributes -> Maybe AnyURI

-- | A type used to represent the type of market where a trade can be
--   executed.
data ExecutionVenueType
ExecutionVenueType :: Scheme -> ExecutionVenueTypeAttributes -> ExecutionVenueType
data ExecutionVenueTypeAttributes
ExecutionVenueTypeAttributes :: Maybe AnyURI -> ExecutionVenueTypeAttributes
executVenueTypeAttrib_executionVenueTypeScheme :: ExecutionVenueTypeAttributes -> Maybe AnyURI

-- | A type used to represent the type of market where a trade can be
--   executed.
data ExecutionType
ExecutionType :: Scheme -> ExecutionTypeAttributes -> ExecutionType
data ExecutionTypeAttributes
ExecutionTypeAttributes :: Maybe AnyURI -> ExecutionTypeAttributes
executTypeAttrib_executionTypeScheme :: ExecutionTypeAttributes -> Maybe AnyURI

-- | A type used to represent the type of mechanism that can be used to
--   confirm a trade.
data ConfirmationMethod
ConfirmationMethod :: Scheme -> ConfirmationMethodAttributes -> ConfirmationMethod
data ConfirmationMethodAttributes
ConfirmationMethodAttributes :: Maybe AnyURI -> ConfirmationMethodAttributes
confirMethodAttrib_confirmationMethodScheme :: ConfirmationMethodAttributes -> Maybe AnyURI
data PaymentDetail
PaymentDetail :: Maybe ID -> Maybe AdjustableOrRelativeDate -> Maybe PaymentRule -> Maybe Money -> PaymentDetail
paymentDetail_ID :: PaymentDetail -> Maybe ID

-- | Payment date.
paymentDetail_paymentDate :: PaymentDetail -> Maybe AdjustableOrRelativeDate

-- | A type defining the calculation rule.
paymentDetail_paymentRule :: PaymentDetail -> Maybe PaymentRule

-- | A fixed payment amount.
paymentDetail_paymentAmount :: PaymentDetail -> Maybe Money

-- | The abstract base type from which all calculation rules of the
--   independent amount must be derived.
data PaymentRule
PaymentRule_PercentageRule :: PercentageRule -> PaymentRule

-- | A type defining a content model for a calculation rule defined as
--   percentage of the notional amount.
data PercentageRule
PercentageRule :: Maybe Decimal -> Maybe NotionalAmountReference -> PercentageRule

-- | A percentage of the notional amount.
percenRule_paymentPercent :: PercentageRule -> Maybe Decimal

-- | A reference to the notional amount.
percenRule_notionalAmountReference :: PercentageRule -> Maybe NotionalAmountReference

-- | A type representing an arbitary grouping of trade references.
data Portfolio
Portfolio :: Maybe ID -> Maybe PartyPortfolioName -> (Maybe (OneOf2 [TradeId] [PartyTradeIdentifier])) -> [Portfolio] -> Portfolio
portfolio_ID :: Portfolio -> Maybe ID

-- | The name of the portfolio together with the party that gave the name.
portfolio_partyPortfolioName :: Portfolio -> Maybe PartyPortfolioName

-- | Choice between:
--   
--   <ol>
--   <li>tradeId</li>
--   <li>partyTradeIdentifier</li>
--   </ol>
portfolio_choice1 :: Portfolio -> (Maybe (OneOf2 [TradeId] [PartyTradeIdentifier]))

-- | An arbitary grouping of trade references (and possibly other
--   portfolios).
portfolio :: Portfolio -> [Portfolio]

-- | The data type used for portfolio names.
data PortfolioName
PortfolioName :: Scheme -> PortfolioNameAttributes -> PortfolioName
data PortfolioNameAttributes
PortfolioNameAttributes :: Maybe ID -> Maybe AnyURI -> PortfolioNameAttributes
portfNameAttrib_ID :: PortfolioNameAttributes -> Maybe ID
portfNameAttrib_portfolioNameScheme :: PortfolioNameAttributes -> Maybe AnyURI

-- | A type representing criteria for defining a query portfolio. The
--   criteria are made up of a QueryParameterId, QueryParameterValue and
--   QueryParameterOperator.
data QueryParameter
QueryParameter :: Maybe QueryParameterId -> Maybe NormalizedString -> Maybe QueryParameterOperator -> QueryParameter
queryParameter_id :: QueryParameter -> Maybe QueryParameterId
queryParameter_value :: QueryParameter -> Maybe NormalizedString
queryParameter_operator :: QueryParameter -> Maybe QueryParameterOperator

-- | A type representing an identifier for a parameter describing a query
--   portfolio. An identifier can be anything from a product name like swap
--   to a termination date.
data QueryParameterId
QueryParameterId :: Scheme -> QueryParameterIdAttributes -> QueryParameterId
data QueryParameterIdAttributes
QueryParameterIdAttributes :: AnyURI -> Maybe ID -> QueryParameterIdAttributes
queryParamIdAttrib_queryParameterIdScheme :: QueryParameterIdAttributes -> AnyURI
queryParamIdAttrib_ID :: QueryParameterIdAttributes -> Maybe ID

-- | A type representing an operator describing the relationship of a value
--   to its corresponding identifier for a parameter describing a query
--   portfolio. Possible relationships include equals, not equals, less
--   than, greater than. Possible operators are listed in the
--   queryParameterOperatorScheme.
data QueryParameterOperator
QueryParameterOperator :: Scheme -> QueryParameterOperatorAttributes -> QueryParameterOperator
data QueryParameterOperatorAttributes
QueryParameterOperatorAttributes :: Maybe AnyURI -> Maybe ID -> QueryParameterOperatorAttributes
queryParamOperatAttrib_queryParameterOperatorScheme :: QueryParameterOperatorAttributes -> Maybe AnyURI
queryParamOperatAttrib_ID :: QueryParameterOperatorAttributes -> Maybe ID

-- | A type representing a portfolio obtained by querying the set of trades
--   held in a repository. It contains trades matching the intersection of
--   all criteria specified using one or more queryParameters or trades
--   matching the union of two or more child queryPortfolios.
data QueryPortfolio
QueryPortfolio :: Maybe ID -> Maybe PartyPortfolioName -> (Maybe (OneOf2 [TradeId] [PartyTradeIdentifier])) -> [Portfolio] -> [QueryParameter] -> QueryPortfolio
queryPortf_ID :: QueryPortfolio -> Maybe ID

-- | The name of the portfolio together with the party that gave the name.
queryPortf_partyPortfolioName :: QueryPortfolio -> Maybe PartyPortfolioName

-- | Choice between:
--   
--   <ol>
--   <li>tradeId</li>
--   <li>partyTradeIdentifier</li>
--   </ol>
queryPortf_choice1 :: QueryPortfolio -> (Maybe (OneOf2 [TradeId] [PartyTradeIdentifier]))

-- | An arbitary grouping of trade references (and possibly other
--   portfolios).
queryPortf_portfolio :: QueryPortfolio -> [Portfolio]
queryPortf_queryParameter :: QueryPortfolio -> [QueryParameter]

-- | A type containing a code representing the role of a party in a report,
--   e.g. the originator, the recipient, the counterparty, etc. This is
--   used to clarify which participant's information is being reported.
data ReportingRole
ReportingRole :: Scheme -> ReportingRoleAttributes -> ReportingRole
data ReportingRoleAttributes
ReportingRoleAttributes :: Maybe AnyURI -> Maybe ID -> ReportingRoleAttributes
reportRoleAttrib_reportingRoleScheme :: ReportingRoleAttributes -> Maybe AnyURI
reportRoleAttrib_ID :: ReportingRoleAttributes -> Maybe ID

-- | A type defining a group of products making up a single trade.
data Strategy
Strategy :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe ProductReference -> [Product] -> Strategy
strategy_ID :: Strategy -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
strategy_primaryAssetClass :: Strategy -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
strategy_secondaryAssetClass :: Strategy -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
strategy_productType :: Strategy -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
strategy_productId :: Strategy -> [ProductId]

-- | Indicates which product within a strategy represents the premium
--   payment.
strategy_premiumProductReference :: Strategy -> Maybe ProductReference

-- | An abstract element used as a place holder for the substituting
--   product elements.
strategy_product :: Strategy -> [Product]

-- | A type defining an FpML trade.
data Trade
Trade :: Maybe ID -> Maybe TradeHeader -> Maybe Product -> [Payment] -> [PartyReference] -> Maybe CalculationAgent -> Maybe BusinessCenter -> [PartyReference] -> [PartyReference] -> Maybe Collateral -> Maybe Documentation -> Maybe GoverningLaw -> Maybe Allocations -> Trade
trade_ID :: Trade -> Maybe ID

-- | The information on the trade which is not product specific, e.g. trade
--   date.
trade_header :: Trade -> Maybe TradeHeader

-- | An abstract element used as a place holder for the substituting
--   product elements.
trade_product :: Trade -> Maybe Product

-- | Other fees or additional payments associated with the trade, e.g.
--   broker commissions, where one or more of the parties involved are not
--   principal parties involved in the trade.
trade_otherPartyPayment :: Trade -> [Payment]

-- | Identifies that party (or parties) that brokered this trade.
trade_brokerPartyReference :: Trade -> [PartyReference]

-- | The ISDA calculation agent responsible for performing duties as
--   defined in the applicable product definitions.
trade_calculationAgent :: Trade -> Maybe CalculationAgent

-- | The city in which the office through which ISDA Calculation Agent is
--   acting for purposes of the transaction is located The short-form
--   confirm for a trade that is executed under a Sovereign or Asia Pacific
--   Master Confirmation Agreement ( MCA ), does not need to specify the
--   Calculation Agent. However, the confirm does need to specify the
--   Calculation Agent City. This is due to the fact that the MCA sets the
--   value for Calculation Agent but does not set the value for Calculation
--   Agent City.
trade_calculationAgentBusinessCenter :: Trade -> Maybe BusinessCenter

-- | The party referenced is the ISDA Determination Party that specified in
--   the related Confirmation as Determination Party.
trade_determiningParty :: Trade -> [PartyReference]

-- | The party referenced is the ISDA Hedging Party that specified in the
--   related Confirmation as Hedging, or if no Hedging Party is specified,
--   either party to the Transaction.
trade_hedgingParty :: Trade -> [PartyReference]

-- | Defines collateral obiligations of a Party
trade_collateral :: Trade -> Maybe Collateral

-- | Defines the definitions that govern the document and should include
--   the year and type of definitions referenced, along with any relevant
--   documentation (such as master agreement) and the date it was signed.
trade_documentation :: Trade -> Maybe Documentation

-- | Identification of the law governing the transaction.
trade_governingLaw :: Trade -> Maybe GoverningLaw

-- | <a>Short-form</a> representation of allocations in which the key block
--   economics are stated once within the trade structure, and the
--   allocation data is contained in this allocations structure.
trade_allocations :: Trade -> Maybe Allocations

-- | A scheme used to categorize positions.
data TradeCategory
TradeCategory :: Scheme -> TradeCategoryAttributes -> TradeCategory
data TradeCategoryAttributes
TradeCategoryAttributes :: Maybe AnyURI -> TradeCategoryAttributes
tradeCategAttrib_categoryScheme :: TradeCategoryAttributes -> Maybe AnyURI

-- | A type used to record the details of a difference between two business
--   objects/
data TradeDifference
TradeDifference :: Maybe DifferenceTypeEnum -> Maybe DifferenceSeverityEnum -> Maybe XsdString -> Maybe XsdString -> Maybe XsdString -> Maybe XsdString -> Maybe XsdString -> [XsdString] -> [XsdString] -> Maybe XsdString -> TradeDifference

-- | The type of difference that exists.
tradeDiffer_differenceType :: TradeDifference -> Maybe DifferenceTypeEnum

-- | An indication of the severity of the difference.
tradeDiffer_differenceSeverity :: TradeDifference -> Maybe DifferenceSeverityEnum

-- | The name of the element affected.
tradeDiffer_element :: TradeDifference -> Maybe XsdString

-- | XPath to the element in the base object.
tradeDiffer_basePath :: TradeDifference -> Maybe XsdString

-- | The value of the element in the base object.
tradeDiffer_baseValue :: TradeDifference -> Maybe XsdString

-- | XPath to the element in the other object.
tradeDiffer_otherPath :: TradeDifference -> Maybe XsdString

-- | Value of the element in the other trade.
tradeDiffer_otherValue :: TradeDifference -> Maybe XsdString

-- | Element(s) that are missing in the other trade.
tradeDiffer_missingElement :: TradeDifference -> [XsdString]

-- | Element(s) that are extraneous in the other object.
tradeDiffer_extraElement :: TradeDifference -> [XsdString]

-- | A human readable description of the problem.
tradeDiffer_message :: TradeDifference -> Maybe XsdString

-- | A type defining trade related information which is not product
--   specific.
data TradeHeader
TradeHeader :: [PartyTradeIdentifier] -> [PartyTradeInformation] -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> TradeHeader

-- | The trade reference identifier(s) allocated to the trade by the
--   parties involved.
tradeHeader_partyTradeIdentifier :: TradeHeader -> [PartyTradeIdentifier]

-- | Additional trade information that may be provided by each involved
--   party.
tradeHeader_partyTradeInformation :: TradeHeader -> [PartyTradeInformation]

-- | The trade date. This is the date the trade was originally executed. In
--   the case of a novation, the novated part of the trade should be
--   reported (by both the remaining party and the transferee) using a
--   trade date corresponding to the date the novation was agreed. The
--   remaining part of a trade should be reported (by both the transferor
--   and the remaining party) using a trade date corresponding to the
--   original execution date.
tradeHeader_tradeDate :: TradeHeader -> Maybe IdentifiedDate

-- | If the trade was cleared (novated) through a central counterparty
--   clearing service, this represents the date the trade was cleared
--   (transferred to the central counterparty).
tradeHeader_clearedDate :: TradeHeader -> Maybe IdentifiedDate

-- | A trade reference identifier allocated by a party. FpML does not
--   define the domain values associated with this element. Note that the
--   domain values for this element are not strictly an enumerated list.
data TradeId
TradeId :: Scheme -> TradeIdAttributes -> TradeId
data TradeIdAttributes
TradeIdAttributes :: Maybe AnyURI -> Maybe ID -> TradeIdAttributes
tradeIdAttrib_tradeIdScheme :: TradeIdAttributes -> Maybe AnyURI
tradeIdAttrib_ID :: TradeIdAttributes -> Maybe ID

-- | A type defining a trade identifier issued by the indicated party.
data TradeIdentifier
TradeIdentifier :: Maybe ID -> OneOf2 (IssuerId, TradeId) (PartyReference, Maybe (AccountReference), [OneOf2 TradeId VersionedTradeId]) -> TradeIdentifier
tradeIdent_ID :: TradeIdentifier -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>issuer</li>
--   <li>tradeId</li>
--   </ul>
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>Reference to a party.</li>
--   <li>Reference to an account.</li>
--   <li>unknown</li>
--   </ul>
tradeIdent_choice0 :: TradeIdentifier -> OneOf2 (IssuerId, TradeId) (PartyReference, Maybe (AccountReference), [OneOf2 TradeId VersionedTradeId])

-- | The data type used for issuer identifiers.
data IssuerId
IssuerId :: Scheme -> IssuerIdAttributes -> IssuerId
data IssuerIdAttributes
IssuerIdAttributes :: Maybe AnyURI -> IssuerIdAttributes
issuerIdAttrib_issuerIdScheme :: IssuerIdAttributes -> Maybe AnyURI
data Trader
Trader :: Scheme -> TraderAttributes -> Trader
data TraderAttributes
TraderAttributes :: Maybe AnyURI -> TraderAttributes
traderAttrib_traderScheme :: TraderAttributes -> Maybe AnyURI

-- | A reference identifying a rule within a validation scheme.
data Validation
Validation :: Scheme -> ValidationAttributes -> Validation
data ValidationAttributes
ValidationAttributes :: Maybe AnyURI -> ValidationAttributes
validAttrib_validationScheme :: ValidationAttributes -> Maybe AnyURI

-- | Contract Id with Version Support
data VersionedContractId
VersionedContractId :: Maybe ContractId -> Maybe NonNegativeInteger -> Maybe IdentifiedDate -> VersionedContractId
versiContrId_contractId :: VersionedContractId -> Maybe ContractId

-- | The version number
versiContrId_version :: VersionedContractId -> Maybe NonNegativeInteger

-- | Optionally it is possible to specify a version effective date when a
--   versionId is supplied.
versiContrId_effectiveDate :: VersionedContractId -> Maybe IdentifiedDate

-- | Trade Id with Version Support
data VersionedTradeId
VersionedTradeId :: Maybe TradeId -> Maybe NonNegativeInteger -> Maybe IdentifiedDate -> VersionedTradeId
versiTradeId_tradeId :: VersionedTradeId -> Maybe TradeId

-- | The version number
versiTradeId_version :: VersionedTradeId -> Maybe NonNegativeInteger

-- | Optionally it is possible to specify a version effective date when a
--   versionId is supplied.
versiTradeId_effectiveDate :: VersionedTradeId -> Maybe IdentifiedDate

-- | A type to hold trades of multiply-traded instruments. Typically this
--   will be used to represent the trade resulting from a
--   physically-settled OTC product where the underlying is a security, for
--   example the exercise of a physically-settled option.
elementInstrumentTradeDetails :: XMLParser InstrumentTradeDetails
elementToXMLInstrumentTradeDetails :: InstrumentTradeDetails -> [Content ()]

-- | A strategy product.
elementStrategy :: XMLParser Strategy
elementToXMLStrategy :: Strategy -> [Content ()]
instance Eq QueryParameterValue
instance Show QueryParameterValue
instance Eq Approval
instance Show Approval
instance Eq ContractIdAttributes
instance Show ContractIdAttributes
instance Eq CreditDerivativesNotices
instance Show CreditDerivativesNotices
instance Eq ExecutionDateTimeAttributes
instance Show ExecutionDateTimeAttributes
instance Eq FirstPeriodStartDateAttributes
instance Show FirstPeriodStartDateAttributes
instance Eq LinkIdAttributes
instance Show LinkIdAttributes
instance Eq NetAndGross
instance Show NetAndGross
instance Eq AllocationReportingStatusAttributes
instance Show AllocationReportingStatusAttributes
instance Eq ClearingStatusValueAttributes
instance Show ClearingStatusValueAttributes
instance Eq CollateralizationTypeAttributes
instance Show CollateralizationTypeAttributes
instance Eq CreditDocumentAttributes
instance Show CreditDocumentAttributes
instance Eq OrganizationCharacteristicAttributes
instance Show OrganizationCharacteristicAttributes
instance Eq TransactionCharacteristicAttributes
instance Show TransactionCharacteristicAttributes
instance Eq ReportingPurposeAttributes
instance Show ReportingPurposeAttributes
instance Eq RegulatorIdAttributes
instance Show RegulatorIdAttributes
instance Eq TimestampTypeSchemeAttributes
instance Show TimestampTypeSchemeAttributes
instance Eq ReportingRegimeNameAttributes
instance Show ReportingRegimeNameAttributes
instance Eq SupervisoryBodyAttributes
instance Show SupervisoryBodyAttributes
instance Eq ExecutionVenueTypeAttributes
instance Show ExecutionVenueTypeAttributes
instance Eq ExecutionTypeAttributes
instance Show ExecutionTypeAttributes
instance Eq ConfirmationMethodAttributes
instance Show ConfirmationMethodAttributes
instance Eq PortfolioNameAttributes
instance Show PortfolioNameAttributes
instance Eq QueryParameterIdAttributes
instance Show QueryParameterIdAttributes
instance Eq QueryParameterOperatorAttributes
instance Show QueryParameterOperatorAttributes
instance Eq ReportingRoleAttributes
instance Show ReportingRoleAttributes
instance Eq TradeCategoryAttributes
instance Show TradeCategoryAttributes
instance Eq TradeIdAttributes
instance Show TradeIdAttributes
instance Eq IssuerIdAttributes
instance Show IssuerIdAttributes
instance Eq TraderAttributes
instance Show TraderAttributes
instance Eq ValidationAttributes
instance Show ValidationAttributes
instance Eq VersionedTradeId
instance Show VersionedTradeId
instance Eq VersionedContractId
instance Show VersionedContractId
instance Eq Validation
instance Show Validation
instance Eq Trader
instance Show Trader
instance Eq IssuerId
instance Show IssuerId
instance Eq TradeIdentifier
instance Show TradeIdentifier
instance Eq TradeId
instance Show TradeId
instance Eq TradeHeader
instance Show TradeHeader
instance Eq TradeDifference
instance Show TradeDifference
instance Eq TradeCategory
instance Show TradeCategory
instance Eq Trade
instance Show Trade
instance Eq Strategy
instance Show Strategy
instance Eq ReportingRole
instance Show ReportingRole
instance Eq QueryPortfolio
instance Show QueryPortfolio
instance Eq QueryParameterOperator
instance Show QueryParameterOperator
instance Eq QueryParameterId
instance Show QueryParameterId
instance Eq QueryParameter
instance Show QueryParameter
instance Eq PortfolioName
instance Show PortfolioName
instance Eq Portfolio
instance Show Portfolio
instance Eq PercentageRule
instance Show PercentageRule
instance Eq PaymentRule
instance Show PaymentRule
instance Eq PaymentDetail
instance Show PaymentDetail
instance Eq ConfirmationMethod
instance Show ConfirmationMethod
instance Eq ExecutionType
instance Show ExecutionType
instance Eq ExecutionVenueType
instance Show ExecutionVenueType
instance Eq SupervisoryBody
instance Show SupervisoryBody
instance Eq ReportingRegimeName
instance Show ReportingRegimeName
instance Eq TimestampTypeScheme
instance Show TimestampTypeScheme
instance Eq TradeTimestamp
instance Show TradeTimestamp
instance Eq TradeProcessingTimestamps
instance Show TradeProcessingTimestamps
instance Eq RegulatorId
instance Show RegulatorId
instance Eq ReportingRegime
instance Show ReportingRegime
instance Eq SupervisorRegistration
instance Show SupervisorRegistration
instance Eq ReportingPurpose
instance Show ReportingPurpose
instance Eq TransactionCharacteristic
instance Show TransactionCharacteristic
instance Eq OrganizationCharacteristic
instance Show OrganizationCharacteristic
instance Eq CreditDocument
instance Show CreditDocument
instance Eq EndUserExceptionDeclaration
instance Show EndUserExceptionDeclaration
instance Eq CollateralizationType
instance Show CollateralizationType
instance Eq ClearingStatusValue
instance Show ClearingStatusValue
instance Eq AllocationReportingStatus
instance Show AllocationReportingStatus
instance Eq PartyTradeInformation
instance Show PartyTradeInformation
instance Eq PartyTradeIdentifiers
instance Show PartyTradeIdentifiers
instance Eq PartyTradeIdentifier
instance Show PartyTradeIdentifier
instance Eq PartyPortfolioName
instance Show PartyPortfolioName
instance Eq LinkId
instance Show LinkId
instance Eq InstrumentTradePrincipal
instance Show InstrumentTradePrincipal
instance Eq InstrumentTradePricing
instance Show InstrumentTradePricing
instance Eq InstrumentTradeQuantity
instance Show InstrumentTradeQuantity
instance Eq InstrumentTradeDetails
instance Show InstrumentTradeDetails
instance Eq IndependentAmount
instance Show IndependentAmount
instance Eq FirstPeriodStartDate
instance Show FirstPeriodStartDate
instance Eq ExecutionDateTime
instance Show ExecutionDateTime
instance Eq Document
instance Show Document
instance Eq DataDocument
instance Show DataDocument
instance Eq ContractIdentifier
instance Show ContractIdentifier
instance Eq ContractId
instance Show ContractId
instance Eq Collateral
instance Show Collateral
instance Eq BestFitTrade
instance Show BestFitTrade
instance Eq Approvals
instance Show Approvals
instance Eq Allocations
instance Show Allocations
instance Eq Allocation
instance Show Allocation
instance SchemaType VersionedTradeId
instance SchemaType VersionedContractId
instance Extension Validation Scheme
instance SchemaType Validation
instance Extension Trader Scheme
instance SchemaType Trader
instance Extension IssuerId Scheme
instance SchemaType IssuerId
instance SchemaType TradeIdentifier
instance Extension TradeId Scheme
instance SchemaType TradeId
instance SchemaType TradeHeader
instance SchemaType TradeDifference
instance Extension TradeCategory Scheme
instance SchemaType TradeCategory
instance SchemaType Trade
instance Extension Strategy Product
instance SchemaType Strategy
instance Extension ReportingRole Scheme
instance SchemaType ReportingRole
instance Extension QueryPortfolio Portfolio
instance SchemaType QueryPortfolio
instance Extension QueryParameterOperator Scheme
instance SchemaType QueryParameterOperator
instance Extension QueryParameterId Scheme
instance SchemaType QueryParameterId
instance SchemaType QueryParameter
instance Extension PortfolioName Scheme
instance SchemaType PortfolioName
instance SchemaType Portfolio
instance Extension PercentageRule PaymentRule
instance SchemaType PercentageRule
instance SchemaType PaymentRule
instance Extension PaymentDetail PaymentBase
instance SchemaType PaymentDetail
instance Extension ConfirmationMethod Scheme
instance SchemaType ConfirmationMethod
instance Extension ExecutionType Scheme
instance SchemaType ExecutionType
instance Extension ExecutionVenueType Scheme
instance SchemaType ExecutionVenueType
instance Extension SupervisoryBody Scheme
instance SchemaType SupervisoryBody
instance Extension ReportingRegimeName Scheme
instance SchemaType ReportingRegimeName
instance Extension TimestampTypeScheme Scheme
instance SchemaType TimestampTypeScheme
instance SchemaType TradeTimestamp
instance SchemaType TradeProcessingTimestamps
instance Extension RegulatorId Scheme
instance SchemaType RegulatorId
instance SchemaType ReportingRegime
instance SchemaType SupervisorRegistration
instance Extension ReportingPurpose Scheme
instance SchemaType ReportingPurpose
instance Extension TransactionCharacteristic Scheme
instance SchemaType TransactionCharacteristic
instance Extension OrganizationCharacteristic Scheme
instance SchemaType OrganizationCharacteristic
instance Extension CreditDocument Scheme
instance SchemaType CreditDocument
instance SchemaType EndUserExceptionDeclaration
instance Extension CollateralizationType Scheme
instance SchemaType CollateralizationType
instance Extension ClearingStatusValue Scheme
instance SchemaType ClearingStatusValue
instance Extension AllocationReportingStatus Scheme
instance SchemaType AllocationReportingStatus
instance SchemaType PartyTradeInformation
instance SchemaType PartyTradeIdentifiers
instance Extension PartyTradeIdentifier TradeIdentifier
instance SchemaType PartyTradeIdentifier
instance SchemaType PartyPortfolioName
instance SchemaType NetAndGross
instance Extension LinkId Scheme
instance SchemaType LinkId
instance SchemaType InstrumentTradePrincipal
instance SchemaType InstrumentTradePricing
instance SchemaType InstrumentTradeQuantity
instance Extension InstrumentTradeDetails Product
instance SchemaType InstrumentTradeDetails
instance SchemaType IndependentAmount
instance Extension FirstPeriodStartDate Date
instance SchemaType FirstPeriodStartDate
instance Extension ExecutionDateTime DateTime
instance SchemaType ExecutionDateTime
instance SchemaType Document
instance Extension DataDocument Document
instance SchemaType DataDocument
instance SchemaType CreditDerivativesNotices
instance SchemaType ContractIdentifier
instance Extension ContractId Scheme
instance SchemaType ContractId
instance SchemaType Collateral
instance SchemaType BestFitTrade
instance SchemaType Approvals
instance SchemaType Approval
instance SchemaType Allocations
instance SchemaType Allocation
instance SimpleType QueryParameterValue
instance SchemaType QueryParameterValue
instance Restricts QueryParameterValue XsdString

module Data.FpML.V53.Msg
data Acknowledgement
Acknowledgement :: XsdString -> Maybe PositiveInteger -> Maybe PositiveInteger -> Maybe ResponseMessageHeader -> [Validation] -> Maybe CorrelationId -> [CorrelationId] -> Maybe PositiveInteger -> [OnBehalfOf] -> Maybe UnprocessedElementWrapper -> [Party] -> [Account] -> Acknowledgement

-- | Indicate which version of the FpML Schema an FpML message adheres to.
acknow_fpmlVersion :: Acknowledgement -> XsdString

-- | This optional attribute can be supplied by a message creator in an
--   FpML instance to specify which build number of the schema was used to
--   define the message when it was generated.
acknow_expectedBuild :: Acknowledgement -> Maybe PositiveInteger

-- | The specific build number of this schema version. This attribute is
--   not included in an instance document. Instead, it is supplied by the
--   XML parser when the document is validated against the FpML schema and
--   indicates the build number of the schema file. Every time FpML
--   publishes a change to the schema, validation rules, or examples within
--   a version (e.g., version 4.2) the actual build number is incremented.
--   If no changes have been made between releases within a version (i.e.
--   from Trial Recommendation to Recommendation) the actual build number
--   stays the same.
acknow_actualBuild :: Acknowledgement -> Maybe PositiveInteger
acknow_header :: Acknowledgement -> Maybe ResponseMessageHeader

-- | A list of validation sets the sender asserts the document is valid
--   with respect to.
acknow_validation :: Acknowledgement -> [Validation]

-- | An optional identifier used to correlate between related processes
acknow_parentCorrelationId :: Acknowledgement -> Maybe CorrelationId

-- | A qualified identifier used to correlate between messages
acknow_correlationId :: Acknowledgement -> [CorrelationId]

-- | A numeric value that can be used to order messages with the same
--   correlation identifier from the same sender.
acknow_sequenceNumber :: Acknowledgement -> Maybe PositiveInteger

-- | Indicates which party (or parties) (and accounts) a trade or event is
--   being processed for. Normally there will only be a maximum of 2
--   parties, but in the case of a novation there could be a transferor,
--   transferee, remaining party, and other remaining party. Except for
--   this case, there should be no more than two onABehalfOf references in
--   a message.
acknow_onBehalfOf :: Acknowledgement -> [OnBehalfOf]
acknow_originalMessage :: Acknowledgement -> Maybe UnprocessedElementWrapper
acknow_party :: Acknowledgement -> [Party]

-- | Optional account information used to precisely define the origination
--   and destination of financial instruments.
acknow_account :: Acknowledgement -> [Account]

-- | Provides extra information not represented in the model that may be
--   useful in processing the message i.e. diagnosing the reason for
--   failure.
data AdditionalData
AdditionalData :: Maybe MimeType -> (Maybe (OneOf4 XsdString HexBinary Base64Binary [AnyElement])) -> AdditionalData

-- | Indicates the type of media used to provide the extra information.
--   mimeType is used to determine the software product(s) that can read
--   the content. MIME Types are described in RFC 2046.
addData_mimeType :: AdditionalData -> Maybe MimeType

-- | Choice between:
--   
--   <ol>
--   <li>Provides extra information as string. In case the extra
--   information is in XML format, a CDATA section must be placed around
--   the source message to prevent its interpretation as XML content.</li>
--   <li>Provides extra information as binary contents coded in
--   hexadecimal.</li>
--   <li>Provides extra information as binary contents coded in
--   base64.</li>
--   <li>Provides extra information as binary contents coded in
--   base64.</li>
--   </ol>
addData_choice1 :: AdditionalData -> (Maybe (OneOf4 XsdString HexBinary Base64Binary [AnyElement]))

-- | A type defining the content model for a request message that can be
--   subsequently corrected or retracted.
data CorrectableRequestMessage
CorrectableRequestMessage_CreditEventNotification :: CreditEventNotification -> CorrectableRequestMessage
CorrectableRequestMessage_NonpublicExecutionReport :: NonpublicExecutionReport -> CorrectableRequestMessage
CorrectableRequestMessage_RequestValuationReport :: RequestValuationReport -> CorrectableRequestMessage

-- | A type defining a correlation identifier and qualifying scheme
data CorrelationId
CorrelationId :: NormalizedString -> CorrelationIdAttributes -> CorrelationId
data CorrelationIdAttributes
CorrelationIdAttributes :: AnyURI -> CorrelationIdAttributes
correlIdAttrib_correlationIdScheme :: CorrelationIdAttributes -> AnyURI

-- | Identification of a business event, for example through its
--   correlation id or a business identifier.
data EventIdentifier
EventIdentifier :: (Maybe (OneOf2 ([CorrelationId], Maybe (PositiveInteger)) TradeIdentifier)) -> EventIdentifier

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>A qualified identifier used to correlate between messages</li>
--   <li>A numeric value that can be used to order messages with the same
--   correlation identifier from the same sender.</li>
--   </ul>
--   
--   <ol>
--   <li>tradeIdentifier</li>
--   </ol>
eventIdent_choice0 :: EventIdentifier -> (Maybe (OneOf2 ([CorrelationId], Maybe (PositiveInteger)) TradeIdentifier))

-- | A coding scheme used to describe the matching/confirmation status of a
--   trade, post-trade event, position, or cash flows.
data EventStatus
EventStatus :: Scheme -> EventStatusAttributes -> EventStatus
data EventStatusAttributes
EventStatusAttributes :: Maybe AnyURI -> EventStatusAttributes
eventStatusAttrib_eventStatusScheme :: EventStatusAttributes -> Maybe AnyURI

-- | A type used in event status enquiry messages which relates an event
--   identifier to its current status value.
data EventStatusItem
EventStatusItem :: Maybe EventIdentifier -> Maybe EventStatus -> EventStatusItem

-- | An instance of a unique event identifier.
eventStatusItem_eventIdentifier :: EventStatusItem -> Maybe EventIdentifier

-- | An event status value.
eventStatusItem_status :: EventStatusItem -> Maybe EventStatus

-- | A type defining the content model for a message normally generated in
--   response to a requestEventStatus request.
data EventStatusResponse
EventStatusResponse :: XsdString -> Maybe PositiveInteger -> Maybe PositiveInteger -> Maybe ResponseMessageHeader -> [Validation] -> Maybe CorrelationId -> [CorrelationId] -> Maybe PositiveInteger -> [OnBehalfOf] -> [EventStatusItem] -> [Party] -> [Account] -> EventStatusResponse

-- | Indicate which version of the FpML Schema an FpML message adheres to.
eventStatusRespon_fpmlVersion :: EventStatusResponse -> XsdString

-- | This optional attribute can be supplied by a message creator in an
--   FpML instance to specify which build number of the schema was used to
--   define the message when it was generated.
eventStatusRespon_expectedBuild :: EventStatusResponse -> Maybe PositiveInteger

-- | The specific build number of this schema version. This attribute is
--   not included in an instance document. Instead, it is supplied by the
--   XML parser when the document is validated against the FpML schema and
--   indicates the build number of the schema file. Every time FpML
--   publishes a change to the schema, validation rules, or examples within
--   a version (e.g., version 4.2) the actual build number is incremented.
--   If no changes have been made between releases within a version (i.e.
--   from Trial Recommendation to Recommendation) the actual build number
--   stays the same.
eventStatusRespon_actualBuild :: EventStatusResponse -> Maybe PositiveInteger
eventStatusRespon_header :: EventStatusResponse -> Maybe ResponseMessageHeader

-- | A list of validation sets the sender asserts the document is valid
--   with respect to.
eventStatusRespon_validation :: EventStatusResponse -> [Validation]

-- | An optional identifier used to correlate between related processes
eventStatusRespon_parentCorrelationId :: EventStatusResponse -> Maybe CorrelationId

-- | A qualified identifier used to correlate between messages
eventStatusRespon_correlationId :: EventStatusResponse -> [CorrelationId]

-- | A numeric value that can be used to order messages with the same
--   correlation identifier from the same sender.
eventStatusRespon_sequenceNumber :: EventStatusResponse -> Maybe PositiveInteger

-- | Indicates which party (or parties) (and accounts) a trade or event is
--   being processed for. Normally there will only be a maximum of 2
--   parties, but in the case of a novation there could be a transferor,
--   transferee, remaining party, and other remaining party. Except for
--   this case, there should be no more than two onABehalfOf references in
--   a message.
eventStatusRespon_onBehalfOf :: EventStatusResponse -> [OnBehalfOf]
eventStatusRespon_statusItem :: EventStatusResponse -> [EventStatusItem]
eventStatusRespon_party :: EventStatusResponse -> [Party]

-- | Optional account information used to precisely define the origination
--   and destination of financial instruments.
eventStatusRespon_account :: EventStatusResponse -> [Account]

-- | A type defining the basic content for a message sent to inform another
--   system that some exception has been detected.
data Exception
Exception :: XsdString -> Maybe PositiveInteger -> Maybe PositiveInteger -> Maybe ExceptionMessageHeader -> [Validation] -> Maybe CorrelationId -> [CorrelationId] -> Maybe PositiveInteger -> [Reason] -> Maybe AdditionalData -> Exception

-- | Indicate which version of the FpML Schema an FpML message adheres to.
exception_fpmlVersion :: Exception -> XsdString

-- | This optional attribute can be supplied by a message creator in an
--   FpML instance to specify which build number of the schema was used to
--   define the message when it was generated.
exception_expectedBuild :: Exception -> Maybe PositiveInteger

-- | The specific build number of this schema version. This attribute is
--   not included in an instance document. Instead, it is supplied by the
--   XML parser when the document is validated against the FpML schema and
--   indicates the build number of the schema file. Every time FpML
--   publishes a change to the schema, validation rules, or examples within
--   a version (e.g., version 4.2) the actual build number is incremented.
--   If no changes have been made between releases within a version (i.e.
--   from Trial Recommendation to Recommendation) the actual build number
--   stays the same.
exception_actualBuild :: Exception -> Maybe PositiveInteger
exception_header :: Exception -> Maybe ExceptionMessageHeader

-- | A list of validation sets the sender asserts the document is valid
--   with respect to.
exception_validation :: Exception -> [Validation]

-- | An optional identifier used to correlate between related processes
exception_parentCorrelationId :: Exception -> Maybe CorrelationId

-- | A qualified identifier used to correlate between messages
exception_correlationId :: Exception -> [CorrelationId]

-- | A numeric value that can be used to order messages with the same
--   correlation identifier from the same sender.
exception_sequenceNumber :: Exception -> Maybe PositiveInteger

-- | An instance of the Reason type used to record the nature of any errors
--   associated with a message.
exception_reason :: Exception -> [Reason]

-- | Any string of additional data that may help the message processor, for
--   example in a rejection message this might contain a code value or the
--   text of the original request (within a CDATA section).
exception_additionalData :: Exception -> Maybe AdditionalData

-- | A type defining the content model for an exception message header.
data ExceptionMessageHeader
ExceptionMessageHeader :: Maybe MessageId -> Maybe MessageId -> Maybe MessageAddress -> [MessageAddress] -> [MessageAddress] -> Maybe DateTime -> Maybe DateTime -> Maybe ImplementationSpecification -> [PartyMessageInformation] -> [SignatureType] -> ExceptionMessageHeader

-- | A unique identifier (within its coding scheme) assigned to the message
--   by its creating party.
exceptMessageHeader_messageId :: ExceptionMessageHeader -> Maybe MessageId

-- | A copy of the unique message identifier (within it own coding scheme)
--   to which this message is responding.
exceptMessageHeader_inReplyTo :: ExceptionMessageHeader -> Maybe MessageId

-- | The unique identifier (within its coding scheme) for the originator of
--   a message instance.
exceptMessageHeader_sentBy :: ExceptionMessageHeader -> Maybe MessageAddress

-- | A unique identifier (within its coding scheme) indicating an intended
--   recipent of a message.
exceptMessageHeader_sendTo :: ExceptionMessageHeader -> [MessageAddress]

-- | A unique identifier (within the specified coding scheme) giving the
--   details of some party to whom a copy of this message will be sent for
--   reference.
exceptMessageHeader_copyTo :: ExceptionMessageHeader -> [MessageAddress]

-- | The date and time (on the source system) when this message instance
--   was created.
exceptMessageHeader_creationTimestamp :: ExceptionMessageHeader -> Maybe DateTime

-- | The date and time (on the source system) when this message instance
--   will be considered expired.
exceptMessageHeader_expiryTimestamp :: ExceptionMessageHeader -> Maybe DateTime

-- | The version(s) of specifications that the sender asserts the message
--   was developed for.
exceptMessageHeader_implementationSpecification :: ExceptionMessageHeader -> Maybe ImplementationSpecification

-- | Additional message information that may be provided by each involved
--   party.
exceptMessageHeader_partyMessageInformation :: ExceptionMessageHeader -> [PartyMessageInformation]
exceptMessageHeader_signature :: ExceptionMessageHeader -> [SignatureType]

-- | A type defining the basic structure of all FpML messages which is
--   refined by its derived types.
data Message
Message_ResponseMessage :: ResponseMessage -> Message
Message_RequestMessage :: RequestMessage -> Message
Message_NotificationMessage :: NotificationMessage -> Message
Message_Exception :: Exception -> Message

-- | A type holding a structure that is unvalidated
data UnprocessedElementWrapper
UnprocessedElementWrapper :: AnyElement -> UnprocessedElementWrapper
unprocElementWrapper_any0 :: UnprocessedElementWrapper -> AnyElement

-- | The data type used for identifying a message address.
data MessageAddress
MessageAddress :: Scheme -> MessageAddressAttributes -> MessageAddress
data MessageAddressAttributes
MessageAddressAttributes :: Maybe AnyURI -> MessageAddressAttributes
messageAddressAttrib_messageAddressScheme :: MessageAddressAttributes -> Maybe AnyURI

-- | A type defining the content model for a generic message header that is
--   refined by its derived classes.
data MessageHeader
MessageHeader_ResponseMessageHeader :: ResponseMessageHeader -> MessageHeader
MessageHeader_RequestMessageHeader :: RequestMessageHeader -> MessageHeader
MessageHeader_NotificationMessageHeader :: NotificationMessageHeader -> MessageHeader
MessageHeader_ExceptionMessageHeader :: ExceptionMessageHeader -> MessageHeader

-- | The data type use for message identifiers.
data MessageId
MessageId :: Scheme -> MessageIdAttributes -> MessageId
data MessageIdAttributes
MessageIdAttributes :: AnyURI -> MessageIdAttributes
messageIdAttrib_messageIdScheme :: MessageIdAttributes -> AnyURI

-- | A type defining the content model for a request message that cannot be
--   subsequently corrected or retracted.
data NonCorrectableRequestMessage
NonCorrectableRequestMessage_VerificationStatusNotification :: VerificationStatusNotification -> NonCorrectableRequestMessage
NonCorrectableRequestMessage_RequestRetransmission :: RequestRetransmission -> NonCorrectableRequestMessage
NonCorrectableRequestMessage_RequestEventStatus :: RequestEventStatus -> NonCorrectableRequestMessage
NonCorrectableRequestMessage_NonpublicExecutionReportRetracted :: NonpublicExecutionReportRetracted -> NonCorrectableRequestMessage

-- | A type defining the basic content for a message sent to inform another
--   system that some 'business event' has occured. Notifications are not
--   expected to be replied to.
data NotificationMessage
NotificationMessage_ServiceNotification :: ServiceNotification -> NotificationMessage
NotificationMessage_ValuationReportRetracted :: ValuationReportRetracted -> NotificationMessage
NotificationMessage_ValuationReport :: ValuationReport -> NotificationMessage

-- | A type that refines the generic message header to match the
--   requirements of a NotificationMessage.
data NotificationMessageHeader
NotificationMessageHeader :: Maybe MessageId -> Maybe MessageId -> Maybe MessageAddress -> [MessageAddress] -> [MessageAddress] -> Maybe DateTime -> Maybe DateTime -> Maybe ImplementationSpecification -> [PartyMessageInformation] -> [SignatureType] -> NotificationMessageHeader

-- | A unique identifier (within its coding scheme) assigned to the message
--   by its creating party.
notifMessageHeader_messageId :: NotificationMessageHeader -> Maybe MessageId

-- | A copy of the unique message identifier (within it own coding scheme)
--   to which this message is responding.
notifMessageHeader_inReplyTo :: NotificationMessageHeader -> Maybe MessageId

-- | The unique identifier (within its coding scheme) for the originator of
--   a message instance.
notifMessageHeader_sentBy :: NotificationMessageHeader -> Maybe MessageAddress

-- | A unique identifier (within its coding scheme) indicating an intended
--   recipent of a message.
notifMessageHeader_sendTo :: NotificationMessageHeader -> [MessageAddress]

-- | A unique identifier (within the specified coding scheme) giving the
--   details of some party to whom a copy of this message will be sent for
--   reference.
notifMessageHeader_copyTo :: NotificationMessageHeader -> [MessageAddress]

-- | The date and time (on the source system) when this message instance
--   was created.
notifMessageHeader_creationTimestamp :: NotificationMessageHeader -> Maybe DateTime

-- | The date and time (on the source system) when this message instance
--   will be considered expired.
notifMessageHeader_expiryTimestamp :: NotificationMessageHeader -> Maybe DateTime

-- | The version(s) of specifications that the sender asserts the message
--   was developed for.
notifMessageHeader_implementationSpecification :: NotificationMessageHeader -> Maybe ImplementationSpecification

-- | Additional message information that may be provided by each involved
--   party.
notifMessageHeader_partyMessageInformation :: NotificationMessageHeader -> [PartyMessageInformation]
notifMessageHeader_signature :: NotificationMessageHeader -> [SignatureType]

-- | A version of a specification document used by the message generator to
--   format the document.
data ImplementationSpecification
ImplementationSpecification :: Maybe NormalizedString -> Maybe ImplementationSpecificationVersion -> Maybe Date -> ImplementationSpecification
implemSpecif_name :: ImplementationSpecification -> Maybe NormalizedString
implemSpecif_version :: ImplementationSpecification -> Maybe ImplementationSpecificationVersion
implemSpecif_date :: ImplementationSpecification -> Maybe Date
data ImplementationSpecificationVersion
ImplementationSpecificationVersion :: Scheme -> ImplementationSpecificationVersionAttributes -> ImplementationSpecificationVersion
data ImplementationSpecificationVersionAttributes
ImplementationSpecificationVersionAttributes :: Maybe AnyURI -> ImplementationSpecificationVersionAttributes
isva_implementationSpecificationVersionScheme :: ImplementationSpecificationVersionAttributes -> Maybe AnyURI

-- | A type defining additional information that may be recorded against a
--   message.
data PartyMessageInformation
PartyMessageInformation :: Maybe PartyReference -> PartyMessageInformation

-- | Identifies that party that has ownership of this information.
partyMessageInfo_partyReference :: PartyMessageInformation -> Maybe PartyReference

-- | A structure used to group together individual messages that can be
--   acted on at a group level.
data PortfolioReference
PortfolioReference :: Maybe PortfolioName -> Maybe PositiveInteger -> Maybe Boolean -> PortfolioReference

-- | An identifier that is unique for each portfolio-level request, and
--   which can be used to group together the individual messages in the
--   portfolio request.
portfRef_portfolioName :: PortfolioReference -> Maybe PortfolioName

-- | A numeric, sequentially ascending (i.e. gapless) value (starting at 1)
--   that can be used to identify and distinguish the individual
--   constituents of a portfolio request. A recipient should ensure that
--   all sequence numbers from 1 to the final sequence number (where
--   submissionsComplete is true) have arrived before completing the
--   portfolio request.
portfRef_sequenceNumber :: PortfolioReference -> Maybe PositiveInteger

-- | Indicates whether all individual requests have been submitted for this
--   portfolio request.
portfRef_submissionsComplete :: PortfolioReference -> Maybe Boolean

-- | A structure used to group together individual messages that can be
--   acted on at a group level.
data PortfolioConstituentReference
PortfolioConstituentReference :: Maybe PortfolioName -> Maybe PositiveInteger -> PortfolioConstituentReference

-- | An identifier that is unique for each portfolio-level request, and
--   which can be used to group together the individual messages in the
--   portfolio request.
portfConstitRef_portfolioName :: PortfolioConstituentReference -> Maybe PortfolioName

-- | A numeric, sequentially ascending (i.e. gapless) value (starting at 1)
--   that can be used to identify and distinguish the individual
--   constituents of a portfolio request. A recipient should ensure that
--   all sequence numbers from 1 to the final sequence number (where
--   submissionsComplete is true) have arrived before completing the
--   portfolio request.
portfConstitRef_sequenceNumber :: PortfolioConstituentReference -> Maybe PositiveInteger

-- | A structure used to identify a portfolio in a message.
data PortfolioReferenceBase
PortfolioReferenceBase :: Maybe PortfolioName -> PortfolioReferenceBase

-- | An identifier that is unique for each portfolio-level request, and
--   which can be used to group together the individual messages in the
--   portfolio request.
portfRefBase_portfolioName :: PortfolioReferenceBase -> Maybe PortfolioName

-- | Provides a lexical location (i.e. a line number and character for bad
--   XML) or an XPath location (i.e. place to identify the bad location for
--   valid XML).
data ProblemLocation
ProblemLocation :: NormalizedString -> ProblemLocationAttributes -> ProblemLocation
data ProblemLocationAttributes
ProblemLocationAttributes :: Maybe Token -> ProblemLocationAttributes

-- | The value of the locationType attribute defines which type of location
--   has been given. It may take the values <tt>lexical</tt> or
--   <tt>xpath</tt>.
problemLocatAttrib_locationType :: ProblemLocationAttributes -> Maybe Token

-- | A type defining a content model for describing the nature and possible
--   location of a error within a previous message.
data Reason
Reason :: Maybe ReasonCode -> Maybe ProblemLocation -> Maybe XsdString -> Maybe Validation -> [AdditionalData] -> Reason

-- | A machine interpretable error code.
reason_code :: Reason -> Maybe ReasonCode

-- | A value indicating the location of the problem within the subject
--   message.
reason_location :: Reason -> Maybe ProblemLocation

-- | Plain English text describing the associated error condition
reason_description :: Reason -> Maybe XsdString

-- | A reference identifying a rule within a validation scheme
reason_validationRuleId :: Reason -> Maybe Validation

-- | Any string of additional data that may help the message processor, for
--   example in a rejection message this might contain a code value or the
--   text of any one of the messages (within a CDATA section).
reason_additionalData :: Reason -> [AdditionalData]

-- | Defines a list of machine interpretable error codes.
data ReasonCode
ReasonCode :: Scheme -> ReasonCodeAttributes -> ReasonCode
data ReasonCodeAttributes
ReasonCodeAttributes :: Maybe AnyURI -> ReasonCodeAttributes
reasonCodeAttrib_reasonCodeScheme :: ReasonCodeAttributes -> Maybe AnyURI

-- | A type that allows the specific report and section to be identified.
data ReportIdentification
ReportIdentification :: Maybe ReportId -> Maybe PositiveInteger -> Maybe PositiveInteger -> Maybe Boolean -> ReportIdentification

-- | An identifier for the specific instance of this report.
reportIdent_reportId :: ReportIdentification -> Maybe ReportId

-- | A strictly ascending sequential (gapless) numeric value that can be
--   used to identify the section of a report.
reportIdent_sectionNumber :: ReportIdentification -> Maybe PositiveInteger

-- | A numeric value, optionally supplied by the sender, that can be used
--   to specify the number of sections constituting a report.
reportIdent_numberOfSections :: ReportIdentification -> Maybe PositiveInteger

-- | Indicates whether all sections have been sent for this report instance
--   ID.
reportIdent_submissionsComplete :: ReportIdentification -> Maybe Boolean

-- | A type that allows the specific report and section to be identified.
data ReportSectionIdentification
ReportSectionIdentification :: Maybe ReportId -> Maybe PositiveInteger -> ReportSectionIdentification

-- | An identifier for the specific instance of this report.
reportSectionIdent_reportId :: ReportSectionIdentification -> Maybe ReportId

-- | A strictly ascending sequential (gapless) numeric value that can be
--   used to identify the section of a report.
reportSectionIdent_sectionNumber :: ReportSectionIdentification -> Maybe PositiveInteger

-- | A type that can be used to hold an identifier for a report instance.
data ReportId
ReportId :: Scheme -> ReportIdAttributes -> ReportId
data ReportIdAttributes
ReportIdAttributes :: Maybe AnyURI -> ReportIdAttributes
reportIdAttrib_reportIdScheme :: ReportIdAttributes -> Maybe AnyURI

-- | A type defining the content model for a message allowing one party to
--   query the status of one event (trade or post-trade event) previously
--   sent to another party.
data RequestEventStatus
RequestEventStatus :: XsdString -> Maybe PositiveInteger -> Maybe PositiveInteger -> Maybe RequestMessageHeader -> [Validation] -> Maybe CorrelationId -> [CorrelationId] -> Maybe PositiveInteger -> [OnBehalfOf] -> Maybe BusinessProcess -> Maybe EventIdentifier -> [Party] -> [Account] -> RequestEventStatus

-- | Indicate which version of the FpML Schema an FpML message adheres to.
reqEventStatus_fpmlVersion :: RequestEventStatus -> XsdString

-- | This optional attribute can be supplied by a message creator in an
--   FpML instance to specify which build number of the schema was used to
--   define the message when it was generated.
reqEventStatus_expectedBuild :: RequestEventStatus -> Maybe PositiveInteger

-- | The specific build number of this schema version. This attribute is
--   not included in an instance document. Instead, it is supplied by the
--   XML parser when the document is validated against the FpML schema and
--   indicates the build number of the schema file. Every time FpML
--   publishes a change to the schema, validation rules, or examples within
--   a version (e.g., version 4.2) the actual build number is incremented.
--   If no changes have been made between releases within a version (i.e.
--   from Trial Recommendation to Recommendation) the actual build number
--   stays the same.
reqEventStatus_actualBuild :: RequestEventStatus -> Maybe PositiveInteger
reqEventStatus_header :: RequestEventStatus -> Maybe RequestMessageHeader

-- | A list of validation sets the sender asserts the document is valid
--   with respect to.
reqEventStatus_validation :: RequestEventStatus -> [Validation]

-- | An optional identifier used to correlate between related processes
reqEventStatus_parentCorrelationId :: RequestEventStatus -> Maybe CorrelationId

-- | A qualified identifier used to correlate between messages
reqEventStatus_correlationId :: RequestEventStatus -> [CorrelationId]

-- | A numeric value that can be used to order messages with the same
--   correlation identifier from the same sender.
reqEventStatus_sequenceNumber :: RequestEventStatus -> Maybe PositiveInteger

-- | Indicates which party (or parties) (and accounts) a trade or event is
--   being processed for. Normally there will only be a maximum of 2
--   parties, but in the case of a novation there could be a transferor,
--   transferee, remaining party, and other remaining party. Except for
--   this case, there should be no more than two onABehalfOf references in
--   a message.
reqEventStatus_onBehalfOf :: RequestEventStatus -> [OnBehalfOf]
reqEventStatus_businessProcess :: RequestEventStatus -> Maybe BusinessProcess
reqEventStatus_eventIdentifier :: RequestEventStatus -> Maybe EventIdentifier
reqEventStatus_party :: RequestEventStatus -> [Party]

-- | Optional account information used to precisely define the origination
--   and destination of financial instruments.
reqEventStatus_account :: RequestEventStatus -> [Account]

-- | A type that can be used to identify the type of business process in a
--   request. Examples include Allocation, Clearing, Confirmation, etc.
data BusinessProcess
BusinessProcess :: Scheme -> BusinessProcessAttributes -> BusinessProcess
data BusinessProcessAttributes
BusinessProcessAttributes :: Maybe AnyURI -> BusinessProcessAttributes
busProcessAttrib_businessProcessScheme :: BusinessProcessAttributes -> Maybe AnyURI

-- | A type defining the basic content of a message that requests the
--   receiver to perform some business operation determined by the message
--   type and its content.
data RequestMessage
RequestMessage_NonCorrectableRequestMessage :: NonCorrectableRequestMessage -> RequestMessage
RequestMessage_CorrectableRequestMessage :: CorrectableRequestMessage -> RequestMessage

-- | A type refining the generic message header content to make it specific
--   to request messages.
data RequestMessageHeader
RequestMessageHeader :: Maybe MessageId -> Maybe MessageAddress -> [MessageAddress] -> [MessageAddress] -> Maybe DateTime -> Maybe DateTime -> Maybe ImplementationSpecification -> [PartyMessageInformation] -> [SignatureType] -> RequestMessageHeader

-- | A unique identifier (within its coding scheme) assigned to the message
--   by its creating party.
reqMessageHeader_messageId :: RequestMessageHeader -> Maybe MessageId

-- | The unique identifier (within its coding scheme) for the originator of
--   a message instance.
reqMessageHeader_sentBy :: RequestMessageHeader -> Maybe MessageAddress

-- | A unique identifier (within its coding scheme) indicating an intended
--   recipent of a message.
reqMessageHeader_sendTo :: RequestMessageHeader -> [MessageAddress]

-- | A unique identifier (within the specified coding scheme) giving the
--   details of some party to whom a copy of this message will be sent for
--   reference.
reqMessageHeader_copyTo :: RequestMessageHeader -> [MessageAddress]

-- | The date and time (on the source system) when this message instance
--   was created.
reqMessageHeader_creationTimestamp :: RequestMessageHeader -> Maybe DateTime

-- | The date and time (on the source system) when this message instance
--   will be considered expired.
reqMessageHeader_expiryTimestamp :: RequestMessageHeader -> Maybe DateTime

-- | The version(s) of specifications that the sender asserts the message
--   was developed for.
reqMessageHeader_implementationSpecification :: RequestMessageHeader -> Maybe ImplementationSpecification

-- | Additional message information that may be provided by each involved
--   party.
reqMessageHeader_partyMessageInformation :: RequestMessageHeader -> [PartyMessageInformation]
reqMessageHeader_signature :: RequestMessageHeader -> [SignatureType]

-- | A message to request that a message be retransmitted. The original
--   message will typically be a component of a group of messages, such as
--   a portfolio or a report in multiple parts.
data RequestRetransmission
RequestRetransmission :: XsdString -> Maybe PositiveInteger -> Maybe PositiveInteger -> Maybe RequestMessageHeader -> [Validation] -> Maybe CorrelationId -> [CorrelationId] -> Maybe PositiveInteger -> [OnBehalfOf] -> (Maybe (OneOf2 PortfolioConstituentReference ReportSectionIdentification)) -> [Party] -> [Account] -> RequestRetransmission

-- | Indicate which version of the FpML Schema an FpML message adheres to.
reqRetran_fpmlVersion :: RequestRetransmission -> XsdString

-- | This optional attribute can be supplied by a message creator in an
--   FpML instance to specify which build number of the schema was used to
--   define the message when it was generated.
reqRetran_expectedBuild :: RequestRetransmission -> Maybe PositiveInteger

-- | The specific build number of this schema version. This attribute is
--   not included in an instance document. Instead, it is supplied by the
--   XML parser when the document is validated against the FpML schema and
--   indicates the build number of the schema file. Every time FpML
--   publishes a change to the schema, validation rules, or examples within
--   a version (e.g., version 4.2) the actual build number is incremented.
--   If no changes have been made between releases within a version (i.e.
--   from Trial Recommendation to Recommendation) the actual build number
--   stays the same.
reqRetran_actualBuild :: RequestRetransmission -> Maybe PositiveInteger
reqRetran_header :: RequestRetransmission -> Maybe RequestMessageHeader

-- | A list of validation sets the sender asserts the document is valid
--   with respect to.
reqRetran_validation :: RequestRetransmission -> [Validation]

-- | An optional identifier used to correlate between related processes
reqRetran_parentCorrelationId :: RequestRetransmission -> Maybe CorrelationId

-- | A qualified identifier used to correlate between messages
reqRetran_correlationId :: RequestRetransmission -> [CorrelationId]

-- | A numeric value that can be used to order messages with the same
--   correlation identifier from the same sender.
reqRetran_sequenceNumber :: RequestRetransmission -> Maybe PositiveInteger

-- | Indicates which party (or parties) (and accounts) a trade or event is
--   being processed for. Normally there will only be a maximum of 2
--   parties, but in the case of a novation there could be a transferor,
--   transferee, remaining party, and other remaining party. Except for
--   this case, there should be no more than two onABehalfOf references in
--   a message.
reqRetran_onBehalfOf :: RequestRetransmission -> [OnBehalfOf]

-- | Choice between:
--   
--   <ol>
--   <li>portfolioReference</li>
--   <li>reportIdentification</li>
--   </ol>
reqRetran_choice6 :: RequestRetransmission -> (Maybe (OneOf2 PortfolioConstituentReference ReportSectionIdentification))
reqRetran_party :: RequestRetransmission -> [Party]

-- | Optional account information used to precisely define the origination
--   and destination of financial instruments.
reqRetran_account :: RequestRetransmission -> [Account]

-- | A type refining the generic message content model to make it specific
--   to response messages.
data ResponseMessage
ResponseMessage_EventStatusResponse :: EventStatusResponse -> ResponseMessage
ResponseMessage_Acknowledgement :: Acknowledgement -> ResponseMessage

-- | A type refining the generic message header to make it specific to
--   response messages.
data ResponseMessageHeader
ResponseMessageHeader :: Maybe MessageId -> Maybe MessageId -> Maybe MessageAddress -> [MessageAddress] -> [MessageAddress] -> Maybe DateTime -> Maybe DateTime -> Maybe ImplementationSpecification -> [PartyMessageInformation] -> [SignatureType] -> ResponseMessageHeader

-- | A unique identifier (within its coding scheme) assigned to the message
--   by its creating party.
responMessageHeader_messageId :: ResponseMessageHeader -> Maybe MessageId

-- | A copy of the unique message identifier (within it own coding scheme)
--   to which this message is responding.
responMessageHeader_inReplyTo :: ResponseMessageHeader -> Maybe MessageId

-- | The unique identifier (within its coding scheme) for the originator of
--   a message instance.
responMessageHeader_sentBy :: ResponseMessageHeader -> Maybe MessageAddress

-- | A unique identifier (within its coding scheme) indicating an intended
--   recipent of a message.
responMessageHeader_sendTo :: ResponseMessageHeader -> [MessageAddress]

-- | A unique identifier (within the specified coding scheme) giving the
--   details of some party to whom a copy of this message will be sent for
--   reference.
responMessageHeader_copyTo :: ResponseMessageHeader -> [MessageAddress]

-- | The date and time (on the source system) when this message instance
--   was created.
responMessageHeader_creationTimestamp :: ResponseMessageHeader -> Maybe DateTime

-- | The date and time (on the source system) when this message instance
--   will be considered expired.
responMessageHeader_expiryTimestamp :: ResponseMessageHeader -> Maybe DateTime

-- | The version(s) of specifications that the sender asserts the message
--   was developed for.
responMessageHeader_implementationSpecification :: ResponseMessageHeader -> Maybe ImplementationSpecification

-- | Additional message information that may be provided by each involved
--   party.
responMessageHeader_partyMessageInformation :: ResponseMessageHeader -> [PartyMessageInformation]
responMessageHeader_signature :: ResponseMessageHeader -> [SignatureType]

-- | Event Status messages.
elementRequestEventStatus :: XMLParser RequestEventStatus
elementToXMLRequestEventStatus :: RequestEventStatus -> [Content ()]
elementRequestRetransmission :: XMLParser RequestRetransmission
elementToXMLRequestRetransmission :: RequestRetransmission -> [Content ()]

-- | A type defining the content model for a message that allows a service
--   to send a notification message to a user of the service.
data ServiceNotification
ServiceNotification :: XsdString -> Maybe PositiveInteger -> Maybe PositiveInteger -> Maybe NotificationMessageHeader -> [Validation] -> Maybe CorrelationId -> [CorrelationId] -> Maybe PositiveInteger -> [OnBehalfOf] -> Maybe NormalizedString -> (Maybe (OneOf3 ServiceStatus ServiceProcessingStatus ServiceAdvisory)) -> ServiceNotification

-- | Indicate which version of the FpML Schema an FpML message adheres to.
serviceNotif_fpmlVersion :: ServiceNotification -> XsdString

-- | This optional attribute can be supplied by a message creator in an
--   FpML instance to specify which build number of the schema was used to
--   define the message when it was generated.
serviceNotif_expectedBuild :: ServiceNotification -> Maybe PositiveInteger

-- | The specific build number of this schema version. This attribute is
--   not included in an instance document. Instead, it is supplied by the
--   XML parser when the document is validated against the FpML schema and
--   indicates the build number of the schema file. Every time FpML
--   publishes a change to the schema, validation rules, or examples within
--   a version (e.g., version 4.2) the actual build number is incremented.
--   If no changes have been made between releases within a version (i.e.
--   from Trial Recommendation to Recommendation) the actual build number
--   stays the same.
serviceNotif_actualBuild :: ServiceNotification -> Maybe PositiveInteger
serviceNotif_header :: ServiceNotification -> Maybe NotificationMessageHeader

-- | A list of validation sets the sender asserts the document is valid
--   with respect to.
serviceNotif_validation :: ServiceNotification -> [Validation]

-- | An optional identifier used to correlate between related processes
serviceNotif_parentCorrelationId :: ServiceNotification -> Maybe CorrelationId

-- | A qualified identifier used to correlate between messages
serviceNotif_correlationId :: ServiceNotification -> [CorrelationId]

-- | A numeric value that can be used to order messages with the same
--   correlation identifier from the same sender.
serviceNotif_sequenceNumber :: ServiceNotification -> Maybe PositiveInteger

-- | Indicates which party (or parties) (and accounts) a trade or event is
--   being processed for. Normally there will only be a maximum of 2
--   parties, but in the case of a novation there could be a transferor,
--   transferee, remaining party, and other remaining party. Except for
--   this case, there should be no more than two onABehalfOf references in
--   a message.
serviceNotif_onBehalfOf :: ServiceNotification -> [OnBehalfOf]

-- | The name of the service to which the message applies
serviceNotif_serviceName :: ServiceNotification -> Maybe NormalizedString

-- | Choice between:
--   
--   <ol>
--   <li>The current state of the service (e.g. Available,
--   Unavailable).</li>
--   <li>A description of the stage of processing of the service, for
--   example EndofDayProcessingCutoffOccurred, EndOfDayProcessingCompleted.
--   [TBD: could be combined with advisory]</li>
--   <li>A human-readable message providing information about the
--   service..</li>
--   </ol>
serviceNotif_choice7 :: ServiceNotification -> (Maybe (OneOf3 ServiceStatus ServiceProcessingStatus ServiceAdvisory))

-- | A type defining the content model for report on the status of the
--   processing by a service. In the future we may wish to provide some
--   kind of scope or other qualification for the event, e.g. the
--   currencies, products, or books to which it applies.
data ServiceProcessingStatus
ServiceProcessingStatus :: Maybe ServiceProcessingCycle -> Maybe ServiceProcessingStep -> Maybe ServiceProcessingEvent -> ServiceProcessingStatus

-- | The processing cycle or phase that this message describes. For
--   example, EndOfDay or Intraday.
serviceProcesStatus_cycle :: ServiceProcessingStatus -> Maybe ServiceProcessingCycle

-- | The stage within a processing cycle or phase that this message
--   describes. For example, Netting or Valuation.
serviceProcesStatus_step :: ServiceProcessingStatus -> Maybe ServiceProcessingStep

-- | The event that occurred within the cycle or step, for example
--   <a>Started</a> or <a>Completed</a>..
serviceProcesStatus_event :: ServiceProcessingStatus -> Maybe ServiceProcessingEvent

-- | A type that can be used to describe the availability or other state of
--   a service, e.g. Available, Unavaialble.
data ServiceStatus
ServiceStatus :: Scheme -> ServiceStatusAttributes -> ServiceStatus
data ServiceStatusAttributes
ServiceStatusAttributes :: Maybe AnyURI -> ServiceStatusAttributes
serviceStatusAttrib_serviceStatusScheme :: ServiceStatusAttributes -> Maybe AnyURI

-- | A type that can be used to describe the processing phase of a service.
--   For example, EndOfDay, Intraday.
data ServiceProcessingCycle
ServiceProcessingCycle :: Scheme -> ServiceProcessingCycleAttributes -> ServiceProcessingCycle
data ServiceProcessingCycleAttributes
ServiceProcessingCycleAttributes :: Maybe AnyURI -> ServiceProcessingCycleAttributes
serviceProcesCycleAttrib_serviceProcessingCycleScheme :: ServiceProcessingCycleAttributes -> Maybe AnyURI

-- | A type that can be used to describe what stage of processing a service
--   is in. For example, Netting or Valuation.
data ServiceProcessingStep
ServiceProcessingStep :: Scheme -> ServiceProcessingStepAttributes -> ServiceProcessingStep
data ServiceProcessingStepAttributes
ServiceProcessingStepAttributes :: Maybe AnyURI -> ServiceProcessingStepAttributes
serviceProcesStepAttrib_serviceProcessingStep :: ServiceProcessingStepAttributes -> Maybe AnyURI

-- | A type that can be used to describe a stage or step in processing
--   provided by a service, for example processing completed.
data ServiceProcessingEvent
ServiceProcessingEvent :: Scheme -> ServiceProcessingEventAttributes -> ServiceProcessingEvent
data ServiceProcessingEventAttributes
ServiceProcessingEventAttributes :: Maybe AnyURI -> ServiceProcessingEventAttributes
serviceProcesEventAttrib_serviceProcessingEventScheme :: ServiceProcessingEventAttributes -> Maybe AnyURI

-- | A type defining the content model for a human-readable notification to
--   the users of a service.
data ServiceAdvisory
ServiceAdvisory :: Maybe ServiceAdvisoryCategory -> Maybe XsdString -> Maybe DateTime -> Maybe DateTime -> ServiceAdvisory

-- | The category or type of the notification message, e.g. availability,
--   product coverage, rules, etc.
serviceAdvis_category :: ServiceAdvisory -> Maybe ServiceAdvisoryCategory

-- | A human-readable notification.
serviceAdvis_description :: ServiceAdvisory -> Maybe XsdString

-- | The time at which the information supplied by the advisory becomes
--   effective. For example, if the advisory advises of a newly planned
--   service outage, it will be the time the service outage begins.
serviceAdvis_effectiveFrom :: ServiceAdvisory -> Maybe DateTime

-- | The time at which the information supplied by the advisory becomes no
--   longer effective. For example, if the advisory advises of a newly
--   planned service outage, it will be the time the service outage ends.
serviceAdvis_effectiveTo :: ServiceAdvisory -> Maybe DateTime

-- | A type that can be used to describe the category of an advisory
--   message, e.g.. Availability, Rules, Products, etc., etc..
data ServiceAdvisoryCategory
ServiceAdvisoryCategory :: Scheme -> ServiceAdvisoryCategoryAttributes -> ServiceAdvisoryCategory
data ServiceAdvisoryCategoryAttributes
ServiceAdvisoryCategoryAttributes :: Maybe AnyURI -> ServiceAdvisoryCategoryAttributes
serviceAdvisCategAttrib_serviceAdvisoryCategoryScheme :: ServiceAdvisoryCategoryAttributes -> Maybe AnyURI
data VerificationStatusNotification
VerificationStatusNotification :: XsdString -> Maybe PositiveInteger -> Maybe PositiveInteger -> Maybe RequestMessageHeader -> [Validation] -> Maybe CorrelationId -> [CorrelationId] -> Maybe PositiveInteger -> [OnBehalfOf] -> VerificationStatus -> [Reason] -> PartyTradeIdentifier -> [Party] -> [Account] -> VerificationStatusNotification

-- | Indicate which version of the FpML Schema an FpML message adheres to.
verifStatusNotif_fpmlVersion :: VerificationStatusNotification -> XsdString

-- | This optional attribute can be supplied by a message creator in an
--   FpML instance to specify which build number of the schema was used to
--   define the message when it was generated.
verifStatusNotif_expectedBuild :: VerificationStatusNotification -> Maybe PositiveInteger

-- | The specific build number of this schema version. This attribute is
--   not included in an instance document. Instead, it is supplied by the
--   XML parser when the document is validated against the FpML schema and
--   indicates the build number of the schema file. Every time FpML
--   publishes a change to the schema, validation rules, or examples within
--   a version (e.g., version 4.2) the actual build number is incremented.
--   If no changes have been made between releases within a version (i.e.
--   from Trial Recommendation to Recommendation) the actual build number
--   stays the same.
verifStatusNotif_actualBuild :: VerificationStatusNotification -> Maybe PositiveInteger
verifStatusNotif_header :: VerificationStatusNotification -> Maybe RequestMessageHeader

-- | A list of validation sets the sender asserts the document is valid
--   with respect to.
verifStatusNotif_validation :: VerificationStatusNotification -> [Validation]

-- | An optional identifier used to correlate between related processes
verifStatusNotif_parentCorrelationId :: VerificationStatusNotification -> Maybe CorrelationId

-- | A qualified identifier used to correlate between messages
verifStatusNotif_correlationId :: VerificationStatusNotification -> [CorrelationId]

-- | A numeric value that can be used to order messages with the same
--   correlation identifier from the same sender.
verifStatusNotif_sequenceNumber :: VerificationStatusNotification -> Maybe PositiveInteger

-- | Indicates which party (or parties) (and accounts) a trade or event is
--   being processed for. Normally there will only be a maximum of 2
--   parties, but in the case of a novation there could be a transferor,
--   transferee, remaining party, and other remaining party. Except for
--   this case, there should be no more than two onABehalfOf references in
--   a message.
verifStatusNotif_onBehalfOf :: VerificationStatusNotification -> [OnBehalfOf]
verifStatusNotif_status :: VerificationStatusNotification -> VerificationStatus

-- | The reason for any dispute or change in verification status.
verifStatusNotif_reason :: VerificationStatusNotification -> [Reason]
verifStatusNotif_partyTradeIdentifier :: VerificationStatusNotification -> PartyTradeIdentifier
verifStatusNotif_party :: VerificationStatusNotification -> [Party]

-- | Optional account information used to precisely define the origination
--   and destination of financial instruments.
verifStatusNotif_account :: VerificationStatusNotification -> [Account]

-- | The verification status of the position as reported by the sender
--   (Verified, Disputed).
data VerificationStatus
VerificationStatus :: Scheme -> VerificationStatusAttributes -> VerificationStatus
data VerificationStatusAttributes
VerificationStatusAttributes :: Maybe AnyURI -> VerificationStatusAttributes
verifStatusAttrib_verificationStatusScheme :: VerificationStatusAttributes -> Maybe AnyURI
elementEventStatusResponse :: XMLParser EventStatusResponse
elementToXMLEventStatusResponse :: EventStatusResponse -> [Content ()]
elementEventStatusException :: XMLParser Exception
elementToXMLEventStatusException :: Exception -> [Content ()]

-- | The root element used for rejected message exceptions
elementMessageRejected :: XMLParser Exception
elementToXMLMessageRejected :: Exception -> [Content ()]
elementServiceNotification :: XMLParser ServiceNotification
elementToXMLServiceNotification :: ServiceNotification -> [Content ()]
elementServiceNotificationException :: XMLParser Exception
elementToXMLServiceNotificationException :: Exception -> [Content ()]
elementVerificationStatusNotification :: XMLParser VerificationStatusNotification
elementToXMLVerificationStatusNotification :: VerificationStatusNotification -> [Content ()]
elementVerificationStatusException :: XMLParser Exception
elementToXMLVerificationStatusException :: Exception -> [Content ()]
elementVerificationStatusAcknowledgement :: XMLParser Acknowledgement
elementToXMLVerificationStatusAcknowledgement :: Acknowledgement -> [Content ()]
instance Eq CorrelationIdAttributes
instance Show CorrelationIdAttributes
instance Eq EventStatusAttributes
instance Show EventStatusAttributes
instance Eq UnprocessedElementWrapper
instance Show UnprocessedElementWrapper
instance Eq MessageAddressAttributes
instance Show MessageAddressAttributes
instance Eq MessageIdAttributes
instance Show MessageIdAttributes
instance Eq ImplementationSpecificationVersionAttributes
instance Show ImplementationSpecificationVersionAttributes
instance Eq ProblemLocationAttributes
instance Show ProblemLocationAttributes
instance Eq ReasonCodeAttributes
instance Show ReasonCodeAttributes
instance Eq ReportIdAttributes
instance Show ReportIdAttributes
instance Eq BusinessProcessAttributes
instance Show BusinessProcessAttributes
instance Eq ServiceStatusAttributes
instance Show ServiceStatusAttributes
instance Eq ServiceProcessingCycleAttributes
instance Show ServiceProcessingCycleAttributes
instance Eq ServiceProcessingStepAttributes
instance Show ServiceProcessingStepAttributes
instance Eq ServiceProcessingEventAttributes
instance Show ServiceProcessingEventAttributes
instance Eq ServiceAdvisoryCategoryAttributes
instance Show ServiceAdvisoryCategoryAttributes
instance Eq VerificationStatusAttributes
instance Show VerificationStatusAttributes
instance Eq Acknowledgement
instance Show Acknowledgement
instance Eq VerificationStatus
instance Show VerificationStatus
instance Eq VerificationStatusNotification
instance Show VerificationStatusNotification
instance Eq ServiceAdvisoryCategory
instance Show ServiceAdvisoryCategory
instance Eq ServiceAdvisory
instance Show ServiceAdvisory
instance Eq ServiceProcessingEvent
instance Show ServiceProcessingEvent
instance Eq ServiceProcessingStep
instance Show ServiceProcessingStep
instance Eq ServiceProcessingCycle
instance Show ServiceProcessingCycle
instance Eq ServiceStatus
instance Show ServiceStatus
instance Eq ServiceProcessingStatus
instance Show ServiceProcessingStatus
instance Eq ServiceNotification
instance Show ServiceNotification
instance Eq ResponseMessageHeader
instance Show ResponseMessageHeader
instance Eq ResponseMessage
instance Show ResponseMessage
instance Eq RequestRetransmission
instance Show RequestRetransmission
instance Eq RequestMessageHeader
instance Show RequestMessageHeader
instance Eq RequestMessage
instance Show RequestMessage
instance Eq BusinessProcess
instance Show BusinessProcess
instance Eq RequestEventStatus
instance Show RequestEventStatus
instance Eq ReportId
instance Show ReportId
instance Eq ReportSectionIdentification
instance Show ReportSectionIdentification
instance Eq ReportIdentification
instance Show ReportIdentification
instance Eq ReasonCode
instance Show ReasonCode
instance Eq Reason
instance Show Reason
instance Eq ProblemLocation
instance Show ProblemLocation
instance Eq PortfolioReferenceBase
instance Show PortfolioReferenceBase
instance Eq PortfolioConstituentReference
instance Show PortfolioConstituentReference
instance Eq PortfolioReference
instance Show PortfolioReference
instance Eq PartyMessageInformation
instance Show PartyMessageInformation
instance Eq ImplementationSpecificationVersion
instance Show ImplementationSpecificationVersion
instance Eq ImplementationSpecification
instance Show ImplementationSpecification
instance Eq NotificationMessageHeader
instance Show NotificationMessageHeader
instance Eq NotificationMessage
instance Show NotificationMessage
instance Eq NonCorrectableRequestMessage
instance Show NonCorrectableRequestMessage
instance Eq MessageId
instance Show MessageId
instance Eq MessageHeader
instance Show MessageHeader
instance Eq MessageAddress
instance Show MessageAddress
instance Eq Message
instance Show Message
instance Eq ExceptionMessageHeader
instance Show ExceptionMessageHeader
instance Eq Exception
instance Show Exception
instance Eq EventStatusResponse
instance Show EventStatusResponse
instance Eq EventStatusItem
instance Show EventStatusItem
instance Eq EventStatus
instance Show EventStatus
instance Eq EventIdentifier
instance Show EventIdentifier
instance Eq CorrelationId
instance Show CorrelationId
instance Eq CorrectableRequestMessage
instance Show CorrectableRequestMessage
instance Eq AdditionalData
instance Show AdditionalData
instance Extension VerificationStatus Scheme
instance SchemaType VerificationStatus
instance Extension VerificationStatusNotification Document
instance Extension VerificationStatusNotification Message
instance Extension VerificationStatusNotification RequestMessage
instance Extension VerificationStatusNotification NonCorrectableRequestMessage
instance SchemaType VerificationStatusNotification
instance Extension ServiceAdvisoryCategory Scheme
instance SchemaType ServiceAdvisoryCategory
instance SchemaType ServiceAdvisory
instance Extension ServiceProcessingEvent Scheme
instance SchemaType ServiceProcessingEvent
instance Extension ServiceProcessingStep Scheme
instance SchemaType ServiceProcessingStep
instance Extension ServiceProcessingCycle Scheme
instance SchemaType ServiceProcessingCycle
instance Extension ServiceStatus Scheme
instance SchemaType ServiceStatus
instance SchemaType ServiceProcessingStatus
instance Extension ServiceNotification Document
instance Extension ServiceNotification Message
instance Extension ServiceNotification NotificationMessage
instance SchemaType ServiceNotification
instance Extension ResponseMessageHeader MessageHeader
instance SchemaType ResponseMessageHeader
instance Extension ResponseMessage Message
instance SchemaType ResponseMessage
instance Extension RequestRetransmission Document
instance Extension RequestRetransmission Message
instance Extension RequestRetransmission RequestMessage
instance Extension RequestRetransmission NonCorrectableRequestMessage
instance SchemaType RequestRetransmission
instance Extension RequestMessageHeader MessageHeader
instance SchemaType RequestMessageHeader
instance Extension RequestMessage Message
instance SchemaType RequestMessage
instance Extension BusinessProcess Scheme
instance SchemaType BusinessProcess
instance Extension RequestEventStatus Document
instance Extension RequestEventStatus Message
instance Extension RequestEventStatus RequestMessage
instance Extension RequestEventStatus NonCorrectableRequestMessage
instance SchemaType RequestEventStatus
instance Extension ReportId Scheme
instance SchemaType ReportId
instance SchemaType ReportSectionIdentification
instance Extension ReportIdentification ReportSectionIdentification
instance SchemaType ReportIdentification
instance Extension ReasonCode Scheme
instance SchemaType ReasonCode
instance SchemaType Reason
instance Extension ProblemLocation NormalizedString
instance SchemaType ProblemLocation
instance SchemaType PortfolioReferenceBase
instance Extension PortfolioConstituentReference PortfolioReferenceBase
instance SchemaType PortfolioConstituentReference
instance Extension PortfolioReference PortfolioReferenceBase
instance SchemaType PortfolioReference
instance SchemaType PartyMessageInformation
instance Extension ImplementationSpecificationVersion Scheme
instance SchemaType ImplementationSpecificationVersion
instance SchemaType ImplementationSpecification
instance Extension NotificationMessageHeader MessageHeader
instance SchemaType NotificationMessageHeader
instance Extension NotificationMessage Message
instance SchemaType NotificationMessage
instance Extension NonCorrectableRequestMessage Document
instance Extension NonCorrectableRequestMessage Message
instance Extension NonCorrectableRequestMessage RequestMessage
instance SchemaType NonCorrectableRequestMessage
instance Extension MessageId Scheme
instance SchemaType MessageId
instance SchemaType MessageHeader
instance Extension MessageAddress Scheme
instance SchemaType MessageAddress
instance SchemaType UnprocessedElementWrapper
instance Extension Message Document
instance SchemaType Message
instance Extension ExceptionMessageHeader MessageHeader
instance SchemaType ExceptionMessageHeader
instance Extension Exception Document
instance Extension Exception Message
instance SchemaType Exception
instance Extension EventStatusResponse Document
instance Extension EventStatusResponse Message
instance Extension EventStatusResponse ResponseMessage
instance SchemaType EventStatusResponse
instance SchemaType EventStatusItem
instance Extension EventStatus Scheme
instance SchemaType EventStatus
instance SchemaType EventIdentifier
instance Extension CorrelationId NormalizedString
instance SchemaType CorrelationId
instance Extension CorrectableRequestMessage Document
instance Extension CorrectableRequestMessage Message
instance Extension CorrectableRequestMessage RequestMessage
instance SchemaType CorrectableRequestMessage
instance SchemaType AdditionalData
instance Extension Acknowledgement Document
instance Extension Acknowledgement Message
instance Extension Acknowledgement ResponseMessage
instance SchemaType Acknowledgement

module Data.FpML.V53.Notification.CreditEvent
data AffectedTransactions
AffectedTransactions :: (Maybe (OneOf2 Trade PartyTradeIdentifiers)) -> AffectedTransactions

-- | Choice between:
--   
--   <ol>
--   <li>An element that allows the full details of the trade to be used as
--   a mechanism for identifying the trade for which the post-trade event
--   pertains</li>
--   <li>A container since an individual trade can be referenced by two or
--   more different partyTradeIdentifier elements - each allocated by a
--   different party.</li>
--   </ol>
affectTrans_choice0 :: AffectedTransactions -> (Maybe (OneOf2 Trade PartyTradeIdentifiers))
data BankruptcyEvent
BankruptcyEvent :: BankruptcyEvent
data CreditEvent
CreditEvent :: CreditEvent

-- | An event type that records the occurrence of a credit event notice.
data CreditEventNoticeDocument
CreditEventNoticeDocument :: Maybe AffectedTransactions -> Maybe LegalEntity -> Maybe CreditEvent -> [Resource] -> Maybe PartyReference -> Maybe PartyReference -> Maybe Date -> Maybe Date -> CreditEventNoticeDocument

-- | Trades affected by this event.
creditEventNoticeDocum_affectedTransactions :: CreditEventNoticeDocument -> Maybe AffectedTransactions
creditEventNoticeDocum_referenceEntity :: CreditEventNoticeDocument -> Maybe LegalEntity
creditEventNoticeDocum_creditEvent :: CreditEventNoticeDocument -> Maybe CreditEvent

-- | A public information source, e.g. a particular newspaper or electronic
--   news service, that may publish relevant information used in the
--   determination of whether or not a credit event has occurred.
creditEventNoticeDocum_publiclyAvailableInformation :: CreditEventNoticeDocument -> [Resource]
creditEventNoticeDocum_notifyingPartyReference :: CreditEventNoticeDocument -> Maybe PartyReference
creditEventNoticeDocum_notifiedPartyReference :: CreditEventNoticeDocument -> Maybe PartyReference
creditEventNoticeDocum_creditEventNoticeDate :: CreditEventNoticeDocument -> Maybe Date
creditEventNoticeDocum_creditEventDate :: CreditEventNoticeDocument -> Maybe Date

-- | A message type defining the ISDA defined Credit Event Notice. ISDA
--   defines it as an irrevocable notice from a Notifying Party to the
--   other party that describes a Credit Event that occurred. A Credit
--   Event Notice must contain detail of the facts relevant to the
--   determination that a Credit Event has occurred.
data CreditEventNotification
CreditEventNotification :: XsdString -> Maybe PositiveInteger -> Maybe PositiveInteger -> Maybe RequestMessageHeader -> [Validation] -> Maybe Boolean -> Maybe CorrelationId -> [CorrelationId] -> Maybe PositiveInteger -> [OnBehalfOf] -> Maybe CreditEventNoticeDocument -> [Party] -> CreditEventNotification

-- | Indicate which version of the FpML Schema an FpML message adheres to.
creditEventNotif_fpmlVersion :: CreditEventNotification -> XsdString

-- | This optional attribute can be supplied by a message creator in an
--   FpML instance to specify which build number of the schema was used to
--   define the message when it was generated.
creditEventNotif_expectedBuild :: CreditEventNotification -> Maybe PositiveInteger

-- | The specific build number of this schema version. This attribute is
--   not included in an instance document. Instead, it is supplied by the
--   XML parser when the document is validated against the FpML schema and
--   indicates the build number of the schema file. Every time FpML
--   publishes a change to the schema, validation rules, or examples within
--   a version (e.g., version 4.2) the actual build number is incremented.
--   If no changes have been made between releases within a version (i.e.
--   from Trial Recommendation to Recommendation) the actual build number
--   stays the same.
creditEventNotif_actualBuild :: CreditEventNotification -> Maybe PositiveInteger
creditEventNotif_header :: CreditEventNotification -> Maybe RequestMessageHeader

-- | A list of validation sets the sender asserts the document is valid
--   with respect to.
creditEventNotif_validation :: CreditEventNotification -> [Validation]

-- | Indicates if this message corrects an earlier request.
creditEventNotif_isCorrection :: CreditEventNotification -> Maybe Boolean

-- | An optional identifier used to correlate between related processes
creditEventNotif_parentCorrelationId :: CreditEventNotification -> Maybe CorrelationId

-- | A qualified identifier used to correlate between messages
creditEventNotif_correlationId :: CreditEventNotification -> [CorrelationId]

-- | A numeric value that can be used to order messages with the same
--   correlation identifier from the same sender.
creditEventNotif_sequenceNumber :: CreditEventNotification -> Maybe PositiveInteger

-- | Indicates which party (or parties) (and accounts) a trade or event is
--   being processed for. Normally there will only be a maximum of 2
--   parties, but in the case of a novation there could be a transferor,
--   transferee, remaining party, and other remaining party. Except for
--   this case, there should be no more than two onABehalfOf references in
--   a message.
creditEventNotif_onBehalfOf :: CreditEventNotification -> [OnBehalfOf]
creditEventNotif_creditEventNotice :: CreditEventNotification -> Maybe CreditEventNoticeDocument
creditEventNotif_party :: CreditEventNotification -> [Party]
data FailureToPayEvent
FailureToPayEvent :: FailureToPayEvent
data ObligationAccelerationEvent
ObligationAccelerationEvent :: ObligationAccelerationEvent
data ObligationDefaultEvent
ObligationDefaultEvent :: ObligationDefaultEvent
data RepudiationMoratoriumEvent
RepudiationMoratoriumEvent :: RepudiationMoratoriumEvent
data RestructuringEvent
RestructuringEvent :: Maybe Money -> RestructuringEvent
restrEvent_partialExerciseAmount :: RestructuringEvent -> Maybe Money
elementBankruptcy :: XMLParser BankruptcyEvent
elementToXMLBankruptcy :: BankruptcyEvent -> [Content ()]
elementCreditEvent :: XMLParser CreditEvent
elementToXMLCreditEvent :: CreditEvent -> [Content ()]

-- | A global element used to hold CENs.
elementCreditEventNotice :: XMLParser CreditEventNoticeDocument
elementToXMLCreditEventNotice :: CreditEventNoticeDocument -> [Content ()]
elementFailureToPay :: XMLParser FailureToPayEvent
elementToXMLFailureToPay :: FailureToPayEvent -> [Content ()]
elementObligationAcceleration :: XMLParser ObligationAccelerationEvent
elementToXMLObligationAcceleration :: ObligationAccelerationEvent -> [Content ()]
elementObligationDefault :: XMLParser ObligationDefaultEvent
elementToXMLObligationDefault :: ObligationDefaultEvent -> [Content ()]
elementRepudiationMoratorium :: XMLParser RepudiationMoratoriumEvent
elementToXMLRepudiationMoratorium :: RepudiationMoratoriumEvent -> [Content ()]
elementRestructuring :: XMLParser RestructuringEvent
elementToXMLRestructuring :: RestructuringEvent -> [Content ()]

-- | Credit Event Notification message.
--   
--   A message defining the ISDA defined Credit Event Notice. ISDA defines
--   it as an irrevocable notice from a Notifying Party to the other party
--   that describes a Credit Event that occurred. A Credit Event Notice
--   must contain detail of the facts relevant to the determination that a
--   Credit Event has occurred.
elementCreditEventNotification :: XMLParser CreditEventNotification
elementToXMLCreditEventNotification :: CreditEventNotification -> [Content ()]
elementCreditEventAcknowledgement :: XMLParser Acknowledgement
elementToXMLCreditEventAcknowledgement :: Acknowledgement -> [Content ()]
elementCreditEventException :: XMLParser Exception
elementToXMLCreditEventException :: Exception -> [Content ()]
instance Eq BankruptcyEvent
instance Show BankruptcyEvent
instance Eq CreditEvent
instance Show CreditEvent
instance Eq FailureToPayEvent
instance Show FailureToPayEvent
instance Eq ObligationAccelerationEvent
instance Show ObligationAccelerationEvent
instance Eq ObligationDefaultEvent
instance Show ObligationDefaultEvent
instance Eq RepudiationMoratoriumEvent
instance Show RepudiationMoratoriumEvent
instance Eq RestructuringEvent
instance Show RestructuringEvent
instance Eq CreditEventNotification
instance Show CreditEventNotification
instance Eq CreditEventNoticeDocument
instance Show CreditEventNoticeDocument
instance Eq AffectedTransactions
instance Show AffectedTransactions
instance Extension RestructuringEvent CreditEvent
instance SchemaType RestructuringEvent
instance Extension RepudiationMoratoriumEvent CreditEvent
instance SchemaType RepudiationMoratoriumEvent
instance Extension ObligationDefaultEvent CreditEvent
instance SchemaType ObligationDefaultEvent
instance Extension ObligationAccelerationEvent CreditEvent
instance SchemaType ObligationAccelerationEvent
instance Extension FailureToPayEvent CreditEvent
instance SchemaType FailureToPayEvent
instance Extension CreditEventNotification Document
instance Extension CreditEventNotification Message
instance Extension CreditEventNotification RequestMessage
instance Extension CreditEventNotification CorrectableRequestMessage
instance SchemaType CreditEventNotification
instance SchemaType CreditEventNoticeDocument
instance SchemaType CreditEvent
instance Extension BankruptcyEvent CreditEvent
instance SchemaType BankruptcyEvent
instance SchemaType AffectedTransactions

module Data.FpML.V53.Events.Business

-- | A type defining an event identifier issued by the indicated party.
data BusinessEventIdentifier
BusinessEventIdentifier :: Maybe ID -> OneOf2 PartyId (PartyReference, Maybe (AccountReference)) -> EventId -> BusinessEventIdentifier
busEventIdent_ID :: BusinessEventIdentifier -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>issuer</li>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>Reference to a party.</li>
--   <li>Reference to an account.</li>
--   </ul>
busEventIdent_choice0 :: BusinessEventIdentifier -> OneOf2 PartyId (PartyReference, Maybe (AccountReference))
busEventIdent_eventId :: BusinessEventIdentifier -> EventId

-- | A post-trade event reference identifier allocated by a party. FpML
--   does not define the domain values associated with this element. Note
--   that the domain values for this element are not strictly an enumerated
--   list.
data EventId
EventId :: Scheme -> EventIdAttributes -> EventId
data EventIdAttributes
EventIdAttributes :: Maybe AnyURI -> Maybe ID -> EventIdAttributes
eventIdAttrib_eventIdScheme :: EventIdAttributes -> Maybe AnyURI
eventIdAttrib_ID :: EventIdAttributes -> Maybe ID

-- | Abstract base type for all events.
data AbstractEvent
AbstractEvent_TradeNovationContent :: TradeNovationContent -> AbstractEvent
AbstractEvent_TradeChangeBase :: TradeChangeBase -> AbstractEvent
AbstractEvent_TradeAmendmentContent :: TradeAmendmentContent -> AbstractEvent
AbstractEvent_OptionExpiry :: OptionExpiry -> AbstractEvent
AbstractEvent_OptionExercise :: OptionExercise -> AbstractEvent
AbstractEvent_ChangeEvent :: ChangeEvent -> AbstractEvent
AbstractEvent_AdditionalEvent :: AdditionalEvent -> AbstractEvent

-- | Abstract base type for an extension/substitution point to customize
--   FpML and add additional events. (There are no subtypes defined for
--   this abstract type.)
data AdditionalEvent
AdditionalEvent :: AdditionalEvent

-- | Abstract base type for non-negotiated trade change descriptions
data ChangeEvent
ChangeEvent_IndexChange :: IndexChange -> ChangeEvent

-- | A type that shows how multiple trades have been combined into a
--   result.
data CompressionActivity
CompressionActivity :: Maybe CompressionType -> (Maybe (OneOf2 (Maybe (TradeIdentifier), [TradeIdentifier]) (Maybe (TradeId), [TradeId]))) -> CompressionActivity
comprActiv_compressionType :: CompressionActivity -> Maybe CompressionType

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>replacementTradeIdentifier</li>
--   <li>originatingTradeIdentifier</li>
--   </ul>
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>replacementTradeId</li>
--   <li>originatingTradeId</li>
--   </ul>
comprActiv_choice1 :: CompressionActivity -> (Maybe (OneOf2 (Maybe (TradeIdentifier), [TradeIdentifier]) (Maybe (TradeId), [TradeId])))

-- | A type that identifies the type of trade amalgamation, for example
--   netting or portfolio compression.
data CompressionType
CompressionType :: Scheme -> CompressionTypeAttributes -> CompressionType
data CompressionTypeAttributes
CompressionTypeAttributes :: Maybe AnyURI -> CompressionTypeAttributes
comprTypeAttrib_compressionTypeScheme :: CompressionTypeAttributes -> Maybe AnyURI

-- | A structure describing an de-clear event.
data DeClear
DeClear :: [PartyTradeIdentifier] -> Maybe Date -> DeClear
deClear_tradeIdentifier :: DeClear -> [PartyTradeIdentifier]
deClear_effectiveDate :: DeClear -> Maybe Date

-- | A structure describing the removal of a trade from a service, such as
--   a reporting service.
data Withdrawal
Withdrawal :: [PartyTradeIdentifier] -> Maybe Date -> Maybe RequestedWithdrawalAction -> Maybe WithdrawalReason -> Withdrawal
withdrawal_partyTradeIdentifier :: Withdrawal -> [PartyTradeIdentifier]
withdrawal_effectiveDate :: Withdrawal -> Maybe Date
withdrawal_requestedAction :: Withdrawal -> Maybe RequestedWithdrawalAction
withdrawal_reason :: Withdrawal -> Maybe WithdrawalReason

-- | A type that describes what the requester would like to see done to
--   implement the withdrawal, e.g. ExpungeRecords, RetainRecords.
data RequestedWithdrawalAction
RequestedWithdrawalAction :: Scheme -> RequestedWithdrawalActionAttributes -> RequestedWithdrawalAction
data RequestedWithdrawalActionAttributes
RequestedWithdrawalActionAttributes :: Maybe AnyURI -> RequestedWithdrawalActionAttributes
rwaa_requestedWithdrawalActionScheme :: RequestedWithdrawalActionAttributes -> Maybe AnyURI

-- | A type that describes why a trade was withdrawn.
data WithdrawalReason
WithdrawalReason :: Scheme -> WithdrawalReasonAttributes -> WithdrawalReason
data WithdrawalReasonAttributes
WithdrawalReasonAttributes :: Maybe AnyURI -> WithdrawalReasonAttributes
withdrReasonAttrib_withdrawalReasonScheme :: WithdrawalReasonAttributes -> Maybe AnyURI

-- | A structure that describes a proposed match between trades or
--   post-trade event reports.
data EventProposedMatch
EventProposedMatch :: (Maybe (OneOf10 (Maybe (OriginatingEvent), Maybe (Trade)) TradeAmendmentContent TradeNotionalChange (Maybe (TerminatingEvent), Maybe (TradeNotionalChange)) TradeNovationContent OptionExercise [OptionExpiry] DeClear Withdrawal AdditionalEvent)) -> Maybe MatchId -> [TradeDifference] -> Maybe Decimal -> EventProposedMatch

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>originatingEvent</li>
--   <li>trade</li>
--   </ul>
--   
--   <ol>
--   <li>amendment</li>
--   <li>increase</li>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>terminatingEvent</li>
--   <li>termination</li>
--   </ul>
--   
--   <ol>
--   <li>novation</li>
--   <li>optionExercise</li>
--   <li>optionExpiry</li>
--   <li>deClear</li>
--   <li>withdrawal</li>
--   <li>The additionalEvent element is an extension/substitution point to
--   customize FpML and add additional events.</li>
--   </ol>
eventProposMatch_choice0 :: EventProposedMatch -> (Maybe (OneOf10 (Maybe (OriginatingEvent), Maybe (Trade)) TradeAmendmentContent TradeNotionalChange (Maybe (TerminatingEvent), Maybe (TradeNotionalChange)) TradeNovationContent OptionExercise [OptionExpiry] DeClear Withdrawal AdditionalEvent))

-- | A unique identifier assigned by the matching service to each set of
--   matched positions.
eventProposMatch_matchId :: EventProposedMatch -> Maybe MatchId

-- | A type used to record the details of a difference between two sides of
--   a business event.
eventProposMatch_difference :: EventProposedMatch -> [TradeDifference]

-- | Numeric score to represent the quality of the match.
eventProposMatch_matchScore :: EventProposedMatch -> Maybe Decimal
data EventsChoice
EventsChoice :: (Maybe (OneOf10 (Maybe (OriginatingEvent), Maybe (Trade)) TradeAmendmentContent TradeNotionalChange (Maybe (TerminatingEvent), Maybe (TradeNotionalChange)) TradeNovationContent OptionExercise [OptionExpiry] DeClear Withdrawal AdditionalEvent)) -> EventsChoice

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>originatingEvent</li>
--   <li>trade</li>
--   </ul>
--   
--   <ol>
--   <li>amendment</li>
--   <li>increase</li>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>terminatingEvent</li>
--   <li>termination</li>
--   </ul>
--   
--   <ol>
--   <li>novation</li>
--   <li>optionExercise</li>
--   <li>optionExpiry</li>
--   <li>deClear</li>
--   <li>withdrawal</li>
--   <li>The additionalEvent element is an extension/substitution point to
--   customize FpML and add additional events.</li>
--   </ol>
eventsChoice_choice0 :: EventsChoice -> (Maybe (OneOf10 (Maybe (OriginatingEvent), Maybe (Trade)) TradeAmendmentContent TradeNotionalChange (Maybe (TerminatingEvent), Maybe (TradeNotionalChange)) TradeNovationContent OptionExercise [OptionExpiry] DeClear Withdrawal AdditionalEvent))

-- | A structure describing the effect of a change to an index.
data IndexChange
IndexChange :: [BusinessEventIdentifier] -> Maybe Decimal -> Maybe Money -> IndexChange
indexChange_eventIdentifier :: IndexChange -> [BusinessEventIdentifier]
indexChange_indexFactor :: IndexChange -> Maybe Decimal
indexChange_factoredCalculationAmount :: IndexChange -> Maybe Money

-- | A structure describing an option exercise.
data OptionExercise
OptionExercise :: [BusinessEventIdentifier] -> Maybe PartyReference -> Maybe PartyReference -> [PartyTradeIdentifier] -> Maybe Date -> Maybe Time -> (Maybe (OneOf5 Boolean Boolean (Maybe (Money), Maybe (Money)) (Maybe (Decimal), Maybe (Decimal)) (Maybe (Decimal), Maybe (Decimal)))) -> (Maybe (OneOf3 SettlementTypeEnum SimplePayment PhysicalSettlement)) -> Maybe NonNegativePayment -> OptionExercise
optionExerc_eventIdentifier :: OptionExercise -> [BusinessEventIdentifier]
optionExerc_optionSeller :: OptionExercise -> Maybe PartyReference
optionExerc_optionBuyer :: OptionExercise -> Maybe PartyReference
optionExerc_tradeIdentifier :: OptionExercise -> [PartyTradeIdentifier]
optionExerc_exerciseDate :: OptionExercise -> Maybe Date
optionExerc_exerciseTime :: OptionExercise -> Maybe Time

-- | Choice between:
--   
--   <ol>
--   <li>expiry</li>
--   <li>fullExercise</li>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>Specifies the fixed amount by which the option should be exercised
--   expressed as notional amount.</li>
--   <li>Specifies the Notional amount after the Change</li>
--   </ul>
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>Specifies the fixed amount by which the option should be exercised
--   expressed as number of options.</li>
--   <li>Specifies the Number of Options after the Change.</li>
--   </ul>
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>Specifies the fixed amount by which the option should be exercised
--   express as number of units.</li>
--   <li>Specifies the Number of Units</li>
--   </ul>
optionExerc_choice6 :: OptionExercise -> (Maybe (OneOf5 Boolean Boolean (Maybe (Money), Maybe (Money)) (Maybe (Decimal), Maybe (Decimal)) (Maybe (Decimal), Maybe (Decimal))))

-- | Choice between:
--   
--   <ol>
--   <li>settlementType</li>
--   <li>cashSettlement</li>
--   <li>physicalSettlement</li>
--   </ol>
optionExerc_choice7 :: OptionExercise -> (Maybe (OneOf3 SettlementTypeEnum SimplePayment PhysicalSettlement))
optionExerc_payment :: OptionExercise -> Maybe NonNegativePayment

-- | A structure describing an option expiring (i.e. passing its last
--   exercise time and becoming worthless.)
data OptionExpiry
OptionExpiry :: [BusinessEventIdentifier] -> [PartyTradeIdentifier] -> Maybe Date -> Maybe Time -> Maybe ExerciseProcedureOption -> OptionExpiry
optionExpiry_eventIdentifier :: OptionExpiry -> [BusinessEventIdentifier]
optionExpiry_tradeIdentifier :: OptionExpiry -> [PartyTradeIdentifier]
optionExpiry_date :: OptionExpiry -> Maybe Date
optionExpiry_time :: OptionExpiry -> Maybe Time
optionExpiry_exerciseProcedure :: OptionExpiry -> Maybe ExerciseProcedureOption

-- | A structure describing an option expiring.
data OptionExpiryBase
OptionExpiryBase :: [PartyTradeIdentifier] -> Maybe Date -> Maybe Time -> OptionExpiryBase
optionExpiryBase_tradeIdentifier :: OptionExpiryBase -> [PartyTradeIdentifier]
optionExpiryBase_date :: OptionExpiryBase -> Maybe Date
optionExpiryBase_time :: OptionExpiryBase -> Maybe Time

-- | A structure that describes how an option settles into a physical
--   trade.
data PhysicalSettlement
PhysicalSettlement :: (Maybe (OneOf3 PartyTradeIdentifier Trade Product)) -> PhysicalSettlement

-- | Choice between:
--   
--   <ol>
--   <li>The ID of the trade that resulted from the physical
--   settlement.</li>
--   <li>The trade that resulted from the physical settlement.</li>
--   <li>An abstract element used as a place holder for the substituting
--   product elements.</li>
--   </ol>
physicSettl_choice0 :: PhysicalSettlement -> (Maybe (OneOf3 PartyTradeIdentifier Trade Product))
data PhysicalExercise
PhysicalExercise :: (Maybe (OneOf2 Trade PartyTradeIdentifiers)) -> PhysicalExercise

-- | Choice between:
--   
--   <ol>
--   <li>An element that allows the full details of the trade to be used as
--   a mechanism for identifying the trade for which the post-trade event
--   pertains</li>
--   <li>A container since an individual trade can be referenced by two or
--   more different partyTradeIdentifier elements - each allocated by a
--   different party.</li>
--   </ol>
physicExerc_choice0 :: PhysicalExercise -> (Maybe (OneOf2 Trade PartyTradeIdentifiers))

-- | A type that describes why a trade terminated.
data TerminatingEvent
TerminatingEvent :: Scheme -> TerminatingEventAttributes -> TerminatingEvent
data TerminatingEventAttributes
TerminatingEventAttributes :: Maybe AnyURI -> TerminatingEventAttributes
terminEventAttrib_terminatingEventScheme :: TerminatingEventAttributes -> Maybe AnyURI

-- | A structure describing a negotiated amendment.
data TradeAmendmentContent
TradeAmendmentContent :: [BusinessEventIdentifier] -> Maybe Trade -> Maybe Date -> ExecutionDateTime -> Maybe Date -> Maybe Payment -> TradeAmendmentContent
tradeAmendmContent_eventIdentifier :: TradeAmendmentContent -> [BusinessEventIdentifier]

-- | A fulll description of the amended trade (i.e. the trade after the
--   amendment).
tradeAmendmContent_trade :: TradeAmendmentContent -> Maybe Trade

-- | The date on which the change was agreed.
tradeAmendmContent_agreementDate :: TradeAmendmentContent -> Maybe Date

-- | The date and time at which the negotiated change to the terms of the
--   original contract was agreed, such as via telephone or electronic
--   trading system (i.e., agreement date/time).
tradeAmendmContent_executionDateTime :: TradeAmendmentContent -> ExecutionDateTime

-- | The date on which the change become effective.
tradeAmendmContent_effectiveDate :: TradeAmendmentContent -> Maybe Date

-- | Describes a payment made in settlement of the change.
tradeAmendmContent_payment :: TradeAmendmentContent -> Maybe Payment

-- | A structure describing a trade change.
data TradeChangeBase
TradeChangeBase :: [BusinessEventIdentifier] -> OneOf2 [PartyTradeIdentifier] Trade -> Maybe Date -> ExecutionDateTime -> Maybe Date -> Maybe Payment -> TradeChangeBase
tradeChangeBase_eventIdentifier :: TradeChangeBase -> [BusinessEventIdentifier]

-- | Choice between:
--   
--   <ol>
--   <li>tradeIdentifier</li>
--   <li>originalTrade</li>
--   </ol>
tradeChangeBase_choice1 :: TradeChangeBase -> OneOf2 [PartyTradeIdentifier] Trade

-- | The date on which the change was agreed.
tradeChangeBase_agreementDate :: TradeChangeBase -> Maybe Date

-- | The date and time at which the negotiated change to the terms of the
--   original contract was agreed, such as via telephone or electronic
--   trading system (i.e., agreement date/time).
tradeChangeBase_executionDateTime :: TradeChangeBase -> ExecutionDateTime

-- | The date on which the change become effective.
tradeChangeBase_effectiveDate :: TradeChangeBase -> Maybe Date

-- | Describes a payment made in settlement of the change.
tradeChangeBase_payment :: TradeChangeBase -> Maybe Payment

-- | A structure describing a non-negotiated trade resulting from a market
--   event.
data TradeChangeContent
TradeChangeContent :: (Maybe (OneOf2 PartyTradeIdentifier Trade)) -> Maybe Trade -> Maybe Date -> Maybe ChangeEvent -> Maybe Payment -> TradeChangeContent

-- | Choice between:
--   
--   <ol>
--   <li>The original qualified trade identifier.</li>
--   <li>The original trade details.</li>
--   </ol>
tradeChangeContent_choice0 :: TradeChangeContent -> (Maybe (OneOf2 PartyTradeIdentifier Trade))

-- | A full description of the amended trade.
tradeChangeContent_trade :: TradeChangeContent -> Maybe Trade

-- | The date on which the change become effective
tradeChangeContent_effectiveDate :: TradeChangeContent -> Maybe Date

-- | Abstract substitutable place holder for specific change details.
tradeChangeContent_changeEvent :: TradeChangeContent -> Maybe ChangeEvent

-- | Describes a payment made in settlement of the change.
tradeChangeContent_payment :: TradeChangeContent -> Maybe Payment

-- | A structure describing a trade maturing.
data TradeMaturity
TradeMaturity :: [PartyTradeIdentifier] -> Maybe Date -> TradeMaturity
tradeMatur_tradeIdentifier :: TradeMaturity -> [PartyTradeIdentifier]
tradeMatur_date :: TradeMaturity -> Maybe Date

-- | A structure describing a change to the trade notional.
data TradeNotionalChange
TradeNotionalChange :: [BusinessEventIdentifier] -> OneOf2 [PartyTradeIdentifier] Trade -> Maybe Date -> ExecutionDateTime -> Maybe Date -> Maybe Payment -> (Maybe (OneOf3 (Maybe (NonNegativeMoney), Maybe (Money)) (Maybe (Decimal), Maybe (Decimal)) (Maybe (Decimal), Maybe (Decimal)))) -> TradeNotionalChange
tradeNotionChange_eventIdentifier :: TradeNotionalChange -> [BusinessEventIdentifier]

-- | Choice between:
--   
--   <ol>
--   <li>tradeIdentifier</li>
--   <li>originalTrade</li>
--   </ol>
tradeNotionChange_choice1 :: TradeNotionalChange -> OneOf2 [PartyTradeIdentifier] Trade

-- | The date on which the change was agreed.
tradeNotionChange_agreementDate :: TradeNotionalChange -> Maybe Date

-- | The date and time at which the negotiated change to the terms of the
--   original contract was agreed, such as via telephone or electronic
--   trading system (i.e., agreement date/time).
tradeNotionChange_executionDateTime :: TradeNotionalChange -> ExecutionDateTime

-- | The date on which the change become effective.
tradeNotionChange_effectiveDate :: TradeNotionalChange -> Maybe Date

-- | Describes a payment made in settlement of the change.
tradeNotionChange_payment :: TradeNotionalChange -> Maybe Payment

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>Specifies the fixed amount by which the Notional Amount changes.
--   The direction of the change (increase or decrease) is specified by the
--   event type (Termination =&amp;gt; reduction, Increase =&amp;gt;
--   greater.)</li>
--   <li>Specifies the Notional amount after the Change</li>
--   </ul>
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>Specifies the fixed amount by which the Number of Options
--   changes</li>
--   <li>Specifies the Number of Options after the Change.</li>
--   </ul>
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>Specifies the fixed amount by which the Number of Units
--   changes</li>
--   <li>Specifies the Number of Units</li>
--   </ul>
tradeNotionChange_choice6 :: TradeNotionalChange -> (Maybe (OneOf3 (Maybe (NonNegativeMoney), Maybe (Money)) (Maybe (Decimal), Maybe (Decimal)) (Maybe (Decimal), Maybe (Decimal))))

-- | A structure describing a novation.
data TradeNovationContent
TradeNovationContent :: [BusinessEventIdentifier] -> (Maybe (OneOf2 [PartyTradeIdentifier] Trade)) -> (Maybe (OneOf2 [PartyTradeIdentifier] Trade)) -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Date -> ExecutionDateTime -> Date -> (Maybe (OneOf3 (Maybe (Money), Maybe (Money)) (Maybe (Decimal), Maybe (Decimal)) (Maybe (Decimal), Maybe (Decimal)))) -> Maybe Boolean -> [FirstPeriodStartDate] -> Maybe Empty -> Maybe CreditDerivativesNotices -> [ContractualDefinitions] -> [ContractualTermsSupplement] -> Maybe Payment -> TradeNovationContent
tradeNovatContent_eventIdentifier :: TradeNovationContent -> [BusinessEventIdentifier]

-- | Choice between:
--   
--   <ol>
--   <li>Indicates a reference to the original trade between the transferor
--   and the remaining party.</li>
--   <li>Indicates the original trade between the transferor and the
--   remaining party.</li>
--   </ol>
tradeNovatContent_choice1 :: TradeNovationContent -> (Maybe (OneOf2 [PartyTradeIdentifier] Trade))

-- | Choice between identification and representation of the new contract.
--   
--   Choice between:
--   
--   <ol>
--   <li>Indicates a reference to the new trade between the transferee and
--   the remaining party.</li>
--   <li>Indicates the original trade between the transferor and the
--   remaining party.</li>
--   </ol>
tradeNovatContent_choice2 :: TradeNovationContent -> (Maybe (OneOf2 [PartyTradeIdentifier] Trade))

-- | A pointer style reference to a party identifier defined elsewhere in
--   the document. In a three-way novation the party referenced is the
--   Transferor (outgoing party) in the novation. The Transferor means a
--   party which transfers by novation to a Transferee all of its rights,
--   liabilities, duties and obligations with respect to a Remaining Party.
--   In a four-way novation the party referenced is Transferor 1 which
--   transfers by novation to Transferee 1 all of its rights, liabilities,
--   duties and obligations with respect to Transferor 2. ISDA 2004
--   Novation Term: Transferor (three-way novation) or Transferor 1
--   (four-way novation).
tradeNovatContent_transferor :: TradeNovationContent -> Maybe PartyReference
tradeNovatContent_transferorAccount :: TradeNovationContent -> Maybe AccountReference

-- | A pointer style reference to a party identifier defined elsewhere in
--   the document. In a three-way novation the party referenced is the
--   Transferee (incoming party) in the novation. Transferee means a party
--   which accepts by way of novation all rights, liabilities, duties and
--   obligations of a Transferor with respect to a Remaining Party. In a
--   four-way novation the party referenced is Transferee 1 which accepts
--   by way of novation the rights, liabilities, duties and obligations of
--   Transferor 1. ISDA 2004 Novation Term: Transferee (three-way novation)
--   or Transferee 1 (four-way novation).
tradeNovatContent_transferee :: TradeNovationContent -> Maybe PartyReference
tradeNovatContent_transfereeAccount :: TradeNovationContent -> Maybe AccountReference

-- | A pointer style reference to a party identifier defined elsewhere in
--   the document. In a three-way novation the party referenced is the
--   Remaining Party in the novation. Remaining Party means a party which
--   consents to a Transferor's transfer by novation and the acceptance
--   thereof by the Transferee of all of the Transferor's rights,
--   liabilities, duties and obligations with respect to such Remaining
--   Party under and with respect of the Novated Amount of a transaction.
--   In a four-way novation the party referenced is Transferor 2 per the
--   ISDA definition and acts in the role of a Transferor. Transferor 2
--   transfers by novation to Transferee 2 all of its rights, liabilities,
--   duties and obligations with respect to Transferor 1. ISDA 2004
--   Novation Term: Remaining Party (three-way novation) or Transferor 2
--   (four-way novation).
tradeNovatContent_remainingParty :: TradeNovationContent -> Maybe PartyReference
tradeNovatContent_remainingPartyAccount :: TradeNovationContent -> Maybe AccountReference

-- | A pointer style reference to a party identifier defined elsewhere in
--   the document. This element is not applicable in a three-way novation
--   and should be omitted. In a four-way novation the party referenced is
--   Transferee 2. Transferee 2 means a party which accepts by way of
--   novation the rights, liabilities, duties and obligations of Transferor
--   2. ISDA 2004 Novation Term: Transferee 2 (four-way novation).
tradeNovatContent_otherRemainingParty :: TradeNovationContent -> Maybe PartyReference
tradeNovatContent_otherRemainingPartyAccount :: TradeNovationContent -> Maybe AccountReference

-- | Specifies the date that one party's legal obligations with regard to a
--   trade are transferred to another party. It corresponds to the Novation
--   Date section of the 2004 ISDA Novation Definitions, section 1.16.
tradeNovatContent_novationDate :: TradeNovationContent -> Date

-- | The date and time at which the change was agreed.
tradeNovatContent_executionDateTime :: TradeNovationContent -> ExecutionDateTime

-- | Specifies the date the parties agree to assign or novate a Contract.
--   If this element is not specified, the novationContractDate will be
--   deemed to be the novationDate. It corresponds to the Novation Trade
--   Date section of the 2004 ISDA Novation Definitions, section 1.17.
tradeNovatContent_novationTradeDate :: TradeNovationContent -> Date

-- | Choice for expressing the novated amount as either a money amount,
--   number of options, or number of units, according the the financial
--   product which is being novated.
--   
--   Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The amount which represents the portion of the Old Contract being
--   novated.</li>
--   <li>The amount which represents the portion of the Old Contract not
--   being novated.</li>
--   </ul>
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The number of options which represent the portion of the Old
--   Contract being novated.</li>
--   <li>The number of options which represent the portion of the Old
--   Contract not being novated.</li>
--   </ul>
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The number of options which represent the portion of the Old
--   Contract being novated.</li>
--   <li>The number of options which represent the portion of the Old
--   Contract not being novated.</li>
--   </ul>
tradeNovatContent_choice14 :: TradeNovationContent -> (Maybe (OneOf3 (Maybe (Money), Maybe (Money)) (Maybe (Decimal), Maybe (Decimal)) (Maybe (Decimal), Maybe (Decimal))))

-- | This element corresponds to the applicability of the Full First
--   Calculation Period as defined in the 2004 ISDA Novation Definitions,
--   section 1.20.
tradeNovatContent_fullFirstCalculationPeriod :: TradeNovationContent -> Maybe Boolean

-- | Element that is used to be able to make sense of the “new transaction”
--   without requiring reference back to the “old transaction”. In the case
--   of interest rate products there are potentially 2 “first period start
--   dates” to reference – one with respect to each party to the new
--   transaction. For Credit Default Swaps there is just the one with
--   respect to the party that is the fixed rate payer.
tradeNovatContent_firstPeriodStartDate :: TradeNovationContent -> [FirstPeriodStartDate]

-- | This element corresponds to the non-Reliance section in the 2004 ISDA
--   Novation Definitions, section 2.1 (c) (i). The element appears in the
--   instance document when non-Reliance is applicable.
tradeNovatContent_nonReliance :: TradeNovationContent -> Maybe Empty

-- | This element should be specified if one or more of either a Credit
--   Event Notice, Notice of Publicly Available Information, Notice of
--   Physical Settlement or Notice of Intended Physical Settlement, as
--   applicable, has been delivered by or to the Transferor or the
--   Remaining Party. The type of notice or notices that have been
--   delivered should be indicated by setting the relevant boolean element
--   value(s) to true. The absence of the element means that no Credit
--   Event Notice, Notice of Publicly Available Information, Notice of
--   Physical Settlement or Notice of Intended Physical Settlement, as
--   applicable, has been delivered by or to the Transferor or the
--   Remaining Party.
tradeNovatContent_creditDerivativesNotices :: TradeNovationContent -> Maybe CreditDerivativesNotices

-- | The definitions (such as those published by ISDA) that will define the
--   terms of the novation transaction.
tradeNovatContent_contractualDefinitions :: TradeNovationContent -> [ContractualDefinitions]

-- | A contractual supplement (such as those published by ISDA) that will
--   apply to the trade.
tradeNovatContent_contractualTermsSupplement :: TradeNovationContent -> [ContractualTermsSupplement]

-- | Describes a payment made in settlement of the novation.
tradeNovatContent_payment :: TradeNovationContent -> Maybe Payment

-- | Defines a type that allows trade identifiers and/or trade information
--   to be represented for a trade.
data TradeReferenceInformation
TradeReferenceInformation :: (Maybe (OneOf2 OriginatingEvent TerminatingEvent)) -> [PartyTradeIdentifier] -> [PartyTradeInformation] -> Maybe ProductType -> Maybe ProductId -> TradeReferenceInformation

-- | Choice between:
--   
--   <ol>
--   <li>originatingEvent</li>
--   <li>terminatingEvent</li>
--   </ol>
tradeRefInfo_choice0 :: TradeReferenceInformation -> (Maybe (OneOf2 OriginatingEvent TerminatingEvent))

-- | This allows the acknowledging party to supply additional trade
--   identifiers for a trade underlying a request relating to a business
--   event.
tradeRefInfo_partyTradeIdentifier :: TradeReferenceInformation -> [PartyTradeIdentifier]

-- | This allows the acknowledging party to supply additional trade
--   information about a trade underlying a request relating to a business
--   event.
tradeRefInfo_partyTradeInformation :: TradeReferenceInformation -> [PartyTradeInformation]
tradeRefInfo_productType :: TradeReferenceInformation -> Maybe ProductType
tradeRefInfo_productId :: TradeReferenceInformation -> Maybe ProductId

-- | The additionalEvent element is an extension/substitution point to
--   customize FpML and add additional events. (There are no elements in
--   any substitution group for this element.)
elementAdditionalEvent :: XMLParser AdditionalEvent
elementToXMLAdditionalEvent :: AdditionalEvent -> [Content ()]

-- | Abstract substitutable place holder for specific change details.
elementChangeEvent :: XMLParser ChangeEvent
elementToXMLChangeEvent :: ChangeEvent -> [Content ()]

-- | Describes a change due to an index component being adjusted.
elementIndexChange :: XMLParser IndexChange
elementToXMLIndexChange :: IndexChange -> [Content ()]
instance Eq EventIdAttributes
instance Show EventIdAttributes
instance Eq AdditionalEvent
instance Show AdditionalEvent
instance Eq CompressionTypeAttributes
instance Show CompressionTypeAttributes
instance Eq RequestedWithdrawalActionAttributes
instance Show RequestedWithdrawalActionAttributes
instance Eq WithdrawalReasonAttributes
instance Show WithdrawalReasonAttributes
instance Eq TerminatingEventAttributes
instance Show TerminatingEventAttributes
instance Eq TradeReferenceInformation
instance Show TradeReferenceInformation
instance Eq TradeNovationContent
instance Show TradeNovationContent
instance Eq TradeNotionalChange
instance Show TradeNotionalChange
instance Eq TradeMaturity
instance Show TradeMaturity
instance Eq TradeChangeContent
instance Show TradeChangeContent
instance Eq TradeChangeBase
instance Show TradeChangeBase
instance Eq TradeAmendmentContent
instance Show TradeAmendmentContent
instance Eq TerminatingEvent
instance Show TerminatingEvent
instance Eq PhysicalExercise
instance Show PhysicalExercise
instance Eq PhysicalSettlement
instance Show PhysicalSettlement
instance Eq OptionExpiryBase
instance Show OptionExpiryBase
instance Eq OptionExpiry
instance Show OptionExpiry
instance Eq OptionExercise
instance Show OptionExercise
instance Eq IndexChange
instance Show IndexChange
instance Eq EventsChoice
instance Show EventsChoice
instance Eq EventProposedMatch
instance Show EventProposedMatch
instance Eq WithdrawalReason
instance Show WithdrawalReason
instance Eq RequestedWithdrawalAction
instance Show RequestedWithdrawalAction
instance Eq Withdrawal
instance Show Withdrawal
instance Eq DeClear
instance Show DeClear
instance Eq CompressionType
instance Show CompressionType
instance Eq CompressionActivity
instance Show CompressionActivity
instance Eq ChangeEvent
instance Show ChangeEvent
instance Eq AbstractEvent
instance Show AbstractEvent
instance Eq EventId
instance Show EventId
instance Eq BusinessEventIdentifier
instance Show BusinessEventIdentifier
instance SchemaType TradeReferenceInformation
instance Extension TradeNovationContent AbstractEvent
instance SchemaType TradeNovationContent
instance Extension TradeNotionalChange AbstractEvent
instance Extension TradeNotionalChange TradeChangeBase
instance SchemaType TradeNotionalChange
instance SchemaType TradeMaturity
instance SchemaType TradeChangeContent
instance Extension TradeChangeBase AbstractEvent
instance SchemaType TradeChangeBase
instance Extension TradeAmendmentContent AbstractEvent
instance SchemaType TradeAmendmentContent
instance Extension TerminatingEvent Scheme
instance SchemaType TerminatingEvent
instance SchemaType PhysicalExercise
instance SchemaType PhysicalSettlement
instance SchemaType OptionExpiryBase
instance Extension OptionExpiry AbstractEvent
instance SchemaType OptionExpiry
instance Extension OptionExercise AbstractEvent
instance SchemaType OptionExercise
instance Extension IndexChange AbstractEvent
instance Extension IndexChange ChangeEvent
instance SchemaType IndexChange
instance SchemaType EventsChoice
instance SchemaType EventProposedMatch
instance Extension WithdrawalReason Scheme
instance SchemaType WithdrawalReason
instance Extension RequestedWithdrawalAction Scheme
instance SchemaType RequestedWithdrawalAction
instance SchemaType Withdrawal
instance SchemaType DeClear
instance Extension CompressionType Scheme
instance SchemaType CompressionType
instance SchemaType CompressionActivity
instance Extension ChangeEvent AbstractEvent
instance SchemaType ChangeEvent
instance Extension AdditionalEvent AbstractEvent
instance SchemaType AdditionalEvent
instance SchemaType AbstractEvent
instance Extension EventId Scheme
instance SchemaType EventId
instance SchemaType BusinessEventIdentifier

module Data.FpML.V53.Processes.Recordkeeping
data NonpublicExecutionReport
NonpublicExecutionReport :: XsdString -> Maybe PositiveInteger -> Maybe PositiveInteger -> Maybe RequestMessageHeader -> [Validation] -> Maybe Boolean -> Maybe CorrelationId -> [CorrelationId] -> Maybe PositiveInteger -> [OnBehalfOf] -> Maybe IdentifiedDate -> Maybe Time -> Maybe PortfolioReferenceBase -> (Maybe (OneOf10 (Maybe (OriginatingEvent), Maybe (Trade)) TradeAmendmentContent TradeNotionalChange (Maybe (TerminatingEvent), Maybe (TradeNotionalChange)) TradeNovationContent OptionExercise [OptionExpiry] DeClear Withdrawal AdditionalEvent)) -> [BasicQuotation] -> [Party] -> [Account] -> NonpublicExecutionReport

-- | Indicate which version of the FpML Schema an FpML message adheres to.
nonpubExecutReport_fpmlVersion :: NonpublicExecutionReport -> XsdString

-- | This optional attribute can be supplied by a message creator in an
--   FpML instance to specify which build number of the schema was used to
--   define the message when it was generated.
nonpubExecutReport_expectedBuild :: NonpublicExecutionReport -> Maybe PositiveInteger

-- | The specific build number of this schema version. This attribute is
--   not included in an instance document. Instead, it is supplied by the
--   XML parser when the document is validated against the FpML schema and
--   indicates the build number of the schema file. Every time FpML
--   publishes a change to the schema, validation rules, or examples within
--   a version (e.g., version 4.2) the actual build number is incremented.
--   If no changes have been made between releases within a version (i.e.
--   from Trial Recommendation to Recommendation) the actual build number
--   stays the same.
nonpubExecutReport_actualBuild :: NonpublicExecutionReport -> Maybe PositiveInteger
nonpubExecutReport_header :: NonpublicExecutionReport -> Maybe RequestMessageHeader

-- | A list of validation sets the sender asserts the document is valid
--   with respect to.
nonpubExecutReport_validation :: NonpublicExecutionReport -> [Validation]

-- | Indicates if this message corrects an earlier request.
nonpubExecutReport_isCorrection :: NonpublicExecutionReport -> Maybe Boolean

-- | An optional identifier used to correlate between related processes
nonpubExecutReport_parentCorrelationId :: NonpublicExecutionReport -> Maybe CorrelationId

-- | A qualified identifier used to correlate between messages
nonpubExecutReport_correlationId :: NonpublicExecutionReport -> [CorrelationId]

-- | A numeric value that can be used to order messages with the same
--   correlation identifier from the same sender.
nonpubExecutReport_sequenceNumber :: NonpublicExecutionReport -> Maybe PositiveInteger

-- | Indicates which party (or parties) (and accounts) a trade or event is
--   being processed for. Normally there will only be a maximum of 2
--   parties, but in the case of a novation there could be a transferor,
--   transferee, remaining party, and other remaining party. Except for
--   this case, there should be no more than two onABehalfOf references in
--   a message.
nonpubExecutReport_onBehalfOf :: NonpublicExecutionReport -> [OnBehalfOf]

-- | The date for which this document reports positions and valuations.
nonpubExecutReport_asOfDate :: NonpublicExecutionReport -> Maybe IdentifiedDate

-- | The time for which this report was generated (i.e., the cut-off time
--   of the report).
nonpubExecutReport_asOfTime :: NonpublicExecutionReport -> Maybe Time
nonpubExecutReport_portfolioReference :: NonpublicExecutionReport -> Maybe PortfolioReferenceBase

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>originatingEvent</li>
--   <li>trade</li>
--   </ul>
--   
--   <ol>
--   <li>amendment</li>
--   <li>increase</li>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>terminatingEvent</li>
--   <li>termination</li>
--   </ul>
--   
--   <ol>
--   <li>novation</li>
--   <li>optionExercise</li>
--   <li>optionExpiry</li>
--   <li>deClear</li>
--   <li>withdrawal</li>
--   <li>The additionalEvent element is an extension/substitution point to
--   customize FpML and add additional events.</li>
--   </ol>
nonpubExecutReport_choice10 :: NonpublicExecutionReport -> (Maybe (OneOf10 (Maybe (OriginatingEvent), Maybe (Trade)) TradeAmendmentContent TradeNotionalChange (Maybe (TerminatingEvent), Maybe (TradeNotionalChange)) TradeNovationContent OptionExercise [OptionExpiry] DeClear Withdrawal AdditionalEvent))

-- | Pricing information for the trade.
nonpubExecutReport_quote :: NonpublicExecutionReport -> [BasicQuotation]
nonpubExecutReport_party :: NonpublicExecutionReport -> [Party]

-- | Optional account information used to precisely define the origination
--   and destination of financial instruments.
nonpubExecutReport_account :: NonpublicExecutionReport -> [Account]
data NonpublicExecutionReportRetracted
NonpublicExecutionReportRetracted :: XsdString -> Maybe PositiveInteger -> Maybe PositiveInteger -> Maybe RequestMessageHeader -> [Validation] -> Maybe CorrelationId -> [CorrelationId] -> Maybe PositiveInteger -> [OnBehalfOf] -> OneOf2 ((Maybe (OneOf10 (Maybe (OriginatingEvent), Maybe (Trade)) TradeAmendmentContent TradeNotionalChange (Maybe (TerminatingEvent), Maybe (TradeNotionalChange)) TradeNovationContent OptionExercise [OptionExpiry] DeClear Withdrawal AdditionalEvent))) PartyTradeIdentifier -> [Party] -> [Account] -> NonpublicExecutionReportRetracted

-- | Indicate which version of the FpML Schema an FpML message adheres to.
nonpubExecutReportRetrac_fpmlVersion :: NonpublicExecutionReportRetracted -> XsdString

-- | This optional attribute can be supplied by a message creator in an
--   FpML instance to specify which build number of the schema was used to
--   define the message when it was generated.
nonpubExecutReportRetrac_expectedBuild :: NonpublicExecutionReportRetracted -> Maybe PositiveInteger

-- | The specific build number of this schema version. This attribute is
--   not included in an instance document. Instead, it is supplied by the
--   XML parser when the document is validated against the FpML schema and
--   indicates the build number of the schema file. Every time FpML
--   publishes a change to the schema, validation rules, or examples within
--   a version (e.g., version 4.2) the actual build number is incremented.
--   If no changes have been made between releases within a version (i.e.
--   from Trial Recommendation to Recommendation) the actual build number
--   stays the same.
nonpubExecutReportRetrac_actualBuild :: NonpublicExecutionReportRetracted -> Maybe PositiveInteger
nonpubExecutReportRetrac_header :: NonpublicExecutionReportRetracted -> Maybe RequestMessageHeader

-- | A list of validation sets the sender asserts the document is valid
--   with respect to.
nonpubExecutReportRetrac_validation :: NonpublicExecutionReportRetracted -> [Validation]

-- | An optional identifier used to correlate between related processes
nonpubExecutReportRetrac_parentCorrelationId :: NonpublicExecutionReportRetracted -> Maybe CorrelationId

-- | A qualified identifier used to correlate between messages
nonpubExecutReportRetrac_correlationId :: NonpublicExecutionReportRetracted -> [CorrelationId]

-- | A numeric value that can be used to order messages with the same
--   correlation identifier from the same sender.
nonpubExecutReportRetrac_sequenceNumber :: NonpublicExecutionReportRetracted -> Maybe PositiveInteger

-- | Indicates which party (or parties) (and accounts) a trade or event is
--   being processed for. Normally there will only be a maximum of 2
--   parties, but in the case of a novation there could be a transferor,
--   transferee, remaining party, and other remaining party. Except for
--   this case, there should be no more than two onABehalfOf references in
--   a message.
nonpubExecutReportRetrac_onBehalfOf :: NonpublicExecutionReportRetracted -> [OnBehalfOf]

-- | Choice between:
--   
--   <ol>
--   <li>unknown</li>
--   <li>tradeIdentifier</li>
--   </ol>
nonpubExecutReportRetrac_choice6 :: NonpublicExecutionReportRetracted -> OneOf2 ((Maybe (OneOf10 (Maybe (OriginatingEvent), Maybe (Trade)) TradeAmendmentContent TradeNotionalChange (Maybe (TerminatingEvent), Maybe (TradeNotionalChange)) TradeNovationContent OptionExercise [OptionExpiry] DeClear Withdrawal AdditionalEvent))) PartyTradeIdentifier
nonpubExecutReportRetrac_party :: NonpublicExecutionReportRetracted -> [Party]

-- | Optional account information used to precisely define the origination
--   and destination of financial instruments.
nonpubExecutReportRetrac_account :: NonpublicExecutionReportRetracted -> [Account]
elementNonpublicExecutionReport :: XMLParser NonpublicExecutionReport
elementToXMLNonpublicExecutionReport :: NonpublicExecutionReport -> [Content ()]
elementNonpublicExecutionReportRetracted :: XMLParser NonpublicExecutionReportRetracted
elementToXMLNonpublicExecutionReportRetracted :: NonpublicExecutionReportRetracted -> [Content ()]
elementNonpublicExecutionReportAcknowledgement :: XMLParser Acknowledgement
elementToXMLNonpublicExecutionReportAcknowledgement :: Acknowledgement -> [Content ()]
elementNonpublicExecutionReportException :: XMLParser Exception
elementToXMLNonpublicExecutionReportException :: Exception -> [Content ()]
instance Eq NonpublicExecutionReportRetracted
instance Show NonpublicExecutionReportRetracted
instance Eq NonpublicExecutionReport
instance Show NonpublicExecutionReport
instance Extension NonpublicExecutionReportRetracted Document
instance Extension NonpublicExecutionReportRetracted Message
instance Extension NonpublicExecutionReportRetracted RequestMessage
instance Extension NonpublicExecutionReportRetracted NonCorrectableRequestMessage
instance SchemaType NonpublicExecutionReportRetracted
instance Extension NonpublicExecutionReport Document
instance Extension NonpublicExecutionReport Message
instance Extension NonpublicExecutionReport RequestMessage
instance Extension NonpublicExecutionReport CorrectableRequestMessage
instance SchemaType NonpublicExecutionReport

module Data.FpML.V53.Generic

-- | A product to represent an OTC derivative transaction whose economics
--   are not fully described using an FpML schema.
elementGenericProduct :: XMLParser GenericProduct
elementToXMLGenericProduct :: GenericProduct -> [Content ()]

-- | A product to represent an OTC derivative transaction whose economics
--   are not fully described using an FpML schema.
elementNonSchemaProduct :: XMLParser GenericProduct
elementToXMLNonSchemaProduct :: GenericProduct -> [Content ()]

-- | Simple product representation providing key information about a
--   variety of different products
data GenericProduct
GenericProduct :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe Boolean -> (Maybe (OneOf2 (Maybe (PartyReference), Maybe (AccountReference), Maybe (PartyReference), Maybe (AccountReference)) [PartyReference])) -> Maybe SimplePayment -> Maybe AdjustableDate2 -> Maybe AdjustableDate2 -> Maybe AdjustableDate2 -> [TradeUnderlyer2] -> [CashflowNotional] -> Maybe OptionType -> [IdentifiedCurrency] -> GenericProduct
genericProduct_ID :: GenericProduct -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
genericProduct_primaryAssetClass :: GenericProduct -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
genericProduct_secondaryAssetClass :: GenericProduct -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
genericProduct_productType :: GenericProduct -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
genericProduct_productId :: GenericProduct -> [ProductId]

-- | Indicates whether this transaction has multiple components, not all of
--   which may be reported.
genericProduct_multiLeg :: GenericProduct -> Maybe Boolean

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>A reference to the party that buys this instrument, ie. pays for
--   this instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.</li>
--   <li>A reference to the account that buys this instrument.</li>
--   <li>A reference to the party that sells (<a>writes</a>) this
--   instrument, i.e. that grants the rights defined by this instrument and
--   in return receives a payment for it. See 2000 ISDA definitions Article
--   11.1 (a). In the case of FRAs this is the floating rate payer.</li>
--   <li>A reference to the account that sells this instrument.</li>
--   </ul>
--   
--   <ol>
--   <li>counterpartyReference</li>
--   </ol>
genericProduct_choice5 :: GenericProduct -> (Maybe (OneOf2 (Maybe (PartyReference), Maybe (AccountReference), Maybe (PartyReference), Maybe (AccountReference)) [PartyReference]))
genericProduct_premium :: GenericProduct -> Maybe SimplePayment

-- | The earliest of all the effective dates of all constituent streams.
genericProduct_effectiveDate :: GenericProduct -> Maybe AdjustableDate2

-- | For options, the last exercise date of the option.
genericProduct_expirationDate :: GenericProduct -> Maybe AdjustableDate2

-- | The latest of all of the termination (accrual end) dates of the
--   constituent or underlying streams.
genericProduct_terminationDate :: GenericProduct -> Maybe AdjustableDate2

-- | The set of underlyers to the trade that can be used in computing the
--   trade's cashflows. If this information is needed to identify the
--   trade, all of the trade's underlyers should be specified, whether or
--   not they figure into the cashflow calculation. Otherwise, only those
--   underlyers used to compute this particular cashflow need be supplied.
genericProduct_underlyer :: GenericProduct -> [TradeUnderlyer2]

-- | The notional or notionals in effect on the last day of the last
--   calculation period in each stream.
genericProduct_notional :: GenericProduct -> [CashflowNotional]

-- | For options, what type of option it is (e.g. butterfly).
genericProduct_optionType :: GenericProduct -> Maybe OptionType

-- | The currency or currencies in which the product can settle.
genericProduct_settlementCurrency :: GenericProduct -> [IdentifiedCurrency]

-- | The underlying asset<i>index</i>reference price etc. whose rate/price
--   may be observed to compute the value of the cashflow. It can be an
--   index, fixed rate, listed security, quoted currency pair, or a
--   reference entity (for credit derivatives).
data TradeUnderlyer2
TradeUnderlyer2 :: Maybe ID -> (Maybe (OneOf5 FloatingRate Schedule Asset QuotedCurrencyPair LegalEntity)) -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> TradeUnderlyer2
tradeUnderl_ID :: TradeUnderlyer2 -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>A floating rate.</li>
--   <li>The fixed rate or fixed rate schedule expressed as explicit fixed
--   rates and dates. In the case of a schedule, the step dates may be
--   subject to adjustment in accordance with any adjustments specified in
--   calculationPeriodDatesAdjustments.</li>
--   <li>Define the underlying asset, either a listed security or other
--   instrument.</li>
--   <li>Describes the composition of a rate that has been quoted. This
--   includes the two currencies and the quotation relationship between the
--   two currencies.</li>
--   <li>The corporate or sovereign entity on which you are buying or
--   selling protection and any successor that assumes all or substantially
--   all of its contractual and other obligations. It is vital to use the
--   correct legal name of the entity and to be careful not to choose a
--   subsidiary if you really want to trade protection on a parent company.
--   Please note, Reference Entities cannot be senior or subordinated. It
--   is the obligations of the Reference Entities that can be senior or
--   subordinated. ISDA 2003 Term: Reference Entity</li>
--   </ol>
tradeUnderl_choice0 :: TradeUnderlyer2 -> (Maybe (OneOf5 FloatingRate Schedule Asset QuotedCurrencyPair LegalEntity))

-- | A reference to the party responsible for making the payments defined
--   by this structure.
tradeUnderl_payerPartyReference :: TradeUnderlyer2 -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
tradeUnderl_payerAccountReference :: TradeUnderlyer2 -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
tradeUnderl_receiverPartyReference :: TradeUnderlyer2 -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
tradeUnderl_receiverAccountReference :: TradeUnderlyer2 -> Maybe AccountReference

-- | A flexible description of the type or characteristics of an option or
--   strategy, e.g. butterfly, condor, chooser.
data OptionType
OptionType :: Scheme -> OptionTypeAttributes -> OptionType
data OptionTypeAttributes
OptionTypeAttributes :: Maybe AnyURI -> OptionTypeAttributes

-- | The type scheme used with this option type.
optionTypeAttrib_optionTypeScheme :: OptionTypeAttributes -> Maybe AnyURI
instance Eq OptionTypeAttributes
instance Show OptionTypeAttributes
instance Eq GenericProduct
instance Show GenericProduct
instance Eq OptionType
instance Show OptionType
instance Eq TradeUnderlyer2
instance Show TradeUnderlyer2
instance Extension OptionType Scheme
instance SchemaType OptionType
instance SchemaType TradeUnderlyer2
instance Extension GenericProduct Product
instance SchemaType GenericProduct

module Data.FpML.V53.IRD

-- | A type including a reference to a bond to support the representation
--   of an asset swap or Condition Precedent Bond.
data BondReference
BondReference :: Maybe Bond -> Maybe Boolean -> Maybe Boolean -> BondReference

-- | Identifies the underlying asset when it is a series or a class of
--   bonds.
bondRef_bond :: BondReference -> Maybe Bond

-- | To indicate whether the Condition Precedent Bond is applicable. The
--   swap contract is only valid if the bond is issued and if there is any
--   dispute over the terms of fixed stream then the bond terms would be
--   used.
bondRef_conditionPrecedentBond :: BondReference -> Maybe Boolean

-- | To indicate whether the Discrepancy Clause is applicable.
bondRef_discrepancyClause :: BondReference -> Maybe Boolean

-- | A product to represent a single cashflow.
data BulletPayment
BulletPayment :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe Payment -> BulletPayment
bulletPayment_ID :: BulletPayment -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
bulletPayment_primaryAssetClass :: BulletPayment -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
bulletPayment_secondaryAssetClass :: BulletPayment -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
bulletPayment_productType :: BulletPayment -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
bulletPayment_productId :: BulletPayment -> [ProductId]

-- | A known payment between two parties.
bulletPayment_payment :: BulletPayment -> Maybe Payment

-- | A type definining the parameters used in the calculation of fixed or
--   floating calculation period amounts.
data Calculation
Calculation :: OneOf2 Notional FxLinkedNotionalSchedule -> OneOf2 (Schedule, Maybe (FutureValueAmount)) Rate -> DayCountFraction -> Maybe Discounting -> Maybe CompoundingMethodEnum -> Calculation

-- | Choice between:
--   
--   <ol>
--   <li>The notional amount or notional amount schedule.</li>
--   <li>A notional amount schedule where each notional that applied to a
--   calculation period is calculated with reference to a notional amount
--   or notional amount schedule in a different currency by means of a spot
--   currency exchange rate which is normally observed at the beginning of
--   each period.</li>
--   </ol>
calculation_choice0 :: Calculation -> OneOf2 Notional FxLinkedNotionalSchedule

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The fixed rate or fixed rate schedule expressed as explicit fixed
--   rates and dates. In the case of a schedule, the step dates may be
--   subject to adjustment in accordance with any adjustments specified in
--   calculationPeriodDatesAdjustments.</li>
--   <li>The future value notional is normally only required for BRL CDI
--   Swaps. The value is calculated as follows: Future Value Notional =
--   Notional Amount * (1 + Fixed Rate) ^ (Fixed Rate Day Count Fraction).
--   The currency should always match that expressed in the notional
--   schedule. The value date should match the adjusted termination
--   date.</li>
--   </ul>
--   
--   <ol>
--   <li>The base element for the floating rate calculation
--   definitions.</li>
--   </ol>
calculation_choice1 :: Calculation -> OneOf2 (Schedule, Maybe (FutureValueAmount)) Rate

-- | The day count fraction.
calculation_dayCountFraction :: Calculation -> DayCountFraction

-- | The parameters specifying any discounting conventions that may apply.
--   This element must only be included if discounting applies.
calculation_discounting :: Calculation -> Maybe Discounting

-- | If more that one calculation period contributes to a single payment
--   amount this element specifies whether compounding is applicable, and
--   if so, what compounding method is to be used. This element must only
--   be included when more that one calculation period contributes to a
--   single payment amount.
calculation_compoundingMethod :: Calculation -> Maybe CompoundingMethodEnum

-- | A type defining the parameters used in the calculation of a fixed or
--   floating rate calculation period amount. This type forms part of
--   cashflows representation of a swap stream.
data CalculationPeriod
CalculationPeriod :: Maybe ID -> Maybe Date -> Maybe Date -> Maybe Date -> Maybe Date -> Maybe PositiveInteger -> (Maybe (OneOf2 Decimal FxLinkedNotionalAmount)) -> (Maybe (OneOf2 FloatingRateDefinition Decimal)) -> Maybe Decimal -> Maybe Money -> Maybe Decimal -> CalculationPeriod
calcPeriod_ID :: CalculationPeriod -> Maybe ID
calcPeriod_unadjustedStartDate :: CalculationPeriod -> Maybe Date
calcPeriod_unadjustedEndDate :: CalculationPeriod -> Maybe Date

-- | The calculation period start date, adjusted according to any relevant
--   business day convention.
calcPeriod_adjustedStartDate :: CalculationPeriod -> Maybe Date

-- | The calculation period end date, adjusted according to any relevant
--   business day convention.
calcPeriod_adjustedEndDate :: CalculationPeriod -> Maybe Date

-- | The number of days from the adjusted effective / start date to the
--   adjusted termination / end date calculated in accordance with the
--   applicable day count fraction.
calculationPeriod_numberOfDays :: CalculationPeriod -> Maybe PositiveInteger

-- | Choice between:
--   
--   <ol>
--   <li>The amount that a cashflow will accrue interest on.</li>
--   <li>The amount that a cashflow will accrue interest on. This is the
--   calculated amount of the fx linked - ie the other currency notional
--   amount multiplied by the appropriate fx spot rate.</li>
--   </ol>
calcPeriod_choice5 :: CalculationPeriod -> (Maybe (OneOf2 Decimal FxLinkedNotionalAmount))

-- | Choice between:
--   
--   <ol>
--   <li>The floating rate reset information for the calculation
--   period.</li>
--   <li>The calculation period fixed rate. A per annum rate, expressed as
--   a decimal. A fixed rate of 5% would be represented as 0.05.</li>
--   </ol>
calcPeriod_choice6 :: CalculationPeriod -> (Maybe (OneOf2 FloatingRateDefinition Decimal))

-- | The year fraction value of the calculation period, result of applying
--   the ISDA rules for day count fraction defined in the ISDA Annex.
calcPeriod_dayCountYearFraction :: CalculationPeriod -> Maybe Decimal

-- | The amount representing the forecast of the accrued value of the
--   calculation period. An intermediate value used to generate the
--   forecastPaymentAmount in the PaymentCalculationPeriod.
calcPeriod_forecastAmount :: CalculationPeriod -> Maybe Money

-- | A value representing the forecast rate used to calculate the forecast
--   future value of the accrual period. This is a calculated rate
--   determined based on averaging the rates in the rateObservation
--   elements, and incorporates all of the rate treatment and averaging
--   rules. A value of 1% should be represented as 0.01
calcPeriod_forecastRate :: CalculationPeriod -> Maybe Decimal

-- | A type defining the parameters used in the calculation of fixed or
--   floating rate calculation period amounts or for specifying a known
--   calculation period amount or known amount schedule.
data CalculationPeriodAmount
CalculationPeriodAmount :: OneOf2 Calculation AmountSchedule -> CalculationPeriodAmount

-- | Choice between:
--   
--   <ol>
--   <li>The parameters used in the calculation of fixed or floaring rate
--   calculation period amounts.</li>
--   <li>The known calculation period amount or a known amount schedule
--   expressed as explicit known amounts and dates. In the case of a
--   schedule, the step dates may be subject to adjustment in accordance
--   with any adjustments specified in
--   calculationPeriodDatesAdjustments.</li>
--   </ol>
calcPeriodAmount_choice0 :: CalculationPeriodAmount -> OneOf2 Calculation AmountSchedule

-- | A type defining the parameters used to generate the calculation period
--   dates schedule, including the specification of any initial or final
--   stub calculation periods. A calculation perod schedule consists of an
--   optional initial stub calculation period, one or more regular
--   calculation periods and an optional final stub calculation period. In
--   the absence of any initial or final stub calculation periods, the
--   regular part of the calculation period schedule is assumed to be
--   between the effective date and the termination date. No implicit stubs
--   are allowed, i.e. stubs must be explicitly specified using an
--   appropriate combination of firstPeriodStateDate,
--   firstRegularPeriodStartDate and lastRegularPeriodEndDate.
data CalculationPeriodDates
CalculationPeriodDates :: Maybe ID -> OneOf2 AdjustableDate AdjustedRelativeDateOffset -> OneOf2 AdjustableDate RelativeDateOffset -> Maybe BusinessDayAdjustments -> Maybe AdjustableDate -> Maybe Date -> Maybe Date -> Maybe Date -> Maybe StubPeriodTypeEnum -> Maybe CalculationPeriodFrequency -> CalculationPeriodDates
calcPeriodDates_ID :: CalculationPeriodDates -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>The first day of the term of the trade. This day may be subject to
--   adjustment in accordance with a business day convention.</li>
--   <li>Defines the effective date.</li>
--   </ol>
calcPeriodDates_choice0 :: CalculationPeriodDates -> OneOf2 AdjustableDate AdjustedRelativeDateOffset

-- | Choice between:
--   
--   <ol>
--   <li>The last day of the term of the trade. This day may be subject to
--   adjustment in accordance with a business day convention.</li>
--   <li>The term/maturity of the swap, express as a tenor (typically in
--   years).</li>
--   </ol>
calcPeriodDates_choice1 :: CalculationPeriodDates -> OneOf2 AdjustableDate RelativeDateOffset

-- | The business day convention to apply to each calculation period end
--   date if it would otherwise fall on a day that is not a business day in
--   the specified financial business centers.
calculationPeriodDates_adjustments :: CalculationPeriodDates -> Maybe BusinessDayAdjustments

-- | The start date of the calculation period if the date falls before the
--   effective date. It must only be specified if it is not equal to the
--   effective date. This date may be subject to adjustment in accordance
--   with a business day convention.
calcPeriodDates_firstPeriodStartDate :: CalculationPeriodDates -> Maybe AdjustableDate

-- | The start date of the regular part of the calculation period schedule.
--   It must only be specified if there is an initial stub calculation
--   period. This day may be subject to adjustment in accordance with any
--   adjustments specified in calculationPeriodDatesAdjustments.
calcPeriodDates_firstRegularPeriodStartDate :: CalculationPeriodDates -> Maybe Date

-- | The end date of the initial compounding period when compounding is
--   applicable. It must only be specified when the compoundingMethod
--   element is present and not equal to a value of None. This date may be
--   subject to adjustment in accordance with any adjustments specified in
--   calculationPeriodDatesAdjustments.
calcPeriodDates_firstCompoundingPeriodEndDate :: CalculationPeriodDates -> Maybe Date

-- | The end date of the regular part of the calculation period schedule.
--   It must only be specified if there is a final stub calculation period.
--   This day may be subject to adjustment in accordance with any
--   adjustments specified in calculationPeriodDatesAdjustments.
calcPeriodDates_lastRegularPeriodEndDate :: CalculationPeriodDates -> Maybe Date

-- | Method to allocate any irregular period remaining after regular
--   periods have been allocated between the effective and termination
--   date.
calcPeriodDates_stubPeriodType :: CalculationPeriodDates -> Maybe StubPeriodTypeEnum

-- | The frequency at which calculation period end dates occur with the
--   regular part of the calculation period schedule and their roll date
--   convention.
calcPeriodDates_calculationPeriodFrequency :: CalculationPeriodDates -> Maybe CalculationPeriodFrequency

-- | Reference to a calculation period dates component.
data CalculationPeriodDatesReference
CalculationPeriodDatesReference :: IDREF -> CalculationPeriodDatesReference
calcPeriodDatesRef_href :: CalculationPeriodDatesReference -> IDREF

-- | A type defining the right of a party to cancel a swap transaction on
--   the specified exercise dates. The provision is for <tt>walkaway</tt>
--   cancellation (i.e. the fair value of the swap is not paid). A fee
--   payable on exercise can be specified.
data CancelableProvision
CancelableProvision :: Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe Exercise -> Maybe ExerciseNotice -> Maybe Boolean -> Maybe CancelableProvisionAdjustedDates -> [FinalCalculationPeriodDateAdjustment] -> Maybe SimplePayment -> CancelableProvision

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
cancelProvis_buyerPartyReference :: CancelableProvision -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
cancelProvis_buyerAccountReference :: CancelableProvision -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
cancelProvis_sellerPartyReference :: CancelableProvision -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
cancelProvis_sellerAccountReference :: CancelableProvision -> Maybe AccountReference

-- | An placeholder for the actual option exercise definitions.
cancelProvis_exercise :: CancelableProvision -> Maybe Exercise

-- | Definition of the party to whom notice of exercise should be given.
cancelProvis_exerciseNotice :: CancelableProvision -> Maybe ExerciseNotice

-- | A flag to indicate whether follow-up confirmation of exercise (written
--   or electronic) is required following telephonic notice by the buyer to
--   the seller or seller's agent.
cancelProvis_followUpConfirmation :: CancelableProvision -> Maybe Boolean

-- | The adjusted dates associated with a cancelable provision. These dates
--   have been adjusted for any applicable business day convention.
cancelableProvision_adjustedDates :: CancelableProvision -> Maybe CancelableProvisionAdjustedDates

-- | Business date convention adjustment to final payment period per leg
--   (swapStream) upon exercise event. The adjustments can be made in-line
--   with leg level BDC's or they can be specified seperately.
cancelProvis_finalCalculationPeriodDateAdjustment :: CancelableProvision -> [FinalCalculationPeriodDateAdjustment]

-- | An initial fee for the cancelable option.
cancelProvis_initialFee :: CancelableProvision -> Maybe SimplePayment

-- | A type to define the adjusted dates for a cancelable provision on a
--   swap transaction.
data CancelableProvisionAdjustedDates
CancelableProvisionAdjustedDates :: [CancellationEvent] -> CancelableProvisionAdjustedDates

-- | The adjusted dates for an individual cancellation date.
cancelProvisAdjustDates_cancellationEvent :: CancelableProvisionAdjustedDates -> [CancellationEvent]

-- | The adjusted dates for a specific cancellation date, including the
--   adjusted exercise date and adjusted termination date.
data CancellationEvent
CancellationEvent :: Maybe ID -> Maybe Date -> Maybe Date -> CancellationEvent
cancelEvent_ID :: CancellationEvent -> Maybe ID

-- | The date on which option exercise takes place. This date should
--   already be adjusted for any applicable business day convention.
cancelEvent_adjustedExerciseDate :: CancellationEvent -> Maybe Date

-- | The early termination date that is applicable if an early termination
--   provision is exercised. This date should already be adjusted for any
--   applicable business day convention.
cancelEvent_adjustedEarlyTerminationDate :: CancellationEvent -> Maybe Date

-- | A type defining an interest rate cap, floor, or cap/floor strategy
--   (e.g. collar) product.
data CapFloor
CapFloor :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe InterestRateStream -> [Payment] -> [Payment] -> Maybe EarlyTerminationProvision -> CapFloor
capFloor_ID :: CapFloor -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
capFloor_primaryAssetClass :: CapFloor -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
capFloor_secondaryAssetClass :: CapFloor -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
capFloor_productType :: CapFloor -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
capFloor_productId :: CapFloor -> [ProductId]
capFloor_stream :: CapFloor -> Maybe InterestRateStream

-- | The option premium amount payable by buyer to seller on the specified
--   payment date.
capFloor_premium :: CapFloor -> [Payment]

-- | Additional payments between the principal parties.
capFloor_additionalPayment :: CapFloor -> [Payment]

-- | Parameters specifying provisions relating to the optional and
--   mandatory early terminarion of a CapFloor transaction.
capFloor_earlyTerminationProvision :: CapFloor -> Maybe EarlyTerminationProvision

-- | A type defining the cashflow representation of a swap trade.
data Cashflows
Cashflows :: Maybe Boolean -> [PrincipalExchange] -> [PaymentCalculationPeriod] -> Cashflows

-- | A true/false flag to indicate whether the cashflows match the
--   parametric definition of the stream, i.e. whether the cashflows could
--   be regenerated from the parameters without loss of information.
cashflows_matchParameters :: Cashflows -> Maybe Boolean

-- | The initial, intermediate and final principal exchange amounts.
--   Typically required on cross currency interest rate swaps where actual
--   exchanges of principal occur. A list of principal exchange elements
--   may be ordered in the document by ascending adjusted principal
--   exchange date. An FpML document containing an unordered principal
--   exchange list is still regarded as a conformant document.
cashflows_principalExchange :: Cashflows -> [PrincipalExchange]

-- | The adjusted payment date and associated calculation period parameters
--   required to calculate the actual or projected payment amount. A list
--   of payment calculation period elements may be ordered in the document
--   by ascending adjusted payment date. An FpML document containing an
--   unordered list of payment calculation periods is still regarded as a
--   conformant document.
cashflows_paymentCalculationPeriod :: Cashflows -> [PaymentCalculationPeriod]

-- | A type defining the parameters necessary for each of the ISDA cash
--   price methods for cash settlement.
data CashPriceMethod
CashPriceMethod :: Maybe CashSettlementReferenceBanks -> Maybe Currency -> Maybe QuotationRateTypeEnum -> CashPriceMethod

-- | A container for a set of reference institutions. These reference
--   institutions may be called upon to provide rate quotations as part of
--   the method to determine the applicable cash settlement amount. If
--   institutions are not specified, it is assumed that reference
--   institutions will be agreed between the parties on the exercise date,
--   or in the case of swap transaction to which mandatory early
--   termination is applicable, the cash settlement valuation date.
cashPriceMethod_cashSettlementReferenceBanks :: CashPriceMethod -> Maybe CashSettlementReferenceBanks

-- | The currency in which the cash settlement amount will be calculated
--   and settled.
cashPriceMethod_cashSettlementCurrency :: CashPriceMethod -> Maybe Currency

-- | Which rate quote is to be observed, either Bid, Mid, Offer or
--   Exercising Party Pays. The meaning of Exercising Party Pays is defined
--   in the 2000 ISDA Definitions, Section 17.2. Certain Definitions
--   Relating to Cash Settlement, paragraph (j)
cashPriceMethod_quotationRateType :: CashPriceMethod -> Maybe QuotationRateTypeEnum

-- | A type to define the cash settlement terms for a product where cash
--   settlement is applicable.
data CashSettlement
CashSettlement :: Maybe ID -> Maybe BusinessCenterTime -> Maybe RelativeDateOffset -> Maybe CashSettlementPaymentDate -> (Maybe (OneOf7 CashPriceMethod CashPriceMethod YieldCurveMethod YieldCurveMethod YieldCurveMethod CrossCurrencyMethod YieldCurveMethod)) -> CashSettlement
cashSettl_ID :: CashSettlement -> Maybe ID

-- | The time of the cash settlement valuation date when the cash
--   settlement amount will be determined according to the cash settlement
--   method if the parties have not otherwise been able to agree the cash
--   settlement amount.
cashSettlement_valuationTime :: CashSettlement -> Maybe BusinessCenterTime

-- | The date on which the cash settlement amount will be determined
--   according to the cash settlement method if the parties have not
--   otherwise been able to agree the cash settlement amount.
cashSettlement_valuationDate :: CashSettlement -> Maybe RelativeDateOffset

-- | The date on which the cash settlement amount will be paid, subject to
--   adjustment in accordance with any applicable business day convention.
--   This component would not be present for a mandatory early termination
--   provision where the cash settlement payment date is the mandatory
--   early termination date.
cashSettlement_paymentDate :: CashSettlement -> Maybe CashSettlementPaymentDate

-- | Choice between:
--   
--   <ol>
--   <li>An ISDA defined cash settlement method used for the determination
--   of the applicable cash settlement amount. The method is defined in the
--   2006 ISDA Definitions, Section 18.3. Cash Settlement Methods,
--   paragraph (a).</li>
--   <li>An ISDA defined cash settlement method used for the determination
--   of the applicable cash settlement amount. The method is defined in the
--   2006 ISDA Definitions, Section 18.3. Cash Settlement Methods,
--   paragraph (b).</li>
--   <li>An ISDA defined cash settlement method used for the determination
--   of the applicable cash settlement amount. The method is defined in the
--   2006 ISDA Definitions, Section 18.3. Cash Settlement Methods,
--   paragraph (c).</li>
--   <li>An ISDA defined cash settlement method used for the determination
--   of the applicable cash settlement amount. The method is defined in the
--   2006 ISDA Definitions, Section 18.3. Cash Settlement Methods,
--   paragraph (d).</li>
--   <li>An ISDA defined cash settlement method used for the determination
--   of the applicable cash settlement amount. The method is defined in the
--   2006 ISDA Definitions, Section 18.3. Cash Settlement Methods,
--   paragraph (e).</li>
--   <li>An ISDA defined cash settlement method used for the determination
--   of the applicable cash settlement amount. The method is defined in the
--   2006 ISDA Definitions, Section 18.3. Cash Settlement Methods,
--   paragraph (f) (published in Supplement number 23).</li>
--   <li>An ISDA defined cash settlement method used for the determination
--   of the applicable cash settlement amount. The method is defined in the
--   2006 ISDA Definitions, Section 18.3. Cash Settlement Methods,
--   paragraph (g) (published in Supplement number 28).</li>
--   </ol>
cashSettl_choice3 :: CashSettlement -> (Maybe (OneOf7 CashPriceMethod CashPriceMethod YieldCurveMethod YieldCurveMethod YieldCurveMethod CrossCurrencyMethod YieldCurveMethod))

-- | A type defining the cash settlement payment date(s) as either a set of
--   explicit dates, together with applicable adjustments, or as a date
--   relative to some other (anchor) date, or as any date in a range of
--   contiguous business days.
data CashSettlementPaymentDate
CashSettlementPaymentDate :: Maybe ID -> (Maybe (OneOf3 AdjustableDates RelativeDateOffset BusinessDateRange)) -> CashSettlementPaymentDate
cashSettlPaymentDate_ID :: CashSettlementPaymentDate -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>A series of dates that shall be subject to adjustment if they
--   would otherwise fall on a day that is not a business day in the
--   specified business centers, together with the convention for adjusting
--   the date.</li>
--   <li>A date specified as some offset to another date (the anchor
--   date).</li>
--   <li>A range of contiguous business days.</li>
--   </ol>
cashSettlPaymentDate_choice0 :: CashSettlementPaymentDate -> (Maybe (OneOf3 AdjustableDates RelativeDateOffset BusinessDateRange))
data CrossCurrencyMethod
CrossCurrencyMethod :: Maybe CashSettlementReferenceBanks -> [Currency] -> Maybe QuotationRateTypeEnum -> CrossCurrencyMethod

-- | A container for a set of reference institutions. These reference
--   institutions may be called upon to provide rate quotations as part of
--   the method to determine the applicable cash settlement amount. If
--   institutions are not specified, it is assumed that reference
--   institutions will be agreed between the parties on the exercise date,
--   or in the case of swap transaction to which mandatory early
--   termination is applicable, the cash settlement valuation date.
crossCurrenMethod_cashSettlementReferenceBanks :: CrossCurrencyMethod -> Maybe CashSettlementReferenceBanks

-- | The currency, or currencies, in which the cash settlement amount(s)
--   will be calculated and settled. While the order in which the
--   currencies are stated is unimportant, the cash settlement currency or
--   currencies must correspond to one or both of the constituent
--   currencies of the swap transaction.
crossCurrenMethod_cashSettlementCurrency :: CrossCurrencyMethod -> [Currency]

-- | Which rate quote is to be observed, either Bid, Mid, Offer or
--   Exercising Party Pays. The meaning of Exercising Party Pays is defined
--   in the 2000 ISDA Definitions, Section 17.2. Certain Definitions
--   Relating to Cash Settlement, paragraph (j)
crossCurrenMethod_quotationRateType :: CrossCurrencyMethod -> Maybe QuotationRateTypeEnum

-- | A type to provide the ability to point to multiple payment nodes in
--   the document through the unbounded paymentDatesReference.
data DateRelativeToCalculationPeriodDates
DateRelativeToCalculationPeriodDates :: [CalculationPeriodDatesReference] -> DateRelativeToCalculationPeriodDates

-- | A set of href pointers to calculation period dates defined somewhere
--   else in the document.
drtcpd_calculationPeriodDatesReference :: DateRelativeToCalculationPeriodDates -> [CalculationPeriodDatesReference]

-- | A type to provide the ability to point to multiple payment nodes in
--   the document through the unbounded paymentDatesReference.
data DateRelativeToPaymentDates
DateRelativeToPaymentDates :: [PaymentDatesReference] -> DateRelativeToPaymentDates

-- | A set of href pointers to payment dates defined somewhere else in the
--   document.
dateRelatToPaymentDates_paymentDatesReference :: DateRelativeToPaymentDates -> [PaymentDatesReference]

-- | A type defining discounting information. The 2000 ISDA definitions,
--   section 8.4. discounting (related to the calculation of a discounted
--   fixed amount or floating amount) apply. This type must only be
--   included if discounting applies.
data Discounting
Discounting :: Maybe DiscountingTypeEnum -> Maybe Decimal -> Maybe DayCountFraction -> Discounting

-- | The discounting method that is applicable.
discounting_type :: Discounting -> Maybe DiscountingTypeEnum

-- | A discount rate, expressed as a decimal, to be used in the calculation
--   of a discounted amount. A discount amount of 5% would be represented
--   as 0.05.
discounting_discountRate :: Discounting -> Maybe Decimal

-- | A discount day count fraction to be used in the calculation of a
--   discounted amount.
discounting_discountRateDayCountFraction :: Discounting -> Maybe DayCountFraction

-- | A type to define the adjusted dates associated with an early
--   termination provision.
data EarlyTerminationEvent
EarlyTerminationEvent :: Maybe ID -> Maybe Date -> Maybe Date -> Maybe Date -> Maybe Date -> Maybe Date -> EarlyTerminationEvent
earlyTerminEvent_ID :: EarlyTerminationEvent -> Maybe ID

-- | The date on which option exercise takes place. This date should
--   already be adjusted for any applicable business day convention.
earlyTerminEvent_adjustedExerciseDate :: EarlyTerminationEvent -> Maybe Date

-- | The early termination date that is applicable if an early termination
--   provision is exercised. This date should already be adjusted for any
--   applicable business day convention.
earlyTerminEvent_adjustedEarlyTerminationDate :: EarlyTerminationEvent -> Maybe Date

-- | The date by which the cash settlement amount must be agreed. This date
--   should already be adjusted for any applicable business day convention.
earlyTerminEvent_adjustedCashSettlementValuationDate :: EarlyTerminationEvent -> Maybe Date

-- | The date on which the cash settlement amount is paid. This date should
--   already be adjusted for any applicable business dat convention.
earlyTerminEvent_adjustedCashSettlementPaymentDate :: EarlyTerminationEvent -> Maybe Date

-- | The date on which the exercise fee amount is paid. This date should
--   already be adjusted for any applicable business day convention.
earlyTerminEvent_adjustedExerciseFeePaymentDate :: EarlyTerminationEvent -> Maybe Date

-- | A type defining an early termination provision for a swap. This early
--   termination is at fair value, i.e. on termination the fair value of
--   the product must be settled between the parties.
data EarlyTerminationProvision
EarlyTerminationProvision :: Maybe ID -> OneOf1 (Maybe (OneOf1 (Maybe (Period), Maybe (MandatoryEarlyTermination))), Maybe (OneOf1 (Maybe (ExercisePeriod), Maybe (OptionalEarlyTermination)))) -> EarlyTerminationProvision
earlyTerminProvis_ID :: EarlyTerminationProvision -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>unknown</li>
--   <li>unknown</li>
--   </ul>
earlyTerminProvis_choice0 :: EarlyTerminationProvision -> OneOf1 (Maybe (OneOf1 (Maybe (Period), Maybe (MandatoryEarlyTermination))), Maybe (OneOf1 (Maybe (ExercisePeriod), Maybe (OptionalEarlyTermination))))

-- | A type defining the adjusted dates associated with a particular
--   exercise event.
data ExerciseEvent
ExerciseEvent :: Maybe ID -> Maybe Date -> Maybe Date -> Maybe Date -> Maybe Date -> Maybe Date -> ExerciseEvent
exercEvent_ID :: ExerciseEvent -> Maybe ID

-- | The date on which option exercise takes place. This date should
--   already be adjusted for any applicable business day convention.
exercEvent_adjustedExerciseDate :: ExerciseEvent -> Maybe Date

-- | The effective date of the underlying swap associated with a given
--   exercise date. This date should already be adjusted for any applicable
--   business day convention.
exercEvent_adjustedRelevantSwapEffectiveDate :: ExerciseEvent -> Maybe Date

-- | The date by which the cash settlement amount must be agreed. This date
--   should already be adjusted for any applicable business day convention.
exercEvent_adjustedCashSettlementValuationDate :: ExerciseEvent -> Maybe Date

-- | The date on which the cash settlement amount is paid. This date should
--   already be adjusted for any applicable business dat convention.
exercEvent_adjustedCashSettlementPaymentDate :: ExerciseEvent -> Maybe Date

-- | The date on which the exercise fee amount is paid. This date should
--   already be adjusted for any applicable business day convention.
exercEvent_adjustedExerciseFeePaymentDate :: ExerciseEvent -> Maybe Date

-- | This defines the time interval to the start of the exercise period,
--   i.e. the earliest exercise date, and the frequency of subsequent
--   exercise dates (if any).
data ExercisePeriod
ExercisePeriod :: Maybe ID -> Maybe Period -> Maybe Period -> ExercisePeriod
exercPeriod_ID :: ExercisePeriod -> Maybe ID

-- | The time interval to the first (and possibly only) exercise date in
--   the exercise period.
exercPeriod_earliestExerciseDateTenor :: ExercisePeriod -> Maybe Period

-- | The frequency of subsequent exercise dates in the exercise period
--   following the earliest exercise date. An interval of 1 day should be
--   used to indicate an American style exercise period.
exercPeriod_exerciseFrequency :: ExercisePeriod -> Maybe Period

-- | A type defining an option to extend an existing swap transaction on
--   the specified exercise dates for a term ending on the specified new
--   termination date.
data ExtendibleProvision
ExtendibleProvision :: Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> Maybe Exercise -> Maybe ExerciseNotice -> Maybe Boolean -> Maybe ExtendibleProvisionAdjustedDates -> ExtendibleProvision

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
extendProvis_buyerPartyReference :: ExtendibleProvision -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
extendProvis_buyerAccountReference :: ExtendibleProvision -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
extendProvis_sellerPartyReference :: ExtendibleProvision -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
extendProvis_sellerAccountReference :: ExtendibleProvision -> Maybe AccountReference

-- | An placeholder for the actual option exercise definitions.
extendProvis_exercise :: ExtendibleProvision -> Maybe Exercise

-- | Definition of the party to whom notice of exercise should be given.
extendProvis_exerciseNotice :: ExtendibleProvision -> Maybe ExerciseNotice

-- | A flag to indicate whether follow-up confirmation of exercise (written
--   or electronic) is required following telephonic notice by the buyer to
--   the seller or seller's agent.
extendProvis_followUpConfirmation :: ExtendibleProvision -> Maybe Boolean

-- | The adjusted dates associated with an extendible provision. These
--   dates have been adjusted for any applicable business day convention.
extendibleProvision_adjustedDates :: ExtendibleProvision -> Maybe ExtendibleProvisionAdjustedDates

-- | A type defining the adjusted dates associated with a provision to
--   extend a swap.
data ExtendibleProvisionAdjustedDates
ExtendibleProvisionAdjustedDates :: [ExtensionEvent] -> ExtendibleProvisionAdjustedDates

-- | The adjusted dates associated with a single extendible exercise date.
extendProvisAdjustDates_extensionEvent :: ExtendibleProvisionAdjustedDates -> [ExtensionEvent]

-- | A type to define the adjusted dates associated with an individual
--   extension event.
data ExtensionEvent
ExtensionEvent :: Maybe ID -> Maybe Date -> Maybe Date -> ExtensionEvent
extensEvent_ID :: ExtensionEvent -> Maybe ID

-- | The date on which option exercise takes place. This date should
--   already be adjusted for any applicable business day convention.
extensEvent_adjustedExerciseDate :: ExtensionEvent -> Maybe Date

-- | The termination date if an extendible provision is exercised. This
--   date should already be adjusted for any applicable business day
--   convention.
extensEvent_adjustedExtendedTerminationDate :: ExtensionEvent -> Maybe Date

-- | A type to define business date convention adjustment to final payment
--   period per leg.
data FinalCalculationPeriodDateAdjustment
FinalCalculationPeriodDateAdjustment :: Maybe RelevantUnderlyingDateReference -> InterestRateStreamReference -> Maybe BusinessDayConventionEnum -> FinalCalculationPeriodDateAdjustment

-- | Reference to the unadjusted cancellation effective dates.
fcpda_relevantUnderlyingDateReference :: FinalCalculationPeriodDateAdjustment -> Maybe RelevantUnderlyingDateReference

-- | Reference to the leg, where date adjustments may apply.
fcpda_swapStreamReference :: FinalCalculationPeriodDateAdjustment -> InterestRateStreamReference

-- | Override business date convention. This takes precedence over leg
--   level information.
fcpda_businessDayConvention :: FinalCalculationPeriodDateAdjustment -> Maybe BusinessDayConventionEnum

-- | The method, prioritzed by the order it is listed in this element, to
--   get a replacement rate for the disrupted settlement rate option.
data FallbackReferencePrice
FallbackReferencePrice :: Maybe ValuationPostponement -> [SettlementRateOption] -> Maybe Empty -> Maybe CalculationAgent -> FallbackReferencePrice

-- | Specifies how long to wait to get a quote from a settlement rate
--   option upon a price source disruption
fallbRefPrice_valuationPostponement :: FallbackReferencePrice -> Maybe ValuationPostponement

-- | This settlement rate option will be used in its place.
fallbRefPrice_fallbackSettlementRateOption :: FallbackReferencePrice -> [SettlementRateOption]

-- | Request rate quotes from the market.
fallbRefPrice_fallbackSurveyValuationPostponenment :: FallbackReferencePrice -> Maybe Empty

-- | The calculation agent will decide the rate.
fallbRefPrice_calculationAgentDetermination :: FallbackReferencePrice -> Maybe CalculationAgent

-- | A type defining parameters associated with a floating rate reset. This
--   type forms part of the cashflows representation of a stream.
data FloatingRateDefinition
FloatingRateDefinition :: Maybe Decimal -> [RateObservation] -> Maybe Decimal -> Maybe Decimal -> [Strike] -> [Strike] -> FloatingRateDefinition

-- | The final calculated rate for a calculation period after any required
--   averaging of rates A calculated rate of 5% would be represented as
--   0.05.
floatRateDefin_calculatedRate :: FloatingRateDefinition -> Maybe Decimal

-- | The details of a particular rate observation, including the fixing
--   date and observed rate. A list of rate observation elements may be
--   ordered in the document by ascending adjusted fixing date. An FpML
--   document containing an unordered list of rate observations is still
--   regarded as a conformant document.
floatRateDefin_rateObservation :: FloatingRateDefinition -> [RateObservation]

-- | A rate multiplier to apply to the floating rate. The multiplier can be
--   a positive or negative decimal. This element should only be included
--   if the multiplier is not equal to 1 (one).
floatRateDefin_floatingRateMultiplier :: FloatingRateDefinition -> Maybe Decimal

-- | The ISDA Spread, if any, which applies for the calculation period. The
--   spread is a per annum rate, expressed as a decimal. For purposes of
--   determining a calculation period amount, if positive the spread will
--   be added to the floating rate and if negative the spread will be
--   subtracted from the floating rate. A positive 10 basis point (0.1%)
--   spread would be represented as 0.001.
floatRateDefin_spread :: FloatingRateDefinition -> Maybe Decimal

-- | The cap rate, if any, which applies to the floating rate for the
--   calculation period. The cap rate (strike) is only required where the
--   floating rate on a swap stream is capped at a certain strike level.
--   The cap rate is assumed to be exclusive of any spread and is a per
--   annum rate, expressed as a decimal. A cap rate of 5% would be
--   represented as 0.05.
floatRateDefin_capRate :: FloatingRateDefinition -> [Strike]

-- | The floor rate, if any, which applies to the floating rate for the
--   calculation period. The floor rate (strike) is only required where the
--   floating rate on a swap stream is floored at a certain strike level.
--   The floor rate is assumed to be exclusive of any spread and is a per
--   annum rate, expressed as a decimal. The floor rate of 5% would be
--   represented as 0.05.
floatRateDefin_floorRate :: FloatingRateDefinition -> [Strike]

-- | A type defining a Forward Rate Agreement (FRA) product.
data Fra
Fra :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> RequiredIdentifierDate -> Date -> Maybe AdjustableDate -> Maybe RelativeDateOffset -> DayCountFraction -> Maybe PositiveInteger -> Money -> Decimal -> FloatingRateIndex -> [Period] -> Maybe FraDiscountingEnum -> Fra
fra_ID :: Fra -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
fra_primaryAssetClass :: Fra -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
fra_secondaryAssetClass :: Fra -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
fra_productType :: Fra -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
fra_productId :: Fra -> [ProductId]

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
fra_buyerPartyReference :: Fra -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
fra_buyerAccountReference :: Fra -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
fra_sellerPartyReference :: Fra -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
fra_sellerAccountReference :: Fra -> Maybe AccountReference

-- | The start date of the calculation period. This date should already be
--   adjusted for any applicable business day convention. This is also the
--   date when the observed rate is applied, the reset date.
fra_adjustedEffectiveDate :: Fra -> RequiredIdentifierDate

-- | The end date of the calculation period. This date should already be
--   adjusted for any applicable business day convention.
fra_adjustedTerminationDate :: Fra -> Date

-- | The payment date. This date is subject to adjustment in accordance
--   with any applicable business day convention.
fra_paymentDate :: Fra -> Maybe AdjustableDate

-- | Specifies the fixing date relative to the reset date in terms of a
--   business days offset and an associated set of financial business
--   centers. Normally these offset calculation rules will be those
--   specified in the ISDA definition for the relevant floating rate index
--   (ISDA's Floating Rate Option). However, non-standard offset
--   calculation rules may apply for a trade if mutually agreed by the
--   principal parties to the transaction. The href attribute on the
--   dateRelativeTo element should reference the id attribute on the
--   adjustedEffectiveDate element.
fra_fixingDateOffset :: Fra -> Maybe RelativeDateOffset

-- | The day count fraction.
fra_dayCountFraction :: Fra -> DayCountFraction

-- | The number of days from the adjusted effective date to the adjusted
--   termination date calculated in accordance with the applicable day
--   count fraction.
fra_calculationPeriodNumberOfDays :: Fra -> Maybe PositiveInteger

-- | The notional amount.
fra_notional :: Fra -> Money

-- | The calculation period fixed rate. A per annum rate, expressed as a
--   decimal. A fixed rate of 5% would be represented as 0.05.
fra_fixedRate :: Fra -> Decimal
fra_floatingRateIndex :: Fra -> FloatingRateIndex

-- | The ISDA Designated Maturity, i.e. the tenor of the floating rate.
fra_indexTenor :: Fra -> [Period]

-- | Specifies whether discounting applies and, if so, what type.
fra_discounting :: Fra -> Maybe FraDiscountingEnum

-- | A type that is extending the Offset structure for providing the
--   ability to specify an FX fixing date as an offset to dates specified
--   somewhere else in the document.
data FxFixingDate
FxFixingDate :: Maybe ID -> Integer -> PeriodEnum -> Maybe DayTypeEnum -> Maybe BusinessDayConventionEnum -> (Maybe (OneOf2 BusinessCentersReference BusinessCenters)) -> (Maybe (OneOf2 DateRelativeToPaymentDates DateRelativeToCalculationPeriodDates)) -> FxFixingDate
fxFixingDate_ID :: FxFixingDate -> Maybe ID

-- | A time period multiplier, e.g. 1, 2 or 3 etc. A negative value can be
--   used when specifying an offset relative to another date, e.g. -2 days.
fxFixingDate_periodMultiplier :: FxFixingDate -> Integer

-- | A time period, e.g. a day, week, month or year of the stream. If the
--   periodMultiplier value is 0 (zero) then period must contain the value
--   D (day).
fxFixingDate_period :: FxFixingDate -> PeriodEnum

-- | In the case of an offset specified as a number of days, this element
--   defines whether consideration is given as to whether a day is a good
--   business day or not. If a day type of business days is specified then
--   non-business days are ignored when calculating the offset. The
--   financial business centers to use for determination of business days
--   are implied by the context in which this element is used. This element
--   must only be included when the offset is specified as a number of
--   days. If the offset is zero days then the dayType element should not
--   be included.
fxFixingDate_dayType :: FxFixingDate -> Maybe DayTypeEnum

-- | The convention for adjusting a date if it would otherwise fall on a
--   day that is not a business day.
fxFixingDate_businessDayConvention :: FxFixingDate -> Maybe BusinessDayConventionEnum

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to a set of financial business centers
--   defined elsewhere in the document. This set of business centers is
--   used to determine whether a particular day is a business day or
--   not.</li>
--   <li>businessCenters</li>
--   </ol>
fxFixingDate_choice4 :: FxFixingDate -> (Maybe (OneOf2 BusinessCentersReference BusinessCenters))

-- | Choice between:
--   
--   <ol>
--   <li>The payment date references on which settlements in
--   non-deliverable currency are due and will then have to be converted
--   according to the terms specified through the other parts of the
--   nonDeliverableSettlement structure.</li>
--   <li>The calculation period references on which settlements in
--   non-deliverable currency are due and will then have to be converted
--   according to the terms specified through the other parts of the
--   nonDeliverableSettlement structure. Implemented for Brazilian-CDI
--   swaps where it will refer to the termination date of the appropriate
--   leg.</li>
--   </ol>
fxFixingDate_choice5 :: FxFixingDate -> (Maybe (OneOf2 DateRelativeToPaymentDates DateRelativeToCalculationPeriodDates))

-- | A type to describe the cashflow representation for fx linked
--   notionals.
data FxLinkedNotionalAmount
FxLinkedNotionalAmount :: Maybe Date -> Maybe Date -> Maybe Decimal -> Maybe Decimal -> FxLinkedNotionalAmount
fxLinkedNotionAmount_resetDate :: FxLinkedNotionalAmount -> Maybe Date

-- | The date on which the fx spot rate is observed. This date should
--   already be adjusted for any applicable business day convention.
fxLinkedNotionAmount_adjustedFxSpotFixingDate :: FxLinkedNotionalAmount -> Maybe Date

-- | The actual observed fx spot rate.
fxLinkedNotionAmount_observedFxSpotRate :: FxLinkedNotionalAmount -> Maybe Decimal

-- | The calculation period notional amount.
fxLinkedNotionAmount_notionalAmount :: FxLinkedNotionalAmount -> Maybe Decimal

-- | A type to describe a notional schedule where each notional that
--   applies to a calculation period is calculated with reference to a
--   notional amount or notional amount schedule in a different currency by
--   means of a spot currency exchange rate which is normally observed at
--   the beginning of each period.
data FxLinkedNotionalSchedule
FxLinkedNotionalSchedule :: Maybe NotionalReference -> Maybe Decimal -> Maybe Currency -> Maybe RelativeDateOffset -> Maybe FxSpotRateSource -> Maybe RelativeDateOffset -> FxLinkedNotionalSchedule

-- | A pointer style reference to the associated constant notional schedule
--   defined elsewhere in the document which contains the currency amounts
--   which will be converted into the varying notional currency amounts
--   using the spot currency exchange rate.
fxLinkedNotionSched_constantNotionalScheduleReference :: FxLinkedNotionalSchedule -> Maybe NotionalReference

-- | The initial currency amount for the varying notional.
fxLinkedNotionSched_initialValue :: FxLinkedNotionalSchedule -> Maybe Decimal

-- | The currency of the varying notional amount, i.e. the notional amount
--   being determined periodically based on observation of a spot currency
--   exchange rate.
fxLinkedNotionSched_varyingNotionalCurrency :: FxLinkedNotionalSchedule -> Maybe Currency

-- | The dates on which spot currency exchange rates are observed for
--   purposes of determining the varying notional currency amount that will
--   apply to a calculation period.
fxLinkedNotionSched_varyingNotionalFixingDates :: FxLinkedNotionalSchedule -> Maybe RelativeDateOffset

-- | The information source and time at which the spot currency exchange
--   rate will be observed.
fxLinkedNotionSched_fxSpotRateSource :: FxLinkedNotionalSchedule -> Maybe FxSpotRateSource

-- | The dates on which interim exchanges of notional are paid. Interim
--   exchanges will arise as a result of changes in the spot currency
--   exchange amount or changes in the constant notional schedule (e.g.
--   amortization).
fxLinkedNotionSched_varyingNotionalInterimExchangePaymentDates :: FxLinkedNotionalSchedule -> Maybe RelativeDateOffset

-- | A type defining the components specifiying an Inflation Rate
--   Calculation
data InflationRateCalculation
InflationRateCalculation :: Maybe ID -> FloatingRateIndex -> Maybe Period -> Maybe Schedule -> [SpreadSchedule] -> Maybe RateTreatmentEnum -> [StrikeSchedule] -> [StrikeSchedule] -> Maybe Decimal -> Maybe Rounding -> Maybe AveragingMethodEnum -> Maybe NegativeInterestRateTreatmentEnum -> Maybe Offset -> Maybe RateSourcePage -> Maybe MainPublication -> Maybe InterpolationMethod -> Maybe Decimal -> Maybe Boolean -> InflationRateCalculation
inflatRateCalc_ID :: InflationRateCalculation -> Maybe ID
inflatRateCalc_floatingRateIndex :: InflationRateCalculation -> FloatingRateIndex

-- | The ISDA Designated Maturity, i.e. the tenor of the floating rate.
inflatRateCalc_indexTenor :: InflationRateCalculation -> Maybe Period

-- | A rate multiplier or multiplier schedule to apply to the floating
--   rate. A multiplier schedule is expressed as explicit multipliers and
--   dates. In the case of a schedule, the step dates may be subject to
--   adjustment in accordance with any adjustments specified in the
--   calculationPeriodDatesAdjustments. The multiplier can be a positive or
--   negative decimal. This element should only be included if the
--   multiplier is not equal to 1 (one) for the term of the stream.
inflatRateCalc_floatingRateMultiplierSchedule :: InflationRateCalculation -> Maybe Schedule

-- | The ISDA Spread or a Spread schedule expressed as explicit spreads and
--   dates. In the case of a schedule, the step dates may be subject to
--   adjustment in accordance with any adjustments specified in
--   calculationPeriodDatesAdjustments. The spread is a per annum rate,
--   expressed as a decimal. For purposes of determining a calculation
--   period amount, if positive the spread will be added to the floating
--   rate and if negative the spread will be subtracted from the floating
--   rate. A positive 10 basis point (0.1%) spread would be represented as
--   0.001.
inflatRateCalc_spreadSchedule :: InflationRateCalculation -> [SpreadSchedule]

-- | The specification of any rate conversion which needs to be applied to
--   the observed rate before being used in any calculations. The two
--   common conversions are for securities quoted on a bank discount basis
--   which will need to be converted to either a Money Market Yield or Bond
--   Equivalent Yield. See the Annex to the 2000 ISDA Definitions, Section
--   7.3. Certain General Definitions Relating to Floating Rate Options,
--   paragraphs (g) and (h) for definitions of these terms.
inflatRateCalc_rateTreatment :: InflationRateCalculation -> Maybe RateTreatmentEnum

-- | The cap rate or cap rate schedule, if any, which applies to the
--   floating rate. The cap rate (strike) is only required where the
--   floating rate on a swap stream is capped at a certain level. A cap
--   rate schedule is expressed as explicit cap rates and dates and the
--   step dates may be subject to adjustment in accordance with any
--   adjustments specified in calculationPeriodDatesAdjustments. The cap
--   rate is assumed to be exclusive of any spread and is a per annum rate,
--   expressed as a decimal. A cap rate of 5% would be represented as 0.05.
inflatRateCalc_capRateSchedule :: InflationRateCalculation -> [StrikeSchedule]

-- | The floor rate or floor rate schedule, if any, which applies to the
--   floating rate. The floor rate (strike) is only required where the
--   floating rate on a swap stream is floored at a certain strike level. A
--   floor rate schedule is expressed as explicit floor rates and dates and
--   the step dates may be subject to adjustment in accordance with any
--   adjustments specified in calculationPeriodDatesAdjustments. The floor
--   rate is assumed to be exclusive of any spread and is a per annum rate,
--   expressed as a decimal. A floor rate of 5% would be represented as
--   0.05.
inflatRateCalc_floorRateSchedule :: InflationRateCalculation -> [StrikeSchedule]

-- | The initial floating rate reset agreed between the principal parties
--   involved in the trade. This is assumed to be the first required reset
--   rate for the first regular calculation period. It should only be
--   included when the rate is not equal to the rate published on the
--   source implied by the floating rate index. An initial rate of 5% would
--   be represented as 0.05.
inflatRateCalc_initialRate :: InflationRateCalculation -> Maybe Decimal

-- | The rounding convention to apply to the final rate used in
--   determination of a calculation period amount.
inflatRateCalc_finalRateRounding :: InflationRateCalculation -> Maybe Rounding

-- | If averaging is applicable, this component specifies whether a
--   weighted or unweighted average method of calculation is to be used.
--   The component must only be included when averaging applies.
inflatRateCalc_averagingMethod :: InflationRateCalculation -> Maybe AveragingMethodEnum

-- | The specification of any provisions for calculating payment
--   obligations when a floating rate is negative (either due to a quoted
--   negative floating rate or by operation of a spread that is subtracted
--   from the floating rate).
inflatRateCalc_negativeInterestRateTreatment :: InflationRateCalculation -> Maybe NegativeInterestRateTreatmentEnum

-- | an offsetting period from the payment date which determines the
--   reference period for which the inflation index is onserved.
inflatRateCalc_inflationLag :: InflationRateCalculation -> Maybe Offset

-- | The reference source such as Reuters or Bloomberg.
inflatRateCalc_indexSource :: InflationRateCalculation -> Maybe RateSourcePage

-- | The current main publication source such as relevant web site or a
--   government body.
inflatRateCalc_mainPublication :: InflationRateCalculation -> Maybe MainPublication

-- | The method used when calculating the Inflation Index Level from
--   multiple points - the most common is Linear.
inflatRateCalc_interpolationMethod :: InflationRateCalculation -> Maybe InterpolationMethod

-- | initial known index level for the first calculation period.
inflatRateCalc_initialIndexLevel :: InflationRateCalculation -> Maybe Decimal

-- | The applicability of a fallback bond as defined in the 2006 ISDA
--   Inflation Derivatives Definitions, sections 1.3 and 1.8. Omission of
--   this element imples a value of true.
inflatRateCalc_fallbackBondApplicable :: InflationRateCalculation -> Maybe Boolean

-- | A type defining the components specifiying an interest rate stream,
--   including both a parametric and cashflow representation for the stream
--   of payments.
data InterestRateStream
InterestRateStream :: Maybe ID -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> CalculationPeriodDates -> PaymentDates -> Maybe ResetDates -> CalculationPeriodAmount -> Maybe StubCalculationPeriodAmount -> Maybe PrincipalExchanges -> Maybe Cashflows -> Maybe SettlementProvision -> Maybe Formula -> InterestRateStream
interRateStream_ID :: InterestRateStream -> Maybe ID

-- | A reference to the party responsible for making the payments defined
--   by this structure.
interRateStream_payerPartyReference :: InterestRateStream -> Maybe PartyReference

-- | A reference to the account responsible for making the payments defined
--   by this structure.
interRateStream_payerAccountReference :: InterestRateStream -> Maybe AccountReference

-- | A reference to the party that receives the payments corresponding to
--   this structure.
interRateStream_receiverPartyReference :: InterestRateStream -> Maybe PartyReference

-- | A reference to the account that receives the payments corresponding to
--   this structure.
interRateStream_receiverAccountReference :: InterestRateStream -> Maybe AccountReference

-- | The calculation periods dates schedule.
interRateStream_calculationPeriodDates :: InterestRateStream -> CalculationPeriodDates

-- | The payment dates schedule.
interRateStream_paymentDates :: InterestRateStream -> PaymentDates

-- | The reset dates schedule. The reset dates schedule only applies for a
--   floating rate stream.
interRateStream_resetDates :: InterestRateStream -> Maybe ResetDates

-- | The calculation period amount parameters.
interRateStream_calculationPeriodAmount :: InterestRateStream -> CalculationPeriodAmount

-- | The stub calculation period amount parameters. This element must only
--   be included if there is an initial or final stub calculation period.
--   Even then, it must only be included if either the stub references a
--   different floating rate tenor to the regular calculation periods, or
--   if the stub is calculated as a linear interpolation of two different
--   floating rate tenors, or if a specific stub rate or stub amount has
--   been negotiated.
interRateStream_stubCalculationPeriodAmount :: InterestRateStream -> Maybe StubCalculationPeriodAmount

-- | The true/false flags indicating whether initial, intermediate or final
--   exchanges of principal should occur.
interRateStream_principalExchanges :: InterestRateStream -> Maybe PrincipalExchanges

-- | The cashflows representation of the swap stream.
interRateStream_cashflows :: InterestRateStream -> Maybe Cashflows

-- | A provision that allows the specification of settlement terms,
--   occuring when the settlement currency is different to the notional
--   currency of the trade.
interRateStream_settlementProvision :: InterestRateStream -> Maybe SettlementProvision

-- | An interest rate derivative formula.
interRateStream_formula :: InterestRateStream -> Maybe Formula

-- | Reference to an InterestRateStream component.
data InterestRateStreamReference
InterestRateStreamReference :: IDREF -> InterestRateStreamReference
interRateStreamRef_href :: InterestRateStreamReference -> IDREF

-- | A type to define an early termination provision for which exercise is
--   mandatory.
data MandatoryEarlyTermination
MandatoryEarlyTermination :: Maybe ID -> Maybe AdjustableDate -> Maybe CalculationAgent -> Maybe CashSettlement -> Maybe MandatoryEarlyTerminationAdjustedDates -> MandatoryEarlyTermination
mandatEarlyTermin_ID :: MandatoryEarlyTermination -> Maybe ID

-- | The early termination date associated with a mandatory early
--   termination of a swap.
mandatoryEarlyTermination_date :: MandatoryEarlyTermination -> Maybe AdjustableDate

-- | The ISDA Calculation Agent responsible for performing duties
--   associated with an optional early termination.
mandatEarlyTermin_calculationAgent :: MandatoryEarlyTermination -> Maybe CalculationAgent

-- | If specified, this means that cash settlement is applicable to the
--   transaction and defines the parameters associated with the cash
--   settlement prodcedure. If not specified, then physical settlement is
--   applicable.
mandatEarlyTermin_cashSettlement :: MandatoryEarlyTermination -> Maybe CashSettlement

-- | The adjusted dates associated with a mandatory early termination
--   provision. These dates have been adjusted for any applicable business
--   day convention.
mandatoryEarlyTermination_adjustedDates :: MandatoryEarlyTermination -> Maybe MandatoryEarlyTerminationAdjustedDates

-- | A type defining the adjusted dates associated with a mandatory early
--   termination provision.
data MandatoryEarlyTerminationAdjustedDates
MandatoryEarlyTerminationAdjustedDates :: Maybe Date -> Maybe Date -> Maybe Date -> MandatoryEarlyTerminationAdjustedDates

-- | The early termination date that is applicable if an early termination
--   provision is exercised. This date should already be adjusted for any
--   applicable business day convention.
metad_adjustedEarlyTerminationDate :: MandatoryEarlyTerminationAdjustedDates -> Maybe Date

-- | The date by which the cash settlement amount must be agreed. This date
--   should already be adjusted for any applicable business day convention.
metad_adjustedCashSettlementValuationDate :: MandatoryEarlyTerminationAdjustedDates -> Maybe Date

-- | The date on which the cash settlement amount is paid. This date should
--   already be adjusted for any applicable business dat convention.
metad_adjustedCashSettlementPaymentDate :: MandatoryEarlyTerminationAdjustedDates -> Maybe Date

-- | A type defining the parameters used when the reference currency of the
--   swapStream is non-deliverable.
data NonDeliverableSettlement
NonDeliverableSettlement :: Maybe Currency -> (Maybe (OneOf2 FxFixingDate AdjustableDates)) -> Maybe SettlementRateOption -> Maybe PriceSourceDisruption -> NonDeliverableSettlement

-- | The currency in which the swap stream is denominated.
nonDelivSettl_referenceCurrency :: NonDeliverableSettlement -> Maybe Currency

-- | Choice between:
--   
--   <ol>
--   <li>The date, when expressed as a relative date, on which the currency
--   rate will be determined for the purpose of specifying the amount in
--   deliverable currency.</li>
--   <li>The date, when expressed as a schedule of date(s), on which the
--   currency rate will be determined for the purpose of specifying the
--   amount in deliverable currency.</li>
--   </ol>
nonDelivSettl_choice1 :: NonDeliverableSettlement -> (Maybe (OneOf2 FxFixingDate AdjustableDates))

-- | The rate source for the conversion to the settlement currency. This
--   source is specified through a scheme that reflects the terms of the
--   Annex A to the 1998 FX and Currency Option Definitions.
nonDelivSettl_settlementRateOption :: NonDeliverableSettlement -> Maybe SettlementRateOption

-- | A type defining the parameters to get a new quote when a settlement
--   rate option is disrupted.
nonDelivSettl_priceSourceDisruption :: NonDeliverableSettlement -> Maybe PriceSourceDisruption

-- | An type defining the notional amount or notional amount schedule
--   associated with a swap stream. The notional schedule will be captured
--   explicitly, specifying the dates that the notional changes and the
--   outstanding notional amount that applies from that date. A parametric
--   representation of the rules defining the notional step schedule can
--   optionally be included.
data Notional
Notional :: Maybe ID -> NonNegativeAmountSchedule -> Maybe NotionalStepRule -> Notional
notional_ID :: Notional -> Maybe ID

-- | The notional amount or notional amount schedule expressed as explicit
--   outstanding notional amounts and dates. In the case of a schedule, the
--   step dates may be subject to adjustment in accordance with any
--   adjustments specified in calculationPeriodDatesAdjustments.
notional_stepSchedule :: Notional -> NonNegativeAmountSchedule

-- | A parametric representation of the notional step schedule, i.e.
--   parameters used to generate the notional schedule.
notional_stepParameters :: Notional -> Maybe NotionalStepRule

-- | A type defining a parametric representation of the notional step
--   schedule, i.e. parameters used to generate the notional balance on
--   each step date. The step change in notional can be expressed in terms
--   of either a fixed amount or as a percentage of either the initial
--   notional or previous notional amount. This parametric representation
--   is intended to cover the more common amortizing/accreting.
data NotionalStepRule
NotionalStepRule :: Maybe CalculationPeriodDatesReference -> Maybe Period -> Maybe Date -> Maybe Date -> (Maybe (OneOf2 Decimal (Maybe (Decimal), Maybe (StepRelativeToEnum)))) -> NotionalStepRule

-- | A pointer style reference to the associated calculation period dates
--   component defined elsewhere in the document.
notionStepRule_calculationPeriodDatesReference :: NotionalStepRule -> Maybe CalculationPeriodDatesReference

-- | The frequency at which the step changes occur. This frequency must be
--   a multiple of the stream calculation period frequency.
notionStepRule_stepFrequency :: NotionalStepRule -> Maybe Period

-- | Effective date of the first change in notional (i.e. a calculation
--   period start date).
notionStepRule_firstNotionalStepDate :: NotionalStepRule -> Maybe Date

-- | Effective date of the last change in notional (i.e. a calculation
--   period start date).
notionStepRule_lastNotionalStepDate :: NotionalStepRule -> Maybe Date

-- | Choice between:
--   
--   <ol>
--   <li>The explicit amount that the notional changes on each step date.
--   This can be a positive or negative amount.</li>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The percentage amount by which the notional changes on each step
--   date. The percentage is either a percentage applied to the initial
--   notional amount or the previous outstanding notional, depending on the
--   value of the element stepRelativeTo. The percentage can be either
--   positive or negative. A percentage of 5% would be represented as
--   0.05.</li>
--   <li>Specifies whether the notionalStepRate should be applied to the
--   initial notional or the previous notional in order to calculate the
--   notional step change amount.</li>
--   </ul>
notionStepRule_choice4 :: NotionalStepRule -> (Maybe (OneOf2 Decimal (Maybe (Decimal), Maybe (StepRelativeToEnum))))

-- | A type defining an early termination provision where either or both
--   parties have the right to exercise.
data OptionalEarlyTermination
OptionalEarlyTermination :: Maybe SinglePartyOption -> Maybe Exercise -> [ExerciseNotice] -> Maybe Boolean -> Maybe CalculationAgent -> Maybe CashSettlement -> Maybe OptionalEarlyTerminationAdjustedDates -> OptionalEarlyTermination

-- | If optional early termination is not available to both parties then
--   this component specifies the buyer and seller of the option.
optionEarlyTermin_singlePartyOption :: OptionalEarlyTermination -> Maybe SinglePartyOption

-- | An placeholder for the actual option exercise definitions.
optionEarlyTermin_exercise :: OptionalEarlyTermination -> Maybe Exercise

-- | Definition of the party to whom notice of exercise should be given.
optionEarlyTermin_exerciseNotice :: OptionalEarlyTermination -> [ExerciseNotice]

-- | A flag to indicate whether follow-up confirmation of exercise (written
--   or electronic) is required following telephonic notice by the buyer to
--   the seller or seller's agent.
optionEarlyTermin_followUpConfirmation :: OptionalEarlyTermination -> Maybe Boolean

-- | The ISDA Calculation Agent responsible for performing duties
--   associated with an optional early termination.
optionEarlyTermin_calculationAgent :: OptionalEarlyTermination -> Maybe CalculationAgent

-- | If specified, this means that cash settlement is applicable to the
--   transaction and defines the parameters associated with the cash
--   settlement prodcedure. If not specified, then physical settlement is
--   applicable.
optionEarlyTermin_cashSettlement :: OptionalEarlyTermination -> Maybe CashSettlement

-- | An early termination provision to terminate the trade at fair value
--   where one or both parties have the right to decide on termination.
optionalEarlyTermination_adjustedDates :: OptionalEarlyTermination -> Maybe OptionalEarlyTerminationAdjustedDates

-- | A type defining the adjusted dates associated with an optional early
--   termination provision.
data OptionalEarlyTerminationAdjustedDates
OptionalEarlyTerminationAdjustedDates :: [EarlyTerminationEvent] -> OptionalEarlyTerminationAdjustedDates

-- | The adjusted dates associated with an individual earley termination
--   date.
oetad_earlyTerminationEvent :: OptionalEarlyTerminationAdjustedDates -> [EarlyTerminationEvent]

-- | A type defining the adjusted payment date and associated calculation
--   period parameters required to calculate the actual or projected
--   payment amount. This type forms part of the cashflow representation of
--   a swap stream.
data PaymentCalculationPeriod
PaymentCalculationPeriod :: Maybe ID -> Maybe IDREF -> Maybe Date -> Maybe Date -> (Maybe (OneOf2 [CalculationPeriod] Decimal)) -> Maybe Decimal -> Maybe Money -> Maybe Money -> PaymentCalculationPeriod
paymentCalcPeriod_ID :: PaymentCalculationPeriod -> Maybe ID

-- | Attribute that can be used to reference the yield curve used to
--   estimate the discount factor.
paymentCalcPeriod_href :: PaymentCalculationPeriod -> Maybe IDREF
paymentCalcPeriod_unadjustedPaymentDate :: PaymentCalculationPeriod -> Maybe Date

-- | The adjusted payment date. This date should already be adjusted for
--   any applicable business day convention. This component is not intended
--   for use in trade confirmation but may be specified to allow the fee
--   structure to also serve as a cashflow type component (all dates the
--   Cashflows type are adjusted payment dates).
paymentCalcPeriod_adjustedPaymentDate :: PaymentCalculationPeriod -> Maybe Date

-- | Choice between:
--   
--   <ol>
--   <li>The parameters used in the calculation of a fixed or floating rate
--   calculation period amount. A list of calculation period elements may
--   be ordered in the document by ascending start date. An FpML document
--   which contains an unordered list of calcularion periods is still
--   regarded as a conformant document.</li>
--   <li>A known fixed payment amount.</li>
--   </ol>
paymentCalcPeriod_choice2 :: PaymentCalculationPeriod -> (Maybe (OneOf2 [CalculationPeriod] Decimal))

-- | A decimal value representing the discount factor used to calculate the
--   present value of cash flow.
paymentCalcPeriod_discountFactor :: PaymentCalculationPeriod -> Maybe Decimal

-- | A monetary amount representing the forecast of the future value of the
--   payment.
paymentCalcPeriod_forecastPaymentAmount :: PaymentCalculationPeriod -> Maybe Money

-- | A monetary amount representing the present value of the forecast
--   payment.
paymentCalcPeriod_presentValueAmount :: PaymentCalculationPeriod -> Maybe Money

-- | A type defining parameters used to generate the payment dates
--   schedule, including the specification of early or delayed payments.
--   Payment dates are determined relative to the calculation period dates
--   or the reset dates.
data PaymentDates
PaymentDates :: Maybe ID -> (Maybe (OneOf3 CalculationPeriodDatesReference ResetDatesReference ValuationDatesReference)) -> Frequency -> Maybe Date -> Maybe Date -> Maybe PayRelativeToEnum -> Maybe Offset -> Maybe BusinessDayAdjustments -> PaymentDates
paymentDates_ID :: PaymentDates -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>A pointer style reference to the associated calculation period
--   dates component defined elsewhere in the document.</li>
--   <li>A pointer style reference to the associated reset dates component
--   defined elsewhere in the document.</li>
--   <li>A pointer style reference to the associated valuation dates
--   component defined elsewhere in the document. Implemented for
--   Brazilian-CDI Swaps where it will refer to the
--   settlemementProvision<i>nonDeliverableSettlement</i>fxFixingDate
--   structure.</li>
--   </ol>
paymentDates_choice0 :: PaymentDates -> (Maybe (OneOf3 CalculationPeriodDatesReference ResetDatesReference ValuationDatesReference))

-- | The frequency at which regular payment dates occur. If the payment
--   frequency is equal to the frequency defined in the calculation period
--   dates component then one calculation period contributes to each
--   payment amount. If the payment frequency is less frequent than the
--   frequency defined in the calculation period dates component then more
--   than one calculation period will contribute to the payment amount. A
--   payment frequency more frequent than the calculation period frequency
--   or one that is not a multiple of the calculation period frequency is
--   invalid. If the payment frequency is of value T (term), the period is
--   defined by the swapswapStreamcalculationPerioDateseffectiveDate and
--   the swapswapStreamcalculationPerioDatesterminationDate.
paymentDates_paymentFrequency :: PaymentDates -> Frequency

-- | The first unadjusted payment date. This day may be subject to
--   adjustment in accordance with any business day convention specified in
--   paymentDatesAdjustments. This element must only be included if there
--   is an initial stub. This date will normally correspond to an
--   unadjusted calculation period start or end date. This is true even if
--   early or delayed payment is specified to be applicable since the
--   actual first payment date will be the specified number of days before
--   or after the applicable adjusted calculation period start or end date
--   with the resulting payment date then being adjusted in accordance with
--   any business day convention specified in paymentDatesAdjustments.
paymentDates_firstPaymentDate :: PaymentDates -> Maybe Date

-- | The last regular unadjusted payment date. This day may be subject to
--   adjustment in accordance with any business day convention specified in
--   paymentDatesAdjustments. This element must only be included if there
--   is a final stub. All calculation periods after this date contribute to
--   the final payment. The final payment is made relative to the final set
--   of calculation periods or the final reset date as the case may be.
--   This date will normally correspond to an unadjusted calculation period
--   start or end date. This is true even if early or delayed payment is
--   specified to be applicable since the actual last regular payment date
--   will be the specified number of days before or after the applicable
--   adjusted calculation period start or end date with the resulting
--   payment date then being adjusted in accordance with any business day
--   convention specified in paymentDatesAdjustments.
paymentDates_lastRegularPaymentDate :: PaymentDates -> Maybe Date

-- | Specifies whether the payments occur relative to each adjusted
--   calculation period start date, adjusted calculation period end date or
--   each reset date. The reset date is applicable in the case of certain
--   euro (former French Franc) floating rate indices. Calculation period
--   start date means relative to the start of the first calculation period
--   contributing to a given payment. Similarly, calculation period end
--   date means the end of the last calculation period contributing to a
--   given payment.The valuation date is applicable for Brazilian-CDI
--   swaps.
paymentDates_payRelativeTo :: PaymentDates -> Maybe PayRelativeToEnum

-- | If early payment or delayed payment is required, specifies the number
--   of days offset that the payment occurs relative to what would
--   otherwise be the unadjusted payment date. The offset can be specified
--   in terms of either calendar or business days. Even in the case of a
--   calendar days offset, the resulting payment date, adjusted for the
--   specified calendar days offset, will still be adjusted in accordance
--   with the specified payment dates adjustments. This element should only
--   be included if early or delayed payment is applicable, i.e. if the
--   periodMultiplier element value is not equal to zero. An early payment
--   would be indicated by a negative periodMultiplier element value and a
--   delayed payment (or payment lag) would be indicated by a positive
--   periodMultiplier element value.
paymentDates_paymentDaysOffset :: PaymentDates -> Maybe Offset

-- | The business day convention to apply to each payment date if it would
--   otherwise fall on a day that is not a business day in the specified
--   financial business centers.
paymentDates_adjustments :: PaymentDates -> Maybe BusinessDayAdjustments

-- | Reference to a payment dates structure.
data PaymentDatesReference
PaymentDatesReference :: IDREF -> PaymentDatesReference
paymentDatesRef_href :: PaymentDatesReference -> IDREF

-- | A type defining the parameters used to get a price quote to replace
--   the settlement rate option that is disrupted.
data PriceSourceDisruption
PriceSourceDisruption :: Maybe FallbackReferencePrice -> PriceSourceDisruption

-- | The method, prioritzed by the order it is listed in this element, to
--   get a replacement rate for the disrupted settlement rate option.
priceSourceDisrup_fallbackReferencePrice :: PriceSourceDisruption -> Maybe FallbackReferencePrice

-- | A type defining a principal exchange amount and adjusted exchange
--   date. The type forms part of the cashflow representation of a swap
--   stream.
data PrincipalExchange
PrincipalExchange :: Maybe ID -> Maybe Date -> Maybe Date -> Maybe Decimal -> Maybe Decimal -> Maybe Money -> PrincipalExchange
princExch_ID :: PrincipalExchange -> Maybe ID
princExch_unadjustedPrincipalExchangeDate :: PrincipalExchange -> Maybe Date

-- | The principal exchange date. This date should already be adjusted for
--   any applicable business day convention.
princExch_adjustedPrincipalExchangeDate :: PrincipalExchange -> Maybe Date

-- | The principal exchange amount. This amount should be positive if the
--   stream payer is paying the exchange amount and signed negative if they
--   are receiving it.
principalExchange_amount :: PrincipalExchange -> Maybe Decimal

-- | The value representing the discount factor used to calculate the
--   present value of the principal exchange amount.
princExch_discountFactor :: PrincipalExchange -> Maybe Decimal

-- | The amount representing the present value of the principal exchange.
princExch_presentValuePrincipalExchangeAmount :: PrincipalExchange -> Maybe Money

-- | Reference to relevant underlying date.
data RelevantUnderlyingDateReference
RelevantUnderlyingDateReference :: IDREF -> RelevantUnderlyingDateReference
relevUnderlyDateRef_href :: RelevantUnderlyingDateReference -> IDREF

-- | A type defining the parameters used to generate the reset dates
--   schedule and associated fixing dates. The reset dates are determined
--   relative to the calculation periods schedules dates.
data ResetDates
ResetDates :: Maybe ID -> Maybe CalculationPeriodDatesReference -> Maybe ResetRelativeToEnum -> Maybe RelativeDateOffset -> Maybe RelativeDateOffset -> Maybe Offset -> ResetFrequency -> Maybe BusinessDayAdjustments -> ResetDates
resetDates_ID :: ResetDates -> Maybe ID

-- | A pointer style reference to the associated calculation period dates
--   component defined elsewhere in the document.
resetDates_calculationPeriodDatesReference :: ResetDates -> Maybe CalculationPeriodDatesReference

-- | Specifies whether the reset dates are determined with respect to each
--   adjusted calculation period start date or adjusted calculation period
--   end date. If the reset frequency is specified as daily this element
--   must not be included.
resetDates_resetRelativeTo :: ResetDates -> Maybe ResetRelativeToEnum
resetDates_initialFixingDate :: ResetDates -> Maybe RelativeDateOffset

-- | Specifies the fixing date relative to the reset date in terms of a
--   business days offset and an associated set of financial business
--   centers. Normally these offset calculation rules will be those
--   specified in the ISDA definition for the relevant floating rate index
--   (ISDA's Floating Rate Option). However, non-standard offset
--   calculation rules may apply for a trade if mutually agreed by the
--   principal parties to the transaction. The href attribute on the
--   dateRelativeTo element should reference the id attribute on the
--   resetDates element.
resetDates_fixingDates :: ResetDates -> Maybe RelativeDateOffset

-- | Specifies the number of business days before the period end date when
--   the rate cut-off date is assumed to apply. The financial business
--   centers associated with determining the rate cut-off date are those
--   specified in the reset dates adjustments. The rate cut-off number of
--   days must be a negative integer (a value of zero would imply no rate
--   cut off applies in which case the rateCutOffDaysOffset element should
--   not be included). The relevant rate for each reset date in the period
--   from, and including, a rate cut-off date to, but excluding, the next
--   applicable period end date (or, in the case of the last calculation
--   period, the termination date) will (solely for purposes of calculating
--   the floating amount payable on the next applicable payment date) be
--   deemed to be the relevant rate in effect on that rate cut-off date.
--   For example, if rate cut-off days for a daily averaging deal is -2
--   business days, then the refix rate applied on (period end date - 2
--   days) will also be applied as the reset on (period end date - 1 day),
--   i.e. the actual number of reset dates remains the same but from the
--   rate cut-off date until the period end date, the same refix rate is
--   applied. Note that in the case of several calculation periods
--   contributing to a single payment, the rate cut-off is assumed only to
--   apply to the final calculation period contributing to that payment.
--   The day type associated with the offset must imply a business days
--   offset.
resetDates_rateCutOffDaysOffset :: ResetDates -> Maybe Offset

-- | The frequency at which reset dates occur. In the case of a weekly
--   reset frequency, also specifies the day of the week that the reset
--   occurs. If the reset frequency is greater than the calculation period
--   frequency then this implies that more than one reset date is
--   established for each calculation period and some form of rate
--   averaging is applicable.
resetDates_resetFrequency :: ResetDates -> ResetFrequency

-- | The business day convention to apply to each reset date if it would
--   otherwise fall on a day that is not a business day in the specified
--   financial business centers.
resetDates_adjustments :: ResetDates -> Maybe BusinessDayAdjustments

-- | Reference to a reset dates component.
data ResetDatesReference
ResetDatesReference :: IDREF -> ResetDatesReference
resetDatesRef_href :: ResetDatesReference -> IDREF

-- | A type defining the specification of settlement terms, occuring when
--   the settlement currency is different to the notional currency of the
--   trade.
data SettlementProvision
SettlementProvision :: Maybe Currency -> Maybe NonDeliverableSettlement -> SettlementProvision

-- | The currency that stream settles in (to support swaps that settle in a
--   currency different from the notional currency).
settlProvis_settlementCurrency :: SettlementProvision -> Maybe Currency

-- | The specification of the non-deliverable settlement provision.
settlProvis_nonDeliverableSettlement :: SettlementProvision -> Maybe NonDeliverableSettlement

-- | A type defining the settlement rate options through a scheme
--   reflecting the terms of the Annex A to the 1998 FX and Currency Option
--   Definitions.
data SettlementRateOption
SettlementRateOption :: Scheme -> SettlementRateOptionAttributes -> SettlementRateOption
data SettlementRateOptionAttributes
SettlementRateOptionAttributes :: Maybe AnyURI -> SettlementRateOptionAttributes
settlRateOptionAttrib_settlementRateOptionScheme :: SettlementRateOptionAttributes -> Maybe AnyURI

-- | A type describing the buyer and seller of an option.
data SinglePartyOption
SinglePartyOption :: Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> SinglePartyOption

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
singlePartyOption_buyerPartyReference :: SinglePartyOption -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
singlePartyOption_buyerAccountReference :: SinglePartyOption -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
singlePartyOption_sellerPartyReference :: SinglePartyOption -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
singlePartyOption_sellerAccountReference :: SinglePartyOption -> Maybe AccountReference

-- | A type defining how the initial or final stub calculation period
--   amounts is calculated. For example, the rate to be applied to the
--   initial or final stub calculation period may be the linear
--   interpolation of two different tenors for the floating rate index
--   specified in the calculation period amount component, e.g. A two month
--   stub period may used the linear interpolation of a one month and three
--   month floating rate. The different rate tenors would be specified in
--   this component. Note that a maximum of two rate tenors can be
--   specified. If a stub period uses a single index tenor and this is the
--   same as that specified in the calculation period amount component then
--   the initial stub or final stub component, as the case may be, must not
--   be included.
data StubCalculationPeriodAmount
StubCalculationPeriodAmount :: Maybe CalculationPeriodDatesReference -> Maybe StubValue -> Maybe StubValue -> StubCalculationPeriodAmount

-- | A pointer style reference to the associated calculation period dates
--   component defined elsewhere in the document.
stubCalcPeriodAmount_calculationPeriodDatesReference :: StubCalculationPeriodAmount -> Maybe CalculationPeriodDatesReference

-- | Specifies how the initial stub amount is calculated. A single floating
--   rate tenor different to that used for the regular part of the
--   calculation periods schedule may be specified, or two floating tenors
--   may be specified. If two floating rate tenors are specified then
--   Linear Interpolation (in accordance with the 2000 ISDA Definitions,
--   Section 8.3. Interpolation) is assumed to apply. Alternatively, an
--   actual known stub rate or stub amount may be specified.
stubCalcPeriodAmount_initialStub :: StubCalculationPeriodAmount -> Maybe StubValue

-- | Specifies how the final stub amount is calculated. A single floating
--   rate tenor different to that used for the regular part of the
--   calculation periods schedule may be specified, or two floating tenors
--   may be specified. If two floating rate tenors are specified then
--   Linear Interpolation (in accordance with the 2000 ISDA Definitions,
--   Section 8.3. Interpolation) is assumed to apply. Alternatively, an
--   actual known stub rate or stub amount may be specified.
stubCalcPeriodAmount_finalStub :: StubCalculationPeriodAmount -> Maybe StubValue

-- | A type defining swap streams and additional payments between the
--   principal parties involved in the swap.
data Swap
Swap :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> [InterestRateStream] -> Maybe EarlyTerminationProvision -> Maybe CancelableProvision -> Maybe ExtendibleProvision -> [Payment] -> Maybe SwapAdditionalTerms -> Swap
swap_ID :: Swap -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
swap_primaryAssetClass :: Swap -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
swap_secondaryAssetClass :: Swap -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
swap_productType :: Swap -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
swap_productId :: Swap -> [ProductId]

-- | The swap streams.
swap_stream :: Swap -> [InterestRateStream]

-- | Parameters specifying provisions relating to the optional and
--   mandatory early terminarion of a swap transaction.
swap_earlyTerminationProvision :: Swap -> Maybe EarlyTerminationProvision

-- | A provision that allows the specification of an embedded option within
--   a swap giving the buyer of the option the right to terminate the swap,
--   in whole or in part, on the early termination date.
swap_cancelableProvision :: Swap -> Maybe CancelableProvision

-- | A provision that allows the specification of an embedded option with a
--   swap giving the buyer of the option the right to extend the swap, in
--   whole or in part, to the extended termination date.
swap_extendibleProvision :: Swap -> Maybe ExtendibleProvision

-- | Additional payments between the principal parties.
swap_additionalPayment :: Swap -> [Payment]

-- | Contains any additional terms to the swap contract.
swap_additionalTerms :: Swap -> Maybe SwapAdditionalTerms

-- | Additional terms to a swap contract.
data SwapAdditionalTerms
SwapAdditionalTerms :: Maybe BondReference -> SwapAdditionalTerms

-- | Reference to a bond underlyer to represent an asset swap or Condition
--   Precedent Bond.
swapAddTerms_bondReference :: SwapAdditionalTerms -> Maybe BondReference

-- | A type to define an option on a swap.
data Swaption
Swaption :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe AccountReference -> [Payment] -> Maybe OptionTypeEnum -> Exercise -> Maybe ExerciseProcedure -> Maybe CalculationAgent -> (Maybe (OneOf2 CashSettlement SwaptionPhysicalSettlement)) -> Boolean -> Maybe SwaptionAdjustedDates -> Swap -> Swaption
swaption_ID :: Swaption -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
swaption_primaryAssetClass :: Swaption -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
swaption_secondaryAssetClass :: Swaption -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
swaption_productType :: Swaption -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
swaption_productId :: Swaption -> [ProductId]

-- | A reference to the party that buys this instrument, ie. pays for this
--   instrument and receives the rights defined by it. See 2000 ISDA
--   definitions Article 11.1 (b). In the case of FRAs this the fixed rate
--   payer.
swaption_buyerPartyReference :: Swaption -> Maybe PartyReference

-- | A reference to the account that buys this instrument.
swaption_buyerAccountReference :: Swaption -> Maybe AccountReference

-- | A reference to the party that sells (<a>writes</a>) this instrument,
--   i.e. that grants the rights defined by this instrument and in return
--   receives a payment for it. See 2000 ISDA definitions Article 11.1 (a).
--   In the case of FRAs this is the floating rate payer.
swaption_sellerPartyReference :: Swaption -> Maybe PartyReference

-- | A reference to the account that sells this instrument.
swaption_sellerAccountReference :: Swaption -> Maybe AccountReference

-- | The option premium amount payable by buyer to seller on the specified
--   payment date.
swaption_premium :: Swaption -> [Payment]

-- | The type of option transaction. From a usage standpoint, put<i>call is
--   the default option type, while payer</i>receiver indicator is used for
--   options index credit default swaps, consistently with the industry
--   practice. Straddle is used for the case of straddle strategy, that
--   combine a call and a put with the same strike. This element is needed
--   for transparency reporting because the counterparties are not
--   available. TODO: can this be represented instead using the UPI?
swaption_optionType :: Swaption -> Maybe OptionTypeEnum

-- | An placeholder for the actual option exercise definitions.
swaption_exercise :: Swaption -> Exercise

-- | A set of parameters defining procedures associated with the exercise.
swaption_exerciseProcedure :: Swaption -> Maybe ExerciseProcedure

-- | The ISDA Calculation Agent responsible for performing duties
--   associated with an optional early termination.
swaption_calculationAgent :: Swaption -> Maybe CalculationAgent

-- | In the absence of both cashSettlement and (explicit)
--   physicalSettlement terms, physical settlement is inferred.
--   
--   Choice between:
--   
--   <ol>
--   <li>If specified, this means that cash settlement is applicable to the
--   transaction and defines the parameters associated with the cash
--   settlement procedure. If not specified, then physical settlement is
--   applicable.</li>
--   <li>If specified, this defines physical settlement terms which apply
--   to the transaction.</li>
--   </ol>
swaption_choice13 :: Swaption -> (Maybe (OneOf2 CashSettlement SwaptionPhysicalSettlement))

-- | Whether the option is a swaption or a swaption straddle.
swaption_straddle :: Swaption -> Boolean

-- | The adjusted dates associated with swaption exercise. These dates have
--   been adjusted for any applicable business day convention.
swaption_adjustedDates :: Swaption -> Maybe SwaptionAdjustedDates
swaption_swap :: Swaption -> Swap

-- | A type describing the adjusted dates associated with swaption exercise
--   and settlement.
data SwaptionAdjustedDates
SwaptionAdjustedDates :: [ExerciseEvent] -> SwaptionAdjustedDates

-- | The adjusted dates associated with an individual swaption exercise
--   date.
swaptAdjustDates_exerciseEvent :: SwaptionAdjustedDates -> [ExerciseEvent]
data SwaptionPhysicalSettlement
SwaptionPhysicalSettlement :: Maybe Boolean -> SwaptionPhysicalSettlement

-- | Specifies whether the swap resulting from physical settlement of the
--   swaption transaction will clear through a clearing house. The meaning
--   of Cleared Physical Settlement is defined in the 2006 ISDA
--   Definitions, Section 15.2 (published in Supplement number 28).
swaptPhysicSettl_clearedPhysicalSettlement :: SwaptionPhysicalSettlement -> Maybe Boolean

-- | Reference to a Valuation dates node.
data ValuationDatesReference
ValuationDatesReference :: IDREF -> ValuationDatesReference
valDatesRef_href :: ValuationDatesReference -> IDREF

-- | Specifies how long to wait to get a quote from a settlement rate
--   option upon a price source disruption.
data ValuationPostponement
ValuationPostponement :: Maybe PositiveInteger -> ValuationPostponement

-- | The maximum number of days to wait for a quote from the disrupted
--   settlement rate option before proceding to the next method.
valPostp_maximumDaysOfPostponement :: ValuationPostponement -> Maybe PositiveInteger

-- | A type defining the parameters required for each of the ISDA defined
--   yield curve methods for cash settlement.
data YieldCurveMethod
YieldCurveMethod :: Maybe SettlementRateSource -> Maybe QuotationRateTypeEnum -> YieldCurveMethod

-- | The method for obtaining a settlement rate. This may be from some
--   information source (e.g. Reuters) or from a set of reference banks.
yieldCurveMethod_settlementRateSource :: YieldCurveMethod -> Maybe SettlementRateSource

-- | Which rate quote is to be observed, either Bid, Mid, Offer or
--   Exercising Party Pays. The meaning of Exercising Party Pays is defined
--   in the 2000 ISDA Definitions, Section 17.2. Certain Definitions
--   Relating to Cash Settlement, paragraph (j)
yieldCurveMethod_quotationRateType :: YieldCurveMethod -> Maybe QuotationRateTypeEnum

-- | A product to represent a single known payment.
elementBulletPayment :: XMLParser BulletPayment
elementToXMLBulletPayment :: BulletPayment -> [Content ()]

-- | A cap, floor or cap floor structures product definition.
elementCapFloor :: XMLParser CapFloor
elementToXMLCapFloor :: CapFloor -> [Content ()]

-- | A floating rate calculation definition.
elementFloatingRateCalculation :: XMLParser FloatingRateCalculation
elementToXMLFloatingRateCalculation :: FloatingRateCalculation -> [Content ()]

-- | A forward rate agreement product definition.
elementFra :: XMLParser Fra
elementToXMLFra :: Fra -> [Content ()]

-- | An inflation rate calculation definition.
elementInflationRateCalculation :: XMLParser InflationRateCalculation
elementToXMLInflationRateCalculation :: InflationRateCalculation -> [Content ()]

-- | The base element for the floating rate calculation definitions.
elementRateCalculation :: XMLParser Rate
elementToXMLRateCalculation :: Rate -> [Content ()]

-- | A swap product definition.
elementSwap :: XMLParser Swap
elementToXMLSwap :: Swap -> [Content ()]

-- | A swaption product definition.
elementSwaption :: XMLParser Swaption
elementToXMLSwaption :: Swaption -> [Content ()]
instance Eq CalculationPeriodDatesReference
instance Show CalculationPeriodDatesReference
instance Eq CancellationEvent
instance Show CancellationEvent
instance Eq EarlyTerminationEvent
instance Show EarlyTerminationEvent
instance Eq ExerciseEvent
instance Show ExerciseEvent
instance Eq ExtensionEvent
instance Show ExtensionEvent
instance Eq FxLinkedNotionalAmount
instance Show FxLinkedNotionalAmount
instance Eq InterestRateStreamReference
instance Show InterestRateStreamReference
instance Eq MandatoryEarlyTerminationAdjustedDates
instance Show MandatoryEarlyTerminationAdjustedDates
instance Eq PaymentDatesReference
instance Show PaymentDatesReference
instance Eq RelevantUnderlyingDateReference
instance Show RelevantUnderlyingDateReference
instance Eq ResetDatesReference
instance Show ResetDatesReference
instance Eq SettlementRateOptionAttributes
instance Show SettlementRateOptionAttributes
instance Eq SwaptionPhysicalSettlement
instance Show SwaptionPhysicalSettlement
instance Eq ValuationDatesReference
instance Show ValuationDatesReference
instance Eq ValuationPostponement
instance Show ValuationPostponement
instance Eq YieldCurveMethod
instance Show YieldCurveMethod
instance Eq SwaptionAdjustedDates
instance Show SwaptionAdjustedDates
instance Eq Swaption
instance Show Swaption
instance Eq SwapAdditionalTerms
instance Show SwapAdditionalTerms
instance Eq Swap
instance Show Swap
instance Eq StubCalculationPeriodAmount
instance Show StubCalculationPeriodAmount
instance Eq SinglePartyOption
instance Show SinglePartyOption
instance Eq SettlementRateOption
instance Show SettlementRateOption
instance Eq SettlementProvision
instance Show SettlementProvision
instance Eq ResetDates
instance Show ResetDates
instance Eq PrincipalExchange
instance Show PrincipalExchange
instance Eq PriceSourceDisruption
instance Show PriceSourceDisruption
instance Eq PaymentDates
instance Show PaymentDates
instance Eq PaymentCalculationPeriod
instance Show PaymentCalculationPeriod
instance Eq OptionalEarlyTerminationAdjustedDates
instance Show OptionalEarlyTerminationAdjustedDates
instance Eq OptionalEarlyTermination
instance Show OptionalEarlyTermination
instance Eq NotionalStepRule
instance Show NotionalStepRule
instance Eq Notional
instance Show Notional
instance Eq NonDeliverableSettlement
instance Show NonDeliverableSettlement
instance Eq MandatoryEarlyTermination
instance Show MandatoryEarlyTermination
instance Eq InterestRateStream
instance Show InterestRateStream
instance Eq InflationRateCalculation
instance Show InflationRateCalculation
instance Eq FxLinkedNotionalSchedule
instance Show FxLinkedNotionalSchedule
instance Eq FxFixingDate
instance Show FxFixingDate
instance Eq Fra
instance Show Fra
instance Eq FloatingRateDefinition
instance Show FloatingRateDefinition
instance Eq FallbackReferencePrice
instance Show FallbackReferencePrice
instance Eq FinalCalculationPeriodDateAdjustment
instance Show FinalCalculationPeriodDateAdjustment
instance Eq ExtendibleProvisionAdjustedDates
instance Show ExtendibleProvisionAdjustedDates
instance Eq ExtendibleProvision
instance Show ExtendibleProvision
instance Eq ExercisePeriod
instance Show ExercisePeriod
instance Eq EarlyTerminationProvision
instance Show EarlyTerminationProvision
instance Eq Discounting
instance Show Discounting
instance Eq DateRelativeToPaymentDates
instance Show DateRelativeToPaymentDates
instance Eq DateRelativeToCalculationPeriodDates
instance Show DateRelativeToCalculationPeriodDates
instance Eq CrossCurrencyMethod
instance Show CrossCurrencyMethod
instance Eq CashSettlementPaymentDate
instance Show CashSettlementPaymentDate
instance Eq CashSettlement
instance Show CashSettlement
instance Eq CashPriceMethod
instance Show CashPriceMethod
instance Eq Cashflows
instance Show Cashflows
instance Eq CapFloor
instance Show CapFloor
instance Eq CancelableProvisionAdjustedDates
instance Show CancelableProvisionAdjustedDates
instance Eq CancelableProvision
instance Show CancelableProvision
instance Eq CalculationPeriodDates
instance Show CalculationPeriodDates
instance Eq CalculationPeriodAmount
instance Show CalculationPeriodAmount
instance Eq CalculationPeriod
instance Show CalculationPeriod
instance Eq Calculation
instance Show Calculation
instance Eq BulletPayment
instance Show BulletPayment
instance Eq BondReference
instance Show BondReference
instance SchemaType YieldCurveMethod
instance SchemaType ValuationPostponement
instance Extension ValuationDatesReference Reference
instance SchemaType ValuationDatesReference
instance SchemaType SwaptionPhysicalSettlement
instance SchemaType SwaptionAdjustedDates
instance Extension Swaption Product
instance SchemaType Swaption
instance SchemaType SwapAdditionalTerms
instance Extension Swap Product
instance SchemaType Swap
instance SchemaType StubCalculationPeriodAmount
instance SchemaType SinglePartyOption
instance Extension SettlementRateOption Scheme
instance SchemaType SettlementRateOption
instance SchemaType SettlementProvision
instance Extension ResetDatesReference Reference
instance SchemaType ResetDatesReference
instance SchemaType ResetDates
instance Extension RelevantUnderlyingDateReference Reference
instance SchemaType RelevantUnderlyingDateReference
instance SchemaType PrincipalExchange
instance SchemaType PriceSourceDisruption
instance Extension PaymentDatesReference Reference
instance SchemaType PaymentDatesReference
instance SchemaType PaymentDates
instance Extension PaymentCalculationPeriod PaymentBase
instance SchemaType PaymentCalculationPeriod
instance SchemaType OptionalEarlyTerminationAdjustedDates
instance SchemaType OptionalEarlyTermination
instance SchemaType NotionalStepRule
instance SchemaType Notional
instance SchemaType NonDeliverableSettlement
instance SchemaType MandatoryEarlyTerminationAdjustedDates
instance SchemaType MandatoryEarlyTermination
instance Extension InterestRateStreamReference Reference
instance SchemaType InterestRateStreamReference
instance Extension InterestRateStream Leg
instance SchemaType InterestRateStream
instance Extension InflationRateCalculation Rate
instance Extension InflationRateCalculation FloatingRate
instance Extension InflationRateCalculation FloatingRateCalculation
instance SchemaType InflationRateCalculation
instance SchemaType FxLinkedNotionalSchedule
instance SchemaType FxLinkedNotionalAmount
instance Extension FxFixingDate Period
instance Extension FxFixingDate Offset
instance SchemaType FxFixingDate
instance Extension Fra Product
instance SchemaType Fra
instance SchemaType FloatingRateDefinition
instance SchemaType FallbackReferencePrice
instance SchemaType FinalCalculationPeriodDateAdjustment
instance SchemaType ExtensionEvent
instance SchemaType ExtendibleProvisionAdjustedDates
instance SchemaType ExtendibleProvision
instance SchemaType ExercisePeriod
instance SchemaType ExerciseEvent
instance SchemaType EarlyTerminationProvision
instance SchemaType EarlyTerminationEvent
instance SchemaType Discounting
instance SchemaType DateRelativeToPaymentDates
instance SchemaType DateRelativeToCalculationPeriodDates
instance SchemaType CrossCurrencyMethod
instance SchemaType CashSettlementPaymentDate
instance SchemaType CashSettlement
instance SchemaType CashPriceMethod
instance SchemaType Cashflows
instance Extension CapFloor Product
instance SchemaType CapFloor
instance SchemaType CancellationEvent
instance SchemaType CancelableProvisionAdjustedDates
instance SchemaType CancelableProvision
instance Extension CalculationPeriodDatesReference Reference
instance SchemaType CalculationPeriodDatesReference
instance SchemaType CalculationPeriodDates
instance SchemaType CalculationPeriodAmount
instance SchemaType CalculationPeriod
instance SchemaType Calculation
instance Extension BulletPayment Product
instance SchemaType BulletPayment
instance SchemaType BondReference

module Data.FpML.V53.Standard

-- | A product to represent a standardized OTC derivative transaction whose
--   economics do not need to be fully described using an FpML schema
--   because they are implied by the product ID.
elementStandardProduct :: XMLParser StandardProduct
elementToXMLStandardProduct :: StandardProduct -> [Content ()]

-- | Simple product representation providing key information about a
--   variety of different products
data StandardProduct
StandardProduct :: Maybe ID -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> [ProductId] -> CashflowNotional -> [BasicQuotation] -> StandardProduct
stdProduct_ID :: StandardProduct -> Maybe ID

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
stdProduct_primaryAssetClass :: StandardProduct -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
stdProduct_secondaryAssetClass :: StandardProduct -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
stdProduct_productType :: StandardProduct -> [ProductType]

-- | A product reference identifier. The product ID is an identifier that
--   describes the key economic characteristics of the trade type, with the
--   exception of concepts such as size (notional, quantity, number of
--   units) and price (fixed rate, strike, etc.) that are negotiated for
--   each transaction. It can be used to hold identifiers such as the
--   <a>UPI</a> (universal product identifier) required by certain
--   regulatory reporting rules. It can also be used to hold identifiers of
--   benchmark products or product temnplates used by certain trading
--   systems or facilities. FpML does not define the domain values
--   associated with this element. Note that the domain values for this
--   element are not strictly an enumerated list.
stdProduct_productId :: StandardProduct -> [ProductId]

-- | The notional amount that was traded.
stdProduct_notional :: StandardProduct -> CashflowNotional

-- | Pricing information for the trade.
stdProduct_quote :: StandardProduct -> [BasicQuotation]
instance Eq StandardProduct
instance Show StandardProduct
instance Extension StandardProduct Product
instance SchemaType StandardProduct

module Data.FpML.V53.Riskdef

-- | Reference to an underlying asset, term point or pricing structure
--   (yield curve).
data AssetOrTermPointOrPricingStructureReference
AssetOrTermPointOrPricingStructureReference :: IDREF -> AssetOrTermPointOrPricingStructureReference
aotpopsr_href :: AssetOrTermPointOrPricingStructureReference -> IDREF

-- | A structure that holds a set of measures about an asset.
data BasicAssetValuation
BasicAssetValuation :: Maybe ID -> Maybe IDREF -> Maybe AnyAssetReference -> Maybe ValuationScenarioReference -> [BasicQuotation] -> BasicAssetValuation
basicAssetVal_ID :: BasicAssetValuation -> Maybe ID

-- | An optional reference to the scenario that this valuation applies to.
basicAssetVal_definitionRef :: BasicAssetValuation -> Maybe IDREF

-- | A reference to the asset or pricing structure that this values.
basicAssetVal_objectReference :: BasicAssetValuation -> Maybe AnyAssetReference

-- | A reference to the valuation scenario used to calculate this
--   valuation. If the Valuation occurs within a ValuationSet, this value
--   is optional and is defaulted from the ValuationSet. If this value
--   occurs in both places, the lower level value (i.e. the one here)
--   overrides that in the higher (i.e. ValuationSet).
basicAssetVal_valuationScenarioReference :: BasicAssetValuation -> Maybe ValuationScenarioReference

-- | One or more numerical measures relating to the asset, possibly
--   together with sensitivities of that measure to pricing inputs
basicAssetVal_quote :: BasicAssetValuation -> [BasicQuotation]

-- | The type defining a denominator term of the formula. Its value is (sum
--   of weighted partials) ^ power.
data DenominatorTerm
DenominatorTerm :: Maybe WeightedPartialDerivative -> Maybe PositiveInteger -> DenominatorTerm

-- | A partial derivative multiplied by a weighting factor.
denomTerm_weightedPartial :: DenominatorTerm -> Maybe WeightedPartialDerivative

-- | The power to which this term is raised.
denomTerm_power :: DenominatorTerm -> Maybe PositiveInteger

-- | The method by which a derivative is computed.
data DerivativeCalculationMethod
DerivativeCalculationMethod :: Scheme -> DerivativeCalculationMethodAttributes -> DerivativeCalculationMethod
data DerivativeCalculationMethodAttributes
DerivativeCalculationMethodAttributes :: Maybe AnyURI -> DerivativeCalculationMethodAttributes
dcma_derivativeCalculationMethodScheme :: DerivativeCalculationMethodAttributes -> Maybe AnyURI

-- | A description of how a numerical derivative is computed.
data DerivativeCalculationProcedure
DerivativeCalculationProcedure :: Maybe DerivativeCalculationMethod -> (Maybe (OneOf3 (Maybe (Decimal), Maybe (Boolean), Maybe (PerturbationType)) XsdString PricingStructureReference)) -> DerivativeCalculationProcedure

-- | The method by which a derivative is computed, e.g. analytic, numerical
--   model, perturbation, etc.
derivCalcProced_method :: DerivativeCalculationProcedure -> Maybe DerivativeCalculationMethod

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The size and direction of the perturbation used to compute the
--   derivative, e.g. 0.0001 = 1 bp.</li>
--   <li>The value is calculated by perturbing by the perturbationAmount
--   and then the negative of the perturbationAmount and then averaging the
--   two values (i.e. the value is half of the difference between
--   perturbing up and perturbing down).</li>
--   <li>The type of perturbation, if any, used to compute the derivative
--   (Absolute vs Relative).</li>
--   </ul>
--   
--   <ol>
--   <li>The formula used to compute the derivative (perhaps could be
--   updated to use the Formula type in EQS.).</li>
--   <li>A reference to the replacement version of the market input, e.g. a
--   bumped yield curve.</li>
--   </ol>
derivCalcProced_choice1 :: DerivativeCalculationProcedure -> (Maybe (OneOf3 (Maybe (Decimal), Maybe (Boolean), Maybe (PerturbationType)) XsdString PricingStructureReference))

-- | A formula for computing a complex derivative from partial derivatives.
--   Its value is the sum of the terms divided by the product of the
--   denominator terms.
data DerivativeFormula
DerivativeFormula :: Maybe FormulaTerm -> Maybe DenominatorTerm -> DerivativeFormula

-- | A term of the formula. Its value is the product of the its coefficient
--   and the referenced partial derivatives.
derivFormula_term :: DerivativeFormula -> Maybe FormulaTerm

-- | A denominator term of the formula. Its value is (sum of weighted
--   partials) ^ power.
derivFormula_denominatorTerm :: DerivativeFormula -> Maybe DenominatorTerm

-- | A type defining a term of the formula. Its value is the product of the
--   its coefficient and the referenced partial derivatives.
data FormulaTerm
FormulaTerm :: Maybe Decimal -> [PricingParameterDerivativeReference] -> FormulaTerm

-- | The coefficient by which this term is multiplied, typically 1 or -1.
formulaTerm_coefficient :: FormulaTerm -> Maybe Decimal

-- | A reference to the partial derivative.
formulaTerm_partialDerivativeReference :: FormulaTerm -> [PricingParameterDerivativeReference]

-- | A generic (user defined) dimension, e.g. for use in a correlation
--   surface. e.g. a currency, stock, etc. This would take values like USD,
--   GBP, JPY, or IBM, MSFT, etc.
data GenericDimension
GenericDimension :: XsdString -> GenericDimensionAttributes -> GenericDimension
data GenericDimensionAttributes
GenericDimensionAttributes :: NormalizedString -> Maybe IDREF -> GenericDimensionAttributes

-- | The name of the dimension. E.g.: <a>Currency</a>, <a>Stock</a>,
--   <a>Issuer</a>, etc.
genericDimensAttrib_name :: GenericDimensionAttributes -> NormalizedString

-- | A reference to an instrument (e.g. currency) that this value
--   represents.
genericDimensAttrib_href :: GenericDimensionAttributes -> Maybe IDREF

-- | A collection of instruments usable for quotation purposes. In future
--   releases, quotable derivative assets may be added after the underlying
--   asset.
data InstrumentSet
InstrumentSet :: (Maybe (OneOf2 Asset Asset)) -> InstrumentSet

-- | Choice between:
--   
--   <ol>
--   <li>Define the underlying asset, either a listed security or other
--   instrument.</li>
--   <li>Defines the underlying asset when it is a curve instrument.</li>
--   </ol>
instrSet_choice0 :: InstrumentSet -> (Maybe (OneOf2 Asset Asset))

-- | A collection of pricing inputs.
data Market
Market :: Maybe ID -> Maybe XsdString -> Maybe QuotedAssetSet -> [PricingStructure] -> [PricingStructureValuation] -> [PricingMethod] -> Market
market_ID :: Market -> Maybe ID

-- | The name of the market, e.g. the USDLIBOR market. Used for description
--   and understandability.
market_name :: Market -> Maybe XsdString

-- | A collection of benchmark instruments and quotes used as inputs to the
--   pricing models.
market_benchmarkQuotes :: Market -> Maybe QuotedAssetSet
market_pricingStructure :: Market -> [PricingStructure]
market_pricingStructureValuation :: Market -> [PricingStructureValuation]

-- | The pricing structure used to quote a benchmark instrument.
market_benchmarkPricingMethod :: Market -> [PricingMethod]

-- | Reference to a market structure.
data MarketReference
MarketReference :: IDREF -> MarketReference
marketRef_href :: MarketReference -> IDREF

-- | The type of perturbation applied to compute a derivative
--   perturbatively.
data PerturbationType
PerturbationType :: Scheme -> PerturbationTypeAttributes -> PerturbationType
data PerturbationTypeAttributes
PerturbationTypeAttributes :: Maybe AnyURI -> PerturbationTypeAttributes
perturTypeAttrib_perturbationTypeScheme :: PerturbationTypeAttributes -> Maybe AnyURI

-- | A unique identifier for the position. The id attribute is defined for
--   intradocument referencing.
data PositionId
PositionId :: Scheme -> PositionIdAttributes -> PositionId
data PositionIdAttributes
PositionIdAttributes :: Maybe AnyURI -> Maybe ID -> PositionIdAttributes
positIdAttrib_positionIdScheme :: PositionIdAttributes -> Maybe AnyURI
positIdAttrib_ID :: PositionIdAttributes -> Maybe ID

-- | The substitution of a pricing input (e.g. curve) for another, used in
--   generating prices and risks for valuation scenarios.
data PricingInputReplacement
PricingInputReplacement :: Maybe PricingStructureReference -> Maybe PricingStructureReference -> PricingInputReplacement

-- | A reference to the original value of the pricing input.
pricingInputReplac_originalInputReference :: PricingInputReplacement -> Maybe PricingStructureReference

-- | A reference to the substitution to do.
pricingInputReplac_replacementInputReference :: PricingInputReplacement -> Maybe PricingStructureReference

-- | The type of pricing structure represented.
data PricingInputType
PricingInputType :: Scheme -> PricingInputTypeAttributes -> PricingInputType
data PricingInputTypeAttributes
PricingInputTypeAttributes :: Maybe AnyURI -> PricingInputTypeAttributes
pricingInputTypeAttrib_pricingInputTypeScheme :: PricingInputTypeAttributes -> Maybe AnyURI

-- | A set of index values that identify a pricing data point. For example:
--   (strike = 17%, expiration = 6M, term = 1Y.
data PricingDataPointCoordinate
PricingDataPointCoordinate :: Maybe ID -> (Maybe (OneOf4 TimeDimension TimeDimension Decimal GenericDimension)) -> PricingDataPointCoordinate
pricingDataPointCoord_ID :: PricingDataPointCoordinate -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>A time dimension that represents the term of a financial
--   instrument, e.g. of a zero-coupon bond on a curve, or of an underlying
--   caplet or swap for an option.</li>
--   <li>A time dimension that represents the time to expiration of an
--   option.</li>
--   <li>A numerical dimension that represents the strike rate or price of
--   an option.</li>
--   <li>generic</li>
--   </ol>
pricingDataPointCoord_choice0 :: PricingDataPointCoordinate -> (Maybe (OneOf4 TimeDimension TimeDimension Decimal GenericDimension))

-- | Reference to a Pricing Data Point Coordinate.
data PricingDataPointCoordinateReference
PricingDataPointCoordinateReference :: IDREF -> PricingDataPointCoordinateReference
pdpcr_href :: PricingDataPointCoordinateReference -> IDREF

-- | For an asset (e.g. a reference/benchmark asset), the pricing structure
--   used to price it. Used, for example, to specify that the rateIndex
--   <a>USD-LIBOR-Telerate</a> with term = 6M is priced using the
--   <a>USD-LIBOR-Close</a> curve.
data PricingMethod
PricingMethod :: Maybe AnyAssetReference -> Maybe PricingStructureReference -> PricingMethod

-- | The asset whose price is required.
pricingMethod_assetReference :: PricingMethod -> Maybe AnyAssetReference

-- | A reference to the pricing input used to value the asset.
pricingMethod_pricingInputReference :: PricingMethod -> Maybe PricingStructureReference

-- | A definition of the mathematical derivative with respect to a specific
--   pricing parameter.
data PricingParameterDerivative
PricingParameterDerivative :: Maybe ID -> Maybe XsdString -> (Maybe (OneOf2 AssetOrTermPointOrPricingStructureReference [ValuationReference])) -> Maybe DerivativeCalculationProcedure -> PricingParameterDerivative
pricingParamDeriv_ID :: PricingParameterDerivative -> Maybe ID

-- | A description, if needed, of how the derivative is computed.
pricingParamDeriv_description :: PricingParameterDerivative -> Maybe XsdString

-- | Choice between:
--   
--   <ol>
--   <li>A reference to the pricing input parameter to which the
--   sensitivity is computed. If it is omitted, the derivative definition
--   is generic, and applies to any input point in the valuation set.</li>
--   <li>Reference(s) to the pricing input dates that are shifted when the
--   sensitivity is computed. Depending on the time advance method used,
--   this list could vary. Used for describing time-advance derivatives
--   (theta, carry, etc.)</li>
--   </ol>
pricingParamDeriv_choice1 :: PricingParameterDerivative -> (Maybe (OneOf2 AssetOrTermPointOrPricingStructureReference [ValuationReference]))

-- | The method by which a derivative is computed, e.g. analytic, numerical
--   model, perturbation, etc., and the corresponding parameters
pricingParamDeriv_calculationProcedure :: PricingParameterDerivative -> Maybe DerivativeCalculationProcedure

-- | Reference to a partial derivative.
data PricingParameterDerivativeReference
PricingParameterDerivativeReference :: IDREF -> PricingParameterDerivativeReference
ppdr_href :: PricingParameterDerivativeReference -> IDREF

-- | A definition of a shift with respect to a specific pricing parameter.
data PricingParameterShift
PricingParameterShift :: Maybe ID -> Maybe AssetOrTermPointOrPricingStructureReference -> Maybe Decimal -> Maybe PriceQuoteUnits -> PricingParameterShift
pricingParamShift_ID :: PricingParameterShift -> Maybe ID
pricingParamShift_parameterReference :: PricingParameterShift -> Maybe AssetOrTermPointOrPricingStructureReference

-- | The size of the denominator, e.g. 0.0001 = 1 bp.
pricingParamShift_shift :: PricingParameterShift -> Maybe Decimal

-- | The units of the denominator, e.g. currency. If not present, use the
--   units of the PricingInputReference.
pricingParamShift_shiftUnits :: PricingParameterShift -> Maybe PriceQuoteUnits

-- | An abstract pricing structure valuation base type. Used as a base for
--   values of pricing structures such as yield curves and volatility
--   matrices. Derived from the <a>Valuation</a> type.
data PricingStructureValuation
PricingStructureValuation :: Maybe ID -> Maybe IDREF -> Maybe AnyAssetReference -> Maybe ValuationScenarioReference -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe DateTime -> PricingStructureValuation
pricingStructVal_ID :: PricingStructureValuation -> Maybe ID

-- | An optional reference to the scenario that this valuation applies to.
pricingStructVal_definitionRef :: PricingStructureValuation -> Maybe IDREF

-- | A reference to the asset or pricing structure that this values.
pricingStructVal_objectReference :: PricingStructureValuation -> Maybe AnyAssetReference

-- | A reference to the valuation scenario used to calculate this
--   valuation. If the Valuation occurs within a ValuationSet, this value
--   is optional and is defaulted from the ValuationSet. If this value
--   occurs in both places, the lower level value (i.e. the one here)
--   overrides that in the higher (i.e. ValuationSet).
pricingStructVal_valuationScenarioReference :: PricingStructureValuation -> Maybe ValuationScenarioReference

-- | The base date for which the structure applies, i.e. the curve date.
--   Normally this will align with the valuation date.
pricingStructVal_baseDate :: PricingStructureValuation -> Maybe IdentifiedDate

-- | The spot settlement date for which the structure applies, normally 0-2
--   days after the base date. The difference between the baseDate and the
--   spotDate is termed the settlement lag, and is sometimes called <a>days
--   to spot</a>.
pricingStructVal_spotDate :: PricingStructureValuation -> Maybe IdentifiedDate

-- | The date from which the input data used to construct the pricing input
--   was obtained. Often the same as the baseDate, but sometimes the
--   pricing input may be <a>rolled forward</a>, in which input data from
--   one date is used to generate a curve for a later date.
pricingStructVal_inputDataDate :: PricingStructureValuation -> Maybe IdentifiedDate

-- | The last date for which data is supplied in this pricing input.
pricingStructVal_endDate :: PricingStructureValuation -> Maybe IdentifiedDate

-- | The date and time when the pricing input was generated.
pricingStructVal_buildDateTime :: PricingStructureValuation -> Maybe DateTime

-- | A collection of quoted assets.
data QuotedAssetSet
QuotedAssetSet :: Maybe InstrumentSet -> [BasicAssetValuation] -> QuotedAssetSet

-- | A collection of instruments used as a basis for quotation.
quotedAssetSet_instrumentSet :: QuotedAssetSet -> Maybe InstrumentSet

-- | A collection of valuations (quotes) for the assets needed in the set.
--   Normally these quotes will be for the underlying assets listed above,
--   but they don't necesarily have to be.
quotedAssetSet_assetQuote :: QuotedAssetSet -> [BasicAssetValuation]

-- | A set of characteristics describing a sensitivity.
data SensitivityDefinition
SensitivityDefinition :: Maybe ID -> Maybe XsdString -> Maybe ValuationScenarioReference -> OneOf2 ([PricingParameterDerivative], Maybe (DerivativeFormula)) (OneOf2 TimeDimension ((Maybe (OneOf2 PricingDataPointCoordinate PricingDataPointCoordinateReference)))) -> SensitivityDefinition
sensitDefin_ID :: SensitivityDefinition -> Maybe ID

-- | The name of the derivative, e.g. first derivative, Hessian, etc.
--   Typically not required, but may be used to explain more complex
--   derivative calculations.
sensitDefin_name :: SensitivityDefinition -> Maybe XsdString

-- | Reference to the valuation scenario to which this sensitivity
--   definition applies. If the SensitivityDefinition occurs within a
--   SensitivitySetDefinition, this is not required and normally not used.
--   In this case, if it is supplied it overrides the
--   valuationScenarioReference in the SensitivitySetDefinition.
sensitDefin_valuationScenarioReference :: SensitivityDefinition -> Maybe ValuationScenarioReference

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>A partial derivative of the measure with respect to an input.</li>
--   <li>A formula defining how to compute the derivative from the partial
--   derivatives. If absent, the derivative is just the product of the
--   partial derivatives. Normally only required for more higher-order
--   derivatives, e.g. Hessians.</li>
--   </ul>
--   
--   <ol>
--   <li>unknown</li>
--   </ol>
sensitDefin_choice2 :: SensitivityDefinition -> OneOf2 ([PricingParameterDerivative], Maybe (DerivativeFormula)) (OneOf2 TimeDimension ((Maybe (OneOf2 PricingDataPointCoordinate PricingDataPointCoordinateReference))))

-- | A sensitivity report definition, consisting of a collection of
--   sensitivity definitions.
data SensitivitySetDefinition
SensitivitySetDefinition :: Maybe ID -> Maybe XsdString -> Maybe QuotationCharacteristics -> Maybe ValuationScenarioReference -> Maybe PricingInputType -> Maybe PricingStructureReference -> Maybe Decimal -> [SensitivityDefinition] -> Maybe DerivativeCalculationProcedure -> SensitivitySetDefinition
sensitSetDefin_ID :: SensitivitySetDefinition -> Maybe ID

-- | The name of the sensitivity set definition, e.g. <a>USDLIBOR curve
--   sensitivities</a>.
sensitSetDefin_name :: SensitivitySetDefinition -> Maybe XsdString

-- | The default characteristics of the quotation, e.g. type, units, etc.
sensitSetDefin_sensitivityCharacteristics :: SensitivitySetDefinition -> Maybe QuotationCharacteristics

-- | Reference to the valuation scenario to which this sensitivity
--   definition applies, e.g. a reference to the EOD valuation scenario. If
--   not supplied, this sensitivity set definition is generic to a variety
--   of valuation scenarios.
sensitSetDefin_valuationScenarioReference :: SensitivitySetDefinition -> Maybe ValuationScenarioReference

-- | The type of the pricing input to which the sensitivity is shown, e.g.
--   a yield curve or volatility matrix.
sensitSetDefin_pricingInputType :: SensitivitySetDefinition -> Maybe PricingInputType

-- | A reference to the pricing input to which the sensitivity is shown,
--   e.g. a reference to a USDLIBOR yield curve.
sensitSetDefin_pricingInputReference :: SensitivitySetDefinition -> Maybe PricingStructureReference

-- | The size of the denominator, e.g. 0.0001 = 1 bp. For derivatives with
--   respect to time, the default period is 1 day.
sensitSetDefin_scale :: SensitivitySetDefinition -> Maybe Decimal

-- | A set of sensitivity definitions. Either one per point reported, or
--   one generic definition that applies to all points.
sensitSetDefin_sensitivityDefinition :: SensitivitySetDefinition -> [SensitivityDefinition]

-- | The method by which each derivative is computed, e.g. analytic,
--   numerical model, perturbation, etc., and the corresponding parameters
--   (eg. shift amounts).
sensitSetDefin_calculationProcedure :: SensitivitySetDefinition -> Maybe DerivativeCalculationProcedure

-- | A reference to a sensitivity set definition.
data SensitivitySetDefinitionReference
SensitivitySetDefinitionReference :: IDREF -> SensitivitySetDefinitionReference
sensitSetDefinRef_href :: SensitivitySetDefinitionReference -> IDREF

-- | The time dimensions of a term-structure. The user must supply either a
--   tenor or a date or both.
data TimeDimension
TimeDimension :: (Maybe (OneOf1 (Maybe (Date), Maybe (Period)))) -> TimeDimension

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>The absolute date corresponding to this term point, for example
--   January 3, 2005.</li>
--   <li>The amount of time from the base date of the pricing input to the
--   specified term point, e.g. 6M or 5Y.</li>
--   </ul>
timeDimens_choice0 :: TimeDimension -> (Maybe (OneOf1 (Maybe (Date), Maybe (Period))))

-- | A valuation of an valuable object - an asset or a pricing input. This
--   is an abstract type, used as a base for values of pricing structures
--   such as yield curves as well as asset values.
data Valuation
Valuation :: Maybe ID -> Maybe IDREF -> Maybe AnyAssetReference -> Maybe ValuationScenarioReference -> Valuation
valuation_ID :: Valuation -> Maybe ID

-- | An optional reference to the scenario that this valuation applies to.
valuation_definitionRef :: Valuation -> Maybe IDREF

-- | A reference to the asset or pricing structure that this values.
valuation_objectReference :: Valuation -> Maybe AnyAssetReference

-- | A reference to the valuation scenario used to calculate this
--   valuation. If the Valuation occurs within a ValuationSet, this value
--   is optional and is defaulted from the ValuationSet. If this value
--   occurs in both places, the lower level value (i.e. the one here)
--   overrides that in the higher (i.e. ValuationSet).
valuation_scenarioReference :: Valuation -> Maybe ValuationScenarioReference

-- | Reference to a Valuation or any derived structure such as
--   PricingStructureValuation.
data ValuationReference
ValuationReference :: IDREF -> ValuationReference
valRef_href :: ValuationReference -> IDREF

-- | A set of rules for generating a valuation.
data ValuationScenario
ValuationScenario :: Maybe ID -> Maybe XsdString -> Maybe IdentifiedDate -> Maybe MarketReference -> [PricingParameterShift] -> [PricingInputReplacement] -> ValuationScenario
valScenar_ID :: ValuationScenario -> Maybe ID

-- | The (optional) name for this valuation scenario, used for
--   understandability. For example <a>EOD Valuations</a>.
valScenar_name :: ValuationScenario -> Maybe XsdString

-- | The date for which the assets are valued.
valScenar_valuationDate :: ValuationScenario -> Maybe IdentifiedDate

-- | A reference to the market environment used to price the asset.
valScenar_marketReference :: ValuationScenario -> Maybe MarketReference

-- | A collection of shifts to be applied to market inputs prior to
--   computation of the derivative.
valScenar_shift :: ValuationScenario -> [PricingParameterShift]

-- | A collection of shifts to be applied to market inputs prior to
--   computation of the derivative.
valScenar_replacement :: ValuationScenario -> [PricingInputReplacement]

-- | Reference to a valuation scenario.
data ValuationScenarioReference
ValuationScenarioReference :: IDREF -> ValuationScenarioReference
valScenarRef_href :: ValuationScenarioReference -> IDREF

-- | A partial derivative multiplied by a weighting factor.
data WeightedPartialDerivative
WeightedPartialDerivative :: Maybe PricingParameterDerivativeReference -> Maybe Decimal -> WeightedPartialDerivative

-- | A reference to a partial derivative defined in the
--   ComputedDerivative.model, i.e. defined as part of this sensitivity
--   definition.
weightPartialDeriv_partialDerivativeReference :: WeightedPartialDerivative -> Maybe PricingParameterDerivativeReference

-- | The weight factor to be applied to the partial derivative, e.g. 1 or
--   -1, or some other scaling value.
weightPartialDeriv_weight :: WeightedPartialDerivative -> Maybe Decimal

-- | This is a global element used for creating global types. It holds
--   Market information, e.g. curves, surfaces, quotes, etc.
elementMarket :: XMLParser Market
elementToXMLMarket :: Market -> [Content ()]
elementPricingStructure :: XMLParser PricingStructure
elementToXMLPricingStructure :: PricingStructure -> [Content ()]
elementPricingStructureValuation :: XMLParser PricingStructureValuation
elementToXMLPricingStructureValuation :: PricingStructureValuation -> [Content ()]
instance Eq AssetOrTermPointOrPricingStructureReference
instance Show AssetOrTermPointOrPricingStructureReference
instance Eq DerivativeCalculationMethodAttributes
instance Show DerivativeCalculationMethodAttributes
instance Eq GenericDimensionAttributes
instance Show GenericDimensionAttributes
instance Eq MarketReference
instance Show MarketReference
instance Eq PerturbationTypeAttributes
instance Show PerturbationTypeAttributes
instance Eq PositionIdAttributes
instance Show PositionIdAttributes
instance Eq PricingInputTypeAttributes
instance Show PricingInputTypeAttributes
instance Eq PricingDataPointCoordinateReference
instance Show PricingDataPointCoordinateReference
instance Eq PricingParameterDerivativeReference
instance Show PricingParameterDerivativeReference
instance Eq SensitivitySetDefinitionReference
instance Show SensitivitySetDefinitionReference
instance Eq ValuationReference
instance Show ValuationReference
instance Eq ValuationScenarioReference
instance Show ValuationScenarioReference
instance Eq WeightedPartialDerivative
instance Show WeightedPartialDerivative
instance Eq ValuationScenario
instance Show ValuationScenario
instance Eq Valuation
instance Show Valuation
instance Eq TimeDimension
instance Show TimeDimension
instance Eq SensitivitySetDefinition
instance Show SensitivitySetDefinition
instance Eq SensitivityDefinition
instance Show SensitivityDefinition
instance Eq QuotedAssetSet
instance Show QuotedAssetSet
instance Eq PricingStructureValuation
instance Show PricingStructureValuation
instance Eq PricingParameterShift
instance Show PricingParameterShift
instance Eq PricingParameterDerivative
instance Show PricingParameterDerivative
instance Eq PricingMethod
instance Show PricingMethod
instance Eq PricingDataPointCoordinate
instance Show PricingDataPointCoordinate
instance Eq PricingInputType
instance Show PricingInputType
instance Eq PricingInputReplacement
instance Show PricingInputReplacement
instance Eq PositionId
instance Show PositionId
instance Eq PerturbationType
instance Show PerturbationType
instance Eq Market
instance Show Market
instance Eq InstrumentSet
instance Show InstrumentSet
instance Eq GenericDimension
instance Show GenericDimension
instance Eq FormulaTerm
instance Show FormulaTerm
instance Eq DerivativeFormula
instance Show DerivativeFormula
instance Eq DerivativeCalculationProcedure
instance Show DerivativeCalculationProcedure
instance Eq DerivativeCalculationMethod
instance Show DerivativeCalculationMethod
instance Eq DenominatorTerm
instance Show DenominatorTerm
instance Eq BasicAssetValuation
instance Show BasicAssetValuation
instance SchemaType WeightedPartialDerivative
instance Extension ValuationScenarioReference Reference
instance SchemaType ValuationScenarioReference
instance SchemaType ValuationScenario
instance Extension ValuationReference Reference
instance SchemaType ValuationReference
instance SchemaType Valuation
instance SchemaType TimeDimension
instance Extension SensitivitySetDefinitionReference Reference
instance SchemaType SensitivitySetDefinitionReference
instance SchemaType SensitivitySetDefinition
instance SchemaType SensitivityDefinition
instance SchemaType QuotedAssetSet
instance Extension PricingStructureValuation Valuation
instance SchemaType PricingStructureValuation
instance SchemaType PricingParameterShift
instance Extension PricingParameterDerivativeReference Reference
instance SchemaType PricingParameterDerivativeReference
instance SchemaType PricingParameterDerivative
instance SchemaType PricingMethod
instance Extension PricingDataPointCoordinateReference Reference
instance SchemaType PricingDataPointCoordinateReference
instance SchemaType PricingDataPointCoordinate
instance Extension PricingInputType Scheme
instance SchemaType PricingInputType
instance SchemaType PricingInputReplacement
instance Extension PositionId Scheme
instance SchemaType PositionId
instance Extension PerturbationType Scheme
instance SchemaType PerturbationType
instance Extension MarketReference Reference
instance SchemaType MarketReference
instance SchemaType Market
instance SchemaType InstrumentSet
instance Extension GenericDimension XsdString
instance SchemaType GenericDimension
instance SchemaType FormulaTerm
instance SchemaType DerivativeFormula
instance SchemaType DerivativeCalculationProcedure
instance Extension DerivativeCalculationMethod Scheme
instance SchemaType DerivativeCalculationMethod
instance SchemaType DenominatorTerm
instance Extension BasicAssetValuation Valuation
instance SchemaType BasicAssetValuation
instance Extension AssetOrTermPointOrPricingStructureReference Reference
instance SchemaType AssetOrTermPointOrPricingStructureReference

module Data.FpML.V53.Valuation

-- | A structure that holds a set of measures about an asset, including
--   possibly their sensitivities.
data AssetValuation
AssetValuation :: Maybe ID -> Maybe IDREF -> Maybe AnyAssetReference -> Maybe ValuationScenarioReference -> [Quotation] -> [FxRate] -> AssetValuation
assetVal_ID :: AssetValuation -> Maybe ID

-- | An optional reference to the scenario that this valuation applies to.
assetVal_definitionRef :: AssetValuation -> Maybe IDREF

-- | A reference to the asset or pricing structure that this values.
assetVal_objectReference :: AssetValuation -> Maybe AnyAssetReference

-- | A reference to the valuation scenario used to calculate this
--   valuation. If the Valuation occurs within a ValuationSet, this value
--   is optional and is defaulted from the ValuationSet. If this value
--   occurs in both places, the lower level value (i.e. the one here)
--   overrides that in the higher (i.e. ValuationSet).
assetVal_valuationScenarioReference :: AssetValuation -> Maybe ValuationScenarioReference

-- | One or more numerical measures relating to the asset, possibly
--   together with sensitivities of that measure to pricing inputs.
assetVal_quote :: AssetValuation -> [Quotation]

-- | Indicates the rate of a currency conversion that may have been used to
--   compute valuations.
assetVal_fxRate :: AssetValuation -> [FxRate]

-- | A valuation scenario that is derived from another valuation scenario.
data DerivedValuationScenario
DerivedValuationScenario :: Maybe ID -> Maybe XsdString -> Maybe ValuationScenarioReference -> Maybe IdentifiedDate -> Maybe MarketReference -> [PricingParameterShift] -> DerivedValuationScenario
derivedValScenar_ID :: DerivedValuationScenario -> Maybe ID

-- | The (optional) name for this valuation scenario, used for
--   understandability. For example <a>EOD Valuations</a>.
derivedValScenar_name :: DerivedValuationScenario -> Maybe XsdString

-- | An (optional) reference to a valuation scenario from which this one is
--   derived.
derivedValScenar_baseValuationScenario :: DerivedValuationScenario -> Maybe ValuationScenarioReference

-- | The (optional) date for which the assets are valued. If not present,
--   the valuation date will be that of the base valuation scenario.
derivedValScenar_valuationDate :: DerivedValuationScenario -> Maybe IdentifiedDate

-- | A reference to the market environment used to price the asset. If not
--   present, the market will be that of the base valuation scenario.
derivedValScenar_marketReference :: DerivedValuationScenario -> Maybe MarketReference

-- | A collection of shifts to be applied to market inputs prior to
--   computation of the derivative.
derivedValScenar_shift :: DerivedValuationScenario -> [PricingParameterShift]

-- | Some kind of numerical measure about an asset, eg. its NPV, together
--   with characteristics of that measure, together with optional
--   sensitivities.
data Quotation
Quotation :: Maybe Decimal -> Maybe AssetMeasureType -> Maybe PriceQuoteUnits -> Maybe QuotationSideEnum -> Maybe Currency -> Maybe ReportingCurrencyType -> Maybe QuoteTiming -> (Maybe (OneOf2 BusinessCenter ExchangeId)) -> [InformationSource] -> Maybe PricingModel -> Maybe DateTime -> Maybe Date -> Maybe DateTime -> Maybe CashflowType -> [SensitivitySet] -> Quotation

-- | The value of the the quotation.
quotation_value :: Quotation -> Maybe Decimal

-- | The type of the value that is measured. This could be an NPV, a cash
--   flow, a clean price, etc.
quotation_measureType :: Quotation -> Maybe AssetMeasureType

-- | The optional units that the measure is expressed in. If not supplied,
--   this is assumed to be a price/value in currency units.
quotation_quoteUnits :: Quotation -> Maybe PriceQuoteUnits

-- | The side (bid<i>mid</i>ask) of the measure.
quotation_side :: Quotation -> Maybe QuotationSideEnum

-- | The optional currency that the measure is expressed in. If not
--   supplied, this is defaulted from the reportingCurrency in the
--   valuationScenarioDefinition.
quotation_currency :: Quotation -> Maybe Currency

-- | The optional currency that the measure is expressed in. If not
--   supplied, this is defaulted from the reportingCurrency in the
--   valuationScenarioDefinition.
quotation_currencyType :: Quotation -> Maybe ReportingCurrencyType

-- | When during a day the quote is for. Typically, if this element is
--   supplied, the QuoteLocation needs also to be supplied.
quotation_timing :: Quotation -> Maybe QuoteTiming

-- | Choice between:
--   
--   <ol>
--   <li>A city or other business center.</li>
--   <li>The exchange (e.g. stock or futures exchange) from which the quote
--   is obtained.</li>
--   </ol>
quotation_choice7 :: Quotation -> (Maybe (OneOf2 BusinessCenter ExchangeId))

-- | The information source where a published or displayed market rate will
--   be obtained, e.g. Telerate Page 3750.
quotation_informationSource :: Quotation -> [InformationSource]

-- | .
quotation_pricingModel :: Quotation -> Maybe PricingModel

-- | When the quote was observed or derived.
quotation_time :: Quotation -> Maybe DateTime

-- | When the quote was computed.
quotation_valuationDate :: Quotation -> Maybe Date

-- | When does the quote cease to be valid.
quotation_expiryTime :: Quotation -> Maybe DateTime

-- | For cash flows, the type of the cash flows. Examples include: Coupon
--   payment, Premium Fee, Settlement Fee, Brokerage Fee, etc.
quotation_cashflowType :: Quotation -> Maybe CashflowType

-- | Zero or more sets of sensitivities of this measure to various input
--   parameters.
quotation_sensitivitySet :: Quotation -> [SensitivitySet]

-- | The roles of the parties in reporting information such as positions.
data ReportingRoles
ReportingRoles :: Maybe PartyReference -> Maybe AccountReference -> Maybe PartyReference -> Maybe PartyReference -> Maybe PartyReference -> ReportingRoles

-- | A reference to the party from whose perspective the position is
--   valued, ie. the owner or holder of the position.
reportRoles_baseParty :: ReportingRoles -> Maybe PartyReference

-- | A reference to the party from whose perspective the position is
--   valued, ie. the owner or holder of the position.
reportRoles_baseAccount :: ReportingRoles -> Maybe AccountReference

-- | A reference to the party responsible for reporting trading activities.
reportRoles_activityProvider :: ReportingRoles -> Maybe PartyReference

-- | A reference to the party responsible for reporting the position itself
--   and its constituents.
reportRoles_positionProvider :: ReportingRoles -> Maybe PartyReference

-- | A reference to the party responsible for calculating and reporting the
--   valuations of the positions.
reportRoles_valuationProvider :: ReportingRoles -> Maybe PartyReference

-- | An servicing date relevant for a trade structure, such as a payment or
--   a reset.
data ScheduledDate
ScheduledDate :: (Maybe (OneOf1 (Maybe (Date), Maybe (Date)))) -> Maybe ScheduledDateType -> Maybe AnyAssetReference -> (Maybe (OneOf2 AssetValuation ValuationReference)) -> ScheduledDate

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>unadjustedDate</li>
--   <li>adjustedDate</li>
--   </ul>
schedDate_choice0 :: ScheduledDate -> (Maybe (OneOf1 (Maybe (Date), Maybe (Date))))

-- | The type of the date, e.g. next or previous payment.
schedDate_type :: ScheduledDate -> Maybe ScheduledDateType

-- | A reference to the leg (or other product component) for which these
--   dates occur.
schedDate_assetReference :: ScheduledDate -> Maybe AnyAssetReference

-- | Choice between:
--   
--   <ol>
--   <li>The value that is associated with the scheduled date.</li>
--   <li>A reference to the value associated with this scheduled date.</li>
--   </ol>
schedDate_choice3 :: ScheduledDate -> (Maybe (OneOf2 AssetValuation ValuationReference))

-- | A list of dates (cash flows, resets, etc.) that are relevant for this
--   structure, e.g. next cash flow, last reset, etc. Provides a way to
--   list upcoming or recent servicing dates related to this trade stream
--   in a way that is simpler and more flexible than the FpML
--   <a>cashflows</a> structure.
data ScheduledDates
ScheduledDates :: [ScheduledDate] -> ScheduledDates

-- | A single stream level scheduled servicing date.
schedDates_scheduledDate :: ScheduledDates -> [ScheduledDate]

-- | A scheme used to identify the type of a stream scheduled servicing
--   date.
data ScheduledDateType
ScheduledDateType :: Scheme -> ScheduledDateTypeAttributes -> ScheduledDateType
data ScheduledDateTypeAttributes
ScheduledDateTypeAttributes :: Maybe AnyURI -> ScheduledDateTypeAttributes
schedDateTypeAttrib_scheduledDateTypeScheme :: ScheduledDateTypeAttributes -> Maybe AnyURI

-- | The sensitivity of a value to a defined change in input parameters.
data Sensitivity
Sensitivity :: Decimal -> SensitivityAttributes -> Sensitivity
data SensitivityAttributes
SensitivityAttributes :: Maybe NormalizedString -> Maybe IDREF -> SensitivityAttributes

-- | A optional name for this sensitivity. This is primarily intended for
--   display purposes.
sensitAttrib_name :: SensitivityAttributes -> Maybe NormalizedString

-- | A optional (but normally supplied) reference to the definition of this
--   sensitivity.
sensitAttrib_definitionRef :: SensitivityAttributes -> Maybe IDREF

-- | A collection of sensitivities. References a definition that explains
--   the meaning/type of the sensitivities.
data SensitivitySet
SensitivitySet :: Maybe ID -> Maybe XsdString -> Maybe SensitivitySetDefinitionReference -> [Sensitivity] -> SensitivitySet
sensitSet_ID :: SensitivitySet -> Maybe ID
sensitSet_name :: SensitivitySet -> Maybe XsdString

-- | A reference to a sensitivity set definition.
sensitSet_definitionReference :: SensitivitySet -> Maybe SensitivitySetDefinitionReference
sensitSet_sensitivity :: SensitivitySet -> [Sensitivity]

-- | A set of valuation.
data Valuations
Valuations :: (Maybe (OneOf2 AssetValuation ValuationReference)) -> Valuations

-- | Choice between:
--   
--   <ol>
--   <li>valuation</li>
--   <li>A reference to a quotation</li>
--   </ol>
valuations_choice0 :: Valuations -> (Maybe (OneOf2 AssetValuation ValuationReference))

-- | A set of valuation inputs and results. This structure can be used for
--   requesting valuations, or for reporting them. In general, the request
--   fills in fewer elements.
data ValuationSet
ValuationSet :: Maybe ID -> Maybe XsdString -> [ValuationScenario] -> [ValuationScenarioReference] -> Maybe PartyReference -> [QuotationCharacteristics] -> [SensitivitySetDefinition] -> Maybe ValuationSetDetail -> [AssetValuation] -> ValuationSet
valuationSet_ID :: ValuationSet -> Maybe ID

-- | The name of the valuation set, used to understand what it means. E.g.,
--   <a>EOD Values and Risks for Party A</a>.
valuationSet_name :: ValuationSet -> Maybe XsdString

-- | Valuation scenerios used (requested/reported) in this valuation set.
--   E.g., the EOD valuation scenario for a particular value date. Used for
--   the first occurrence of a valuation scenario in a document.
valuationSet_valuationScenario :: ValuationSet -> [ValuationScenario]

-- | References to valuation scenarios used (requested/reported) in this
--   valuation set. E..g, a reference to the EOD valuation scenario for a
--   particular value date. Used for subsequence occurrences of a valuation
--   set in an FpML document.
valuationSet_valuationScenarioReference :: ValuationSet -> [ValuationScenarioReference]

-- | Reference to the party from whose point of view the assets are valued.
valuationSet_baseParty :: ValuationSet -> Maybe PartyReference

-- | Charactistics (measure types, units, sides, etc.) of the quotes used
--   (requested/reported) in the valuation set.
valuationSet_quotationCharacteristics :: ValuationSet -> [QuotationCharacteristics]

-- | Definition(s) of sensitivity sets used (requested or reported) in this
--   valuation set.
valuationSet_sensitivitySetDefinition :: ValuationSet -> [SensitivitySetDefinition]

-- | Does this valuation set include a market environment?
valuationSet_detail :: ValuationSet -> Maybe ValuationSetDetail

-- | Valuations reported in this valuation set. These values can be values
--   (NPVs, prices, etc.) or risks (DAR, etc.) and can include
--   sensitivities.
valuationSet_assetValuation :: ValuationSet -> [AssetValuation]

-- | The amount of detail provided in the valuation set, e.g. is market
--   environment data provided, are risk definitions provided, etc.
data ValuationSetDetail
ValuationSetDetail :: Scheme -> ValuationSetDetailAttributes -> ValuationSetDetail
data ValuationSetDetailAttributes
ValuationSetDetailAttributes :: Maybe AnyURI -> ValuationSetDetailAttributes
valSetDetailAttrib_valuationSetDetailScheme :: ValuationSetDetailAttributes -> Maybe AnyURI
elementValuationSet :: XMLParser ValuationSet
elementToXMLValuationSet :: ValuationSet -> [Content ()]

-- | A collection of related trades or positions and the corresponding
--   aggregate exposures generated by these.
data Position
Position :: Maybe ID -> Maybe PositionId -> Maybe PositiveInteger -> Maybe PositionStatusEnum -> Maybe Date -> Maybe PositionOriginEnum -> Maybe PositionHistory -> Maybe ReportingRoles -> Maybe PositionConstituent -> [ScheduledDate] -> [AssetValuation] -> Position
position_ID :: Position -> Maybe ID

-- | A version-independent identifier for the position, possibly based on
--   trade identifier.
position_id :: Position -> Maybe PositionId

-- | A version identifier. Version identifiers must be ascending, i.e.
--   higher numbers imply newer versions. There is no requirement that
--   version identifiers for a position be sequential or small, so for
--   example timestamp-based version identifiers could be used.
position_version :: Position -> Maybe PositiveInteger
position_status :: Position -> Maybe PositionStatusEnum
position_creationDate :: Position -> Maybe Date
position_originatingEvent :: Position -> Maybe PositionOriginEnum
position_history :: Position -> Maybe PositionHistory

-- | Information about the roles of the parties with respect to reporting
--   the positions.
position_reportingRoles :: Position -> Maybe ReportingRoles

-- | The components that create this position.
position_constituent :: Position -> Maybe PositionConstituent

-- | Position level schedule date, such as final payment dates, in a simple
--   and flexible format.
position_scheduledDate :: Position -> [ScheduledDate]

-- | Valuation reported for the position, such as NPV or accrued interest.
--   The asset/object references in the valuations should refer to the deal
--   or components of the deal in the position, e.g. legs, streams, or
--   underlyers.
position_valuation :: Position -> [AssetValuation]

-- | A list of events that have affected a position.
data PositionHistory
PositionHistory :: (Maybe (OneOf10 (Maybe (OriginatingEvent), Maybe (Trade)) TradeAmendmentContent TradeNotionalChange (Maybe (TerminatingEvent), Maybe (TradeNotionalChange)) TradeNovationContent OptionExercise [OptionExpiry] DeClear Withdrawal AdditionalEvent)) -> PositionHistory

-- | Choice between:
--   
--   <ol>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>originatingEvent</li>
--   <li>trade</li>
--   </ul>
--   
--   <ol>
--   <li>amendment</li>
--   <li>increase</li>
--   <li>Sequence of:</li>
--   </ol>
--   
--   <ul>
--   <li>terminatingEvent</li>
--   <li>termination</li>
--   </ul>
--   
--   <ol>
--   <li>novation</li>
--   <li>optionExercise</li>
--   <li>optionExpiry</li>
--   <li>deClear</li>
--   <li>withdrawal</li>
--   <li>The additionalEvent element is an extension/substitution point to
--   customize FpML and add additional events.</li>
--   </ol>
positHistory_choice0 :: PositionHistory -> (Maybe (OneOf10 (Maybe (OriginatingEvent), Maybe (Trade)) TradeAmendmentContent TradeNotionalChange (Maybe (TerminatingEvent), Maybe (TradeNotionalChange)) TradeNovationContent OptionExercise [OptionExpiry] DeClear Withdrawal AdditionalEvent))

-- | The items (trades, trade references, holdings, other positions) that
--   comprise this position. Currently a position may consist only of a
--   single trade, a reference to a previously submitted position, or a
--   reference to the trade. The choice structure is optional to allow
--   extensions to be placed within this container.
data PositionConstituent
PositionConstituent :: (Maybe (OneOf3 Trade PositiveInteger PartyTradeIdentifiers)) -> PositionConstituent

-- | Choice between:
--   
--   <ol>
--   <li>An element that allows the full details of the trade to be used as
--   a mechanism for identifying the trade for which the post-trade event
--   pertains.</li>
--   <li>A previously submitted version of the position.</li>
--   <li>The trade reference identifier(s) allocated to the trade by the
--   parties involved.</li>
--   </ol>
positConstit_choice0 :: PositionConstituent -> (Maybe (OneOf3 Trade PositiveInteger PartyTradeIdentifiers))
instance Eq ScheduledDateTypeAttributes
instance Show ScheduledDateTypeAttributes
instance Eq SensitivityAttributes
instance Show SensitivityAttributes
instance Eq ValuationSetDetailAttributes
instance Show ValuationSetDetailAttributes
instance Eq PositionConstituent
instance Show PositionConstituent
instance Eq PositionHistory
instance Show PositionHistory
instance Eq Position
instance Show Position
instance Eq ValuationSetDetail
instance Show ValuationSetDetail
instance Eq ValuationSet
instance Show ValuationSet
instance Eq Valuations
instance Show Valuations
instance Eq SensitivitySet
instance Show SensitivitySet
instance Eq Sensitivity
instance Show Sensitivity
instance Eq ScheduledDateType
instance Show ScheduledDateType
instance Eq ScheduledDates
instance Show ScheduledDates
instance Eq ScheduledDate
instance Show ScheduledDate
instance Eq ReportingRoles
instance Show ReportingRoles
instance Eq Quotation
instance Show Quotation
instance Eq DerivedValuationScenario
instance Show DerivedValuationScenario
instance Eq AssetValuation
instance Show AssetValuation
instance SchemaType PositionConstituent
instance SchemaType PositionHistory
instance SchemaType Position
instance Extension ValuationSetDetail Scheme
instance SchemaType ValuationSetDetail
instance SchemaType ValuationSet
instance SchemaType Valuations
instance SchemaType SensitivitySet
instance Extension Sensitivity Decimal
instance SchemaType Sensitivity
instance Extension ScheduledDateType Scheme
instance SchemaType ScheduledDateType
instance SchemaType ScheduledDates
instance SchemaType ScheduledDate
instance SchemaType ReportingRoles
instance SchemaType Quotation
instance SchemaType DerivedValuationScenario
instance Extension AssetValuation Valuation
instance SchemaType AssetValuation

module Data.FpML.V53.Reporting.Valuation

-- | A type used to describe the scope/contents of a report.
data ReportContents
ReportContents :: Maybe PartyReference -> Maybe AccountReference -> [TradeCategory] -> Maybe AssetClass -> [AssetClass] -> [ProductType] -> Maybe QueryPortfolio -> ReportContents

-- | The party for which this report was generated.
reportConten_partyReference :: ReportContents -> Maybe PartyReference

-- | The account for which this report was generated.
reportConten_accountReference :: ReportContents -> Maybe AccountReference

-- | Used to categorize trades into user-defined categories, such as house
--   trades vs. customer trades.
reportConten_category :: ReportContents -> [TradeCategory]

-- | A classification of the most important risk class of the trade. FpML
--   defines a simple asset class categorization using a coding scheme.
reportConten_primaryAssetClass :: ReportContents -> Maybe AssetClass

-- | A classification of additional risk classes of the trade, if any. FpML
--   defines a simple asset class categorization using a coding scheme.
reportConten_secondaryAssetClass :: ReportContents -> [AssetClass]

-- | A classification of the type of product. FpML defines a simple product
--   categorization using a coding scheme.
reportConten_productType :: ReportContents -> [ProductType]

-- | The desired query portfolio.
reportConten_queryPortfolio :: ReportContents -> Maybe QueryPortfolio

-- | A type used in valuation enquiry messages which relates a portfolio to
--   its trades and current value.
data PortfolioValuationItem
PortfolioValuationItem :: Maybe Portfolio -> [TradeValuationItem] -> Maybe ValuationSet -> PortfolioValuationItem

-- | Global portfolio element used as a basis for a substitution group.
portfValItem_portfolio :: PortfolioValuationItem -> Maybe Portfolio

-- | Zero or more trade valuation items.
portfValItem_tradeValuationItem :: PortfolioValuationItem -> [TradeValuationItem]
portfValItem_valuationSet :: PortfolioValuationItem -> Maybe ValuationSet

-- | A type defining the content model for a message allowing one party a
--   report containing valuations of one or many existing trades.
data RequestValuationReport
RequestValuationReport :: XsdString -> Maybe PositiveInteger -> Maybe PositiveInteger -> Maybe RequestMessageHeader -> [Validation] -> Maybe Boolean -> Maybe CorrelationId -> [CorrelationId] -> Maybe PositiveInteger -> [OnBehalfOf] -> Maybe ReportContents -> Maybe IdentifiedDate -> [Party] -> [Account] -> Maybe Market -> [PortfolioValuationItem] -> [TradeValuationItem] -> RequestValuationReport

-- | Indicate which version of the FpML Schema an FpML message adheres to.
reqValReport_fpmlVersion :: RequestValuationReport -> XsdString

-- | This optional attribute can be supplied by a message creator in an
--   FpML instance to specify which build number of the schema was used to
--   define the message when it was generated.
reqValReport_expectedBuild :: RequestValuationReport -> Maybe PositiveInteger

-- | The specific build number of this schema version. This attribute is
--   not included in an instance document. Instead, it is supplied by the
--   XML parser when the document is validated against the FpML schema and
--   indicates the build number of the schema file. Every time FpML
--   publishes a change to the schema, validation rules, or examples within
--   a version (e.g., version 4.2) the actual build number is incremented.
--   If no changes have been made between releases within a version (i.e.
--   from Trial Recommendation to Recommendation) the actual build number
--   stays the same.
reqValReport_actualBuild :: RequestValuationReport -> Maybe PositiveInteger
reqValReport_header :: RequestValuationReport -> Maybe RequestMessageHeader

-- | A list of validation sets the sender asserts the document is valid
--   with respect to.
reqValReport_validation :: RequestValuationReport -> [Validation]

-- | Indicates if this message corrects an earlier request.
reqValReport_isCorrection :: RequestValuationReport -> Maybe Boolean

-- | An optional identifier used to correlate between related processes
reqValReport_parentCorrelationId :: RequestValuationReport -> Maybe CorrelationId

-- | A qualified identifier used to correlate between messages
reqValReport_correlationId :: RequestValuationReport -> [CorrelationId]

-- | A numeric value that can be used to order messages with the same
--   correlation identifier from the same sender.
reqValReport_sequenceNumber :: RequestValuationReport -> Maybe PositiveInteger

-- | Indicates which party (or parties) (and accounts) a trade or event is
--   being processed for. Normally there will only be a maximum of 2
--   parties, but in the case of a novation there could be a transferor,
--   transferee, remaining party, and other remaining party. Except for
--   this case, there should be no more than two onABehalfOf references in
--   a message.
reqValReport_onBehalfOf :: RequestValuationReport -> [OnBehalfOf]

-- | The specific characteristics to be included in the report.
reqValReport_reportContents :: RequestValuationReport -> Maybe ReportContents

-- | The date for which this report is requested.
reqValReport_asOfDate :: RequestValuationReport -> Maybe IdentifiedDate
reqValReport_party :: RequestValuationReport -> [Party]

-- | Optional account information used to precisely define the origination
--   and destination of financial instruments.
reqValReport_account :: RequestValuationReport -> [Account]

-- | This is a global element used for creating global types. It holds
--   Market information, e.g. curves, surfaces, quotes, etc.
reqValReport_market :: RequestValuationReport -> Maybe Market

-- | An instance of a unique portfolio valuation.
reqValReport_portfolioValuationItem :: RequestValuationReport -> [PortfolioValuationItem]

-- | An instance of a unique trade valuation.
reqValReport_tradeValuationItem :: RequestValuationReport -> [TradeValuationItem]

-- | A type used in trade valuation enquiry messages which relates a trade
--   identifier to its current value.
data TradeValuationItem
TradeValuationItem :: (Maybe (OneOf2 [PartyTradeIdentifier] Trade)) -> Maybe ValuationSet -> TradeValuationItem

-- | Choice between:
--   
--   <ol>
--   <li>One or more trade identifiers needed to uniquely identify a
--   trade.</li>
--   <li>Fully-described trades whose values are reported.</li>
--   </ol>
tradeValItem_choice0 :: TradeValuationItem -> (Maybe (OneOf2 [PartyTradeIdentifier] Trade))
tradeValItem_valuationSet :: TradeValuationItem -> Maybe ValuationSet

-- | A type defining the content model for a message normally generated in
--   response to a RequestValuationReport request.
data ValuationReport
ValuationReport :: XsdString -> Maybe PositiveInteger -> Maybe PositiveInteger -> Maybe NotificationMessageHeader -> [Validation] -> Maybe CorrelationId -> [CorrelationId] -> Maybe PositiveInteger -> [OnBehalfOf] -> Maybe ReportIdentification -> Maybe ReportContents -> Maybe IdentifiedDate -> [Party] -> [Account] -> Maybe Market -> [PortfolioValuationItem] -> [TradeValuationItem] -> ValuationReport

-- | Indicate which version of the FpML Schema an FpML message adheres to.
valReport_fpmlVersion :: ValuationReport -> XsdString

-- | This optional attribute can be supplied by a message creator in an
--   FpML instance to specify which build number of the schema was used to
--   define the message when it was generated.
valReport_expectedBuild :: ValuationReport -> Maybe PositiveInteger

-- | The specific build number of this schema version. This attribute is
--   not included in an instance document. Instead, it is supplied by the
--   XML parser when the document is validated against the FpML schema and
--   indicates the build number of the schema file. Every time FpML
--   publishes a change to the schema, validation rules, or examples within
--   a version (e.g., version 4.2) the actual build number is incremented.
--   If no changes have been made between releases within a version (i.e.
--   from Trial Recommendation to Recommendation) the actual build number
--   stays the same.
valReport_actualBuild :: ValuationReport -> Maybe PositiveInteger
valReport_header :: ValuationReport -> Maybe NotificationMessageHeader

-- | A list of validation sets the sender asserts the document is valid
--   with respect to.
valReport_validation :: ValuationReport -> [Validation]

-- | An optional identifier used to correlate between related processes
valReport_parentCorrelationId :: ValuationReport -> Maybe CorrelationId

-- | A qualified identifier used to correlate between messages
valReport_correlationId :: ValuationReport -> [CorrelationId]

-- | A numeric value that can be used to order messages with the same
--   correlation identifier from the same sender.
valReport_sequenceNumber :: ValuationReport -> Maybe PositiveInteger

-- | Indicates which party (or parties) (and accounts) a trade or event is
--   being processed for. Normally there will only be a maximum of 2
--   parties, but in the case of a novation there could be a transferor,
--   transferee, remaining party, and other remaining party. Except for
--   this case, there should be no more than two onABehalfOf references in
--   a message.
valReport_onBehalfOf :: ValuationReport -> [OnBehalfOf]

-- | Identifiers for the report instance and section.
valReport_reportIdentification :: ValuationReport -> Maybe ReportIdentification

-- | The specific characteristics included in the report.
valReport_reportContents :: ValuationReport -> Maybe ReportContents

-- | The date for which this request was generated.
valReport_asOfDate :: ValuationReport -> Maybe IdentifiedDate
valReport_party :: ValuationReport -> [Party]

-- | Optional account information used to precisely define the origination
--   and destination of financial instruments.
valReport_account :: ValuationReport -> [Account]

-- | This is a global element used for creating global types. It holds
--   Market information, e.g. curves, surfaces, quotes, etc.
valReport_market :: ValuationReport -> Maybe Market

-- | An instance of a unique portfolio valuation.
valReport_portfolioValuationItem :: ValuationReport -> [PortfolioValuationItem]

-- | A collection of data values describing the state of the given trade.
valReport_tradeValuationItem :: ValuationReport -> [TradeValuationItem]

-- | A type defining the content model for a message that retracts a
--   valuation report. This says that the most recently supplied valuation
--   is erroneous and a previous value should be used.
data ValuationReportRetracted
ValuationReportRetracted :: XsdString -> Maybe PositiveInteger -> Maybe PositiveInteger -> Maybe NotificationMessageHeader -> [Validation] -> Maybe CorrelationId -> [CorrelationId] -> Maybe PositiveInteger -> [OnBehalfOf] -> Maybe ReportIdentification -> Maybe ReportContents -> Maybe IdentifiedDate -> [PartyTradeIdentifier] -> [Party] -> [Account] -> ValuationReportRetracted

-- | Indicate which version of the FpML Schema an FpML message adheres to.
valReportRetrac_fpmlVersion :: ValuationReportRetracted -> XsdString

-- | This optional attribute can be supplied by a message creator in an
--   FpML instance to specify which build number of the schema was used to
--   define the message when it was generated.
valReportRetrac_expectedBuild :: ValuationReportRetracted -> Maybe PositiveInteger

-- | The specific build number of this schema version. This attribute is
--   not included in an instance document. Instead, it is supplied by the
--   XML parser when the document is validated against the FpML schema and
--   indicates the build number of the schema file. Every time FpML
--   publishes a change to the schema, validation rules, or examples within
--   a version (e.g., version 4.2) the actual build number is incremented.
--   If no changes have been made between releases within a version (i.e.
--   from Trial Recommendation to Recommendation) the actual build number
--   stays the same.
valReportRetrac_actualBuild :: ValuationReportRetracted -> Maybe PositiveInteger
valReportRetrac_header :: ValuationReportRetracted -> Maybe NotificationMessageHeader

-- | A list of validation sets the sender asserts the document is valid
--   with respect to.
valReportRetrac_validation :: ValuationReportRetracted -> [Validation]

-- | An optional identifier used to correlate between related processes
valReportRetrac_parentCorrelationId :: ValuationReportRetracted -> Maybe CorrelationId

-- | A qualified identifier used to correlate between messages
valReportRetrac_correlationId :: ValuationReportRetracted -> [CorrelationId]

-- | A numeric value that can be used to order messages with the same
--   correlation identifier from the same sender.
valReportRetrac_sequenceNumber :: ValuationReportRetracted -> Maybe PositiveInteger

-- | Indicates which party (or parties) (and accounts) a trade or event is
--   being processed for. Normally there will only be a maximum of 2
--   parties, but in the case of a novation there could be a transferor,
--   transferee, remaining party, and other remaining party. Except for
--   this case, there should be no more than two onABehalfOf references in
--   a message.
valReportRetrac_onBehalfOf :: ValuationReportRetracted -> [OnBehalfOf]

-- | Identifiers for the report instance and section.
valReportRetrac_reportIdentification :: ValuationReportRetracted -> Maybe ReportIdentification

-- | The specific characteristics included in the report.
valReportRetrac_reportContents :: ValuationReportRetracted -> Maybe ReportContents

-- | The date for which this request was generated.
valReportRetrac_asOfDate :: ValuationReportRetracted -> Maybe IdentifiedDate

-- | One or more trade identifiers needed to uniquely identify a trade.
valReportRetrac_partyTradeIdentifier :: ValuationReportRetracted -> [PartyTradeIdentifier]
valReportRetrac_party :: ValuationReportRetracted -> [Party]

-- | Optional account information used to precisely define the origination
--   and destination of financial instruments.
valReportRetrac_account :: ValuationReportRetracted -> [Account]

-- | Global portfolio element used as a basis for a substitution group.
elementPortfolio :: XMLParser Portfolio
elementToXMLPortfolio :: Portfolio -> [Content ()]

-- | Global element used to substitute for <a>portfolio</a>.
elementQueryPortfolio :: XMLParser QueryPortfolio
elementToXMLQueryPortfolio :: QueryPortfolio -> [Content ()]

-- | Reporting messages.
elementRequestValuationReport :: XMLParser RequestValuationReport
elementToXMLRequestValuationReport :: RequestValuationReport -> [Content ()]
elementValuationReport :: XMLParser ValuationReport
elementToXMLValuationReport :: ValuationReport -> [Content ()]
elementValuationReportRetracted :: XMLParser ValuationReportRetracted
elementToXMLValuationReportRetracted :: ValuationReportRetracted -> [Content ()]
elementValuationReportAcknowledgement :: XMLParser Acknowledgement
elementToXMLValuationReportAcknowledgement :: Acknowledgement -> [Content ()]
elementValuationReportException :: XMLParser Exception
elementToXMLValuationReportException :: Exception -> [Content ()]
instance Eq ValuationReportRetracted
instance Show ValuationReportRetracted
instance Eq ValuationReport
instance Show ValuationReport
instance Eq TradeValuationItem
instance Show TradeValuationItem
instance Eq RequestValuationReport
instance Show RequestValuationReport
instance Eq PortfolioValuationItem
instance Show PortfolioValuationItem
instance Eq ReportContents
instance Show ReportContents
instance Extension ValuationReportRetracted Document
instance Extension ValuationReportRetracted Message
instance Extension ValuationReportRetracted NotificationMessage
instance SchemaType ValuationReportRetracted
instance Extension ValuationReport Document
instance Extension ValuationReport Message
instance Extension ValuationReport NotificationMessage
instance SchemaType ValuationReport
instance SchemaType TradeValuationItem
instance Extension RequestValuationReport Document
instance Extension RequestValuationReport Message
instance Extension RequestValuationReport RequestMessage
instance Extension RequestValuationReport CorrectableRequestMessage
instance SchemaType RequestValuationReport
instance SchemaType PortfolioValuationItem
instance SchemaType ReportContents

module Data.FpML.V53.Main

-- | products
--   
--   business process messaging
--   
--   reporting and settlement
--   
--   A type defining a content model that includes valuation (pricing and
--   risk) data without expressing any processing intention.
data ValuationDocument
ValuationDocument :: XsdString -> Maybe PositiveInteger -> Maybe PositiveInteger -> [Validation] -> (Maybe (OneOf2 Boolean Boolean)) -> Maybe OnBehalfOf -> Maybe OriginatingEvent -> [Trade] -> [Party] -> [Account] -> [Market] -> [ValuationSet] -> ValuationDocument

-- | Indicate which version of the FpML Schema an FpML message adheres to.
valDocum_fpmlVersion :: ValuationDocument -> XsdString

-- | This optional attribute can be supplied by a message creator in an
--   FpML instance to specify which build number of the schema was used to
--   define the message when it was generated.
valDocum_expectedBuild :: ValuationDocument -> Maybe PositiveInteger

-- | The specific build number of this schema version. This attribute is
--   not included in an instance document. Instead, it is supplied by the
--   XML parser when the document is validated against the FpML schema and
--   indicates the build number of the schema file. Every time FpML
--   publishes a change to the schema, validation rules, or examples within
--   a version (e.g., version 4.2) the actual build number is incremented.
--   If no changes have been made between releases within a version (i.e.
--   from Trial Recommendation to Recommendation) the actual build number
--   stays the same.
valDocum_actualBuild :: ValuationDocument -> Maybe PositiveInteger

-- | A list of validation sets the sender asserts the document is valid
--   with respect to.
valDocum_validation :: ValuationDocument -> [Validation]

-- | Choice between:
--   
--   <ol>
--   <li>Indicates if this message corrects an earlier request.</li>
--   <li>Indicates if this message corrects an earlier request.</li>
--   </ol>
valDocum_choice1 :: ValuationDocument -> (Maybe (OneOf2 Boolean Boolean))

-- | Indicates which party (and accounts) a trade is being processed for.
valDocum_onBehalfOf :: ValuationDocument -> Maybe OnBehalfOf
valDocum_originatingEvent :: ValuationDocument -> Maybe OriginatingEvent

-- | The root element in an FpML trade document.
valDocum_trade :: ValuationDocument -> [Trade]
valDocum_party :: ValuationDocument -> [Party]

-- | Optional account information used to precisely define the origination
--   and destination of financial instruments.
valDocum_account :: ValuationDocument -> [Account]

-- | This is a global element used for creating global types. It holds
--   Market information, e.g. curves, surfaces, quotes, etc.
valDocum_market :: ValuationDocument -> [Market]
valDocum_valuationSet :: ValuationDocument -> [ValuationSet]

-- | A document containing trade and<i>or portfolio and</i>or party data
--   without expressing any processing intention.
elementDataDocument :: XMLParser DataDocument
elementToXMLDataDocument :: DataDocument -> [Content ()]

-- | A document that includes trade and/or valuation (pricing and risk)
--   data without expressing any processing intention.
elementValuationDocument :: XMLParser ValuationDocument
elementToXMLValuationDocument :: ValuationDocument -> [Content ()]
instance Eq ValuationDocument
instance Show ValuationDocument
instance Extension ValuationDocument Document
instance Extension ValuationDocument DataDocument
instance SchemaType ValuationDocument

module Data.FpML.V53.Mktenv

-- | The frequency at which a rate is compounded.
data CompoundingFrequency
CompoundingFrequency :: Scheme -> CompoundingFrequencyAttributes -> CompoundingFrequency
data CompoundingFrequencyAttributes
CompoundingFrequencyAttributes :: Maybe AnyURI -> CompoundingFrequencyAttributes
compoFrequAttrib_compoundingFrequencyScheme :: CompoundingFrequencyAttributes -> Maybe AnyURI

-- | A generic credit curve definition.
data CreditCurve
CreditCurve :: Maybe ID -> Maybe NormalizedString -> Maybe Currency -> (Maybe (OneOf2 LegalEntity LegalEntityReference)) -> Maybe CreditEvents -> Maybe CreditSeniority -> Maybe Boolean -> Maybe Currency -> Maybe Obligations -> Maybe DeliverableObligations -> CreditCurve
creditCurve_ID :: CreditCurve -> Maybe ID

-- | The name of the structure, e.g <a>USDLIBOR-3M EOD Curve</a>.
creditCurve_name :: CreditCurve -> Maybe NormalizedString

-- | The currency that the structure is expressed in (this is relevant
--   mostly for the Interes Rates asset class).
creditCurve_currency :: CreditCurve -> Maybe Currency

-- | Choice between:
--   
--   <ol>
--   <li>The entity for which this is defined.</li>
--   <li>An XML reference a credit entity defined elsewhere in the
--   document.</li>
--   </ol>
creditCurve_choice2 :: CreditCurve -> (Maybe (OneOf2 LegalEntity LegalEntityReference))

-- | The material credit event.
creditCurve_creditEvents :: CreditCurve -> Maybe CreditEvents

-- | The level of seniority of the deliverable obligation.
creditCurve_seniority :: CreditCurve -> Maybe CreditSeniority

-- | Whether the deliverable obligation is secured or unsecured.
creditCurve_secured :: CreditCurve -> Maybe Boolean

-- | The currency of denomination of the deliverable obligation.
creditCurve_obligationCurrency :: CreditCurve -> Maybe Currency

-- | The underlying obligations of the reference entity on which you are
--   buying or selling protection
creditCurve_obligations :: CreditCurve -> Maybe Obligations

-- | What sort of obligation may be delivered in the event of the credit
--   event. ISDA 2003 Term: Obligation Category/Deliverable Obligation
--   Category
creditCurve_deliverableObligations :: CreditCurve -> Maybe DeliverableObligations

-- | A set of credit curve values, which can include pricing inputs (which
--   are typically credit spreads), default probabilities, and recovery
--   rates.
data CreditCurveValuation
CreditCurveValuation :: Maybe ID -> Maybe IDREF -> Maybe AnyAssetReference -> Maybe ValuationScenarioReference -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe DateTime -> Maybe QuotedAssetSet -> Maybe DefaultProbabilityCurve -> (Maybe (OneOf2 Decimal TermCurve)) -> CreditCurveValuation
creditCurveVal_ID :: CreditCurveValuation -> Maybe ID

-- | An optional reference to the scenario that this valuation applies to.
creditCurveVal_definitionRef :: CreditCurveValuation -> Maybe IDREF

-- | A reference to the asset or pricing structure that this values.
creditCurveVal_objectReference :: CreditCurveValuation -> Maybe AnyAssetReference

-- | A reference to the valuation scenario used to calculate this
--   valuation. If the Valuation occurs within a ValuationSet, this value
--   is optional and is defaulted from the ValuationSet. If this value
--   occurs in both places, the lower level value (i.e. the one here)
--   overrides that in the higher (i.e. ValuationSet).
creditCurveVal_valuationScenarioReference :: CreditCurveValuation -> Maybe ValuationScenarioReference

-- | The base date for which the structure applies, i.e. the curve date.
--   Normally this will align with the valuation date.
creditCurveVal_baseDate :: CreditCurveValuation -> Maybe IdentifiedDate

-- | The spot settlement date for which the structure applies, normally 0-2
--   days after the base date. The difference between the baseDate and the
--   spotDate is termed the settlement lag, and is sometimes called <a>days
--   to spot</a>.
creditCurveVal_spotDate :: CreditCurveValuation -> Maybe IdentifiedDate

-- | The date from which the input data used to construct the pricing input
--   was obtained. Often the same as the baseDate, but sometimes the
--   pricing input may be <a>rolled forward</a>, in which input data from
--   one date is used to generate a curve for a later date.
creditCurveVal_inputDataDate :: CreditCurveValuation -> Maybe IdentifiedDate

-- | The last date for which data is supplied in this pricing input.
creditCurveVal_endDate :: CreditCurveValuation -> Maybe IdentifiedDate

-- | The date and time when the pricing input was generated.
creditCurveVal_buildDateTime :: CreditCurveValuation -> Maybe DateTime
creditCurveVal_inputs :: CreditCurveValuation -> Maybe QuotedAssetSet

-- | A curve of default probabilities.
creditCurveVal_defaultProbabilityCurve :: CreditCurveValuation -> Maybe DefaultProbabilityCurve

-- | Choice between:
--   
--   <ol>
--   <li>A single recovery rate, to be used for all terms.</li>
--   <li>A curve of recovery rates, allowing different terms to have
--   different recovery rates.</li>
--   </ol>
creditCurveVal_choice9 :: CreditCurveValuation -> (Maybe (OneOf2 Decimal TermCurve))

-- | A set of default probabilities.
data DefaultProbabilityCurve
DefaultProbabilityCurve :: Maybe ID -> Maybe IDREF -> Maybe AnyAssetReference -> Maybe ValuationScenarioReference -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe DateTime -> Maybe PricingStructureReference -> Maybe TermCurve -> DefaultProbabilityCurve
defaultProbabCurve_ID :: DefaultProbabilityCurve -> Maybe ID

-- | An optional reference to the scenario that this valuation applies to.
defaultProbabCurve_definitionRef :: DefaultProbabilityCurve -> Maybe IDREF

-- | A reference to the asset or pricing structure that this values.
defaultProbabCurve_objectReference :: DefaultProbabilityCurve -> Maybe AnyAssetReference

-- | A reference to the valuation scenario used to calculate this
--   valuation. If the Valuation occurs within a ValuationSet, this value
--   is optional and is defaulted from the ValuationSet. If this value
--   occurs in both places, the lower level value (i.e. the one here)
--   overrides that in the higher (i.e. ValuationSet).
defaultProbabCurve_valuationScenarioReference :: DefaultProbabilityCurve -> Maybe ValuationScenarioReference

-- | The base date for which the structure applies, i.e. the curve date.
--   Normally this will align with the valuation date.
defaultProbabCurve_baseDate :: DefaultProbabilityCurve -> Maybe IdentifiedDate

-- | The spot settlement date for which the structure applies, normally 0-2
--   days after the base date. The difference between the baseDate and the
--   spotDate is termed the settlement lag, and is sometimes called <a>days
--   to spot</a>.
defaultProbabCurve_spotDate :: DefaultProbabilityCurve -> Maybe IdentifiedDate

-- | The date from which the input data used to construct the pricing input
--   was obtained. Often the same as the baseDate, but sometimes the
--   pricing input may be <a>rolled forward</a>, in which input data from
--   one date is used to generate a curve for a later date.
defaultProbabCurve_inputDataDate :: DefaultProbabilityCurve -> Maybe IdentifiedDate

-- | The last date for which data is supplied in this pricing input.
defaultProbabCurve_endDate :: DefaultProbabilityCurve -> Maybe IdentifiedDate

-- | The date and time when the pricing input was generated.
defaultProbabCurve_buildDateTime :: DefaultProbabilityCurve -> Maybe DateTime

-- | A reference to the yield curve values used as a basis for this credit
--   curve valuation.
defaultProbabCurve_baseYieldCurve :: DefaultProbabilityCurve -> Maybe PricingStructureReference

-- | A collection of default probabilities.
defaultProbabCurve_defaultProbabilities :: DefaultProbabilityCurve -> Maybe TermCurve

-- | A curve used to model a set of forward interest rates. Used for
--   forecasting interest rates as part of a pricing calculation.
data ForwardRateCurve
ForwardRateCurve :: Maybe AssetReference -> Maybe TermCurve -> ForwardRateCurve

-- | A reference to the rate index whose forwards are modeled.
forwardRateCurve_assetReference :: ForwardRateCurve -> Maybe AssetReference

-- | The curve of forward values.
forwardRateCurve_rateCurve :: ForwardRateCurve -> Maybe TermCurve

-- | An fx curve object., which includes pricing inputs and term structures
--   for fx forwards.
data FxCurve
FxCurve :: Maybe ID -> Maybe NormalizedString -> Maybe Currency -> Maybe QuotedCurrencyPair -> FxCurve
fxCurve_ID :: FxCurve -> Maybe ID

-- | The name of the structure, e.g <a>USDLIBOR-3M EOD Curve</a>.
fxCurve_name :: FxCurve -> Maybe NormalizedString

-- | The currency that the structure is expressed in (this is relevant
--   mostly for the Interes Rates asset class).
fxCurve_currency :: FxCurve -> Maybe Currency

-- | Defines the two currencies for an FX trade and the quotation
--   relationship between the two currencies.
fxCurve_quotedCurrencyPair :: FxCurve -> Maybe QuotedCurrencyPair

-- | A valuation of an FX curve object., which includes pricing inputs and
--   term structures for fx forwards.
data FxCurveValuation
FxCurveValuation :: Maybe ID -> Maybe IDREF -> Maybe AnyAssetReference -> Maybe ValuationScenarioReference -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe DateTime -> Maybe PricingStructureReference -> Maybe PricingStructureReference -> Maybe FxRateSet -> Maybe TermCurve -> Maybe TermCurve -> FxCurveValuation
fxCurveVal_ID :: FxCurveValuation -> Maybe ID

-- | An optional reference to the scenario that this valuation applies to.
fxCurveVal_definitionRef :: FxCurveValuation -> Maybe IDREF

-- | A reference to the asset or pricing structure that this values.
fxCurveVal_objectReference :: FxCurveValuation -> Maybe AnyAssetReference

-- | A reference to the valuation scenario used to calculate this
--   valuation. If the Valuation occurs within a ValuationSet, this value
--   is optional and is defaulted from the ValuationSet. If this value
--   occurs in both places, the lower level value (i.e. the one here)
--   overrides that in the higher (i.e. ValuationSet).
fxCurveVal_valuationScenarioReference :: FxCurveValuation -> Maybe ValuationScenarioReference

-- | The base date for which the structure applies, i.e. the curve date.
--   Normally this will align with the valuation date.
fxCurveVal_baseDate :: FxCurveValuation -> Maybe IdentifiedDate

-- | The spot settlement date for which the structure applies, normally 0-2
--   days after the base date. The difference between the baseDate and the
--   spotDate is termed the settlement lag, and is sometimes called <a>days
--   to spot</a>.
fxCurveVal_spotDate :: FxCurveValuation -> Maybe IdentifiedDate

-- | The date from which the input data used to construct the pricing input
--   was obtained. Often the same as the baseDate, but sometimes the
--   pricing input may be <a>rolled forward</a>, in which input data from
--   one date is used to generate a curve for a later date.
fxCurveVal_inputDataDate :: FxCurveValuation -> Maybe IdentifiedDate

-- | The last date for which data is supplied in this pricing input.
fxCurveVal_endDate :: FxCurveValuation -> Maybe IdentifiedDate

-- | The date and time when the pricing input was generated.
fxCurveVal_buildDateTime :: FxCurveValuation -> Maybe DateTime
fxCurveVal_settlementCurrencyYieldCurve :: FxCurveValuation -> Maybe PricingStructureReference
fxCurveVal_forecastCurrencyYieldCurve :: FxCurveValuation -> Maybe PricingStructureReference
fxCurveVal_spotRate :: FxCurveValuation -> Maybe FxRateSet

-- | A curve of fx forward rates.
fxCurveVal_fxForwardCurve :: FxCurveValuation -> Maybe TermCurve

-- | A curve of fx forward point spreads.
fxCurveVal_fxForwardPointsCurve :: FxCurveValuation -> Maybe TermCurve

-- | A collection of spot FX rates used in pricing.
data FxRateSet
FxRateSet :: Maybe InstrumentSet -> [BasicAssetValuation] -> FxRateSet

-- | A collection of instruments used as a basis for quotation.
fxRateSet_instrumentSet :: FxRateSet -> Maybe InstrumentSet

-- | A collection of valuations (quotes) for the assets needed in the set.
--   Normally these quotes will be for the underlying assets listed above,
--   but they don't necesarily have to be.
fxRateSet_assetQuote :: FxRateSet -> [BasicAssetValuation]

-- | A pricing data set that contains a series of points with coordinates.
--   It is a sparse matrix representation of a multi-dimensional matrix.
data MultiDimensionalPricingData
MultiDimensionalPricingData :: Maybe AssetMeasureType -> Maybe PriceQuoteUnits -> Maybe QuotationSideEnum -> Maybe Currency -> Maybe ReportingCurrencyType -> Maybe QuoteTiming -> (Maybe (OneOf2 BusinessCenter ExchangeId)) -> [InformationSource] -> Maybe PricingModel -> Maybe DateTime -> Maybe Date -> Maybe DateTime -> Maybe CashflowType -> [PricingStructurePoint] -> MultiDimensionalPricingData

-- | The type of the value that is measured. This could be an NPV, a cash
--   flow, a clean price, etc.
multiDimensPricingData_measureType :: MultiDimensionalPricingData -> Maybe AssetMeasureType

-- | The optional units that the measure is expressed in. If not supplied,
--   this is assumed to be a price/value in currency units.
multiDimensPricingData_quoteUnits :: MultiDimensionalPricingData -> Maybe PriceQuoteUnits

-- | The side (bid<i>mid</i>ask) of the measure.
multiDimensPricingData_side :: MultiDimensionalPricingData -> Maybe QuotationSideEnum

-- | The optional currency that the measure is expressed in. If not
--   supplied, this is defaulted from the reportingCurrency in the
--   valuationScenarioDefinition.
multiDimensPricingData_currency :: MultiDimensionalPricingData -> Maybe Currency

-- | The optional currency that the measure is expressed in. If not
--   supplied, this is defaulted from the reportingCurrency in the
--   valuationScenarioDefinition.
multiDimensPricingData_currencyType :: MultiDimensionalPricingData -> Maybe ReportingCurrencyType

-- | When during a day the quote is for. Typically, if this element is
--   supplied, the QuoteLocation needs also to be supplied.
multiDimensPricingData_timing :: MultiDimensionalPricingData -> Maybe QuoteTiming

-- | Choice between:
--   
--   <ol>
--   <li>A city or other business center.</li>
--   <li>The exchange (e.g. stock or futures exchange) from which the quote
--   is obtained.</li>
--   </ol>
multiDimensPricingData_choice6 :: MultiDimensionalPricingData -> (Maybe (OneOf2 BusinessCenter ExchangeId))

-- | The information source where a published or displayed market rate will
--   be obtained, e.g. Telerate Page 3750.
multiDimensPricingData_informationSource :: MultiDimensionalPricingData -> [InformationSource]

-- | .
multiDimensPricingData_pricingModel :: MultiDimensionalPricingData -> Maybe PricingModel

-- | When the quote was observed or derived.
multiDimensPricingData_time :: MultiDimensionalPricingData -> Maybe DateTime

-- | When the quote was computed.
multiDimensPricingData_valuationDate :: MultiDimensionalPricingData -> Maybe Date

-- | When does the quote cease to be valid.
multiDimensPricingData_expiryTime :: MultiDimensionalPricingData -> Maybe DateTime

-- | For cash flows, the type of the cash flows. Examples include: Coupon
--   payment, Premium Fee, Settlement Fee, Brokerage Fee, etc.
multiDimensPricingData_cashflowType :: MultiDimensionalPricingData -> Maybe CashflowType
multiDimensPricingData_point :: MultiDimensionalPricingData -> [PricingStructurePoint]

-- | An adjustment used to accommodate a parameter of the input trade, e.g.
--   the strike.
data ParametricAdjustment
ParametricAdjustment :: Maybe NormalizedString -> Maybe PriceQuoteUnits -> [ParametricAdjustmentPoint] -> ParametricAdjustment

-- | The name of the adjustment parameter (e.g. <a>Volatility Skew</a>).
paramAdjust_name :: ParametricAdjustment -> Maybe NormalizedString

-- | The units of the input parameter, e.g. Yield.
paramAdjust_inputUnits :: ParametricAdjustment -> Maybe PriceQuoteUnits

-- | The values of the adjustment parameter.
paramAdjust_datapoint :: ParametricAdjustment -> [ParametricAdjustmentPoint]

-- | A value of the adjustment point, consisting of the x value and the
--   corresponding y value.
data ParametricAdjustmentPoint
ParametricAdjustmentPoint :: Maybe Decimal -> Maybe Decimal -> ParametricAdjustmentPoint

-- | The value of the independent variable (e.g. strike offset).
paramAdjustPoint_parameterValue :: ParametricAdjustmentPoint -> Maybe Decimal

-- | The value of the dependent variable, the actual adjustment amount.
paramAdjustPoint_adjustmentValue :: ParametricAdjustmentPoint -> Maybe Decimal

-- | A single valued point with a set of coordinates that define an
--   arbitrary number of indentifying indexes (0 or more). Note that the
--   collection of coordinates/coordinate references for a
--   PricingStructurePoint must not define a given dimension (other than
--   <a>generic</a>) more than once. This is to avoid ambiguity.
data PricingStructurePoint
PricingStructurePoint :: Maybe ID -> (Maybe (OneOf2 PricingDataPointCoordinate PricingDataPointCoordinateReference)) -> (Maybe (OneOf2 Asset AssetReference)) -> Maybe Decimal -> Maybe AssetMeasureType -> Maybe PriceQuoteUnits -> Maybe QuotationSideEnum -> Maybe Currency -> Maybe ReportingCurrencyType -> Maybe QuoteTiming -> (Maybe (OneOf2 BusinessCenter ExchangeId)) -> [InformationSource] -> Maybe PricingModel -> Maybe DateTime -> Maybe Date -> Maybe DateTime -> Maybe CashflowType -> PricingStructurePoint
pricingStructPoint_ID :: PricingStructurePoint -> Maybe ID

-- | Choice between:
--   
--   <ol>
--   <li>An explicit, filled in data point coordinate. This might specify
--   expiration, strike, etc.</li>
--   <li>A reference to a pricing data point coordinate within this
--   document.</li>
--   </ol>
pricingStructPoint_choice0 :: PricingStructurePoint -> (Maybe (OneOf2 PricingDataPointCoordinate PricingDataPointCoordinateReference))

-- | Choice between:
--   
--   <ol>
--   <li>Define the underlying asset, either a listed security or other
--   instrument.</li>
--   <li>A reference to an underlying asset that defines the meaning of the
--   value, i.e. the product that the value corresponds to. For example,
--   this could be a caplet or simple european swaption.</li>
--   </ol>
pricingStructPoint_choice1 :: PricingStructurePoint -> (Maybe (OneOf2 Asset AssetReference))

-- | The value of the the quotation.
pricingStructPoint_value :: PricingStructurePoint -> Maybe Decimal

-- | The type of the value that is measured. This could be an NPV, a cash
--   flow, a clean price, etc.
pricingStructPoint_measureType :: PricingStructurePoint -> Maybe AssetMeasureType

-- | The optional units that the measure is expressed in. If not supplied,
--   this is assumed to be a price/value in currency units.
pricingStructPoint_quoteUnits :: PricingStructurePoint -> Maybe PriceQuoteUnits

-- | The side (bid<i>mid</i>ask) of the measure.
pricingStructPoint_side :: PricingStructurePoint -> Maybe QuotationSideEnum

-- | The optional currency that the measure is expressed in. If not
--   supplied, this is defaulted from the reportingCurrency in the
--   valuationScenarioDefinition.
pricingStructPoint_currency :: PricingStructurePoint -> Maybe Currency

-- | The optional currency that the measure is expressed in. If not
--   supplied, this is defaulted from the reportingCurrency in the
--   valuationScenarioDefinition.
pricingStructPoint_currencyType :: PricingStructurePoint -> Maybe ReportingCurrencyType

-- | When during a day the quote is for. Typically, if this element is
--   supplied, the QuoteLocation needs also to be supplied.
pricingStructPoint_timing :: PricingStructurePoint -> Maybe QuoteTiming

-- | Choice between:
--   
--   <ol>
--   <li>A city or other business center.</li>
--   <li>The exchange (e.g. stock or futures exchange) from which the quote
--   is obtained.</li>
--   </ol>
pricingStructPoint_choice9 :: PricingStructurePoint -> (Maybe (OneOf2 BusinessCenter ExchangeId))

-- | The information source where a published or displayed market rate will
--   be obtained, e.g. Telerate Page 3750.
pricingStructPoint_informationSource :: PricingStructurePoint -> [InformationSource]

-- | .
pricingStructPoint_pricingModel :: PricingStructurePoint -> Maybe PricingModel

-- | When the quote was observed or derived.
pricingStructPoint_time :: PricingStructurePoint -> Maybe DateTime

-- | When the quote was computed.
pricingStructPoint_valuationDate :: PricingStructurePoint -> Maybe Date

-- | When does the quote cease to be valid.
pricingStructPoint_expiryTime :: PricingStructurePoint -> Maybe DateTime

-- | For cash flows, the type of the cash flows. Examples include: Coupon
--   payment, Premium Fee, Settlement Fee, Brokerage Fee, etc.
pricingStructPoint_cashflowType :: PricingStructurePoint -> Maybe CashflowType

-- | A curve consisting only of values over a term. This is a restricted
--   form of One Dimensional Structure.
data TermCurve
TermCurve :: Maybe InterpolationMethod -> Maybe Boolean -> [TermPoint] -> TermCurve
termCurve_interpolationMethod :: TermCurve -> Maybe InterpolationMethod
termCurve_extrapolationPermitted :: TermCurve -> Maybe Boolean
termCurve_point :: TermCurve -> [TermPoint]

-- | A value point that can have a time dimension. Allows bid, mid, ask,
--   and spread values to be represented.
data TermPoint
TermPoint :: Maybe ID -> Maybe TimeDimension -> Maybe Decimal -> Maybe Decimal -> Maybe Decimal -> Maybe Decimal -> Maybe AssetReference -> TermPoint
termPoint_ID :: TermPoint -> Maybe ID

-- | The time dimension of the point (tenor and/or date)
termPoint_term :: TermPoint -> Maybe TimeDimension

-- | A price <a>bid</a> by a buyer for an asset, i.e. the price a buyer is
--   willing to pay.
termPoint_bid :: TermPoint -> Maybe Decimal

-- | A price midway between the bid and the ask price.
termPoint_mid :: TermPoint -> Maybe Decimal

-- | A price <a>asked</a> by a seller for an asset, i.e. the price at which
--   a seller is willing to sell.
termPoint_ask :: TermPoint -> Maybe Decimal

-- | The spread value can be used in conjunction with the <a>mid</a> value
--   to define the bid and the ask value.
termPoint_spreadValue :: TermPoint -> Maybe Decimal

-- | An optional reference to an underlying asset that defines the meaning
--   of the value, i.e. the product that the value corresponds to. For
--   example, this could be a discount instrument.
termPoint_definition :: TermPoint -> Maybe AssetReference

-- | A matrix of volatilities with dimension 0-3.
data VolatilityMatrix
VolatilityMatrix :: Maybe ID -> Maybe IDREF -> Maybe AnyAssetReference -> Maybe ValuationScenarioReference -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe DateTime -> Maybe MultiDimensionalPricingData -> [ParametricAdjustment] -> VolatilityMatrix
volatMatrix_ID :: VolatilityMatrix -> Maybe ID

-- | An optional reference to the scenario that this valuation applies to.
volatMatrix_definitionRef :: VolatilityMatrix -> Maybe IDREF

-- | A reference to the asset or pricing structure that this values.
volatMatrix_objectReference :: VolatilityMatrix -> Maybe AnyAssetReference

-- | A reference to the valuation scenario used to calculate this
--   valuation. If the Valuation occurs within a ValuationSet, this value
--   is optional and is defaulted from the ValuationSet. If this value
--   occurs in both places, the lower level value (i.e. the one here)
--   overrides that in the higher (i.e. ValuationSet).
volatMatrix_valuationScenarioReference :: VolatilityMatrix -> Maybe ValuationScenarioReference

-- | The base date for which the structure applies, i.e. the curve date.
--   Normally this will align with the valuation date.
volatMatrix_baseDate :: VolatilityMatrix -> Maybe IdentifiedDate

-- | The spot settlement date for which the structure applies, normally 0-2
--   days after the base date. The difference between the baseDate and the
--   spotDate is termed the settlement lag, and is sometimes called <a>days
--   to spot</a>.
volatMatrix_spotDate :: VolatilityMatrix -> Maybe IdentifiedDate

-- | The date from which the input data used to construct the pricing input
--   was obtained. Often the same as the baseDate, but sometimes the
--   pricing input may be <a>rolled forward</a>, in which input data from
--   one date is used to generate a curve for a later date.
volatMatrix_inputDataDate :: VolatilityMatrix -> Maybe IdentifiedDate

-- | The last date for which data is supplied in this pricing input.
volatMatrix_endDate :: VolatilityMatrix -> Maybe IdentifiedDate

-- | The date and time when the pricing input was generated.
volatMatrix_buildDateTime :: VolatilityMatrix -> Maybe DateTime

-- | The raw volatility matrix data, expressed as a multi-dimensional
--   array.
volatMatrix_dataPoints :: VolatilityMatrix -> Maybe MultiDimensionalPricingData

-- | An adjustment factor, such as for vol smile/skew.
volatMatrix_adjustment :: VolatilityMatrix -> [ParametricAdjustment]

-- | A representation of volatilities of an asset. This is a generic
--   structure whose values can be supplied in a specific volatility
--   matrix.
data VolatilityRepresentation
VolatilityRepresentation :: Maybe ID -> Maybe NormalizedString -> Maybe Currency -> Maybe AnyAssetReference -> VolatilityRepresentation
volatRepres_ID :: VolatilityRepresentation -> Maybe ID

-- | The name of the structure, e.g <a>USDLIBOR-3M EOD Curve</a>.
volatRepres_name :: VolatilityRepresentation -> Maybe NormalizedString

-- | The currency that the structure is expressed in (this is relevant
--   mostly for the Interes Rates asset class).
volatRepres_currency :: VolatilityRepresentation -> Maybe Currency

-- | A reference to the asset whose volatility is modeled.
volatRepres_asset :: VolatilityRepresentation -> Maybe AnyAssetReference

-- | A generic yield curve object, which can be valued in a variety of
--   ways.
data YieldCurve
YieldCurve :: Maybe ID -> Maybe NormalizedString -> Maybe Currency -> Maybe XsdString -> Maybe ForecastRateIndex -> YieldCurve
yieldCurve_ID :: YieldCurve -> Maybe ID

-- | The name of the structure, e.g <a>USDLIBOR-3M EOD Curve</a>.
yieldCurve_name :: YieldCurve -> Maybe NormalizedString

-- | The currency that the structure is expressed in (this is relevant
--   mostly for the Interes Rates asset class).
yieldCurve_currency :: YieldCurve -> Maybe Currency
yieldCurve_algorithm :: YieldCurve -> Maybe XsdString
yieldCurve_forecastRateIndex :: YieldCurve -> Maybe ForecastRateIndex

-- | The values of a yield curve, including possibly inputs and outputs
--   (dfs, forwards, zero rates).
data YieldCurveValuation
YieldCurveValuation :: Maybe ID -> Maybe IDREF -> Maybe AnyAssetReference -> Maybe ValuationScenarioReference -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe IdentifiedDate -> Maybe DateTime -> Maybe QuotedAssetSet -> Maybe ZeroRateCurve -> [ForwardRateCurve] -> Maybe TermCurve -> YieldCurveValuation
yieldCurveVal_ID :: YieldCurveValuation -> Maybe ID

-- | An optional reference to the scenario that this valuation applies to.
yieldCurveVal_definitionRef :: YieldCurveValuation -> Maybe IDREF

-- | A reference to the asset or pricing structure that this values.
yieldCurveVal_objectReference :: YieldCurveValuation -> Maybe AnyAssetReference

-- | A reference to the valuation scenario used to calculate this
--   valuation. If the Valuation occurs within a ValuationSet, this value
--   is optional and is defaulted from the ValuationSet. If this value
--   occurs in both places, the lower level value (i.e. the one here)
--   overrides that in the higher (i.e. ValuationSet).
yieldCurveVal_valuationScenarioReference :: YieldCurveValuation -> Maybe ValuationScenarioReference

-- | The base date for which the structure applies, i.e. the curve date.
--   Normally this will align with the valuation date.
yieldCurveVal_baseDate :: YieldCurveValuation -> Maybe IdentifiedDate

-- | The spot settlement date for which the structure applies, normally 0-2
--   days after the base date. The difference between the baseDate and the
--   spotDate is termed the settlement lag, and is sometimes called <a>days
--   to spot</a>.
yieldCurveVal_spotDate :: YieldCurveValuation -> Maybe IdentifiedDate

-- | The date from which the input data used to construct the pricing input
--   was obtained. Often the same as the baseDate, but sometimes the
--   pricing input may be <a>rolled forward</a>, in which input data from
--   one date is used to generate a curve for a later date.
yieldCurveVal_inputDataDate :: YieldCurveValuation -> Maybe IdentifiedDate

-- | The last date for which data is supplied in this pricing input.
yieldCurveVal_endDate :: YieldCurveValuation -> Maybe IdentifiedDate

-- | The date and time when the pricing input was generated.
yieldCurveVal_buildDateTime :: YieldCurveValuation -> Maybe DateTime
yieldCurveVal_inputs :: YieldCurveValuation -> Maybe QuotedAssetSet

-- | A curve of zero rates.
yieldCurveVal_zeroCurve :: YieldCurveValuation -> Maybe ZeroRateCurve

-- | A curve of forward rates.
yieldCurveVal_forwardCurve :: YieldCurveValuation -> [ForwardRateCurve]

-- | A curve of discount factors.
yieldCurveVal_discountFactorCurve :: YieldCurveValuation -> Maybe TermCurve

-- | A curve used to model a set of zero-coupon interest rates.
data ZeroRateCurve
ZeroRateCurve :: Maybe CompoundingFrequency -> Maybe TermCurve -> ZeroRateCurve

-- | The frequency at which the rates are compounded (e.g. continuously
--   compounded).
zeroRateCurve_compoundingFrequency :: ZeroRateCurve -> Maybe CompoundingFrequency

-- | The curve of zero-coupon values.
zeroRateCurve_rateCurve :: ZeroRateCurve -> Maybe TermCurve
elementCreditCurve :: XMLParser CreditCurve
elementToXMLCreditCurve :: CreditCurve -> [Content ()]
elementCreditCurveValuation :: XMLParser CreditCurveValuation
elementToXMLCreditCurveValuation :: CreditCurveValuation -> [Content ()]
elementFxCurve :: XMLParser FxCurve
elementToXMLFxCurve :: FxCurve -> [Content ()]
elementFxCurveValuation :: XMLParser FxCurveValuation
elementToXMLFxCurveValuation :: FxCurveValuation -> [Content ()]
elementVolatilityMatrixValuation :: XMLParser VolatilityMatrix
elementToXMLVolatilityMatrixValuation :: VolatilityMatrix -> [Content ()]
elementVolatilityRepresentation :: XMLParser VolatilityRepresentation
elementToXMLVolatilityRepresentation :: VolatilityRepresentation -> [Content ()]
elementYieldCurve :: XMLParser YieldCurve
elementToXMLYieldCurve :: YieldCurve -> [Content ()]
elementYieldCurveValuation :: XMLParser YieldCurveValuation
elementToXMLYieldCurveValuation :: YieldCurveValuation -> [Content ()]
instance Eq CompoundingFrequencyAttributes
instance Show CompoundingFrequencyAttributes
instance Eq ParametricAdjustmentPoint
instance Show ParametricAdjustmentPoint
instance Eq ZeroRateCurve
instance Show ZeroRateCurve
instance Eq YieldCurveValuation
instance Show YieldCurveValuation
instance Eq YieldCurve
instance Show YieldCurve
instance Eq VolatilityRepresentation
instance Show VolatilityRepresentation
instance Eq VolatilityMatrix
instance Show VolatilityMatrix
instance Eq TermPoint
instance Show TermPoint
instance Eq TermCurve
instance Show TermCurve
instance Eq PricingStructurePoint
instance Show PricingStructurePoint
instance Eq ParametricAdjustment
instance Show ParametricAdjustment
instance Eq MultiDimensionalPricingData
instance Show MultiDimensionalPricingData
instance Eq FxRateSet
instance Show FxRateSet
instance Eq FxCurveValuation
instance Show FxCurveValuation
instance Eq FxCurve
instance Show FxCurve
instance Eq ForwardRateCurve
instance Show ForwardRateCurve
instance Eq DefaultProbabilityCurve
instance Show DefaultProbabilityCurve
instance Eq CreditCurveValuation
instance Show CreditCurveValuation
instance Eq CreditCurve
instance Show CreditCurve
instance Eq CompoundingFrequency
instance Show CompoundingFrequency
instance SchemaType ZeroRateCurve
instance Extension YieldCurveValuation Valuation
instance Extension YieldCurveValuation PricingStructureValuation
instance SchemaType YieldCurveValuation
instance Extension YieldCurve PricingStructure
instance SchemaType YieldCurve
instance Extension VolatilityRepresentation PricingStructure
instance SchemaType VolatilityRepresentation
instance Extension VolatilityMatrix Valuation
instance Extension VolatilityMatrix PricingStructureValuation
instance SchemaType VolatilityMatrix
instance SchemaType TermPoint
instance SchemaType TermCurve
instance SchemaType PricingStructurePoint
instance SchemaType ParametricAdjustmentPoint
instance SchemaType ParametricAdjustment
instance SchemaType MultiDimensionalPricingData
instance Extension FxRateSet QuotedAssetSet
instance SchemaType FxRateSet
instance Extension FxCurveValuation Valuation
instance Extension FxCurveValuation PricingStructureValuation
instance SchemaType FxCurveValuation
instance Extension FxCurve PricingStructure
instance SchemaType FxCurve
instance SchemaType ForwardRateCurve
instance Extension DefaultProbabilityCurve Valuation
instance Extension DefaultProbabilityCurve PricingStructureValuation
instance SchemaType DefaultProbabilityCurve
instance Extension CreditCurveValuation Valuation
instance Extension CreditCurveValuation PricingStructureValuation
instance SchemaType CreditCurveValuation
instance Extension CreditCurve PricingStructure
instance SchemaType CreditCurve
instance Extension CompoundingFrequency Scheme
instance SchemaType CompoundingFrequency
