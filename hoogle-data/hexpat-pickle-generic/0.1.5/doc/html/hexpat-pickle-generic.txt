-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Picklers for de/serialising Generic data types to and from XML
--   
--   An IsXML class and GHC.Generics implementation for pickleable data
--   types using hexpat.
@package hexpat-pickle-generic
@version 0.1.5

module Text.XML.Expat.Pickle.Generic
class IsXML a where xmlPickler = genericXMLPickler defaultXMLOptions
xmlPickler :: IsXML a => PU [Node] a
toXML :: IsXML a => a -> ByteString
toIndentedXML :: IsXML a => Int -> a -> ByteString
fromXML :: IsXML a => ByteString -> Either String a
data XMLPU t a
XMLPU :: (a -> t) -> (t -> Either String a) -> Maybe ByteString -> XMLPU t a
pickleTree :: XMLPU t a -> a -> t
unpickleTree :: XMLPU t a -> t -> Either String a
root :: XMLPU t a -> Maybe ByteString
data XMLOptions
XMLOptions :: (String -> ByteString) -> (String -> ByteString) -> ByteString -> XMLOptions

-- | Function applied to constructor tags.
xmlCtorModifier :: XMLOptions -> String -> ByteString

-- | Function applied to record field labels.
xmlFieldModifier :: XMLOptions -> String -> ByteString

-- | Default element name to wrap list items with.
xmlListElement :: XMLOptions -> ByteString
defaultXMLOptions :: Options
genericXMLPickler :: (Generic x, GIsXML (Rep x)) => Options -> PU [Node] x
rootXMLPickler :: (Generic a, GIsXML (Rep a)) => ByteString -> XMLPU [Node] a
xpWrap :: (a -> b, b -> a) -> PU [n] a -> PU [n] b
xpList :: PU [Node] a -> PU [Node] [a]
xpElemList :: ByteString -> PU [Node] a -> PU [Node] [a]
xpElem :: ByteString -> PU [Node] a -> PU [Node] a
xpSum :: PU [t] (f r) -> PU [t] (g r) -> PU [t] ((f :+: g) r)
xpEither :: PU [t] a -> PU [t] b -> PU [t] (Either a b)
xpPrim :: (Read a, Show a) => PU ByteString a
xpEmpty :: (Read a, Show a) => PU [Node] a
xpOption :: PU [n] a -> PU [n] (Maybe a)
xpPair :: PU [n] a -> PU [n] b -> PU [n] (a, b)
xpUnit :: PU [n] ()
xpLift :: a -> PU [n] a
xpText :: PU ByteString ByteString
xpText0 :: PU ByteString ByteString
xpContent :: PU ByteString a -> PU [Node] a
instance [overlap ok] IsXML ByteString
instance [overlap ok] IsXML Float
instance [overlap ok] IsXML Double
instance [overlap ok] IsXML Integer
instance [overlap ok] IsXML Int
instance [overlap ok] (IsXML a, IsXML b) => IsXML (Either a b)
instance [overlap ok] IsXML a => IsXML (Maybe a)
instance [overlap ok] (Selector s, IsXML a) => GIsXML (S1 s (K1 i [a]))
instance [overlap ok] (Selector s, GIsXML a) => GIsXML (S1 s a)
instance [overlap ok] (Constructor c, GIsXML a) => GIsXML (C1 c a)
instance [overlap ok] (Datatype d, GIsXML a) => GIsXML (D1 d a)
instance [overlap ok] (GIsXML a, GIsXML b) => GIsXML (a :*: b)
instance [overlap ok] (GIsXML a, GIsXML b) => GIsXML (a :+: b)
instance [overlap ok] IsXML a => GIsXML (K1 i a)
