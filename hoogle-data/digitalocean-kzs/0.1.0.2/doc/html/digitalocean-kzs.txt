-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | digitalocean api for haskell
--   
@package digitalocean-kzs
@version 0.1.0.2

module DigitalOcean.Base
data Authentication
Authentication :: String -> Authentication
token :: Authentication -> String
requestGet :: String -> Authentication -> MonadIO m => m ByteString
requestPost :: ToJSON b => String -> Authentication -> b -> MonadIO m => m ByteString
instance Show Authentication

module DigitalOcean.Account
data Account
Account :: Integer -> String -> String -> Bool -> Account
dropletLimit :: Account -> Integer
email :: Account -> String
uuid :: Account -> String
emailVerified :: Account -> Bool

-- | Get User Information Example:
--   
--   <pre>
--   do
--       tkn &lt;- getEnv <a>DIGITAL_OCEAN_PERSONAL_ACCESS_TOKEN</a>
--       mayBeAcnt &lt;- account $ Authentication tkn
--       print $ show $ isJust mayBeAcnt
--   </pre>
account :: Authentication -> MonadIO m => m (Maybe Account)
instance Show Account
instance Read Account
instance FromJSON Account
instance FromJSON RawAccount

module DigitalOcean.Image
data Image
Image :: Integer -> String -> String -> String -> Maybe String -> Bool -> [String] -> Integer -> String -> Image
imgId :: Image -> Integer
imgName :: Image -> String
imgDistribution :: Image -> String
imgType :: Image -> String
imgSlug :: Image -> Maybe String
imgPublic :: Image -> Bool
imgRegions :: Image -> [String]
imgMinDiskSize :: Image -> Integer
imgCreatedAt :: Image -> String

-- | List all Images
--   
--   <pre>
--   do
--       tkn &lt;- getEnv <a>DIGITAL_OCEAN_PERSONAL_ACCESS_TOKEN</a>
--       maybeImages &lt;- images $ Authentication tkn
--       print $ show $ isJust maybeImages
--   </pre>
images :: Authentication -> MonadIO m => m (Maybe [Image])

-- | List all Distribution Images
--   
--   <pre>
--   do
--       tkn &lt;- getEnv <a>DIGITAL_OCEAN_PERSONAL_ACCESS_TOKEN</a>
--       maybeImages &lt;- listAllDistributionImages $ Authentication tkn
--       print $ show $ isJust maybeImages
--   </pre>
listAllDistributionImages :: Authentication -> MonadIO m => m (Maybe [Image])
instance Show Image
instance Read Image
instance FromJSON Image
instance FromJSON Images

module DigitalOcean.Droplet
data Droplet
Droplet :: Integer -> String -> Integer -> Integer -> Integer -> Bool -> String -> String -> [Integer] -> Droplet
did :: Droplet -> Integer
dname :: Droplet -> String
dmemory :: Droplet -> Integer
dvcpus :: Droplet -> Integer
disk :: Droplet -> Integer
dlocked :: Droplet -> Bool
createdAtv2 :: Droplet -> String
dstatus :: Droplet -> String
backupIds :: Droplet -> [Integer]

-- | List all Droplets
--   
--   <pre>
--   do
--       tkn &lt;- getEnv <a>DIGITAL_OCEAN_PERSONAL_ACCESS_TOKEN</a>
--       maybeDroplets &lt;- droplets $ Authentication tkn
--       print $ show $ isJust maybeDroplets
--   </pre>
droplets :: Authentication -> MonadIO m => m (Maybe [Droplet])
instance Show Droplet
instance Read Droplet
instance FromJSON Droplet
instance FromJSON Droplets

module DigitalOcean.Region
data Region
Region :: String -> String -> Bool -> Region
regionName :: Region -> String
slug :: Region -> String
available :: Region -> Bool

-- | List all Regions
--   
--   <pre>
--   do
--       tkn &lt;- getEnv <a>DIGITAL_OCEAN_PERSONAL_ACCESS_TOKEN</a>
--       maybeRegions &lt;- regions $ Authentication tkn
--       print $ show $ isJust maybeRegions
--   </pre>
regions :: Authentication -> MonadIO m => m (Maybe [Region])
instance Show Region
instance Read Region
instance FromJSON Region
instance FromJSON Regions

module DigitalOcean.Size
data Size
Size :: String -> Bool -> Integer -> Float -> Float -> Integer -> Integer -> Integer -> Size
sizSlug :: Size -> String
sizAvailable :: Size -> Bool
sizTransfer :: Size -> Integer
sizPriceMonthly :: Size -> Float
sizHourly :: Size -> Float
sizMemory :: Size -> Integer
sizVcpus :: Size -> Integer
sizDisk :: Size -> Integer

-- | List all Sizes
--   
--   <pre>
--   do
--       tkn &lt;- getEnv <a>DIGITAL_OCEAN_PERSONAL_ACCESS_TOKEN</a>
--       maybeSizes &lt;- sizes $ Authentication tkn
--       print $ show $ isJust maybeSizes
--   </pre>
sizes :: Authentication -> MonadIO m => m (Maybe [Size])
instance Show Size
instance Read Size
instance FromJSON Size
instance FromJSON Sizes

module DigitalOcean.SSHKey
data SSHKey
SSHKey :: Integer -> String -> String -> String -> SSHKey
id :: SSHKey -> Integer
fingerprint :: SSHKey -> String
publicKey :: SSHKey -> String
sshkeyName :: SSHKey -> String

-- | List all Keys
--   
--   <pre>
--   do
--       tkn &lt;- getEnv <a>DIGITAL_OCEAN_PERSONAL_ACCESS_TOKEN</a>
--       maybeKeys &lt;- listAllKeys $ Authentication tkn
--       print $ show $ isJust maybeKeys
--   </pre>
listAllKeys :: Authentication -> MonadIO m => m (Maybe [SSHKey])
instance Show SSHKey
instance Read SSHKey
instance FromJSON SSHKey
instance FromJSON SSHKeys

module DigitalOcean.NewDroplet

-- | create new Droplet
--   
--   <pre>
--   do
--       let d = NewDropletRequest {
--           ndname="hoge",
--           region="nyc3",
--           size="512mb",
--           image=12241402,
--           ndsshKeys=[],
--           backups = False,
--           ipv6=True,
--           userData = Nothing,
--           privateNetworking=False
--       }
--       tkn &lt;- getEnv <a>DIGITAL_OCEAN_PERSONAL_ACCESS_TOKEN</a>
--       maybeNewDroplet &lt;- newDroplet ( Authentication tkn) d
--   </pre>
newDroplet :: Authentication -> NewDropletRequest -> MonadIO m => m (Maybe Droplet)
data NewDropletRequest
NewDropletRequest :: String -> String -> String -> Integer -> [String] -> Bool -> Bool -> Maybe (String) -> Bool -> NewDropletRequest
ndname :: NewDropletRequest -> String
region :: NewDropletRequest -> String
size :: NewDropletRequest -> String
image :: NewDropletRequest -> Integer
ndsshKeys :: NewDropletRequest -> [String]
backups :: NewDropletRequest -> Bool
ipv6 :: NewDropletRequest -> Bool
userData :: NewDropletRequest -> Maybe (String)
privateNetworking :: NewDropletRequest -> Bool
instance Show NewDropletRequest
instance Read NewDropletRequest
instance Show OuterDroplet
instance FromJSON OuterDroplet
instance ToJSON NewDropletRequest

module DigitalOcean
