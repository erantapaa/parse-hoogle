-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Small framework to push metric deltas to a broadcast channel using the ekg-core library.
--   
@package ekg-push
@version 0.0.3


-- | This library lets you push metric samples to a broadcast channel.
--   Consumers can then persist the metrics samples as they wish. ekg-push
--   is based heavily off of the ekg-statsd package which can be found at:
--   <a>https://github.com/tibbe/ekg-statsd</a>
--   
--   Example usage:
--   
--   <pre>
--   main = do
--       store &lt;- newStore
--       push &lt;- forkPush defaultPushOptions store
--       ch &lt;- subscribe push
--       sample &lt;- consume ch
--       putStrLn $ show sample
--   </pre>
--   
--   You probably want to include some of the predefined metrics defined in
--   the ekg-core package, by calling e.g. the <tt>registerGcStats</tt>
--   function defined in that package.
module System.Remote.Monitoring.Push

-- | A handle that can be used to control the push sync thread. Created by
--   <a>forkPush</a>.
data Push

-- | A new PushChan is created on every call to subscribe. This is
--   essentially a dupChan of our main channel (mainCh).
data PushChan

-- | Options to control how to connect to the push server and how often to
--   flush metrics. The flush interval should be shorter than the flush
--   interval push itself uses to flush data to its backends.
data PushOptions
PushOptions :: !Int -> !Bool -> !Text -> !Text -> PushOptions

-- | Data push interval, in ms.
flushInterval :: PushOptions -> !Int

-- | Print debug output to stderr.
debug :: PushOptions -> !Bool

-- | Prefix to add to all metric names.
prefix :: PushOptions -> !Text

-- | Suffix to add to all metric names. This is particularly useful for
--   sending per host stats by settings this value to: <tt>takeWhile (/=
--   '.') &lt;$&gt; getHostName</tt>, using <tt>getHostName</tt> from the
--   <tt>Network.BSD</tt> module in the network package.
suffix :: PushOptions -> !Text

-- | The thread ID of the push sync thread. You can stop the sync by
--   killing this thread (i.e. by throwing it an asynchronous exception.)
pushThreadId :: Push -> ThreadId

-- | Create a thread that periodically flushes the metrics in the store to
--   push.
forkPush :: PushOptions -> Store -> IO Push

-- | Defaults:
--   
--   <ul>
--   <li><tt>flushInterval</tt> = <tt>1000</tt></li>
--   <li><tt>debug</tt> = <tt>False</tt></li>
--   </ul>
defaultPushOptions :: PushOptions

-- | Subscribe to the push broadcast channel.
subscribe :: Push -> IO PushChan

-- | Consume a Metrics.Sample message from a subscribed channel.
consume :: PushChan -> IO Sample
