-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | SVG file loader and serializer
--   
@package svg-tree
@version 0.3.1


-- | Define the types used to describes CSS elements
module Graphics.Svg.CssTypes

-- | Define complex selector.
data CssSelector

-- | Correspond to the <a>+</a> CSS selector.
Nearby :: CssSelector

-- | Correspond to the <a>&gt;</a> CSS selectro.
DirectChildren :: CssSelector

-- | Grouping construct, all the elements of the list must be matched.
AllOf :: [CssDescriptor] -> CssSelector

-- | A CssSelectorRule is a list of all the elements that must be meet in a
--   depth first search fashion.
type CssSelectorRule = [CssSelector]

-- | Represent a CSS selector and the different declarations to apply to
--   the matched elemens.
data CssRule
CssRule :: ![CssSelectorRule] -> ![CssDeclaration] -> CssRule

-- | At the first level represent a list of elements to be matched. If any
--   match is made, you can apply the declarations. At the second level
cssRuleSelector :: CssRule -> ![CssSelectorRule]

-- | Declarations to apply to the matched element.
cssDeclarations :: CssRule -> ![CssDeclaration]

-- | Describe an element of a CSS selector. Multiple elements can be
--   combined in a CssSelector type.
data CssDescriptor

-- | .IDENT
OfClass :: Text -> CssDescriptor

-- | IDENT
OfName :: Text -> CssDescriptor

-- | #IDENT
OfId :: Text -> CssDescriptor

-- | `:IDENT` (ignore function syntax)
OfPseudoClass :: Text -> CssDescriptor

-- | <a>*</a>
AnyElem :: CssDescriptor

-- | ``
WithAttrib :: Text -> Text -> CssDescriptor

-- | Represent the content to apply to some CSS matched rules.
data CssDeclaration
CssDeclaration :: Text -> [[CssElement]] -> CssDeclaration

-- | Property name to change (like font-family or color).
_cssDeclarationProperty :: CssDeclaration -> Text

-- | List of values
_cssDecarationlValues :: CssDeclaration -> [[CssElement]]

-- | Value of a CSS property.
data CssElement
CssIdent :: !Text -> CssElement
CssString :: !Text -> CssElement
CssReference :: !Text -> CssElement
CssNumber :: !Number -> CssElement
CssColor :: !PixelRGBA8 -> CssElement
CssFunction :: !Text -> ![CssElement] -> CssElement
CssOpComa :: CssElement
CssOpSlash :: CssElement

-- | Interface for elements to be matched against some CssRule.
class CssMatcheable a
cssIdOf :: CssMatcheable a => a -> Maybe Text
cssClassOf :: CssMatcheable a => a -> [Text]
cssNameOf :: CssMatcheable a => a -> Text
cssAttribOf :: CssMatcheable a => a -> Text -> Maybe Text

-- | Represent a zipper in depth at the first list level, and the previous
--   nodes at in the second list level.
type CssContext a = [[a]]

-- | Alias describing a "dot per inch" information used for size
--   calculation (see toUserUnit).
type Dpi = Int

-- | Encode complex number possibly dependant to the current render size.
data Number

-- | Simple coordinate in current user coordinate.
Num :: Double -> Number

-- | With suffix "px"
Px :: Double -> Number

-- | Number relative to the current font size.
Em :: Double -> Number

-- | Number relative to the current viewport size.
Percent :: Double -> Number
Pc :: Double -> Number

-- | Number in millimeters, relative to DPI.
Mm :: Double -> Number

-- | Number in centimeters, relative to DPI.
Cm :: Double -> Number

-- | Number in points, relative to DPI.
Point :: Double -> Number

-- | Number in inches, relative to DPI.
Inches :: Double -> Number

-- | Encode the number to string which can be used in a CSS or a svg
--   attributes.
serializeNumber :: Number -> String

-- | Given CSS rules, find all the declaration to apply to the element in a
--   given context.
findMatchingDeclarations :: CssMatcheable a => [CssRule] -> CssContext a -> [CssDeclaration]

-- | This function replace all device dependant units to user units given
--   it's DPI configuration. Preserve percentage and "em" notation.
toUserUnit :: Dpi -> Number -> Number

-- | Helper function to modify inner value of a number
mapNumber :: (Double -> Double) -> Number -> Number

-- | Serialize an element to a text builder.
tserialize :: TextBuildable a => a -> Builder
instance Eq CssDescriptor
instance Show CssDescriptor
instance Eq CssSelector
instance Show CssSelector
instance Eq Number
instance Show Number
instance Eq CssElement
instance Show CssElement
instance Eq CssDeclaration
instance Show CssDeclaration
instance Eq CssRule
instance Show CssRule
instance TextBuildable CssElement
instance TextBuildable Number
instance TextBuildable CssDeclaration
instance TextBuildable CssRule
instance TextBuildable CssSelector
instance TextBuildable CssDescriptor


-- | This module define all the types used in the definition of a svg
--   scene.
--   
--   Most of the types are lensified.
module Graphics.Svg.Types

-- | Basic coordiante type.
type Coord = Double

-- | Tell if a path command is absolute (in the current user coordiante) or
--   relative to the previous poitn.
data Origin

-- | Next point in absolute coordinate
OriginAbsolute :: Origin

-- | Next point relative to the previous
OriginRelative :: Origin

-- | Possibly context dependant point.
type Point = (Number, Number)

-- | Real Point, fully determined and not dependant of the rendering
--   context.
type RPoint = V2 Coord

-- | Path command definition.
data PathCommand

-- | <tt>M</tt> or <tt>m</tt> command
MoveTo :: Origin -> [RPoint] -> PathCommand

-- | Line to, <tt>L</tt> or <tt>l</tt> Svg path command.
LineTo :: Origin -> [RPoint] -> PathCommand

-- | Equivalent to the <tt>H</tt> or <tt>h</tt> svg path command.
HorizontalTo :: Origin -> [Coord] -> PathCommand

-- | Equivalent to the <tt>V</tt> or <tt>v</tt> svg path command.
VerticalTo :: Origin -> [Coord] -> PathCommand

-- | Cubic bezier, <tt>C</tt> or <tt>c</tt> command
CurveTo :: Origin -> [(RPoint, RPoint, RPoint)] -> PathCommand

-- | Smooth cubic bezier, equivalent to <tt>S</tt> or <tt>s</tt> command
SmoothCurveTo :: Origin -> [(RPoint, RPoint)] -> PathCommand

-- | Quadratic bezier, <tt>Q</tt> or <tt>q</tt> command
QuadraticBezier :: Origin -> [(RPoint, RPoint)] -> PathCommand

-- | Quadratic bezier, <tt>T</tt> or <tt>t</tt> command
SmoothQuadraticBezierCurveTo :: Origin -> [RPoint] -> PathCommand

-- | Eliptical arc, <tt>A</tt> or <tt>a</tt> command.
EllipticalArc :: Origin -> [(Coord, Coord, Coord, Bool, Bool, RPoint)] -> PathCommand

-- | Close the path, <tt>Z</tt> or <tt>z</tt> svg path command.
EndPath :: PathCommand

-- | Describe the content of the <tt>transformation</tt> attribute. see
--   <a>_transform</a> and <a>transform</a>.
data Transformation

-- | Directly encode the translation matrix.
TransformMatrix :: Coord -> Coord -> Coord -> Coord -> Coord -> Coord -> Transformation

-- | Translation along a vector
Translate :: Double -> Double -> Transformation

-- | Scaling on both axis or on X axis and Y axis.
Scale :: Double -> (Maybe Double) -> Transformation

-- | Rotation around `(0, 0)` or around an optional point.
Rotate :: Double -> (Maybe (Double, Double)) -> Transformation

-- | Skew transformation along the X axis.
SkewX :: Double -> Transformation

-- | Skew transformation along the Y axis.
SkewY :: Double -> Transformation

-- | Unkown transformation, like identity.
TransformUnknown :: Transformation

-- | Correspond to the possible values of the the attributes which are
--   either <tt>none</tt> or `url(#elem)`
data ElementRef

-- | Value for <tt>none</tt>
RefNone :: ElementRef

-- | Equivalent to `url()` attribute.
Ref :: String -> ElementRef

-- | Define the possible values of various *units attributes used in the
--   definition of the gradients and masks.
data CoordinateUnits

-- | <tt>userSpaceOnUse</tt> value
CoordUserSpace :: CoordinateUnits

-- | <tt>objectBoundingBox</tt> value
CoordBoundingBox :: CoordinateUnits

-- | Little helper function to build a point.
toPoint :: Number -> Number -> Point

-- | Encode the number to string which can be used in a CSS or a svg
--   attributes.
serializeNumber :: Number -> String

-- | Convert the Transformation to a string which can be directly used in a
--   svg attributes.
serializeTransformation :: Transformation -> String

-- | Transform a list of transformations to a string for svg
--   <a>transform</a> attributes.
serializeTransformations :: [Transformation] -> String

-- | Describe how the line should be terminated when stroking them.
--   Describe the values of the `stroke-linecap` attribute. See
--   <a>_strokeLineCap</a>
data Cap

-- | End with a round (<a>round</a> value)
CapRound :: Cap

-- | Define straight just at the end (<tt>butt</tt> value)
CapButt :: Cap

-- | Straight further of the ends (<tt>square</tt> value)
CapSquare :: Cap

-- | Define the possible values of the `stroke-linejoin` attribute. see
--   <a>_strokeLineJoin</a>
data LineJoin

-- | <tt>miter</tt> value
JoinMiter :: LineJoin

-- | <tt>bevel</tt> value
JoinBevel :: LineJoin

-- | <a>round</a> value
JoinRound :: LineJoin

-- | Main type for the scene description, reorient to specific type
--   describing each tag.
data Tree
None :: Tree
UseTree :: !Use -> !(Maybe Tree) -> Tree
useInformation :: Tree -> !Use
useSubTree :: Tree -> !(Maybe Tree)
GroupTree :: !(Group Tree) -> Tree
SymbolTree :: !(Symbol Tree) -> Tree
PathTree :: !Path -> Tree
CircleTree :: !Circle -> Tree
PolyLineTree :: !PolyLine -> Tree
PolygonTree :: !Polygon -> Tree
EllipseTree :: !Ellipse -> Tree
LineTree :: !Line -> Tree
RectangleTree :: !Rectangle -> Tree
TextTree :: !(Maybe TextPath) -> !Text -> Tree
ImageTree :: !Image -> Tree

-- | Encode complex number possibly dependant to the current render size.
data Number

-- | Simple coordinate in current user coordinate.
Num :: Double -> Number

-- | With suffix "px"
Px :: Double -> Number

-- | Number relative to the current font size.
Em :: Double -> Number

-- | Number relative to the current viewport size.
Percent :: Double -> Number
Pc :: Double -> Number

-- | Number in millimeters, relative to DPI.
Mm :: Double -> Number

-- | Number in centimeters, relative to DPI.
Cm :: Double -> Number

-- | Number in points, relative to DPI.
Point :: Double -> Number

-- | Number in inches, relative to DPI.
Inches :: Double -> Number

-- | Define the possible values for the <tt>spreadMethod</tt> values used
--   for the gradient definitions.
data Spread

-- | <tt>reapeat</tt> value
SpreadRepeat :: Spread

-- | <tt>pad</tt> value
SpreadPad :: Spread

-- | `reflect value`
SpreadReflect :: Spread

-- | Describe the different value which can be used in the <tt>fill</tt> or
--   <tt>stroke</tt> attributes.
data Texture

-- | Direct solid color (rgb)
ColorRef :: PixelRGBA8 -> Texture

-- | Link to a complex texture (url(#name))
TextureRef :: String -> Texture

-- | Equivalent to the <tt>none</tt> value.
FillNone :: Texture

-- | Sum types helping keeping track of all the namable elemens in a SVG
--   document.
data Element
ElementLinearGradient :: LinearGradient -> Element
ElementRadialGradient :: RadialGradient -> Element
ElementGeometry :: Tree -> Element
ElementPattern :: Pattern -> Element
ElementMarker :: Marker -> Element
ElementMask :: Mask -> Element
ElementClipPath :: ClipPath -> Element

-- | Describe the possile filling algorithms. Map the values of the
--   `fill-rule` attributes.
data FillRule

-- | Correspond to the <tt>evenodd</tt> value.
FillEvenOdd :: FillRule

-- | Correspond to the <tt>nonzero</tt> value.
FillNonZero :: FillRule

-- | Classify the font style, used to search a matching font in the
--   FontCache.
data FontStyle
FontStyleNormal :: FontStyle
FontStyleItalic :: FontStyle
FontStyleOblique :: FontStyle

-- | Alias describing a "dot per inch" information used for size
--   calculation (see toUserUnit).
type Dpi = Int

-- | Define an empty 'default' element for the SVG tree. It is used as base
--   when parsing the element from XML.
class WithDefaultSvg a
defaultSvg :: WithDefaultSvg a => a

-- | Represent a full svg document with style, geometry and named elements.
data Document
Document :: Maybe (Int, Int, Int, Int) -> Maybe Number -> Maybe Number -> [Tree] -> Map String Element -> String -> [CssRule] -> FilePath -> Document
_viewBox :: Document -> Maybe (Int, Int, Int, Int)
_width :: Document -> Maybe Number
_height :: Document -> Maybe Number
_elements :: Document -> [Tree]
_definitions :: Document -> Map String Element
_description :: Document -> String
_styleRules :: Document -> [CssRule]
_documentLocation :: Document -> FilePath

-- | Lenses associated to a SVG document.
class HasDocument c_apPc where definitions = (.) document definitions description = (.) document description documentLocation = (.) document documentLocation elements = (.) document elements height = (.) document height styleRules = (.) document styleRules viewBox = (.) document viewBox width = (.) document width
document :: HasDocument c_apPc => Lens' c_apPc Document
definitions :: HasDocument c_apPc => Lens' c_apPc (Map String Element)
description :: HasDocument c_apPc => Lens' c_apPc String
documentLocation :: HasDocument c_apPc => Lens' c_apPc FilePath
elements :: HasDocument c_apPc => Lens' c_apPc [Tree]
height :: HasDocument c_apPc => Lens' c_apPc (Maybe Number)
styleRules :: HasDocument c_apPc => Lens' c_apPc [CssRule]
viewBox :: HasDocument c_apPc => Lens' c_apPc (Maybe (Int, Int, Int, Int))
width :: HasDocument c_apPc => Lens' c_apPc (Maybe Number)

-- | Calculate the document size in function of the different available
--   attributes in the document.
documentSize :: Dpi -> Document -> (Int, Int)

-- | This type define how to draw any primitives, which color to use, how
--   to stroke the primitives and the potential transformations to use.
--   
--   All these attributes are propagated to the children.
data DrawAttributes
DrawAttributes :: !(Last Number) -> !(Last Texture) -> !(Maybe Float) -> !(Last Cap) -> !(Last LineJoin) -> !(Last Double) -> !(Last Texture) -> !(Maybe Float) -> !(Maybe Float) -> !(Maybe [Transformation]) -> !(Last FillRule) -> !(Last ElementRef) -> !(Last ElementRef) -> !(Last FillRule) -> ![Text] -> !(Maybe String) -> !(Last Number) -> !(Last [Number]) -> !(Last Number) -> !(Last [String]) -> !(Last FontStyle) -> !(Last TextAnchor) -> !(Last ElementRef) -> !(Last ElementRef) -> !(Last ElementRef) -> DrawAttributes

-- | Attribute corresponding to the `stroke-width` SVG attribute.
_strokeWidth :: DrawAttributes -> !(Last Number)

-- | Correspond to the <tt>stroke</tt> attribute.
_strokeColor :: DrawAttributes -> !(Last Texture)

-- | Define the `stroke-opacity` attribute, the transparency for the
--   "border".
_strokeOpacity :: DrawAttributes -> !(Maybe Float)

-- | Correspond to the `stroke-linecap` SVG attribute
_strokeLineCap :: DrawAttributes -> !(Last Cap)

-- | Correspond to the `stroke-linejoin` SVG attribute
_strokeLineJoin :: DrawAttributes -> !(Last LineJoin)

-- | Define the distance of the miter join, correspond to the
--   `stroke-miterlimit` attritbue.
_strokeMiterLimit :: DrawAttributes -> !(Last Double)

-- | Define the filling color of the elements. Corresponding to the
--   <tt>fill</tt> attribute.
_fillColor :: DrawAttributes -> !(Last Texture)

-- | Define the `fill-opacity` attribute, the transparency for the
--   "content".
_fillOpacity :: DrawAttributes -> !(Maybe Float)

-- | Define the global or group opacity attribute.
_groupOpacity :: DrawAttributes -> !(Maybe Float)

-- | Content of the <a>transform</a> attribute
_transform :: DrawAttributes -> !(Maybe [Transformation])

-- | Define the `fill-rule` used during the rendering.
_fillRule :: DrawAttributes -> !(Last FillRule)

-- | Define the <a>mask</a> attribute.
_maskRef :: DrawAttributes -> !(Last ElementRef)

-- | Define the `clip-path` attribute.
_clipPathRef :: DrawAttributes -> !(Last ElementRef)

-- | Define the `clip-rule` attribute.
_clipRule :: DrawAttributes -> !(Last FillRule)

-- | Map to the `class` attribute. Used for the CSS rewriting.
_attrClass :: DrawAttributes -> ![Text]

-- | Map to the <a>id</a> attribute. Used for the CSS rewriting.
_attrId :: DrawAttributes -> !(Maybe String)

-- | Define the start distance of the dashing pattern. Correspond to the
--   `stroke-dashoffset` attribute.
_strokeOffset :: DrawAttributes -> !(Last Number)

-- | Define the dashing pattern for the lines. Correspond to the
--   `stroke-dasharray` attribute.
_strokeDashArray :: DrawAttributes -> !(Last [Number])

-- | Current size of the text, correspond to the `font-size` SVG attribute.
_fontSize :: DrawAttributes -> !(Last Number)

-- | Define the possible fonts to be used for text rendering. Map to the
--   `font-family` attribute.
_fontFamily :: DrawAttributes -> !(Last [String])

-- | Map to the `font-style` attribute.
_fontStyle :: DrawAttributes -> !(Last FontStyle)

-- | Define how to interpret the text position, correspond to the
--   `text-anchor` attribute.
_textAnchor :: DrawAttributes -> !(Last TextAnchor)

-- | Define the marker used for the start of the line. Correspond to the
--   `marker-start` attribute.
_markerStart :: DrawAttributes -> !(Last ElementRef)

-- | Define the marker used for every point of the polyline/path Correspond
--   to the `marker-mid` attribute.
_markerMid :: DrawAttributes -> !(Last ElementRef)

-- | Define the marker used for the end of the line. Correspond to the
--   `marker-end` attribute.
_markerEnd :: DrawAttributes -> !(Last ElementRef)

-- | Lenses for the DrawAttributes type.
class HasDrawAttributes c_alqB where attrClass = (.) drawAttributes attrClass attrId = (.) drawAttributes attrId clipPathRef = (.) drawAttributes clipPathRef clipRule = (.) drawAttributes clipRule fillColor = (.) drawAttributes fillColor fillOpacity = (.) drawAttributes fillOpacity fillRule = (.) drawAttributes fillRule fontFamily = (.) drawAttributes fontFamily fontSize = (.) drawAttributes fontSize fontStyle = (.) drawAttributes fontStyle groupOpacity = (.) drawAttributes groupOpacity markerEnd = (.) drawAttributes markerEnd markerMid = (.) drawAttributes markerMid markerStart = (.) drawAttributes markerStart maskRef = (.) drawAttributes maskRef strokeColor = (.) drawAttributes strokeColor strokeDashArray = (.) drawAttributes strokeDashArray strokeLineCap = (.) drawAttributes strokeLineCap strokeLineJoin = (.) drawAttributes strokeLineJoin strokeMiterLimit = (.) drawAttributes strokeMiterLimit strokeOffset = (.) drawAttributes strokeOffset strokeOpacity = (.) drawAttributes strokeOpacity strokeWidth = (.) drawAttributes strokeWidth textAnchor = (.) drawAttributes textAnchor transform = (.) drawAttributes transform
drawAttributes :: HasDrawAttributes c_alqB => Lens' c_alqB DrawAttributes
attrClass :: HasDrawAttributes c_alqB => Lens' c_alqB [Text]
attrId :: HasDrawAttributes c_alqB => Lens' c_alqB (Maybe String)
clipPathRef :: HasDrawAttributes c_alqB => Lens' c_alqB (Last ElementRef)
clipRule :: HasDrawAttributes c_alqB => Lens' c_alqB (Last FillRule)
fillColor :: HasDrawAttributes c_alqB => Lens' c_alqB (Last Texture)
fillOpacity :: HasDrawAttributes c_alqB => Lens' c_alqB (Maybe Float)
fillRule :: HasDrawAttributes c_alqB => Lens' c_alqB (Last FillRule)
fontFamily :: HasDrawAttributes c_alqB => Lens' c_alqB (Last [String])
fontSize :: HasDrawAttributes c_alqB => Lens' c_alqB (Last Number)
fontStyle :: HasDrawAttributes c_alqB => Lens' c_alqB (Last FontStyle)
groupOpacity :: HasDrawAttributes c_alqB => Lens' c_alqB (Maybe Float)
markerEnd :: HasDrawAttributes c_alqB => Lens' c_alqB (Last ElementRef)
markerMid :: HasDrawAttributes c_alqB => Lens' c_alqB (Last ElementRef)
markerStart :: HasDrawAttributes c_alqB => Lens' c_alqB (Last ElementRef)
maskRef :: HasDrawAttributes c_alqB => Lens' c_alqB (Last ElementRef)
strokeColor :: HasDrawAttributes c_alqB => Lens' c_alqB (Last Texture)
strokeDashArray :: HasDrawAttributes c_alqB => Lens' c_alqB (Last [Number])
strokeLineCap :: HasDrawAttributes c_alqB => Lens' c_alqB (Last Cap)
strokeLineJoin :: HasDrawAttributes c_alqB => Lens' c_alqB (Last LineJoin)
strokeMiterLimit :: HasDrawAttributes c_alqB => Lens' c_alqB (Last Double)
strokeOffset :: HasDrawAttributes c_alqB => Lens' c_alqB (Last Number)
strokeOpacity :: HasDrawAttributes c_alqB => Lens' c_alqB (Maybe Float)
strokeWidth :: HasDrawAttributes c_alqB => Lens' c_alqB (Last Number)
textAnchor :: HasDrawAttributes c_alqB => Lens' c_alqB (Last TextAnchor)
transform :: HasDrawAttributes c_alqB => Lens' c_alqB (Maybe [Transformation])

-- | Class helping find the drawing attributes for all the SVG attributes.
class WithDrawAttributes a
drawAttr :: WithDrawAttributes a => Lens' a DrawAttributes

-- | Define a rectangle. Correspond to `&lt;rectangle&gt;` svg tag.
data Rectangle
Rectangle :: DrawAttributes -> Point -> Number -> Number -> (Number, Number) -> Rectangle

-- | Rectangle drawing attributes.
_rectDrawAttributes :: Rectangle -> DrawAttributes

-- | Upper left corner of the rectangle, correspond to the attributes
--   <tt>x</tt> and <tt>y</tt>.
_rectUpperLeftCorner :: Rectangle -> Point

-- | Rectangle width, correspond, strangely, to the <a>width</a> attribute.
_rectWidth :: Rectangle -> Number

-- | Rectangle height, correspond, amazingly, to the <a>height</a>
--   attribute.
_rectHeight :: Rectangle -> Number

-- | Define the rounded corner radius radius of the rectangle. Correspond
--   to the <tt>rx</tt> and <tt>ry</tt> attributes.
_rectCornerRadius :: Rectangle -> (Number, Number)

-- | Lenses for the Rectangle type.
class HasRectangle c_am9M where rectCornerRadius = (.) rectangle rectCornerRadius rectDrawAttributes = (.) rectangle rectDrawAttributes rectHeight = (.) rectangle rectHeight rectUpperLeftCorner = (.) rectangle rectUpperLeftCorner rectWidth = (.) rectangle rectWidth
rectangle :: HasRectangle c_am9M => Lens' c_am9M Rectangle
rectCornerRadius :: HasRectangle c_am9M => Lens' c_am9M (Number, Number)
rectDrawAttributes :: HasRectangle c_am9M => Lens' c_am9M DrawAttributes
rectHeight :: HasRectangle c_am9M => Lens' c_am9M Number
rectUpperLeftCorner :: HasRectangle c_am9M => Lens' c_am9M Point
rectWidth :: HasRectangle c_am9M => Lens' c_am9M Number

-- | Define a simple line. Correspond to the `&lt;line&gt;` tag.
data Line
Line :: DrawAttributes -> Point -> Point -> Line

-- | Drawing attributes of line.
_lineDrawAttributes :: Line -> DrawAttributes

-- | First point of the the line, correspond to the <tt>x1</tt> and
--   <tt>y1</tt> attributes.
_linePoint1 :: Line -> Point

-- | Second point of the the line, correspond to the <tt>x2</tt> and
--   <tt>y2</tt> attributes.
_linePoint2 :: Line -> Point

-- | Lenses for the Line type.
class HasLine c_am3Y where lineDrawAttributes = (.) line lineDrawAttributes linePoint1 = (.) line linePoint1 linePoint2 = (.) line linePoint2
line :: HasLine c_am3Y => Lens' c_am3Y Line
lineDrawAttributes :: HasLine c_am3Y => Lens' c_am3Y DrawAttributes
linePoint1 :: HasLine c_am3Y => Lens' c_am3Y Point
linePoint2 :: HasLine c_am3Y => Lens' c_am3Y Point

-- | Primitive decriving polygon composed of segements. Correspond to the
--   `&lt;polygon&gt;` tag
data Polygon
Polygon :: DrawAttributes -> [RPoint] -> Polygon

-- | Drawing attributes for the polygon.
_polygonDrawAttributes :: Polygon -> DrawAttributes

-- | Points of the polygon. Correspond to the <tt>points</tt> attributes.
_polygonPoints :: Polygon -> [RPoint]

-- | Lenses for the Polygon type
class HasPolygon c_alZO where polygonDrawAttributes = (.) polygon polygonDrawAttributes polygonPoints = (.) polygon polygonPoints
polygon :: HasPolygon c_alZO => Lens' c_alZO Polygon
polygonDrawAttributes :: HasPolygon c_alZO => Lens' c_alZO DrawAttributes
polygonPoints :: HasPolygon c_alZO => Lens' c_alZO [RPoint]

-- | This primitive describe an unclosed suite of segments. Correspond to
--   the `&lt;polyline&gt;` tag.
data PolyLine
PolyLine :: DrawAttributes -> [RPoint] -> PolyLine

-- | drawing attributes of the polyline.
_polyLineDrawAttributes :: PolyLine -> DrawAttributes

-- | Geometry definition of the polyline. correspond to the <tt>points</tt>
--   attribute
_polyLinePoints :: PolyLine -> [RPoint]

-- | Lenses for the PolyLine type.
class HasPolyLine c_alVY where polyLineDrawAttributes = (.) polyLine polyLineDrawAttributes polyLinePoints = (.) polyLine polyLinePoints
polyLine :: HasPolyLine c_alVY => Lens' c_alVY PolyLine
polyLineDrawAttributes :: HasPolyLine c_alVY => Lens' c_alVY DrawAttributes
polyLinePoints :: HasPolyLine c_alVY => Lens' c_alVY [RPoint]

-- | Type mapping the `&lt;path&gt;` svg tag.
data Path
Path :: DrawAttributes -> [PathCommand] -> Path

-- | Drawing attributes of the path.
_pathDrawAttributes :: Path -> DrawAttributes

-- | Definition of the path, correspond to the <tt>d</tt> attributes.
_pathDefinition :: Path -> [PathCommand]

-- | Lenses for the Path type
class HasPath c_amg9 where pathDefinition = (.) path pathDefinition pathDrawAttributes = (.) path pathDrawAttributes
path :: HasPath c_amg9 => Lens' c_amg9 Path
pathDefinition :: HasPath c_amg9 => Lens' c_amg9 [PathCommand]
pathDrawAttributes :: HasPath c_amg9 => Lens' c_amg9 DrawAttributes

-- | Define a `&lt;circle&gt;`.
data Circle
Circle :: DrawAttributes -> Point -> Number -> Circle

-- | Drawing attributes of the circle.
_circleDrawAttributes :: Circle -> DrawAttributes

-- | Define the center of the circle, describe the <tt>cx</tt> and
--   <tt>cy</tt> attributes.
_circleCenter :: Circle -> Point

-- | Radius of the circle, equivalent to the <tt>r</tt> attribute.
_circleRadius :: Circle -> Number

-- | Lenses for the Circle type.
class HasCircle c_anyG where circleCenter = (.) circle circleCenter circleDrawAttributes = (.) circle circleDrawAttributes circleRadius = (.) circle circleRadius
circle :: HasCircle c_anyG => Lens' c_anyG Circle
circleCenter :: HasCircle c_anyG => Lens' c_anyG Point
circleDrawAttributes :: HasCircle c_anyG => Lens' c_anyG DrawAttributes
circleRadius :: HasCircle c_anyG => Lens' c_anyG Number

-- | Define an `&lt;ellipse&gt;`
data Ellipse
Ellipse :: DrawAttributes -> Point -> Number -> Number -> Ellipse

-- | Drawing attributes of the ellipse.
_ellipseDrawAttributes :: Ellipse -> DrawAttributes

-- | Center of the ellipse, map to the <tt>cx</tt> and <tt>cy</tt>
--   attributes.
_ellipseCenter :: Ellipse -> Point

-- | Radius along the X axis, map the <tt>rx</tt> attribute.
_ellipseXRadius :: Ellipse -> Number

-- | Radius along the Y axis, map the <tt>ry</tt> attribute.
_ellipseYRadius :: Ellipse -> Number

-- | Lenses for the ellipse type.
class HasEllipse c_anDZ where ellipseCenter = (.) ellipse ellipseCenter ellipseDrawAttributes = (.) ellipse ellipseDrawAttributes ellipseXRadius = (.) ellipse ellipseXRadius ellipseYRadius = (.) ellipse ellipseYRadius
ellipse :: HasEllipse c_anDZ => Lens' c_anDZ Ellipse
ellipseCenter :: HasEllipse c_anDZ => Lens' c_anDZ Point
ellipseDrawAttributes :: HasEllipse c_anDZ => Lens' c_anDZ DrawAttributes
ellipseXRadius :: HasEllipse c_anDZ => Lens' c_anDZ Number
ellipseYRadius :: HasEllipse c_anDZ => Lens' c_anDZ Number

-- | Define an `&lt;image&gt;` tag.
data Image
Image :: DrawAttributes -> Point -> Number -> Number -> String -> Image

-- | Drawing attributes of the image
_imageDrawAttributes :: Image -> DrawAttributes

-- | Position of the image referenced by its upper left corner.
_imageCornerUpperLeft :: Image -> Point

-- | Image width
_imageWidth :: Image -> Number

-- | Image Height
_imageHeight :: Image -> Number

-- | Image href, pointing to the real image.
_imageHref :: Image -> String

-- | Lenses for the Image type.
class HasImage c_anKv where imageCornerUpperLeft = (.) image imageCornerUpperLeft imageDrawAttributes = (.) image imageDrawAttributes imageHeight = (.) image imageHeight imageHref = (.) image imageHref imageWidth = (.) image imageWidth
image :: HasImage c_anKv => Lens' c_anKv Image
imageCornerUpperLeft :: HasImage c_anKv => Lens' c_anKv Point
imageDrawAttributes :: HasImage c_anKv => Lens' c_anKv DrawAttributes
imageHeight :: HasImage c_anKv => Lens' c_anKv Number
imageHref :: HasImage c_anKv => Lens' c_anKv String
imageWidth :: HasImage c_anKv => Lens' c_anKv Number

-- | Define an `&lt;use&gt;` for a named content. Every named content can
--   be reused in the document using this element.
data Use
Use :: Point -> String -> Maybe Number -> Maybe Number -> DrawAttributes -> Use

-- | Position where to draw the "used" element. Correspond to the
--   <tt>x</tt> and <tt>y</tt> attributes.
_useBase :: Use -> Point

-- | Referenced name, correspond to `xlink:href` attribute.
_useName :: Use -> String

-- | Define the width of the region where to place the element. Map to the
--   <a>width</a> attribute.
_useWidth :: Use -> Maybe Number

-- | Define the height of the region where to place the element. Map to the
--   <a>height</a> attribute.
_useHeight :: Use -> Maybe Number

-- | Use draw attributes.
_useDrawAttributes :: Use -> DrawAttributes

-- | Lenses for the Use type.
class HasUse c_anRY where useBase = (.) use useBase useDrawAttributes = (.) use useDrawAttributes useHeight = (.) use useHeight useName = (.) use useName useWidth = (.) use useWidth
use :: HasUse c_anRY => Lens' c_anRY Use
useBase :: HasUse c_anRY => Lens' c_anRY Point
useDrawAttributes :: HasUse c_anRY => Lens' c_anRY DrawAttributes
useHeight :: HasUse c_anRY => Lens' c_anRY (Maybe Number)
useName :: HasUse c_anRY => Lens' c_anRY String
useWidth :: HasUse c_anRY => Lens' c_anRY (Maybe Number)

-- | Define a SVG group, corresponding `&lt;g&gt;` tag.
data Group a
Group :: !DrawAttributes -> ![a] -> !(Maybe (Int, Int, Int, Int)) -> Group a

-- | Group drawing attributes, propagated to all of its children.
_groupDrawAttributes :: Group a -> !DrawAttributes

-- | Content of the group, corresponding to all the tags inside the
--   `&lt;g&gt;` tag.
_groupChildren :: Group a -> ![a]

-- | Mapped to the attribute <a>viewBox</a>
_groupViewBox :: Group a -> !(Maybe (Int, Int, Int, Int))

-- | Lenses associated to the Group type.
class HasGroup c_annV a_amgr | c_annV -> a_amgr where groupChildren = (.) group groupChildren groupDrawAttributes = (.) group groupDrawAttributes groupViewBox = (.) group groupViewBox
group :: HasGroup c_annV a_amgr => Lens' c_annV (Group a_amgr)
groupChildren :: HasGroup c_annV a_amgr => Lens' c_annV [a_amgr]
groupDrawAttributes :: HasGroup c_annV a_amgr => Lens' c_annV DrawAttributes
groupViewBox :: HasGroup c_annV a_amgr => Lens' c_annV (Maybe (Int, Int, Int, Int))

-- | Define the `&lt;symbol&gt;` tag, equivalent to a named group.
newtype Symbol a
Symbol :: Group a -> Symbol a
_groupOfSymbol :: Symbol a -> Group a

-- | Lenses associated with the Symbol type.
groupOfSymbol :: Iso (Symbol a_anoj) (Symbol a_anu2) (Group a_anoj) (Group a_anu2)

-- | Define the global `&lt;tag&gt;` SVG tag.
data Text
Text :: !TextAdjust -> !TextSpan -> Text

-- | Define the <tt>lengthAdjust</tt> attribute.
_textAdjust :: Text -> !TextAdjust

-- | Root of the text content.
_textRoot :: Text -> !TextSpan

-- | Lenses for the Text type.
class HasText c_aone where textAdjust = (.) text textAdjust textRoot = (.) text textRoot
text :: HasText c_aone => Lens' c_aone Text
textAdjust :: HasText c_aone => Lens' c_aone TextAdjust
textRoot :: HasText c_aone => Lens' c_aone TextSpan

-- | Tell where to anchor the text, where the position given is realative
--   to the text.
data TextAnchor

-- | The text with left aligned, or start at the postion If the point is
--   the <a>*</a> then the text will be printed this way:
--   
--   <pre>
--   *THE_TEXT_TO_PRINT
--   </pre>
--   
--   Equivalent to the <tt>start</tt> value.
TextAnchorStart :: TextAnchor

-- | The text is middle aligned, so the text will be at the left and right
--   of the position:
--   
--   <pre>
--   THE_TEXT*TO_PRINT
--   </pre>
--   
--   Equivalent to the <tt>middle</tt> value.
TextAnchorMiddle :: TextAnchor

-- | The text is right aligned.
--   
--   <pre>
--   THE_TEXT_TO_PRINT*
--   </pre>
--   
--   Equivalent to the <tt>end</tt> value.
TextAnchorEnd :: TextAnchor

-- | Little helper to create a SVG text at a given baseline position.
textAt :: Point -> Text -> Text

-- | Describe the `&lt;textpath&gt;` SVG tag.
data TextPath
TextPath :: !Number -> !String -> !TextPathMethod -> !TextPathSpacing -> ![PathCommand] -> TextPath

-- | Define the beginning offset on the path, the <tt>startOffset</tt>
--   attribute.
_textPathStartOffset :: TextPath -> !Number

-- | Define the `xlink:href` attribute.
_textPathName :: TextPath -> !String

-- | Correspond to the <tt>method</tt> attribute.
_textPathMethod :: TextPath -> !TextPathMethod

-- | Correspond to the <tt>spacing</tt> attribute.
_textPathSpacing :: TextPath -> !TextPathSpacing

-- | Real content of the path.
_textPathData :: TextPath -> ![PathCommand]

-- | Lenses for the TextPath type.
class HasTextPath c_aogr where textPathData = (.) textPath textPathData textPathMethod = (.) textPath textPathMethod textPathName = (.) textPath textPathName textPathSpacing = (.) textPath textPathSpacing textPathStartOffset = (.) textPath textPathStartOffset
textPath :: HasTextPath c_aogr => Lens' c_aogr TextPath
textPathData :: HasTextPath c_aogr => Lens' c_aogr [PathCommand]
textPathMethod :: HasTextPath c_aogr => Lens' c_aogr TextPathMethod
textPathName :: HasTextPath c_aogr => Lens' c_aogr String
textPathSpacing :: HasTextPath c_aogr => Lens' c_aogr TextPathSpacing
textPathStartOffset :: HasTextPath c_aogr => Lens' c_aogr Number

-- | Describe the content of the <tt>spacing</tt> text path attribute.
data TextPathSpacing

-- | Map to the <tt>exact</tt> value.
TextPathSpacingExact :: TextPathSpacing

-- | Map to the <tt>auto</tt> value.
TextPathSpacingAuto :: TextPathSpacing

-- | Describe the content of the <tt>method</tt> attribute on text path.
data TextPathMethod

-- | Map to the <tt>align</tt> value.
TextPathAlign :: TextPathMethod

-- | Map to the <tt>stretch</tt> value.
TextPathStretch :: TextPathMethod

-- | Define the content of a `&lt;tspan&gt;` tag.
data TextSpanContent

-- | Raw text
SpanText :: !Text -> TextSpanContent

-- | Equivalent to a `&lt;tref&gt;`
SpanTextRef :: !String -> TextSpanContent

-- | Define a `&lt;tspan&gt;`
SpanSub :: !TextSpan -> TextSpanContent

-- | Define a `&lt;tspan&gt;` tag.
data TextSpan
TextSpan :: !TextInfo -> !DrawAttributes -> ![TextSpanContent] -> TextSpan

-- | Placing information for the text.
_spanInfo :: TextSpan -> !TextInfo

-- | Drawing attributes for the text span.
_spanDrawAttributes :: TextSpan -> !DrawAttributes

-- | Content of the span.
_spanContent :: TextSpan -> ![TextSpanContent]

-- | Lenses for the TextSpan type.
class HasTextSpan c_ao9B where spanContent = (.) textSpan spanContent spanDrawAttributes = (.) textSpan spanDrawAttributes spanInfo = (.) textSpan spanInfo
textSpan :: HasTextSpan c_ao9B => Lens' c_ao9B TextSpan
spanContent :: HasTextSpan c_ao9B => Lens' c_ao9B [TextSpanContent]
spanDrawAttributes :: HasTextSpan c_ao9B => Lens' c_ao9B DrawAttributes
spanInfo :: HasTextSpan c_ao9B => Lens' c_ao9B TextInfo

-- | Define position information associated to `&lt;text&gt;` or
--   `&lt;tspan&gt;` svg tag.
data TextInfo
TextInfo :: ![Number] -> ![Number] -> ![Number] -> ![Number] -> ![Double] -> !(Maybe Number) -> TextInfo

-- | <tt>x</tt> attribute.
_textInfoX :: TextInfo -> ![Number]

-- | <tt>y</tt> attribute.
_textInfoY :: TextInfo -> ![Number]

-- | <tt>dx</tt> attribute.
_textInfoDX :: TextInfo -> ![Number]

-- | <tt>dy</tt> attribute.
_textInfoDY :: TextInfo -> ![Number]

-- | <a>rotate</a> attribute.
_textInfoRotate :: TextInfo -> ![Double]

-- | <tt>textLength</tt> attribute.
_textInfoLength :: TextInfo -> !(Maybe Number)

-- | Lenses for the TextInfo type.
class HasTextInfo c_ao0C where textInfoDX = (.) textInfo textInfoDX textInfoDY = (.) textInfo textInfoDY textInfoLength = (.) textInfo textInfoLength textInfoRotate = (.) textInfo textInfoRotate textInfoX = (.) textInfo textInfoX textInfoY = (.) textInfo textInfoY
textInfo :: HasTextInfo c_ao0C => Lens' c_ao0C TextInfo
textInfoDX :: HasTextInfo c_ao0C => Lens' c_ao0C [Number]
textInfoDY :: HasTextInfo c_ao0C => Lens' c_ao0C [Number]
textInfoLength :: HasTextInfo c_ao0C => Lens' c_ao0C (Maybe Number)
textInfoRotate :: HasTextInfo c_ao0C => Lens' c_ao0C [Double]
textInfoX :: HasTextInfo c_ao0C => Lens' c_ao0C [Number]
textInfoY :: HasTextInfo c_ao0C => Lens' c_ao0C [Number]

-- | Define the possible values of the <tt>lengthAdjust</tt> attribute.
data TextAdjust

-- | Value <tt>spacing</tt>
TextAdjustSpacing :: TextAdjust

-- | Value <tt>spacingAndGlyphs</tt>
TextAdjustSpacingAndGlyphs :: TextAdjust

-- | Define the `&lt;marker&gt;` tag.
data Marker
Marker :: DrawAttributes -> (Number, Number) -> Maybe Number -> Maybe Number -> Maybe MarkerOrientation -> Maybe MarkerUnit -> !(Maybe (Int, Int, Int, Int)) -> [Tree] -> Marker

-- | Draw attributes of the marker.
_markerDrawAttributes :: Marker -> DrawAttributes

-- | Define the reference point of the marker. correspond to the
--   <tt>refX</tt> and <tt>refY</tt> attributes.
_markerRefPoint :: Marker -> (Number, Number)

-- | Define the width of the marker. Correspond to the <a>markerWidth</a>
--   attribute.
_markerWidth :: Marker -> Maybe Number

-- | Define the height of the marker. Correspond to the <a>markerHeight</a>
--   attribute.
_markerHeight :: Marker -> Maybe Number

-- | Correspond to the <tt>orient</tt> attribute.
_markerOrient :: Marker -> Maybe MarkerOrientation

-- | Map the <a>markerUnits</a> attribute.
_markerUnits :: Marker -> Maybe MarkerUnit

-- | Optional viewbox
_markerViewBox :: Marker -> !(Maybe (Int, Int, Int, Int))

-- | Elements defining the marker.
_markerElements :: Marker -> [Tree]

-- | Define the orientation, associated to the <tt>orient</tt> attribute on
--   the Marker
data MarkerOrientation

-- | Auto value
OrientationAuto :: MarkerOrientation

-- | Specific angle.
OrientationAngle :: Coord -> MarkerOrientation

-- | Define the content of the <a>markerUnits</a> attribute on the Marker.
data MarkerUnit

-- | Value <a>strokeWidth</a>
MarkerUnitStrokeWidth :: MarkerUnit

-- | Value <tt>userSpaceOnUse</tt>
MarkerUnitUserSpaceOnUse :: MarkerUnit

-- | Lenses for the Marker type.
class HasMarker c_aoAW where markerDrawAttributes = (.) marker markerDrawAttributes markerElements = (.) marker markerElements markerHeight = (.) marker markerHeight markerOrient = (.) marker markerOrient markerRefPoint = (.) marker markerRefPoint markerUnits = (.) marker markerUnits markerViewBox = (.) marker markerViewBox markerWidth = (.) marker markerWidth
marker :: HasMarker c_aoAW => Lens' c_aoAW Marker
markerDrawAttributes :: HasMarker c_aoAW => Lens' c_aoAW DrawAttributes
markerElements :: HasMarker c_aoAW => Lens' c_aoAW [Tree]
markerHeight :: HasMarker c_aoAW => Lens' c_aoAW (Maybe Number)
markerOrient :: HasMarker c_aoAW => Lens' c_aoAW (Maybe MarkerOrientation)
markerRefPoint :: HasMarker c_aoAW => Lens' c_aoAW (Number, Number)
markerUnits :: HasMarker c_aoAW => Lens' c_aoAW (Maybe MarkerUnit)
markerViewBox :: HasMarker c_aoAW => Lens' c_aoAW (Maybe (Int, Int, Int, Int))
markerWidth :: HasMarker c_aoAW => Lens' c_aoAW (Maybe Number)

-- | Define a color stop for the gradients. Represent the `&lt;stop&gt;`
--   SVG tag.
data GradientStop
GradientStop :: Float -> PixelRGBA8 -> GradientStop

-- | Gradient offset between 0 and 1, correspond to the <tt>offset</tt>
--   attribute.
_gradientOffset :: GradientStop -> Float

-- | Color of the gradient stop. Correspond to the `stop-color` attribute.
_gradientColor :: GradientStop -> PixelRGBA8

-- | Lenses for the GradientStop type.
class HasGradientStop c_aoYZ where gradientColor = (.) gradientStop gradientColor gradientOffset = (.) gradientStop gradientOffset
gradientStop :: HasGradientStop c_aoYZ => Lens' c_aoYZ GradientStop
gradientColor :: HasGradientStop c_aoYZ => Lens' c_aoYZ PixelRGBA8
gradientOffset :: HasGradientStop c_aoYZ => Lens' c_aoYZ Float

-- | Define a `&lt;linearGradient&gt;` tag.
data LinearGradient
LinearGradient :: CoordinateUnits -> Point -> Point -> Spread -> [Transformation] -> [GradientStop] -> LinearGradient

-- | Define coordinate system of the gradient, associated to the
--   <tt>gradientUnits</tt> attribute.
_linearGradientUnits :: LinearGradient -> CoordinateUnits

-- | Point defining the beginning of the line gradient. Associated to the
--   <tt>x1</tt> and <tt>y1</tt> attribute.
_linearGradientStart :: LinearGradient -> Point

-- | Point defining the end of the line gradient. Associated to the
--   <tt>x2</tt> and <tt>y2</tt> attribute.
_linearGradientStop :: LinearGradient -> Point

-- | Define how to handle the values outside the gradient start and stop.
--   Associated to the <tt>spreadMethod</tt> attribute.
_linearGradientSpread :: LinearGradient -> Spread

-- | Define the transformation to apply to the gradient points. Associated
--   to the <tt>gradientTransform</tt> attribute.
_linearGradientTransform :: LinearGradient -> [Transformation]

-- | List of color stops of the linear gradient.
_linearGradientStops :: LinearGradient -> [GradientStop]

-- | Lenses for the LinearGradient type.
class HasLinearGradient c_ap43 where linearGradientSpread = (.) linearGradient linearGradientSpread linearGradientStart = (.) linearGradient linearGradientStart linearGradientStop = (.) linearGradient linearGradientStop linearGradientStops = (.) linearGradient linearGradientStops linearGradientTransform = (.) linearGradient linearGradientTransform linearGradientUnits = (.) linearGradient linearGradientUnits
linearGradient :: HasLinearGradient c_ap43 => Lens' c_ap43 LinearGradient
linearGradientSpread :: HasLinearGradient c_ap43 => Lens' c_ap43 Spread
linearGradientStart :: HasLinearGradient c_ap43 => Lens' c_ap43 Point
linearGradientStop :: HasLinearGradient c_ap43 => Lens' c_ap43 Point
linearGradientStops :: HasLinearGradient c_ap43 => Lens' c_ap43 [GradientStop]
linearGradientTransform :: HasLinearGradient c_ap43 => Lens' c_ap43 [Transformation]
linearGradientUnits :: HasLinearGradient c_ap43 => Lens' c_ap43 CoordinateUnits

-- | Define a `&lt;radialGradient&gt;` tag.
data RadialGradient
RadialGradient :: CoordinateUnits -> Point -> Number -> Maybe Number -> Maybe Number -> Spread -> [Transformation] -> [GradientStop] -> RadialGradient

-- | Define coordinate system of the gradient, associated to the
--   <tt>gradientUnits</tt> attribute.
_radialGradientUnits :: RadialGradient -> CoordinateUnits

-- | Center of the radial gradient. Associated to the <tt>cx</tt> and
--   <tt>cy</tt> attributes.
_radialGradientCenter :: RadialGradient -> Point

-- | Radius of the radial gradient. Associated to the <tt>r</tt> attribute.
_radialGradientRadius :: RadialGradient -> Number

-- | X coordinate of the focus point of the radial gradient. Associated to
--   the <tt>fx</tt> attribute.
_radialGradientFocusX :: RadialGradient -> Maybe Number

-- | Y coordinate of the focus point of the radial gradient. Associated to
--   the <tt>fy</tt> attribute.
_radialGradientFocusY :: RadialGradient -> Maybe Number

-- | Define how to handle the values outside the gradient start and stop.
--   Associated to the <tt>spreadMethod</tt> attribute.
_radialGradientSpread :: RadialGradient -> Spread

-- | Define the transformation to apply to the gradient points. Associated
--   to the <tt>gradientTransform</tt> attribute.
_radialGradientTransform :: RadialGradient -> [Transformation]

-- | List of color stops of the radial gradient.
_radialGradientStops :: RadialGradient -> [GradientStop]

-- | Lenses for the RadialGradient type.
class HasRadialGradient c_apdb where radialGradientCenter = (.) radialGradient radialGradientCenter radialGradientFocusX = (.) radialGradient radialGradientFocusX radialGradientFocusY = (.) radialGradient radialGradientFocusY radialGradientRadius = (.) radialGradient radialGradientRadius radialGradientSpread = (.) radialGradient radialGradientSpread radialGradientStops = (.) radialGradient radialGradientStops radialGradientTransform = (.) radialGradient radialGradientTransform radialGradientUnits = (.) radialGradient radialGradientUnits
radialGradient :: HasRadialGradient c_apdb => Lens' c_apdb RadialGradient
radialGradientCenter :: HasRadialGradient c_apdb => Lens' c_apdb Point
radialGradientFocusX :: HasRadialGradient c_apdb => Lens' c_apdb (Maybe Number)
radialGradientFocusY :: HasRadialGradient c_apdb => Lens' c_apdb (Maybe Number)
radialGradientRadius :: HasRadialGradient c_apdb => Lens' c_apdb Number
radialGradientSpread :: HasRadialGradient c_apdb => Lens' c_apdb Spread
radialGradientStops :: HasRadialGradient c_apdb => Lens' c_apdb [GradientStop]
radialGradientTransform :: HasRadialGradient c_apdb => Lens' c_apdb [Transformation]
radialGradientUnits :: HasRadialGradient c_apdb => Lens' c_apdb CoordinateUnits

-- | Define a `&lt;pattern&gt;` tag.
data Pattern
Pattern :: DrawAttributes -> Maybe (Int, Int, Int, Int) -> Number -> Number -> Point -> [Tree] -> CoordinateUnits -> Pattern

-- | Pattern drawing attributes.
_patternDrawAttributes :: Pattern -> DrawAttributes

-- | Possible <a>viewBox</a>.
_patternViewBox :: Pattern -> Maybe (Int, Int, Int, Int)

-- | Width of the pattern tile, mapped to the <a>width</a> attribute
_patternWidth :: Pattern -> Number

-- | Height of the pattern tile, mapped to the <a>height</a> attribute
_patternHeight :: Pattern -> Number

-- | Pattern tile base, mapped to the <tt>x</tt> and <tt>y</tt> attributes.
_patternPos :: Pattern -> Point

-- | Elements used in the pattern.
_patternElements :: Pattern -> [Tree]

-- | Define the cordinate system to use for the pattern. Mapped to the
--   <tt>patternUnits</tt> attribute.
_patternUnit :: Pattern -> CoordinateUnits

-- | Lenses for the Patter type.
class HasPattern c_apC8 where patternDrawAttributes = (.) pattern patternDrawAttributes patternElements = (.) pattern patternElements patternHeight = (.) pattern patternHeight patternPos = (.) pattern patternPos patternUnit = (.) pattern patternUnit patternViewBox = (.) pattern patternViewBox patternWidth = (.) pattern patternWidth
pattern :: HasPattern c_apC8 => Lens' c_apC8 Pattern
patternDrawAttributes :: HasPattern c_apC8 => Lens' c_apC8 DrawAttributes
patternElements :: HasPattern c_apC8 => Lens' c_apC8 [Tree]
patternHeight :: HasPattern c_apC8 => Lens' c_apC8 Number
patternPos :: HasPattern c_apC8 => Lens' c_apC8 Point
patternUnit :: HasPattern c_apC8 => Lens' c_apC8 CoordinateUnits
patternViewBox :: HasPattern c_apC8 => Lens' c_apC8 (Maybe (Int, Int, Int, Int))
patternWidth :: HasPattern c_apC8 => Lens' c_apC8 Number

-- | Define a SVG `&lt;mask&gt;` tag.
data Mask
Mask :: DrawAttributes -> CoordinateUnits -> CoordinateUnits -> Point -> Number -> Number -> [Tree] -> Mask

-- | Drawing attributes of the Mask
_maskDrawAttributes :: Mask -> DrawAttributes

-- | Correspond to the <a>maskContentUnits</a> attributes.
_maskContentUnits :: Mask -> CoordinateUnits

-- | Mapping to the <a>maskUnits</a> attribute.
_maskUnits :: Mask -> CoordinateUnits

-- | Map to the <tt>x</tt> and <tt>y</tt> attributes.
_maskPosition :: Mask -> Point

-- | Map to the <a>width</a> attribute
_maskWidth :: Mask -> Number

-- | Map to the <a>height</a> attribute.
_maskHeight :: Mask -> Number

-- | Children of the `&lt;mask&gt;` tag.
_maskContent :: Mask -> [Tree]

-- | Lenses for the Mask type.
class HasMask c_apnV where maskContent = (.) mask maskContent maskContentUnits = (.) mask maskContentUnits maskDrawAttributes = (.) mask maskDrawAttributes maskHeight = (.) mask maskHeight maskPosition = (.) mask maskPosition maskUnits = (.) mask maskUnits maskWidth = (.) mask maskWidth
mask :: HasMask c_apnV => Lens' c_apnV Mask
maskContent :: HasMask c_apnV => Lens' c_apnV [Tree]
maskContentUnits :: HasMask c_apnV => Lens' c_apnV CoordinateUnits
maskDrawAttributes :: HasMask c_apnV => Lens' c_apnV DrawAttributes
maskHeight :: HasMask c_apnV => Lens' c_apnV Number
maskPosition :: HasMask c_apnV => Lens' c_apnV Point
maskUnits :: HasMask c_apnV => Lens' c_apnV CoordinateUnits
maskWidth :: HasMask c_apnV => Lens' c_apnV Number

-- | Define a `&lt;clipPath&gt;` tag.
data ClipPath
ClipPath :: DrawAttributes -> CoordinateUnits -> [Tree] -> ClipPath
_clipPathDrawAttributes :: ClipPath -> DrawAttributes

-- | Maps to the <a>clipPathUnits</a> attribute
_clipPathUnits :: ClipPath -> CoordinateUnits

-- | Maps to the content of the tree
_clipPathContent :: ClipPath -> [Tree]

-- | Lenses for the ClipPath type.
class HasClipPath c_apwy where clipPathContent = (.) clipPath clipPathContent clipPathDrawAttributes = (.) clipPath clipPathDrawAttributes clipPathUnits = (.) clipPath clipPathUnits
clipPath :: HasClipPath c_apwy => Lens' c_apwy ClipPath
clipPathContent :: HasClipPath c_apwy => Lens' c_apwy [Tree]
clipPathDrawAttributes :: HasClipPath c_apwy => Lens' c_apwy DrawAttributes
clipPathUnits :: HasClipPath c_apwy => Lens' c_apwy CoordinateUnits

-- | Tell if the path command is an EllipticalArc.
isPathArc :: PathCommand -> Bool

-- | Tell if a full path contain an EllipticalArc.
isPathWithArc :: Foldable f => f PathCommand -> Bool

-- | For every element of a svg tree, associate it's SVG tag name.
nameOfTree :: Tree -> Text

-- | Map a tree while propagating context information. The function passed
--   in parameter receive a list representing the the path used to go
--   arrive to the current node.
zipTree :: ([[Tree]] -> Tree) -> Tree -> Tree

-- | Helper function mapping every tree element.
mapTree :: (Tree -> Tree) -> Tree -> Tree

-- | Fold all nodes of a SVG tree.
foldTree :: (a -> Tree -> a) -> a -> Tree -> a

-- | This function replace all device dependant units to user units given
--   it's DPI configuration. Preserve percentage and "em" notation.
toUserUnit :: Dpi -> Number -> Number

-- | Helper function to modify inner value of a number
mapNumber :: (Double -> Double) -> Number -> Number
instance CssMatcheable Tree
instance WithDefaultSvg DrawAttributes
instance Monoid DrawAttributes
instance HasDocument Document
instance Show Element
instance Show Document
instance WithDefaultSvg Pattern
instance WithDrawAttributes Pattern
instance HasPattern Pattern
instance Show Pattern
instance WithDefaultSvg ClipPath
instance WithDrawAttributes ClipPath
instance HasClipPath ClipPath
instance Eq ClipPath
instance Show ClipPath
instance WithDefaultSvg Mask
instance WithDrawAttributes Mask
instance HasMask Mask
instance Eq Mask
instance Show Mask
instance WithDefaultSvg RadialGradient
instance HasRadialGradient RadialGradient
instance Eq RadialGradient
instance Show RadialGradient
instance WithDefaultSvg LinearGradient
instance HasLinearGradient LinearGradient
instance Eq LinearGradient
instance Show LinearGradient
instance WithDefaultSvg GradientStop
instance HasGradientStop GradientStop
instance Eq CoordinateUnits
instance Show CoordinateUnits
instance Eq Spread
instance Show Spread
instance Eq GradientStop
instance Show GradientStop
instance WithDefaultSvg Tree
instance WithDrawAttributes Tree
instance WithDefaultSvg Marker
instance WithDrawAttributes Marker
instance HasMarker Marker
instance Eq Tree
instance Show Tree
instance Eq MarkerOrientation
instance Show MarkerOrientation
instance Eq MarkerUnit
instance Show MarkerUnit
instance Eq Marker
instance Show Marker
instance WithDefaultSvg Text
instance WithDrawAttributes Text
instance HasText Text
instance Eq TextAdjust
instance Show TextAdjust
instance Eq Text
instance Show Text
instance WithDefaultSvg TextPath
instance HasTextPath TextPath
instance Eq TextPathMethod
instance Show TextPathMethod
instance Eq TextPathSpacing
instance Show TextPathSpacing
instance Eq TextPath
instance Show TextPath
instance WithDefaultSvg TextSpan
instance HasTextSpan TextSpan
instance Eq TextSpan
instance Show TextSpan
instance Eq TextSpanContent
instance Show TextSpanContent
instance WithDefaultSvg TextInfo
instance HasTextInfo TextInfo
instance Eq TextInfo
instance Show TextInfo
instance Monoid TextInfo
instance WithDefaultSvg Use
instance WithDrawAttributes Use
instance HasUse Use
instance Eq Use
instance Show Use
instance WithDefaultSvg Image
instance WithDrawAttributes Image
instance HasImage Image
instance Eq Image
instance Show Image
instance WithDefaultSvg Ellipse
instance WithDrawAttributes Ellipse
instance HasEllipse Ellipse
instance Eq Ellipse
instance Show Ellipse
instance WithDefaultSvg Circle
instance WithDrawAttributes Circle
instance HasCircle Circle
instance Eq Circle
instance Show Circle
instance WithDefaultSvg (Symbol a)
instance WithDrawAttributes (Symbol a)
instance Eq a => Eq (Symbol a)
instance Show a => Show (Symbol a)
instance WithDefaultSvg (Group a)
instance WithDrawAttributes (Group a)
instance HasGroup (Group a0) a0
instance Eq a => Eq (Group a)
instance Show a => Show (Group a)
instance WithDefaultSvg Path
instance WithDrawAttributes Path
instance HasPath Path
instance Eq Path
instance Show Path
instance WithDefaultSvg Rectangle
instance WithDrawAttributes Rectangle
instance HasRectangle Rectangle
instance Eq Rectangle
instance Show Rectangle
instance WithDefaultSvg Line
instance WithDrawAttributes Line
instance HasLine Line
instance Eq Line
instance Show Line
instance WithDefaultSvg Polygon
instance WithDrawAttributes Polygon
instance HasPolygon Polygon
instance Eq Polygon
instance Show Polygon
instance WithDrawAttributes PolyLine
instance WithDefaultSvg PolyLine
instance HasPolyLine PolyLine
instance Eq PolyLine
instance Show PolyLine
instance HasDrawAttributes DrawAttributes
instance Eq Origin
instance Show Origin
instance Eq PathCommand
instance Show PathCommand
instance Eq Cap
instance Show Cap
instance Eq LineJoin
instance Show LineJoin
instance Eq Texture
instance Show Texture
instance Eq FillRule
instance Show FillRule
instance Eq Transformation
instance Show Transformation
instance Eq FontStyle
instance Show FontStyle
instance Eq TextAnchor
instance Show TextAnchor
instance Eq ElementRef
instance Show ElementRef
instance Eq DrawAttributes
instance Show DrawAttributes


-- | Module providing basic input/output for the SVG document, for document
--   building, please refer to Graphics.Svg.Types.
module Graphics.Svg

-- | Try to load an svg file on disc and parse it as a SVG Document.
loadSvgFile :: FilePath -> IO (Maybe Document)

-- | Parse an in-memory SVG file
parseSvgFile :: FilePath -> ByteString -> Maybe Document

-- | Transform a SVG document to a XML node.
xmlOfDocument :: Document -> Element

-- | Save a svg Document on a file on disk.
saveXmlFile :: FilePath -> Document -> IO ()

-- | Rewrite a SVG Tree using some CSS rules.
--   
--   This action will propagate the definition of the css directly in each
--   matched element.
cssApply :: [CssRule] -> Tree -> Tree

-- | Parse CSS text into rules.
cssRulesOfText :: Text -> [CssRule]

-- | Rewrite the document by applying the CSS rules embedded inside it.
applyCSSRules :: Document -> Document

-- | For every <a>use</a> tag, try to resolve the geometry associated with
--   it and place it in the scene Tree. It is important to resolve the
--   <a>use</a> tag before applying the CSS rules, as some rules may apply
--   some elements matching the children of "use".
resolveUses :: Document -> Document
