-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Google Drive API access
--   
--   Interacting with the Google Drive API
--   
--   See https:/<i>github.com</i>pbrisbin/google-drive for usage and
--   details.
@package google-drive
@version 0.3.1


-- | Actions for working with any of Google's APIs
--   
--   Note: this module may become a standalone package at some point.
module Network.Google.Api

-- | A transformer stack for providing the access token and rescuing errors
type Api = ReaderT (String, Manager) (ErrorT ApiError IO)
data ApiError

-- | Exceptions raised by http-conduit
HttpError :: HttpException -> ApiError

-- | Failure to parse a response as JSON
InvalidJSON :: String -> ApiError

-- | All other errors
GenericError :: String -> ApiError

-- | Run an <tt>Api</tt> computation with the given Access token
runApi :: String -> Api a -> IO (Either ApiError a)

-- | Like <tt>runApi</tt> but discards the result and raises
--   <tt>ApiError</tt>s as exceptions
runApi_ :: String -> Api a -> IO ()

-- | Abort an <tt>Api</tt> computation with the given message
throwApiError :: String -> Api a
type URL = String
type Path = String
type Params = [(ByteString, Maybe ByteString)]

-- | Downloads use sinks for space efficiency and so that callers can
--   implement things like throttling or progress output themselves. If you
--   just want to download to a file, use the re-exported
--   <tt><a>sinkFile</a></tt>
type DownloadSink a = ResumableSource (ResourceT IO) ByteString -> ResourceT IO a

-- | Make an authorized GET request for JSON
getJSON :: FromJSON a => URL -> Params -> Api a

-- | Make an authorized GET request, sending the response to the given sink
getSource :: URL -> Params -> DownloadSink a -> Api a

-- | Make an authorized POST request for JSON
postJSON :: (ToJSON a, FromJSON b) => URL -> Params -> a -> Api b

-- | Make an authorized PUT request for JSON
putJSON :: (ToJSON a, FromJSON b) => URL -> Params -> a -> Api b

-- | Make an authorized request for JSON, first modifying it via the passed
--   function
requestJSON :: FromJSON a => URL -> (Request -> Request) -> Api a

-- | Make an authorized request, first modifying it via the passed
--   function, and returning the raw response content
requestLbs :: URL -> (Request -> Request) -> Api (Response ByteString)

-- | Create an authorized request for the given URL
authorize :: URL -> Api Request

-- | Decode a JSON body, capturing failure as an <tt><a>ApiError</a></tt>
decodeBody :: FromJSON a => Response ByteString -> Api a
addHeader :: Header -> Request -> Request

-- | Modify the Request's status check to not treat the given status as an
--   error
allowStatus :: Status -> Request -> Request
setBody :: ByteString -> Request -> Request
setBodySource :: Int64 -> Source (ResourceT IO) ByteString -> Request -> Request
setMethod :: Method -> Request -> Request

-- | Lift a computation from the <a>IO</a> monad.
liftIO :: MonadIO m => forall a. IO a -> m a

-- | Is used within a monadic computation to begin exception processing.
throwError :: MonadError e m => forall a. e -> m a

-- | A handler function to handle previous errors and return to normal
--   execution. A common idiom is:
--   
--   <pre>
--   do { action1; action2; action3 } `catchError` handler
--   </pre>
--   
--   where the <tt>action</tt> functions can call <a>throwError</a>. Note
--   that <tt>handler</tt> and the do-block must have the same return type.
catchError :: MonadError e m => forall a. m a -> (e -> m a) -> m a

-- | Stream all incoming data to the given file.
--   
--   Since 0.3.0
sinkFile :: MonadResource m => FilePath -> Consumer ByteString m ()
instance Typeable ApiError
instance Exception ApiError
instance Error ApiError
instance Show ApiError


-- | Methods for working with File resources on Google Drive.
--   
--   <a>https://developers.google.com/drive/v2/reference/files</a>
--   
--   This module is mostly concerned with creating and updating metadata.
--   See <tt><a>Network.Google.Drive.Upload</a></tt> for uploading content.
module Network.Google.Drive.File

-- | An existing file
data File
File :: FileId -> FileData -> File
fileId :: File -> FileId
fileData :: File -> FileData
type FileId = Text

-- | Metadata about Files on your Drive
data FileData
FileData :: !FileTitle -> !UTCTime -> ![FileId] -> !Bool -> !(Maybe Int) -> !(Maybe Text) -> !Text -> FileData
fileTitle :: FileData -> !FileTitle
fileModified :: FileData -> !UTCTime
fileParents :: FileData -> ![FileId]
fileTrashed :: FileData -> !Bool
fileSize :: FileData -> !(Maybe Int)
fileDownloadUrl :: FileData -> !(Maybe Text)
fileMimeType :: FileData -> !Text
type FileTitle = Text
newFile :: FileTitle -> UTCTime -> FileData
newFolder :: FileTitle -> UTCTime -> FileData
setParent :: File -> FileData -> FileData
setMimeType :: Text -> FileData -> FileData

-- | Get a <tt>File</tt> data by <tt>FileId</tt>
--   
--   <tt>"root"</tt> can be used to get information on the Drive itself
--   
--   If the API returns 404, this returns <tt>Nothing</tt>
getFile :: FileId -> Api (Maybe File)

-- | Create a <tt>File</tt> from <tt>FileData</tt>
createFile :: FileData -> Api File

-- | Update a <tt>File</tt>
updateFile :: FileId -> FileData -> Api File

-- | Delete a <tt>File</tt>
deleteFile :: File -> Api ()

-- | Download a <tt>File</tt>
--   
--   Returns <tt>Nothing</tt> if the file is not downloadable
downloadFile :: File -> DownloadSink a -> Api (Maybe a)

-- | Check if a <tt>File</tt> is a folder by inspecting its mime-type
isFolder :: File -> Bool

-- | Check if a <tt>File</tt> has content stored in drive
isDownloadable :: File -> Bool

-- | What to name this file if downloaded
--   
--   Currently just the <tt>fileTitle</tt>
localPath :: File -> FilePath
folderMimeType :: Text
instance FromJSON File
instance ToJSON FileData
instance FromJSON FileData
instance Show File
instance Eq File


-- | Searching for files on your drive.
--   
--   <a>https://developers.google.com/drive/web/search-parameters</a>
module Network.Google.Drive.Search

-- | Perform a search as specified by the <tt>Query</tt>
listFiles :: Query -> Api [File]

-- | List all not-trashed files within the given folder
listVisibleContents :: File -> Api [File]
type Query = Text

-- | Queriable fields
data Field
Title :: Field
FullText :: Field
MimeType :: Field
ModifiedDate :: Field
LastViewedByMeDate :: Field
Trashed :: Field
Starred :: Field
Parents :: Field
Owners :: Field
Writers :: Field
Readers :: Field
SharedWithMe :: Field
Properties :: Field

-- | Type class for values which can be used in queries
class QueryValue a
escapeValue :: QueryValue a => a -> Text

-- | The content of a string or boolean is equal to the other
(?=) :: QueryValue a => Field -> a -> Query

-- | The content of a string or boolean is not equal to the other
(?!=) :: QueryValue a => Field -> a -> Query

-- | A date is earlier than another
(?<) :: QueryValue a => Field -> a -> Query

-- | A date is earlier than or equal to another
(?<=) :: QueryValue a => Field -> a -> Query

-- | A date is later than another
(?>) :: QueryValue a => Field -> a -> Query

-- | A date is later than or equal to another
(?>=) :: QueryValue a => Field -> a -> Query

-- | An element is contained within a collection
--   
--   Used for <tt>Parents</tt>, <tt>Owners</tt>, <tt>Writers</tt>, and
--   <tt>Readers</tt>.
--   
--   Note the reversed arguments such that infix usage makes sense.
qIn :: QueryValue a => a -> Field -> Query

-- | A collection contains an element matching the parameters.
--   
--   Used for <tt>Properties</tt>.
qHas :: QueryValue a => Field -> a -> Query

-- | The content of one string is present in the other
--   
--   Used for <tt>Title</tt>, <tt>FullText</tt>, and <tt>MimeType</tt>.
qContains :: QueryValue a => Field -> a -> Query

-- | Return files that match both clauses
qAnd :: Query -> Query -> Query

-- | Return files that match either clause
qOr :: Query -> Query -> Query

-- | Negates a search clause
qNot :: Query -> Query
instance Show Field
instance FromJSON Items
instance QueryValue UTCTime
instance QueryValue Bool
instance QueryValue Text


-- | Resumable uploads
--   
--   
--   <a>https://developers.google.com/drive/web/manage-uploads#resumable</a>
--   
--   Note: actual resuming of uploads on errors is currently untested.
module Network.Google.Drive.Upload

-- | Uploads use sources for space efficiency and so that callers can
--   implement things like throttling or progress output themselves. Since
--   uploads are resumable, each invocation will give your
--   <tt>UploadSource</tt> the bytes completed so far, so you may create an
--   appropriately offset source (i.e. into a file).
type UploadSource = Int -> Source (ResourceT IO) ByteString

-- | Simple <tt>UploadSource</tt> for uploading from a file
uploadSourceFile :: FilePath -> UploadSource
createFileWithContent :: FileData -> Int -> UploadSource -> Api File
updateFileWithContent :: FileId -> FileData -> Int -> UploadSource -> Api File


-- | A convenient re-exporting of all modules
module Network.Google.Drive

-- | OAuth2 scopes to use for access to the Drive API
driveScopes :: [String]
