-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Easy-to-use TODOs manager.
--   
--   todos is a simple TODO manager. TODO records theirself are described
--   in plain-text file, and todos allows you to show only needed of them.
--   So, todos works as specialized <a>grep</a> utility.
@package todos
@version 0.5.3.2


-- | Wrapper to support unicode IO with GHC 6.10 and 6.12
module Todos.IO

-- | Write a string to the standard output device (same as <a>hPutStr</a>
--   <a>stdout</a>).
putStr :: String -> IO ()

-- | The same as <a>putStr</a>, but adds a newline character.
putStrLn :: String -> IO ()

-- | The <a>readFile</a> function reads a file and returns the contents of
--   the file as a string. The file is read lazily, on demand, as with
--   <a>getContents</a>.
readFile :: FilePath -> IO String

-- | The <a>getContents</a> operation returns all user input as a single
--   string, which is read lazily as it is needed (same as
--   <a>hGetContents</a> <a>stdin</a>).
getContents :: IO String

-- | The <a>print</a> function outputs a value of any printable type to the
--   standard output device. Printable types are those that are instances
--   of class <a>Show</a>; <a>print</a> converts values to strings for
--   output using the <a>show</a> operation and adds a newline.
--   
--   For example, a program to print the first 20 integers and their powers
--   of 2 could be written as:
--   
--   <pre>
--   main = print ([(n, 2^n) | n &lt;- [0..19]])
--   </pre>
print :: Show a => a -> IO ()

-- | Encode a string using <a>encode</a> and store the result in a
--   <a>String</a>.
encodeString :: String -> String

-- | Decode a string using <a>decode</a> using a <a>String</a> as input. |
--   This is not safe but it is necessary if UTF-8 encoded text | has been
--   loaded into a <a>String</a> prior to being decoded.
decodeString :: String -> String
ensureUnicode :: String -> String


-- | Module for parsing config files
module Todos.ReadConfig

-- | Read list of options from config files
readAllConfigs :: IO [String]

-- | Read list of options from given config file
readConfigFile :: FilePath -> IO [String]

module Todos.Types
type 𝔹 = Bool

-- | Kind of date
data DateType
StartDate :: DateType
EndDate :: DateType
Deadline :: DateType

-- | capitalize first letter of the string
capitalize :: String -> String

-- | TODO item itself.
data TodoItem
Item :: ℤ -> String -> String -> [String] -> [String] -> String -> String -> Maybe DateTime -> Maybe DateTime -> Maybe DateTime -> FilePath -> Line -> ℤ -> TodoItem

-- | Indentation level (from source file)
itemLevel :: TodoItem -> ℤ

-- | A prefix before item in source file (or empty string)
itemPrefix :: TodoItem -> String

-- | Name (title) of the item
itemName :: TodoItem -> String

-- | Tags of the item
itemTags :: TodoItem -> [String]

-- | Names (titles) of item's depends
depends :: TodoItem -> [String]

-- | Status of the item
itemStatus :: TodoItem -> String

-- | Description of the item
itemDescr :: TodoItem -> String

-- | Date when TODO is planned to start
startDate :: TodoItem -> Maybe DateTime

-- | Date when TODO is planned to end
endDate :: TodoItem -> Maybe DateTime

-- | Deadline for this TODO
deadline :: TodoItem -> Maybe DateTime

-- | Path to the source file
fileName :: TodoItem -> FilePath

-- | Line in the source file, where this item was defined
lineNr :: TodoItem -> Line

-- | Raw number of item
itemNumber :: TodoItem -> ℤ

-- | Make an ID for any hashable item. 16 hexadecimal digits.
makeId :: Hashable a => a -> String

-- | Tree of TODO items.
type Todo = Tree TodoItem
type TodoMap = Map String Todo
data Limit
Unlimited :: Limit
Limit :: ℤ -> Limit
unLimit :: Limit -> ℤ

-- | Command line flag
data CmdLineFlag
QF :: QueryFlag -> CmdLineFlag
queryFlag :: CmdLineFlag -> QueryFlag
MF :: ModeFlag -> CmdLineFlag
modeFlag :: CmdLineFlag -> ModeFlag
OF :: OutFlag -> CmdLineFlag
outFlag :: CmdLineFlag -> OutFlag
LF :: LimitFlag -> CmdLineFlag
limFlag :: CmdLineFlag -> LimitFlag
HelpF :: CmdLineFlag

-- | Flags to specify query
data QueryFlag
Tag :: String -> QueryFlag
Name :: String -> QueryFlag
unName :: QueryFlag -> String
IdIs :: String -> QueryFlag
Status :: String -> QueryFlag
Description :: String -> QueryFlag
StartDateIs :: DateTime -> QueryFlag
EndDateIs :: DateTime -> QueryFlag
DeadlineIs :: DateTime -> QueryFlag
AndCons :: QueryFlag
OrCons :: QueryFlag
NotCons :: QueryFlag
NoFilter :: QueryFlag
data LimitFlag
Prune :: ℤ -> LimitFlag
unPrune :: LimitFlag -> ℤ
Start :: ℤ -> LimitFlag
unMin :: LimitFlag -> ℤ

-- | Flags to specify parsing mode
data ModeFlag
Execute :: String -> ModeFlag
unExecute :: ModeFlag -> String
Prefix :: String -> ModeFlag
unPrefix :: ModeFlag -> String
Format :: String -> ModeFlag
getFormat :: ModeFlag -> String
DoNotReadStatus :: ModeFlag
SetStatus :: String -> ModeFlag
newStatus :: ModeFlag -> String
SetTopStatus :: String -> ModeFlag
newTopStatus :: ModeFlag -> String
GroupByFile :: ModeFlag
GroupByTag :: ModeFlag
GroupByStatus :: ModeFlag

-- | Flags to control output
data OutFlag
OnlyFirst :: OutFlag
Colors :: OutFlag
Highlight :: OutFlag
Ids :: OutFlag
DotExport :: OutFlag
IndentWith :: String -> OutFlag
getIndentString :: OutFlag -> String
Sort :: SortingType -> OutFlag
getSorting :: OutFlag -> SortingType

-- | Type of sorting
data SortingType
DoNotSort :: SortingType
ByTitle :: SortingType
ByStatus :: SortingType
ByTags :: SortingType
ByStartDate :: SortingType
ByEndDate :: SortingType
ByDeadline :: SortingType
readSort :: String -> SortingType

-- | Result of parsing command line
data Options
O :: [QueryFlag] -> [ModeFlag] -> [OutFlag] -> [LimitFlag] -> Options
Help :: Options

-- | What to do with selected items
data TodoCommand

-- | Just output items to console
JustShow :: TodoCommand

-- | Output graph in DOT format
ShowAsDot :: TodoCommand

-- | Execute this system command for each item
SystemCommand :: String -> TodoCommand

-- | Data type to store complex queries
data Composed

-- | Simple query
Pred :: QueryFlag -> Composed

-- | Logical AND
And :: Composed -> Composed -> Composed

-- | Logical OR
Or :: Composed -> Composed -> Composed

-- | Logical NOT
Not :: Composed -> Composed

-- | Empty query
Empty :: Composed

-- | User requests help
HelpC :: Composed
is :: Functor f => t -> f a -> f (t, a)
showDate :: (DateType, DateTime) -> String
showDates :: [Maybe (DateType, DateTime)] -> String
instance Typeable TodoItem
instance Eq DateType
instance Eq TodoItem
instance Data TodoItem
instance Eq Limit
instance Show Limit
instance Eq QueryFlag
instance Ord QueryFlag
instance Show QueryFlag
instance Eq LimitFlag
instance Show LimitFlag
instance Eq ModeFlag
instance Ord ModeFlag
instance Show ModeFlag
instance Eq SortingType
instance Ord SortingType
instance Show SortingType
instance Eq OutFlag
instance Ord OutFlag
instance Show OutFlag
instance Eq CmdLineFlag
instance Show CmdLineFlag
instance Eq TodoCommand
instance Show TodoCommand
instance Eq Composed
instance Show Composed
instance Ord TodoItem
instance Show TodoItem
instance Ord a => Ord (Tree a)
instance Ord Limit
instance Hashable TodoItem
instance Show DateType


-- | Operations with dates
module Todos.Dates

-- | Parse date/time
parseDate :: DateTime -> String -> Either ParseError DateTime

-- | Get current date and time.
getCurrentDateTime :: IO DateTime

-- | Parse set of dates with types (in parenthesis)
pSpecDates :: DateTime -> Parsec String st [(DateType, DateTime)]


-- | This module contains data type for storing HSV color, used in DOT
--   output, and some default functions to calculate items' colors.
module Todos.Dot.Color

-- | Hue, saturation and value; all are in [0; 1] range.
data HSV
HSV :: Double -> Double -> Double -> HSV
colorHue :: HSV -> Double
colorSaturation :: HSV -> Double
colorValue :: HSV -> Double

-- | Correspondence between console colors and HSV colors
consoleColors :: [((ColorIntensity, Color), HSV)]

-- | Get console color which is nearest to given HSV color
consoleColor :: HSV -> (ColorIntensity, Color)

-- | Hue values for some common tags
tagHues :: Map String Double
hashAsDouble :: Hashable a => a -> Double

-- | Get color hue from tag name
tagHue :: String -> Double

-- | Color saturation values for some common statuses
statusSats :: Map String Double

-- | Get color saturation from item status
statusSat :: String -> Double

-- | Color hue values for some common item statuses
statusHues :: Map String Double

-- | Get color hue from item status
statusHue :: String -> Double

-- | Get console color for item status
statusColor :: String -> (ColorIntensity, Color)

-- | Get console color for item name (this is const Nothing)
defItemConsoleColor :: TodoItem -> Maybe (ColorIntensity, Color)

-- | Get color for item (this is used in DOT output)
getColor :: TodoItem -> HSV
instance Eq HSV
instance Show HSV


-- | Support for DOT node shapes
module Todos.Dot.Shapes

-- | Supported node shapes for DOT output
data Shape
Box :: Shape
Box3D :: Shape
Component :: Shape
Square :: Shape
MSquare :: Shape
Ellipse :: Shape
Diamond :: Shape
MDiamond :: Shape
Circle :: Shape
DCircle :: Shape
MCircle :: Shape
Note :: Shape
Parallelogram :: Shape
Tab :: Shape
Folder :: Shape
Polygon :: Int -> Shape
Point :: Shape
Egg :: Shape

-- | Inverted?
Triangle :: Bool -> Shape
PlainText :: Shape

-- | Inverted?
Trapezium :: Bool -> Shape

-- | Inverted?
House :: Bool -> Shape
Pentagon :: Shape
Hexagon :: Shape
Septagon :: Shape

-- | Simple, double, triple?
Octagon :: Int -> Shape

-- | Node shapes for some common item statuses
shapes :: Map String Shape

-- | Get item shape for this item (default funciton)
getShape :: TodoItem -> Shape
instance Eq Shape
instance Show Shape


-- | Output TODOs tree as DOT graph
module Todos.Dot.Render

-- | Return DOT output for Todos
showAsDot :: (TodoItem -> HSV) -> (TodoItem -> Shape) -> [Todo] -> String
instance Eq Subgraph
instance Show Dot


-- | Todos.Dot.* modules implement output of TODOs trees as DOT graph
module Todos.Dot

module Todos.Config

-- | Any user-specified runtime config type should belong to this class
class RuntimeConfig c
getPredicate :: RuntimeConfig c => DateTime -> c -> (TodoItem -> 𝔹)
toBaseConfig :: RuntimeConfig c => c -> BaseConfig

-- | Any user-specified runtime config type should include at least this
--   properties
data BaseConfig
BConfig :: 𝔹 -> 𝔹 -> 𝔹 -> 𝔹 -> SortingType -> Limit -> Limit -> TodoCommand -> Maybe String -> String -> String -> 𝔹 -> 𝔹 -> 𝔹 -> 𝔹 -> Maybe String -> Maybe String -> BaseConfig

-- | Output only first matching entry
outOnlyFirst :: BaseConfig -> 𝔹

-- | Show colored output
outColors :: BaseConfig -> 𝔹

-- | Show IDs
outIds :: BaseConfig -> 𝔹

-- | Highlight matching items
outHighlight :: BaseConfig -> 𝔹

-- | How to sort items
sorting :: BaseConfig -> SortingType
pruneL :: BaseConfig -> Limit
minL :: BaseConfig -> Limit
commandToRun :: BaseConfig -> TodoCommand

-- | Nothing — use default parser, Just p — use alternate parser with
--   prefix «p»
prefix :: BaseConfig -> Maybe String
outputFormat :: BaseConfig -> String

-- | String to use for output tree indenting (two spaces by default)
indentString :: BaseConfig -> String

-- | Skip status field in input
skipStatus :: BaseConfig -> 𝔹
groupByFile :: BaseConfig -> 𝔹
groupByTag :: BaseConfig -> 𝔹
groupByStatus :: BaseConfig -> 𝔹
forcedStatus :: BaseConfig -> Maybe String
topStatus :: BaseConfig -> Maybe String

-- | Configuration for console output. Is generated in runtime from
--   TodosConfig and Config.
data PrintConfig c
PConfig :: c -> (String -> (ColorIntensity, Color)) -> (TodoItem -> Maybe (ColorIntensity, Color)) -> (ColorIntensity, Color) -> (TodoItem -> 𝔹) -> PrintConfig c
printConfig :: PrintConfig c -> c

-- | Color of status field from status
printStatusColor :: PrintConfig c -> String -> (ColorIntensity, Color)

-- | Color of item name
printItemColor :: PrintConfig c -> TodoItem -> Maybe (ColorIntensity, Color)

-- | Color to use for highlighting
printHighlightColor :: PrintConfig c -> (ColorIntensity, Color)

-- | Whether to highlight given item
doHighlight :: PrintConfig c -> TodoItem -> 𝔹

-- | User Todos config. User can specify it in
--   <tt>~<i>.config</i>todos/todos.hs</tt>.
data TodosConfig c
Todos :: (DateTime -> c -> [String] -> CmdLineParseResult c) -> (DateTime -> c -> [Todo] -> [Todo]) -> (String -> (ColorIntensity, Color)) -> (TodoItem -> Maybe (ColorIntensity, Color)) -> (ColorIntensity, Color) -> (TodoItem -> HSV) -> (TodoItem -> Shape) -> (PrintConfig c -> [Todo] -> IO ()) -> c -> TodosConfig c

-- | Function to parse command line
parseCommandLine :: TodosConfig c -> DateTime -> c -> [String] -> CmdLineParseResult c

-- | Any function to be run to transform read TODOs tree
filterTodos :: TodosConfig c -> DateTime -> c -> [Todo] -> [Todo]

-- | Function to select a color of item's status field in console output
statusConsoleColor :: TodosConfig c -> String -> (ColorIntensity, Color)

-- | Function to select a color of item's name in console output
itemConsoleColor :: TodosConfig c -> TodoItem -> Maybe (ColorIntensity, Color)

-- | Color to use for highlighting
highlightColor :: TodosConfig c -> (ColorIntensity, Color)

-- | Function to select color for item's node in DOT output
itemColor :: TodosConfig c -> TodoItem -> HSV

-- | Function to select shape for item's node in DOT output
itemShape :: TodosConfig c -> TodoItem -> Shape

-- | Any function to output TODOs list
printTodos :: TodosConfig c -> PrintConfig c -> [Todo] -> IO ()

-- | Default Config (to be used without any options in command line and
--   configs)
nullConfig :: TodosConfig c -> c

-- | Result of parsing command line
data CmdLineParseResult c

-- | Parsed successfully, got Config and list of source files
Parsed :: c -> [FilePath] -> CmdLineParseResult c

-- | Some error occured
ParseError :: String -> CmdLineParseResult c

-- | User asked for help
CmdLineHelp :: CmdLineParseResult c

-- | ask field from BaseConfig
askBase :: RuntimeConfig c => (BaseConfig -> a) -> Reader c a
instance Eq BaseConfig
instance Show BaseConfig
instance Eq c => Eq (CmdLineParseResult c)
instance Show c => Show (CmdLineParseResult c)


-- | This module contains declaration of DefaultConfig data type, which is
--   used by default to store runtime config.
module Todos.Default.Config

-- | Default runtime configuration type. Is read from command line and
--   configs.
data DefaultConfig
DConfig :: BaseConfig -> Composed -> DefaultConfig
baseConfig :: DefaultConfig -> BaseConfig
query :: DefaultConfig -> Composed
instance Eq DefaultConfig
instance Show DefaultConfig

module Todos.Formatters

-- | Item which could be printed to the console
data OutItem
OutString :: String -> OutItem
OutSetColor :: ColorIntensity -> Color -> OutItem
SetBold :: OutItem
ResetAll :: OutItem

-- | Produce a list of OutItem's depending on PrintConfig
type Formatter c = Reader (PrintConfig c) [OutItem]

-- | Print OutItem to console
outItem :: OutItem -> IO ()

-- | Empty Formatter
startFormat :: Formatter c

-- | Output new line
newLine :: Formatter c

-- | Similar to Show, but output can depend on PrintConfig
class ConfigShow c s
configShow :: ConfigShow c s => s -> Formatter c
class ConfigAdd c a
(<++>) :: ConfigAdd c a => Formatter c -> a -> Formatter c
instance Show OutItem
instance RuntimeConfig (PrintConfig c) => ConfigShow c TodoItem
instance ConfigShow c (Formatter c)
instance ConfigShow c String
instance ConfigAdd c String
instance ConfigAdd c (Formatter c)

module Todos.CommandParser

-- | Format item info
printfItem :: String -> TodoItem -> String

module Todos.Tree
delTag :: String -> [Todo] -> [Todo]
addTag :: String -> [Todo] -> [Todo]
mapTags :: ([String] -> [String]) -> [Todo] -> [Todo]

-- | Flattern the tree
flattern :: [Todo] -> [Todo]
pruneSelector :: BaseConfig -> (TodoItem -> 𝔹) -> (Todo -> [Todo])

-- | Check if item has given tag | Check if item has given tag
tagPred :: String -> TodoItem -> 𝔹

-- | Check if item has given status
statusPred :: String -> TodoItem -> 𝔹

-- | Check if item's title matches to given regexp
grepPred :: String -> TodoItem -> 𝔹

-- | Check if item's description matches to given regexp
descPred :: String -> TodoItem -> 𝔹
datePred :: Ord a => (t -> Maybe a) -> a -> a -> t -> 𝔹

-- | Check if item has given ID
idPred :: String -> TodoItem -> 𝔹

-- | Check if trees contain cycles
hasCycles :: Hashable a => [Tree a] -> 𝔹

-- | For each item in the tree, execute given monadic action (this is
--   similar to forM, but for trees instead of lists).
forT :: (Monad m, Eq t) => [Tree t] -> (t -> m a) -> m [b]

-- | Similar to map, but for trees instead of lists.
mapT :: (t -> t) -> [Tree t] -> [Tree t]
treeLines :: [Tree t] -> ℤ
enumerateTodos :: [Todo] -> [Todo]
itemByNumber :: [Todo] -> ℤ -> Maybe TodoItem
markLevels :: [Todo] -> [Todo]
spawn :: String -> TodoItem -> IO ()


-- | Module for parsing command line options and build queries. These
--   functions are used by default, but user can supply his own functions.
module Todos.Default.CmdLine

-- | Parse command line
parseCmdLine' :: DateTime -> [String] -> Either String (Options, [FilePath])

-- | For given list of glob masks, return list of matching files
glob :: [FilePath] -> IO [FilePath]

-- | Build DefaultConfig (with query etc) from Options
buildQuery :: BaseConfig -> Options -> DefaultConfig

-- | Compose predicate from Composed
compose :: DateTime -> Composed -> (TodoItem -> 𝔹)

-- | Usage help for default command line options
usage :: String


-- | This module contains instances of RuntimeConfig class for
--   DefaultConfig and PrintConfig
module Todos.Default.Instances
instance RuntimeConfig c => RuntimeConfig (PrintConfig c)
instance RuntimeConfig DefaultConfig


-- | This module implements printing TODOs tree to console. Here is default
--   function, but user can supply his own.
module Todos.Default.Print

-- | Default function to output TODOs to console
defaultPrintTodos :: PrintConfig DefaultConfig -> [Todo] -> IO ()

-- | Prepare TODOs for console output
showTodos :: [Todo] -> Formatter DefaultConfig


-- | This module contains some empty configs definitions and some function
--   fields of defaultConfig
module Todos.Default.Utils

-- | Empty BaseConfig
emptyBaseConfig :: BaseConfig

-- | Default empty DefaultConfig (nullConfig field of defaultConfig)
emptyConfig :: DefaultConfig

-- | Default Todos config
defaultConfig :: TodosConfig DefaultConfig

-- | Make a list transformer
composeAll :: DateTime -> DefaultConfig -> (Todo -> [Todo])

-- | Default filter for TODOs (filterTodos field of defaultConfig)
defaultTodosFilter :: DateTime -> DefaultConfig -> [Todo] -> [Todo]

-- | Parse command line (default function)
parseCmdLine :: DateTime -> DefaultConfig -> [String] -> CmdLineParseResult DefaultConfig

-- | Prepare PrintConfig for console output functions. Is called from
--   realTodos.
mkPrintConfig :: RuntimeConfig c => DateTime -> c -> TodosConfig c -> PrintConfig c


-- | Todos.Default.* modules contain implementation of RuntimeConfig
--   instance for DefaultConfig type.
module Todos.Default

module Todos.Parser

-- | Read list of TODO items from plain format
parsePlain :: BaseConfig -> DateTime -> SourceName -> String -> [TodoItem]

-- | Read list of TODO items from alternate format
parseAlternate :: BaseConfig -> Int -> String -> DateTime -> SourceName -> String -> [TodoItem]


-- | Read TODOs from files and construct corresponding ADTs.
module Todos.Loader

-- | Load list of TODO trees from files
loadTodo :: BaseConfig -> DateTime -> [FilePath] -> IO [Todo]

module Todos.Main

-- | Main function to run. User can specify TodosConfig with any runtime
--   config type. By default (in todos.hs) defaultConfig is used, which
--   uses DefaultConfig type.
todos :: RuntimeConfig c => TodosConfig c -> IO ()

module Todos

-- | Get current date and time.
getCurrentDateTime :: IO DateTime
