-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | serialisation for Haskell values with sharing support
--   
--   Efficient serialisation via annotated terms. Typeable Haskell values
--   may be converted to and from aterms.
@package aterm
@version 0.1.0.1


-- | Rather than using (slow, sequential) strings create (fast, tree-like)
--   documents and render them later as text for IO.
--   
--   A very simplified version of John Hughes's and Simon Peyton Jones's
--   Pretty Printer Combinators. Only catenable string sequences are left
--   over.
module ATerm.SimpPretty

-- | The abstract type of documents
data SDoc
empty :: SDoc
comma :: SDoc
text :: String -> SDoc
parens :: SDoc -> SDoc
brackets :: SDoc -> SDoc
braces :: SDoc -> SDoc
(<>) :: SDoc -> SDoc -> SDoc

-- | Renders the document as a string using the default style
render :: SDoc -> String
fullRender :: (String -> a) -> (a -> a -> a) -> SDoc -> a
writeFileSDoc :: FilePath -> SDoc -> IO ()
instance Show SDoc


-- | base64 character conversions
module ATerm.Base64
toBase64Int :: Char -> Int
toBase64Char :: Int -> Char
isBase64Char :: Char -> Bool
ord0 :: Int


-- | the data types <a>ShATerm</a> and <a>ATermTable</a> plus some
--   utilities
module ATerm.AbstractSyntax
data ShATerm
ShAAppl :: String -> [Int] -> [Int] -> ShATerm
ShAList :: [Int] -> [Int] -> ShATerm
ShAInt :: Integer -> [Int] -> ShATerm
data ATermTable
emptyATermTable :: ATermTable
addATerm :: ShATerm -> ATermTable -> (ATermTable, Int)
getATerm :: ATermTable -> ShATerm
toReadonlyATT :: ATermTable -> ATermTable
getTopIndex :: ATermTable -> Int
getATerm' :: Typeable t => Int -> ATermTable -> Maybe t
setATerm' :: Typeable t => Int -> t -> ATermTable -> ATermTable
getShATerm :: Int -> ATermTable -> ShATerm
data Key
getKey :: Key -> ATermTable -> IO (Maybe Int)
setKey :: Key -> Int -> ATermTable -> IO (ATermTable, Int)
mkKey :: Typeable a => a -> IO Key
getATermByIndex1 :: Int -> ATermTable -> ATermTable

-- | conversion of a string in double quotes to a character
str2Char :: String -> Char

-- | conversion of an unlimited integer to a machine int
integer2Int :: Integer -> Int
instance Show ShATerm
instance Eq ShATerm
instance Ord ShATerm
instance Eq EqKey


-- | the class <a>ShATermConvertible</a> depending on the class
--   <a>Typeable</a> for converting datatypes to and from <a>ShATerm</a>s
--   in <a>ATermTable</a>s, plus a couple of basic instances and utilities
module ATerm.Conversion
class Typeable t => ShATermConvertible t
toShATermAux :: ShATermConvertible t => ATermTable -> t -> IO (ATermTable, Int)
toShATermList' :: ShATermConvertible t => ATermTable -> [t] -> IO (ATermTable, Int)
fromShATermAux :: ShATermConvertible t => Int -> ATermTable -> (ATermTable, t)
fromShATermList' :: ShATermConvertible t => Int -> ATermTable -> (ATermTable, [t])
toShATerm' :: ShATermConvertible t => ATermTable -> t -> IO (ATermTable, Int)
fromShATerm' :: ShATermConvertible t => Int -> ATermTable -> (ATermTable, t)
fromShATermError :: String -> ShATerm -> a
instance ShATermConvertible a => ShATermConvertible (Set a)
instance ShATermConvertible a => ShATermConvertible (IntMap a)
instance (ShATermConvertible a, ShATermConvertible b) => ShATermConvertible (Map a b)
instance (ShATermConvertible a, ShATermConvertible b, ShATermConvertible c, ShATermConvertible d) => ShATermConvertible (a, b, c, d)
instance (ShATermConvertible a, ShATermConvertible b, ShATermConvertible c) => ShATermConvertible (a, b, c)
instance (ShATermConvertible a, ShATermConvertible b) => ShATermConvertible (a, b)
instance ShATermConvertible a => ShATermConvertible [a]
instance (ShATermConvertible a, ShATermConvertible b) => ShATermConvertible (Either a b)
instance ShATermConvertible a => ShATermConvertible (Maybe a)
instance ShATermConvertible ()
instance ShATermConvertible Char
instance ShATermConvertible Float
instance (ShATermConvertible a, Integral a) => ShATermConvertible (Ratio a)
instance ShATermConvertible Word8
instance ShATermConvertible Int
instance ShATermConvertible Integer
instance ShATermConvertible Bool


-- | conversion between shared and (basically unused) unshared
--   <a>ATerm</a>s
module ATerm.Unshared
data ATerm
AAppl :: String -> [ATerm] -> [ATerm] -> ATerm
AList :: [ATerm] -> [ATerm] -> ATerm
AInt :: Integer -> [ATerm] -> ATerm
fromATerm :: ShATermConvertible t => ATerm -> t
fromShATerm :: ShATermConvertible t => ATermTable -> t
getATermFull :: ATermTable -> ATerm
toATermTable :: ATerm -> ATermTable
instance Eq ATerm
instance Ord ATerm
instance Show ATerm


-- | Provides functions that calculate differences in unshared
--   <a>ATerm</a>s.
module ATerm.Diff

-- | all diferences between both terms are replaced by appropiate
--   placeholders (in <tt>&lt;&gt;</tt>) and the differing terms are added
--   to the list of ATerm as arguments to the function symbol
--   <tt>diff</tt>.
--   
--   /Note: this function ignores annotions and the resulting ATerm does
--   not contain any annotation!/
atDiff :: ATerm -> ATerm -> (ATerm, [ATerm])


-- | reexports the names needed for many <a>ShATermConvertible</a>
--   instances. For converting <a>ShATerm</a>s to and from <a>String</a>s
--   you'll need the module <a>ATerm.ReadWrite</a>.
--   
--   For more information on ATerms look under
--   <a>http://www.asfsdf.org</a>,
--   <a>http://www.asfsdf.org/Meta-Environment/ATerms</a>.
module ATerm.Lib
data ShATerm
ShAAppl :: String -> [Int] -> [Int] -> ShATerm
ShAList :: [Int] -> [Int] -> ShATerm
ShAInt :: Integer -> [Int] -> ShATerm
data ATermTable
addATerm :: ShATerm -> ATermTable -> (ATermTable, Int)
getShATerm :: Int -> ATermTable -> ShATerm
class Typeable t => ShATermConvertible t
toShATermAux :: ShATermConvertible t => ATermTable -> t -> IO (ATermTable, Int)
fromShATermAux :: ShATermConvertible t => Int -> ATermTable -> (ATermTable, t)
toShATerm' :: ShATermConvertible t => ATermTable -> t -> IO (ATermTable, Int)
fromShATerm' :: ShATermConvertible t => Int -> ATermTable -> (ATermTable, t)
fromShATermError :: String -> ShATerm -> a


-- | convert <a>ATermTable</a>s (created by
--   <tt>ATerm.Conversion.toATermTable</tt>) from <a>String</a>s and to
--   <a>SDoc</a>s as shared (TAF format) or unshared (AT format). Indices
--   (following hash marks) are base64 encoded.
module ATerm.ReadWrite

-- | create an ATerm table from an input string. Shared or unshared ATerms
--   can be read. A string for shared ATerms usually starts with an
--   exclamation mark and contains many hash marks indicating references.
--   Unshared ATerms are plain constructor terms.
readATerm :: String -> ATermTable
readATermFile :: FilePath -> IO ATermTable
writeSharedATerm :: ATermTable -> String
writeSharedATermFile :: FilePath -> ATermTable -> IO ()
writeATerm :: ATermTable -> String
writeATermFile :: FilePath -> ATermTable -> IO ()
writeSharedATermSDoc :: ATermTable -> SDoc
writeATermSDoc :: ATermTable -> SDoc
