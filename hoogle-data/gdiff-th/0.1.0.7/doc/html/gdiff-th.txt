-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generate gdiff GADTs and Instances.
--   
--   Generate gdiff GADTs and Instances.
--   
--   There are examples in the <tt>examples</tt> directory of the cabal
--   tarball. Also the main module includes an example in the
--   documentation.
--   
--   <ul>
--   <li>0.1.0.4 : Builds on GHC 7.6.1, 7.4.2, and 7.0.3</li>
--   <li>0.1.0.5 : Doc fixes.</li>
--   </ul>
@package gdiff-th
@version 0.1.0.7


-- | This module exports the Template Haskell functions necessary deriving
--   gdiff GADTs and associated instances. Usage is pretty straightforward.
--   
--   <pre>
--   module Example where
--   import <a>Data.Generic.Diff</a>  
--   import <a>Data.Generic.Diff.TH</a>  
--   import <a>System.Console.Terminfo.Color</a>
--   import <a>Text.PrettyPrint.Free</a>
--   import <a>System.Console.Terminfo.PrettyPrint</a>
--   
--   data Exp = Exp :+: Exp
--            | Exp :*: Exp
--            | B Integer
--            deriving(Show, Eq, Typeable)
--   
--   {- Make the GDiff apparatus -}
--   makeGDiff ''Exp
--   
--   testA :: Exp
--   testA = foldl1 (:+:) . map B $ [0..20]
--   
--   testB :: Exp
--   testB = foldl1 (:+:) . map B $ [0..8] ++ [42] ++ [10..20]
--   
--   {- Make a type signature to help inference -}
--   diffExp :: Type ExpFamily Exp =&gt; Exp -&gt; Exp -&gt; EditScript ExpFamily Exp Exp
--   diffExp = diff
--   
--   diffAandB = showCompressed $ diffExp testA testB  
--   
--   main = diffAandB
--   
--   {- Utility functions to show colored diffs -}
--   showEdits :: forall (f :: * -&gt; * -&gt; *) txs tys.
--                      EditScriptL f txs tys -&gt; IO ()
--   showEdits      = display . pprEdits 
--   
--   showCompressed :: Family f =&gt; EditScriptL f txs tys -&gt; IO ()
--   showCompressed = display . pprEdits . compress
--   
--   pprEdits :: EditScriptL f txs tys -&gt; TermDoc
--   pprEdits x = case x of 
--       Cpy c d   -&gt; (text $ string c) <a>+</a> pprEdits d
--       CpyTree d -&gt; text " ... "      <a>+</a> pprEdits d
--       Del c d   -&gt; (with (Foreground Red)   . text $ "- " ++ string c) <a>+</a> pprEdits d
--       Ins c d   -&gt; (with (Foreground Green) . text $ "+ " ++ string c) <a>+</a> pprEdits d
--       End       -&gt; line
--   </pre>
--   
--   Running the main function above would result in the following output
--   
--   <pre>
--   &gt;&gt;&gt; main
--   :+: :+: :+: :+: :+: :+: :+: :+: :+: :+: :+: :+:  ...  B + 42 - 9  ...   ...   ...   ...   ...   ...   ...   ...   ...   ...   ... 
--   </pre>
--   
--   Except with pretty colors :).
module Data.Generic.Diff.TH

-- | Create the GADT and instances for GDiff with the defaults
makeGDiff :: Name -> Q [Dec]

-- | Customizable creation.
makeGDiffWith :: String -> ConstructorRenamer -> [(Name, Exp)] -> Name -> Q [Dec]

-- | Default suffix for the family <a>Family</a>
defaultFamSuffix :: String

-- | Default constructor renamer. Using the family suffix, the name of the
--   constructor and the specialized type of constructor
defaultConstructorRenamer :: String -> Name -> Type -> Q Name

-- | Default primitives and expressions for showing them
defaultPrimitives :: [(Name, Exp)]

-- | The type of function used for naming the GADTs constructors
--   
--   Arg0 : The family suffix
--   
--   Arg1 : The name of the constructor
--   
--   Arg2 : The specialized type the constructor is from
type ConstructorRenamer = String -> Name -> Type -> Q Name
