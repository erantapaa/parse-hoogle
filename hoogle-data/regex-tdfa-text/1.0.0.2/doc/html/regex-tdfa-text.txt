-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Text interface for regex-tdfa
--   
--   This provides text interface for regex-tdfa.
--   
--   This should be part of regex-tdfa package. But my patches are not
--   accepted yet. So, I made a separate package. If you are interested in
--   my patches, see <a>http://hub.darcs.net/shelarcy/regex-base</a> and
--   <a>http://hub.darcs.net/shelarcy/regex-tdfa</a>.
@package regex-tdfa-text
@version 1.0.0.2


-- | This modules provides <a>RegexMaker</a> and <a>RegexLike</a> instances
--   for using <tt>Text</tt> with the TDFA backend
--   (<a>Text.Regex.TDFA.NewDFA.Engine</a> and
--   <a>Text.Regex.TDFA.NewDFA.Tester</a>).
--   
--   This exports instances of the high level API and the medium level API
--   of <a>compile</a>,<a>execute</a>, and <a>regexec</a>.
module Text.Regex.TDFA.Text.Lazy

-- | The TDFA backend specific <a>Regex</a> type, used by this module's
--   RegexOptions and RegexMaker
data Regex :: *

-- | Control whether the pattern is multiline or case-sensitive like
--   Text.Regex and whether to capture the subgroups (1, 2, etc). Controls
--   enabling extra anchor syntax.
data CompOption :: *
data ExecOption :: *
compile :: CompOption -> ExecOption -> Text -> Either String Regex
execute :: Regex -> Text -> Either String (Maybe MatchArray)
regexec :: Regex -> Text -> Either String (Maybe (Text, Text, Text, [Text]))
instance RegexLike Regex Text
instance RegexMaker Regex CompOption ExecOption Text
instance Uncons Text
instance RegexContext Regex Text Text
instance Extract Text


-- | This modules provides <a>RegexMaker</a> and <a>RegexLike</a> instances
--   for using <tt>Text</tt> with the TDFA backend
--   (<a>Text.Regex.TDFA.NewDFA.Engine</a> and
--   <a>Text.Regex.TDFA.NewDFA.Tester</a>).
--   
--   This exports instances of the high level API and the medium level API
--   of <a>compile</a>,<a>execute</a>, and <a>regexec</a>.
module Text.Regex.TDFA.Text

-- | The TDFA backend specific <a>Regex</a> type, used by this module's
--   RegexOptions and RegexMaker
data Regex :: *

-- | Control whether the pattern is multiline or case-sensitive like
--   Text.Regex and whether to capture the subgroups (1, 2, etc). Controls
--   enabling extra anchor syntax.
data CompOption :: *
data ExecOption :: *
compile :: CompOption -> ExecOption -> Text -> Either String Regex
execute :: Regex -> Text -> Either String (Maybe MatchArray)
regexec :: Regex -> Text -> Either String (Maybe (Text, Text, Text, [Text]))
instance RegexLike Regex Text
instance RegexMaker Regex CompOption ExecOption Text
instance RegexContext Regex Text Text
instance Uncons Text
instance Extract Text
