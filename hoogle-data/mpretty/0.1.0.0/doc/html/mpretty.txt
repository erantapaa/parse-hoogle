-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | a monadic, extensible pretty printing library
--   
--   based on wadler-leijen printing. supports ansi colors, configurable
--   list printing styles, and extension of the printing monad
@package mpretty
@version 0.1.0.0

module Text.MPretty.StateSpace
class Monoid out => PrettyOutput out
pString :: PrettyOutput out => String -> out
pLength :: PrettyOutput out => out -> Int
pFoldl :: PrettyOutput out => (a -> Char -> a) -> a -> out -> a
data Layout
Flat :: Layout
Break :: Layout
data Failure
Fail :: Failure
NoFail :: Failure
data Style
PreAlignStyle :: Style
PreSnugStyle :: Style
PostStyle :: Style
IndentStyle :: Style
data Buffering
Buffer :: Buffering
NoBuffer :: Buffering
data Direction
NoD :: Direction
LeftD :: Direction
RightD :: Direction
data Precedence
Precedence :: Int -> Direction -> Bool -> Precedence
pbump :: Precedence -> Precedence
data StyleOptions
StyleOptions :: Style -> Buffering -> Int -> StyleOptions
_styleL :: StyleOptions -> Style
_bufferingL :: StyleOptions -> Buffering
_indentWidthL :: StyleOptions -> Int
indentWidthL :: Lens StyleOptions Int
bufferingL :: Lens StyleOptions Buffering
styleL :: Lens StyleOptions Style
defaultPreOptions :: StyleOptions
defaultPostOptions :: StyleOptions
defaultIndentStyle :: StyleOptions
data Palette
Palette :: ConsoleState -> ConsoleState -> ConsoleState -> ConsoleState -> ConsoleState -> Palette
_punctuationColorL :: Palette -> ConsoleState
_literalColorL :: Palette -> ConsoleState
_binderColorL :: Palette -> ConsoleState
_keywordColorL :: Palette -> ConsoleState
_classifierColorL :: Palette -> ConsoleState
classifierColorL :: Lens Palette ConsoleState
keywordColorL :: Lens Palette ConsoleState
binderColorL :: Lens Palette ConsoleState
literalColorL :: Lens Palette ConsoleState
punctuationColorL :: Lens Palette ConsoleState
defaultPalette :: Palette
data PrettyEnv
PrettyEnv :: Int -> Double -> Int -> Layout -> Failure -> (Precedence, Precedence) -> StyleOptions -> Palette -> ConsoleState -> Bool -> PrettyEnv
_layoutWidthL :: PrettyEnv -> Int
_ribbonRatioL :: PrettyEnv -> Double
_nestingL :: PrettyEnv -> Int
_layoutL :: PrettyEnv -> Layout
_failureL :: PrettyEnv -> Failure
_precedenceL :: PrettyEnv -> (Precedence, Precedence)
_styleOptionsL :: PrettyEnv -> StyleOptions
_paletteL :: PrettyEnv -> Palette
_consoleStateL :: PrettyEnv -> ConsoleState
_doConsoleL :: PrettyEnv -> Bool
doConsoleL :: Lens PrettyEnv Bool
consoleStateL :: Lens PrettyEnv ConsoleState
paletteL :: Lens PrettyEnv Palette
styleOptionsL :: Lens PrettyEnv StyleOptions
precedenceL :: Lens PrettyEnv (Precedence, Precedence)
failureL :: Lens PrettyEnv Failure
layoutL :: Lens PrettyEnv Layout
nestingL :: Lens PrettyEnv Int
ribbonRatioL :: Lens PrettyEnv Double
layoutWidthL :: Lens PrettyEnv Int
defaultPrettyEnv :: PrettyEnv
data PrettyState
PrettyState :: Int -> Int -> PrettyState
_columnL :: PrettyState -> Int
_ribbonL :: PrettyState -> Int
ribbonL :: Lens PrettyState Int
columnL :: Lens PrettyState Int
defaultPrettyState :: PrettyState
type MonadRWS env out state m = (MonadReader env m, MonadWriter out m, MonadState state m)
type MonadPretty env out state m = (MonadRWS env out state m, MonadPlus m, HasLens env PrettyEnv, PrettyOutput out, HasLens state PrettyState)
instance HasLens PrettyState PrettyState
instance Eq PrettyState
instance Ord PrettyState
instance Show PrettyState
instance HasLens PrettyEnv PrettyEnv
instance Eq PrettyEnv
instance Show PrettyEnv
instance Eq Palette
instance Ord Palette
instance Show Palette
instance Eq Layout
instance Ord Layout
instance Show Layout
instance Enum Layout
instance Eq Failure
instance Ord Failure
instance Show Failure
instance Enum Failure
instance Eq Style
instance Ord Style
instance Show Style
instance Enum Style
instance Eq Buffering
instance Ord Buffering
instance Show Buffering
instance Enum Buffering
instance Eq Direction
instance Show Direction
instance Enum Direction
instance Eq Precedence
instance Show Precedence
instance Eq StyleOptions
instance Ord StyleOptions
instance Show StyleOptions
instance PartialOrder Precedence
instance PartialOrder Direction
instance PrettyOutput Text
instance PrettyOutput String

module Text.MPretty.MonadPretty
text :: MonadPretty env out state m => out -> m ()
string :: MonadPretty env out state m => String -> m ()
space :: MonadPretty env out state m => Int -> m ()
tryFlat :: MonadPretty env out state m => m a -> m a -> m a
hardLine :: MonadPretty env out state m => m ()
flatFail :: MonadPretty env out state m => m a -> m a
nest :: MonadPretty env out state m => Int -> m a -> m a
group :: MonadPretty env out state m => m a -> m a
align :: MonadPretty env out state m => m a -> m a
hang :: MonadPretty env out state m => Int -> m a -> m a
precedence :: MonadPretty env out state m => (Precedence, Precedence) -> m a -> m a
style :: MonadPretty env out state m => Style -> m a -> m a
buffering :: MonadPretty env out state m => Buffering -> m a -> m a
doConsole :: MonadPretty env out state m => Bool -> m a -> m a
layoutWidth :: MonadPretty env out state m => Int -> m a -> m a
indentWidth :: MonadPretty env out state m => Int -> m a -> m a
buffer :: MonadPretty env out state m => m a -> m a
noBuffer :: MonadPretty env out state m => m a -> m a
console :: MonadPretty env out state m => m a -> m a
noConsole :: MonadPretty env out state m => m a -> m a
closedPrecedence :: Int -> (Precedence, Precedence)
getBuff :: MonadPretty env out state m => m out
dropIndent :: MonadPretty env out state m => m () -> m ()
encloseSepPre :: MonadPretty env out state m => out -> out -> out -> Bool -> [m ()] -> m ()
encloseSepPost :: MonadPretty env out state m => out -> out -> out -> [m ()] -> m ()
encloseSepIndent :: MonadPretty env out state m => out -> out -> out -> [m ()] -> m ()
encloseSep :: MonadPretty env out state m => out -> out -> out -> [m ()] -> m ()
encloseSepDropIndent :: MonadPretty env out state m => out -> out -> out -> [m ()] -> m ()
infixOp :: MonadPretty env out state m => Direction -> Int -> Buffering -> m () -> m () -> m () -> m ()
hsep :: MonadPretty env out state m => [m ()] -> m ()
vsep :: MonadPretty env out state m => [m ()] -> m ()
parenthesize :: MonadPretty env out state m => m () -> m ()
sexpListCons :: MonadPretty env out state m => [m ()] -> Maybe (m ()) -> m ()
sexpList :: MonadPretty env out state m => [m ()] -> m ()
showStyle :: MonadPretty env out state m => m a -> m a
emitConsoleStateCodes :: MonadPretty env out state m => m ()
localConsole :: MonadPretty env out state m => (ConsoleState -> ConsoleState) -> m a -> m a
intensity :: MonadPretty env out state m => ConsoleIntensity -> m a -> m a
italicized :: MonadPretty env out state m => Bool -> m a -> m a
underlining :: MonadPretty env out state m => Underlining -> m a -> m a
blinkSpeed :: MonadPretty env out state m => BlinkSpeed -> m a -> m a
visible :: MonadPretty env out state m => Bool -> m a -> m a
swapFgBg :: MonadPretty env out state m => Bool -> m a -> m a
gcolor :: MonadPretty env out state m => ConsoleLayer -> ColorIntensity -> Color -> m a -> m a
color :: MonadPretty env out state m => ColorIntensity -> Color -> m a -> m a
localStyle :: MonadPretty env out state m => Lens Palette ConsoleState -> m a -> m a
punctuation :: MonadPretty env out state m => m a -> m a
literal :: MonadPretty env out state m => m a -> m a
binder :: MonadPretty env out state m => m a -> m a
keyword :: MonadPretty env out state m => m a -> m a
classifier :: MonadPretty env out state m => m a -> m a
styleVariants :: MonadPretty env out state m => m () -> m ()

module Text.MPretty.Pretty
newtype Pretty a
Pretty :: RWST PrettyEnv Text PrettyState [] a -> Pretty a
unPretty :: Pretty a -> RWST PrettyEnv Text PrettyState [] a
runPretty :: Pretty a -> PrettyEnv -> PrettyState -> [(a, PrettyState, Text)]
execPretty :: Pretty () -> Text
instance Monad Pretty
instance MonadReader PrettyEnv Pretty
instance MonadWriter Text Pretty
instance MonadState PrettyState Pretty
instance MonadPlus Pretty

module Text.MPretty.IsPretty
class IsPretty t where prettyDropIndent = dropIndent . pretty prettyList = encloseSep (pString "[") (pString "]") (pString ",") . map pretty prettyDropIndentList = encloseSepDropIndent (pString "[") (pString "]") (pString ",") . map pretty
pretty :: (IsPretty t, MonadPretty env out state m) => t -> m ()
prettyDropIndent :: (IsPretty t, MonadPretty env out state m) => t -> m ()
prettyList :: (IsPretty t, MonadPretty env out state m) => [t] -> m ()
prettyDropIndentList :: (IsPretty t, MonadPretty env out state m) => [t] -> m ()
prettyMapping :: (MonadPretty env out state m, IsPretty k, IsPretty v) => (k, v) -> m ()
showFromPretty :: IsPretty a => a -> String
ipPrint :: IsPretty a => a -> IO ()
ipPrintLn :: IsPretty a => a -> IO ()
instance (IsPretty k, IsPretty v) => IsPretty (Map k v)
instance IsPretty a => IsPretty (Set a)
instance IsPretty a => IsPretty [a]
instance (IsPretty a, IsPretty b, IsPretty c, IsPretty d) => IsPretty (a, b, c, d)
instance (IsPretty a, IsPretty b, IsPretty c) => IsPretty (a, b, c)
instance (IsPretty a, IsPretty b) => IsPretty (a, b)
instance IsPretty ()
instance IsPretty Char
instance IsPretty Double
instance IsPretty Integer
instance IsPretty Int
instance IsPretty Bool

module Text.MPretty
