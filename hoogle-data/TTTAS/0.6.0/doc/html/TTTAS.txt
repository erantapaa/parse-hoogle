-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Typed Transformations of Typed Abstract Syntax
--   
@package TTTAS
@version 0.6.0


-- | Library for Typed Transformations of Typed Abstract Syntax.
--   
--   The library is documented in the paper: <i>Typed Transformations of
--   Typed Abstract Syntax</i>
--   
--   Bibtex entry:
--   <a>http://www.cs.uu.nl/wiki/bin/viewfile/Center/TTTAS?rev=1;filename=TTTAS.bib</a>
--   
--   For more documentation see the TTTAS webpage:
--   <a>http://www.cs.uu.nl/wiki/bin/view/Center/TTTAS</a>.
module Language.AbstractSyntax.TTTAS.Common

-- | The <a>Ref</a> type for represents typed indices which are labeled
--   with both the type of value to which they refer and the type of the
--   environment (a nested Cartesian product, growing to the right) in
--   which this value lives. The constructor <a>Zero</a> expresses that the
--   first element of the environment has to be of type <tt>a</tt>. The
--   constructor <a>Suc</a> does not care about the type of the first
--   element in the environment, being polymorphic in the type <tt>b</tt>.
data Ref a env
Zero :: Ref a (env', a)
Suc :: Ref a env' -> Ref a (env', b)

-- | The <a>Equal</a> type encodes type equality.
data Equal :: * -> * -> *
Eq :: Equal a a

-- | The function <a>match</a> compares two references for equality. If
--   they refer to the same element in the environment the value <tt>Just
--   Eq</tt> is returned, expressing the fact that the types of the
--   referred values are the same too.
match :: Ref a env -> Ref b env -> Maybe (Equal a b)

-- | The function <a>lookup</a> returns the element indexed in the
--   environment parameter by the <a>Ref</a> parameter. The types guarantee
--   that the lookup succeeds.
lookup :: Ref a env -> env -> a

-- | The function <a>update</a> takes an additional function as argument,
--   which is used to update the value the reference addresses.
update :: (a -> a) -> Ref a env -> env -> env

-- | The type <tt>Env term use def</tt> represents a sequence of
--   instantiations of type <tt>forall a. term a use</tt>, where all the
--   instances of <tt>a</tt> are stored in the type parameter <tt>def</tt>.
--   The type <tt>use</tt> is a sequence containing the types to which may
--   be referred from within terms of type <tt>term a use</tt>.
data Env term use def
Empty :: Env t use ()
Ext :: Env t use def' -> t a use -> Env t use (def', a)

-- | When the types <tt>def</tt> and <tt>use</tt> of an <a>Env</a>
--   coincide, we can be sure that the references in the terms do not point
--   to values outside the environment but point to terms representing the
--   right type. This kind of environment is the <i>final environment</i>
--   of a transformation.
type FinalEnv t usedef = Env t usedef usedef

-- | The type <a>T</a> encodes a <a>Ref</a>-transformer. It is usually used
--   to transform references from an actual environment to the final one.
newtype T e s
T :: (forall x. Ref x e -> Ref x s) -> T e s
unT :: T e s -> forall x. Ref x e -> Ref x s
lookupEnv :: Ref a env -> Env t s env -> t a s
updateEnv :: (t a s -> t a s) -> Ref a env -> Env t s env -> Env t s env
data Unit s
Unit :: Unit s

-- | The type <a>Result</a> is the type of the result of "running" a
--   <tt>Trafo</tt>. Because <tt>s</tt> could be anything we have to hide
--   it using existential quantification.
data Result m t b
Result :: (m s) -> (b s) -> (FinalEnv t s) -> Result m t b


-- | Library for Typed Transformations of Typed Abstract Syntax.
--   
--   The library is documented in the paper: <i>Typed Transformations of
--   Typed Abstract Syntax</i>
--   
--   Bibtex entry:
--   <a>http://www.cs.uu.nl/wiki/bin/viewfile/Center/TTTAS?rev=1;filename=TTTAS.bib</a>
--   
--   For more documentation see the TTTAS webpage:
--   <a>http://www.cs.uu.nl/wiki/bin/view/Center/TTTAS</a>.
--   
--   For an example see examples/CSE2.hs
--   
--   IMPORTANT: We would like to be able to use RebinadbleSyntax to use
--   Arrow's Syntax in this variant of TTTAS, but this extension still
--   doesn't work well with Arrows.
module Language.AbstractSyntax.TTTAS2

-- | Alternative version of <a>Trafo</a> where the universal quantification
--   over |s| is moved inside the quantification over |env2|. Note that the
--   type variables |a| and |b| are now labelled with |s|, and hence have
--   kind |(* -&gt; *)|.
data Trafo m t a b
Trafo :: (forall env1. m env1 -> TrafoE m t env1 a b) -> Trafo m t a b
data TrafoE m t env1 a b
TrafoE :: (m env2) -> (forall s. a s -> T env2 s -> Env t s env1 -> FinalEnv t s -> (b s, T env1 s, Env t s env2, FinalEnv t s)) -> TrafoE m t env1 a b

-- | The Trafo2 <tt>newSRef2</tt> takes a typed term as input, adds it to
--   the environment and yields a reference pointing to this value. No
--   meta-information on the environment is recorded by <tt>newSRef2</tt>;
--   therefore we use the type <a>Unit</a> for the meta-data.
newSRef :: Trafo Unit t (t a) (Ref a)

-- | The function <a>extEnv</a> returns a <a>TrafoE</a> that extends the
--   current environment.
extEnv :: m (e, a) -> TrafoE m t e (t a) (Ref a)

-- | The function <a>castSRef</a> returns a <a>TrafoE</a> that casts the
--   reference passed as parameter (in the constructed environment) to one
--   in the final environment.
castSRef :: m e -> Ref a e -> TrafoE m t e x (Ref a)

-- | The function <a>updateSRef</a> returns a <a>TrafoE</a> that updates
--   the value pointed by the reference passed as parameter into the
--   current environment.
updateSRef :: m e -> Ref a e -> FUpd i t a -> TrafoE m t e (SI i) (Ref a)

-- | Return as output the final environment.
getFinalEnv :: Trafo m t Unit (FinalEnv2 t)

-- | Change the final environment by the one passed in the input.
putFinalEnv :: Trafo m t (FinalEnv2 t) Unit

-- | The function <a>updateFinalEnv</a> returns a <a>Trafo</a> that
--   introduces a function (<tt>(UpdFinalEnv t)</tt>) to update the final
--   environment.
updateFinalEnv :: Trafo m t (UpdFinalEnv t) Unit

-- | The function <a>runTrafo</a> takes as arguments the <a>Trafo</a> we
--   want to run, meta-information for the empty environment, and an input
--   value. The result of <a>runTrafo</a> (type <a>Result</a>) is the final
--   environment (<tt>Env t s s</tt>) together with the resulting meta-data
--   (<tt>m s</tt>), and the output value (<tt>b s</tt>). The rank-2 type
--   for <tt>runTrafo2</tt> ensures that transformation steps cannot make
--   any assumptions about the type of final environment (<tt>s</tt>). It
--   is an alternative version of <a>runTrafo</a> which does not use
--   <tt>unsafeCoerce</tt>.
runTrafo :: Trafo m t a b -> m () -> (forall s. a s) -> Result m t b
newtype Pair a b s
P :: (a s, b s) -> Pair a b s
class Category2 arr => Arrow2 (arr :: (* -> *) -> (* -> *) -> *)
arr :: Arrow2 arr => (forall s. a s -> b s) -> arr a b
first :: Arrow2 arr => arr a b -> arr (Pair a c) (Pair b c)
second :: Arrow2 arr => arr a b -> arr (Pair c a) (Pair c b)
(***) :: Arrow2 arr => arr a b -> arr a' b' -> arr (Pair a a') (Pair b b')
(&&&) :: Arrow2 arr => arr a b -> arr a b' -> arr a (Pair b b')
class Arrow2 arr => ArrowLoop2 arr
loop :: ArrowLoop2 arr => arr (Pair a c) (Pair b c) -> arr a b
(>>>) :: Category2 cat => cat a b -> cat b c -> cat a c
newtype List a s
List :: [a s] -> List a s

-- | The combinator <tt>sequenceA2</tt> sequentially composes a list of
--   <tt>Trafo2</tt>s into a <tt>Trafo2</tt> that yields a <a>List</a> of
--   outputs. Its use is analogous to the combinator <a>sequence</a>
--   combinator for <a>Monad</a>s.
sequenceA :: [Trafo m t a b] -> Trafo m t a (List b)
returnA :: Arrow2 arr => arr a a
instance ArrowLoop2 (Trafo m t)
instance Arrow2 (Trafo m t)
instance Category2 (Trafo m t)


-- | Library for Typed Transformations of Typed Abstract Syntax.
--   
--   The library is documented in the paper: <i>Typed Transformations of
--   Typed Abstract Syntax</i>
--   
--   Bibtex entry:
--   <a>http://www.cs.uu.nl/wiki/bin/viewfile/Center/TTTAS?rev=1;filename=TTTAS.bib</a>
--   
--   For more documentation see the TTTAS webpage:
--   <a>http://www.cs.uu.nl/wiki/bin/view/Center/TTTAS</a>.
--   
--   For an example see examples/CSE1.hs
module Language.AbstractSyntax.TTTAS

-- | The type <a>Trafo</a> is the type of the transformation steps on a
--   heterogeneous collection. The argument <tt>m</tt> stands for the type
--   of the meta-data. A |Trafo| takes the meta-data on the current
--   environment |env1| as input and yields meta-data for the (possibly
--   extended) environment |env2|. The type <tt>t</tt> is the type of the
--   terms stored in the environment. The type variable <tt>s</tt>
--   represents the type of the final result, which we do expose. Its role
--   is similar to the <tt>s</tt> in the type <tt>ST s a</tt>. The
--   arguments <tt>a</tt> and <tt>b</tt> are the Arrow's input and output,
--   respectively.
data Trafo m t s a b
Trafo :: (forall env1. m env1 -> TrafoE m t s env1 a b) -> Trafo m t s a b

-- | The type <a>TrafoE</a> is used to introduce an existential quantifier
--   into the definition of <a>Trafo</a>. It can be seen that a
--   <a>Trafo</a> is a function taking as arguments: the input
--   (<tt>a</tt>), a <a>Ref</a>-transformer (<tt>T env2 s</tt>) from the
--   environment constructed in this step to the final environment, the
--   environment (<tt>Env t s env1</tt>) where the current transformation
--   starts and the "final environment" (<tt>FinalEnv t s</tt>) with the
--   updates thus far applied. The function returns: the output
--   (<tt>b</tt>), a <a>Ref</a>-transformer (<tt>T env1 s</tt>) from the
--   initial environment of this step to the final environment, the
--   environment (<tt>Env t s env2</tt>) constructed in this step and the
--   final environment (<tt>FinalEnv t s</tt>) possibly updated.
data TrafoE m t s env1 a b
TrafoE :: (m env2) -> (a -> T env2 s -> Env t s env1 -> FinalEnv t s -> (b, T env1 s, Env t s env2, FinalEnv t s)) -> TrafoE m t s env1 a b

-- | The Trafo <a>newSRef</a> takes a typed term as input, adds it to the
--   environment and yields a reference pointing to this value. No
--   meta-information on the environment is recorded by <a>newSRef</a>;
--   therefore we use the type <a>Unit</a> for the meta-data.
newSRef :: Trafo Unit t s (t a s) (Ref a s)

-- | The function <a>extEnv</a> returns a <a>TrafoE</a> that extends the
--   current environment.
extEnv :: m (e, a) -> TrafoE m t s e (t a s) (Ref a s)

-- | The function <a>castSRef</a> returns a <a>TrafoE</a> that casts the
--   reference passed as parameter (in the constructed environment) to one
--   in the final environment.
castSRef :: m e -> Ref a e -> TrafoE m t s e x (Ref a s)

-- | The function <a>updateSRef</a> returns a <a>TrafoE</a> that updates
--   the value pointed by the reference passed as parameter into the
--   current environment.
updateSRef :: m e -> Ref a e -> (i -> t a s -> t a s) -> TrafoE m t s e i (Ref a s)

-- | Return as output the final environment.
getFinalEnv :: Trafo m t s () (FinalEnv t s)

-- | Change the final environment by the one passed in the input.
putFinalEnv :: Trafo m t s (FinalEnv t s) ()

-- | The function <a>updateFinalEnv</a> returns a <a>Trafo</a> that updates
--   the final environment using the input function (<tt>FinalEnv t s -&gt;
--   FinalEnv t s</tt>).
updateFinalEnv :: Trafo m t s (FinalEnv t s -> FinalEnv t s) ()

-- | The function <a>runTrafo</a> takes as arguments the <a>Trafo</a> we
--   want to run, meta-information for the empty environment, and an input
--   value. The result of <a>runTrafo</a> (type <a>Result</a>) is the final
--   environment (<tt>Env t s s</tt>) together with the resulting meta-data
--   (<tt>m s</tt>), and the output value (<tt>b s</tt>). The rank-2 type
--   for <a>runTrafo</a> ensures that transformation steps cannot make any
--   assumptions about the type of final environment (<tt>s</tt>).
runTrafo :: (forall s. Trafo m t s a (b s)) -> m () -> a -> Result m t b

-- | The combinator <a>sequenceA</a> sequentially composes a list of
--   <a>Trafo</a>s into a <a>Trafo</a> that yields a list of outputs. Its
--   use is analogous to the combinator <a>sequence</a> combinator for
--   <a>Monad</a>s.
sequenceA :: [Trafo m t s a b] -> Trafo m t s a [b]
instance ArrowLoop (Trafo m t s)
instance Arrow (Trafo m t s)
instance Category (Trafo m t s)
instance Functor (TrafoE m t s e a)
