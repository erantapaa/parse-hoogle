-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An HTTP Client based on Free Monads.
--   
--   `free-http` is an http-client based on Free Monads. `free-http`
--   exposes a Free Monad to express standard http verbs as well as several
--   backends to interpet programs written in the free monad using various
--   http clients (currently: a pure client, an `http-client`-backed
--   client, and a random client). Please see the ReadMe for usage.
@package free-http
@version 0.1.1.3


-- | Utilities for working with networking types
module Network.HTTP.Client.Free.Util

-- | set the method of a request, overriding the previous method.
setMethod :: StdMethod -> Request -> Request


-- | The primary Free Monad wrapping HTTP actions.
module Network.HTTP.Client.Free.Types

-- | type family to represent the request type foundation

-- | type family to represent the response type foundation

-- | Our functor from which the free-http free monad is generated from.
data HttpF client a
[HttpF] :: StdMethod -> (RequestType client) -> (ResponseType client -> a) -> HttpF client a

-- | a type alias for the free monad generated by <a>HttpF</a>
type FreeHttp client m a = FT (HttpF client) m a
instance Functor (HttpF client)


-- | An interpreter that fails randomly
module Network.HTTP.Client.Free.ArbitraryClient

-- | Peel a layer of the <a>HttpF</a> functor and generate a random
--   Response.
iterTHttp :: (r ~ ResponseType client, Arbitrary r, Monad m, MonadIO m) => HttpF client (m a) -> m a

-- | Peel a layer of the <a>HttpF</a> functor and generate a random
--   Response. This time the base monad is 't m'.
iterTMHttp :: (r ~ ResponseType client, Arbitrary r, Monad m, MonadIO m, MonadTrans t, Monad (t m)) => HttpF client (t m a) -> t m a

-- | The main http-client interpreter. The client is free to specify the
--   base effect monad so long as there is an instance of <a>MonadIO</a>
--   for it in scope.
runHttp :: (r ~ ResponseType client, Arbitrary r, Monad m, MonadIO m) => ignore -> FT (HttpF client) m a -> m a

-- | The main http-client interpreter. The client is free to specify the
--   base effect monad (<tt>m</tt>), and in thise case this the result can
--   be lifted into a higher monad transformer stack (<tt>t</tt>)
runTHttp :: (r ~ ResponseType client, Arbitrary r, Monad m, MonadIO m, MonadTrans t, Monad (t m)) => ignore -> FT (HttpF client) m a -> t m a


-- | An Interpreter with http-client as the foundation
module Network.HTTP.Client.Free.HttpClient

-- | <a>HttpClient</a> is an uninhabited type used to identify the
--   http-client based interpreter
data HttpClient

-- | The main http-client interpreter. The client is free to specify the
--   base effect monad so long as there is an instance of <a>MonadIO</a>
--   for it in scope.
runHttp :: (Request ~ RequestType client, Response ByteString ~ ResponseType client, Monad m, MonadIO m) => Manager -> FT (HttpF client) m a -> m a

-- | The main http-client interpreter. The client is free to specify the
--   base effect monad (<tt>m</tt>), and in thise case this the result can
--   be lifted into a higher monad transformer stack (<tt>t</tt>)
runTHttp :: (Request ~ RequestType client, Response ByteString ~ ResponseType client, Monad m, MonadIO m, MonadTrans t, Monad (t m)) => Manager -> FT (HttpF client) m a -> t m a


-- | A pure interepreter
module Network.HTTP.Client.Free.PureClient

-- | A pure interpreter based on a client-supplied mocking function
runHttp :: Monad m => (RequestType client -> ResponseType client) -> ignore -> FT (HttpF client) m a -> m a

-- | A pure interpreter based on a client-supplied mocking function. The
--   under- lying monad is `t m`, so computations will be lifted into `t
--   m`.
runTHttp :: (Monad m, MonadTrans t, Monad (t m)) => (RequestType client -> ResponseType client) -> ignore -> FT (HttpF client) m a -> t m a


-- | The primary Free Monad wrapping HTTP actions.
module Network.HTTP.Client.Free

-- | type family to represent the request type foundation

-- | type family to represent the response type foundation

-- | Our functor from which the free-http free monad is generated from.
data HttpF client a
[HttpF] :: StdMethod -> (RequestType client) -> (ResponseType client -> a) -> HttpF client a

-- | a type alias for the free monad generated by <a>HttpF</a>
type FreeHttp client m a = FT (HttpF client) m a
connect :: Monad m => RequestType client -> FT (HttpF client) m (ResponseType client)
delete :: Monad m => RequestType client -> FT (HttpF client) m (ResponseType client)
get :: Monad m => RequestType client -> FT (HttpF client) m (ResponseType client)
head :: Monad m => RequestType client -> FT (HttpF client) m (ResponseType client)
options :: Monad m => RequestType client -> FT (HttpF client) m (ResponseType client)
patch :: Monad m => RequestType client -> FT (HttpF client) m (ResponseType client)
post :: Monad m => RequestType client -> FT (HttpF client) m (ResponseType client)
put :: Monad m => RequestType client -> FT (HttpF client) m (ResponseType client)
trace :: Monad m => RequestType client -> FT (HttpF client) m (ResponseType client)
