-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | HTTP downloader tailored for web-crawler needs.
--   
@package http-conduit-downloader
@version 1.0.25


-- | HTTP downloader tailored for web-crawler needs.
--   
--   <ul>
--   <li>Handles all possible http-conduit exceptions and returns human
--   readable error messages.</li>
--   <li>Handles some web server bugs (returning <tt>deflate</tt> data
--   instead of <tt>gzip</tt>, invalid <tt>gzip</tt> encoding).</li>
--   <li>Uses OpenSSL instead of <tt>tls</tt> package (since <tt>tls</tt>
--   doesn't handle all sites).</li>
--   <li>Ignores invalid SSL sertificates.</li>
--   <li>Receives data in 32k chunks internally to reduce memory
--   fragmentation on many parallel downloads.</li>
--   <li>Download timeout.</li>
--   <li>Total download size limit.</li>
--   <li>Returns HTTP headers for subsequent redownloads and handles
--   <tt>Not modified</tt> results.</li>
--   <li>Can be used with external DNS resolver (hsdns-cache for
--   example).</li>
--   <li>Keep-alive connections pool (thanks to http-conduit).</li>
--   </ul>
--   
--   Typical workflow in crawler:
--   
--   <pre>
--   withDnsCache $  c -&gt; withDownloader $  d -&gt; do
--   ... -- got URL from queue
--   ra &lt;- resolveA c $ hostNameFromUrl url
--   case ra of
--       Left err -&gt; ... -- uh oh, bad host
--       Right ha -&gt; do
--           ... -- crawler politeness stuff (rate limits, queues)
--           dr &lt;- download d url (Just ha) opts
--           case dr of
--               DROK dat redownloadOptions -&gt;
--                   ... -- analyze data, save redownloadOpts for next download
--               DRRedirect .. -&gt; ...
--               DRNotModified -&gt; ...
--               DRError e -&gt; ...
--   
--   </pre>
--   
--   It's highly recommended to use
--   <a>http://hackage.haskell.org/package/concurrent-dns-cache</a>
--   (preferably with single resolver pointing to locally running BIND) for
--   DNS resolution since <tt>getAddrInfo</tt> used in
--   <tt>http-conduit</tt> can be buggy and ineffective when it needs to
--   resolve many hosts per second for a long time.
module Network.HTTP.Conduit.Downloader

-- | Download single URL with default <a>DownloaderSettings</a>. Fails if
--   result is not <a>DROK</a>.
urlGetContents :: String -> IO ByteString

-- | Post data and download single URL with default
--   <a>DownloaderSettings</a>. Fails if result is not <a>DROK</a>.
urlGetContentsPost :: String -> ByteString -> IO ByteString

-- | Perform download
download :: Downloader -> String -> Maybe HostAddress -> DownloadOptions -> IO DownloadResult

-- | Perform HTTP POST.
post :: Downloader -> String -> Maybe HostAddress -> ByteString -> IO DownloadResult

-- | Generic version of <a>download</a> with ability to modify http-conduit
--   <tt>Request</tt>.
downloadG :: (Request -> ResourceT IO Request) -> Downloader -> String -> Maybe HostAddress -> DownloadOptions -> IO (DownloadResult)

-- | Even more generic version of <a>download</a>, which returns
--   <a>RawDownloadResult</a>. <a>RawDownloadResult</a> is optional since
--   it can not be determined on timeouts and connection errors.
rawDownload :: (Request -> ResourceT IO Request) -> Downloader -> String -> Maybe HostAddress -> DownloadOptions -> IO (DownloadResult, Maybe RawDownloadResult)

-- | Result of <a>download</a> operation.
data DownloadResult

-- | Successful download with data and options for next download.
DROK :: ByteString -> DownloadOptions -> DownloadResult

-- | Redirect URL
DRRedirect :: String -> DownloadResult

-- | Error
DRError :: String -> DownloadResult

-- | HTTP 304 Not Modified
DRNotModified :: DownloadResult

-- | Result of <a>rawDownload</a> operation.
data RawDownloadResult
RawDownloadResult :: Status -> HttpVersion -> ResponseHeaders -> ByteString -> CookieJar -> RawDownloadResult
rdrStatus :: RawDownloadResult -> Status
rdrHttpVersion :: RawDownloadResult -> HttpVersion
rdrHeaders :: RawDownloadResult -> ResponseHeaders
rdrBody :: RawDownloadResult -> ByteString
rdrCookieJar :: RawDownloadResult -> CookieJar

-- | <tt>If-None-Match</tt> and/or <tt>If-Modified-Since</tt> headers.
type DownloadOptions = [String]

-- | Settings used in downloader.
data DownloaderSettings
DownloaderSettings :: ByteString -> Int -> ManagerSettings -> Int -> DownloaderSettings

-- | User agent string. Default: <tt>"Mozilla/5.0 (compatible;
--   HttpConduitDownloader/1.0;
--   +http://hackage.haskell.org/package/http-conduit-downloader)"</tt>.
--   
--   Be a good crawler. Provide your User-Agent please.
dsUserAgent :: DownloaderSettings -> ByteString

-- | Download timeout. Default: 30 seconds.
dsTimeout :: DownloaderSettings -> Int

-- | Conduit <tt>Manager</tt> settings. Default: ManagerSettings with SSL
--   certificate checks removed.
dsManagerSettings :: DownloaderSettings -> ManagerSettings

-- | Download size limit in bytes. Default: 10MB.
dsMaxDownloadSize :: DownloaderSettings -> Int

-- | Keeps http-conduit <tt>Manager</tt> and <a>DownloaderSettings</a>.
data Downloader

-- | Create a new <a>Downloader</a>, use it in the provided function, and
--   then release it.
withDownloader :: (Downloader -> IO a) -> IO a

-- | Create a new <a>Downloader</a> with provided settings, use it in the
--   provided function, and then release it.
withDownloaderSettings :: DownloaderSettings -> (Downloader -> IO a) -> IO a

-- | Create a <a>Downloader</a> with settings.
newDownloader :: DownloaderSettings -> IO Downloader

-- | Make HTTP POST request.
postRequest :: ByteString -> Request -> Request

-- | Sink data using 32k buffers to reduce memory fragmentation. Returns
--   <a>Nothing</a> if downloaded too much data.
sinkByteString :: MonadIO m => Int -> Sink ByteString m (Maybe ByteString)
instance Show RawDownloadResult
instance Eq RawDownloadResult
instance Show DownloadResult
instance Read DownloadResult
instance Eq DownloadResult
instance Default DownloaderSettings
