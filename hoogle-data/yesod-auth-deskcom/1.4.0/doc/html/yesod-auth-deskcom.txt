-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Desk.com remote authentication support for Yesod apps.
--   
--   This package allows users of your website to login into Desk.com
--   automatically using Desk.com's Multipass SSO (single sign-on,
--   <a>http://dev.desk.com/docs/portal/multipass</a>).
--   
--   Note that this is an unusual <tt>yesod-auth-*</tt> package. We do not
--   define an <tt>AuthPlugin</tt> because the user can't log in to your
--   website via Desk.com (it's the opposite, they login in Desk.com via
--   your website). Instead, this plugin defines an Yesod subsite that you
--   may include on your site; the subsite defines a route that accepts
--   incoming users from Desk.com and authenticates them.
@package yesod-auth-deskcom
@version 1.4.0

module Yesod.Auth.DeskCom

-- | Type class that you need to implement in order to support Desk.com
--   remote authentication.
--   
--   <i>Minimal complete definition:</i> everything except for
--   <a>deskComTokenTimeout</a>.
class YesodAuthPersist master => YesodDeskCom master where deskComTokenTimeout _ = 300
deskComCredentials :: YesodDeskCom master => HandlerT master IO DeskComCredentials
deskComUserInfo :: YesodDeskCom master => AuthId master -> HandlerT master IO DeskComUser
deskComTokenTimeout :: YesodDeskCom master => master -> NominalDiffTime

-- | Create the credentials data type used by this library. This function
--   is relatively expensive (uses SHA1 and AES), so you'll probably want
--   to cache its result.
deskComCreateCreds :: Text -> Text -> Text -> DeskComCredentials

-- | Credentials used to access your Desk.com's Multipass.
data DeskComCredentials

-- | Information about a user that is given to <a>DeskCom</a>. Please see
--   Desk.com's documentation
--   (<a>http://dev.desk.com/docs/portal/multipass</a>) in order to see
--   more details of how theses fields are interpreted.
--   
--   Only <a>duName</a> and <a>duEmail</a> are required. We suggest using
--   <a>def</a>.
data DeskComUser
DeskComUser :: Text -> Text -> DeskComUserId -> [DeskComCustomField] -> Maybe Text -> DeskComUser

-- | User name, at least two characters. (required)
duName :: DeskComUser -> Text

-- | E-mail address. (required)
duEmail :: DeskComUser -> Text

-- | Desk.com expects an string to be used as the ID of the user on their
--   system. Defaults to <a>UseYesodAuthId</a>.
duUserId :: DeskComUser -> DeskComUserId

-- | Custom fields to be set.
duCustomFields :: DeskComUser -> [DeskComCustomField]

-- | When <tt>Just url</tt>, forces the user to be redirected to
--   <tt>url</tt> after being logged in. Otherwise, the user is redirected
--   either to the page they were trying to view (if any) or to your portal
--   page at Desk.com.
duRedirectTo :: DeskComUser -> Maybe Text

-- | Which external ID should be given to Desk.com.
data DeskComUserId

-- | Use the user ID from <tt>persistent</tt>'s database. This is the
--   recommended and default value.
UseYesodAuthId :: DeskComUserId

-- | Use this given value.
Explicit :: Text -> DeskComUserId

-- | The value of a custom customer field as <tt>(key, value)</tt>. Note
--   that you have prefix your <tt>key</tt> with <tt>"custom_"</tt>.
type DeskComCustomField = (Text, Text)

-- | Data type for <tt>yesod-auth-deskCom</tt>'s subsite.
data DeskCom

-- | Initialize the <a>DeskCom</a> subsite with a fresh CPRNG.
initDeskCom :: IO DeskCom

-- | Redirect the user to Desk.com such that they're already logged in when
--   they arrive. For example, you may use <tt>deskComLoginRoute</tt> as
--   the login URL on Multipass config.
deskComLoginRoute :: Route DeskCom

-- | If the user is logged in, redirect them to Desk.com such that they're
--   already logged in when they arrive (same as <a>deskComLoginRoute</a>).
--   Otherwise, redirect them to Desk.com without asking for credentials.
--   For example, you may use <tt>deskComMaybeLoginRoute</tt> when the user
--   clicks on a "Support" item on a menu.
deskComMaybeLoginRoute :: Route DeskCom
instance Eq DeskComUserId
instance Ord DeskComUserId
instance Show DeskComUserId
instance Read DeskComUserId
instance Eq DeskComUser
instance Ord DeskComUser
instance Show DeskComUser
instance Read DeskComUser
instance Default DeskComUserId
instance Default DeskComUser
instance YesodDeskCom master => YesodSubDispatch DeskCom (HandlerT master IO)
