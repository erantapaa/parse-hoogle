-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A type checker for Haskell/haskell-src-exts
--   
--   Haskell Types with Extensions (HTE, haskell-type-exts) is (an embryo
--   of) a type checker for Haskell as embodied syntactically by the
--   haskell-src-exts (HSE) package. At this point the type checker only
--   handles a limited number of extensions, both regarding the various
--   syntactic extensions handled by HSE, and the various type-level
--   extensions implemented in e.g. GHC. The goal is to cover the full
--   range of known Haskell extensions, but every path starts with a first
--   step.
@package haskell-type-exts
@version 0.1.0

module Language.Haskell.TypeCheck.TypeCheck
typecheckExp :: Exp -> Tc Sigma
typecheckModule :: Module -> Tc VarEnv
type Q = TcCtxt
type VarEnv = [(QName, Sigma)]
checkRho :: Exp -> Rho -> Tc Q
inferRho :: Exp -> Tc (Rho, Q)
tcRho :: Exp -> Expected Rho -> Tc Q
checkAlt :: Alt -> Rho -> Tc Q
inferAlt :: Alt -> Tc (Rho, Q)
tcAlt :: Alt -> Expected Rho -> Tc Q
checkAltMatch :: [Pat] -> GuardedAlts -> Binds -> Rho -> Tc Q
inferAltMatch :: [Pat] -> GuardedAlts -> Binds -> Tc (Rho, Q)
tcAltMatch :: [Pat] -> GuardedAlts -> Binds -> Expected Rho -> Tc Q
checkGuardedAlts :: GuardedAlts -> Q -> Rho -> Tc Q
inferGuardedAlts :: GuardedAlts -> Q -> Tc (Rho, Q)
tcGuardedAlts :: GuardedAlts -> Q -> Expected Rho -> Tc Q
checkGuardedAlt :: GuardedAlt -> Q -> Rho -> Tc Q
inferGuardedAlt :: GuardedAlt -> Q -> Tc (Rho, Q)
tcGuardedAlt :: GuardedAlt -> Q -> Expected Rho -> Tc Q
checkGuards :: [Stmt] -> Tc (VarEnv, Q, Q)
checkGuard :: Stmt -> Tc (VarEnv, Q, Q)
checkStmts :: [Stmt] -> Expected Rho -> Tc Q
checkStmt :: Stmt -> Tc (VarEnv, Q, Q)
litType :: Literal -> Tc Sigma
charType :: TcType
boolType :: TcType
numType :: Tc Sigma
fracType :: Tc Sigma
stringType :: Sigma
listCon :: TcType
listType :: Sigma -> Sigma
mkPredType :: QName -> Tc Sigma
inferSigma :: Exp -> Tc Sigma
checkSigma :: Exp -> Sigma -> Tc Q
tcPats :: [Pat] -> [Expected Sigma] -> Tc (VarEnv, Q, Q)
inferPats :: [Pat] -> Tc ([Sigma], VarEnv, Q, Q)
checkPats :: [Pat] -> [Sigma] -> Tc (VarEnv, Q, Q)
inferPat :: Pat -> Tc (Sigma, VarEnv, Q, Q)
checkPat :: Pat -> Sigma -> Tc (VarEnv, Q, Q)
tcPat :: Pat -> Expected Sigma -> Tc (VarEnv, Q, Q)
unifyFunPats :: Rho -> [Pat] -> Tc (Tau, VarEnv, Q, Q)
tcBinds :: Binds -> Tc (VarEnv, Q, Q)
tcBindGroup :: [Decl] -> Tc (VarEnv, Q, Q)
tcPatBinds :: [Decl] -> Tc (VarEnv, Q, Q)
inferRhsWhere :: Rhs -> Binds -> Tc (Sigma, Q)
tcRhsWhere :: Rhs -> Binds -> Expected Sigma -> Tc Q
rhsToGalts :: Rhs -> GuardedAlts
grhsToGalt :: GuardedRhs -> GuardedAlt
tcRhs :: Rhs -> Q -> Expected Rho -> Tc Q
tcVarBind :: Decl -> Tc Q
tcMatches :: [Match] -> Tc Q
checkMatch :: Match -> Rho -> Tc Q
inferMatch :: Match -> Tc (Rho, Q)
tcMatch :: Match -> Expected Rho -> Tc Q
isExplTyped :: [Name] -> Decl -> Bool
isImplTyped :: Decl -> Bool
subsCheckAll :: [Sigma] -> Tc Q
subsCheck :: Sigma -> Sigma -> Tc Q
subsCheckRho :: Sigma -> Rho -> Tc Q
subsCheckFun :: Sigma -> Rho -> Sigma -> Rho -> Tc Q
instSigma :: Sigma -> Expected Rho -> Tc Q
instPatSigma :: Sigma -> Expected Sigma -> Tc ()

module Language.Haskell.TypeCheck
typeCheck :: IO ()
