-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An implementation of the Version Space Algebra learning framework.
--   
--   HaVSA (Have-Saa) is a Haskell implementation of the Version Space
--   Algebra Machine Learning technique described by Tessa Lau. The
--   canonical description is in:
--   
--   Tessa Lau, Steven Wolfman, Pedro Domingos, and Daniel S. Weld,
--   Programming by Demonstration using Version Space Algebra, Machine
--   Learning, 2003.
--   (http:<i></i>tlau.org<i>research</i>papers/mlj01-draft.pdf)
@package HaVSA
@version 0.1.0.2

module AI.VersionSpaces

-- | Representation of a traditional version space, as described by Hirsh:
--   Hirsh, H.: 1991, 'Theoretical Underpinnings of Version Spaces'. In:
--   Proceedings of the Twelfth International Joint Conference on
--   Artificial Intelligence. pp. 665670.
data BSR a i o
EmptyBSR :: BSR a i o
BSR :: a -> (BSR a i o -> i -> o -> BSR a i o) -> (BSR a i o -> [i -> o]) -> BSR a i o
storage :: BSR a i o -> a
narrow :: BSR a i o -> BSR a i o -> i -> o -> BSR a i o
hypos :: BSR a i o -> BSR a i o -> [i -> o]

-- | Renders a BSR to a string to show whether the BSR is empty or not.
--   Additional details place undesirable restrictions on the state
--   storage.
showBSR :: BSR a i o -> String

-- | Union two versionspaces, generating a third.
union :: VersionSpace a b -> VersionSpace a b -> VersionSpace a b

-- | Join two versionspaces, generating a third.
join :: (Eq b, Eq d) => VersionSpace a b -> VersionSpace c d -> VersionSpace (a, c) (b, d)

-- | Transform a version space to mutate the input and/or output types.
--   Transforms require that three functions be specified:
--   
--   <ul>
--   <li><i><tt>i -&gt; a</tt></i> Transform the input of the resulting
--   version space to the input of the initial versionspace.</li>
--   <li><i><tt>o -&gt; b</tt></i> Transform the output of the initial
--   versionspace into the output of the resulting versionspace.</li>
--   <li><i><tt>b -&gt; o</tt></i> Transform the output of the
--   <i>resulting</i> versionspace into the output of the <i>initial</i>
--   versionspace. This is necessary to support training: the training
--   examples will be in terms of the resulting versionspace, so the output
--   must be transformed back into the terms of the initial
--   versionspace.</li>
--   </ul>
tr :: Eq b => (i -> a) -> (o -> b) -> (b -> o) -> VersionSpace a b -> VersionSpace i o

-- | Version Space algebraic operators:
data VersionSpace i o
Empty :: VersionSpace i o
VS :: BSR a i o -> VersionSpace i o
Join :: VersionSpace a b -> VersionSpace c d -> VersionSpace (a, c) (b, d)
Union :: VersionSpace a b -> VersionSpace a b -> VersionSpace a b
Tr :: (i -> a) -> (o -> b) -> (b -> o) -> VersionSpace a b -> VersionSpace i o

-- | Serializes a versionspace to a human-readable string, for certain
--   values of <tt>human</tt>.
showVS :: VersionSpace i o -> String

-- | Train a version space, reducing the set of valid hypotheses. We handle
--   the Empty VS cases prior to the corresponding non-empty cases because
--   the Empties are simplifying cases, so logic can be short-circuited by
--   collapsing parts of the hierarchy before recursing.
train :: Eq o => VersionSpace i o -> i -> o -> VersionSpace i o

-- | Retrieve the valid hypotheses for a version space.
hypotheses :: VersionSpace i o -> [(i -> o)]

-- | Runs all valid hypotheses from the version space on the specified
--   input.
runVS :: VersionSpace a b -> a -> [b]
