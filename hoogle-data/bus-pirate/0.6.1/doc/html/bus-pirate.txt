-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell interface to the Bus Pirate binary interface
--   
--   This package provides a simple, type-safe interface for working with
--   the Bus Pirate's binary interface.
@package bus-pirate
@version 0.6.1

module System.Hardware.BusPirate.I2C
data I2cM a

-- | Enter I2C mode and run given action
i2cMode :: I2cM a -> BusPirateM a

-- | Send a start bit
startBit :: I2cM ()

-- | Send a stop bit
stopBit :: I2cM ()

-- | Read a byte
readByte :: I2cM Word8

-- | Send an ACK
ackBit :: I2cM ()

-- | Send a NACK
nackBit :: I2cM ()

-- | Write some bytes
bulkWrite :: ByteString -> I2cM ()
data PeripheralConfig
PConfig :: Bool -> Bool -> Bool -> Bool -> PeripheralConfig
perPower :: PeripheralConfig -> Bool
perPullups :: PeripheralConfig -> Bool
perAux :: PeripheralConfig -> Bool
perChipSelect :: PeripheralConfig -> Bool

-- | Set Bus Pirate peripheral configuration bits
setConfig :: PeripheralConfig -> I2cM ()

-- | I2C bus speed
data I2cSpeed
I2c_5kHz :: I2cSpeed
I2c_50kHz :: I2cSpeed
I2c_100kHz :: I2cSpeed
I2c_400kHz :: I2cSpeed

-- | Set I2C bus speed
setSpeed :: I2cSpeed -> I2cM ()

-- | An I2C address (shifted 7-bit)
data I2CAddress

-- | An I2C address from a unshifted 7-bit address
from7Bit :: Word8 -> I2CAddress

-- | An I2C address from a shifted 8-bit address (masking out the
--   read/write bit)
from8Bit :: Word8 -> I2CAddress
readAddr :: I2CAddress -> Word8
writeAddr :: I2CAddress -> Word8

-- | Perform a write to the given register
writeReg :: I2CAddress -> Word8 -> Word8 -> I2cM ()

-- | Read the given register
readReg :: I2CAddress -> Word8 -> I2cM Word8

-- | Perform a read of the given length starting at the given register
readReg' :: I2CAddress -> Word8 -> Int -> I2cM ByteString
instance Functor I2cM
instance Applicative I2cM
instance Monad I2cM
instance MonadIO I2cM
instance Show AckNack
instance Eq AckNack
instance Ord AckNack
instance Enum AckNack
instance Bounded AckNack
instance Show I2cSpeed
instance Eq I2cSpeed
instance Ord I2cSpeed
instance Enum I2cSpeed
instance Bounded I2cSpeed

module System.Hardware.BusPirate.SPI
data SpiM a

-- | Enter I2C mode and run given action
spiMode :: SpiM a -> BusPirateM a

-- | Perform a read/write transaction of up to 16 bytes
bulkTransfer :: ByteString -> SpiM ByteString

-- | Set chip select
setCS :: Bool -> SpiM ()
data PeripheralConfig
PConfig :: Bool -> Bool -> Bool -> Bool -> PeripheralConfig
perPower :: PeripheralConfig -> Bool
perPullups :: PeripheralConfig -> Bool
perAux :: PeripheralConfig -> Bool
perChipSelect :: PeripheralConfig -> Bool

-- | Set Bus Pirate peripheral configuration bits
setConfig :: PeripheralConfig -> SpiM ()
data SpiSpeed
Spi30KHz :: SpiSpeed
Spi125KHz :: SpiSpeed
Spi250KHz :: SpiSpeed
Spi1MHz :: SpiSpeed
Spi2MHz :: SpiSpeed
Spi2_6MHz :: SpiSpeed
Spi4MHz :: SpiSpeed
Spi8MHz :: SpiSpeed

-- | Set bus speed
setSpeed :: SpiSpeed -> SpiM ()
instance Functor SpiM
instance Applicative SpiM
instance Monad SpiM
instance MonadIO SpiM
instance Show SpiSpeed
instance Ord SpiSpeed
instance Eq SpiSpeed
instance Enum SpiSpeed
instance Bounded SpiSpeed

module System.Hardware.BusPirate
data BusPirateM a

-- | Open a Bus Pirate device and run the given action
runBusPirate :: FilePath -> BusPirateM a -> IO (Either String a)

-- | Convenient way to run an I2C action
runI2c :: FilePath -> I2cM a -> IO (Either String a)

-- | Convenient way to run an I2C action
runSpi :: FilePath -> SpiM a -> IO (Either String a)
