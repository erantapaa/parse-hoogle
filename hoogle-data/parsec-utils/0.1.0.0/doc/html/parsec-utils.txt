-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Utility functions and combinators for Text.Parsec
--   
--   Utility functions and combinators for Text.Parsec that allow more
--   compact code in common use cases
@package parsec-utils
@version 0.1.0.0

module Text.Parsec.Utils

-- | Parse a string. Parse errors are reported through the <a>error</a>
--   function.
--   
--   <pre>
--   &gt;&gt;&gt; parseString int "123" == 123
--   True
--   </pre>
parseString :: Parser a -> String -> a

-- | Parse the contents of a file. Parse errors are reported through the
--   <a>error</a> function.
parseFile :: Parser a -> FilePath -> IO a

-- | Parse a natural (i.e. non-negative) number
--   
--   <pre>
--   &gt;&gt;&gt; parseString nat "123" == 123
--   True
--   </pre>
nat :: Integral a => Parser a

-- | Parse an integer (or any instance of Integral)
--   
--   <pre>
--   &gt;&gt;&gt; parseString int "-123" == -123
--   True
--   </pre>
int :: Integral a => Parser a

-- | Parse a floating point number
--   
--   <pre>
--   &gt;&gt;&gt; parseString float "-12.34" == -12.34
--   True
--   </pre>
float :: (Read a, RealFloat a) => Parser a

-- | Synonym for <a>&lt;$</a>
--   
--   <pre>
--   &gt;&gt;&gt; parseString (2 =: char 'a') "a" == 2
--   True
--   </pre>
(=:) :: Functor f => b -> f a -> f b

-- | Synonym for <a>&lt;*&gt;</a>
--   
--   <pre>
--   &gt;&gt;&gt; parseString ((,) .: char 'a' +: int) "a1" == ('a', 1)
--   True
--   </pre>
(+:) :: Applicative f => f (a -> b) -> f a -> f b

-- | Synonym for <a>&lt;*</a> Allows chaining parsers without the need for
--   parentheses
--   
--   <pre>
--   &gt;&gt;&gt; parseString ((+) .: int -: space +: int) "1 2" == 3
--   True
--   </pre>
(-:) :: Applicative f => f a -> f b -> f a

-- | Synonym for <a>&lt;$&gt;</a>
--   
--   <pre>
--   &gt;&gt;&gt; parseString ((,) .: char 'a' +: int) "a1" == ('a', 1)
--   True
--   </pre>
(.:) :: Functor f => (a -> b) -> f a -> f b

-- | Synonym for <a>&lt;*</a> Identical to <a>.:</a> but with lower
--   precedence.
--   
--   <pre>
--   &gt;&gt;&gt; parseString (show $: (+) .: int -: space +: int) "1 2" == "3"
--   True
--   </pre>
($:) :: Functor f => (a -> b) -> f a -> f b

-- | Apply a parser that returns a <a>String</a> and parse the result with
--   another parser.
--   
--   <pre>
--   &gt;&gt;&gt; parseString (int &lt;: manyTill anyChar (char '9')) "129" == 12
--   True
--   </pre>
(<:) :: Parser t -> Parser String -> Parser t
