-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple 3D vector library
--   
--   A simple library for dealing with 3D vectors, suitable for graphics
--   projects. A small texture library with Perlin noise is included as
--   well.
@package GlomeVec
@version 0.1.2

module Data.Glome.Vec

-- | Performance is pretty similar with Floats or Doubles. Todo: make
--   separate Float and Double instances of this library.
type Flt = Double
infinity :: Flt

-- | Convert from degrees to native angle format (radians).
deg :: Flt -> Flt

-- | Convert from radians to native format (noop).
rad :: Flt -> Flt

-- | Convert from rotations to native format. (rot 1 == deg 360)
rot :: Flt -> Flt

-- | Trig with degrees instead of radians.
dcos :: Flt -> Flt

-- | Force a value to be within a range. Usage: clamp min x max
clamp :: Flt -> Flt -> Flt -> Flt

-- | Tuning parameter.
--   
--   Non-polymorphic fmin; this speeds things up in ocaml, not sure about
--   haskell.
fmin :: Flt -> Flt -> Flt

-- | Non-polymorphic fmax.
fmax :: Flt -> Flt -> Flt

-- | Non-polymorphic min of 3 values.
fmin3 :: Flt -> Flt -> Flt -> Flt

-- | Non-polymorphic max of 3 values.
fmax3 :: Flt -> Flt -> Flt -> Flt

-- | Min of 4 values.
fmin4 :: Flt -> Flt -> Flt -> Flt -> Flt

-- | Max of 4 values.
fmax4 :: Flt -> Flt -> Flt -> Flt -> Flt

-- | Non-polymorphic absolute value.
fabs :: Flt -> Flt

-- | Non-polymorphic integer absolute value.
iabs :: Int -> Int

-- | Force user to use fabs or iabs, for performance reasons. Not sure if
--   this really helps, though.
--   
--   Approximate equality for Flt. True if a and b are <a>almost</a> equal.
--   The (abs $ a-b) test doesn't work if a and b are large.
about_equal :: Flt -> Flt -> Bool

-- | 3d type represented as a record of unboxed floats.
data Vec
Vec :: !Flt -> !Flt -> !Flt -> Vec

-- | A Ray is made up of an origin and direction Vec.
data Ray
Ray :: !Vec -> !Vec -> Ray
origin :: Ray -> !Vec
dir :: Ray -> !Vec

-- | Vec constructor.
vec :: Flt -> Flt -> Flt -> Vec

-- | Zero Vec.
vzero :: Vec

-- | For when we need a unit vector, but we don't care where it points.
vunit :: Vec

-- | Unit X vector.
vx :: Vec

-- | Unit y vector.
vy :: Vec

-- | Unit z vector.
vz :: Vec

-- | Negative x vector.
nvx :: Vec

-- | Negative y vector.
nvy :: Vec

-- | Negative z vector.
nvz :: Vec
x :: Vec -> Flt
y :: Vec -> Flt
z :: Vec -> Flt

-- | Access the Vec as if it were an array indexed from 0..2. Note: this
--   actually accounts for a noticeable amount of cpu time in the Glome ray
--   tracer.
va :: Vec -> Int -> Flt

-- | Create a new Vec with the Nth field overwritten by new value. I could
--   have used record update syntax.
vset :: Vec -> Int -> Flt -> Vec

-- | Dot product of 2 vectors. We use this all the time. Dot product of 2
--   normal vectors is the cosine of the angle between them.
vdot :: Vec -> Vec -> Flt

-- | Cross product of 2 vectors. Produces a vector perpendicular to the
--   given vectors. We use this for things like making the forward, up, and
--   right camera vectors orthogonal. If the input vectors are normalized,
--   the output vector will be as well.
vcross :: Vec -> Vec -> Vec

-- | Apply a unary Flt operator to each field of the Vec.
vmap :: (Flt -> Flt) -> Vec -> Vec

-- | Apply a binary Flt operator to pairs of fields from 2 Vecs.
vmap2 :: (Flt -> Flt -> Flt) -> Vec -> Vec -> Vec

-- | Reverse the direction of a Vec.
vinvert :: Vec -> Vec

-- | Get the length of a Vec squared. We use this to avoid a slow sqrt.
vlensqr :: Vec -> Flt

-- | Get the length of a Vec. This is expensive because sqrt is slow.
vlen :: Vec -> Flt

-- | Add 2 vectors.
vadd :: Vec -> Vec -> Vec

-- | Add 3 vectors.
vadd3 :: Vec -> Vec -> Vec -> Vec

-- | Subtract vectors. <a>vsub b a</a> is the vector from a to b.
vsub :: Vec -> Vec -> Vec

-- | Multiply corresponding fields. Rarely useful.
vmul :: Vec -> Vec -> Vec

-- | Add a value to all the fields of a Vec. Useful, for instance, to get
--   one corner of the bounding box around a sphere.
vinc :: Vec -> Flt -> Vec

-- | Subtract a value from all fields of a Vec.
vdec :: Vec -> Flt -> Vec

-- | Get the maximum of all corresponding fields between 2 Vecs.
vmax :: Vec -> Vec -> Vec

-- | Get the minimum of all corresponding fields between 2 Vecs.
vmin :: Vec -> Vec -> Vec

-- | Return the largest axis. Often used with <a>va</a>.
vmaxaxis :: Vec -> Int

-- | Scale a Vec by some value.
vscale :: Vec -> Flt -> Vec

-- | Take the first Vec, and add to it the second Vec scaled by some
--   amount. This is used quite a lot in Glome.
vscaleadd :: Vec -> Vec -> Flt -> Vec

-- | Make the length of a Vec just a little shorter.
vnudge :: Vec -> Vec

-- | Normalize a vector. Division is expensive, so we compute the
--   reciprocol of the length and multiply by that. The sqrt is also
--   expensive.
vnorm :: Vec -> Vec

-- | Throw an exception if a vector hasn't been normalized.
assert_norm :: Vec -> Vec

-- | Get the victor bisecting two other vectors (which ought to be the same
--   length).
bisect :: Vec -> Vec -> Vec

-- | Distance between 2 vectors.
vdist :: Vec -> Vec -> Flt

-- | Reflect a vector <a>v</a> off of a surface with normal <a>norm</a>.
reflect :: Vec -> Vec -> Vec

-- | Reciprocol of all fields of a Vec.
vrcp :: Vec -> Vec

-- | Test Vecs for approximate equality
veq :: Vec -> Vec -> Bool

-- | Test Vecs for matching sign on all fields. Returns false if any value
--   is zero. Used by packet tracing.
veqsign :: Vec -> Vec -> Bool

-- | Translate a ray's origin in ray's direction by d amount.
ray_move :: Ray -> Flt -> Ray

-- | Find a pair of orthogonal vectors to the one given.
orth :: Vec -> (Vec, Vec)

-- | Intersect a ray with a plane defined by a point <a>p</a> and a normal
--   <a>norm</a>. (Ray does not need to be normalized.)
plane_int :: Ray -> Vec -> Vec -> Vec

-- | Find the distance along a ray until it intersects with a plane defined
--   by a point <a>p</a> and normal <a>norm</a>.
plane_int_dist :: Ray -> Vec -> Vec -> Flt

-- | 3x4 Transformation matrix. These are described in most graphics texts.
data Matrix
Matrix :: !Flt -> !Flt -> !Flt -> !Flt -> !Flt -> !Flt -> !Flt -> !Flt -> !Flt -> !Flt -> !Flt -> !Flt -> Matrix

-- | A transformation. Inverting a matrix is expensive, so we keep a
--   forward transformation matrix and a reverse transformation matrix.
--   Note: This can be made a little faster if the matricies are
--   non-strict.
data Xfm
Xfm :: Matrix -> Matrix -> Xfm

-- | Identity matrix. Transforming a vector by this matrix does nothing.
ident_matrix :: Matrix

-- | Identity transformation.
ident_xfm :: Xfm

-- | Multiply two matricies. This is unrolled for efficiency, and it's also
--   a little bit easier (in my opinion) to see what's going on.
mat_mult :: Matrix -> Matrix -> Matrix

-- | Multiply two tranformations. This just multiplies the forward and
--   reverse transformations.
xfm_mult :: Xfm -> Xfm -> Xfm

-- | There is a seemingly-magical property of transformation matricies,
--   that we can combine the effects of any number of transformations into
--   a single transformation just by multiplying them together in reverse
--   order. For instance, we could move a point, then rotate it about the
--   origin by some angle around some vector, then move it again, and this
--   can all be done by a single transformation. This function combines
--   transformations in this way, though it reverses the list first so the
--   transformations take effect in their expected order.
compose :: [Xfm] -> Xfm

-- | Make sure a transformation is valid. Multipy the forward and reverse
--   matrix and verify that the result is the identity matrix.
check_xfm :: Xfm -> Xfm

-- | Complex transformations: Rotate point (or vector) <a>pt</a> about ray
--   by angle c. The angle is in radians, but using the angle conversion
--   routines <a>deg</a>, <a>rad</a> and <a>rot</a> is recommended.
vrotate :: Vec -> Ray -> Flt -> Vec

-- | Transform a point. The point is treated as (x y z 1).
xfm_point :: Xfm -> Vec -> Vec

-- | Inverse transform a point.
invxfm_point :: Xfm -> Vec -> Vec

-- | Transform a vector. The vector is treated as (x y z 0).
xfm_vec :: Xfm -> Vec -> Vec

-- | Inverse transform a vector.
invxfm_vec :: Xfm -> Vec -> Vec

-- | Inverse transform a normal. This one is tricky: we need to transform
--   by the inverse transpose.
invxfm_norm :: Xfm -> Vec -> Vec

-- | Transform a Ray.
xfm_ray :: Xfm -> Ray -> Ray

-- | Inverse transform a Ray.
invxfm_ray :: Xfm -> Ray -> Ray

-- | Basic transforms: move by some displacement vector.
translate :: Vec -> Xfm

-- | Basic transforms: stretch along the three axes, by the amount in the
--   given vector. (If x==y==z, then it's uniform scaling.)
scale :: Vec -> Xfm

-- | Basic transforms: rotate about a given axis by some angle.
rotate :: Vec -> Flt -> Xfm

-- | Basic transforms: Convert coordinate system from canonical xyz
--   coordinates to uvw coordinates.
xyz_to_uvw :: Vec -> Vec -> Vec -> Xfm

-- | Basic transforms: Convert from uvw coordinates back to normal xyz
--   coordinates.
uvw_to_xyz :: Vec -> Vec -> Vec -> Xfm

-- | Given a side, angle, and side of a triangle, produce the length of the
--   opposite side.
sas2s :: Flt -> Flt -> Flt -> Flt

-- | Axis-aligned Bounding Box (AABB), defined by opposite corners. P1 is
--   the min values, p2 has the max values.
data Bbox
Bbox :: !Vec -> !Vec -> Bbox
p1 :: Bbox -> !Vec
p2 :: Bbox -> !Vec

-- | A near-far pair of distances. Basically just a tuple.
data Interval
Interval :: !Flt -> !Flt -> Interval

-- | Bounding box that encloses two bounding boxes.
bbjoin :: Bbox -> Bbox -> Bbox

-- | Find the overlap of two bounding boxes.
bboverlap :: Bbox -> Bbox -> Bbox

-- | Test if a Vec is inside the bounding box.
bbinside :: Bbox -> Vec -> Bool

-- | Split a bounding box into two, given an axis and offset. Throw
--   exception if the offset isn't inside the bounding box.
bbsplit :: Bbox -> Int -> Flt -> (Bbox, Bbox)

-- | Generate a minimum bounding box that encloses a list of points.
bbpts :: [Vec] -> Bbox

-- | Surface area of a bounding box. Useful for cost heuristics when
--   attempting to build optimal bounding box heirarchies. Undefined for
--   degenerate bounding boxes.
bbsa :: Bbox -> Flt

-- | Volume of a bounding box. Undefined for degenerate bounding boxes.
bbvol :: Bbox -> Flt

-- | Degenerate bounding box that contains an empty volume.
empty_bbox :: Bbox

-- | <a>Infinite</a> bounding box.
everything_bbox :: Bbox

-- | Find a ray's entrance and exit from a bounding box. If last entrance
--   is before the first exit, we hit. Otherwise, we miss. (It's up to the
--   caller to figure that out.)
bbclip :: Ray -> Bbox -> Interval
instance Show Interval
instance Show Bbox
instance Show Xfm
instance Show Matrix
instance Show Ray
instance Show Vec

module Data.Glome.Texture
square_wave :: Flt -> Flt
triangle_wave :: Flt -> Flt
sine_wave :: Flt -> Flt
lump_wave :: Flt -> Flt
stripe :: Vec -> (Flt -> Flt) -> (Vec -> Flt)
omega :: Flt -> Flt
phi :: Array Int Int
grad :: Array Int Vec
gamma :: Int -> Int -> Int -> Vec
knot :: Int -> Int -> Int -> Vec -> Flt
intGamma :: Int -> Int -> Int
turbulence :: Vec -> Int -> Flt
noise :: Vec -> Flt
perlin :: Vec -> Flt
perlin_turb :: Vec -> Int -> Flt
