-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | RebindableSyntax using the semigroupoids package
--   
@package semigroupoids-syntax
@version 0.0.1

module Data.Functor.Point
class Apply f => Point f
point :: Point f => a -> f a
instance [safe] (Bind f, Monad f, Semigroup w, Monoid w) => Point (RWST r w s f)
instance [safe] (Bind f, Monad f, Semigroup w, Monoid w) => Point (RWST r w s f)
instance [safe] (Apply f, Applicative f) => Point (Static f a)
instance [safe] Point (ContT r f)
instance [safe] (Applicative f, Apply f) => Point (ReaderT r f)
instance [safe] (Bind f, Monad f) => Point (StateT e f)
instance [safe] (Bind f, Monad f) => Point (StateT e f)
instance [safe] (Applicative f, Apply f, Semigroup w, Monoid w) => Point (WriterT w f)
instance [safe] (Applicative f, Apply f, Semigroup w, Monoid w) => Point (WriterT w f)
instance [safe] (Applicative f, Apply f, Applicative g, Apply g) => Point (Compose f g)
instance [safe] (Applicative f, Apply f, Applicative g, Apply g) => Point (Product f g)
instance [safe] Point (Cokleisli f a)
instance [safe] (Apply f, Applicative f, Semigroup m, Monoid m) => Point (EnvT m f)
instance [safe] (Apply f, Applicative f, Semigroup m, Monoid m) => Point (StoreT m f)
instance [safe] (Apply f, Applicative f) => Point (TracedT t f)
instance [safe] Arrow a => Point (WrappedArrow a b)
instance [safe] (Apply f, Applicative f) => Point (WrappedApplicative f)
instance [safe] Point f => Point (MaybeApply f)
instance [safe] (Apply f, Applicative f) => Point (ListT f)
instance [safe] (Bind f, Monad f) => Point (MaybeT f)
instance [safe] (Apply f, Applicative f) => Point (IdentityT f)
instance [safe] Monad f => Point (WrappedMonad f)
instance [safe] (Semigroup m, Monoid m) => Point (Const m)
instance [safe] (Semigroup m, Monoid m) => Point ((,) m)
instance [safe] Point (Either a)
instance [safe] Point ((->) m)
instance [safe] Point NonEmpty
instance [safe] Point Option
instance [safe] Point Seq
instance [safe] Point Tree
instance [safe] Point Identity
instance [safe] Point Maybe
instance [safe] Point ZipList
instance [safe] Point IO
instance [safe] Point []

module Data.Functor.Point.Syntax
return :: Point f => a -> f a

module Data.Functor.Bind.Syntax
(>>=) :: Bind f => f a -> (a -> f b) -> f b

module Data.Functor.Apply.Syntax
(>>) :: Apply f => f a -> f b -> f b

module Data.Functor.All.Syntax
fail :: Monad m => String -> m a
fromInteger :: Num a => Integer -> a
ifThenElse :: Bool -> a -> a -> a

module Data.Functor.Syntax
