-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | liblinear iteratee.
--   
--   High level bindings to liblinear
--   <a>http://www.csie.ntu.edu.tw/~cjlin/liblinear/</a>.
@package liblinear-enumerator
@version 0.1.2


-- | For a high-level description of the C API, refer to the README file
--   included in the liblinear archive, available for download at
--   <a>http://www.csie.ntu.edu.tw/~cjlin/liblinear/</a>.
module Bindings.LibLinear
data C'feature_node
C'feature_node :: CInt -> CDouble -> C'feature_node
c'feature_node'index :: C'feature_node -> CInt
c'feature_node'value :: C'feature_node -> CDouble
p'feature_node'index :: Ptr (C'feature_node) -> Ptr (CInt)
p'feature_node'value :: Ptr (C'feature_node) -> Ptr (CDouble)
data C'problem
C'problem :: CInt -> CInt -> Ptr CInt -> Ptr (Ptr C'feature_node) -> CDouble -> C'problem
c'problem'l :: C'problem -> CInt
c'problem'n :: C'problem -> CInt
c'problem'y :: C'problem -> Ptr CInt
c'problem'x :: C'problem -> Ptr (Ptr C'feature_node)
c'problem'bias :: C'problem -> CDouble
c'L2R_LR :: Num a => a
c'L2R_L2LOSS_SVC_DUAL :: Num a => a
c'L2R_L2LOSS_SVC :: Num a => a
c'L2R_L1LOSS_SVC_DUAL :: Num a => a
c'MCSVM_CS :: Num a => a
p'problem'l :: Ptr (C'problem) -> Ptr (CInt)
c'L1R_L2LOSS_SVC :: Num a => a
c'L1R_LR :: Num a => a
p'problem'n :: Ptr (C'problem) -> Ptr (CInt)
c'L2R_LR_DUAL :: Num a => a
p'problem'y :: Ptr (C'problem) -> Ptr (Ptr CInt)
p'problem'x :: Ptr (C'problem) -> Ptr (Ptr (Ptr C'feature_node))
p'problem'bias :: Ptr (C'problem) -> Ptr (CDouble)
data C'parameter
C'parameter :: CInt -> CDouble -> CDouble -> CInt -> Ptr CInt -> Ptr CDouble -> C'parameter
c'parameter'solver_type :: C'parameter -> CInt
c'parameter'eps :: C'parameter -> CDouble
c'parameter'C :: C'parameter -> CDouble
c'parameter'nr_weight :: C'parameter -> CInt
c'parameter'weight_label :: C'parameter -> Ptr CInt
c'parameter'weight :: C'parameter -> Ptr CDouble
p'parameter'solver_type :: Ptr (C'parameter) -> Ptr (CInt)
data C'model
C'model :: C'parameter -> CInt -> CInt -> Ptr CDouble -> Ptr CInt -> CDouble -> C'model
c'model'param :: C'model -> C'parameter
c'model'nr_class :: C'model -> CInt
c'model'nr_feature :: C'model -> CInt
c'model'w :: C'model -> Ptr CDouble
c'model'label :: C'model -> Ptr CInt
c'model'bias :: C'model -> CDouble
p'parameter'eps :: Ptr (C'parameter) -> Ptr (CDouble)
p'parameter'C :: Ptr (C'parameter) -> Ptr (CDouble)
c'train :: Ptr C'problem -> Ptr C'parameter -> IO (Ptr C'model)
p'parameter'nr_weight :: Ptr (C'parameter) -> Ptr (CInt)
p'train :: FunPtr (Ptr C'problem -> Ptr C'parameter -> IO (Ptr C'model))
c'cross_validation :: Ptr C'problem -> Ptr C'parameter -> CInt -> Ptr CDouble -> IO ()
p'parameter'weight_label :: Ptr (C'parameter) -> Ptr (Ptr CInt)
p'cross_validation :: FunPtr (Ptr C'problem -> Ptr C'parameter -> CInt -> Ptr CDouble -> IO ())
p'model'param :: Ptr (C'model) -> Ptr (C'parameter)
p'parameter'weight :: Ptr (C'parameter) -> Ptr (Ptr CDouble)
c'save_model :: CString -> Ptr C'model -> IO ()
p'model'nr_class :: Ptr (C'model) -> Ptr (CInt)
p'save_model :: FunPtr (CString -> Ptr C'model -> IO ())
c'load_model :: CString -> IO (Ptr C'model)
p'model'nr_feature :: Ptr (C'model) -> Ptr (CInt)
p'load_model :: FunPtr (CString -> IO (Ptr C'model))
p'model'w :: Ptr (C'model) -> Ptr (Ptr CDouble)
c'get_nr_feature :: Ptr C'model -> IO CInt
c'get_nr_class :: Ptr C'model -> IO CInt
p'model'label :: Ptr (C'model) -> Ptr (Ptr CInt)
p'get_nr_feature :: FunPtr (Ptr C'model -> IO CInt)
c'get_labels :: Ptr C'model -> Ptr CInt -> IO ()
p'get_nr_class :: FunPtr (Ptr C'model -> IO CInt)
p'model'bias :: Ptr (C'model) -> Ptr (CDouble)
p'get_labels :: FunPtr (Ptr C'model -> Ptr CInt -> IO ())
c'predict_values :: Ptr C'model -> Ptr C'feature_node -> Ptr CDouble -> IO CInt
c'predict :: Ptr C'model -> Ptr C'feature_node -> IO CInt
c'predict_probability :: Ptr C'model -> Ptr C'feature_node -> Ptr CDouble -> IO CInt
p'predict_values :: FunPtr (Ptr C'model -> Ptr C'feature_node -> Ptr CDouble -> IO CInt)
p'predict :: FunPtr (Ptr C'model -> Ptr C'feature_node -> IO CInt)
p'predict_probability :: FunPtr (Ptr C'model -> Ptr C'feature_node -> Ptr CDouble -> IO CInt)
c'free_model_content :: Ptr C'model -> IO ()
c'free_and_destroy_model :: Ptr (Ptr C'model) -> IO ()
c'destroy_param :: Ptr C'parameter -> IO ()
p'free_model_content :: FunPtr (Ptr C'model -> IO ())
p'free_and_destroy_model :: FunPtr (Ptr (Ptr C'model) -> IO ())
p'destroy_param :: FunPtr (Ptr C'parameter -> IO ())
c'check_parameter :: Ptr C'problem -> Ptr C'parameter -> IO CString
c'check_probability_model :: Ptr C'model -> IO CInt
p'check_parameter :: FunPtr (Ptr C'problem -> Ptr C'parameter -> IO CString)
p'check_probability_model :: FunPtr (Ptr C'model -> IO CInt)
instance Eq C'feature_node
instance Show C'feature_node
instance Eq C'problem
instance Show C'problem
instance Eq C'parameter
instance Show C'parameter
instance Eq C'model
instance Show C'model
instance Storable C'model
instance Storable C'parameter
instance Storable C'problem
instance Storable C'feature_node

module Data.LibLinear
data Model
Model :: !Target -> (Vector Double) -> Model
data Feature
Feature :: !Int -> !Double -> Feature
data Example
Example :: !Target -> [Feature] -> Example
data Solver
L2R_LR :: Solver
L2R_L2LOSS_SVC_DUAL :: Solver
L2R_L2LOSS_SVC :: Solver
L2R_L1LOSS_SVC_DUAL :: Solver
MCSVM_CS :: Solver
L1R_L2LOSS_SVC :: Solver
L1R_LR :: Solver
L2R_LR_DUAL :: Solver
newtype Target
Target :: Int -> Target
data TrainParams
TrainParams :: Solver -> Int -> Int -> TrainParams
trainSolver :: TrainParams -> Solver
trainExamples :: TrainParams -> Int
trainFeatureSum :: TrainParams -> Int
train :: TrainParams -> Iteratee Example IO [Model]
instance Show Target
instance Eq Target
instance Enum Target
instance Show Model
instance Show Feature
instance Show Example
instance Show TrainParams
