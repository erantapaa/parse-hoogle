-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Educational drawing canvas for FP explorers.
--   
--   This package is an experimental teaching tool that provides the
--   foundation for presenting functional idioms with graphical metaphors.
--   The OpenGL canvas boilerplate is abstracted away to a simple
--   interface, which allows to focus on program logic instead of the
--   graphics API. It's also arguably fun.
@package lambda-canvas
@version 0.1

module Graphics.LambdaCanvas
type Point = (GLfloat, GLfloat)

-- | Specification of the way the vertices given during
--   <tt>renderPrimitive</tt> are interpreted. In the description of the
--   constructors, <i>n</i> is an integer count starting at one, and
--   <i>N</i> is the total number of vertices specified.
data PrimitiveMode :: *

-- | Treats each vertex as a single point. Vertex <i>n</i> defines point
--   <i>n</i>. <i>N</i> points are drawn.
Points :: PrimitiveMode

-- | Treats each pair of vertices as an independent line segment. Vertices
--   2<i>n</i>-1 and 2<i>n</i> define line <i>n</i>. <i>N</i>/2 lines are
--   drawn.
Lines :: PrimitiveMode

-- | Draws a connected group of line segments from the first vertex to the
--   last, then back to the first. Vertices <i>n</i> and <i>n</i>+1 define
--   line <i>n</i>. The last line, however, is defined by vertices <i>N</i>
--   and 1. <i>N</i> lines are drawn.
LineLoop :: PrimitiveMode

-- | Draws a connected group of line segments from the first vertex to the
--   last. Vertices <i>n</i> and <i>n</i>+1 define line <i>n</i>.
--   <i>N</i>-1 lines are drawn.
LineStrip :: PrimitiveMode

-- | Treats each triplet of vertices as an independent triangle. Vertices
--   <i>3n-2</i>, <i>3n-1</i>, and <i>3n</i> define triangle <i>n</i>.
--   <i>N\</i>3/ triangles are drawn.
Triangles :: PrimitiveMode

-- | Draws a connected group of triangles. One triangle is defined for each
--   vertex presented after the first two vertices. For odd <i>n</i>,
--   vertices <i>n</i>, <i>n</i>+1, and <i>n</i>+2 define triangle
--   <i>n</i>. For even <i>n</i>, vertices <i>n</i>+1, <i>n</i>, and
--   <i>n</i>+2 define triangle <i>n</i>. <i>N</i>-2 triangles are drawn.
TriangleStrip :: PrimitiveMode

-- | Draws a connected group of triangles. One triangle is defined for each
--   vertex presented after the first two vertices. Vertices 1, <i>n</i>+1,
--   and <i>n</i>+2 define triangle <i>n</i>. <i>N</i>-2 triangles are
--   drawn.
TriangleFan :: PrimitiveMode

-- | Treats each group of four vertices as an independent quadrilateral.
--   Vertices 4<i>n</i>-3, 4<i>n</i>-2, 4<i>n</i>-1, and 4<i>n</i> define
--   quadrilateral <i>n</i>. <i>N</i>/4 quadrilaterals are drawn.
Quads :: PrimitiveMode

-- | Draws a connected group of quadrilaterals. One quadrilateral is
--   defined for each pair of vertices presented after the first pair.
--   Vertices 2<i>n</i>-1, 2<i>n</i>, 2<i>n</i>+2, and 2<i>n</i>+1 define
--   quadrilateral <i>n</i>. <i>N</i>/2-1 quadrilaterals are drawn. Note
--   that the order in which vertices are used to construct a quadrilateral
--   from strip data is different from that used with independent data.
QuadStrip :: PrimitiveMode

-- | Draws a single, convex polygon. Vertices 1 through <i>N</i> define
--   this polygon.
Polygon :: PrimitiveMode

-- | Create a canvas suitable for animation. The drawing block is invoked
--   on each redisplay and is passed the current timestamp.
animate :: String -> (POSIXTime -> IO ()) -> IO ()

-- | Create a canvas suitable for drawing a static picture. The drawing
--   block is invoked on each redisplay.
draw :: String -> IO () -> IO ()

-- | Draw a primitive from a set of a vertices on screen.
put :: PrimitiveMode -> [Point] -> IO ()

-- | Given an amount of steps and a timestamp, calculate current step
--   number. Step numbers begin with 0.
stepOf :: Num a => Integer -> POSIXTime -> a
