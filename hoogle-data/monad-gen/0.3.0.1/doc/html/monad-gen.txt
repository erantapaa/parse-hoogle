-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A simple monad for generating fresh integers
--   
--   This module provides a simple monad transformer <tt>GenT</tt> to
--   enumerate unique values within a monadic computation. It also plays
--   nicely with everything in the MTL.
@package monad-gen
@version 0.3.0.1

module Control.Monad.Gen.Class

-- | The MTL style class for generating fresh values
class Monad m => MonadGen e m | m -> e
gen :: MonadGen e m => m e
instance (MonadGen e m, Error e') => MonadGen e (ErrorT e' m)
instance (Monoid w, MonadGen e m) => MonadGen e (WriterT w m)
instance MonadGen e m => MonadGen e (StateT s m)
instance (Monoid w, MonadGen e m) => MonadGen e (RWST r w s m)
instance MonadGen e m => MonadGen e (ContT r m)
instance MonadGen e m => MonadGen e (MaybeT m)
instance MonadGen e m => MonadGen e (ListT m)
instance (MonadGen e m, Monoid s) => MonadGen e (WriterT s m)
instance MonadGen e m => MonadGen e (ReaderT s m)
instance MonadGen e m => MonadGen e (StateT s m)
instance MonadGen e m => MonadGen e (IdentityT m)

module Control.Monad.Gen

-- | The monad transformer for generating fresh values.
data GenT e m a
type Gen e = GenT e Identity
data Successor a
successor :: (e -> e) -> Successor e

-- | Run a <tt>GenT</tt> computation starting from the value <tt>toEnum
--   0</tt>
runGenT :: (Enum e, Monad m) => GenT e m a -> m a

-- | Run a <tt>Gen</tt> computation starting from the value <tt>toEnum
--   0</tt>
runGen :: Enum e => Gen e a -> a

-- | Run a <tt>GenT</tt> computation starting from a specific value
--   <tt>e</tt> with a the next fresh value determined by <tt>Successor
--   e</tt>.
runGenTWith :: Monad m => Successor e -> e -> GenT e m a -> m a

-- | Run a <tt>GenT</tt> computation starting from a specific value
--   <tt>e</tt> with a the next fresh value determined by <tt>Successor
--   e</tt>.
runGenWith :: Successor e -> e -> Gen e a -> a

-- | Run a <tt>GenT</tt> computation starting from a specific value
--   <tt>e</tt>.
runGenTFrom :: (Monad m, Enum e) => e -> GenT e m a -> m a

-- | Run a <tt>Gen</tt> computation starting from a specific value
--   <tt>e</tt>.
runGenFrom :: Enum e => e -> Gen e a -> a
instance Functor m => Functor (GenT e m)
instance MonadError e m => MonadError e (GenT e' m)
instance MonadCont m => MonadCont (GenT e m)
instance MonadIO m => MonadIO (GenT e m)
instance MonadFix m => MonadFix (GenT e m)
instance MonadWriter w m => MonadWriter w (GenT e m)
instance MonadState s m => MonadState s (GenT e m)
instance MonadReader r m => MonadReader r (GenT e m)
instance MonadTrans (GenT e)
instance (Monad m, Functor m, MonadPlus m) => Alternative (GenT e m)
instance (Functor f, Monad f) => Applicative (GenT e f)
instance MonadPlus m => MonadPlus (GenT e m)
instance Monad m => Monad (GenT e m)
instance Monad m => MonadGen e (GenT e m)
