-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Lens for IxSet
--   
--   Integrates Data.IxSet with Data.Lens.
@package data-lens-ixset
@version 0.1.4

module Data.Lens.IxSet

-- | Focus on a key in an indexed set, much like with <a>mapLens</a>.
--   
--   Given an <a>IxSet</a> of people:
--   
--   <pre>
--   people = <a>fromList</a> [ Person (FirstName "Edward A.") (LastName "Kmett")
--                     , Person (FirstName "Simon") (LastName "P. Jones")
--                     ]
--   </pre>
--   
--   We can now work with indices using lenses and fix Simon's last name:
--   
--   <pre>
--   people' = <a>ixLens</a> (FirstName "Simon") <a>^%=</a> <a>fmap</a> (lastName <a>^=</a> LastName "Peyton-Jones") <a>$</a> people
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; people'
--   fromList [Person {_firstName = FirstName "Edward A.", _lastName = LastName "Kmett"}
--            ,Person {_firstName = FirstName "Simon", _lastName = LastName "Peyton-Jones"}]
--   
--   &gt;&gt;&gt; (firstName ^$) &lt;$&gt; people' ^. ixLens (LastName "Peyton-Jones")
--   Just (FirstName "Simon")
--   
--   &gt;&gt;&gt; ixLens (LastName "Peyton-Jones") ^$ people
--   Nothing
--   </pre>
--   
--   Perhaps more commonly you're working with an <a>IxSet</a> from inside
--   a state monad such as <tt>Update</tt> from the <tt>acid-state</tt>
--   package. In that case usage is even easier:
--   
--   <pre>
--   changeLastName = <a>ixLens</a> (FirstName "Simon") <tt>%=</tt> <a>fmap</a> (lastName <a>^=</a> LastName "Peyton-Jones")
--   </pre>
--   
--   Here's the missing boilerplate, which also needs the packages
--   <tt>data-lens-fd</tt> and <tt>data-lens-template</tt>:
--   
--   <pre>
--   {-# LANGUAGE DeriveDataTypeable #-}
--   {-# LANGUAGE TemplateHaskell #-}
--   
--   import Data.Data
--   import Data.IxSet
--   import Data.Lens
--   import Data.Lens.IxSet
--   import Data.Lens.Template
--   
--   newtype FirstName = FirstName <a>String</a>
--     deriving (<a>Show</a>, <a>Eq</a>, <a>Ord</a>, <a>Data</a>, <a>Typeable</a>)
--   
--   newtype LastName = LastName <a>String</a>
--     deriving (<a>Show</a>, <a>Eq</a>, <a>Ord</a>, <a>Data</a>, <a>Typeable</a>)
--   
--   data Person = Person { _firstName :: FirstName
--                        , _lastName  :: LastName
--                        } deriving (<a>Show</a>, <a>Eq</a>, <a>Ord</a>, <a>Data</a>, <a>Typeable</a>)
--   
--   makeLens ''Person
--   
--   instance <a>Indexable</a> Person where
--     empty = <a>ixSet</a> [ <a>ixGen</a> (<a>Proxy</a> :: <a>Proxy</a> FirstName)
--                   , <a>ixGen</a> (<a>Proxy</a> :: <a>Proxy</a> LastName)
--                   ]
--   </pre>
ixLens :: (Indexable a, Typeable a, Typeable k, Ord a) => k -> Lens (IxSet a) (Maybe a)
