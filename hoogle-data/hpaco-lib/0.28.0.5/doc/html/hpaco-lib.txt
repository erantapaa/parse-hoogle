-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Modular template compiler library
--   
--   Template compiler library, compiles template code into PHP or
--   Javascript, or interprets it directly.
@package hpaco-lib
@version 0.28.0.5

module Text.HPaco.Writers.Run.Library
loadLibrary :: String -> Variant

module Text.HPaco.Writers.Run.Encode
htmlEncode :: String -> String
urlEncode :: String -> String
encode :: (Char -> Maybe [Char]) -> [Char] -> [Char]
fixHexStr :: String -> String
padLeft :: a -> Int -> [a] -> [a]

module Text.HPaco.Writers.Internal.CodeWriter
type CodeWriter o s a = RWS o String s a
class CodeWriterOptions o
cwoIndent :: CodeWriterOptions o => o -> String
cwoNewline :: CodeWriterOptions o => o -> String
class CodeWriterState s
cwsGetIndent :: CodeWriterState s => s -> Int
cwsSetIndent :: CodeWriterState s => Int -> s -> s
cwsGetFilters :: CodeWriterState s => s -> [Filter]
cwsSetFilters :: CodeWriterState s => [Filter] -> s -> s
runCodeWriterT :: (Monad m, CodeWriterOptions o, CodeWriterState s) => CodeWriterT o s m () -> o -> s -> m String
runCodeWriter :: (CodeWriterOptions o, CodeWriterState s) => CodeWriter o s () -> o -> s -> String
write :: (Monad m, CodeWriterOptions o, CodeWriterState s) => String -> CodeWriterT o s m ()
writeIndent :: (Monad m, CodeWriterOptions o, CodeWriterState s) => CodeWriterT o s m ()
writeIndented :: (Monad m, CodeWriterOptions o, CodeWriterState s) => String -> CodeWriterT o s m ()
writeLn :: (Monad m, CodeWriterOptions o, CodeWriterState s) => String -> CodeWriterT o s m ()
endl :: (Monad m, CodeWriterOptions o, CodeWriterState s) => CodeWriterT o s m ()
pushIndent :: (Monad m, CodeWriterOptions o, CodeWriterState s) => CodeWriterT o s m ()
popIndent :: (Monad m, CodeWriterOptions o, CodeWriterState s) => CodeWriterT o s m ()
pushFilter :: (Monad m, CodeWriterOptions o, CodeWriterState s) => (String -> String) -> CodeWriterT o s m ()
popFilter :: (Monad m, CodeWriterOptions o, CodeWriterState s) => CodeWriterT o s m ()
withIndent :: (Monad m, CodeWriterOptions o, CodeWriterState s) => CodeWriterT o s m a -> CodeWriterT o s m a
withFilter :: (Monad m, CodeWriterOptions o, CodeWriterState s) => (String -> String) -> CodeWriterT o s m a -> CodeWriterT o s m a
withParens :: (Monad m, CodeWriterOptions o, CodeWriterState s) => CodeWriterT o s m a -> CodeWriterT o s m a
withBrackets :: (Monad m, CodeWriterOptions o, CodeWriterState s) => CodeWriterT o s m a -> CodeWriterT o s m a
withBraces :: (Monad m, CodeWriterOptions o, CodeWriterState s) => CodeWriterT o s m a -> CodeWriterT o s m a
withParensLn :: (Monad m, CodeWriterOptions o, CodeWriterState s) => CodeWriterT o s m a -> CodeWriterT o s m a
withBracketsLn :: (Monad m, CodeWriterOptions o, CodeWriterState s) => CodeWriterT o s m a -> CodeWriterT o s m a
withBracesLn :: (Monad m, CodeWriterOptions o, CodeWriterState s) => CodeWriterT o s m a -> CodeWriterT o s m a

module Text.HPaco.Writers.Internal.WrapMode
data WrapMode
WrapNone :: WrapMode
WrapFunction :: WrapMode
WrapClass :: WrapMode
instance Eq WrapMode

module Text.HPaco.Readers.Common
type Parser s a = ParsecT String s IO a
ss :: a -> Parser s a
ss_ :: Parser s ()
discard :: Parser s a -> Parser s ()
tryDiscard :: Parser s a -> Parser s ()
manySepBy :: Parser s a -> Parser s b -> Parser s [a]
braces :: Parser s a -> Parser s a
identifier :: Parser s String
path :: Parser s String
anyQuotedString :: ParsecT String u IO [Char]
singleQuotedString :: ParsecT String u IO [Char]
doubleQuotedString :: ParsecT String u IO [Char]
assertStartOfInput :: Parser s ()
assertStartOfLine :: Parser s ()
assertEndOfWord :: Parser s ()
assertEndOfOperator :: Parser s ()
keyword :: String -> Parser s ()
operatorKeyword :: String -> Parser s ()

module Text.HPaco.AST.Identifier
type Identifier = String

module Text.HPaco.AST.Expression
data Expression
StringLiteral :: String -> Expression
BooleanLiteral :: Bool -> Expression
IntLiteral :: Integer -> Expression
FloatLiteral :: Double -> Expression
ListExpression :: [Expression] -> Expression
AListExpression :: [(Expression, Expression)] -> Expression
VariableReference :: String -> Expression
EscapeExpression :: EscapeMode -> Expression -> Expression
TernaryExpression :: Expression -> Expression -> Expression -> Expression
BinaryExpression :: BinaryOperator -> Expression -> Expression -> Expression
UnaryExpression :: UnaryOperator -> Expression -> Expression
FunctionCallExpression :: Expression -> [Expression] -> Expression
data EscapeMode
EscapeHTML :: EscapeMode
EscapeURL :: EscapeMode
data UnaryOperator
OpNot :: UnaryOperator
data BinaryOperator
OpEquals :: BinaryOperator
OpNotEquals :: BinaryOperator
OpLooseEquals :: BinaryOperator
OpLooseNotEquals :: BinaryOperator
OpGreater :: BinaryOperator
OpLess :: BinaryOperator
OpNotGreater :: BinaryOperator
OpNotLess :: BinaryOperator
OpPlus :: BinaryOperator
OpMinus :: BinaryOperator
OpMul :: BinaryOperator
OpDiv :: BinaryOperator
OpMod :: BinaryOperator
OpMember :: BinaryOperator
OpBooleanAnd :: BinaryOperator
OpBooleanOr :: BinaryOperator
OpBooleanXor :: BinaryOperator
OpInList :: BinaryOperator
OpConcat :: BinaryOperator
OpCoalesce :: BinaryOperator
Flipped :: BinaryOperator -> BinaryOperator
instance Show EscapeMode
instance Eq EscapeMode
instance Show UnaryOperator
instance Eq UnaryOperator
instance Show BinaryOperator
instance Eq BinaryOperator
instance Show Expression
instance Eq Expression

module Text.HPaco.AST.Statement
data Statement
NullStatement :: Statement
SourcePositionStatement :: FilePath -> Int -> Statement
StatementSequence :: [Statement] -> Statement
PrintStatement :: Expression -> Statement
IfStatement :: Expression -> Statement -> Statement -> Statement
LetStatement :: Identifier -> Expression -> Statement -> Statement
ForStatement :: (Maybe Identifier) -> Identifier -> Expression -> Statement -> Statement
CallStatement :: Identifier -> Statement
SwitchStatement :: Expression -> [(Expression, Statement)] -> Statement
instance Show Statement
instance Eq Statement

module Text.HPaco.Readers.Paco.Expressions
expression :: ParsecT String s IO Expression

module Text.HPaco.AST.AST
type Def = (Identifier, Statement)
data AST
AST :: Statement -> [Def] -> [String] -> AST
astRootStatement :: AST -> Statement
astDefs :: AST -> [Def]
astDeps :: AST -> [String]
defAST :: AST
walkStatement :: (Statement -> Maybe a) -> Statement -> [a]
mapStatement :: (Statement -> Maybe Statement) -> Statement -> Statement
instance Show AST

module Text.HPaco.Writers.Dependencies
writeDependencies :: String -> AST -> String

module Text.HPaco.AST
data Expression
data Statement
data AST

module Text.HPaco.Writers.Run
run :: RunOptions -> AST -> IO ()
runWith :: ToVariant a => a -> RunOptions -> AST -> IO ()
data RunState
RunState :: Variant -> RunOptions -> AST -> RunState
rsScope :: RunState -> Variant
rsOptions :: RunState -> RunOptions
rsAST :: RunState -> AST
data RunOptions
RunOptions :: String -> Handle -> RunOptions
roTemplateName :: RunOptions -> String
roOutput :: RunOptions -> Handle
defaultOptions :: RunOptions
runAST :: AST -> Run ()
runStatement :: Statement -> Run ()
runExpression :: Expression -> Run Variant

module Text.HPaco.Reader
type Reader = SourceName -> String -> IO AST

module Text.HPaco.Readers.Paco.ParserInternals
data PacoState
PacoState :: FilePath -> [(String, Statement)] -> [String] -> Maybe String -> Reader -> PacoFlavor -> PacoState
psBasePath :: PacoState -> FilePath
psDefs :: PacoState -> [(String, Statement)]
psDeps :: PacoState -> [String]
psIncludeExtension :: PacoState -> Maybe String
psHandleInclude :: PacoState -> Reader
psFlavor :: PacoState -> PacoFlavor
defaultPacoState :: PacoState
data PacoFlavor
PacoFlavor :: (String, String) -> (String, String) -> (String, String) -> PacoFlavor
pfCommentMarkers :: PacoFlavor -> (String, String)
pfInterpolationMarkers :: PacoFlavor -> (String, String)
pfTagMarkers :: PacoFlavor -> (String, String)
defaultPacoFlavor :: PacoFlavor
jinjaPacoFlavor :: PacoFlavor
cssPacoFlavor :: PacoFlavor

-- | The abstract data type <tt>ParseError</tt> represents parse errors. It
--   provides the source position (<a>SourcePos</a>) of the error and a
--   list of error messages (<a>Message</a>). A <tt>ParseError</tt> can be
--   returned by the function <a>parse</a>. <tt>ParseError</tt> is an
--   instance of the <a>Show</a> class.
data ParseError :: *
type Parser a = ParsecT String PacoState IO a
addDef :: String -> Statement -> Parser ()
resolveDef :: String -> Parser Statement
fillExtension :: FilePath -> String -> FilePath
instance Typeable ParseError
instance Exception ParseError

module Text.HPaco.Readers.Paco.Basics

module Text.HPaco.Readers.Paco.Include
performInclude :: String -> Maybe (Identifier, Expression) -> Parser Statement

module Text.HPaco.Readers.Capo.Statements
statements :: Parser [Statement]
statement :: ParsecT String PacoState IO Statement

module Text.HPaco.Readers.Paco.Statements
statements :: Parser [Statement]
statement :: Parser Statement

module Text.HPaco.Readers.Paco
readPaco :: Reader
readCapo :: Reader
readPaco' :: PacoFlavor -> Reader
readCapo' :: PacoFlavor -> Reader
data PacoFlavor
PacoFlavor :: (String, String) -> (String, String) -> (String, String) -> PacoFlavor
pfCommentMarkers :: PacoFlavor -> (String, String)
pfInterpolationMarkers :: PacoFlavor -> (String, String)
pfTagMarkers :: PacoFlavor -> (String, String)
defaultPacoFlavor :: PacoFlavor
jinjaPacoFlavor :: PacoFlavor
cssPacoFlavor :: PacoFlavor

module Text.HPaco.Writer
type Writer = AST -> String
data WriterOptions
WriterOptions :: Bool -> String -> String -> Bool -> WrapMode -> Bool -> String -> Bool -> WriterOptions
woPrettyPrint :: WriterOptions -> Bool
woIndentStr :: WriterOptions -> String
woTemplateName :: WriterOptions -> String
woIncludePreamble :: WriterOptions -> Bool
woWrapMode :: WriterOptions -> WrapMode
woExposeAllFunctions :: WriterOptions -> Bool
woWriteFunc :: WriterOptions -> String
woSourcePositionComments :: WriterOptions -> Bool
defaultWriterOptions :: WriterOptions
instance Show WriterError
instance CodeWriterOptions WriterOptions

module Text.HPaco.Writers.Javascript
writeJavascript :: WriterOptions -> Writer
defJsWriterOptions :: WriterOptions
data WrapMode
WrapNone :: WrapMode
WrapFunction :: WrapMode
WrapClass :: WrapMode
instance CodeWriterState JavascriptWriterState

module Text.HPaco.Writers.JsonLisp
writeJsonLisp :: Writer
instance ToJSON AST
instance ToJSON (String, Statement)
instance ToJSON Statement
instance ToJSON Expression

module Text.HPaco.Writers.PHP
writePHP :: WriterOptions -> Writer
defPHPWriterOptions :: WriterOptions
data WrapMode
WrapNone :: WrapMode
WrapFunction :: WrapMode
WrapClass :: WrapMode
instance CodeWriterState PHPWriterState

module Text.HPaco.Optimizer
optimize :: AST -> AST
expandDefs :: AST -> AST
optimizeASTDefs :: AST -> AST
optimizeASTStatements :: AST -> AST
optimizeStatement :: Statement -> Statement
fusePrints :: [Statement] -> [Statement]
optimizeExpression :: Expression -> Expression
isConst :: Expression -> Bool
evaluateConstExpression :: Expression -> Expression
fromVariant :: Variant -> Expression
