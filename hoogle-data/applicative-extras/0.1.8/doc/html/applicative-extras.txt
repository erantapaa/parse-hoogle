-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Instances for Applicative
--   
--   Some instances for applicative functors and type-level composition.
--   Forkable on github.
@package applicative-extras
@version 0.1.8

module Control.Applicative.Backwards
newtype Backwards t a
Backwards :: t a -> Backwards t a
forwards :: Backwards t a -> t a
instance Traversable t => Traversable (Backwards t)
instance Foldable t => Foldable (Backwards t)
instance Applicative t => Applicative (Backwards t)
instance Functor t => Functor (Backwards t)

module Control.Applicative.Error

-- | An error idiom. Rather like the error monad, but collect all | errors
--   together
data Failing a
Success :: a -> Failing a
Failure :: [ErrorMsg] -> Failing a
type ErrorMsg = String
maybeRead :: Read a => String -> Maybe a

-- | Tries to read a value. Shows an error message when reading fails.
maybeRead' :: Read a => String -> String -> Failing a

-- | Tries to read an Integer
asInteger :: String -> Failing Integer

-- | Tries conversion to an enum
tryToEnum :: Enum a => Int -> Failing a
instance Show a => Show (Failing a)
instance Alternative Failing
instance Applicative Failing
instance Functor Failing

module Control.Applicative.Compose

-- | Type-level composition
newtype (:+:) f g a
Compose :: (f (g a)) -> :+: f g a
decompose :: :+: f g a -> (f (g a))
instance (Applicative f, Applicative g) => Applicative (f :+: g)
instance (Functor f, Functor g) => Functor (f :+: g)
