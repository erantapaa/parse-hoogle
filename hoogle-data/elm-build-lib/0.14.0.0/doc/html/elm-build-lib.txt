-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Compile Elm code to JS within Haskell
--   
--   This library provides both runtime and Template Haskell functions
--   which let you take multi-module Elm Programs and compile them to
--   JavaScript. The main goal of this is to allow Elm to be used as a
--   frontend for Haskell servers or Web apps. The library is independent
--   of any specific framework, so it should work with Yesod, Snap,
--   Happstack, Scotty, etc.
@package elm-build-lib
@version 0.14.0.0


-- | This library provides both runtime and Template Haskell functions
--   which let you take multi-module Elm Programs and compile them to
--   JavaScript. The main goal of this is to allow Elm to be used as a
--   frontend for Haskell servers or Web apps. The library is independent
--   of any specific framework, so it should work with Yesod, Snap,
--   Happstack, Scotty, etc.
module Language.Elm.Build

-- | Given a list of strings containing the source code for elm modules,
--   return a dictionary mapping names to their compiled JavaScript source.
--   (This allows you to staticaly serve commonly used modules, such as the
--   runtime). The runtime is included in this dictionary, with the key
--   "Elm.Native.Runtime". Gives a string error in the event of failure.
compileAll :: [String] -> Either String (Map Name String)

-- | Bundle the result of compilation into a single, standalone, JavaScript
--   source file, including the Elm-runtime and the Elm header
standalone :: (Map Name String) -> String

-- | Add the JavaScript header which initializes the Elm object and allows
--   sources to work together.
addHeader :: String -> String

-- | Derives the Template Haskell String literal correspondeing to the
--   compiled and linked JavaScript from compiling the given modules. For
--   example:
--   
--   <pre>
--   {-# LANGUAGE TemplateHaskell #-}
--   myElmJS :: String
--   myElmJS = $(deriveElmJS [myElmMain, someElmHelperLib])
--   </pre>
--   
--   The main use of this is to ensure that your Elm code is compiled into
--   JavaScript at the same time your Haskell code is compiled.
deriveElmJS :: [String] -> ExpQ

-- | Derives the Template Haskell String literal correspondeing to the
--   compiled and linked JavaScript for a given module For example:
--   
--   <pre>
--   {-#Language QuasiQuotes#-}
--   myElmJS :: String
--   myElmJS = [elmQuasi|
--       module Main where
--      x = 3
--   |]
--   </pre>
--   
--   This function is useful for small code snippets, but when dealing with
--   multi-module Elm projects, deriveElmJS should be used. Note that the
--   elm code is compiled to JS at when your Haskell code is compiled.
elmQuasi :: QuasiQuoter

-- | Given a list of strings containing the source code for elm modules,
--   compile the modules and bundle the result of compilation into a
--   single, standalone, JavaScript source file, including the Elm-runtime
--   and the Elm header. Gives a string error in the event of failure.
compileAndLinkAll :: [String] -> Either String String
