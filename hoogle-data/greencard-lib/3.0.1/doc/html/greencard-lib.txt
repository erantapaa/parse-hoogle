-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A foreign function interface pre-processor library for Haskell
--   
--   Green Card is a foreign function interface preprocessor for Haskell,
--   simplifying the task of interfacing Haskell programs to external
--   libraries (which are normally exposed via C interfaces).
--   
--   This package provides the Foreign.GreenCard library; the greencard
--   binary is packaged separately.
@package greencard-lib
@version 3.0.1

module Foreign.GreenCard
type MbString = Maybe String
marshall_bool_ :: Bool -> IO Int
unmarshall_bool_ :: Int -> IO Bool
marshall_string_ :: [Char] -> IO CString
unmarshall_string_ :: CString -> IO String
marshall_stringLen_ :: [Char] -> IO CStringLen
unmarshall_stringLen_ :: CString -> Int -> IO String

-- | Single-precision floating point numbers. It is desirable that this
--   type be at least equal in range and precision to the IEEE
--   single-precision type.
data Float :: *

-- | Double-precision floating point numbers. It is desirable that this
--   type be at least equal in range and precision to the IEEE
--   double-precision type.
data Double :: *

-- | The character type <a>Char</a> is an enumeration whose values
--   represent Unicode (or equivalently ISO/IEC 10646) characters (see
--   <a>http://www.unicode.org/</a> for details). This set extends the ISO
--   8859-1 (Latin-1) character set (the first 256 charachers), which is
--   itself an extension of the ASCII character set (the first 128
--   characters). A character literal in Haskell has type <a>Char</a>.
--   
--   To convert a <a>Char</a> to or from the corresponding <a>Int</a> value
--   defined by Unicode, use <tt>Prelude.toEnum</tt> and
--   <tt>Prelude.fromEnum</tt> from the <tt>Prelude.Enum</tt> class
--   respectively (or equivalently <tt>ord</tt> and <tt>chr</tt>).
data Char :: *
