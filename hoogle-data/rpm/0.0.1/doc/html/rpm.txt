-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Cozy little project to question unruly rpm packages.
--   
--   RPM is a decent system for listing dependencies among packages. In its
--   simplest form it works quite well. Dependency management can become
--   troublesome if you have a system that provides numerous packages.
--   Worse yet, if you provide many packages for many different versions of
--   a software application. This library aims to provide a rich set of
--   combinators to assert the validity of a collection of RPMs.
@package rpm
@version 0.0.1


-- | This module is responsible for generating a XML representation of a
--   Rpm.
module System.Rpm.Xml

-- | <a>executeRpm2Xml</a> takes a path to an RPM package and generates an
--   XML representation in the form of a string.
executeRpm2Xml :: FilePath -> IO (Maybe String)


-- | This module is mainly for internal purposes and these functions should
--   not be called directly. -- Remove <tt>testName</tt>
module System.Rpm.Info
data RpmInfo
RpmI :: String -> String -> Integer -> String -> String -> Integer -> String -> String -> RpmInfo
name :: RpmInfo -> String
buildHost :: RpmInfo -> String
buildTime :: RpmInfo -> Integer
description :: RpmInfo -> String
summary :: RpmInfo -> String
size :: RpmInfo -> Integer
version :: RpmInfo -> String
release :: RpmInfo -> String
rpmInfoFromFile :: FilePath -> IO (Maybe RpmInfo)
rpmInfoFromXml :: String -> Maybe RpmInfo
instance Show RpmInfo
instance Eq RpmInfo


-- | <tt>System.Rpm.Combinators</tt> provides a mechanism for comparing
--   attributes of an Rpm against some sort of specification.
module System.Rpm.Combinators
type Rpm a = RpmInfo -> a

-- | A predicate type that takes an <a>RpmInfo</a> datatype and returns a
--   value of Bool depending on its evaluation.
type RpmP = Rpm Bool

-- | The <a>zeroP</a> combinator, much like the <a>oneP</a> combinator, is
--   more for completeness than anything.
zeroP :: RpmP
oneP :: RpmP

-- | <tt>notP</tt> is used to negate its <a>RpmP</a> when run.
notP :: RpmP -> RpmP
(.==.) :: Eq a => Rpm a -> a -> RpmP
(./=.) :: Eq a => Rpm a -> a -> RpmP
(.<=.) :: Ord a => Rpm a -> a -> RpmP
(.<.) :: Ord a => Rpm a -> a -> RpmP
(.>=.) :: Ord a => Rpm a -> a -> RpmP
(.>.) :: Ord a => Rpm a -> a -> RpmP

-- | This is a logical combinator used for constructing more complex
--   sequences of combinators by requiring both predicates to be true.
(.&&.) :: RpmP -> RpmP -> RpmP

-- | This is a logical combinator used for constructing more complex
--   sequences of combinators by requiring one of the predicates to be
--   true.
(.||.) :: RpmP -> RpmP -> RpmP
