-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Infernal covariance model comparison
--   
--   Compares two Infernal covariance models. Returns the common MaxiMin
--   score and the offending RNA sequence. High scores point toward low
--   discriminative power of the two models. Based on:
--   
--   <a>Christian Höner zu Siederdissen, and Ivo L. Hofacker. 2010.
--   Discriminatory power of RNA family models. Bioinformatics 26, no. 18:
--   453–59</a>
--   
--   
--   <a>http://bioinformatics.oxfordjournals.org/content/26/18/i453.long</a>
@package CMCompare
@version 0.0.1.5


-- | This program compares two Infernal covariance models with each other.
--   Based on the Infernal CM scoring mechanism, a Link sequence and Link
--   score are calculated. The Link sequence is defined as the sequence
--   scoring highest in both models simultanuously.
--   
--   The complete algorithm is described in:
--   
--   <a>Christian Höner zu Siederdissen, and Ivo L. Hofacker. 2010.
--   Discriminatory power of RNA family models. Bioinformatics 26, no. 18:
--   453–59.</a>
--   
--   
--   <a>http://bioinformatics.oxfordjournals.org/content/26/18/i453.long</a>
--   
--   NOTE always use coverage analysis to find out, if we really used all
--   code paths (in long models, if a path is not taken, there is a bug)
module BioInf.CMCompare

-- | Type of the optimization functions.
type Opt a = (CM -> StateID -> a, CM -> StateID -> BitScore -> a -> a, CM -> StateID -> BitScore -> a -> a, CM -> StateID -> BitScore -> a -> a, CM -> StateID -> BitScore -> (Char, Char, BitScore) -> a -> a, CM -> StateID -> BitScore -> (Char, BitScore) -> a -> a, CM -> StateID -> BitScore -> (Char, BitScore) -> a -> a, CM -> StateID -> BitScore -> (Char, BitScore) -> a -> a, CM -> StateID -> BitScore -> (Char, BitScore) -> a -> a, CM -> StateID -> a -> a -> a, [(a, a)] -> [(a, a)], a -> String)

-- | Calculates the cyk optimal score over both models.
cykMaxiMin :: Opt BitScore

-- | Return the nucleotide sequence leading to the score. uses an optional
--   endmarker to denote end states. the string is the same for both
--   models. this is the only Opt function, currently, for which this is
--   true.
rnaString :: Bool -> Opt [Char]

-- | Dotbracket notation, again with an endmarker, to see the secondary
--   structure corresponding to the rnastring.
dotBracket :: Bool -> Opt String

-- | Show the nodes which were visited to get the score. the last node can
--   occur multiple times. if it does, local end transitions were used.
visitedNodes :: Opt [NodeID]

-- | Detailed output of the different states, that were visited.
extendedOutput :: Opt String

-- | Algebra product operation.
(<*>) :: Eq a => Opt a -> Opt b -> Opt (a, b)

-- | Recursion in two CMs simultanously.
recurse :: Bool -> Opt a -> CM -> CM -> Array (StateID, StateID) [(a, a)]
