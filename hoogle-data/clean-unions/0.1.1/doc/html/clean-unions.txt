-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Open unions without need for Typeable
--   
@package clean-unions
@version 0.1.1

module Data.OpenUnion1.Clean

-- | An uninhabited union.
type Nil = Union Empty

-- | Append a new element to a union.

-- | Poly-kinded list
data List a
Empty :: List a
(:>) :: a -> List a -> List a

-- | Constraint <tt>f ∈ s</tt> indicates that <tt>f</tt> is an element of a
--   type-level list <tt>s</tt>.
class (∈) f s | s -> f
type Member f s = f ∈ s

-- | Lift some value into a union.
liftU :: f ∈ s => f a -> Union s a

-- | Type-level inclusion characterized by <a>reunion</a>.
class (⊆) s t
reunion :: (⊆) s t => Union s a -> Union t a
type Include s t = s ⊆ t

-- | Traversal for a specific element
picked :: (f ∈ s, Applicative g) => (f a -> g (f a)) -> Union s a -> g (Union s a)
hoistU :: f ∈ s => (f a -> f a) -> Union s a -> Union s a

-- | Perform type-safe matching.
(||>) :: (f x -> r) -> (Union s x -> r) -> (Union (f :> s) x -> r)
exhaust :: Nil x -> r
simply :: (f a -> r) -> ((f |> Nil) a -> r)
retractU :: f ∈ s => Union s a -> Maybe (f a)
instance [overlap ok] 'Empty ⊆ t
instance [overlap ok] (f ∈ t, s ⊆ t) => (f ':> s) ⊆ t
instance [overlap ok] Applicative (C a)
instance [overlap ok] Functor (C a)
instance [overlap ok] Applicative Id
instance [overlap ok] Functor Id
instance [overlap ok] f ∈ s => f ∈ (g ':> s)
instance [overlap ok] f ∈ (f ':> s)
instance [overlap ok] (Functor f, Functor (Union s)) => Functor (Union (f ':> s))
instance [overlap ok] Functor (Union 'Empty)
