-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Visualize live Haskell data structures using vacuum, graphviz and OpenGL.
--   
--   Visualize live Haskell data structures using vacuum, graphviz and
--   OpenGL. Intended as an easier-to-build alternative (no large
--   dependency chain) to vacuum-cairo. Because of severe problems with
--   GHCi+GLUT, it is implemented using a client-server architecture.
@package vacuum-opengl
@version 0.0.3


-- | Since GLUT+GHCi is problematic at best, after some very frustating
--   experiments I decided on a client-server architecture.
--   
--   Usage example:
--   
--   <pre>
--   $ vacuum-opengl-server &amp;
--   vacuum-opengl server started - press ESC to exit. 
--   listening on port 55961
--   
--   $ ghci
--   Prelude&gt; :m + System.Vacuum.OpenGL 
--   Prelude System.Vacuum.OpenGL&gt; view [1..5]
--   Prelude System.Vacuum.OpenGL&gt; view $ zip "foobar" [1..6]
--   Prelude System.Vacuum.OpenGL&gt; :m + Data.Set
--   Prelude System.Vacuum.OpenGL Data.Set&gt; view $ fromList [1..10]
--   </pre>
--   
--   Note:
--   
--   <ul>
--   <li>we need the graphviz executable (called "dot") being in the
--   path.</li>
--   <li>we need the server running</li>
--   <li>the image generated by graphviz may be bigger than the maximum
--   texture size your video card supports (eg. 2048). In this case you
--   will see a white rectangle. TODO: handle this better.</li>
--   </ul>
--   
--   TODO:
--   
--   <ul>
--   <li>zooming &amp; panning with mouse</li>
--   <li>nicer graph labels</li>
--   </ul>
module System.Vacuum.OpenGL.Client
view :: a -> IO ()
changePort :: Int -> IO ()
changeHost :: String -> IO ()

module System.Vacuum.OpenGL
