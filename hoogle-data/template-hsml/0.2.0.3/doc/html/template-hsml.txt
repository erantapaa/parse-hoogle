-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell's Simple Markup Language
--   
--   HSML syntax is very similar to that of XML, but there are less rules.
--   The main advantage over plain XML or HTML is that it allows you to
--   embed Haskell declarations and expression directly into your template.
--   The main advantage over something like Blaze is that it saves you the
--   overhead of using Blaze's combinators. It's also relatively easy to
--   port your existing plain HTML templates into HSML (most of the times,
--   cut &amp; paste will suffice). For examples, see the examples
--   directory.
@package template-hsml
@version 0.2.0.3


-- | <tt>HSML</tt> is simple templating system with syntax similar to XML
--   that lets you embed Haskell expressions and declarations inside your
--   templates. Apart from that, it also lets you specify argumets for your
--   templates, thanks to that, templates can be mostly self-contained.
--   
--   This is the syntax, with some of the details left out:
--   
--   <pre>
--   syntax = { argument }, { chunk } ;
--   chunk = text | text_raw | element_node | element_leaf | haskell ;
--   argument = "{a|" ? argument name ?, [ "::" ? type ? ] "|}" ;
--   
--   text = ? all characters except \'&lt;\' and \'{\' which have to be escaped ? ;
--   text_raw = "{r|" ? all characters, the sequence can not contain \"|}\" substring ? "|}" ;
--   element_node = "&lt;" element_name { attribute } "&gt;" { chunk } "&lt;/" element_name "&gt;" ;
--   element_leaf = "&lt;" element_name { attribute } "/&gt;" ;
--   haskell = "{h|" expression | declaration "|}" ;
--   
--   attribute = attribute_exp | attribute_normal
--   attribute_exp = "{h|" expression "|}"
--   attribute_normal = attribute_name "=" attribute_value ;
--   attribute_name = ? classic attribute name ? | "{h|" expression "|}" ;
--   attribute_value = ? classic attribute value ? | "{h| expression "|}" ;
--   
--   expression = ? Haskell expression not containing \"|}\" as a substring ? ;
--   declaration = ? Haskell declaration not containing \"|}\" as a substring ? ;
--   </pre>
--   
--   Example (Main.hs):
--   
--   <pre>
--   {-# LANGUAGE TemplateHaskell #-}
--   {-# LANGUAGE QuasiQuotes     #-}
--   {-# LANGUAGE RecordWildCards #-}
--   
--   ------------------------------------------------------------------------------
--   import           Data.Monoid ((&lt;&gt;))
--   ------------------------------------------------------------------------------
--   import           Control.Monad
--   ------------------------------------------------------------------------------
--   import qualified Text.Blaze.Html5 as B
--   ------------------------------------------------------------------------------
--   import           Template.HSML
--   ------------------------------------------------------------------------------
--   
--   data User = User
--       { userID :: Int
--       , userName :: String
--       , userAge :: Int
--       }
--   
--   $(hsmlFileWith (defaultOptions "Default") "default_layout.hsml")
--   
--   homeTemplate :: [User] -&gt; B.Markup
--   homeTemplate users = renderTemplate Default
--       { defaultTitle = "Home page"
--       , defaultSectionMiddle = middle
--       , defaultSectionFooter = [m| &lt;p&gt;Generated by HSML&lt;/p&gt; |]
--       }
--       where
--         middle = [m|
--           &lt;ul class="users"&gt;
--             {h| forM_ users wrap |}
--           &lt;/ul&gt; |]
--         wrap u = [m|&lt;li&gt; {h| userTemplate u |} &lt;/li&gt;|]
--   
--   userTemplate :: User -&gt; B.Markup
--   userTemplate User{..} = [m|
--     &lt;ul class={h| "user-" &lt;&gt; show userID |}&gt;
--       &lt;li&gt;Name: {h|userName|}&lt;/li&gt;
--       &lt;li&gt;Age: {h|userAge|}&lt;/li&gt;
--     &lt;/ul&gt; |]
--   </pre>
--   
--   Example (default_layout.hsml):
--   
--   <pre>
--   {a| title :: String |}
--   {a| sectionMiddle :: B.Markup |}
--   {a| sectionFooter :: B.Markup |}
--   
--   {h| B.docType |}
--   
--   &lt;html lang="en"&gt;
--     &lt;head&gt;
--       &lt;meta charset="utf-8"/&gt;
--       &lt;title&gt;{h|title|}&lt;/title&gt;
--     &lt;/head&gt;
--   
--     &lt;body&gt;
--       &lt;div class="section middle"&gt;
--         {h|sectionMiddle|}
--       &lt;/div&gt;
--   
--       &lt;footer&gt;
--         {h|sectionFooter|}
--       &lt;/footer&gt;
--     &lt;/body&gt;
--   &lt;/html&gt;
--   </pre>
--   
--   Result of <tt>renderMarkup $ homeTemplate [User 1 <a>Jon Doe</a> 16,
--   User 2 <a>Jane Roe</a> 17]</tt>:
--   
--   <pre>
--   &lt;!DOCTYPE HTML&gt;
--   &lt;html lang="en"&gt;
--     &lt;head&gt;
--       &lt;meta charset="utf-8"&gt;
--       &lt;title&gt;Home page&lt;/title&gt;
--     &lt;/head&gt;
--   
--     &lt;body&gt;
--       &lt;div class="section middle"&gt;
--         &lt;ul class="users"&gt;
--           &lt;li&gt;
--             &lt;ul class="user-1"&gt;
--               &lt;li&gt;Name: Jon Doe&lt;/li&gt;
--               &lt;li&gt;Age: 16&lt;/li&gt;
--             &lt;/ul&gt;
--           &lt;/li&gt;
--           &lt;li&gt;
--             &lt;ul class="user-2"&gt;
--               &lt;li&gt;Name: Jane Roe&lt;/li&gt;
--               &lt;li&gt;Age: 17&lt;/li&gt;
--             &lt;/ul&gt;
--           &lt;/li&gt;
--         &lt;/ul&gt;
--       &lt;/div&gt;
--   
--       &lt;footer&gt;
--         &lt;p&gt;Generated by HSML&lt;/p&gt;
--       &lt;/footer&gt;
--     &lt;/body&gt;
--   &lt;/html&gt;
--   </pre>
module Template.HSML

-- | QuasiQuoter for Simplified HSML expressions with default options. See
--   <a>defaulOptionsS</a> for details.
--   
--   Example:
--   
--   <pre>
--   example :: Blaze.Text.Markup
--   example = [hsml|
--     &lt;h1&gt;Page Title&lt;/h1&gt;
--     &lt;p&gt;
--       Some interesting paragraph.
--     &lt;/p&gt;
--     |]
--   </pre>
hsml :: QuasiQuoter

-- | The same as <a>hsml</a>.
--   
--   Example:
--   
--   <pre>
--   example :: Blaze.Text.Markup
--   example = [m|
--     &lt;h1&gt;Page Title&lt;/h1&gt;
--     &lt;p&gt;
--       Some interesting paragraph.
--     &lt;/p&gt;
--     |]
--   </pre>
m :: QuasiQuoter

-- | Parses HSML document string with the given options. Results in record
--   type and its <a>IsTemplate</a> instance.
--   
--   Example:
--   
--   <pre>
--   $(hsmlStringWith (defaultOptions "MyTemplate") "&lt;p&gt;Paragraph&lt;/p&gt;")
--   </pre>
hsmlStringWith :: Options -> String -> Q [Dec]

-- | Parses HSML document from string with default options. Results in
--   record type and its <a>IsTemplate</a> instance.
--   
--   Example:
--   
--   <pre>
--   $(hsmlString "MyTemplate" "&lt;p&gt;Paragraph&lt;/p&gt;")
--   </pre>
hsmlString :: String -> String -> Q [Dec]

-- | Parses HSML document from file with the given options. Results in
--   record type and its <a>IsTemplate</a> instance.
--   
--   Example:
--   
--   <pre>
--   $(hsmlFileWith (defaultOptions "MyTemplate") "my_template.hsml")
--   </pre>
hsmlFileWith :: Options -> FilePath -> Q [Dec]

-- | Parses HSML document from file with default options. Results in record
--   type and its <a>IsTemplate</a> instance.
--   
--   Example:
--   
--   <pre>
--   $(hsmlFile "MyTemplate" "my_template.hsml")
--   </pre>
hsmlFile :: String -> FilePath -> Q [Dec]

-- | Parses Simplified HSML document from string with the given options.
--   Results in expression of type <a>Markup</a>.
--   
--   Example:
--   
--   <pre>
--   example :: Text.Blaze.Markup
--   example = $(shsmlStringWith defaultOptionsS "&lt;p&gt;Paragraph&lt;/p&gt;")
--   </pre>
shsmlStringWith :: Options -> String -> ExpQ

-- | Parses Simplified HSML document from string with default options.
--   Results in expression of type <a>Markup</a>.
--   
--   Example:
--   
--   <pre>
--   example :: Text.Blaze.Markup
--   example = $(shsmlString "&lt;p&gt;Paragraph&lt;/p&gt;")
--   </pre>
shsmlString :: String -> ExpQ

-- | Parses Simplified HSML document from file with the given options.
--   Results in expression of type <a>Markup</a>.
--   
--   Example:
--   
--   <pre>
--   example :: Text.Blaze.Markup
--   example = $(shsmlFileWith defaultOptionsS "my_template.hsml")
--   </pre>
shsmlFileWith :: Options -> FilePath -> ExpQ

-- | Parses Simplified HSML document from file with default options.
--   Results in expression of type <a>Markup</a>.
--   
--   Example:
--   
--   <pre>
--   example :: Text.Blaze.Markup
--   example = $(shsmlFile "my_template.hsml")
--   </pre>
shsmlFile :: FilePath -> ExpQ

-- | Template type-class.
class IsTemplate a
renderTemplate :: IsTemplate a => a -> Markup

-- | This type lets you customize some behaviour of HSML templates.
data Options
Options :: Bool -> Bool -> String -> (String -> String) -> Options

-- | If and only if set to True, applies <a>toMarkup</a> on section
--   expressions in your HSML templates.
optExpToMarkup :: Options -> Bool

-- | If and only if set to True, applies <a>toValue</a> on attribute value
--   expressions in your HSML templates.
optExpToValue :: Options -> Bool

-- | The name of the generated record.
--   
--   NOTE: Has no effect on Simplified HSML templates.
optTemplateName :: Options -> String

-- | The name of the fields of the genrated record.
--   
--   NOTE: Has no effect on Simplified HTML templates.
optTemplateFieldName :: Options -> String -> String

-- | Default settings for HSML generators.
--   
--   <pre>
--   defaultOptions name = Options
--       { optExpToMarkup = True
--       , optExpToValue = True
--       , optTemplateName = firstUpper name
--       , optTemplateFieldName = \a -&gt; firstLower name &lt;&gt; firstUpper a
--       }
--       where
--         firstUpper "" = ""
--         firstUpper (c:cs) = toUpper c : cs
--   
--         firstLower "" = ""
--         firstLower (c:cs) = toLower c : cs
--   </pre>
defaultOptions :: String -> Options

-- | Default settings for Simplified HSML generators.
--   
--   <pre>
--   defaultOptionsS = Options
--       { optExpToMarkup = True 
--       , optExpToValue = True
--       , optTemplateName = undefined
--       , optTemplateFieldName = undefined 
--       }
--   </pre>
defaultOptionsS :: Options
