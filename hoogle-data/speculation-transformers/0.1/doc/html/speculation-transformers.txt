-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Safe, programmable, speculative parallelism with monads.
--   
--   Safe, programmable, speculative parallelism with monads.
@package speculation-transformers
@version 0.1


-- | Versions of the combinators from the <tt>speculation</tt> package with
--   the signature rearranged to enable them to be used directly as actions
--   in the <a>Cont</a> and <a>ContT</a> monads.
module Control.Monad.Trans.Cont.Speculation

-- | When a is unevaluated, <tt><a>spec</a> g a</tt> evaluates the current
--   continuation with <tt>g</tt> while testing if <tt>g</tt> <a>==</a>
--   <tt>a</tt>, if they differ, it re-evalutes the continuation with
--   <tt>a</tt>. If <tt>a</tt> was already evaluated, the continuation is
--   just directly applied to <tt>a</tt> instead.
spec :: Eq a => a -> a -> ContT r m a

-- | As per <a>spec</a>, without the check for whether or not the second
--   argument is already evaluated.
spec' :: Eq a => a -> a -> ContT r m a

-- | <tt>spec</tt> with a user supplied comparison function
specBy :: (a -> a -> Bool) -> a -> a -> ContT r m a

-- | <tt>spec'</tt> with a user supplied comparison function
specBy' :: (a -> a -> Bool) -> a -> a -> ContT r m a

-- | <tt>spec'</tt> with a user supplied comparison function
specOn :: Eq c => (a -> c) -> a -> a -> ContT r m a

-- | <tt>spec'</tt> with a user supplied comparison function
specOn' :: Eq c => (a -> c) -> a -> a -> ContT r m a
specSTM :: Eq a => STM a -> a -> ContT r STM a
specSTM' :: Eq a => STM a -> a -> ContT r STM a
specOnSTM :: Eq c => (a -> STM c) -> STM a -> a -> ContT r STM a
specOnSTM' :: Eq c => (a -> STM c) -> STM a -> a -> ContT r STM a
specBySTM :: (a -> a -> STM Bool) -> STM a -> a -> ContT r STM a
specBySTM' :: (a -> a -> STM Bool) -> STM a -> a -> ContT r STM a
