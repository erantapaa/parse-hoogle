-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Parse and render XML DTDs
--   
--   This library provides an attoparsec-text parser and blaze-builder for
--   XML Document Type Declaration (DTD) documents.
@package dtd-text
@version 0.1.1.2


-- | A <a>Blaze.ByteString.Builder</a> renderer for XML Document Type
--   Declaration (DTD) documents.
module Data.XML.DTD.Render
buildDTD :: DTD -> Builder

-- | A <a>Builder</a> for a <a>DTD</a>.
--   
--   A <a>Builder</a> for a <a>DTDTextDecl</a>.
buildDTDTextDecl :: DTDTextDecl -> Builder

-- | A <a>Builder</a> for a <a>DTDComponent</a>.
buildDTDComponent :: DTDComponent -> Builder

-- | A <a>Builder</a> for an <a>EntityDecl</a>.
buildEntityDecl :: EntityDecl -> Builder

-- | A <a>Builder</a> for an entity value, consisting of a list of
--   <a>EntityValue</a>.
buildEntityValue :: [EntityValue] -> Builder

-- | A builder for a <a>PERef</a>.
buildPERef :: PERef -> Builder

-- | A <a>Builder</a> for an <a>ElementDecl</a>.
buildElementDecl :: ElementDecl -> Builder

-- | A <a>Builder</a> for a <a>ContentDecl</a>.
buildContentDecl :: ContentDecl -> Builder

-- | A <a>Builder</a> for a <a>ContentModel</a>.
buildContentModel :: ContentModel -> Builder

-- | A <a>Builder</a> for a <a>Repeat</a>.
buildRepeat :: Repeat -> Builder

-- | A <a>Builder</a> for an <a>AttList</a>.
buildAttList :: AttList -> Builder

-- | A <a>Builder</a> for an <a>AttDecl</a>.
buildAttDecl :: AttDecl -> Builder

-- | A <a>Builder</a> for an <a>AttType</a>.
buildAttType :: AttType -> Builder

-- | A <a>Builder</a> for an <a>AttDefault</a>.
buildAttDefault :: AttDefault -> Builder

-- | A <a>Builder</a> for a <a>Notation</a>.
buildNotation :: Notation -> Builder

-- | A <a>Builder</a> for a <a>NotationSource</a>.
buildNotationSource :: NotationSource -> Builder

-- | A <a>Builder</a> for an <a>Instruction</a>.
buildInstruction :: Instruction -> Builder

-- | A <a>Builder</a> for a comment. The comment text cannot be null,
--   cannot contain two consecutive <a>-</a>, and cannot end in <a>-</a>.
buildComment :: Text -> Builder

-- | A <a>Builder</a> for an <a>ExternalID</a>.
buildExternalID :: ExternalID -> Builder

-- | Build a list of items
buildList :: Text -> (a -> Builder) -> [a] -> Builder

-- | Build a choice expression.
buildChoice :: (a -> Builder) -> [a] -> Builder

-- | Build an optional item.
buildMaybe :: (a -> Builder) -> Maybe a -> Builder

-- | Build a newline.
newline :: Builder

-- | Build a space.
space :: Builder

-- | Build a quoted string.
quote :: Builder -> Builder

-- | Build a string quoted by angle brackets, with an exclamation mark.
pbracket :: Builder -> Builder

-- | Build a string surround by parantheses.
parens :: Builder -> Builder


-- | This module provides a <a>Data.Attoparsec.Text</a> parser for XML
--   Document Type Declaration (DTD) documents. A higher-level interface
--   that implements parameter entity resolution is also provided.
module Data.XML.DTD.Parse

-- | Parse a DTD. Parameter entity substitution is not supported by this
--   parser, so parameter entities cannot appear in places where a valid
--   DTD syntax production cannot be determined without resolving them.
dtd :: Parser DTD

-- | Parse a DTD from lazy <a>Text</a> while fully resolving the values of
--   all parameter entities whose values are provided internally in the
--   DTD. If the syntax of the DTD is invalid, all declarations up to the
--   first invalid one are returned.
parseDTD :: Text -> DTD

-- | Parse a DTD from lazy <a>Text</a> while fully resolving the values of
--   parameter entities. The given table of values is used to resolve
--   external parameter entities.
--   
--   If you need information from the DTD itself to look up the external
--   entities, such as system and public IDs, you might be able to get the
--   information by applying <a>parseDTD</a> to the DTD or part of it for
--   an initial parse.
parseDTDWithExtern :: SymTable -> Text -> DTD

-- | A symbol table for external parameter entity resolution. The symbol
--   table maps strict <a>Text</a> names to lazy <a>Text</a> values.
--   Typically, the values will have been retrieved from an external
--   resource such as a file or URL.
type SymTable = Map Text Text

-- | Parse an <tt>?xml</tt> text declaration at the beginning of a
--   <a>DTD</a>.
textDecl :: Parser DTDTextDecl

-- | Parse a single component of a <a>DTD</a>. Conditional sections are
--   currently not supported.
dtdComponent :: Parser DTDComponent

-- | Parse an entity declaration.
entityDecl :: Parser EntityDecl

-- | Parse an entity value. An entity value is a quoted string possibly
--   containing parameter entity references.
entityValue :: Parser [EntityValue]

-- | Parse a parameter entity reference
pERef :: Parser PERef

-- | Parse a declaration of a notation.
notation :: Parser Notation

-- | Parse a source for a notation.
notationSrc :: Parser NotationSource

-- | Parse the declaration of an element.
elementDecl :: Parser ElementDecl

-- | Parse the content that can occur in an element.
contentDecl :: Parser ContentDecl
contentModel :: Parser ContentModel

-- | Parse the model of structured content for an element.
--   
--   Parse a repetition character.
repeatChar :: Parser Repeat

-- | Parse a list of attribute declarations for an element.
attList :: Parser AttList

-- | Parse the three-part declaration of an attribute.
attDecl :: Parser AttDecl

-- | Parse the type of an attribute.
attType :: Parser AttType

-- | Parse a default value specification for an attribute.
attDefault :: Parser AttDefault

-- | Parse a processing instruction.
instruction :: Parser Instruction

-- | Parse a comment
comment :: Parser Text

-- | Parse an external ID.
externalID :: Parser ExternalID

-- | Parse a DTD name. We are much more liberal than the spec: we allow any
--   characters that will not interfere with other DTD syntax. This parser
--   subsumes both <tt>Name</tt> and <tt>NmToken</tt> in the spec, and
--   more.
name :: Parser Text

-- | Parse a DTD <a>name</a> followed by optional white space.
nameSS :: Parser Text

-- | A single-quoted or double-quoted string. The quotation marks are
--   dropped.
quoted :: Parser Text
instance Eq MarkupText
instance Show MarkupText
instance Eq PreParse
instance Show PreParse
