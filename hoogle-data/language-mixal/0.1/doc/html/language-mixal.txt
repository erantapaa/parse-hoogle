-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Parser, pretty-printer, and AST types for the MIXAL
assembly language
--   
--   MIXAL parser and pretty-printer
@package language-mixal
@version 0.1

module Language.MIXAL.Char
mixChars :: [Char]

module Language.MIXAL.AST
newtype MIXChar
MIXChar :: Char -> MIXChar
data MIXALStmt
Orig :: (Maybe DefinedSymbol) -> WValue -> MIXALStmt
Equ :: (Maybe DefinedSymbol) -> WValue -> MIXALStmt
Con :: (Maybe DefinedSymbol) -> WValue -> MIXALStmt
Alf :: (Maybe DefinedSymbol) -> (MIXChar, MIXChar, MIXChar, MIXChar, MIXChar) -> MIXALStmt
Inst :: (Maybe DefinedSymbol) -> OpCode -> (Maybe Address) -> (Maybe Index) -> (Maybe Field) -> MIXALStmt
End :: (Maybe DefinedSymbol) -> WValue -> MIXALStmt
data Address
AddrExpr :: Expr -> Address
AddrRef :: SymbolRef -> Address
AddrLiteral :: WValue -> Address
LitConst :: WValue -> Address
data DefinedSymbol
DefNormal :: Symbol -> DefinedSymbol
DefLocal :: Integer -> DefinedSymbol
data SymbolRef
RefNormal :: Symbol -> SymbolRef
RefBackward :: Integer -> SymbolRef
RefForward :: Integer -> SymbolRef
data WValue
WValue :: Expr -> (Maybe Field) -> [(Expr, Maybe Field)] -> WValue
newtype Index
Index :: Integer -> Index
data Field
FieldExpr :: Expr -> Field
data AtomicExpr
Num :: Integer -> AtomicExpr
Sym :: Symbol -> AtomicExpr
Asterisk :: AtomicExpr
data Expr
AtExpr :: AtomicExpr -> Expr
Signed :: Bool -> AtomicExpr -> Expr
BinOp :: Expr -> BinOp -> Expr -> [(BinOp, Expr)] -> Expr
data BinOp
Add :: BinOp
Subtract :: BinOp
Multiply :: BinOp
Divide :: BinOp
Frac :: BinOp
Field :: BinOp
data OpCode
LDA :: OpCode
LDX :: OpCode
LD1 :: OpCode
LD2 :: OpCode
LD3 :: OpCode
LD4 :: OpCode
LD5 :: OpCode
LD6 :: OpCode
LDAN :: OpCode
LDXN :: OpCode
LD1N :: OpCode
LD2N :: OpCode
LD3N :: OpCode
LD4N :: OpCode
LD5N :: OpCode
LD6N :: OpCode
STA :: OpCode
STX :: OpCode
ST1 :: OpCode
ST2 :: OpCode
ST3 :: OpCode
ST4 :: OpCode
ST5 :: OpCode
ST6 :: OpCode
STJ :: OpCode
STZ :: OpCode
ADD :: OpCode
SUB :: OpCode
MUL :: OpCode
DIV :: OpCode
ENTA :: OpCode
ENTX :: OpCode
ENT1 :: OpCode
ENT2 :: OpCode
ENT3 :: OpCode
ENT4 :: OpCode
ENT5 :: OpCode
ENT6 :: OpCode
ENNA :: OpCode
ENNX :: OpCode
ENN1 :: OpCode
ENN2 :: OpCode
ENN3 :: OpCode
ENN4 :: OpCode
ENN5 :: OpCode
ENN6 :: OpCode
INCA :: OpCode
INCX :: OpCode
INC1 :: OpCode
INC2 :: OpCode
INC3 :: OpCode
INC4 :: OpCode
INC5 :: OpCode
INC6 :: OpCode
DECA :: OpCode
DECX :: OpCode
DEC1 :: OpCode
DEC2 :: OpCode
DEC3 :: OpCode
DEC4 :: OpCode
DEC5 :: OpCode
DEC6 :: OpCode
CMPA :: OpCode
CMPX :: OpCode
CMP1 :: OpCode
CMP2 :: OpCode
CMP3 :: OpCode
CMP4 :: OpCode
CMP5 :: OpCode
CMP6 :: OpCode
JMP :: OpCode
JSJ :: OpCode
JOV :: OpCode
JNOV :: OpCode
JL :: OpCode
JE :: OpCode
JG :: OpCode
JGE :: OpCode
JNE :: OpCode
JLE :: OpCode
JAN :: OpCode
JAZ :: OpCode
JAP :: OpCode
JANN :: OpCode
JANZ :: OpCode
JANP :: OpCode
JXN :: OpCode
JXZ :: OpCode
JXP :: OpCode
JXNN :: OpCode
JXNZ :: OpCode
JXNP :: OpCode
J1N :: OpCode
J1Z :: OpCode
J1P :: OpCode
J1NN :: OpCode
J1NZ :: OpCode
J1NP :: OpCode
J2N :: OpCode
J2Z :: OpCode
J2P :: OpCode
J2NN :: OpCode
J2NZ :: OpCode
J2NP :: OpCode
J3N :: OpCode
J3Z :: OpCode
J3P :: OpCode
J3NN :: OpCode
J3NZ :: OpCode
J3NP :: OpCode
J4N :: OpCode
J4Z :: OpCode
J4P :: OpCode
J4NN :: OpCode
J4NZ :: OpCode
J4NP :: OpCode
J5N :: OpCode
J5Z :: OpCode
J5P :: OpCode
J5NN :: OpCode
J5NZ :: OpCode
J5NP :: OpCode
J6N :: OpCode
J6Z :: OpCode
J6P :: OpCode
J6NN :: OpCode
J6NZ :: OpCode
J6NP :: OpCode
IN :: OpCode
OUT :: OpCode
IOC :: OpCode
JRED :: OpCode
JBUS :: OpCode
NUM :: OpCode
CHAR :: OpCode
SLA :: OpCode
SRA :: OpCode
SLAX :: OpCode
SRAX :: OpCode
SLC :: OpCode
SRC :: OpCode
MOVE :: OpCode
NOP :: OpCode
HLT :: OpCode
newtype Symbol
Symbol :: String -> Symbol
instance Eq MIXChar
instance Show MIXChar
instance Eq Index
instance Show Index
instance Eq BinOp
instance Show BinOp
instance Read BinOp
instance Eq OpCode
instance Show OpCode
instance Read OpCode
instance Eq Symbol
instance Show Symbol
instance Eq AtomicExpr
instance Show AtomicExpr
instance Eq Expr
instance Show Expr
instance Eq Field
instance Show Field
instance Eq WValue
instance Show WValue
instance Eq SymbolRef
instance Show SymbolRef
instance Eq Address
instance Show Address
instance Eq DefinedSymbol
instance Show DefinedSymbol
instance Eq MIXALStmt
instance Show MIXALStmt

module Language.MIXAL.Parser
parseMIXAL :: String -> String -> Either ParseError [MIXALStmt]

module Language.MIXAL.PP
ppAddress :: Address -> Doc
mppField :: Maybe Field -> Doc
ppWValue :: WValue -> Doc
ppIndex :: Index -> Doc
ppField :: Field -> Doc
ppBinOp :: BinOp -> Doc
ppOpCode :: OpCode -> Doc
ppExpr :: Expr -> Doc
ppAtomicExpr :: AtomicExpr -> Doc
ppSymbolDef :: DefinedSymbol -> Doc
ppSymbolRef :: SymbolRef -> Doc
ppSymbol :: Symbol -> Doc
mppSymbolDef :: Maybe DefinedSymbol -> Doc
ppMIXALStmt :: MIXALStmt -> Doc

module Language.MIXAL.OpCode

-- | Return the numeric version of an opcode. If the opcode corresponds to
--   a specific field value, return that too; otherwise Nothing. In the
--   Nothing case, the F value should be supplied by the user and assembled
--   into (or extracted from) the binary instruction. In the Just case a
--   specific F-value is required to distinguish the opcode based on the
--   instruction involved.
opCode :: OpCode -> (Integer, Maybe Integer)
