-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Examples using the Grapefruit library
--   
@package grapefruit-examples
@version 0.1.0.5


-- | A Grapefruit example which demonstrates switching.
--   
--   The application creates two counters. These can be incremented with
--   the buttons “Inc 1” and “Inc 2”. On the very right of the window, you
--   always see the current value of one of those counters. Initially, this
--   is counter 1 but you can switch between both counters using the
--   buttons “Switch to 1” and “Switch to 2”.
--   
--   At the start of the application and at each press on one of the
--   “Switch to” buttons, a further counter is created. The value of the
--   last of these counters is shown left to the other counter value. The
--   initially created counter can be incremented by pushing the button
--   “Inc 1” and each counter created by a press on “Switch to <i>n</i>”
--   can be incremented by pushing the button “Inc <i>n</i>”.
--   
--   The implementation uses Grapefruit’s <a>switch</a> function which
--   provides switching between signal functions. The arguments of the
--   resulting signal functions are automatically aged, that is, everything
--   before the time they are used is cut off. The right counter value is
--   created by counting the presses of the “Inc” buttons, aging the
--   resulting signals and switching between the aged signals. The left
--   counter value is produced by aging the “Inc” button press signals,
--   counting the occurences in the aged signals and switching between the
--   resulting counter signals.
module Examples.Grapefruit.Switching

-- | The circuit describing the whole application.
mainCircuit :: BasicUIBackend uiBackend => UICircuit Window uiBackend era () (DSignal era ())


-- | A Grapefruit example which demonstrates the use of feedback loops.
--   
--   A button with one star is shown. Each time, the user clicks on the
--   button, one star is added to the caption of the button. The
--   interesting thing about this is that the button’s input depends on the
--   button’s output. So you need the <a>ArrowLoop</a> instance of
--   <a>UICircuit</a>.
module Examples.Grapefruit.Simple

-- | The circuit describing the whole application.
mainCircuit :: BasicUIBackend uiBackend => UICircuit Window uiBackend era () (DSignal era ())

module Examples.Grapefruit.SetView

-- | The circuit describing the whole application.
mainCircuit :: ContainerUIBackend uiBackend => UICircuit Window uiBackend era () (DSignal era ())
instance Eq Name
instance Ord Name
instance Show Name


-- | A Grapefruit example which demonstrates the use of incremental signals
--   and container views.
--   
--   A list of kinds of fruit is displayed. Below this list, there are
--   several buttons for manipulating the list. The changing list is
--   represented by an incremental signal over sequences. Note that not
--   every list manipulation is applicable at every time. If you select a
--   non-applicable operation, you get a runtime error. This is caused by
--   the generic checking for incremental signals which is provided by the
--   <tt>iSignal</tt> function.
module Examples.Grapefruit.ListView

-- | The circuit describing the whole application.
mainCircuit :: ContainerUIBackend uiBackend => UICircuit Window uiBackend era () (DSignal era ())
instance Show Fruit

module Examples.Grapefruit.Converter
mainCircuit :: BasicUIBackend uiBackend => UICircuit Window uiBackend era () (DSignal era ())
