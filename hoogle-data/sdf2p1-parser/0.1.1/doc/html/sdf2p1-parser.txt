-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A parser for SDF version 2.1 using Parsec
--   
@package sdf2p1-parser
@version 0.1.1

module Text.SDF.V2p1.Parser.SDFTypes

-- | This is the parser stream type. We can switch from String to
--   ByteString or other input stream by changing the definition of
--   SdfString
type SdfString = ByteString
type Qstring = String
type Number = Double
type Rnumber = Double
type Dnumber = Int
type Tsvalue = String
type Identifier = String
data DelayFile
DelayFile :: SdfHeader -> [Cell] -> DelayFile
data SdfHeader
SdfHeader :: SdfVersion -> (Maybe DesignName) -> (Maybe Date) -> (Maybe Vendor) -> (Maybe ProgramName) -> (Maybe ProgramVersion) -> (Maybe HierarchyDivider) -> (Maybe Voltage) -> (Maybe Process) -> (Maybe Temperature) -> (Maybe TimeScale) -> SdfHeader
type SdfVersion = Qstring
type DesignName = Qstring
type Date = Qstring
type Vendor = Qstring
type ProgramName = Qstring
type ProgramVersion = Qstring
type HierarchyDivider = Qstring
type Voltage = Rtriple
type Process = Qstring
type Temperature = Rtriple
type TimeScale = Qstring
data Cell
Cell :: Celltype -> CellInstance -> (Maybe Correlation) -> [TimingSpec] -> Cell
type Celltype = Qstring
type CellInstance = [Identifier]
type Instance = Identifier
data Correlation
Correlation :: Qstring -> (Maybe CorrFactor) -> Correlation
type CorrFactor = [Number]
data TimingSpec
TimingSpecDel :: DelSpec -> TimingSpec
TimingSpecTc :: TcSpec -> TimingSpec
type DelSpec = [Deltype]
type TcSpec = [TcDef]
data Deltype
DeltypePathpulse :: (Maybe InputOutputPath) -> Value -> (Maybe Value) -> Deltype
DeltypeGlobalpathpulse :: (Maybe InputOutputPath) -> Value -> (Maybe Value) -> Deltype
DeltypeAbsolute :: [DelDef] -> Deltype
DeltypeIncrement :: [DelDef] -> Deltype
data InputOutputPath
InputOutputPath :: PortPath -> PortPath -> InputOutputPath
data DelDef
DelDefIopath :: PortSpec -> PortPath -> RvalueList -> DelDef
DelDefCond :: ConditionalPortExpr -> PortSpec -> PortPath -> RvalueList -> DelDef
DelDefPort :: PortPath -> RvalueList -> DelDef
DelDefInterconnect :: PortInstance -> PortInstance -> RvalueList -> DelDef
DelDefNetdelay :: NetSpec -> RvalueList -> DelDef
DelDefDevice :: (Maybe PortInstance) -> RvalueList -> DelDef
data NetSpec
NetSpec :: (Maybe Instance) -> Identifier -> NetSpec
data TcDef
TcDefTchkDef :: TchkDef -> TcDef
TcDefCnsDef :: CnsDef -> TcDef
data TchkDef
TchkDefSetup :: PortTchk -> PortTchk -> Rvalue -> TchkDef
TchkDefHold :: PortTchk -> PortTchk -> Rvalue -> TchkDef
TchkDefSetuphold :: PortTchk -> PortTchk -> Rvalue -> Rvalue -> TchkDef
TchkDefRecovery :: PortTchk -> PortTchk -> Rvalue -> TchkDef
TchkDefSkew :: PortTchk -> PortTchk -> Rvalue -> TchkDef
TchkDefWidth :: PortTchk -> Value -> TchkDef
TchkDefPeriod :: PortTchk -> Value -> TchkDef
TchkDefNochange :: PortTchk -> PortTchk -> Rvalue -> Rvalue -> TchkDef
data CnsDef
CnsDefPathconstraint :: PortInstance -> [PortInstance] -> Rvalue -> Rvalue -> CnsDef
CnsDefSum :: ConstraintPath -> [ConstraintPath] -> Rvalue -> (Maybe Rvalue) -> CnsDef
CnsDefDiff :: ConstraintPath -> ConstraintPath -> Value -> (Maybe Value) -> CnsDef
CnsDefSkewconstraint :: PortSpec -> Value -> CnsDef
data PortTchk
PortTchkPortSpec :: PortSpec -> PortTchk
PortTchkCond :: TimingCheckCondition -> PortSpec -> PortTchk
type ConstraintPath = (PortInstance, PortInstance)
data PortSpec
PortSpecPortPath :: PortPath -> PortSpec
PortSpecPortEdge :: PortEdge -> PortSpec
data PortEdge
PortEdge :: EdgeIdentifier -> PortPath -> PortEdge
type EdgeIdentifier = String
type PortPath = Port
type Port = Identifier
type ScalarPort = Identifier
type BusPort = Identifier
data PortInstance
PortInstance :: (Maybe Instance) -> Identifier -> PortInstance
type Value = Triple
type Triple = (Maybe Double, Maybe Double, Maybe Double)
type Rvalue = Triple
type Rtriple = Triple
type RvalueList = [Rvalue]
type ConditionalPortExpr = String
type SimpleExpression = String
type TimingCheckCondition = String
type ScalarConstant = String
type UnaryOperator = String
type InversionOperator = String
type BinaryOperator = String
type EqualityOperator = String
instance Show Correlation
instance Eq Correlation
instance Show NetSpec
instance Eq NetSpec
instance Show PortEdge
instance Eq PortEdge
instance Show PortSpec
instance Eq PortSpec
instance Show InputOutputPath
instance Eq InputOutputPath
instance Show PortInstance
instance Eq PortInstance
instance Show CnsDef
instance Eq CnsDef
instance Show SdfHeader
instance Eq SdfHeader
instance Show DelDef
instance Eq DelDef
instance Show Deltype
instance Eq Deltype
instance Show PortTchk
instance Eq PortTchk
instance Show TchkDef
instance Eq TchkDef
instance Show TcDef
instance Eq TcDef
instance Show TimingSpec
instance Eq TimingSpec
instance Show Cell
instance Eq Cell
instance Show DelayFile
instance Eq DelayFile

module Text.SDF.V2p1.Parser.SDFParser

-- | Language definition for the SDF file format Note that the input stream
--   is specialized for the <a>SdfString</a> type so that we can easily
--   change the stream type in one single place
sdflang :: GenLanguageDef SdfString a Identity

-- | This is a convenience function used to parse a SDF file and return the
--   AST representation of the SDF file.
parseSdf :: FilePath -> SdfString -> DelayFile
lexer :: GenTokenParser SdfString a Identity
lexeme :: ParsecT SdfString u Identity a -> ParsecT SdfString u Identity a
symbol :: String -> ParsecT SdfString u Identity String
parens :: ParsecT SdfString u Identity a -> ParsecT SdfString u Identity a
reserved :: String -> ParsecT SdfString u Identity ()
reservedOp :: String -> ParsecT SdfString u Identity ()
braces :: ParsecT SdfString u Identity a -> ParsecT SdfString u Identity a
whiteSpace :: ParsecT SdfString u Identity ()
qstring :: Parser String
number :: Parser Number
rnumber :: Parser Rnumber
dnumber :: Parser Dnumber
tsvalue :: Parser Tsvalue
identifier :: Parser Identifier
path :: Parser Identifier
delay_file :: Parser DelayFile
sdf_header :: Parser SdfHeader
sdf_version :: Parser SdfVersion
design_name :: Parser DesignName
date :: Parser Date
vendor :: Parser Vendor
program_name :: Parser ProgramName
program_version :: Parser ProgramVersion
hierarchy_divider :: Parser HierarchyDivider
hchar :: Parser String
voltage :: Parser Voltage
process :: Parser Process
temperature :: Parser Temperature
time_scale :: Parser TimeScale
cell :: Parser Cell
celltype :: Parser Celltype
cell_instance :: Parser CellInstance
instance' :: Parser Instance
correlation :: Parser Correlation
corr_factor :: Parser CorrFactor
timing_spec :: Parser TimingSpec
del_spec :: Parser DelSpec
tc_spec :: Parser TcSpec
deltype :: Parser Deltype
input_output_path :: Parser InputOutputPath
del_def :: Parser DelDef
net_spec :: Parser NetSpec
tc_def :: Parser TcDef
tchk_def :: Parser TchkDef
cns_def :: Parser CnsDef
port_tchk :: Parser PortTchk
constraint_path :: Parser ConstraintPath
port_spec :: Parser PortSpec
port_edge :: Parser PortEdge
edge_identifier :: Parser EdgeIdentifier
port_path :: Parser PortPath
port :: Parser Port
scalar_port :: Parser ScalarPort
bus_port :: Parser BusPort
port_instance :: Parser PortInstance
value :: Parser Triple
triple :: Parser Triple
rvalue :: Parser Triple
rtriple :: Parser Triple
rvalue_list :: Parser RvalueList
conditional_port_expr :: Parser String
simple_expression :: Parser String
timing_check_condition :: Parser TimingCheckCondition
scalar_constant :: Parser String
unary_operator :: [String]
inversion_operator :: [String]
binary_operator :: [String]
equality_operator :: [String]

-- | Given a parser, attempt to parse. If parser succeeds, returns a
--   <a>Just</a> value, else <a>Nothing</a> is returned.
maybeParser :: Parser a -> Parser (Maybe a)

-- | Since the format (FOO ...) occurs so often in SDF syntax, the parser
--   <a>sdf_simple</a> is a short cut version for this parser
sdf_simple :: String -> Parser a -> Parser a

-- | Parses a rtriple or a rnumber Here we take a shortcut in the data
--   representation, where an <a>rnumber</a> is represented as an rtriple
--   of the same value
rtriple_or_rnumber :: Parser Rtriple

-- | Parses a <a>value</a> or an <a>rvalue</a>
valueOrRvalue :: Parser Double -> Parser Triple

-- | Parses a posPair or a negPair name1 and name2 is the edge name, ie.
--   posedge or negedge
posOrNegPair :: String -> String -> Parser ((Rnumber, Maybe Rnumber), (Rnumber, Maybe Rnumber))

-- | Parses the negative sign <a>-</a>, or the positive <a>+</a> Absence of
--   sign implies positive
sign :: Parser String
tripleOrRtriple :: Parser Double -> Parser Triple

-- | This is the identifier defined in the SDF spec, but the parser does
--   not consume trailing white spaces (ie. wrapped in a lexeme) as other
--   parsers do. We keep this version of the parser so that we can combine
--   it with <a>hchar</a> parser later to form <a>path</a> parser
identifier' :: Parser Identifier

module Text.SDF.V2p1.Parser.SDFQuery

-- | Given a SDF file, parse the cells using the customized cell parser and
--   return a list of parsed cells. This function can be used whenever the
--   SDF is too large to parse wholesale
parseCells :: FilePath -> SdfString -> (Cell -> a) -> [a]

-- | Given a SDF file, lazily parse the cells using the customized cell
--   parser and return a list of parsed cells. This function can be used
--   whenever the SDF is too large to parse wholesale.
parseCellsLazy :: FilePath -> SdfString -> (Cell -> a) -> [a]

-- | Given a SDF file, parse the SDF headers, ignoring all the cell
--   instances
parseHeaders :: FilePath -> SdfString -> SdfHeader
