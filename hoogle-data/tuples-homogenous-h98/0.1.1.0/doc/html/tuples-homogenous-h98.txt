-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Wrappers for n-ary tuples with Traversable and Applicative/Monad instances.
--   
--   Provides <tt>newtype</tt> wrappers for n-ary homogenous tuples of
--   types <tt>(a,...,a)</tt> and instances for <tt>Functor</tt>,
--   <tt>Applicative</tt> (zipping), <tt>Monad</tt>, <tt>Foldable</tt> and
--   <tt>Traversable</tt>. The package aims to be Haskell98 compliant.
@package tuples-homogenous-h98
@version 0.1.1.0


-- | Provides wrappers for homogenous tuples defined as
--   
--   <pre>
--   newtype TupleN a = TupleN (a,...,a)
--   </pre>
--   
--   together with helper methods
--   
--   <pre>
--   tupleN :: a -&gt; ... -&gt; a -&gt; TupleN a
--   </pre>
--   
--   and instances for
--   
--   <ul>
--   <li><a>Functor</a> applies a given function to all elements of a
--   tuple.</li>
--   <li><a>Applicative</a> zips two tuples, applying <i>i</i>-th function
--   of the first to <i>i</i>-th element of the second.</li>
--   <li><a>Monad</a> where <i>i</i>-th element of <tt>x &gt;&gt;= f</tt>
--   is the result of applying <tt>f</tt> to the <i>i</i>-th element of
--   <tt>x</tt> and taking its <i>i</i>-th result. In other words, <tt>join
--   :: Tupple N (TuppleN a) -&gt; TuppleN a</tt> returns the diagonal of
--   the <i>NxN</i> matrix.</li>
--   <li><a>Foldable</a> and <a>Traversable</a> folds/traverses over the
--   <i>N</i> elements.</li>
--   </ul>
module Data.Tuple.Homogenous
newtype Tuple0 a
Tuple0 :: () -> Tuple0 a
untuple0 :: Tuple0 a -> ()
tuple0 :: Tuple0 a

-- | This <tt>newtype</tt> intentionally omits the <tt>untuple1</tt>
--   accessor as there is no 1-tuple in Haskell.
newtype Tuple1 a
Tuple1 :: a -> Tuple1 a
tuple1 :: a -> Tuple1 a
newtype Tuple2 a
Tuple2 :: ((a, a)) -> Tuple2 a
untuple2 :: Tuple2 a -> ((a, a))
tuple2 :: a -> a -> Tuple2 a
newtype Tuple3 a
Tuple3 :: ((a, a, a)) -> Tuple3 a
untuple3 :: Tuple3 a -> ((a, a, a))
tuple3 :: a -> a -> a -> Tuple3 a
newtype Tuple4 a
Tuple4 :: ((a, a, a, a)) -> Tuple4 a
untuple4 :: Tuple4 a -> ((a, a, a, a))
tuple4 :: a -> a -> a -> a -> Tuple4 a
newtype Tuple5 a
Tuple5 :: ((a, a, a, a, a)) -> Tuple5 a
untuple5 :: Tuple5 a -> ((a, a, a, a, a))
tuple5 :: a -> a -> a -> a -> a -> Tuple5 a
newtype Tuple6 a
Tuple6 :: ((a, a, a, a, a, a)) -> Tuple6 a
untuple6 :: Tuple6 a -> ((a, a, a, a, a, a))
tuple6 :: a -> a -> a -> a -> a -> a -> Tuple6 a
newtype Tuple7 a
Tuple7 :: ((a, a, a, a, a, a, a)) -> Tuple7 a
untuple7 :: Tuple7 a -> ((a, a, a, a, a, a, a))
tuple7 :: a -> a -> a -> a -> a -> a -> a -> Tuple7 a
newtype Tuple8 a
Tuple8 :: ((a, a, a, a, a, a, a, a)) -> Tuple8 a
untuple8 :: Tuple8 a -> ((a, a, a, a, a, a, a, a))
tuple8 :: a -> a -> a -> a -> a -> a -> a -> a -> Tuple8 a
newtype Tuple9 a
Tuple9 :: ((a, a, a, a, a, a, a, a, a)) -> Tuple9 a
untuple9 :: Tuple9 a -> ((a, a, a, a, a, a, a, a, a))
tuple9 :: a -> a -> a -> a -> a -> a -> a -> a -> a -> Tuple9 a
newtype Tuple10 a
Tuple10 :: ((a, a, a, a, a, a, a, a, a, a)) -> Tuple10 a
untuple10 :: Tuple10 a -> ((a, a, a, a, a, a, a, a, a, a))
tuple10 :: a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> Tuple10 a
newtype Tuple11 a
Tuple11 :: ((a, a, a, a, a, a, a, a, a, a, a)) -> Tuple11 a
untuple11 :: Tuple11 a -> ((a, a, a, a, a, a, a, a, a, a, a))
tuple11 :: a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> Tuple11 a
newtype Tuple12 a
Tuple12 :: ((a, a, a, a, a, a, a, a, a, a, a, a)) -> Tuple12 a
untuple12 :: Tuple12 a -> ((a, a, a, a, a, a, a, a, a, a, a, a))
tuple12 :: a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> Tuple12 a
newtype Tuple13 a
Tuple13 :: ((a, a, a, a, a, a, a, a, a, a, a, a, a)) -> Tuple13 a
untuple13 :: Tuple13 a -> ((a, a, a, a, a, a, a, a, a, a, a, a, a))
tuple13 :: a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> Tuple13 a
newtype Tuple14 a
Tuple14 :: ((a, a, a, a, a, a, a, a, a, a, a, a, a, a)) -> Tuple14 a
untuple14 :: Tuple14 a -> ((a, a, a, a, a, a, a, a, a, a, a, a, a, a))
tuple14 :: a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> Tuple14 a
newtype Tuple15 a
Tuple15 :: ((a, a, a, a, a, a, a, a, a, a, a, a, a, a, a)) -> Tuple15 a
untuple15 :: Tuple15 a -> ((a, a, a, a, a, a, a, a, a, a, a, a, a, a, a))
tuple15 :: a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> Tuple15 a
instance Show (Tuple0 a)
instance Read (Tuple0 a)
instance Ord (Tuple0 a)
instance Eq (Tuple0 a)
instance Bounded (Tuple0 a)
instance Show a => Show (Tuple1 a)
instance Read a => Read (Tuple1 a)
instance Ord a => Ord (Tuple1 a)
instance Eq a => Eq (Tuple1 a)
instance Bounded a => Bounded (Tuple1 a)
instance Eq a => Eq (Tuple2 a)
instance Ord a => Ord (Tuple2 a)
instance Bounded a => Bounded (Tuple2 a)
instance Show a => Show (Tuple2 a)
instance Read a => Read (Tuple2 a)
instance Eq a => Eq (Tuple3 a)
instance Ord a => Ord (Tuple3 a)
instance Bounded a => Bounded (Tuple3 a)
instance Show a => Show (Tuple3 a)
instance Read a => Read (Tuple3 a)
instance Eq a => Eq (Tuple4 a)
instance Ord a => Ord (Tuple4 a)
instance Bounded a => Bounded (Tuple4 a)
instance Show a => Show (Tuple4 a)
instance Read a => Read (Tuple4 a)
instance Eq a => Eq (Tuple5 a)
instance Ord a => Ord (Tuple5 a)
instance Bounded a => Bounded (Tuple5 a)
instance Show a => Show (Tuple5 a)
instance Read a => Read (Tuple5 a)
instance Eq a => Eq (Tuple6 a)
instance Ord a => Ord (Tuple6 a)
instance Bounded a => Bounded (Tuple6 a)
instance Show a => Show (Tuple6 a)
instance Read a => Read (Tuple6 a)
instance Eq a => Eq (Tuple7 a)
instance Ord a => Ord (Tuple7 a)
instance Bounded a => Bounded (Tuple7 a)
instance Show a => Show (Tuple7 a)
instance Read a => Read (Tuple7 a)
instance Eq a => Eq (Tuple8 a)
instance Ord a => Ord (Tuple8 a)
instance Bounded a => Bounded (Tuple8 a)
instance Show a => Show (Tuple8 a)
instance Read a => Read (Tuple8 a)
instance Eq a => Eq (Tuple9 a)
instance Ord a => Ord (Tuple9 a)
instance Bounded a => Bounded (Tuple9 a)
instance Show a => Show (Tuple9 a)
instance Read a => Read (Tuple9 a)
instance Eq a => Eq (Tuple10 a)
instance Ord a => Ord (Tuple10 a)
instance Bounded a => Bounded (Tuple10 a)
instance Show a => Show (Tuple10 a)
instance Read a => Read (Tuple10 a)
instance Eq a => Eq (Tuple11 a)
instance Ord a => Ord (Tuple11 a)
instance Bounded a => Bounded (Tuple11 a)
instance Show a => Show (Tuple11 a)
instance Read a => Read (Tuple11 a)
instance Eq a => Eq (Tuple12 a)
instance Ord a => Ord (Tuple12 a)
instance Bounded a => Bounded (Tuple12 a)
instance Show a => Show (Tuple12 a)
instance Read a => Read (Tuple12 a)
instance Eq a => Eq (Tuple13 a)
instance Ord a => Ord (Tuple13 a)
instance Bounded a => Bounded (Tuple13 a)
instance Show a => Show (Tuple13 a)
instance Read a => Read (Tuple13 a)
instance Eq a => Eq (Tuple14 a)
instance Ord a => Ord (Tuple14 a)
instance Bounded a => Bounded (Tuple14 a)
instance Show a => Show (Tuple14 a)
instance Read a => Read (Tuple14 a)
instance Eq a => Eq (Tuple15 a)
instance Ord a => Ord (Tuple15 a)
instance Bounded a => Bounded (Tuple15 a)
instance Show a => Show (Tuple15 a)
instance Read a => Read (Tuple15 a)
instance Traversable Tuple15
instance Foldable Tuple15
instance Monad Tuple15
instance Applicative Tuple15
instance Functor Tuple15
instance Traversable Tuple14
instance Foldable Tuple14
instance Monad Tuple14
instance Applicative Tuple14
instance Functor Tuple14
instance Traversable Tuple13
instance Foldable Tuple13
instance Monad Tuple13
instance Applicative Tuple13
instance Functor Tuple13
instance Traversable Tuple12
instance Foldable Tuple12
instance Monad Tuple12
instance Applicative Tuple12
instance Functor Tuple12
instance Traversable Tuple11
instance Foldable Tuple11
instance Monad Tuple11
instance Applicative Tuple11
instance Functor Tuple11
instance Traversable Tuple10
instance Foldable Tuple10
instance Monad Tuple10
instance Applicative Tuple10
instance Functor Tuple10
instance Traversable Tuple9
instance Foldable Tuple9
instance Monad Tuple9
instance Applicative Tuple9
instance Functor Tuple9
instance Traversable Tuple8
instance Foldable Tuple8
instance Monad Tuple8
instance Applicative Tuple8
instance Functor Tuple8
instance Traversable Tuple7
instance Foldable Tuple7
instance Monad Tuple7
instance Applicative Tuple7
instance Functor Tuple7
instance Traversable Tuple6
instance Foldable Tuple6
instance Monad Tuple6
instance Applicative Tuple6
instance Functor Tuple6
instance Traversable Tuple5
instance Foldable Tuple5
instance Monad Tuple5
instance Applicative Tuple5
instance Functor Tuple5
instance Traversable Tuple4
instance Foldable Tuple4
instance Monad Tuple4
instance Applicative Tuple4
instance Functor Tuple4
instance Traversable Tuple3
instance Foldable Tuple3
instance Monad Tuple3
instance Applicative Tuple3
instance Functor Tuple3
instance Traversable Tuple2
instance Foldable Tuple2
instance Monad Tuple2
instance Applicative Tuple2
instance Functor Tuple2
instance Traversable Tuple1
instance Foldable Tuple1
instance Monad Tuple1
instance Applicative Tuple1
instance Functor Tuple1
instance Traversable Tuple0
instance Foldable Tuple0
instance Monad Tuple0
instance Applicative Tuple0
instance Functor Tuple0
