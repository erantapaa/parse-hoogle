-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Drawing trees
--   
--   Tree drawing with <i>nice</i> layout.
--   
--   Draw trees represented by Data.Tree, output SVG or EPS. The output
--   should be quite good - no overlapping edges, identical subtrees should
--   have the same shape, leaf nodes evenly spaced.
--   
--   Note - the demos now use font metrics. Font metrics for the "Core 14"
--   PostScript fonts are distributed as <tt>*.afm</tt> files with
--   GhostScript (AFM file version 2.0 for GhostScript 8.63) or available
--   from Adode (AFM file version 4.1). To run the demos properly you will
--   need one of these sets of metrics.
--   
--   Adobe Font technical notes:
--   <a>https://www.adobe.com/devnet/font.html</a>
--   
--   Core 14 AFM metrics:
--   <a>https://www.adobe.com/content/dam/Adobe/en/devnet/font/pdfs/Core14_AFMs.tar</a>
--   
--   ** WARNING ** - the API is unstable and will change.
--   
--   Changelog:
--   
--   v0.19.0 to v0.20.0:
--   
--   <ul>
--   <li>Updates to work with wumpus-drawing-0.9.0 and
--   wumpus-basic-0.24.0.</li>
--   </ul>
--   
--   v0.18.0 to v0.19.0:
--   
--   <ul>
--   <li>Updated to work with Wumpus-Basic-0.22.0 and
--   wumpus-drawing-0.7.0.</li>
--   </ul>
--   
--   v0.17.0 to v0.18.0:
--   
--   <ul>
--   <li>Updated to work with Wumpus-Basic-0.22.0 and
--   wumpus-drawing-0.7.0.</li>
--   </ul>
--   
--   v0.16.0 to v0.17.0:
--   
--   <ul>
--   <li>Reworked internals to use the <tt>LocDrawing</tt> monad from
--   Wumpus-Basic.</li>
--   </ul>
--   
--   v0.15.0 to v0.16.0:
--   
--   <ul>
--   <li>Re-worked so tree drawings form a <tt>LocGraphic</tt> rather than
--   a <tt>TraceDrawing</tt>, this makes more in line with other graphic
--   objects in Wumpus like shapes.</li>
--   <li>Changed node type to be any <tt>LocImage</tt> where the answer
--   supports anchors.</li>
--   </ul>
@package wumpus-tree
@version 0.20.0


-- | Version number
module Wumpus.Tree.VersionNumber

-- | Version number
--   
--   <pre>
--   (0,20,0)
--   </pre>
wumpus_tree_version :: (Int, Int, Int)


-- | Common types, ...
module Wumpus.Tree.Base
data TreeMonad node u a
type OTMAnchorConn node u = TreeDirection -> u -> node -> [node] -> Graphic u
data TreeProps node u
TreeProps :: u -> u -> TreeDirection -> OTMAnchorConn node u -> TreeProps node u
tp_sibling_distance :: TreeProps node u -> u
tp_level_distance :: TreeProps node u -> u
tp_direction :: TreeProps node u -> TreeDirection
tp_otm_connector :: TreeProps node u -> OTMAnchorConn node u
data TreeDirection
TREE_UP :: TreeDirection
TREE_DOWN :: TreeDirection
TREE_LEFT :: TreeDirection
TREE_RIGHT :: TreeDirection
runTreeMonad :: (Translate a, InterpretUnit u, u ~ DUnit a) => TreeMonad node u a -> TreeProps node u -> LocImage u a
drawConn :: InterpretUnit u => node -> [node] -> TreeMonad node u ()
instance Eq TreeDirection
instance Ord TreeDirection
instance Show TreeDirection
instance InterpretUnit u => LocDrawM (TreeMonad node u)
instance DrawingCtxM (TreeMonad node u)
instance Monoid a => Monoid (TreeMonad node u a)
instance Monad (TreeMonad node u)
instance Applicative (TreeMonad node u)
instance Functor (TreeMonad node u)


-- | One-to-many connectors.
module Wumpus.Tree.OTMConnectors
radialOTM :: (Real u, Floating u, InterpretUnit u, RadialAnchor node, CenterAnchor node, u ~ DUnit node) => OTMAnchorConn node u
blankOTM :: OTMAnchorConn node u
familyOTM :: (Real u, Floating u, Ord u, Tolerance u, InterpretUnit u, CenterAnchor node, CardinalAnchor node, u ~ DUnit node) => OTMAnchorConn node u
splayOTM :: (Real u, Floating u, Ord u, Tolerance u, InterpretUnit u, CenterAnchor node, CardinalAnchor node, u ~ DUnit node) => OTMAnchorConn node u


-- | A variant of the tree drawing algorithm from Andrew Kennedy -
--   Functional Pearls Drawing Trees 1996.
--   
--   Acknowledgment - although based on Andrew Kennedy's algorithm, this
--   version uses absolute extents rather than relative ones and is a
--   somewhat different in detail if not in spirit to the original.
--   
--   Any mistakes are mine of course.
--   
--   Note - although this module is exposed, it is not expected to be
--   indenpendently useful for client code.
module Wumpus.Tree.Design

-- | Tree unit width.
--   
--   Trees are designed with 1.0 as the ideal width between nodes. This is
--   represented as a specific newtype so it can be contextually scaled
--   after the design, before the tree is drawn.
data UW

-- | Tree annotated with positions.
--   
--   This is the result of <a>design</a>.
type CoordTree a = Tree (Point2 UW, a)

-- | Design a tree, properly balancing the child nodes oriented at root.
--   
--   As the design has no y-positions (but by recursion they can be
--   counted) and x-positions are respective to the unit distance 1.0
--   separating nodes it is rescaled as a post-processing step into
--   drawable coordinates.
design :: Tree a -> CoordTree a

-- | <a>scaleTree</a> : <tt> sibling_distance * level_distance * CoordTree
--   -&gt; Tree </tt>
--   
--   Scale a CoordTree - this forms a tree where the node label is a pair
--   of <tt>Point2 u</tt> and an <tt>a</tt> (usually a LocImage).
scaleTree :: (DrawingCtxM m, InterpretUnit u) => u -> u -> CoordTree a -> m (Tree (Point2 u, a))

-- | Orientate the Tree according to it's drawing direction.
--   
--   This is a rotation about the root node.
orientateTree :: (Real u, Floating u) => TreeDirection -> Tree (Point2 u, a) -> Tree (Point2 u, a)
instance Eq UW
instance Ord UW
instance Num UW
instance Floating UW
instance Fractional UW
instance Real UW
instance RealFrac UW
instance RealFloat UW
instance Eq HSpan
instance Ord HSpan
instance Show HSpan
instance Eq Extent
instance Show Extent
instance InterpretUnit UW
instance Show UW


-- | Drawing a Tree as a LocGraphic.
module Wumpus.Tree.DrawLoc
data AnnoNode ix u a
type TreeSpec ix u a = Tree (AnnoNode ix u a)
plainTree :: (elt -> LocImage u a) -> Tree elt -> TreeSpec ix u a
treeDrawing :: (Real u, Floating u, Translate node, InterpretUnit u, u ~ DUnit node) => TreeProps node u -> TreeSpec ix u node -> LocGraphic u
leaf :: LocImage u a -> TreeSpec ix u a
xleaf :: ix -> LocImage u a -> TreeSpec ix u a
tree :: LocImage u a -> [TreeSpec ix u a] -> TreeSpec ix u a
xtree :: ix -> LocImage u a -> [TreeSpec ix u a] -> TreeSpec ix u a


-- | Note - this module is a kludge whilst I work out a usable API.
module Wumpus.Tree
