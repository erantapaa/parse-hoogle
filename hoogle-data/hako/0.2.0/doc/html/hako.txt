-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A mako-like quasi-quoter template library
--   
--   A quasi-quote based HTML template library with a simplistic approach,
--   Hako borrows its philosophy from Mako, a popular Python template
--   library. The idea is that the template mechanism itself should be kept
--   simple, while exposing the full expressivity of Haskell itself inside
--   the templates. At the same time, any value interpolated into a
--   template gets HTML-encoded by default, but you can override this
--   behavior by providing your own instances of the <a>ToHtml</a>
--   typeclass.
@package hako
@version 0.2.0


-- | Implements HTML-encoding for Hako. The <a>Html</a> type and the
--   <a>ToHtml</a> typeclass together take care of html-encoding
--   appropriately and automatically inside Hako templates.
module Text.Hako.Html

-- | Basic HTML-encoding: converts all special HTML characters into the
--   corresponding entities.
htmlEncode :: String -> Html

-- | A piece of HTML source. Use <a>fromHtml</a> to get the HTML source
--   back out.
data Html
Html :: String -> Html

-- | All expressions interpolated into Hako templates using <tt>{}</tt>
--   syntax must satisfy <a>ToHtml</a>. Any member of <a>Show</a>
--   automatically has a default implementation through <a>show</a>;
--   additionally, suitable implementations are provided for <a>String</a>
--   (skipping the quoting and escaping which <a>show</a> would otherwise
--   introduce), as well as <tt>List</tt>s, <a>Maybe</a>s and
--   <a>Either</a>s of <tt>ToHtmls</tt>.
class ToHtml a
toHtml :: ToHtml a => a -> Html

-- | Get HTML source as String
fromHtml :: Html -> String

-- | Concatenate two <a>Html</a>s together. The <a>Html</a> equivalent to
--   list concatenation (<tt>++</tt>)
(<++>) :: Html -> Html -> Html
instance [overlap ok] Show Html
instance [overlap ok] Eq Html
instance [overlap ok] Show a => ToHtml a
instance [overlap ok] ToHtml a => ToHtml [a]
instance [overlap ok] (ToHtml a, ToHtml b) => ToHtml (Either a b)
instance [overlap ok] ToHtml a => ToHtml (Maybe a)
instance [overlap ok] ToHtml [Char]
instance [overlap ok] ToHtml Html

module Text.Hako.Parsing

-- | Hako's main parser, suitable as a quoteExpr.
parseTemplateFromString :: String -> ExpQ


-- | A simplist template language using a quasi-quoting approach. Hako
--   quasi-quote expressions return a <a>Html</a>, which can be converted
--   back to a <a>String</a> using <a>fromHtml</a>. Basic syntax rules: *
--   Text is kept as-is, without any encoding performed.
--   
--   <pre>
--   &gt;&gt;&gt; [hako|&lt;p&gt;foobar&lt;/p&gt;|]
--   Html "&lt;p&gt;foobar&lt;/p&gt;"
--   </pre>
--   
--   <ul>
--   <li>Curly braces designate Haskell expressions, which must return an
--   instance of typeclass <a>ToHtml</a>; the <a>toHtml</a> method is
--   called automatically.</li>
--   </ul>
--   
--   <pre>
--   &gt;&gt;&gt; [hako|This is {"&lt;a&gt;quoted&lt;/a&gt;"}|]
--   Html "This is &amp;lt;a&amp;gt;quoted&amp;lt;/a&amp;gt;"
--   </pre>
--   
--   <ul>
--   <li>If the opening curly brace is immediately followed by the keyword
--   def, then the expression is interpreted as a definition instead; it
--   works pretty much exactly like a function or constant definition in
--   plain old Haskell, and the definition thus created can be called as a
--   function from anywhere within the template.</li>
--   </ul>
--   
--   <pre>
--   &gt;&gt;&gt; [hako|{def a x =&lt;a&gt;{x}&lt;/a&gt;}Here's a {a "link"}.|]
--   Html "Here's a &lt;a&gt;link&lt;/a&gt;."
--   </pre>
--   
--   <ul>
--   <li>A <tt>def</tt> block can be used before it is defined.</li>
--   </ul>
--   
--   <pre>
--   &gt;&gt;&gt; [hako|Here's a {a "link"}.{def a x =&lt;a&gt;{x}&lt;/a&gt;]|]
--   Html "Here's a &lt;a&gt;link&lt;/a&gt;."
--   </pre>
--   
--   <ul>
--   <li>As is to be expected from a quasi-quoter, the current scope is
--   carried into the template.</li>
--   </ul>
--   
--   <pre>
--   &gt;&gt;&gt; let txt = "Hello, world!" in [hako|&lt;div&gt;{txt}&lt;/div&gt;|]
--   Html "&lt;div&gt;Hello, world!&lt;/div&gt;"
--   </pre>
--   
--   <ul>
--   <li>Since <tt>{}</tt> expressions can contain any valid Haskell
--   expression (as long as its type implements <a>ToHtml</a>), you can use
--   any Haskell function that is currently in scope.</li>
--   </ul>
--   
--   <pre>
--   &gt;&gt;&gt; [hako|{def li x=&lt;li&gt;x&lt;/li&gt;}&lt;ul&gt;{map li [1,2,3]}&lt;/ul&gt;|]
--   Html "&lt;ul&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&lt;/ul&gt;"
--   </pre>
module Text.Hako
hako :: QuasiQuoter
hakof :: QuasiQuoter

-- | A piece of HTML source. Use <a>fromHtml</a> to get the HTML source
--   back out.
data Html
Html :: String -> Html
