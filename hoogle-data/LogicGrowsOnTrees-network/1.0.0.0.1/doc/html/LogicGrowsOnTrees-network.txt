-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | an adapter for LogicGrowsOnTrees that uses multiple processes running in a network
--   
--   This package provides a adapter for the LogicGrowsOnTrees package that
--   uses multiple processes running in a network for parallelism; see the
--   module documentation for more details.
@package LogicGrowsOnTrees-network
@version 1.0.0.0.1


-- | This adapter implements parallelism by allowing multiple workers to
--   connect to a supervisor over the network. For this adapter, workers
--   are started separately from the supervisor, so the number of workers
--   is not set by the controller but by the number of workers that connect
--   to supervisor.
module LogicGrowsOnTrees.Parallel.Adapter.Network

-- | This is the driver for the network adapter; it consists of a
--   supervisor that listens for connections and multiple workers that
--   connect to the supervisor, where the same executable is used for both
--   the supervisor and the worker. To start the supervisor, run the
--   executable with <a>supervisor</a> as the first argument and <a>-p
--   PORTID</a> to specify the port id. To start a worker, run the
--   executable with <a>worker</a> as the first argument, the address of
--   the supervisor as the second, and the port id as the third.
driver :: (Serialize shared_configuration, Serialize (ProgressFor exploration_mode), Serialize (WorkerFinishedProgressFor exploration_mode)) => Driver IO shared_configuration supervisor_configuration m n exploration_mode

-- | This is the same as <a>driver</a>, but runs in the <a>Network</a>
--   monad. Use this driver if you want to do other things with the network
--   (such as starting a subseqent parallel exploration) after the run
--   completes.
driverNetwork :: (Serialize shared_configuration, Serialize (ProgressFor exploration_mode), Serialize (WorkerFinishedProgressFor exploration_mode)) => Driver Network shared_configuration supervisor_configuration m n exploration_mode

-- | This monad exists due to the quirk that on Windows one needs to
--   initialize the network system before using it via.
--   <a>withSocketsDo</a>; to ensure that this happens, all computations
--   that use the network are run in the <a>Network</a> monad which itself
--   is then run using the <a>runNetwork</a> function that is equivalent to
--   calling <a>withSocketsDo</a>.
newtype Network α
Network :: IO α -> Network α
unsafeRunNetwork :: Network α -> IO α

-- | Initializes the network subsystem where required (e.g., on Windows).
runNetwork :: Network α -> IO α

-- | This class extends <a>RequestQueueMonad</a> with the ability to
--   forcibly disconnect a worker.
class RequestQueueMonad m => NetworkRequestQueueMonad m
disconnectWorker :: NetworkRequestQueueMonad m => WorkerId -> m ()

-- | This is the monad in which the network controller will run.
data NetworkControllerMonad exploration_mode α

-- | Abort the supervisor.
abort :: RequestQueueMonad m => m ()

-- | Fork a new thread running in this monad; all controller threads are
--   automnatically killed when the run is finished.
fork :: RequestQueueMonad m => m () -> m ThreadId

-- | Request the current progress, invoking the given callback with the
--   result; see <a>getCurrentProgress</a> for the synchronous version.
getCurrentProgressAsync :: RequestQueueMonad m => (ProgressFor (ExplorationModeFor m) -> IO ()) -> m ()

-- | Like <a>getCurrentProgressAsync</a>, but blocks until the result is
--   ready.
getCurrentProgress :: RequestQueueMonad m => m (ProgressFor (ExplorationModeFor m))

-- | Request the number of workers, invoking the given callback with the
--   result; see <a>getNumberOfWorkers</a> for the synchronous version.
getNumberOfWorkersAsync :: RequestQueueMonad m => (Int -> IO ()) -> m ()

-- | Like <a>getNumberOfWorkersAsync</a>, but blocks until the result is
--   ready.
getNumberOfWorkers :: RequestQueueMonad m => m Int

-- | Request that a global progress update be performed, invoking the given
--   callback with the result; see <a>requestProgressUpdate</a> for the
--   synchronous version.
requestProgressUpdateAsync :: RequestQueueMonad m => (ProgressFor (ExplorationModeFor m) -> IO ()) -> m ()

-- | Like <a>requestProgressUpdateAsync</a>, but blocks until the progress
--   update has completed.
requestProgressUpdate :: RequestQueueMonad m => m (ProgressFor (ExplorationModeFor m))

-- | Sets the size of the workload buffer; for more information, see
--   <a>setWorkloadBufferSize</a> (which links to the
--   <a>LogicGrowsOnTrees.Parallel.Common.Supervisor</a> module).
setWorkloadBufferSize :: RequestQueueMonad m => Int -> m ()

-- | A type that represents the outcome of a run.
data RunOutcome progress final_result :: * -> * -> *
RunOutcome :: RunStatistics -> TerminationReason progress final_result -> RunOutcome progress final_result

-- | statistics gathered during the run, useful if the system is not
--   scaling with the number of workers as it should
runStatistics :: RunOutcome progress final_result -> RunStatistics

-- | the reason why the run terminated
runTerminationReason :: RunOutcome progress final_result -> TerminationReason progress final_result

-- | Statistics gathered about the run.
data RunStatistics :: *
RunStatistics :: !UTCTime -> !UTCTime -> !NominalDiffTime -> !Float -> !Float -> !Int -> !Float -> !Float -> !(FunctionOfTimeStatistics NominalDiffTime) -> !IndependentMeasurementsStatistics -> !(FunctionOfTimeStatistics Int) -> !(FunctionOfTimeStatistics Int) -> !(FunctionOfTimeStatistics Float) -> !(FunctionOfTimeStatistics Float) -> RunStatistics

-- | the start time of the run
runStartTime :: RunStatistics -> !UTCTime

-- | the end time of the run
runEndTime :: RunStatistics -> !UTCTime

-- | the wall time of the run
runWallTime :: RunStatistics -> !NominalDiffTime

-- | the fraction of the time the supervisor spent processing events
runSupervisorOccupation :: RunStatistics -> !Float

-- | the fraction of the time the supervisor spent processing events while
--   inside the <tt>SupervisorMonad</tt>
runSupervisorMonadOccupation :: RunStatistics -> !Float

-- | the number of calls made to functions in
--   <a>LogicGrowsOnTrees.Parallel.Common.Supervisor</a>
runNumberOfCalls :: RunStatistics -> !Int

-- | the average amount of time per call made to functions in
--   <a>LogicGrowsOnTrees.Parallel.Common.Supervisor</a>
runAverageTimePerCall :: RunStatistics -> !Float

-- | the fraction of the total time that workers were occupied
runWorkerOccupation :: RunStatistics -> !Float

-- | statistics for how long it took for workers to obtain a workload
runWorkerWaitTimes :: RunStatistics -> !(FunctionOfTimeStatistics NominalDiffTime)

-- | statistics for the time needed to steal a workload from a worker
runStealWaitTimes :: RunStatistics -> !IndependentMeasurementsStatistics

-- | statistics for the number of workers waiting for a workload
runWaitingWorkerStatistics :: RunStatistics -> !(FunctionOfTimeStatistics Int)

-- | statistics for the number of available workloads waiting for a worker
runAvailableWorkloadStatistics :: RunStatistics -> !(FunctionOfTimeStatistics Int)

-- | statistics for the instantaneous rate at which workloads were
--   requested (using an exponentially decaying sum)
runInstantaneousWorkloadRequestRateStatistics :: RunStatistics -> !(FunctionOfTimeStatistics Float)

-- | statistics for the instantaneous time needed for workloads to be
--   stolen (using an exponentially decaying weighted average)
runInstantaneousWorkloadStealTimeStatistics :: RunStatistics -> !(FunctionOfTimeStatistics Float)

-- | A type that represents the reason why a run terminated.
data TerminationReason progress final_result :: * -> * -> *

-- | the run was aborted with the given progress
Aborted :: progress -> TerminationReason progress final_result

-- | the run completed with the given final result
Completed :: final_result -> TerminationReason progress final_result

-- | the run failed with the given progress for the given reason
Failure :: progress -> String -> TerminationReason progress final_result

-- | Callbacks used to to notify when a worker has conneted or
--   disconnected.
data NetworkCallbacks
NetworkCallbacks :: (WorkerId -> IO Bool) -> (WorkerId -> IO ()) -> NetworkCallbacks

-- | callback used to notify that a worker is about to connect; return
--   <a>True</a> to allow the connection to proceed and <a>False</a> to
--   veto it
notifyConnected :: NetworkCallbacks -> WorkerId -> IO Bool

-- | callback used to notify that a worker has disconnected
notifyDisconnected :: NetworkCallbacks -> WorkerId -> IO ()

-- | A default set of callbacks for when you don't care about being
--   notified of connections and disconnections.
default_network_callbacks :: NetworkCallbacks

-- | Configuration information that indicates whether a process should be
--   run in supervisor or worker mode.
data NetworkConfiguration shared_configuration supervisor_configuration

-- | This constructor indicates that the process should run in supervisor
--   mode.
SupervisorConfiguration :: shared_configuration -> supervisor_configuration -> WrappedPortID -> NetworkConfiguration shared_configuration supervisor_configuration

-- | configuration information shared between the supervisor and the worker
shared_configuration :: NetworkConfiguration shared_configuration supervisor_configuration -> shared_configuration

-- | configuration information specific to the supervisor
supervisor_configuration :: NetworkConfiguration shared_configuration supervisor_configuration -> supervisor_configuration

-- | <ul>
--   <li>for the worker, the port to which to connect</li>
--   </ul>
--   
--   <ul>
--   <li>for the supervisor, the port on which to listen</li>
--   </ul>
supervisor_port :: NetworkConfiguration shared_configuration supervisor_configuration -> WrappedPortID

-- | This constructor indicates that the process should be run in worker
--   mode.
WorkerConfiguration :: HostName -> WrappedPortID -> NetworkConfiguration shared_configuration supervisor_configuration

-- | the address of the supervisor to which this worker should connect
supervisor_host_name :: NetworkConfiguration shared_configuration supervisor_configuration -> HostName

-- | <ul>
--   <li>for the worker, the port to which to connect</li>
--   </ul>
--   
--   <ul>
--   <li>for the supervisor, the port on which to listen</li>
--   </ul>
supervisor_port :: NetworkConfiguration shared_configuration supervisor_configuration -> WrappedPortID

-- | The ID of a worker.
data WorkerId
WorkerId :: HostName -> PortNumber -> WorkerId

-- | the address of the worker
workerHostName :: WorkerId -> HostName

-- | the port number of the worker
workerPortNumber :: WorkerId -> PortNumber

-- | A newtype wrapper around PortID in order to provide an instance of
--   <a>ArgVal</a>.
newtype WrappedPortID
WrappedPortID :: PortID -> WrappedPortID
unwrapPortID :: WrappedPortID -> PortID

-- | This runs the supervisor, which will listen for connecting workers.
runSupervisor :: (Serialize (ProgressFor exploration_mode), Serialize (WorkerFinishedProgressFor exploration_mode)) => ExplorationMode exploration_mode -> (Handle -> IO ()) -> NetworkCallbacks -> PortID -> ProgressFor exploration_mode -> NetworkControllerMonad exploration_mode () -> Network (RunOutcomeFor exploration_mode)

-- | Runs a worker that connects to the supervisor via. the given address
--   and port id.
runWorker :: (Serialize (ProgressFor exploration_mode), Serialize (WorkerFinishedProgressFor exploration_mode)) => ExplorationMode exploration_mode -> Purity m n -> TreeT m (ResultFor exploration_mode) -> HostName -> PortID -> Network ()

-- | Explores the given tree using multiple processes to achieve
--   parallelism.
--   
--   This function grants access to all of the functionality of this
--   adapter, rather than having to go through the more restricted driver
--   interface. The signature of this function is very complicated because
--   it is meant to be used in both the supervisor and worker. The
--   configuration information is used to determine whether the program is
--   being run in supervisor mode or in worker mode; in the former case,
--   the configuration is further split into configuration information that
--   is shared between the supervisor and the worker and configuration
--   information that is specific to the supervisor.
runExplorer :: (Serialize shared_configuration, Serialize (ProgressFor exploration_mode), Serialize (WorkerFinishedProgressFor exploration_mode)) => (shared_configuration -> ExplorationMode exploration_mode) -> Purity m n -> IO (NetworkConfiguration shared_configuration supervisor_configuration) -> (shared_configuration -> IO ()) -> (shared_configuration -> TreeT m (ResultFor exploration_mode)) -> (shared_configuration -> supervisor_configuration -> IO (ProgressFor exploration_mode)) -> (shared_configuration -> supervisor_configuration -> NetworkControllerMonad exploration_mode ()) -> Network (Maybe ((shared_configuration, supervisor_configuration), RunOutcomeFor exploration_mode))

-- | Constructs a string representation of a port id. (This function is
--   needed if using an older version of the <tt>Network</tt> package that
--   doesn't have a <a>Show</a> instance for <a>PortID</a>.)
showPortID :: PortID -> String

-- | Processes the command line and returns the network configuration; it
--   uses the first argument to determine whether the configuration should
--   be for a supervisor or for a worker.
getConfiguration :: Term shared_configuration -> Term supervisor_configuration -> TermInfo -> IO (NetworkConfiguration shared_configuration supervisor_configuration)
instance Applicative (NetworkControllerMonad exploration_mode)
instance Functor (NetworkControllerMonad exploration_mode)
instance Monad (NetworkControllerMonad exploration_mode)
instance MonadCatchIO (NetworkControllerMonad exploration_mode)
instance MonadIO (NetworkControllerMonad exploration_mode)
instance RequestQueueMonad (NetworkControllerMonad exploration_mode)
instance ArgVal (Maybe WrappedPortID)
instance ArgVal WrappedPortID
instance NetworkRequestQueueMonad (NetworkControllerMonad result)
instance HasExplorationMode (NetworkControllerMonad exploration_mode)
instance Typeable WorkerId
instance Applicative Network
instance Functor Network
instance Monad Network
instance MonadIO Network
instance Eq WorkerId
instance Ord WorkerId
instance Show WorkerId
instance Eq Worker
instance Show Worker
