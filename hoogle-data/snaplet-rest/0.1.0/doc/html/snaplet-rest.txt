-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | REST resources for the Snap web framework
--   
--   REST resources for the Snap framework.
--   
--   As an example, let's translate the following datatype into a resource.
--   
--   <pre>
--   data User = User Username String Int
--   
--   type Username = CI String
--   </pre>
--   
--   We need a type to represent changes to the resource. This
--   <a>partial</a> type indicates what properties to change: either the
--   name, the age, or both.
--   
--   <pre>
--   data UserPart = UserPart (Maybe String) (Maybe Int)
--   </pre>
--   
--   This type also acts as a search mechanism: we can search by names,
--   ages, or both. We can use either a username or a <tt>UserPart</tt>
--   search to find users, and define a function to convert URL query
--   string parameters to this search.
--   
--   <pre>
--   type UserId = Either Username UserPart
--   
--   userIdFromParams :: Params -&gt; Maybe UserId
--   </pre>
--   
--   Now we have the pieces required to define our CRUD behaviour.
--   
--   <pre>
--   createUser :: User -&gt; AppHandler ()
--   
--   readUser :: UserId -&gt; AppHandler [User]
--   
--   updateUser :: UserId -&gt; UserPart -&gt; AppHandler Bool
--   
--   deleteUser :: UserId -&gt; AppHandler Bool
--   </pre>
--   
--   If we've implemented Aeson instances, we can add JSON as a media
--   format without having to define these manually. Once the behaviour is
--   attached to the resource, it can be served in the handler.
--   
--   <pre>
--   serveUser :: AppHandler ()
--   serveUser = serveResource $ resource
--       &amp; addMedia jsonInstances
--       &amp; setCreate createUser
--       &amp; setRead readUser
--       &amp; setUpdate updateUser
--       &amp; setDelete deleteUser
--       &amp; setFromParams userIdFromParams
--   </pre>
@package snaplet-rest
@version 0.1.0

module Snap.Snaplet.Rest.Resource

-- | A resource descriptor for the type <tt>res</tt>. The resource runs in
--   the monad <tt>m</tt>, identifies resources with values of the type
--   <a>id</a>, and describes changes with value of the type <tt>diff</tt>.
data Resource res m id diff

-- | The empty resource descriptor, useful as a starting point for building
--   resources.
resource :: Resource res m id diff

-- | Add a media representation for rendering and parsing.
addMedia :: Monad m => Media res m diff int -> ResourceBuilder res m id diff

-- | Set the create method for the resource.
setCreate :: (res -> m ()) -> ResourceBuilder res m id diff

-- | Set the read method for the resource.
setRead :: (id -> m [res]) -> ResourceBuilder res m id diff

-- | Set the update method for the resource. The method must return a
--   boolean, indicating whether anything was updated.
setUpdate :: (id -> diff -> m Bool) -> ResourceBuilder res m id diff

-- | Set the delete method for the resource. The method must return a
--   boolean, indicating whether anything was deleted.
setDelete :: (id -> m Bool) -> ResourceBuilder res m id diff

-- | Sets the conversion function from resource to diff value.
setToDiff :: (res -> diff) -> ResourceBuilder res m id diff

-- | Sets the URL query string parser.
setFromParams :: (Params -> Maybe id) -> ResourceBuilder res m id diff

-- | Sets a specific action to take when a PUT method is received. If not
--   set, this defaults to trying to update and then creating if that
--   fails.
setPutAction :: PutAction -> ResourceBuilder res m id diff

-- | Indicates which action that a PUT request should take for a resource.
data PutAction

-- | Always create
Create :: PutAction

-- | Always update
Update :: PutAction

-- | A grouping of mediatypes and their associated renderers and parsers.
--   You can use the standard instances defined below, or define your own.
data Media res m diff int

-- | Construct a new media grouping with the given response and request
--   mediatypes.
newMedia :: (Intermediate int, MonadSnap m) => [MediaType] -> [MediaType] -> Media res m diff int

-- | Construct a new media grouping with an intermediate type between the
--   resource and the rendered form.
newIntermediateMedia :: (int -> m ByteString) -> (ByteString -> m (Maybe int)) -> [MediaType] -> [MediaType] -> Media res m diff int

-- | Construct a new media grouping with request mediatypes only.
newRequestMedia :: (ByteString -> m (Maybe int)) -> [MediaType] -> Media res m diff int

-- | Construct a new media grouping with response mediatypes only.
newResponseMedia :: (int -> m ByteString) -> [MediaType] -> Media res m diff int

-- | A <a>Setter</a> for defining properties of a media grouping.
type MediaSetter res m diff int f a = Setter (Media res m diff int) (Media res m diff int) (f a) a

-- | Set the resource renderer.
fromResource :: MediaSetter res m diff int Maybe (res -> m int)

-- | Set the resource parser.
toResource :: MediaSetter res m diff int Maybe (int -> m (Maybe res))

-- | Set the diff parser.
toDiff :: MediaSetter res m diff int Maybe (int -> m (Maybe diff))

-- | Set the resource and diff parser at the same time.
toEither :: MediaSetter res m res int Both (int -> m (Maybe res))

-- | Set the resource list renderer.
fromResourceList :: MediaSetter res m diff int Maybe ([res] -> m int)

-- | Set the resource list parser.
toResourceList :: MediaSetter res m diff int Maybe (int -> m (Maybe [res]))

-- | Outputs JSON in UTF-8 and parses JSON agnostic of character set.
json :: Monad m => Media res m diff Value

-- | Outputs JSON in UTF-8 and parses JSON agnostic of character set. Uses
--   the type class instances to automatically set the media methods.
jsonFromInstances :: (Monad m, ToJSON res, FromJSON res, FromJSON diff) => Media res m diff Value

-- | Outputs XML in UTF-8 and parses XML agnostic of character set.
xml :: Monad m => Media res m diff Document

-- | Supports both XHTML and HTML in UTF-8 as the output format only.
--   Recommended over <a>html</a> if the output will be valid XHTML.
xhtml :: MonadSnap m => Media res m diff ByteString

-- | Supports HTML in UTF-8 as the output format only. Use <a>xhtml</a> if
--   the output is guaranteed to be well formed.
html :: MonadSnap m => Media res m diff ByteString

-- | Supports URL-encoded web forms as the input format only.
form :: MonadSnap m => Media res m diff Params

-- | Supports multipart web forms as the input format only.
multipart :: MonadSnap m => Media res m diff ByteString

module Snap.Snaplet.Rest.FromRequest

-- | Instances of this class can be parsed from the remaining path
--   information at the current route, and potentially also the URL
--   parameters.
class FromRequest id where pathEnabled _ = True defaultFromParams = Nothing
fromPath :: FromRequest id => ByteString -> Maybe id

-- | A convenient helper function that wraps a read failure into
--   <a>Nothing</a> instead of throwing an error.
parseRead :: Read a => ByteString -> Maybe a

module Snap.Snaplet.Rest.Config

-- | Configuration data.
data ResourceConfig m
ResourceConfig :: Maybe Int -> Int64 -> m () -> m () -> m () -> m () -> m () -> m () -> m () -> m () -> ResourceConfig m

-- | The maximum number of members to retrieve from a collection in a
--   single request.
readLimit :: ResourceConfig m -> Maybe Int

-- | Maximum size of request bodies allowed when receiving resources.
maxRequestBodySize :: ResourceConfig m -> Int64

-- | Action to run if the request header parsing fails.
onHeaderFailure :: ResourceConfig m -> m ()

-- | Action to run if the resource path parsing fails.
onPathFailure :: ResourceConfig m -> m ()

-- | Action to run if the URL query string parsing fails.
onQueryFailure :: ResourceConfig m -> m ()

-- | Action to run if the requested resource cannot be found.
onLookupFailure :: ResourceConfig m -> m ()

-- | Action to run an invalid method is requested on a resource.
onMethodFailure :: ResourceConfig m -> m ()

-- | Action to run if the response media type is not supported.
onAcceptFailure :: ResourceConfig m -> m ()

-- | Action to run if the request media type is not supported.
onContentTypeFailure :: ResourceConfig m -> m ()

-- | Action to run if the request body parse fails.
onContentParseFailure :: ResourceConfig m -> m ()

-- | The default configuration settings. Requires a value for the maximum
--   size of a request body.
--   
--   <pre>
--   defaultConfig mrbs = ResourceConfig
--       { readLimit = Nothing
--       , maxRequestBodySize = mrbs
--       , on*Failure = write "reason"
--       }
--   </pre>
defaultConfig :: MonadSnap m => Int64 -> ResourceConfig m

-- | The type class for an implementing Snaplet.
class HasResourceConfig b
resourceLens :: HasResourceConfig b => SnapletLens (Snaplet b) (ResourceConfig (Handler b b))

-- | Convenience alias of <a>ResourceConfig</a>.
type Resources b = ResourceConfig (Handler b b)

-- | Initialize the resource snaplet with the given configuration.
resourceInit :: ResourceConfig (Handler b b) -> SnapletInit b (Resources b)

-- | Initialize the resource snaplet with the default configuration.
resourceInitDefault :: Int64 -> SnapletInit b (Resources b)

-- | Returns the resource configuration.
getResourceConfig :: HasResourceConfig b => Handler b v (ResourceConfig (Handler b b))

module Snap.Snaplet.Rest

-- | Serve the specified resource using the configuration in the monad.
serveResource :: (HasResourceConfig b, FromRequest id) => Resource res (Handler b b) id diff -> Handler b b ()

-- | Serve the specified resource using the given configuration.
serveResourceWith :: (MonadSnap m, FromRequest id) => Resource res m id diff -> ResourceConfig m -> m ()

-- | A resource descriptor for the type <tt>res</tt>. The resource runs in
--   the monad <tt>m</tt>, identifies resources with values of the type
--   <a>id</a>, and describes changes with value of the type <tt>diff</tt>.
data Resource res m id diff

-- | The empty resource descriptor, useful as a starting point for building
--   resources.
resource :: Resource res m id diff

-- | Add a media representation for rendering and parsing.
addMedia :: Monad m => Media res m diff int -> ResourceBuilder res m id diff

-- | Set the create method for the resource.
setCreate :: (res -> m ()) -> ResourceBuilder res m id diff

-- | Set the read method for the resource.
setRead :: (id -> m [res]) -> ResourceBuilder res m id diff

-- | Set the update method for the resource. The method must return a
--   boolean, indicating whether anything was updated.
setUpdate :: (id -> diff -> m Bool) -> ResourceBuilder res m id diff

-- | Set the delete method for the resource. The method must return a
--   boolean, indicating whether anything was deleted.
setDelete :: (id -> m Bool) -> ResourceBuilder res m id diff

-- | Sets the conversion function from resource to diff value.
setToDiff :: (res -> diff) -> ResourceBuilder res m id diff

-- | Sets the URL query string parser.
setFromParams :: (Params -> Maybe id) -> ResourceBuilder res m id diff

-- | Sets a specific action to take when a PUT method is received. If not
--   set, this defaults to trying to update and then creating if that
--   fails.
setPutAction :: PutAction -> ResourceBuilder res m id diff

-- | Indicates which action that a PUT request should take for a resource.
data PutAction

-- | Always create
Create :: PutAction

-- | Always update
Update :: PutAction

-- | Instances of this class can be parsed from the remaining path
--   information at the current route, and potentially also the URL
--   parameters.
class FromRequest id where pathEnabled _ = True defaultFromParams = Nothing
fromPath :: FromRequest id => ByteString -> Maybe id

-- | A convenient helper function that wraps a read failure into
--   <a>Nothing</a> instead of throwing an error.
parseRead :: Read a => ByteString -> Maybe a

-- | A type alias for the HTTP parameters mapping. Each parameter key maps
--   to a list of ByteString values; if a parameter is specified multiple
--   times (e.g.: "<tt>GET /foo?param=bar1&amp;param=bar2</tt>"), looking
--   up "<tt>param</tt>" in the mapping will give you <tt>["bar1",
--   "bar2"]</tt>.
type Params = Map ByteString [ByteString]

-- | A grouping of mediatypes and their associated renderers and parsers.
--   You can use the standard instances defined below, or define your own.
data Media res m diff int

-- | Construct a new media grouping with the given response and request
--   mediatypes.
newMedia :: (Intermediate int, MonadSnap m) => [MediaType] -> [MediaType] -> Media res m diff int

-- | Construct a new media grouping with an intermediate type between the
--   resource and the rendered form.
newIntermediateMedia :: (int -> m ByteString) -> (ByteString -> m (Maybe int)) -> [MediaType] -> [MediaType] -> Media res m diff int

-- | Construct a new media grouping with request mediatypes only.
newRequestMedia :: (ByteString -> m (Maybe int)) -> [MediaType] -> Media res m diff int

-- | Construct a new media grouping with response mediatypes only.
newResponseMedia :: (int -> m ByteString) -> [MediaType] -> Media res m diff int

-- | A <a>Setter</a> for defining properties of a media grouping.
type MediaSetter res m diff int f a = Setter (Media res m diff int) (Media res m diff int) (f a) a

-- | Set the resource renderer.
fromResource :: MediaSetter res m diff int Maybe (res -> m int)

-- | Set the resource parser.
toResource :: MediaSetter res m diff int Maybe (int -> m (Maybe res))

-- | Set the diff parser.
toDiff :: MediaSetter res m diff int Maybe (int -> m (Maybe diff))

-- | Set the resource and diff parser at the same time.
toEither :: MediaSetter res m res int Both (int -> m (Maybe res))

-- | Set the resource list renderer.
fromResourceList :: MediaSetter res m diff int Maybe ([res] -> m int)

-- | Set the resource list parser.
toResourceList :: MediaSetter res m diff int Maybe (int -> m (Maybe [res]))

-- | Outputs JSON in UTF-8 and parses JSON agnostic of character set.
json :: Monad m => Media res m diff Value

-- | Outputs JSON in UTF-8 and parses JSON agnostic of character set. Uses
--   the type class instances to automatically set the media methods.
jsonFromInstances :: (Monad m, ToJSON res, FromJSON res, FromJSON diff) => Media res m diff Value

-- | Outputs XML in UTF-8 and parses XML agnostic of character set.
xml :: Monad m => Media res m diff Document

-- | Supports both XHTML and HTML in UTF-8 as the output format only.
--   Recommended over <a>html</a> if the output will be valid XHTML.
xhtml :: MonadSnap m => Media res m diff ByteString

-- | Supports HTML in UTF-8 as the output format only. Use <a>xhtml</a> if
--   the output is guaranteed to be well formed.
html :: MonadSnap m => Media res m diff ByteString

-- | Supports URL-encoded web forms as the input format only.
form :: MonadSnap m => Media res m diff Params

-- | Supports multipart web forms as the input format only.
multipart :: MonadSnap m => Media res m diff ByteString

-- | Configuration data.
data ResourceConfig m
ResourceConfig :: Maybe Int -> Int64 -> m () -> m () -> m () -> m () -> m () -> m () -> m () -> m () -> ResourceConfig m

-- | The maximum number of members to retrieve from a collection in a
--   single request.
readLimit :: ResourceConfig m -> Maybe Int

-- | Maximum size of request bodies allowed when receiving resources.
maxRequestBodySize :: ResourceConfig m -> Int64

-- | Action to run if the request header parsing fails.
onHeaderFailure :: ResourceConfig m -> m ()

-- | Action to run if the resource path parsing fails.
onPathFailure :: ResourceConfig m -> m ()

-- | Action to run if the URL query string parsing fails.
onQueryFailure :: ResourceConfig m -> m ()

-- | Action to run if the requested resource cannot be found.
onLookupFailure :: ResourceConfig m -> m ()

-- | Action to run an invalid method is requested on a resource.
onMethodFailure :: ResourceConfig m -> m ()

-- | Action to run if the response media type is not supported.
onAcceptFailure :: ResourceConfig m -> m ()

-- | Action to run if the request media type is not supported.
onContentTypeFailure :: ResourceConfig m -> m ()

-- | Action to run if the request body parse fails.
onContentParseFailure :: ResourceConfig m -> m ()

-- | The default configuration settings. Requires a value for the maximum
--   size of a request body.
--   
--   <pre>
--   defaultConfig mrbs = ResourceConfig
--       { readLimit = Nothing
--       , maxRequestBodySize = mrbs
--       , on*Failure = write "reason"
--       }
--   </pre>
defaultConfig :: MonadSnap m => Int64 -> ResourceConfig m

-- | The type class for an implementing Snaplet.
class HasResourceConfig b
resourceLens :: HasResourceConfig b => SnapletLens (Snaplet b) (ResourceConfig (Handler b b))

-- | Convenience alias of <a>ResourceConfig</a>.
type Resources b = ResourceConfig (Handler b b)

-- | Initialize the resource snaplet with the given configuration.
resourceInit :: ResourceConfig (Handler b b) -> SnapletInit b (Resources b)

-- | Initialize the resource snaplet with the default configuration.
resourceInitDefault :: Int64 -> SnapletInit b (Resources b)
