-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generate Main module with QuickCheck tests
--   
@package quickpull
@version 0.4.2.2

module Quickpull.Formatting
indentAmt :: Int
indent :: Int -> String -> String
(<+>) :: String -> String -> String

module Quickpull.Types

-- | A tree of tests. This allows you to group tests for convenient
--   display; it also allows you to write computations that return entire
--   groups of tests.
data TestTree
TestTree :: String -> Node -> TestTree
label :: TestTree -> String
payload :: TestTree -> Node
data Node

-- | A group of tests. Contains a list of <a>TestTree</a>, each of which
--   might be a <a>Test</a> or another <a>Group</a>.
Group :: [TestTree] -> Node

-- | A QuickCheck test to run.
Test :: a -> Node

-- | A single property or tree to test.
data Article
Single :: a -> Article
Multi :: TestTree -> Article

-- | Metadata about a particular test or group.
data Meta
Meta :: ModDesc -> Int -> String -> Meta

-- | Name of file providing this test or group.
modDesc :: Meta -> ModDesc

-- | Line number of the test or group.
linenum :: Meta -> Int

-- | The name of the test or group, such as <tt>prop_mytest</tt> or
--   <tt>proptree_mytest</tt>.
qName :: Meta -> String

-- | Description of a single property or tree to test from a file. Unlike
--   <tt>Item</tt>, this does not contain the actual item; this is for use
--   when parsing a test input module.
data Qual
QTree :: Qual
QProp :: Qual

-- | Description of a module.
data ModDesc
ModDesc :: String -> [String] -> ModDesc

-- | Path to the module
modPath :: ModDesc -> String

-- | Each part of the hierarchical name
modName :: ModDesc -> [String]

-- | Creates a <a>ModDesc</a>.
makeModDesc :: FilePath -> [FilePath] -> FilePath -> ModDesc

-- | Specifies a single item to test, along with metadata about that item.
data Decree
Decree :: Meta -> Article -> Decree
meta :: Decree -> Meta
item :: Decree -> Article

-- | Summary of all QuickCheck results.
data Summary
Summary :: !Int -> !Int -> !Int -> !Int -> Summary
success :: Summary -> !Int
gaveUp :: Summary -> !Int
failure :: Summary -> !Int
noExpectedFailure :: Summary -> !Int

-- | Create a new <a>Group</a> of tests.
group :: String -> [TestTree] -> TestTree

-- | Create a new <a>Test</a>.
test :: Testable a => String -> a -> TestTree
instance Eq Qual
instance Ord Qual
instance Show Qual
instance Eq ModDesc
instance Ord ModDesc
instance Show ModDesc
instance Eq Meta
instance Ord Meta
instance Show Meta
instance Show TestTree

module Quickpull.Files

-- | Takes a stack of directories and a directory where reading was
--   started; returns a single path to the relevant directory.
concatDirs :: FilePath -> [FilePath] -> FilePath
isInterestingFile :: FilePath -> Bool
isInterestingDir :: FilePath -> Bool

-- | Pulls all modules from a given directory.
modsInDirectory :: [FilePath] -> FilePath -> IO [ModDesc]

-- | Pulls all modules from the given directory. A module is any file that
--   begins with a capital letter and ends in <tt>.hs</tt>.
allModules :: FilePath -> IO [ModDesc]

-- | Pulls all properties from the text of a file. Properties that are
--   <tt>Testable</tt> must begin with <tt>prop_</tt>. Properties that are
--   a <a>TestTree</a> must begin with <tt>proptree_</tt>.
--   
--   Steps in this computation:
--   
--   <ul>
--   <li>Split text into lines</li>
--   <li>Add line numbers</li>
--   <li>Extract all lines that have a word in the first column; keep only
--   this first word and discard the rest of the line</li>
--   <li>Sort list by this first word, then reverse the list so that the
--   second occurrence of the word is earlier in the list. This way, if
--   there is a type signature followed by a definition, the type signature
--   is discarded in the next step.</li>
--   <li>use <a>nubBy</a> to remove duplicate words, such as type
--   signatures</li>
--   <li>sort words by line number order, so they're in original order
--   again</li>
--   <li>Create <tt>Qinfo</tt>; here, words that do not start with
--   <tt>prop_</tt> or <tt>proptree_</tt> are discarded</li>
--   </ul>
getQuals :: ModDesc -> String -> [(Meta, Qual)]

-- | Given a <a>ModDesc</a>, reads the module from disk and parses it.
readAndParse :: ModDesc -> IO [(Meta, Qual)]

module Quickpull.Render
metaQual :: Char -> (Meta, Qual) -> String
metaQuals :: [(Meta, Qual)] -> String
imports :: [ModDesc] -> String

-- | Summarizes a Meta in a single line.
metaLine :: Meta -> String
topComments :: String
testModule :: String -> [(Meta, Qual)] -> String
summary :: Summary -> String


-- | Running tests. To check a <a>TestTree</a> in a REPL, use
--   <a>quickCheckTree</a>; to check a QuickCheck <a>Testable</a>, just use
--   <a>quickCheck</a> and the similar functions in <a>Test.QuickCheck</a>.
--   The other functions in this module will be more useful for checking
--   from within a compiled test program.
--   
--   The QuickCheck docs in <a>Test.QuickCheck</a> contain warnings about
--   how type defaulting in GHCi can cause types to silently default to
--   <tt>()</tt>; all those warnings also apply to use of the functions in
--   this module. Although QuickCheck has some Template Haskell to help
--   with this, Quickpull currently does not. You don't have to worry about
--   this in non-interactive use, as the defaulting rules are more strict
--   and, with warnings on, GHC will warn you when it defaults a type.
module Quickpull.Runners

-- | Checks a <a>TestTree</a> and prints the result to standard output.
--   Intended for use in a REPL; however, the QuickCheck docs in
--   <a>Test.QuickCheck</a> contain warnings about how type defaulting in
--   GHCi can cause types to silently default to <tt>()</tt>; all those
--   warnings also apply to use of this function.
quickCheckTree :: TestTree -> IO ()

-- | Checks a <a>TestTree</a> and prints the result to standard output in
--   addition to returning it as a list of <a>Result</a>. Each
--   <a>Decree</a> returns a list of <a>Result</a> (a <a>Single</a> returns
--   a single <a>Result</a>, while a <a>Multi</a> returns a <a>Result</a>
--   for each test in the tree.)
treeWithResult :: (forall a. Testable a => a -> IO Result) -> TestTree -> IO [Result]

-- | Tests a <a>Decree</a> and prints the result to standard output in
--   addition to returning a list of <a>Result</a>. Each <a>Decree</a>
--   returns a list of <a>Result</a> (a <a>Single</a> returns a single
--   <a>Result</a>, while a <a>Multi</a> returns a <a>Result</a> for each
--   test in the tree.)
decreeWithResult :: (forall a. Testable a => a -> IO Result) -> Decree -> IO [Result]

-- | Tests each <a>Decree</a> using a custom function that you specify;
--   this allows you to vary the test depending on what's in the
--   <a>Decree</a>. Each <a>Decree</a> returns a list of <a>Result</a> (a
--   <a>Single</a> returns a single <a>Result</a>, while a <a>Multi</a>
--   returns a <a>Result</a> for each test in the tree.) The tests are
--   printed to standard output as they run, in addition to returning the
--   <a>Result</a>.
seeDecree :: (Decree -> forall a. Testable a => a -> IO Result) -> [Decree] -> IO [[Result]]

-- | Tests each <a>Decree</a> and prints the results to standard output.
--   Exits successfully if all tests succeeded; otherwise, exits
--   unsuccessfully.
--   
--   Not recommended for REPL use as this function will either kill your
--   REPL when it's done or, in the case of recent GHC versions, issue an
--   exception.
defaultMain :: [Decree] -> IO ()

-- | Like <a>defaultMain</a> but allows you to pass arguments to the
--   QuickCheck driver.
--   
--   Not recommended for REPL use as this function will either kill your
--   REPL when it's done or, in the case of recent GHC versions, issue an
--   exception.
defaultMainWith :: Args -> [Decree] -> IO ()

-- | Tallies up the <a>Result</a>s.
summarize :: [Result] -> Summary

-- | Exit successfully if there were no failures, give-ups, or
--   no-expected-failures; otherwise, exit unsuccessfully.
exitCode :: Summary -> ExitCode


-- | This module is necessary to maintain compatibility with both
--   QuickCheck 2.6 and QuickCheck 2.7. This module is used for newer
--   versions of QuickCheck (after version 2.7).
module Quickpull.EqShow

-- | Like <a>==</a>, but prints a counterexample when it fails.
(===) :: (Eq a, Show a) => a -> a -> Property


-- | Functions to build <a>TestTree</a> that test properties of
--   typeclasses, such as the functor laws, monad laws, and monoid laws.
--   These functions are rough; for example, they do not shrink on failure,
--   they are monomorphic, and they do not show the counterexamples of
--   failing functions. But they are sufficient to help verify the
--   lawfulness of your types.
module Quickpull.Laws

-- | Tests the monad laws:
--   
--   Left identity:
--   
--   <pre>
--   return a &gt;&gt;= f == f a
--   </pre>
--   
--   Right identity:
--   
--   <pre>
--   m &gt;&gt;= return == m
--   </pre>
--   
--   Associativity:
--   
--   <pre>
--   (m &gt;&gt;= f) &gt;&gt;= g == m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)
--   </pre>
monad :: (Eq b, Show b, Monad m) => Gen (m Int) -> Gen (Int -> m Int) -> Gen (m Int -> b) -> TestTree

-- | Tests the functor laws:
--   
--   <pre>
--   fmap id == id
--   </pre>
--   
--   <pre>
--   fmap (f . g) == fmap f . fmap g
--   </pre>
functor :: (Eq b, Show b, Functor f) => Gen (f Int) -> Gen (f Int -> b) -> TestTree

-- | Tests the Applicative laws:
--   
--   <ul>
--   <li>identity:</li>
--   </ul>
--   
--   <pre>
--   pure id &lt;*&gt; v == v
--   </pre>
--   
--   <ul>
--   <li>composition:</li>
--   </ul>
--   
--   <pre>
--   pure (.) &lt;*&gt; u &lt;*&gt; v &lt;*&gt; w == u &lt;*&gt; (v &lt;*&gt; w)
--   </pre>
--   
--   <ul>
--   <li>homomorphism:</li>
--   </ul>
--   
--   <pre>
--   pure f &lt;*&gt; pure x = pure (f x)
--   </pre>
--   
--   <ul>
--   <li>interchange:</li>
--   </ul>
--   
--   <pre>
--   u &lt;*&gt; pure y = pure ($ y) &lt;*&gt; u
--   </pre>
applicative :: (Eq b, Show b, Applicative f) => Gen (f Int) -> Gen (f (Int -> Int)) -> Gen (f Int -> b) -> TestTree

-- | Tests the monoid laws:
--   
--   <pre>
--   mappend mempty x = x
--   </pre>
--   
--   <pre>
--   mappend x mempty = x
--   </pre>
--   
--   <pre>
--   mappend x (mappend y z) = mappend (mappend x y) z
--   </pre>
--   
--   <pre>
--   mconcat = foldr mappend mempty
--   </pre>
monoid :: (Eq b, Show b, Monoid a) => Gen a -> Gen (a -> b) -> TestTree

-- | Tests whether a particular operation is associative, that is:
--   
--   <pre>
--   a `f` (b `f` c) == (a `f` b) `f` c
--   </pre>
associative :: (Eq b, Show b) => Gen (a -> a -> a) -> Gen (a -> b) -> Gen a -> Gen Property

-- | Tests whether a particular operation is commutative, that is:
--   
--   <pre>
--   a `f` b == b `f` a
--   </pre>
commutative :: (Eq b, Show b) => Gen (a -> a -> a) -> Gen (a -> b) -> Gen a -> Gen Property

-- | Tests whether a particular value is the left identity, that is:
--   
--   <pre>
--   z `f` a == a
--   </pre>
leftIdentity :: (Eq b, Show b) => Gen (a -> a -> a) -> Gen (a -> b) -> Gen a -> Gen a -> Gen Property

-- | Tests whether a particular value is the right identity, that is:
--   
--   <pre>
--   a `f` z == a
--   </pre>
rightIdentity :: (Eq b, Show b) => Gen (a -> a -> a) -> Gen (a -> b) -> Gen a -> Gen a -> Gen Property


-- | Quickpull - a simple testing framework to reduce boilerplating
--   
--   Quickpull is a testing framework that helps you test multiple
--   QuickCheck properties with a minimum of boilerplating and redundancy.
--   It consists of two parts: first, an executable file which reads
--   Haskell modules and extracts properties from them; and second, this
--   library, which runs the tests.
--   
--   The executable, named <tt>quickpull</tt> by default, is a
--   preprocessor. You have to run this executable to get the QuickCheck
--   properties from your modules. It fetches single properties, which are
--   values that have type <tt><tt>Testable</tt> a</tt>, as well as trees
--   of properties, which have type <a>TestTree</a>. For example, to get
--   your properties if they are in modules in a directory named
--   <tt>tests</tt>, run this from your project's root directory:
--   
--   <pre>
--   $ quickpull tests
--   </pre>
--   
--   The results will be printed to standard output. Inspect this output,
--   then redirect the output to a module named <tt>Decrees</tt>.
--   
--   <tt>quickpull</tt> does not know or parse Haskell. It simply reads the
--   file and, following a few simple rules, copies the names of properties
--   and trees, along with metadata about them. All single properties must
--   be named beginning with <tt>prop_</tt>, and trees must be named
--   beginning with <tt>proptree_</tt>. The name of the property or tree
--   must be the first thing on the line, not preceded by spaces on the
--   line (which is probably how you write modules anyway if you are using
--   layout.)
--   
--   One problem with this method is that code that is commented out using
--   the block commenting (with braces) will still be read; at present a
--   simple workaround is to comment out blocks of code using per-line
--   commenting instead.
--   
--   <tt>quickpull</tt> only gets tests from files ending in <tt>.hs</tt>,
--   and the property name must be the very first thing on the line;
--   therefore, literate Haskell files won't work.
--   
--   You then need a program that actually runs your tests. To get started,
--   you need just a short simple program, like this:
--   
--   <pre>
--   module Main where
--   
--   import Decrees
--   import Quickpull
--   
--   main = defaultMain decrees
--   </pre>
--   
--   When run, this program will run the tests, print the results to
--   standard output, and exit with an appropriate error code.
--   
--   If your needs are more complicated, study the <a>Quickpull.Types</a>
--   and <a>Quickpull.Runners</a> modules. For example, you can:
--   
--   <ul>
--   <li>change the arguments you pass to the QuickCheck driver</li>
--   <li>inspect each <a>Decree</a> separately to change the way the test
--   is run for different <a>Decree</a>s</li>
--   <li>filter the list of <a>Decree</a> so that you run only some tests
--   rather than all of them</li>
--   </ul>
--   
--   There is also the <a>Quickpull.Laws</a> module, which helps you test
--   common laws, such as the Monad laws and the Monoid laws.
--   
--   Advantages of Quickpull:
--   
--   <ul>
--   <li>reduces boilerplate and frees you from the tedious task of
--   assembling many tests from one module, and of assembling tests from
--   different modules into another module</li>
--   <li>compiles quickly; no heavyweight dependencies.</li>
--   <li>No Template Haskell.</li>
--   </ul>
--   
--   Disadvantages:
--   
--   <ul>
--   <li>Requires you to run a preprocessor to get the tests</li>
--   <li>No way to select at runtime which tests to run or the QuickCheck
--   parameters (at least, not out of the box; you could add this.)</li>
--   <li>The preprocessor is dumb and inelegant.</li>
--   <li>No support for Smallcheck or HUnit.</li>
--   <li>Currently no way to test polymorphic properties; you will have to
--   monomorphise these yourself.</li>
--   </ul>
--   
--   For examples of usage, see the tests that are bundled with Quickpull
--   in the <tt>tests/</tt> directory. These tests use Quickpull to test
--   some common laws, such as the Monad and Monoid laws, on types that
--   come in the standard library. There is a similar test for the
--   QuickCheck <a>Gen</a> monad in the <tt>quickcheck-tests/</tt>
--   directory; interestingly enough, Gen does not satisfy the monad laws.
--   To compile and run the <tt>tests/</tt> tests, run cabal with the
--   <tt>--enable-tests</tt> option; it will produce a binary named
--   <tt>quickpull-tests</tt>. For the <tt>quickcheck-tests/</tt>
--   directory, run Cabal with the <tt>-fbuild-test-gen</tt> option; it
--   will produce a binary named <tt>quickpull-test-gen</tt>.
--   
--   To see how to integrate Quickpull into a development workflow, see the
--   Quickpull source on Github at
--   
--   <a>http://www.github.com/massysett/quickpull</a>
--   
--   It has a <tt>generate</tt> script that runs the <tt>quickpull</tt>
--   binary to generate the appropriate <tt>Decrees</tt> modules; after
--   that, <tt>cabal</tt> can be used as usual to build the package,
--   executables, and distribution tarball. That way, although your test
--   suite will need Quickpull listed as a build dependency so the tests
--   will build, your users will not need to do any preprocessing to run
--   the tests.
module Quickpull

-- | A tree of tests. This allows you to group tests for convenient
--   display; it also allows you to write computations that return entire
--   groups of tests.
data TestTree

-- | Create a new <a>Group</a> of tests.
group :: String -> [TestTree] -> TestTree

-- | Create a new <a>Test</a>.
test :: Testable a => String -> a -> TestTree

-- | Description of a module.
data ModDesc
ModDesc :: String -> [String] -> ModDesc

-- | Path to the module
modPath :: ModDesc -> String

-- | Each part of the hierarchical name
modName :: ModDesc -> [String]

-- | Metadata about a particular test or group.
data Meta
Meta :: ModDesc -> Int -> String -> Meta

-- | Name of file providing this test or group.
modDesc :: Meta -> ModDesc

-- | Line number of the test or group.
linenum :: Meta -> Int

-- | The name of the test or group, such as <tt>prop_mytest</tt> or
--   <tt>proptree_mytest</tt>.
qName :: Meta -> String

-- | A single property or tree to test.
data Article
Single :: a -> Article
Multi :: TestTree -> Article

-- | Specifies a single item to test, along with metadata about that item.
data Decree
Decree :: Meta -> Article -> Decree
meta :: Decree -> Meta
item :: Decree -> Article

-- | Checks a <a>TestTree</a> and prints the result to standard output.
--   Intended for use in a REPL; however, the QuickCheck docs in
--   <a>Test.QuickCheck</a> contain warnings about how type defaulting in
--   GHCi can cause types to silently default to <tt>()</tt>; all those
--   warnings also apply to use of this function.
quickCheckTree :: TestTree -> IO ()

-- | Tests each <a>Decree</a> and prints the results to standard output.
--   Exits successfully if all tests succeeded; otherwise, exits
--   unsuccessfully.
--   
--   Not recommended for REPL use as this function will either kill your
--   REPL when it's done or, in the case of recent GHC versions, issue an
--   exception.
defaultMain :: [Decree] -> IO ()

-- | Like <a>defaultMain</a> but allows you to pass arguments to the
--   QuickCheck driver.
--   
--   Not recommended for REPL use as this function will either kill your
--   REPL when it's done or, in the case of recent GHC versions, issue an
--   exception.
defaultMainWith :: Args -> [Decree] -> IO ()
