-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Heist frontend for the digestive-functors library
--   
@package digestive-functors-heist
@version 0.8.6.2


-- | This module provides a compiled Heist frontend for the
--   digestive-functors library.
--   
--   Disclaimer: this documentation requires very basic familiarity with
--   digestive-functors. You might want to take a quick look at this
--   tutorial first:
--   
--   
--   <a>https://github.com/jaspervdj/digestive-functors/blob/master/examples/tutorial.lhs</a>
--   
--   This module exports the <a>formSplice</a> function, and most users
--   will not require anything else.
--   
--   These splices are used to create HTML for different form elements.
--   This way, the developer doesn't have to care about setting e.g. the
--   previous values in a text field when something goes wrong.
--   
--   For documentation on the different splices, see the different
--   functions exported by this module. All splices have the same name as
--   given in <a>digestiveSplices</a>.
--   
--   You can give arbitrary attributes to most of the elements (i.e. where
--   it makes sense). This means you can do e.g.:
--   
--   <pre>
--   &lt;dfInputTextArea ref="description" cols="20" rows="3" /&gt;
--   </pre>
module Text.Digestive.Heist.Compiled

-- | A compiled splice for a specific form. You pass in a runtime action
--   that gets the form's view and this function returns a splice that
--   creates a form tag. In your HeistConfig you might have a compiled
--   splice like this:
--   
--   <pre>
--   ("customerForm" ## formSplice mempty mempty
--                      (liftM fst $ runForm "customer" custForm))
--   </pre>
--   
--   Then you can use the customerForm tag just like you would use the
--   dfForm tag in interpreted templates anywhere you want to have a
--   customer form.
formSplice :: MonadIO m => Splices (Splice m) -> Splices (AttrSplice m) -> RuntimeSplice m (View Text) -> Splice m

-- | Same as <a>formSplice</a> except the supplied splices and attribute
--   splices are applied to the resulting form view.
formSplice' :: MonadIO m => (RuntimeSplice m (View Text) -> Splices (Splice m)) -> (RuntimeSplice m (View Text) -> Splices (AttrSplice m)) -> RuntimeSplice m (View Text) -> Splice m

-- | Generate an input field with a supplied type. Example:
--   
--   <pre>
--   &lt;dfInput type="date" ref="date" /&gt;
--   </pre>
dfInput :: Monad m => RuntimeSplice m (View v) -> Splice m

-- | This splice allows variable length lists. It binds several attribute
--   splices providing functionality for dynamically manipulating the list.
--   The following descriptions will use the example of a form named "foo"
--   with a list subform named "items".
--   
--   Splices: dfListItem - This tag must surround the markup for a single
--   list item. It surrounds all of its children with a div with id
--   "foo.items" and class "inputList" and displays a copy for each of the
--   list items including a "template" item used for generating new items.
--   If the you supply the attribute "noTemplate", then the template item
--   is not included and the generated list will not be dynamically updated
--   by the add and remove actions.
--   
--   Attribute Splices: itemAttrs - Attribute you should use on div, span,
--   etc that surrounds all the markup for a single list item. This splice
--   expands to an id of "foo.items.ix" (where ix is the index of the
--   current item) and a class of "inputListItem". addControl - Use this
--   attribute on the tag you use to define a control for adding elements
--   to the list (usually a button or anchor). It adds an onclick attribute
--   that calls a javascript function addInputListItem. removeControl - Use
--   this attribute on the control for removing individual items. It adds
--   an onclick attribute that calls removeInputListItem.
dfInputList :: MonadIO m => RuntimeSplice m (View Text) -> Splice m

-- | Generate a text input field. Example:
--   
--   <pre>
--   &lt;dfInputText ref="user.name" /&gt;
--   </pre>
dfInputText :: Monad m => RuntimeSplice m (View v) -> Splice m

-- | Generate a text area. Example:
--   
--   <pre>
--   &lt;dfInputTextArea ref="user.about" /&gt;
--   </pre>
dfInputTextArea :: Monad m => RuntimeSplice m (View v) -> Splice m

-- | Generate a password field. Example:
--   
--   <pre>
--   &lt;dfInputPassword ref="user.password" /&gt;
--   </pre>
dfInputPassword :: Monad m => RuntimeSplice m (View v) -> Splice m

-- | Generate a hidden input field. Example:
--   
--   <pre>
--   &lt;dfInputHidden ref="user.forgery" /&gt;
--   </pre>
dfInputHidden :: Monad m => RuntimeSplice m (View v) -> Splice m

-- | Generate a select button (also known as a combo box). Example:
--   
--   <pre>
--   &lt;dfInputSelect ref="user.sex" /&gt;
--   </pre>
dfInputSelect :: Monad m => RuntimeSplice m (View Text) -> Splice m

-- | Generate a select button (also known as a combo box). Example:
--   
--   <pre>
--   &lt;dfInputSelectGroup ref="user.sex" /&gt;
--   </pre>
dfInputSelectGroup :: Monad m => RuntimeSplice m (View Text) -> Splice m

-- | Generate a number of radio buttons. Example:
--   
--   <pre>
--   &lt;dfInputRadio ref="user.sex" /&gt;
--   </pre>
dfInputRadio :: Monad m => RuntimeSplice m (View Text) -> Splice m

-- | Generate a checkbox. Example:
--   
--   <pre>
--   &lt;dfInputCheckbox ref="user.married" /&gt;
--   </pre>
dfInputCheckbox :: Monad m => RuntimeSplice m (View v) -> Splice m

-- | Generate a file upload element. Example:
--   
--   <pre>
--   &lt;dfInputFile ref="user.avatar" /&gt;
--   </pre>
dfInputFile :: Monad m => RuntimeSplice m (View v) -> Splice m

-- | Generate a submit button. Example:
--   
--   <pre>
--   &lt;dfInputSubmit /&gt;
--   </pre>
dfInputSubmit :: Monad m => Splice m

-- | Generate a label for a field. Example:
--   
--   <pre>
--   &lt;dfLabel ref="user.married"&gt;Married: &lt;/dfLabel&gt;
--   &lt;dfInputCheckbox ref="user.married" /&gt;
--   </pre>
dfLabel :: Monad m => RuntimeSplice m (View v) -> Splice m

-- | Display the list of errors for a certain field. Example:
--   
--   <pre>
--   &lt;dfErrorList ref="user.name" /&gt;
--   &lt;dfInputText ref="user.name" /&gt;
--   </pre>
dfErrorList :: MonadIO m => RuntimeSplice m (View Text) -> Splice m

-- | Display the list of errors for a certain form and all forms below it.
--   E.g., if there is a subform called <tt>"user"</tt>:
--   
--   <pre>
--   &lt;dfChildErrorList ref="user" /&gt;
--   </pre>
--   
--   Or display <i>all</i> errors for the form:
--   
--   <pre>
--   &lt;dfChildErrorList ref="" /&gt;
--   </pre>
--   
--   Which is more conveniently written as:
--   
--   <pre>
--   &lt;dfChildErrorList /&gt;
--   </pre>
dfChildErrorList :: MonadIO m => RuntimeSplice m (View Text) -> Splice m

-- | This splice allows reuse of templates by selecting some child of a
--   form tree. While this may sound complicated, it's pretty
--   straightforward and practical. Suppose we have:
--   
--   <pre>
--   &lt;dfInputText ref="user.name" /&gt;
--   &lt;dfInputText ref="user.password" /&gt;
--   
--   &lt;dfInputTextArea ref="comment.body" /&gt;
--   </pre>
--   
--   You may want to abstract the <tt>"user"</tt> parts in some other
--   template so you Don't Repeat Yourself (TM). If you create a template
--   called <tt>"user-form"</tt> with the following contents:
--   
--   <pre>
--   &lt;dfInputText ref="name" /&gt;
--   &lt;dfInputText ref="password" /&gt;
--   </pre>
--   
--   You will be able to use:
--   
--   <pre>
--   &lt;dfSubView ref="user"&gt;
--       &lt;apply template="user-form" /&gt;
--   &lt;/dfSubView&gt;
--   
--   &lt;dfInputTextArea ref="comment.body" /&gt;
--   </pre>
dfSubView :: MonadIO m => RuntimeSplice m (View Text) -> Splice m

-- | Render some content only if there are any errors. This is useful for
--   markup purposes.
--   
--   <pre>
--   &lt;dfIfChildErrors ref="user"&gt;
--       Content to be rendered if there are any errors...
--   &lt;/dfIfChildErrors&gt;
--   </pre>
--   
--   The <tt>ref</tt> attribute can be omitted if you want to check the
--   entire form.
dfIfChildErrors :: MonadIO m => RuntimeSplice m (View v) -> Splice m

-- | List of splices defined for forms. For most uses the formSplice
--   function will be fine and you won't need to use this directly. But
--   this is available if you need more customization.
digestiveSplices :: MonadIO m => RuntimeSplice m (View Text) -> Splices (Splice m)


-- | This module provides a Heist frontend for the digestive-functors
--   library.
--   
--   Disclaimer: this documentation requires very basic familiarity with
--   digestive-functors. You might want to take a quick look at this
--   tutorial first:
--   
--   
--   <a>https://github.com/jaspervdj/digestive-functors/blob/master/examples/tutorial.lhs</a>
--   
--   This module exports the functions <a>digestiveSplices</a> and
--   <a>bindDigestiveSplices</a>, and most users will not require anything
--   else.
--   
--   These splices are used to create HTML for different form elements.
--   This way, the developer doesn't have to care about setting e.g. the
--   previous values in a text field when something goes wrong.
--   
--   For documentation on the different splices, see the different
--   functions exported by this module. All splices have the same name as
--   given in <a>digestiveSplices</a>.
--   
--   You can give arbitrary attributes to most of the elements (i.e. where
--   it makes sense). This means you can do e.g.:
--   
--   <pre>
--   &lt;dfInputTextArea ref="description" cols="20" rows="3" /&gt;
--   </pre>
module Text.Digestive.Heist
digestiveSplices :: MonadIO m => View Text -> Splices (Splice m)
bindDigestiveSplices :: MonadIO m => View Text -> HeistState m -> HeistState m

-- | Generate an input field with a supplied type. Example:
--   
--   <pre>
--   &lt;dfInput type="date" ref="date" /&gt;
--   </pre>
dfInput :: Monad m => View v -> Splice m

-- | This splice allows variable length lists. It binds several attribute
--   splices providing functionality for dynamically manipulating the list.
--   The following descriptions will use the example of a form named "foo"
--   with a list subform named "items".
--   
--   Splices: dfListItem - This tag must surround the markup for a single
--   list item. It surrounds all of its children with a div with id
--   "foo.items" and class "inputList".
--   
--   Attribute Splices: itemAttrs - Attribute you should use on div, span,
--   etc that surrounds all the markup for a single list item. This splice
--   expands to an id of "foo.items.ix" (where ix is the index of the
--   current item) and a class of "inputListItem". addControl - Use this
--   attribute on the tag you use to define a control for adding elements
--   to the list (usually a button or anchor). It adds an onclick attribute
--   that calls a javascript function addInputListItem. removeControl - Use
--   this attribute on the control for removing individual items. It adds
--   an onclick attribute that calls removeInputListItem.
dfInputList :: MonadIO m => View Text -> Splice m

-- | Generate a text input field. Example:
--   
--   <pre>
--   &lt;dfInputText ref="user.name" /&gt;
--   </pre>
dfInputText :: Monad m => View v -> Splice m

-- | Generate a text area. Example:
--   
--   <pre>
--   &lt;dfInputTextArea ref="user.about" /&gt;
--   </pre>
dfInputTextArea :: Monad m => View v -> Splice m

-- | Generate a password field. Example:
--   
--   <pre>
--   &lt;dfInputPassword ref="user.password" /&gt;
--   </pre>
dfInputPassword :: Monad m => View v -> Splice m

-- | Generate a hidden input field. Example:
--   
--   <pre>
--   &lt;dfInputHidden ref="user.forgery" /&gt;
--   </pre>
dfInputHidden :: Monad m => View v -> Splice m

-- | Generate a select button (also known as a combo box). Example:
--   
--   <pre>
--   &lt;dfInputSelect ref="user.sex" /&gt;
--   </pre>
dfInputSelect :: Monad m => View Text -> Splice m

-- | Generate a select button (also known as a combo box). Example:
--   
--   <pre>
--   &lt;dfInputSelectGroup ref="user.sex" /&gt;
--   </pre>
dfInputSelectGroup :: Monad m => View Text -> Splice m

-- | Generate a number of radio buttons. Example:
--   
--   <pre>
--   &lt;dfInputRadio ref="user.sex" /&gt;
--   </pre>
dfInputRadio :: Monad m => View Text -> Splice m

-- | Generate a checkbox. Example:
--   
--   <pre>
--   &lt;dfInputCheckbox ref="user.married" /&gt;
--   </pre>
dfInputCheckbox :: Monad m => View Text -> Splice m

-- | Generate a file upload element. Example:
--   
--   <pre>
--   &lt;dfInputFile ref="user.avatar" /&gt;
--   </pre>
dfInputFile :: Monad m => View Text -> Splice m

-- | Generate a submit button. Example:
--   
--   <pre>
--   &lt;dfInputSubmit /&gt;
--   </pre>
dfInputSubmit :: Monad m => View v -> Splice m

-- | Generate a label for a field. Example:
--   
--   <pre>
--   &lt;dfLabel ref="user.married"&gt;Married: &lt;/dfLabel&gt;
--   &lt;dfInputCheckbox ref="user.married" /&gt;
--   </pre>
dfLabel :: Monad m => View v -> Splice m

-- | Generate a form tag with the <tt>method</tt> attribute set to
--   <tt>POST</tt> and the <tt>enctype</tt> set to the right value
--   (depending on the form). Custom <tt>method</tt> or <tt>enctype</tt>
--   attributes would override this behavior. Example:
--   
--   <pre>
--   &lt;dfForm action="/users/new"&gt;
--       &lt;dfInputText ... /&gt;
--       ...
--       &lt;dfInputSubmit /&gt;
--   &lt;/dfForm&gt;
--   </pre>
dfForm :: Monad m => View v -> Splice m

-- | Display the list of errors for a certain field. Example:
--   
--   <pre>
--   &lt;dfErrorList ref="user.name" /&gt;
--   &lt;dfInputText ref="user.name" /&gt;
--   </pre>
dfErrorList :: Monad m => View Text -> Splice m

-- | Display the list of errors for a certain form and all forms below it.
--   E.g., if there is a subform called <tt>"user"</tt>:
--   
--   <pre>
--   &lt;dfChildErrorList ref="user" /&gt;
--   </pre>
--   
--   Or display <i>all</i> errors for the form:
--   
--   <pre>
--   &lt;dfChildErrorList ref="" /&gt;
--   </pre>
--   
--   Which is more conveniently written as:
--   
--   <pre>
--   &lt;dfChildErrorList /&gt;
--   </pre>
dfChildErrorList :: Monad m => View Text -> Splice m

-- | This splice allows reuse of templates by selecting some child of a
--   form tree. While this may sound complicated, it's pretty
--   straightforward and practical. Suppose we have:
--   
--   <pre>
--   &lt;dfInputText ref="user.name" /&gt;
--   &lt;dfInputText ref="user.password" /&gt;
--   
--   &lt;dfInputTextArea ref="comment.body" /&gt;
--   </pre>
--   
--   You may want to abstract the <tt>"user"</tt> parts in some other
--   template so you Don't Repeat Yourself (TM). If you create a template
--   called <tt>"user-form"</tt> with the following contents:
--   
--   <pre>
--   &lt;dfInputText ref="name" /&gt;
--   &lt;dfInputText ref="password" /&gt;
--   </pre>
--   
--   You will be able to use:
--   
--   <pre>
--   &lt;dfSubView ref="user"&gt;
--       &lt;apply template="user-form" /&gt;
--   &lt;/dfSubView&gt;
--   
--   &lt;dfInputTextArea ref="comment.body" /&gt;
--   </pre>
dfSubView :: MonadIO m => View Text -> Splice m

-- | Render some content only if there are any errors. This is useful for
--   markup purposes.
--   
--   <pre>
--   &lt;dfIfChildErrors ref="user"&gt;
--       Content to be rendered if there are any errors...
--   &lt;/dfIfChildErrors&gt;
--   </pre>
--   
--   The <tt>ref</tt> attribute can be omitted if you want to check the
--   entire form.
dfIfChildErrors :: Monad m => View v -> Splice m
