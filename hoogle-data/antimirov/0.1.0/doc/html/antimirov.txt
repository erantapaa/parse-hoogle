-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Define the language containment (=subtyping) relation on regulare expressions.
--   
--   This is a generalization of regex-<a>matching</a>. We use Antimirovs
--   algorithm. Tests are provided, too.
@package antimirov
@version 0.1.0

module Data.Regex.Antimirov.Regex
data (Eq a, Ord a) => Regex a
Then :: (Regex a) -> (Regex a) -> Regex a
Or :: (Regex a) -> (Regex a) -> Regex a
Star :: (Regex a) -> Regex a
Empty :: Regex a
Literal :: a -> Regex a
nullable :: Ord t => Regex t -> Bool
toG :: Ord a => [a] -> Regex a
instance Ord a => Eq (Regex a)
instance Ord a => Ord (Regex a)
instance (Ord a, Show a) => Show (Regex a)

module Data.Regex.Antimirov.Simplify
getOr :: Ord a => Regex a -> Set (Regex a)

module Data.Regex.Antimirov.Subtyping
(<:) :: (Ord a, RegexSubtyping a) => Maybe (Regex a) -> Maybe (Regex a) -> Bool
match :: (RegexSubtyping a, Ord a) => Maybe (Regex a) -> [a] -> Bool
class Eq a => RegexSubtyping a
literalSubtype :: RegexSubtyping a => a -> a -> Bool

module Data.Regex.Antimirov.SubtypingList
(<:) :: (Ord a, RegexSubtyping a) => Maybe (Regex a) -> Maybe (Regex a) -> Bool
match :: (RegexSubtyping a, Ord a) => Maybe (Regex a) -> [a] -> Bool
class Eq a => RegexSubtyping a
literalSubtype :: RegexSubtyping a => a -> a -> Bool

module Data.Regex.Antimirov
