-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | measure timings of data evaluation
--   
--   The <a>Chronograph</a> data structure adds a measure field to an
--   existing Haskell expression. This field will be the time necessary to
--   evaluate the expression using an arbitrary evaluation strategy (WHNF
--   by default).
--   
--   Chronograph preserves laziness, so that the work of performing the
--   evaluation is only done after the result is demanded.
--   
--   If you want to benchmark your program, you should look to other
--   packages like Criterion that perform statistical analysis of your
--   results so you can determine how reliable they are. Chronograph just
--   takes measurements, leaving the interpretation entirely to you.
@package chronograph
@version 0.1.0.0


-- | Measure data and IO evaluation time in a lightweight manner.
--   
--   A 'Chronograph a' has two parts, the value <tt>a</tt> and the
--   measurement of evaluation time. A Chronograph is lazy, so <tt>a</tt>
--   is only evaluted on demand.
--   
--   This example counts the lines in a number of files, and records the
--   evaluation time taken for each one.
--   
--   <pre>
--   import System.Environment
--   import Control.Applicative
--   import Data.Chronograph
--   
--   import Text.Printf
--   
--   formatOutput :: FilePath -&gt; Chronograph Int -&gt; String
--   formatOutput fp chr = printf "%s :: %d, %s" fp (val chr) (show $ measure chr)
--   
--   procFile :: FilePath -&gt; IO ()
--   procFile fp = do
--       doc &lt;- readFile fp
--       let wc = length $ lines doc
--       putStrLn $ formatOutput fp (chrono wc)
--   </pre>
--   
--   <a>chrono</a> creates a chronograph that evaluates its input as far as
--   <a>seq</a> would. In this case the input <tt>wc</tt> is an Int, so
--   <a>chrono</a> fully evaluates it. deepseq-style evaluation is
--   performed by <a>chronoNF</a>, and custom evaluation strategies can be
--   implemented with <a>chronoBy</a>.
--   
--   although <tt>wc</tt> is a pure value, IO is lazily performed in its
--   evalution. This IO cost is included in <a>chrono</a>s measurement.
--   
--   You can explicitly include timings of IO actions as well:
--   
--   <pre>
--   fileLinesIO :: FilePath -&gt; IO Int
--   fileLinesIO fp = length . lines &lt;$&gt; readFile fp
--   
--   procIO :: FilePath -&gt; IO ()
--   procIO fp = do
--     wc &lt;- chronoIO $ fileLinesIO fp
--     putStrLn $ formatOutput fp wc
--   </pre>
--   
--   <pre>
--   main :: IO ()
--   main = do
--       args &lt;- getArgs
--       putStrLn "pure Chronograph"
--       mapM_ procFile args
--       putStrLn "IO Chronograph"
--       mapM_ procIO args
--   </pre>
module Data.Chronograph
data Chronograph a
Chronograph :: a -> NominalDiffTime -> Chronograph a
val :: Chronograph a -> a
measure :: Chronograph a -> NominalDiffTime

-- | Add a <a>Chronograph</a> to measure evaluation to weak head normal
--   form.
chrono :: a -> Chronograph a

-- | Add a <a>Chronograph</a> to measure evaluation to normal form.
chronoNF :: NFData a => a -> Chronograph a

-- | Add a <a>Chronograph</a> to measure evalution time with the provided
--   strategy.
chronoBy :: (a -> ()) -> a -> Chronograph a

-- | Add a <a>Chronograph</a> to measure IO time (no additional evaluation
--   is performed, although the IO action itself may perform some
--   evaluation)
chronoJustIO :: IO a -> IO (Chronograph a)

-- | Add a <a>Chronograph</a> to measure time of IO and evaluation to weak
--   head normal form.
chronoIO :: IO a -> IO (Chronograph a)

-- | Add a <a>Chronograph</a> to measure time of IO and evaluation to
--   normal form.
chronoNFIO :: NFData a => IO a -> IO (Chronograph a)

-- | Add a <a>Chronograph</a> to measure time of IO and evaluation with the
--   provided strategy.
chronoIOBy :: (a -> ()) -> IO a -> IO (Chronograph a)
instance Show a => Show (Chronograph a)
instance Generic (Chronograph a)
instance Datatype D1Chronograph
instance Constructor C1_0Chronograph
instance Selector S1_0_0Chronograph
instance Selector S1_0_1Chronograph
