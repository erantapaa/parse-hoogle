-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A fast logging system
--   
@package fast-logger
@version 2.4.0

module System.Log.FastLogger.File

-- | The spec for logging files
data FileLogSpec
FileLogSpec :: FilePath -> Integer -> Int -> FileLogSpec
log_file :: FileLogSpec -> FilePath
log_file_size :: FileLogSpec -> Integer
log_backup_number :: FileLogSpec -> Int

-- | Checking if a log file can be written.
check :: FileLogSpec -> IO ()

-- | Rotating log files.
rotate :: FileLogSpec -> IO ()


-- | This module provides a fast logging system which scales on multicore
--   environments (i.e. +RTS -N&lt;x&gt;).
module System.Log.FastLogger

-- | A set of loggers. The number of loggers is the capabilities of GHC
--   RTS. You can specify it with "+RTS -N&lt;x&gt;". A buffer is prepared
--   for each capability.
data LoggerSet

-- | Creating a new <a>LoggerSet</a> using a file.
newFileLoggerSet :: BufSize -> FilePath -> IO LoggerSet

-- | Creating a new <a>LoggerSet</a> using stdout.
newStdoutLoggerSet :: BufSize -> IO LoggerSet

-- | Creating a new <a>LoggerSet</a> using stderr.
newStderrLoggerSet :: BufSize -> IO LoggerSet

-- | Creating a new <a>LoggerSet</a>. If <a>Nothing</a> is specified to the
--   second argument, stdout is used. Please note that the minimum
--   <a>BufSize</a> is 1.

-- | <i>Deprecated: Use newFileLoggerSet etc instead</i>
newLoggerSet :: BufSize -> Maybe FilePath -> IO LoggerSet

-- | The type for buffer size of each core.
type BufSize = Int

-- | The default buffer size (4,096 bytes).
defaultBufSize :: BufSize

-- | Renewing the internal file information in <a>LoggerSet</a>. This does
--   nothing for stdout and stderr.
renewLoggerSet :: LoggerSet -> IO ()

-- | Flushing the buffers, closing the internal file information and
--   freeing the buffers.
rmLoggerSet :: LoggerSet -> IO ()

-- | Log message builder. Use (<a>&lt;&gt;</a>) to append two LogStr in
--   O(1).
data LogStr
class ToLogStr msg
toLogStr :: ToLogStr msg => msg -> LogStr

-- | Converting <a>LogStr</a> to <a>ByteString</a>.
fromLogStr :: LogStr -> ByteString

-- | Obtaining the length of <a>LogStr</a>.
logStrLength :: LogStr -> Int

-- | Writing a log message to the corresponding buffer. If the buffer
--   becomes full, the log messages in the buffer are written to its
--   corresponding file, stdout, or stderr.
pushLogStr :: LoggerSet -> LogStr -> IO ()

-- | Same as <a>pushLogStr</a> but also appends a newline.
pushLogStrLn :: LoggerSet -> LogStr -> IO ()

-- | Flushing log messages in buffers. This function must be called
--   explicitly when the program is being terminated.
--   
--   Note: Since version 2.1.6, this function does not need to be
--   explicitly called, as every push includes an auto-debounced flush
--   courtesy of the auto-update package. Since version 2.2.2, this
--   function can be used to force flushing outside of the debounced flush
--   calls.
flushLogStr :: LoggerSet -> IO ()
