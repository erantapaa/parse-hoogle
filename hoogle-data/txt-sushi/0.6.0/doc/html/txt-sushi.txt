-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The SQL link in your *NIX chain
--   
--   txt-sushi is a collection of command line utilities for processing
--   comma-separated and tab-delimited files (AKA flat files,
--   spreadsheets). The most important utility (tssql) lets you perform SQL
--   selects on CSV files. By focusing exclusively on processing text files
--   with a tabular structure, TxtSushi simplifies common tasks like
--   filtering, joining and transformation that would take more effort to
--   accomplish with a general purpose text processing language.
@package txt-sushi
@version 0.6.0


-- | Some functions for joining lists
module Database.TxtSushi.Relational

-- | join together two tables on the given column index pairs
joinTables :: Ord o => (a -> o) -> [a] -> (b -> o) -> [b] -> [(a, b)]
crossJoinTables :: [a] -> [b] -> [(a, b)]

-- | join together two tables that are presorted on the given column index
--   pairs
joinPresortedTables :: Ord o => (a -> o) -> [a] -> Maybe a -> (b -> o) -> [b] -> Maybe b -> [(a, b)]


-- | A couple of util functions for txt-sushi
module Database.TxtSushi.IOUtil

-- | buffers standard input to a temp file and returns a path to that file
bufferStdioToTempFile :: IO FilePath

-- | if given <a>-</a> this file reads from stdin otherwise it reads from
--   the named file
getContentsFromFileOrStdin :: String -> IO String

-- | print a cookie-cutter usage message for the command line utilities
--   that take a single file name or <a>-</a> as input
printSingleFileUsage :: IO ()
versionStr :: String


-- | Functions for reading/writing flat files
module Database.TxtSushi.FlatFile
formatTableWithWidths :: String -> [Int] -> [[String]] -> String

-- | for a table, calculate the max width in characters for each column
maxTableColumnWidths :: [[String]] -> [Int]

-- | Format the given table (the 2D String array) into a flat-file string
--   using the given <a>Format</a>
formatTable :: Format -> [[String]] -> String

-- | Parse the given text using the given flat file <a>Format</a>. The
--   result is a list of list of strings. The strings are fields and the
--   string lists are rows
parseTable :: Format -> String -> [[String]]

-- | <a>Format</a> allows you to specify different flat-file formats so
--   that you can use <a>parseTable</a> for CSV, tab-delimited etc.
data Format
Format :: String -> String -> [String] -> Format
csvFormat :: Format
tabDelimitedFormat :: Format

-- | get a quote escape sequence for the given <a>Format</a>
doubleQuote :: Format -> String
instance Show Format


-- | For sorting huge lists on disk
module Database.TxtSushi.ExternalSort

-- | performs an external sort on the given list using the default resource
--   constraints
externalSort :: (Binary b, Ord b) => [b] -> [b]

-- | performs an external sort on the given list using the given comparison
--   function and the default resource constraints
externalSortBy :: Binary b => (b -> b -> Ordering) -> [b] -> [b]

-- | performs an external sort on the given list using the given resource
--   constraints
externalSortByConstrained :: (Binary b, Integral i) => i -> i -> (b -> b -> Ordering) -> [b] -> [b]

-- | Currently 16 MB. Don't rely on this value staying the same in future
--   releases!
defaultByteQuota :: Int

-- | Currently 17 files. Don't rely on this value staying the same in
--   future releases!
defaultMaxOpenFiles :: Int


-- | Parse utility functions
module Database.TxtSushi.ParseUtil
parseInt :: GenParser Char st Int

-- | returns an int if it can be read from the string
maybeReadInt :: String -> Maybe Int

-- | returns a real if it can be read from the string
maybeReadReal :: String -> Maybe Double
parseReal :: GenParser Char st Double
withoutTrailing :: Show s => GenParser tok st s -> GenParser tok st a -> GenParser tok st a
withTrailing :: Monad m => m a -> m b -> m b

-- | like the lexeme function, this function eats all spaces after the
--   given parser, but this one works for me and lexeme doesn't
eatSpacesAfter :: GenParser Char st a -> GenParser Char st a

-- | quoted text which allows escaping by doubling the quote char like
--   "escaped quote char here:"""
quotedText :: Bool -> Char -> GenParser Char st String
escapedQuote :: Char -> GenParser Char st Char

-- | if the ifParse parser succeeds return the result of thenParse, else
--   return Nothing without parsing any input
ifParseThen :: GenParser tok st a -> GenParser tok st b -> GenParser tok st (Maybe b)

-- | if the preservingIfParseThen is basically the same as ifParse except
--   that the if result is preserved in the first part of the tuple
preservingIfParseThen :: GenParser tok st a -> GenParser tok st b -> GenParser tok st (Maybe (a, b))

-- | if ifParse succeeds then parse thenPart otherwise parse elsePart
ifParseThenElse :: GenParser tok st a -> GenParser tok st b -> GenParser tok st b -> GenParser tok st b

-- | accepst the same input as the given parser except and input that
--   matches theException parser
genExcept :: Show b => GenParser tok st a -> GenParser tok st b -> GenParser tok st a

-- | a generic version of the notFollowedBy library function. We require
--   Show types so that we can better report failures
genNotFollowedBy :: Show a => GenParser tok st a -> GenParser tok st ()

-- | returns Just parseResult if the parse succeeds and Nothing if it fails
maybeParse :: GenParser tok st a -> GenParser tok st (Maybe a)

-- | parse <tt>itemParser</tt>s seperated by exactly <tt>minCount</tt>
--   <tt>sepParser</tt>s
sepByExactly :: Int -> GenParser tok st a -> GenParser tok st sep -> GenParser tok st [a]

-- | parse <tt>itemParser</tt>s seperated by at least <tt>minCount</tt>
--   <tt>sepParser</tt>s
sepByAtLeast :: Int -> GenParser tok st a -> GenParser tok st sep -> GenParser tok st [a]


-- | EvaluatedExpression data type along with supporting functions
module Database.TxtSushi.EvaluatedExpression
data EvaluatedExpression
StringExpression :: String -> EvaluatedExpression
RealExpression :: Double -> EvaluatedExpression
IntExpression :: Int -> EvaluatedExpression
BoolExpression :: Bool -> EvaluatedExpression
realCompare :: EvaluatedExpression -> EvaluatedExpression -> Ordering
intCompare :: EvaluatedExpression -> EvaluatedExpression -> Ordering
boolCompare :: EvaluatedExpression -> EvaluatedExpression -> Ordering
stringCompare :: EvaluatedExpression -> EvaluatedExpression -> Ordering
coerceString :: EvaluatedExpression -> String
maybeCoerceInt :: EvaluatedExpression -> Maybe Int
coerceInt :: EvaluatedExpression -> Int
maybeCoerceReal :: EvaluatedExpression -> Maybe Double
coerceReal :: EvaluatedExpression -> Double
maybeReadBool :: String -> Maybe Bool
maybeCoerceBool :: EvaluatedExpression -> Maybe Bool
coerceBool :: EvaluatedExpression -> Bool
instance Show EvaluatedExpression
instance Eq EvaluatedExpression
instance Ord EvaluatedExpression


-- | SQL Expressions
module Database.TxtSushi.SQLExpression

-- | convenience function for extracting all of the table names used by the
--   given table expression
allMaybeTableNames :: (Maybe TableExpression) -> [String]

-- | represents a select statement TODO this should be moved inside the
--   TableExpression type
data SelectStatement
SelectStatement :: [ColumnSelection] -> Maybe TableExpression -> Maybe Expression -> Maybe ([Expression], Maybe Expression) -> [OrderByItem] -> SelectStatement
columnSelections :: SelectStatement -> [ColumnSelection]
maybeFromTable :: SelectStatement -> Maybe TableExpression
maybeWhereFilter :: SelectStatement -> Maybe Expression
maybeGroupByHaving :: SelectStatement -> Maybe ([Expression], Maybe Expression)
orderByItems :: SelectStatement -> [OrderByItem]
data TableExpression
TableIdentifier :: String -> Maybe String -> TableExpression
tableName :: TableExpression -> String
maybeTableAlias :: TableExpression -> Maybe String
InnerJoin :: TableExpression -> TableExpression -> Expression -> Maybe String -> TableExpression
leftJoinTable :: TableExpression -> TableExpression
rightJoinTable :: TableExpression -> TableExpression
onCondition :: TableExpression -> Expression
maybeTableAlias :: TableExpression -> Maybe String
OuterJoin :: TableExpression -> TableExpression -> Expression -> Maybe String -> TableExpression
leftJoinTable :: TableExpression -> TableExpression
rightJoinTable :: TableExpression -> TableExpression
onCondition :: TableExpression -> Expression
maybeTableAlias :: TableExpression -> Maybe String
CrossJoin :: TableExpression -> TableExpression -> Maybe String -> TableExpression
leftJoinTable :: TableExpression -> TableExpression
rightJoinTable :: TableExpression -> TableExpression
maybeTableAlias :: TableExpression -> Maybe String
SelectExpression :: SelectStatement -> Maybe String -> TableExpression
selectStatement :: TableExpression -> SelectStatement
maybeTableAlias :: TableExpression -> Maybe String
data ColumnIdentifier
ColumnIdentifier :: Maybe String -> String -> ColumnIdentifier
maybeTableName :: ColumnIdentifier -> Maybe String
columnId :: ColumnIdentifier -> String
data ColumnSelection
AllColumns :: ColumnSelection
AllColumnsFrom :: String -> ColumnSelection
sourceTableName :: ColumnSelection -> String
ExpressionColumn :: Expression -> Maybe String -> ColumnSelection
expression :: ColumnSelection -> Expression
maybeColumnAlias :: ColumnSelection -> Maybe String
ExpressionColumnRange :: ColumnIdentifier -> ColumnRange -> Expression -> ColumnSelection
binding :: ColumnSelection -> ColumnIdentifier
range :: ColumnSelection -> ColumnRange
expression :: ColumnSelection -> Expression
data Expression
FunctionExpression :: SQLFunction -> [Expression] -> String -> Expression
sqlFunction :: Expression -> SQLFunction
functionArguments :: Expression -> [Expression]
stringRepresentation :: Expression -> String
ColumnExpression :: ColumnIdentifier -> String -> Expression
column :: Expression -> ColumnIdentifier
stringRepresentation :: Expression -> String
StringConstantExpression :: String -> String -> Expression
stringConstant :: Expression -> String
stringRepresentation :: Expression -> String
IntConstantExpression :: Int -> String -> Expression
intConstant :: Expression -> Int
stringRepresentation :: Expression -> String
RealConstantExpression :: Double -> String -> Expression
realConstant :: Expression -> Double
stringRepresentation :: Expression -> String
BoolConstantExpression :: Bool -> String -> Expression
boolConstant :: Expression -> Bool
stringRepresentation :: Expression -> String
data SQLFunction
SQLFunction :: String -> Int -> Bool -> String -> String -> ([EvaluatedExpression] -> EvaluatedExpression) -> SQLFunction
functionName :: SQLFunction -> String
minArgCount :: SQLFunction -> Int
argCountIsFixed :: SQLFunction -> Bool
functionGrammar :: SQLFunction -> String
functionDescription :: SQLFunction -> String
applyFunction :: SQLFunction -> [EvaluatedExpression] -> EvaluatedExpression
data OrderByItem
OrderByItem :: Expression -> Bool -> OrderByItem
orderExpression :: OrderByItem -> Expression
orderAscending :: OrderByItem -> Bool
data ColumnRange
ColumnRange :: Maybe ColumnIdentifier -> Maybe ColumnIdentifier -> ColumnRange
maybeStart :: ColumnRange -> Maybe ColumnIdentifier
maybeEnd :: ColumnRange -> Maybe ColumnIdentifier

-- | an aggregate function is one whose min function count is 1 and whose
--   arg count is not fixed
isAggregate :: SQLFunction -> Bool
selectStatementContainsAggregates :: SelectStatement -> Bool
expressionToString :: Expression -> String
columnToString :: ColumnIdentifier -> String
instance Eq ColumnIdentifier


-- | Module for executing a SQL statement
module Database.TxtSushi.SQLExecution

-- | perform a SQL select with the given select statement on the given
--   table map
select :: SortConfiguration -> SelectStatement -> (Map String BoxedTable) -> BoxedTable
databaseTableToTextTable :: BoxedTable -> [[String]]
textTableToDatabaseTable :: String -> [[String]] -> BoxedTable

-- | We will use the sort configuration to determine whether tables should
--   be sorted external or in memory
data SortConfiguration
UseInMemorySort :: SortConfiguration
UseExternalSort :: SortConfiguration
instance Show SortConfiguration
instance Ord e => Ord (NestedDataGroups e)
instance Eq e => Eq (NestedDataGroups e)
instance Show e => Show (NestedDataGroups e)
instance Applicative NestedDataGroups
instance Functor NestedDataGroups


-- | SQL Function definitions. This is where you can extend TxtSushi by
--   adding new function definitions.
module Database.TxtSushi.SQLFunctionDefinitions
data SQLFunction
SQLFunction :: String -> Int -> Bool -> String -> String -> ([EvaluatedExpression] -> EvaluatedExpression) -> SQLFunction
functionName :: SQLFunction -> String
minArgCount :: SQLFunction -> Int
argCountIsFixed :: SQLFunction -> Bool
functionGrammar :: SQLFunction -> String
functionDescription :: SQLFunction -> String
applyFunction :: SQLFunction -> [EvaluatedExpression] -> EvaluatedExpression
normalSyntaxFunctions :: [SQLFunction]
infixFunctions :: [[SQLFunction]]
specialFunctions :: [SQLFunction]
negateFunction :: SQLFunction
countFunction :: SQLFunction
substringFromToFunction :: SQLFunction

-- | SUBSTRING(extraction_string FROM starting_position [FOR length]
--   [COLLATE collation_name]) TODO implement COLLATE part
substringFromFunction :: SQLFunction
notFunction :: SQLFunction


-- | Module for parsing SQL
module Database.TxtSushi.SQLParser

-- | Parses a SQL select statement
parseSelectStatement :: GenParser Char st SelectStatement

-- | convenience function for extracting all of the table names used by the
--   given table expression
allMaybeTableNames :: (Maybe TableExpression) -> [String]

-- | represents a select statement TODO this should be moved inside the
--   TableExpression type
data SelectStatement
SelectStatement :: [ColumnSelection] -> Maybe TableExpression -> Maybe Expression -> Maybe ([Expression], Maybe Expression) -> [OrderByItem] -> SelectStatement
columnSelections :: SelectStatement -> [ColumnSelection]
maybeFromTable :: SelectStatement -> Maybe TableExpression
maybeWhereFilter :: SelectStatement -> Maybe Expression
maybeGroupByHaving :: SelectStatement -> Maybe ([Expression], Maybe Expression)
orderByItems :: SelectStatement -> [OrderByItem]
data TableExpression
TableIdentifier :: String -> Maybe String -> TableExpression
tableName :: TableExpression -> String
maybeTableAlias :: TableExpression -> Maybe String
InnerJoin :: TableExpression -> TableExpression -> Expression -> Maybe String -> TableExpression
leftJoinTable :: TableExpression -> TableExpression
rightJoinTable :: TableExpression -> TableExpression
onCondition :: TableExpression -> Expression
maybeTableAlias :: TableExpression -> Maybe String
OuterJoin :: TableExpression -> TableExpression -> Expression -> Maybe String -> TableExpression
leftJoinTable :: TableExpression -> TableExpression
rightJoinTable :: TableExpression -> TableExpression
onCondition :: TableExpression -> Expression
maybeTableAlias :: TableExpression -> Maybe String
CrossJoin :: TableExpression -> TableExpression -> Maybe String -> TableExpression
leftJoinTable :: TableExpression -> TableExpression
rightJoinTable :: TableExpression -> TableExpression
maybeTableAlias :: TableExpression -> Maybe String
SelectExpression :: SelectStatement -> Maybe String -> TableExpression
selectStatement :: TableExpression -> SelectStatement
maybeTableAlias :: TableExpression -> Maybe String
data ColumnIdentifier
ColumnIdentifier :: Maybe String -> String -> ColumnIdentifier
maybeTableName :: ColumnIdentifier -> Maybe String
columnId :: ColumnIdentifier -> String
data ColumnSelection
AllColumns :: ColumnSelection
AllColumnsFrom :: String -> ColumnSelection
sourceTableName :: ColumnSelection -> String
ExpressionColumn :: Expression -> Maybe String -> ColumnSelection
expression :: ColumnSelection -> Expression
maybeColumnAlias :: ColumnSelection -> Maybe String
ExpressionColumnRange :: ColumnIdentifier -> ColumnRange -> Expression -> ColumnSelection
binding :: ColumnSelection -> ColumnIdentifier
range :: ColumnSelection -> ColumnRange
expression :: ColumnSelection -> Expression
data Expression
FunctionExpression :: SQLFunction -> [Expression] -> String -> Expression
sqlFunction :: Expression -> SQLFunction
functionArguments :: Expression -> [Expression]
stringRepresentation :: Expression -> String
ColumnExpression :: ColumnIdentifier -> String -> Expression
column :: Expression -> ColumnIdentifier
stringRepresentation :: Expression -> String
StringConstantExpression :: String -> String -> Expression
stringConstant :: Expression -> String
stringRepresentation :: Expression -> String
IntConstantExpression :: Int -> String -> Expression
intConstant :: Expression -> Int
stringRepresentation :: Expression -> String
RealConstantExpression :: Double -> String -> Expression
realConstant :: Expression -> Double
stringRepresentation :: Expression -> String
BoolConstantExpression :: Bool -> String -> Expression
boolConstant :: Expression -> Bool
stringRepresentation :: Expression -> String
data SQLFunction
SQLFunction :: String -> Int -> Bool -> String -> String -> ([EvaluatedExpression] -> EvaluatedExpression) -> SQLFunction
functionName :: SQLFunction -> String
minArgCount :: SQLFunction -> Int
argCountIsFixed :: SQLFunction -> Bool
functionGrammar :: SQLFunction -> String
functionDescription :: SQLFunction -> String
applyFunction :: SQLFunction -> [EvaluatedExpression] -> EvaluatedExpression
data OrderByItem
OrderByItem :: Expression -> Bool -> OrderByItem
orderExpression :: OrderByItem -> Expression
orderAscending :: OrderByItem -> Bool


-- | Some functions for parsing command line args (TODO: evaluate what
--   you're doing here against the arg parsing libraries on hackage)
module Database.TxtSushi.CommandLineArgument
extractCommandLineArguments :: CommandLineDescription -> [String] -> (Map OptionDescription [[String]], [String])

-- | converts a command line description into a string version that you can
--   show the user
formatCommandLine :: CommandLineDescription -> String
data CommandLineDescription
CommandLineDescription :: [OptionDescription] -> Int -> [String] -> Bool -> CommandLineDescription
options :: CommandLineDescription -> [OptionDescription]
minTailArgumentCount :: CommandLineDescription -> Int
tailArgumentNames :: CommandLineDescription -> [String]
tailArgumentCountIsFixed :: CommandLineDescription -> Bool

-- | a data structure for describing command line arguments
data OptionDescription
OptionDescription :: Bool -> String -> [String] -> Int -> Bool -> OptionDescription

-- | determines if this is a required option or not
isRequired :: OptionDescription -> Bool

-- | What flag should we use. Eg: <a>-pretty-output</a>
optionFlag :: OptionDescription -> String

-- | The name(s) to use for the argument(s).
argumentNames :: OptionDescription -> [String]

-- | the minimum number of args allowed
minArgumentCount :: OptionDescription -> Int

-- | if true then <a>minArgumentCount</a> is the upper threshold
argumentCountIsFixed :: OptionDescription -> Bool
instance Show OptionDescription
instance Eq OptionDescription
instance Ord OptionDescription
instance Show CommandLineDescription
instance Eq CommandLineDescription
instance Ord CommandLineDescription
