-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bindings to the morphological analyser Morfeusz
--   
--   The library provides bindings to the morphological analyser Morfeusz
--   <a>http://sgjp.pl/morfeusz/</a>.
@package morfeusz
@version 0.4.2


-- | The module provides the <a>analyse</a> wrapper function which uses the
--   Morfeusz library for morphosyntactic analysis. The result is
--   represented as a directed acylic graph (DAG) with <a>Token</a> labeled
--   edges. The DAG representation is needed when the input word has
--   multiple correct segmentations.
--   
--   <pre>
--   &gt;&gt;&gt; :m NLP.Morfeusz
--   
--   &gt;&gt;&gt; :set -XOverloadedStrings
--   
--   &gt;&gt;&gt; mapM_ print . analyse False $ "miałem"
--   Edge {from = 0, to = 1, label = Token {orth = "mia\322", interps = [Interp {base = "mie\263", msd = "praet:sg:m1.m2.m3:imperf"}]}}
--   Edge {from = 0, to = 2, label = Token {orth = "mia\322em", interps = [Interp {base = "mia\322", msd = "subst:sg:inst:m3"}]}}
--   Edge {from = 1, to = 2, label = Token {orth = "em", interps = [Interp {base = "by\263", msd = "aglt:sg:pri:imperf:wok"}]}}
--   </pre>
--   
--   You can use the <a>paths</a> function to extract all paths from the
--   resultant DAG and, if you are not interested in all possible
--   segmentations, just take the first of possible paths:
--   
--   <pre>
--   &gt;&gt;&gt; mapM_ print . paths . analyse False $ "miałem"
--   [Token {orth = "mia\322em", interps = [Interp {base = "mia\322", msd = "subst:sg:inst:m3"}]}]
--   [Token {orth = "mia\322", interps = [Interp {base = "mie\263", msd = "praet:sg:m1.m2.m3:imperf"}]},Token {orth = "em", interps = [Interp {base = "by\263", msd = "aglt:sg:pri:imperf:wok"}]}]
--   
--   &gt;&gt;&gt; mapM_ print . head . paths . analyse False $ "miałem"
--   Token {orth = "mia\322em", interps = [Interp {base = "mia\322", msd = "subst:sg:inst:m3"}]}
--   </pre>
module NLP.Morfeusz

-- | A DAG with annotated edges.
type DAG a = [Edge a]

-- | A directed edge with label of type <tt>a</tt> between nodes of type
--   <a>Int</a>.
data Edge a
Edge :: Int -> Int -> a -> Edge a
from :: Edge a -> Int
to :: Edge a -> Int
label :: Edge a -> a

-- | A token with a list of recognized interpretations. If the list of
--   interpretations is empty, the token is unknown to the Morfeusz.
data Token
Token :: Text -> [Interp] -> Token
orth :: Token -> Text
interps :: Token -> [Interp]

-- | An interpretation of the word.
data Interp
Interp :: Text -> Text -> Interp
base :: Interp -> Text
msd :: Interp -> Text

-- | Keep spaces in the analysis output.
type KeepSpaces = Bool

-- | Analyse the input sentence and return the result as a DAG of tokens.
analyse :: KeepSpaces -> Text -> DAG Token

-- | Retrieve all paths from DAG root to leaves.
paths :: DAG a -> [[a]]
instance Eq MorfOption
instance Show MorfOption
instance Eq Encoding
instance Show Encoding
instance Eq WhiteSpace
instance Show WhiteSpace
instance Eq a => Eq (Edge a)
instance Ord a => Ord (Edge a)
instance Show a => Show (Edge a)
instance Functor Edge
instance Eq RawInterp
instance Ord RawInterp
instance Show RawInterp
instance Show Interp
instance Show Token
instance Storable (Edge RawInterp)
