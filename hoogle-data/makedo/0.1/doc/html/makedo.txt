-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Helper for writing redo scripts in Haskell
--   
--   Helper for writing redo scripts in Haskell
@package makedo
@version 0.1

module Makedo.Target

-- | Your main function should probably just invoke this and do nothing
--   else
redoMain :: [Target] -> IO ()

-- | Special target that prints out the targets you can run Note that
--   makedo automatically includes this
listing :: [Target] -> ExactTarget

-- | A makedo script is basically just a list of <a>Target</a>
--   
--   If a target matches the input file name, its action is run
data Target
Target :: (FilePath -> Bool) -> (String, String) -> (RedoArgs -> IO ()) -> Target
match :: Target -> FilePath -> Bool

-- | (name, blurb) for human consumption only
description :: Target -> (String, String)
action :: Target -> RedoArgs -> IO ()
data RedoArgs
RedoArgs :: FilePath -> FilePath -> String -> RedoArgs

-- | temporary file managed by redo; write your output here or to stdout;
--   it will be renamed to <a>rname</a> if the rule is successful
rwrite :: RedoArgs -> FilePath

-- | desired filename
rname :: RedoArgs -> FilePath
rext :: RedoArgs -> String
class TargetLike t
target :: TargetLike t => t -> Target

-- | Targets that use an exact filename match
data ExactTarget
ExactTarget :: FilePath -> String -> (RedoArgs -> IO ()) -> ExactTarget
ePath :: ExactTarget -> FilePath
eBlurb :: ExactTarget -> String
eAction :: ExactTarget -> RedoArgs -> IO ()
data WildcardTarget
WildcardTarget :: FilePath -> String -> String -> (RedoArgs -> IO ()) -> WildcardTarget
wPrefix :: WildcardTarget -> FilePath

-- | as recognised by System.FilePath
wExtension :: WildcardTarget -> String
wBlurb :: WildcardTarget -> String
wAction :: WildcardTarget -> RedoArgs -> IO ()

-- | Useful for targets that take parameters which you want to convert into
--   path components
class ShowPC a
showPC :: ShowPC a => a -> String
redoIfChange :: [String] -> IO ()
redo :: [String] -> IO ()
stampAll :: FilePath -> [String] -> IO ()
runVerbosely :: ShellCommand a => a -> IO ()
instance TargetLike WildcardTarget
instance TargetLike ExactTarget
instance TargetLike Target

module Makedo.Contained

-- | redo 0.06 and under do not like it if you try to redo something that's
--   in a directory that does not yet exist, so unfortunately, we need some
--   way to create the parent directories before invoking the targets
data Contained
Contained :: [FilePath] -> [ExactTarget] -> [Target] -> Contained
containers :: Contained -> [FilePath]
targets :: Contained -> [ExactTarget]

-- | should be superset of targets
allTargets :: Contained -> [Target]

-- | Just one of the possible <tt>a</tt> used to generate a path component
--   which will then just be chopped off again with takeDirectory
class Containable a
czero :: Containable a => a
mkContained :: Containable b => [b -> ExactTarget] -> [b] -> Contained

module Makedo
