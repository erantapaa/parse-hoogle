-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An interface to the ActivityStreams specification
--   
--   An interface to the <a>Activity Streams</a> specifications, using an
--   <tt>aeson</tt>-based representation of the underlying ActivityStream
--   structures. An ActivityStream is a representation of social activities
--   in JSON format, using a standard set of structures. The specification
--   is very flexible in allowing most fields to be omitted, while also
--   allowing arbitrary new fields to be created when necessary. This
--   library attempts to maximize type safety while retaining the
--   flexibility present in the specification.
@package activitystreams-aeson
@version 0.2.0.0


-- | This is an interface to ActivityStreams that simply wraps an
--   underlying <tt>aeson</tt> Object, and exposes a set of convenient
--   lenses to access the values inside. If an <tt>aeson</tt> object
--   appears wrapped in some respective wrapper, it will necessarily
--   contain the obligatory values for that type (e.g. an <a>Activity</a>
--   is guaranteed to have a <tt>published</tt> date.)
--   
--   Most of the inline documentation is drawn directly from the <a>JSON
--   Activity Streams 1.0</a> specification, with minor modifications to
--   refer to the corresponding data types in this module and to clarify
--   certain aspects.
module Codec.ActivityStream
type Lens' a b = forall f. Functor f => (b -> f b) -> (a -> f a)

-- | Within the specification, an <a>Object</a> is a thing, real or
--   imaginary, which participates in an activity. It may be the entity
--   performing the activity, or the entity on which the activity was
--   performed. An object consists of properties defined below. Certain
--   object types may further refine the meaning of these properties, or
--   they may define additional properties.
--   
--   To maintain this flexibility in the Haskell environment, an
--   <a>Object</a> is an opaque wrapper over an underlying JSON value, and
--   the <a>oRest</a> accessor can be used to access that underlying value.
data Object

-- | Create an <tt>Object</tt> with no fields.
emptyObject :: Object

-- | A collection of one or more additional, associated objects, similar to
--   the concept of attached files in an email message. An object MAY have
--   an attachments property whose value is a JSON Array of <a>Object</a>s.
oAttachments :: Lens' Object (Maybe [Object])

-- | Describes the entity that created or authored the object. An object
--   MAY contain a single author property whose value is an <a>Object</a>
--   of any type. Note that the author field identifies the entity that
--   created the object and does not necessarily identify the entity that
--   published the object. For instance, it may be the case that an object
--   created by one person is posted and published to a system by an
--   entirely different entity.
oAuthor :: Lens' Object (Maybe Object)

-- | Natural-language description of the object encoded as a single JSON
--   String containing HTML markup. Visual elements such as thumbnail
--   images MAY be included. An object MAY contain a <tt>content</tt>
--   property.
oContent :: Lens' Object (Maybe Text)

-- | A natural-language, human-readable and plain-text name for the object.
--   HTML markup MUST NOT be included. An object MAY contain a
--   <tt>displayName</tt> property. If the object does not specify an
--   <tt>objectType</tt> property, the object SHOULD specify a
--   <tt>displayName</tt>.
oDisplayName :: Lens' Object (Maybe Text)

-- | A JSON Array of one or more absolute IRI's <a>[RFC3987]</a>
--   identifying objects that duplicate this object's content. An object
--   SHOULD contain a <tt>downstreamDuplicates</tt> property when there are
--   known objects, possibly in a different system, that duplicate the
--   content in this object. This MAY be used as a hint for consumers to
--   use when resolving duplicates between objects received from different
--   sources.
oDownstreamDuplicates :: Lens' Object (Maybe [Text])

-- | Provides a permanent, universally unique identifier for the object in
--   the form of an absolute IRI <a>[RFC3987]</a>. An object SHOULD contain
--   a single <tt>id</tt> property. If an object does not contain an
--   <tt>id</tt> property, consumers MAY use the value of the <tt>url</tt>
--   property as a less-reliable, non-unique identifier.
oId :: Lens' Object (Maybe Text)

-- | Description of a resource providing a visual representation of the
--   object, intended for human consumption. An object MAY contain an
--   <tt>image</tt> property whose value is a <a>MediaLink</a>.
oImage :: Lens' Object (Maybe MediaLink)

-- | Identifies the type of object. An object MAY contain an
--   <tt>objectType</tt> property whose value is a JSON String that is
--   non-empty and matches either the "isegment-nz-nc" or the "IRI"
--   production in <a>[RFC3987]</a>. Note that the use of a relative
--   reference other than a simple name is not allowed. If no
--   <tt>objectType</tt> property is contained, the object has no specific
--   type.
oObjectType :: (FromJSON o, ToJSON o) => Lens' Object (Maybe o)

-- | The date and time at which the object was published. An object MAY
--   contain a <tt>published</tt> property.
oPublished :: Lens' Object (Maybe DateTime)

-- | Natural-language summarization of the object encoded as a single JSON
--   String containing HTML markup. Visual elements such as thumbnail
--   images MAY be included. An activity MAY contain a <tt>summary</tt>
--   property.
oSummary :: Lens' Object (Maybe Text)

-- | The date and time at which a previously published object has been
--   modified. An Object MAY contain an <tt>updated</tt> property.
oUpdated :: Lens' Object (Maybe DateTime)

-- | A JSON Array of one or more absolute IRI's <a>[RFC3987]</a>
--   identifying objects that duplicate this object's content. An object
--   SHOULD contain an <tt>upstreamDuplicates</tt> property when a
--   publisher is knowingly duplicating with a new ID the content from
--   another object. This MAY be used as a hint for consumers to use when
--   resolving duplicates between objects received from different sources.
oUpstreamDuplicates :: Lens' Object (Maybe [Text])

-- | An IRI <a>[RFC3987]</a> identifying a resource providing an HTML
--   representation of the object. An object MAY contain a url property
oURL :: Lens' Object (Maybe Text)

-- | Access the underlying JSON object that represents an <a>Object</a>
oRest :: Lens' Object Object

-- | In its simplest form, an <a>Activity</a> consists of an
--   <tt>actor</tt>, a <tt>verb</tt>, an <tt>object</tt>, and a
--   <tt>target</tt>. It tells the story of a person performing an action
--   on or with an object -- "Geraldine posted a photo to her album" or
--   "John shared a video". In most cases these components will be
--   explicit, but they may also be implied.
data Activity

-- | Create an <tt>Activity</tt> with an <tt>actor</tt>,
--   <tt>published</tt>, and <tt>provider</tt> property.
makeActivity :: Object -> DateTime -> Activity

-- | JSON Activity Streams 1.0 specificies that an <tt>Activity</tt> may be
--   used as an <tt>Object</tt>. In such a case, the object may have fields
--   permitted on either an <tt>Activity</tt> or an <tt>Object</tt>
asObject :: Activity -> Object

-- | Describes the entity that performed the activity. An activity MUST
--   contain one <tt>actor</tt> property whose value is a single
--   <a>Object</a>.
acActor :: Lens' Activity Object

-- | Natural-language description of the activity encoded as a single JSON
--   String containing HTML markup. Visual elements such as thumbnail
--   images MAY be included. An activity MAY contain a <tt>content</tt>
--   property.
acContent :: Lens' Activity (Maybe Text)

-- | Describes the application that generated the activity. An activity MAY
--   contain a <tt>generator</tt> property whose value is a single
--   <a>Object</a>.
acGenerator :: Lens' Activity (Maybe Object)

-- | Description of a resource providing a visual representation of the
--   object, intended for human consumption. The image SHOULD have an
--   aspect ratio of one (horizontal) to one (vertical) and SHOULD be
--   suitable for presentation at a small size. An activity MAY have an
--   <tt>icon</tt> property.
acIcon :: Lens' Activity (Maybe MediaLink)

-- | Provides a permanent, universally unique identifier for the activity
--   in the form of an absolute IRI <a>[RFC3987]</a>. An activity SHOULD
--   contain a single <tt>id</tt> property. If an activity does not contain
--   an <tt>id</tt> property, consumers MAY use the value of the
--   <tt>url</tt> property as a less-reliable, non-unique identifier.
acId :: Lens' Activity (Maybe Text)

-- | Describes the primary object of the activity. For instance, in the
--   activity, "John saved a movie to his wishlist", the object of the
--   activity is "movie". An activity SHOULD contain an <tt>object</tt>
--   property whose value is a single <a>Object</a>. If the <tt>object</tt>
--   property is not contained, the primary object of the activity MAY be
--   implied by context.
acObject :: Lens' Activity (Maybe Object)

-- | The date and time at which the activity was published. An activity
--   MUST contain a <tt>published</tt> property.
acPublished :: Lens' Activity DateTime

-- | Describes the application that published the activity. Note that this
--   is not necessarily the same entity that generated the activity. An
--   activity MAY contain a <tt>provider</tt> property whose value is a
--   single <a>Object</a>.
acProvider :: Lens' Activity (Maybe Object)

-- | Describes the target of the activity. The precise meaning of the
--   activity's target is dependent on the activities verb, but will often
--   be the object the English preposition "to". For instance, in the
--   activity, "John saved a movie to his wishlist", the target of the
--   activity is "wishlist". The activity target MUST NOT be used to
--   identity an indirect object that is not a target of the activity. An
--   activity MAY contain a <tt>target</tt> property whose value is a
--   single <a>Object</a>.
acTarget :: Lens' Activity (Maybe Object)

-- | Natural-language title or headline for the activity encoded as a
--   single JSON String containing HTML markup. An activity MAY contain a
--   <tt>title</tt> property.
acTitle :: Lens' Activity (Maybe Text)

-- | The date and time at which a previously published activity has been
--   modified. An Activity MAY contain an <tt>updated</tt> property.
acUpdated :: Lens' Activity (Maybe DateTime)

-- | An IRI <a>RFC3987</a> identifying a resource providing an HTML
--   representation of the activity. An activity MAY contain a <tt>url</tt>
--   property.
acURL :: Lens' Activity (Maybe Text)

-- | Identifies the action that the activity describes. An activity SHOULD
--   contain a verb property whose value is a JSON String that is non-empty
--   and matches either the "isegment-nz-nc" or the "IRI" production in
--   <a>[RFC3987]</a>. Note that the use of a relative reference other than
--   a simple name is not allowed. If the <tt>verb</tt> is not specified,
--   or if the value is null, the <tt>verb</tt> is assumed to be "post".
acVerb :: (FromJSON v, ToJSON v) => Lens' Activity (Maybe v)

-- | Access the underlying JSON object that represents an <a>Activity</a>
acRest :: Lens' Activity Object

-- | Some types of objects may have an alternative visual representation in
--   the form of an image, video or embedded HTML fragments. A
--   <a>MediaLink</a> represents a hyperlink to such resources.
data MediaLink

-- | Create a <tt>MediaLink</tt> with just a <tt>url</tt> property, and all
--   other properties undefined.
makeMediaLink :: Text -> MediaLink

-- | A hint to the consumer about the length, in seconds, of the media
--   resource identified by the url property. A media link MAY contain a
--   "duration" property when the target resource is a time-based media
--   item such as an audio or video.
mlDuration :: Lens' MediaLink (Maybe Int)

-- | A hint to the consumer about the height, in pixels, of the media
--   resource identified by the url property. A media link MAY contain a
--   <tt>height</tt> property when the target resource is a visual media
--   item such as an image, video or embeddable HTML page.
mlHeight :: Lens' MediaLink (Maybe Int)

-- | A hint to the consumer about the width, in pixels, of the media
--   resource identified by the url property. A media link MAY contain a
--   <tt>width</tt> property when the target resource is a visual media
--   item such as an image, video or embeddable HTML page.
mlWidth :: Lens' MediaLink (Maybe Int)

-- | The IRI of the media resource being linked. A media link MUST have a
--   <tt>url</tt> property.
mlURL :: Lens' MediaLink Text

-- | Access the underlying JSON object that represents a Media Link
mlRest :: Lens' MediaLink Object

-- | A "collection" is a generic list of <a>Object</a>s of any object type.
--   The <tt>objectType</tt> of each item in the collection MAY be omitted
--   if the type of object can be established through context. The
--   collection is used primarily as the root of an Activity Streams
--   document as described in Section 4, but can be used as the value of
--   extension properties in a variety of situations.
data Collection

-- | Create a <tt>Collection</tt> with an <tt>items</tt> and a <tt>url</tt>
--   property and fill in the corresponding <tt>totalItems</tt> field with
--   the length of the <tt>items</tt> array.
makeCollection :: [Object] -> Text -> Collection

-- | Non-negative integer specifying the total number of activities within
--   the stream. The Stream serialization MAY contain a <tt>totalItems</tt>
--   property. (NOTE: there is a typo in the original specification, in
--   which it inconsistently refers to this as either <tt>totalItems</tt>
--   or <tt>count</tt>.)
cTotalItems :: Lens' Collection (Maybe Int)

-- | An array containing a listing of <a>Object</a>s of any object type. If
--   used in combination with the <tt>url</tt> property, the <tt>items</tt>
--   array can be used to provide a subset of the objects that may be found
--   in the resource identified by the <tt>url</tt>.
cItems :: Lens' Collection (Maybe [Object])

-- | An IRI <a>[RFC3987]</a> referencing a JSON document containing the
--   full listing of objects in the collection.
cURL :: Lens' Collection (Maybe Text)

-- | Access the underlying JSON object that represents a <a>Collection</a>
cRest :: Lens' Collection Object


-- | This is an interface to the extended ActivityStreams schema which
--   defines an extensive set of <tt>verb</tt> values, additional
--   <tt>objectType</tt> values, and a set of extended properties for
--   <a>Object</a>s.
--   
--   Most of the inline documentation is drawn directly from the
--   <a>Activity Base Schema draft</a> specification, with minor
--   modifications to refer to the corresponding data types in this module
--   and to clarify certain aspects. This is not an approved draft, and as
--   such may be subject to changes which will be reflected in this module.
--   In contrast to <a>Codec.ActivityStream</a>, the API in this module
--   makes <b>no guarantees about long-term stability</b>.
module Codec.ActivityStream.Schema

-- | The ActivityStreams Base Schema specification defines the following
--   core verbs in addition to the default post verb that is defined in
--   Section 6 of activitystreams:
data SchemaVerb

-- | Indicates that that the actor has accepted the object. For instance, a
--   person accepting an award, or accepting an assignment.
Accept :: SchemaVerb

-- | Indicates that the actor has accessed the object. For instance, a
--   person accessing a room, or accessing a file.
Access :: SchemaVerb

-- | Indicates that the actor has acknowledged the object. This effectively
--   signals that the actor is aware of the object's existence.
Acknowledge :: SchemaVerb

-- | Indicates that the actor has added the object to the target. For
--   instance, adding a photo to an album.
Add :: SchemaVerb

-- | Indicates that the actor agrees with the object. For example, a person
--   agreeing with an argument, or expressing agreement with a particular
--   issue.
Agree :: SchemaVerb

-- | Indicates that the actor has appended the object to the target. For
--   instance, a person appending a new record to a database.
Append :: SchemaVerb

-- | Indicates that the actor has approved the object. For instance, a
--   manager might approve a travel request.
Approve :: SchemaVerb

-- | Indicates that the actor has archived the object.
Archive :: SchemaVerb

-- | Indicates that the actor has assigned the object to the target.
Assign :: SchemaVerb

-- | Indicates that the actor is currently located at the object. For
--   instance, a person being at a specific physical location.
At :: SchemaVerb

-- | Indicates that the actor has attached the object to the target. For
--   instance, a person attaching a file to a wiki page or an email.
Attach :: SchemaVerb

-- | Indicates that the actor has attended the object. For instance, a
--   person attending a meeting.
Attend :: SchemaVerb

-- | Indicates that the actor has authored the object. Note that this is a
--   more specific form of the verb "create".
Author :: SchemaVerb

-- | Indicates that the actor has authorized the object. If a target is
--   specified, it means that the authorization is specifically in regards
--   to the target. For instance, a service can authorize a person to
--   access a given application; in which case the actor is the service,
--   the object is the person, and the target is the application. In
--   contrast, a person can authorize a request; in which case the actor is
--   the person and the object is the request and there might be no
--   explicit target.
Authorize :: SchemaVerb

-- | Indicates that the actor has borrowed the object. If a target is
--   specified, it identifies the entity from which the object was
--   borrowed. For instance, if a person borrows a book from a library, the
--   person is the actor, the book is the object and the library is the
--   target.
Borrow :: SchemaVerb

-- | Indicates that the actor has built the object. For example, if a
--   person builds a model or compiles code.
Build :: SchemaVerb

-- | Indicates that the actor has canceled the object. For instance,
--   canceling a calendar event.
Cancel :: SchemaVerb

-- | Indicates that the actor has closed the object. For instance, the
--   object could represent a ticket being tracked in an issue management
--   system.
Close :: SchemaVerb

-- | Indicates that the actor has completed the object.
Complete :: SchemaVerb

-- | Indicates that the actor has confirmed or agrees with the object. For
--   instance, a software developer might confirm an issue reported against
--   a product.
Confirm :: SchemaVerb

-- | Indicates that the actor has consumed the object. The specific meaning
--   is dependent largely on the object's type. For instance, an actor may
--   "consume" an audio object, indicating that the actor has listened to
--   it; or an actor may "consume" a book, indicating that the book has
--   been read. As such, the "consume" verb is a more generic form of other
--   more specific verbs such as "read" and "play".
Consume :: SchemaVerb

-- | Indicates that the actor has checked-in to the object. For instance, a
--   person checking-in to a Place.
Checkin :: SchemaVerb

-- | Indicates that the actor has created the object.
Create :: SchemaVerb

-- | Indicates that the actor has deleted the object. This implies, but
--   does not require, the permanent destruction of the object.
Delete :: SchemaVerb

-- | Indicates that the actor has delivered the object. For example,
--   delivering a package.
Deliver :: SchemaVerb

-- | Indicates that the actor has denied the object. For example, a manager
--   may deny a travel request.
Deny :: SchemaVerb

-- | Indicates that the actor disagrees with the object.
Disagree :: SchemaVerb

-- | Indicates that the actor dislikes the object. Note that the "dislike"
--   verb is distinct from the "unlike" verb which assumes that the object
--   had been previously "liked".
Dislike :: SchemaVerb

-- | Indicates that the actor has experienced the object in some manner.
--   Note that, depending on the specific object types used for both the
--   actor and object, the meaning of this verb can overlap that of the
--   "consume" and "play" verbs. For instance, a person might "experience"
--   a movie; or "play" the movie; or "consume" the movie. The "experience"
--   verb can be considered a more generic form of other more specific
--   verbs as "consume", "play", "watch", "listen", and "read"
Experience :: SchemaVerb

-- | Indicates that the actor marked the object as an item of special
--   interest.
Favorite :: SchemaVerb

-- | Indicates that the actor has found the object.
Find :: SchemaVerb

-- | Indicates that the actor has flagged the object as being inappropriate
--   for some reason. When using this verb, the context property can be
--   used to provide additional detail about why the object has been
--   flagged.
FlagAsInappropriate :: SchemaVerb

-- | Indicates that the actor began following the activity of the object.
--   In most cases, the objectType will be a "person", but it can
--   potentially be of any type that can sensibly generate activity.
--   Processors MAY ignore (silently drop) successive identical "follow"
--   activities.
Follow :: SchemaVerb

-- | Indicates that the actor is giving an object to the target. Examples
--   include one person giving a badge object to another person. The object
--   identifies the object being given. The target identifies the receiver.
Give :: SchemaVerb

-- | Indicates that the actor is hosting the object. As in hosting an
--   event, or hosting a service.
Host :: SchemaVerb

-- | Indicates that the actor has ignored the object. For instance, this
--   verb may be used when an actor has ignored a friend request, in which
--   case the object may be the request-friend activity.
Ignore :: SchemaVerb

-- | Indicates that the actor has inserted the object into the target.
Insert :: SchemaVerb

-- | Indicates that the actor has installed the object, as in installing an
--   application.
Install :: SchemaVerb

-- | Indicates that the actor has interacted with the object. For instance,
--   when one person interacts with another.
Interact :: SchemaVerb

-- | Indicates that the actor has invited the object, typically a person
--   object, to join or participate in the object described by the target.
--   The target could, for instance, be an event, group or a service.
Invite :: SchemaVerb

-- | Indicates that the actor has become a member of the object. This
--   specification only defines the meaning of this verb when the object of
--   the Activity has an objectType of group, though implementors need to
--   be prepared to handle other types of objects.
Join :: SchemaVerb

-- | Indicates that the actor has left the object. For instance, a Person
--   leaving a Group or checking-out of a Place.
Leave :: SchemaVerb

-- | Indicates that the actor marked the object as an item of special
--   interest. The "like" verb is considered to be an alias of "favorite".
--   The two verb are semantically identical.
Like :: SchemaVerb

-- | Indicates that the actor has listened to the object. This is typically
--   only applicable for objects representing audio content, such as music,
--   an audio-book, or a radio broadcast. The "listen" verb is a more
--   specific form of the "consume", "experience" and "play" verbs.
Listen :: SchemaVerb

-- | Indicates that the actor has lost the object. For instance, if a
--   person loses a game.
Lose :: SchemaVerb

-- | Indicates the creation of a friendship that is reciprocated by the
--   object. Since this verb implies an activity on the part of its object,
--   processors MUST NOT accept activities with this verb unless they are
--   able to verify through some external means that there is in fact a
--   reciprocated connection. For example, a processor may have received a
--   guarantee from a particular publisher that the publisher will only use
--   this Verb in cases where a reciprocal relationship exists.
MakeFriend :: SchemaVerb

-- | Indicates that the actor has opened the object. For instance, the
--   object could represent a ticket being tracked in an issue management
--   system.
Open :: SchemaVerb

-- | Indicates that the actor spent some time enjoying the object. For
--   example, if the object is a video this indicates that the subject
--   watched all or part of the video. The "play" verb is a more specific
--   form of the "consume" verb.
Play :: SchemaVerb

-- | The default action.
Post :: SchemaVerb

-- | Indicates that the actor has presented the object. For instance, when
--   a person gives a presentation at a conference.
Present :: SchemaVerb

-- | Indicates that the actor has purchased the object. If a target is
--   specified, in indicates the entity from which the object was
--   purchased.
Purchase :: SchemaVerb

-- | Indicates that the actor has qualified for the object. If a target is
--   specified, it indicates the context within which the qualification
--   applies.
Qualify :: SchemaVerb

-- | Indicates that the actor read the object. This is typically only
--   applicable for objects representing printed or written content, such
--   as a book, a message or a comment. The "read" verb is a more specific
--   form of the "consume", "experience" and "play" verbs.
Read :: SchemaVerb

-- | Indicates that the actor is receiving an object. Examples include a
--   person receiving a badge object. The object identifies the object
--   being received.
Receive :: SchemaVerb

-- | Indicates that the actor has rejected the object.
Reject :: SchemaVerb

-- | Indicates that the actor has removed the object from the target.
Remove :: SchemaVerb

-- | Indicates that the actor has removed the object from the collection of
--   friends.
RemoveFriend :: SchemaVerb

-- | Indicates that the actor has replaced the target with the object.
Replace :: SchemaVerb

-- | Indicates that the actor has requested the object. If a target is
--   specified, it indicates the entity from which the object is being
--   requested.
Request :: SchemaVerb

-- | Indicates the creation of a friendship that has not yet been
--   reciprocated by the object.
RequestFriend :: SchemaVerb

-- | Indicates that the actor has resolved the object. For instance, the
--   object could represent a ticket being tracked in an issue management
--   system.
Resolve :: SchemaVerb

-- | Indicates that the actor has returned the object. If a target is
--   specified, it indicates the entity to which the object was returned.
Return :: SchemaVerb

-- | Indicates that the actor has retracted the object. For instance, if an
--   actor wishes to retract a previously published activity, the object
--   would be the previously published activity that is being retracted.
Retract :: SchemaVerb

-- | The "possible RSVP" verb indicates that the actor has made a possible
--   RSVP for the object. This specification only defines the meaning of
--   this verb when its object is an event, though implementors need to be
--   prepared to handle other object types. The use of this verb is only
--   appropriate when the RSVP was created by an explicit action by the
--   actor. It is not appropriate to use this verb when a user has been
--   added as an attendee by an event organiser or administrator.
RsvpMaybe :: SchemaVerb

-- | The "negative RSVP" verb indicates that the actor has made a negative
--   RSVP for the object. This specification only defines the meaning of
--   this verb when its object is an event, though implementors need to be
--   prepared to handle other object types. The use of this verb is only
--   appropriate when the RSVP was created by an explicit action by the
--   actor. It is not appropriate to use this verb when a user has been
--   added as an attendee by an event organiser or administrator.
RsvpNo :: SchemaVerb

-- | The "positive RSVP" verb indicates that the actor has made a positive
--   RSVP for an object. This specification only defines the meaning of
--   this verb when its object is an event, though implementors need to be
--   prepared to handle other object types. The use of this verb is only
--   appropriate when the RSVP was created by an explicit action by the
--   actor. It is not appropriate to use this verb when a user has been
--   added as an attendee by an event organiser or administrator.
RsvpYes :: SchemaVerb

-- | Indicates that the actor has satisfied the object. If a target is
--   specified, it indicate the context within which the object was
--   satisfied. For instance, if a person satisfies the requirements for a
--   particular challenge, the person is the actor; the requirement is the
--   object; and the challenge is the target.
Satisfy :: SchemaVerb

-- | Indicates that the actor has called out the object as being of
--   interest primarily to him- or herself. Though this action MAY be
--   shared publicly, the implication is that the object has been saved
--   primarily for the actor's own benefit rather than to show it to others
--   as would be indicated by the "share" verb.
Save :: SchemaVerb

-- | Indicates that the actor has scheduled the object. For instance,
--   scheduling a meeting.
Schedule :: SchemaVerb

-- | Indicates that the actor is or has searched for the object. If a
--   target is specified, it indicates the context within which the search
--   is or has been conducted.
Search :: SchemaVerb

-- | Indicates that the actor has sold the object. If a target is
--   specified, it indicates the entity to which the object was sold.
Sell :: SchemaVerb

-- | Indicates that the actor has sent the object. If a target is
--   specified, it indicates the entity to which the object was sent.
Send :: SchemaVerb

-- | Indicates that the actor has called out the object to readers. In most
--   cases, the actor did not create the object being shared, but is
--   instead drawing attention to it.
Share :: SchemaVerb

-- | Indicates that the actor has sponsored the object. If a target is
--   specified, it indicates the context within which the sponsorship is
--   offered. For instance, a company can sponsor an event; or an
--   individual can sponsor a project; etc.
Sponsor :: SchemaVerb

-- | Indicates that the actor has started the object. For instance, when a
--   person starts a project.
Start :: SchemaVerb

-- | Indicates that the actor has stopped following the object.
StopFollowing :: SchemaVerb

-- | Indicates that the actor has submitted the object. If a target is
--   specified, it indicates the entity to which the object was submitted.
Submit :: SchemaVerb

-- | Indicates that the actor has associated the object with the target.
--   For example, if the actor specifies that a particular user appears in
--   a photo. the object is the user and the target is the photo.
Tag :: SchemaVerb

-- | Indicates that the actor has terminated the object.
Terminate :: SchemaVerb

-- | Indicates that the actor has neither won or lost the object. This verb
--   is generally only applicable when the object represents some form of
--   competition, such as a game.
Tie :: SchemaVerb

-- | Indicates that the actor has removed the object from the collection of
--   favorited items.
Unfavorite :: SchemaVerb

-- | Indicates that the actor has removed the object from the collection of
--   liked items.
Unlike :: SchemaVerb

-- | Indicates that the actor has not satisfied the object. If a target is
--   specified, it indicates the context within which the object was not
--   satisfied. For instance, if a person fails to satisfy the requirements
--   of some particular challenge, the person is the actor; the requirement
--   is the object and the challenge is the target.
Unsatisfy :: SchemaVerb

-- | Indicates that the actor has removed the object from the collection of
--   saved items.
Unsave :: SchemaVerb

-- | Indicates that the actor is no longer sharing the object. If a target
--   is specified, it indicates the entity with whom the object is no
--   longer being shared.
Unshare :: SchemaVerb

-- | The "update" verb indicates that the actor has modified the object.
--   Use of the "update" verb is generally reserved to indicate
--   modifications to existing objects or data such as changing an existing
--   user's profile information.
Update :: SchemaVerb

-- | Indicates that the actor has used the object in some manner.
Use :: SchemaVerb

-- | Indicates that the actor has watched the object. This verb is
--   typically applicable only when the object represents dynamic, visible
--   content such as a movie, a television show or a public performance.
--   This verb is a more specific form of the verbs "experience", "play"
--   and "consume".
Watch :: SchemaVerb

-- | Indicates that the actor has won the object. This verb is typically
--   applicable only when the object represents some form of competition,
--   such as a game.
Win :: SchemaVerb

-- | This data type contains the core set of common objectTypes in addition
--   to the "activity" objectType defined in Section 7 of activitystreams.
--   
--   All Activity Stream Objects inherit the same fundamental set of basic
--   properties as defined in section 3.4 of activitystreams. In addition
--   to these, objects of any specific type are permitted to introduce
--   additional optional or required properties that are meaningful to
--   objects of that type.
data SchemaObjectType

-- | Represents any kind of significant notification.
Alert :: SchemaObjectType

-- | Represents any kind of software application.
Application :: SchemaObjectType

-- | Represents objects such as news articles, knowledge base entries, or
--   other similar construct. Such objects generally consist of paragraphs
--   of text, in some cases incorporating embedded media such as photos and
--   inline hyperlinks to other resources.
Article :: SchemaObjectType

-- | Represents audio content of any kind. Objects of this type MAY contain
--   an additional property as specified <a>here</a>.
Audio :: SchemaObjectType

-- | Represents a badge or award granted to an object (typically a
--   <tt>person</tt> object)
Badge :: SchemaObjectType

-- | Objects of this type are used to carry arbirary Base64-encoded binary
--   data within an Activity Stream object. It is primarily intended to
--   attach binary data to other types of objects through the use of the
--   <tt>attachments</tt> property. Objects of this type will contain the
--   additional properties specified <a>here</a>.
Binary :: SchemaObjectType

-- | Represents a pointer to some URL -- typically a web page. In most
--   cases, bookmarks are specific to a given user and contain metadata
--   chosen by that user. Bookmark Objects are similar in principle to the
--   concept of bookmarks or favorites in a web browser. A bookmark
--   represents a pointer to the URL, not the URL or the associated
--   resource itself. Objects of this type SHOULD contain an additional
--   <tt>targetUrl</tt> property whose value is a String containing the IRI
--   of the target of the bookmark.
Bookmark :: SchemaObjectType

-- | Represents a generic collection of objects of any type. This object
--   type can be used, for instance, to represent a collection of files
--   like a folder; a collection of photos like an album; and so forth.
--   Objects of this type MAY contain an additional <tt>objectTypes</tt>
--   property whose value is an Array of Strings specifying the expected
--   objectType of objects contained within the collection.
Collection :: SchemaObjectType

-- | Represents a textual response to another object. Objects of this type
--   MAY contain an additional <tt>inReplyTo</tt> property whose value is
--   an Array of one or more other Activity Stream Objects for which the
--   object is to be considered a response.
Comment :: SchemaObjectType

-- | Represents a device of any type.
Device :: SchemaObjectType

-- | Represents an event that occurs at a certain location during a
--   particular period of time. Objects of this type MAY contain the
--   additional properties specified <a>here</a>.
Event :: SchemaObjectType

-- | Represents any form of document or file. Objects of this type MAY
--   contain an additional <tt>fileUrl</tt> property whose value a
--   dereferenceable IRI that can be used to retrieve the file; and an
--   additional <tt>mimeType</tt> property whose value is the MIME type of
--   the file described by the object.
File :: SchemaObjectType

-- | Represents a game or competition of any kind.
Game :: SchemaObjectType

-- | Represents a grouping of objects in which member objects can join or
--   leave. Objects of this type MAY contain the additional properties
--   specified <a>here</a>.
Group :: SchemaObjectType

-- | Represents a graphical image. Objects of this type MAY contain an
--   additional <tt>fullImage</tt> property whose value is an Activity
--   Streams Media Link to a "full-sized" representation of the image.
Image :: SchemaObjectType

-- | Represents a report about a problem or situation that needs to be
--   resolved. For instance, the <tt>issue</tt> object can be used to
--   represent reports detailing software defects, or reports of acceptable
--   use violations, and so forth. Objects of this type MAY contain the
--   additional properties specified <a>here</a>.
Issue :: SchemaObjectType

-- | Represents information about a job or a job posting.
Job :: SchemaObjectType

-- | Represents a short-form text message. This object is intended
--   primarily for use in "micro-blogging" scenarios and in systems where
--   users are invited to publish short, often plain-text messages whose
--   useful lifespan is generally shorter than that of an article of weblog
--   entry. A note is similar in structure to an article, but typically
--   does not have a title or distinct paragraphs and tends to be much
--   shorter in length.
Note :: SchemaObjectType

-- | Represents an offer of any kind.
Offer :: SchemaObjectType

-- | Represents an organization of any kind.
Organization :: SchemaObjectType

-- | Represents an area, typically a web page, that is representative of,
--   and generally managed by a particular entity. Such areas are usually
--   dedicated to displaying descriptive information about the entity and
--   showcasing recent content such as articles, photographs and videos.
--   Most social networking applications, for example, provide individual
--   users with their own dedicated "profile" pages. Several allow similar
--   types of pages to be created for commercial entities, organizations or
--   events. While the specific details of how pages are implemented, their
--   characteristics and use may vary, the one unifying property is that
--   they are typically "owned" by a single entity that is represented by
--   the content provided by the page itself.
Page :: SchemaObjectType

-- | Represents a permission that can be granted to an individual. For
--   instance, a person can be granted permission to modify a file. Objects
--   of this type MAY contain the additional properties specified
--   <a>here</a>.
Permission :: SchemaObjectType

-- | Represents an individual person.
Person :: SchemaObjectType

-- | Represents a physical location. Locations can be represented using
--   geographic coordinates, a physical address, a free-form location name,
--   or any combination of these. Objects of this type MAY contain the
--   additional properties specified <a>here</a>.
Place :: SchemaObjectType

-- | Represents any form of process. For instance, a long-running task that
--   is started and expected to continue operating for a period of time.
Process :: SchemaObjectType

-- | Represents a commercial good or service. Objects of this type MAY
--   contain an additional <tt>fullImage</tt> property whose value is an
--   Activity Streams Media Link to an image resource representative of the
--   product.
Product :: SchemaObjectType

-- | Represents a question or a poll. Objects of this type MAY contain an
--   additional <tt>options</tt> property whose value is an Array of
--   possible answers to the question in the form of Activity Stream
--   objects of any type.
Question :: SchemaObjectType

-- | Represents a primarily prose-based commentary on another object.
--   Objects of this type MAY contain a <tt>rating</tt> property as
--   specified <a>here</a>.
Review :: SchemaObjectType

-- | Represents any form of hosted or consumable service that performs some
--   kind of work or benefit for other entities. Examples of such objects
--   include websites, businesses, etc.
Service :: SchemaObjectType

-- | Represents an activity that has yet to be completed. Objects of this
--   type can contain additional properties as specified here.
Task :: SchemaObjectType

-- | Represents a team of any type.
Team :: SchemaObjectType

-- | Represents video content of any kind. Objects of this type MAY contain
--   additional properties as specified here.
Video :: SchemaObjectType

-- | A fragment of HTML markup that, when embedded within another HTML
--   page, provides an interactive user-interface for viewing or listening
--   to the video or audio stream.
avEmbedCode :: Lens' Object (Maybe Text)

-- | An Activity Streams Media Link to the video or audio content itself.
avStream :: Lens' Object (Maybe MediaLink)

-- | An optional token identifying a compression algorithm applied to the
--   binary data prior to Base64-encoding. Possible algorithms are
--   "deflate" and "gzip", respectively indicating the use of the
--   compression mechanisms defined by RFC 1951 and RFC 1952. Additional
--   compression algorithms MAY be used but are not defined by this
--   specification. Note that previous versions of this specification
--   allowed for multiple compression algorithms to be applied and listed
--   using a comma-separated format. The use of multiple compressions is no
--   longer permitted.
bnCompression :: Lens' Object (Maybe Text)

-- | The URL-Safe Base64-encoded representation of the binary data
bnData :: Lens' Object (Maybe Text)

-- | An optional IRI for the binary data described by this object.
bnFileUrl :: Lens' Object (Maybe Text)

-- | The total number of unencoded, uncompressed octets contained within
--   the "data" field.
bnLength :: Lens' Object (Maybe Text)

-- | An optional MD5 checksum calculated over the unencoded, uncompressed
--   octets contained within the "data" field
bnMd5 :: Lens' Object (Maybe Text)

-- | The MIME Media Type of the binary data contained within the object.
bnMimeType :: Lens' Object (Maybe Text)

-- | A collection object as defined in Section 3.5 of the JSON Activity
--   Streams specification that provides information about entities that
--   attended the event.
evAttendedBy :: Lens' Object (Maybe Collection)

-- | A collection object as defined in Section 3.5 of the JSON Activity
--   Streams specification that provides information about entities that
--   intend to attend the event.
evAttending :: Lens' Object (Maybe Collection)

-- | The date and time that the event ends represented as a String
--   conforming to the "date-time" production in [RFC3339].
evEndTime :: Lens' Object (Maybe DateTime)

-- | A collection object as defined in Section 3.5 of the JSON Activity
--   Streams specification that provides information about entities that
--   have been invited to the event.
evInvited :: Lens' Object (Maybe Collection)

-- | A collection object as defined in Section 3.5 of the JSON Activity
--   Streams specification that provides information about entities that
--   possibly may attend the event.
evMaybeAttending :: Lens' Object (Maybe Collection)

-- | A collection object as defined in Section 3.5 of the JSON Activity
--   Streams specification that provides information about entities that
--   did not attend the event.
evNotAttendedBy :: Lens' Object (Maybe Collection)

-- | A collection object as defined in Section 3.5 of the JSON Activity
--   Streams specification that provides information about entities that do
--   not intend to attend the event.
evNotAttending :: Lens' Object (Maybe Collection)

-- | The date and time that the event begins represented as a String
--   confirming to the "date-time" production in RFC 3339.
evStartTime :: Lens' Object (Maybe DateTime)

-- | An array of one or more absolute IRI's that describe the type of issue
--   represented by the object. Note that the IRI's are intended for use as
--   identifiers and MAY or MAY NOT be dereferenceable.
isTypes :: Lens' Object (Maybe [Text])

-- | A single Activity Streams Object, of any objectType, that identifies
--   the scope of the permission. For example, if the permission objects
--   describes write permissions for a given file, the scope property would
--   be a file object describing that file.
pmScope :: Lens' Object (Maybe Object)

-- | An array of Strings that identify the specific actions associated with
--   the permission. The actions are application and scope specific. No
--   common, core set of actions is defined by this specification.
pmActions :: Lens' Object (Maybe [Text])

-- | The latitude, longitude and altitude of the place as a point on Earth.
--   Represented as a JSON Object as described below.
plPosition :: Lens' Object (Maybe PlacePosition)

-- | A physical address represented as a JSON object as described below.
plAddress :: Lens' Object (Maybe PlaceAddress)
data PlacePosition
data PlaceAddress

-- | An optional Activity Streams Collection object listing the members of
--   a group, or listing the entities assigned to a particular role.
rlMembers :: Lens' Object (Maybe [Object])

-- | An Activity Streams Object that provides information about the actor
--   that is expected to complete the task.
tsActor :: Lens' Object (Maybe Object)

-- | A RFC 3339 date-time specifying the date and time by which the task is
--   to be completed.
tsBy :: Lens' Object (Maybe DateTime)

-- | An Activity Streams object describing the object of the task.
tsObject :: Lens' Object (Maybe Object)

-- | An Array of other Task objects that are to be completed before this
--   task can be completed.
tsPrerequisites :: Lens' Object (Maybe [Object])

-- | A boolean value indicating whether completion of this task is
--   considered to be mandatory.
tsRequired :: Lens' Object (Maybe Bool)

-- | An Array of other Task objects that are superseded by this task
--   object.
tsSupersedes :: Lens' Object (Maybe [Object])

-- | A string indicating the verb for this task as defined in Section 3.2
--   of [activitystreams].
tsVerb :: Lens' Object (Maybe SchemaVerb)

-- | The additional <tt>context</tt> property allows an <a>Activity</a> to
--   further include information about why a particular action occurred by
--   providing details about the context within which a particular Activity
--   was performed. The value of the <tt>context</tt> property is an
--   <a>Object</a> of any <tt>objectType</tt>. The meaning of the
--   <tt>context</tt> property is only defined when used within an
--   <a>Activity</a> object.
acContext :: Lens' Activity (Maybe Object)

-- | When appearing within an activity, the location data indicates the
--   location where the activity occurred. When appearing within an object,
--   the location data indicates the location of that object at the time
--   the activity occurred.
getLocation :: Lens' a Object -> Lens' a (Maybe Object)

-- | Mood describes the mood of the user when the activity was performed.
--   This is usually collected via an extra field in the user interface
--   used to perform the activity. For the purpose of the schema, a mood is
--   a freeform, short mood keyword or phrase along with an optional mood
--   icon image.
oMood :: Lens' Object (Maybe Mood)

-- | A rating given as a number between 1.0 and 5.0 inclusive with one
--   decimal place of precision. Represented in JSON as a property called
--   <tt>rating</tt> whose value is a JSON number giving the rating.
oRating :: Lens' Object (Maybe Double)

-- | The <tt>result</tt> provides a description of the result of any
--   particular activity. The value of the <tt>result</tt> property is an
--   Object of any objectType. The meaning of the <tt>result</tt> property
--   is only defined when used within an <a>Activity</a> object.
acResult :: Lens' Activity (Maybe Object)

-- | The <tt>source</tt> property provides a reference to the original
--   source of an object or activity. The value of the <tt>source</tt>
--   property is an Object of any objectType.
--   
--   The <tt>source</tt> property is closely related to the
--   <tt>generator</tt> and <tt>provider</tt> properties but serves the
--   distinct purpose of identifying where the activity or object was
--   originally published as opposed to identifying the applications that
--   generated or published it.
getSource :: Lens' a Object -> Lens' a (Maybe Object)

-- | When an long running Activity occurs over a distinct period of time,
--   or when an Object represents a long-running process or event, the
--   <tt>startTime</tt> propertiy can be used to specify the date and time
--   at which the activity or object begins. The values for each are
--   represented as JSON Strings conforming to the "date-time" production
--   in RFC3339.
getStartTime :: Lens' a Object -> Lens' a (Maybe Text)

-- | When an long running Activity occurs over a distinct period of time,
--   or when an Object represents a long-running process or event, the
--   <tt>endTime</tt> propertiy can be used to specify the date and time at
--   which the activity or object concludes. The values for each are
--   represented as JSON Strings conforming to the "date-time" production
--   in RFC3339.
getEndTime :: Lens' a Object -> Lens' a (Maybe Text)

-- | A listing of the objects that have been associated with a particular
--   object. Represented in JSON using a property named <tt>tags</tt> whose
--   value is an Array of objects.
oTags :: Lens' Object (Maybe [Object])

-- | Mood describes the mood of the user when the activity was performed.
--   This is usually collected via an extra field in the user interface
--   used to perform the activity. For the purpose of this schema, a mood
--   is a freeform, short mood keyword or phrase along with an optional
--   mood icon image.
data Mood

-- | Access to the underlying JSON object of a <a>Mood</a>
moodRest :: Lens' Mood Object

-- | The natural-language, human-readable and plain-text keyword or phrase
--   describing the mood. HTML markup MUST NOT be included.
moodDisplayName :: Lens' Mood Text

-- | An optional image that provides a visual representation of the mood.
moodImage :: Lens' Mood MediaLink
instance Eq PlacePosition
instance Show PlacePosition
instance Eq PlaceAddress
instance Show PlaceAddress
instance Eq Mood
instance Show Mood
instance ToJSON Mood
instance FromJSON Mood
instance ToJSON PlaceAddress
instance FromJSON PlaceAddress
instance ToJSON PlacePosition
instance FromJSON PlacePosition
instance FromJSON SchemaObjectType
instance ToJSON SchemaObjectType
instance Eq SchemaObjectType
instance Show SchemaObjectType
instance Read SchemaObjectType
instance FromJSON SchemaVerb
instance ToJSON SchemaVerb
instance Eq SchemaVerb
instance Show SchemaVerb
instance Read SchemaVerb
