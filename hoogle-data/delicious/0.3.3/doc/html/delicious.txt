-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Accessing the del.icio.us APIs from Haskell (v2)
--   
--   Access to the del.icio.us social tagging site's API(v2) from Haskell
@package delicious
@version 0.3.3


-- | Types and data structures used by the Delicious API binding.
module Network.Delicious.Types
type DateString = String
type TimeString = String
type URLString = String
data User
User :: String -> String -> User
userName :: User -> String
userPass :: User -> String
nullUser :: User
data DM a
catchDM :: DM a -> (IOError -> DM a) -> DM a
withUser :: User -> DM a -> DM a
withCount :: Int -> DM a -> DM a
withUAgent :: String -> DM a -> DM a
getUser :: DM User
getBase :: DM URLString
getCount :: DM (Maybe Int)
getUAgent :: DM URLString
liftIO :: IO a -> DM a
runDelic :: User -> URLString -> DM a -> IO a
runDM :: User -> DM a -> IO a
type Tag = String
data TagInfo
TagInfo :: Tag -> Integer -> TagInfo
tagName :: TagInfo -> Tag
tagUses :: TagInfo -> Integer
data Bundle
Bundle :: String -> [Tag] -> Bundle
bundleName :: Bundle -> String
bundleTags :: Bundle -> [Tag]
data Filter
Filter :: Maybe Tag -> Maybe DateString -> Maybe URLString -> Maybe Integer -> Filter
filterTag :: Filter -> Maybe Tag
filterDate :: Filter -> Maybe DateString
filterURL :: Filter -> Maybe URLString
filterCount :: Filter -> Maybe Integer
nullFilter :: Filter
data Post
Post :: URLString -> String -> String -> String -> [Tag] -> DateString -> String -> Post
postHref :: Post -> URLString
postUser :: Post -> String
postDesc :: Post -> String
postNotes :: Post -> String
postTags :: Post -> [Tag]
postStamp :: Post -> DateString
postHash :: Post -> String
nullPost :: Post
instance Show Post
instance Show Filter
instance Show Bundle
instance Show TagInfo
instance Show User
instance JSON Post
instance Monad DM


-- | Simple GET/de-ref of URLs; abstracting out networking backend/package.
module Network.Delicious.Fetch

-- | <tt>readContentsURL</tt> fetches the content from the given URL,
--   <tt>u</tt>. Via a standard, non-authenticated, <tt>GET</tt>.
readContentsURL :: String -> URLString -> IO String

-- | Like <a>readContentsURL</a>, but HTTP authenticated using the supplied
--   credentials.
readUserContentsURL :: User -> String -> URLString -> IO String
type URLString = String


-- | Accessing a user's tags and bookmarks
module Network.Delicious.User
getLastUpdate :: DM TimeString
getTags :: DM [TagInfo]
renameTag :: Tag -> Tag -> DM ()
deleteTag :: Tag -> DM ()
getPosts :: Filter -> DM [Post]
getRecent :: Maybe Tag -> Maybe Integer -> DM [Post]
getAll :: Maybe Tag -> DM [Post]
getAllHashes :: DM [Post]
getByDate :: Maybe Tag -> DM [(DateString, Integer)]
addPost :: Post -> Bool -> Bool -> DM ()
deletePost :: URLString -> DM ()
getBundles :: DM [Bundle]
setBundle :: String -> [Tag] -> DM ()
deleteBundle :: String -> DM ()
restReq :: String -> [(String, String)] -> DM (Either Element String)


module Network.Delicious.RSS
getHotlist :: DM [Post]
getRecentBookmarks :: DM [Post]
getTagBookmarks :: Tag -> DM [Post]
getTagsBookmarks :: [Tag] -> DM [Post]
getPopularBookmarks :: DM [Post]
getTagPopularBookmarks :: Tag -> DM [Post]
getSiteAlerts :: DM [Post]
getUserBookmarks :: String -> DM [Post]
getUserTagBookmarks :: String -> Tag -> DM [Post]
getUserTaggedBookmarks :: String -> [Tag] -> DM [Post]
getUserInfo :: String -> DM [Post]
getUserPublicTags :: String -> DM [Post]
getUserSubscriptions :: String -> DM [Post]
getUserInboxBookmarks :: String -> String -> DM [Post]
getNetworkMemberBookmarks :: String -> DM [Post]
getNetworkMemberTaggedBookmarks :: String -> [Tag] -> DM [Post]
getNetworkMembers :: String -> DM [Post]
getNetworkFans :: String -> DM [Post]
getURLBookmarks :: URLString -> DM [Post]


-- | Access del.icio.us JSON services.
--   
--   See <a>http://del.icio.us/help/json/</a> for more details on the API.
--   
--   <a>You can use JSON feeds at del.icio.us to fetch, remix, and mashup a
--   variety of data for use in your own custom applications and
--   browser-based presentation styles.</a>
module Network.Delicious.JSON
getHotlist :: DM [Post]
getRecentBookmarks :: DM [Post]
getTagBookmarks :: Tag -> DM [Post]
getTagsBookmarks :: [Tag] -> DM [Post]
getPopularBookmarks :: DM [Post]
getTagPopularBookmarks :: Tag -> DM [Post]
getSiteAlerts :: DM [Post]
getUserBookmarks :: String -> DM [Post]
getUserTagBookmarks :: String -> Tag -> DM [Post]
getUserTaggedBookmarks :: String -> [Tag] -> DM [Post]
getUserInfo :: String -> DM [Post]
getUserPublicTags :: String -> DM [Post]
getUserSubscriptions :: String -> DM [Post]
getUserInboxBookmarks :: String -> String -> DM [Post]
getNetworkMemberBookmarks :: String -> DM [Post]
getNetworkMemberTaggedBookmarks :: String -> [Tag] -> DM [Post]
getNetworkMembers :: String -> DM [Post]
getNetworkFans :: String -> DM [Post]
getURLBookmarks :: URLString -> DM [Post]
getURLSummary :: URLString -> DM URLDetails

-- | Retrieve tags associated with a url from delicious. An example,
--   extract the tags associated with <tt>xmonad</tt>:
--   
--   <pre>
--   &gt; getURLSummary "http://xmonad.org/"
--   
--         (URLDetails {total = 283
--                     ,tags = [("haskell",176)
--                             ,("windowmanager",133)
--                             ,("x11",126)
--                             ,("linux",116)
--                             ,("wm",74)
--                             ,("software",55)
--                             ,("gui",39)
--                             ,("desktop",26)
--                             ,("programming",25)
--                             ,("opensource",23)
--                             ,("xmonad",20)]
--                     }
--   </pre>
getURLDetails :: String -> DM URLDetails
data HtmlFeed
HtmlFeed :: Maybe String -> Bool -> Maybe String -> Maybe String -> Bool -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe Bool -> Maybe Bool -> Maybe String -> HtmlFeed
hf_delUrl :: HtmlFeed -> Maybe String
hf_extended :: HtmlFeed -> Bool
hf_divClass :: HtmlFeed -> Maybe String
hf_aClass :: HtmlFeed -> Maybe String
hf_showTags :: HtmlFeed -> Bool
hf_tagClass :: HtmlFeed -> Maybe String
hf_tagSep :: HtmlFeed -> Maybe String
hf_tagSepClass :: HtmlFeed -> Maybe String
hf_bulletEnt :: HtmlFeed -> Maybe String
hf_withFeedButton :: HtmlFeed -> Maybe Bool
hf_extendedInDiv :: HtmlFeed -> Maybe Bool
hf_extendedClass :: HtmlFeed -> Maybe String
baseHtmlFeed :: HtmlFeed
feed_html_url :: String
getHtmlForTag :: HtmlFeed -> Maybe Tag -> DM String

-- | A structure represening the the delicious tags associated with a url.
data URLDetails
URLDetails :: !Integer -> [(String, Integer)] -> String -> String -> URLDetails
total :: URLDetails -> !Integer
tags :: URLDetails -> [(String, Integer)]
hash :: URLDetails -> String
url :: URLDetails -> String
instance Eq URLDetails
instance Show URLDetails
instance Read URLDetails
instance JSON URLDetails


module Network.Delicious
