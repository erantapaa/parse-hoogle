-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Haskell client for the Help.com team's ESB.
--   
@package help-esb
@version 0.1.6

module JSON.Basic.Request
data Meta
Meta :: Text -> [Char] -> Meta
h_type :: Meta -> Text
h_id :: Meta -> [Char]
data Data
Data :: Text -> [Text] -> Data
h_name :: Data -> Text
h_subscriptions :: Data -> [Text]
data Message
Message :: Meta -> Data -> Message
h_meta :: Message -> Meta
h_data :: Message -> Data

-- | Efficiently serialize a JSON value as a lazy <a>ByteString</a>.
encode :: ToJSON a => a -> ByteString

-- | Efficiently deserialize a JSON value from a lazy <a>ByteString</a>. If
--   this fails due to incomplete or invalid input, <a>Nothing</a> is
--   returned.
--   
--   The input must consist solely of a JSON document, with no trailing
--   data except for whitespace. This restriction is necessary to ensure
--   that if data is being lazily read from a file handle, the file handle
--   will be closed in a timely fashion once the document has been parsed.
--   
--   This function parses immediately, but defers conversion. See
--   <a>json</a> for details.
decode :: FromJSON a => ByteString -> Maybe a

-- | Like <a>decode</a> but returns an error message when decoding fails.
eitherDecode :: FromJSON a => ByteString -> Either String a
instance Show Meta
instance Generic Meta
instance Show Data
instance Generic Data
instance Show Message
instance Generic Message
instance Datatype D1Meta
instance Constructor C1_0Meta
instance Selector S1_0_0Meta
instance Selector S1_0_1Meta
instance Datatype D1Data
instance Constructor C1_0Data
instance Selector S1_0_0Data
instance Selector S1_0_1Data
instance Datatype D1Message
instance Constructor C1_0Message
instance Selector S1_0_0Message
instance Selector S1_0_1Message
instance ToJSON Message
instance ToJSON Data
instance ToJSON Meta
instance FromJSON Message
instance FromJSON Data
instance FromJSON Meta

module JSON.API.Event.Post.Request
data Meta
Meta :: Text -> [Char] -> Text -> Meta
h_type :: Meta -> Text
h_id :: Meta -> [Char]
h_group :: Meta -> Text
data Data
Data :: Int -> Text -> Text -> Text -> [Char] -> [Char] -> Data
h_createdAt :: Data -> Int
h_content :: Data -> Text
h_eventType :: Data -> Text
h_senderType :: Data -> Text
h_senderId :: Data -> [Char]
h_customerId :: Data -> [Char]
data Message
Message :: Meta -> Data -> Message
h_meta :: Message -> Meta
h_data :: Message -> Data

-- | Efficiently serialize a JSON value as a lazy <a>ByteString</a>.
encode :: ToJSON a => a -> ByteString

-- | Efficiently deserialize a JSON value from a lazy <a>ByteString</a>. If
--   this fails due to incomplete or invalid input, <a>Nothing</a> is
--   returned.
--   
--   The input must consist solely of a JSON document, with no trailing
--   data except for whitespace. This restriction is necessary to ensure
--   that if data is being lazily read from a file handle, the file handle
--   will be closed in a timely fashion once the document has been parsed.
--   
--   This function parses immediately, but defers conversion. See
--   <a>json</a> for details.
decode :: FromJSON a => ByteString -> Maybe a

-- | Like <a>decode</a> but returns an error message when decoding fails.
eitherDecode :: FromJSON a => ByteString -> Either String a
instance Show Meta
instance Generic Meta
instance Show Data
instance Generic Data
instance Show Message
instance Generic Message
instance Datatype D1Meta
instance Constructor C1_0Meta
instance Selector S1_0_0Meta
instance Selector S1_0_1Meta
instance Selector S1_0_2Meta
instance Datatype D1Data
instance Constructor C1_0Data
instance Selector S1_0_0Data
instance Selector S1_0_1Data
instance Selector S1_0_2Data
instance Selector S1_0_3Data
instance Selector S1_0_4Data
instance Selector S1_0_5Data
instance Datatype D1Message
instance Constructor C1_0Message
instance Selector S1_0_0Message
instance Selector S1_0_1Message
instance ToJSON Message
instance ToJSON Data
instance ToJSON Meta
instance FromJSON Message
instance FromJSON Data
instance FromJSON Meta

module JSON.API.EventGroup.Post.Request
data Meta
Meta :: Text -> [Char] -> Text -> Meta
h_type :: Meta -> Text
h_id :: Meta -> [Char]
h_group :: Meta -> Text
data Data
Data :: [Char] -> Text -> Text -> [Char] -> Data
h_eventGroupType :: Data -> [Char]
h_eventGroupId :: Data -> Text
h_ownerType :: Data -> Text
h_ownerId :: Data -> [Char]
data Message
Message :: Meta -> Data -> Message
h_meta :: Message -> Meta
h_data :: Message -> Data

-- | Efficiently serialize a JSON value as a lazy <a>ByteString</a>.
encode :: ToJSON a => a -> ByteString

-- | Efficiently deserialize a JSON value from a lazy <a>ByteString</a>. If
--   this fails due to incomplete or invalid input, <a>Nothing</a> is
--   returned.
--   
--   The input must consist solely of a JSON document, with no trailing
--   data except for whitespace. This restriction is necessary to ensure
--   that if data is being lazily read from a file handle, the file handle
--   will be closed in a timely fashion once the document has been parsed.
--   
--   This function parses immediately, but defers conversion. See
--   <a>json</a> for details.
decode :: FromJSON a => ByteString -> Maybe a

-- | Like <a>decode</a> but returns an error message when decoding fails.
eitherDecode :: FromJSON a => ByteString -> Either String a
instance Show Meta
instance Generic Meta
instance Show Data
instance Generic Data
instance Show Message
instance Generic Message
instance Datatype D1Meta
instance Constructor C1_0Meta
instance Selector S1_0_0Meta
instance Selector S1_0_1Meta
instance Selector S1_0_2Meta
instance Datatype D1Data
instance Constructor C1_0Data
instance Selector S1_0_0Data
instance Selector S1_0_1Data
instance Selector S1_0_2Data
instance Selector S1_0_3Data
instance Datatype D1Message
instance Constructor C1_0Message
instance Selector S1_0_0Message
instance Selector S1_0_1Message
instance ToJSON Message
instance ToJSON Data
instance ToJSON Meta
instance FromJSON Message
instance FromJSON Data
instance FromJSON Meta

module JSON.Login.Response
data Meta
Meta :: Text -> [Char] -> Text -> Text -> Text -> Meta
h_type :: Meta -> Text
h_id :: Meta -> [Char]
h_source :: Meta -> Text
h_replyTo :: Meta -> Text
h_result :: Meta -> Text
data Data
Data :: Int -> Text -> Data
h_heartbeatInterval :: Data -> Int
h_channelId :: Data -> Text
data Message
Message :: Meta -> Data -> Message
h_meta :: Message -> Meta
h_data :: Message -> Data

-- | Efficiently serialize a JSON value as a lazy <a>ByteString</a>.
encode :: ToJSON a => a -> ByteString

-- | Efficiently deserialize a JSON value from a lazy <a>ByteString</a>. If
--   this fails due to incomplete or invalid input, <a>Nothing</a> is
--   returned.
--   
--   The input must consist solely of a JSON document, with no trailing
--   data except for whitespace. This restriction is necessary to ensure
--   that if data is being lazily read from a file handle, the file handle
--   will be closed in a timely fashion once the document has been parsed.
--   
--   This function parses immediately, but defers conversion. See
--   <a>json</a> for details.
decode :: FromJSON a => ByteString -> Maybe a

-- | Like <a>decode</a> but returns an error message when decoding fails.
eitherDecode :: FromJSON a => ByteString -> Either String a
instance Show Meta
instance Generic Meta
instance Show Data
instance Generic Data
instance Show Message
instance Generic Message
instance Datatype D1Meta
instance Constructor C1_0Meta
instance Selector S1_0_0Meta
instance Selector S1_0_1Meta
instance Selector S1_0_2Meta
instance Selector S1_0_3Meta
instance Selector S1_0_4Meta
instance Datatype D1Data
instance Constructor C1_0Data
instance Selector S1_0_0Data
instance Selector S1_0_1Data
instance Datatype D1Message
instance Constructor C1_0Message
instance Selector S1_0_0Message
instance Selector S1_0_1Message
instance ToJSON Message
instance ToJSON Data
instance ToJSON Meta
instance FromJSON Message
instance FromJSON Data
instance FromJSON Meta

module JSON.Login.Request
data Meta
Meta :: Text -> [Char] -> Meta
h_type :: Meta -> Text
h_id :: Meta -> [Char]
data Data
Data :: Text -> [Text] -> Data
h_name :: Data -> Text
h_subscriptions :: Data -> [Text]
data Message
Message :: Meta -> Data -> Message
h_meta :: Message -> Meta
h_data :: Message -> Data

-- | Efficiently serialize a JSON value as a lazy <a>ByteString</a>.
encode :: ToJSON a => a -> ByteString

-- | Efficiently deserialize a JSON value from a lazy <a>ByteString</a>. If
--   this fails due to incomplete or invalid input, <a>Nothing</a> is
--   returned.
--   
--   The input must consist solely of a JSON document, with no trailing
--   data except for whitespace. This restriction is necessary to ensure
--   that if data is being lazily read from a file handle, the file handle
--   will be closed in a timely fashion once the document has been parsed.
--   
--   This function parses immediately, but defers conversion. See
--   <a>json</a> for details.
decode :: FromJSON a => ByteString -> Maybe a

-- | Like <a>decode</a> but returns an error message when decoding fails.
eitherDecode :: FromJSON a => ByteString -> Either String a
instance Show Meta
instance Generic Meta
instance Show Data
instance Generic Data
instance Show Message
instance Generic Message
instance Datatype D1Meta
instance Constructor C1_0Meta
instance Selector S1_0_0Meta
instance Selector S1_0_1Meta
instance Datatype D1Data
instance Constructor C1_0Data
instance Selector S1_0_0Data
instance Selector S1_0_1Data
instance Datatype D1Message
instance Constructor C1_0Message
instance Selector S1_0_0Message
instance Selector S1_0_1Message
instance ToJSON Message
instance ToJSON Data
instance ToJSON Meta
instance FromJSON Message
instance FromJSON Data
instance FromJSON Meta

module JSON.Basic.Response
data Meta
Meta :: Text -> [Char] -> Meta
h_type :: Meta -> Text
h_id :: Meta -> [Char]
data Message
Message :: Meta -> Message
h_meta :: Message -> Meta

-- | Efficiently serialize a JSON value as a lazy <a>ByteString</a>.
encode :: ToJSON a => a -> ByteString

-- | Efficiently deserialize a JSON value from a lazy <a>ByteString</a>. If
--   this fails due to incomplete or invalid input, <a>Nothing</a> is
--   returned.
--   
--   The input must consist solely of a JSON document, with no trailing
--   data except for whitespace. This restriction is necessary to ensure
--   that if data is being lazily read from a file handle, the file handle
--   will be closed in a timely fashion once the document has been parsed.
--   
--   This function parses immediately, but defers conversion. See
--   <a>json</a> for details.
decode :: FromJSON a => ByteString -> Maybe a

-- | Like <a>decode</a> but returns an error message when decoding fails.
eitherDecode :: FromJSON a => ByteString -> Either String a
instance Show Meta
instance Generic Meta
instance Show Message
instance Generic Message
instance Datatype D1Meta
instance Constructor C1_0Meta
instance Selector S1_0_0Meta
instance Selector S1_0_1Meta
instance Datatype D1Message
instance Constructor C1_0Message
instance Selector S1_0_0Message
instance ToJSON Message
instance ToJSON Meta
instance FromJSON Message
instance FromJSON Meta


module HelpEsbClient

-- | The <a>EsbSend</a> class determines how a message should be sent to
--   the ESB.
class EsbSend a
esbSend :: EsbSend a => Socket -> a -> IO ()

-- | The <a>EsbRecieve</a> class determines how a message from the ESB
--   should be recieved.
class EsbRecieve a
esbRecieve :: EsbRecieve a => Socket -> a -> IO ()

-- | The <a>EsbSendExternal</a> is similar to <a>EsbSend</a>, just with an
--   option to involve external resources.
class EsbSendExternal a b
esbSendExternal :: EsbSendExternal a b => Socket -> a -> b -> IO ()

-- | The <a>EsbRecieveExternal</a> is similar to <a>EsbRecieve</a>, just
--   with an option to involve external resources.
class EsbRecieveExternal a b
esbRecieveExternal :: EsbRecieveExternal a b => Socket -> a -> b -> IO ()

-- | The <a>getSocket</a> function takes a host and port and connects to
--   and returns the socket.
getSocket :: String -> Int -> IO Socket

-- | The <a>sendSocketData</a> function accepts a socket and bytes,
--   converts the bytes to cleaned up JSON, and writes the JSON to the
--   socket.
sendSocketData :: Socket -> ByteString -> IO ()

-- | The <a>readSocketDataRaw</a> function accepts a socket and grabs
--   whatever data might be in the latest message.
readSocketDataRaw :: Socket -> IO [Char]

-- | The <a>readSocketData</a> function accepts a socket, reads and cleans
--   up any JSON for parsing, and returns the bytes of JSON.
readSocketData :: Socket -> IO (ByteString)

-- | The <a>esbInit</a> function initializes the socket connection and logs
--   into the ESB.
esbInit :: Text -> [Text] -> Maybe String -> Maybe Int -> IO Socket

-- | The <a>esbListen</a> function performs all essential listening logic
--   for any ESB client.
esbListen :: Socket -> IO ([ByteString])

-- | Efficiently serialize a JSON value as a lazy <a>ByteString</a>.
encode :: ToJSON a => a -> ByteString

-- | Efficiently deserialize a JSON value from a lazy <a>ByteString</a>. If
--   this fails due to incomplete or invalid input, <a>Nothing</a> is
--   returned.
--   
--   The input must consist solely of a JSON document, with no trailing
--   data except for whitespace. This restriction is necessary to ensure
--   that if data is being lazily read from a file handle, the file handle
--   will be closed in a timely fashion once the document has been parsed.
--   
--   This function parses immediately, but defers conversion. See
--   <a>json</a> for details.
decode :: FromJSON a => ByteString -> Maybe a

-- | Like <a>decode</a> but returns an error message when decoding fails.
eitherDecode :: FromJSON a => ByteString -> Either String a

-- | The <a>logger</a> function simply logs out in a consistent way. Will
--   be updated to be more robust.
logger :: String -> IO ()

-- | <a>forM_</a> is <a>mapM_</a> with its arguments flipped
forM_ :: Monad m => [a] -> (a -> m b) -> m ()
data Socket :: *
instance EsbRecieve Message
instance EsbSend Data
instance EsbSend Data
instance EsbSend Data
