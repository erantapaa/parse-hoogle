-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | API for backends of "hasql"
--   
@package hasql-backend
@version 0.4.1.1


-- | An open API for implementation of specific backend drivers.
module Hasql.Backend
class Cx c where type family CxSettings c type family CxError c
acquireCx :: Cx c => CxSettings c -> IO (Either (CxError c) c)
releaseCx :: Cx c => c -> IO ()

-- | A raw value returned from the database.

-- | A raw result row.
type ResultRow c = Vector (ResultValue c)

-- | A stream of rows of a result.
type ResultStream c = ListT IO (ResultRow c)

-- | A matrix of a result.
type ResultMatrix c = Vector (ResultRow c)

-- | A statement template packed with its values and settings.
data Stmt c
Stmt :: !Text -> !(Vector (StmtParam c)) -> !Bool -> Stmt c
stmtTemplate :: Stmt c -> !Text
stmtParams :: Stmt c -> !(Vector (StmtParam c))
stmtPreparable :: Stmt c -> !Bool

-- | A prepared statement parameter.

-- | A support by a backend of mapping a specific data type.
class CxValue c v
encodeValue :: CxValue c v => v -> StmtParam c
decodeValue :: CxValue c v => ResultValue c -> Either Text v

-- | A transaction execution support.
class CxTx c where type family TxError c
runTx :: CxTx c => c -> TxMode -> Tx c a -> IO (Either (TxError c) (Maybe a))

-- | For reference see <a>the Wikipedia info</a>.
data TxIsolationLevel
RepeatableReads :: TxIsolationLevel
Serializable :: TxIsolationLevel
ReadCommitted :: TxIsolationLevel
ReadUncommitted :: TxIsolationLevel

-- | A mode, defining how a transaction should be executed.
--   
--   <ul>
--   <li><tt>Just (isolationLevel, write)</tt> indicates that a database
--   transaction should be established with a specified isolation level and
--   a write mode.</li>
--   <li><tt>Nothing</tt> indicates that there should be no database
--   transaction established on the backend and therefore it should be
--   executed with no ACID guarantees, but also without any induced
--   overhead.</li>
--   </ul>
type TxMode = Maybe (TxIsolationLevel, TxWriteMode)

-- | <ul>
--   <li><tt>Nothing</tt> indicates a "read" mode.</li>
--   <li><tt>Just True</tt> indicates a "write" mode.</li>
--   <li><tt>Just False</tt> indicates a "write" mode without committing.
--   This is useful for testing, allowing you to modify your database,
--   producing some result based on your changes, and to let Hasql roll all
--   the changes back on the exit from the transaction.</li>
--   </ul>
type TxWriteMode = Maybe Bool
type Tx c = FreeT (TxF c) (MaybeT (EitherT (TxError c) IO))
data TxF c x
UnitTx :: (Stmt c) -> x -> TxF c x
CountTx :: (Stmt c) -> (Word64 -> x) -> TxF c x
VectorTx :: (Stmt c) -> (Vector (ResultRow c) -> x) -> TxF c x
StreamTx :: Int -> (Stmt c) -> (ListT (Tx c) (ResultRow c) -> x) -> TxF c x
unitTx :: Stmt c -> Tx c ()
countTx :: Stmt c -> Tx c Word64
vectorTx :: Stmt c -> Tx c (Vector (ResultRow c))
streamTx :: Int -> Stmt c -> Tx c (ListT (Tx c) (ResultRow c))
instance Functor (TxF c)
