-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Utilities for working with OpenGL's GLSL shading language and vinyl records.
--   
@package vinyl-gl
@version 0.2.0.2


-- | Reflection utilities for vinyl records.
module Data.Vinyl.Reflect

-- | List all field names in a record.
class HasFieldNames a
fieldNames :: HasFieldNames a => a -> [String]

-- | Compute the size in bytes of of each field in a record.
class HasFieldSizes a
fieldSizes :: HasFieldSizes a => a -> [Int]

-- | Compute the dimensionality of each field in a record. This is
--   primarily useful for things like the small finite vector types
--   provided by <a>Linear</a>.
class HasFieldDims a
fieldDims :: HasFieldDims a => a -> [Int]
instance (HasFieldDims (PlainFieldRec ts), Foldable v, Num (v a)) => HasFieldDims (PlainFieldRec ((sy ::: v a) : ts))
instance HasFieldDims (FieldRec f '[])
instance (HasFieldSizes (PlainFieldRec ts), Storable t) => HasFieldSizes (PlainFieldRec ((sy ::: t) : ts))
instance HasFieldSizes (FieldRec f '[])
instance (KnownSymbol sy, HasFieldNames (PlainFieldRec ts)) => HasFieldNames (PlainFieldRec ((sy ::: t) : ts))
instance HasFieldNames (FieldRec f '[])


-- | Tools for binding vinyl records to GLSL program uniform parameters.
--   The most common usage is to use the <a>setUniforms</a> function to set
--   each field of a <tt>PlainRec</tt> to the GLSL uniform parameter with
--   the same name. This verifies that each field of the record corresponds
--   to a uniform parameter of the given shader program, and that the types
--   all agree.
module Graphics.VinylGL.Uniforms

-- | Set GLSL uniform parameters from a <tt>PlainRec</tt>. A check is
--   performed to verify that <i>all</i> uniforms used by a program are
--   represented by the record type. In other words, the record is a
--   superset of the parameters used by the program.
setAllUniforms :: UniformFields (PlainFieldRec ts) => ShaderProgram -> PlainFieldRec ts -> IO ()

-- | Set GLSL uniform parameters from those fields of a <tt>PlainRec</tt>
--   whose names correspond to uniform parameters used by a program.
setSomeUniforms :: UniformFields (PlainFieldRec ts) => ShaderProgram -> PlainFieldRec ts -> IO ()

-- | Set GLSL uniform parameters from a <tt>PlainRec</tt> representing a
--   subset of all uniform parameters used by a program.
setUniforms :: UniformFields (PlainFieldRec ts) => ShaderProgram -> PlainFieldRec ts -> IO ()

-- | Provide the <a>VariableType</a> of each field in a <a>Rec</a>. The
--   list of types has the same order as the fields of the <a>Rec</a>.
class HasFieldGLTypes a
fieldGLTypes :: HasFieldGLTypes a => a -> [VariableType]
class SetUniformFields a
instance (AsUniform t, SetUniformFields (PlainFieldRec ts)) => SetUniformFields (PlainFieldRec ((sy ::: t) : ts))
instance SetUniformFields (FieldRec f '[])
instance (HasVariableType t, HasFieldGLTypes (PlainFieldRec ts)) => HasFieldGLTypes (PlainFieldRec ((sy ::: t) : ts))
instance HasFieldGLTypes (FieldRec f '[])


-- | Utilities for working with vertex buffer objects (VBOs) filled with
--   vertices represented as vinyl records.
module Graphics.VinylGL.Vertex

-- | Load vertex data into a GPU-accessible buffer.
bufferVertices :: (Storable (PlainFieldRec rs), BufferSource (v (PlainFieldRec rs))) => v (PlainFieldRec rs) -> IO (BufferedVertices rs)

-- | Bind previously-buffered vertex data.
bindVertices :: BufferedVertices a -> IO ()

-- | Reload <a>BufferedVertices</a> with a <a>Vector</a> of new vertex
--   data.
reloadVertices :: Storable (PlainFieldRec rs) => BufferedVertices rs -> Vector (PlainFieldRec rs) -> IO ()

-- | Delete the object name associated with <a>BufferedVertices</a>.
deleteVertices :: BufferedVertices a -> IO ()

-- | Line up a shader's attribute inputs with a vertex record. This maps
--   vertex fields to GLSL attributes on the basis of record field names on
--   the Haskell side, and variable names on the GLSL side.
enableVertices :: ViableVertex (PlainFieldRec rs) => ShaderProgram -> f rs -> IO (Maybe String)

-- | Behaves like <a>enableVertices</a>, but raises an exception if the
--   supplied vertex record does not include a field required by the
--   shader.
enableVertices' :: ViableVertex (PlainFieldRec rs) => ShaderProgram -> f rs -> IO ()

-- | Bind some of a shader's attribute inputs to a vertex record. This is
--   useful when the inputs of a shader are split across multiple arrays.
enableVertexFields :: ViableVertex (PlainFieldRec rs) => ShaderProgram -> p rs -> IO ()

-- | Representation of a VBO whose type describes the vertices.
newtype BufferedVertices (fields :: [*])
BufferedVertices :: BufferObject -> BufferedVertices
getVertexBuffer :: BufferedVertices -> BufferObject

-- | Produce a <a>VertexArrayDescriptor</a> for a particular field of a
--   vertex record.
fieldToVAD :: (r ~ ((sy :: Symbol) ::: v a), HasFieldNames (PlainFieldRec rs), HasFieldSizes (PlainFieldRec rs), HasGLType a, Storable (PlainFieldRec rs), Num (v a), KnownSymbol sy, Foldable v, Implicit (Elem r rs)) => field r -> proxy (PlainFieldRec rs) -> VertexArrayDescriptor a
instance Show FieldDescriptor

module Graphics.VinylGL
