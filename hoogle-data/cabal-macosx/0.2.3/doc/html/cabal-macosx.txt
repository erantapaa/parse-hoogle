-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Cabal support for creating Mac OSX application bundles.
--   
--   GUI applications on Mac OSX must be run as application <i>bundles</i>;
--   these wrap an executable in a particular directory structure which can
--   also carry resources such as icons, program metadata, other binaries,
--   and copies of shared libraries. This package provides Cabal support
--   for creating such application bundles. For more information about OSX
--   application bundles, look for the <i>Bundle Programming Guide</i> on
--   the <i>Apple Developer Connection</i> website,
--   <a>http://developer.apple.com/</a>.
@package cabal-macosx
@version 0.2.3


-- | Cabal support for creating Mac OSX application bundles.
--   
--   GUI applications on Mac OSX should be run as application
--   <i>bundles</i>; these wrap an executable in a particular directory
--   structure which can also carry resources such as icons, program
--   metadata, images, other binaries, and copies of shared libraries.
--   
--   This module provides a Cabal post-build hook for creating such
--   application bundles, and controlling their contents.
--   
--   For more information about OSX application bundles, look for the
--   <i>Bundle Programming Guide</i> on the <i>Apple Developer
--   Connection</i> website, <a>http://developer.apple.com/</a>.
module Distribution.MacOSX

-- | Post-build hook for OS X application bundles. Does nothing if called
--   on another O/S.
appBundleBuildHook :: [MacApp] -> Args -> BuildFlags -> PackageDescription -> LocalBuildInfo -> IO ()

-- | Post-install hook for OS X application bundles. Copies the application
--   bundle (assuming you are also using the appBundleBuildHook) to
--   <tt>$prefix/Applications</tt> Does nothing if called on another O/S.
appBundleInstallHook :: [MacApp] -> Args -> InstallFlags -> PackageDescription -> LocalBuildInfo -> IO ()

-- | Given a <a>MacApp</a> in context, make an application bundle in the
--   build area. (for internal use only)
makeAppBundle :: AppBuildInfo -> IO ()

-- | Mac OSX application information.
data MacApp
MacApp :: String -> Maybe FilePath -> Maybe FilePath -> [FilePath] -> [FilePath] -> ChaseDeps -> MacApp

-- | Application name. This should be the name of the executable produced
--   by Cabal's build stage. The app bundle produced will be
--   <tt>dist/build/<i>appName</i>.app</tt>, and the executable
--   <i>appName</i> will be copied to <tt>Contents/MacOSX/</tt> in the
--   bundle.
appName :: MacApp -> String

-- | Path to icon file, to be copied to <tt>Contents/Resources/</tt> in the
--   app bundle. If omitted, no icon will be used.
appIcon :: MacApp -> Maybe FilePath

-- | Path to <i>plist</i> file ('property-list' of application metadata),
--   to be copied to <tt>Contents/Info.plist</tt> in the app bundle. If
--   omitted, and if <a>appIcon</a> is specified, a basic default plist
--   will be used.
appPlist :: MacApp -> Maybe FilePath

-- | Other resources to bundle in the application, e.g. image files, etc.
--   Each will be copied to <tt>Contents/Resources/</tt>, with the proviso
--   that if the resource path begins with <tt>resources/</tt>, it will go
--   to a <i>relative</i> subdirectory of <tt>Contents/Resources/</tt>. For
--   example, <tt>images/splash.png</tt> will be copied to
--   <tt>Contents/Resources/splash.png</tt>, whereas
--   <tt>resources/images/splash.png</tt> will be copied to
--   <tt>Contents/Resources/resources/images/splash.png</tt>.
--   
--   Bundled resources may be referred to from your program relative to
--   your executable's path (which may be computed, e.g., using Audrey
--   Tang's FindBin package).
resources :: MacApp -> [FilePath]

-- | Other binaries to bundle in the application, e.g. other executables
--   from your project, or third-party programs. Each will be copied to a
--   relative sub-directory of <tt>Contents/Resources/</tt> in the bundle.
--   For example, <tt>/usr/bin/ftp</tt> would be copied to
--   <tt>Contents/Resources/usr/bin/ftp</tt> in the app.
--   
--   Like <a>resources</a>, bundled binaries may be referred to from your
--   program relative to your executable's path (which may be computed,
--   e.g., using Audrey Tang's FindBin package).
otherBins :: MacApp -> [FilePath]

-- | Controls inclusion of library dependencies for executable and
--   <a>otherBins</a>; see below.
appDeps :: MacApp -> ChaseDeps

-- | Application bundles may carry their own copies of shared libraries,
--   which enables distribution of applications which 'just work, out of
--   the box' in the absence of static linking. For example, a wxHaskell
--   app can include the wx library (and <i>its</i> dependencies,
--   recursively), meaning end users do not need to install wxWidgets in
--   order to use the app.
--   
--   This data type controls this process: if dependency chasing is
--   activated, then the app's executable and any <a>otherBins</a> are
--   examined for their dependencies, recursively (usually with some
--   exceptions - see below), the dependencies are copied into the app
--   bundle, and any references to each library are updated to point to the
--   copy.
--   
--   (The process is transparent to the programmer, i.e. requires no
--   modification to code. In case anyone is interested: <tt>otool</tt> is
--   used to discover a binary's library dependencies; each library is
--   copied to a relative sub-directory of <tt>Contents/Frameworks/</tt> in
--   the app bundle (e.g. <tt>/usr/lib/libFoo.a</tt> becomes
--   <tt>Contents/Frameworks/usr/lib/libFoo.a</tt>); finally,
--   <tt>install_name_tool</tt> is used to update dependency references to
--   point to the new version.)
data ChaseDeps

-- | Do not include any dependencies - a sensible default if not
--   distributing your app.
DoNotChase :: ChaseDeps

-- | Include any libraries which the executable and <a>otherBins</a> depend
--   on, excluding a default set which we would expect to be present on any
--   machine running the same version of OSX on which the executable was
--   built. (n.b.: Creation of application bundles which work transparently
--   across different versions of OSX is currently beyond the scope of this
--   package.)
ChaseWithDefaults :: ChaseDeps

-- | Include any libraries which the executable and <a>otherBins</a> depend
--   on, excluding a user-defined set. If you specify an empty exclusion
--   list, then <i>all</i> dependencies will be included, recursively,
--   including various OSX Frameworks; <i>this</i> <i>probably</i>
--   <i>isn't</i> <i>ever</i> <i>sensible</i>. The intended use, rather, is
--   to allow extension of the default list, which can be accessed via
--   <a>defaultExclusions</a>.
ChaseWith :: Exclusions -> ChaseDeps

-- | A list of exclusions to dependency chasing. Any library whose path
--   contains any exclusion string <i>as a substring</i> will be excluded
--   when chasing dependencies.
type Exclusions = [String]

-- | Default list of exclusions; excludes OSX standard frameworks, libgcc,
--   etc. - basically things which we would expect to be present on any
--   functioning OSX installation.
defaultExclusions :: Exclusions
