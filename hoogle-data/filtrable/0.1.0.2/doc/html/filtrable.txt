-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Class of filtrable containers
--   
@package filtrable
@version 0.1.0.2

module Data.Filtrable

-- | Laws:
--   
--   <ul>
--   <li><pre><a>mapMaybe</a> <a>Just</a> = id</pre></li>
--   <li><pre><a>mapMaybe</a> f = <a>catMaybes</a> ∘ <a>fmap</a>
--   f</pre></li>
--   <li><pre><a>catMaybes</a> = <a>mapMaybe</a> id</pre></li>
--   <li><pre><a>filter</a> f = <a>mapMaybe</a> (<a>liftA2</a>
--   (<a>&lt;$</a>) id (<a>guard</a> ∘ f))</pre></li>
--   </ul>
class Functor f => Filtrable f where mapMaybe f = catMaybes . fmap f catMaybes = mapMaybe id filter f = mapMaybe (liftA2 (<$) id (guard . f))
mapMaybe :: Filtrable f => (a -> Maybe b) -> f a -> f b
catMaybes :: Filtrable f => f (Maybe a) -> f a
filter :: Filtrable f => (a -> Bool) -> f a -> f a
mapMaybeA :: (Filtrable f, Traversable f, Applicative p) => (a -> p (Maybe b)) -> f a -> p (f b)
filterA :: (Filtrable f, Traversable f, Applicative p) => (a -> p Bool) -> f a -> p (f a)
instance Filtrable (Const a)
instance Filtrable Proxy
instance Filtrable Maybe
instance Filtrable []
