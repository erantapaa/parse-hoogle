-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generic GHC Plugin for annotating Haskell code with source
location data.
--   
@package ghc-srcspan-plugin
@version 0.2.1.0


-- | This module provides a generic Core-to-Core pass for annotating
--   Haskell expressions with the original source locations. You can use it
--   to build a GHC Plugin tailored to your own library by providing a
--   predicate a function to annotate interesting expressions.
--   
--   Example usage:
--   
--   <pre>
--   module MyPlugin (plugin) where
--   
--   import GhcPlugins
--   import GHC.Plugins.SrcSpan
--   
--   plugin :: Plugin
--   plugin = defaultPlugin { installCoreToDos = install }
--   
--   install :: [CommandLineOption] -&gt; [CoreToDo] -&gt; CoreM [CoreToDo]
--   install opts todos = do
--     reinitializeGlobals
--     return $ mypass : todos
--     where
--     mypass = CoreDoPluginPass "Add Locations" $ mkPass annotate False
--     annotate expr = ...
--   </pre>
--   
--   You will need to coax GHC into adding the source information to the
--   Core via <a>Tick</a>s. Currently there are three ways to do this:
--   
--   <ol>
--   <li>Load your module in <tt>ghci</tt>.</li>
--   <li>Compile your module with <tt>-prof -fprof-auto-calls</tt>. (You
--   can use other profiling options, but that will result in poorer
--   <a>Tick</a> granularity)</li>
--   <li>Compile your module with <tt>-fhpc</tt>. Note that this will
--   result in the <tt>hpc</tt> runtime being linked into your program,
--   which is a bit inconvenient. The plugin will prevent this if you pass
--   <tt>True</tt> instead of <tt>False</tt> to <a>mkPass</a>, but be
--   warned, this will likely break <b>any</b> FFI code your module
--   uses.</li>
--   </ol>
module GHC.Plugins.SrcSpan

-- | Given a way of annotating "interesting" <a>CoreExpr</a>s with
--   <a>SrcSpan</a>s, construct a Core-to-Core pass that traverses all of
--   the <a>CoreBind</a>s and annotates the interesting ones.
mkPass :: (SrcSpan -> CoreExpr -> CoreM CoreExpr) -> Bool -> ModGuts -> CoreM ModGuts
lookupModule :: ModuleName -> Maybe FastString -> CoreM Module
lookupName :: Module -> OccName -> CoreM Name

module GHC.Plugins.ErrorLoc
plugin :: Plugin
errorAt :: String -> String -> a
undefinedAt :: String -> a
fromJustAt :: String -> Maybe a -> a
