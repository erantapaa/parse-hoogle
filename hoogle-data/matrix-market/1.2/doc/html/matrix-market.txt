-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Read and write NIST Matrix Market files
--   
--   The Matrix Market (MM) exchange formats provide a simple mechanism to
--   facilitate the exchange of matrix data. In particular, the objective
--   has been to define a minimal base ASCII file format which can be very
--   easily explained and parsed, but can easily adapted to applications
--   with a more rigid structure, or extended to related data objects. The
--   MM exchange format for matrices is really a collection of affiliated
--   formats which share design elements. In the initial specification, two
--   matrix formats are defined.
--   
--   Coordinate Format - A file format suitable for representing general
--   sparse matrices. Only nonzero entries are provided, and the
--   coordinates of each nonzero entry is given explicitly.
--   
--   Array Format - A file format suitable for representing general dense
--   matrices. All entries are provided in a pre-defined (column-oriented)
--   order.
--   
--   For more information, see the NIST Matrix Market webpage:
--   <a>http://http://math.nist.gov/MatrixMarket/</a>
@package matrix-market
@version 1.2


-- | Read and write matrices and vectors in the Matrix Market format (see
--   http://math.nist.gov/MatrixMarket/).
module System.IO.MatrixMarket

-- | Specifies the element type. Pattern matrices do not have any elements,
--   only indices, and only make sense for coordinate matrices and vectors.
data Field
Real :: Field
Complex :: Field
Integer :: Field
Pattern :: Field

-- | Specifies either sparse or dense storage. In sparse ("coordinate")
--   storage, elements are given in (i,j,x) triplets for matrices (or (i,x)
--   for vectors). Indices are 1-based, so that A(1,1) is the first element
--   of a matrix, and x(1) is the first element of a vector.
--   
--   In dense ("array") storage, elements are given in column-major order.
--   
--   In both cases, each element is given on a separate line.
data Format
Coordinate :: Format
Array :: Format

-- | Specifies any special structure in the matrix. For symmetric and
--   hermition matrices, only the lower-triangular part of the matrix is
--   given. For skew matrices, only the entries below the diagonal are
--   stored.
data Type
General :: Type
Symmetric :: Type
Hermitian :: Type
Skew :: Type

-- | Write a dense vector with the given dimension and elements to a file.
--   If the field is given as <a>Pattern</a>, no elements are written, only
--   the header and size.
hPutVector :: Show a => Handle -> Field -> Int -> [a] -> IO ()

-- | Write a dense vector along with a description, which is put in the
--   comment section of the file.
hPutVectorWithDesc :: Show a => Handle -> String -> Field -> Int -> [a] -> IO ()

-- | Lazily read a dense vector from a file. The vector field, dimension
--   and elements are returned. The file is put in a semi-closed state and
--   the elements are read lazily. If the field is <a>Pattern</a>, the
--   elements list will be <tt>Nothing</tt>.
hGetVector :: Read a => Handle -> IO (Field, Int, Maybe [a])

-- | Write a coordinate vector with the given dimension and size to a file.
--   The indices are 1-based, so that x(1) is the first element of the
--   vector. If the field is <a>Pattern</a>, only the indices are used.
hPutCoordVector :: Show a => Handle -> Field -> Int -> Int -> [(Int, a)] -> IO ()

-- | Write a coordinate vector along with a description, which is put in
--   the comment section of the file.
hPutCoordVectorWithDesc :: Show a => Handle -> String -> Field -> Int -> Int -> [(Int, a)] -> IO ()

-- | Lazily read a coordinate vector from a file. The vector field,
--   dimension, size, and elements are returned. The file is put in a
--   semi-clased state and the elements are read lazily. If the field is
--   <a>Pattern</a>, only a list of indices is returned.
hGetCoordVector :: Read a => Handle -> IO (Field, Int, Int, Either [Int] [(Int, a)])

-- | Write a dense matrix with the given shape and elements in column-major
--   order to a file. If the field is given as <a>Pattern</a>, no elements
--   are written, only the header and size.
hPutMatrix :: Show a => Handle -> Field -> Type -> (Int, Int) -> [a] -> IO ()

-- | Write a dense matrix along with a description, which is put in the
--   comment section of the file.
hPutMatrixWithDesc :: Show a => Handle -> String -> Field -> Type -> (Int, Int) -> [a] -> IO ()

-- | Lazily read a dense matrix from a file, returning the matrix field,
--   type, shape and elements in column-major order. The elements are read
--   laxily, and the file is put in a semi-closed state. If the field is
--   <a>Pattern</a>, <tt>Nothing</tt> is returned instead of an element
--   list.
hGetMatrix :: Read a => Handle -> IO (Field, Type, (Int, Int), Maybe [a])

-- | Write a coordinate matrix with the given shape and size to a file. The
--   indices are 1-based, so that A(1,1) is the first element of the
--   matrix. If the field is <a>Pattern</a>, only the indices are used.
hPutCoordMatrix :: Show a => Handle -> Field -> Type -> (Int, Int) -> Int -> [((Int, Int), a)] -> IO ()

-- | Write a coordinate matrix along with a description, which is put in
--   the comment section of the file.
hPutCoordMatrixWithDesc :: Show a => Handle -> String -> Field -> Type -> (Int, Int) -> Int -> [((Int, Int), a)] -> IO ()

-- | Lazily read a coordinate matrix from a file. The matrix field, type,
--   shape size,and elements are returned. The files contents lazily, and
--   the file is put in a semi-closed state. If the field is
--   <a>Pattern</a>, only the indices are returned.
hGetCoordMatrix :: Read a => Handle -> IO (Field, Type, (Int, Int), Int, Either [(Int, Int)] [((Int, Int), a)])

-- | Give the Matrix Market header string for the given matrix type.
showHeader :: Format -> Field -> Type -> String

-- | Read a Matrix Market header from a string.
readHeader :: String -> (Format, Field, Type)

-- | Write out a header and comments for a Matrix Market matrix.
hPutBanner :: Handle -> Format -> Field -> Type -> String -> IO ()

-- | Read the Matrix Market banner (including comments) from a file. The
--   comments and the banner information are returned.
hGetBanner :: Handle -> IO (Format, Field, Type, String)

-- | Write a Matrix Market header for a matrix to a file.
hPutHeader :: Handle -> Format -> Field -> Type -> IO ()

-- | Read the Matrix Market header from a file.
hGetHeader :: Handle -> IO (Format, Field, Type)

-- | The line-comment character (<tt>%</tt>).
commentChar :: Char

-- | Write a string as a Matrix Market file comment. This prepends each
--   line with '%' and then writes it out to the file.
hPutComments :: Handle -> String -> IO ()

-- | Read the comments from a file, stripping the leading '%' from each
--   line, until reaching a line that does not start with the comment
--   character.
hGetComments :: Handle -> IO (String)
instance Eq Type
instance Read Type
instance Show Type
instance Eq Format
instance Read Format
instance Show Format
instance Eq Field
instance Read Field
instance Show Field
