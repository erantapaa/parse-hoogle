-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Adds a module to gtk2hs allowing layouts to be defined using
reverse polish notation.
--   
--   Adds a module <a>Graphics.UI.Gtk.Layout.Rpn</a> to <tt>gtk2hs</tt>.
--   This module defines a type <tt>RPN</tt> for operators, which is an
--   instance of <a>Data.Monoid.Monoid</a> class. You can combine those
--   operators using reverse polish notation, as made popular by, say, HP
--   calculators. There are operators for layout elements, like expanders,
--   panes, boxes and notebooks, and for a few other widgets, like buttons
--   and labels. You can also insert any existing <tt>gtk2hs</tt> widget in
--   the stack.
@package gtk2hs-rpn
@version 0.2

module Graphics.UI.Gtk.Layout.Rpn

-- | <a>RPN</a> is the type of all operators, and encapsulates the
--   underline machinery. It instantiates <a>Monoid</a>, therefore we can
--   sequence operators in a list, and also create new operators by
--   <a>mconcat</a>ing others.
data RPN

-- | After we describe our widgets using a list of <a>RPN</a>s, we use
--   <a>widgetsFromRpn</a> to get them.
widgetsFromRpn :: [RPN] -> IO [Widget]

-- | Inserts your widget in the stack. Your widget needs to pass through
--   Gtk.toWidget before applying <a>rWID</a>.
rWID :: Widget -> RPN

-- | Insert the last widget inside a container. When that container grows,
--   the widget keeps its natural size, aligned in the center of the
--   container.
rCENTER :: RPN

-- | Same as <a>rCENTER</a>, but aligns to the left.
rLEFT :: RPN

-- | Same as <a>rCENTER</a>, but aligns to the right.
rRIGHT :: RPN

-- | Inserts an <tt>Graphics.UI.Gtk.Misc.Arrow.Arrow</tt> in the stack.
rARROW :: ArrowType -> RPN

-- | Sets the last widget to always keep the aspect ratio of its original
--   size requisition.
rASPECT :: RPN

-- | Inserts a button into the stack, after a
--   <tt>Graphics.UI.Gtk.General.StockItems.StockId</tt> and an <tt>IO
--   ()</tt> to be called when it is clicked.
rBUTTON :: StockId -> IO () -> RPN

-- | Packs the last widget in an
--   <tt>Graphics.UI.Gtk.Layout.Expander.Expander</tt>, allowing the user
--   to hide or show that widget under a label.
rEXPANDER :: String -> RPN

-- | Inserts a color chooser button, after an initial
--   <tt>Graphics.UI.Gtk.Gdk.GC.Color</tt> and a <tt>Color -&gt; IO ()</tt>
--   to be called when a new color is choosen.
rCOLOR :: Color -> (Color -> IO ()) -> RPN

-- | Inserts a
--   <tt>Graphics.UI.Gtk.Selectors.FileChooserButton.FileChooserButton</tt>
--   after a <tt><tt>System.IO.FilePath</tt> -&gt; IO ()</tt> to be called
--   when a file is choosen by the user. (This is not working since
--   <tt>gtk2hs</tt> do not yet support the <tt><a>file-set</a></tt> signal
--   for this widget.)
rFILE :: FileChooserAction -> RPN

-- | Inserts a font chooser button after a <tt>String -&gt; IO ()</tt> to
--   be called when a new font is choosen.
rFONT :: String -> (String -> IO ()) -> RPN

-- | Frames the last widget, adding a label.
rFRAME :: String -> RPN
rHBOX :: [Packing] -> RPN

-- | After a list of <tt>Graphics.UI.Gtk.Abstract.Box.Packing</tt> styles,
--   <a>rHBOX</a> and <a>rVBOX</a> pack the last widgets respectively in an
--   horizontal or vertical box, as many as there are styles in that list.
--   Do not use them to pack buttons, instead use <a>rHBBOX</a> and
--   <a>rVBBOX</a>.
rVBOX :: [Packing] -> RPN
rHBBOX :: (Integral n) => n -> RPN

-- | After a number <tt>n</tt>, <a>rHBBOX</a> and <a>rVBBOX</a> pack the
--   last <tt>n</tt> widgets respectively in an horizontal or vertical box.
--   Widgets are supposed to be buttons.
rVBBOX :: (Integral n) => n -> RPN
rHPANE :: (Bool, Bool) -> RPN

-- | <a>rHPANE</a> and <a>rVPANE</a> create, respectively, horizontal and
--   vertical <tt>Graphics.UI.Gtk.Abstract.Paned.Paned</tt>s. <tt>Bool</tt>
--   parameters says whether left and right panes are allowed to expand
--   when the containing <tt>Paned</tt> widget grows.
rVPANE :: (Bool, Bool) -> RPN
rHSCALE :: (Double, Double) -> (Double -> IO ()) -> RPN

-- | <a>rHSCALE</a> and <a>rVSCALE</a> create, respectively, horizontal and
--   vertical <tt>Graphics.UI.Gtk.Abstract.Scale.Scale</tt>s, after a
--   <tt>(Double,Double)</tt> interval and a <tt>Double -&gt; IO ()</tt> to
--   be called when the value in the <tt>Scale</tt> changes.
rVSCALE :: (Double, Double) -> (Double -> IO ()) -> RPN
rHSEPARATOR :: RPN

-- | <a>rHSEPARATOR</a> and <a>rVSEPARATOR</a> insert, respectively,
--   horizontal and vertical <tt>Graphics.UI.Gtk.Abstract.Separator</tt>s
--   in the stack.
rVSEPARATOR :: RPN

-- | <a>rIMAGE</a> takes a <tt>System.IO.FilePath</tt> to an image and
--   inserts a widget showing that image in the stack.
rIMAGE :: FilePath -> RPN

-- | <a>rLABEL</a> inserts a <tt>Graphics.UI.Gtk.Display.Label.Label</tt>
--   in the stack, after a <tt>String</tt>. This <tt>String</tt> is
--   supposed to be <tt>Pango</tt> <a>Graphics.UI.Gtk.Pango.Markup</a>.
rLABEL :: String -> RPN

-- | <a>rNOTEBOOK</a> takes a list of <tt>String</tt> labels and add
--   widgets from the stack to a
--   <tt>Graphics.UI.Gtk.Layout.Notebook.Notebook</tt>, as many as the
--   labels provided.
rNOTEBOOK :: [String] -> RPN

-- | <a>rSCROLL</a> packs the last widget in a container with horizontal
--   and vertical scroll bars.
rSCROLL :: RPN

-- | <a>rSOCKET</a> allows inserting a foreign (from other program) widget
--   inside the stack, given its
--   <tt>Graphics.UI.Gtk.Embedding.Socket.NativeWindowId</tt>.
rSOCKET :: NativeWindowId -> RPN

-- | <a>rSPIN</a> creates a
--   <tt>Graphics.UI.Gtk.Entry.SpinButton.SpinButton</tt> after a
--   <tt>(Double,Double)</tt> interval and a <tt>Double -&gt; IO ()</tt> to
--   be called when the value in the <tt>SpinButton</tt> changes.
rSPIN :: (Double, Double) -> (Double -> IO ()) -> RPN

-- | <a>rTEXT</a> creates a text view after a given buffer, which shall be
--   an instance of
--   <tt>Graphics.UI.Gtk.Multiline.TextBuffer.TextBufferClass</tt>.
rTEXT :: (TextBufferClass b) => b -> RPN

-- | <a>rMAIN</a> packs the last widget in a main window, given its title.
rMAIN :: String -> RPN
