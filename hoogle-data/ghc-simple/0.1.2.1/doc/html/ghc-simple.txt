-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simplified interface to the GHC API.
--   
@package ghc-simple
@version 0.1.2.1


-- | Facilities for using a custom GHC.Prim interface.
--   
--   The simplest(?) way to use this is to generate primop info using the
--   <tt>genprimopcode</tt> program from GHC, making any desired changes to
--   those files, and passing the <tt>primOpInfo</tt> and
--   <tt>primOpStrictness</tt> functions defined therein as the
--   <tt>cfgCustomPrimIface</tt> member of your config.
--   
--   Your strictness and info functions need to support all the primops
--   exported by the GHC version in use, making code written for this
--   interface rather less portable than code using the rest of
--   <tt>ghc-simple</tt>.
--   
--   This functionality is probably what you want if you are making a cross
--   compiler, to prevent the types of GHC primops from changing depending
--   on the compiler host platform.
--   
--   If you are *not* making a cross compiler, chances are you will not
--   want to touch this with a ten foot pole.
module Language.Haskell.GHC.Simple.PrimIface
data PrimOp :: *
CharGtOp :: PrimOp
CharGeOp :: PrimOp
CharEqOp :: PrimOp
CharNeOp :: PrimOp
CharLtOp :: PrimOp
CharLeOp :: PrimOp
OrdOp :: PrimOp
IntAddOp :: PrimOp
IntSubOp :: PrimOp
IntMulOp :: PrimOp
IntMulMayOfloOp :: PrimOp
IntQuotOp :: PrimOp
IntRemOp :: PrimOp
IntQuotRemOp :: PrimOp
AndIOp :: PrimOp
OrIOp :: PrimOp
XorIOp :: PrimOp
NotIOp :: PrimOp
IntNegOp :: PrimOp
IntAddCOp :: PrimOp
IntSubCOp :: PrimOp
IntGtOp :: PrimOp
IntGeOp :: PrimOp
IntEqOp :: PrimOp
IntNeOp :: PrimOp
IntLtOp :: PrimOp
IntLeOp :: PrimOp
ChrOp :: PrimOp
Int2WordOp :: PrimOp
Int2FloatOp :: PrimOp
Int2DoubleOp :: PrimOp
Word2FloatOp :: PrimOp
Word2DoubleOp :: PrimOp
ISllOp :: PrimOp
ISraOp :: PrimOp
ISrlOp :: PrimOp
WordAddOp :: PrimOp
WordAdd2Op :: PrimOp
WordSubOp :: PrimOp
WordMulOp :: PrimOp
WordMul2Op :: PrimOp
WordQuotOp :: PrimOp
WordRemOp :: PrimOp
WordQuotRemOp :: PrimOp
WordQuotRem2Op :: PrimOp
AndOp :: PrimOp
OrOp :: PrimOp
XorOp :: PrimOp
NotOp :: PrimOp
SllOp :: PrimOp
SrlOp :: PrimOp
Word2IntOp :: PrimOp
WordGtOp :: PrimOp
WordGeOp :: PrimOp
WordEqOp :: PrimOp
WordNeOp :: PrimOp
WordLtOp :: PrimOp
WordLeOp :: PrimOp
PopCnt8Op :: PrimOp
PopCnt16Op :: PrimOp
PopCnt32Op :: PrimOp
PopCnt64Op :: PrimOp
PopCntOp :: PrimOp
BSwap16Op :: PrimOp
BSwap32Op :: PrimOp
BSwap64Op :: PrimOp
BSwapOp :: PrimOp
Narrow8IntOp :: PrimOp
Narrow16IntOp :: PrimOp
Narrow32IntOp :: PrimOp
Narrow8WordOp :: PrimOp
Narrow16WordOp :: PrimOp
Narrow32WordOp :: PrimOp
DoubleGtOp :: PrimOp
DoubleGeOp :: PrimOp
DoubleEqOp :: PrimOp
DoubleNeOp :: PrimOp
DoubleLtOp :: PrimOp
DoubleLeOp :: PrimOp
DoubleAddOp :: PrimOp
DoubleSubOp :: PrimOp
DoubleMulOp :: PrimOp
DoubleDivOp :: PrimOp
DoubleNegOp :: PrimOp
Double2IntOp :: PrimOp
Double2FloatOp :: PrimOp
DoubleExpOp :: PrimOp
DoubleLogOp :: PrimOp
DoubleSqrtOp :: PrimOp
DoubleSinOp :: PrimOp
DoubleCosOp :: PrimOp
DoubleTanOp :: PrimOp
DoubleAsinOp :: PrimOp
DoubleAcosOp :: PrimOp
DoubleAtanOp :: PrimOp
DoubleSinhOp :: PrimOp
DoubleCoshOp :: PrimOp
DoubleTanhOp :: PrimOp
DoublePowerOp :: PrimOp
DoubleDecode_2IntOp :: PrimOp
FloatGtOp :: PrimOp
FloatGeOp :: PrimOp
FloatEqOp :: PrimOp
FloatNeOp :: PrimOp
FloatLtOp :: PrimOp
FloatLeOp :: PrimOp
FloatAddOp :: PrimOp
FloatSubOp :: PrimOp
FloatMulOp :: PrimOp
FloatDivOp :: PrimOp
FloatNegOp :: PrimOp
Float2IntOp :: PrimOp
FloatExpOp :: PrimOp
FloatLogOp :: PrimOp
FloatSqrtOp :: PrimOp
FloatSinOp :: PrimOp
FloatCosOp :: PrimOp
FloatTanOp :: PrimOp
FloatAsinOp :: PrimOp
FloatAcosOp :: PrimOp
FloatAtanOp :: PrimOp
FloatSinhOp :: PrimOp
FloatCoshOp :: PrimOp
FloatTanhOp :: PrimOp
FloatPowerOp :: PrimOp
Float2DoubleOp :: PrimOp
FloatDecode_IntOp :: PrimOp
NewArrayOp :: PrimOp
SameMutableArrayOp :: PrimOp
ReadArrayOp :: PrimOp
WriteArrayOp :: PrimOp
SizeofArrayOp :: PrimOp
SizeofMutableArrayOp :: PrimOp
IndexArrayOp :: PrimOp
UnsafeFreezeArrayOp :: PrimOp
UnsafeThawArrayOp :: PrimOp
CopyArrayOp :: PrimOp
CopyMutableArrayOp :: PrimOp
CloneArrayOp :: PrimOp
CloneMutableArrayOp :: PrimOp
FreezeArrayOp :: PrimOp
ThawArrayOp :: PrimOp
CasArrayOp :: PrimOp
NewByteArrayOp_Char :: PrimOp
NewPinnedByteArrayOp_Char :: PrimOp
NewAlignedPinnedByteArrayOp_Char :: PrimOp
ByteArrayContents_Char :: PrimOp
SameMutableByteArrayOp :: PrimOp
UnsafeFreezeByteArrayOp :: PrimOp
SizeofByteArrayOp :: PrimOp
SizeofMutableByteArrayOp :: PrimOp
IndexByteArrayOp_Char :: PrimOp
IndexByteArrayOp_WideChar :: PrimOp
IndexByteArrayOp_Int :: PrimOp
IndexByteArrayOp_Word :: PrimOp
IndexByteArrayOp_Addr :: PrimOp
IndexByteArrayOp_Float :: PrimOp
IndexByteArrayOp_Double :: PrimOp
IndexByteArrayOp_StablePtr :: PrimOp
IndexByteArrayOp_Int8 :: PrimOp
IndexByteArrayOp_Int16 :: PrimOp
IndexByteArrayOp_Int32 :: PrimOp
IndexByteArrayOp_Int64 :: PrimOp
IndexByteArrayOp_Word8 :: PrimOp
IndexByteArrayOp_Word16 :: PrimOp
IndexByteArrayOp_Word32 :: PrimOp
IndexByteArrayOp_Word64 :: PrimOp
ReadByteArrayOp_Char :: PrimOp
ReadByteArrayOp_WideChar :: PrimOp
ReadByteArrayOp_Int :: PrimOp
ReadByteArrayOp_Word :: PrimOp
ReadByteArrayOp_Addr :: PrimOp
ReadByteArrayOp_Float :: PrimOp
ReadByteArrayOp_Double :: PrimOp
ReadByteArrayOp_StablePtr :: PrimOp
ReadByteArrayOp_Int8 :: PrimOp
ReadByteArrayOp_Int16 :: PrimOp
ReadByteArrayOp_Int32 :: PrimOp
ReadByteArrayOp_Int64 :: PrimOp
ReadByteArrayOp_Word8 :: PrimOp
ReadByteArrayOp_Word16 :: PrimOp
ReadByteArrayOp_Word32 :: PrimOp
ReadByteArrayOp_Word64 :: PrimOp
WriteByteArrayOp_Char :: PrimOp
WriteByteArrayOp_WideChar :: PrimOp
WriteByteArrayOp_Int :: PrimOp
WriteByteArrayOp_Word :: PrimOp
WriteByteArrayOp_Addr :: PrimOp
WriteByteArrayOp_Float :: PrimOp
WriteByteArrayOp_Double :: PrimOp
WriteByteArrayOp_StablePtr :: PrimOp
WriteByteArrayOp_Int8 :: PrimOp
WriteByteArrayOp_Int16 :: PrimOp
WriteByteArrayOp_Int32 :: PrimOp
WriteByteArrayOp_Int64 :: PrimOp
WriteByteArrayOp_Word8 :: PrimOp
WriteByteArrayOp_Word16 :: PrimOp
WriteByteArrayOp_Word32 :: PrimOp
WriteByteArrayOp_Word64 :: PrimOp
CopyByteArrayOp :: PrimOp
CopyMutableByteArrayOp :: PrimOp
CopyByteArrayToAddrOp :: PrimOp
CopyMutableByteArrayToAddrOp :: PrimOp
CopyAddrToByteArrayOp :: PrimOp
SetByteArrayOp :: PrimOp
CasByteArrayOp_Int :: PrimOp
FetchAddByteArrayOp_Int :: PrimOp
NewArrayArrayOp :: PrimOp
SameMutableArrayArrayOp :: PrimOp
UnsafeFreezeArrayArrayOp :: PrimOp
SizeofArrayArrayOp :: PrimOp
SizeofMutableArrayArrayOp :: PrimOp
IndexArrayArrayOp_ByteArray :: PrimOp
IndexArrayArrayOp_ArrayArray :: PrimOp
ReadArrayArrayOp_ByteArray :: PrimOp
ReadArrayArrayOp_MutableByteArray :: PrimOp
ReadArrayArrayOp_ArrayArray :: PrimOp
ReadArrayArrayOp_MutableArrayArray :: PrimOp
WriteArrayArrayOp_ByteArray :: PrimOp
WriteArrayArrayOp_MutableByteArray :: PrimOp
WriteArrayArrayOp_ArrayArray :: PrimOp
WriteArrayArrayOp_MutableArrayArray :: PrimOp
CopyArrayArrayOp :: PrimOp
CopyMutableArrayArrayOp :: PrimOp
AddrAddOp :: PrimOp
AddrSubOp :: PrimOp
AddrRemOp :: PrimOp
Addr2IntOp :: PrimOp
Int2AddrOp :: PrimOp
AddrGtOp :: PrimOp
AddrGeOp :: PrimOp
AddrEqOp :: PrimOp
AddrNeOp :: PrimOp
AddrLtOp :: PrimOp
AddrLeOp :: PrimOp
IndexOffAddrOp_Char :: PrimOp
IndexOffAddrOp_WideChar :: PrimOp
IndexOffAddrOp_Int :: PrimOp
IndexOffAddrOp_Word :: PrimOp
IndexOffAddrOp_Addr :: PrimOp
IndexOffAddrOp_Float :: PrimOp
IndexOffAddrOp_Double :: PrimOp
IndexOffAddrOp_StablePtr :: PrimOp
IndexOffAddrOp_Int8 :: PrimOp
IndexOffAddrOp_Int16 :: PrimOp
IndexOffAddrOp_Int32 :: PrimOp
IndexOffAddrOp_Int64 :: PrimOp
IndexOffAddrOp_Word8 :: PrimOp
IndexOffAddrOp_Word16 :: PrimOp
IndexOffAddrOp_Word32 :: PrimOp
IndexOffAddrOp_Word64 :: PrimOp
ReadOffAddrOp_Char :: PrimOp
ReadOffAddrOp_WideChar :: PrimOp
ReadOffAddrOp_Int :: PrimOp
ReadOffAddrOp_Word :: PrimOp
ReadOffAddrOp_Addr :: PrimOp
ReadOffAddrOp_Float :: PrimOp
ReadOffAddrOp_Double :: PrimOp
ReadOffAddrOp_StablePtr :: PrimOp
ReadOffAddrOp_Int8 :: PrimOp
ReadOffAddrOp_Int16 :: PrimOp
ReadOffAddrOp_Int32 :: PrimOp
ReadOffAddrOp_Int64 :: PrimOp
ReadOffAddrOp_Word8 :: PrimOp
ReadOffAddrOp_Word16 :: PrimOp
ReadOffAddrOp_Word32 :: PrimOp
ReadOffAddrOp_Word64 :: PrimOp
WriteOffAddrOp_Char :: PrimOp
WriteOffAddrOp_WideChar :: PrimOp
WriteOffAddrOp_Int :: PrimOp
WriteOffAddrOp_Word :: PrimOp
WriteOffAddrOp_Addr :: PrimOp
WriteOffAddrOp_Float :: PrimOp
WriteOffAddrOp_Double :: PrimOp
WriteOffAddrOp_StablePtr :: PrimOp
WriteOffAddrOp_Int8 :: PrimOp
WriteOffAddrOp_Int16 :: PrimOp
WriteOffAddrOp_Int32 :: PrimOp
WriteOffAddrOp_Int64 :: PrimOp
WriteOffAddrOp_Word8 :: PrimOp
WriteOffAddrOp_Word16 :: PrimOp
WriteOffAddrOp_Word32 :: PrimOp
WriteOffAddrOp_Word64 :: PrimOp
NewMutVarOp :: PrimOp
ReadMutVarOp :: PrimOp
WriteMutVarOp :: PrimOp
SameMutVarOp :: PrimOp
AtomicModifyMutVarOp :: PrimOp
CasMutVarOp :: PrimOp
CatchOp :: PrimOp
RaiseOp :: PrimOp
RaiseIOOp :: PrimOp
MaskAsyncExceptionsOp :: PrimOp
MaskUninterruptibleOp :: PrimOp
UnmaskAsyncExceptionsOp :: PrimOp
MaskStatus :: PrimOp
AtomicallyOp :: PrimOp
RetryOp :: PrimOp
CatchRetryOp :: PrimOp
CatchSTMOp :: PrimOp
Check :: PrimOp
NewTVarOp :: PrimOp
ReadTVarOp :: PrimOp
ReadTVarIOOp :: PrimOp
WriteTVarOp :: PrimOp
SameTVarOp :: PrimOp
NewMVarOp :: PrimOp
TakeMVarOp :: PrimOp
TryTakeMVarOp :: PrimOp
PutMVarOp :: PrimOp
TryPutMVarOp :: PrimOp
ReadMVarOp :: PrimOp
TryReadMVarOp :: PrimOp
SameMVarOp :: PrimOp
IsEmptyMVarOp :: PrimOp
DelayOp :: PrimOp
WaitReadOp :: PrimOp
WaitWriteOp :: PrimOp
ForkOp :: PrimOp
ForkOnOp :: PrimOp
KillThreadOp :: PrimOp
YieldOp :: PrimOp
MyThreadIdOp :: PrimOp
LabelThreadOp :: PrimOp
IsCurrentThreadBoundOp :: PrimOp
NoDuplicateOp :: PrimOp
ThreadStatusOp :: PrimOp
MkWeakOp :: PrimOp
MkWeakNoFinalizerOp :: PrimOp
AddCFinalizerToWeakOp :: PrimOp
DeRefWeakOp :: PrimOp
FinalizeWeakOp :: PrimOp
TouchOp :: PrimOp
MakeStablePtrOp :: PrimOp
DeRefStablePtrOp :: PrimOp
EqStablePtrOp :: PrimOp
MakeStableNameOp :: PrimOp
EqStableNameOp :: PrimOp
StableNameToIntOp :: PrimOp
ReallyUnsafePtrEqualityOp :: PrimOp
ParOp :: PrimOp
SparkOp :: PrimOp
SeqOp :: PrimOp
GetSparkOp :: PrimOp
NumSparks :: PrimOp
ParGlobalOp :: PrimOp
ParLocalOp :: PrimOp
ParAtOp :: PrimOp
ParAtAbsOp :: PrimOp
ParAtRelOp :: PrimOp
ParAtForNowOp :: PrimOp
DataToTagOp :: PrimOp
TagToEnumOp :: PrimOp
AddrToAnyOp :: PrimOp
MkApUpd0_Op :: PrimOp
NewBCOOp :: PrimOp
UnpackClosureOp :: PrimOp
GetApStackValOp :: PrimOp
GetCCSOfOp :: PrimOp
GetCurrentCCSOp :: PrimOp
TraceEventOp :: PrimOp
TraceMarkerOp :: PrimOp
VecBroadcastOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecPackOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecUnpackOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecInsertOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecAddOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecSubOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecMulOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecDivOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecQuotOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecRemOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecNegOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecIndexByteArrayOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecReadByteArrayOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecWriteByteArrayOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecIndexOffAddrOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecReadOffAddrOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecWriteOffAddrOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecIndexScalarByteArrayOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecReadScalarByteArrayOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecWriteScalarByteArrayOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecIndexScalarOffAddrOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecReadScalarOffAddrOp :: PrimOpVecCat -> Length -> Width -> PrimOp
VecWriteScalarOffAddrOp :: PrimOpVecCat -> Length -> Width -> PrimOp
PrefetchByteArrayOp3 :: PrimOp
PrefetchMutableByteArrayOp3 :: PrimOp
PrefetchAddrOp3 :: PrimOp
PrefetchByteArrayOp2 :: PrimOp
PrefetchMutableByteArrayOp2 :: PrimOp
PrefetchAddrOp2 :: PrimOp
PrefetchByteArrayOp1 :: PrimOp
PrefetchMutableByteArrayOp1 :: PrimOp
PrefetchAddrOp1 :: PrimOp
PrefetchByteArrayOp0 :: PrimOp
PrefetchMutableByteArrayOp0 :: PrimOp
PrefetchAddrOp0 :: PrimOp
data PrimOpInfo
Dyadic :: OccName -> Type -> PrimOpInfo
Monadic :: OccName -> Type -> PrimOpInfo
Compare :: OccName -> Type -> PrimOpInfo
GenPrimOp :: OccName -> [TyVar] -> [Type] -> Type -> PrimOpInfo

-- | Create a general <a>PrimOpInfo</a>. Needed by GHC-generated primop
--   info includes.
mkGenPrimOp :: FastString -> [TyVar] -> [Type] -> Type -> PrimOpInfo

-- | Create a <a>PrimOpInfo</a> for dyadic, monadic and compare primops.
--   Needed by GHC-generated primop info includes.
mkDyadic :: FastString -> Type -> PrimOpInfo

-- | Create a <a>PrimOpInfo</a> for dyadic, monadic and compare primops.
--   Needed by GHC-generated primop info includes.
mkMonadic :: FastString -> Type -> PrimOpInfo

-- | Create a <a>PrimOpInfo</a> for dyadic, monadic and compare primops.
--   Needed by GHC-generated primop info includes.
mkCompare :: FastString -> Type -> PrimOpInfo

-- | Module interface for <tt>GHC.Prim</tt>, with the given function
--   applied to each primop.
primIface :: (PrimOp -> PrimOpInfo) -> (PrimOp -> Arity -> StrictSig) -> ModIface

-- | Fix primop types in the name cache.
fixPrimopTypes :: (PrimOp -> PrimOpInfo) -> (PrimOp -> Arity -> StrictSig) -> HscEnv -> IO ()


-- | Config, input and output types for the simplified GHC API.
module Language.Haskell.GHC.Simple.Types

-- | Any type we can generate intermediate code for.
class Compile a
toCode :: Compile a => ModSummary -> Ghc a

-- | GHC pipeline configuration, parameterized over the intermediate code
--   produced by the pipeline.
data CompConfig a

-- | Default configuration.
defaultConfig :: Compile a => CompConfig a

-- | GHC command line dynamic flags to control the Haskell to STG
--   compilation pipeline. For instance, passing <tt>["-O2",
--   "-DHELLO"]</tt> here is equivalent to passing <tt>-O2 -DHELLO</tt> to
--   the <tt>ghc</tt> binary.
--   
--   Note that flags set here are overridden by any changes to
--   <a>DynFlags</a> performed by <a>cfgUpdateDynFlags</a>, and that
--   '--make' mode is always in effect.
--   
--   Default: <tt>[]</tt>
cfgGhcFlags :: CompConfig a -> [String]

-- | If file or module names are found among the <a>cfgGhcFlags</a>, should
--   they be used as targets, in addition to any targets given by other
--   arguments to <tt>withStg</tt> et al?
--   
--   Default: <tt>True</tt>
cfgUseTargetsFromFlags :: CompConfig a -> Bool

-- | Modify the dynamic flags governing the compilation process. Changes
--   made here take precedence over any flags passed through
--   <a>cfgGhcFlags</a>.
--   
--   Default: <tt>id</tt>
cfgUpdateDynFlags :: CompConfig a -> DynFlags -> DynFlags

-- | Path to GHC's library directory. If <a>Nothing</a>, the library
--   directory of the system's default GHC compiler will be used.
--   
--   Default: <tt>Nothing</tt>
cfgGhcLibDir :: CompConfig a -> Maybe FilePath

-- | Use GHC's standard logger to log errors and warnings to the command
--   line? Errors and warnings are always collected and returned,
--   regardless of the value of this setting.
--   
--   Output other than errors and warnings (dumps, etc.) are logged using
--   the standard logger by default. For finer control over logging
--   behavior, you should override <a>log_action</a> in
--   <a>cfgUpdateDynFlags</a>.
--   
--   Default: <tt>False</tt>
cfgUseGhcErrorLogger :: CompConfig a -> Bool

-- | Use a custom interface for <tt>GHC.Prim</tt>. This is useful if you
--   want to, for instance, compile to a 32 bit target architecture on a 64
--   bit host.
--   
--   For more information, see
--   <a>Language.Haskell.GHC.Simple.PrimIface</a>.
--   
--   Default: <tt>Nothing</tt>
cfgCustomPrimIface :: CompConfig a -> Maybe (PrimOp -> PrimOpInfo, PrimOp -> Arity -> StrictSig)

-- | Use a custom GHC pipeline to generate intermediate code. Useful if the
--   provided instances for <tt>[StgBinding]</tt> etc. don't quite do what
--   you want them to. See <a>Language.Haskell.GHC.Simple.Impl</a> for more
--   information about custom pipelines.
--   
--   Default: <tt>toCode</tt>
cfgGhcPipeline :: CompConfig a -> ModSummary -> Ghc a

-- | Compiler output and metadata for a given module.
data CompiledModule a
CompiledModule :: ModSummary -> String -> String -> Bool -> Bool -> Maybe FilePath -> FilePath -> a -> CompiledModule a

-- | <a>ModSummary</a> for the module, as given by GHC.
modSummary :: CompiledModule a -> ModSummary

-- | String representation of the module's name, not qualified with a
--   package key. <a>ModuleName</a> representation can be obtained from the
--   module's <tt>stgModSummary</tt>.
modName :: CompiledModule a -> String

-- | String representation of the module's package key. <tt>PackageKey</tt>
--   representation can be obtained from the module's
--   <tt>stgModSummary</tt>.
modPackageKey :: CompiledModule a -> String

-- | Is this module a compilation target (as opposed to a dependency of
--   one)?
modIsTarget :: CompiledModule a -> Bool

-- | Was the module compiler from a <tt>hs-boot</tt> file?
modSourceIsHsBoot :: CompiledModule a -> Bool

-- | The Haskell source the module was compiled from, if any.
modSourceFile :: CompiledModule a -> Maybe FilePath

-- | Interface file corresponding to this module.
modInterfaceFile :: CompiledModule a -> FilePath

-- | Module data generated by compilation; usually bindings of some kind.
modCompiledModule :: CompiledModule a -> a

-- | Result of a compilation.
data CompResult a
Success :: a -> [Warning] -> DynFlags -> CompResult a

-- | Result of the compilation.
compResult :: CompResult a -> a

-- | Warnings that occurred during compilation.
compWarnings :: CompResult a -> [Warning]

-- | Initial <a>DynFlags</a> used by this compilation, collected from
--   <tt>Config</tt> data.
compDynFlags :: CompResult a -> DynFlags
Failure :: [Error] -> [Warning] -> CompResult a

-- | Errors that occurred during compilation.
compErrors :: CompResult a -> [Error]

-- | Warnings that occurred during compilation.
compWarnings :: CompResult a -> [Warning]

-- | A GHC error message.
data Error
Error :: SrcSpan -> String -> String -> Error

-- | Where did the error occur?
errorSpan :: Error -> SrcSpan

-- | Description of the error.
errorMessage :: Error -> String

-- | More verbose description of the error.
errorExtraInfo :: Error -> String

-- | A GHC warning.
data Warning
Warning :: SrcSpan -> String -> Warning

-- | Where did the warning occur?
warnSpan :: Warning -> SrcSpan

-- | What was the warning about?
warnMessage :: Warning -> String

-- | Does the given <a>CompResult</a> represent a successful compilation?
compSuccess :: CompResult a -> Bool


-- | Lower level building blocks for custom code generation.
module Language.Haskell.GHC.Simple.Impl

-- | Any type we can generate intermediate code for.
class Compile a
toCode :: Compile a => ModSummary -> Ghc a

-- | A minimal implementation of a <a>GhcMonad</a>. If you need a custom
--   monad, e.g., to maintain additional state consider wrapping this monad
--   or using <a>GhcT</a>.
data Ghc a :: * -> *
type StgModule = CompiledModule [StgBinding]

-- | Synonym for <a>PackageId</a>, to bridge a slight incompatibility
--   between GHC 7.8 and 7.10.
type PkgKey = PackageId

-- | Lift a computation from the <a>IO</a> monad.
liftIO :: MonadIO m => forall a. IO a -> m a

-- | Compile a <a>ModSummary</a> into a list of simplified
--   <a>StgBinding</a>s. See
--   <a>https://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/StgSynType</a>
--   for more information about STG and how it relates to core and Haskell.
toSimplifiedStg :: GhcMonad m => ModSummary -> m [StgBinding]

-- | Compile a <a>ModSummary</a> into a <a>CgGuts</a>, containing all
--   information about a core module that one could wish for.
toSimplifiedCore :: GhcMonad m => ModSummary -> m CgGuts

-- | Parse, typecheck and desugar a module. Returned <a>ModGuts</a>
--   structure is not simplified in any way.
toModGuts :: GhcMonad m => ModSummary -> m ModGuts

-- | Simplify a core module for code generation.
simplify :: GhcMonad m => ModGuts -> m CgGuts

-- | Prepare a core module for code generation.
prepare :: GhcMonad m => DynFlags -> ModSummary -> CgGuts -> m CoreProgram

-- | Turn a core module into a list of simplified STG bindings.
toStgBindings :: GhcMonad m => DynFlags -> ModSummary -> CoreProgram -> m [StgBinding]

-- | Compile a <a>ModSummary</a> into a module with metadata using a custom
--   compilation function.
toCompiledModule :: GhcMonad m => (ModSummary -> m a) -> ModSummary -> m (CompiledModule a)

-- | Package ID/key of a module.
modulePkgKey :: Module -> PkgKey

-- | String representation of a package ID/key.
pkgKeyString :: PkgKey -> String
instance Compile ModGuts
instance Compile CgGuts
instance Compile [StgBinding]


-- | Simplified interface to the GHC API.
module Language.Haskell.GHC.Simple

-- | Compile a list of targets and their dependencies into intermediate
--   code. Uses settings from the the default <a>CompConfig</a>.
compile :: Compile a => [String] -> IO (CompResult [CompiledModule a])

-- | Compile a list of targets and their dependencies using a custom
--   configuration.
compileWith :: Compile a => CompConfig a -> [String] -> IO (CompResult [CompiledModule a])

-- | Left fold over a list of compilation targets and their dependencies.
--   
--   Sometimes you don't just want a huge pile of intermediate code lying
--   around; chances are you either want to dump it to file or combine it
--   with some other intermediate code, without having to keep it all in
--   memory at the same time.
compileFold :: CompConfig b -> (a -> CompiledModule b -> IO a) -> a -> [String] -> IO (CompResult a)
type StgModule = CompiledModule [StgBinding]

-- | Obtain the dynamic flags and extra targets that would be used to
--   compile anything with the given config.
getDynFlagsForConfig :: CompConfig a -> IO (DynFlags, [String])

-- | A single node in a 'ModuleGraph. The nodes of the module graph are one
--   of:
--   
--   <ul>
--   <li>A regular Haskell source module</li>
--   <li>A hi-boot source module</li>
--   <li>An external-core source module</li>
--   </ul>
data ModSummary :: *
ModSummary :: Module -> HscSource -> ModLocation -> UTCTime -> Maybe UTCTime -> [Located (ImportDecl RdrName)] -> [Located (ImportDecl RdrName)] -> FilePath -> DynFlags -> Maybe StringBuffer -> ModSummary

-- | Identity of the module
ms_mod :: ModSummary -> Module

-- | The module source either plain Haskell, hs-boot or external core
ms_hsc_src :: ModSummary -> HscSource

-- | Location of the various files belonging to the module
ms_location :: ModSummary -> ModLocation

-- | Timestamp of source file
ms_hs_date :: ModSummary -> UTCTime

-- | Timestamp of object, if we have one
ms_obj_date :: ModSummary -> Maybe UTCTime

-- | Source imports of the module
ms_srcimps :: ModSummary -> [Located (ImportDecl RdrName)]

-- | Non-source imports of the module from the module *text*
ms_textual_imps :: ModSummary -> [Located (ImportDecl RdrName)]

-- | Filename of preprocessed source file
ms_hspp_file :: ModSummary -> FilePath

-- | Cached flags from <tt>OPTIONS</tt>, <tt>INCLUDE</tt> and
--   <tt>LANGUAGE</tt> pragmas in the modules source code
ms_hspp_opts :: ModSummary -> DynFlags

-- | The actual preprocessed source, if we have it
ms_hspp_buf :: ModSummary -> Maybe StringBuffer

-- | A ModGuts is carried through the compiler, accumulating stuff as it
--   goes There is only one ModGuts at any time, the one for the module
--   being compiled right now. Once it is compiled, a <a>ModIface</a> and
--   <a>ModDetails</a> are extracted and the ModGuts is discarded.
data ModGuts :: *
ModGuts :: SrictNotUnpackedModule -> IsBootInterface -> SrictNotUnpacked[AvailInfo] -> SrictNotUnpackedDependencies -> SrictNotUnpackedImportedMods -> SrictNotUnpackedNameSet -> SrictNotUnpackedBool -> SrictNotUnpackedGlobalRdrEnv -> SrictNotUnpackedFixityEnv -> SrictNotUnpacked[TyCon] -> SrictNotUnpacked[ClsInst] -> SrictNotUnpacked[FamInst] -> SrictNotUnpacked[PatSyn] -> SrictNotUnpacked[CoreRule] -> SrictNotUnpackedCoreProgram -> SrictNotUnpackedForeignStubs -> SrictNotUnpackedWarnings -> [Annotation] -> SrictNotUnpackedHpcInfo -> SrictNotUnpackedModBreaks -> SrictNotUnpacked[CoreVect] -> SrictNotUnpackedVectInfo -> InstEnv -> FamInstEnv -> SafeHaskellMode -> Bool -> [FilePath] -> ModGuts

-- | Module being compiled
mg_module :: ModGuts -> SrictNotUnpackedModule

-- | Whether it's an hs-boot module
mg_boot :: ModGuts -> IsBootInterface

-- | What it exports
mg_exports :: ModGuts -> SrictNotUnpacked[AvailInfo]

-- | What it depends on, directly or otherwise
mg_deps :: ModGuts -> SrictNotUnpackedDependencies

-- | Directly-imported modules; used to generate initialisation code
mg_dir_imps :: ModGuts -> SrictNotUnpackedImportedMods

-- | What the module needed (used in <a>mkIface</a>)
mg_used_names :: ModGuts -> SrictNotUnpackedNameSet

-- | Did we run a TH splice?
mg_used_th :: ModGuts -> SrictNotUnpackedBool

-- | Top-level lexical environment
mg_rdr_env :: ModGuts -> SrictNotUnpackedGlobalRdrEnv

-- | Fixities declared in this module ToDo: I'm unconvinced this is
--   actually used anywhere
mg_fix_env :: ModGuts -> SrictNotUnpackedFixityEnv

-- | TyCons declared in this module (includes TyCons for classes)
mg_tcs :: ModGuts -> SrictNotUnpacked[TyCon]

-- | Class instances declared in this module
mg_insts :: ModGuts -> SrictNotUnpacked[ClsInst]

-- | Family instances declared in this module
mg_fam_insts :: ModGuts -> SrictNotUnpacked[FamInst]

-- | Pattern synonyms declared in this module
mg_patsyns :: ModGuts -> SrictNotUnpacked[PatSyn]

-- | Before the core pipeline starts, contains See Note [Overall plumbing
--   for rules] in Rules.lhs
mg_rules :: ModGuts -> SrictNotUnpacked[CoreRule]

-- | Bindings for this module
mg_binds :: ModGuts -> SrictNotUnpackedCoreProgram

-- | Foreign exports declared in this module
mg_foreign :: ModGuts -> SrictNotUnpackedForeignStubs

-- | Warnings declared in the module
mg_warns :: ModGuts -> SrictNotUnpackedWarnings

-- | Annotations declared in this module
mg_anns :: ModGuts -> [Annotation]

-- | Coverage tick boxes in the module
mg_hpc_info :: ModGuts -> SrictNotUnpackedHpcInfo

-- | Breakpoints for the module
mg_modBreaks :: ModGuts -> SrictNotUnpackedModBreaks

-- | Vectorisation declarations in this module (produced by desugarer &amp;
--   consumed by vectoriser)
mg_vect_decls :: ModGuts -> SrictNotUnpacked[CoreVect]

-- | Pool of vectorised declarations in the module
mg_vect_info :: ModGuts -> SrictNotUnpackedVectInfo

-- | Class instance environment from <i>home-package</i> modules (including
--   this one); c.f. <tt>tcg_inst_env</tt>
mg_inst_env :: ModGuts -> InstEnv

-- | Type-family instance environment for <i>home-package</i> modules
--   (including this one); c.f. <tt>tcg_fam_inst_env</tt>
mg_fam_inst_env :: ModGuts -> FamInstEnv

-- | Safe Haskell mode
mg_safe_haskell :: ModGuts -> SafeHaskellMode

-- | Do we need to trust our own package for Safe Haskell? See Note
--   [RnNames . Trust Own Package]
mg_trust_pkg :: ModGuts -> Bool

-- | dependencies from addDependentFile
mg_dependent_files :: ModGuts -> [FilePath]

-- | Synonym for <a>PackageId</a>, to bridge a slight incompatibility
--   between GHC 7.8 and 7.10.
type PkgKey = PackageId

-- | String representation of a package ID/key.
pkgKeyString :: PkgKey -> String

-- | Package ID/key of a module.
modulePkgKey :: Module -> PkgKey
