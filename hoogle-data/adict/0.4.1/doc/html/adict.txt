-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Approximate dictionary searching
--   
--   Approximate dictionary searching library.
@package adict
@version 0.4.1


-- | Alternative cost representation with individual cost components
--   divided into groups with respect to operation weights.
module NLP.Adict.CostDiv

-- | A Group describes a weight of some edit operation in which a character
--   satistying the predicate is involved. This data structure is meant to
--   collect all characters which determine the same operation weight.
data Group a
Filter :: (a -> Bool) -> Weight -> Group a

-- | The predicate determines which characters belong to the group.
predic :: Group a -> a -> Bool

-- | Weight of the edit operation in which a character satisfying the
--   predicate is involved.
weight :: Group a -> Weight

-- | Cost function with edit operations divided with respect to weight. Two
--   operations of the same type and with the same weight should be
--   assigned to the same group.
data CostDiv a
CostDiv :: [Group a] -> (a -> Weight) -> (a -> [Group a]) -> (Pos -> Weight) -> CostDiv a

-- | Cost of the character insertion divided into groups with respect to
--   operation weights.
insert :: CostDiv a -> [Group a]

-- | Cost of the character deletion.
delete :: CostDiv a -> a -> Weight

-- | Cost of the character substitution. For each source character there
--   can be a different list of groups involved.
subst :: CostDiv a -> a -> [Group a]

-- | Cost of each edit operation is multiplied by the position modifier.
--   For example, the cost of <tt>'a'</tt> character deletion on position
--   <tt>3</tt> is computed as <tt>delete 'a' * posMod 3</tt>.
posMod :: CostDiv a -> Pos -> Weight

-- | Default cost with all edit operations having the unit weight.
costDefault :: Eq a => CostDiv a

-- | Substition description for some unspecified source character.
type Sub a = Map Weight (Set a)

-- | Construct the substitution descrition from the list of (character
--   <tt>y</tt>, substition weight from <tt>x</tt> to <tt>y</tt>) pairs for
--   some unspecified character <tt>x</tt>. Characters will be grouped with
--   respect to weight.
mkSub :: Ord a => [(a, Weight)] -> Sub a

-- | Extract the list of groups (each group with unique weight) from the
--   substitution description.
unSub :: Ord a => Sub a -> [Group a]

-- | A susbtitution map which covers all substition operations.
type SubMap a = Map a (Sub a)

-- | Substitution description for the given character in the substitution
--   map. In other words, the function returns information how the input
--   character can be replaced with other characters from the alphabet.
subOn :: Ord a => a -> SubMap a -> Sub a

-- | Construct the substitution map from the list of (<tt>x</tt>,
--   <tt>y</tt>, weight of <tt>x -&gt; y</tt> substitution) tuples.
mkSubMap :: Ord a => [(a, a, Weight)] -> SubMap a

-- | Transform CostDiv to plain Cost function using the default weight
--   value for all operations unspecified in the input cost.
toCost :: Double -> CostDiv a -> Cost a

-- | Transform CostDiv to plain Cost function with default weight value set
--   to <tt>+Infinity</tt>.
toCostInf :: CostDiv a -> Cost a

module NLP.Adict.Dist

-- | Restricted generalized edit distance between two words with given cost
--   function.
editDist :: Cost a -> Word a -> Word a -> Weight


-- | This module re-exports main data types and functions from the adict
--   library.
module NLP.Adict

-- | A word parametrized with character type <tt>a</tt>.
type Word a = Vector a

-- | Position in a sentence.
type Pos = Int

-- | Cost of edit operation. It has to be a non-negative value!
type Weight = Double

-- | Cost represents a cost (or weight) of a symbol insertion, deletion or
--   substitution. It can depend on edit operation position and on symbol
--   values.
data Cost a
Cost :: (Pos -> a -> Weight) -> (Pos -> a -> Weight) -> (Pos -> a -> a -> Weight) -> Cost a
insert :: Cost a -> Pos -> a -> Weight
delete :: Cost a -> Pos -> a -> Weight
subst :: Cost a -> Pos -> a -> a -> Weight

-- | Simple cost function: all edit operations cost 1 unit.
costDefault :: Eq a => Cost a

-- | Find all words within a list with restricted generalized edit distance
--   from x lower or equall to k.
bruteSearch :: Cost a -> Double -> Word a -> [(Word a, b)] -> [(Word a, b, Double)]

-- | Find all words within a DAWG with restricted generalized edit distance
--   lower than or equal to a given threshold.
findAll :: (Enum a, Unbox w) => Cost a -> Double -> Word a -> DAWG a w b -> [([a], b, Double)]

-- | We could check, if CostDiv satisfies basic properties. On the other
--   hand, we do not do this for plain Cost function.
findNearest :: (Enum a, Unbox w) => CostDiv a -> Double -> Word a -> DAWG a w b -> Maybe ([a], b, Double)
