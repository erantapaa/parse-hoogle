-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Efficient pure ternary tree Sets and Maps
--   
--   Ternary trees are an efficient structure often used for storing
--   strings for fast lookups. This package implements a generic tree for
--   storing lists of Ord instances, and a specialised String
--   implementation which is about 30% faster than the generic version.
--   
--   An example program is provided what shows how to use the package as a
--   dictionary program for spell checking, and how it can be used to
--   serialise data with Don Stewart's Data.Binary package.
--   
--   From my testing, using the /usr/share/dict/words file on my system
--   (over 230,000 words), inserting all words, checking they all exist in
--   the tree, writing them to a binary file, reading them back in and
--   checking the read in result is the same as the original takes slightly
--   over 3 seconds using the StringSet. The written file is also slightly
--   smaller than the input (by over 40% in some cases).
--   
--   New in this version:
--   
--   <ul>
--   <li>Fixed Other-Modules cabal entry so Internal files were added.</li>
--   </ul>
--   
--   Â© 2009 by Alex Mason (<a>http://random.axman6.com/blog/</a>). BSD3
--   license.
@package TernaryTrees
@version 0.2.0.2

module Data.Map.StringMap

-- | StringMap v is ternary tree. It is commonly used for storing word
--   lists like dictionaries.
data StringMap v

-- | Inserts an entrie into a tree. Values with the same key will be
--   replaced with the newer value.
insert :: String -> v -> StringMap v -> StringMap v

-- | Quickly build a tree without an initial tree. This should be used to
--   create an initial tree, using insert there after.
singleton :: String -> v -> StringMap v

-- | Returns true if the <a>String</a> is a key in the TernaryMap.
member :: String -> StringMap v -> Bool

-- | Counts how many entries there are in the tree.
size :: StringMap v -> Int

-- | Creates a new tree from a list of <tt>strings</tt>
fromList :: [(String, v)] -> StringMap v
lookup :: String -> StringMap v -> Maybe v
(!) :: StringMap v -> String -> Maybe v
findWithDefault :: v -> String -> StringMap v -> v

-- | Inserts a new value into the tree with a given function that combines
--   the new value and the old value together to for a new entry.
--   
--   <pre>
--   insertWith f key newval (fromList [(notkey,val1),(key,oldval)]) == fromList [(notkey,val1),(key,f newval oldval)]
--   </pre>
insertWith :: (v -> v -> v) -> String -> v -> StringMap v -> StringMap v

-- | Inserts a new value into the tree with a given function that combines
--   the new value and the old value together to for a new entry.
--   
--   <pre>
--   insertWithKey f key newval (fromList [(notkey,val1),(key,oldval)]) == fromList [(notkey,val1),(key,f key newval oldval)]
--   </pre>
insertWithKey :: (String -> v -> v -> v) -> String -> v -> StringMap v -> StringMap v

-- | Returns a (sorted) list of all keys in the map.
keys :: StringMap v -> [String]

-- | Returns a (sorted) list of all keys in the map.
assocs :: StringMap v -> [(String, v)]

-- | Makes a list of all the values in the map.
elems :: StringMap v -> [v]

-- | Returns true if the map is empty.
null :: StringMap v -> Bool
instance Binary v => Binary (StringMap v)
instance Functor StringMap

module Data.Map.TernaryMap

-- | TernaryMap k v is ternary tree. It is commonly used for storing word
--   lists like dictionaries.
data TernaryMap k v

-- | Inserts an entrie into a tree. Values with the same key will be
--   replaced with the newer value.
insert :: Ord k => [k] -> v -> TernaryMap k v -> TernaryMap k v

-- | Quickly build a tree without an initial tree. This should be used to
--   create an initial tree, using insert there after.
singleton :: Ord k => [k] -> v -> TernaryMap k v

-- | Returns true if the `[k]` is a key in the TernaryMap.
member :: Ord k => [k] -> TernaryMap k v -> Bool

-- | Counts how many entries there are in the tree.
size :: TernaryMap k v -> Int

-- | Creates a new tree from a list of <tt>strings</tt>
fromList :: Ord k => [([k], v)] -> TernaryMap k v
lookup :: Ord k => [k] -> TernaryMap k v -> Maybe v
(!) :: Ord k => TernaryMap k v -> [k] -> Maybe v
findWithDefault :: Ord k => v -> [k] -> TernaryMap k v -> v

-- | Inserts a new value into the tree with a given function that combines
--   the new value and the old value together to for a new entry.
--   
--   <pre>
--   insertWith f key newval (fromList [(notkey,val1),(key,oldval)]) == fromList [(notkey,val1),(key,f newval oldval)]
--   </pre>
insertWith :: Ord k => (v -> v -> v) -> [k] -> v -> TernaryMap k v -> TernaryMap k v

-- | Inserts a new value into the tree with a given function that combines
--   the new value and the old value together to for a new entry.
--   
--   <pre>
--   insertWithKey f key newval (fromList [(notkey,val1),(key,oldval)]) == fromList [(notkey,val1),(key,f key newval oldval)]
--   </pre>
insertWithKey :: Ord k => ([k] -> v -> v -> v) -> [k] -> v -> TernaryMap k v -> TernaryMap k v

-- | Returns a (sorted) list of all keys in the map.
keys :: TernaryMap k v -> [[k]]

-- | Returns a (sorted) list of all keys in the map.
assocs :: TernaryMap k v -> [([k], v)]

-- | Makes a list of all the values in the map.
elems :: TernaryMap k v -> [v]

-- | Returns true if the map is empty.
null :: TernaryMap k v -> Bool
instance (Binary k, Binary v) => Binary (TernaryMap k v)
instance Functor (TernaryMap k)

module Data.Set.StringSet

-- | StringSet is ternary tree. It is commonly used for storing word lists
--   like dictionaries for spell checking etc.
data StringSet

-- | Inserts a new <a>String</a> element into a tree.
insert :: String -> StringSet -> StringSet

-- | Quickly build an initial tree.
singleton :: String -> StringSet

-- | Returns true if the string is in the StringSet
member :: String -> StringSet -> Bool

-- | Counts how many entries there are in the tree.
size :: StringSet -> Int

-- | Creates a new tree from a list of <tt>Strings</tt>
fromList :: [String] -> StringSet

-- | Returns true if the set is empty.
null :: StringSet -> Bool

-- | Returns a (sorted) list of all strings inserted into the set.
--   
--   <pre>
--   (elems . fromList) xs == (nub . sort) xs
--   </pre>
elems :: StringSet -> [String]

-- | An empty set.
empty :: StringSet
instance Binary StringSet

module Data.Set.TernarySet

-- | TernarySet a is ternary tree. It is commonly used for storing word
--   lists like dictionaries.
data TernarySet a

-- | Inserts an entries into a tree.
insert :: Ord a => [a] -> TernarySet a -> TernarySet a

-- | Quickly build a tree without an initial tree. This should be used to
--   create an initial tree, using insert there after.
singleton :: Ord a => [a] -> TernarySet a

-- | Returns true if the `[a]` is in the TernarySet
member :: Ord a => [a] -> TernarySet a -> Bool

-- | Counts how many entries there are in the tree.
size :: TernarySet a -> Int

-- | Creates a new tree from a list of <tt>strings</tt>
fromList :: Ord a => [[a]] -> TernarySet a

-- | Returns true if the set is empty.
null :: TernarySet a -> Bool

-- | Returns a (sorted) list of all elements inserted into the set.
elems :: TernarySet a -> [[a]]
instance Binary a => Binary (TernarySet a)
