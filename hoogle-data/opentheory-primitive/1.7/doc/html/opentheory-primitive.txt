-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell primitives used by OpenTheory packages
--   
@package opentheory-primitive
@version 1.7


module OpenTheory.Primitive.Test
assert :: String -> Bool -> IO ()
check :: Testable prop => String -> prop -> IO ()


module OpenTheory.Primitive.Random
data Random
bit :: Random -> Bool
split :: Random -> (Random, Random)
fromInt :: Int -> Random
instance Show Random
instance Arbitrary Random


module OpenTheory.Primitive.Natural
data Natural
shiftLeft :: Natural -> Natural -> Natural
shiftRight :: Natural -> Natural -> Natural
instance Eq Natural
instance Ord Natural
instance Arbitrary Natural
instance Bits Natural
instance Read Natural
instance Integral Natural
instance Enum Natural
instance Real Natural
instance Num Natural
instance Show Natural


module OpenTheory.Primitive.Byte
type Byte = Word8
and :: Byte -> Byte -> Byte
bit :: Byte -> Natural -> Bool
fromNatural :: Natural -> Byte
not :: Byte -> Byte
or :: Byte -> Byte -> Byte
shiftLeft :: Byte -> Natural -> Byte
shiftRight :: Byte -> Natural -> Byte
toNatural :: Byte -> Natural


module OpenTheory.Primitive.Word16
type Word16 = Word16
and :: Word16 -> Word16 -> Word16
bit :: Word16 -> Natural -> Bool
fromBytes :: Byte -> Byte -> Word16
fromNatural :: Natural -> Word16
not :: Word16 -> Word16
or :: Word16 -> Word16 -> Word16
shiftLeft :: Word16 -> Natural -> Word16
shiftRight :: Word16 -> Natural -> Word16
toBytes :: Word16 -> (Byte, Byte)
