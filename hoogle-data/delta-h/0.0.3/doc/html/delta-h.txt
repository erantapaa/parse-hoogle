-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Online entropy-based model of lexical category acquisition.
--   
--   Implementation of the model described in Grzegorz Chrupa≈Ça and Afra
--   Alishahi, Online Entropy-based Model of Lexical Category Acquisition,
--   CoNLL 2010
--   <a>http://www.lsv.uni-saarland.de/personalPages/gchrupala/papers/conll-2010.pdf</a>
@package delta-h
@version 0.0.3

module ListZipper
data ListZipper a
LZ :: [a] -> (Maybe a) -> [a] -> ListZipper a
focus :: ListZipper t -> Maybe t
left :: ListZipper t -> [t]
right :: ListZipper t -> [t]
reset :: ListZipper t -> ListZipper t
fromList :: [a] -> ListZipper a
toList :: ListZipper a -> [a]
next :: ListZipper a -> ListZipper a
atEnd :: ListZipper a -> Bool
at :: Monoid m => ListZipper m -> Int -> m
instance Show a => Show (ListZipper a)
instance Eq a => Eq (ListZipper a)
instance Ord a => Ord (ListZipper a)
instance Foldable ListZipper
instance Functor ListZipper

module Entropy.Features
features :: ListZipper String -> X
type X = Map Int (Map String Double)

module Reader
type Token = (String, String)
readcorpus :: String -> [[Token]]
readcorpusCoNLL :: String -> [[Token]]
format :: [[Token]] -> String
formatCoNLL :: [[Token]] -> String

module Entropy.Algorithm
cluster :: Bool -> ClusterSet (Int, String) -> [X (Int, String)] -> ClusterSet (Int, String)
clusterBeam :: Int -> Bool -> ClusterSet (Int, String) -> [X (Int, String)] -> ClusterSet (Int, String)
clusterToken :: Bool -> ClusterSet (Int, String) -> X (Int, String) -> [(Y, ClusterSet (Int, String))]

-- | labelToken: output a single label (from a closed set)
labelToken :: ClusterSet (Int, String) -> X (Int, String) -> Y
clusterWords :: [Int] -> ClusterSet (Int, String) -> [String] -> [String]
data ClusterSet x
CS :: Map Y Count -> !H -> Map Y (Map x Count) -> Map Y H -> !Count -> !Y -> ClusterSet x
countY :: ClusterSet x -> Map Y Count
hY :: ClusterSet x -> !H
countXY :: ClusterSet x -> Map Y (Map x Count)
hXY :: ClusterSet x -> Map Y H
countN :: ClusterSet x -> !Count
lastID :: ClusterSet x -> !Y
weightedhXY :: ClusterSet x -> Double
empty :: ClusterSet x
makeClusterSet :: Map Y (Map x Count) -> ClusterSet x
type X k = Map k Count
type Y = Int
type Count = Double
featIDs :: (Ord a, Ord b) => ClusterSet (a, b) -> [a]
predictX0 :: ClusterSet (Int, String) -> X (Int, String) -> [String]
predictX0Full :: ClusterSet (Int, String) -> X (Int, String) -> [String]
clusterLabelToX0 :: ClusterSet (Int, String) -> Y -> [String]
defocus :: X (Int, String) -> X (Int, String)
getX0 :: X (Int, String) -> String
examples :: [Int] -> [[Token]] -> [[X (Int, String)]]
display :: (Y, Map (Int, String) Double) -> String
getLabeler :: Bool -> Maybe FilePath -> FilePath -> IO ([String] -> [String])
instance Eq x => Eq (ClusterSet x)
instance Ord x => Ord (ClusterSet x)
instance Show x => Show (ClusterSet x)
instance (Ord x, Binary x) => Binary (ClusterSet x)
