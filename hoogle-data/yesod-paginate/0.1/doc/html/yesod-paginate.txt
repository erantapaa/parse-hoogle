-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Pagination for Yesod sites.
--   
--   Pagination for Yesod sites.
@package yesod-paginate
@version 0.1


-- | Provides a pagination subsite for Yesod.
--   
--   Route layout:
--   
--   <pre>
--   /           PaginateHomeR   GET
--   /#Int       PaginateStartR  GET
--   /#Int/#Int  PaginateR       GET
--   </pre>
--   
--   If no numbers are given, display the items starting from the beginning
--   with the default count. If one number is given, display the items
--   starting from that index with the default count. If two numbers are
--   given, the first one is the count and the second is the starting
--   index. (This is so the user can modify the end of the URL to move
--   forward in the pagination.)
module Yesod.Paginate
data Paginate master rep a
Paginate :: Int -> (Int -> Int -> GHandler (Paginate master rep a) master [a]) -> GHandler (Paginate master rep a) master Int -> (Int -> Int -> [a] -> GHandler (Paginate master rep a) master rep) -> Paginate master rep a

-- | How many items to show per page by default
pgnDefaultCount :: Paginate master rep a -> Int

-- | Get a certain count of items at a certain offset
pgnGetItems :: Paginate master rep a -> Int -> Int -> GHandler (Paginate master rep a) master [a]

-- | How many items there are in all
pgnItemCount :: Paginate master rep a -> GHandler (Paginate master rep a) master Int

-- | Render the items on a page given the count and offset
pgnDisplayItems :: Paginate master rep a -> Int -> Int -> [a] -> GHandler (Paginate master rep a) master rep
data PaginateRoute
PaginateHomeR :: PaginateRoute
PaginateStartR :: Int -> PaginateRoute
PaginateR :: Int -> Int -> PaginateRoute
defaultPaginate :: (YesodPersist master, PersistBackend (YesodDB master (GHandler (Paginate master rep a) master)), PersistEntity a) => Int -> [Filter a] -> [Order a] -> (Int -> Int -> [a] -> GHandler (Paginate master rep a) master rep) -> Paginate master rep a

-- | Link to the previous page.
prevLink :: Paginate master rep a -> Int -> Int -> Maybe (Route (Paginate master rep a))

-- | Link to the next page.
nextLink :: Paginate master rep a -> Int -> Int -> GHandler (Paginate master rep a) master (Maybe (Route (Paginate master rep a)))
instance Show PaginateRoute
instance Read PaginateRoute
instance Eq PaginateRoute
instance (Yesod master, HasReps rep) => YesodSubSite (Paginate master rep a) master
