-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Library for polling Tremulous servers
--   
--   A library for polling servers from the game Tremulous. Supports both
--   the released 1.1 version and the 1.2 Gameplay Preview commonly known
--   as GPP.
@package tremulous-query
@version 1.0.7

module Network.Tremulous.MicroTime
type MicroTime = Word64

-- | Get the current POSIX time from the system clock.
getMicroTime :: IO MicroTime
instance Storable CTimeval

module Network.Tremulous.SocketExtensions
ntohl :: Word32 -> Word32
htonl :: Word32 -> Word32
ntohs :: Word16 -> Word16
htons :: Word16 -> Word16
instance NFData SockAddr

module Network.Tremulous.StrictMaybe
data Maybe a
Nothing :: Maybe a
Just :: !a -> Maybe a
isJust :: Maybe a -> Bool
isNothing :: Maybe a -> Bool
fromMaybe :: a -> Maybe a -> a
maybe :: b -> (a -> b) -> Maybe a -> b
whenJust :: Monad m => Maybe t -> (t -> m ()) -> m ()
whileJust :: Monad m => a -> (a -> m (Maybe a)) -> m ()
instance Eq a => Eq (Maybe a)
instance Ord a => Ord (Maybe a)
instance Show a => Show (Maybe a)
instance Read a => Read (Maybe a)
instance Monad Maybe
instance Functor Maybe

module Network.Tremulous.ByteStringUtils
stripPrefix :: ByteString -> ByteString -> Maybe ByteString
maybeInt :: ByteString -> Maybe Int
splitlines :: ByteString -> [ByteString]
stripw :: ByteString -> ByteString
splitfilter :: Char -> ByteString -> [ByteString]
rebuild :: Int -> (Word8 -> ByteString -> (Word8, ByteString)) -> ByteString -> ByteString
rebuildC :: Int -> (Char -> ByteString -> (Char, ByteString)) -> ByteString -> ByteString

module Network.Tremulous.TupleReader
type TupleReader k v a = StateT [(k, v)] Maybe a
tupleReader :: TupleReader k v a -> [(k, v)] -> Maybe a
lookupDelete :: Eq k => k -> [(k, v)] -> (Maybe v, [(k, v)])
require :: Eq k => k -> TupleReader k v v
requireWith :: Eq k => (v -> Maybe a) -> k -> TupleReader k v a
optionWith :: Eq k => (v -> Maybe a) -> k -> TupleReader k v (Maybe a)
option :: Eq k => k -> TupleReader k v (Maybe v)

module Network.Tremulous.Scheduler
data Event id a
E :: !MicroTime -> !id -> !a -> Event id a
time :: Event id a -> !MicroTime
idn :: Event id a -> !id
storage :: Event id a -> !a
data Scheduler id a
newScheduler :: Ord a => Int -> (Scheduler a b -> a -> b -> IO ()) -> Maybe (IO ()) -> IO (Scheduler a b)
addScheduled :: Scheduler id a -> Event id a -> IO ()
addScheduledBatch :: Foldable f => Scheduler id a -> f (Event id a) -> IO ()
addScheduledInstant :: Scheduler id a -> [(id, a)] -> IO ()
deleteScheduled :: Scheduler id a -> id -> IO ()
putMVar' :: MVar a -> a -> IO ()
pureModifyMVar :: MVar a -> (a -> a) -> IO ()
instance Typeable Interrupt
instance Show Interrupt
instance Exception Interrupt

module Network.Tremulous.NameInsensitive
data TI
TI :: !ByteString -> !ByteString -> TI
original :: TI -> !ByteString
cleanedCase :: TI -> !ByteString
mk :: ByteString -> TI
mkColor :: ByteString -> TI
mkAlphaNum :: ByteString -> TI
instance Show TI
instance Ord TI
instance Eq TI

module Network.Tremulous.Protocol
data Delay
Delay :: !Int -> !Int -> !Int -> Delay
packetTimeout :: Delay -> !Int
packetDuplication :: Delay -> !Int
throughputDelay :: Delay -> !Int
data Team
Spectators :: Team
Aliens :: Team
Humans :: Team
Unknown :: Team
data GameServer
GameServer :: !SockAddr -> !Int -> !Int -> !TI -> !(Maybe TI) -> !(Maybe TI) -> !(Maybe TI) -> !Int -> !Int -> !Bool -> !Bool -> !(Maybe Int) -> !(Maybe Int) -> !Int -> ![Player] -> GameServer
address :: GameServer -> !SockAddr
gameping :: GameServer -> !Int
protocol :: GameServer -> !Int
hostname :: GameServer -> !TI
gamemod :: GameServer -> !(Maybe TI)
version :: GameServer -> !(Maybe TI)
mapname :: GameServer -> !(Maybe TI)
slots :: GameServer -> !Int
privslots :: GameServer -> !Int
protected :: GameServer -> !Bool
unlagged :: GameServer -> !Bool
timelimit :: GameServer -> !(Maybe Int)
suddendeath :: GameServer -> !(Maybe Int)
nplayers :: GameServer -> !Int
players :: GameServer -> ![Player]
data Player
Player :: !Team -> !Int -> !Int -> !TI -> Player
team :: Player -> !Team
kills :: Player -> !Int
ping :: Player -> !Int
name :: Player -> !TI
data MasterServer
MasterServer :: !SockAddr -> !Int -> MasterServer
masterAddress :: MasterServer -> !SockAddr
masterProtocol :: MasterServer -> !Int
data PollResult
PollResult :: ![GameServer] -> !Int -> !Int -> PollResult
polled :: PollResult -> ![GameServer]
serversResponded :: PollResult -> !Int
serversRequested :: PollResult -> !Int
defaultDelay :: Delay
parseGameServer :: SockAddr -> ByteString -> Maybe GameServer
parseMasterServer :: ByteString -> Maybe [SockAddr]
instance Eq MasterServer
instance Eq Team
instance Show Team

module Network.Tremulous.Polling
pollMasters :: Delay -> [MasterServer] -> IO PollResult
pollOne :: Delay -> SockAddr -> IO (Maybe GameServer)
instance Eq State

module Network.Tremulous.Util
serverByAddress :: SockAddr -> [GameServer] -> Maybe GameServer
elemByAddress :: SockAddr -> [GameServer] -> Bool
search :: String -> [GameServer] -> [(TI, GameServer)]
makePlayerNameList :: [GameServer] -> [(TI, GameServer)]
makePlayerList :: [GameServer] -> [(Player, GameServer)]
stats :: [GameServer] -> (Int, Int, Int)
partitionTeams :: [Player] -> ([Player], [Player], [Player], [Player])
removeColors :: String -> String
