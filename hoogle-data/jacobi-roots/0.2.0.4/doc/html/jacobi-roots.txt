-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Roots of two shifted Jacobi polynomials (Legendre and Radau) to double precision
--   
--   This package provides roots of shifted Radau and Legendre polynomials
--   to double precision.
--   
--   The roots are precomputed using a Mathematica script, and degrees of
--   up to a few hundred are provided.
--   
--   See the <a>JacobiRoots</a> module for documentation
--   
--   To build this from scratch, first run <tt>compute_roots.nb</tt> in
--   Mathematica to generate <tt>gen/JacobiRootsRaw300.hs</tt>. Then type
--   <tt>make</tt> to run <tt>gen/Convert.hs</tt>, which creates
--   <tt>src/JacobiRootsBinary.hs</tt>. Then the normal <tt>cabal
--   configure; cabal build</tt>
@package jacobi-roots
@version 0.2.0.4


-- | Get the roots of shifted Legendre and Radau polynomials
--   
--   <pre>
--   &gt;&gt;&gt; shiftedLegendreRoots 3
--   Just (fromList [0.11270166537925831,0.5,0.8872983346207417])
--   
--   &gt;&gt;&gt; shiftedRadauRoots 2
--   Just (fromList [0.1550510257216822,0.6449489742783178])
--   </pre>
--   
--   The roots are pre-computed and only a finite number are provided
--   
--   <pre>
--   &gt;&gt;&gt; (V.length allShiftedLegendreRoots, V.length allShiftedRadauRoots)
--   (301,301)
--   
--   &gt;&gt;&gt; shiftedLegendreRoots 1000000000000000
--   Nothing
--   </pre>
--   
--   There are N roots in the Nth Jacobi polynomial
--   
--   <pre>
--   &gt;&gt;&gt; import Data.Maybe ( fromJust )
--   
--   &gt;&gt;&gt; V.length (fromJust (shiftedLegendreRoots 5))
--   5
--   
--   &gt;&gt;&gt; all (\k -&gt; k == V.length (fromJust (shiftedLegendreRoots k))) [0..(V.length allShiftedLegendreRoots - 1)]
--   True
--   
--   &gt;&gt;&gt; all (\k -&gt; k == V.length (fromJust (shiftedRadauRoots k))) [0..(V.length allShiftedRadauRoots - 1)]
--   True
--   </pre>
module JacobiRoots

-- | get the roots of the Nth shifted Legendre polynomial
--   
--   <pre>
--   <a>shiftedLegendreRoots</a> == (<a>allShiftedLegendreRoots</a> <a>!?</a>)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; mapM_ (print . shiftedLegendreRoots) [0..3]
--   Just (fromList [])
--   Just (fromList [0.5])
--   Just (fromList [0.2113248654051871,0.7886751345948129])
--   Just (fromList [0.11270166537925831,0.5,0.8872983346207417])
--   </pre>
shiftedLegendreRoots :: Int -> Maybe (Vector Double)

-- | get the roots of the Nth shifted Radau polynomial
--   
--   <pre>
--   <a>shiftedRadauRoots</a> == (<a>allShiftedRadauRoots</a> <a>!?</a>)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; mapM_ (print . shiftedRadauRoots) [0..3]
--   Just (fromList [])
--   Just (fromList [0.3333333333333333])
--   Just (fromList [0.1550510257216822,0.6449489742783178])
--   Just (fromList [8.858795951270394e-2,0.4094668644407347,0.787659461760847])
--   </pre>
shiftedRadauRoots :: Int -> Maybe (Vector Double)

-- | roots of shifted Jacobi polynomials with alpha=0, beta=0
allShiftedLegendreRoots :: Vector (Vector Double)

-- | roots of shifted Jacobi polynomials with alpha=1, beta=0
allShiftedRadauRoots :: Vector (Vector Double)
