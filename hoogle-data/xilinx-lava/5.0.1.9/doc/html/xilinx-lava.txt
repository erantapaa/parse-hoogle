-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The Lava system for Xilinx FPGA design with layout combinators.
--   
--   A libray for generating circuits for Xilinx FPGAs with layout.
@package xilinx-lava
@version 5.0.1.9

module Lava.ISE
data Effort
Balanced :: Effort
FastRuntime :: Effort
HighEffort :: Effort

-- | The <a>xflow</a> function executes the Xilinx ISE implementation tools
--   with the specified circuit, part, package, speed grade and
--   implementation effort. The name of the primary clock is assumed to be
--   clk.
xflow :: String -> String -> String -> Int -> Effort -> Int -> IO ()
implement :: String -> String -> String -> Int -> Effort -> Int -> IO ()
instance Eq Effort
instance Show Effort
instance Read Effort

module Lava.Diagnostics
computeNetlist :: String -> XilinxArchitecture -> Out () -> Netlist
preLayoutNetlist :: String -> XilinxArchitecture -> Out () -> Netlist
data Component
Lut1 :: [Int] -> Int -> Int -> String -> Component
Lut2 :: [Int] -> Int -> Int -> Int -> String -> Component
Lut2_l :: [Int] -> Int -> Int -> Int -> String -> Component
Lut3 :: [Int] -> Int -> Int -> Int -> Int -> String -> Component
Lut4 :: [Int] -> Int -> Int -> Int -> Int -> Int -> String -> Component
Lut5 :: [Int] -> Int -> Int -> Int -> Int -> Int -> Int -> String -> Component
Lut6 :: [Int] -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> String -> Component
PrimitiveGate :: [(String, Int)] -> [(String, Int)] -> Component
data Dir
To :: Dir
Downto :: Dir
data NetType
BitType :: NetType
BitVec :: Int -> Dir -> Int -> NetType
ArrayType :: Int -> Dir -> Int -> NetType -> NetType
NamedType :: String -> NetType
data PortDirection
InputPort :: PortDirection
OutputPort :: PortDirection
LocalInput :: PortDirection
LocalOutput :: PortDirection
data PortDeclaration
Port :: String -> PortDirection -> NetType -> [Int] -> PortDeclaration
data Position
NoPlacement :: Position
Unplaced :: Position
Placed :: Position
data Layout
Beside :: (Int, Int) -> Layout -> Layout -> Layout
Below :: (Int, Int) -> Layout -> Layout -> Layout
Overlay :: (Int, Int) -> Layout -> Layout -> Layout
Tile :: (Int, Int) -> Int -> Layout
BeginOverlayTile :: Layout
EmptyLayout :: Layout
Space :: (Int, Int) -> Layout
ConditionalShift :: CondShiftFn -> Layout -> Layout
data CondShiftFn
CondShiftFn :: (Int -> Bool, Int -> Int) -> (Int -> Bool, Int -> Int) -> CondShiftFn
sizeOfLayout :: Layout -> (Int, Int)
data XilinxArchitecture
Virtex2 :: XilinxArchitecture
Virtex4 :: XilinxArchitecture
Virtex5 :: XilinxArchitecture
Virtex6 :: XilinxArchitecture
data Instance
Instance :: Component -> String -> Int -> Position -> Maybe (Int, Int) -> Instance
component :: Instance -> Component
componentName :: Instance -> String
instanceNumber :: Instance -> Int
position :: Instance -> Position
componentSize :: Instance -> Maybe (Int, Int)
type DrivenPorts = [(String, String)]
data Netlist
Netlist :: String -> [PortDeclaration] -> [(String, NetType)] -> [Instance] -> Int -> Int -> [Layout] -> Int -> (Array Int Int, Array Int Int) -> Maybe (Int, Int) -> XilinxArchitecture -> [Netlist] -> Array Int DrivenPorts -> Netlist
circuitName :: Netlist -> String
ports :: Netlist -> [PortDeclaration]
types :: Netlist -> [(String, NetType)]
instances :: Netlist -> [Instance]
netCount :: Netlist -> Int
instCount :: Netlist -> Int
layout :: Netlist -> [Layout]
layoutNesting :: Netlist -> Int
computedShifts :: Netlist -> (Array Int Int, Array Int Int)
rlocOrigin :: Netlist -> Maybe (Int, Int)
xilinxArchitecture :: Netlist -> XilinxArchitecture
subCircuits :: Netlist -> [Netlist]
netDrivers :: Netlist -> Array Int DrivenPorts
setCircuitName :: String -> Out ()
addInstance :: Instance -> Out ()
getNetCount :: Out Int
getInstCount :: Out Int
incrementInstCount :: Out ()
incrementNetCount :: Int -> Out ()
getNewNet :: Out Bit
pushLayout :: Layout -> Out ()
popLayout :: Out Layout
incrementLayoutNesting :: Out ()
decrementLayoutNesting :: Out ()
setOrigin :: (Int, Int) -> Out ()
type Out a = State Netlist a
type Bit = Int
type BitVec = (Int, Dir, Int)
zero :: Bit
one :: Bit


-- | The Lava.Unisim module defines the basic gates that are common to all
--   architectures.
module Lava.Virtex6

-- | The <a>inv</a> function implements an invertor explicitly with a LUT1.
inv :: Bit -> Out Bit

-- | The <a>and2</a> function implements an AND gate explicitly with a
--   LUT2.
and2 :: (Bit, Bit) -> Out Bit

-- | The <a>and3</a> function implements an AND gate explicitly with a
--   LUT3.
and3 :: (Bit, Bit, Bit) -> Out Bit

-- | The <a>and4</a> function implements an AND gate explicitly with a
--   LUT4.
and4 :: (Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>and5</a> function implements an AND gate explicitly with a
--   LUT5.
and5 :: (Bit, Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>and6</a> function implements an AND gate explicitly with a
--   LUT6.
and6 :: (Bit, Bit, Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>or2</a> function implements an OR gate explicitly with a LUT2.
or2 :: (Bit, Bit) -> Out Bit

-- | The <a>or3</a> function implements an AND gate explicitly with a LUT3.
or3 :: (Bit, Bit, Bit) -> Out Bit

-- | The <a>or4</a> function implements an AND gate explicitly with a LUT4.
or4 :: (Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>or5</a> function implements an AND gate explicitly with a LUT5.
or5 :: (Bit, Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>and6</a> function implements an AND gate explicitly with a
--   LUT6.
or6 :: (Bit, Bit, Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>nor2</a> function implements an NOR gate explicitly with a
--   LUT2.
nor2 :: (Bit, Bit) -> Out Bit

-- | The <a>xor2</a> function implements an XOR gate explicitly with a
--   LUT2.
xor2 :: (Bit, Bit) -> Out Bit

-- | The <a>xnor2</a> function implements an XOR gate explicitly with a
--   LUT2.
xnor2 :: (Bit, Bit) -> Out Bit

-- | A multiplexor implemented with a LUT3
mux :: (Bit, (Bit, Bit)) -> Out Bit
muxcy :: (Bit, (Bit, Bit)) -> Out Bit
muxcy_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxcy_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf5 :: Bit -> Bit -> Bit -> Out Bit
muxf5_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf5_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf6 :: Bit -> Bit -> Bit -> Out Bit
muxf6_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf6_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf7 :: Bit -> Bit -> Bit -> Out Bit
muxf7_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf7_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf8 :: Bit -> Bit -> Bit -> Out Bit
muxf8_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf8_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
xorcy :: (Bit, Bit) -> Out Bit
xorcy_d :: Bit -> Bit -> Out (Bit, Bit)
xorcy_l :: Bit -> Bit -> Out (Bit, Bit)
fd :: Bit -> Bit -> Out Bit
fdc :: Bit -> Bit -> Bit -> Out Bit
fdc_1 :: Bit -> Bit -> Bit -> Out Bit
fdce :: Bit -> Bit -> Bit -> Bit -> Out Bit
fdce_1 :: Bit -> Bit -> Bit -> Bit -> Out Bit
fdcp :: Bit -> Bit -> Bit -> Bit -> Out Bit
fdcpe :: Bit -> Bit -> Bit -> Bit -> Bit -> Out Bit
fdcpe_1 :: Bit -> Bit -> Bit -> Bit -> Bit -> Out Bit

-- | 16-bit shift register look-up table with clock enable
srl16e :: Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Out Bit

-- | Two input and gate implemented in place of a slice latch
and2b1l :: Bit -> Bit -> Out Bit

-- | Two input and gate implemented in place of a slice latch
or2l :: Bit -> Bit -> Out Bit

-- | Dedicated input clock buffer
ibufg :: Bit -> Out Bit

-- | Global clock buffer
bufg :: Bit -> Out Bit

-- | Global clock buffer
bufgp :: Bit -> Out Bit

-- | Output buffer
obufg :: Bit -> Out Bit

-- | Output buffer
obufds :: Bit -> Out (Bit, Bit)
muxBit :: Bit -> (Bit, Bit) -> Out Bit
muxBit' :: Bit -> (Bit, Bit) -> Out Bit
muxFn :: Bool -> Bool -> Bool -> Bool
muxFn' :: Bool -> Bool -> Bool -> Bool
muxBus :: (Bit, ([Bit], [Bit])) -> Out [Bit]
muxBus' :: (Bit, ([Bit], [Bit])) -> Out [Bit]
vreg :: Bit -> [Bit] -> Out [Bit]

-- | A supply of a constant zero signal.
gnd :: Out Bit

-- | A supply of a constant one signal.
vcc :: Out Bit


-- | The Lava.Unisim module defines the basic gates that are common to all
--   architectures.
module Lava.Virtex2

-- | The <a>inv</a> function implements an invertor explicitly with a LUT1.
inv :: Bit -> Out Bit

-- | The <a>and2</a> function implements an AND gate explicitly with a
--   LUT2.
and2 :: (Bit, Bit) -> Out Bit

-- | The <a>and3</a> function implements an AND gate explicitly with a
--   LUT3.
and3 :: (Bit, Bit, Bit) -> Out Bit

-- | The <a>and4</a> function implements an AND gate explicitly with a
--   LUT4.
and4 :: (Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>and5</a> function implements an AND gate explicitly with a
--   LUT5.
and5 :: (Bit, Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>and6</a> function implements an AND gate explicitly with a
--   LUT6.
and6 :: (Bit, Bit, Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>or2</a> function implements an OR gate explicitly with a LUT2.
or2 :: (Bit, Bit) -> Out Bit

-- | The <a>or3</a> function implements an AND gate explicitly with a LUT3.
or3 :: (Bit, Bit, Bit) -> Out Bit

-- | The <a>or4</a> function implements an AND gate explicitly with a LUT4.
or4 :: (Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>or5</a> function implements an AND gate explicitly with a LUT5.
or5 :: (Bit, Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>and6</a> function implements an AND gate explicitly with a
--   LUT6.
or6 :: (Bit, Bit, Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>nor2</a> function implements an NOR gate explicitly with a
--   LUT2.
nor2 :: (Bit, Bit) -> Out Bit

-- | The <a>xor2</a> function implements an XOR gate explicitly with a
--   LUT2.
xor2 :: (Bit, Bit) -> Out Bit

-- | The <a>xnor2</a> function implements an XOR gate explicitly with a
--   LUT2.
xnor2 :: (Bit, Bit) -> Out Bit

-- | A multiplexor implemented with a LUT3
mux :: (Bit, (Bit, Bit)) -> Out Bit
muxcy :: (Bit, (Bit, Bit)) -> Out Bit
muxcy_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxcy_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf5 :: Bit -> Bit -> Bit -> Out Bit
muxf5_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf5_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf6 :: Bit -> Bit -> Bit -> Out Bit
muxf6_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf6_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf7 :: Bit -> Bit -> Bit -> Out Bit
muxf7_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf7_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf8 :: Bit -> Bit -> Bit -> Out Bit
muxf8_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf8_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
xorcy :: (Bit, Bit) -> Out Bit
xorcy_d :: Bit -> Bit -> Out (Bit, Bit)
xorcy_l :: Bit -> Bit -> Out (Bit, Bit)
fd :: Bit -> Bit -> Out Bit
fdc :: Bit -> Bit -> Bit -> Out Bit
fdc_1 :: Bit -> Bit -> Bit -> Out Bit
fdce :: Bit -> Bit -> Bit -> Bit -> Out Bit
fdce_1 :: Bit -> Bit -> Bit -> Bit -> Out Bit
fdcp :: Bit -> Bit -> Bit -> Bit -> Out Bit
fdcpe :: Bit -> Bit -> Bit -> Bit -> Bit -> Out Bit
fdcpe_1 :: Bit -> Bit -> Bit -> Bit -> Bit -> Out Bit

-- | 16-bit shift register look-up table with clock enable
srl16e :: Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Out Bit

-- | Two input and gate implemented in place of a slice latch
and2b1l :: Bit -> Bit -> Out Bit

-- | Two input and gate implemented in place of a slice latch
or2l :: Bit -> Bit -> Out Bit

-- | Dedicated input clock buffer
ibufg :: Bit -> Out Bit

-- | Global clock buffer
bufg :: Bit -> Out Bit

-- | Global clock buffer
bufgp :: Bit -> Out Bit

-- | Output buffer
obufg :: Bit -> Out Bit

-- | Output buffer
obufds :: Bit -> Out (Bit, Bit)
muxBit :: Bit -> (Bit, Bit) -> Out Bit
muxBit' :: Bit -> (Bit, Bit) -> Out Bit
muxFn :: Bool -> Bool -> Bool -> Bool
muxFn' :: Bool -> Bool -> Bool -> Bool
muxBus :: (Bit, ([Bit], [Bit])) -> Out [Bit]
muxBus' :: (Bit, ([Bit], [Bit])) -> Out [Bit]
vreg :: Bit -> [Bit] -> Out [Bit]

-- | A supply of a constant zero signal.
gnd :: Out Bit

-- | A supply of a constant one signal.
vcc :: Out Bit


-- | The Lava.Unisim module defines the basic gates that are common to all
--   architectures.
module Lava.Virtex4

-- | The <a>inv</a> function implements an invertor explicitly with a LUT1.
inv :: Bit -> Out Bit

-- | The <a>and2</a> function implements an AND gate explicitly with a
--   LUT2.
and2 :: (Bit, Bit) -> Out Bit

-- | The <a>and3</a> function implements an AND gate explicitly with a
--   LUT3.
and3 :: (Bit, Bit, Bit) -> Out Bit

-- | The <a>and4</a> function implements an AND gate explicitly with a
--   LUT4.
and4 :: (Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>and5</a> function implements an AND gate explicitly with a
--   LUT5.
and5 :: (Bit, Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>and6</a> function implements an AND gate explicitly with a
--   LUT6.
and6 :: (Bit, Bit, Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>or2</a> function implements an OR gate explicitly with a LUT2.
or2 :: (Bit, Bit) -> Out Bit

-- | The <a>or3</a> function implements an AND gate explicitly with a LUT3.
or3 :: (Bit, Bit, Bit) -> Out Bit

-- | The <a>or4</a> function implements an AND gate explicitly with a LUT4.
or4 :: (Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>or5</a> function implements an AND gate explicitly with a LUT5.
or5 :: (Bit, Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>and6</a> function implements an AND gate explicitly with a
--   LUT6.
or6 :: (Bit, Bit, Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>nor2</a> function implements an NOR gate explicitly with a
--   LUT2.
nor2 :: (Bit, Bit) -> Out Bit

-- | The <a>xor2</a> function implements an XOR gate explicitly with a
--   LUT2.
xor2 :: (Bit, Bit) -> Out Bit

-- | The <a>xnor2</a> function implements an XOR gate explicitly with a
--   LUT2.
xnor2 :: (Bit, Bit) -> Out Bit

-- | A multiplexor implemented with a LUT3
mux :: (Bit, (Bit, Bit)) -> Out Bit
muxcy :: (Bit, (Bit, Bit)) -> Out Bit
muxcy_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxcy_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf5 :: Bit -> Bit -> Bit -> Out Bit
muxf5_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf5_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf6 :: Bit -> Bit -> Bit -> Out Bit
muxf6_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf6_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf7 :: Bit -> Bit -> Bit -> Out Bit
muxf7_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf7_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf8 :: Bit -> Bit -> Bit -> Out Bit
muxf8_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf8_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
xorcy :: (Bit, Bit) -> Out Bit
xorcy_d :: Bit -> Bit -> Out (Bit, Bit)
xorcy_l :: Bit -> Bit -> Out (Bit, Bit)
fd :: Bit -> Bit -> Out Bit
fdc :: Bit -> Bit -> Bit -> Out Bit
fdc_1 :: Bit -> Bit -> Bit -> Out Bit
fdce :: Bit -> Bit -> Bit -> Bit -> Out Bit
fdce_1 :: Bit -> Bit -> Bit -> Bit -> Out Bit
fdcp :: Bit -> Bit -> Bit -> Bit -> Out Bit
fdcpe :: Bit -> Bit -> Bit -> Bit -> Bit -> Out Bit
fdcpe_1 :: Bit -> Bit -> Bit -> Bit -> Bit -> Out Bit

-- | 16-bit shift register look-up table with clock enable
srl16e :: Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Out Bit

-- | Two input and gate implemented in place of a slice latch
and2b1l :: Bit -> Bit -> Out Bit

-- | Two input and gate implemented in place of a slice latch
or2l :: Bit -> Bit -> Out Bit

-- | Dedicated input clock buffer
ibufg :: Bit -> Out Bit

-- | Global clock buffer
bufg :: Bit -> Out Bit

-- | Global clock buffer
bufgp :: Bit -> Out Bit

-- | Output buffer
obufg :: Bit -> Out Bit

-- | Output buffer
obufds :: Bit -> Out (Bit, Bit)
muxBit :: Bit -> (Bit, Bit) -> Out Bit
muxBit' :: Bit -> (Bit, Bit) -> Out Bit
muxFn :: Bool -> Bool -> Bool -> Bool
muxFn' :: Bool -> Bool -> Bool -> Bool
muxBus :: (Bit, ([Bit], [Bit])) -> Out [Bit]
muxBus' :: (Bit, ([Bit], [Bit])) -> Out [Bit]
vreg :: Bit -> [Bit] -> Out [Bit]

-- | A supply of a constant zero signal.
gnd :: Out Bit

-- | A supply of a constant one signal.
vcc :: Out Bit


-- | The Lava.Unisim module defines the basic gates that are common to all
--   architectures.
module Lava.Virtex5

-- | The <a>inv</a> function implements an invertor explicitly with a LUT1.
inv :: Bit -> Out Bit

-- | The <a>and2</a> function implements an AND gate explicitly with a
--   LUT2.
and2 :: (Bit, Bit) -> Out Bit

-- | The <a>and3</a> function implements an AND gate explicitly with a
--   LUT3.
and3 :: (Bit, Bit, Bit) -> Out Bit

-- | The <a>and4</a> function implements an AND gate explicitly with a
--   LUT4.
and4 :: (Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>and5</a> function implements an AND gate explicitly with a
--   LUT5.
and5 :: (Bit, Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>and6</a> function implements an AND gate explicitly with a
--   LUT6.
and6 :: (Bit, Bit, Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>or2</a> function implements an OR gate explicitly with a LUT2.
or2 :: (Bit, Bit) -> Out Bit

-- | The <a>or3</a> function implements an AND gate explicitly with a LUT3.
or3 :: (Bit, Bit, Bit) -> Out Bit

-- | The <a>or4</a> function implements an AND gate explicitly with a LUT4.
or4 :: (Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>or5</a> function implements an AND gate explicitly with a LUT5.
or5 :: (Bit, Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>and6</a> function implements an AND gate explicitly with a
--   LUT6.
or6 :: (Bit, Bit, Bit, Bit, Bit, Bit) -> Out Bit

-- | The <a>nor2</a> function implements an NOR gate explicitly with a
--   LUT2.
nor2 :: (Bit, Bit) -> Out Bit

-- | The <a>xor2</a> function implements an XOR gate explicitly with a
--   LUT2.
xor2 :: (Bit, Bit) -> Out Bit

-- | The <a>xnor2</a> function implements an XOR gate explicitly with a
--   LUT2.
xnor2 :: (Bit, Bit) -> Out Bit

-- | A multiplexor implemented with a LUT3
mux :: (Bit, (Bit, Bit)) -> Out Bit
muxcy :: (Bit, (Bit, Bit)) -> Out Bit
muxcy_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxcy_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf5 :: Bit -> Bit -> Bit -> Out Bit
muxf5_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf5_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf6 :: Bit -> Bit -> Bit -> Out Bit
muxf6_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf6_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf7 :: Bit -> Bit -> Bit -> Out Bit
muxf7_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf7_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf8 :: Bit -> Bit -> Bit -> Out Bit
muxf8_d :: Bit -> Bit -> Bit -> Out (Bit, Bit)
muxf8_l :: Bit -> Bit -> Bit -> Out (Bit, Bit)
xorcy :: (Bit, Bit) -> Out Bit
xorcy_d :: Bit -> Bit -> Out (Bit, Bit)
xorcy_l :: Bit -> Bit -> Out (Bit, Bit)
fd :: Bit -> Bit -> Out Bit
fdc :: Bit -> Bit -> Bit -> Out Bit
fdc_1 :: Bit -> Bit -> Bit -> Out Bit
fdce :: Bit -> Bit -> Bit -> Bit -> Out Bit
fdce_1 :: Bit -> Bit -> Bit -> Bit -> Out Bit
fdcp :: Bit -> Bit -> Bit -> Bit -> Out Bit
fdcpe :: Bit -> Bit -> Bit -> Bit -> Bit -> Out Bit
fdcpe_1 :: Bit -> Bit -> Bit -> Bit -> Bit -> Out Bit

-- | 16-bit shift register look-up table with clock enable
srl16e :: Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Out Bit

-- | Two input and gate implemented in place of a slice latch
and2b1l :: Bit -> Bit -> Out Bit

-- | Two input and gate implemented in place of a slice latch
or2l :: Bit -> Bit -> Out Bit

-- | Dedicated input clock buffer
ibufg :: Bit -> Out Bit

-- | Global clock buffer
bufg :: Bit -> Out Bit

-- | Global clock buffer
bufgp :: Bit -> Out Bit

-- | Output buffer
obufg :: Bit -> Out Bit

-- | Output buffer
obufds :: Bit -> Out (Bit, Bit)
muxBit :: Bit -> (Bit, Bit) -> Out Bit
muxBit' :: Bit -> (Bit, Bit) -> Out Bit
muxFn :: Bool -> Bool -> Bool -> Bool
muxFn' :: Bool -> Bool -> Bool -> Bool
muxBus :: (Bit, ([Bit], [Bit])) -> Out [Bit]
muxBus' :: (Bit, ([Bit], [Bit])) -> Out [Bit]
vreg :: Bit -> [Bit] -> Out [Bit]

-- | A supply of a constant zero signal.
gnd :: Out Bit

-- | A supply of a constant one signal.
vcc :: Out Bit


-- | Xilinx Lava is a library for FPGA circuit design with a focus on
--   circuit layout.
module Lava

-- | Serial composition with no layout
(->-) :: (a -> Out b) -> (b -> Out c) -> a -> Out c

-- | Serial composition with horizontal left to right layout
(>->) :: (a -> Out b) -> (b -> Out c) -> a -> Out c

-- | Serial composition with mid-horizontal left to right layout
(>=>) :: (a -> Out b) -> (b -> Out c) -> a -> Out c

-- | Serial composition with overly layout
(>|>) :: (a -> Out b) -> (b -> Out c) -> a -> Out c
condShift :: (Int -> Bool, Int -> Int) -> (Int -> Bool, Int -> Int) -> Out ()

-- | Repeated serial composition (left to right)
hRepN :: Int -> (a -> Out a) -> a -> Out a

-- | Vertical parallel composition of two circuits
par2 :: (a -> Out c) -> (b -> Out d) -> (a, b) -> Out (c, d)

-- | Vertical map of a circuit
maP :: (a -> Out b) -> [a] -> Out [b]

-- | <a>mapPair</a> maps a circuit over adajcent pairs of elements in a
--   list
mapPair :: ((a, a) -> Out a) -> [a] -> Out [a]

-- | Horizontal parallel composition of two circuits
hpar2 :: (a -> Out c) -> (b -> Out d) -> (a, b) -> Out (c, d)

-- | Horizontal map of a circuit
hmaP :: (a -> Out b) -> [a] -> Out [b]

-- | Parallel composition of two circuit which have overlaid layout
par2Overlay :: (a -> Out c) -> (b -> Out d) -> (a, b) -> Out (c, d)

-- | Parallel composition of three circuit which have overlaid layout
par3Overlay :: (a -> Out ao) -> (b -> Out bo) -> (c -> Out co) -> (a, b, c) -> Out (ao, bo, co)

-- | Horizontal parallel composition of a list of circuits
hpar :: [a -> Out b] -> [a] -> Out [b]

-- | Horizontal repeated parallel composition of a circuit
hparN :: Int -> (a -> Out b) -> [a] -> Out [b]

-- | Splits a wire into two
fork2 :: a -> Out (a, a)

-- | Converts a two element list into a pair
listToPair :: [a] -> Out (a, a)

-- | Converts a par into a list containing two elements
pairToList :: (a, a) -> Out [a]

-- | Takes a pair of lists and returns a zipped list of pairs
ziP :: ([a], [b]) -> Out [(a, b)]

-- | Takes a list of pairs and unzips it into a pair of lists
unziP :: [(a, b)] -> Out ([a], [b])

-- | Takes a list containing two elements and returns a list of lists where
--   each element is a two element list
zipList :: [[a]] -> Out [[a]]

-- | Undo the zipList operation
unzipList :: [[a]] -> Out [[a]]
fstListPair :: [a] -> a
sndListPair :: [a] -> a

-- | This makes pairs out of consequetive members of an even length list.
pair :: [a] -> Out [[a]]

-- | Takes a list of pairs and returns a flattend list
unpair :: [[a]] -> Out [a]

-- | <a>halveListToPair</a> will take a list and return a pair containing
--   the two halves.
halveListToPair :: [a] -> ([a], [a])

-- | Tales a list and returns a pair containing the two halves of the list
halve :: [a] -> Out ([a], [a])

-- | Take a pair containing two list halves and undoes the halve
unhalve :: ([a], [a]) -> Out [a]

-- | Halves the input list into a list containign the two halves
halveList :: [a] -> Out [[a]]

-- | Undoes halveList
unhalveList :: [[a]] -> Out [a]

-- | Chops a list into chunks
chop :: Int -> [a] -> Out [[a]]

-- | Chops a list into chunks formed as pairs
chopPair :: [a] -> Out [(a, a)]

-- | Takes a list of lists and returns their concatenation
concaT :: [[a]] -> Out [a]

-- | Applies a circuit to the first halve of a list
fstList :: ([a] -> Out [a]) -> [a] -> Out [a]

-- | Applies a circuit to the second halve of a list
sndList :: ([a] -> Out [a]) -> [a] -> Out [a]

-- | Applies a circuit to the first element of a pair
fsT :: (a -> Out b) -> (a, c) -> Out (b, c)

-- | Applies a circuit to the second element of a pair
snD :: (b -> Out c) -> (a, b) -> Out (a, c)
projectFst :: (a, b) -> Out a
projectSnd :: (a, b) -> Out b
reversE :: [a] -> Out [a]

-- | <a>inputPort</a> creates a single bit input port
inputPort :: String -> NetType -> Out Bit

-- | <a>inputBitVec</a> creates a bit-vector input port
inputBitVec :: String -> NetType -> Out [Bit]

-- | <a>inputArrayOfArray</a> creates an input array of arrays.
inputArrayOfArray :: String -> NetType -> Out [[Bit]]

-- | <a>inputLocalArrayOfArray</a> creates an input array of arrays.
inputLocalArrayOfArray :: String -> NetType -> Out [[Bit]]
freshBitVec :: Int -> Dir -> Int -> Out [Bit]
outputArrayOfArray :: String -> NetType -> [[Bit]] -> Out ()
outputLocalArrayOfArray :: String -> NetType -> [[Bit]] -> Out ()

-- | <a>inputBitVecLocal</a> creates a local bit-vector input port
inputBitVecLocal :: String -> NetType -> Out [Bit]

-- | <a>outputPort</a> creates a single bit output port
outputPort :: String -> NetType -> Bit -> Out ()

-- | <a>outputBitVec</a> creates a bit-vector output port
outputBitVec :: String -> NetType -> [Bit] -> Out ()

-- | <tt>outputBitVecKept</tt> creates a bit-vector local signal with a
--   KEEP attribute set
outputBitVecLocal :: String -> NetType -> [Bit] -> Out ()
declareType :: String -> NetType -> Out NetType
data Dir
To :: Dir
Downto :: Dir
data NetType
BitType :: NetType
BitVec :: Int -> Dir -> Int -> NetType
ArrayType :: Int -> Dir -> Int -> NetType -> NetType
NamedType :: String -> NetType
data Netlist
type Out a = State Netlist a
type Bit = Int
data XilinxArchitecture
Virtex2 :: XilinxArchitecture
Virtex4 :: XilinxArchitecture
Virtex5 :: XilinxArchitecture
Virtex6 :: XilinxArchitecture
setOrigin :: (Int, Int) -> Out ()

-- | Place four sided tile comoponents in a colum
col :: ((a, b) -> Out (c, a)) -> (a, [b]) -> Out ([c], a)
computeNetlist :: String -> XilinxArchitecture -> Out () -> Netlist
preLayoutNetlist :: String -> XilinxArchitecture -> Out () -> Netlist
putXilinxVHDL :: Netlist -> IO ()
vhdlPackage :: Handle -> String -> [PortDeclaration] -> [(String, NetType)] -> IO ()

-- | overlayTile takes a circuit instantiation block and overlays all the
--   the instantions.
overlayTile :: Out a -> Out a

-- | Place components in a horizontal middle arrangement
middle :: (a -> Out c) -> ((c, d) -> Out e) -> (b -> Out d) -> (a, b) -> Out e

-- | <a>primitiveGate</a> adds a primitive gate
primitiveGate :: String -> [(String, Bit)] -> [String] -> Maybe (Int, Int) -> Out [Bit]
instantiate :: String -> Out () -> [(String, Bit)] -> [String] -> Out [Bit]
putXilinxEDIF :: Netlist -> IO ()

-- | <a>putDriver</a> writes out the EDIF net driven by source net(i)
putDriver :: Handle -> [(String, NetType)] -> Array Int DrivenPorts -> [PortDeclaration] -> Int -> IO ()
preamble :: Handle -> Netlist -> IO ()
postamble :: Handle -> Netlist -> IO ()
declareComponents :: Handle -> [String] -> [Instance] -> IO ()
declareComponent :: Handle -> Instance -> IO ()
declareCell :: Handle -> String -> [String] -> [String] -> IO ()
mainPreamble :: Handle -> Netlist -> IO ()
putEDIFPort :: Handle -> [(String, NetType)] -> PortDeclaration -> IO ()
putArrayOfArrayPort :: Handle -> String -> String -> Int -> Int -> IO ()
putEDIFInstance :: Handle -> Netlist -> Instance -> IO ()
putLUTInstance :: Handle -> Netlist -> Instance -> [Int] -> IO ()
putPrimitiveInstance :: Handle -> Netlist -> Instance -> IO ()
edifLUTInit :: [Int] -> String
binaryListToInt :: [Int] -> Int
powersOfTwo :: [Int]
declareBUF :: Handle -> IO ()
declareBUFInstances :: Handle -> [PortDeclaration] -> IO ()
declareBUFInstance :: Handle -> PortDeclaration -> IO ()
putPortWires :: Handle -> [(String, NetType)] -> Int -> [PortDeclaration] -> IO ()
putPortWire :: Handle -> [(String, NetType)] -> Int -> PortDeclaration -> IO ()

-- | <a>findConnection</a> takes a net number and a list of connectiosn and
--   returns the port indices which are connected to this Lava net.
findConnection :: Int -> [Int] -> [Int] -> [Int]

-- | <a>findConnection2D</a> takes a net number and a list of connectiosn
--   and returns the 2D port indices which are connected to this Lava net.
findConnection2D :: Int -> [[Int]] -> [Int] -> [Int] -> [(Int, Int)]
putVHDLPackage :: Handle -> Netlist -> IO ()

-- | Implements a user-defined 1 input combinational gate
lut1gate :: (Bool -> Bool) -> String -> Bit -> Out Bit

-- | Implements a user defined two input combinational gate
lut2gate :: (Bool -> Bool -> Bool) -> String -> (Bit, Bit) -> Out Bit

-- | Implements a local user defined two input combinational gate
lut2gate_l :: (Bool -> Bool -> Bool) -> String -> (Bit, Bit) -> Out Bit

-- | Implements a user defined three input combinational gate
lut3gate :: (Bool -> Bool -> Bool -> Bool) -> String -> (Bit, Bit, Bit) -> Out Bit

-- | Implements a user defined four input combinational gate
lut4gate :: (Bool -> Bool -> Bool -> Bool -> Bool) -> String -> (Bit, Bit, Bit, Bit) -> Out Bit

-- | Implements a user defined five input combinational gate
lut5gate :: (Bool -> Bool -> Bool -> Bool -> Bool -> Bool) -> String -> (Bit, Bit, Bit, Bit, Bit) -> Out Bit

-- | Implements a user defined six input combinational gate
lut6gate :: (Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool) -> String -> (Bit, Bit, Bit, Bit, Bit, Bit) -> Out Bit

-- | This function defines the version of Lava which should correspond to
--   the Cabal version.
lavaVersion :: (Int, Int, Int, Int)
one :: Bit
zero :: Bit

module Lava.OneBitAdder
oneBitAdder :: (Bit, (Bit, Bit)) -> Out (Bit, Bit)

module Lava.Adder
adderWithCarry :: t -> (Bit, ([Bit], [Bit])) -> Out ([Bit], Bit)
adder :: Int -> ([Bit], [Bit]) -> Out [Bit]

module Lava.OneBitSubtractor
oneBitSubtractor :: (Bit, (Bit, Bit)) -> Out (Bit, Bit)

module Lava.Subtractor

-- | A subtactor circuit
subtractor :: (Bit, ([Bit], [Bit])) -> Out ([Bit], Bit)
subtractorNoCarryIn :: ([Bit], [Bit]) -> Out ([Bit], Bit)

module Lava.Comparator

-- | The comparator returns '1' if b &gt;= a, '0' otherwise.
comparator :: ([Bit], [Bit]) -> Out Bit
