-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell source code formatter
--   
@package haskell-formatter
@version 1.0.0


module Language.Haskell.Formatter.Internal.Newline

-- | Unicode newline strings ordered by descending length. This corresponds
--   to the set of newlines from
--   <a>http://www.unicode.org/standard/reports/tr13/tr13-5.html</a>.
newlines :: [String]

-- | Concatenates strings with default newlines <tt>"\n"</tt> between.
--   
--   Unlike <a>unlines</a>, this does not append a newline to the last
--   string.
--   
--   <pre>
--   &gt;&gt;&gt; joinSeparatedLines ["apple", "pine"]
--   "apple\npine" 
--   </pre>
joinSeparatedLines :: [String] -> String

-- | Breaks a string up into its lines at <a>newlines</a>. The resulting
--   strings do not contain <a>newlines</a>.
--   
--   Unlike <a>lines</a>, this interprets a newline as a separator, not a
--   terminator. Thus, if the input string ends with a newline, the output
--   list ends with the empty string.
--   
--   <pre>
--   &gt;&gt;&gt; splitSeparatedLines "0\n1\r2\r\n3\n\r4"
--   ["0","1","2","3","","4"]
--   </pre>
--   
--   <pre>
--   last (splitSeparatedLines $ s ++ "\LF") == ""
--   </pre>
splitSeparatedLines :: String -> [String]


module Language.Haskell.Formatter.Internal.MapTree
data MapTree k a
Leaf :: a -> MapTree k a
Node :: (MapForest k a) -> MapTree k a
type MapForest k a = Map k (MapTree k a)
isEmpty :: MapTree k a -> Bool
summarizeLeaves :: (Ord k, Monoid b) => MapForest k (Either a b) -> MapTree k (Either a (Map k b))
indentTree :: MapTree String String -> String
instance (Eq k, Eq a) => Eq (MapTree k a)
instance (Ord k, Ord a) => Ord (MapTree k a)
instance (Show k, Show a) => Show (MapTree k a)
instance Functor (MapTree k)


module Language.Haskell.Formatter.Internal.TreeFormat
type TreeFormat a = MapForest String (Leaf a)
data Leaf a
Boolean :: (RawLeaf Bool a) -> Leaf a
LimitedInteger :: (RawLeaf Int a) -> Leaf a
SingleFloating :: (RawLeaf Float a) -> Leaf a
parseYamlFile :: TreeFormat a -> a -> FilePath -> IO (Either String a)


module Language.Haskell.Formatter
data Error
isAssertionError :: Error -> Bool
defaultFormat :: String -> Either Error String
format :: Configuration -> String -> Either Error String

-- | Creates a <a>StreamName</a>. <a>show</a> is guaranteed to return this
--   string.
--   
--   <pre>
--   show (createStreamName s) == s
--   </pre>
createStreamName :: String -> StreamName

-- | The standard input stream (stdin).
standardInput :: StreamName

-- | An informal reference to a data stream. For example, this could be the
--   name of a file stream to be used in error messages.
data StreamName


module Language.Haskell.Formatter.Internal.StyleFileFormat
treeFormat :: TreeFormat Style
