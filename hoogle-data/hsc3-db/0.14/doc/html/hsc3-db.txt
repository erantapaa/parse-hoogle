-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell SuperCollider Unit Generator Database
--   
--   Database of SuperCollider Unit Generators
@package hsc3-db
@version 0.14


-- | UGen DB record definitions.
module Sound.SC3.UGen.DB.Record

-- | UGen input descriptor
data I
I :: (Int, Int) -> String -> Double -> Maybe String -> I
input_indices :: I -> (Int, Int)
input_name :: I -> String
input_default :: I -> Double
input_enumeration :: I -> Maybe String

-- | <a>Left</a> indicates fixed,<a>Right</a> variable
type U_Output = Either Int Int

-- | UGen descriptor
data U
U :: String -> [Rate] -> Rate -> Maybe [Int] -> [I] -> Maybe Int -> U_Output -> String -> U
ugen_name :: U -> String
ugen_operating_rates :: U -> [Rate]
ugen_default_rate :: U -> Rate
ugen_filter :: U -> Maybe [Int]
ugen_inputs :: U -> [I]
ugen_mce_input :: U -> Maybe Int
ugen_outputs :: U -> U_Output
ugen_summary :: U -> String

-- | Infinite default value
inf :: Double

-- | Enumeration for <tt>Onsets</tt> UGen <tt>odftype</tt> input.
rcomplex :: Double
true :: Double
false :: Double
instance Eq I
instance Show I
instance Eq U
instance Show U


-- | Generate UGen binding functions from DB.
module Sound.SC3.UGen.DB.Bindings
ugen_mce_sane :: U -> Bool
u_input_names :: U -> [String]
unenumerator :: String -> String
input_name_proc :: I -> String
u_input_names_proc :: U -> [String]
about :: (a, a) -> [a] -> [a]
brckt :: String -> String
quote :: [Char] -> [Char]
ppl_space :: [String] -> String
ppl_list :: [String] -> String

-- | Variant that <a>delete</a>s empty inputs, useful for pretty printing.
--   
--   <pre>
--   unwords ["a","","b"] == "a  b"
--   unwords' ["a","","b"] == "a b"
--   </pre>
unwords' :: [String] -> String
u_gen_type_sig :: U -> [String]
u_outputs :: U -> (String, String)
u_gen_osc_f :: U -> [String]
u_gen_filter_f :: U -> [String]
u_gen_binding :: U -> [String]


-- | Renaming functions for UGen descriptions.
module Sound.SC3.UGen.DB.Rename

-- | Rename parameters that conflict with <i>Haskell</i> keywords or
--   <tt>Prelude</tt> functions, or which have otherwise unwieldy names.
--   
--   <pre>
--   map rename_input ["in","id"] == ["input","id_"]
--   </pre>
rename_input :: String -> String

-- | Rename unit generators that conflict with <i>Haskell</i> keywords or
--   <tt>Prelude</tt> functions.
--   
--   <pre>
--   map rename_ugen ["In","Out"] == ["in'","out"]
--   </pre>
rename_ugen :: String -> String

-- | Case insensitive string <a>==</a>.
ci_eq :: String -> String -> Bool

-- | If the input name is the same as the ugen name, rename the input.
rename_eq_input :: U -> I -> String
i_rename :: I -> I
u_rename :: U -> U
i_rename_db :: [String] -> I -> I

-- | Variant that renames inputs to avoid name coliisions with UGens.
u_rename_db :: [U] -> U -> U

module Sound.SC3.UGen.DB.Data
ugenDB :: [U]


-- | SuperCollider <tt>UGen</tt> database.
--   
--   The database is generated by an <tt>sclang</tt> program and is given
--   by the constant value <a>ugenDB</a>, which is a list of <a>U</a>
--   entries.
--   
--   <pre>
--   length ugenDB == 740
--   </pre>
module Sound.SC3.UGen.DB

-- | Lookup <a>U</a> at <a>ugenDB</a>.
--   
--   <pre>
--   fmap ugen_default_rate (uLookup "SinOsc") == Just Sound.SC3.AR
--   </pre>
uLookup :: String -> Maybe U

-- | Case-insensitive variant of <a>uLookup</a>.
--   
--   <pre>
--   fmap ugen_default_rate (uLookup_ci "fft") == Just Sound.SC3.KR
--   </pre>
uLookup_ci :: String -> Maybe U

-- | Is the input <a>I</a> mce collapsed at <a>U</a>.
i_is_mce :: U -> I -> Bool

-- | Pretty printer for <a>I</a>.
--   
--   <pre>
--   let Just u = uLookup "SinOsc"
--   in iPP u (I (0,0) "freq" 440.0) == "freq=440.0"
--   </pre>
--   
--   <pre>
--   let Just u = uLookup "Out"
--   in iPP u (I (1,1) "channelsArray" 0) == "*channelsArray=0.0"
--   </pre>
iPP :: U -> I -> String

-- | Generate simple summary string for <a>U</a>.
u_summary :: U -> String

-- | Lookup named <tt>UGen</tt> and generate simple summary string. If the
--   <i>fold case</i> flag is true the name lookup is case insensitive.
ugenSummary' :: Bool -> String -> String

-- | Lookup named <tt>UGen</tt> and generate simple summary string.
--   
--   <pre>
--   ugenSummary "SinOsc" == "SinOsc [AR,KR] freq=440.0 phase=0.0"
--   </pre>
ugenSummary :: String -> String

-- | Case-insensitive variant of <a>ugenSummary</a>.
--   
--   <pre>
--   ugenSummary_ci "fSinOsc" == "FSinOsc [AR,KR] freq=440.0 iphase=0.0"
--   </pre>
ugenSummary_ci :: String -> String
