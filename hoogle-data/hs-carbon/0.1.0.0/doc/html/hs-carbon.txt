-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Haskell framework for parallel monte carlo simulations
--   
--   Carbon is an open-source, Haskell framework aiming to provide easy
--   access to parallel Monte Carlo simulations by providing a simple, but
--   powerful compositional method for building simulations and high-level
--   functions for running them. Examples can be found at
--   https:<i></i>github.com<i>icasperzen</i>hs-carbon-examples
@package hs-carbon
@version 0.1.0.0

module Data.Summary

-- | Many Monte Carlo simulations require statistical analysis of the
--   results. Any <a>Result</a> instances which can be described
--   statistically should be made instances of <a>Summary</a>.
class Summary s
sampleMean :: Summary s => s -> Double
sampleSE :: Summary s => s -> Double
sampleVar :: Summary s => s -> Double
sampleSD :: Summary s => s -> Double
sampleSize :: Summary s => s -> Int

module Data.Result

-- | Result is the type family used to describe the aggregation techniques
--   to be used in a Monte Carlo simulation. Instances of Result should
--   specify the type of a single observation and how to include one. The
--   value of a <a>Result</a> without any observations should be specified.
--   Additionally, <a>Result</a>s should be joinable.
--   
--   Note that almost all instances of <a>Result</a> will be monoidal.
class Result r where type family Obs r :: *
addObs :: Result r => r -> Obs r -> r
rjoin :: Result r => r -> r -> r
rzero :: Result r => r
instance NFData a => Result [a]

module Data.Summary.Bool

-- | A <a>BoolSumm</a> counts the number of True and all events observed.
data BoolSumm

-- | Many Monte Carlo simulations require statistical analysis of the
--   results. Any <a>Result</a> instances which can be described
--   statistically should be made instances of <a>Summary</a>.
class Summary s
sampleMean :: Summary s => s -> Double
sampleSE :: Summary s => s -> Double
sampleVar :: Summary s => s -> Double
sampleSD :: Summary s => s -> Double
sampleSize :: Summary s => s -> Int
boolSumm :: [Bool] -> BoolSumm
instance Show BoolSumm
instance Summary BoolSumm
instance Result BoolSumm
instance NFData BoolSumm

module Data.Summary.Double

-- | Computes running stats as demonstrated by
--   http:<i></i>www.johndcook.com/skewness_kurtosis.html
data DoubleSumm
DoubleSumm :: !Double -> !Double -> !Int -> DoubleSumm
_m1 :: DoubleSumm -> !Double
_m2 :: DoubleSumm -> !Double
_size :: DoubleSumm -> !Int
doubleSumm :: [Double] -> DoubleSumm
instance Show DoubleSumm
instance Summary DoubleSumm
instance Result DoubleSumm
instance NFData DoubleSumm


-- | The goal of Carbon is to capture idiomatic usage patterns for Monte
--   Carlo simulations in an easy to use interface. Currently, only one
--   pattern is implemented but more are planned.
--   
--   There are two main parts to the library:
--   
--   <ul>
--   <li>The <a>MonteCarlo</a> monad for building simulations</li>
--   <li>The <a>Result</a> type family for describing how to aggregate
--   results</li>
--   </ul>
--   
--   Running a simulation will require a basic understanding of how to use
--   both. Control.Monad.MonteCarlo exports the <a>RandomGen</a> typeclass
--   for convenience.
module Control.Monad.MonteCarlo

-- | The <a>MonteCarlo</a> monad is just a <a>State</a> monad in disguise.
--   This allows us to thread the internal PRNG state through the
--   simulation as we sample new numbers.
type MonteCarlo g = State g

-- | This is a high level function for running a full Monte Carlo
--   simulation. It takes a <a>MonteCarlo</a> action, the number of
--   observations to aggregate, and an instance of <a>RandomGen</a>. The
--   return value is dictated by the type family <a>Result</a>; a type
--   annotation is required to specify how observations should be
--   aggregated.
--   
--   For example, given a <a>MonteCarlo</a> action, mySim, with type:
--   
--   <pre>
--   mySim :: RandomGen g =&gt; MonteCarlo g Bool
--   </pre>
--   
--   We can get radically different results with just a type annotation:
--   
--   <pre>
--   experimentS mySimulation 100 g :: [Bool]
--   experimentS mySimulation 100 g :: BoolSumm
--   </pre>
experimentS :: (RandomGen g, Result s) => MonteCarlo g (Obs s) -> Int -> g -> s

-- | This is a high level function for running a full Monte Carlo
--   simulation in parallel. It is identical to <a>experimentS</a> except
--   that it takes an additional Int argument representing the chunk size.
--   Determining a good chunk size is an art, but a good starting point may
--   be to divide the number of runs by 200.
--   
--   Note: you must compile an executable with the -threaded flag in order
--   for sparks to run in parallel.
experimentP :: (RandomGen g, Result s) => MonteCarlo g (Obs s) -> Int -> Int -> g -> s

-- | <a>runMC</a> is an alias for <a>runState</a>.
runMC :: RandomGen g => MonteCarlo g a -> g -> (a, g)

-- | <a>evalMC</a> is an alias for <a>evalState</a>.
evalMC :: RandomGen g => MonteCarlo g a -> g -> a

-- | <a>random</a> calls <a>random</a> and updates the internal state
random :: (RandomGen g, Random a) => MonteCarlo g a

-- | <a>randomR</a> calls <a>randomR</a> and updates the internal state
randomR :: (RandomGen g, Random a) => (a, a) -> MonteCarlo g a

-- | The class <a>RandomGen</a> provides a common interface to random
--   number generators.
class RandomGen g
