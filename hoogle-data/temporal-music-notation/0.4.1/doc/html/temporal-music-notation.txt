-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | music notation
--   
@package temporal-music-notation
@version 0.4.1


-- | This module defines the notion of volume.
module Temporal.Music.Volume

-- | Diapason defines minimum and maximum bound for <a>Volume</a> level.
--   Field <a>diapLim</a> specifies volume limit. Value <a>diapLim</a> is
--   rendered to highest amplitude and <tt>-diapLim</tt> is rendered to the
--   lowest amplitude. All values that go beyond the limit are clipped.
data Diap
Diap :: (Double, Double) -> Int -> Diap
diapRange :: Diap -> (Double, Double)
diapLim :: Diap -> Int

-- | <a>Volume</a> denotes amplitude. It's not a <a>Double</a> for ease of
--   performing some musical transformations, such as making notes louder
--   or using accents. <a>Volume</a> can be converted to <a>Double</a> with
--   function <tt>amp</tt>.
data Volume
Volume :: Diap -> Accent -> Level -> Volume
volumeDiap :: Volume -> Diap
volumeAccent :: Volume -> Accent
volumeLevel :: Volume -> Level

-- | Volume levels.
type Level = Int

-- | <a>Accent</a> defines values between <a>volumeLevel</a> values on
--   logarithmic scale. 1 <a>Accent</a> == 1 <a>volumeLevel</a> 's step.
type Accent = Double

-- | <a>Volume</a> can be used alongside with many other parameters (they
--   can define timbre or pitch). Class <a>VolumeLike</a> provides getters
--   and setters for data types that contain value of type <a>Volume</a>.
--   In <a>Temporal.Music.Score</a> module you can find many functions that
--   are defined in terms of this class. Once you have chosen some note
--   representation you can make an instance for it and use all
--   volume-modifiers.
class VolumeLike a
setVolume :: VolumeLike a => Volume -> a -> a
getVolume :: VolumeLike a => a -> Volume

-- | <a>Volume</a> modifier.
mapVolume :: VolumeLike a => (Volume -> Volume) -> (a -> a)

-- | Calculates amplitude for a <a>Volume</a> -like value.
absVolume :: VolumeLike a => a -> Double

-- | Calculates value of type <a>Volume</a> as coordinate within specidfied
--   diapason. 1 corresponds to maximum bound and 0 corresponds to minimum
--   bound.
volumeAsDouble :: Volume -> Double

-- | Mapps decibels to amplitudes within specified amplitude diapason, 0
--   turns to lower diapason value and 1 turns to higher diapason value.
diapAt :: Diap -> Double -> Double
instance Show Diap
instance Eq Diap
instance Show Volume
instance Eq Volume
instance VolumeLike Volume
instance Default Volume
instance Default Diap


-- | This module defines notion of pitch.
module Temporal.Music.Pitch

-- | Cycles per second
type Hz = Double

-- | Multiplier of Hz
type Interval = Double

-- | Middle C (261.626 Hz)
c1 :: Hz

-- | Middle A (440 Hz)
a1 :: Hz

-- | Transpose cycles per second by some interval.
transpose :: Interval -> Hz -> Hz

-- | <a>Pitch</a> denotes <a>Hz</a> value. But it's not a double for ease
--   of performing some musical transformations, transposition, bend,
--   inversion, changing scales. <a>Pitch</a> can be converted to <a>Hz</a>
--   with function <tt>hz</tt>. Pitch contains <a>Scale</a>, and point on
--   the tone plane. The point is a triple <tt>(bend, octave, step)</tt>.
--   <a>Bend</a> denotes divergens from vertices of scale grid.
--   <a>Octave</a> and <a>Step</a> are integers.
data Pitch
Pitch :: Scale -> Bend -> Octave -> Step -> Pitch
pitchScale :: Pitch -> Scale
pitchBend :: Pitch -> Bend
pitchOctave :: Pitch -> Octave
pitchStep :: Pitch -> Step

-- | Constructs <a>Pitch</a> from some step value. <a>Bend</a> and
--   <a>Octave</a> are set to zeroes. <a>Scale</a> is set to default scale
--   which is defined in <tt>HasScale</tt> class.
fromStep :: Int -> Pitch

-- | <a>Bend</a> represents tone's diversion from scale grid.
type Bend = Double
type Octave = Int
type Step = Int

-- | <a>Scale</a> defines 2D grid (octave, step) in space of <a>Hz</a>
--   units. <a>Bend</a> is a level of diversion from grid vertices. 1-level
--   bend is equal to 1 step. For tones with fractional bends frequency is
--   calculated with linear interpolation by nearest values in scale.
--   Example:
--   
--   <pre>
--   s = Scale f0 d intervals
--   </pre>
--   
--   Here scale <tt>s</tt> defines 2D grid that mapps center point <tt>(0,
--   0)</tt> to frequency <tt>f0</tt> <a>Hz</a>. Value <tt>d</tt> is octave
--   interval. Octave interval is divided on steps. Steps are
--   <a>Interval</a> s from base frequency <tt>f0</tt> to desired
--   frequency. Let's define equal temperament scale:
--   
--   <pre>
--   eqt = Scale c1 2 $ Vector.fromList $ (map ((2 **) . (/12)) [0..11])
--   </pre>
data Scale
Scale :: Hz -> Interval -> Vector Interval -> Scale
scaleBase :: Scale -> Hz
scaleOctave :: Scale -> Interval
scaleSteps :: Scale -> Vector Interval

-- | <a>Scale</a> constructor.
fromIntervals :: Interval -> [Interval] -> (Hz -> Scale)

-- | Gives scale multiplier
scaleStep :: Scale -> Int -> Interval

-- | Gives number of steps in one octave.
scaleLength :: Scale -> Int

-- | <a>Pitch</a> can be used alongside with many other parameters (they
--   can define timbre or loudness). Class <a>PitchLike</a> provides
--   getters and setters for data types that contain value of type
--   <a>Pitch</a>. In <a>Temporal.Music.Score</a> module you can find many
--   functions that are defined in terms of this class. Once you have
--   chosen some note representation you can make an instance for it and
--   use all pitch-modifiers.
class PitchLike a
setPitch :: PitchLike a => Pitch -> a -> a
getPitch :: PitchLike a => a -> Pitch

-- | Pitch modifier.
mapPitch :: PitchLike a => (Pitch -> Pitch) -> a -> a

-- | Calculates cycles per second for a pitch.
absPitch :: PitchLike a => a -> Hz

-- | Calculates position on tone plane for value of type <a>Pitch</a>.
pitchAsDouble :: Pitch -> Double

-- | Scale value on doubles
scaleAt :: Scale -> Double -> Hz
instance Show Scale
instance Eq Scale
instance Show Pitch
instance Eq Pitch
instance PitchLike Pitch
instance Default Scale
instance Default Pitch


-- | Composition and control.
module Temporal.Music.Score

-- | Duration.
type Dur = Double

-- | Instances
--   
--   <ul>
--   <li><a>Functor</a> <a>Score</a></li>
--   <li><a>Foldable</a> <a>Score</a></li>
--   <li><a>Monoid</a> <tt>(</tt><a>Score</a> <tt>a)</tt></li>
--   </ul>
type Score a = Track Double a

-- | Constant time events. Value <tt>a</tt> starts at some time and lasts
--   for some time.
data Event t a :: * -> * -> *
Event :: t -> t -> a -> Event t a
eventStart :: Event t a -> t
eventDur :: Event t a -> t
eventContent :: Event t a -> a

-- | End point of event (start time plus duration).
eventEnd :: Num t => Event t a -> t

-- | Tests if given <a>Event</a> happens between two time stamps.
within :: Real t => t -> t -> Event t a -> Bool

-- | <a>temp</a> constructs just an event. Value of type <tt>a</tt> lasts
--   for one time unit and starts at zero.
temp :: a -> Score a

-- | Empty <a>Score</a> that lasts for some time.
rest :: Dur -> Score a

-- | Stretches <a>Score</a> in time domain.
str :: Dur -> Score a -> Score a

-- | Delays all events by given duration.
del :: Dur -> Score a -> Score a

-- | Reversing the scores
reflect :: Score a -> Score a

-- | Infix <a>del</a> function.
(+|) :: Dur -> Score a -> Score a

-- | Infix <a>str</a> function.
(*|) :: Dur -> Score a -> Score a

-- | Parallel composition. Play two scores simultaneously.
(=:=) :: Score a -> Score a -> Score a

-- | Sequent composition. Play first score then second.
(+:+) :: Score a -> Score a -> Score a

-- | Turncating parallel composition. Total duration equals to minimum of
--   the two scores. All events that goes beyond the lmimt are dropped.
(=:/) :: Score a -> Score a -> Score a

-- | Sequent composition on list of scores.
mel :: [Score a] -> Score a

-- | Parallel composition on list of scores.
har :: [Score a] -> Score a

-- | Turncating parallel composition on list of scores.
harT :: [Score a] -> Score a

-- | Analog of <a>replicate</a> function for scores. Replicated scores are
--   played sequentially.
loop :: Int -> Score a -> Score a

-- | After this transformation events last longer by some constant amount
--   of time.
sustain :: Dur -> Score a -> Score a

-- | Prolongated events can not exceed total score duration. All event are
--   sustained but those that are close to end of the score are clipped. It
--   resembles sustain on piano, when score ends you release the pedal.
sustainT :: Dur -> Score a -> Score a

-- | A melody of events. Each of them lasts for one second.
melTemp :: [a] -> Score a

-- | A chord of events. Each of them lasts for one second.
harTemp :: [a] -> Score a

-- | Transforms a sequence and then applies a mel.
melMap :: (a -> Score b) -> [a] -> Score b

-- | Transforms a sequence and then applies a har.
harMap :: (a -> Score b) -> [a] -> Score b

-- | Transforms a sequence and then applies a harT.
harTMap :: (a -> Score b) -> [a] -> Score b

-- | <a>slice</a> cuts piece of value within given time interval. for
--   <tt>(<a>slice</a> t0 t1 m)</tt>, if <tt>t1 &lt; t0</tt> result is
--   reversed. If <tt>t0</tt> is negative or <tt>t1</tt> goes beyond
--   <tt><a>dur</a> m</tt> blocks of nothing inserted so that duration of
--   result equals to <tt><a>abs</a> (t0 - t1)</tt>.
slice :: Dur -> Dur -> Score a -> Score a

-- | <tt>(<a>takeS</a> t)</tt> is equivalent to <tt>(<a>slice</a> 0
--   t)</tt>.
takeS :: Dur -> Score a -> Score a

-- | <tt>(<a>dropS</a> t m)</tt> is equivalent to <tt>(<a>slice</a> t (dur
--   a) a)</tt>.
dropS :: Dur -> Score a -> Score a

-- | Filter score.
filterEvents :: (Event Dur a -> Bool) -> Score a -> Score a

-- | General mapping. Mapps not only values but events.
mapEvents :: (Event Dur a -> Event Dur b) -> Score a -> Score b

-- | Mapps values and time stamps.
tmap :: (Event Dur a -> b) -> Score a -> Score b

-- | Relative tmap. Time values are normalized by argument's duration.
tmapRel :: (Event Dur a -> b) -> Score a -> Score b

-- | Calculates duration.
dur :: Score a -> Dur

-- | Gets all recordered events.
render :: Score a -> [Event Dur a]

-- | Shifts all events so that minimal start time equals to zero if first
--   event has negative start time.
alignByZero :: Real t => [Event t a] -> [Event t a]

-- | Sorts all events by start time.
sortEvents :: Ord t => [Event t a] -> [Event t a]

-- | Linear interpolation. Can be useful with <a>mapEvents</a> for envelope
--   changes.
--   
--   <pre>
--   linfun [a, da, b, db, c, ... ]
--   </pre>
--   
--   <tt>a, b, c ...</tt> - values
--   
--   <tt>da, db, ...</tt> - duration of segments
linfun :: (Ord t, Fractional t) => [t] -> t -> t

-- | With <a>linfunRel</a> you can make linear interpolation function that
--   has equal distance between points. First argument gives total length
--   of the interpolation function and second argument gives list of
--   values. So call
--   
--   <pre>
--   linfunRel dur [a1, a2, a3, ..., aN]
--   </pre>
--   
--   is equivalent to:
--   
--   <pre>
--   linfun [a1, dur/N, a2, dur/N, a3, ..., dur/N, aN]
--   </pre>
linfunRel :: (Ord t, Fractional t) => t -> [t] -> t -> t

-- | Synonym for method <a>mempty</a>.
nil :: Monoid a => a

-- | Sets diapason to specified value.
setDiap :: VolumeLike a => (Double, Double) -> Score a -> Score a

-- | Relative update of diapason value in decibels, (0, 1) turns diapason
--   interval into itself.
setDiapRel :: VolumeLike a => (Double, Double) -> Score a -> Score a

-- | Sets level to the given value.
setLevel :: VolumeLike a => Level -> Score a -> Score a

-- | Sets accent to the given value
setAccent :: VolumeLike a => Accent -> Score a -> Score a

-- | Increases <a>Accent</a> by the given value.
accent :: VolumeLike a => Accent -> Score a -> Score a

-- | Synonym for <tt>flip setAcent</tt>
(!) :: VolumeLike a => Score a -> Accent -> Score a

-- | Input becomes louder by given number of levels.
louder :: VolumeLike a => Int -> Score a -> Score a

-- | Input becomes quieter by given number of levels.
quieter :: VolumeLike a => Int -> Score a -> Score a

-- | Input becomes one level louder.
loud :: VolumeLike a => Score a -> Score a

-- | Input becomes one level quieter.
quiet :: VolumeLike a => Score a -> Score a

-- | Accent that depends on time of note, time is relative, so <a>Score</a>
--   starts at 't = 0' and ends at 't = 1'.
withAccent :: VolumeLike a => (Dur -> Accent) -> Score a -> Score a

-- | <tt>envelopeSeg</tt> lifts function <a>linfun</a> to dynamics level
withAccentSeg :: VolumeLike a => [Double] -> Score a -> Score a

-- | <tt>envelopeRel</tt> lifts function <a>linfunRel</a> to dynamics level
withAccentRel :: VolumeLike a => [Accent] -> Score a -> Score a

-- | Sets new scale
setScale :: PitchLike a => Scale -> Score a -> Score a

-- | Sets bend value
setBend :: PitchLike a => Bend -> Score a -> Score a

-- | Sets step value
setStep :: PitchLike a => Step -> Score a -> Score a

-- | Transposition. Increases (octave, step) coordinate by given number of
--   steps.
step :: PitchLike a => Int -> Score a -> Score a

-- | Increases <a>Bend</a> by given value.
bend :: PitchLike a => Bend -> Score a -> Score a

-- | Transposition by given number of octaves.
lower :: PitchLike a => Int -> Score a -> Score a

-- | Transposition by given number of octaves.
higher :: PitchLike a => Int -> Score a -> Score a

-- | One octave lower.
low :: PitchLike a => Score a -> Score a

-- | One octave higher.
high :: PitchLike a => Score a -> Score a
l' :: PitchLike a => Score a -> Score a
ll' :: PitchLike a => Score a -> Score a
hh' :: PitchLike a => Score a -> Score a
h' :: PitchLike a => Score a -> Score a

-- | Shortcut for <a>rest</a>
r :: Dur -> Score a

-- | Synonym to <tt><a>str</a> (3/2)</tt>
dot :: Score a -> Score a

-- | double <a>dot</a>, str with 1.75
ddot :: Score a -> Score a

-- | Means 'three notes'. Plays three notes as fast as two.
trn :: Score a -> Score a

-- | Sets tempo in beats per minute, if 1 <a>Dur</a> is equal to 1 second
--   before transformation.
bpm :: Dur -> (Score a -> Score a)
bn :: Score a -> Score a
wn :: Score a -> Score a
hn :: Score a -> Score a
qn :: Score a -> Score a
en :: Score a -> Score a
sn :: Score a -> Score a
tn :: Score a -> Score a
dbn :: Score a -> Score a
dwn :: Score a -> Score a
dhn :: Score a -> Score a
dqn :: Score a -> Score a
den :: Score a -> Score a
dsn :: Score a -> Score a
dtn :: Score a -> Score a
bnr :: Score a
wnr :: Score a
hnr :: Score a
qnr :: Score a
enr :: Score a
snr :: Score a
tnr :: Score a
dbnr :: Score a
dwnr :: Score a
dhnr :: Score a
dqnr :: Score a
denr :: Score a
dsnr :: Score a
dtnr :: Score a

-- | Deprecated in favour of <tt>mel</tt>.

-- | <i>Deprecated: Use mel</i>
line :: [Score a] -> Score a

-- | Deprecated in favour of <tt>har</tt>.

-- | <i>Deprecated: Use har</i>
chord :: [Score a] -> Score a

-- | Deprecated in favour of <tt>del</tt>.

-- | <i>Deprecated: Use del</i>
delay :: Double -> Score a -> Score a

-- | Deprecated in favour of <tt>str</tt>.

-- | <i>Deprecated: Use str</i>
stretch :: Double -> Score a -> Score a


-- | This module gives an example of complete musical structure. It defines
--   the notion of note.
module Temporal.Music.Note

-- | <a>Note</a> has volume, pitch and some timbral paramters.
data Note a
Note :: Volume -> Pitch -> Maybe a -> Note a
noteVolume :: Note a -> Volume
notePitch :: Note a -> Pitch
noteParam :: Note a -> Maybe a

-- | Constructs default <a>Note</a> with given step value.
nx :: Step -> Score (Note a)
mapNoteParam :: (Maybe a -> Maybe b) -> Note a -> Note b

-- | <a>Drum</a> has only pitch and some timbral paramters.
data Drum a
Drum :: Volume -> Maybe a -> Drum a
drumVolume :: Drum a -> Volume
drumParam :: Drum a -> Maybe a

-- | Constructs drum note with given accent. Level is set to the default
--   value.
bam :: Accent -> Score (Drum a)
mapDrumParam :: (Maybe a -> Maybe b) -> Drum a -> Drum b
n0 :: Score (Note a)
n1 :: Score (Note a)
n2 :: Score (Note a)
n3 :: Score (Note a)
n4 :: Score (Note a)
n5 :: Score (Note a)
n6 :: Score (Note a)
n7 :: Score (Note a)
n8 :: Score (Note a)
n9 :: Score (Note a)
n10 :: Score (Note a)
n11 :: Score (Note a)
n12 :: Score (Note a)
n13 :: Score (Note a)
n14 :: Score (Note a)
n15 :: Score (Note a)
n16 :: Score (Note a)
n17 :: Score (Note a)
n18 :: Score (Note a)
n19 :: Score (Note a)
n20 :: Score (Note a)
n21 :: Score (Note a)
n22 :: Score (Note a)
n23 :: Score (Note a)
bd :: Accent -> Score (Drum a)
wd :: Accent -> Score (Drum a)
hd :: Accent -> Score (Drum a)
qd :: Accent -> Score (Drum a)
ed :: Accent -> Score (Drum a)
sd :: Accent -> Score (Drum a)
td :: Accent -> Score (Drum a)
dbd :: Accent -> Score (Drum a)
dwd :: Accent -> Score (Drum a)
dhd :: Accent -> Score (Drum a)
dqd :: Accent -> Score (Drum a)
ded :: Accent -> Score (Drum a)
dsd :: Accent -> Score (Drum a)
dtd :: Accent -> Score (Drum a)
instance Show a => Show (Note a)
instance Eq a => Eq (Note a)
instance Show a => Show (Drum a)
instance Eq a => Eq (Drum a)
instance Default (Drum a)
instance VolumeLike (Drum a)
instance Functor Drum
instance Default (Note a)
instance VolumeLike (Note a)
instance PitchLike (Note a)
instance Functor Note


-- | Specific scales. Scale constructor makes scale that starts at the
--   given frequency.
module Temporal.Music.Scales

-- | 3-limit basis <tt>(2, 3/2)</tt>
ji3 :: (Int, Int) -> Interval

-- | 5-limit basis <tt>(2, 3/2, 5/4)</tt>
ji5 :: (Int, Int, Int) -> Interval

-- | 7-limit basis <tt>(2, 3/2, 5/4, 7/6)</tt>
ji7 :: (Int, Int, Int, Int) -> Interval

-- | pythagorean scale
pyth :: Hz -> Scale

-- | hindemithean scale with gb for tritone
hindGb :: Hz -> Scale

-- | hindemithean scale with fs for tritone
hindFs :: Hz -> Scale

-- | just Bohlen-Pierce scale
justBP :: Hz -> Scale

-- | Harry Partch's 43-tone scale
partchean :: Hz -> Scale

-- | Chinese Lu 12-tone scale
luScale :: Hz -> Scale

-- | Wendy Carlos super just 12-tone scale
superJust :: Hz -> Scale

-- | Wendy Carlos harmonic 12-tone scale
harmonicJust :: Hz -> Scale

-- | Indian Sruti 22-tone scale
sruti :: Hz -> Scale

-- | 12 tone equal temperament scale
eqt :: Hz -> Scale

-- | general equal temperament scale
eqts :: Hz -> Scale

-- | equal Bohlen-Pierce scale
eqBP :: Hz -> Scale

-- | hindemithean scale with mean of fs and gb for tritone
hind :: Hz -> Scale
minor5 :: Scale -> Scale
major5 :: Scale -> Scale
bluesMinor5 :: Scale -> Scale
bluesMajor5 :: Scale -> Scale
egyptian5 :: Scale -> Scale
major :: Scale -> Scale
minor :: Scale -> Scale
ionian :: Scale -> Scale
dorian :: Scale -> Scale
phrygian :: Scale -> Scale
lydian :: Scale -> Scale
mixolydian :: Scale -> Scale
aeolian :: Scale -> Scale
locrian :: Scale -> Scale

module Temporal.Music
