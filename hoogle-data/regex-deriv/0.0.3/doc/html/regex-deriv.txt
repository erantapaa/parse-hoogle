-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Replaces/Enhances Text.Regex. Implementing regular expression matching using Bzozoski's Deriviative
--   
--   Regex algorithm implementation using derivatives.
@package regex-deriv
@version 0.0.3

module Text.Regex.Deriv.ExtPattern

-- | The external pattern syntax (ERE syntax)
data EPat
EEmpty :: EPat

-- | non marking group (?: re )
EGroupNonMarking :: EPat -> EPat

-- | the group ( re )
EGroup :: EPat -> EPat

-- | the union re|re
EOr :: [EPat] -> EPat

-- | the concantenation rere
EConcat :: [EPat] -> EPat

-- | the option re?, the last boolean flag indicates whether it is greedy
EOpt :: EPat -> Bool -> EPat

-- | the plus re+
EPlus :: EPat -> Bool -> EPat

-- | the star re*
EStar :: EPat -> Bool -> EPat

-- | re{1:10}
EBound :: EPat -> Int -> (Maybe Int) -> Bool -> EPat

-- | the ^ NOTE:shouldn't this must be top level?
ECarat :: EPat

-- | the $
EDollar :: EPat

-- | the any char .
EDot :: EPat

-- | the character class [ a-z ]
EAny :: [Char] -> EPat

-- | the negative character class [^a-z]
ENoneOf :: [Char] -> EPat

-- | backslash char
EEscape :: Char -> EPat

-- | the non-escaped char
EChar :: Char -> EPat

-- | Function <a>hasGroup</a> tests whether an external pattern has ( ... )
--   (i.e. variable patterns in the internal pattern)
hasGroup :: EPat -> Bool
instance Show EPat

module Text.Regex.Deriv.Word

-- | the Word type class
class Word a
uncons :: Word a => a -> Maybe (Char, a)
take :: Word a => Int -> a -> a
drop :: Word a => Int -> a -> a
empty :: Word a => a
reverse :: Word a => a -> a
append :: Word a => a -> a -> a
length :: Word a => a -> Int


-- | A module that implements a dictionary/hash table
module Text.Regex.Deriv.Dictionary
class Key a
hash :: Key a => a -> [Int]
newtype Dictionary a
Dictionary :: (Trie a) -> Dictionary a
primeL :: Int
primeR :: Int
empty :: Dictionary a
insert :: Key k => k -> a -> Dictionary a -> Dictionary a
insertNotOverwrite :: Key k => k -> a -> Dictionary a -> Dictionary a
lookup :: Key k => k -> Dictionary a -> Maybe a
lookupAll :: Key k => k -> Dictionary a -> [a]
member :: Key k => k -> Dictionary a -> Bool
fromList :: Key k => [(k, a)] -> Dictionary a
fromListNotOverwrite :: Key k => [(k, a)] -> Dictionary a

-- | the dictionary (k,a) version of elem
update :: Key k => k -> a -> Dictionary a -> Dictionary a
isIn :: (Key k, Eq k) => k -> Dictionary (k, a) -> Bool
nub :: (Key k, Eq k) => [k] -> [k]
nubSub :: (Key k, Eq k) => [k] -> Dictionary (k, ()) -> [k]
data Trie a
Trie :: ![a] -> !(IntMap (Trie a)) -> Trie a
emptyTrie :: Trie a
insertTrie :: Bool -> [Int] -> a -> Trie a -> Trie a
lookupTrie :: [Int] -> Trie a -> Maybe (Trie a)
updateTrie :: [Int] -> a -> Trie a -> Trie a
instance Key a => Key [a]
instance (Key a, Key b, Key c) => Key (a, b, c)
instance (Key a, Key b) => Key (a, b)
instance Key Char
instance Key Int

module Text.Regex.Deriv.Pretty
class Pretty a
pretty :: Pretty a => a -> String


-- | this module contains the defs of common data types and type classes
module Text.Regex.Deriv.Common

-- | (sub)words represent by range type Range = (Int,Int)
data Range
Range :: !Int -> !Int -> Range
range :: Int -> Int -> Range
minRange :: (a, b) -> a
maxRange :: (a, b) -> b

-- | a character and its index (position)
type Letter = (Char, Int)

-- | test for 'epsilon in a' epsilon-possession
class PosEpsilon a
posEpsilon :: PosEpsilon a => a -> Bool

-- | test for epsilon == a
class IsEpsilon a
isEpsilon :: IsEpsilon a => a -> Bool

-- | test for phi == a
class IsPhi a
isPhi :: IsPhi a => a -> Bool
class Simplifiable a
simplify :: Simplifiable a => a -> a
my_hash :: Int -> Char -> Int
my_lookup :: Int -> Char -> IntMap [Int] -> [Int]

-- | The greediness flag
data GFlag

-- | greedy
Greedy :: GFlag

-- | not greedy
NotGreedy :: GFlag
class IsGreedy a
isGreedy :: IsGreedy a => a -> Bool

-- | remove duplications in a list of pairs, using the first components as
--   key.
nub2 :: [(Int, a)] -> [(Int, a)]
nub3 :: [(Int, a, Int)] -> [(Int, a, Int)]
preBinder :: Int
preBinder_ :: Int
subBinder :: Int
mainBinder :: Int
instance Show Range
instance Ord Range
instance Eq GFlag
instance Show GFlag
instance Eq Range

module Text.Regex.Deriv.RE

-- | data type of the regular expresions
data RE
Phi :: RE

-- | an empty exp
Empty :: RE

-- | a literal / a character
L :: Char -> RE

-- | a choice exp 'r1 + r2'
Choice :: [RE] -> GFlag -> RE

-- | a pair exp '(r1,r2)'
Seq :: RE -> RE -> RE

-- | a kleene's star exp 'r*'
Star :: RE -> GFlag -> RE

-- | .
Any :: RE

-- | excluding characters e.g. [^abc]
Not :: [Char] -> RE

-- | function <a>resToRE</a> sums up a list of regular expressions with the
--   choice operation.
resToRE :: [RE] -> RE

-- | function <a>partDeriv</a> implements the partial derivative operations
--   for regular expressions. We don't pay attention to the greediness flag
--   here.
partDeriv :: RE -> Char -> [RE]
partDerivSub :: RE -> Char -> [RE]

-- | function <a>sigmaRE</a> returns all characters appearing in a reg exp.
sigmaRE :: RE -> [Char]
sigmaREsub :: RE -> [Char]
instance Simplifiable RE
instance IsPhi RE
instance IsEpsilon RE
instance PosEpsilon RE
instance Key RE
instance IsGreedy RE
instance Show RE
instance Ord RE
instance Eq RE


-- | This module defines the data type of internal regular expression
--   pattern, | as well as the partial derivative operations for regular
--   expression patterns.
module Text.Regex.Deriv.IntPattern

-- | regular expression patterns
data Pat

-- | variable pattern
PVar :: Int -> [Range] -> Pat -> Pat

-- | pattern without binder
PE :: [RE] -> Pat

-- | pair pattern
PPair :: Pat -> Pat -> Pat

-- | choice pattern
PChoice :: [Pat] -> GFlag -> Pat

-- | star pattern
PStar :: Pat -> GFlag -> Pat

-- | plus pattern, it is used internally to indicate that it is unrolled
--   from a PStar
PPlus :: Pat -> Pat -> Pat

-- | empty pattern, it is used intermally to indicate that mkEmpty function
--   has been applied.
PEmpty :: Pat -> Pat

-- | function <a>strip</a> strips away the bindings from a pattern
strip :: Pat -> RE

-- | The <a>Binder</a> type denotes a set of (pattern var * range) pairs
--   type Binder = [(Int, [Range])]
type Binder = IntMap [Range]

-- | Function <a>toBinder</a> turns a pattern into a binder
toBinder :: Pat -> Binder
listifyBinder :: Binder -> [(Int, [Range])]
class Key a
hash :: Key a => a -> [Int]
instance IsPhi Pat
instance IsEpsilon Pat
instance Simplifiable Pat
instance IsGreedy Pat
instance Key Pat
instance Show Pat
instance Pretty Pat
instance Pretty a => Pretty [a]
instance Eq Pat


-- | A translation schema from the external syntax (ERE) to our interal
--   syntax (xhaskell style pattern)
module Text.Regex.Deriv.Translate

-- | Translating external pattern to internal pattern
translate :: EPat -> Pat

-- | for posix
translatePosix :: EPat -> (Pat, IntMap ())
instance Show TState

module Text.Regex.Deriv.Parse
parsePat :: String -> Either ParseError Pat

-- | Return either a parse error or an external pattern
parseEPat :: String -> Either ParseError (EPat, EState)
parsePatPosix :: String -> Either ParseError (Pat, IntMap ())

module Text.Regex.Deriv.ByteString.Posix

-- | The Deriv backend spepcific <a>Regex</a> type | the IntMap keeps track
--   of the auxillary binder generated because of posix matching, i.e. all
--   sub expressions need to be tag | the FollowBy keeps track of the order
--   of the pattern binder
type Regex = (DfaTable, SBinder, SBinder -> [Env], [Int], FollowBy, IntMap ())

-- | Control whether the pattern is multiline or case-sensitive like
--   Text.Regex and whether to capture the subgroups (1, 2, etc). Controls
--   enabling extra anchor syntax.
data CompOption
CompOption :: Bool -> Bool -> Bool -> Bool -> Bool -> CompOption

-- | True in blankCompOpt and defaultCompOpt
caseSensitive :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt. Compile for
--   newline-sensitive matching. <a>By default, newline is a completely
--   ordinary character with no special meaning in either REs or strings.
--   With this flag, inverted bracket expressions and . never match
--   newline, a ^ anchor matches the null string after any newline in the
--   string in addition to its normal function, and the $ anchor matches
--   the null string before any newline in the string in addition to its
--   normal function.</a>
multiline :: CompOption -> Bool

-- | True (and therefore Right associative) in blankCompOpt and
--   defaultCompOpt
rightAssoc :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt. Add the extended
--   non-POSIX syntax described in <a>Text.Regex.TDFA</a> haddock
--   documentation.
newSyntax :: CompOption -> Bool

-- | False by default. This is POSIX correct but it takes space and is
--   slower. Setting this to true will improve performance, and should be
--   done if you plan to set the captureGroups execoption to False.
lastStarGreedy :: CompOption -> Bool
data ExecOption
ExecOption :: Bool -> ExecOption

-- | True by default. Set to False to improve speed (and space).
captureGroups :: ExecOption -> Bool
defaultCompOpt :: RegexOptions regex compOpt execOpt => compOpt
defaultExecOpt :: RegexOptions regex compOpt execOpt => execOpt
compile :: CompOption -> ExecOption -> ByteString -> Either String Regex
execute :: Regex -> ByteString -> Either String (Maybe Env)
regexec :: Regex -> ByteString -> Either String (Maybe (ByteString, ByteString, ByteString, [ByteString]))
instance Show SBinder
instance Read CompOption
instance Show CompOption
instance Read ExecOption
instance Show ExecOption
instance RegexLike Regex String
instance RegexLike Regex ByteString
instance RegexOptions Regex CompOption ExecOption
instance Ord Pat

module Text.Regex.Deriv.ByteString

-- | The Deriv backend spepcific <a>Regex</a> type | the IntMap keeps track
--   of the auxillary binder generated because of posix matching, i.e. all
--   sub expressions need to be tag | the FollowBy keeps track of the order
--   of the pattern binder
type Regex = (DfaTable, SBinder, SBinder -> [Env], [Int], FollowBy, IntMap ())

-- | Control whether the pattern is multiline or case-sensitive like
--   Text.Regex and whether to capture the subgroups (1, 2, etc). Controls
--   enabling extra anchor syntax.
data CompOption
CompOption :: Bool -> Bool -> Bool -> Bool -> Bool -> CompOption

-- | True in blankCompOpt and defaultCompOpt
caseSensitive :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt. Compile for
--   newline-sensitive matching. <a>By default, newline is a completely
--   ordinary character with no special meaning in either REs or strings.
--   With this flag, inverted bracket expressions and . never match
--   newline, a ^ anchor matches the null string after any newline in the
--   string in addition to its normal function, and the $ anchor matches
--   the null string before any newline in the string in addition to its
--   normal function.</a>
multiline :: CompOption -> Bool

-- | True (and therefore Right associative) in blankCompOpt and
--   defaultCompOpt
rightAssoc :: CompOption -> Bool

-- | False in blankCompOpt, True in defaultCompOpt. Add the extended
--   non-POSIX syntax described in <a>Text.Regex.TDFA</a> haddock
--   documentation.
newSyntax :: CompOption -> Bool

-- | False by default. This is POSIX correct but it takes space and is
--   slower. Setting this to true will improve performance, and should be
--   done if you plan to set the captureGroups execoption to False.
lastStarGreedy :: CompOption -> Bool
data ExecOption
ExecOption :: Bool -> ExecOption

-- | True by default. Set to False to improve speed (and space).
captureGroups :: ExecOption -> Bool
defaultCompOpt :: RegexOptions regex compOpt execOpt => compOpt
defaultExecOpt :: RegexOptions regex compOpt execOpt => execOpt
compile :: CompOption -> ExecOption -> ByteString -> Either String Regex
execute :: Regex -> ByteString -> Either String (Maybe Env)
regexec :: Regex -> ByteString -> Either String (Maybe (ByteString, ByteString, ByteString, [ByteString]))
