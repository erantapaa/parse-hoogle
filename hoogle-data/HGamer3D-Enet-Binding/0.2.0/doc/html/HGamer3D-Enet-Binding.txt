-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Windows Game Engine for the Haskell Programmer - Enet Bindings
--   
--   HGamer3D is a game engine for developing 3D games in the programming
--   language Haskell. The game engine uses available libraries for 3D
--   graphics, sound, input device handling, gui programming and other
--   areas and make those functions available for the Haskell programmer by
--   providing a Haskell API on top of that. HGamer3D is available on
--   Windows only.
@package HGamer3D-Enet-Binding
@version 0.2.0

module HGamer3D.Bindings.Enet.StructHG3DClass
type HG3DClassPtr = Ptr (HG3DClass)
withHG3DClass :: HG3DClass -> (HG3DClassPtr -> IO b) -> IO b
peekHG3DClass :: HG3DClassPtr -> IO HG3DClass

module HGamer3D.Bindings.Enet.Utils
withCStringLenIntConv :: Num n => String -> ((CString, n) -> IO a) -> IO a
peekCStringLenIntConv :: Integral n => (CString, n) -> IO String
withIntConv :: (Storable b, Integral a, Integral b) => a -> (Ptr b -> IO c) -> IO c
withFloatConv :: (Storable b, RealFloat a, RealFloat b) => a -> (Ptr b -> IO c) -> IO c
peekIntConv :: (Storable a, Integral a, Integral b) => Ptr a -> IO b
peekFloatConv :: (Storable a, RealFloat a, RealFloat b) => Ptr a -> IO b
withCUString :: String -> (Ptr b -> IO a) -> IO a
peekCUString :: Ptr a -> IO String
alloc64k :: (Ptr a -> IO b) -> IO b
cIntFromEnum :: Enum a => a -> CInt
cIntToEnum :: Enum a => CInt -> a
withBoolUtil :: (Integral a, Storable a) => Bool -> (Ptr a -> IO b) -> IO b
peekBoolUtil :: (Integral a, Storable a) => Ptr a -> IO Bool
withEnumUtil :: (Enum a, Integral b, Storable b) => a -> (Ptr b -> IO c) -> IO c
peekEnumUtil :: (Enum a, Integral b, Storable b) => Ptr b -> IO a

-- | Integral conversion
cIntConv :: (Integral a, Integral b) => a -> b

-- | Floating conversion
cFloatConv :: (RealFloat a, RealFloat b) => a -> b

-- | Convert a C enumeration to Haskell.
cToEnum :: (Integral i, Enum e) => i -> e

-- | Convert a Haskell enumeration to C.
cFromEnum :: (Enum e, Integral i) => e -> i

module HGamer3D.Bindings.Enet.ClassPtr
type ClassEnetClient = Ptr (())
type ClassEnetPacket = Ptr (())
type ClassEnetServer = Ptr (())
type ClassEnet = Ptr (())

module HGamer3D.Bindings.Enet.ClassEnet
new :: IO (HG3DClass)
delete :: HG3DClass -> IO ()
createServer :: Int -> IO (HG3DClass)
createClient :: IO (HG3DClass)
new'_ :: (HG3DClassPtr) -> (IO ())
delete'_ :: (HG3DClassPtr) -> (IO ())
createServer'_ :: CInt -> ((HG3DClassPtr) -> (IO ()))
createClient'_ :: (HG3DClassPtr) -> (IO ())

module HGamer3D.Bindings.Enet.ClassEnetClient
delete :: HG3DClass -> IO ()
connect :: HG3DClass -> String -> Int -> IO (Bool)
disconnect :: HG3DClass -> IO (Bool)
serve :: HG3DClass -> Int -> IO (Bool)
getPacket :: HG3DClass -> IO (HG3DClass)
send :: HG3DClass -> String -> Int -> IO ()
delete'_ :: (HG3DClassPtr) -> (IO ())
connect'_ :: (HG3DClassPtr) -> ((Ptr CChar) -> (CInt -> ((Ptr CInt) -> (IO ()))))
disconnect'_ :: (HG3DClassPtr) -> ((Ptr CInt) -> (IO ()))
serve'_ :: (HG3DClassPtr) -> (CInt -> ((Ptr CInt) -> (IO ())))
getPacket'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
send'_ :: (HG3DClassPtr) -> ((Ptr CChar) -> (CInt -> (IO ())))

module HGamer3D.Bindings.Enet.ClassEnetPacket
getData :: HG3DClass -> IO (String)
getPeer :: HG3DClass -> IO (String)
getChannel :: HG3DClass -> IO (Int)
delete :: HG3DClass -> IO ()
getData'_ :: (HG3DClassPtr) -> ((Ptr CChar) -> (IO ()))
getPeer'_ :: (HG3DClassPtr) -> ((Ptr CChar) -> (IO ()))
getChannel'_ :: (HG3DClassPtr) -> ((Ptr CInt) -> (IO ()))
delete'_ :: (HG3DClassPtr) -> (IO ())

module HGamer3D.Bindings.Enet.ClassEnetServer
delete :: HG3DClass -> IO ()
serve :: HG3DClass -> Int -> IO (Bool)
getPacket :: HG3DClass -> IO (HG3DClass)
send :: HG3DClass -> String -> String -> Int -> IO ()
delete'_ :: (HG3DClassPtr) -> (IO ())
serve'_ :: (HG3DClassPtr) -> (CInt -> ((Ptr CInt) -> (IO ())))
getPacket'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
send'_ :: (HG3DClassPtr) -> ((Ptr CChar) -> ((Ptr CChar) -> (CInt -> (IO ()))))
