-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A quadratic diophantine equation solving library.
--   
@package diophantine
@version 0.2.1.0


-- | WARNING: The internal workings of solve. These functions use error,
--   and should only be called directly if you know the type of the
--   equation ahead of time. For example, solveLinear will try to resolve a
--   GeneralEquation into a linear one if possible, but if you pass a
--   GeneralEquation of a parabolic form, then it will error.
module Math.Diophantine.Internal

-- | A way to setup an equation in the form of:
--   
--   <pre>
--   ax^2 + bxy + cy^2 + dx + ey + f = 0
--   </pre>
data Equation

-- | A general quadratic diophantine equation.
GeneralEquation :: Z -> Z -> Z -> Z -> Z -> Z -> Equation

-- | dx + ey + f = 0
LinearEquation :: Z -> Z -> Z -> Equation

-- | bxy + dx +ey + f = 0
SimpleHyperbolicEquation :: Z -> Z -> Z -> Z -> Equation

-- | Eliptical equations.
ElipticalEquation :: Z -> Z -> Z -> Z -> Z -> Z -> Equation

-- | Parabolic equations.
ParabolicEquation :: Z -> Z -> Z -> Z -> Z -> Z -> Equation

-- | Hyperbolic equations.
HyperbolicEquation :: Z -> Z -> Z -> Z -> Z -> Z -> Equation

-- | The results of attempting to solve an <a>Equation</a>.
data Solution

-- | All Integer pairs satisfy the equation.
ZxZ :: Solution

-- | For all (x,y) in ZxZ
NoSolutions :: Solution

-- | The set of pairs (x,y) that satisfy the equation. These are not in any
--   particular order, and may contain duplicates.
SolutionSet :: [(Z, Z)] -> Solution

-- | An alias for <a>Integer</a>, used to shorten type signatures.
type Z = Integer

-- | Merges two <a>Solution</a>s into one.
mergeSolutions :: Solution -> Solution -> Solution

-- | Detirmines what kind of equation form a <a>GeneralEquation</a> fits.
--   If you pass a non <a>GeneralEquation</a> to this function, it is the
--   same as id.
specializeEquation :: Equation -> Equation

-- | Solves for <a>Equation</a>s in the form of dx + ey + f = 0
--   
--   WARNING: This expects that the <a>Equation</a> is actually a
--   <a>LinearEquation</a>; it is safer to just call solve unless you have
--   already verified that the equation is linear.
solveLinear :: Equation -> Solution

-- | Solves for <a>Equation</a>s in the form of bxy + dx + ey + f = 0
--   
--   WARNING: This expects that the <a>Equation</a> is actually a
--   <a>SimpleHyperbolicEquation</a>; it is safer to just call solve unless
--   you have already verified that the equation is simple hyperbolic.
solveSimpleHyperbolic :: Equation -> Solution

-- | Solves for <a>Equation</a>s in the form of ax^2 + bxy + cy^2 + dx + ey
--   + f = 0 when b^2 - 4ac &lt; 0
--   
--   WARNING: This expects that the <a>Equation</a> is actually an
--   <a>ElipticalEquation</a>; it is safer to just call solve unless you
--   have already verified that the equation is eliptical.
solveEliptical :: Equation -> Solution

-- | Solves for <a>Equation</a>s in the form of ax^2 + bxy + cy^2 + dx + ey
--   + f = 0 when b^2 - 4ac = 0
--   
--   WARNING: This expects that the <a>Equation</a> is actually a
--   <a>ParabolicEquation</a>; it is safer to just call solve unless you
--   have already verified that the equation is parabolic.
solveParabolic :: Equation -> Solution
instance Eq Solution
instance Show Equation
instance Show Solution


-- | A module for solving quadratic diophantine equations.
module Math.Diophantine

-- | A way to setup an equation in the form of:
--   
--   <pre>
--   ax^2 + bxy + cy^2 + dx + ey + f = 0
--   </pre>
data Equation

-- | A general quadratic diophantine equation.
GeneralEquation :: Z -> Z -> Z -> Z -> Z -> Z -> Equation

-- | The results of attempting to solve an <a>Equation</a>.
data Solution

-- | All Integer pairs satisfy the equation.
ZxZ :: Solution

-- | For all (x,y) in ZxZ
NoSolutions :: Solution

-- | The set of pairs (x,y) that satisfy the equation. These are not in any
--   particular order, and may contain duplicates.
SolutionSet :: [(Z, Z)] -> Solution

-- | An alias for <a>Integer</a>, used to shorten type signatures.
type Z = Integer

-- | A way to report an error in solving.
data SolveError

-- | Represents a read error when reading the equation from a string.
SolveError :: ParseError -> SolveError

-- | The error when you try to solve a hyperbolic equation.
HyperbolicError :: SolveError

-- | The types of parse erros that can occur.
data ParseError

-- | We are only solving quadratics.
PowerOutOfBounds :: ParseError

-- | Not a valid equation type.
BadGrammar :: ParseError

-- | Reads an equation from a string returning an <a>Equation</a> or
--   <a>ParseError</a>.
readEquation :: String -> Either ParseError Equation

-- | Detirmines what kind of equation form a <a>GeneralEquation</a> fits.
--   If you pass a non <a>GeneralEquation</a> to this function, it is the
--   same as id.
specializeEquation :: Equation -> Equation

-- | Extracts the list of solution pairs from a <a>Solution</a>.
toMaybeList :: Solution -> Maybe [(Z, Z)]

-- | Merges two <a>Solution</a>s into one.
mergeSolutions :: Solution -> Solution -> Solution

-- | Determines what type of equation to solve for, and then calls the
--   appropriate solve function. Example:
--   
--   <pre>
--   &gt;&gt;&gt; solve (GeneralEquation 1 2 3 3 5 0)
--   [(-3,0),(-2,-1),(0,0),(1,-1)]
--   </pre>
solve :: Equation -> Either SolveError Solution

-- | Read an <a>Equation</a> out of a <a>String</a>, and then solve it.
--   This can fail because the string is not a valid equation.
solveString :: String -> Either SolveError Solution
instance Show SolveError
