-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Ethereum Recursive Length Prefix Encoding
--   
--   RLP, as described in the Ethereum Yellowpaper
@package ethereum-rlp
@version 0.0.1


-- | The RLP module provides a framework within which serializers can be
--   built, described in the Ethereum Yellowpaper
--   (<a>http://gavwood.com/paper.pdf</a>).
--   
--   The <a>RLPObject</a> is an intermediate data container, whose
--   serialization rules are well defined. By creating code that converts
--   from a given type to an <a>RLPObject</a>, full serialization will be
--   specified. The <a>RLPSerializable</a> class provides functions to do
--   this conversion.
module Blockchain.Data.RLP

-- | An internal representation of generic data, with no type information.
--   
--   End users will not need to directly create objects of this type (an
--   <a>RLPObject</a> can be created using <a>rlpEncode</a>), however the
--   designer of a new type will need to create conversion code by making
--   their type an instance of the RLPSerializable class.
data RLPObject
RLPScalar :: Word8 -> RLPObject
RLPString :: String -> RLPObject
RLPArray :: [RLPObject] -> RLPObject

-- | Converts objects to and from <a>RLPObject</a>s.
class RLPSerializable a
rlpDecode :: RLPSerializable a => RLPObject -> a
rlpEncode :: RLPSerializable a => a -> RLPObject

-- | Converts <a>RLPObject</a>s to bytes.
--   
--   Full serialization of an object can be obtained using <tt>rlpSerialize
--   . rlpEncode</tt>.
rlpSerialize :: RLPObject -> ByteString

-- | Converts bytes to <a>RLPObject</a>s.
--   
--   Full deserialization of an object can be obtained using <tt>rlpDecode
--   . rlpDeserialize</tt>.
rlpDeserialize :: ByteString -> RLPObject
instance Show RLPObject
instance Eq RLPObject
instance Ord RLPObject
instance RLPSerializable ByteString
instance RLPSerializable String
instance RLPSerializable Integer
instance Pretty RLPObject
