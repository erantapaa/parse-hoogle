-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Pure Haskell loader for PNG images
--   
--   This package provides a simple PNG loader for PNG images. It currently
--   supports 24bit RGB(A) images with no interlacing. This fixed version
--   is the same as pngload-0.1, but without the haskell98 dependency.
@package pngload-fixed
@version 1.0

module Codec.Image.PNG.Internal.Filters

-- | Defilter filtered PNG data (data includes scanlines prepended with
--   filter types).
defilter_scanlines_arr :: (Width, Height) -> Int -> ByteString -> IO (StorableArray (Width, Height) Word8)

module Codec.Image.PNG.Internal.CRC
update_crc :: Word32 -> ByteString -> Word32
crc :: ByteString -> Word32

module Codec.Image.PNG.Internal.Parser
type Parser = Parsec ByteString ()
word8 :: Stream ByteString m Word8 => Word8 -> ParsecT ByteString u m Word8
word16 :: Stream ByteString m Word8 => Word16 -> ParsecT ByteString u m Word16
word32 :: Stream ByteString m Word8 => Word32 -> ParsecT ByteString u m Word32
satisfy :: Stream ByteString m Word8 => (Word8 -> Bool) -> ParsecT ByteString u m Word8
anyWord8 :: Stream ByteString m Word8 => ParsecT ByteString u m Word8
anyWord16 :: Stream ByteString m Word8 => ParsecT ByteString u m Word16
anyWord32 :: Stream ByteString m Word8 => ParsecT ByteString u m Word32
string :: Stream ByteString m Word8 => ByteString -> ParsecT ByteString u m ByteString
block :: Stream ByteString m Word8 => Int -> ParsecT ByteString u m ByteString
allowedValues :: (a -> Parser a) -> [(a, b)] -> Parser b
parseFromFile :: Parser a -> FilePath -> IO (Either String a)
instance Monad m => Stream ByteString m Word8


-- | A simple, pure Haskell PNG loader. Currently supports 24bit RGB(A)
--   images with no interlacing. Also lacks support for color indexed
--   (paletted) images.
--   
--   The image is stored in a StorableArray for compatibility with OpenGL
--   (the array supports getting Ptr Word8 to the image data using
--   withStorableArray function).
module Codec.Image.PNG
data PNGImage
type Width = Word32
type Height = Word32

-- | Load a PNG file, Left value contains a description of a problem as a
--   String, if any
loadPNGFile :: FilePath -> IO (Either String PNGImage)

-- | Get dimensions of the image (in pixels)
dimensions :: PNGImage -> (Width, Height)

-- | Get image data as C-compatible StorableArray
imageData :: PNGImage -> StorableArray (Int, Int) Word8

-- | Check if the image has alpha channel
hasAlphaChannel :: PNGImage -> Bool
instance Show RawPNGChunk
instance Show ColorType
instance Eq ColorType
instance Show BitDepth
instance Eq BitDepth
instance Show CompressionMethod
instance Eq CompressionMethod
instance Show FilterMethod
instance Eq FilterMethod
instance Show InterlaceMethod
instance Eq InterlaceMethod
instance Show PNGChunk
instance Show PNGImage
