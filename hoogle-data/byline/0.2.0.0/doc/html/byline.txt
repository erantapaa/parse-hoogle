-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Library for creating command-line interfaces (colors, menus, etc.)
--   
@package byline
@version 0.2.0.0


-- | The completion types.
module System.Console.Byline.Completion

-- | A completion function modeled after the one used in Haskeline.
--   
--   <i>Warning:</i> If you're familiar with the Haskeline version of the
--   <tt>CompletionFunc</tt> type please be sure to read this description
--   carefully since the two behave differently.
--   
--   The completion function is called when the user presses the tab key.
--   The current input line is split into two parts based on where the
--   cursor is positioned. Text to the left of the cursor will be the first
--   value in the tuple and text to the right of the cursor will be the
--   second value.
--   
--   The text returned from the completion function is the text from the
--   left of the cursor which wasn't used in the completion. It should also
--   produce a list of possible <a>Completion</a> values.
--   
--   In Haskeline, some of these text values are reversed. This is
--   <i>not</i> the case in Byline.
--   
--   <i>A note about <tt>IO</tt>:</i>
--   
--   Due to the way that Byline uses Haskeline, the completion function is
--   forced to return an <tt>IO</tt> value. It would be better if it could
--   return a value in the base monad instead. Patches welcome.
type CompletionFunc = (Text, Text) -> IO (Text, [Completion])

-- | A type representing a completion match to the user's input.
data Completion
Completion :: Text -> Text -> Bool -> Completion

-- | Text to insert to the right of the cursor.
replacement :: Completion -> Text

-- | Text to display when listing all completions.
display :: Completion -> Text

-- | Whether to follow the completed word with a terminating space or close
--   existing quotes.
isFinished :: Completion -> Bool
instance Eq Completion
instance Ord Completion
instance Show Completion


-- | Color type and functions for specifying colors.
module System.Console.Byline.Color

-- | Opaque type for representing a color.
--   
--   A color can be one of the eight standard terminal colors constructed
--   with one of the named color functions (e.g., <a>black</a>, <a>red</a>,
--   etc.) or using the <a>rgb</a> function.
data Color
ColorCode :: Color -> Color
ColorRGB :: (Word8, Word8, Word8) -> Color

-- | Standard ANSI color by name.
black :: Color

-- | Standard ANSI color by name.
red :: Color

-- | Standard ANSI color by name.
green :: Color

-- | Standard ANSI color by name.
yellow :: Color

-- | Standard ANSI color by name.
blue :: Color

-- | Standard ANSI color by name.
magenta :: Color

-- | Standard ANSI color by name.
cyan :: Color

-- | Standard ANSI color by name.
white :: Color

-- | Specify a color using a RGB triplet where each component is in the
--   range <tt>[0 .. 255]</tt>. The actual rendered color will depend on
--   the terminal.
--   
--   If the terminal advertises that it supports 256 colors, the color
--   given to this function will be converted to the nearest color in the
--   216-color pallet supported by the terminal. (216 colors because the
--   first 16 are the standard colors and the last 24 are grayscale
--   entries.)
--   
--   However, if the terminal doesn't support extra colors, or doesn't have
--   a <tt>TERMINFO</tt> entry (e.g., Windows) then the nearest standard
--   color will be chosen.
--   
--   Nearest colors are calculated using their CIE distance from one
--   another.
--   
--   See also:
--   
--   <ul>
--   <li><a>http://en.wikipedia.org/wiki/ANSI_escape_code</a></li>
--   <li><a>http://en.wikipedia.org/wiki/Color_difference</a></li>
--   </ul>
rgb :: Word8 -> Word8 -> Word8 -> Color


-- | The stylized type and constructors.
module System.Console.Byline.Stylized

-- | Stylized text. Construct text with modifiers using string literals and
--   the <tt>OverloadedStrings</tt> extension and/or the <a>text</a>
--   function.
data Stylized

-- | Information about modifications made to stylized text.
data Modifier

-- | Helper function to create stylized text. If you enable the
--   <tt>OverloadedStrings</tt> extension then you can create stylized text
--   directly without using this function.
--   
--   This function is also helpful for producing stylized text from an
--   existing <tt>Text</tt> value.
text :: Text -> Stylized

-- | Map a function over stylized text. The <a>Modifier</a> type is opaque
--   so this function might not be very useful outside of the Byline
--   internals.
mapStylized :: ((Text, Modifier) -> a) -> Stylized -> [a]

-- | Constructor to modify stylized text. This function is only useful to
--   internal Byline functions.
modStylized :: Modifier -> Stylized
instance IsString Stylized
instance Monoid Stylized


-- | Modifiers for the <tt>Stylized</tt> type.
module System.Console.Byline.Modifiers

-- | Set the foreground color. For example:
--   
--   <pre>
--   "Hello World!" &lt;&gt; fg magenta
--   </pre>
fg :: Color -> Stylized

-- | Set the background color.
bg :: Color -> Stylized

-- | Produce bold text.
bold :: Stylized

-- | Produce underlined text.
underline :: Stylized


-- | Primitive operations such as printing messages and reading input.
module System.Console.Byline.Primitive

-- | Report types for the <a>report</a> function.
data ReportType

-- | Report errors with: <tt>"error: "</tt>
Error :: ReportType

-- | Report warnings with: <tt>"warning: "</tt>
Warning :: ReportType

-- | Output the stylized text to the output handle (default: stdout).
say :: MonadIO m => Stylized -> Byline m ()

-- | Like <a>say</a>, but append a newline character.
sayLn :: MonadIO m => Stylized -> Byline m ()

-- | Read input after printing the given stylized text as a prompt.
ask :: MonadIO m => Stylized -> Maybe Text -> Byline m Text

-- | Read a single character of input.
askChar :: MonadIO m => Stylized -> Byline m Char

-- | Read a password without echoing it to the terminal. If a masking
--   character is given it will replace each typed character.
askPassword :: MonadIO m => Stylized -> Maybe Char -> Byline m Text

-- | Continue to prompt for a response until a confirmation function
--   returns a valid result.
--   
--   The confirmation function receives the output from <a>ask</a> and
--   should return a <tt>Left Stylized</tt> to produce an error message
--   (printed with <a>sayLn</a>). When an acceptable answer from <a>ask</a>
--   is received, the confirmation function should return it with
--   <tt>Right</tt>.
askUntil :: MonadIO m => Stylized -> Maybe Text -> (Text -> m (Either Stylized Text)) -> Byline m Text

-- | Output stylized text with a prefix determined by <a>ReportType</a>.
report :: MonadIO m => ReportType -> Stylized -> Byline m ()

-- | Like <a>report</a>, but append a newline character.
reportLn :: MonadIO m => ReportType -> Stylized -> Byline m ()

-- | Run the given <a>Byline</a> action with a different completion
--   function.
withCompletionFunc :: MonadIO m => CompletionFunc -> Byline m a -> Byline m a


-- | Functions and types for working with menus.
module System.Console.Byline.Menu

-- | Opaque type representing a menu containing items of type <tt>a</tt>.
data Menu a

-- | A type representing the choice made by a user while working with a
--   menu.
data Choice a

-- | Menu has no items to choose from.
NoItems :: Choice a

-- | User picked a menu item.
Match :: a -> Choice a

-- | User entered text that doesn't match an item.
Other :: Text -> Choice a

-- | A function that is given the input from a user while working in a menu
--   and should translate that into a <a>Choice</a>.
--   
--   The <tt>Map</tt> contains the menu item indexes/prefixes (numbers or
--   letters) and the items themselves.
--   
--   The default matcher function allows the user to select a menu item by
--   typing its index or part of its textual representation. As long as
--   input from the user is a unique prefix of one of the menu items then
--   that item will be returned.
type Matcher a = Menu a -> Map Text a -> Text -> Choice a

-- | Create a <a>Menu</a> by giving a list of menu items and a function
--   that can convert those items into stylized text.
menu :: [a] -> (a -> Stylized) -> Menu a

-- | Change the banner of a menu. The banner is printed just before the
--   menu items are displayed.
banner :: Stylized -> Menu a -> Menu a

-- | Change the prefix function. The prefix function should generate
--   unique, stylized text that the user can use to select a menu item. The
--   default prefix function numbers the menu items starting with 1.
prefix :: (Int -> Stylized) -> Menu a -> Menu a

-- | Change the menu item suffix. It is displayed directly after the menu
--   item prefix and just before the menu item itself.
--   
--   Default: <tt>") "</tt>
suffix :: Stylized -> Menu a -> Menu a

-- | Change the <a>Matcher</a> function. The matcher function should
--   compare the user's input to the menu items and their assigned prefix
--   values and return a <a>Choice</a>.
matcher :: Matcher a -> Menu a -> Menu a

-- | Ask the user to choose an item from a menu. The menu will only be
--   shown once and the user's choice will be returned in a <a>Choice</a>
--   value.
--   
--   If you want to force the user to only choose from the displayed menu
--   items you should use <a>askWithMenuRepeatedly</a> instead.
askWithMenu :: MonadIO m => Menu a -> Stylized -> Byline m (Choice a)

-- | Like <a>askWithMenu</a> except that arbitrary input is not allowed. If
--   the user doesn't correctly select a menu item then the menu will be
--   repeated and an error message will be displayed.
askWithMenuRepeatedly :: MonadIO m => Menu a -> Stylized -> Stylized -> Byline m (Choice a)
instance Show a => Show (Choice a)

module System.Console.Byline

-- | A monad transformer that encapsulates interactive actions.
data Byline m a

-- | Execute <a>Byline</a> actions and produce a result within the base
--   monad.
--   
--   <i>A note about EOF:</i>
--   
--   If an End of File (EOF) is encountered during an input action then
--   this function will return <tt>Nothing</tt>. This can occur when the
--   user manually enters an EOF character by pressing <tt>Control-d</tt>
--   or if standard input is a file.
--   
--   This decision was made to simplify the <tt>Byline</tt> interface for
--   actions that read user input and is a typical strategy for terminal
--   applications. If this isn't desirable, you may want to break your
--   actions up into groups and call <a>runByline</a> multiple times.
runByline :: (MonadIO m, MonadMask m) => Byline m a -> m (Maybe a)

-- | Output the stylized text to the output handle (default: stdout).
say :: MonadIO m => Stylized -> Byline m ()

-- | Like <a>say</a>, but append a newline character.
sayLn :: MonadIO m => Stylized -> Byline m ()

-- | Read input after printing the given stylized text as a prompt.
ask :: MonadIO m => Stylized -> Maybe Text -> Byline m Text

-- | Read a single character of input.
askChar :: MonadIO m => Stylized -> Byline m Char

-- | Read a password without echoing it to the terminal. If a masking
--   character is given it will replace each typed character.
askPassword :: MonadIO m => Stylized -> Maybe Char -> Byline m Text

-- | Continue to prompt for a response until a confirmation function
--   returns a valid result.
--   
--   The confirmation function receives the output from <a>ask</a> and
--   should return a <tt>Left Stylized</tt> to produce an error message
--   (printed with <a>sayLn</a>). When an acceptable answer from <a>ask</a>
--   is received, the confirmation function should return it with
--   <tt>Right</tt>.
askUntil :: MonadIO m => Stylized -> Maybe Text -> (Text -> m (Either Stylized Text)) -> Byline m Text

-- | Output stylized text with a prefix determined by <a>ReportType</a>.
report :: MonadIO m => ReportType -> Stylized -> Byline m ()

-- | Like <a>report</a>, but append a newline character.
reportLn :: MonadIO m => ReportType -> Stylized -> Byline m ()

-- | Stylized text. Construct text with modifiers using string literals and
--   the <tt>OverloadedStrings</tt> extension and/or the <a>text</a>
--   function.
data Stylized

-- | Helper function to create stylized text. If you enable the
--   <tt>OverloadedStrings</tt> extension then you can create stylized text
--   directly without using this function.
--   
--   This function is also helpful for producing stylized text from an
--   existing <tt>Text</tt> value.
text :: Text -> Stylized

-- | Set the foreground color. For example:
--   
--   <pre>
--   "Hello World!" &lt;&gt; fg magenta
--   </pre>
fg :: Color -> Stylized

-- | Set the background color.
bg :: Color -> Stylized

-- | Produce bold text.
bold :: Stylized

-- | Produce underlined text.
underline :: Stylized

-- | Opaque type for representing a color.
--   
--   A color can be one of the eight standard terminal colors constructed
--   with one of the named color functions (e.g., <a>black</a>, <a>red</a>,
--   etc.) or using the <a>rgb</a> function.
data Color

-- | Standard ANSI color by name.
black :: Color

-- | Standard ANSI color by name.
red :: Color

-- | Standard ANSI color by name.
green :: Color

-- | Standard ANSI color by name.
yellow :: Color

-- | Standard ANSI color by name.
blue :: Color

-- | Standard ANSI color by name.
magenta :: Color

-- | Standard ANSI color by name.
cyan :: Color

-- | Standard ANSI color by name.
white :: Color

-- | Specify a color using a RGB triplet where each component is in the
--   range <tt>[0 .. 255]</tt>. The actual rendered color will depend on
--   the terminal.
--   
--   If the terminal advertises that it supports 256 colors, the color
--   given to this function will be converted to the nearest color in the
--   216-color pallet supported by the terminal. (216 colors because the
--   first 16 are the standard colors and the last 24 are grayscale
--   entries.)
--   
--   However, if the terminal doesn't support extra colors, or doesn't have
--   a <tt>TERMINFO</tt> entry (e.g., Windows) then the nearest standard
--   color will be chosen.
--   
--   Nearest colors are calculated using their CIE distance from one
--   another.
--   
--   See also:
--   
--   <ul>
--   <li><a>http://en.wikipedia.org/wiki/ANSI_escape_code</a></li>
--   <li><a>http://en.wikipedia.org/wiki/Color_difference</a></li>
--   </ul>
rgb :: Word8 -> Word8 -> Word8 -> Color

-- | Opaque type representing a menu containing items of type <tt>a</tt>.
data Menu a

-- | A type representing the choice made by a user while working with a
--   menu.
data Choice a

-- | Menu has no items to choose from.
NoItems :: Choice a

-- | User picked a menu item.
Match :: a -> Choice a

-- | User entered text that doesn't match an item.
Other :: Text -> Choice a

-- | Create a <a>Menu</a> by giving a list of menu items and a function
--   that can convert those items into stylized text.
menu :: [a] -> (a -> Stylized) -> Menu a

-- | Ask the user to choose an item from a menu. The menu will only be
--   shown once and the user's choice will be returned in a <a>Choice</a>
--   value.
--   
--   If you want to force the user to only choose from the displayed menu
--   items you should use <a>askWithMenuRepeatedly</a> instead.
askWithMenu :: MonadIO m => Menu a -> Stylized -> Byline m (Choice a)

-- | Like <a>askWithMenu</a> except that arbitrary input is not allowed. If
--   the user doesn't correctly select a menu item then the menu will be
--   repeated and an error message will be displayed.
askWithMenuRepeatedly :: MonadIO m => Menu a -> Stylized -> Stylized -> Byline m (Choice a)

-- | Change the banner of a menu. The banner is printed just before the
--   menu items are displayed.
banner :: Stylized -> Menu a -> Menu a

-- | Change the prefix function. The prefix function should generate
--   unique, stylized text that the user can use to select a menu item. The
--   default prefix function numbers the menu items starting with 1.
prefix :: (Int -> Stylized) -> Menu a -> Menu a

-- | Change the menu item suffix. It is displayed directly after the menu
--   item prefix and just before the menu item itself.
--   
--   Default: <tt>") "</tt>
suffix :: Stylized -> Menu a -> Menu a

-- | A function that is given the input from a user while working in a menu
--   and should translate that into a <a>Choice</a>.
--   
--   The <tt>Map</tt> contains the menu item indexes/prefixes (numbers or
--   letters) and the items themselves.
--   
--   The default matcher function allows the user to select a menu item by
--   typing its index or part of its textual representation. As long as
--   input from the user is a unique prefix of one of the menu items then
--   that item will be returned.
type Matcher a = Menu a -> Map Text a -> Text -> Choice a

-- | Change the <a>Matcher</a> function. The matcher function should
--   compare the user's input to the menu items and their assigned prefix
--   values and return a <a>Choice</a>.
matcher :: Matcher a -> Menu a -> Menu a

-- | A completion function modeled after the one used in Haskeline.
--   
--   <i>Warning:</i> If you're familiar with the Haskeline version of the
--   <tt>CompletionFunc</tt> type please be sure to read this description
--   carefully since the two behave differently.
--   
--   The completion function is called when the user presses the tab key.
--   The current input line is split into two parts based on where the
--   cursor is positioned. Text to the left of the cursor will be the first
--   value in the tuple and text to the right of the cursor will be the
--   second value.
--   
--   The text returned from the completion function is the text from the
--   left of the cursor which wasn't used in the completion. It should also
--   produce a list of possible <a>Completion</a> values.
--   
--   In Haskeline, some of these text values are reversed. This is
--   <i>not</i> the case in Byline.
--   
--   <i>A note about <tt>IO</tt>:</i>
--   
--   Due to the way that Byline uses Haskeline, the completion function is
--   forced to return an <tt>IO</tt> value. It would be better if it could
--   return a value in the base monad instead. Patches welcome.
type CompletionFunc = (Text, Text) -> IO (Text, [Completion])

-- | A type representing a completion match to the user's input.
data Completion
Completion :: Text -> Text -> Bool -> Completion

-- | Text to insert to the right of the cursor.
replacement :: Completion -> Text

-- | Text to display when listing all completions.
display :: Completion -> Text

-- | Whether to follow the completed word with a terminating space or close
--   existing quotes.
isFinished :: Completion -> Bool

-- | Run the given <a>Byline</a> action with a different completion
--   function.
withCompletionFunc :: MonadIO m => CompletionFunc -> Byline m a -> Byline m a

-- | Report types for the <a>report</a> function.
data ReportType

-- | Report errors with: <tt>"error: "</tt>
Error :: ReportType

-- | Report warnings with: <tt>"warning: "</tt>
Warning :: ReportType

-- | An infix synonym for <a>mappend</a>.
--   
--   <i>Since: 4.5.0.0</i>
(<>) :: Monoid m => m -> m -> m
