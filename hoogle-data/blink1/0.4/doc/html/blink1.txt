-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Control library for blink(1) LED from ThingM
--   
@package blink1
@version 0.4


-- | Minimal interface to hidraw ioctls, sufficient for blink(1)
module System.Linux.HIDRaw
data DevInfo
DevInfo :: Word32 -> Word16 -> Word16 -> DevInfo
devBustype :: DevInfo -> Word32
devVendor :: DevInfo -> Word16
devProduct :: DevInfo -> Word16
devInfo :: Fd -> IO DevInfo
setFeature :: Fd -> [Word8] -> IO ()
getFeature :: Fd -> Int -> IO [Word8]
instance Storable DevInfo

module System.Hardware.Blink1.Types
data RGB a
RGB :: !a -> !a -> !a -> RGB a
red :: RGB a -> !a
green :: RGB a -> !a
blue :: RGB a -> !a
type RGB8 = RGB Word8
black :: RGB8

-- | time is measured in centiseconds
newtype Delay
Delay :: Word16 -> Delay
delayCentiseconds :: Delay -> Word16
second :: Delay

-- | positions are counted 0-11 on mk1, 0-31 on mk2
newtype PatternStep
PatternStep :: Word8 -> PatternStep
patternStep :: PatternStep -> Word8
data EEPROMAddr
EEOSCCAL :: EEPROMAddr
EEBootMode :: EEPROMAddr
EESerialNum :: Word8 -> EEPROMAddr
EEPatternStart :: EEPROMAddr
serialNumLen :: Word8

-- | LEDs are 1-based (0 means "all")
newtype LED
LED :: Word8 -> LED
whichLED :: LED -> Word8
instance Bounded Delay
instance Eq Delay
instance Ord Delay
instance Enum Delay
instance Eq PatternStep
instance Ord PatternStep
instance Enum PatternStep
instance Num PatternStep
instance Show PatternStep
instance Read PatternStep
instance Eq EEPROMAddr
instance Ord EEPROMAddr
instance Eq LED
instance Ord LED
instance Enum LED
instance Num LED
instance Show LED
instance Read LED
instance Bounded LED
instance Bounded EEPROMAddr
instance Enum EEPROMAddr
instance Bounded PatternStep
instance Read Delay
instance Show Delay
instance RealFrac Delay
instance Fractional Delay
instance Real Delay
instance Num Delay
instance HasResolution Delay
instance Read RGB8
instance Show RGB8
instance (Num a, Ord a, Bounded a) => Monoid (RGB a)
instance Num a => Num (RGB a)
instance Applicative RGB
instance Functor RGB

module System.Hardware.Blink1.Class
class Blink1 b
writeBlink1 :: Blink1 b => b -> [Word8] -> IO ()
readBlink1 :: Blink1 b => b -> Int -> IO [Word8]
closeBlink1 :: Blink1 b => b -> IO ()
blink1Vendor :: Word16
blink1Product :: Word16

module System.Hardware.Blink1.Dummy
data Blink1Dummy
openDummy :: Bool -> Blink1Dummy
instance Blink1 Blink1Dummy


-- | Blink(1) hardware interface using Linux's <i>dev</i>hidraw* devices.
module System.Hardware.Blink1.Linux
data Blink1Raw

-- | Open the given blink(1) hidraw device
openRawDev :: FilePath -> IO Blink1Raw

-- | Search for and open the first blink(1) hidraw device
openRawHID :: IO Blink1Raw

-- | Search for and open all blink(1) hidraw devices
openRawHIDs :: IO [Blink1Raw]
instance Blink1 Blink1Raw


-- | Blink(1) hardware interface using libusb.
module System.Hardware.Blink1.USB
data Blink1USB
openUSB :: IO Blink1USB
openUSBs :: IO [Blink1USB]
getSerialNumber :: Blink1USB -> IO String
instance Blink1 Blink1USB


-- | To use any of these functions, you first must open a blink(1) device
--   (providing the <a>Blink</a> interface). Currently
--   <a>System.Hardware.Blink1.Linux</a> and
--   <a>System.Hardware.Blink1.USB</a> are provided.
--   
--   The functions ending with 2 provide functionality available on the
--   blink(1) mk2, so are only likely to work if <a>getVersion</a> returns
--   <tt>('2',_)</tt>
module System.Hardware.Blink1
data RGB a
RGB :: !a -> !a -> !a -> RGB a
red :: RGB a -> !a
green :: RGB a -> !a
blue :: RGB a -> !a
type RGB8 = RGB Word8

-- | time is measured in centiseconds
newtype Delay
Delay :: Word16 -> Delay
delayCentiseconds :: Delay -> Word16

-- | positions are counted 0-11 on mk1, 0-31 on mk2
data PatternStep

-- | LEDs are 1-based (0 means "all")
data LED
closeBlink1 :: Blink1 b => b -> IO ()
getVersion :: Blink1 b => b -> IO (Char, Char)

-- | query the current color.
getColor2 :: Blink1 b => b -> LED -> IO RGB8

-- | set the given color now
setColor :: Blink1 b => b -> RGB8 -> IO ()

-- | Although documented, this does not appear to work correctly.
setColor2 :: Blink1 b => b -> Maybe LED -> RGB8 -> IO ()
fadeToColor :: Blink1 b => b -> Delay -> RGB8 -> IO ()
fadeToColor2 :: Blink1 b => b -> Maybe LED -> Delay -> RGB8 -> IO ()

-- | enable/disable serverdown mode with the given timeout
setServerDown :: Blink1 b => b -> Bool -> Delay -> IO ()

-- | enable/disable serverdown mode with the given timeout, optionally
--   staying on afterwards, over the given pattern range
setServerDown2 :: Blink1 b => b -> Bool -> Delay -> Bool -> (PatternStep, PatternStep) -> IO ()

-- | stop or start playing the sequence at the given position
playPattern :: Blink1 b => b -> Maybe PatternStep -> IO ()

-- | loop the sequence over a range some number of times.
playPattern2 :: Blink1 b => b -> (PatternStep, PatternStep) -> Word8 -> IO ()

-- | query the current play state.
getPlaying2 :: Blink1 b => b -> IO (Maybe (PatternStep, PatternStep, Word8, Word8))

-- | set the sequence pattern for the given position
setPattern :: Blink1 b => b -> PatternStep -> Delay -> RGB8 -> IO ()
getPattern :: Blink1 b => b -> PatternStep -> IO (Delay, RGB8)
savePatterns2 :: Blink1 b => b -> IO ()

-- | This is only supported on mk1 devices.
getSerialNum :: Blink1 b => b -> IO Word32

-- | This is only supported on mk1 devices.
setSerialNum :: Blink1 b => b -> Word32 -> IO ()
testBlink1 :: Blink1 b => b -> IO (Either [Word8] Bool)
