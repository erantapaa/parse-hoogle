-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Gtk-based GUIs for Tangible Values
--   
--   GtkTV is a very small library that extends the TV (tangible value)
--   framework with graphical user interfaces, using gtk2hs.
--   
--   Â© 2009, 2010 by Conal Elliott; BSD3 license.
@package GtkTV
@version 0.1.9


-- | Gtk-based GUIs in the TV (tangible value) framework
--   
--   This variation eliminates mdo by having MkI' produce a consumer of
--   refresh actions rather than taking a refresh action as argument.
module Interface.TV.Gtk2
type In = Input MkI
type Out = Output MkI MkO
type GTV = TV MkI MkO

-- | Type specialization of <a>tv</a>
gtv :: Out a -> a -> GTV a

-- | Type specialization of <a>runTV</a>
runGTV :: GTV a -> IO ()
runOut :: String -> Out a -> a -> Action

-- | Run a visualization on a constructed (<a>IO</a>-extracted) value. The
--   action is executed just once, after the visualization is all set up,
--   which allows for things like OpenGL shader compilation.
runOutIO :: String -> Out a -> IO a -> Action
type R = Float
sliderRIn :: (R, R) -> R -> In R
sliderIIn :: (Int, Int) -> Int -> In Int

-- | A clock that updates every 1/60 second
clockIn :: In R

-- | Rate slider. Updates result (integral) 60 times per second.
--   Specialization of <a>rateSliderDtIn</a>.
rateSliderIn :: (R, R) -> R -> In R

-- | Integral of an input. Updates result (integral) 60 times per second.
integralIn :: (VectorSpace v, Eq v, (Scalar v) ~ Float) => In v -> In v
fileNameIn :: FilePath -> In FilePath

-- | Render output, given a rendering action. Handles all set-up. Intended
--   as an implementation substrate for functional graphics.
renderOut :: Out Action

-- | An empty texture. Test with <a>textureIsEmpty</a>
emptyTexture :: TextureObject

-- | Is a texture empty?
textureIsEmpty :: TextureObject -> Bool
textureIn :: In TextureObject
instance Read Orient
instance Show Orient
instance ToOI MkO
instance Lambda MkI MkO
instance Title_f MkO
instance Title_f MkI
instance Pair MkO
instance Pair MkI
instance CommonOuts MkO
instance CommonIns MkI
instance Cofunctor MkO
instance Functor MkI


-- | Gtk-based GUIs in the TV (tangible value) framework
module Interface.TV.Gtk
type In = Input MkI
type Out = Output MkI MkO
type GTV = TV MkI MkO

-- | Type specialization of <a>tv</a>
gtv :: Out a -> a -> GTV a

-- | Type specialization of <a>runTV</a>
runGTV :: GTV a -> IO ()
runOut :: String -> Out a -> a -> Action

-- | Run a visualization on a constructed (<a>IO</a>-extracted) value. The
--   action is executed just once, after the visualization is all set up,
--   which allows for things like OpenGL shader compilation.
runOutIO :: String -> Out a -> IO a -> Action
type R = Float
sliderRIn :: (R, R) -> R -> In R
sliderIIn :: (Int, Int) -> Int -> In Int

-- | A clock that updates every 1/60 second
clockIn :: In R

-- | Rate slider. Updates result (integral) 60 times per second.
--   Specialization of <a>rateSliderDtIn</a>.
rateSliderIn :: (R, R) -> R -> In R

-- | Integral of an input. Updates result (integral) 60 times per second.
integralIn :: (VectorSpace v, Eq v, (Scalar v) ~ Float) => In v -> In v
fileNameIn :: FilePath -> In FilePath

-- | Render output, given a rendering action. Handles all set-up. Intended
--   as an implementation substrate for functional graphics.
renderOut :: Out Action

-- | An empty texture. Test with <a>textureIsEmpty</a>
emptyTexture :: TextureObject

-- | Is a texture empty?
textureIsEmpty :: TextureObject -> Bool
textureIn :: In TextureObject
instance Read Orient
instance Show Orient
instance ToOI MkO
instance Lambda MkI MkO
instance Title_f MkO
instance Title_f MkI
instance Pair MkO
instance Pair MkI
instance CommonOuts MkO
instance CommonIns MkI
instance Cofunctor MkO
instance Functor MkI
