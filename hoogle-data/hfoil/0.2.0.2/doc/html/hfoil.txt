-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Hess-Smith panel code for inviscid 2-d airfoil analysis
--   
@package hfoil
@version 0.2.0.2

module HFoil.Naca4
data Naca4 a
Naca4 :: a -> a -> a -> String -> Naca4 a
naca4_m :: Naca4 a -> a
naca4_p :: Naca4 a -> a
naca4_t :: Naca4 a -> a
naca4_name :: Naca4 a -> String
coords :: (Ord a, Floating a) => Naca4 a -> a -> ((a, a), (a, a))
yt :: (Ord a, Floating a) => Naca4 a -> a -> a
dyt :: (Ord a, Floating a) => Naca4 a -> a -> a
naca4 :: (Read a, Fractional a) => String -> Maybe (Naca4 a)
instance Show a => Show (Naca4 a)

module HFoil.Foil
data Foil a
Foil :: [Element a] -> String -> Foil a
data Element a
Element :: (Vector a, Vector a) -> Vector a -> Vector a -> (Vector a, Vector a) -> (Vector a, Vector a) -> (Vector a, Vector a) -> (Vector a, Vector a) -> (Vector a, Vector a) -> (Vector a, Vector a) -> Element a
fNodes :: Element a -> (Vector a, Vector a)
fLengths :: Element a -> Vector a
fAngles :: Element a -> Vector a
fMidpoints :: Element a -> (Vector a, Vector a)
fTangents :: Element a -> (Vector a, Vector a)
fNormals :: Element a -> (Vector a, Vector a)
fUnitNormals :: Element a -> (Vector a, Vector a)
fInits :: Element a -> (Vector a, Vector a)
fTails :: Element a -> (Vector a, Vector a)
panelizeNaca4 :: (Enum a, Floating (Vector a), RealFloat a, Field a) => Naca4 a -> Int -> Foil a
loadFoil :: FilePath -> IO (Either String (Foil Double))
getUIUCFoil :: String -> IO (Either String (Foil Double))
instance Storable a => Show (Foil a)

module HFoil.Flow
data FlowSol a
FlowSol :: Foil a -> Vector a -> Vector a -> [a] -> a -> (Vector a, Vector a) -> (a, a) -> a -> a -> a -> (a, a) -> [(Int, Int)] -> FlowSol a
solFoil :: FlowSol a -> Foil a
solVs :: FlowSol a -> Vector a
solCps :: FlowSol a -> Vector a
solVorticities :: FlowSol a -> [a]
solAlpha :: FlowSol a -> a
solForces :: FlowSol a -> (Vector a, Vector a)
solForce :: FlowSol a -> (a, a)
solCl :: FlowSol a -> a
solCd :: FlowSol a -> a
solCm :: FlowSol a -> a
solCenterPressure :: FlowSol a -> (a, a)
solKuttaIndices :: FlowSol a -> [(Int, Int)]
solveFlow :: (Num (Vector a), RealFloat a, Field a) => Foil a -> a -> FlowSol a

module HFoil.Drawing
drawSolution :: FlowSol Double -> VisObject Double
drawFoil :: (Num a, Storable a) => Foil a -> VisObject a
drawNormals :: Foil Double -> VisObject Double
drawForces :: FlowSol Double -> VisObject Double
drawKuttas :: (Real a, Fractional a, Storable a) => FlowSol a -> VisObject a
drawOnce :: Real a => [VisObject a] -> IO ()

module HFoil.Repl
run :: IO ()


-- | This is the top level module which exports the API
module HFoil
