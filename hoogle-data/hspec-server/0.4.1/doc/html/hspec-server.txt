-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Test Framework for checking server's status
--   
@package hspec-server
@version 0.4.1

module Test.Hspec.Server.Core
data ServerOS
Ubuntu :: String -> ServerOS
Debian :: String -> ServerOS
CentOS :: String -> ServerOS
Fedora :: String -> ServerOS
Redhat :: String -> ServerOS
LinuxOther :: String -> ServerOS
FreeBSD :: String -> ServerOS
MacOS :: String -> ServerOS
Windows :: String -> ServerOS
OtherOS :: String -> ServerOS
AutoDetect :: ServerOS
type ServerName = String
class ServerType a
stSetup :: ServerType a => a -> IO a
stOS :: ServerType a => a -> Maybe ServerOS
stName :: ServerType a => a -> ServerName
stCmd :: ServerType a => a -> FilePath -> [String] -> String -> IO (ExitCode, String, String)
type ServerExample dat = ReaderT dat IO
with :: ServerType dat => dat -> SpecWith dat -> Spec
include :: Ord a => Set a -> Set a -> Bool
none :: Set a
detectOS :: ServerType dat => dat -> IO (Maybe ServerOS)
detectLinux :: ServerType dat => dat -> IO (Maybe ServerOS)
getServerData :: ServerType dat => ServerExample dat dat
getServerOS :: ServerType dat => ServerExample dat (Maybe ServerOS)
includes' :: (ServerType dat, Show s, Ord s) => Set s -> Set s -> ServerExample dat ()
includes :: (ServerType dat, Show s, Ord s) => ServerExample dat (Set s) -> (Set s) -> ServerExample dat ()
(@>=) :: (ServerType dat, Show s, Ord s) => ServerExample dat (Set s) -> Set s -> ServerExample dat ()
(@==) :: (ServerType dat, Show s, Ord s) => ServerExample dat (Set s) -> Set s -> ServerExample dat ()
instance Show ServerOS
instance Eq ServerOS
instance ServerType dat => Example (ServerExample dat ())

module Test.Hspec.Server.ServerType
data Localhost
Localhost :: !(Maybe ServerOS) -> Localhost
lOS :: Localhost -> !(Maybe ServerOS)
localhost :: Localhost
data Ssh
Ssh :: String -> Maybe String -> Maybe String -> Maybe Int -> Maybe String -> !(Maybe ServerOS) -> Ssh
sshHostName :: Ssh -> String
sshId :: Ssh -> Maybe String
sshConf :: Ssh -> Maybe String
sshPort :: Ssh -> Maybe Int
sshUser :: Ssh -> Maybe String
sshOS :: Ssh -> !(Maybe ServerOS)
ssh :: String -> Ssh
data Vagrant
Vagrant :: String -> Maybe String -> !(Maybe ServerOS) -> Vagrant
vHostName :: Vagrant -> String
vConf :: Vagrant -> Maybe String
vOS :: Vagrant -> !(Maybe ServerOS)
vagrant :: String -> Vagrant
data Docker
Docker :: String -> !(Maybe ServerOS) -> Docker
dContainerId :: Docker -> String
dOS :: Docker -> !(Maybe ServerOS)
docker :: String -> Docker
instance Show Localhost
instance Eq Localhost
instance Show Ssh
instance Eq Ssh
instance Show Vagrant
instance Eq Vagrant
instance Show Docker
instance Eq Docker
instance ServerType Docker
instance ServerType Vagrant
instance ServerType Ssh
instance ServerType Localhost

module Test.Hspec.Server.Util
cmd :: ServerType dat => dat -> FilePath -> [String] -> String -> IO (ExitCode, String, String)
type Patterns = [String]
type Arg = [String]
type Input = String
type TestType = String
cmdAndChk :: ServerType dat => TestType -> s -> s -> FilePath -> Arg -> Input -> Patterns -> ServerExample dat (Either String s)

module Test.Hspec.Server.ServerStatus
type ServerStatus = Set ServerStatus'
installed :: Set ServerStatus'
running :: Set ServerStatus'
enabled :: Set ServerStatus'
listening :: Set ServerStatus'
package :: ServerType dat => String -> ServerExample dat ServerStatus
process :: ServerType dat => String -> ServerExample dat ServerStatus
service :: ServerType dat => String -> ServerExample dat ServerStatus
port :: ServerType dat => Int -> ServerExample dat ServerStatus
instance Show ServerStatus'
instance Ord ServerStatus'
instance Eq ServerStatus'

module Test.Hspec.Server.CommandStatus
type CommandStatus = Set CommandStatus'
exit :: Int -> Set CommandStatus'
stdout :: String -> Set CommandStatus'
stderr :: String -> Set CommandStatus'
getStdout :: CommandStatus -> Maybe String
getStderr :: CommandStatus -> Maybe String
command :: ServerType dat => FilePath -> [String] -> String -> ServerExample dat CommandStatus
instance Show CommandStatus'
instance Ord CommandStatus'
instance Eq CommandStatus'

module Test.Hspec.Server.NetworkStatus
type NetworkStatus = Set NetworkStatus'
reachable :: Set NetworkStatus'
host :: ServerType dat => String -> ServerExample dat NetworkStatus
hostWithPort :: ServerType dat => String -> Int -> ServerExample dat NetworkStatus
instance Show NetworkStatus'
instance Ord NetworkStatus'
instance Eq NetworkStatus'

module Test.Hspec.Server
