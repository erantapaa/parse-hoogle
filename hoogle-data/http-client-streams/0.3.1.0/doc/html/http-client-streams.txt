-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | http-client for io-streams supporting openssl
--   
@package http-client-streams
@version 0.3.1.0


-- | Here is an example GET request that streams the response body to
--   standard output with OpenSSL:
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings #-}
--   module Main where
--    
--   import qualified System.IO.Streams as Streams
--   import           System.IO.Streams.HTTP ( opensslManagerSettings
--                                           , parseUrl
--                                           , withManager
--                                           , withHTTP
--                                           , responseBody
--                                           , withOpenSSL
--                                           , context
--                                           , requestBody
--                                           , stream
--                                           , method
--                                           )
--    
--   ------------------------------------------------------------------------------
--   -- | GET test (openssl)
--   main :: IO ()
--   main = withOpenSSL $ do
--     let settings = opensslManagerSettings context
--     req &lt;- parseUrl "https://google.com"
--     withManager settings $ \mgr -&gt;
--       withHTTP req mgr $ \resp -&gt;
--         Streams.supplyTo Streams.stdout (responseBody resp)
--   
--   
--   ------------------------------------------------------------------------------
--   -- | POST test (tls)
--   post :: IO ()
--   post = withOpenSSL $ do
--     let settings = opensslManagerSettings context
--     req &lt;- parseUrl "https://google.com"
--     let request = req { method = "POST"
--                       , requestBody = stream $ Streams.fromLazyByteString "body"
--                       }
--     withManager settings $ \mgr -&gt;
--       withHTTP req mgr $ \resp -&gt;
--         Streams.supplyTo Streams.stdout (responseBody resp)
--   </pre>
module System.IO.Streams.HTTP

-- | Send an HTTP <a>Request</a> and wait for an HTTP <a>Response</a>
withHTTP :: Request -> Manager -> (Response (InputStream ByteString) -> IO a) -> IO a

-- | Stream with N bytes exactly
streamN :: Int64 -> IO (InputStream ByteString) -> RequestBody

-- | Stream body of request
stream :: IO (InputStream ByteString) -> RequestBody
