-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Format data to feed to a PostgreSQL COPY FROM statement
--   
--   In PostgreSQL, the <tt>COPY</tt> statement [1] provides a fast way to
--   perform bulk insertion and retrieval. To use <tt>COPY ... FROM</tt>
--   for bulk insertion, the data must first be converted to a special
--   CSV-like format.
--   
--   This package provides basic support for converting data to the format
--   needed by <tt>COPY ... FROM</tt>. However, it does not provide the
--   inverse operation (namely, reading data produced by <tt>COPY ...
--   TO</tt>), nor does it support formatting customizations (what
--   delimiter to use, how to represent NULL, etc.).
--   
--   [1]:
--   <a>http://www.postgresql.org/docs/current/static/sql-copy.html</a>
@package postgresql-copy-escape
@version 0.1

module Database.PostgreSQL.Copy.Escape
data EscapeCopyValue
EscapeCopyNull :: EscapeCopyValue

-- | A PostgreSQL datum in its text representation.
EscapeCopyText :: !ByteString -> EscapeCopyValue

-- | Raw binary data destined for storage in a <tt>BYTEA</tt> column.
EscapeCopyBytea :: !ByteString -> EscapeCopyValue

-- | Escape a row of data for use with a COPY FROM statement. Include a
--   trailing newline at the end.
--   
--   This assumes text format (rather than BINARY or CSV) with the default
--   delimiter (tab) and default null string (\N). A suitable query looks
--   like:
--   
--   <pre>
--   COPY tablename (id, col1, col2) FROM stdin;
--   </pre>
escapeCopyRow :: [EscapeCopyValue] -> ByteString
instance Show EscapeCopyValue
instance Show EscapeCopyRow
instance Escape EscapeCopyRow
instance Escape EscapeCopyValue
instance Monoid Emit
