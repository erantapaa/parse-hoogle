-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generate executable Haskell code from a type
--   
--   Djinn uses a theorem prover for intuitionistic propositional logic to
--   generate a Haskell expression when given a type.
--   
--   Djinn-TH uses Template Haskell to turn this expression into executable
--   code.
@package djinn-th
@version 0.0.1


-- | Djinn uses a theorem prover for intuitionistic propositional logic to
--   generate a Haskell expression when given a type. Djinn-TH uses
--   Template Haskell to turn this expression into executable code.
--   
--   Based mostly on <a>http://hackage.haskell.org/package/djinn</a>.
--   
--   Using Language.Haskell.Djinn generally requires:
--   
--   <pre>
--   {-# LANGUAGE TemplateHaskell, ScopedTypeVariables #-}
--   </pre>
module Language.Haskell.Djinn

-- | Generate an anonymous expression of the given type (if it is
--   realizable).
djinn :: Q Type -> Q Exp

-- | Generate a list of anonymous expressions of the given type (if it is
--   realizable).
djinns :: Q Type -> Q Exp

-- | Generate a named declaration with an accompanying type signature. For
--   example:
--   
--   <pre>
--   $(djinnD "maybeToEither" [t| forall a b . a -&gt;  Maybe b -&gt;  Either a b |])
--   main = print . map (maybeToEither "foo") $ [ Nothing, Just "bar" ]
--   </pre>
--   
--   might print <tt>[Left "foo",Right "bar"]</tt>.
djinnD :: String -> Q Type -> Q [Dec]

-- | Generate a named declaration with an accompanying type signature for a
--   list of possible realizations of a type.
--   
--   <pre>
--   $(djinnsD "picks" [t| forall a . (a, a) -&gt; (a -&gt; a) -&gt; a |])
--   main = print [ p ("A","B") (++"C") | p &lt;- picks ]
--   </pre>
--   
--   might print <tt>["BC","AC","B","A"]</tt>.
djinnsD :: String -> Q Type -> Q [Dec]
