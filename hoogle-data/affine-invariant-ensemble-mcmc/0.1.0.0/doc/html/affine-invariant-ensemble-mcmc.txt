-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | General-purpose sampling
--   
--   A general-purpose sampling routine for badly-scaled distributions.
@package affine-invariant-ensemble-mcmc
@version 0.1.0.0


-- | Various internal utilities.
module Numeric.MCMC.Util

-- | Given Int, bounds, and generator, generate a different Int in the
--   bound.
genDiffInt :: PrimMonad m => Int -> (Int, Int) -> Gen (PrimState m) -> m Int

-- | Tail-recursive, list-fused mean function.
mean :: [Double] -> Double

-- | Map a function over a pair.
mapPair :: (a -> b) -> (a, a) -> (b, b)

-- | Convert a list to a pair.
shortListToPair :: [a] -> (a, a)

-- | Knuth-shuffle a list. Uses <tt>Seq</tt> internally.
shuffle :: [a] -> Seed -> [a]

-- | Sample from a list without replacement.
sample :: Int -> [a] -> Seed -> [a]


-- | A Haskell implementation of Goodman &amp; Weare (2010)'s <i>affine
--   invariant ensemble MCMC</i>, a family of Markov Chain Monte Carlo
--   methods that can efficiently sample from highly skewed or anisotropic
--   distributions.
--   
--   See <a>runChain</a> for an overview of use, and
--   <a>http://msp.berkeley.edu/camcos/2010/5-1/p04.xhtml</a> for details
--   of the general sampling routine.
module Numeric.MCMC.AffineInvariantEnsemble

-- | A data type holding the configuration of the Markov chain at any given
--   epoch. <a>ensemble</a> accesses the IntMap constituting the current
--   ensemble, while <a>accepts</a> records the number of proposals that
--   have been accepted up to the current epoch.
data Config
Config :: !IntMap [Double] -> {-# UNPACK #-} !Int -> Config
ensemble :: Config -> !IntMap [Double]
accepts :: Config -> {-# UNPACK #-} !Int

-- | A data type representing the affine transformation to be used on
--   particles in an ensemble. The general-purpose <i>stretch</i> and
--   <i>walk</i> transformations described in Goodman and Weare (2010) are
--   supported.
data AffineTransform a
Stretch :: AffineTransform a
Walk :: a -> AffineTransform a

-- | A data type holding a chain's trace.
data Trace a

-- | Typical use:
--   
--   <pre>
--   runChain steps target initConfig seed xform
--   </pre>
--   
--   Run the Markov chain for <i>steps</i> epochs. The chain will wander
--   over <i>target</i>'s parameter space such that, after "long enough",
--   the points it visits will effectively be independent samples from the
--   distribution proportional to <i>target</i>. The Markov chain procedes
--   by possibly applying an affine transformation to each of the particles
--   contained in <a>ensemble</a> <i>initConfig</i>, sequentially.
--   
--   This function will return a tuple contanining 1) the <a>Config</a>
--   corresponding to the final epoch of the chain, and 2) the chain's
--   <a>Trace</a>. The <a>Trace</a> can be used, for example, to
--   approximate integrals of the target function.
--   
--   The <i>target</i> must be a function with type <tt>[Double] -&gt;
--   Double</tt>. Functions using more complicated data structures
--   internally can simply be curried to this type.
--   
--   Examples of use can be found at
--   <a>http://github.com/jtobin/affine-invariant-ensemble-mcmc/Numeric/MCMC/Examples</a>.
runChain :: Vector v Word32 => Int -> ([Double] -> Double) -> Config -> v Word32 -> AffineTransform Int -> (Config, Trace Double)

-- | Naively initialize an ensemble. Creates a <a>Config</a> containing
--   <i>nw</i> walkers, each of dimension <i>nd</i>, and initializes
--   <a>accepts</a> at 0. Each dimensional element is drawn randomly from
--   (0,1] (using a different seed than <a>defaultSeed</a>).
--   
--   If this is expected to be a region of low density, you'll probably
--   want to specify your own initial configuration.
initializeEnsemble :: PrimMonad m => Int -> Int -> m Config

-- | The default seed provided by the library. This seed is different from
--   the one used internally in <a>initializeEnsemble</a>.
defaultSeed :: Vector Word32

-- | Prune some initial epochs (i.e. suspected burn-in) from a
--   <a>Trace</a>.
prune :: Int -> Trace Double -> Trace Double
instance Eq a => Eq (AffineTransform a)
instance Read a => Read (AffineTransform a)
instance Show (Trace Double)
