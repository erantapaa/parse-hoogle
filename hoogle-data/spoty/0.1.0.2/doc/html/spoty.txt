-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Spotify web API wrapper
--   
--   Web API <a>https://developer.spotify.com/web-api/</a> wrapper powered
--   by lens and pipes, allowing easy access to public endpoints. Does not
--   have any external dependencies nor requirements regarding app
--   registration.
--   
--   <ul>
--   <li>Paging is handled transparently using pipes</li>
--   <li>All data types are navigated using lenses</li>
--   </ul>
--   
--   All public endpoints, with multi-get versions excluded, are
--   implemented.
--   
--   <pre>
--   &gt; :set -XOverloadedStrings
--   &gt; :m +Control.Lens Utils.Spoty
--   &gt; Just artist &lt;- fetchOne (searchArtist "avicii")      -- assume at least one match
--   &gt; popular &lt;- getArtistTop (view spotifyID artist) "SE" -- retrieve the most popular tracks in Sweden
--   &gt; mapM_ (print . view name) popular                    -- print the corresponding names
--   "Hey Brother"
--   "Addicted To You"
--   "Wake Me Up"
--   ...
--   </pre>
--   
--   Please read the README for details.
@package spoty
@version 0.1.0.2


-- | Object declarations and lenses. Should not be imported by user code.
--   Please view the official documentation.
--   
--   Note that the distinction between full and simple objects is
--   implemented as an optional Maybe field with details.
module Utils.Spoty.Types
type URL = Text
type SpotID = Text
type SpotURI = Text

-- | Require that a field is present before parsing the corresponding
--   value.
require :: FromJSON a => Text -> HashMap Text Value -> Parser (Maybe a)

-- | Parse a map of key-value entries, wrapped in the given constructor.
parseStrMap :: MonadPlus m => HashMap k Value -> (k -> Text -> a) -> m [a]
data ExternalID
ExternalID :: Text -> Text -> ExternalID
_idType :: ExternalID -> Text
_idIdentifier :: ExternalID -> Text
class HasIdentifier s a | s -> a
identifier :: HasIdentifier s a => Lens' s a
class HasType s a | s -> a
type :: HasType s a => Lens' s a
data ExternalURL
ExternalURL :: Text -> URL -> ExternalURL
_urlType :: ExternalURL -> Text
_url :: ExternalURL -> URL
data Image
Image :: Maybe Int -> URL -> Maybe Int -> Image
_imageHeight :: Image -> Maybe Int
_imagePath :: Image -> URL
_imageWidth :: Image -> Maybe Int
class HasHeight s a | s -> a
height :: HasHeight s a => Lens' s a
class HasPath s a | s -> a
path :: HasPath s a => Lens' s a
class HasWidth s a | s -> a
width :: HasWidth s a => Lens' s a
data Paging a
Paging :: Text -> [a] -> Int -> Maybe URL -> Int -> Maybe URL -> Int -> Paging a
_pagingHref :: Paging a -> Text
_pagingItems :: Paging a -> [a]
_pagingLimit :: Paging a -> Int
_pagingNext :: Paging a -> Maybe URL
_pagingOffset :: Paging a -> Int
_pagingPrevious :: Paging a -> Maybe URL
_pagingTotal :: Paging a -> Int
class HasHref s a | s -> a
href :: HasHref s a => Lens' s a
class HasItems s a | s -> a
items :: HasItems s a => Lens' s a
class HasLimit s a | s -> a
limit :: HasLimit s a => Lens' s a
class HasNext s a | s -> a
next :: HasNext s a => Lens' s a
class HasOffset s a | s -> a
offset :: HasOffset s a => Lens' s a
class HasPrevious s a | s -> a
previous :: HasPrevious s a => Lens' s a
class HasTotal s a | s -> a
total :: HasTotal s a => Lens' s a
data User
User :: [ExternalURL] -> URL -> SpotID -> SpotURI -> User
_userExternalUrls :: User -> [ExternalURL]
_userHref :: User -> URL
_userSpotifyID :: User -> SpotID
_userSpotifyURI :: User -> SpotURI
class HasExternalUrls s a | s -> a
externalUrls :: HasExternalUrls s a => Lens' s a
class HasSpotifyID s a | s -> a
spotifyID :: HasSpotifyID s a => Lens' s a
class HasSpotifyURI s a | s -> a
spotifyURI :: HasSpotifyURI s a => Lens' s a
data ArtistDetails
ArtistDetails :: [Text] -> [Image] -> Int -> ArtistDetails
_artistGenres :: ArtistDetails -> [Text]
_artistImages :: ArtistDetails -> [Image]
_artistPopularity :: ArtistDetails -> Int
class HasGenres s a | s -> a
genres :: HasGenres s a => Lens' s a
class HasImages s a | s -> a
images :: HasImages s a => Lens' s a
class HasPopularity s a | s -> a
popularity :: HasPopularity s a => Lens' s a
data Artist
Artist :: [ExternalURL] -> URL -> SpotID -> Text -> SpotURI -> Maybe ArtistDetails -> Artist
_artistExternalUrls :: Artist -> [ExternalURL]
_artistHref :: Artist -> URL
_artistSpotifyID :: Artist -> SpotID
_artistName :: Artist -> Text
_artistSpotifyURI :: Artist -> SpotURI
_artistDetails :: Artist -> Maybe ArtistDetails
class HasDetails s a | s -> a
details :: HasDetails s a => Lens' s a
class HasName s a | s -> a
name :: HasName s a => Lens' s a
data TrackDetails
TrackDetails :: [Text] -> [ExternalID] -> Int -> TrackDetails
_trackAvailableMarkets :: TrackDetails -> [Text]
_trackExternalIDs :: TrackDetails -> [ExternalID]
_trackPopularity :: TrackDetails -> Int
class HasAvailableMarkets s a | s -> a
availableMarkets :: HasAvailableMarkets s a => Lens' s a
class HasExternalIDs s a | s -> a
externalIDs :: HasExternalIDs s a => Lens' s a
data Track
Track :: [Artist] -> Int -> Int -> Bool -> [ExternalURL] -> URL -> SpotID -> Text -> URL -> Int -> SpotURI -> Maybe TrackDetails -> Track
_trackArtists :: Track -> [Artist]
_trackDiscNumber :: Track -> Int
_trackDurationMs :: Track -> Int
_trackExplicit :: Track -> Bool
_trackExternalUrls :: Track -> [ExternalURL]
_trackHref :: Track -> URL
_trackSpotifyID :: Track -> SpotID
_trackName :: Track -> Text
_trackPreviewURL :: Track -> URL
_trackNumber :: Track -> Int
_trackSpotifyURI :: Track -> SpotURI
_trackDetails :: Track -> Maybe TrackDetails
class HasArtists s a | s -> a
artists :: HasArtists s a => Lens' s a
class HasDiscNumber s a | s -> a
discNumber :: HasDiscNumber s a => Lens' s a
class HasDurationMs s a | s -> a
durationMs :: HasDurationMs s a => Lens' s a
class HasExplicit s a | s -> a
explicit :: HasExplicit s a => Lens' s a
class HasNumber s a | s -> a
number :: HasNumber s a => Lens' s a
class HasPreviewURL s a | s -> a
previewURL :: HasPreviewURL s a => Lens' s a
data AlbumDetails
AlbumDetails :: [Artist] -> [ExternalID] -> [Text] -> Int -> Text -> Text -> Paging Track -> AlbumDetails
_albumArtists :: AlbumDetails -> [Artist]
_albumExternalIDs :: AlbumDetails -> [ExternalID]
_albumGenres :: AlbumDetails -> [Text]
_albumPopularity :: AlbumDetails -> Int
_albumReleaseDate :: AlbumDetails -> Text
_albumReleaseDatePrecision :: AlbumDetails -> Text
_albumTracks :: AlbumDetails -> Paging Track
class HasReleaseDate s a | s -> a
releaseDate :: HasReleaseDate s a => Lens' s a
class HasReleaseDatePrecision s a | s -> a
releaseDatePrecision :: HasReleaseDatePrecision s a => Lens' s a
class HasTracks s a | s -> a
tracks :: HasTracks s a => Lens' s a
data Album
Album :: Text -> [Text] -> [ExternalURL] -> Text -> SpotID -> [Image] -> Text -> SpotURI -> Maybe AlbumDetails -> Album
_albumType :: Album -> Text
_albumAvailableMarkets :: Album -> [Text]
_albumExternalURLs :: Album -> [ExternalURL]
_albumHref :: Album -> Text
_albumSpotifyID :: Album -> SpotID
_albumImages :: Album -> [Image]
_albumName :: Album -> Text
_albumSpotifyURI :: Album -> SpotURI
_albumDetails :: Album -> Maybe AlbumDetails
class HasExternalURLs s a | s -> a
externalURLs :: HasExternalURLs s a => Lens' s a
instance FromJSON Album
instance HasType Album Text
instance HasSpotifyURI Album SpotURI
instance HasSpotifyID Album SpotID
instance HasName Album Text
instance HasImages Album [Image]
instance HasHref Album Text
instance HasExternalURLs Album [ExternalURL]
instance HasDetails Album (Maybe AlbumDetails)
instance HasAvailableMarkets Album [Text]
instance Eq Album
instance Ord Album
instance Show Album
instance FromJSON AlbumDetails
instance HasTracks AlbumDetails (Paging Track)
instance HasReleaseDatePrecision AlbumDetails Text
instance HasReleaseDate AlbumDetails Text
instance HasPopularity AlbumDetails Int
instance HasGenres AlbumDetails [Text]
instance HasExternalIDs AlbumDetails [ExternalID]
instance HasArtists AlbumDetails [Artist]
instance Eq AlbumDetails
instance Ord AlbumDetails
instance Show AlbumDetails
instance FromJSON Track
instance HasSpotifyURI Track SpotURI
instance HasSpotifyID Track SpotID
instance HasPreviewURL Track URL
instance HasNumber Track Int
instance HasName Track Text
instance HasHref Track URL
instance HasExternalUrls Track [ExternalURL]
instance HasExplicit Track Bool
instance HasDurationMs Track Int
instance HasDiscNumber Track Int
instance HasDetails Track (Maybe TrackDetails)
instance HasArtists Track [Artist]
instance Eq Track
instance Ord Track
instance Show Track
instance FromJSON TrackDetails
instance HasPopularity TrackDetails Int
instance HasExternalIDs TrackDetails [ExternalID]
instance HasAvailableMarkets TrackDetails [Text]
instance Eq TrackDetails
instance Ord TrackDetails
instance Show TrackDetails
instance FromJSON Artist
instance HasSpotifyURI Artist SpotURI
instance HasSpotifyID Artist SpotID
instance HasName Artist Text
instance HasHref Artist URL
instance HasExternalUrls Artist [ExternalURL]
instance HasDetails Artist (Maybe ArtistDetails)
instance Eq Artist
instance Ord Artist
instance Show Artist
instance FromJSON ArtistDetails
instance HasPopularity ArtistDetails Int
instance HasImages ArtistDetails [Image]
instance HasGenres ArtistDetails [Text]
instance Eq ArtistDetails
instance Ord ArtistDetails
instance Show ArtistDetails
instance FromJSON User
instance HasSpotifyURI User SpotURI
instance HasSpotifyID User SpotID
instance HasHref User URL
instance HasExternalUrls User [ExternalURL]
instance Eq User
instance Ord User
instance Show User
instance FromJSON a => FromJSON (Paging a)
instance HasTotal (Paging a0) Int
instance HasPrevious (Paging a0) (Maybe URL)
instance HasOffset (Paging a0) Int
instance HasNext (Paging a0) (Maybe URL)
instance HasLimit (Paging a0) Int
instance HasItems (Paging a0) [a0]
instance HasHref (Paging a0) Text
instance Eq a => Eq (Paging a)
instance Ord a => Ord (Paging a)
instance Show a => Show (Paging a)
instance FromJSON Image
instance HasWidth Image (Maybe Int)
instance HasPath Image URL
instance HasHeight Image (Maybe Int)
instance Eq Image
instance Ord Image
instance Show Image
instance FromJSON [ExternalURL]
instance HasType ExternalURL Text
instance Eq ExternalURL
instance Ord ExternalURL
instance Show ExternalURL
instance FromJSON [ExternalID]
instance HasType ExternalID Text
instance HasIdentifier ExternalID Text
instance Eq ExternalID
instance Ord ExternalID
instance Show ExternalID

module Utils.Spoty

-- | Retrieve an album.
getAlbum :: SpotID -> IO Album

-- | Retrieve the tracks of an album.
getAlbumTracks :: SpotID -> Producer Track IO ()

-- | Retrieve an artist.
getArtist :: SpotID -> IO Artist

-- | Retrieve the albums of an artist.
getArtistAlbums :: SpotID -> Producer Album IO ()

-- | Country identifier e.g. "SE".
type CountryID = Text

-- | Retrieve the most popular tracks of an artist.
getArtistTop :: SpotID -> CountryID -> IO [Track]

-- | Retrieve a few related artists.
getArtistRelated :: SpotID -> IO [Artist]

-- | Categories being used in a search.
data SearchCategory

-- | Search for albums.
SearchAlbum :: SearchCategory

-- | Search for artists.
SearchArtist :: SearchCategory

-- | Search for tracks.
SearchTrack :: SearchCategory

-- | Search for some string in the given categories.
search :: [SearchCategory] -> Text -> (Producer Artist IO (), Producer Album IO (), Producer Track IO ())

-- | Search for artists.
searchArtist :: Text -> Producer Artist IO ()

-- | Search for albums.
searchAlbum :: Text -> Producer Album IO ()

-- | Search for tracks.
searchTrack :: Text -> Producer Track IO ()

-- | Retrieve a track.
getTrack :: SpotID -> IO Track

-- | Retrieve an user.
getUser :: Text -> IO User

-- | Fetch one element from the producer and discard the rest.
fetchOne :: Monad m => Producer a m () -> m (Maybe a)

-- | Fetch all elements from the producer (NOTE: not constant space).
fetchAll :: Monad m => Producer a m () -> m [a]
instance Eq SearchCategory
instance Ord SearchCategory
instance Show SearchCategory
