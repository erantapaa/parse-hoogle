-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Monad-style combinators for functors.
--   
@package functor-monadic
@version 0.1.0.3


-- | Helper functions for functors.
--   
--   These operators are designed to make the interoperation between
--   monadic and pure computations more convenient by allowing them to be
--   chained together without peppering the program with superflouos return
--   statements.
--   
--   Each function is a pure analogue of a monadic one. The correspondences
--   are as follows:
--   
--   <ul>
--   <li><tt>&gt;$&gt; ~ &gt;&gt;=</tt> (bind)</li>
--   <li><tt>$&gt; ~ &gt;&gt; </tt> (throw away left argument)</li>
--   <li><tt>&lt;$ ~ &lt;&lt; </tt> (re-exported from
--   <a>Data.Functor</a>)</li>
--   <li><tt>&lt;$&lt; ~ =&lt;&lt; </tt> (same as <a>&lt;$&gt;</a>, but
--   with the precedence of <a>&gt;&gt;=</a>)</li>
--   <li><tt>&gt;=$&gt; ~ &gt;=&gt; </tt> (Kleisli composition)</li>
--   <li><tt>&lt;$=&lt; ~ &lt;=&lt; </tt> (flipped Kleisli
--   composition)</li>
--   </ul>
--   
--   In addition, <a>|&gt;</a> and <a>.&gt;</a> are the left-to-right
--   versions of <a>$</a> and <a>.</a>, respectively.
module Data.Functor.Monadic

-- | Flipped <a>fmap</a> for chaining plain functions after a functor in
--   the following way:
--   
--   <pre>
--   readFile '1.txt' &gt;$&gt; lines &gt;$&gt; map length &gt;&gt;= print
--   </pre>
--   
--   <tt>lines</tt> and <tt>map length</tt> are non-monadic functions, but
--   peppering them with returns, as pure <a>&gt;&gt;=</a> necessitates, is
--   quite tedious.
--   
--   In general:
--   
--   <pre>
--   m &gt;&gt;= return . f   is the same as   m &gt;$&gt; f
--   </pre>
(>$>) :: Functor f => f a -> (a -> b) -> f b

-- | Left-associatiative, flipped <a>$&gt;</a>. Corresponds to
--   <a>&gt;&gt;</a>
($>) :: Functor f => f b -> a -> f a

-- | Right-associative infix synonym for <a>fmap</a>.
(<$<) :: Functor f => (a -> b) -> f a -> f b

-- | Application of <a>&gt;$&gt;</a> to Kleisli composition
--   <a>&gt;=&gt;</a> Use is analogous to that of <a>&gt;$&gt;</a>, e.g.
--   
--   <pre>
--   f :: FilePath -&gt; IO ()
--   f = (readFile &gt;=$&gt; lines &gt;=$&gt; map length &gt;=&gt; print)
--   
--   </pre>
--   
--   In general:
--   
--   <pre>
--   m &gt;=$&gt; f   is the same as   m &gt;=&gt; return . f
--   
--   </pre>
(>=$>) :: Functor f => (a -> f b) -> (b -> c) -> a -> f c

-- | Flipped version of <a>&gt;=$&gt;</a>.
(<$=<) :: Functor f => (b -> c) -> (a -> f b) -> a -> f c

-- | Flipped version of <a>$</a>.
(|>) :: a -> (a -> b) -> b

-- | Flipped version <a>.</a>.
(.>) :: (a -> b) -> (b -> c) -> (a -> c)
