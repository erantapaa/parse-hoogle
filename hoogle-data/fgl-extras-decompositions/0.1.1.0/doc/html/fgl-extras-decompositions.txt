-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Graph decomposition algorithms
--   
@package fgl-extras-decompositions
@version 0.1.1.0


-- | Ear decomposition of a graph.
module Data.Graph.Inductive.Query.Ear

-- | The <a>ears</a> function takes a graph with no node or edge annotation
--   and produces an ear decomposition. Each edge is annotated with a
--   weight. Edges with the same weight are in the same ear. Maon,
--   Schieber, Vishkin (1986)
ears :: DynGraph gr => gr () () -> gr () Int
shortestPaths :: Gr () Int -> Edge -> LEdge Int

-- | Lowest common ancestor calculation
lca :: [[Node]] -> (LEdge ()) -> (LEdge Int)
swap12 :: (t1, t, t2) -> (t, t1, t2)
sel3 :: (t, t1, t2) -> t2
treeToEdges :: Tree Node -> [Edge]
treeToPaths :: Tree Node -> [[Node]]
