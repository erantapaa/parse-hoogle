-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An implementation of algorithms for matchings in graphs
--   
--   This package provides algorithms on matchings in graphs; in
--   particular, determining whether a given set of edges is a
--   (maximal<i>maximum) matching and finding maximal</i>maximum matchings.
@package graph-matchings
@version 0.1.0.0


-- | This module provides some algorithms related to matchings in graphs,
--   most notably an implementation of Edmond's blossom algorithm, which
--   computes maximum matchings for graphs.
--   
--   Definitions:
--   
--   <ul>
--   <li>A <i>matching</i> is a subset of the edges of a graph such that no
--   two edges in it are incident to the same node.</li>
--   <li>A <i>maximal matching</i> is a matching that cannot be made any
--   larger, i.e. no additional edge can be added to it without violating
--   the property of node-disjoint edges.</li>
--   <li>A <i>maximum matching</i> is a matching such that no other
--   matching contains more edges.</li>
--   </ul>
--   
--   In this list, the given notions are strictly increasing in strength.
--   In particular, note that every maximum matching is also maximal, but
--   not every maximal matching is a maximum one.
--   
--   Our implementation of Edmond's blossom algorithm is an adaptation of
--   the Java implementation in JGraphT:
--   <a>https://github.com/jgrapht/jgrapht/blob/master/jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsBlossomShrinking.java</a>
module Data.Graph.Inductive.Query.Matchings

-- | Determines whether a given set of edges is a matching.
isMatching :: Graph gr => gr a b -> [Edge] -> Bool

-- | Determines whether a given set of edges is a maximal matching, i.e. a
--   matching that cannot be extended by adding another edge.
isMaximalMatching :: Graph gr => gr a b -> [Edge] -> Bool

-- | Determines whether the given set of edges is a maximum matching.
isMaximumMatching :: Graph gr => gr a b -> [Edge] -> Bool

-- | Computes all maximal matchings in a graph.
maximalMatchings :: Graph gr => gr a b -> [[Edge]]

-- | Computes a maximum matching of the given graph using Edmond's blossom
--   algorithm.
maximumMatching :: Graph gr => gr a b -> [Edge]
