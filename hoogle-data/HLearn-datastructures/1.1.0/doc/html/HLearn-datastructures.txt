-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | This package contains commonly used data structures
@package HLearn-datastructures
@version 1.1.0

module Data.Prunable
class Prunable t
prunefoldr :: Prunable t => (b -> t a -> IndexType (t a) -> Bool) -> (a -> b -> b) -> b -> t a -> b
class Foldable t => DualFoldable t where dualfoldr f i t1 t2 = foldr f i [(x, y) | x <- (toList t1), y <- (toList t2)]
dualfoldr :: DualFoldable t => ((a, a) -> b -> b) -> b -> t a -> t a -> b
data TreeIndex
TreeLeft :: TreeIndex
TreeRight :: TreeIndex
instance Read TreeIndex
instance Show TreeIndex
instance Eq TreeIndex
instance Ord TreeIndex
instance Bounded TreeIndex
instance Enum TreeIndex


-- | A <a>SortedVector</a> is a vector that maintains the invariant that
--   all elements are sorted. Whenever an element is added/removed, the
--   vector is automatically adjusted. Because element positions can be
--   changed in this way, it does not make sense to index the vector by
--   specific locations.
module HLearn.DataStructures.SortedVector
data SortedVector a
instance Read a => Read (SortedVector a)
instance Show a => Show (SortedVector a)
instance Eq a => Eq (SortedVector a)
instance Ord a => Ord (SortedVector a)
instance Ord a => HomTrainer (SortedVector a)
instance Monad SortedVector
instance Applicative SortedVector
instance Pointed SortedVector
instance Functor SortedVector
instance Foldable SortedVector
instance Prunable SortedVector
instance Index (SortedVector dp)
instance (Ord a, Invertible a) => Group (SortedVector a)
instance Ord a => Monoid (SortedVector a)
instance Ord a => Abelian (SortedVector a)
instance NFData a => NFData (SortedVector a)
