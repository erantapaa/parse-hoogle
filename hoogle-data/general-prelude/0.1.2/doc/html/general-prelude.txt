-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Prelude replacement using generalized type classes where possible
--   
--   This Prelude prefers more general and performance-oriented types, such
--   as Category, Foldable, Traversable, Data.Text and Control.Lens.
@package general-prelude
@version 0.1.2


-- | Prelude replacement, use the NoImplicitPrelude extension before
--   importing this.
module Prelude.General
(+) :: Num a => a -> a -> a
(-) :: Num a => a -> a -> a
(*) :: Num a => a -> a -> a

-- | fractional division
(/) :: Fractional a => a -> a -> a

-- | integer modulus, satisfying
--   
--   <pre>
--   (x `div` y)*y + (x `mod` y) == x
--   </pre>
mod :: Integral a => a -> a -> a

-- | Evaluates its first argument to head normal form, and then returns its
--   second argument as the result.
seq :: a -> b -> b

-- | Strict (call-by-value) application, defined in terms of <a>seq</a>.
($!) :: (a -> b) -> a -> b

-- | A special case of <a>error</a>. It is expected that compilers will
--   recognize this and insert error messages which are more appropriate to
--   the context in which <a>undefined</a> appears.
undefined :: a

-- | <a>error</a> stops execution and displays an error message.
error :: [Char] -> a

-- | general coercion from integral types
fromIntegral :: (Integral a, Num b) => a -> b

-- | An either/maybe equivalent for Bool, often known as if'
if' :: a -> a -> Bool -> a
filter :: (Monad m, Monoid (m a), Foldable t) => (a -> Bool) -> t a -> m a
