-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell client for Sentry logging service.
--   
--   Haskell client for Sentry logging service.
@package raven-haskell
@version 0.1.0.0


-- | Internal representation of event record and related facilities. Keep
--   this under a pillow when writing custom wrappers.
module System.Log.Raven.Types

-- | Sentry client settings parsed from a DSN.
data SentrySettings
SentryDisabled :: SentrySettings
SentrySettings :: !String -> !String -> !String -> !String -> SentrySettings
sentryURI :: SentrySettings -> !String
sentryPublicKey :: SentrySettings -> !String
sentryPrivateKey :: SentrySettings -> !String
sentryProjectId :: SentrySettings -> !String

-- | Transforms a service DSN into a settings. Format is:
--   
--   <pre>
--   {PROTOCOL}://{PUBLIC_KEY}:{SECRET_KEY}@{HOST}{PATH}/{PROJECT_ID}
--   </pre>
fromDSN :: String -> SentrySettings

-- | Assemble http endpoint URL from settings.
endpointURL :: SentrySettings -> Maybe String

-- | Misc settings packaged for easier operations.
data SentryService
SentryService :: SentrySettings -> (SentryRecord -> SentryRecord) -> (SentrySettings -> SentryRecord -> IO ()) -> (SentryRecord -> IO ()) -> SentryService
serviceSettings :: SentryService -> SentrySettings
serviceDefaults :: SentryService -> (SentryRecord -> SentryRecord)
serviceTransport :: SentryService -> (SentrySettings -> SentryRecord -> IO ())
serviceFallback :: SentryService -> (SentryRecord -> IO ())

-- | Sentry log levels. Custom levels should be configured in Sentry or
--   sending messages will fail.
data SentryLevel
Fatal :: SentryLevel
Error :: SentryLevel
Warning :: SentryLevel
Info :: SentryLevel
Debug :: SentryLevel
Custom :: String -> SentryLevel

-- | Event packet to be sent. See detailed field descriptions in
--   <a>http://sentry.readthedocs.org/en/latest/developer/client/index.html#building-the-json-packet</a>.
data SentryRecord
SentryRecord :: !String -> !String -> !String -> !SentryLevel -> !String -> Maybe String -> Maybe String -> !Assoc -> Maybe String -> !Assoc -> !Assoc -> HashMap String Value -> SentryRecord
srEventId :: SentryRecord -> !String
srMessage :: SentryRecord -> !String
srTimestamp :: SentryRecord -> !String
srLevel :: SentryRecord -> !SentryLevel
srLogger :: SentryRecord -> !String
srPlatform :: SentryRecord -> Maybe String
srCulprit :: SentryRecord -> Maybe String
srTags :: SentryRecord -> !Assoc
srServerName :: SentryRecord -> Maybe String
srModules :: SentryRecord -> !Assoc
srExtra :: SentryRecord -> !Assoc
srInterfaces :: SentryRecord -> HashMap String Value

-- | Initialize a record with all required fields filled in.
newRecord :: String -> String -> String -> SentryLevel -> String -> SentryRecord
instance Show SentrySettings
instance Read SentrySettings
instance Eq SentrySettings
instance Show SentryLevel
instance Read SentryLevel
instance Eq SentryLevel
instance Show SentryRecord
instance Eq SentryRecord
instance ToJSON SentryRecord
instance ToJSON SentryLevel


-- | Structured data interfaces from Sentry core:
--   <a>http://sentry.readthedocs.org/en/latest/developer/interfaces/index.html#provided-interfaces</a>
module System.Log.Raven.Interfaces

-- | 'sentry.interfaces.Message': A standard message consisting of a
--   message arg, and an optional params arg for formatting.
message :: String -> [Value] -> SentryRecord -> SentryRecord

-- | 'sentry.interfaces.Exception': A standard exception with a mandatory
--   value argument, and optional type and``module`` argument describing
--   the exception class type and module namespace.
exception :: String -> Maybe String -> Maybe String -> SentryRecord -> SentryRecord

-- | 'sentry.interfaces.Http': The Request information is stored in the
--   Http interface.
--   
--   Sentry will explicitly look for REMOTE_ADDR in env for things which
--   require an IP address.
--   
--   The data variable should only contain the request body (not the query
--   string). It can either be a dictionary (for standard HTTP requests) or
--   a raw request body.
--   
--   <pre>
--   import System.Log.RavenInterfaces as SI
--   let upd = SI.http
--               "http://absolute.uri/foo"
--               "POST"
--               (SI.QueryArgs [("foo", "bar")])
--               (Just "hello=world")
--               (Just "foo=bar")
--               [("Content-Type", "text/html")]
--               [("REMOTE_ADDR", "127.1.0.1")]
--   </pre>
http :: String -> String -> HttpArgs -> Maybe String -> Maybe String -> [(String, String)] -> [(String, String)] -> SentryRecord -> SentryRecord

-- | Optional and optionally parsed HTTP query
data HttpArgs
EmptyArgs :: HttpArgs
RawArgs :: String -> HttpArgs
QueryArgs :: [(String, String)] -> HttpArgs

-- | 'sentry.interfaces.User': An interface which describes the
--   authenticated User for a request.
--   
--   <pre>
--   let upd = SI.user "unique_id" [ ("username", "my_user")
--                                 , ("email", "foo@example.com") ]
--   </pre>
user :: String -> [(String, String)] -> SentryRecord -> SentryRecord

-- | 'sentry.interfaces.Query': A SQL query with an optional string
--   describing the SQL driver, engine.
query :: Maybe String -> String -> SentryRecord -> SentryRecord

-- | Generic interface helper.
interface :: ToJSON v => String -> v -> SentryRecord -> SentryRecord

-- | JSON object with optional fields removed.
fields :: [[(String, Value)]] -> HashMap String Value

-- | A mandatory field.
(.=:) :: ToJSON v => String -> v -> [(String, Value)]

-- | Optional simple field.
fromMaybe :: ToJSON v => String -> Maybe v -> [(String, Value)]

-- | Optional dict-like field.
fromAssoc :: String -> [(String, String)] -> [(String, Value)]
instance Eq HttpArgs
instance Show HttpArgs


-- | Dummy «transports» for debugging purposes.
module System.Log.Raven.Transport.Debug

-- | Dump all glory details.
dumpRecord :: SentrySettings -> SentryRecord -> IO ()

-- | Log-like output with very few data shown.
briefRecord :: SentrySettings -> SentryRecord -> IO ()

-- | Catch event record into an *empty* <a>MVar</a>. Make sure you take
--   it's contents before next message!
catchRecord :: MVar SentryRecord -> SentrySettings -> SentryRecord -> IO ()


-- | Raven is a client for Sentry event server
--   (<a>https://www.getsentry.com/</a>).
--   
--   Start by initializing the raven <tt>Service</tt>:
--   
--   <pre>
--   l &lt;- initRaven
--            "https://pub:priv@sentry.hostname.tld:8443/sentry/example_project"
--            id
--            sendRecord
--            stderrFallback
--   </pre>
--   
--   Send events using <a>register</a> function:
--   
--   <pre>
--   register l "my.logger.name" Debug "Hi there!" id
--   </pre>
--   
--   Tags and stuff can be added using register update functions.
--   
--   <pre>
--   import Data.HashMap.Strict as HM
--   let tags r = r { srTags = HM.insert "spam" "sausage"
--                           . HM.insert "eggs" "bacon"
--                           . srTags r }
--   lt &lt;- initRaven dsn tags sendRecord stderrFallback
--   
--   let culprit r = r { srCulprit = "my.module.function.name" }
--   register lt "test.culprit" Error "It's a trap!" culprit
--   let extra r = r { srExtra = HM.insert "fnord" "42" $ srExtra r }
--   register lt "test.extra" Info "Test with tags and extra, please ignore."
--   </pre>
--   
--   The core package provides only general interface for sending events
--   which could be wrapped to adapt it to your needs.
--   
--   <pre>
--   let debug msg = forkIO $ register l "my.logger.name" Debug msg (culprit . extra)
--   debug "Async stuff too."
--   </pre>
--   
--   There are some little helpers to compose your own updaters. You can
--   use them both in <a>initRaven</a> and <a>register</a>.
--   
--   <pre>
--   l &lt;- initRaven dsn ( tags [ ("spam", "sausage"
--                             , ("eggs", "bacon") ]
--                      . extra [ ("more", "stuff") ]
--                      )
--                      sendRecord stderrFallback
--   
--   register l "test.helpers" Info "yup, i'm here." $ culprit "java.lang.NotReally"
--   </pre>
module System.Log.Raven

-- | Initialize event service.
initRaven :: String -> (SentryRecord -> SentryRecord) -> (SentrySettings -> SentryRecord -> IO ()) -> (SentryRecord -> IO ()) -> IO SentryService

-- | Disabled service that ignores incoming events.
disabledRaven :: IO SentryService

-- | Ask service to store an event.
register :: SentryService -> String -> SentryLevel -> String -> (SentryRecord -> SentryRecord) -> IO ()

-- | Show basic message on stderr.
stderrFallback :: SentryRecord -> IO ()

-- | Crash and burn with record data.
errorFallback :: SentryRecord -> IO ()

-- | Ignore recording errors.
silentFallback :: SentryRecord -> IO ()

-- | Set culprit field.
culprit :: String -> SentryRecord -> SentryRecord

-- | Add record tags.
tags :: [(String, String)] -> SentryRecord -> SentryRecord

-- | Add record extra information.
extra :: [(String, String)] -> SentryRecord -> SentryRecord

-- | Record an event using logging service.
record :: String -> SentryLevel -> String -> (SentryRecord -> SentryRecord) -> IO SentryRecord

-- | JSON-encode record data.
recordLBS :: SentryRecord -> ByteString


-- | HTTPS-capable transport using http-conduit.
module System.Log.Raven.Transport.HttpConduit
sendRecord :: SentrySettings -> SentryRecord -> IO ()
