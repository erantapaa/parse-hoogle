-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A library for manipulating the historical dictionary of Polish (deprecated)
--   
--   DEPRECATED. Use
--   <a>http://hackage.haskell.org/package/hist-pl-lexicon</a> instead.
--   
--   The library provides a binary representation of the historical
--   dictionary of Polish and language markup format (LMF) parsing
--   utilities which allow to translate the original LMF representation of
--   the dictionary to the binary form.
@package polh-lexicon
@version 0.2.2


-- | The module provides types for dictionary representation.
module NLP.Polh.Types

-- | Form or text representation.
data Repr
Repr :: Text -> Text -> Maybe Text -> Repr
writtenForm :: Repr -> Text
language :: Repr -> Text
sourceID :: Repr -> Maybe Text

-- | A class of objects with a written representation.
class HasRepr t
repr :: HasRepr t => t -> [Repr]

-- | Get textual representations of an object.
text :: HasRepr t => t -> [Text]

-- | A word form.
newtype WordForm
WordForm :: [Repr] -> WordForm

-- | A lemma (base) form.
newtype Lemma
Lemma :: [Repr] -> Lemma

-- | A related form.
data RelForm
RelForm :: [Repr] -> Text -> RelForm
relRepr :: RelForm -> [Repr]
relTo :: RelForm -> Text

-- | A definition of the lexeme sense.
newtype Definition
Definition :: [Repr] -> Definition

-- | A context in which a given sense is illustrated.
newtype Context
Context :: [Repr] -> Context

-- | A description of a syntactic behaviour.
data SynBehaviour
SynBehaviour :: [Repr] -> [Text] -> SynBehaviour
synRepr :: SynBehaviour -> [Repr]
synSenseIds :: SynBehaviour -> [Text]

-- | A potential sense of a given lexeme.
data Sense
Sense :: Maybe Text -> [Text] -> [Definition] -> [Context] -> Sense
senseId :: Sense -> Maybe Text
style :: Sense -> [Text]
defs :: Sense -> [Definition]
cxts :: Sense -> [Context]

-- | A description of a lexeme.
data LexEntry
LexEntry :: Text -> Maybe Text -> Maybe Text -> [Text] -> Lemma -> [WordForm] -> [Text] -> [SynBehaviour] -> [Sense] -> [RelForm] -> LexEntry

-- | An ID of the lexical entry.
lexId :: LexEntry -> Text

-- | A line reference number. Provisional field.
lineRef :: LexEntry -> Maybe Text

-- | A status of the lexeme. Provisional field.
status :: LexEntry -> Maybe Text

-- | Potential parts of speech.
pos :: LexEntry -> [Text]

-- | A base form.
lemma :: LexEntry -> Lemma

-- | Word forms of the lexeme.
forms :: LexEntry -> [WordForm]

-- | A list of components (only when the entry represent a compound
--   lexeme).
components :: LexEntry -> [Text]

-- | A list of potential syntactic behaviours of the lexeme.
syntactic :: LexEntry -> [SynBehaviour]

-- | A list of potential semantic descriptions.
senses :: LexEntry -> [Sense]

-- | Forma related to the lexeme.
related :: LexEntry -> [RelForm]

-- | A polh dictionary is a list of lexical entries.
type Polh = [LexEntry]
instance Show Repr
instance Read Repr
instance Eq Repr
instance Ord Repr
instance Show WordForm
instance Read WordForm
instance Eq WordForm
instance Ord WordForm
instance Binary WordForm
instance HasRepr WordForm
instance Show RelForm
instance Read RelForm
instance Eq RelForm
instance Ord RelForm
instance Show Lemma
instance Read Lemma
instance Eq Lemma
instance Ord Lemma
instance Binary Lemma
instance HasRepr Lemma
instance Show Definition
instance Read Definition
instance Eq Definition
instance Ord Definition
instance Binary Definition
instance HasRepr Definition
instance Show Context
instance Read Context
instance Eq Context
instance Ord Context
instance Binary Context
instance HasRepr Context
instance Show SynBehaviour
instance Read SynBehaviour
instance Eq SynBehaviour
instance Ord SynBehaviour
instance Show Sense
instance Read Sense
instance Eq Sense
instance Ord Sense
instance Show LexEntry
instance Read LexEntry
instance Eq LexEntry
instance Ord LexEntry
instance Binary LexEntry
instance Binary Sense
instance Binary SynBehaviour
instance HasRepr SynBehaviour
instance HasRepr RelForm
instance Binary RelForm
instance HasRepr [Repr]
instance Binary Repr


-- | The module provides parsing utilities for the LMF dictionary.
module NLP.Polh.LMF.Parse

-- | Read the dictionary from the LMF file.
readPolh :: FilePath -> IO Polh

-- | Parse the entire dictionary in the LMF format.
parsePolh :: Text -> Polh

-- | Parse the lexical entry LMF representation
parseLexEntry :: Text -> LexEntry


-- | Printing utilities for the LMF dictionary format.
module NLP.Polh.LMF.Show

-- | Show the entire dictionary as a lazy text in the LMF format.
showPolh :: Polh -> Text

-- | Show lexical entry using the LMF format.
showLexEntry :: LexEntry -> Text


-- | Re-export modules from the LMF hierarchy.
module NLP.Polh.LMF


-- | Some utility functions for working with the dictionary.
module NLP.Polh.Util

-- | All format (base form + other forms) of the lexeme.
allForms :: LexEntry -> [Text]

-- | Does lexeme take the given form?
hasForm :: LexEntry -> Text -> Bool

-- | Add new word form to the lexeme description.
addForm :: WordForm -> LexEntry -> LexEntry


-- | The module provides functions for working with the binary
--   representation of the historical dictionary of Polish.
module NLP.Polh.Binary

-- | Entry in the binary dictionary consists of the lexical entry and
--   corresponding unique identifier.
data BinEntry
BinEntry :: LexEntry -> Int -> BinEntry

-- | Lexical entry.
entry :: BinEntry -> LexEntry

-- | Unique identifier among lexical entries with the same first form (see
--   <a>Key</a> data type).
uid :: BinEntry -> Int

-- | A dictionary key which uniquely identifies the lexical entry.
data Key
Key :: Text -> Int -> Key

-- | First form (presumably lemma) of the lexical entry.
keyForm :: Key -> Text

-- | Unique identifier among lexical entries with the same <a>keyForm</a>.
keyUid :: Key -> Int

-- | A rule for translating a form into a binary dictionary key.
data Rule
Rule :: !Int -> !Text -> !Int -> Rule

-- | Number of characters to cut from the end of the form.
cut :: Rule -> !Int

-- | A suffix to paste.
suffix :: Rule -> !Text

-- | Unique identifier of the entry.
ruleUid :: Rule -> !Int

-- | Form representing the lexical entry.
proxyForm :: LexEntry -> Text

-- | Key assigned to the binary entry.
binKey :: BinEntry -> Key

-- | Make a rule which translates between the string and the key.
between :: Text -> Key -> Rule

-- | Apply the rule.
apply :: Rule -> Text -> Key

-- | Save the polh dictionary in the empty directory.
savePolh :: FilePath -> Polh -> IO ()

-- | Load dictionary from a disk in a lazy manner. Return <a>Nothing</a> if
--   the path doesn't correspond to a binary representation of the
--   dictionary.
loadPolh :: FilePath -> IO (Maybe [BinEntry])

-- | A Polh monad transformer.
data PolhT m a

-- | Execute the Polh monad transformer against the binary Polh
--   representation located in the given directory. Return Nothing if the
--   directory doesnt' exist or if it doesn't look like a Polh dictionary.
runPolhT :: MonadIO m => FilePath -> PolhT m a -> m (Maybe a)

-- | A Polh monad is a Polh monad transformer over the hidden IO monad.
type PolhM a = PolhT IO a

-- | Execute the Polh monad against the binary Polh representation located
--   in the given directory. Return Nothing if the directory doesnt' exist
--   or if it doesn't look like a Polh dictionary.
runPolh :: FilePath -> PolhM a -> IO (Maybe a)

-- | List of dictionary keys.
index :: (Applicative m, MonadIO m) => PolhT m [Key]

-- | Extract lexical entry with the given key.
withKey :: (Applicative m, MonadIO m) => Key -> PolhT m (Maybe BinEntry)

-- | Lookup the form in the dictionary.
lookup :: (Applicative m, MonadIO m) => Text -> PolhT m [BinEntry]
instance Show BinEntry
instance Eq BinEntry
instance Ord BinEntry
instance Show Key
instance Eq Key
instance Ord Key
instance Show Rule
instance Eq Rule
instance Ord Rule
instance Functor m => Functor (PolhT m)
instance Applicative m => Applicative (PolhT m)
instance Monad m => Monad (PolhT m)
instance MonadTrans PolhT
instance MonadIO m => MonadIO (PolhT m)
instance Binary Rule
instance Binary BinEntry
