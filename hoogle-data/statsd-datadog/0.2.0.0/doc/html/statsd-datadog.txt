-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | DataDog-flavored StatsD client.
--   
--   StatsD client for UDP protocol.
--   
--   <pre>
--   import Network.StatsD
--   
--   main = do
--       sd &lt;- connectStatsD "localhost" "8125"
--       sendStatsDIO sd (counter_ "launches")
--       sendStatsDIO sd (event "Datadog extensions" "DD Agent provides a statsd protocol extension for events.")
--   </pre>
@package statsd-datadog
@version 0.2.0.0

module Network.StatsD.Datagram
class ToDatagram a
toDatagram :: ToDatagram a => a -> Datagram
newtype Datagram
Datagram :: Builder -> Datagram

-- | Collect builder data and prepare it to be sent on a wire.
renderDatagram :: ToDatagram a => a -> ByteString
fromDouble :: Double -> Text
prefixed :: Char -> Text -> Builder
mprefixed :: Char -> Maybe Text -> Builder
tags :: [(Text, Text)] -> Builder
instance Show Datagram
instance ToDatagram Datagram

module Network.StatsD.Tags
type Tags = [(Text, Text)]

-- | Add tags (with or without values). Due to OverloadedStrings instances
--   interference you have to pin types using <a>pack</a> or <tt>::</tt>.
--   
--   <pre>
--   counter_ "pings" `tagged` [ T.pack "success", "icmp" :: Text, "default" ]
--                    `tagged` [ (T.pack "valued", "42" :: Text), ("it", "works") ]
--   </pre>
tagged :: (Tagged a, ToTag t) => a -> [t] -> a
class Tagged a
getTags :: Tagged a => a -> Tags
setTags :: Tagged a => a -> Tags -> a
class ToTag a
toTag :: ToTag a => a -> (Text, Text)
instance ToTag Text
instance ToTag (Text, Text)


-- | Datadog extension to statsd protocol for custom events to appear in
--   your HQ.
module Network.StatsD.Event

-- | Set event fields for fancy effects in event log.
data Event
Event :: Text -> Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> [(Text, Text)] -> Event
eTitle :: Event -> Text
eText :: Event -> Text
eDate :: Event -> Maybe Text
eHostname :: Event -> Maybe Text
eAggrKey :: Event -> Maybe Text
ePriority :: Event -> Maybe Text
eSourceType :: Event -> Maybe Text
eAlertType :: Event -> Maybe Text
eTags :: Event -> [(Text, Text)]

-- | Construct a basic event.
event :: Text -> Text -> Event
instance Show Event
instance Tagged Event
instance ToDatagram Event

module Network.StatsD.Metric
gauge :: Text -> Double -> Metric
gaugeInc :: Text -> Double -> Metric
gaugeDec :: Text -> Double -> Metric
counter :: Text -> Integer -> Metric
counter_ :: Text -> Metric
histogram :: Text -> Double -> Metric
timer :: Text -> Double -> Metric
set :: Text -> Text -> Metric

-- | Generic StatsD metric.
data Metric
Metric :: Text -> Text -> Text -> Maybe Double -> Tags -> Metric
mName :: Metric -> Text
mValue :: Metric -> Text
mType :: Metric -> Text
mSampleRate :: Metric -> Maybe Double
mTags :: Metric -> Tags

-- | Create a basic Metric for custom type.
metric :: Text -> Text -> Text -> Metric
instance Show Metric
instance Tagged Metric
instance ToDatagram Metric

module Network.StatsD.Socket

-- | Initialize a StatsD container.
connectStatsD :: String -> String -> IO StatsD

-- | Send a metric or an event to a connected statsd.
sendStatsDIO :: ToDatagram a => StatsD -> a -> IO ()

-- | Socket container.
data StatsD

-- | Extract a StatsD state from application monad stack.
withStatsD :: (HasStatsD m, MonadBaseControl IO m) => (StatsD -> m a) -> m a
class MonadBaseControl IO m => HasStatsD m
getStatsD :: HasStatsD m => m StatsD

-- | Send a metric or an event from application monad.
statsd :: (HasStatsD m, ToDatagram a) => a -> m ()

module Network.StatsD
