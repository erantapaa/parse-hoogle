-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | PLY file loader.
--   
@package ply-loader
@version 0.4

module PLY.Internal.StrictReplicate

-- | Yield a <a>Stream</a> of values obtained by performing the monadic
--   action the given number of times. Each value yielded by the monadic
--   action is evaluated to WHNF.
replicateStreamM' :: Monad m => Int -> m a -> Stream m a

-- | Execute the monadic action the given number of times and store the
--   results in a vector. Each value yielded by the monadic action is
--   evaluated to WHNF.
replicateM' :: (Monad m, Vector v a) => Int -> m a -> m (v a)

module PLY.Types
data Format
ASCII :: Format
Binary_LE :: Format
Binary_BE :: Format
data Scalar
Schar :: {-# UNPACK #-} !Int8 -> Scalar
Suchar :: {-# UNPACK #-} !Word8 -> Scalar
Sshort :: {-# UNPACK #-} !Int16 -> Scalar
Sushort :: {-# UNPACK #-} !Word16 -> Scalar
Sint :: {-# UNPACK #-} !Int -> Scalar
Suint :: {-# UNPACK #-} !Word32 -> Scalar
Sfloat :: {-# UNPACK #-} !Float -> Scalar
Sdouble :: {-# UNPACK #-} !Double -> Scalar
data ScalarT
Tchar :: ScalarT
Tuchar :: ScalarT
Tshort :: ScalarT
Tushort :: ScalarT
Tint :: ScalarT
Tuint :: ScalarT
Tfloat :: ScalarT
Tdouble :: ScalarT
data Property
ScalarProperty :: !ScalarT -> !ByteString -> Property
ListProperty :: !ScalarT -> !ByteString -> Property
data Element
Element :: ByteString -> Int -> [Property] -> Element
elName :: Element -> ByteString
elNum :: Element -> Int
elProps :: Element -> [Property]
class Storable a => PLYType a
plyType :: PLYType a => a -> ScalarT
unsafeUnwrap :: PLYType a => Scalar -> a

-- | The member functions of this class facilitate writing values of
--   primitive types to raw memory (which may have been allocated with the
--   above mentioned routines) and reading values from blocks of raw
--   memory. The class, furthermore, includes support for computing the
--   storage requirements and alignment restrictions of storable types.
--   
--   Memory addresses are represented as values of type <tt><a>Ptr</a>
--   a</tt>, for some <tt>a</tt> which is an instance of class
--   <a>Storable</a>. The type argument to <a>Ptr</a> helps provide some
--   valuable type safety in FFI code (you can't mix pointers of different
--   types without an explicit cast), while helping the Haskell type system
--   figure out which marshalling method is needed for a given pointer.
--   
--   All marshalling between Haskell and a foreign language ultimately
--   boils down to translating Haskell data structures into the binary
--   representation of a corresponding data structure of the foreign
--   language and vice versa. To code this marshalling in Haskell, it is
--   necessary to manipulate primitive data types stored in unstructured
--   memory blocks. The class <a>Storable</a> facilitates this manipulation
--   on all types for which it is instantiated, which are the standard
--   basic types of Haskell, the fixed size <tt>Int</tt> types
--   (<a>Int8</a>, <a>Int16</a>, <a>Int32</a>, <a>Int64</a>), the fixed
--   size <tt>Word</tt> types (<a>Word8</a>, <a>Word16</a>, <a>Word32</a>,
--   <a>Word64</a>), <a>StablePtr</a>, all types from
--   <a>Foreign.C.Types</a>, as well as <a>Ptr</a>.
--   
--   Minimal complete definition: <a>sizeOf</a>, <a>alignment</a>, one of
--   <a>peek</a>, <a>peekElemOff</a> and <a>peekByteOff</a>, and one of
--   <a>poke</a>, <a>pokeElemOff</a> and <a>pokeByteOff</a>.
class Storable a
instance Show Format
instance Show Scalar
instance Eq ScalarT
instance Show ScalarT
instance Show Property
instance Show Element
instance PLYType CUChar
instance PLYType Word8
instance PLYType CInt
instance PLYType Int
instance PLYType CDouble
instance PLYType Double
instance PLYType CFloat
instance PLYType Float

module PLY.Internal.Parsers

-- | Skip white space, comments, and obj_info lines.
skip :: Parser ()

-- | Parse a PLY file format line
format :: Parser Format
char :: Parser Int8
uchar :: Parser Word8
int :: Parser Int
uint :: Parser Word32
int16 :: Parser Int16
uint16 :: Parser Word16
float :: Parser Float

-- | Take everything up to the end of the line
line :: Parser ByteString
scalarProperty :: Parser Property
scalarType :: Parser ScalarT

-- | Take the next white space-delimited word.
word :: Parser ByteString
listProperty :: Parser Property

-- | Parse a monotyped list of values. All returned <a>Scalar</a> values
--   will be of the type corresponding to the specific <a>ScalarT</a>
--   given.
parseList :: ScalarT -> Parser [Scalar]
property :: Parser Property
element :: Parser Element
parseScalar :: ScalarT -> Parser Scalar

-- | Parse a flat property list
multiProps :: [Property] -> Parser [Scalar]

-- | Parse a PLY header.
header :: Parser (Format, [Element])

-- | Advance a <a>ByteString</a> to where a given <a>Parser</a> finishes.
--   An <a>error</a> is raised if the parser fails to complete.
parseSkip :: Parser a -> ByteString -> ByteString


-- | Parse Stanford 3D Scanning Repository "<tt>.conf</tt>" files that
--   place individual PLY models into a consistent coordinate frame.
module PLY.Conf

-- | Parse a Stanford .conf file.
parseConf :: Fractional a => ByteString -> Either String (Conf a)

-- | A 3D transformation represented as a translation vector and a
--   rotation.
type Transformation a = (V3 a, Quaternion a)

-- | A <tt>.conf</tt> file includes a base transformation matrix, and a
--   list of meshes identified by their file name and a
--   <a>Transformation</a> to place geometry in a consistent coordinate
--   frame.
data Conf a
Conf :: Transformation a -> [(ByteString, Transformation a)] -> Conf a
camera :: Conf a -> Transformation a
meshes :: Conf a -> [(ByteString, Transformation a)]
instance Show a => Show (Conf a)

module PLY.Binary
getScalarT :: ScalarT -> Get Scalar
mkScalarParser :: ScalarT -> Get Scalar
mkListParser :: ScalarT -> Get (Vector Scalar)
mkElParser :: [Property] -> Get (Vector Scalar)
parseBinElement :: Element -> ByteString -> (Vector (Vector Scalar), ByteString)

module PLY.Ascii
parseASCII :: Element -> Parser (Vector (Vector Scalar))
parseASCIIv3 :: PLYType a => Element -> Parser (Vector (V3 a))


-- | The loading of a <tt>ply</tt> file is broken down into two steps:
--   header parsing, and data loading. The <tt>loadPLY</tt> function will,
--   if successful, return a data structure that may be queried to extract
--   numeric data using <a>loadElements</a> and <a>loadElementsV3</a>. For
--   example,
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings #-}
--   import Data.Vector.Storable (Vector)
--   import Linear.V3
--   import PLY
--   
--   loadVerts :: FilePath -&gt; IO (Either String (Vector (V3 Float)))
--   loadVerts = loadElementsV3 "vertex"
--   </pre>
--   
--   To load all vertex data from a series of <tt>ply</tt> files identified
--   by a <tt>.conf</tt> file, consider using,
--   
--   <pre>
--   fromConf :: FilePath -&gt; IO (Either String (Vector (V3 Float)))
--   fromConf = loadConfV3 "vertex"
--   </pre>
module PLY

-- | <tt>loadElements elementName plyFile</tt> loads a <a>Vector</a> of
--   each vertex of the requested element array from <tt>plyFile</tt>.
loadElements :: ByteString -> FilePath -> IO (Either String (Vector (Vector Scalar)))

-- | Like <a>loadElements</a>, but restricted to 3D vectors. When it can be
--   used, this function is much more efficient thatn
--   <a>loadPlyElements</a>.
loadElementsV3 :: PLYType a => ByteString -> FilePath -> IO (Either String (Vector (V3 a)))

-- | Load all meshes identified by a <tt>.conf</tt> file in parallel, and
--   transform vertex data into the coordinate frame specified by the
--   <tt>.conf</tt> file. The application <tt>loadMeshesV3 confFile
--   element</tt> loads <tt>confFile</tt> to identify every <tt>ply</tt>
--   mesh to load. The <tt>ply</tt> files are loaded from the same
--   directory that contained the <tt>.conf</tt> file, and the data
--   associated with <tt>element</tt> (e.g. <tt>"vertex"</tt>) is loaded,
--   transformed, and concatenated from all the meshes.
loadConfV3 :: (PLYType a, Fractional a, Conjugate a, RealFloat a) => ByteString -> FilePath -> IO (Either String (Vector (V3 a)))
type Header = (Format, [Element])

-- | A PLY header and the associated raw data. Use <a>loadElements</a> or
--   <a>loadElementsV3</a> to extract a particular element array.
data PLYData

-- | Load a PLY header from a file.
loadHeader :: FilePath -> IO (Either String PLYData)

-- | Attempt to parse a PLY file from the given bytes. If the PLY header is
--   successfully parsed, the <a>PLYData</a> value returned may be used
--   with <a>loadElements</a> and <a>loadElementsV3</a> to extract data.
preloadPly :: ByteString -> Either String PLYData

-- | Extract the <a>Header</a> from a partially loaded PLY file (as from
--   <a>preloadPly</a>).
plyHeader :: PLYData -> Header

-- | <tt>loadPlyElements elementName ply</tt> loads a <a>Vector</a> of each
--   vertex of the requested element array. If you are extracting 3D data,
--   consider using <a>loadPlyElementsV3</a>.
loadPlyElements :: ByteString -> PLYData -> Either String (Vector (Vector Scalar))

-- | Like <a>loadPlyElements</a>, but restricted to 3D vectors. When it can
--   be used, this function is much more efficient than
--   <a>loadPlyElements</a>.
loadPlyElementsV3 :: PLYType a => ByteString -> PLYData -> Either String (Vector (V3 a))
instance Show PLYData
