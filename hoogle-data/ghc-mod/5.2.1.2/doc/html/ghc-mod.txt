-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Happy Haskell Programming
--   
--   The ghc-mod command is a backend command to enrich Haskell programming
--   on editors including Emacs, Vim, and Sublime. The ghc-mod command is
--   based on ghc-mod library which is a wrapper of GHC API. This package
--   includes the ghc-mod command, the ghc-mod library, and Emacs front-end
--   (for historical reasons). For more information, please see its home
--   page.
@package ghc-mod
@version 5.2.1.2


-- | Low level access to the ghc-mod library.
module Language.Haskell.GhcMod.Internal

-- | A single GHC command line option.
type GHCOption = String

-- | A package's name, verson and id.
type Package = (PackageBaseName, PackageVersion, PackageId)

-- | A package name.
type PackageBaseName = String

-- | A package version.
type PackageVersion = String

-- | A package id.
type PackageId = String

-- | An include directory for modules.
type IncludeDir = FilePath

-- | Option information for GHC
data CompilerOptions
CompilerOptions :: [GHCOption] -> [IncludeDir] -> [Package] -> CompilerOptions

-- | Command line options
ghcOptions :: CompilerOptions -> [GHCOption]

-- | Include directories for modules
includeDirs :: CompilerOptions -> [IncludeDir]

-- | Dependent package names
depPackages :: CompilerOptions -> [Package]

-- | Parse a cabal file and return a <a>PackageDescription</a>.
parseCabalFile :: (IOish m, MonadError GhcModError m) => Cradle -> FilePath -> m PackageDescription

-- | Getting necessary <a>CompilerOptions</a> from three information
--   sources.
getCompilerOptions :: (IOish m, MonadError GhcModError m) => [GHCOption] -> Cradle -> PackageDescription -> m CompilerOptions

-- | Extracting all <a>BuildInfo</a> for libraries, executables, and tests.
cabalAllBuildInfo :: PackageDescription -> [BuildInfo]

-- | Extracting package names of dependency.
cabalDependPackages :: [BuildInfo] -> [PackageBaseName]

-- | Extracting include directories for modules.
cabalSourceDirs :: [BuildInfo] -> [IncludeDir]

-- | Extracting all <a>Module</a> <a>FilePath</a>s for libraries,
--   executables, tests and benchmarks.
cabalAllTargets :: PackageDescription -> IO ([String], [String], [String], [String])

-- | Obtaining the directory for ghc system libraries.
ghcLibDir :: FilePath

-- | Returns the path to the currently running ghc-mod executable. With
--   ghc&lt;7.6 this is a guess but &gt;=7.6 uses <a>getExecutablePath</a>.
ghcModExecutable :: IO FilePath

-- | Return the <a>DynFlags</a> currently in use in the GHC session.
getDynamicFlags :: IO DynFlags

-- | Set the files as targets and load them.
setTargetFiles :: IOish m => [FilePath] -> GhcModT m ()

-- | Set the session flag (e.g. "-Wall" or "-w:") then executes a body.
--   Logged messages are returned as <a>String</a>. Right is success and
--   Left is failure.
withLogger :: IOish m => (DynFlags -> DynFlags) -> GhcModT m () -> GhcModT m (Either String String)

-- | Set <a>DynFlags</a> equivalent to "-w:".
setNoWarningFlags :: DynFlags -> DynFlags

-- | Set <a>DynFlags</a> equivalent to "-Wall".
setAllWarningFlags :: DynFlags -> DynFlags
data GhcModEnv
GhcModEnv :: !(IORef HscEnv) -> Options -> Cradle -> GhcModEnv
gmGhcSession :: GhcModEnv -> !(IORef HscEnv)
gmOptions :: GhcModEnv -> Options
gmCradle :: GhcModEnv -> Cradle
newGhcModEnv :: Options -> FilePath -> IO GhcModEnv
data GhcModState
defaultState :: GhcModState
data CompilerMode
Simple :: CompilerMode
Intelligent :: CompilerMode
type GhcModLog = ()

-- | Run a computation inside <tt>GhcModT</tt> providing the RWST
--   environment and initial state. This is a low level function, use it
--   only if you know what to do with <a>GhcModEnv</a> and
--   <a>GhcModState</a>.
--   
--   You should probably look at <a>runGhcModT</a> instead.
runGhcModT' :: IOish m => GhcModEnv -> GhcModState -> GhcModT m a -> m (Either GhcModError (a, GhcModState), GhcModLog)

-- | <tt>hoistGhcModT result</tt>. Embed a GhcModT computation's result
--   into a GhcModT computation. Note that if the computation that returned
--   <tt>result</tt> modified the state part of GhcModT this cannot be
--   restored.
hoistGhcModT :: IOish m => (Either GhcModError a, GhcModLog) -> GhcModT m a
options :: IOish m => GhcModT m Options
cradle :: IOish m => GhcModT m Cradle
getCompilerMode :: IOish m => GhcModT m CompilerMode
setCompilerMode :: IOish m => CompilerMode -> GhcModT m ()
withOptions :: IOish m => (Options -> Options) -> GhcModT m a -> GhcModT m a
gmeDoc :: GhcModError -> Doc

-- | Try the left <tt>Ghc</tt> action. If <a>IOException</a> occurs, try
--   the right <tt>Ghc</tt> action.
(||>) :: GhcMonad m => m a -> m a -> m a

-- | Go to the next <tt>Ghc</tt> monad by throwing <tt>AltGhcgoNext</tt>.
goNext :: GhcMonad m => m a

-- | Run any one <tt>Ghc</tt> monad.
runAnyOne :: GhcMonad m => [m a] -> m a
data World
getCurrentWorld :: Cradle -> IO World
didWorldChange :: World -> Cradle -> IO Bool


-- | The ghc-mod library.
module Language.Haskell.GhcMod

-- | The environment where this library is used.
data Cradle
Cradle :: FilePath -> FilePath -> FilePath -> Maybe FilePath -> [GhcPkgDb] -> Cradle

-- | The directory where this library is executed.
cradleCurrentDir :: Cradle -> FilePath

-- | The project root directory.
cradleRootDir :: Cradle -> FilePath

-- | Per-Project temporary directory
cradleTempDir :: Cradle -> FilePath

-- | The file name of the found cabal file.
cradleCabalFile :: Cradle -> Maybe FilePath

-- | Package database stack
cradlePkgDbStack :: Cradle -> [GhcPkgDb]

-- | Finding <a>Cradle</a>. Find a cabal file by tracing ancestor
--   directories. Find a sandbox according to a cabal sandbox config in a
--   cabal directory.
findCradle :: IO Cradle
data Options
Options :: OutputStyle -> LineSeparator -> FilePath -> FilePath -> [GHCOption] -> Bool -> Bool -> Bool -> [String] -> Options
outputStyle :: Options -> OutputStyle

-- | Line separator string.
lineSeparator :: Options -> LineSeparator

-- | <tt>ghc</tt> program name.
ghcProgram :: Options -> FilePath

-- | <tt>cabal</tt> program name.
cabalProgram :: Options -> FilePath

-- | GHC command line options set on the <tt>ghc-mod</tt> command line
ghcUserOptions :: Options -> [GHCOption]

-- | If <a>True</a>, <tt>browse</tt> also returns operators.
operators :: Options -> Bool

-- | If <a>True</a>, <tt>browse</tt> also returns types.
detailed :: Options -> Bool

-- | If <a>True</a>, <tt>browse</tt> will return fully qualified name
qualified :: Options -> Bool
hlintOpts :: Options -> [String]

-- | The type for line separator. Historically, a Null string is used.
newtype LineSeparator
LineSeparator :: String -> LineSeparator

-- | Output style.
data OutputStyle

-- | S expression style.
LispStyle :: OutputStyle

-- | Plain textstyle.
PlainStyle :: OutputStyle

-- | A default <a>Options</a>.
defaultOptions :: Options

-- | Module name.
type ModuleString = String

-- | Haskell expression.
type Expression = String

-- | GHC package database flags.
data GhcPkgDb

-- | Type of function and operation names.
type Symbol = String

-- | Database from <a>Symbol</a> to [<a>ModuleString</a>].
data SymbolDb
data GhcModError

-- | Unknown error
GMENoMsg :: GhcModError

-- | Some Error with a message. These are produced mostly by <a>fail</a>
--   calls on GhcModT.
GMEString :: String -> GhcModError

-- | IOExceptions captured by GhcModT's MonadIO instance
GMEIOException :: IOException -> GhcModError

-- | Configuring a cabal project failed.
GMECabalConfigure :: GhcModError -> GhcModError

-- | Retrieval of the cabal configuration flags failed.
GMECabalFlags :: GhcModError -> GhcModError

-- | Launching an operating system process failed. The first field is the
--   command.
GMEProcess :: [String] -> GhcModError -> GhcModError

-- | No cabal file found.
GMENoCabalFile :: GhcModError

-- | Too many cabal files found.
GMETooManyCabalFiles :: [FilePath] -> GhcModError

-- | This is basically a newtype wrapper around <a>StateT</a>,
--   <a>ErrorT</a>, <a>JournalT</a> and <a>ReaderT</a> with custom
--   instances for <a>GhcMonad</a> and it's constraints that means you can
--   run (almost) all functions from the GHC API on top of <a>GhcModT</a>
--   transparently.
--   
--   The inner monad <tt>m</tt> should have instances for <a>MonadIO</a>
--   and <a>MonadBaseControl</a> <a>IO</a>, in the common case this is
--   simply <a>IO</a>. Most <tt>mtl</tt> monads already have
--   <a>MonadBaseControl</a> <a>IO</a> instances, see the
--   <tt>monad-control</tt> package.
data GhcModT m a

-- | A constraint alias (-XConstraintKinds) to make functions dealing with
--   <tt>GhcModT</tt> somewhat cleaner.
--   
--   Basicially an <tt>IOish m =&gt; m</tt> is a <a>Monad</a> supporting
--   arbitrary <a>IO</a> and exception handling. Usually this will simply
--   be <a>IO</a> but we parametrise it in the exported API so users have
--   the option to use a custom inner monad.
type IOish m = (Functor m, MonadIO m, MonadBaseControl IO m, ExceptionMonad m)

-- | Run a <tt>GhcModT m</tt> computation.
runGhcModT :: IOish m => Options -> GhcModT m a -> m (Either GhcModError a, GhcModLog)
withOptions :: IOish m => (Options -> Options) -> GhcModT m a -> GhcModT m a

-- | Printing necessary information for front-end booting.
boot :: IOish m => GhcModT m String

-- | Getting functions, classes, etc from a module. If <a>detailed</a> is
--   <a>True</a>, their types are also obtained. If <a>operators</a> is
--   <a>True</a>, operators are also returned.
browse :: IOish m => ModuleString -> GhcModT m String

-- | Checking syntax of a target file using GHC. Warnings and errors are
--   returned.
check :: IOish m => [FilePath] -> GhcModT m (Either String String)

-- | Checking syntax of a target file using GHC. Warnings and errors are
--   returned.
checkSyntax :: IOish m => [FilePath] -> GhcModT m String

-- | Obtaining debug information.
debugInfo :: IOish m => GhcModT m String

-- | Expanding Haskell Template.
expandTemplate :: IOish m => [FilePath] -> GhcModT m String

-- | Obtaining information of a target expression. (GHCi's info:)
info :: IOish m => FilePath -> Expression -> GhcModT m String

-- | Checking syntax of a target file using hlint. Warnings and errors are
--   returned.
lint :: IOish m => FilePath -> GhcModT m String

-- | Obtaining the package name and the doc path of a module.
pkgDoc :: IOish m => String -> GhcModT m String

-- | Obtaining root information.
rootInfo :: IOish m => GhcModT m String

-- | Obtaining type of a target expression. (GHCi's type:)
types :: IOish m => FilePath -> Int -> Int -> GhcModT m String

-- | Splitting a variable in a equation.
splits :: IOish m => FilePath -> Int -> Int -> GhcModT m String

-- | Create a initial body from a signature.
sig :: IOish m => FilePath -> Int -> Int -> GhcModT m String
refine :: IOish m => FilePath -> Int -> Int -> Expression -> GhcModT m String
auto :: IOish m => FilePath -> Int -> Int -> GhcModT m String

-- | Listing installed modules.
modules :: IOish m => GhcModT m String

-- | Listing language extensions.
languages :: IOish m => GhcModT m String

-- | Listing GHC flags. (e.g -fno-warn-orphans)
flags :: IOish m => GhcModT m String

-- | Looking up <a>SymbolDb</a> with <a>Symbol</a> to [<a>ModuleString</a>]
--   which will be concatenated. <a>loadSymbolDb</a> is called internally.
findSymbol :: IOish m => Symbol -> GhcModT m String

-- | Looking up <a>SymbolDb</a> with <a>Symbol</a> to [<a>ModuleString</a>]
--   which will be concatenated.
lookupSymbol :: IOish m => Symbol -> SymbolDb -> GhcModT m String

-- | Dumping a set of (<a>Symbol</a>,[<a>ModuleString</a>]) to a file if
--   the file does not exist or is invalid. The file name is printed.
dumpSymbol :: IOish m => FilePath -> GhcModT m String

-- | Loading a file and creates <a>SymbolDb</a>.
loadSymbolDb :: IOish m => GhcModT m SymbolDb
isOutdated :: SymbolDb -> IO Bool
