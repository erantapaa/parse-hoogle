-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | HDBC instance of relational join and typed query for HDBC
--   
@package relational-query-HDBC
@version 0.0.1.0


-- | This module provides driver interface to load database system catalog
--   via HDBC.
module Database.HDBC.Schema.Driver

-- | Mapping between type name string of DBMS and type in Haskell. Type
--   name string depends on specification of DBMS system catalogs.
type TypeMap = [(String, TypeQ)]

-- | Interface type to load database system catalog via HDBC.
data Driver conn
Driver :: TypeMap -> (TypeMap -> conn -> String -> String -> IO ([(String, TypeQ)], [Int])) -> (conn -> String -> String -> IO [String]) -> Driver conn

-- | Custom type mapping of this driver
typeMap :: Driver conn -> TypeMap

-- | Get column name and Haskell type pairs and not-null columns index.
getFieldsWithMap :: Driver conn -> TypeMap -> conn -> String -> String -> IO ([(String, TypeQ)], [Int])

-- | Get primary key column name.
getPrimaryKey :: Driver conn -> conn -> String -> String -> IO [String]

-- | Empty definition of <a>Driver</a>
emptyDriver :: IConnection conn => Driver conn

-- | Helper function to call <a>getFieldsWithMap</a> using <a>typeMap</a>
--   of <a>Driver</a>.
getFields :: IConnection conn => Driver conn -> conn -> String -> String -> IO ([(String, TypeQ)], [Int])


-- | This module provides typed statement running sequence which
--   intermediate structres are typed.
module Database.HDBC.Record.Statement

-- | Typed prepared statement type.
data PreparedStatement p a

-- | Unsafely untype prepared statement.
untypePrepared :: PreparedStatement p a -> Statement

-- | Run prepare and unsafely make Typed prepared statement.
unsafePrepare :: IConnection conn => conn -> String -> IO (PreparedStatement p a)

-- | Typed prepared statement which has bound placeholder parameters.
data BoundStatement a
BoundStatement :: Statement -> [SqlValue] -> BoundStatement a

-- | Untyped prepared statement before executed.
bound :: BoundStatement a -> Statement

-- | Bound parameters.
params :: BoundStatement a -> [SqlValue]

-- | Typed operation to bind parameters.
bind' :: RecordToSql SqlValue p -> PreparedStatement p a -> p -> BoundStatement a

-- | Typed operation to bind parameters. Infered <a>RecordToSql</a> is
--   used.
bind :: ToSql SqlValue p => PreparedStatement p a -> p -> BoundStatement a

-- | Same as <a>bind</a> except for argument is flipped.
bindTo :: ToSql SqlValue p => p -> PreparedStatement p a -> BoundStatement a

-- | Typed executed statement.
data ExecutedStatement a

-- | Untyped executed statement.
executed :: ExecutedStatement a -> Statement

-- | Result of HDBC execute.
result :: ExecutedStatement a -> Integer

-- | Typed execute operation.
execute :: BoundStatement a -> IO (ExecutedStatement a)

-- | Generalized prepare inferred from <a>UntypeableNoFetch</a> instance.
prepareNoFetch :: (UntypeableNoFetch s, IConnection conn) => conn -> s p -> IO (PreparedStatement p ())

-- | Typed execute operation. Only get result.
executeNoFetch :: BoundStatement () -> IO Integer

-- | Bind parameters, execute statement and get execution result.
runPreparedNoFetch :: ToSql SqlValue a => PreparedStatement a () -> a -> IO Integer

-- | Prepare and run sequence for polymorphic no-fetch statement.
runNoFetch :: (UntypeableNoFetch s, IConnection conn, ToSql SqlValue a) => conn -> s a -> a -> IO Integer

-- | Prepare and run it against each parameter list.
mapNoFetch :: (UntypeableNoFetch s, IConnection conn, ToSql SqlValue a) => conn -> s a -> [a] -> IO [Integer]


-- | This module provides typed <a>Query</a> running sequence which
--   intermediate structres are typed.
module Database.HDBC.Record.Query

-- | Typed prepared query type.
type PreparedQuery p a = PreparedStatement p a

-- | Typed prepare query operation.
prepare :: IConnection conn => conn -> Query p a -> IO (PreparedQuery p a)

-- | Same as <a>prepare</a>.
prepareQuery :: IConnection conn => conn -> Query p a -> IO (PreparedQuery p a)

-- | Fetch a record.
fetch :: FromSql SqlValue a => ExecutedStatement a -> IO (Maybe a)

-- | Lazily Fetch all records.
fetchAll :: FromSql SqlValue a => ExecutedStatement a -> IO [a]

-- | Strict version of <a>fetchAll</a>.
fetchAll' :: FromSql SqlValue a => ExecutedStatement a -> IO [a]

-- | Fetch expecting result records is unique.
listToUnique :: [a] -> IO (Maybe a)

-- | Fetch all records but get only first record. Expecting result records
--   is unique.
fetchUnique :: FromSql SqlValue a => ExecutedStatement a -> IO (Maybe a)

-- | Fetch all records but get only first record. Expecting result records
--   is unique. Error when records count is more than one.
fetchUnique' :: FromSql SqlValue a => ExecutedStatement a -> IO (Maybe a)

-- | Execute statement and lazily fetch all records.
runStatement :: FromSql SqlValue a => BoundStatement a -> IO [a]

-- | Strict version of <a>runStatement</a>.
runStatement' :: FromSql SqlValue a => BoundStatement a -> IO [a]

-- | Bind parameters, execute statement and lazily fetch all records.
runPreparedQuery :: (ToSql SqlValue p, FromSql SqlValue a) => PreparedQuery p a -> p -> IO [a]

-- | Strict version of <a>runPreparedQuery</a>.
runPreparedQuery' :: (ToSql SqlValue p, FromSql SqlValue a) => PreparedQuery p a -> p -> IO [a]

-- | Prepare SQL, bind parameters, execute statement and lazily fetch all
--   records.
runQuery :: (IConnection conn, ToSql SqlValue p, FromSql SqlValue a) => conn -> Query p a -> p -> IO [a]

-- | Strict version of <a>runQuery</a>.
runQuery' :: (IConnection conn, ToSql SqlValue p, FromSql SqlValue a) => conn -> Query p a -> p -> IO [a]


-- | This module provides typed <a>Update</a> running sequence which
--   intermediate structres are typed.
module Database.HDBC.Record.Update

-- | Typed prepared update type.
type PreparedUpdate p = PreparedStatement p ()

-- | Typed prepare update operation.
prepare :: IConnection conn => conn -> Update p -> IO (PreparedUpdate p)

-- | Same as <a>prepare</a>.
prepareUpdate :: IConnection conn => conn -> Update p -> IO (PreparedUpdate p)

-- | Bind parameters, execute statement and get execution result.
runPreparedUpdate :: ToSql SqlValue p => PreparedUpdate p -> p -> IO Integer

-- | Prepare update statement, bind parameters, execute statement and get
--   execution result.
runUpdate :: (IConnection conn, ToSql SqlValue p) => conn -> Update p -> p -> IO Integer

-- | Prepare and update with each parameter list.
mapUpdate :: (IConnection conn, ToSql SqlValue a) => conn -> Update a -> [a] -> IO [Integer]


-- | This module provides typed <a>Insert</a> running sequence which
--   intermediate structres are typed.
module Database.HDBC.Record.Insert

-- | Typed prepared insert type.
type PreparedInsert a = PreparedStatement a ()

-- | Typed prepare insert operation.
prepare :: IConnection conn => conn -> Insert a -> IO (PreparedInsert a)

-- | Same as <a>prepare</a>.
prepareInsert :: IConnection conn => conn -> Insert a -> IO (PreparedInsert a)

-- | Bind parameters, execute statement and get execution result.
runPreparedInsert :: ToSql SqlValue a => PreparedInsert a -> a -> IO Integer

-- | Prepare insert statement, bind parameters, execute statement and get
--   execution result.
runInsert :: (IConnection conn, ToSql SqlValue a) => conn -> Insert a -> a -> IO Integer

-- | Prepare and insert each record.
mapInsert :: (IConnection conn, ToSql SqlValue a) => conn -> Insert a -> [a] -> IO [Integer]

-- | Prepare and insert with chunk insert statement. Result is insert
--   action list.
chunksInsertActions :: (IConnection conn, ToSql SqlValue a) => conn -> Insert a -> [a] -> IO [IO [Integer]]

-- | Prepare and insert with chunk insert statement.
chunksInsert :: (IConnection conn, ToSql SqlValue a) => conn -> Insert a -> [a] -> IO [[Integer]]


-- | This module provides typed <a>InsertQuery</a> running sequence which
--   intermediate structres are typed.
module Database.HDBC.Record.InsertQuery

-- | Typed prepared insert query type.
type PreparedInsertQuery p = PreparedStatement p ()

-- | Typed prepare insert-query operation.
prepare :: IConnection conn => conn -> InsertQuery p -> IO (PreparedInsertQuery p)

-- | Same as <a>prepare</a>.
prepareInsertQuery :: IConnection conn => conn -> InsertQuery p -> IO (PreparedInsertQuery p)

-- | Bind parameters, execute statement and get execution result.
runPreparedInsertQuery :: ToSql SqlValue p => PreparedInsertQuery p -> p -> IO Integer

-- | Prepare insert statement, bind parameters, execute statement and get
--   execution result.
runInsertQuery :: (IConnection conn, ToSql SqlValue p) => conn -> InsertQuery p -> p -> IO Integer


-- | This module provides typed <a>Delete</a> running sequence which
--   intermediate structres are typed.
module Database.HDBC.Record.Delete

-- | Typed prepared delete type.
type PreparedDelete p = PreparedStatement p ()

-- | Typed prepare delete operation.
prepare :: IConnection conn => conn -> Delete p -> IO (PreparedDelete p)

-- | Same as <a>prepare</a>.
prepareDelete :: IConnection conn => conn -> Delete p -> IO (PreparedDelete p)

-- | Bind parameters, execute statement and get execution result.
runPreparedDelete :: ToSql SqlValue p => PreparedDelete p -> p -> IO Integer

-- | Prepare delete statement, bind parameters, execute statement and get
--   execution result.
runDelete :: (IConnection conn, ToSql SqlValue p) => conn -> Delete p -> p -> IO Integer


-- | This module provides typed <a>KeyUpdate</a> running sequence which
--   intermediate structres are typed.
module Database.HDBC.Record.KeyUpdate

-- | Typed prepared key-update type.
data PreparedKeyUpdate p a

-- | Typed prepare key-update operation.
prepare :: IConnection conn => conn -> KeyUpdate p a -> IO (PreparedKeyUpdate p a)

-- | Same as <a>prepare</a>.
prepareKeyUpdate :: IConnection conn => conn -> KeyUpdate p a -> IO (PreparedKeyUpdate p a)

-- | Typed operation to bind parameters for <a>PreparedKeyUpdate</a> type.
bindKeyUpdate :: ToSql SqlValue a => PreparedKeyUpdate p a -> a -> BoundStatement ()

-- | Bind parameters, execute statement and get execution result.
runPreparedKeyUpdate :: ToSql SqlValue a => PreparedKeyUpdate p a -> a -> IO Integer

-- | Prepare insert statement, bind parameters, execute statement and get
--   execution result.
runKeyUpdate :: (IConnection conn, ToSql SqlValue a) => conn -> KeyUpdate p a -> a -> IO Integer


module Database.HDBC.SqlValueExtra
instance Convertible SqlValue Int16
instance Convertible Int16 SqlValue


-- | This module provides DB-record templates depends on HDBC.
module Database.HDBC.Record.TH

-- | Template to declare HDBC instances of DB-record against single value
--   type.
derivePersistableInstanceFromValue :: Q Type -> Q [Dec]


-- | This module provides HDBC instance definitions of DB-record.
module Database.HDBC.Record.Persistable

-- | Derived <a>PersistableSqlValue</a> from <a>Convertible</a>.
persistableSqlValue :: (Convertible SqlValue a, Convertible a SqlValue) => PersistableSqlValue SqlValue a
instance ScalarDegree TimeOfDay
instance ScalarDegree ZonedTime
instance ScalarDegree LocalTime
instance ScalarDegree UTCTime
instance ScalarDegree NominalDiffTime
instance ScalarDegree DiffTime
instance ScalarDegree Day
instance ScalarDegree Text
instance ScalarDegree Text
instance ScalarDegree TimeDiff
instance ScalarDegree ClockTime
instance ScalarDegree CalendarTime
instance ScalarDegree Integer
instance ScalarDegree Int
instance ScalarDegree Double
instance ScalarDegree Char
instance ScalarDegree Bool
instance ScalarDegree ByteString
instance ScalarDegree ByteString
instance ScalarDegree Word64
instance ScalarDegree Word32
instance ScalarDegree Rational
instance ScalarDegree Int64
instance ScalarDegree Int32
instance ScalarDegree Int16
instance ScalarDegree String
instance ScalarDegree SqlValue
instance ToSql SqlValue TimeOfDay
instance FromSql SqlValue TimeOfDay
instance ToSql SqlValue ZonedTime
instance FromSql SqlValue ZonedTime
instance ToSql SqlValue LocalTime
instance FromSql SqlValue LocalTime
instance ToSql SqlValue UTCTime
instance FromSql SqlValue UTCTime
instance ToSql SqlValue NominalDiffTime
instance FromSql SqlValue NominalDiffTime
instance ToSql SqlValue DiffTime
instance FromSql SqlValue DiffTime
instance ToSql SqlValue Day
instance FromSql SqlValue Day
instance ToSql SqlValue Text
instance FromSql SqlValue Text
instance ToSql SqlValue Text
instance FromSql SqlValue Text
instance ToSql SqlValue TimeDiff
instance FromSql SqlValue TimeDiff
instance ToSql SqlValue ClockTime
instance FromSql SqlValue ClockTime
instance ToSql SqlValue CalendarTime
instance FromSql SqlValue CalendarTime
instance ToSql SqlValue Integer
instance FromSql SqlValue Integer
instance ToSql SqlValue Int
instance FromSql SqlValue Int
instance ToSql SqlValue Double
instance FromSql SqlValue Double
instance ToSql SqlValue Char
instance FromSql SqlValue Char
instance ToSql SqlValue Bool
instance FromSql SqlValue Bool
instance ToSql SqlValue ByteString
instance FromSql SqlValue ByteString
instance ToSql SqlValue ByteString
instance FromSql SqlValue ByteString
instance ToSql SqlValue Word64
instance FromSql SqlValue Word64
instance ToSql SqlValue Word32
instance FromSql SqlValue Word32
instance ToSql SqlValue Rational
instance FromSql SqlValue Rational
instance ToSql SqlValue Int64
instance FromSql SqlValue Int64
instance ToSql SqlValue Int32
instance FromSql SqlValue Int32
instance ToSql SqlValue Int16
instance FromSql SqlValue Int16
instance ToSql SqlValue String
instance FromSql SqlValue String
instance ToSql SqlValue SqlValue
instance FromSql SqlValue SqlValue
instance HasColumnConstraint NotNull TimeOfDay
instance PersistableWidth TimeOfDay
instance HasColumnConstraint NotNull ZonedTime
instance PersistableWidth ZonedTime
instance HasColumnConstraint NotNull LocalTime
instance PersistableWidth LocalTime
instance HasColumnConstraint NotNull UTCTime
instance PersistableWidth UTCTime
instance HasColumnConstraint NotNull NominalDiffTime
instance PersistableWidth NominalDiffTime
instance HasColumnConstraint NotNull DiffTime
instance PersistableWidth DiffTime
instance HasColumnConstraint NotNull Day
instance PersistableWidth Day
instance HasColumnConstraint NotNull Text
instance PersistableWidth Text
instance HasColumnConstraint NotNull Text
instance PersistableWidth Text
instance HasColumnConstraint NotNull TimeDiff
instance PersistableWidth TimeDiff
instance HasColumnConstraint NotNull ClockTime
instance PersistableWidth ClockTime
instance HasColumnConstraint NotNull CalendarTime
instance PersistableWidth CalendarTime
instance HasColumnConstraint NotNull Integer
instance PersistableWidth Integer
instance HasColumnConstraint NotNull Double
instance PersistableWidth Double
instance HasColumnConstraint NotNull ByteString
instance PersistableWidth ByteString
instance HasColumnConstraint NotNull ByteString
instance PersistableWidth ByteString
instance HasColumnConstraint NotNull Word64
instance PersistableWidth Word64
instance HasColumnConstraint NotNull Word32
instance PersistableWidth Word32
instance HasColumnConstraint NotNull Rational
instance PersistableWidth Rational
instance HasColumnConstraint NotNull SqlValue
instance PersistableWidth SqlValue
instance (Convertible SqlValue a, Convertible a SqlValue) => PersistableValue SqlValue a
instance PersistableType SqlValue


-- | This module contains templates to generate Haskell record types and
--   HDBC instances correspond to RDB table schema.
module Database.HDBC.Query.TH

-- | Generate all persistable templates against defined record like type
--   constructor.
makeRecordPersistableDefault :: Name -> Q [Dec]

-- | Generate all HDBC templates about table except for constraint keys
--   using default naming rule.
defineTableDefault' :: Config -> String -> String -> [(String, TypeQ)] -> [ConName] -> Q [Dec]

-- | Generate all HDBC templates about table using default naming rule.
defineTableDefault :: Config -> String -> String -> [(String, TypeQ)] -> [ConName] -> [Int] -> Maybe Int -> Q [Dec]

-- | Generate all HDBC templates using system catalog informations with
--   specified config.
defineTableFromDB' :: IConnection conn => IO conn -> Config -> Driver conn -> String -> String -> [ConName] -> Q [Dec]

-- | Generate all HDBC templates using system catalog informations.
defineTableFromDB :: IConnection conn => IO conn -> Driver conn -> String -> String -> [ConName] -> Q [Dec]

-- | Verify composed <tt>Query</tt> and inline it in compile type.
inlineVerifiedQuery :: IConnection conn => IO conn -> Name -> Relation p r -> Config -> QuerySuffix -> String -> Q [Dec]


-- | This module provides driver implementation to load IBM-DB2 system
--   catalog via HDBC.
module Database.HDBC.Schema.IBMDB2

-- | Driver implementation
driverIBMDB2 :: IConnection conn => Driver conn
instance ToSql SqlValue Columns
instance FromSql SqlValue Columns


-- | This module provides driver implementation to load PostgreSQL system
--   catalog via HDBC.
module Database.HDBC.Schema.PostgreSQL

-- | Driver implementation
driverPostgreSQL :: IConnection conn => Driver conn
instance ToSql SqlValue PgType
instance FromSql SqlValue PgType
instance ToSql SqlValue PgAttribute
instance FromSql SqlValue PgAttribute


module Database.HDBC.Schema.SQLServer
driverSQLServer :: IConnection conn => Driver conn
instance ToSql SqlValue Types
instance FromSql SqlValue Types
instance ToSql SqlValue Columns
instance FromSql SqlValue Columns


module Database.HDBC.Schema.SQLite3
driverSQLite3 :: IConnection conn => Driver conn
instance ToSql SqlValue IndexInfo
instance FromSql SqlValue IndexInfo
instance ToSql SqlValue IndexList
instance FromSql SqlValue IndexList
instance ToSql SqlValue TableInfo
instance FromSql SqlValue TableInfo

module Database.HDBC.Schema.Oracle

-- | Driver for Oracle DB
driverOracle :: IConnection conn => Driver conn
instance ToSql SqlValue DbaTabColumns
instance FromSql SqlValue DbaTabColumns

module Database.HDBC.Schema.MySQL

-- | Driver implementation
driverMySQL :: IConnection conn => Driver conn
instance ToSql SqlValue Columns
instance FromSql SqlValue Columns


-- | This module provides merged namespace of typed <tt>Query</tt>,
--   <tt>Insert</tt>, <tt>InsertQuery</tt>, <tt>Update</tt>,
--   <tt>KeyUpdate</tt> and <tt>Delete</tt> running sequences.
module Database.HDBC.Record
