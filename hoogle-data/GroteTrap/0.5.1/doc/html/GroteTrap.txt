-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Parser and selection library for expression languages.
--   
@package GroteTrap
@version 0.5.1


-- | Utility functions.
--   
--   This module re-exports module Control.Monad.Error so that
--   <a>fromError</a> can be used as <tt>Monad m =&gt; m a -&gt; a</tt>.
module Language.GroteTrap.Util

-- | Either returns the value or throws an exception.
fromError :: Either String a -> a

-- | <tt>run sourceName p input</tt> runs the specified parser on the
--   input, returning the result in a monad.
run :: Monad m => String -> GenParser tok () a -> [tok] -> m a


-- | The Language type that is the core of GroteTrap.
module Language.GroteTrap.Language

-- | Language connects the syntax of identifiers, numbers, operators and
--   functions with their semantics. GroteTrap is able to derive a parser
--   and evaluator from a Language, as well as convert between source text
--   selections and tree selections.
data Language a
Language :: Maybe (String -> a) -> Maybe (Int -> a) -> [Operator a] -> [Function a] -> Language a
variable :: Language a -> Maybe (String -> a)
number :: Language a -> Maybe (Int -> a)
operators :: Language a -> [Operator a]
functions :: Language a -> [Function a]

-- | An empty language. Use this as the starting base of your languages,
--   setting only those fields that are of importance.
language :: Language a

-- | Representation of an operator.
data Operator a

-- | An operator expecting one operand.
Unary :: (a -> a) -> Fixity1 -> Int -> String -> Operator a
opSem1 :: Operator a -> a -> a
opFixity1 :: Operator a -> Fixity1
opPrio :: Operator a -> Int
opToken :: Operator a -> String

-- | A non-associative operator expecting two operands.
Binary :: (a -> a -> a) -> Fixity2 -> Int -> String -> Operator a
opSem2 :: Operator a -> a -> a -> a
opFixity2 :: Operator a -> Fixity2
opPrio :: Operator a -> Int
opToken :: Operator a -> String

-- | An infix associative operator that chains together many operands.
Assoc :: ([a] -> a) -> Int -> String -> Operator a
opSemN :: Operator a -> [a] -> a
opPrio :: Operator a -> Int
opToken :: Operator a -> String

-- | Fixity for unary operators.
data Fixity1

-- | The operator is written before its operand.
Prefix :: Fixity1

-- | The operator is written after its operand.
Postfix :: Fixity1

-- | Fixity for infix binary operators.
data Fixity2

-- | The operator associates to the left.
InfixL :: Fixity2

-- | The operator associates to the right.
InfixR :: Fixity2
isUnary :: Operator a -> Bool
isBinary :: Operator a -> Bool
isAssoc :: Operator a -> Bool

-- | <tt>findOperator name p os</tt> yields the operator from <tt>os</tt>
--   that matches the predicate <tt>p</tt> and has token <tt>name</tt>.
--   Fails if there are no or several matching operators.
findOperator :: Monad m => String -> (Operator a -> Bool) -> [Operator a] -> m (Operator a)

-- | Representation of a function.
data Function a
Function :: ([a] -> a) -> String -> Function a
fnSem :: Function a -> [a] -> a
fnName :: Function a -> String

-- | Yelds the function with the specified name. Fails if there are no or
--   several matching functions.
findFunction :: Monad m => String -> [Function a] -> m (Function a)

-- | Lifts a unary function to a <a>Function</a>.
function1 :: (a -> a) -> String -> Function a

-- | Lifts a binary function to a <a>Function</a>.
function2 :: (a -> a -> a) -> String -> Function a
instance Show Fixity1
instance Enum Fixity1
instance Eq Fixity1
instance Show Fixity2
instance Enum Fixity2
instance Eq Fixity2

module Language.GroteTrap.Range

-- | A <tt>Pos</tt> is a position in between two elements in a list. For
--   example, position <tt>0</tt> marks the beginning of the list, and
--   position <tt>length list</tt> marks the end of the list. There are
--   <tt>n + 1</tt> valid positions for a list of length <tt>n</tt>.
type Pos = Int

-- | A range's positions mark the begin and end of a sublist, respectively.
type Range = (Pos, Pos)

-- | Something that knows its range as sublist in a larger list. Minimal
--   complete definition: either <a>range</a> or both <a>begin</a> and
--   <a>end</a>.
class Ranged a where range x = (begin x, end x) begin = fst . range end = snd . range
range :: Ranged a => a -> Range
begin :: Ranged a => a -> Pos
end :: Ranged a => a -> Pos

-- | <tt>distRange (b1, e1) (b2, e2)</tt> is defined as <tt>|b1 - b2| + |e1
--   - e2|</tt>.
distRange :: Range -> Range -> Int

-- | Whether a position falls within a range, including the range's edges.
inRange :: Pos -> Range -> Bool

-- | Yields whether the second argument completely falls within the first
--   argument.
includes :: Range -> Range -> Bool

-- | <tt>unionRange x y</tt> yields the smallest range z such that <tt>x
--   ``includes`` z</tt> and <tt>y ``includes`` z</tt>.
unionRange :: Range -> Range -> Range

-- | A range's size is the number of elements it contains.
size :: Range -> Int

-- | A range is valid if its positions are nonnegative and begin &lt; end.
validRange :: Range -> Bool


-- | A class for tree types and representations of selections on tree
--   types, as well as functions for converting between text and tree
--   selections.
module Language.GroteTrap.Trees

-- | A path in a tree. Each integer denotes the selection of a child; these
--   indices are 0-relative.
type Path = [Int]

-- | <tt>root</tt> is the empty path.
root :: Path

-- | Navigation transforms one path to another.
type Nav = Path -> Path

-- | Move up to parent node. Moving up from root has no effect.
up :: Nav

-- | Move down into the nth child node. If <tt>n</tt> is negative, the
--   leftmost child is selected.
into :: Int -> Nav

-- | Move down into first child node.
down :: Nav

-- | Move left one sibling.
left :: Nav

-- | Move right one sibling.
right :: Nav

-- | Move <tt>n</tt> siblings to the right. <tt>n</tt> can be negative. If
--   the new child index becomes negative, the leftmost child is selected.
sibling :: Int -> Nav

-- | Tree types.
class Tree p
children :: Tree p => p -> [p]

-- | Yields the depth of the tree.
depth :: Tree t => t -> Int

-- | Yields all ancestors at the specified depth.
selectDepth :: Tree t => Int -> t -> [t]

-- | Pre-order depth-first traversal.
flatten :: Tree t => t -> [t]

-- | Follows a path in a tree, returning the result in a monad.
follow :: (Monad m, Tree t) => t -> Path -> m t

-- | Moves down into a child.
child :: (Monad m, Tree t) => t -> Int -> m t

-- | Selectable trees.
class Tree t => Selectable t
allowSubranges :: Selectable t => t -> Bool

-- | Selection in a tree. The path indicates the left side of the
--   selection; the int tells how many siblings to the right are included
--   in the selection.
type TreeSelection = (Path, Int)

-- | Selects part of a tree.
select :: (Monad m, Tree t) => t -> TreeSelection -> m [t]

-- | Enumerates all possible selections of a tree.
allSelections :: Selectable a => a -> [TreeSelection]

-- | Computes the range of a valid selection.
selectionToRange :: (Monad m, Tree a, Ranged a) => a -> TreeSelection -> m Range

-- | Converts a specified range to a corresponding selection and returns it
--   in a monad.
rangeToSelection :: (Monad m, Selectable a, Ranged a) => a -> Range -> m TreeSelection

-- | Returns the path to the deepest descendant whose range contains the
--   specified position.
posToPath :: (Monad m, Tree a, Ranged a) => a -> Pos -> m Path

-- | Tells whether the text selection corresponds to a tree selection.
isValidRange :: (Ranged a, Selectable a) => a -> Range -> Bool

-- | Yields all possible selections, ordered by distance to the specified
--   range, closest first.
suggestBy :: (Selectable a, Ranged a) => (Range -> Range -> Int) -> a -> Range -> [TreeSelection]

-- | <tt>suggest</tt> uses <a>distRange</a> as cost function.
suggest :: (Selectable a, Ranged a) => a -> Range -> [TreeSelection]

-- | Takes <tt>suggestBy</tt>'s first suggestion and yields its range.
repairBy :: (Ranged a, Selectable a) => (Range -> Range -> Int) -> a -> Range -> Range

-- | <tt>repair</tt> uses <a>distRange</a> as cost function.
repair :: (Ranged a, Selectable a) => a -> Range -> Range


-- | The Unparse type class and its <a>ParseTree</a> instance, as well as
--   some text manipulation.
module Language.GroteTrap.Unparse

-- | Types that are unparsable. Unparsing is like prettyprinting, except
--   that instead of pretty source the original source code is retrieved.
--   This means unparsing is only possible for values that were the result
--   of an earlier parse.
class Unparse p
unparse :: Unparse p => p -> String

-- | Merge folds many strings <a>over</a> each other.
merge :: [String] -> String

-- | <tt>over upper lower</tt> places <tt>upper</tt> over <tt>lower</tt>.
--   The resulting string has the same characters as <tt>upper</tt> does,
--   except where <tt>upper</tt> contains spaces; at those positions, the
--   character from <tt>lower</tt> shows. If <tt>lower</tt> is longer than
--   <tt>upper</tt>, <tt>upper</tt> is padded with enough spaces to show
--   all rest of <tt>lower</tt>.
over :: String -> String -> String
instance Unparse ParseTree

module Language.GroteTrap.ShowTree

-- | Unparses a selectable tree type to a pretty tree representation.
showTree :: (Ranged a, Tree a, Unparse a) => a -> String

-- | Writes showTree's result to stdout.
printTree :: (Ranged a, Tree a, Unparse a) => a -> IO ()


-- | Deriving a lexer from a <a>Language</a>.
module Language.GroteTrap.Lexer

-- | The tokenizer produces a list of tokens.
data Token
TId :: String -> Token
TInt :: Int -> Token
TOperator :: String -> Token
TFunction :: String -> Token
TOpen :: Token
TClose :: Token
TComma :: Token
TWhite :: Int -> Token
type TokenPos = (Pos, Token)

-- | <tt>run sourceName p input</tt> runs the specified parser on the
--   input, returning the result in a monad.
run :: Monad m => String -> GenParser tok () a -> [tok] -> m a

-- | When given a language, transforms a list of characters into a list of
--   tokens.
tokenize :: Monad m => Language a -> String -> m [TokenPos]

-- | Whether the token is whitespace.
isWhite :: Token -> Bool
instance Eq Token
instance Show Token

module Language.GroteTrap.Show
lshow :: Data a => Language a -> a -> String

-- | Formats a sentence according to a language.
format :: Data a => Language a -> String -> String

module Language.GroteTrap

-- | Given a language and a string, yields the parse tree.
parseSentence :: Monad m => Language a -> String -> m ParseTree

-- | Given a language and a string, yields the parse tree or throws an
--   exception.
readParseTree :: Language a -> String -> ParseTree

-- | Given a language and a string, parses and evaluates the string.
readExpression :: Language a -> String -> a

-- | A generic parse tree.
data ParseTree

-- | Evaluates a parse tree from a language.
evaluate :: Language a -> ParseTree -> a

-- | Evaluates part of a parse tree. The relevant part is indicated by the
--   range.
evalRange :: Monad m => Language a -> ParseTree -> Range -> m [a]
