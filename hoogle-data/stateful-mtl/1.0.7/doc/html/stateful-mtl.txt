-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Typeclass instances for monad transformer stacks with an ST thread at the bottom.
--   
--   A MonadST type class, instances, and some helpful monad functions.
@package stateful-mtl
@version 1.0.7

module Control.Monad.Trans.Operations
repeatMaybe :: Monad m => MaybeT m a -> ListT m a
statefully :: MonadState s m => (s -> (a, s)) -> m a
(>>=?) :: Monad m => m (Maybe a) -> (a -> m ()) -> m ()
execMaybeT :: Monad m => MaybeT m () -> m ()


-- | This module contains the <a>MonadST</a> type class, which encapsulates
--   a monad capable of lifting an ST computation. This type class is
--   <i>only</i> intended to be implemented by the <a>ST</a> monad and any
--   stack of monad transformers over an <a>ST</a> monad.
--   
--   Presence of a MonadST instance implies that
--   
--   <ul>
--   <li>The monad is single-threaded: performing an <a>ST</a> computation
--   will not cause loss of referential transparency, and only one copy of
--   its state thread will be available at any time.</li>
--   <li>Monad transformers can demand an underlying <a>MonadST</a>
--   instance and use its state thread for their own safe computation in
--   the <a>ST</a> monad.</li>
--   </ul>
--   
--   <i>Note</i>: Most monad type classes cannot pass instances up through
--   any instance of <a>MonadTrans</a>, because a transformer farther out
--   may wish to override the inner instance. However, in <a>MonadST</a> we
--   very specifically only want one state thread for any stack of
--   transformers, and specifically one at the very bottom level. This
--   justifies the very general <a>MonadST</a> propagation instance,
--   <tt>(MonadST m, MonadTrans t, Monad m, Monad (t m)) =&gt; MonadST (t
--   m)</tt> (not shown in Haddock for unknown reasons).
--   
--   <i>Do not</i> implement <a>MonadST</a> propagation if you also provide
--   a <a>MonadTrans</a> instance.
module Control.Monad.ST.Class

-- | Type class of monads that can perform lifted computation in the
--   <a>ST</a> monad.
class MonadST m where { type family StateThread m; }
liftST :: MonadST m => ST (StateThread m) a -> m a
instance (MonadST m, MonadTrans t, Monad m) => MonadST (t m)
instance MonadST IO
instance MonadST (ST s)
