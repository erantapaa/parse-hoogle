-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | convert numbers to binary coded lists
--   
--   convert numbers to binary coded lists
@package boolean-list
@version 0.1.0.0

module Data.BooleanList
boolsRequiredForInteger :: Integral a => a -> Int
maximumIntegerForBools :: Integral a => Int -> a
integerToBooleanList :: Integral a => a -> [Bool]
booleanListToInteger :: Integral a => [Bool] -> a
integerToBooleanListBigEndian :: Integer -> [Bool]
bigEndianBooleanListToInteger :: [Bool] -> Integer
integerToBooleanList' :: Bool -> Integer -> [Bool]
integerToBooleanListLittleEndian :: Integer -> [Bool]
littleEndianBooleanListToInteger :: [Bool] -> Integer
booleanListToInteger' :: Bool -> [Bool] -> Integer
toLittleEndian :: [a] -> [a]
fromLittleEndian :: [a] -> [a]
overlayRight :: [a] -> [a] -> [a]
overlayLeft :: [b] -> [b] -> [b]
padBooleanListLeft :: Int -> [Bool] -> [Bool]
padBooleanListRight :: Int -> [Bool] -> [Bool]
padBooleanList' :: Bool -> Int -> [Bool] -> [Bool]
padBooleanList :: Int -> [Bool] -> [Bool]
integerToBooleanListPadded :: Integral a => Int -> a -> [Bool]
integerToBooleanListPadded'' :: Bool -> Int -> Integer -> [Bool]
integerToBigEndianBooleanListPadded :: Int -> Integer -> [Bool]
integerToLittleEndianBooleanListPadded :: Int -> Integer -> [Bool]
takeIntegerFromBooleanList :: Int -> [Bool] -> (Integer, [Bool])
takeIntegerFromBooleanList' :: Bool -> Int -> [Bool] -> (Integer, [Bool])
takeIntegerFromBooleanListLittleEndian :: Int -> [Bool] -> (Integer, [Bool])
takeIntegerFromBooleanListBigEndian :: Int -> [Bool] -> (Integer, [Bool])
booleanListToIntegers :: Int -> [Bool] -> [Integer]
bigEndianBooleanListToIntegers :: Int -> [Bool] -> [Integer]
littleEndianBooleanListToIntegers :: Int -> [Bool] -> [Integer]
booleanListToIntegers' :: Bool -> Int -> [Bool] -> [Integer]
booleanListLittleEndianToIntegersTerminated :: Int -> [Bool] -> [Integer]
booleanListToIntegersTerminated :: Int -> [Bool] -> [Integer]
booleanListToByteString :: [Bool] -> ByteString
booleanListToIntegers'' :: Bool -> Bool -> Int -> [Bool] -> [Integer]
isTerminator :: Int -> [Bool] -> Bool
isTerminator' :: [Bool] -> Bool
takeWhileRest :: ([a] -> Bool) -> [a] -> [a]
listLengthIsSmallerThanOrEqualTo :: Int -> [a] -> Bool
integersToBooleanListPadded :: Int -> [Integer] -> [Bool]
integersToBooleanListTerminated :: Int -> [Integer] -> [Bool]
integersToBooleanLists :: [Integer] -> [[Bool]]
integersToBooleanListsPadded :: Int -> [Integer] -> [[Bool]]
integersToBigEndianBooleanListPadded :: Int -> [Integer] -> [Bool]
integersToLittleEndianBooleanListPadded :: Int -> [Integer] -> [Bool]
integersToBooleanListPadded' :: Bool -> Int -> [Integer] -> [Bool]
integersToBooleanListPaddedTerminated' :: Bool -> Int -> [Integer] -> [Bool]
integersToBooleanListPadded'' :: Bool -> Bool -> Int -> [Integer] -> [Bool]
integersToBooleanListsPadded' :: Bool -> Int -> [Integer] -> [[Bool]]
byteStringToBooleanList :: ByteString -> [Bool]
listOfPaddedIntegersToBooleanList :: Int -> [Bool] -> [Bool]
toBoolean8s :: [Integer] -> [Bool]
precedentalEncoding :: Integral a => [a] -> [Bool]
int8Chunks :: [Bool] -> [Integer]
word8Chunks :: [Bool] -> [Word8]
toByteString :: [Bool] -> ByteString
allBooleanLists :: [[Bool]]
pruneBooleanList :: [Bool] -> [Bool]
encodeBooleanListInInteger' :: Int -> [Bool]
encodeIntegerInBooleanList' :: [Bool] -> Int
encodeBooleanListInInteger :: Integral a => a -> [Bool]
encodeIntegerInBooleanList :: Integral a => [Bool] -> a
