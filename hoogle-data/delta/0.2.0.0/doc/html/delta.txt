-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A library for detecting file changes
--   
@package delta
@version 0.2.0.0

module System.Delta.Base
newtype FileInfo
FileInfo :: (FilePath, Integer, Bool) -> FileInfo
fileInfoPath :: FileInfo -> FilePath

-- | File modification time in milliseconds
fileInfoTimestamp :: FileInfo -> Integer

-- | Is the file a directory
fileInfoIsDir :: FileInfo -> Bool
mkFileInfo :: FilePath -> IO (FileInfo)
instance Ord FileInfo
instance Eq FileInfo
instance Show FileInfo

module System.Delta.Class

-- | A type for watching a directory based on functional reactive
--   programming At the core of this class are three event streams:
--   
--   <ul>
--   <li><tt>changedFiles</tt> is a stream of canonicalized
--   <a>FilePath</a>s on changed files</li>
--   <li><tt>newFiles</tt> is a stream of canonicalized <a>FilePath</a>s of
--   newly created files</li>
--   <li><tt>deletedFiles</tt> is a stream of canonicalized
--   <a>FilePath</a>s of deleted files</li>
--   </ul>
data FileWatcher
FileWatcher :: Event FilePath -> Event FilePath -> Event FilePath -> IO () -> FileWatcher

-- | Newly created files, renamed files
newFiles :: FileWatcher -> Event FilePath

-- | Deleted files, renamed files
deletedFiles :: FileWatcher -> Event FilePath

-- | Changed files
changedFiles :: FileWatcher -> Event FilePath

-- | A function to clean and close ^ this watcher
cleanUpAndClose :: FileWatcher -> IO ()

-- | Merge two watchers that are watching different directories
mergeWatchers :: FileWatcher -> FileWatcher -> FileWatcher

module System.Delta.Poll

-- | Watch files in this directory recursively for changes every n seconds.
createPollWatcher :: Int -> FilePath -> IO FileWatcher

module System.Delta.Callback

-- | Provides a callback based interface to an FRP base <a>FileWatcher</a>
data CallbackWatcher

-- | Id of a callback in a <a>CallbackWatcher</a>
data CallbackId

-- | Wrap a file watcher in a datatype that allows adding callbacks
withCallbacks :: FileWatcher -> IO CallbackWatcher

-- | Add a callback that is executed when file deletion is detected
withDeleteCallback :: CallbackWatcher -> (FilePath -> IO ()) -> IO (CallbackId)

-- | Add a callback on a changed file
withChangedCallback :: CallbackWatcher -> (FilePath -> IO ()) -> IO (CallbackId)

-- | Add a callback that is executed when file creation is detected
withNewCallback :: CallbackWatcher -> (FilePath -> IO ()) -> IO (CallbackId)

-- | Unregister the given CallbackId from the FileWatcher does nothing if
--   the CallbackId is not in the watcher
unregisterCallback :: CallbackWatcher -> CallbackId -> IO ()

-- | Remove all callbacks form the watcher. They will not be called after
--   this
removeAllCallbacks :: CallbackWatcher -> IO ()

-- | Remove all callbacks and close the underlying FileWatcher
closeCallbackWatcher :: CallbackWatcher -> IO ()
instance Eq CallbackId
instance Ord CallbackId


-- | <h1>Description</h1>
--   
--   An umberella package for the delta library. This library can be used
--   to monitor changed <i> new </i> deleted files in a given directory (or
--   set of directories).
--   
--   On non OS X systems this library polls the directories of interest
--   recursively in certain intervals, but I will add OS-specific
--   functionality to monitor the filesystem.
--   
--   On OS X this library can use the File System Events API to detect
--   changes without recursive directory traversal.
--   
--   <h1>Examples</h1>
--   
--   Create a watcher that prints a line if a new file is created in the
--   monitored directory:
--   
--   <pre>
--   printNewFilePaths basePath = do
--     watcher &lt;- deltaDirWithCallbacks basePath
--     withNewCallback watcher (\x -&gt; putStrLn $ "new file: " ++ x)
--   </pre>
module System.Delta

-- | Build a file watcher, the concrete implementation is operating system
--   dependent.
--   
--   <ul>
--   <li>The default uses polling (<a>createPollWatcher</a>)</li>
--   <li>The watcher for OS X uses the FS Events API
--   <tt>createFSEventsWatcher</tt></li>
--   </ul>
deltaDir :: FilePath -> IO FileWatcher

-- | Build a file watcher that allows to register callbacks
deltaDirWithCallbacks :: FilePath -> IO CallbackWatcher

-- | A type for watching a directory based on functional reactive
--   programming At the core of this class are three event streams:
--   
--   <ul>
--   <li><tt>changedFiles</tt> is a stream of canonicalized
--   <a>FilePath</a>s on changed files</li>
--   <li><tt>newFiles</tt> is a stream of canonicalized <a>FilePath</a>s of
--   newly created files</li>
--   <li><tt>deletedFiles</tt> is a stream of canonicalized
--   <a>FilePath</a>s of deleted files</li>
--   </ul>
data FileWatcher
FileWatcher :: Event FilePath -> Event FilePath -> Event FilePath -> IO () -> FileWatcher

-- | Newly created files, renamed files
newFiles :: FileWatcher -> Event FilePath

-- | Deleted files, renamed files
deletedFiles :: FileWatcher -> Event FilePath

-- | Changed files
changedFiles :: FileWatcher -> Event FilePath

-- | A function to clean and close ^ this watcher
cleanUpAndClose :: FileWatcher -> IO ()

-- | Provides a callback based interface to an FRP base <a>FileWatcher</a>
data CallbackWatcher

-- | Id of a callback in a <a>CallbackWatcher</a>
data CallbackId

-- | Wrap a file watcher in a datatype that allows adding callbacks
withCallbacks :: FileWatcher -> IO CallbackWatcher

-- | Add a callback that is executed when file deletion is detected
withDeleteCallback :: CallbackWatcher -> (FilePath -> IO ()) -> IO (CallbackId)

-- | Add a callback on a changed file
withChangedCallback :: CallbackWatcher -> (FilePath -> IO ()) -> IO (CallbackId)

-- | Add a callback that is executed when file creation is detected
withNewCallback :: CallbackWatcher -> (FilePath -> IO ()) -> IO (CallbackId)

-- | Unregister the given CallbackId from the FileWatcher does nothing if
--   the CallbackId is not in the watcher
unregisterCallback :: CallbackWatcher -> CallbackId -> IO ()

-- | Remove all callbacks form the watcher. They will not be called after
--   this
removeAllCallbacks :: CallbackWatcher -> IO ()

-- | Remove all callbacks and close the underlying FileWatcher
closeCallbackWatcher :: CallbackWatcher -> IO ()
