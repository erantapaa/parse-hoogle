-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | very simple template language
--   
--   very simple template language
@package twine
@version 0.1.2

module Text.Twine
loadTemplateFromFile :: FilePath -> IO Template
loadTemplateFromString :: String -> Template
runEval :: (Monad m, Functor m) => Template -> TwineElement m -> m ByteString
class Monad m => TemplateInterface m a | a -> m
property :: TemplateInterface m a => ByteString -> a -> m (TwineElement m)
makeIterable :: TemplateInterface m a => a -> m [TwineElement m]
makeString :: TemplateInterface m a => a -> m String
emptyContext :: Monad m => TwineElement m
bind :: (Convertible a (TwineElement m), Monad m) => a -> TwineElement m
unbind :: (Convertible (TwineElement m) a, Monad m) => TwineElement m -> a
method :: Monad m => ([TwineElement m] -> m (TwineElement m)) -> TwineElement m
makeContext :: Monad m => ContextWriter m -> m (TwineElement m)
(=:) :: (Monad m1, Convertible a (TwineElement m1), MonadWriter (Map ByteString (TwineElement m1)) m) => String -> a -> m ()
data TwineElement m
evalTemplate :: FilePath -> TwineElement IO -> IO ByteString
