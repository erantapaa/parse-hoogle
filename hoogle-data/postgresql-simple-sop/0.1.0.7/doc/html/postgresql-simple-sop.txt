-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generic functions for postgresql-simple
--   
@package postgresql-simple-sop
@version 0.1.0.7


-- | Generic functions to make working with postgresql-simple easier.
--   
--   Original implmentation of gfromRow and gtoRow by <a>Ollie Charles</a>.
--   
--   Intended usage:
--   
--   <pre>
--   import qualified GHC.Generics as GHC
--   import Generics.SOP
--   
--   data Person = Person { name:: String, age:: Int } deriving (GHC.Generic)
--   
--   instance Generic Person
--   instance HasDatatypeInfo Person
--   
--   instance FromRow Person where fromRow = gfromRow
--   instance ToRow Person where toRow = gtoRow
--   </pre>
module Database.PostgreSQL.Simple.SOP

-- | Generic fromRow
gfromRow :: (All FromField xs, Code a ~ '[xs], SingI xs, Generic a) => RowParser a

-- | Generic toRow
gtoRow :: (Generic a, Code a ~ '[xs], All ToField xs, SingI xs) => a -> [Action]

-- | Generic select
--   
--   <pre>
--   gselectFrom conn "persons where name = ?" theName
--   </pre>
gselectFrom :: (ToRow q, FromRow r, Generic r, HasFieldNames r) => Connection -> Query -> q -> IO [r]

-- | Generic insert
--   
--   <pre>
--   let thePerson = Person "Tom" 37
--   ginsertInto conn "persons" thePerson
--   </pre>
--   
--   This is not going to work if you use auto-incrementing primary keys
--   and the primary key is part of the Haskell record.
ginsertInto :: (ToRow r, Generic r, HasFieldNames r) => Connection -> Query -> r -> IO ()
ginsertManyInto :: (ToRow r, Generic r, HasFieldNames r) => Connection -> Query -> [r] -> IO ()
class HasFieldNames a where fieldNames p = case datatypeInfo p of { ADT _ _ cs -> fNms cs Newtype _ _ c -> fNms $ c :* Nil }
fieldNames :: HasFieldNames a => Proxy a -> [String]
instance (HasFieldNames a, HasFieldNames b) => HasFieldNames (a :. b)
