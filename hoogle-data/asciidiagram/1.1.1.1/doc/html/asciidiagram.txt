-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Pretty rendering of Ascii diagram into svg or png.
--   
@package asciidiagram
@version 1.1.1.1


-- | This module gives access to the ascii diagram parser and SVG renderer.
--   
--   Ascii diagram, transform your ASCII art drawing to a nicer
--   representation
--   
--   <pre>
--                   /---------+
--   +---------+     |         |
--   |  ASCII  +----&gt;| Diagram |
--   +---------+     |         |
--   |{flat}   |     +--+------/
--   \---*-----/&lt;=======/
--   ::: .flat { fill: #DDD; }
--   </pre>
--   
--   
--   To render the diagram as a PNG file, you have to use the library
--   rasterific-svg and JuicyPixels.
--   
--   As a sample usage, to save a diagram to png, you can use the following
--   snippet.
--   
--   <pre>
--   import Codec.Picture( writePng )
--   import Text.AsciiDiagram( imageOfDiagram )
--   import Graphics.Rasterific.Svg( loadCreateFontCache )
--   
--   saveDiagramToFile :: FilePath -&gt; Diagram -&gt; IO ()
--   saveDiagramToFile path diag = do
--     cache &lt;- loadCreateFontCache "asciidiagram-fonty-fontcache"
--     imageOfDiagram cache 96 diag
--     writePng path img
--   </pre>
module Text.AsciiDiagram

-- | Transform an Ascii diagram to a SVG document which can be saved or
--   converted to an image.
svgOfDiagram :: Diagram -> Document

-- | Analyze an ascii diagram and extract all it's features.
parseAsciiDiagram :: Text -> Diagram

-- | Helper function helping you save a diagram as a SVG file on disk.
saveAsciiDiagramAsSvg :: FilePath -> Diagram -> IO ()

-- | Render a Diagram as an image. a good value for the Dpi is 96. The IO
--   dependency is there to allow loading of the font files used in the
--   document.
imageOfDiagram :: FontCache -> Dpi -> Diagram -> IO (Image PixelRGBA8)

-- | Render a Diagram into a PDF file. IO dependency to allow loading of
--   the font files used in the document.
pdfOfDiagram :: FontCache -> Dpi -> Diagram -> IO ByteString

-- | Describe the geomtry of a full Ascii Diagram document
data Diagram
Diagram :: Set Shape -> [TextZone] -> !Int -> !Int -> [Text] -> Diagram

-- | All the extracted tshapes
_diagramShapes :: Diagram -> Set Shape

-- | All the extracted text zones
_diagramTexts :: Diagram -> [TextZone]

-- | Width in characters of the document
_diagramCellWidth :: Diagram -> !Int

-- | Height in characters of the document
_diagramCellHeight :: Diagram -> !Int

-- | CSS styles associated to the document.
_diagramStyles :: Diagram -> [Text]

-- | Describe where to place a text snippet.
data TextZone
TextZone :: Point -> Text -> TextZone
_textZoneOrigin :: TextZone -> Point
_textZoneContent :: TextZone -> Text

-- | Shape extracted from the text
data Shape
Shape :: [ShapeElement] -> Bool -> Set Text -> Shape

-- | Elements composing the shape.
shapeElements :: Shape -> [ShapeElement]

-- | When False it's just lines possibly with an arrow, when True it's a
--   polygon.
shapeIsClosed :: Shape -> Bool

-- | Tags "{tagname}" placed inside the shape.
shapeTags :: Shape -> Set Text

-- | Describe a composant of shapes. Can be composed of anchors like "+*/\"
--   or segments.
data ShapeElement
ShapeAnchor :: !Point -> !Anchor -> ShapeElement
ShapeSegment :: !Segment -> ShapeElement

-- | Define the different connection points between the segments.
data Anchor

-- | Associated to <a>+</a>
AnchorMulti :: Anchor

-- | Associated to <a>/</a>
AnchorFirstDiag :: Anchor

-- | Associated to '\'
AnchorSecondDiag :: Anchor

-- | Kind of "end anchor", without continuation.
AnchorPoint :: Anchor

-- | Used as a <a>*</a>
AnchorBullet :: Anchor

-- | Associated to <a>^</a>
AnchorArrowUp :: Anchor

-- | Associated to <tt>V</tt>
AnchorArrowDown :: Anchor

-- | Associated to <a>&lt;</a>
AnchorArrowLeft :: Anchor

-- | Associated to <a>&gt;</a>
AnchorArrowRight :: Anchor

-- | Define an horizontal or vertical segment.
data Segment
Segment :: {-# UNPACK #-} !Point -> {-# UNPACK #-} !Point -> !SegmentKind -> !SegmentDraw -> Segment
_segStart :: Segment -> {-# UNPACK #-} !Point
_segEnd :: Segment -> {-# UNPACK #-} !Point
_segKind :: Segment -> !SegmentKind
_segDraw :: Segment -> !SegmentDraw

-- | Helper data for segment composed of only one character
data SegmentKind
SegmentHorizontal :: SegmentKind
SegmentVertical :: SegmentKind

-- | Differentiate between elements drawn with a solid line or with dashed
--   lines.
data SegmentDraw
SegmentSolid :: SegmentDraw
SegmentDashed :: SegmentDraw

-- | Position of a an element in the character grids
type Point = V2 Int
instance Eq CharBoard
instance Show CharBoard
instance Eq HorizontalPoints
