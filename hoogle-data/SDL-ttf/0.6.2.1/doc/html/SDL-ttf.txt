-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Binding to libSDL_ttf
--   
--   This is a sample library which allows you to use TrueType fonts in
--   your SDL applications.
@package SDL-ttf
@version 0.6.2.1

module Graphics.UI.SDL.TTF.Version
compiledFor :: Version
linkedWith :: IO Version
instance Storable SDLVersion


module Graphics.UI.SDL.TTF.General
init :: IO Bool
wasInit :: IO Bool
quit :: IO ()


module Graphics.UI.SDL.TTF.Types
data FontStruct
type Font = ForeignPtr FontStruct


module Graphics.UI.SDL.TTF.Render
tryRenderTextSolid :: Font -> String -> Color -> IO (Maybe Surface)
renderTextSolid :: Font -> String -> Color -> IO Surface
tryRenderUTF8Solid :: Font -> String -> Color -> IO (Maybe Surface)
renderUTF8Solid :: Font -> String -> Color -> IO Surface
tryRenderGlyphSolid :: Font -> Char -> Color -> IO (Maybe Surface)
renderGlyphSolid :: Ptr FontStruct -> Word16 -> Ptr Color -> IO (Ptr SurfaceStruct)
tryRenderTextShaded :: Font -> String -> Color -> Color -> IO (Maybe Surface)
renderTextShaded :: Font -> String -> Color -> Color -> IO Surface
tryRenderUTF8Shaded :: Font -> String -> Color -> Color -> IO (Maybe Surface)
renderUTF8Shaded :: Font -> String -> Color -> Color -> IO Surface
tryRenderGlyphShaded :: Font -> Char -> Color -> Color -> IO (Maybe Surface)
renderGlyphShaded :: Ptr FontStruct -> Word16 -> Ptr Color -> Ptr Color -> IO (Ptr SurfaceStruct)
tryRenderTextBlended :: Font -> String -> Color -> IO (Maybe Surface)
renderTextBlended :: Font -> String -> Color -> IO Surface
tryRenderUTF8Blended :: Font -> String -> Color -> IO (Maybe Surface)
renderUTF8Blended :: Font -> String -> Color -> IO Surface
tryRenderGlyphBlended :: Font -> Char -> Color -> IO (Maybe Surface)
renderGlyphBlended :: Ptr FontStruct -> Word16 -> Ptr Color -> IO (Ptr SurfaceStruct)


module Graphics.UI.SDL.TTF.Management
tryOpenFont :: String -> Int -> IO (Maybe Font)
openFont :: String -> Int -> IO Font
closeFont :: Font -> IO ()
tryOpenFontRW :: RWops -> Bool -> Int -> IO (Maybe Font)
openFontRW :: RWops -> Bool -> Int -> IO Font
tryOpenFontIndex :: String -> Int -> Int -> IO (Maybe Font)
openFontIndex :: String -> Int -> Int -> IO Font


module Graphics.UI.SDL.TTF.Attributes
getFontStyle :: Font -> IO [FontStyle]
setFontStyle :: Font -> [FontStyle] -> IO ()
fontHeight :: Font -> IO Int
fontAscent :: Font -> IO Int
fontDescent :: Font -> IO Int
fontLineSkip :: Font -> IO Int
fontFaces :: Font -> IO Int
fontFaceIsFixedWidth :: Font -> IO Int
fontFaceFamilyName :: Font -> IO String
fontFaceStyleName :: Font -> IO String
tryTextSize :: Font -> String -> IO (Maybe (Int, Int))
textSize :: Font -> String -> IO (Int, Int)
tryUTF8Size :: Font -> String -> IO (Maybe (Int, Int))
utf8Size :: Font -> String -> IO (Int, Int)
data FontStyle
[StyleBold] :: FontStyle
[StyleItalic] :: FontStyle
[StyleUnderline] :: FontStyle
instance Ord FontStyle
instance Eq FontStyle
instance Show FontStyle
instance Bounded FontStyle
instance Enum FontStyle Int


module Graphics.UI.SDL.TTF
