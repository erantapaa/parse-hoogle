-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple integral finite set
--   
@package data-fin-simple
@version 0.1.0.0

module Data.Fin
newtype Fin s (n :: Nat)
Fin :: s -> Fin s

-- | <pre>
--   &gt;&gt;&gt; (natToFin (Proxy :: Proxy 10) :: Fin Int 11)
--   Fin 10
--   </pre>
natToFin :: (Integral s, KnownNat n, KnownNat (m + 1), n <= m) => proxy n -> Fin s (m + 1)

-- | <pre>
--   &gt;&gt;&gt; (toFin 0 :: Maybe (Fin Int 4))
--   Just (Fin 0)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (toFin 4 :: Maybe (Fin Int 4))
--   Nothing
--   </pre>
toFin :: (Integral s, KnownNat (n :: Nat)) => s -> Maybe (Fin s n)

-- | <pre>
--   &gt;&gt;&gt; (unsafeToFin 10 :: Fin Int 5)
--   Fin 10
--   </pre>
unsafeToFin :: (Integral s, KnownNat n) => s -> Fin s n

-- | <pre>
--   &gt;&gt;&gt; fromFin (finZ :: Fin Int 10)
--   0
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromFin (finLast :: Fin Int 10)
--   9
--   </pre>
fromFin :: Fin s n -> s
finZ :: (Integral s, KnownNat (n + 1)) => Fin s (n + 1)
finS :: (Integral s, KnownNat n, KnownNat (n + 1)) => Fin s n -> Fin s (n + 1)

-- | <pre>
--   &gt;&gt;&gt; (finLast :: Fin Int 5)
--   Fin 4
--   </pre>
finLast :: (Integral s, KnownNat n, KnownNat (n + 1)) => Fin s (n + 1)
absurd :: Fin s 0 -> a
weaken :: (Integral s, KnownNat (n + 1)) => Fin s n -> Fin s (n + 1)
weakenN :: (Integral s, KnownNat (n + m)) => proxy m -> Fin s n -> Fin s (n + m)
strengthen :: (KnownNat n, Integral s, Ord s) => Fin s (n + 1) -> Either (Fin s (n + 1)) (Fin s n)

-- | <pre>
--   &gt;&gt;&gt; shift (Proxy :: Proxy 1) (finZ :: Fin Int 20)
--   Fin 0
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (shift (Proxy :: Proxy 10) (finLast :: Fin Int 10) :: Fin Int 20)
--   Fin 9
--   </pre>
shift :: (KnownNat (m + n), Integral s) => proxy m -> Fin s n -> Fin s (m + n)
finAdd :: (Integral s, KnownNat (n + m)) => Fin s n -> Fin s m -> Fin s (n + m)
finAddN :: (KnownNat n, Integral s, Ord s) => Fin s n -> s -> Either (Fin s n) (Fin s n)
finSub :: (KnownNat n, Ord s, Integral s) => Fin s n -> Fin s m -> Either (Fin s n) (Fin s n)
finSubN :: (KnownNat n, Ord s, Integral s) => Fin s n -> s -> Either (Fin s n) (Fin s n)
finMult :: (KnownNat (n * m), Integral s) => Fin s n -> Fin s m -> Fin s (n * m)
instance Typeable Fin
instance Show s => Show (Fin s n)
instance Eq s => Eq (Fin s n)
instance Ord s => Ord (Fin s n)
