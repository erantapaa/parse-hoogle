-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Collect errors in batches and dispatch them
--   
@package snap-error-collector
@version 1.1.1


-- | <tt>snap-error-collector</tt> extends a <tt>Snap</tt> application with
--   the ability to monitor requests for uncaught exceptions. All routes
--   are wrapped with an exception handler, and exceptions are queued (and
--   optionally filtered). Periodically, the exception queue is flushed via
--   an <a>IO</a> computation - you can use this to send emails, notify
--   yourself on Twitter, increment counters, etc.
--   
--   Example:
--   
--   <pre>
--   import <a>Snap.ErrorCollector</a>
--   
--   initApp :: <a>Initializer</a> MyApp MyApp
--   initApp = do
--     ...
--     <a>collectErrors</a> <a>ErrorCollectorConfig</a>
--       { <a>ecFlush</a> = emailOpsTeam
--       , <a>ecFlushInterval</a> = 60000000
--       , <a>ecFilter</a> = <a>const</a> <a>True</a>
--       , <tt>ecUpperBound</tt> = 1000
--       }
--   
--   emailOpsTeam :: <a>UTCTime</a> -&gt; <a>Seq</a> <a>LoggedException</a> -&gt; <a>Int</a> -&gt; <a>IO</a> '()'
--   emailOpsTeam = ...
--   </pre>
module Snap.ErrorCollector

-- | Wrap a <tt>Snap</tt> website to collect errors.
collectErrors :: ErrorCollectorConfig -> Initializer b v ()

-- | An exception logged by <tt>snap-error-collector</tt>, tagged with the
--   request that caused the exception, and the time the exception occured.
data LoggedException
LoggedException :: !SomeException -> !UTCTime -> !Request -> LoggedException
leException :: LoggedException -> !SomeException
leLoggedAt :: LoggedException -> !UTCTime
leRequest :: LoggedException -> !Request

-- | How <tt>snap-error-collector</tt> should run.
data ErrorCollectorConfig
ErrorCollectorConfig :: !(UTCTime -> Seq LoggedException -> Int -> IO ()) -> !Int -> !(SomeException -> Bool) -> !Int -> ErrorCollectorConfig

-- | An IO action to perform with the list of exceptions that were thrown
--   during the last collection period, and the amount of exceptions that
--   had to be dropped. The computation will be executed asynchronously,
--   but subsequent collections will not be flushed until outstanding
--   computations complete.
ecFlush :: ErrorCollectorConfig -> !(UTCTime -> Seq LoggedException -> Int -> IO ())

-- | How long (in microseconds) to collect exceptions for until they are
--   sent (via <a>ecFlush</a>). You can pass '0' here, in which case
--   <tt>snap-error-collector</tt> will idle until an exception happens.
ecFlushInterval :: ErrorCollectorConfig -> !Int

-- | A filter on which exceptions should be collected. SomeException's that
--   return true under this predicate will be collected, other errors will
--   be not.
ecFilter :: ErrorCollectorConfig -> !(SomeException -> Bool)

-- | The maximum amount of exceptions to store within
--   <a>ecFlushInterval</a>. Currently, if more exceptions than this are
--   thrown, subsequent exceptions will be dropped on the floor (and a
--   counter incremented). This allows you to maintain predictable memory
--   usage if something in the rest of your application goes horribly
--   wrong.
--   
--   If dropping exceptions on the floor doesn't suit your needs, please
--   open a bug report on the issue tracker and we can discuss
--   alternatives.
ecExceptionUpperBound :: ErrorCollectorConfig -> !Int

-- | A convenient constructor for <a>ErrorCollectorConfig</a> that collects
--   up to 100 exceptions and flushes the queue every minute. You have to
--   supply the <a>IO</a> action to run when the queue is flushed.
basicConfig :: (UTCTime -> Seq LoggedException -> Int -> IO ()) -> ErrorCollectorConfig
instance Show LoggedException
