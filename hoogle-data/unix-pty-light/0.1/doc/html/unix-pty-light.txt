-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | POSIX pseudo-terminal support
--   
--   Support for POSIX 1003.1 pseudo-terminal functionality. Unlike the
--   <tt>unix</tt> package's pseudo-terminal support, this binding works
--   with GHC 6.6.
@package unix-pty-light
@version 0.1


-- | POSIX pseudo-terminal support. The functions <a>openPt</a>,
--   <a>grantPt</a>, <a>unlockPt</a>, and <a>ptsName</a> all correspond
--   directly to POSIX functions, whereas the <a>openPseudoTerminal</a>
--   function provides more convenient interface to pseudo-terminal
--   functionality.
--   
--   Note that later versions of the <tt>unix</tt> package include
--   pseudo-terminal support in the <a>System.Posix.Terminal</a> module.
--   You should probably only use this module if you need backwards
--   compatibility with GHC versions earlier than 6.8, or if you want
--   direct bindings to the low-level pseudo-terminal functions.
module System.Posix.PtyLight

-- | Opens a pseudo-terminal master and associates it with a file
--   descriptor.
--   
--   Corresponds to <tt>posix_openpt</tt> from <tt>&lt;stdlib.h&gt;</tt>.
openPt :: CInt -> IO Fd

-- | Causes <a>openPt</a> to open the pseudo-terminal for both reading and
--   writing. (This flag is usually specified.)
--   
--   Corresponds to <tt>O_RDWR</tt> from <tt>&lt;fcntl.h&gt;</tt>.
oRDWR :: CInt

-- | Prevents <a>openPt</a> from causing the terminal device to become the
--   controlling terminal for the process.
--   
--   Corresponds to <tt>O_NOCTTY</tt> from <tt>&lt;fcntl.h&gt;</tt>.
oNOCTTY :: CInt

-- | Change the ownership of the pseudo-terminal slave corresponding to the
--   given master so that it belongs to and can be read/written by the
--   current process's owner. This should be called before <a>unlockPt</a>.
--   
--   Corresponds to <tt>grantpt</tt> from <tt>&lt;stdlib.h&gt;</tt>.
grantPt :: Fd -> IO ()

-- | Unlocks the pseudo-terminal slave corresponding to the given master.
--   This must be called before opening the slave side of the
--   pseudo-terminal.
--   
--   Corresponds to <tt>unlockpt</tt> from <tt>&lt;stdlib.h&gt;</tt>.
unlockPt :: Fd -> IO ()

-- | Obtains the name of a pseudo-terminal slave device from the master's
--   file descriptor.
--   
--   Corresponds to <tt>ptsname</tt> from <tt>&lt;stdlib.h&gt;</tt>.
ptsName :: Fd -> IO String

-- | Creates, grants, and unlocks a read/write pseudo-terminal, returning
--   an open file descriptor for the master device and the file-system path
--   of the slave device.
--   
--   Performs the following actions:
--   
--   <ul>
--   <li>opens a pseudo-terminal</li>
--   <li>grants and unlocks its slave</li>
--   <li>obtains the slave's name</li>
--   <li>returns the master's file descriptor and the slave's name</li>
--   </ul>
--   
--   If an exception is thrown, the master file descriptor will be closed.
--   Otherwise, the caller is responsible for closing it.
openPseudoTerminal :: IO (Fd, String)
data Fd :: *

-- | Close this file descriptor. May throw an exception if this is an
--   invalid descriptor.
closeFd :: Fd -> IO ()
