-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell programming interface to Yices SMT solver
--   
--   Incomplete (no bitvectors) syntax, parser, and inter process
--   communication to Yices from Haskell through pipe. Purpose for building
--   and using this library was to generate test cases from constraints
--   that SMT solvers can solve. I only used it for that particular
--   purpose, so the code in general is not yet fully tested. Use at your
--   own risk and error reports are welcomed. See
--   <a>http://yices.csl.sri.com/</a> for further information on Yices.
@package yices
@version 0.0.0.12


-- | Haskell data type definition for the yices syntax. Yet incomplete
--   since it does not include bit vectors. See
--   <a>http://yices.csl.sri.com/language.shtml</a> for details.
module Math.SMT.Yices.Syntax

-- | yices types
data TypY
VarT :: String -> TypY
SUBTYPE :: (String, TypY) -> ExpY -> TypY
SUBRANGE :: ExpY -> ExpY -> TypY
ARR :: [TypY] -> TypY
TUP :: [TypY] -> TypY
REC :: [(String, TypY)] -> TypY
DEP :: (String, TypY) -> TypY
DATATYPE :: [(String, [(String, TypY)])] -> TypY
SCALAR :: [String] -> TypY

-- | yices expressions
data ExpY
VarE :: String -> ExpY
LitB :: Bool -> ExpY
LitI :: Integer -> ExpY
LitR :: Rational -> ExpY
AND :: [ExpY] -> ExpY
OR :: [ExpY] -> ExpY
NOT :: ExpY -> ExpY
(:=>) :: ExpY -> ExpY -> ExpY
(:=) :: ExpY -> ExpY -> ExpY
(:/=) :: ExpY -> ExpY -> ExpY
(:<) :: ExpY -> ExpY -> ExpY
(:<=) :: ExpY -> ExpY -> ExpY
(:>) :: ExpY -> ExpY -> ExpY
(:>=) :: ExpY -> ExpY -> ExpY
(:+:) :: ExpY -> ExpY -> ExpY
(:-:) :: ExpY -> ExpY -> ExpY
(:*:) :: ExpY -> ExpY -> ExpY
(:/:) :: ExpY -> ExpY -> ExpY
DIV :: ExpY -> ExpY -> ExpY
MOD :: ExpY -> ExpY -> ExpY
IF :: ExpY -> ExpY -> ExpY -> ExpY
ITE :: ExpY -> ExpY -> ExpY -> ExpY
LET :: [((String, Maybe TypY), ExpY)] -> ExpY -> ExpY
FORALL :: [(String, TypY)] -> ExpY -> ExpY
EXISTS :: [(String, TypY)] -> ExpY -> ExpY
APP :: ExpY -> [ExpY] -> ExpY
UPDATE_F :: ExpY -> [ExpY] -> ExpY -> ExpY
LAMBDA :: [(String, TypY)] -> ExpY -> ExpY
MKTUP :: [ExpY] -> ExpY
SELECT_T :: ExpY -> Integer -> ExpY
UPDATE_T :: ExpY -> Integer -> ExpY -> ExpY
MKREC :: [(String, ExpY)] -> ExpY
SELECT_R :: ExpY -> String -> ExpY
UPDATE_R :: ExpY -> String -> ExpY -> ExpY

-- | yices declarations and commands
data CmdY
DEFTYP :: String -> (Maybe TypY) -> CmdY
DEFINE :: (String, TypY) -> (Maybe ExpY) -> CmdY
ASSERT :: ExpY -> CmdY
ASSERT_P :: ExpY -> (Maybe Integer) -> CmdY
RETRACT :: Integer -> CmdY
CHECK :: CmdY
MAXSAT :: CmdY
SETE :: Bool -> CmdY
SETV :: Integer -> CmdY
SETAO :: Bool -> CmdY
PUSH :: CmdY
POP :: CmdY
ECHO :: String -> CmdY
INCLUDE :: String -> CmdY
RESET :: CmdY
STATUS :: CmdY
DUMP :: CmdY
EXIT :: CmdY
instance Show CmdY
instance Show ExpY
instance Show TypY


-- | Parser for the yices syntax. Yet incomplete since it does not include
--   bit vectors, and not heavily tested at all. See
--   <a>http://yices.csl.sri.com/language.shtml</a> for details.
module Math.SMT.Yices.Parser

-- | parsec parser for yices types
typY :: GenParser Char st TypY

-- | parsec parser for yices expressions
expY :: GenParser Char st ExpY

-- | parsec parser for yices command
cmdY :: GenParser Char st CmdY

-- | parse a string of yices type format
parseTypY :: String -> TypY

-- | parse a string of yices expression format
parseExpY :: String -> ExpY

-- | parse a string of many yices expressions
parseExpYs :: String -> [ExpY]

-- | parse a string of yices command format
parseCmdY :: String -> CmdY


-- | Inter-process communication to Yices through pipe.
module Math.SMT.Yices.Pipe

-- | type abbrevation for IPC handle quadruple
type YicesIPC = (Maybe Handle, Maybe Handle, Maybe Handle, ProcessHandle)

-- | To read in the result of the (check) command
data ResY
Sat :: [ExpY] -> ResY
Unknown :: [ExpY] -> ResY
UnSat :: [Integer] -> ResY
InCon :: [String] -> ResY

-- | Start yices on a given path with given options. The first argumnet
--   yPath is the path binary file of yices (e.g.
--   <i>home</i>kyagrd<i>yices-1.0.21</i>bin/yices). By default -i and -e
--   options are already present, and yOpts argument appens more options
createYicesPipe :: FilePath -> [String] -> IO YicesIPC

-- | send yices commands without flushing
runCmdsY' :: YicesIPC -> [CmdY] -> IO ()

-- | send yices commands and flush
runCmdsY :: YicesIPC -> [CmdY] -> IO ()

-- | send check command and reads the result
checkY :: YicesIPC -> IO ResY

-- | send exit command and flush
exitY :: YicesIPC -> IO ()

-- | flush the input pipe to yices (needed after actions like runCmdsY')
flushY :: YicesIPC -> IO ()

-- | sends a bunch of commands followed by a check command and reads the
--   resulting model. This function should be the preferred option when
--   large expressions are involved.
quickCheckY :: String -> [String] -> [CmdY] -> IO ResY

-- | sends a bunch of commands and reads the result. This function is
--   similar to <a>quickCheckY</a> but does not append a check command. It
--   can be useful if you intend to
quickCheckY' :: String -> [String] -> [CmdY] -> IO ResY
instance Show ResY
