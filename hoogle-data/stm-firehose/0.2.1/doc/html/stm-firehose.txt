-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Conduits and STM operations for fire hoses.
--   
--   A fire hose is a component in a message passing system that let
--   clients tap into the message flow. This module provides low level
--   (built on STM channels) and high level (based on conduits) building
--   blocks. It should work with a fixed amount of memory, and has non
--   blocking write operations.
@package stm-firehose
@version 0.2.1


-- | A subscription based messaging system, with non-blocking bounded
--   write.
--   
--   <pre>
--   fh &lt;- atomically newFirehose
--   -- the following line will not block, even though nobody subscribed
--   atomically (mapM_ (writeEvent fh) [1..100])
--   -- let's subscribe a single client
--   sub &lt;- atomically (subscribe 10 fh)
--   forkIO (forever (atomically (readEvent sub) &gt;&gt;= print))
--   atomically $ writeEvent fh 1
--   </pre>
module Control.Concurrent.STM.Firehose
data Firehose a
data Subscription a

-- | Creates a new <a>Firehose</a> item.
newFirehose :: STM (Firehose a)

-- | Sends a piece of data in the fire hose.
writeEvent :: Firehose a -> a -> STM ()

-- | Get a subscription from the fire hose, that will be used to read
--   events.
subscribe :: Int -> Firehose a -> STM (Subscription a)

-- | Unsubscribe from the fire hose. Subsequent calls to <a>readEvent</a>
--   will return <a>Nothing</a>. This runs in O(n), where n is the current
--   number of subscriptions. Please contact the maintainer if you need
--   better performance.
unsubscribe :: Subscription a -> STM ()

-- | Read an event from a <a>Subscription</a>. This will return
--   <a>Nothing</a> if the firehose is shut, or the subscription removed.
readEvent :: Subscription a -> STM (Maybe a)

-- | Gets the underlying queue from a subscription.
getQueue :: Subscription a -> TBMQueue a


-- | This module is here to let you easily build firehose systems. The
--   <a>firehoseApp</a> application is a standard <a>Application</a> that
--   will stream the events to clients. The <a>firehoseConduit</a> function
--   will spawn a web server on the given port, and let the data-flow in a
--   conduit be examined this way.
--   
--   For an example implementation, with a JSON encodable data type, see
--   <a>http://hackage.haskell.org/package/hslogstash/docs/src/Data-Conduit-FireHose.html#fireHose</a>.
module Data.Conduit.Network.Firehose

-- | A firehose application, suitable for use in a wai-compatible server. A
--   typical usage is with JSON encodable data, where the serialization
--   function can be :
--   
--   <pre>
--   -- encode to JSON, turn into a Builder, then append a newline.
--   (&lt;&gt; fromByteString "\n") . fromLazyByteString . encode
--   </pre>
--   
--   The filtering function has a type that let you create it based on the
--   <a>Request</a>. That means you can use the query string to build the
--   proper filters.
firehoseApp :: Int -> (Request -> a -> Bool) -> (a -> Builder) -> Firehose a -> Application

-- | A fire hose conduit creator, that can be inserted in your conduits as
--   firehose entry points. Will run Warp on the specified port. Please not
--   that the connection will timeout after an hour.
firehoseConduit :: (Monad m, MonadIO m) => Int -> Int -> (Request -> a -> Bool) -> (a -> Builder) -> IO (Conduit a m a)
