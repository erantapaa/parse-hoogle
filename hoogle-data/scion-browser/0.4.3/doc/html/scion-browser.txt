-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Command-line interface for browsing and searching packages documentation
--   
--   Scion Browser aims to be a command-line interface for getting
--   information about installed Haskell packages, that could be later used
--   by development environments. It also provides integration with Hoogle.
--   By now, it has been integrated in EclipseFP.
@package scion-browser
@version 0.4.3

module Scion.PersistentBrowser.Query

-- | Get the identifiers of all packages in the database.
allPackageIds :: Maybe DbPackageIdentifier -> SQL [DbPackageIdentifier]

-- | Get information of all packages in the database.
allPackages :: Maybe DbPackageIdentifier -> SQL [DbPackage]

-- | Get information of all versions of the package with that name.
packagesByName :: String -> Maybe DbPackageIdentifier -> SQL [DbPackage]

-- | Get information about a package in the database.
getPackage :: DbPackageIdentifier -> SQL (Maybe DbPackage)

-- | Get information about all modules with that name.
modulesByName :: String -> Maybe DbPackageIdentifier -> SQL [DbModule]

-- | Get all the modules hierarchically inside the specified one. For
--   getting the entire list of modules modules, use "" as initial name.
getSubmodules :: String -> Maybe DbPackageIdentifier -> SQL [DbModule]
moduleAction :: [PersistValue] -> DbModule

-- | Get information about all declaration with that name.
declsByName :: String -> Maybe DbPackageIdentifier -> SQL [DbDecl]
declAction :: [PersistValue] -> DbDecl
createIndexes :: SQL ()

-- | Gets the declarations inside some module, along with information about
--   which package it lives.
getDeclsInModule :: String -> Maybe DbPackageIdentifier -> SQL [(DbPackageIdentifier, DbCompleteDecl)]

-- | list declarations matching the given prefix, useful for content assist
--   the prefix either matches the declaration itself or any constructor
getDeclsFromPrefix :: String -> Maybe DbPackageIdentifier -> SQL [(DbPackageIdentifier, DbModule, DbCompleteDecl)]
getAllDeclInfo :: (DbDeclId, DbDecl) -> SQL DbCompleteDecl

-- | Get information about all constructors with that name.
constructorsByName :: String -> SQL [DbConstructor]

-- | Gets a list of modules where a declaration may live
getModulesWhereDeclarationIs :: String -> SQL [(DbModule, String, String)]

-- | Executes a query.
queryDb :: String -> [String] -> ([PersistValue] -> a) -> SQL [a]

-- | Gets information from a text value.
fromDbText :: PersistValue -> Maybe String

-- | Things that reside on a package.
class HasDbPackage d
getDbPackage :: HasDbPackage d => d -> SQL DbPackage

-- | Things that reside on a module.
class HasDbModule d
getDbModule :: HasDbModule d => d -> SQL DbModule
instance HasDbModule DbConstructor
instance HasDbModule DbDecl
instance HasDbModule DbModule
instance HasDbPackage DbDecl
instance HasDbPackage DbModule
instance HasDbPackage DbPackage

module Scion.PersistentBrowser.Build

-- | Downloads the information for the entire Hackage database and saves it
--   to the specified location.
saveHackageDatabase :: FilePath -> IO ()

-- | Downloads the information for the entire Hackage database creating an
--   in-memory database with it. It needs a temporary directory to work on.
createHackageDatabase :: FilePath -> IO ([Documented Package], [(FilePath, ParseError)])

-- | Updates a database with changes in the installed package base.
updateDatabase :: FilePath -> Maybe FilePath -> [InstalledPackageInfo] -> IO ()

-- | Get the database from a set of Cabal packages.
createCabalDatabase :: Version -> FilePath -> [PackageIdentifier] -> IO ([Documented Package], [(String, ParseError)])

-- | Get the database from a Cabal package.
getCabalHoogle :: Version -> FilePath -> PackageIdentifier -> Bool -> FilePath -> Manager -> IO (Either ParseError (Documented Package))

-- | Run SQL on the given path
runSQL :: FilePath -> SQL a -> IO a

module Scion.PersistentBrowser
data DbDeclType
DbData :: DbDeclType
DbNewType :: DbDeclType
DbClass :: DbDeclType
DbInstance :: DbDeclType
DbSignature :: DbDeclType
DbType :: DbDeclType

-- | Documentation for an item. Now it is simply a Text element.
data Doc
NoDoc :: Doc
Doc :: Text -> Doc
docFromString :: String -> Doc

-- | A documented item.
type Documented a = a Doc

-- | A package.
data Package l
Package :: l -> PackageIdentifier -> (Map String (Documented Module)) -> Package l

-- | A Database saves a list of packages.
type Database = Map PackageIdentifier (Documented Package)

-- | Gets the name inside a Name constructor.
getNameString :: Name l -> String

-- | Gets the qualified name as a string.
getQNameString :: QName l -> String
class Annotated e => Named e
getName :: (Named e, Show l) => (e l) -> String
class (Named parent, Named child) => DocItem parent child | parent -> child where getChild p name = find (\ d -> (getName d) == name) (getChildren p)
getChildren :: (DocItem parent child, Show l) => (parent l) -> [child l]
getChild :: (DocItem parent child, Show l) => (parent l) -> String -> Maybe (child l)
type SQL a = SqlPersistT (LoggingT (ResourceT IO)) a

-- | wrapper around logging methods, so we can enable logging when we debug
runLogging :: MonadIO m => LoggingT m a -> m a
data DbPackageGeneric backend
DbPackage :: !String -> !String -> !(Maybe String) -> DbPackageGeneric backend
dbPackageName :: DbPackageGeneric backend -> !String
dbPackageVersion :: DbPackageGeneric backend -> !String
dbPackageDoc :: DbPackageGeneric backend -> !(Maybe String)
type DbPackage = DbPackageGeneric SqlBackend
type DbPackageId = KeyBackend SqlBackend DbPackage
data DbModuleGeneric backend
DbModule :: !String -> !(Maybe String) -> !(KeyBackend backend (DbPackageGeneric backend)) -> DbModuleGeneric backend
dbModuleName :: DbModuleGeneric backend -> !String
dbModuleDoc :: DbModuleGeneric backend -> !(Maybe String)
dbModulePackageId :: DbModuleGeneric backend -> !(KeyBackend backend (DbPackageGeneric backend))
type DbModule = DbModuleGeneric SqlBackend
type DbModuleId = KeyBackend SqlBackend DbModule
data DbDeclGeneric backend
DbDecl :: !DbDeclType -> !String -> !(Maybe String) -> !(Maybe String) -> !(Maybe String) -> !(Maybe String) -> !(KeyBackend backend (DbModuleGeneric backend)) -> DbDeclGeneric backend
dbDeclDeclType :: DbDeclGeneric backend -> !DbDeclType
dbDeclName :: DbDeclGeneric backend -> !String
dbDeclDoc :: DbDeclGeneric backend -> !(Maybe String)
dbDeclKind :: DbDeclGeneric backend -> !(Maybe String)
dbDeclSignature :: DbDeclGeneric backend -> !(Maybe String)
dbDeclEquals :: DbDeclGeneric backend -> !(Maybe String)
dbDeclModuleId :: DbDeclGeneric backend -> !(KeyBackend backend (DbModuleGeneric backend))
type DbDecl = DbDeclGeneric SqlBackend
type DbDeclId = KeyBackend SqlBackend DbDecl
data DbTyVarGeneric backend
DbTyVar :: !String -> !(KeyBackend backend (DbDeclGeneric backend)) -> DbTyVarGeneric backend
dbTyVarName :: DbTyVarGeneric backend -> !String
dbTyVarDeclId :: DbTyVarGeneric backend -> !(KeyBackend backend (DbDeclGeneric backend))
type DbTyVar = DbTyVarGeneric SqlBackend
type DbTyVarId = KeyBackend SqlBackend DbTyVar
data DbFunDepGeneric backend
DbFunDep :: !String -> !(KeyBackend backend (DbDeclGeneric backend)) -> DbFunDepGeneric backend
dbFunDepName :: DbFunDepGeneric backend -> !String
dbFunDepDeclId :: DbFunDepGeneric backend -> !(KeyBackend backend (DbDeclGeneric backend))
type DbFunDep = DbFunDepGeneric SqlBackend
type DbFunDepId = KeyBackend SqlBackend DbFunDep
data DbContextGeneric backend
DbContext :: !String -> !(KeyBackend backend (DbDeclGeneric backend)) -> DbContextGeneric backend
dbContextShown :: DbContextGeneric backend -> !String
dbContextDeclId :: DbContextGeneric backend -> !(KeyBackend backend (DbDeclGeneric backend))
type DbContext = DbContextGeneric SqlBackend
type DbContextId = KeyBackend SqlBackend DbContext
data DbConstructorGeneric backend
DbConstructor :: !String -> !String -> !(KeyBackend backend (DbDeclGeneric backend)) -> DbConstructorGeneric backend
dbConstructorName :: DbConstructorGeneric backend -> !String
dbConstructorSignature :: DbConstructorGeneric backend -> !String
dbConstructorDeclId :: DbConstructorGeneric backend -> !(KeyBackend backend (DbDeclGeneric backend))
type DbConstructor = DbConstructorGeneric SqlBackend
type DbConstructorId = KeyBackend SqlBackend DbConstructor
migrateAll :: (MonadBaseControl IO m, MonadIO m, MonadLogger m) => Migration (SqlPersistT m)

-- | Information needed to search a package.
data DbPackageIdentifier
DbPackageIdentifier :: String -> String -> DbPackageIdentifier
dbPackageToIdentifier :: DbPackage -> DbPackageIdentifier

-- | Complete information for a declaration. Look at its ToJSON instance to
--   know which one is used in each kind of declaration.
data DbCompleteDecl
DbCompleteDecl :: DbDecl -> [DbContext] -> [DbTyVar] -> [DbFunDep] -> [DbConstructor] -> DbCompleteDecl

module Scion.PersistentHoogle
query :: FilePath -> Maybe FilePath -> Maybe FilePath -> String -> SQL [Result]
downloadData :: FilePath -> Maybe FilePath -> Maybe FilePath -> IO HoogleStatus
checkDatabase :: FilePath -> Maybe FilePath -> Maybe FilePath -> IO HoogleStatus

-- | Init hoogle DB, adding extra files
initDatabase :: FilePath -> Maybe FilePath -> Maybe FilePath -> Bool -> IO HoogleStatus
type Results = [Result]
data Result
RPackage :: [DbPackage] -> Result
RModule :: [(DbPackageIdentifier, DbModule)] -> Result
RDeclaration :: [(DbPackageIdentifier, String, DbCompleteDecl)] -> Result
RConstructor :: [(DbPackageIdentifier, String, DbCompleteDecl, DbConstructor)] -> Result
RKeyword :: String -> Result

-- | a warning
RWarning :: String -> Result
data Query
Query :: String -> Query

-- | status of hoogle operation
data HoogleStatus
Missing :: HoogleStatus
OK :: HoogleStatus
Error :: HoogleStatus
