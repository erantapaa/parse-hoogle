-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A package for building Facebook applications using Happstack
--   
--   A package for building Facebook applications using Happstack
@package happstack-facebook
@version 0.9

module Happstack.Facebook.FacebookT
newtype FacebookT s m a
FacebookT :: ReaderT s m a -> FacebookT s m a
unFacebookT :: FacebookT s m a -> ReaderT s m a
flattenCDATA :: [XML] -> [XML]

-- | Pretty-prints XML values.
renderAsFBML :: XML -> String
data TagType
Open :: TagType
Close :: TagType
Single :: TagType
renderAsFBML' :: Int -> XML -> ShowS
renderElement :: Int -> XML -> String -> String
renderTag :: TagType -> Int -> Name -> Attributes -> ShowS
instance [overlap ok] (Monad m) => Functor (FacebookT s m)
instance [overlap ok] (Monad m) => Monad (FacebookT s m)
instance [overlap ok] (MonadFix m) => MonadFix (FacebookT s m)
instance [overlap ok] (MonadPlus m) => MonadPlus (FacebookT s m)
instance [overlap ok] (MonadIO m) => MonadIO (FacebookT s m)
instance [overlap ok] MonadTrans (FacebookT s)
instance [overlap ok] (Monad m) => XMLGenerator (FacebookT s m)
instance [overlap ok] (Monad m) => SetAttr (FacebookT s m) XML
instance [overlap ok] (Monad m) => AppendChild (FacebookT s m) XML
instance [overlap ok] (Monad m) => EmbedAsChild (FacebookT s m) ()
instance [overlap ok] (Monad m) => EmbedAsChild (FacebookT s m) XML
instance [overlap ok] (Monad m) => EmbedAsChild (FacebookT s m) String
instance [overlap ok] (Monad m) => EmbedAsChild (FacebookT s m) Char
instance [overlap ok] (Monad m) => EmbedAsAttr (FacebookT s m) (Attr String Int)
instance [overlap ok] (Monad m) => EmbedAsAttr (FacebookT s m) (Attr String Bool)
instance [overlap ok] (Monad m) => EmbedAsAttr (FacebookT s m) (Attr (String, String) String)
instance [overlap ok] (Monad m) => EmbedAsAttr (FacebookT s m) (Attr String String)
instance [overlap ok] (Monad m) => EmbedAsAttr (FacebookT s m) (Attr String Char)
instance [overlap ok] (Monad m) => EmbedAsAttr (FacebookT s m) Attribute
instance [overlap ok] (Monad m) => XMLGen (FacebookT s m)
instance [overlap ok] (ShowURL m) => ShowURL (FacebookT s m)
instance [overlap ok] (Monad m) => MonadReader s (FacebookT s m)
instance [overlap ok] (WebMonad a m) => WebMonad a (FacebookT s m)
instance [overlap ok] (FilterMonad a m) => FilterMonad a (FacebookT s m)
instance [overlap ok] (ServerMonad m) => ServerMonad (FacebookT s m)
instance [overlap ok] (MonadPlus m) => Alternative (FacebookT s m)
instance [overlap ok] (Monad m) => Applicative (FacebookT s m)

module Happstack.Facebook.Common
data FacebookConfig
FacebookConfig :: ApiKey -> AppSecret -> AppId -> URI -> URI -> FacebookConfig
apiKey :: FacebookConfig -> ApiKey
appSecret :: FacebookConfig -> AppSecret
appId :: FacebookConfig -> AppId
canvasURL :: FacebookConfig -> URI
connectURL :: FacebookConfig -> URI
newtype ApiKey
ApiKey :: String -> ApiKey
unApiKey :: ApiKey -> String
newtype AppSecret
AppSecret :: String -> AppSecret
unAppSecret :: AppSecret -> String
newtype AppId
AppId :: String -> AppId
unAppId :: AppId -> String
newtype CallId
CallId :: Integer -> CallId
data Sex
Male :: Sex
Female :: Sex
newtype Flid
Flid :: Integer -> Flid
unFlid :: Flid -> Integer
newtype User
User :: Integer -> User
uid :: User -> Integer
dataType[ag5b] :: DataType
constr[ag5d] :: Constr
constr[ag5c] :: Constr
dataType[ag51] :: DataType
constr[ag52] :: Constr
dataType[ag4R] :: DataType
constr[ag4S] :: Constr
data FriendList
FriendList :: Flid -> String -> FriendList
flid :: FriendList -> Flid
name :: FriendList -> String
dataType[ahaa] :: DataType
constr[ahab] :: Constr
newtype PhotoId
PhotoId :: Integer -> PhotoId
pid :: PhotoId -> Integer
dataType[ahm1] :: DataType
constr[ahm2] :: Constr
newtype AlbumId
AlbumId :: Integer -> AlbumId
aid :: AlbumId -> Integer
dataType[aht4] :: DataType
constr[aht5] :: Constr
type SessionKey = String
type Parameters = [(String, String)]
data UidRequired
UidRequired :: UidRequired
data SessionRequired
SessionRequired :: SessionRequired
data None
None :: None
class (Monad m) => FacebookMethod m method where { type family FacebookResponse method; }
toParams :: (FacebookMethod m method) => method -> m Parameters
parseResponse :: (FacebookMethod m method) => Proxy (m method) -> String -> Either String (FacebookResponse method)
class (Monad m) => HasFacebookConfig m
askFacebookConfig :: (HasFacebookConfig m) => m FacebookConfig
class (Monad m) => HasUser m
askUser :: (HasUser m) => m User
class (Monad m) => HasSessionKey m
askSessionKey :: (HasSessionKey m) => m SessionKey
class (Monad m) => HasFacebookData d m
askFacebookData :: (HasFacebookData d m) => m d

-- | the State that lives in the facebook monad
data FacebookState d
FacebookState :: FacebookConfig -> d -> FacebookState d
fbConfig :: FacebookState d -> FacebookConfig
fbData :: FacebookState d -> d
data FacebookStateU d
FacebookStateU :: FacebookConfig -> d -> User -> FacebookStateU d
fbuConfig :: FacebookStateU d -> FacebookConfig
fbuData :: FacebookStateU d -> d
fbuUser :: FacebookStateU d -> User
data FacebookStateS d
FacebookStateS :: FacebookConfig -> d -> User -> SessionKey -> FacebookStateS d
fbsConfig :: FacebookStateS d -> FacebookConfig
fbsData :: FacebookStateS d -> d
fbsUser :: FacebookStateS d -> User
fbsSessionKey :: FacebookStateS d -> SessionKey
assocToJSON :: [(String, String)] -> JsonData
parseResponseBool :: String -> Either String Bool
parseUserIds :: String -> Either String [User]

-- | helper function
lookupBool :: String -> [(String, String)] -> Bool
toCommaList :: [String] -> String
class RequiresSession a
callId :: (MonadIO m) => m CallId
buildRequest :: FacebookConfig -> Parameters -> (CallId -> Request String)
buildRequestM :: (HasFacebookConfig m) => Parameters -> m (CallId -> Request String)
execRequest :: (MonadIO m) => (CallId -> Request String) -> m String
callMethod :: (HasFacebookConfig m, MonadIO m, FacebookMethod m method) => method -> m (Either FacebookError (FacebookResponse method))
callMethodWithConfig :: (MonadIO m, FacebookMethod m method) => FacebookConfig -> method -> m (Either FacebookError (FacebookResponse method))
callMethodOld :: (HasFacebookConfig m, MonadIO m, FacebookMethod m method) => method -> m (Either String (FacebookResponse method))

-- | calculate the sig, and return the args in sorted order. The sig is
--   *not* added to the args.
signature :: AppSecret -> [(String, String)] -> (String, [(String, String)])
data FacebookError
FacebookError :: Integer -> String -> Parameters -> FacebookError
error_code :: FacebookError -> Integer
error_msg :: FacebookError -> String
request_args :: FacebookError -> Parameters
ParseError :: String -> FacebookError
parseResponse' :: (FacebookMethod m method) => Proxy (m method) -> String -> Either FacebookError (FacebookResponse method)
parseError :: String -> FacebookError
data ActionLink
ActionLink :: String -> String -> ActionLink
newtype FbXML
FbXML :: XML -> FbXML
unFbXML :: FbXML -> XML
withFacebook' :: (Monad m) => FacebookConfig -> d -> FacebookT (FacebookState d) m a -> m a

-- | function to read some FacebookConnectData from the Facebook
--   environment
fbd :: (HasFacebookData d m) => (d -> a) -> m a
withUser :: (HasFacebookData d (FacebookT (s d) m), HasFacebookConfig (FacebookT (s d) m)) => User -> FacebookT (FacebookStateU d) m a -> FacebookT (s d) m a
withSession :: (HasUser (FacebookT (s d) m), HasFacebookData d (FacebookT (s d) m), HasFacebookConfig (FacebookT (s d) m)) => SessionKey -> FacebookT (FacebookStateS d) m a -> FacebookT (s d) m a
instance [overlap ok] Typeable ActionLink
instance [overlap ok] Data ActionLink
instance [overlap ok] Eq ActionLink
instance [overlap ok] Ord ActionLink
instance [overlap ok] Read ActionLink
instance [overlap ok] Show ActionLink
instance [overlap ok] Eq FacebookError
instance [overlap ok] Ord FacebookError
instance [overlap ok] Read FacebookError
instance [overlap ok] Show FacebookError
instance [overlap ok] Data AlbumId
instance [overlap ok] Eq AlbumId
instance [overlap ok] Ord AlbumId
instance [overlap ok] Read AlbumId
instance [overlap ok] Show AlbumId
instance [overlap ok] Ix AlbumId
instance [overlap ok] ToMessage (Maybe XMLMetaData, FbXML)
instance [overlap ok] ToMessage FbXML
instance [overlap ok] (HasSessionKey m) => HasSessionKey (XMLGenT m)
instance [overlap ok] (HasUser m) => HasUser (XMLGenT m)
instance [overlap ok] (HasFacebookData d m) => HasFacebookData d (XMLGenT m)
instance [overlap ok] (HasFacebookConfig m) => HasFacebookConfig (XMLGenT m)
instance [overlap ok] (Monad m) => HasSessionKey (FacebookT (FacebookStateS d) m)
instance [overlap ok] (Monad m) => HasUser (FacebookT (FacebookStateS d) m)
instance [overlap ok] (Monad m) => HasFacebookData d (FacebookT (FacebookStateS d) m)
instance [overlap ok] (Monad m) => HasFacebookConfig (FacebookT (FacebookStateS d) m)
instance [overlap ok] (Monad m) => HasUser (FacebookT (FacebookStateU d) m)
instance [overlap ok] (Monad m) => HasFacebookData d (FacebookT (FacebookStateU d) m)
instance [overlap ok] (Monad m) => HasFacebookConfig (FacebookT (FacebookStateU d) m)
instance [overlap ok] (Monad m) => HasFacebookData d (FacebookT (FacebookState d) m)
instance [overlap ok] (Monad m) => HasFacebookConfig (FacebookT (FacebookState d) m)
instance [overlap ok] (Data ctx Integer, Sat (ctx AlbumId), Sat (ctx Integer)) => Data ctx AlbumId
instance [overlap ok] Typeable AlbumId
instance [overlap ok] Default AlbumId
instance [overlap ok] Data PhotoId
instance [overlap ok] Eq PhotoId
instance [overlap ok] Ord PhotoId
instance [overlap ok] Read PhotoId
instance [overlap ok] Show PhotoId
instance [overlap ok] Ix PhotoId
instance [overlap ok] (Data ctx Integer, Sat (ctx PhotoId), Sat (ctx Integer)) => Data ctx PhotoId
instance [overlap ok] Typeable PhotoId
instance [overlap ok] Default PhotoId
instance [overlap ok] Serialize FriendList
instance [overlap ok] Data FriendList
instance [overlap ok] Eq FriendList
instance [overlap ok] Ord FriendList
instance [overlap ok] Read FriendList
instance [overlap ok] Show FriendList
instance [overlap ok] Version FriendList
instance [overlap ok] (Data ctx Flid, Data ctx String, Sat (ctx FriendList), Sat (ctx Flid), Sat (ctx String)) => Data ctx FriendList
instance [overlap ok] Typeable FriendList
instance [overlap ok] Default FriendList
instance [overlap ok] Serialize Flid
instance [overlap ok] Version Flid
instance [overlap ok] Serialize Sex
instance [overlap ok] Version Sex
instance [overlap ok] Serialize User
instance [overlap ok] Data Sex
instance [overlap ok] Eq Sex
instance [overlap ok] Ord Sex
instance [overlap ok] Read Sex
instance [overlap ok] Show Sex
instance [overlap ok] Ix Sex
instance [overlap ok] Data Flid
instance [overlap ok] Eq Flid
instance [overlap ok] Ord Flid
instance [overlap ok] Read Flid
instance [overlap ok] Show Flid
instance [overlap ok] Ix Flid
instance [overlap ok] Data User
instance [overlap ok] Eq User
instance [overlap ok] Ord User
instance [overlap ok] Read User
instance [overlap ok] Show User
instance [overlap ok] Ix User
instance [overlap ok] Version User
instance [overlap ok] (Sat (ctx Sex)) => Data ctx Sex
instance [overlap ok] Typeable Sex
instance [overlap ok] (Data ctx Integer, Sat (ctx Flid), Sat (ctx Integer)) => Data ctx Flid
instance [overlap ok] Typeable Flid
instance [overlap ok] (Data ctx Integer, Sat (ctx User), Sat (ctx Integer)) => Data ctx User
instance [overlap ok] Typeable User
instance [overlap ok] Default Sex
instance [overlap ok] Default Flid
instance [overlap ok] Default User
instance [overlap ok] Enum CallId
instance [overlap ok] Eq CallId
instance [overlap ok] Integral CallId
instance [overlap ok] Num CallId
instance [overlap ok] Ord CallId
instance [overlap ok] Read CallId
instance [overlap ok] Real CallId
instance [overlap ok] Show CallId
instance [overlap ok] Ix CallId
instance [overlap ok] Read AppId
instance [overlap ok] Show AppId
instance [overlap ok] Eq AppId
instance [overlap ok] Ord AppId
instance [overlap ok] Read AppSecret
instance [overlap ok] Show AppSecret
instance [overlap ok] Eq AppSecret
instance [overlap ok] Ord AppSecret
instance [overlap ok] Read ApiKey
instance [overlap ok] Show ApiKey
instance [overlap ok] Eq ApiKey
instance [overlap ok] Ord ApiKey
instance [overlap ok] Show FacebookConfig
instance [overlap ok] Eq FacebookConfig

module Happstack.Facebook.Status
data Set
Set :: String -> Set
instance [overlap ok] Typeable Set
instance [overlap ok] Data Set
instance [overlap ok] Eq Set
instance [overlap ok] Ord Set
instance [overlap ok] Read Set
instance [overlap ok] Show Set
instance [overlap ok] (HasSessionKey m) => FacebookMethod m Set

module Happstack.Facebook.Photos
data Get
Get :: Maybe User -> Maybe AlbumId -> Maybe [PhotoId] -> Get
subj_id :: Get -> Maybe User
album :: Get -> Maybe AlbumId
photos :: Get -> Maybe [PhotoId]
instance [overlap ok] Typeable Get
instance [overlap ok] Data Get
instance [overlap ok] Read Get
instance [overlap ok] Show Get
instance [overlap ok] Eq Get
instance [overlap ok] Ord Get
instance [overlap ok] (HasSessionKey m) => FacebookMethod m Get
instance [overlap ok] RequiresSession Get

module Happstack.Facebook.Feed
newtype BundleId
BundleId :: Integer -> BundleId
unBundledId :: BundleId -> Integer
data StorySize
OneLine :: StorySize
Short :: StorySize

-- | Deactivates a previously registered template bundle
data DeactivateTemplateBundleById
DeactivateTemplateBundleById :: BundleId -> DeactivateTemplateBundleById
data PublishUserAction
PublishUserAction :: BundleId -> (Maybe StorySize) -> Parameters -> PublishUserAction

-- | FeedData is used to supply data for the feedStory/multiFeedStory
--   callback
--   <a>http://wiki.developers.facebook.com/index.php/Feed_Forms</a>
data FeedData
FeedData :: Target -> BundleId -> [(String, String)] -> String -> FeedData
target :: FeedData -> Target
template_id :: FeedData -> BundleId
template_data :: FeedData -> [(String, String)]
next :: FeedData -> String
data Target
SingleFeed :: Target
MultiFeed :: Target
data TemplateBundle
TemplateBundle :: [String] -> [(Maybe String, String)] -> [ActionLink] -> TemplateBundle
oneLineTemplateBundle :: TemplateBundle -> [String]
shortTemplateBundle :: TemplateBundle -> [(Maybe String, String)]
actionLinks :: TemplateBundle -> [ActionLink]
data RegisterTemplateBundle
RegisterTemplateBundle :: TemplateBundle -> RegisterTemplateBundle
instance [overlap ok] Typeable RegisterTemplateBundle
instance [overlap ok] Typeable TemplateBundle
instance [overlap ok] Typeable Target
instance [overlap ok] Typeable FeedData
instance [overlap ok] Typeable PublishUserAction
instance [overlap ok] Typeable DeactivateTemplateBundleById
instance [overlap ok] Typeable StorySize
instance [overlap ok] Typeable BundleId
instance [overlap ok] Eq RegisterTemplateBundle
instance [overlap ok] Ord RegisterTemplateBundle
instance [overlap ok] Read RegisterTemplateBundle
instance [overlap ok] Show RegisterTemplateBundle
instance [overlap ok] Data RegisterTemplateBundle
instance [overlap ok] Eq TemplateBundle
instance [overlap ok] Ord TemplateBundle
instance [overlap ok] Read TemplateBundle
instance [overlap ok] Show TemplateBundle
instance [overlap ok] Data TemplateBundle
instance [overlap ok] Eq Target
instance [overlap ok] Ord Target
instance [overlap ok] Read Target
instance [overlap ok] Show Target
instance [overlap ok] Data Target
instance [overlap ok] Eq FeedData
instance [overlap ok] Ord FeedData
instance [overlap ok] Read FeedData
instance [overlap ok] Show FeedData
instance [overlap ok] Data FeedData
instance [overlap ok] Data PublishUserAction
instance [overlap ok] Read PublishUserAction
instance [overlap ok] Show PublishUserAction
instance [overlap ok] Eq PublishUserAction
instance [overlap ok] Ord PublishUserAction
instance [overlap ok] Data DeactivateTemplateBundleById
instance [overlap ok] Read DeactivateTemplateBundleById
instance [overlap ok] Show DeactivateTemplateBundleById
instance [overlap ok] Eq DeactivateTemplateBundleById
instance [overlap ok] Ord DeactivateTemplateBundleById
instance [overlap ok] Ix DeactivateTemplateBundleById
instance [overlap ok] Data StorySize
instance [overlap ok] Read StorySize
instance [overlap ok] Show StorySize
instance [overlap ok] Eq StorySize
instance [overlap ok] Ord StorySize
instance [overlap ok] Ix StorySize
instance [overlap ok] Data BundleId
instance [overlap ok] Eq BundleId
instance [overlap ok] Ord BundleId
instance [overlap ok] Read BundleId
instance [overlap ok] Show BundleId
instance [overlap ok] Ix BundleId
instance [overlap ok] (Monad m) => FacebookMethod m RegisterTemplateBundle
instance [overlap ok] ToJson FeedData
instance [overlap ok] (HasSessionKey m) => FacebookMethod m PublishUserAction
instance [overlap ok] RequiresSession PublishUserAction
instance [overlap ok] (Monad m) => FacebookMethod m DeactivateTemplateBundleById
instance [overlap ok] Enum StorySize
instance [overlap ok] ToJson BundleId

module Happstack.Facebook.Application

-- | This data type holds all the informaton that facebook pass along with
--   the request
--   http:<i></i>wiki.developers.facebook.com<i>index.php</i>Your_callback_page_and_you
data FacebookData
FacebookData :: [(String, String)] -> Bool -> Bool -> Method -> Bool -> Maybe User -> POSIXTime -> ApiKey -> String -> String -> Maybe [User] -> Maybe SessionKey -> Maybe POSIXTime -> Maybe POSIXTime -> Bool -> FacebookData
fbPairs :: FacebookData -> [(String, String)]
_fb_sig_added :: FacebookData -> Bool
_fb_sig_in_canvas :: FacebookData -> Bool
_fb_sig_request_method :: FacebookData -> Method
_fb_sig_position_fix :: FacebookData -> Bool
_fb_user :: FacebookData -> Maybe User
_fb_sig_time :: FacebookData -> POSIXTime
_fb_sig_api_key :: FacebookData -> ApiKey
_fb_sig_locale :: FacebookData -> String
_fb_sig :: FacebookData -> String
_fb_sig_friends :: FacebookData -> Maybe [User]
_fb_sig_session_key :: FacebookData -> Maybe SessionKey
_fb_sig_expires :: FacebookData -> Maybe POSIXTime
_fb_sig_profile_update_time :: FacebookData -> Maybe POSIXTime
_fb_valid_sig :: FacebookData -> Bool

-- | has the user added our application
fb_sig_added :: (HasFacebookData FacebookData m) => m Bool
fb_sig_in_canvas :: (HasFacebookData FacebookData m) => m Bool
fb_sig_request_method :: (HasFacebookData FacebookData m) => m Method
fb_sig_position_fix :: (HasFacebookData FacebookData m) => m Bool

-- | get the userid
fb_user :: (HasFacebookData FacebookData m) => m (Maybe User)

-- | get current time
fb_sig_time :: (HasFacebookData FacebookData m) => m POSIXTime

-- | your api key
fb_sig_api_key :: (HasFacebookData FacebookData m) => m ApiKey

-- | the user's locale
fb_sig_locale :: (HasFacebookData FacebookData m) => m String

-- | the signature for the request
fb_sig :: (HasFacebookData FacebookData m) => m String

-- | is the signature valid
fb_valid_sig :: (HasFacebookData FacebookData m) => m Bool

-- | list of the users friends NOTE: only available if the user is logged
--   in
fb_sig_friends :: (HasFacebookData FacebookData m) => m (Maybe [User])

-- | session key NOTE: only available if the user is logged in
fb_sig_session_key :: (HasFacebookData FacebookData m) => m (Maybe String)

-- | when this session key expires 0 == never otherwise, time in seconds
--   since epoch` NOTE: only available if the user is logged in
fb_sig_expires :: (HasFacebookData FacebookData m) => m (Maybe POSIXTime)

-- | time profile was last updated NOTE: only available if the user is
--   logged in
fb_sig_profile_update_time :: (HasFacebookData FacebookData m) => m (Maybe POSIXTime)
validateSignature :: AppSecret -> String -> [(String, String)] -> Bool
withFacebookData :: (Monad m, MonadPlus m, ServerMonad m) => FacebookConfig -> (FacebookData -> m r) -> m r
withFacebook :: (Monad m, MonadPlus m, ServerMonad m) => FacebookConfig -> FacebookT (FacebookState FacebookData) m a -> m a
withUserSP :: (HasFacebookConfig (FacebookT (s d) m), HasFacebookData d (FacebookT (s d) m), HasFacebookData FacebookData (FacebookT (s d) m), MonadPlus m) => FacebookT (FacebookStateU d) m a -> FacebookT (s d) m a
withSessionSP :: (HasFacebookConfig (FacebookT (s d) m), HasFacebookData d (FacebookT (s d) m), HasFacebookData FacebookData (FacebookT (s d) m), HasFacebookData FacebookData (FacebookT (FacebookStateU d) m), MonadPlus m) => FacebookT (FacebookStateS d) m a -> FacebookT (s d) m a
instance [overlap ok] Eq FacebookData
instance [overlap ok] Show FacebookData

module Happstack.Facebook.Connect
data FacebookConnectData
FacebookConnectData :: [(String, Cookie)] -> Maybe POSIXTime -> Maybe SessionKey -> Maybe String -> Maybe User -> Maybe String -> FacebookConnectData
_fbc_cookies :: FacebookConnectData -> [(String, Cookie)]
_fbc_sig_expires :: FacebookConnectData -> Maybe POSIXTime
_fbc_sig_session_key :: FacebookConnectData -> Maybe SessionKey
_fbc_sig_ss :: FacebookConnectData -> Maybe String
_fbc_user :: FacebookConnectData -> Maybe User
_fbc_sig :: FacebookConnectData -> Maybe String

-- | when this session key expires 0 == never otherwise, time in seconds
--   since epoch` NOTE: only available if the user is logged in
fb_sig_expires :: (HasFacebookData FacebookConnectData m) => m (Maybe POSIXTime)

-- | session key NOTE: only available if the user is logged in
fb_sig_session_key :: (HasFacebookData FacebookConnectData m) => m (Maybe SessionKey)
fb_sig_ss :: (HasFacebookData FacebookConnectData m) => m (Maybe String)
fb_user :: (HasFacebookData FacebookConnectData m) => m (Maybe User)

-- | the signature for the request
fb_sig :: (HasFacebookData FacebookConnectData m) => m (Maybe String)
validateSignature :: AppSecret -> FacebookConnectData -> Bool
withFacebookConnectData :: (Monad m, MonadPlus m, ServerMonad m) => FacebookConfig -> (FacebookConnectData -> m r) -> m r
withFacebookConnect :: (Monad m, MonadPlus m, ServerMonad m) => FacebookConfig -> FacebookT (FacebookState FacebookConnectData) m a -> m a
withUserSP :: (HasFacebookConfig (FacebookT (s d) m), HasFacebookData d (FacebookT (s d) m), HasFacebookData FacebookConnectData (FacebookT (s d) m), MonadPlus m) => FacebookT (FacebookStateU d) m a -> FacebookT (s d) m a
withSessionSP :: (HasFacebookConfig (FacebookT (s d) m), HasFacebookData d (FacebookT (s d) m), HasFacebookData FacebookConnectData (FacebookT (s d) m), HasFacebookData FacebookConnectData (FacebookT (FacebookStateU d) m), MonadPlus m) => FacebookT (FacebookStateS d) m a -> FacebookT (s d) m a
instance [overlap ok] Eq FacebookConnectData
instance [overlap ok] Show FacebookConnectData

module Happstack.Facebook.XdReceiver
xdReceiverPart :: (MonadIO m, MonadPlus m, ServerMonad m, HasFacebookConfig m) => m Response
xdReceiverXML :: (XMLGenerator m) => XMLGenT m (XML m)
fbInit :: (XMLGenerator m, HasFacebookConfig m) => ApiKey -> XMLGenT m (XML m)
fbFeatureLoader :: (XMLGenerator m) => XMLGenT m (XML m)

module Happstack.Facebook.Users
data GetStandardInfo
GetStandardInfo :: [User] -> [StandardInfoField] -> GetStandardInfo
data StandardInfoField
UID :: StandardInfoField
FirstName :: StandardInfoField
LastName :: StandardInfoField
Name :: StandardInfoField
TimeZone :: StandardInfoField
Birthday :: StandardInfoField
Sex :: StandardInfoField
Locale :: StandardInfoField
ProfileURL :: StandardInfoField
ProxiedEmail :: StandardInfoField
data StandardInfo
StandardInfo :: Maybe User -> Maybe String -> Maybe String -> Maybe String -> Maybe TimeZone -> Maybe String -> Maybe Sex -> Maybe String -> Maybe String -> Maybe String -> StandardInfo
uid :: StandardInfo -> Maybe User
firstName :: StandardInfo -> Maybe String
lastName :: StandardInfo -> Maybe String
name :: StandardInfo -> Maybe String
timeZone :: StandardInfo -> Maybe TimeZone
birthday :: StandardInfo -> Maybe String
sex :: StandardInfo -> Maybe Sex
locale :: StandardInfo -> Maybe String
profileURL :: StandardInfo -> Maybe String
proxiedEmail :: StandardInfo -> Maybe String
parseStandardInfo :: JSValue -> Result StandardInfo
instance [overlap ok] Typeable StandardInfo
instance [overlap ok] Typeable StandardInfoField
instance [overlap ok] Typeable GetStandardInfo
instance [overlap ok] Eq StandardInfo
instance [overlap ok] Ord StandardInfo
instance [overlap ok] Read StandardInfo
instance [overlap ok] Show StandardInfo
instance [overlap ok] Eq StandardInfoField
instance [overlap ok] Ord StandardInfoField
instance [overlap ok] Read StandardInfoField
instance [overlap ok] Show StandardInfoField
instance [overlap ok] Data StandardInfoField
instance [overlap ok] Ix StandardInfoField
instance [overlap ok] Enum StandardInfoField
instance [overlap ok] Eq GetStandardInfo
instance [overlap ok] Ord GetStandardInfo
instance [overlap ok] Read GetStandardInfo
instance [overlap ok] Show GetStandardInfo
instance [overlap ok] (HasSessionKey m) => FacebookMethod m GetStandardInfo
instance [overlap ok] JSON StandardInfo
instance [overlap ok] JSON StandardInfoField

module Happstack.Facebook.Notifications
data Get
Get :: Get
data Send
Send :: [User] -> String -> Maybe NotificationType -> Send
to_ids :: Send -> [User]
notification :: Send -> String
notificationType :: Send -> Maybe NotificationType
data NotificationType
UserToUser :: NotificationType
AppToUser :: NotificationType
data SendNS
SendNS :: [User] -> String -> SendNS
to_idsNS :: SendNS -> [User]
notificationNS :: SendNS -> String
instance [overlap ok] Typeable SendNS
instance [overlap ok] Typeable NotificationType
instance [overlap ok] Typeable Send
instance [overlap ok] Typeable Get
instance [overlap ok] Eq SendNS
instance [overlap ok] Ord SendNS
instance [overlap ok] Read SendNS
instance [overlap ok] Show SendNS
instance [overlap ok] Data SendNS
instance [overlap ok] Eq NotificationType
instance [overlap ok] Ord NotificationType
instance [overlap ok] Read NotificationType
instance [overlap ok] Show NotificationType
instance [overlap ok] Data NotificationType
instance [overlap ok] Ix NotificationType
instance [overlap ok] Eq Send
instance [overlap ok] Ord Send
instance [overlap ok] Read Send
instance [overlap ok] Show Send
instance [overlap ok] Data Send
instance [overlap ok] Eq Get
instance [overlap ok] Ord Get
instance [overlap ok] Read Get
instance [overlap ok] Show Get
instance [overlap ok] Data Get
instance [overlap ok] Ix Get
instance [overlap ok] (Monad m) => FacebookMethod m SendNS
instance [overlap ok] (HasSessionKey m) => FacebookMethod m Send

module Happstack.Facebook
shareOnFacebook :: (XMLGenerator m) => XMLGenT m (XML m)
