-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Determine the type of an image by reading the first bytes.
--   
--   A package used to determine the type of an image according to its
--   first bytes based on the Python library <a>imghdr</a>.
--   
--   Most simplest usage is getting the type of a file:
--   
--   <pre>
--   &gt;&gt;&gt; import Codec.ImageType
--   
--   &gt;&gt;&gt; getFileType "/tmp/mystery_file"
--   Just "webp"
--   </pre>
--   
--   Or to test for a specific extension:
--   
--   <pre>
--   &gt;&gt;&gt; isPgm "/tmp/file.pgm"
--   True
--   
--   &gt;&gt;&gt; import qualified Data.ByteString as B
--   
--   &gt;&gt;&gt; testPgm &lt;$&gt; B.readFile "/tmp/file.pgm"
--   Just "pgm"
--   </pre>
--   
--   Or to filter files by extension:
--   
--   <pre>
--   &gt;&gt;&gt; import Codec.ImageType
--   
--   &gt;&gt;&gt; import Control.Monad
--   
--   &gt;&gt;&gt; import System.Directory
--   
--   &gt;&gt;&gt; 
--   
--   &gt;&gt;&gt; getDirectoryContents "." &gt;&gt;= filterM doesFileExist &gt;&gt;= filterM isJpeg
--   ["file2.jpeg","file1.jpeg"]
--   </pre>
--   
--   Supports the following extensions: <tt>JPEG</tt>, <tt>PNG</tt>,
--   <tt>GIF</tt>, <tt>TIFF</tt>, <tt>RGB</tt>, <tt>PBM</tt>, <tt>PGM</tt>,
--   <tt>PPM</tt>, <tt>RAST</tt>, <tt>XBM</tt>, <tt>BMP</tt>,
--   <tt>WebP</tt>, <tt>EXR</tt>.
@package image-type
@version 0.1.0.0


-- | Infers an image's type by looking at its initial values and comparing
--   against some magic bytes:
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedStrings
--   
--   &gt;&gt;&gt; import Codec.ImageType
--   
--   &gt;&gt;&gt; import System.IO
--   
--   &gt;&gt;&gt; import qualified Data.ByteString as B
--   
--   &gt;&gt;&gt; 
--   
--   &gt;&gt;&gt; h &lt;- openFile "/tmp/1_webp_ll.webp" ReadMode
--   
--   &gt;&gt;&gt; bytes &lt;- hGet h 32
--   
--   &gt;&gt;&gt; B.isInfixOf "RIFF" bytes
--   True
--   
--   &gt;&gt;&gt; bytes
--   "RIFF\144h\SOH\NULWEBPVP8L\131h\SOH\NUL/\143\SOHK\DLE\141\&amp;8l\219F\146\224"
--   
--   &gt;&gt;&gt; getFileType "/tmp/1_webp_ll.webp"
--   Just "webp"
--   </pre>
--   
--   Some other examples:
--   
--   <pre>
--   &gt;&gt;&gt; import System.Process
--   
--   &gt;&gt;&gt; import System.Directory
--   
--   &gt;&gt;&gt; import Control.Monad
--   
--   &gt;&gt;&gt; let findTiffs = lines &lt;$&gt; readProcess "locate" ["*.tiff"] ""
--   
--   &gt;&gt;&gt; length &lt;$&gt; findTiffs
--   25
--   
--   &gt;&gt;&gt; findTiffs &gt;&gt;= filterM doesFileExist &gt;&gt;= mapM getFileType
--   [Just "tiff",Just "tiff", â€¦
--   
--   &gt;&gt;&gt; sequence_ &lt;$&gt; (findTiffs &gt;&gt;= filterM doesFileExist &gt;&gt;= mapM getFileType)
--   Just ()
--   </pre>
module Codec.ImageType

-- | Gets a ginel possible file types based on fairly arbitrary tie
--   breaking.
--   
--   <pre>
--   &gt;&gt;&gt; import System.Directory
--   
--   &gt;&gt;&gt; import Control.Monad
--   
--   &gt;&gt;&gt; getDirectoryContents "." &gt;&gt;= filterM doesFileExist &gt;&gt;= mapM getFileType
--   [Just "rast",Just "jpeg",Nothing,Just "webp",Just "gif",Just "pgm",Just "webp",Nothing,Just "webp",Just "exr"]
--   </pre>
getFileType :: FilePath -> IO (Maybe String)

-- | Gets possible file types. Returns empty list if nothing is found,
--   otherwise a list of matches.
--   
--   <pre>
--   &gt;&gt;&gt; import System.Directory
--   
--   &gt;&gt;&gt; import Control.Monad
--   
--   &gt;&gt;&gt; getDirectoryContents "." &gt;&gt;= filterM doesFileExist &gt;&gt;= mapM getFileTypes
--   [["rast"],["jpeg"],[],["webp"],["gif"],["pgm"],["webp"],[],["webp"],["exr"]]
--   </pre>
getFileTypes :: FilePath -> IO [String]

-- | Checks if file is <tt>jpeg</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; import Codec.ImageType
--   
--   &gt;&gt;&gt; import Control.Monad
--   
--   &gt;&gt;&gt; import System.Directory
--   
--   &gt;&gt;&gt; 
--   
--   &gt;&gt;&gt; 
--   
--   &gt;&gt;&gt; getDirectoryContents "." &gt;&gt;= filterM doesFileExist &gt;&gt;= filterM isJpeg
--   ["file2.jpeg","file1.jpeg"]
--   </pre>
isJpeg :: FilePath -> IO Bool

-- | Checks if file is <tt>png</tt>.
isPng :: FilePath -> IO Bool

-- | Checks if file is <tt>gif</tt>.
isGif :: FilePath -> IO Bool

-- | Checks if file is <tt>tiff</tt>.
isTiff :: FilePath -> IO Bool

-- | Checks if file is <tt>rgb</tt>.
isRgb :: FilePath -> IO Bool

-- | Checks if file is <tt>pbm</tt>.
isPbm :: FilePath -> IO Bool

-- | Checks if file is <tt>pgm</tt>.
isPgm :: FilePath -> IO Bool

-- | Checks if file is <tt>ppm</tt>.
isPpm :: FilePath -> IO Bool

-- | Checks if file is <tt>rast</tt>.
isRast :: FilePath -> IO Bool

-- | Checks if file is <tt>xbm</tt>.
isXbm :: FilePath -> IO Bool

-- | Checks if file is <tt>bmp</tt>.
isBmp :: FilePath -> IO Bool

-- | Checks if file is <tt>webp</tt>.
isWebp :: FilePath -> IO Bool

-- | Checks if file is <tt>exr</tt>.
isExr :: FilePath -> IO Bool

-- | Joint Photographic Experts Group (JPEG). Returns <tt>Just
--   <a>jpeg</a></tt> if file satisfies check.
testJpeg :: ByteString -> Maybe String

-- | Portable Network Graphics (PNG). Returns <tt>Just <a>png</a></tt> if
--   file satisfies check against magic number <tt>89 50 4e 47 0d 0a 1a
--   0a</tt>.
testPng :: ByteString -> Maybe String

-- | Graphics Interchange Format (GIF). Returns <tt>Just <a>gif</a></tt> if
--   file satisfies check against magic number <tt>GIF87a</tt> and
--   <tt>GIF89a</tt>.
testGif :: ByteString -> Maybe String

-- | Tagged Image File Format (TIFF). Returns <tt>Just <a>tiff</a></tt> if
--   first short is <tt>II</tt> or <tt>MM</tt>.
testTiff :: ByteString -> Maybe String

-- | SGI image library. Checks magic number (decimal value 474 as a short)
--   that identifies file as an SGI image file and then returns <tt>Just
--   <a>rgb</a></tt>.
testRgb :: ByteString -> Maybe String

-- | PBM (portable bitmap). Returns <tt>Just <a>pbm</a></tt> if file
--   satisfies check.
testPbm :: ByteString -> Maybe String

-- | PGM (portable graymap). Returns <tt>Just <a>pgm</a></tt> if file
--   satisfies check.
testPgm :: ByteString -> Maybe String

-- | PPM (portable pixmap). Returns <tt>Just <a>ppm</a></tt> if file
--   satisfies check.
testPpm :: ByteString -> Maybe String

-- | Sun raster file. Returns <tt>Just <a>rast</a></tt> if file satisfies
--   check.
testRast :: ByteString -> Maybe String

-- | X bitmap (X10 or X11). Returns <tt>Just <a>xbm</a></tt> if file
--   satisfies check.
testXbm :: ByteString -> Maybe String

-- | Bitmap (BMP) file format. Returns <tt>Just <a>bmp</a></tt> if file
--   satisfies check.
testBmp :: ByteString -> Maybe String

-- | WebP. Returns <tt>Just <a>webp</a></tt> if file satisfies check.
testWebp :: ByteString -> Maybe String

-- | OpenEXR. Returns <tt>Just <a>exr</a></tt> if file satisfies check.
testExr :: ByteString -> Maybe String
