-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Catchy combinators for HUnit
--   
--   Catchy combinators for HUnit:
--   <a>https://github.com/sol/test-shouldbe#readme</a>
@package test-shouldbe
@version 0.2.1


-- | Introductory documentation:
--   <a>https://github.com/sol/test-shouldbe#readme</a>
module Test.HUnit.ShouldBe
type Expectation = Assertion

-- | <tt>actual `shouldBe` expected</tt> sets the expectation that
--   <tt>actual</tt> is equal to <tt>expected</tt> (this is just an alias
--   for <a>@?=</a>).
shouldBe :: (Show a, Eq a) => a -> a -> Expectation

-- | <tt>v `shouldSatisfy` p</tt> sets the expectation that <tt>p v</tt> is
--   <tt>True</tt>.
shouldSatisfy :: Show a => a -> (a -> Bool) -> Expectation

-- | <tt>action `shouldReturn` expected</tt> sets the expectation that
--   <tt>action</tt> returns <tt>expected</tt>.
shouldReturn :: (Show a, Eq a) => IO a -> a -> Expectation

-- | <tt>action `shouldThrow` selector</tt> sets the expectation that
--   <tt>action</tt> throws an exception. The precise nature of the
--   expected exception is described with a <a>Selector</a>.
shouldThrow :: Exception e => IO a -> Selector e -> Expectation

-- | A <tt>Selector</tt> is a predicate; it can simultaneously constrain
--   the type and value of an exception.
type Selector a = a -> Bool
anyException :: Selector SomeException
anyErrorCall :: Selector ErrorCall
anyIOException :: Selector IOException
anyArithException :: Selector ArithException
errorCall :: String -> Selector ErrorCall


-- | Experimental combinators, that may become part of the main
--   distribution, if they turn out to be useful for a wider audience.
module Test.HUnit.ShouldBe.Contrib
isLeft :: Either a b -> Bool
isRight :: Either a b -> Bool
