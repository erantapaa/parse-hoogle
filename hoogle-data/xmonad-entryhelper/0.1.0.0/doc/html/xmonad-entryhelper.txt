-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | XMonad config entry point wrapper
--   
--   xmonad-entryhelper makes your compiled XMonad config a standalone
--   binary.
--   
--   It simulates the XMonad's argument handling and supports customized
--   compliation.
--   
--   Please check <a>README</a> for details.
@package xmonad-entryhelper
@version 0.1.0.0


-- | Information generated from cabal macros
module XMonad.Util.EntryHelper.Generated

-- | the XMonad version compiled with this library
xmonadVersion :: String


-- | Miscellaneous utilities for safe IO action, scanning files, sending X
--   events, etc.
module XMonad.Util.EntryHelper.Util

-- | performs an IO action and captures all the exceptions, a default value
--   is returned when there are exceptions.
safeIO :: a -> IO a -> IO a

-- | performs an IO action and wraps the resulting value in Maybe
safeIO' :: IO a -> IO (Maybe a)

-- | checks if a file name is a Haskell source file
isHaskellSourceFile :: FilePath -> Bool

-- | gets a list of all files under a given directory and its
--   subdirectories
allFiles :: FilePath -> IO [FilePath]

-- | sends restart request to the current XMonad instance
sendRestart :: IO ()


-- | Dealing with XMonad-related files
module XMonad.Util.EntryHelper.File

-- | XMonad default file paths
data XMonadPaths
XMonadPaths :: FilePath -> FilePath -> FilePath -> FilePath -> FilePath -> XMonadPaths

-- | directory path
dirPath :: XMonadPaths -> FilePath

-- | compiled binary path
binPath :: XMonadPaths -> FilePath

-- | error log path
logPath :: XMonadPaths -> FilePath

-- | source file path (the path to "xmonad.hs")
srcPath :: XMonadPaths -> FilePath

-- | directory path for library files
libDirPath :: XMonadPaths -> FilePath

-- | gets information about XMonad-related paths, see also:
--   <a>XMonadPaths</a>
getXMonadDir :: IO FilePath

-- | gets information about XMonad-related paths
getXMonadPaths :: IO XMonadPaths

-- | gets information about XMonad-related paths, see also:
--   <a>XMonadPaths</a>
getXMonadBin :: IO FilePath

-- | gets information about XMonad-related paths, see also:
--   <a>XMonadPaths</a>
getXMonadLog :: IO FilePath

-- | gets information about XMonad-related paths, see also:
--   <a>XMonadPaths</a>
getXMonadSrc :: IO FilePath

-- | gets information about XMonad-related paths, see also:
--   <a>XMonadPaths</a>
getXMonadLibDir :: IO FilePath

-- | returns true only when any of the followings is true:
--   
--   <ul>
--   <li>any of the source files under xmonad's default directory is newer
--   than the binary</li>
--   <li>the binary does not exist</li>
--   </ul>
isSourceNewer :: IO Bool
instance Show XMonadPaths


-- | Compiling-related functions
module XMonad.Util.EntryHelper.Compile

-- | the default compiling action. checks whether any of the sources files
--   under <tt>"~/.xmonad/"</tt> is newer than the binary and recompiles
--   XMonad if so.
defaultCompile :: Bool -> IO ExitCode

-- | the default post-compiling action. prints out error log to stderr and
--   pops up a message when the last compilation has failed.
defaultPostCompile :: ExitCode -> IO ()

-- | <tt>compileUsingShell cmd</tt> spawns a new process to run a shell
--   command (shell expansion is applied). The working directory of the
--   shell command is <tt>"~/.xmonad/"</tt>, and the process' stdout and
--   stdout are redirected to <tt>"~/.xmonad/xmonad.errors"</tt>
compileUsingShell :: String -> IO ExitCode

-- | prevents an IO action from parallel execution by using a lock file.
--   <tt>withFileLock fpath def action</tt> checks whether the file
--   indicated by <tt>fpath</tt> exists. And:
--   
--   <ul>
--   <li>returns <tt>def</tt> if the file exists.</li>
--   <li>creates <tt>fpath</tt>, executes the action, and deletes
--   <tt>fpath</tt> when the action has completed. If <tt>action</tt> has
--   failed, <tt>def</tt> will be returned instead.</li>
--   </ul>
--   
--   Note that:
--   
--   <ul>
--   <li>the action will be protected by <a>safeIO</a>, meaning the lock
--   file will be deleted regardless of any error.</li>
--   <li>No check on <tt>fpath</tt> will be done by this function. Please
--   make sure the lock file does not exist.</li>
--   <li>please prevent wrapping the action with same file lock multiple
--   times, in which case the action will never be executed.</li>
--   </ul>
withFileLock :: FilePath -> a -> IO a -> IO a

-- | <tt>withLock def action</tt> is the same as <tt>withFileLock fpath def
--   action</tt> with <tt>fpath</tt> being
--   <tt>"xmonad.${USERNAME}.lock"</tt> under your temporary directory.
--   Wrapping an action with more than one <tt>withLock</tt> will not work.
--   
--   See also: <a>withFileLock</a>, <a>getTemporaryDirectory</a>,
--   <a>getEffectiveUserName</a>
withLock :: a -> IO a -> IO a


-- | Configuration for EntryHelper
module XMonad.Util.EntryHelper.Config

-- | the configuration for EntryHelper.
--   
--   <ul>
--   <li><tt>run</tt> should execute XMonad using a customized
--   configuration.</li>
--   <li><tt>compile force</tt> should compile the source file and return a
--   value which will lately be consumed by <tt>postCompile</tt>.
--   <tt>force</tt> is just a hint about whether the compilation should be
--   forced. <tt>compile</tt> is free to ignore it and do up-to-date check
--   on its own.</li>
--   <li><tt>postCompile val</tt> should take action according to the
--   <tt>val</tt>, usually produced by <tt>compile</tt></li>
--   </ul>
--   
--   Note that:
--   
--   <ul>
--   <li><tt>compile</tt> should create a new process for compilation, as
--   otherwise things like <tt>executeFile</tt> will replace the current
--   process image with a new process image, make it impossible for
--   <tt>postCompile</tt> to invoke.</li>
--   <li><tt>force</tt> is just a hint about whether the compilation should
--   be forced. and <tt>compile</tt> is free to ignore it and do up-to-date
--   checking on its own.</li>
--   <li>don't remove the binary file when the compilation has failed, as
--   XMonad restart relies on it.</li>
--   </ul>
data Config a
Config :: IO () -> (Bool -> IO a) -> (a -> IO ()) -> Config a

-- | the action for executing XMonad
run :: Config a -> IO ()

-- | the action for compiling XMonad
compile :: Config a -> Bool -> IO a

-- | the action after compiling XMonad
postCompile :: Config a -> a -> IO ()

-- | default config for xmonad-entryhelper, invokes xmonad with its default
--   config file
defaultConfig :: Config ExitCode

-- | <tt>withHelper e</tt> is the same as calling <a>withCustomHelper</a>
--   with default <tt>compile</tt> and <tt>postCompile actions</tt>
--   
--   Either of the following will work:
--   
--   <ul>
--   <li>replace your main entry with <tt>main = withHelper
--   yourOldMain</tt></li>
--   <li>use <tt>main = withHelper (xmonad cfg)</tt> if you have only
--   customized your <a>XConfig</a></li>
--   </ul>
withHelper :: IO () -> IO ()

-- | simulates the way that XMonad handles its command line arguments.
--   
--   <ul>
--   <li>when called with no argument, the action in <tt>run</tt> will be
--   used</li>
--   <li>when called with a string prefixed with <tt>"--resume"</tt>, or
--   when called with <tt>"--replace"</tt>, the action in <tt>run</tt> will
--   be used</li>
--   <li>when called with <tt>"--recompile"</tt> or <tt>"--restart"</tt>,
--   <a>compile</a> will be called. And <a>postCompile</a> will handle the
--   results from compliation.</li>
--   <li>additionally when called with <tt>"--restart"</tt> a restart
--   request will be sent to the current XMonad instance after the
--   compilation regardless of the compilation result.</li>
--   </ul>
withCustomHelper :: Config a -> IO ()


-- | Re-exporting submodules
module XMonad.Util.EntryHelper
