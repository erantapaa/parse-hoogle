-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Run processes on Unix systems, with a conduit interface
--   
--   This library allows you to provide <tt>conduit</tt> datatypes for the
--   input and output streams. Note that you must compile your programs
--   with <tt>-threaded</tt>.
@package unix-process-conduit
@version 0.2.2

module Data.Conduit.LogFile

-- | Represents a folder used for totating log files.
--   
--   Since 0.2.1
data RotatingLog

-- | Create a new <tt>RotatingLog</tt>.
--   
--   Since 0.2.1
openRotatingLog :: FilePath -> Word -> IO RotatingLog
addChunk :: RotatingLog -> ByteString -> IO ()
close :: RotatingLog -> IO ()
defaultMaxTotal :: Word

-- | A <tt>RotatingLog</tt> which performs no logging.
--   
--   Since 0.2.1
dummy :: RotatingLog

module Data.Conduit.Process.Unix

-- | Fork a new process and execute the given command.
--   
--   This is a wrapper around with fork() and exec*() syscalls, set up to
--   work with <tt>conduit</tt> datatypes for standard input, output, and
--   error. If <tt>Nothing</tt> is provided for any of those arguments,
--   then the original file handles will remain open to the child process.
--   
--   If you would like to simply discard data provided by the child
--   process, provide <tt>sinkNull</tt> for stdout and/or stderr. To
--   provide an empty input stream, use <tt>return ()</tt>.
--   
--   Since 0.1.0
forkExecuteFile :: ByteString -> [ByteString] -> Maybe [(ByteString, ByteString)] -> Maybe ByteString -> Maybe (Source IO ByteString) -> Maybe (Sink ByteString IO ()) -> Maybe (Sink ByteString IO ()) -> IO ProcessHandle

-- | Kill a process by sending it the KILL (9) signal.
--   
--   Since 0.1.0
killProcess :: ProcessHandle -> IO ()

-- | Attempts to terminate the specified process. This function should not
--   be used under normal circumstances - no guarantees are given regarding
--   how cleanly the process is terminated. To check whether the process
--   has indeed terminated, use <a>getProcessExitCode</a>.
--   
--   On Unix systems, <a>terminateProcess</a> sends the process the SIGTERM
--   signal. On Windows systems, the Win32 <tt>TerminateProcess</tt>
--   function is called, passing an exit code of 1.
--   
--   Note: on Windows, if the process was a shell command created by
--   <a>createProcess</a> with <a>shell</a>, or created by
--   <a>runCommand</a> or <a>runInteractiveCommand</a>, then
--   <a>terminateProcess</a> will only terminate the shell, not the command
--   itself. On Unix systems, both processes are in a process group and
--   will be terminated together.
terminateProcess :: ProcessHandle -> IO ()

-- | Waits for the specified process to terminate, and returns its exit
--   code.
--   
--   GHC Note: in order to call <tt>waitForProcess</tt> without blocking
--   all the other threads in the system, you must compile the program with
--   <tt>-threaded</tt>.
waitForProcess :: ProcessHandle -> IO ExitCode
data ProcessStatus :: *
Exited :: ExitCode -> ProcessStatus
Terminated :: Signal -> ProcessStatus
Stopped :: Signal -> ProcessStatus
signalProcessHandle :: Signal -> ProcessHandle -> IO ()
signalProcessHandleGroup :: Signal -> ProcessHandle -> IO ()

-- | Represents the child process which handles process cleanup.
--   
--   Since 0.2.1
data ProcessTracker

-- | Represents a child process which is currently being tracked by the
--   cleanup child process.
--   
--   Since 0.2.1
data TrackedProcess

-- | Since 0.2.1
data ProcessTrackerException
CannotLaunchProcessTracker :: ProcessTrackerException

-- | Fork off the child cleanup process.
--   
--   This will ideally only be run once for your entire application.
--   
--   Since 0.2.1
initProcessTracker :: IO ProcessTracker

-- | Begin tracking the given process. If the <a>ProcessHandle</a> refers
--   to a closed process, no tracking will occur. If the process is closed,
--   then it will be untracked automatically.
--   
--   Note that you <i>must</i> compile your program with
--   <tt>-threaded</tt>; see <a>waitForProcess</a>.
--   
--   Since 0.2.1
trackProcess :: ProcessTracker -> ProcessHandle -> IO TrackedProcess

-- | Explicitly remove the given process from the tracked process list in
--   the cleanup process.
--   
--   Since 0.2.1
untrackProcess :: TrackedProcess -> IO ()

-- | Represents a folder used for totating log files.
--   
--   Since 0.2.1
data RotatingLog

-- | Create a new <tt>RotatingLog</tt>.
--   
--   Since 0.2.1
openRotatingLog :: FilePath -> Word -> IO RotatingLog

-- | Fork and execute a subprocess, sending stdout and stderr to the
--   specified rotating log.
--   
--   Since 0.2.1
forkExecuteLog :: ByteString -> [ByteString] -> Maybe [(ByteString, ByteString)] -> Maybe ByteString -> Maybe (Source IO ByteString) -> RotatingLog -> IO ProcessHandle

-- | Abstract type containing information on a process which will be
--   restarted.
data MonitoredProcess

-- | Run the given command, restarting if the process dies.
monitorProcess :: (ByteString -> IO ()) -> ProcessTracker -> Maybe ByteString -> ByteString -> ByteString -> [ByteString] -> [(ByteString, ByteString)] -> RotatingLog -> (ExitCode -> IO Bool) -> IO MonitoredProcess

-- | Terminate the process and prevent it from being restarted.
terminateMonitoredProcess :: MonitoredProcess -> IO ()
instance Typeable ProcessTrackerException
instance Show ProcessTrackerException
instance Exception ProcessTrackerException
