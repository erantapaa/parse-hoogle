-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Monadic HTTP request handlers combinators to build a standalone web apps.
--   
--   Monadic HTTP request handlers combinators to build a standalone web
--   apps. Most of them deal with request data. Some of them allow mapping
--   part of the URL to public folders in the file system. There is also a
--   combinator for sending files efficiently in the response (a fork of
--   the HTTP library was necessary for this, included here).
@package redHandlers
@version 0.1

module Network.HTTP.RedHandler.Session
type SessionState = Integer

-- | search the cookie with the given name in the headers (request headers)
--   and get the session id. Then search the Session Map for the value
getSessionedStateWithCookie :: (HasHeaders request) => String -> request -> IO (Maybe SessionState)

-- | set the value in a new session. Then set responses headers with the
--   cookie.
newSessionedStateWithCookie :: (HasHeaders response) => String -> SessionState -> IO (response -> response)
updateSessionedStateWithCookie :: (HasHeaders request) => String -> request -> SessionState -> IO ()
deleteSessionedStateWithCookie :: (HasHeaders request, HasHeaders response) => String -> request -> IO (response -> response)

module Network.HTTP.RedHandler
data RequestContext
RequestContext :: Request -> CalendarTime -> [String] -> String -> String -> [(String, String)] -> [(String, Input)] -> [String] -> [(String, String)] -> RequestContext
originalRequest :: RequestContext -> Request
requestTime :: RequestContext -> CalendarTime
dirs :: RequestContext -> [String]
docName :: RequestContext -> String
format :: RequestContext -> String
customQuery :: RequestContext -> [(String, String)]
formInputs :: RequestContext -> [(String, Input)]
consumedDirs :: RequestContext -> [String]
restrictByParentQuery :: RequestContext -> [(String, String)]
query :: RequestContext -> [(String, String)]
moveBackwardDir :: RequestContext -> Maybe (RequestContext, String)
moveForwardDir :: RequestContext -> Maybe (RequestContext, String)
completeDirs :: RequestContext -> [String]
completeURL :: RequestContext -> String
pendingURIPath :: RequestContext -> String
renderQuery :: [(String, String)] -> String
mkRqCtx :: Request -> IO RequestContext
orIfEmpty :: [a] -> [a] -> [a]
hasCookie :: String -> RequestContext -> Bool
postFields :: RequestContext -> [(String, String)]
postFieldFileName :: String -> RequestContext -> Maybe String
postField :: String -> RequestContext -> String
run :: (Show a) => Parser a -> String -> IO ()
showParses :: (Show a) => Parser a -> [String] -> IO ()
addResourceIdToCollAddr :: String -> RequestContext -> RequestContext
addMethodToCollAddr :: String -> RequestContext -> RequestContext
addMethodToResAddr :: String -> RequestContext -> RequestContext
addHierarchicalCollToResAddr :: String -> [(String, String)] -> RequestContext -> RequestContext
setCollectionFromRootAddr :: String -> RequestContext -> RequestContext
upgradeQueriesForHierarchy :: [(String, String)] -> RequestContext -> RequestContext
mapMaybeT :: (m (Maybe a) -> n (Maybe b)) -> MaybeT m a -> MaybeT n b
maybeToMonadPlus :: (MonadPlus m) => Maybe a -> m a
type IORqHandler = RqHandlerT IO
newtype RqHandlerT m a
RqHandlerT :: ReaderT RequestContext (MaybeT m) a -> RqHandlerT m a
unRqHandlerT :: RqHandlerT m a -> ReaderT RequestContext (MaybeT m) a
runRqHandlerT :: RqHandlerT m a -> RequestContext -> m (Maybe a)
mapRqHandlerT :: (m (Maybe a) -> n (Maybe b)) -> RqHandlerT m a -> RqHandlerT n b
notMe :: (Monad m) => RqHandlerT m a
anyOf :: (Monad m) => [RqHandlerT m a] -> RqHandlerT m a
ifReq :: (Monad m) => (RequestContext -> Bool) -> RqHandlerT m a -> RqHandlerT m a -> RqHandlerT m a
underString :: (Monad m) => (String -> RqHandlerT m a) -> RqHandlerT m a
under :: (Monad m) => String -> RqHandlerT m a -> RqHandlerT m a
underInteger :: (Monad m) => (Integer -> RqHandlerT m a) -> RqHandlerT m a
reprocessLastDir :: (Monad m) => RqHandlerT m a -> RqHandlerT m a
underNoDir :: (Monad m) => RqHandlerT m a -> RqHandlerT m a
withDocName :: (Monad m) => String -> RqHandlerT m a -> RqHandlerT m a
withDocNameInteger :: (Monad m) => (Integer -> RqHandlerT m a) -> RqHandlerT m a
withDocNameString :: (Monad m) => (String -> RqHandlerT m a) -> RqHandlerT m a
modReq :: (Monad m) => (RequestContext -> RequestContext) -> RqHandlerT m a -> RqHandlerT m a
modResp :: (Monad m) => (a -> b) -> RqHandlerT m a -> RqHandlerT m b
filterReq :: (Monad m) => (RequestContext -> Bool) -> RqHandlerT m a -> RqHandlerT m a
sat :: (Monad m) => (RequestContext -> a) -> (a -> Bool) -> RqHandlerT m b -> RqHandlerT m b
ifMethod :: (Monad m) => RequestMethod -> RqHandlerT m a -> RqHandlerT m a
formatEq :: (Monad m) => String -> RqHandlerT m a -> RqHandlerT m a
formatHtml :: (Monad m) => RqHandlerT m a -> RqHandlerT m a
ifPost :: (Monad m) => RqHandlerT m a -> RqHandlerT m a
ifGet :: (Monad m) => RqHandlerT m a -> RqHandlerT m a
eq :: (Eq a, Monad m) => (RequestContext -> a) -> a -> RqHandlerT m b -> RqHandlerT m b
failWith :: (Monad m) => RqHandlerT m a -> RqHandlerT m a -> RqHandlerT m a
getResponse :: (Monad m) => RqHandlerT m BasicRsp -> RequestContext -> m Response
respWithStatic :: (MonadIO m) => String -> RqHandlerT m BasicRsp
mapDir :: (MonadIO m) => String -> RqHandlerT m BasicRsp
printString :: String -> IORqHandler ()
printFullReq :: IORqHandler ()
debug :: IORqHandler a -> IORqHandler a
debugStr :: String -> IORqHandler a -> IORqHandler a
printReq :: IORqHandler a -> IORqHandler a
withRequestDo :: (Monad m) => (RequestContext -> m a) -> RqHandlerT m a
withParam :: (Monad m) => (RequestContext -> Maybe a) -> (a -> RqHandlerT m b) -> RqHandlerT m b
maybeReads :: (Read a) => String -> Maybe a
withQueryField :: (Monad m) => String -> (String -> RqHandlerT m a) -> RqHandlerT m a
withQuery :: (Monad m) => ([(String, String)] -> RqHandlerT m a) -> RqHandlerT m a
withPostField :: (Monad m) => String -> (String -> RqHandlerT m a) -> RqHandlerT m a
withPostFields :: (Monad m) => ([(String, String)] -> RqHandlerT m a) -> RqHandlerT m a
withPostFieldFileName :: (Monad m) => String -> (Maybe String -> RqHandlerT m a) -> RqHandlerT m a
showReqHtml :: (Monad m) => RqHandlerT m Html
showReq :: RequestContext -> Html
data HandlerRsp a
HandlerRsp :: [Header] -> Either Non200Response a -> HandlerRsp a
hanRspHeaders :: HandlerRsp a -> [Header]
hanRspBody :: HandlerRsp a -> Either Non200Response a
data Non200Response
RedirectResp :: Non200Response
non200response :: Non200Response -> Response
okHTTPStrResponse :: String -> Response
redirectResponse :: Response
redirectToRsp :: String -> HandlerRsp a
type BasicRsp = HandlerRsp BasicRspBody
data BasicRspBody
FileResp :: Integer -> FilePath -> BasicRspBody
StrResp :: String -> BasicRspBody
basicRspWith :: (a -> String) -> HandlerRsp a -> BasicRsp
fileRsp :: Integer -> FilePath -> BasicRsp
maybeBasicRspToResponse :: Maybe BasicRsp -> Response
notFoundResponse :: Response
basicRspToResponse :: BasicRsp -> Response
basicRspBodyToResponse :: BasicRspBody -> Response
runHttpServer :: PortNumber -> [IORqHandler BasicRsp] -> IO ()
