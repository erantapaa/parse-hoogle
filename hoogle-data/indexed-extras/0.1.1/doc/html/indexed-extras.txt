-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Indexed functors, monads and comonads that require extensions to Haskell98
--   
--   Indexed functors, monads and comonads that require extensiosn to
--   Haskell98
@package indexed-extras
@version 0.1.1


module Control.Monad.Indexed.State
class IxMonad m => IxMonadState m
iget :: IxMonadState m => m i i i
iput :: IxMonadState m => j -> m i j ()
imodify :: IxMonadState m => (i -> j) -> m i j ()
igets :: IxMonadState m => (i -> a) -> m i i a
newtype IxStateT m i j a
IxStateT :: (i -> m (a, j)) -> IxStateT m i j a
runIxStateT :: IxStateT m i j a -> i -> m (a, j)
newtype IxState i j a
IxState :: (i -> (a, j)) -> IxState i j a
runIxState :: IxState i j a -> i -> (a, j)
instance MonadWriter w m => MonadWriter w (IxStateT m i i)
instance MonadError e m => MonadError e (IxStateT m i i)
instance MonadCont m => MonadCont (IxStateT m i i)
instance MonadReader r m => MonadReader r (IxStateT m i i)
instance MonadIO m => MonadIO (IxStateT m i i)
instance IxMonadTrans IxStateT
instance Monad m => MonadState i (IxStateT m i i)
instance Monad m => Applicative (IxStateT m i i)
instance Monad m => Monad (IxStateT m i i)
instance MonadFix m => MonadFix (IxStateT m i i)
instance MonadFix m => IxMonadFix (IxStateT m)
instance MonadPlus m => IxMonadPlus (IxStateT m)
instance MonadPlus m => IxMonadZero (IxStateT m)
instance Monad m => IxMonadState (IxStateT m)
instance Monad m => Bifunctor (IxStateT m i)
instance Monad m => IxMonad (IxStateT m)
instance Monad m => IxApplicative (IxStateT m)
instance Monad m => IxPointed (IxStateT m)
instance Monad m => IxFunctor (IxStateT m)
instance Monad m => Functor (IxStateT m i j)
instance IxMonadFix IxState
instance MonadFix (IxState i i)
instance MonadState i (IxState i i)
instance Applicative (IxState i i)
instance Monad (IxState i i)
instance Bifunctor (IxState i)
instance IxMonadState IxState
instance IxMonad IxState
instance IxApplicative IxState
instance IxPointed IxState
instance IxFunctor IxState
instance Functor (IxState i j)


module Control.Monad.Indexed.Cont
class IxMonad m => IxMonadCont m
reset :: IxMonadCont m => m a o o -> m r r a
shift :: IxMonadCont m => (forall i. (a -> m i i o) -> m r j j) -> m r o a
newtype IxContT m r o a
IxContT :: ((a -> m o) -> m r) -> IxContT m r o a
runIxContT :: IxContT m r o a -> (a -> m o) -> m r
runIxContT_ :: Monad m => IxContT m r a a -> m r
newtype IxCont r o a
IxCont :: (IxContT Identity r o a) -> IxCont r o a
runIxCont :: IxCont r o a -> (a -> o) -> r
runIxCont_ :: IxCont r a a -> r
instance IxFunctor IxCont
instance IxPointed IxCont
instance IxApplicative IxCont
instance IxMonad IxCont
instance IxMonadCont IxCont
instance Monad (IxCont i i)
instance Applicative (IxCont i i)
instance Pointed (IxCont i i)
instance Functor (IxCont i j)
instance MonadIO m => MonadIO (IxContT m i i)
instance MonadState e m => MonadState e (IxContT m i i)
instance MonadReader e m => MonadReader e (IxContT m i i)
instance IxMonadTrans IxContT
instance Monad m => Monad (IxContT m i i)
instance Monad m => Applicative (IxContT m i i)
instance Monad m => Pointed (IxContT m i i)
instance Monad m => Functor (IxContT m i j)
instance Monad m => IxMonadCont (IxContT m)
instance Monad m => IxMonad (IxContT m)
instance Monad m => IxApplicative (IxContT m)
instance IxPointed (IxContT m)
instance IxFunctor (IxContT m)
