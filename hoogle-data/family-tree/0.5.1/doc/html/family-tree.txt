-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A family tree library for the Haskell programming language.
--   
@package family-tree
@version 0.5.1


-- | This module is for Family Trees.
--   
--   It uses lenses for the manipulation of people. For the usage of
--   lenses, see <a>Control.Lens</a>
--   
--   It is reccomended to use <a>Data.Binary</a> to do saving and loading.
module Data.FamilyTree

-- | The basic type for a person. <a>Nothing</a> meaning unknown (or
--   otherwise non-existent, for intance a death date for someone still
--   alive) is a convention used throughout this library.
data Person
Person :: Int -> Maybe Text -> Maybe PartialDate -> Maybe Location -> Maybe PartialDate -> Maybe Location -> HashMap Text Text -> Person
_personId :: Person -> Int
_name :: Person -> Maybe Text
_birthdate :: Person -> Maybe PartialDate
_birthplace :: Person -> Maybe Location
_deathdate :: Person -> Maybe PartialDate
_deathplace :: Person -> Maybe Location
_attributes :: Person -> HashMap Text Text
name :: Lens' Person (Maybe Text)
attributes :: Lens' Person (HashMap Text Text)
birthdate :: Lens' Person (Maybe PartialDate)
birthplace :: Lens' Person (Maybe Location)
deathdate :: Lens' Person (Maybe PartialDate)
deathplace :: Lens' Person (Maybe Location)

-- | The basic type for a family. Which person is head1 and which is head2
--   is arbitrary, but try to use a consistent rule
data Family
Family :: Int -> Maybe Int -> Maybe Int -> Maybe Relationship -> Maybe PartialDate -> Maybe PartialDate -> IntSet -> Family
_familyId :: Family -> Int
_head1 :: Family -> Maybe Int
_head2 :: Family -> Maybe Int
_relationship :: Family -> Maybe Relationship
_relationFrom :: Family -> Maybe PartialDate
_relationTo :: Family -> Maybe PartialDate
_children :: Family -> IntSet
head1 :: Lens' Family (Maybe Int)
head2 :: Lens' Family (Maybe Int)
children :: Lens' Family IntSet
relationFrom :: Lens' Family (Maybe PartialDate)
relationTo :: Lens' Family (Maybe PartialDate)
relationship :: Lens' Family (Maybe Relationship)

-- | The core structure of a family tree.
data FamilyTree
FamilyTree :: Text -> Table Person -> Table Family -> FamilyTree
_treeName :: FamilyTree -> Text
_people :: FamilyTree -> Table Person
_families :: FamilyTree -> Table Family
treeName :: Lens' FamilyTree Text
people :: Lens' FamilyTree (Table Person)
families :: Lens' FamilyTree (Table Family)
type PartialDate = Interval Day

-- | The Location type. Either a coordinate or a placename.
data Location
Coord :: Double -> Double -> Location
PlaceName :: Text -> Location

-- | The Relationship type. Marriage is the default for similarity to
--   GEDCOM.
data Relationship
Marriage :: Relationship
Other :: Text -> Relationship

-- | Creates a new tree with a given name.
newTree :: Text -> FamilyTree

-- | Adds a person with minimal information, returning the updated family
--   tree and the ID of the new person.
addPerson :: FamilyTree -> (Int, FamilyTree)

-- | Adds a family with minimal information, returning the updated family
--   tree and the ID of the new family.
addFamily :: FamilyTree -> (Int, FamilyTree)
class FamilyTreePart part
accessFT :: FamilyTreePart part => Int -> IndexedTraversal' Int FamilyTree part

-- | Deletes a person from the family tree, removing all references to
--   them.
deletePerson :: Int -> FamilyTree -> FamilyTree

-- | Deletes a family from the family tree, removing all references to it.
deleteFamily :: Int -> FamilyTree -> FamilyTree
partialDateFromYear :: Integer -> PartialDate
partialDateFromMonth :: Integer -> Int -> PartialDate
partialDateFromDay :: Integer -> Int -> Int -> PartialDate
instance FamilyTreePart Family
instance FamilyTreePart Person
instance Binary FamilyTree
instance Binary Family
instance Binary Person
instance Hashable Relationship
instance Binary Relationship
instance Hashable Location
instance Binary Location
instance Monoid Family
instance Monoid Person
instance Eq FamilyTree
instance Show FamilyTree
instance Generic FamilyTree
instance Datatype D1FamilyTree
instance Constructor C1_0FamilyTree
instance Selector S1_0_0FamilyTree
instance Selector S1_0_1FamilyTree
instance Selector S1_0_2FamilyTree
instance Tabular Family
instance Eq Family
instance Show Family
instance Generic Family
instance Datatype D1Family
instance Constructor C1_0Family
instance Selector S1_0_0Family
instance Selector S1_0_1Family
instance Selector S1_0_2Family
instance Selector S1_0_3Family
instance Selector S1_0_4Family
instance Selector S1_0_5Family
instance Selector S1_0_6Family
instance Tabular Person
instance Eq Location
instance Show Location
instance Generic Location
instance Eq Relationship
instance Show Relationship
instance Generic Relationship
instance Eq Person
instance Show Person
instance Generic Person
instance Datatype D1Location
instance Constructor C1_0Location
instance Constructor C1_1Location
instance Datatype D1Relationship
instance Constructor C1_0Relationship
instance Constructor C1_1Relationship
instance Datatype D1Person
instance Constructor C1_0Person
instance Selector S1_0_0Person
instance Selector S1_0_1Person
instance Selector S1_0_2Person
instance Selector S1_0_3Person
instance Selector S1_0_4Person
instance Selector S1_0_5Person
instance Selector S1_0_6Person
instance IsString Location
