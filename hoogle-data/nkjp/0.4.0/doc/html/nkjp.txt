-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Manipulating the National Corpus of Polish (NKJP)
--   
--   The library provides parsing and printing utilities for the National
--   Corpus of Polish (NKJP).
@package nkjp
@version 0.4.0


-- | Parsing the NKJP morphosyntax layer.
module Text.NKJP.Morphosyntax

-- | A paragraph.
data Para t
Para :: t -> [Sent t] -> Para t
paraID :: Para t -> t
sentences :: Para t -> [Sent t]

-- | A sentence.
data Sent t
Sent :: t -> [Seg t] -> Sent t
sentID :: Sent t -> t
segments :: Sent t -> [Seg t]

-- | A segment.
data Seg t
Seg :: t -> t -> Bool -> [Lex t] -> (t, t) -> Seg t
segID :: Seg t -> t
orth :: Seg t -> t
nps :: Seg t -> Bool
lexs :: Seg t -> [Lex t]
choice :: Seg t -> (t, t)

-- | A lexciacal entry, potential interpretation of the segment.
data Lex t
Lex :: t -> t -> t -> [(t, t)] -> Lex t
lexID :: Lex t -> t
base :: Lex t -> t
ctag :: Lex t -> t
msds :: Lex t -> [(t, t)]

-- | Parse textual contents of the ann_morphosyntax.xml file.
parseMorph :: Text -> [Para Text]

-- | Parse the stand-alone ann_morphosyntax.xml file.
readMorph :: FilePath -> IO [Para Text]

-- | Parse all ann_morphosyntax.xml files from the NCP .tar.gz file.
readCorpus :: FilePath -> IO [(FilePath, Maybe [Para Text])]
instance Show t => Show (Lex t)
instance Functor Lex
instance Show t => Show (Seg t)
instance Functor Seg
instance Show t => Show (Sent t)
instance Functor Sent
instance Show t => Show (Para t)
instance Functor Para


-- | Parsing the NKJP named entity layer.
module Text.NKJP.Named

-- | A certainty of an annotator.
data Cert
High :: Cert
Medium :: Cert
Low :: Cert

-- | A pointer.
data Ptr t

-- | Of #id form.
Local :: t -> Ptr t
target :: Ptr t -> t

-- | Of loc#id form.
Global :: t -> t -> Ptr t
target :: Ptr t -> t
location :: Ptr t -> t

-- | A derivation structure.
data Deriv t
Deriv :: t -> t -> Deriv t
derivType :: Deriv t -> t
derivFrom :: Deriv t -> t

-- | A paragraph.
data Para t
Para :: t -> [Sent t] -> Para t
paraID :: Para t -> t
sentences :: Para t -> [Sent t]

-- | A sentence.
data Sent t
Sent :: t -> [NE t] -> Sent t
sentID :: Sent t -> t
names :: Sent t -> [NE t]

-- | A segment element in a file.
data NE t
NE :: t -> Maybe (Deriv t) -> t -> Maybe t -> t -> Maybe (Either t t) -> Maybe Cert -> Maybe t -> [Ptr t] -> NE t
neID :: NE t -> t
derived :: NE t -> Maybe (Deriv t)
neType :: NE t -> t
subType :: NE t -> Maybe t
orth :: NE t -> t

-- | Left base or Right when.
base :: NE t -> Maybe (Either t t)
cert :: NE t -> Maybe Cert
certComment :: NE t -> Maybe t
ptrs :: NE t -> [Ptr t]

-- | Parse textual contents of the ann_named.xml file.
parseNamed :: Text -> [Para Text]

-- | Parse the stand-alone ann_named.xml file.
readNamed :: FilePath -> IO [Para Text]

-- | Parse all ann_named.xml files from the NCP .tar.gz file.
readCorpus :: FilePath -> IO [(FilePath, Maybe [Para Text])]

-- | Parse the NCP .tar.gz corpus, extract all NEs and translate them to
--   the tree form using the <a>mkForest</a> function.
readTrees :: FilePath -> IO [Forest (Either (NE Text) (Seg Text))]

-- | Make NE forest from a segment list and a list of NEs, both lists
--   corresponding to the same sentence.
mkForest :: Ord t => [Seg t] -> [NE t] -> Forest (Either (NE t) (Seg t))
instance Show Cert
instance Show t => Show (Ptr t)
instance Functor Ptr
instance Show t => Show (Deriv t)
instance Functor Deriv
instance Show t => Show (NE t)
instance Show t => Show (Sent t)
instance Functor Sent
instance Show t => Show (Para t)
instance Functor Para
instance Functor NE
