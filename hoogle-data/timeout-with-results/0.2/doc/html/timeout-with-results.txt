-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Runs a time-limited computation alowing it to return intermediate results.
--   
--   Evaluates a computation withing a given timeout limit, alowing it to
--   return intermediate results. Useful for AI algorithms that should
--   return the best result within a given wallclock time limit.
@package timeout-with-results
@version 0.2


-- | Defines a writer monad for computations that can be interrupted by a
--   timeout. Written partial results are combined using their monoid
--   operation and if a timeout occurs, the result is returned.
--   
--   Several utility monoids that force their values to <i>weak head normal
--   form</i> or to <i>normal form</i> are provided.
module System.Timeout.Returning.Writer
class (Monoid w, Monad m) => MonadWriter w (m :: * -> *) | m -> w
writer :: MonadWriter w m => (a, w) -> m a
tell :: MonadWriter w m => w -> m ()
listen :: MonadWriter w m => m a -> m (a, w)
pass :: MonadWriter w m => m (a, w -> w) -> m a

-- | Monad for computations that can save partial results of type
--   <tt>w</tt> during their evaluation.
class Monad m => MonadTimeout w m | m -> w where yield = return ()
partialResult :: MonadTimeout w m => w -> m ()
yield :: MonadTimeout w m => m ()

-- | Extends <a>MonadTimeout</a> to <a>MonadWriter</a>. Written values are
--   combined together using <tt>w</tt>'s monoid. In addition, allows to
--   run a sub-computation in a contained environment, without affecting
--   the current partial result.
class (Monoid w, MonadTimeout w m, MonadWriter w m) => MonadTimeoutWriter w m | m -> w where contained k = do { ~(_, zero) <- listen (return ()); pass (listen k >>= \ x -> return (x, const zero)) }
contained :: MonadTimeoutWriter w m => m r -> m (r, w)

-- | An <a>IO</a>-based implementation of <a>MonadTimeoutWriter</a>.
--   Calling <a>partialResult</a> (or equivalently <a>tell</a>) combines
--   the value with any previously written values using <tt>w</tt>'s
--   monoidal operation.
data TimeoutWriter w a

-- | Execute the given computation with a timeout limit. Each time a value
--   is written, the result of <a>mappend</a> with the previous one is
--   evaluated to <i>weak head normal form</i>.
runTimeout :: Monoid w => Int -> TimeoutWriter w r -> IO (Maybe r, w)

-- | Modify written values using the given function.
withTimeoutWriter :: (w' -> w) -> (TimeoutWriter w' a -> TimeoutWriter w a)

-- | A monoid equivalent to <a>Last</a>. In addition, it forces evaluation
--   of values inside <a>Maybe</a> using <a>rseq</a>. This means that when
--   it is used in <a>runTimeout</a>, the computations will be forced in
--   the producing thread, not in the consuming one. If you want to force
--   evaluation to NF, wrap it inside <a>NFMonoid</a>.
newtype Last' a
Last' :: Maybe a -> Last' a
getLast' :: Last' a -> Maybe a

-- | A monoid whose <a>mappend</a> picks the grater value according to the
--   second field of the tuple. <tt>SeqMax Nothing</tt> is the least
--   element of the ordering. If the second fields are the same, the left
--   value is preferred. In addition, the first field of the selected tuple
--   is forced to evaluate using <a>rseq</a>.
newtype SeqMax a b
SeqMax :: (Maybe (a, b)) -> SeqMax a b

-- | A wrapper monoid that forces each result of <a>mappend</a> to
--   <i>normal form</i>'
newtype NFMonoid a
NFMonoid :: a -> NFMonoid a
getNFMonoid :: NFMonoid a -> a

-- | A default implementation of <a>listen</a> using <a>contained</a>.
--   Useful only for authors of implementations of <a>MonadTimeout</a>.
defaultListen :: MonadTimeoutWriter w m => m a -> m (a, w)

-- | A default implementation of <a>pass</a> using <a>contained</a>. Useful
--   only for authors of implementations of <a>MonadTimeout</a>.
defaultPass :: MonadTimeoutWriter w m => m (a, w -> w) -> m a
instance Eq a => Eq (Last' a)
instance Ord a => Ord (Last' a)
instance Show a => Show (Last' a)
instance Read a => Read (Last' a)
instance (Eq a, Eq b) => Eq (SeqMax a b)
instance (Ord a, Ord b) => Ord (SeqMax a b)
instance (Show a, Show b) => Show (SeqMax a b)
instance (Read a, Read b) => Read (SeqMax a b)
instance Eq a => Eq (NFMonoid a)
instance Ord a => Ord (NFMonoid a)
instance Show a => Show (NFMonoid a)
instance Read a => Read (NFMonoid a)
instance Bounded a => Bounded (NFMonoid a)
instance (NFData a, Monoid a) => Monoid (NFMonoid a)
instance Functor NFMonoid
instance Ord b => Monoid (SeqMax a b)
instance (NFData a, NFData b) => NFData (SeqMax a b)
instance Functor (SeqMax a)
instance Monoid (Last' a)
instance NFData a => NFData (Last' a)
instance Functor Last'
instance Monoid w => MonadTimeoutWriter w (TimeoutWriter w)
instance Monoid w => MonadTimeout w (TimeoutWriter w)
instance Monoid w => MonadWriter w (TimeoutWriter w)
instance MonadIO (TimeoutWriter w)
instance Monad (TimeoutWriter w)
instance Applicative (TimeoutWriter w)
instance Functor (TimeoutWriter w)


-- | Defines a simple monad for computations that can be interrupted by a
--   timeout, and save partial results before that.
--   
--   If you need a more powerful mechanism, where you can retrieve and
--   combine previously saved partial results, use module
--   <a>System.Timeout.Returning.Writer</a>.
--   
--   Mind that (from documentation of <a>throwTo</a>): "There is no
--   guarantee that the exception will be delivered promptly, although the
--   runtime will endeavour to ensure that arbitrary delays don't occur. In
--   GHC, an exception can only be raised when a thread reaches a safe
--   point, where a safe point is where memory allocation occurs. Some
--   loops do not perform any memory allocation inside the loop and
--   therefore cannot be interrupted by a <tt>throwTo</tt>."
module System.Timeout.Returning

-- | Monad for computations that can save partial results of type
--   <tt>w</tt> during their evaluation.
class Monad m => MonadTimeout w m | m -> w where yield = return ()
partialResult :: MonadTimeout w m => w -> m ()
yield :: MonadTimeout w m => m ()

-- | An <a>IO</a>-based implementation of <a>MonadTimeout</a>. Calling
--   <a>partialResult</a> replaces any previously written value with the
--   new one.
data Timeout w a

-- | Runs the given simple computation with the given timeout. If the
--   computation returns a value, the value is returned. If it doesn't or
--   times out, the last partial result written by <a>partialResult</a> is
--   returned. Each partial result is converted to <i>normal form</i> prior
--   being saved.
runTimeoutNF :: NFData w => Int -> Timeout w (Maybe w) -> IO (Maybe w)

-- | Runs the given simple computation with the given timeout. If the
--   computation returns a value, the value is returned. If it doesn't or
--   times out, the last partial result written by <a>partialResult</a> is
--   returned. Each partial result is converted to <i>weak head normal
--   form</i> prior being saved.
runTimeoutWHNF :: Int -> Timeout w (Maybe w) -> IO (Maybe w)
instance MonadTimeout w (Timeout w)
instance MonadIO (Timeout w)
instance Monad (Timeout w)
instance Applicative (Timeout w)
instance Functor (Timeout w)
