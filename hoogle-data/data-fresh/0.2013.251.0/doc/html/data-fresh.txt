-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Interface and functor transformers for fresh values
--   
--   A simple library, which contains an interface for generating fresh
--   values.
--   
--   This library also includes two functor transformers which implement
--   this interface. They consume fresh values from user-supplied comonads.
--   Currently, two approaches are implemented:
--   
--   <ul>
--   <li>In <tt>Stream</tt>, the comonad provides a way to succeed a
--   value.</li>
--   <li>In <tt>Delta</tt>, the comonad provides a way to split the value
--   or to succeeded it. The benefit is that the underlying functor doesn't
--   need to be a monad.</li>
--   </ul>
@package data-fresh
@version 0.2013.251.0

module Data.Triplet
data Triplet a
Triplet :: a -> a -> a -> Triplet a
instance Eq a => Eq (Triplet a)
instance Read a => Read (Triplet a)
instance Show a => Show (Triplet a)
instance Traversable Triplet
instance Foldable Triplet
instance Applicative Triplet
instance Functor Triplet

module Data.Fresh
class Fresh v m
fresh :: Fresh v m => m v

module Control.Monad.Trans.Fresh.Stream
newtype FreshT v m a
FreshT :: (Cofree Identity v -> m (a, Cofree Identity v)) -> FreshT v m a
runFreshT :: FreshT v m a -> Cofree Identity v -> m (a, Cofree Identity v)

-- | Creates a <tt>Cofree Identity v</tt>, based on a seed, and a function
--   to split it.
seedStream :: v -> (v -> v) -> Cofree Identity v

-- | A stream of integers.
integerStream :: Integer -> Cofree Identity Integer

-- | Creates a <tt>Cofree Identity v</tt> based on an infinite list.
--   
--   This function will cause an error when the list turns out to be
--   finite.
listStream :: [v] -> Cofree Identity v
instance Applicative m => Fresh v (FreshT v m)
instance MonadTrans (FreshT v)
instance Monad m => Monad (FreshT v m)
instance (Functor m, Monad m) => Applicative (FreshT v m)
instance Functor m => Functor (FreshT v m)

module Control.Monad.Trans.Fresh.Delta
newtype FreshT v m a
FreshT :: (Cofree Triplet v -> m (a, Cofree Triplet v)) -> FreshT v m a
runFreshT :: FreshT v m a -> Cofree Triplet v -> m (a, Cofree Triplet v)

-- | Creates a <tt>Cofree Triplet v</tt>, based on a seed, and functions to
--   split and succeed it.
seedDelta :: v -> (v -> v) -> (v -> (v, v)) -> Cofree Triplet v

-- | A delta of integer pairs.
integerPairDelta :: (Integer, Integer) -> Cofree Triplet (Integer, Integer)
instance Applicative m => Fresh v (FreshT v m)
instance MonadTrans (FreshT v)
instance Monad m => Monad (FreshT v m)
instance Applicative m => Applicative (FreshT v m)
instance Functor m => Functor (FreshT v m)
