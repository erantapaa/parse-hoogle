-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Multithread interactive input/search framework for Manatee
--   
--   manatee-anything is interactive plugin for Manatee (Haskell/Gtk+
--   Integrated Live Environment)
@package manatee-anything
@version 0.0.2

module Manatee.Plugin.Anything.TitleWidget
data TitleWidget
TitleWidget :: HBox -> Label -> Spinner -> TitleWidget
titleWidgetBox :: TitleWidget -> HBox
titleWidgetLabel :: TitleWidget -> Label
titleWidgetSpinner :: TitleWidget -> Spinner

-- | Title color.
titleColor :: Color

-- | Number color.
numberColor :: Color

-- | Spinner space.
spinnerSpace :: Int

-- | Create candidate title.
titleWidgetNew :: Maybe String -> IO TitleWidget

-- | Set title.
titleWidgetSetTitle :: TitleWidget -> String -> Int -> IO ()

-- | Start spinner animation.
titleWidgetStart :: TitleWidget -> IO ()

-- | Stop spinner animation.
titleWidgetStop :: TitleWidget -> IO ()

module Manatee.Plugin.Anything.AnythingInteractive

-- | Return interactive result.
anythingInteractiveActionReturn :: AnythingInteractiveType -> FilePath -> Client -> IO ()

module Manatee.Plugin.Anything.Types

-- | Anything
type AnythingName = String
type AnythingInput = String
type AnythingCompletion = String
type AnythingList = Map AnythingName Anything
type AnythingFilterRule = AnythingInput -> String -> Bool
type AnythingCompletionRule = AnythingInput -> AnythingCompletion
type AnythingColumnTitle = String
type AnythingColumnFun = AnythingCandidateWrap -> String
type AnythingCommandName = String
type AnythingAction = Client -> IO ()
type AnythingCommandFun = AnythingInput -> AnythingCandidateWrap -> AnythingInteractiveType -> IO [(AnythingCommandName, AnythingAction)]
type AnythingSearchCache = Map String (Either (MVar [AnythingCandidateWrap], ThreadId, ThreadId) HandlerId)
data FocusNode
FocusFirstNode :: FocusNode
FocusLastNode :: FocusNode
class (Typeable a) => AnythingCandidate a
candidateCommandName :: (AnythingCandidate a) => a -> String
candidateFilterName :: (AnythingCandidate a) => a -> String
candidateCompletionName :: (AnythingCandidate a) => a -> AnythingInput -> String
candidateExpandName :: (AnythingCandidate a) => a -> String -> IO String
data AnythingCandidateWrap
AnythingCandidateWrap :: candidate -> AnythingCandidateWrap
acwCandidate :: AnythingCandidateWrap -> candidate
data AnythingSearch
AnythingSearch :: (AnythingInput -> Client -> IO [candidate]) -> AnythingSearch
anythingSearchFun :: AnythingSearch -> AnythingInput -> Client -> IO [candidate]
data Anything
Anything :: [AnythingColumnTitle] -> [AnythingColumnFun] -> AnythingSearch -> AnythingFilterRule -> AnythingCompletionRule -> Bool -> AnythingCommandFun -> Int -> Anything
anythingColumnTitle :: Anything -> [AnythingColumnTitle]
anythingColumnFun :: Anything -> [AnythingColumnFun]
anythingSearch :: Anything -> AnythingSearch
anythingFilterRule :: Anything -> AnythingFilterRule
anythingCompletionRule :: Anything -> AnythingCompletionRule
anythingInputDepend :: Anything -> Bool
anythingCommandFun :: Anything -> AnythingCommandFun
anythingCalculateDelay :: Anything -> Int

-- | AnythingView
data AnythingView
AnythingView :: Notebook -> VBox -> ScrolledWindow -> TVar AnythingCandidateTab -> AnythingCommandTab -> TVar Int -> TVar AnythingInteractiveType -> AnythingView
avNotebook :: AnythingView -> Notebook
avCandidateBox :: AnythingView -> VBox
avCandidateScrolledWindow :: AnythingView -> ScrolledWindow
avCandidateTab :: AnythingView -> TVar AnythingCandidateTab
avCommandTab :: AnythingView -> AnythingCommandTab
avCurrentCandidateIndex :: AnythingView -> TVar Int
avInteractiveType :: AnythingView -> TVar AnythingInteractiveType
data AnythingCandidateView
AnythingCandidateView :: TreeView -> ScrolledWindow -> AnythingCandidateStore -> TitleWidget -> AnythingCandidateView
acavTreeView :: AnythingCandidateView -> TreeView
acavScrolledWindow :: AnythingCandidateView -> ScrolledWindow
acavListStore :: AnythingCandidateView -> AnythingCandidateStore
acavTitleWidget :: AnythingCandidateView -> TitleWidget
data AnythingCommandView
AnythingCommandView :: TreeView -> AnythingCommandStore -> AnythingCommandView
acovTreeView :: AnythingCommandView -> TreeView
acovListStore :: AnythingCommandView -> AnythingCommandStore
type AnythingCandidateStore = ListStore AnythingCandidateWrap
type AnythingCommandStore = ListStore String
type AnythingCandidateTab = Map Int ((AnythingName, Int), AnythingCandidateView)
type AnythingCommandTab = AnythingCommandView

-- | AnythingViewAction
data AnythingViewEnvironment
AnythingViewEnvironment :: AnythingView -> Client -> TVar AnythingSearchCache -> AnythingViewInput -> Int -> AnythingViewEnvironment
aeView :: AnythingViewEnvironment -> AnythingView
aeClient :: AnythingViewEnvironment -> Client
aeCache :: AnythingViewEnvironment -> TVar AnythingSearchCache
aeInput :: AnythingViewEnvironment -> AnythingViewInput
aeKeyPressId :: AnythingViewEnvironment -> Int
data AnythingViewInput
AnythingViewInput :: String -> String -> AnythingViewInput
aviAllText :: AnythingViewInput -> String
aviUnselectText :: AnythingViewInput -> String
class AnythingViewActionArgs a
anythingViewExecute :: (AnythingViewActionArgs a) => AnythingViewEnvironment -> IO a
data AnythingViewAction
AnythingViewAction :: (a -> IO ()) -> AnythingViewAction
anythingViewActionFun :: AnythingViewAction -> a -> IO ()
type AnythingViewKeymap = Map Text AnythingViewAction
instance Show FocusNode
instance Ord FocusNode
instance Eq FocusNode
instance AnythingViewActionArgs Int
instance AnythingViewActionArgs AnythingViewInput
instance AnythingViewActionArgs (TVar AnythingSearchCache)
instance AnythingViewActionArgs Client
instance AnythingViewActionArgs AnythingView
instance (AnythingViewActionArgs a, AnythingViewActionArgs b) => AnythingViewActionArgs (a, b)
instance AnythingCandidate String

module Manatee.Plugin.Anything.Anything

-- | Pick up anything name.
anythingName :: Anything -> AnythingName

-- | Unpack anything candidate.
anythingCandidateUnpack :: (Typeable a) => AnythingCandidateWrap -> a

-- | Default fuzzy filter rule.
anythingFuzzyFilterRule :: Bool -> AnythingInput -> String -> Bool

-- | Search in different place. :)
anythingSearchCommands :: String -> [(AnythingCommandName, AnythingAction)]

-- | Open uri.
anythingOpenUri :: String -> Client -> IO ()

-- | Concat keywords by <a>+</a>.
concatKeywords :: String -> String

module Manatee.Plugin.Anything.AnythingApplication
data ApplicationInfo
ApplicationInfo :: String -> String -> String -> ApplicationInfo
applicationInfoName :: ApplicationInfo -> String
applicationInfoDescription :: ApplicationInfo -> String
applicationInfoCommand :: ApplicationInfo -> String

-- | Search and run register application from system.
anythingApplication :: Anything

-- | Search candidate.
anythingApplicationSearch :: AnythingInput -> Client -> IO [ApplicationInfo]

-- | Function for generate candidate column.
anythingApplicationColumnFun :: [AnythingColumnFun]

-- | Function for generate command list.
anythingApplicationCommandFun :: AnythingCommandFun

-- | Startup application.
anythingApplicationActionStartup :: String -> Client -> IO ()

-- | Run command in terminal.
anythingApplicationActionRunInTerminal :: String -> Client -> IO ()

-- | Because appInfoGetCommandline will append `%u` or `%U` after command
--   line. This only work if gio compiled with FUSE support.
anythingApplicationFilterCommandName :: String -> String
instance Typeable ApplicationInfo
instance AnythingCandidate ApplicationInfo

module Manatee.Plugin.Anything.AnythingBrowser

-- | Search uri.
anythingBrowser :: Anything

-- | Search uri.
anythingBrowserSearch :: AnythingInput -> Client -> IO [String]

-- | Browser uri.
anythingBrowserCommandFun :: AnythingCommandFun

module Manatee.Plugin.Anything.AnythingBrowseHistory
data BrowseHistory
BrowseHistory :: String -> String -> BrowseHistory
browseHistoryUrl :: BrowseHistory -> String
browseHistoryTitle :: BrowseHistory -> String

-- | Search browse history.
anythingBrowseHistory :: Anything

-- | Search browse history.
anythingBrowseHistorySearch :: AnythingInput -> Client -> IO [BrowseHistory]

-- | Function for generate candidate column.
anythingBrowseHistoryColumnFun :: [AnythingColumnFun]

-- | Open url.
anythingBrowseHistoryCommandFun :: AnythingCommandFun

-- | Remove url from history.
anythingBrowseHistoryRemove :: String -> Client -> IO ()

-- | Clean history.
anythingBrowseHistoryClean :: Client -> IO ()
instance Typeable BrowseHistory
instance Show BrowseHistory
instance Read BrowseHistory
instance Eq BrowseHistory
instance Ord BrowseHistory
instance AnythingCandidate BrowseHistory

module Manatee.Plugin.Anything.AnythingBuffer

-- | Search all buffer files.
anythingBuffer :: Anything

-- | Search all buffers.
anythingBufferSearch :: AnythingInput -> Client -> IO [BufferInfo]

-- | Function for generate candidate column.
anythingBufferColumnFun :: [AnythingColumnFun]

-- | Function for generate command list.
anythingBufferCommandFun :: AnythingCommandFun

-- | Swtich buffer.
anythingBufferSwitchBuffer :: PageModeName -> PageId -> Client -> IO ()
instance AnythingCandidate BufferInfo

module Manatee.Plugin.Anything.AnythingBufferHistory

-- | Search buffer history.
anythingBufferHistory :: Anything

-- | Search all buffers.
anythingBufferHistorySearch :: AnythingInput -> Client -> IO [BufferHistory]

-- | Function for generate candidate column.
anythingBufferHistoryColumnFun :: [AnythingColumnFun]

-- | Function for generate command list.
anythingBufferHistoryCommandFun :: AnythingCommandFun

-- | Open buffer.
anythingBufferHistoryOpenBuffer :: PageType -> String -> Client -> IO ()
instance AnythingCandidate BufferHistory

module Manatee.Plugin.Anything.AnythingExecuteFile

-- | Search all execute files that can find in PATH.
anythingExecuteFile :: Anything

-- | Search all execute files.
anythingExecuteFileSearch :: AnythingInput -> Client -> IO [String]

-- | Function for generate command list.
anythingExecuteFileCommandFun :: AnythingCommandFun

-- | Run command.
anythingExecuteFileActionExecute :: String -> Client -> IO ()

-- | Run command in terminal.
anythingExecuteFileActionRunInTerminal :: String -> Client -> IO ()

module Manatee.Plugin.Anything.AnythingGoogleSuggest
data Suggestion
Suggestion :: String -> Int -> Suggestion
suggestionName :: Suggestion -> String
suggestionNumber :: Suggestion -> Int

-- | Search all execute files that can find in PATH.
anythingGoogleSuggest :: Anything

-- | Search all execute files.
anythingGoogleSuggestSearch :: AnythingInput -> Client -> IO [Suggestion]

-- | Function to generate candidate column.
anythingGoogleSuggestColumnFun :: [AnythingColumnFun]

-- | Function for generate command list.
anythingGoogleSuggestCommandFun :: AnythingCommandFun
instance Typeable Suggestion
instance Show Suggestion
instance Ord Suggestion
instance Eq Suggestion
instance AnythingCandidate Suggestion

module Manatee.Plugin.Anything.AnythingInteractiveChar

-- | Search interactive character.
anythingInteractiveChar :: Anything

-- | Search function for char.
anythingInteractiveCharSearch :: AnythingInput -> Client -> IO [String]

-- | Function to generate command list.
anythingInteractiveCharCommandFun :: AnythingCommandFun

module Manatee.Plugin.Anything.AnythingLocate
data FileInfo
FileInfo :: ByteString -> String -> String -> FileType -> String -> FileInfo
fileInfoPath :: FileInfo -> ByteString
fileInfoDisplayName :: FileInfo -> String
fileInfoContentType :: FileInfo -> String
fileInfoFileType :: FileInfo -> FileType
fileInfoSize :: FileInfo -> String

-- | Search local files.
anythingLocate :: Anything

-- | Search local files.
anythingLocateSearch :: Bool -> AnythingInput -> Client -> IO [FileInfo]

-- | Get FileInfo.
anythingLocateGetFileInfos :: ByteString -> Bool -> IO [FileInfo]

-- | Rule for filter file name.
anythingLocateFilterRule :: AnythingInput -> String -> Bool

-- | Function for generate candidate column.
anythingLocateColumnFun :: [AnythingColumnFun]

-- | Function to generate command list.
anythingLocateCommandFun :: AnythingCommandFun

-- | Open file.
anythingLocateActionOpenFile :: FilePath -> Client -> IO ()

-- | Open directory.
anythingLocateActionOpenDirectory :: FilePath -> Client -> IO ()

-- | Play directory.
anythingLocateActionPlayDirectory :: FilePath -> Client -> IO ()
instance Typeable FileInfo
instance AnythingCandidate FileInfo

module Manatee.Plugin.Anything.AnythingInteractiveDirectory

-- | Search local files.
anythingInteractiveDirectory :: Anything

-- | Function to generate command list.
anythingInteractiveDirectoryCommandFun :: AnythingCommandFun

module Manatee.Plugin.Anything.AnythingInteractiveFile

-- | Search local files.
anythingInteractiveFile :: Anything

-- | Function to generate command list.
anythingInteractiveFileCommandFun :: AnythingCommandFun

module Manatee.Plugin.Anything.AnythingInteractiveNumber

-- | Search interactive number.
anythingInteractiveNumber :: Anything

-- | Search function for number.
anythingInteractiveNumberSearch :: AnythingInput -> Client -> IO [String]

-- | Function to generate command list.
anythingInteractiveNumberCommandFun :: AnythingCommandFun

module Manatee.Plugin.Anything.AnythingInteractiveString

-- | Search interactive string.
anythingInteractiveString :: Anything

-- | Search function for string.
anythingInteractiveStringSearch :: AnythingInput -> Client -> IO [String]

-- | Function to generate command list.
anythingInteractiveStringCommandFun :: AnythingCommandFun

module Manatee.Plugin.Anything.AnythingIrc

-- | Search uri.
anythingIrc :: Anything

-- | Search uri.
anythingIrcSearch :: AnythingInput -> Client -> IO [String]

-- | Irc uri.
anythingIrcCommandFun :: AnythingCommandFun

-- | Open uri.
anythingIrcJoinChannel :: String -> Client -> IO ()

module Manatee.Plugin.Anything.AnythingProcess

-- | Search all running processes.
anythingProcess :: Anything

-- | Search all running processes.
anythingProcessSearch :: AnythingInput -> Client -> IO [ProcStatus]

-- | Function to generate candidate column.
anythingProcessColumnFun :: [AnythingColumnFun]

-- | Function to generate command list.
anythingProcessCommandFun :: AnythingCommandFun

-- | Kill process.
anythingProcessActionKill :: String -> Client -> IO ()
instance AnythingCandidate ProcStatus

module Manatee.Plugin.Anything.AnythingList

-- | Anything list.
anythingList :: AnythingList

module Manatee.Plugin.Anything.AnythingView

-- | The max limit of rows in candidate view.
anythingCandidateViewLimit :: Int

-- | Default cell height, use when cell height from tree view is invalid.
anythingViewDefaultCellHeight :: Int

-- | Candidate tab index in notebook.
anythingCandidateTabIndex :: Int

-- | Command tab index in notebook.
anythingCommandTabIndex :: Int

-- | Create new anything view.
anythingViewNew :: AnythingInteractiveType -> [String] -> IO AnythingView

-- | Create new candidate tab.
anythingCandidateTabNew :: [String] -> IO AnythingCandidateTab

-- | Create anything sub-view.
anythingViewCandidateTabNew :: [(AnythingColumnTitle, AnythingColumnFun)] -> IO (TreeView, ScrolledWindow, AnythingCandidateStore, TitleWidget)

-- | Create anything sub-view.
anythingViewCommandTabNew :: String -> IO (TreeView, AnythingCommandStore, ScrolledWindow)

-- | Add candidates to view.
anythingViewSetCandidates :: AnythingView -> Client -> AnythingName -> [AnythingCandidateWrap] -> AnythingInput -> AnythingCompletionRule -> AnythingKeyPressId -> IO ()

-- | Focus next candidate view.
anythingViewFocusNextCandidateView :: AnythingView -> IO ()

-- | Focus prev candidate view.
anythingViewFocusPrevCandidateView :: AnythingView -> IO ()

-- | Scroll candidate view to top.
anythingViewScrollCandidateViewToTop :: AnythingView -> IO ()

-- | Focus default candidate.
anythingViewFocusFirstCandidate :: AnythingView -> Bool -> IO ()

-- | Focus default candidate.
anythingViewFocusLastCandidate :: AnythingView -> FocusNode -> Bool -> IO ()

-- | Focus next candidate, focus next candidate view. Move first candidate
--   view and first candidate if reach last candidate in all candidate
--   view.
anythingViewFocusNextCandidate :: AnythingView -> IO ()

-- | Focus prev candidate, focus prev candidate view. Move last candidate
--   view and last candidate if reach first candidate in all candidate
--   view.
anythingViewFocusPrevCandidate :: AnythingView -> IO ()

-- | Scroll selection candidate to screen visible area.
anythingViewScrollSelectionCandidateToScreen :: AnythingView -> IO ()

-- | Next candidate view.
anythingViewGetNextCandidateView :: AnythingView -> IO (Maybe (Int, AnythingCandidateView))

-- | Prev candidate view.
anythingViewGetPrevCandidateView :: AnythingView -> IO (Maybe (Int, AnythingCandidateView))

-- | Get completion.
anythingViewGetCompletion :: AnythingInput -> [String] -> AnythingCompletionRule -> AnythingCompletion

-- | Add commands to view.
anythingViewSetCommands :: AnythingView -> [String] -> IO ()

-- | Focus next command.
anythingViewFocusNextCommand :: AnythingView -> IO ()

-- | Focus prev command.
anythingViewFocusPrevCommand :: AnythingView -> IO ()

-- | Show candidates.
anythingViewShowCandidateTab :: AnythingView -> IO ()

-- | Show commands.
anythingViewShowCommandTab :: AnythingView -> IO ()

-- | Is candidates tab.
anythingViewIsFocusCandidateTab :: AnythingView -> IO Bool

-- | Is commands tab.
anythingViewIsFocusCommandTab :: AnythingView -> IO Bool

-- | Find AnythingCandidateView from given index.
anythingViewFindCandidateView :: AnythingView -> Int -> IO (Maybe AnythingCandidateView)

-- | Find current anything name.
anythingViewFindCurrentAnythingName :: AnythingView -> IO (Maybe AnythingName)

-- | Find AnythingCandidateView from given index.
anythingViewFindCurrentCandidateView :: AnythingView -> IO (Maybe AnythingCandidateView)

-- | Get selected candidate.
anythingViewGetSelectedCandidate :: AnythingView -> IO (Maybe AnythingCandidateWrap)

-- | Focus candidate and update current candidate index.
anythingViewFocusCandidate :: (TreeViewClass view) => AnythingView -> view -> (view -> IO ()) -> Int -> IO ()

-- | Expand first entry.
anythingViewExpandSelectedCandidate :: (Int, (TVar AnythingSearchCache, (AnythingViewInput, (AnythingView, Client)))) -> IO ()

-- | Toggle tab.
anythingViewToggleTab :: (AnythingView, AnythingViewInput) -> IO ()

-- | Run command.
anythingViewRunCommand :: Bool -> (AnythingView, (Client, AnythingViewInput)) -> IO ()

-- | Run first command for current candidate.
anythingViewRunFirstCommand :: (AnythingView, (Client, AnythingViewInput)) -> IO ()

-- | Run selected command for current candidate.
anythingViewRunSelectedCommand :: (AnythingView, (Client, AnythingViewInput)) -> IO ()

-- | Get match candidate for current input.
anythingViewGetMatches :: AnythingName -> AnythingInput -> Client -> AnythingSearch -> AnythingFilterRule -> IO [AnythingCandidateWrap]

-- | Output completion candidates on TreeView. And return highlight
--   completion string for input.
anythingViewCompletion :: Client -> TVar AnythingSearchCache -> AnythingView -> FilePath -> AnythingKeyPressId -> IO ()

-- | Get box height, remove blank space in last candidate view.
anythingViewGetBoxHeight :: AnythingView -> IO (Maybe Int)

-- | Whether has candidates?
anythingViewHasCandidates :: AnythingView -> IO Bool

-- | Get view height.
anythingViewGetCandidatesHeight :: (TreeViewClass treeView) => treeView -> IO Int

-- | Get cell height.
anythingViewGetCellHeight :: (TreeViewClass treeView) => treeView -> IO Int

module Manatee.Plugin.Anything.Main

-- | Anything main.
anythingMain :: AnythingInteractiveType -> [String] -> IO ()

-- | Build anything match rule for listen dbus signal.
mkAnythingClient :: Client -> AnythingView -> IO ()

-- | Handle change interactive type.
anythingViewHandleChangeInteractiveType :: AnythingView -> RenderSignalArgs -> IO ()

-- | Handle change interactive candidate.
anythingViewHandleChangeCandidate :: AnythingView -> RenderSignalArgs -> IO ()

-- | Handle key press event.
anythingViewHandleKeyPress :: Client -> AnythingView -> TVar AnythingSearchCache -> RenderSignalArgs -> IO ()

-- | Run action.
anythingViewRunAction :: AnythingViewEnvironment -> AnythingViewAction -> IO ()

-- | Keymap for anything candidate view.
anythingCandidateViewKeymap :: AnythingViewKeymap

-- | Keymap for anything command view.
anythingCommandViewKeymap :: AnythingViewKeymap

-- | Sugar to connect Key and Action.
(<=>) :: (AnythingViewActionArgs a) => Text -> (a -> IO ()) -> (Text, AnythingViewAction)
