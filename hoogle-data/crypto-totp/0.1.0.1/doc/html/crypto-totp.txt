-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Provides generation and verification services for time-based one-time keys.
--   
--   Generate and verify one-time keys.
--   
--   Please see <a>http://tools.ietf.org/html/rfc6238</a>.
--   
--   Changes:
--   
--   <ol>
--   <li>1.0.1: Hopefully works with 32-bit integer CTime.</li>
--   </ol>
@package crypto-totp
@version 0.1.0.1

module Crypto.MAC.TOTP.Factory
data Factory
Factory :: ByteString -> ByteString -> Int64 -> CTime -> EpochTime -> (ByteString -> ByteString) -> Int -> (ByteString -> ByteString) -> Factory
secret :: Factory -> ByteString
secretInit :: Factory -> ByteString
count :: Factory -> Int64
validSeconds :: Factory -> CTime
refreshEpoch :: Factory -> EpochTime
hashMethod :: Factory -> ByteString -> ByteString
blockSize :: Factory -> Int
prefix :: Factory -> ByteString -> ByteString
initialize :: (ByteString -> ByteString) -> Int -> Int -> ByteString -> CTime -> Factory
initializeIO :: (ByteString -> ByteString) -> Int -> Int -> ByteString -> CTime -> IO (Factory)
initGrace :: Factory -> CTime -> Factory
epochEq :: Factory -> CTime -> Factory -> Bool
authenticate :: Serialize b => Factory -> b -> ByteString
authenticateBS :: Factory -> (b -> ByteString) -> b -> ByteString
roundTime :: CTime -> CTime -> CTime
setTime :: CTime -> Factory -> Factory
validUntil :: Factory -> EpochTime
shouldRefresh :: Factory -> EpochTime -> Bool
refresh :: EpochTime -> Factory -> Factory
refreshIO :: Factory -> IO (Factory)
tryRefreshEvery :: Int -> IORef (Factory) -> IO ()
startRefreshThread :: Int -> Factory -> IO (ThreadId, IORef (Factory))
getNext :: Factory -> (Factory, ByteString)
getMessages :: Int -> Factory -> (Factory, [ByteString])
getNextIO :: IORef (Factory) -> IO (ByteString)
getMessagesIO :: IORef (Factory) -> Int -> IO [ByteString]
instance Integral CTime

module Crypto.MAC.TOTP.Verifier
data Verifier
Verifier :: Factory -> Set ByteString -> [GraceVerifier] -> CTime -> Verifier
factory :: Verifier -> Factory
usedTokens :: Verifier -> Set ByteString
grace :: Verifier -> [GraceVerifier]
graceSeconds :: Verifier -> CTime
initializeIO :: (ByteString -> ByteString) -> Int -> Int -> ByteString -> CTime -> CTime -> IO Verifier
initialize :: EpochTime -> (ByteString -> ByteString) -> Int -> Int -> ByteString -> CTime -> CTime -> Verifier
tryRefreshEvery :: Verifier -> Int -> IORef Verifier -> IO ()
startRefreshThread :: Int -> Verifier -> IO (ThreadId, IORef Verifier)
refresh :: EpochTime -> Verifier -> Verifier
getNext :: Verifier -> (Verifier, ByteString)
getMessages :: Int -> Verifier -> (Verifier, [ByteString])
getNextIO :: IORef Verifier -> IO ByteString
getMessagesIO :: Int -> IORef Verifier -> IO [ByteString]
isAuthentic :: EpochTime -> ByteString -> ByteString -> Verifier -> (Verifier, Bool)
isAuthenticIO :: ByteString -> ByteString -> IORef Verifier -> IO Bool
