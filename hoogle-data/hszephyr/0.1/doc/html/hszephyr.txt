-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple libzephyr bindings
--   
--   Network.Zephyr provides haskell bindings to MIT's <a>Zephyr</a>
--   instant messaging / notification service.
@package hszephyr
@version 0.1


-- | Simple bindings to libzephyr.
--   
--   All functions in this module properly serialize access to the C
--   libzephyr and behave correctly with regard to <a>forkIO</a>, so this
--   module should behave properly in threaded Haskell program.
--   
--   At present, however, we only support maintaining a single, global, set
--   of Zephyr subscriptions. This may be extended to support multiple
--   clients within the same Haskell program.
module Network.Zephyr

-- | Initialize libzephyr.
initialize :: IO ()

-- | Return the name of the current Zephyr sender.
getSender :: IO String

-- | Return the realm of the current host.
getRealm :: IO String

-- | Send a <a>ZNotice</a>.
sendNotice :: ZNotice -> IO ()

-- | Receive a <a>ZNotice</a> from the zephyr servers. Blocks until a
--   notice is available.
receiveNotice :: IO ZNotice

-- | Checks for new incoming packets and then returns the number of pending
--   messages in the queue.
pendingNotices :: IO Int

-- | Try to receive a ZNotice, returning <a>Nothing</a> if no notice is
--   available.
tryReceiveNotice :: IO (Maybe ZNotice)

-- | Cancel all zephyr subscriptions.
cancelSubscriptions :: IO ()

-- | Subscribe to one or more Zephyr triples.
subscribeTo :: [ZSubscription] -> IO ()

-- | Unsubscribe from one or more Zephyr triples.
unsubscribeTo :: [ZSubscription] -> IO ()

-- | Holds the default display format used by outgoing Zephyrs by
--   <tt>zwrite</tt>.
defaultFmt :: ByteString

-- | A default <a>ZNotice</a> suitable for use as a template when creating
--   a new notice for sending via <a>sendNotice</a>.
emptyNotice :: ZNotice

-- | <a>ZNotice</a> represents a Zephyr notice. All fields of this record
--   are filled-in for received notices. For outoing notices, only the
--   following fields are relevant:
--   
--   <ul>
--   <li><pre>z_class</pre></li>
--   <li><pre>z_instance</pre></li>
--   <li><pre>z_opcode</pre></li>
--   <li><pre>z_sender</pre></li>
--   <li><pre>z_default_fmt</pre></li>
--   <li><pre>z_kind</pre></li>
--   <li><pre>z_auth</pre></li>
--   <li><pre>z_fields</pre></li>
--   </ul>
data ZNotice
ZNotice :: ByteString -> ByteString -> ByteString -> ByteString -> ByteString -> Maybe ByteString -> ByteString -> ZNoticeKind -> ZAuth -> [ByteString] -> UTCTime -> ZNotice

-- | The Zephyr version this notice was sent with.
z_version :: ZNotice -> ByteString

-- | The Zephyr class of this notice.
z_class :: ZNotice -> ByteString

-- | The Zephyr instance of this notice.
z_instance :: ZNotice -> ByteString

-- | The recipient of this notice.
z_recipient :: ZNotice -> ByteString

-- | The opcode of this notice.
z_opcode :: ZNotice -> ByteString

-- | The sender of this Notice. This field is always a <a>Just</a> for
--   received notices. Setting it to <a>Nothing</a> for sent notices will
--   cause it to automatically be filled in.
z_sender :: ZNotice -> Maybe ByteString

-- | The default format clients should use to render this notice.
z_default_fmt :: ZNotice -> ByteString

-- | The kind of this notice (determines how it will be ACK'd).
z_kind :: ZNotice -> ZNoticeKind

-- | Whether this notice is authenticated.
z_auth :: ZNotice -> ZAuth

-- | A list of the fields in this notice.
z_fields :: ZNotice -> [ByteString]

-- | The time this notice was sent.
z_time :: ZNotice -> UTCTime

-- | <a>ZNoticeKind</a> represent the kinds of <a>ZNotice</a>s sent or
--   received by the Zephyr system.
newtype ZNoticeKind
ZNoticeKind :: CInt -> ZNoticeKind
unZNoticeKind :: ZNoticeKind -> CInt
data ZAuth

-- | The message was received with correct authentication, or should be
--   authenticated for outgoing notices.
Authenticated :: ZAuth

-- | The message was or will be sent with no authentication.
Unauthenticated :: ZAuth

-- | The message was received with invalid authentication.
AuthenticationFailed :: ZAuth

-- | Represents a Zephyr triple for the purposes of subscribing or
--   unsubscribing to zephyrs.
data ZSubscription
ZSubscription :: ByteString -> ByteString -> ByteString -> ZSubscription
sub_class :: ZSubscription -> ByteString
sub_instance :: ZSubscription -> ByteString
sub_recipient :: ZSubscription -> ByteString
kind_unsafe :: ZNoticeKind
kind_unacked :: ZNoticeKind
kind_acked :: ZNoticeKind
kind_hmack :: ZNoticeKind
kind_hmctl :: ZNoticeKind
kind_servack :: ZNoticeKind
kind_servnak :: ZNoticeKind

-- | <a>ZAuth</a> represents the authentication used when sending or
--   receiving a Zephyr.
kind_clientack :: ZNoticeKind
kind_stat :: ZNoticeKind
