-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Stepwise monad: stepwise computations, providing resolution of
--   non-deterministic choice, breadth-first search strategies and online
--   results.
@package stepwise
@version 1.0.2

module Control.Monad.Stepwise.Unsafe

-- | Runs the I/O computation when the value is needed. The effects may be
--   duplicated when the value itself is duplicated
inlinePerformIO :: IO a -> a
unsafeCoerce :: a -> b
ghc7compat :: a -> b

module Control.Monad.Stepwise.Proofs

module Control.Monad.Stepwise.Core

-- | A step-wise computation with errors <tt>e</tt>, progress reports
--   <tt>i</tt>, parametrized by watcher <tt>w</tt>, and evaluating to a
--   value of type <tt>a</tt>.
--   
--   Progress reports <tt>i</tt> are indexed by the watcher type
--   <tt>w</tt>. To compose step-wise computations, they must agree on the
--   same type <tt>i</tt>. However, specific caller/callee combinations can
--   agree on a type <tt>w</tt> to report progress reports that contain
--   e.g. values computing during the evaluation process.
--   
--   A stepwise computation may fail with an error of type <tt>e</tt>.
--   Failure is conceptually just another form of progress reports:
--   however, after a failure, there will not be any subsequent progress
--   reports. This distinction allows us to capture the behavior of the
--   <a>fail</a> function in the <a>Monad</a> class. For non-critical
--   failures, use conventional progress reports. If the information about
--   the failure is not an issue, use either <tt>AnyFailure</tt> or
--   <tt>String</tt> as the type for <tt>e</tt>.
--   
--   A stepwise computation specifies its operational context via the type
--   index <tt>o</tt>. There are two operational modes: either the
--   computation requires to be executed sequentially, then it has
--   <a>Sequential</a> as type index, or it may be executed lazily, then it
--   has <a>Lazy</a> as type index. Some operations on stepwise
--   computations may require evaluation to be sequential. There is no way
--   (neither need) to enforce lazy evaluation.
--   
--   A <a>Stepwise</a>-value represents a partially evaluated step-wise
--   computation. It is essentially a sequence of <a>Info</a> progress
--   reports, closed by either failure, success, or the remaining
--   computation.
--   
--   The <a>Pending</a> constructor specifies the computation that is
--   'left-most'. Strict evaluation starts with this computation first. It
--   also specifies the stack of binds that immediately follow the
--   left-most computation. Since the computation to evaluate first is
--   always on top of this structure, we do not have to inspect the stack
--   for each reduction step.
--   
--   The <a>Ahead</a> constructor represents a suspended computation that
--   needs a continuation, such that it can give the reports for the final
--   result. Note that the function of <a>Ahead</a> takes a continuation
--   that cannot make any assumption about how it is executed (hence the
--   universal <tt>o'</tt>). If it needs to make an assumption, it should
--   do so via e.g. <a>lazily</a>. Furthermore, the function itself makes
--   the assumption that it is executed in a lazy context. This is a design
--   choice: we could also have demanded that it cannot make any
--   assumptions on how it is called.
--   
--   <a>Info</a> represents a progress report.
--   
--   The <a>Ind</a> constructor represents an indirection. Sharing an
--   indirection has the effect that the effort of producing the progress
--   reports is only performed once. In practice are <a>Stepwise</a> values
--   produced by functions, hence sharing is not provided by default. To
--   have a sharing guarantee, however, apply <a>share</a> to a
--   <a>Stepwise</a> value.
--   
--   The additional indirection allows us to have explicit sharing, such
--   that we can update thunks, which opens up ways for parallelism.
--   
--   The <a>Mode</a> constructor serves three purposes. With it we can
--   represent entering a certain evaluation mode, leaving a certain
--   evaluation mode, and remembering the stack of evaluation modes we are
--   currently in.
data Stepwise e i o w a
data StepHandle e i o w a

-- | Lazy evaluation of a step-wise computation.
lazyEval :: Stepwise e i Lazy w a -> a

-- | Sequential evaluation of a step-wise computation.
seqEval :: Stepwise e i Sequential w a -> a

-- | Evaluates step-wise (also ties the look-ahead knot)
stepwiseEval :: Stepwise e i o w a -> a

-- | Wrapper for an effect.
info :: i w -> Stepwise e i o w a -> Stepwise e i o w a
emit :: i w -> Stepwise e i o w ()

-- | One step strict evaluation. Reduction proceeds until one progress
--   report entry is produced, or the computation is suspended waiting for
--   the continuation.
next :: Stepwise e i o w a -> IO (Progress e i o w a)
localStep :: Stepwise e i o w a -> Progress e i o w a
smallStep :: Stepwise e i o w a -> Progress e i o w a

-- | A progress report. Either the progress report denotes a single step,
--   or a finished/failed computation, or a suspended computation in the
--   form of a lookahead that waits for its future continuation before it
--   can proceed.
data Progress e i o w a
Step :: !i w -> Stepwise e i o w a -> Progress e i o w a
Fin :: !a -> Progress e i o w a
Lookahead :: !forall b v. (forall o'. a -> Stepwise e i o' v b) -> Stepwise e i Lazy v b -> Progress e i o w a
Failed :: !Maybe e -> Progress e i o w a

-- | Introduces a computation for merging child-progress reports while
--   taking also into account the effects that the merge has in the
--   evaluation of the parents. The remaining evaluation for the parents is
--   passed as continuation.
lookahead :: (forall b v. (forall o'. a -> Stepwise e i o' v b) -> Stepwise e i Lazy v b) -> Stepwise e i o w a

-- | Applies a transcoder to a computation.
transcode :: Transcoder e i v w -> Stepwise e i o v a -> Stepwise e i o w a

-- | A transcoder is a function that transcodes a progress report of the
--   type <tt>i v</tt> to reports of the type <tt>i w</tt>. It gets a
--   <a>CodeIn</a> as input and produces a <a>CodeOut</a> as output. The
--   intention is that transcoders are pure functions: side effect is
--   allowed, but it is up to the programmer to ensure that the progress
--   report are not affected. If the input is <a>TcLazy</a>, the transcoder
--   is notified that lazy evaluation starts running the computation. The
--   outcome of the transcoder is ignored. When this takes place is
--   unspecified.
newtype Transcoder e i v w
Trans :: ((CodeIn e i v) -> IO (CodeOut e i w)) -> Transcoder e i v w

-- | Input to a transcoder. <a>TcReport</a> represents a single report to
--   be transcoded. <a>TcDone</a> indicates that the computation to where
--   this transcoder is applied, has succeeded. <a>TcFail</a> is its
--   counter-part. <a>TcLazy</a> indicates that a lazy evaluation has taken
--   over the computation.
data CodeIn e i w
TcReport :: !i w -> CodeIn e i w
TcLazy :: CodeIn e i w
TcDone :: CodeIn e i w
TcFail :: !Maybe e -> CodeIn e i w

-- | Output of a transcoder. Either it succeeds with zero or more
--   transcoded progress reports, or it aborts the computation.
data CodeOut e i w
TcReports :: [i w] -> CodeOut e i w
TcFailed :: !Maybe e -> CodeOut e i w

-- | Translates to zero or more reports, or failure.
translate' :: (i v -> IO (Either (Maybe e) [i w])) -> Stepwise e i o v a -> Stepwise e i o w a

-- | Translates progress reports from one domain directly into another.
translate :: (i v -> i w) -> Stepwise e i o v a -> Stepwise e i o w a

-- | Assumes that 'i v' is structurally equal to 'i w'.
unsafeTranslate :: Stepwise e i o v a -> Stepwise e i o w a

-- | Abort a computation. Note that in lazy evaluation mode, abort is
--   semantically equivalent to bottom, whereas in stepwise evaluation, it
--   provides backtracking. This means that if there is no
--   backtracking-alternative left, aborts are replaced by a bottom value.
abort :: e -> Stepwise e i o w a

-- | Turn a result into a (trivial) stepwise compuation.
final :: a -> Stepwise e i o w a

-- | Creates a pending computation for <tt>m</tt> with <tt>f</tt> on the
--   stack of parents.
resume :: Stepwise e i o w b -> (b -> Stepwise e i o w a) -> Stepwise e i o w a

-- | Creates an always failing stepwise computation.
failure :: Maybe e -> Stepwise e i o w a

-- | Creates an always failing stepwise computation (without an error
--   message).
unspecifiedFailure :: Stepwise e i o w a

-- | Allows the stepwise computation to run in lazy mode.
lazily :: Stepwise e i Lazy w a -> Stepwise e i o w a

-- | Forces the stepwise computation to run in sequential mode.
sequentially :: Stepwise e i Sequential w a -> Stepwise e i o w a

-- | Shares a stepwise computation. Work for such a shared computation is
--   only performed once.
share :: Stepwise e i o v a -> Stepwise e i Sequential w (Stepwise e i o v a)

-- | Converts a progress report back into a thunk that upon
--   <a>next</a>-reduction immediately yields the progress report again.
task :: Progress e i o w a -> Stepwise e i o w a

-- | Similar to <a>task</a>, except that it takes the next task of a step
--   instead.
nextTask :: Progress e i o w a -> Stepwise e i o w a

-- | Creates a handle to a stepwise computation.
handle :: Stepwise e i o v a -> Stepwise e i Sequential w (StepHandle e i o v a)

-- | Access the latest progress report on the handle.
report :: StepHandle e i o v a -> Stepwise e i Sequential w (Report e i o v a)

-- | Progress the handle one step. Note that the handle maintains a
--   reference to the outcome of the previous computation. Hence, if this
--   previous computation was a <a>Info</a>, we need to continue with the
--   computation as its rhs.
perform :: StepHandle e i o v a -> Stepwise e i Sequential w ()

-- | Closes the handle and embeds the remaining computation.
proceed :: StepHandle e i Lazy w a -> Stepwise e i Sequential w a

-- | Closes the handle and returns the remaining computation. The remaining
--   computation emits the last progress report first (if any), because
--   this report may not be acted upon yet. If you don't want this
--   behavior, apply a transcoder that filters out the first report.
close :: StepHandle e i Lazy v a -> Stepwise e i Sequential w (Stepwise e i Lazy v a)

-- | The <a>Report</a> version of a <a>Progress</a> report. The main
--   difference is that this variation is handle-based, which provides a
--   monadic way of accessing the progress reports.
data Report e i o w a
Finished :: !a -> Report e i o w a
Progress :: !i w -> Report e i o w a
Failure :: !Maybe e -> Report e i o w a
Future :: !forall b v. (forall o'. a -> Stepwise e i o' v b) -> Stepwise e i Lazy v b -> Report e i o w a
Unavail :: Report e i o w a

-- | Type level version of <a>ForceSequential</a>
data Sequential

-- | Type level version of <a>AllowLazy</a>
data Lazy

-- | Type index representing an arbitrary watcher. Note: in such
--   situations, you can choose an arbitrary type. This type, however,
--   explicitly states that there is no interest in the watcher type, which
--   provides a bit additional documentation.
data AnyWatcher

-- | Type index representing arbitrary failure. No information is provided
--   about the failure - only that it happened. We provide instances to
--   treat <a>AnyFailure</a> as error messages, which makes them convenient
--   to use.
data AnyFailure
AnyFailure :: AnyFailure

-- | Helper function that demands that the type of the stepwise computation
--   is sequential.
forceSequential :: Stepwise e i Sequential w a -> Stepwise e i Sequential w a

-- | Memoizes a stepwise computation.
memoSteps :: Typeable a => MemoEnvRef e i o w -> Int -> Stepwise e i o w a -> Stepwise e i o w a

-- | Creates an empty memo-env.
newMemoEnv :: IO (MemoEnvRef e i o w)

-- | Use a different <a>MemoEnv</a> for different watcher types.
type MemoEnvRef e i o w = IORef (MemoEnv e i o w)
instance Typeable AnyWatcher
instance Error (Errors e)
instance Monoid (Errors e)
instance Error AnyFailure
instance Monoid AnyFailure
instance Error e => MonadIO (Stepwise e i Sequential w)
instance Error e => MonadFix (Stepwise e i Lazy w)
instance Error e => Functor (Stepwise e i o w)
instance Error e => Monad (Stepwise e i o w)


-- | This module contains some utility functions that build on the core
--   interface of <a>Stepwise</a> computations.
--   
--   Todo: nicer abstractions for specific merge-patterns.
module Control.Monad.Stepwise.Derived

-- | Chooses locally: i.e. does not allow a lookahead beyond the current
--   computation. A subcomputation does not see beyond the current choice.
localChoice :: (i w -> Stepwise e i o w a -> i w -> Stepwise e i o w a -> Stepwise e i o w a) -> (e -> e -> Stepwise e i o w a) -> Stepwise e i o w a -> Stepwise e i o w a -> Stepwise e i o w a

-- | Merges two steps into a single step, thereby making use of the monoid
--   instance.
mergeSteps :: (Monoid (i w), Monoid e, Error e) => i w -> Stepwise e i o w a -> i w -> Stepwise e i o w a -> Stepwise e i o w a

-- | Global choice. Takes the computation with the shortest sequence of
--   reports that succeeds, or the longest that fails. First parameter is a
--   transcoder that translates reports to the final domain.
globalChoice :: Error e => (forall v. Stepwise e i Lazy v a) -> (forall v. Stepwise e i Lazy v a) -> Stepwise e i o w a
instance (Monoid (i w), Monoid e, Error e) => Alternative (Stepwise e i o w)
instance Error e => Applicative (Stepwise e i o w)
instance Error e => MonadError e (Stepwise e i o w)


-- | This module shows some example stepwise-computations, and focus on
--   individual features provided by the library. We start with testing out
--   some basic functionality, then switch to more interesting examples. In
--   practice, you'll combine several of the features presented here.
module Control.Monad.Stepwise.Examples

-- | A type for the simplest form of progress report: just a message
--   <a>I</a> that indicates that a bit of work has been done. It is
--   indexed by the watcher type <tt>t</tt>, which in this case doesn't
--   matter. Later examples show a more involving type of progress report
--   that uses the watcher type.
data I t
I :: I t

-- | Test 1: verify that results are provided when available (online
--   behavior). With <a>lazyEval</a> this means that the result should be
--   delivered, independent of the failure. Failure is just considered to
--   be a bottom-value: if it's never needed in the continuation, it is not
--   triggered. This is different in comparison to strict evaluation.
--   
--   A short remark about the type signature: the <a>AnyFailure</a> is the
--   type of failures such a computation may emit during stepwise
--   evaluation (during lazy evaluation, this is simply a bottom value).
--   Both <a>String</a> and <a>AnyFailure</a> are typical examples. The
--   <a>I</a> type is the type of the progress reports. The watcher type is
--   given seperately. A computation may state how it is evaluated: either
--   <a>may use lazy evaluation</a> (via the type <a>Lazy</a>) or <a>use
--   sequential evaluation</a> (via the type <a>Sequential</a>). For most
--   computations this is not an issue: either keep it polymorphic (like in
--   this example via a universally quantified type variable), or use
--   <a>Lazy</a> (the preferred default evaluation mode). We also do not
--   care about the watcher type for progress reports of type <a>I</a>.
--   Either keep the type polymorphic, or simply choose a type like
--   <a>AnyWatcher</a> (or '()'). Finally, the last type of the value that
--   evaluation of the computation results into. The first three parameters
--   to <a>Stepwise</a> typically stay the same, the latter three may vary
--   from one computation to another.
test1 :: Stepwise AnyFailure I any AnyWatcher Int

-- | Test 2: verify that the selection process causes strict evaluation.
--   Despite running <a>lazyEval</a> on <a>test2</a>, strict evaluation
--   will be done on the alternatives until a choice is made. In this case,
--   both alternatives fail, so the entire result fails. Note that the
--   <a>&lt;|&gt;</a>-implementation takes the first child that succeeds,
--   or the last child that fails (left-biased).
test2 :: Stepwise AnyFailure I any AnyWatcher Int

-- | Test 3: verify selection of alternatives. The non-failure alternative
--   is selected in this case. The <a>Lazy</a> annotation here we can use
--   <a>because we can</a>. A <a>Lazy</a>-annotation is in principle never
--   required (you can in such cases keep it polymorphic), but if possible,
--   it's a good idea to do so, to make clear which computations should
--   preferably be evaluated lazily.
test3 :: Stepwise AnyFailure I Lazy AnyWatcher Int
test4 :: Stepwise AnyFailure I any AnyWatcher Int
test5 :: Stepwise AnyFailure I any AnyWatcher [Int]
test6 :: Stepwise AnyFailure I Lazy AnyWatcher Int

-- | Test 7: collecting multiple results.
--   
--   <a>test7b</a> generates paths: the left subpath is of length n-1 the
--   right subpath is a lot shorter (n <a>div</a> 2) (just for fun).
--   <a>test7a</a> succeeds only for those paths that satisfy a funny
--   criteria via xor. Those it returns. When it succeeds, <a>test7b</a>
--   emits a progress report collecting that value. <a>merge</a> tries out
--   options in a breadth-first way, and concatenates the lists in the
--   progress reports. <a>test7c</a> takes out the list of all succeeding
--   paths.
--   
--   We collect these multiple results in a more informative form of
--   progress report <a>J</a>. The type of the watcher is important here.
--   The <a>test7a</a> function does not make any assumptions about the
--   watcher, however <a>test7b</a> does. When <a>test7a</a> succeeds, it
--   collects that results in a <a>Collect</a>.
data J t
Collect :: [t] -> J t
J :: J t

-- | We may not make an assumption about the watcher here, hence we keep
--   the watcher type polymorphic.
test7a :: [Bool] -> Stepwise AnyFailure J Lazy somewatcher [Bool]
test7b :: Int -> [Bool] -> Stepwise AnyFailure J Lazy [Bool] ()
merge :: Stepwise AnyFailure J Lazy [Bool] () -> Stepwise AnyFailure J Lazy [Bool] () -> Stepwise AnyFailure J Lazy [Bool] ()

-- | Strips steps (thus evaluates sequentially), until it hits a
--   <a>Collect</a> message, which is subsequently delivers.
test7c :: Stepwise AnyFailure J Lazy a [[Bool]]

-- | Test 8: lookahead. Decisions taken in this example may depend on what
--   happens in the continuation. We takes as example path-finding in a
--   labyrinth. Taking a step that brings us back to a position where we've
--   been before is an immediate failure. However, the possibilities that
--   remain may hit a dead-end later.
type Lab a = RWST LabIn Instrs LabChn (Stepwise AnyFailure LabSteps Lazy AnyWatcher) a
type Lab' a = Stepwise AnyFailure LabSteps Lazy AnyWatcher (a, LabChn, Instrs)
data LabIn
LI :: !Set Pos -> {-# UNPACK #-} !Pos -> {-# UNPACK #-} !MemoEnvRef AnyFailure LabSteps Lazy AnyWatcher -> LabIn
inLab :: LabIn -> !Set Pos
inEnd :: LabIn -> {-# UNPACK #-} !Pos
inMemo :: LabIn -> {-# UNPACK #-} !MemoEnvRef AnyFailure LabSteps Lazy AnyWatcher
data LabChn
LC :: !Pos -> !Set Pos -> LabChn
chnPos :: LabChn -> !Pos
chnTrail :: LabChn -> !Set Pos
data LabSteps t
Walked :: !Set Pos -> LabSteps t
type Pos = (Int, Int)
newtype Instrs
Instrs :: (Path -> Path) -> Instrs
type Path = [Dir]
data Dir
North :: Dir
East :: Dir
South :: Dir
West :: Dir
search :: Lab ()
pos2key :: Pos -> Int
finished :: Lab ()
move :: Dir -> Lab ()
forward :: Dir -> Pos -> Pos
(<<|>) :: Lab a -> Lab a -> Lab a
best :: Lab' a -> Lab' a -> Lab' a

-- | Example labyrinth
lab1 :: [Pos]
exp8Succs :: Path
branch :: Lab a -> Lab (Branch a)

-- | Container to keep the contained value lazy
data Branch a
Branch :: Lab' a -> Branch a
pickBranch :: Branch a -> Lab' a
embed' :: Lab' a -> Lab a
pathClose :: Instrs -> Path
pathOne :: Dir -> Instrs

-- | Test 8b: Explicit sharing. This example builds on the previous one.
--   Since we immediately fail when a step would take us back at a position
--   that we've been before, the paths we traverse form a DAG. However,
--   certain paths on this DAG we may traverse more than once. In this
--   example, we ensure that we only traverse each path once.
--   
--   Note, however, that it memoizes the outcome (i.e. the Lab' value),
--   produced in a context potentially different from ours. The key
--   <a>loc</a> in this case, however, identifies a unique context.
memoize :: MemoEnvRef AnyFailure LabSteps Lazy AnyWatcher -> Int -> Lab () -> Lab ()

-- | Test 8c: Ambiguity and online-ness improvement. If two parallel
--   branches converge on a single path, kill one of the branches. A much
--   more effective approach is to keep a shared trail via an IORef and
--   kill any branch that makes a move to a square already visited.
--   However, the current approach is more interesting: it takes a bit
--   longer until common paths are found.
convergeKill :: Lab' a -> Lab' a -> Lab (Lab' a, Lab' a)
runAhead :: Int -> Lab' a -> Lab (Lab' a)

-- | Repmin with alternatives! The tree may contain alternatives. The tree
--   is returned such that it (1) consists of the shortest (left-biassed)
--   alternatives (2) all leaves replaced with the minimal value occurring
--   in the tree (for the selected alternatives) This tests the
--   <a>MonadFix</a> feature.
--   
--   Note: To show that online results are in general necessairy for cyclic
--   computations, we should actually make the selection process dependent
--   on the outcome of a previously but already resolved selection. For
--   example, by keeping a local minimum (from the left), and taking the
--   first alternative that goes under it. Perhaps a min/max game tree
--   would be a good example for that.
--   
--   Also, a lazy value depending on the outcome of two or more
--   alternatives can only be produced if there is one alternative left. If
--   all the alternatives would yield the same outermost constructor, still
--   no value can be produced. This is in general no problem; the reason
--   that you had alternatives there is likely because it returns different
--   results.
data BinTree
Leaf :: Int -> BinTree
Bin :: BinTree -> BinTree -> BinTree
Alt :: BinTree -> BinTree -> BinTree
type RepMin a = Stepwise AnyFailure I Lazy AnyWatcher a
repmin :: BinTree -> RepMin BinTree
semTree :: BinTree -> Int -> RepMin (Int, BinTree)
test9 :: RepMin BinTree
exp9Succs :: BinTree
instance Typeable Instrs
instance Typeable LabChn
instance Show BinTree
instance Enum Dir
instance Show Dir
instance Monoid Instrs
instance Monoid (I t)


-- | Note: Some documentation may not be visible in the Haddock
--   documentation; also check the comments directly in the source code.
--   
--   A module for the step-wise evaluation of pure computations, in
--   particular suitable to resolve non-deterministic choices in
--   computations.
--   
--   This module provides a monadic interface for a special form of pure
--   <i>coroutines</i> that, upon disgression of the caller, yield lazily
--   the result of the coroutine, or evaluates strictly until it can yield
--   next callee-determined progress report. Due to the monadic interface,
--   such a coroutine is an ordinary composable monadic haskell function,
--   with the exception that it may be decorated with statements that yield
--   progress reports. Both the result and progress reports are purely
--   functional: given an expression written with this interface, the
--   evaluated value as well as all the progress reports are uniquely
--   determined by the values for the free variables of the expression.
--   
--   Given such a coroutine <tt>m</tt>, we can both refer to its progress
--   reports and its value from another coroutine. Given a coroutine
--   <tt>m</tt>, the conventional way to access its value is via a
--   coroutine <tt>m &gt;&gt;= f</tt>, where <tt>f</tt> is itself a
--   coroutine that takes <tt>m</tt>'s value as parameter. The progress
--   reports of <tt>m</tt> are incorporated as part of the progress reports
--   of <tt>m &gt;&gt;= f</tt>, ordered such that the progress reports of
--   <tt>m</tt> are emitted before those of <tt>f</tt>. Alternatively, we
--   can ask <tt>m</tt> to yield the next progress report via <tt>smallStep
--   m</tt>. This returns a progress report, and an updated coroutine to be
--   used as continuation. In this case, <tt>m</tt> evaluated one step,
--   hence 'step-wise'.
--   
--   Stepwise evaluation provides a means to encode non-deterministic
--   choices in a deterministic way via advanced search strategies. For
--   example, with this module, we can define a coroutine that determines
--   its result by making a choice between the results of two other
--   coroutines. For that, we step through the evaluation of both
--   coroutines until we saw sufficient progress reports to make a choice.
--   Meanwhile, we already yield progress reports. Finally, we make a
--   choice by integrating the coroutine in the conventional way.
--   Consequently, the choice is optimized away, and the coroutine that is
--   not selected becomes garbage.
--   
--   With this approach, we encode a breadth-first evaluation by letting
--   each couroutine emitting steps regularly, and alternate the coroutine
--   to take steps from. We get depth-first behavior by fully stepping
--   through one of the choices first before considering the other choice.
--   Custom strategies are possible by emitting progress reports. For
--   example, a coroutine can emit statistics about the work done so far
--   and predictions of the work still to do to produce the result, which
--   can subsequently be used to direct the evaluation process.
--   
--   A coroutine has the type <tt>BF e i w a</tt>, where <tt>a</tt> is the
--   final result computed by the coroutine. Such a computation may fail,
--   with reasons indicated by the type <tt>e</tt>. Progress reports are of
--   the type <tt>i w</tt>, i.e. parameterized in the type of a
--   <i>watcher</i> <tt>w</tt>. A watcher is a type index that allows the
--   progress reports to be different depending on the caller of a
--   coroutine: both the callee and its caller (and the caller's caller,
--   etc.) coroutines must share the same type <tt>i</tt> for progress
--   reports. Specific callee/caller combinations may decide on a common
--   type <tt>w</tt> to communicate special-typed progress information. To
--   emit such a progress report to a caller with a different watcher-type,
--   it has to be <i>transcoded</i> first via e.g. <a>transcode</a>.
--   
--   In some situations, the choice between a coroutine <tt>a</tt> and
--   <tt>b</tt> may depend on what happends when we pick i.e. <tt>a</tt>
--   and our caller continues its evaluation. For example, suppose that the
--   continued evaluation is represented by some unknown coroutine
--   <tt>r</tt>, and we we define a coroutine <tt>c = choice a b</tt>. This
--   means that the actual evaluation is <tt>choice a b &gt;&gt;= r</tt>.
--   We may want to lift this choice over <tt>r</tt>, to <tt>choice' (a
--   &gt;&gt;= r) (b &gt;&gt;= r)</tt>. Since <tt>r</tt> is unknown,
--   <tt>choice'</tt> cannot base its choice on the value computed by <tt>a
--   &gt;&gt;= r</tt> or <tt>b &gt;&gt;= r</tt>. Both the type of the
--   result and the watcher type are existential. However, we can inspect
--   if one of the alternatives fails, and inspect progress reports that
--   are independent of the watcher type. We provide this choice-lifting
--   via a special operation call <a>lookahead</a>. It provides us with our
--   continuation <tt>r</tt>, and we must define the coroutine denoting
--   <tt>c' &gt;&gt;= r</tt>, where <tt>c'</tt> denotes our choice. This
--   lifting comes with a price: requesting a step from a coroutine may
--   require us to provide it a continuation that represents what we are
--   going to do afterwards with it. For example, if we pass <a>return</a>,
--   there is no lookahead beyond the evaluation of the coroutine. However,
--   if we pass the continuation obtained through <tt>lookahead</tt>, we
--   potentially look ahead through a possible future. The difference
--   between progress report type and watcher type is important here. We
--   cannot make assumptions about the wachter of the continuation: but we
--   do know that we get progress reports of type <tt>i</tt> with
--   unspecified watcher type.
--   
--   When we request a step from <tt>e = m &gt;&gt;= f</tt>, we gradually
--   reduce it until it emits the next progress report. It first gradually
--   reduces <tt>m</tt>. When it is entirely finished with <tt>m</tt>, it
--   continues with <tt>f</tt>, after parametrizing it with the value
--   computed for <tt>m</tt>. However, given such a partially reduced
--   <tt>e' = m' &gt;&gt;= f'</tt>, when we ask for the <tt>lazyEval
--   e</tt>, we immediately get the result <tt>lazyEval (f' (lazyEval
--   m'))</tt>. <a>lazyEval</a> discards any progress reports and
--   immediately produces a lazy result. When <tt>f</tt> is not strict in
--   its first argument, this means that a value can already be produced,
--   possibly without even evaluating the remainder of <tt>m'</tt>. For
--   example, <tt>lazyEval (choice a b)</tt> strictly evaluates <tt>a</tt>
--   and <tt>b</tt> as long as it is asking for steps. Once <tt>choice</tt>
--   selects one alternative, lazy evaluation takes over. This allows us to
--   produce <i>online</i> results when choices have been resolved.
--   
--   Benchmark results show that a <a>Stepwise</a> bind is approximately 10
--   times slower compared to a bind of the identity monad (independent of
--   the amount of binds). Stepwise evaluation of a bind via
--   <a>stepwiseEval</a> is only marginally (e.g. approx 10%) slower
--   compared to <a>lazyEval</a> of a bind.
--   
--   A downside of the monadic interface is that it requires code to be
--   written in a sequential way (it enforces monadic style upon the
--   program). For tree traversals, we eliminate this downside with
--   Attribute Grammars. For the class of Ordered Attribute Grammars
--   (non-cyclic tree-traversals fall in this class), the UUAG system has
--   an option to automatically derive code for this library.
--   
--   This library is a generalization of the Steps-technique presented in
--   `Polish parsers, Step by Step` by R. J. M. Hughes and S. D. Swierstra,
--   and the later work in `Combinator Parsing: A Short Tutorial' by S. D.
--   Swierstra. The key difference is that we do not construct a single
--   function <tt>f :: a -&gt; b</tt> in <tt>Apply f</tt> (as mentioned in
--   the latter paper) that represents a continuation of what still needs
--   to be computed. Instead, we explicitly build a stack of all pending
--   right-hand sides <tt>g1..gn</tt> that follow the currently active
--   computation <tt>m</tt> in <tt>m &gt;&gt;= g1 &gt;&gt;= ... gn</tt>.
--   The functions <tt>g</tt> on the stack thus have the monadic type <tt>g
--   :: a -&gt; BF e i w b</tt>. When we request a new progress report and
--   <tt>m</tt> is fully reduced, we reduce the pending-stack: pop off
--   <tt>g1</tt>, parametrize it with the result of <tt>m</tt>, then start
--   reducing that value. Consequently, we have no difficulties dealing
--   with the monadic bind in this approach. This representation, however,
--   does not impair laziness. We still manage to map this representation
--   back to a function <tt>f :: a -&gt; b</tt>. This transformation is
--   performed by <a>lazyEval</a>. A smaller difference is that our
--   interface to deal with progress reports does not expose the above
--   mentioned stack, which reduces complexity for the programmer.
module Control.Monad.Stepwise


-- | Module for use in combination with UUAG's <a>--breadtfirst</a> option.
module Control.Monad.Stepwise.AG

-- | Semantics of a child of type <tt>n</tt> as a function from inherited
--   attributes (<tt>Inh n</tt>) to a computation <tt>Comp i n</tt> of
--   synthesized attributes (<tt>Syn n</tt>).
newtype Child i n
Child :: (Inh n -> Comp i n) -> Child i n

-- | We use slightly simpler stepwise computations for AGs.
type Comp i n = Stepwise AnyFailure i Lazy AnyWatcher (Syn n)

-- | Unwraps a <tt>Closure</tt>
invoke :: Child i n -> Inh n -> Comp i n
