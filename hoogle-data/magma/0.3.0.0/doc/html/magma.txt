-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | magma is an algebraic structure consisting a set together with an binary operation.
--   
@package magma
@version 0.3.0.0

module Data.Magma
class Magma a
(<>) :: Magma a => a -> a -> a
data BinaryTree a
Leaf :: a -> BinaryTree a
Node :: (BinaryTree a) -> (BinaryTree a) -> BinaryTree a
cataBinaryTree :: (a -> r) -> (r -> r -> r) -> BinaryTree a -> r
anaBinaryTree :: (b -> Either a (b, b)) -> b -> BinaryTree a
foldMap :: Magma m => (a -> m) -> BinaryTree a -> m

-- | <pre>
--   <a>_Leaf</a> :: Prism' (<a>BinaryTree</a> a) a
--   </pre>
_Leaf :: (Choice p, Applicative f) => p a (f a) -> p (BinaryTree a) (f (BinaryTree a))

-- | <pre>
--   <a>_Node</a> :: Prism' (<a>BinaryTree</a> a) (<a>BinaryTree</a> a, <a>BinaryTree</a> a)
--   </pre>
_Node :: (Choice p, Applicative f) => p (BinaryTree a, BinaryTree a) (f (BinaryTree a, BinaryTree a)) -> p (BinaryTree a) (f (BinaryTree a))

-- | <pre>
--   <a>nodeLeft</a> :: Traversal' (<a>BinaryTree</a> a) (<a>BinaryTree</a> a)
--   </pre>
nodeLeft :: Applicative f => (BinaryTree a -> f (BinaryTree a)) -> BinaryTree a -> f (BinaryTree a)

-- | <pre>
--   <a>nodeRight</a> :: Traversal' (<a>BinaryTree</a> a) (<a>BinaryTree</a> a)
--   </pre>
nodeRight :: Applicative f => (BinaryTree a -> f (BinaryTree a)) -> BinaryTree a -> f (BinaryTree a)
instance Show a => Show (BinaryTree a)
instance Read a => Read (BinaryTree a)
instance Eq a => Eq (BinaryTree a)
instance Ord a => Ord (BinaryTree a)
instance Functor BinaryTree
instance NFData a => NFData (BinaryTree a)
instance Monad BinaryTree
instance Applicative BinaryTree
instance Traversable BinaryTree
instance Magma (BinaryTree a)
instance Foldable BinaryTree
instance Monoid m => Magma (WrappedMonoid m)
instance Ord a => Magma (Max a)
instance Ord a => Magma (Min a)
instance Magma (Last a)
instance Magma (First a)
instance Num a => Magma (Product a)
instance Num a => Magma (Sum a)
instance Magma Any
instance Magma All
instance Magma (Endo a)
instance Magma a => Magma (Dual a)
