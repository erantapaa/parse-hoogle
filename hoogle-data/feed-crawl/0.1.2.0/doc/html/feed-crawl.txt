-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Utility for fetching feeds with redirect info and HTML link detection
--   
@package feed-crawl
@version 0.1.2.0

module Text.Feed.Crawl.Common
type CrawlResult = Either CrawlFail CrawlSuccess
data CrawlFail
CrawlFoundFeedLinks :: ByteString -> [Link] -> CrawlFail
crawlNotFeedResponse :: CrawlFail -> ByteString
crawlNotFeedWithLinks :: CrawlFail -> [Link]
CrawlHttpError :: HttpException -> CrawlFail
data CrawlSuccess
CrawlSuccess :: Maybe ByteString -> ByteString -> ByteString -> CrawlSuccess
crawlLastContentType :: CrawlSuccess -> Maybe ByteString
crawlLastUrl :: CrawlSuccess -> ByteString
crawlFeedContent :: CrawlSuccess -> ByteString
data Status
Status :: Int -> Maybe ByteString -> Maybe ByteString -> Status
sStatusCode :: Status -> Int
sLocation :: Status -> Maybe ByteString
sContentType :: Status -> Maybe ByteString
data Link
Link :: String -> String -> String -> String -> Link
linkRel :: Link -> String
linkHref :: Link -> String
linkType :: Link -> String
linkTitle :: Link -> String
isFeedContentType :: Maybe ByteString -> Bool
feedMimeTypes :: [[Char]]
instance Show CrawlSuccess
instance Show Status
instance Show Link
instance Show CrawlFail

module Text.Feed.Crawl.DetectLink
findFeedLinks :: String -> IO [Link]
scrapePage :: IOSLA (XIOState ()) (NTree XNode) Link

module Text.Feed.Crawl

-- | Spoof a Safari Browser because some sites don't even serve feeds to an
--   http-conduit client
userAgent :: ByteString

-- | The main function
crawlURL :: String -> IO CrawlResult
mkCrawlResult :: String -> (Response ByteString, [Status]) -> IO CrawlResult

-- | Returns a tuple of response and list of redirect locations. The first
--   location is the last redirect.
withRedirectTracking :: ManagerSettings -> Request -> IO (Response ByteString, [Status])
traceRedirects :: Request -> Manager -> StateT [Status] IO (Response ByteString)
isFeed :: Status -> Bool
ensureAbsURL :: Request -> Maybe ByteString -> Maybe ByteString
ensureAbsURL' :: Maybe URI -> String -> Maybe String
baseURL :: Request -> Maybe URI
