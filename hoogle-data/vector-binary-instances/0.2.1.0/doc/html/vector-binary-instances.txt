-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Instances of Data.Binary and Data.Serialize for vector
--   
--   Instances for Binary for the types defined in the vector package,
--   making it easy to serialize vectors to and from disk. We use the
--   generic interface to vectors, so all vector types are supported.
--   Specific instances are provided for unboxed, boxed and storable
--   vectors.
--   
--   To serialize a vector:
--   
--   <pre>
--   *Data.Vector.Binary&gt; let v = Data.Vector.fromList [1..10]
--   *Data.Vector.Binary&gt; v
--   fromList [1,2,3,4,5,6,7,8,9,10] :: Data.Vector.Vector
--   *Data.Vector.Binary&gt; encode v
--   Chunk "\NUL\NUL\NUL\NUL\NUL...\NUL\NUL\NUL\t\NUL\NUL\NUL\NUL\n" Empty
--   </pre>
--   
--   Which you can in turn compress before writing to disk:
--   
--   <pre>
--   compress . encode $ v
--   Chunk "\US\139\b\NUL\NUL\N...\229\240,\254:\NUL\NUL\NUL" Empty
--   </pre>
@package vector-binary-instances
@version 0.2.1.0


module Data.Vector.Cereal
instance (Storable a, Serialize a) => Serialize (Vector a)
instance (Unbox a, Serialize a) => Serialize (Vector a)
instance Serialize a => Serialize (Vector a)


module Data.Vector.Binary
instance (Storable a, Binary a) => Binary (Vector a)
instance (Unbox a, Binary a) => Binary (Vector a)
instance Binary a => Binary (Vector a)
