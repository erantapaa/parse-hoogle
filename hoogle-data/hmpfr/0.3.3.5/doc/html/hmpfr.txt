-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell binding to the MPFR library
--   
--   Haskell binding to the MPFR library. This version is compatible with
--   MPFR 2.4.* and later and will not work with previous releases of the
--   MPFR library.
--   
--   <i>Since MPFR uses GMP, this library features infrequent but serious
--   errors</i> <i>with a ghc that has been compiled with the default
--   integer-gmp.</i> <i>When using ghc, it is recommended to use one
--   compiled with a modified integer-gmp,</i> <i>as described at</i>
--   
--   <a>http://code.google.com/p/hmpfr/wiki/GHCWithRenamedGMP</a>
--   
--   <i>or</i> <i>with integer-simple, as described at</i>
--   
--   <a>http://code.google.com/p/hmpfr/wiki/GHCWithoutGMP</a>
--   
--   <i>There is a hope that at some point future versions of ghc will not
--   need any modification for</i> <i>hmpfr to work with them
--   correctly.</i>
--   
--   The library includes both a pure and a mutable interface. The mutable
--   interface should have a lot less overhead than the pure one.
--   
--   Some simple examples of usage can be found in demo/Demo.hs.
@package hmpfr
@version 0.3.3.5


-- | This module provides a "mutable" interface to the MPFR library.
--   Functions i this module should have very little overhead over the
--   original <tt>C</tt> functions.
--   
--   Type signatures of functions should be self-explanatory. Order of
--   arguments is identical to the one in <tt>C</tt> functions. See MPFR
--   manual for documentation on particular functions.
--   
--   All operations are performed in the <tt>ST</tt> monad so safe
--   transition between mutable and immutable interface is possible with
--   <tt>runST</tt>. For example mutable interface could be used in inner
--   loops or in local calculations with temporary variables, helping
--   reduce allocation overhead of the pure interface.
module Data.Number.MPFR.Mutable

-- | A mutable MPFR. Currently this is just a newtype wrapped STRef to a
--   MPFR but this may change in the future for a more efficient
--   implementation. Type argument <tt>s</tt> is the state variable
--   argument for the <tt>ST</tt> type.
data MMPFR s

-- | Convert an immutable MPFR to a mutable one, making a complete copy.
thaw :: MPFR -> ST s (MMPFR s)

-- | Replace the state of the mutable MPFR with a new one, making a
--   complete copy.
writeMMPFR :: MMPFR s -> MPFR -> ST s ()

-- | Convert a mutable MPFR to an immutable one, making a complete copy.
freeze :: MMPFR s -> ST s MPFR

-- | Convert an immutable MPFR to a mutable one. The unsafe prefix comes
--   from the fact that limbs of the MPFR are not copied so any
--   modifications done on on the mutable MPFR will reflect on the
--   original. If the original will not be used or limbs of the mutable not
--   modified, then it is safe to use.
unsafeThaw :: MPFR -> ST s (MMPFR s)

-- | Replace the state of the mutable MPFR with a new one. The actual limbs
--   are not copied, so any further modifications on the mutable MPFR will
--   reflect on the MPFR given in as the second argument.
unsafeWriteMMPFR :: MMPFR s -> MPFR -> ST s ()

-- | Convert a mutable MPFR to an immutable one. The unsafe prefix comes
--   from the fact that limbs of the MPFR are not copied so any further
--   modifications on the mutable MPFR will reflect on the "frozen" one. If
--   mutable MPFR will not be modified afterwards, it is perfectly safe to
--   use.
unsafeFreeze :: MMPFR s -> ST s MPFR
add :: MMPFR s -> MMPFR s -> MMPFR s -> RoundMode -> ST s Int
addw :: MMPFR s -> MMPFR s -> Word -> RoundMode -> ST s Int
addi :: MMPFR s -> MMPFR s -> Int -> RoundMode -> ST s Int
addd :: MMPFR s -> MMPFR s -> Double -> RoundMode -> ST s Int
sub :: MMPFR s -> MMPFR s -> MMPFR s -> RoundMode -> ST s Int
subw :: MMPFR s -> MMPFR s -> Word -> RoundMode -> ST s Int
subi :: MMPFR s -> MMPFR s -> Int -> RoundMode -> ST s Int
subd :: MMPFR s -> MMPFR s -> Double -> RoundMode -> ST s Int
wsub :: MMPFR s -> Word -> MMPFR s -> RoundMode -> ST s Int
isub :: MMPFR s -> Int -> MMPFR s -> RoundMode -> ST s Int
dsub :: MMPFR s -> Double -> MMPFR s -> RoundMode -> ST s Int
mul :: MMPFR s -> MMPFR s -> MMPFR s -> RoundMode -> ST s Int
mulw :: MMPFR s -> MMPFR s -> Word -> RoundMode -> ST s Int
muli :: MMPFR s -> MMPFR s -> Int -> RoundMode -> ST s Int
muld :: MMPFR s -> MMPFR s -> Double -> RoundMode -> ST s Int
sqr :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
div :: MMPFR s -> MMPFR s -> MMPFR s -> RoundMode -> ST s Int
divw :: MMPFR s -> MMPFR s -> Word -> RoundMode -> ST s Int
divi :: MMPFR s -> MMPFR s -> Int -> RoundMode -> ST s Int
divd :: MMPFR s -> MMPFR s -> Double -> RoundMode -> ST s Int
wdiv :: MMPFR s -> Word -> MMPFR s -> RoundMode -> ST s Int
idiv :: MMPFR s -> Int -> MMPFR s -> RoundMode -> ST s Int
ddiv :: MMPFR s -> Double -> MMPFR s -> RoundMode -> ST s Int
sqrt :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
sqrtw :: MMPFR s -> Word -> RoundMode -> ST s Int
recSqrt :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
cbrt :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
root :: MMPFR s -> MMPFR s -> Word -> RoundMode -> ST s Int
pow :: MMPFR s -> MMPFR s -> MMPFR s -> RoundMode -> ST s Int
poww :: MMPFR s -> MMPFR s -> Word -> RoundMode -> ST s Int
powi :: MMPFR s -> MMPFR s -> Int -> RoundMode -> ST s Int
wpow :: MMPFR s -> Word -> MMPFR s -> RoundMode -> ST s Int
neg :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
absD :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
dim :: MMPFR s -> MMPFR s -> MMPFR s -> RoundMode -> ST s Int
mul2w :: MMPFR s -> MMPFR s -> Word -> RoundMode -> ST s Int
mul2i :: MMPFR s -> MMPFR s -> Int -> RoundMode -> ST s Int
div2w :: MMPFR s -> MMPFR s -> Word -> RoundMode -> ST s Int
div2i :: MMPFR s -> MMPFR s -> Int -> RoundMode -> ST s Int
log :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
log2 :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
log10 :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
exp :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
exp2 :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
exp10 :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
sin :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
cos :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
tan :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
sec :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
csc :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
cot :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
sincos :: MMPFR s -> MMPFR s -> MMPFR s -> RoundMode -> ST s Int
asin :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
acos :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
atan :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
atan2 :: MMPFR s -> MMPFR s -> MMPFR s -> RoundMode -> ST s Int
sinh :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
cosh :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
tanh :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
sinhcosh :: MMPFR s -> MMPFR s -> MMPFR s -> RoundMode -> ST s Int
sech :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
csch :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
coth :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
asinh :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
acosh :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
atanh :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
facw :: MMPFR s -> Word -> RoundMode -> ST s Int
log1p :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
expm1 :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
eint :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
li2 :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
gamma :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
lngamma :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
zeta :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
zetaw :: MMPFR s -> Word -> RoundMode -> ST s Int
erf :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
erfc :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
j0 :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
j1 :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
jn :: MMPFR s -> Word -> MMPFR s -> RoundMode -> ST s Int
y0 :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
y1 :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
yn :: MMPFR s -> Word -> MMPFR s -> RoundMode -> ST s Int
fma :: MMPFR s -> MMPFR s -> MMPFR s -> MMPFR s -> RoundMode -> ST s Int
fms :: MMPFR s -> MMPFR s -> MMPFR s -> MMPFR s -> RoundMode -> ST s Int
agm :: MMPFR s -> MMPFR s -> MMPFR s -> RoundMode -> ST s Int
hypot :: MMPFR s -> MMPFR s -> MMPFR s -> RoundMode -> ST s Int
nextAbove :: MMPFR s -> ST s ()
nextbelow :: MMPFR s -> ST s ()
max :: MMPFR s -> MMPFR s -> MMPFR s -> RoundMode -> ST s Int
min :: MMPFR s -> MMPFR s -> MMPFR s -> RoundMode -> ST s Int
getExp :: MMPFR s -> ST s Exp
getPrec :: MMPFR s -> ST s Precision
rint :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
ceil :: MMPFR s -> MMPFR s -> ST s Int
floor :: MMPFR s -> MMPFR s -> ST s Int
round :: MMPFR s -> MMPFR s -> ST s Int
trunc :: MMPFR s -> MMPFR s -> ST s Int
rintCeil :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
rintFloor :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
rintRound :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
rintTrunc :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
modf :: MMPFR s -> MMPFR s -> MMPFR s -> RoundMode -> ST s Int
frac :: MMPFR s -> MMPFR s -> RoundMode -> ST s Int
fmod :: MMPFR s -> MMPFR s -> MMPFR s -> RoundMode -> ST s Int
remainder :: MMPFR s -> MMPFR s -> MMPFR s -> RoundMode -> ST s Int


-- | This module defines instances <a>Num</a>, <a>Real</a>,
--   <a>Fractional</a>, <a>Floating</a> and <a>RealFrac</a> of <a>MPFR</a>.
--   Operations are rounded with <a>RoundMode</a> <a>Up</a> and computed
--   with maximum precision of two operands or with the precision of the
--   operand.
module Data.Number.MPFR.Instances.Up
instance RealFrac MPFR
instance Floating MPFR
instance Fractional MPFR
instance Real MPFR
instance Num MPFR


-- | This module defines instances <a>Num</a>, <a>Real</a>,
--   <a>Fractional</a>, <a>Floating</a> and <a>RealFrac</a> of <a>MPFR</a>.
--   Operations are rounded with <a>RoundMode</a> <a>Down</a> and computed
--   with maximum precision of two operands or with the precision of the
--   operand.
module Data.Number.MPFR.Instances.Down
instance RealFrac MPFR
instance Floating MPFR
instance Fractional MPFR
instance Real MPFR
instance Num MPFR


-- | This module defines instances <a>Num</a>, <a>Real</a>,
--   <a>Fractional</a>, <a>Floating</a> and <a>RealFrac</a> of <a>MPFR</a>.
--   Operations are rounded with <a>RoundMode</a> <a>Zero</a> and computed
--   with maximum precision of two operands or with the precision of the
--   operand.
module Data.Number.MPFR.Instances.Zero
instance RealFrac MPFR
instance Floating MPFR
instance Fractional MPFR
instance Real MPFR
instance Num MPFR


-- | This module exports a pure interface to the MPFR library functions.
--   Functions return new <a>MPFR</a> structures instead of modifying
--   existing ones and so all functions which produce a new MPFR structure
--   take one more parameter than their original <tt>C</tt> counterparts.
--   This parameter, <a>Precision</a>, is the precision of the resulting
--   <a>MPFR</a>.
--   
--   This is naturally slower than modifying in-place, especially when
--   dealing with lower precisions, so a "mutable" interface is provided in
--   <a>Data.Number.MPFR.Mutable</a> module.
--   
--   <i>Naming conventions</i>
--   
--   <ul>
--   <li>functions ending with _ (underscore) usually return a pair
--   <tt>(<a>MPFR</a>, <a>Int</a>)</tt>, where <a>Int</a> is a return value
--   of a corresponding <tt>mpfr_</tt> function. See the MPFR manual for a
--   description of return values.</li>
--   <li>the same functions without the _ return just the <a>MPFR</a>.</li>
--   <li><tt>mpfr_</tt> prefix in functions is removed</li>
--   <li><tt>_ui</tt> and <tt>ui_</tt> in function becomes <tt>w</tt>
--   (stands for <a>Word</a>). For example <tt>mpfr_sub_ui</tt> becomes
--   <tt><a>subw</a></tt> and <tt>mpfr_ui_sub</tt> becomes
--   <a>wsub</a>.</li>
--   <li><tt>si_</tt> and <tt>_si</tt> in functions becomes <tt>i</tt>
--   (stands for <a>Int</a>). For example <tt>mpfr_sub_si</tt> becomes
--   <tt><a>subi</a></tt> and <tt>mpfr_si_sub</tt> becomes
--   <a>isub</a>.</li>
--   <li>comparison functions which have <tt>_p</tt> appended loose it. For
--   example <tt>mpfr_less_p</tt> becomes <tt><a>less</a></tt>.</li>
--   </ul>
--   
--   <i>Instances</i>
--   
--   <ul>
--   <li><i><tt><a>Eq</a></tt></i></li>
--   </ul>
--   
--   <ul>
--   <li>NaN /= NaN,</li>
--   <li>Infinity = Infinity,</li>
--   <li>-Infinity = -Infinity</li>
--   <li>otherwise normal comparison</li>
--   </ul>
--   
--   <ul>
--   <li><i><tt><a>Ord</a></tt></i></li>
--   </ul>
--   
--   <ul>
--   <li>compare NaN _ = <a>GT</a></li>
--   <li>compare _ NaN = <a>GT</a></li>
--   <li>infinity &lt; _ = <a>False</a></li>
--   <li>-infinity &gt; _ = <a>False</a></li>
--   <li>NaN [&lt;,&gt;,&gt;=,&lt;=] _ = <a>False</a></li>
--   </ul>
--   
--   This mimics the behaviour of built in Haskell <a>Float</a> and
--   <a>Double</a>.
--   
--   If you need instances of numeric typeclasses import one of the
--   Data.Number.MPFR.Instances.* modules.
module Data.Number.MPFR
data RoundMode
Near :: RoundMode
Zero :: RoundMode
Up :: RoundMode
Down :: RoundMode
data MPFR
data Precision
type Exp = Int32
type MpSize = Int32
set :: RoundMode -> Precision -> MPFR -> MPFR
set_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
fromWord :: RoundMode -> Precision -> Word -> MPFR
fromInt :: RoundMode -> Precision -> Int -> MPFR
fromDouble :: RoundMode -> Precision -> Double -> MPFR
fromWord_ :: RoundMode -> Precision -> Word -> (MPFR, Int)
fromInt_ :: RoundMode -> Precision -> Int -> (MPFR, Int)
fromDouble_ :: RoundMode -> Precision -> Double -> (MPFR, Int)

-- | x * 2 ^ y
int2w :: RoundMode -> Precision -> Word -> Int -> MPFR

-- | x * 2 ^ y
int2i :: RoundMode -> Precision -> Int -> Int -> MPFR
int2w_ :: RoundMode -> Precision -> Word -> Int -> (MPFR, Int)
int2i_ :: RoundMode -> Precision -> Int -> Int -> (MPFR, Int)
stringToMPFR :: RoundMode -> Precision -> Word -> String -> MPFR
stringToMPFR_ :: RoundMode -> Precision -> Word -> String -> (MPFR, Int)
strtofr :: RoundMode -> Precision -> Word -> String -> (MPFR, String)
strtofr_ :: RoundMode -> Precision -> Word -> String -> (MPFR, String, Int)
setInf :: Precision -> Int -> MPFR
setNaN :: Precision -> MPFR
fromIntegerA :: RoundMode -> Precision -> Integer -> MPFR
bitsInInteger :: Num a => Integer -> a
compose :: RoundMode -> Precision -> (Integer, Int) -> MPFR

-- | <a>stringToMPFR</a> with default rounding to Near.
fromString :: String -> Precision -> Word -> MPFR
toDouble :: RoundMode -> MPFR -> Double
toDouble2exp :: RoundMode -> MPFR -> (Double, Int)
toInt :: RoundMode -> MPFR -> Int
toWord :: RoundMode -> MPFR -> Word
mpfrToString :: RoundMode -> Word -> Word -> MPFR -> (String, Exp)
fitsULong :: RoundMode -> MPFR -> Bool
fitsSLong :: RoundMode -> MPFR -> Bool
fitsUInt :: RoundMode -> MPFR -> Bool
fitsSInt :: RoundMode -> MPFR -> Bool
fitsUShort :: RoundMode -> MPFR -> Bool
fitsSShort :: RoundMode -> MPFR -> Bool
decompose :: MPFR -> (Integer, Exp)

-- | Output a string in base 10 rounded to Near in exponential form.
toStringExp :: Word -> MPFR -> String

-- | Output a string in base 10 rounded to Near. The difference from
--   <tt>toStringExp</tt> is that it won't output in exponential form if it
--   is sensible to do so.
toString :: Word -> MPFR -> String
add :: RoundMode -> Precision -> MPFR -> MPFR -> MPFR
addw :: RoundMode -> Precision -> MPFR -> Word -> MPFR
addi :: RoundMode -> Precision -> MPFR -> Int -> MPFR
addd :: RoundMode -> Precision -> MPFR -> Double -> MPFR
sub :: RoundMode -> Precision -> MPFR -> MPFR -> MPFR
subw :: RoundMode -> Precision -> MPFR -> Word -> MPFR
subi :: RoundMode -> Precision -> MPFR -> Int -> MPFR
subd :: RoundMode -> Precision -> MPFR -> Double -> MPFR
wsub :: RoundMode -> Precision -> Word -> MPFR -> MPFR
isub :: RoundMode -> Precision -> Int -> MPFR -> MPFR
dsub :: RoundMode -> Precision -> Double -> MPFR -> MPFR
mul :: RoundMode -> Precision -> MPFR -> MPFR -> MPFR
mulw :: RoundMode -> Precision -> MPFR -> Word -> MPFR
muli :: RoundMode -> Precision -> MPFR -> Int -> MPFR
muld :: RoundMode -> Precision -> MPFR -> Double -> MPFR
sqr :: RoundMode -> Precision -> MPFR -> MPFR
div :: RoundMode -> Precision -> MPFR -> MPFR -> MPFR
divw :: RoundMode -> Precision -> MPFR -> Word -> MPFR
divi :: RoundMode -> Precision -> MPFR -> Int -> MPFR
divd :: RoundMode -> Precision -> MPFR -> Double -> MPFR
wdiv :: RoundMode -> Precision -> Word -> MPFR -> MPFR
idiv :: RoundMode -> Precision -> Int -> MPFR -> MPFR
ddiv :: RoundMode -> Precision -> Double -> MPFR -> MPFR
sqrt :: RoundMode -> Precision -> MPFR -> MPFR
sqrtw :: RoundMode -> Precision -> Word -> MPFR
recSqrt :: RoundMode -> Precision -> MPFR -> MPFR
cbrt :: RoundMode -> Precision -> MPFR -> MPFR
root :: RoundMode -> Precision -> MPFR -> Word -> MPFR
pow :: RoundMode -> Precision -> MPFR -> MPFR -> MPFR
poww :: RoundMode -> Precision -> MPFR -> Word -> MPFR
powi :: RoundMode -> Precision -> MPFR -> Int -> MPFR
wpoww :: RoundMode -> Precision -> Word -> Word -> MPFR
wpow :: RoundMode -> Precision -> Word -> MPFR -> MPFR
neg :: RoundMode -> Precision -> MPFR -> MPFR
absD :: RoundMode -> Precision -> MPFR -> MPFR
dim :: RoundMode -> Precision -> MPFR -> MPFR -> MPFR
mul2w :: RoundMode -> Precision -> MPFR -> Word -> MPFR
mul2i :: RoundMode -> Precision -> MPFR -> Int -> MPFR
div2w :: RoundMode -> Precision -> MPFR -> Word -> MPFR
div2i :: RoundMode -> Precision -> MPFR -> Int -> MPFR
add_ :: RoundMode -> Precision -> MPFR -> MPFR -> (MPFR, Int)
addw_ :: RoundMode -> Precision -> MPFR -> Word -> (MPFR, Int)
addi_ :: RoundMode -> Precision -> MPFR -> Int -> (MPFR, Int)
addd_ :: RoundMode -> Precision -> MPFR -> Double -> (MPFR, Int)
sub_ :: RoundMode -> Precision -> MPFR -> MPFR -> (MPFR, Int)
subw_ :: RoundMode -> Precision -> MPFR -> Word -> (MPFR, Int)
subi_ :: RoundMode -> Precision -> MPFR -> Int -> (MPFR, Int)
subd_ :: RoundMode -> Precision -> MPFR -> Double -> (MPFR, Int)
wsub_ :: RoundMode -> Precision -> Word -> MPFR -> (MPFR, Int)
isub_ :: RoundMode -> Precision -> Int -> MPFR -> (MPFR, Int)
dsub_ :: RoundMode -> Precision -> Double -> MPFR -> (MPFR, Int)
mul_ :: RoundMode -> Precision -> MPFR -> MPFR -> (MPFR, Int)
mulw_ :: RoundMode -> Precision -> MPFR -> Word -> (MPFR, Int)
muli_ :: RoundMode -> Precision -> MPFR -> Int -> (MPFR, Int)
muld_ :: RoundMode -> Precision -> MPFR -> Double -> (MPFR, Int)
sqr_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
div_ :: RoundMode -> Precision -> MPFR -> MPFR -> (MPFR, Int)
divw_ :: RoundMode -> Precision -> MPFR -> Word -> (MPFR, Int)
divi_ :: RoundMode -> Precision -> MPFR -> Int -> (MPFR, Int)
divd_ :: RoundMode -> Precision -> MPFR -> Double -> (MPFR, Int)
wdiv_ :: RoundMode -> Precision -> Word -> MPFR -> (MPFR, Int)
idiv_ :: RoundMode -> Precision -> Int -> MPFR -> (MPFR, Int)
ddiv_ :: RoundMode -> Precision -> Double -> MPFR -> (MPFR, Int)
sqrt_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
sqrtw_ :: RoundMode -> Precision -> Word -> (MPFR, Int)
recSqrt_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
cbrt_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
root_ :: RoundMode -> Precision -> MPFR -> Word -> (MPFR, Int)
pow_ :: RoundMode -> Precision -> MPFR -> MPFR -> (MPFR, Int)
poww_ :: RoundMode -> Precision -> MPFR -> Word -> (MPFR, Int)
powi_ :: RoundMode -> Precision -> MPFR -> Int -> (MPFR, Int)
wpoww_ :: RoundMode -> Precision -> Word -> Word -> (MPFR, Int)
wpow_ :: RoundMode -> Precision -> Word -> MPFR -> (MPFR, Int)
neg_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
absD_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
dim_ :: RoundMode -> Precision -> MPFR -> MPFR -> (MPFR, Int)
mul2w_ :: RoundMode -> Precision -> MPFR -> Word -> (MPFR, Int)
mul2i_ :: RoundMode -> Precision -> MPFR -> Int -> (MPFR, Int)
div2w_ :: RoundMode -> Precision -> MPFR -> Word -> (MPFR, Int)
div2i_ :: RoundMode -> Precision -> MPFR -> Int -> (MPFR, Int)
cmp :: MPFR -> MPFR -> Maybe Ordering
cmpw :: MPFR -> Word -> Maybe Ordering
cmpi :: MPFR -> Int -> Maybe Ordering
cmpd :: MPFR -> Double -> Maybe Ordering
cmp2w :: MPFR -> Word -> Exp -> Maybe Ordering
cmp2i :: MPFR -> Int -> Exp -> Maybe Ordering
cmpabs :: MPFR -> MPFR -> Maybe Ordering
isNaN :: MPFR -> Bool
isInfinite :: MPFR -> Bool
isNumber :: MPFR -> Bool
isZero :: MPFR -> Bool
sgn :: MPFR -> Maybe Int
greater :: MPFR -> MPFR -> Bool
greatereq :: MPFR -> MPFR -> Bool
less :: MPFR -> MPFR -> Bool
lesseq :: MPFR -> MPFR -> Bool
lessgreater :: MPFR -> MPFR -> Maybe Bool
equal :: MPFR -> MPFR -> Bool
unordered :: MPFR -> MPFR -> Maybe Bool
log :: RoundMode -> Precision -> MPFR -> MPFR
log2 :: RoundMode -> Precision -> MPFR -> MPFR
log10 :: RoundMode -> Precision -> MPFR -> MPFR
exp :: RoundMode -> Precision -> MPFR -> MPFR
exp2 :: RoundMode -> Precision -> MPFR -> MPFR
exp10 :: RoundMode -> Precision -> MPFR -> MPFR
sin :: RoundMode -> Precision -> MPFR -> MPFR
cos :: RoundMode -> Precision -> MPFR -> MPFR
tan :: RoundMode -> Precision -> MPFR -> MPFR
sec :: RoundMode -> Precision -> MPFR -> MPFR
csc :: RoundMode -> Precision -> MPFR -> MPFR
cot :: RoundMode -> Precision -> MPFR -> MPFR
sincos :: RoundMode -> Precision -> Precision -> MPFR -> (MPFR, MPFR)
asin :: RoundMode -> Precision -> MPFR -> MPFR
acos :: RoundMode -> Precision -> MPFR -> MPFR
atan :: RoundMode -> Precision -> MPFR -> MPFR
atan2 :: RoundMode -> Precision -> MPFR -> MPFR -> MPFR
sinh :: RoundMode -> Precision -> MPFR -> MPFR
cosh :: RoundMode -> Precision -> MPFR -> MPFR
tanh :: RoundMode -> Precision -> MPFR -> MPFR
sinhcosh :: RoundMode -> Precision -> Precision -> MPFR -> (MPFR, MPFR)
sech :: RoundMode -> Precision -> MPFR -> MPFR
csch :: RoundMode -> Precision -> MPFR -> MPFR
coth :: RoundMode -> Precision -> MPFR -> MPFR
acosh :: RoundMode -> Precision -> MPFR -> MPFR
asinh :: RoundMode -> Precision -> MPFR -> MPFR
atanh :: RoundMode -> Precision -> MPFR -> MPFR
facw :: RoundMode -> Precision -> Word -> MPFR
log1p :: RoundMode -> Precision -> MPFR -> MPFR
expm1 :: RoundMode -> Precision -> MPFR -> MPFR
eint :: RoundMode -> Precision -> MPFR -> MPFR
li2 :: RoundMode -> Precision -> MPFR -> MPFR
gamma :: RoundMode -> Precision -> MPFR -> MPFR
lngamma :: RoundMode -> Precision -> MPFR -> MPFR
lgamma :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
zeta :: RoundMode -> Precision -> MPFR -> MPFR
zetaw :: RoundMode -> Precision -> Word -> MPFR
erf :: RoundMode -> Precision -> MPFR -> MPFR
erfc :: RoundMode -> Precision -> MPFR -> MPFR
j0 :: RoundMode -> Precision -> MPFR -> MPFR
j1 :: RoundMode -> Precision -> MPFR -> MPFR
jn :: RoundMode -> Precision -> Int -> MPFR -> MPFR
y0 :: RoundMode -> Precision -> MPFR -> MPFR
y1 :: RoundMode -> Precision -> MPFR -> MPFR
yn :: RoundMode -> Precision -> Int -> MPFR -> MPFR
fma :: RoundMode -> Precision -> MPFR -> MPFR -> MPFR -> MPFR
fms :: RoundMode -> Precision -> MPFR -> MPFR -> MPFR -> MPFR
agm :: RoundMode -> Precision -> MPFR -> MPFR -> MPFR
hypot :: RoundMode -> Precision -> MPFR -> MPFR -> MPFR
pi :: RoundMode -> Precision -> MPFR
log2c :: RoundMode -> Precision -> MPFR
euler :: RoundMode -> Precision -> MPFR
catalan :: RoundMode -> Precision -> MPFR
log_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
log2_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
log10_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
exp_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
exp2_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
exp10_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
sin_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
cos_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
tan_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
sec_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
csc_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
cot_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
sincos_ :: RoundMode -> Precision -> Precision -> MPFR -> (MPFR, MPFR, Int)
asin_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
acos_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
atan_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
atan2_ :: RoundMode -> Precision -> MPFR -> MPFR -> (MPFR, Int)
sinh_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
cosh_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
tanh_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
sinhcosh_ :: RoundMode -> Precision -> Precision -> MPFR -> (MPFR, MPFR, Int)
sech_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
csch_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
coth_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
acosh_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
asinh_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
atanh_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
facw_ :: RoundMode -> Precision -> Word -> (MPFR, Int)
log1p_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
expm1_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
eint_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
li2_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
gamma_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
lngamma_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
lgamma_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int, Int)
zeta_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
zetaw_ :: RoundMode -> Precision -> Word -> (MPFR, Int)
erf_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
erfc_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
j0_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
j1_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
jn_ :: RoundMode -> Precision -> Int -> MPFR -> (MPFR, Int)
y0_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
y1_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
yn_ :: RoundMode -> Precision -> Int -> MPFR -> (MPFR, Int)
fma_ :: RoundMode -> Precision -> MPFR -> MPFR -> MPFR -> (MPFR, Int)
fms_ :: RoundMode -> Precision -> MPFR -> MPFR -> MPFR -> (MPFR, Int)
agm_ :: RoundMode -> Precision -> MPFR -> MPFR -> (MPFR, Int)
hypot_ :: RoundMode -> Precision -> MPFR -> MPFR -> (MPFR, Int)
pi_ :: RoundMode -> Precision -> (MPFR, Int)
log2c_ :: RoundMode -> Precision -> (MPFR, Int)
euler_ :: RoundMode -> Precision -> (MPFR, Int)
catalan_ :: RoundMode -> Precision -> (MPFR, Int)
freeCache :: IO ()
rint :: RoundMode -> Precision -> MPFR -> MPFR
ceil :: Precision -> MPFR -> MPFR
floor :: Precision -> MPFR -> MPFR
round :: Precision -> MPFR -> MPFR
trunc :: Precision -> MPFR -> MPFR
rintCeil :: RoundMode -> Precision -> MPFR -> MPFR
rintFloor :: RoundMode -> Precision -> MPFR -> MPFR
rintRound :: RoundMode -> Precision -> MPFR -> MPFR
rintTrunc :: RoundMode -> Precision -> MPFR -> MPFR
modf :: RoundMode -> Precision -> Precision -> MPFR -> (MPFR, MPFR)
frac :: RoundMode -> Precision -> MPFR -> MPFR
fmod :: RoundMode -> Precision -> MPFR -> MPFR -> MPFR
remainder :: RoundMode -> Precision -> MPFR -> MPFR -> MPFR
remquo :: RoundMode -> Precision -> MPFR -> MPFR -> (MPFR, Int)
rint_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
ceil_ :: Precision -> MPFR -> (MPFR, Int)
floor_ :: Precision -> MPFR -> (MPFR, Int)
round_ :: Precision -> MPFR -> (MPFR, Int)
trunc_ :: Precision -> MPFR -> (MPFR, Int)
rintCeil_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
rintFloor_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
rintRound_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
rintTrunc_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
modf_ :: RoundMode -> Precision -> Precision -> MPFR -> (MPFR, MPFR, Int)
frac_ :: RoundMode -> Precision -> MPFR -> (MPFR, Int)
fmod_ :: RoundMode -> Precision -> MPFR -> MPFR -> (MPFR, Int)
remainder_ :: RoundMode -> Precision -> MPFR -> MPFR -> (MPFR, Int)
remquo_ :: RoundMode -> Precision -> MPFR -> MPFR -> (MPFR, Int, Int)
isInteger :: MPFR -> Bool
nextToward :: MPFR -> MPFR -> MPFR
nextAbove :: MPFR -> MPFR
nextBelow :: MPFR -> MPFR
maxD :: RoundMode -> Precision -> MPFR -> MPFR -> MPFR
minD :: RoundMode -> Precision -> MPFR -> MPFR -> MPFR
newRandomStatePointer :: Ptr GmpRandState
urandomb :: Ptr GmpRandState -> Precision -> MPFR
getExp :: MPFR -> Exp
setExp :: MPFR -> Exp -> MPFR
signbit :: MPFR -> Bool
maxD_ :: RoundMode -> Precision -> MPFR -> MPFR -> (MPFR, Int)
minD_ :: RoundMode -> Precision -> MPFR -> MPFR -> (MPFR, Int)
getPrec :: MPFR -> Precision

-- | getMantissa and getExp return values such that
--   
--   <pre>
--   d = getMantissa d * 2^(getExp d - ceiling ((getPrec d) / bitsPerMPLimb)* bitsPerMPLimb )
--   </pre>
--   
--   In case of <tt>0</tt>, <tt>NaN</tt> or <tt>+-Inf</tt> getMantissa will
--   return <tt>0</tt>
getMantissa :: MPFR -> Integer
one :: MPFR
zero :: MPFR
maxPrec :: MPFR -> MPFR -> Precision


-- | This module defines instances <a>Num</a>, <a>Real</a>,
--   <a>Fractional</a>, <a>Floating</a> and <a>RealFrac</a> of <a>MPFR</a>.
--   Operations are rounded with <a>RoundMode</a> <a>Near</a> and computed
--   with maximum precision of two operands or with the precision of the
--   operand.
module Data.Number.MPFR.Instances.Near
instance RealFrac MPFR
instance Floating MPFR
instance Fractional MPFR
instance Real MPFR
instance Num MPFR
