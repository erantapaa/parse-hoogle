-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple bit vectors for Haskell
--   
@package bit-vector
@version 0.2.0


module Data.Vector.Bit

-- | A <a>BitVector</a> is a little-endian <a>Vector</a> of <a>Bool</a>s.
type BitVector = Vector Bool

-- | Converts an instance of <a>FiniteBits</a> to a <a>BitVector</a>.
unpack :: FiniteBits a => a -> BitVector

-- | Converts a <a>BitVector</a> to an instance of <a>Bits</a>.
pack :: (Num a, Bits a) => BitVector -> a
unpackInteger :: Integer -> BitVector
packInteger :: BitVector -> Integer
unpackInt :: Int -> BitVector
packInt :: BitVector -> Int

-- | Pads a <a>BitVector</a> to the specified length by adding a vector of
--   <a>False</a> values to the most-significant end.
pad :: Int -> BitVector -> BitVector

-- | Pads two <a>BitVector</a>s to the length of the longest vector. If the
--   vectors are the same length, <a>padMax</a> does nothing.
padMax :: BitVector -> BitVector -> (BitVector, BitVector)

-- | Like <a>zip</a>, except pads the vectors to equal length rather than
--   discarding elements of the longer vector.
zipPad :: BitVector -> BitVector -> Vector (Bool, Bool)

-- | Discards any <a>False</a> values at the most-significant end of the
--   given <a>BitVector</a>.
trimLeading :: BitVector -> BitVector

-- | Equality modulo trailing <a>False</a> bits
(==~) :: BitVector -> BitVector -> Bool
instance FiniteBits BitVector
instance Bits BitVector
instance Num BitVector
