-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Type-classes to convert values to and from ByteString.
--   
@package bytestring-conversion
@version 0.3.1

module Data.ByteString.Conversion.From

-- | Parse <a>ByteString</a>s.
class FromByteString a
parser :: FromByteString a => Parser a
fromByteString :: FromByteString a => ByteString -> Maybe a
fromByteString' :: FromByteString a => ByteString -> Maybe a
runParser :: Parser a -> ByteString -> Either String a
runParser' :: Parser a -> ByteString -> Either String a
instance (Integral a, Bits a) => FromByteString (Hex a)
instance FromByteString Word64
instance FromByteString Word32
instance FromByteString Word16
instance FromByteString Word8
instance FromByteString Word
instance FromByteString Int64
instance FromByteString Int32
instance FromByteString Int16
instance FromByteString Int8
instance FromByteString Int
instance FromByteString Integer
instance FromByteString Double
instance FromByteString Bool
instance FromByteString Text
instance FromByteString Text
instance FromByteString [Char]
instance FromByteString Char
instance (FoldCase a, FromByteString a) => FromByteString (CI a)
instance FromByteString a => FromByteString (List a)
instance FromByteString ByteString
instance FromByteString ByteString

module Data.ByteString.Conversion.To
class ToByteString a
builder :: ToByteString a => a -> Builder
toByteString :: ToByteString a => a -> ByteString

-- | Please note that this needs to convert from a lazy <a>ByteString</a>
--   to a strict one which involves copying the whole string.
toByteString' :: ToByteString a => a -> ByteString
runBuilder :: Builder -> ByteString
instance ToByteString a => ToByteString (CI a)
instance ToByteString Bool
instance ToByteString a => ToByteString (List a)
instance ToByteString (Hex Word64)
instance ToByteString (Hex Word32)
instance ToByteString (Hex Word16)
instance ToByteString (Hex Word8)
instance ToByteString (Hex Word)
instance ToByteString (Hex Int64)
instance ToByteString (Hex Int32)
instance ToByteString (Hex Int16)
instance ToByteString (Hex Int8)
instance ToByteString (Hex Int)
instance ToByteString Word64
instance ToByteString Word32
instance ToByteString Word16
instance ToByteString Word8
instance ToByteString Word
instance ToByteString Integer
instance ToByteString Int64
instance ToByteString Int32
instance ToByteString Int16
instance ToByteString Int8
instance ToByteString Int
instance ToByteString Double
instance ToByteString Float
instance ToByteString [Char]
instance ToByteString Char
instance ToByteString Text
instance ToByteString Text
instance ToByteString ByteString
instance ToByteString ByteString
instance ToByteString Builder

module Data.ByteString.Conversion
class ToByteString a
builder :: ToByteString a => a -> Builder

-- | Parse <a>ByteString</a>s.
class FromByteString a
parser :: FromByteString a => Parser a

-- | Newtype wrapper to parse and produce integral numbers in hexadecimal
--   format
newtype Hex a
Hex :: a -> Hex a
fromHex :: Hex a -> a

-- | Newtype wrapper to parse and produce a comma separated list of values.
newtype List a
List :: [a] -> List a
fromList :: List a -> [a]
toByteString :: ToByteString a => a -> ByteString

-- | Please note that this needs to convert from a lazy <a>ByteString</a>
--   to a strict one which involves copying the whole string.
toByteString' :: ToByteString a => a -> ByteString
runBuilder :: Builder -> ByteString
fromByteString :: FromByteString a => ByteString -> Maybe a
fromByteString' :: FromByteString a => ByteString -> Maybe a
runParser :: Parser a -> ByteString -> Either String a
runParser' :: Parser a -> ByteString -> Either String a
