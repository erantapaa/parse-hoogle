-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Redis connection for Wheb
--   
--   Implements basic functionality for:
--   
--   <ul>
--   <li><a>Hedis</a></li>
--   <li><a>Wheb</a></li>
--   </ul>
--   
--   Gives instances of Auth, Session and Cache backends for Wheb.
--   
--   <i>In action:</i>
--   
--   Use with language extensions <i>OverloadedStrings</i>
--   
--   <pre>
--   import Web.Wheb
--   import Web.Wheb.Plugins.Redis
--   
--   data MyCtx = MyCtx RedisContainer
--   
--   instance RedisApp MyCtx where
--     getRedisContainer (MyCtx rc) = rc
--   
--   main :: IO ()
--   main = do
--     opts &lt;- generateOptions $ do
--         r &lt;- initRedis defaultConnectInfo
--         addGET "home" rootPat ((runRedis $ get "hello") &gt;&gt;= (text . spack))
--         return (MyCtx r, ())
--   
--     runRawHandler opts $ do
--         runRedis $ set "hello" "world"
--   
--     runWhebServer opts
--   </pre>
@package wheb-redis
@version 0.0.1.0

module Web.Wheb.Plugins.Redis

-- | Run a Redis command inside of WhebT
runRedis :: (RedisApp g, MonadIO m) => Redis a -> WhebT g s m a

-- | Initialize Redis.
initRedis :: MonadIO m => ConnectInfo -> InitM g s m RedisContainer

-- | Initialize a container for using redis as a cache. You will probably
--   have a different DB and settings for your data and cache so this is
--   broken out.
initRedisCache :: MonadIO m => ConnectInfo -> InitM g s m RedisCacheContainer
class RedisApp a
getRedisContainer :: RedisApp a => a -> RedisContainer
class RedisCacheApp a
getRedisCacheContainer :: RedisCacheApp a => a -> RedisCacheContainer

-- | A container to use as a DB
data RedisContainer

-- | A seperate instance for cache
data RedisCacheContainer
instance AuthBackend RedisContainer
instance SessionBackend RedisContainer
instance CacheBackend RedisCacheContainer
instance RedisCacheApp a => CacheApp a
instance RedisApp a => AuthApp a
instance RedisApp a => SessionApp a
