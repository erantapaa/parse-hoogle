-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A MUD client library
--   
--   Yogurt is a functional MUD client featuring prioritized, regex-based
--   hooks, variables, timers, logging, dynamic loading of Yogurt scripts
--   and more. For example programs, please see Yogurt's home page.
--   
--   This package provides the library. To use Yogurt as a standalone
--   executable and dynamically load and reload Yogurt scripts, please see
--   package <tt>Yogurt-Standalone</tt>.
--   
--   If you do not wish to install the readline-based command-line
--   interface available in module <tt>Network.Yogurt.Readline</tt>,
--   install using <tt>cabal install Yogurt -f-readline</tt>.
@package Yogurt
@version 0.4.1


-- | The core of Yogurt, consisting of the Mud monad and all functions
--   manipulating this monad.
module Network.Yogurt.Mud

-- | The Mud monad is a state monad over IO.
type Mud = StateT MudState IO

-- | State internal to the Mud monad.
data MudState

-- | Run a Mud computation in IO. A common implementation of this function
--   is <tt><a>runMud</a> vState</tt>.
type RunMud = forall a. Mud a -> IO a

-- | Provides a way to output messages.
type Output = Destination -> String -> IO ()

-- | The abstract <tt>Hook</tt> type. For every pair of hooks <tt>(h1,
--   h2)</tt>:
--   
--   <ul>
--   <li><tt>h1 == h2</tt> iff they were created by the same call to
--   <a>mkHook</a>.</li>
--   <li><tt>h1 &lt; h2</tt> iff <tt>h1</tt> will match earlier than
--   <tt>h2</tt>.</li>
--   </ul>
data Hook

-- | The direction in which a message is going.
data Destination

-- | The message is headed towards the user's terminal.
Local :: Destination

-- | The message is headed towards the remote MUD server.
Remote :: Destination

-- | A <tt>Pattern</tt> is a regular expression.
type Pattern = String

-- | Variables hold updatable, typed data.
data Var a

-- | The initial state of the Mud monad. The <a>RunMud</a> argument is
--   stored in the state to make <a>forkWithCallback</a> possible; the
--   <a>Output</a> argument is used by <a>Mud</a> computations for messages
--   leaving the engine.
emptyMud :: RunMud -> Output -> MudState

-- | Runs a <a>Mud</a> computation, executes the results (such as sending
--   messages to the screen or the MUD) and returns the computation's
--   result. The <a>MVar</a> is updated.
runMud :: MVar MudState -> RunMud

-- | Calls <a>mkPrioHook</a> with priority 0.
mkHook :: Destination -> Pattern -> Mud a -> Mud Hook

-- | Creates and installs a hook that watches messages headed to the
--   specified destination and match the specified pattern.
mkPrioHook :: Int -> Destination -> Pattern -> Mud a -> Mud Hook

-- | Saves a changed hook, or reactivates it.
setHook :: Hook -> Mud ()

-- | Disables a hook.
rmHook :: Hook -> Mud ()

-- | Yields all current hooks in preferred firing order.
allHooks :: Mud [Hook]

-- | Yields the hook's priority.
hPriority :: Hook -> Int

-- | Yields the destination this hook watches.
hDestination :: Hook -> Destination

-- | Yields the pattern messages must have for this hook to fire.
hPattern :: Hook -> Pattern

-- | Yields the Mud program to execute when the hook fires.
hAction :: Hook -> Mud ()

-- | Yields the hook that is currently firing.
triggeredHook :: Mud Hook

-- | Yields the message that triggered the currently firing hook.
matchedLine :: Mud String

-- | Yields the part of the triggering message that comes before the
--   matched pattern.
before :: Mud String

-- | Yields the regex group from the matched pattern. <tt>group 0</tt>
--   yields the complete match; higher indices correspond to the
--   parenthesized groups.
group :: Int -> Mud String

-- | Yields the part of the triggering message that comes after the matched
--   pattern.
after :: Mud String

-- | Creates a variable with an initial value.
mkVar :: a -> Mud (Var a)

-- | Updates a variable to a new value.
setVar :: Var a -> a -> Mud ()

-- | Yields the variable's current value.
readVar :: Var a -> Mud a

-- | Updates the variable using the update function.
modifyVar :: Var a -> (a -> a) -> Mud ()

-- | Short for <tt><a>triggerJust</a> (const True)</tt>.
trigger :: Destination -> String -> Mud ()

-- | If the message triggers a hook that passes the specified test, it is
--   fired. Otherwise, the message is passed on to the destination using
--   <a>io</a>.
triggerJust :: (Hook -> Bool) -> Destination -> String -> Mud ()

-- | Immediately write a message to a destination, without triggering
--   hooks.
io :: Destination -> String -> Mud ()

-- | Lift a computation from the <a>IO</a> monad.
liftIO :: MonadIO m => forall a. IO a -> m a

-- | Used when you want a forked thread to be able to call back into the
--   <tt>Mud</tt> monad. Note that when using the <tt>RunMud</tt> argument,
--   the forked thread will have to contend with the threads for the user
--   input and MUD input, because only one <tt>Mud</tt> computation can run
--   at any given time. The id of the forked thread is returned.
forkWithCallback :: (RunMud -> IO ()) -> Mud ThreadId
instance Eq Destination
instance Show Destination
instance Read Destination
instance Enum Destination
instance Ord Destination
instance Show Hook
instance Ord Hook
instance Eq Hook


-- | Sessions are used by Yogurt's standalone executable <tt>yogurt</tt>;
--   see package <tt>Yogurt-Standalone</tt> on hackage.
--   
--   Every Yogurt file loaded by <tt>yogurt</tt> should define a value of
--   type <a>Session</a>. For future compatibility, such a session is best
--   defined using <a>session</a> as starting value:
--   
--   <pre>
--   import Network.Yogurt
--   
--   newmoon :: Session
--   newmoon = session
--     { hostName   = "eclipse.cs.pdx.edu"
--     , portNumber = 7680
--     , mudProgram = \reload -&gt; do
--         mkCommand "reload" reload
--     }
--   </pre>
--   
--   A module is free to define multiple sessions, in which case you will
--   have to tell <tt>yogurt</tt> which session to load.
module Network.Yogurt.Session

-- | Describes a MUD session.
data Session
Session :: String -> Int -> (Reload -> Mud ()) -> Session

-- | The hostname to connect to.
hostName :: Session -> String

-- | The port to connect to.
portNumber :: Session -> Int

-- | The initial program to run. The <a>Reload</a> argument provides a way
--   to reload the plugin without interrupting the MUD connection.
mudProgram :: Session -> Reload -> Mud ()

-- | When executed, reloads the session from disk without interrupting the
--   MUD connection. If the reloaded session contains no errors, all hooks
--   are uninstalled before the reloaded program is executed. Timers are
--   <i>not</i> stopped and previous variables will still be reachable if
--   you hang on to their handles.
type Reload = Mud ()

-- | Starting value for sessions. The default <a>mudProgram</a> is
--   <tt>return ()</tt>. There are no default values for <a>hostName</a>
--   and <a>portNumber</a>.
session :: Session
instance Typeable Session


-- | Convenience functions on top of <a>Yogurt.Mud</a>.
module Network.Yogurt.Utils

-- | Creates a hook that watches messages headed to the terminal. When
--   fired, the message is passed on to the terminal and the action is
--   executed.
mkTrigger :: Pattern -> Mud a -> Mud Hook

-- | Like <a>mkTrigger</a>, but fires at most once.
mkTriggerOnce :: Pattern -> Mud a -> Mud Hook

-- | For each pair <tt>(pattern, action)</tt> a hook is installed. As soon
--   as one of the hooks fires, the hooks are removed and the corresponding
--   action is executed.
triggerOneOf :: [(Pattern, Mud ())] -> Mud ()

-- | <tt>mkAlias command subst</tt> creates a hook that watches messages
--   headed to the remote MUD. If the message is or starts with the word
--   <tt>command</tt>, the command is replaced by <tt>subst</tt> before
--   being sent to the MUD.
mkAlias :: String -> String -> Mud Hook

-- | Like <a>mkAlias</a>, <tt>mkArgAlias command subst</tt> creates a hook
--   that watches messages headed to the remote MUD. But here the whole
--   message is substituted instead of just the first command word, and the
--   substitution depends on the command's arguments.
mkArgAlias :: String -> ([String] -> String) -> Mud Hook

-- | Like <a>mkAlias</a>, but instead of substituting the command, a
--   program is executed. The command's arguments are available as
--   <a>group</a> 1.
mkCommand :: String -> Mud a -> Mud Hook

-- | The abstract Timer type.
data Timer

-- | Interval in milliseconds.
type Interval = Int

-- | <tt>mkTimer interval prog</tt> creates a timer that executes
--   <tt>prog</tt> every <tt>interval</tt> milliseconds.
mkTimer :: Interval -> Mud a -> Mud Timer

-- | Creates a timer that fires only once.
mkTimerOnce :: Interval -> Mud a -> Mud Timer

-- | Disables the timer.
rmTimer :: Timer -> Mud ()

-- | Checks whether a timer is active. A timer is deactivated by
--   <a>rmTimer</a>.
isTimerActive :: Timer -> Mud Bool

-- | Sends a message to the terminal, triggering hooks.
receive :: String -> Mud ()

-- | Sends a message appended with a newline character to the MUD,
--   triggering hooks.
sendln :: String -> Mud ()

-- | Sends a message to the terminal, without triggering hooks.
echo :: String -> Mud ()

-- | Sends a message appended with a newline character to the terminal,
--   without triggering hooks.
echoln :: String -> Mud ()

-- | Sends a message appended with a newline character to the MUD, without
--   triggering hooks.
echorln :: String -> Mud ()

-- | Sends a bell character to the terminal.
bell :: Mud ()
type Logger = (Hook, Hook)

-- | <tt>startLogging name</tt> causes all messages to be logged in a file
--   called <tt>name-yyyymmdd-hhmm.log</tt>. The used hooks have priority
--   100.
startLogging :: String -> Mud Logger

-- | Stops the logger.
stopLogging :: Logger -> Mud ()

-- | When called from a hook body, gives hooks that haven't been considered
--   yet a chance to match on the currently triggering message. If no other
--   hooks match, the message is sent on to its destination. Useful if you
--   want to build a hook that only has a side-effect and doesn't want to
--   directly affect the other active hooks.
matchMore :: Mud ()

-- | Like <a>matchMore</a>, but allows specification of the message that is
--   passed on.
matchMoreOn :: String -> Mud ()

-- | Like <a>matchMoreOn</a>, but also makes the currently firing hook
--   eligible for firing again.
matchMoreOn' :: String -> Mud ()


-- | Provides Yogurt's version number and re-exports the other modules.
module Network.Yogurt

-- | The version number of this version of the library.
version :: Version
