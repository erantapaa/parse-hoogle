-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Amazon DynamoDB SDK.
--   
@package amazonka-dynamodb
@version 0.3.6

module Network.AWS.DynamoDB.Types

-- | Version <tt>2012-08-10</tt> of the Amazon DynamoDB service.
data DynamoDB
data JSONError :: *
data WriteRequest

-- | <a>WriteRequest</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>wDeleteRequest</a> <tt>::</tt> <a>Maybe</a>
--   <a>DeleteRequest</a></li>
--   <li><a>wPutRequest</a> <tt>::</tt> <a>Maybe</a> <a>PutRequest</a></li>
--   </ul>
writeRequest :: WriteRequest

-- | A request to perform a <i>DeleteItem</i> operation.
wDeleteRequest :: Lens' WriteRequest (Maybe DeleteRequest)

-- | A request to perform a <i>PutItem</i> operation.
wPutRequest :: Lens' WriteRequest (Maybe PutRequest)
data ProvisionedThroughputDescription

-- | <a>ProvisionedThroughputDescription</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>ptdLastDecreaseDateTime</a> <tt>::</tt> <a>Maybe</a>
--   <a>UTCTime</a></li>
--   <li><a>ptdLastIncreaseDateTime</a> <tt>::</tt> <a>Maybe</a>
--   <a>UTCTime</a></li>
--   <li><a>ptdNumberOfDecreasesToday</a> <tt>::</tt> <a>Maybe</a>
--   <a>Natural</a></li>
--   <li><a>ptdReadCapacityUnits</a> <tt>::</tt> <a>Maybe</a>
--   <a>Natural</a></li>
--   <li><a>ptdWriteCapacityUnits</a> <tt>::</tt> <a>Maybe</a>
--   <a>Natural</a></li>
--   </ul>
provisionedThroughputDescription :: ProvisionedThroughputDescription

-- | The date and time of the last provisioned throughput decrease for this
--   table.
ptdLastDecreaseDateTime :: Lens' ProvisionedThroughputDescription (Maybe UTCTime)

-- | The date and time of the last provisioned throughput increase for this
--   table.
ptdLastIncreaseDateTime :: Lens' ProvisionedThroughputDescription (Maybe UTCTime)

-- | The number of provisioned throughput decreases for this table during
--   this UTC calendar day. For current maximums on provisioned throughput
--   decreases, see <a>Limits</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
ptdNumberOfDecreasesToday :: Lens' ProvisionedThroughputDescription (Maybe Natural)

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <i>ThrottlingException</i>. Eventually
--   consistent reads require less effort than strongly consistent reads,
--   so a setting of 50 <i>ReadCapacityUnits</i> per second provides 100
--   eventually consistent <i>ReadCapacityUnits</i> per second.
ptdReadCapacityUnits :: Lens' ProvisionedThroughputDescription (Maybe Natural)

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <i>ThrottlingException</i>.
ptdWriteCapacityUnits :: Lens' ProvisionedThroughputDescription (Maybe Natural)
data KeyType

-- | HASH
Hash :: KeyType

-- | RANGE
Range :: KeyType
data AttributeValue

-- | <a>AttributeValue</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>avB</a> <tt>::</tt> <a>Maybe</a> <a>Base64</a></li>
--   <li><a>avBOOL</a> <tt>::</tt> <a>Maybe</a> <a>Bool</a></li>
--   <li><a>avBS</a> <tt>::</tt> [<a>Base64</a>]</li>
--   <li><a>avL</a> <tt>::</tt> [<a>AttributeValue</a>]</li>
--   <li><a>avM</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>AttributeValue</a></li>
--   <li><a>avN</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>avNS</a> <tt>::</tt> [<a>Text</a>]</li>
--   <li><a>avNULL</a> <tt>::</tt> <a>Maybe</a> <a>Bool</a></li>
--   <li><a>avS</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>avSS</a> <tt>::</tt> [<a>Text</a>]</li>
--   </ul>
attributeValue :: AttributeValue

-- | A Binary data type.
avB :: Lens' AttributeValue (Maybe Base64)

-- | A Boolean data type.
avBOOL :: Lens' AttributeValue (Maybe Bool)

-- | A Binary Set data type.
avBS :: Lens' AttributeValue [Base64]

-- | A List of attribute values.
avL :: Lens' AttributeValue [AttributeValue]

-- | A Map of attribute values.
avM :: Lens' AttributeValue (HashMap Text AttributeValue)

-- | A Number data type.
avN :: Lens' AttributeValue (Maybe Text)

-- | A Number Set data type.
avNS :: Lens' AttributeValue [Text]

-- | A Null data type.
avNULL :: Lens' AttributeValue (Maybe Bool)

-- | A String data type.
avS :: Lens' AttributeValue (Maybe Text)

-- | A String Set data type.
avSS :: Lens' AttributeValue [Text]
data IndexStatus

-- | ACTIVE
Active :: IndexStatus

-- | CREATING
Creating :: IndexStatus

-- | DELETING
Deleting :: IndexStatus

-- | UPDATING
Updating :: IndexStatus
data ProvisionedThroughput

-- | <a>ProvisionedThroughput</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>ptReadCapacityUnits</a> <tt>::</tt> <a>Natural</a></li>
--   <li><a>ptWriteCapacityUnits</a> <tt>::</tt> <a>Natural</a></li>
--   </ul>
provisionedThroughput :: Natural -> Natural -> ProvisionedThroughput

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <i>ThrottlingException</i>. For more
--   information, see <a>SpecifyingRead and Write Requirements</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
ptReadCapacityUnits :: Lens' ProvisionedThroughput Natural

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <i>ThrottlingException</i>. For more information, see
--   <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
ptWriteCapacityUnits :: Lens' ProvisionedThroughput Natural
data TableStatus

-- | ACTIVE
TSActive :: TableStatus

-- | CREATING
TSCreating :: TableStatus

-- | DELETING
TSDeleting :: TableStatus

-- | UPDATING
TSUpdating :: TableStatus
data ProjectionType

-- | ALL
All :: ProjectionType

-- | INCLUDE
Include :: ProjectionType

-- | KEYS_ONLY
KeysOnly :: ProjectionType
data TableDescription

-- | <a>TableDescription</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>tdAttributeDefinitions</a> <tt>::</tt>
--   [<a>AttributeDefinition</a>]</li>
--   <li><a>tdCreationDateTime</a> <tt>::</tt> <a>UTCTime</a></li>
--   <li><a>tdGlobalSecondaryIndexes</a> <tt>::</tt>
--   [<a>GlobalSecondaryIndexDescription</a>]</li>
--   <li><a>tdItemCount</a> <tt>::</tt> <a>Integer</a></li>
--   <li><a>tdKeySchema</a> <tt>::</tt> <a>NonEmpty</a>
--   <a>KeySchemaElement</a></li>
--   <li><a>tdLocalSecondaryIndexes</a> <tt>::</tt>
--   [<a>LocalSecondaryIndexDescription</a>]</li>
--   <li><a>tdProvisionedThroughput</a> <tt>::</tt>
--   <a>ProvisionedThroughputDescription</a></li>
--   <li><a>tdTableName</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>tdTableSizeBytes</a> <tt>::</tt> <a>Integer</a></li>
--   <li><a>tdTableStatus</a> <tt>::</tt> <a>TableStatus</a></li>
--   </ul>
tableDescription :: Text -> NonEmpty KeySchemaElement -> TableStatus -> UTCTime -> ProvisionedThroughputDescription -> Integer -> Integer -> TableDescription

-- | An array of <i>AttributeDefinition</i> objects. Each of these objects
--   describes one attribute in the table and index key schema.
--   
--   Each <i>AttributeDefinition</i> object in this array is composed of:
--   
--   <i>AttributeName</i> - The name of the attribute.
--   
--   <i>AttributeType</i> - The data type for the attribute.
tdAttributeDefinitions :: Lens' TableDescription [AttributeDefinition]

-- | The date and time when the table was created, in <a>UNIX epoch
--   time</a> format.
tdCreationDateTime :: Lens' TableDescription UTCTime

-- | The global secondary indexes, if any, on the table. Each index is
--   scoped to a given hash key value. Each element is composed of:
--   
--   <i>Backfilling</i> - If true, then the index is currently in the
--   backfilling phase. Backfilling occurs only when a new global secondary
--   index is added to the table; it is the process by which DynamoDB
--   populates the new index with data from the table. (This attribute does
--   not appear for indexes that were created during a <i>CreateTable</i>
--   operation.)
--   
--   <i>IndexName</i> - The name of the global secondary index.
--   
--   <i>IndexSizeBytes</i> - The total size of the global secondary index,
--   in bytes. DynamoDB updates this value approximately every six hours.
--   Recent changes might not be reflected in this value.
--   
--   <i>IndexStatus</i> - The current status of the global secondary index:
--   
--   <i>CREATING</i> - The index is being created.
--   
--   <i>UPDATING</i> - The index is being updated.
--   
--   <i>DELETING</i> - The index is being deleted.
--   
--   <i>ACTIVE</i> - The index is ready for use.
--   
--   <i>ItemCount</i> - The number of items in the global secondary index.
--   DynamoDB updates this value approximately every six hours. Recent
--   changes might not be reflected in this value.
--   
--   <i>KeySchema</i> - Specifies the complete index key schema. The
--   attribute names in the key schema must be between 1 and 255 characters
--   (inclusive). The key schema must begin with the same hash key
--   attribute as the table.
--   
--   <i>Projection</i> - Specifies attributes that are copied (projected)
--   from the table into the index. These are in addition to the primary
--   key attributes and index key attributes, which are automatically
--   projected. Each attribute specification is composed of:
--   
--   <i>ProjectionType</i> - One of the following:
--   
--   <tt>KEYS_ONLY</tt> - Only the index and primary keys are projected
--   into the index.
--   
--   <tt>INCLUDE</tt> - Only the specified table attributes are projected
--   into the index. The list of projected attributes are in
--   <i>NonKeyAttributes</i>.
--   
--   <tt>ALL</tt> - All of the table attributes are projected into the
--   index.
--   
--   <i>NonKeyAttributes</i> - A list of one or more non-key attribute
--   names that are projected into the secondary index. The total count of
--   attributes provided in <i>NonKeyAttributes</i>, summed across all of
--   the secondary indexes, must not exceed 20. If you project the same
--   attribute into two different indexes, this counts as two distinct
--   attributes when determining the total.
--   
--   <i>ProvisionedThroughput</i> - The provisioned throughput settings for
--   the global secondary index, consisting of read and write capacity
--   units, along with data about increases and decreases.
--   
--   If the table is in the <tt>DELETING</tt> state, no information about
--   indexes will be returned.
tdGlobalSecondaryIndexes :: Lens' TableDescription [GlobalSecondaryIndexDescription]

-- | The number of items in the specified table. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
tdItemCount :: Lens' TableDescription Integer

-- | The primary key structure for the table. Each <i>KeySchemaElement</i>
--   consists of:
--   
--   <i>AttributeName</i> - The name of the attribute.
--   
--   <i>KeyType</i> - The key type for the attribute. Can be either
--   <tt>HASH</tt> or <tt>RANGE</tt>.
--   
--   For more information about primary keys, see <a>Primary Key</a> in the
--   <i>AmazonDynamoDB Developer Guide</i>.
tdKeySchema :: Lens' TableDescription (NonEmpty KeySchemaElement)

-- | Represents one or more local secondary indexes on the table. Each
--   index is scoped to a given hash key value. Tables with one or more
--   local secondary indexes are subject to an item collection size limit,
--   where the amount of data within a given item collection cannot exceed
--   10 GB. Each element is composed of:
--   
--   <i>IndexName</i> - The name of the local secondary index.
--   
--   <i>KeySchema</i> - Specifies the complete index key schema. The
--   attribute names in the key schema must be between 1 and 255 characters
--   (inclusive). The key schema must begin with the same hash key
--   attribute as the table.
--   
--   <i>Projection</i> - Specifies attributes that are copied (projected)
--   from the table into the index. These are in addition to the primary
--   key attributes and index key attributes, which are automatically
--   projected. Each attribute specification is composed of:
--   
--   <i>ProjectionType</i> - One of the following:
--   
--   <tt>KEYS_ONLY</tt> - Only the index and primary keys are projected
--   into the index.
--   
--   <tt>INCLUDE</tt> - Only the specified table attributes are projected
--   into the index. The list of projected attributes are in
--   <i>NonKeyAttributes</i>.
--   
--   <tt>ALL</tt> - All of the table attributes are projected into the
--   index.
--   
--   <i>NonKeyAttributes</i> - A list of one or more non-key attribute
--   names that are projected into the secondary index. The total count of
--   attributes provided in <i>NonKeyAttributes</i>, summed across all of
--   the secondary indexes, must not exceed 20. If you project the same
--   attribute into two different indexes, this counts as two distinct
--   attributes when determining the total.
--   
--   <i>IndexSizeBytes</i> - Represents the total size of the index, in
--   bytes. DynamoDB updates this value approximately every six hours.
--   Recent changes might not be reflected in this value.
--   
--   <i>ItemCount</i> - Represents the number of items in the index.
--   DynamoDB updates this value approximately every six hours. Recent
--   changes might not be reflected in this value.
--   
--   If the table is in the <tt>DELETING</tt> state, no information about
--   indexes will be returned.
tdLocalSecondaryIndexes :: Lens' TableDescription [LocalSecondaryIndexDescription]

-- | The provisioned throughput settings for the table, consisting of read
--   and write capacity units, along with data about increases and
--   decreases.
tdProvisionedThroughput :: Lens' TableDescription ProvisionedThroughputDescription

-- | The name of the table.
tdTableName :: Lens' TableDescription Text

-- | The total size of the specified table, in bytes. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
tdTableSizeBytes :: Lens' TableDescription Integer

-- | The current state of the table:
--   
--   <i>CREATING</i> - The table is being created.
--   
--   <i>UPDATING</i> - The table is being updated.
--   
--   <i>DELETING</i> - The table is being deleted.
--   
--   <i>ACTIVE</i> - The table is ready for use.
tdTableStatus :: Lens' TableDescription TableStatus
data KeysAndAttributes

-- | <a>KeysAndAttributes</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>kaaAttributesToGet</a> <tt>::</tt> <a>NonEmpty</a>
--   <a>Text</a></li>
--   <li><a>kaaConsistentRead</a> <tt>::</tt> <a>Maybe</a> <a>Bool</a></li>
--   <li><a>kaaExpressionAttributeNames</a> <tt>::</tt> <a>HashMap</a>
--   <a>Text</a> <a>Text</a></li>
--   <li><a>kaaKeys</a> <tt>::</tt> <a>NonEmpty</a> (<a>HashMap</a>
--   <a>Text</a> <a>AttributeValue</a>)</li>
--   <li><a>kaaProjectionExpression</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   </ul>
keysAndAttributes :: NonEmpty (HashMap Text AttributeValue) -> NonEmpty Text -> KeysAndAttributes

-- | One or more attributes to retrieve from the table or index. If no
--   attribute names are specified then all attributes will be returned. If
--   any of the specified attributes are not found, they will not appear in
--   the result.
kaaAttributesToGet :: Lens' KeysAndAttributes (NonEmpty Text)

-- | The consistency of a read operation. If set to <tt>true</tt>, then a
--   strongly consistent read is used; otherwise, an eventually consistent
--   read is used.
kaaConsistentRead :: Lens' KeysAndAttributes (Maybe Bool)

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <i>ExpressionAttributeNames</i>:
--   
--   To access an attribute whose name conflicts with a DynamoDB reserved
--   word.
--   
--   To create a placeholder for repeating occurrences of an attribute name
--   in an expression.
--   
--   To prevent special characters in an attribute name from being
--   misinterpreted in an expression.
--   
--   Use the # character in an expression to dereference an attribute name.
--   For example, consider the following attribute name:
--   
--   <tt>Percentile</tt>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <i>ExpressionAttributeNames</i>:
--   
--   '{"#P":<a>Percentile</a>}'
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   '#P = :val'
--   
--   Tokens that begin with the : character are <i>expression attribute
--   values</i>, which are placeholders for the actual value at runtime.
--   
--   For more information on expression attribute names, see <a>Using
--   Placeholdersfor Attribute Names and Values</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
kaaExpressionAttributeNames :: Lens' KeysAndAttributes (HashMap Text Text)

-- | The primary key attribute values that define the items and the
--   attributes associated with the items.
kaaKeys :: Lens' KeysAndAttributes (NonEmpty (HashMap Text AttributeValue))

-- | A string that identifies one or more attributes to retrieve from the
--   table. These attributes can include scalars, sets, or elements of a
--   JSON document. The attributes in the <i>ProjectionExpression</i> must
--   be separated by commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Accessing Item Attributes</a> in the
--   <i>Amazon DynamoDBDeveloper Guide</i>.
--   
--   <i>ProjectionExpression</i> replaces the legacy <i>AttributesToGet</i>
--   parameter.
kaaProjectionExpression :: Lens' KeysAndAttributes (Maybe Text)
data ReturnConsumedCapacity

-- | INDEXES
Indexes :: ReturnConsumedCapacity

-- | NONE
None :: ReturnConsumedCapacity

-- | TOTAL
Total :: ReturnConsumedCapacity
data ReturnItemCollectionMetrics

-- | NONE
RICMNone :: ReturnItemCollectionMetrics

-- | SIZE
RICMSize :: ReturnItemCollectionMetrics
data AttributeValueUpdate

-- | <a>AttributeValueUpdate</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>avuAction</a> <tt>::</tt> <a>Maybe</a>
--   <a>AttributeAction</a></li>
--   <li><a>avuValue</a> <tt>::</tt> <a>Maybe</a>
--   <a>AttributeValue</a></li>
--   </ul>
attributeValueUpdate :: AttributeValueUpdate

-- | Specifies how to perform the update. Valid values are <a>PUT</a>
--   (default), <a>DELETE</a>, and <tt>ADD</tt>. The behavior depends on
--   whether the specified primary key already exists in the table.
--   
--   If an item with the specified <i>Key</i> is found in the table:
--   
--   <a>PUT</a> - Adds the specified attribute to the item. If the
--   attribute already exists, it is replaced by the new value.
--   
--   <a>DELETE</a> - If no value is specified, the attribute and its value
--   are removed from the item. The data type of the specified value must
--   match the existing value's data type.
--   
--   If a <i>set</i> of values is specified, then those values are
--   subtracted from the old set. For example, if the attribute value was
--   the set '[a,b,c]' and the <i>DELETE</i> action specified '[a,c]', then
--   the final attribute value would be '[b]'. Specifying an empty set is
--   an error.
--   
--   <tt>ADD</tt> - If the attribute does not already exist, then the
--   attribute and its values are added to the item. If the attribute does
--   exist, then the behavior of <tt>ADD</tt> depends on the data type of
--   the attribute:
--   
--   If the existing attribute is a number, and if <i>Value</i> is also a
--   number, then the <i>Value</i> is mathematically added to the existing
--   attribute. If <i>Value</i> is a negative number, then it is subtracted
--   from the existing attribute.
--   
--   If you use <tt>ADD</tt> to increment or decrement a number value for
--   an item that doesn't exist before the update, DynamoDB uses 0 as the
--   initial value.
--   
--   In addition, if you use <tt>ADD</tt> to update an existing item, and
--   intend to increment or decrement an attribute value which does not yet
--   exist, DynamoDB uses '0' as the initial value. For example, suppose
--   that the item you want to update does not yet have an attribute named
--   <i>itemcount</i>, but you decide to <tt>ADD</tt> the number '3' to
--   this attribute anyway, even though it currently does not exist.
--   DynamoDB will create the <i>itemcount</i> attribute, set its initial
--   value to '0', and finally add '3' to it. The result will be a new
--   <i>itemcount</i> attribute in the item, with a value of '3'.
--   
--   If the existing data type is a set, and if the <i>Value</i> is also a
--   set, then the <i>Value</i> is added to the existing set. (This is a
--   <i>set</i> operation, not mathematical addition.) For example, if the
--   attribute value was the set '[1,2]', and the <tt>ADD</tt> action
--   specified '[3]', then the final attribute value would be '[1,2,3]'. An
--   error occurs if an Add action is specified for a set attribute and the
--   attribute type specified does not match the existing set type.
--   
--   Both sets must have the same primitive data type. For example, if the
--   existing data type is a set of strings, the <i>Value</i> must also be
--   a set of strings. The same holds true for number sets and binary sets.
--   
--   This action is only valid for an existing attribute whose data type is
--   number or is a set. Do not use <tt>ADD</tt> for any other data types.
--   
--   If no item with the specified <i>Key</i> is found:
--   
--   <a>PUT</a> - DynamoDB creates a new item with the specified primary
--   key, and then adds the attribute.
--   
--   <a>DELETE</a> - Nothing happens; there is no attribute to delete.
--   
--   <tt>ADD</tt> - DynamoDB creates an item with the supplied primary key
--   and number (or set of numbers) for the attribute value. The only data
--   types allowed are number and number set; no other data types can be
--   specified.
avuAction :: Lens' AttributeValueUpdate (Maybe AttributeAction)
avuValue :: Lens' AttributeValueUpdate (Maybe AttributeValue)
data ExpectedAttributeValue

-- | <a>ExpectedAttributeValue</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>eavAttributeValueList</a> <tt>::</tt>
--   [<a>AttributeValue</a>]</li>
--   <li><a>eavComparisonOperator</a> <tt>::</tt> <a>Maybe</a>
--   <a>ComparisonOperator</a></li>
--   <li><a>eavExists</a> <tt>::</tt> <a>Maybe</a> <a>Bool</a></li>
--   <li><a>eavValue</a> <tt>::</tt> <a>Maybe</a>
--   <a>AttributeValue</a></li>
--   </ul>
expectedAttributeValue :: ExpectedAttributeValue

-- | One or more values to evaluate against the supplied attribute. The
--   number of values in the list depends on the <i>ComparisonOperator</i>
--   being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <a>B</a>. For
--   a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
--   
--   For information on specifying data types in JSON, see <a>JSON Data
--   Format</a> in the <i>Amazon DynamoDB Developer Guide</i>.
eavAttributeValueList :: Lens' ExpectedAttributeValue [AttributeValue]

-- | A comparator for evaluating attributes in the
--   <i>AttributeValueList</i>. For example, equals, greater than, less
--   than, etc.
--   
--   The following comparison operators are available:
--   
--   'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS |
--   NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'
--   
--   The following are descriptions of each comparison operator.
--   
--   <a>EQ</a> : Equal. <a>EQ</a> is supported for all datatypes, including
--   lists and maps.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, Binary, String Set, Number Set, or
--   Binary Set. If an item contains an <i>AttributeValue</i> element of a
--   different type than the one provided in the request, the value does
--   not match. For example, '{<a>S</a>:"6"}' does not equal
--   '{<a>N</a>:"6"}'. Also, '{<a>N</a>:"6"}' does not equal
--   '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all datatypes,
--   including lists and maps.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   of type String, Number, Binary, String Set, Number Set, or Binary Set.
--   If an item contains an <i>AttributeValue</i> of a different type than
--   the one provided in the request, the value does not match. For
--   example, '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not equal '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>LE</tt> : Less than or equal.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <a>LT</a> : Less than.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>GE</tt> : Greater than or equal.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <a>GT</a> : Greater than.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all datatypes, including lists and maps.
--   
--   This operator tests for the existence of an attribute, not its data
--   type. If the data type of attribute "<tt>a</tt>" is null, and you
--   evaluate it using <tt>NOT_NULL</tt>, the result is a Boolean
--   <i>true</i>. This result is because the attribute "<tt>a</tt>" exists;
--   its data type is not relevant to the <tt>NOT_NULL</tt> comparison
--   operator.
--   
--   <tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all datatypes, including lists and maps.
--   
--   This operator tests for the nonexistence of an attribute, not its data
--   type. If the data type of attribute "<tt>a</tt>" is null, and you
--   evaluate it using <tt>NULL</tt>, the result is a Boolean <i>false</i>.
--   This is because the attribute "<tt>a</tt>" exists; its data type is
--   not relevant to the <tt>NULL</tt> comparison operator.
--   
--   <tt>CONTAINS</tt> : Checks for a subsequence, or value in a set.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If the
--   target attribute of the comparison is of type String, then the
--   operator checks for a substring match. If the target attribute of the
--   comparison is of type Binary, then the operator looks for a
--   subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.
--   
--   CONTAINS is supported for lists: When evaluating "'a CONTAINS b'",
--   "<tt>a</tt>" can be a list; however, "<tt>b</tt>" cannot be a set, a
--   map, or a list.
--   
--   <tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If the
--   target attribute of the comparison is a String, then the operator
--   checks for the absence of a substring match. If the target attribute
--   of the comparison is Binary, then the operator checks for the absence
--   of a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it <i>does
--   not</i> find an exact match with any member of the set.
--   
--   NOT_CONTAINS is supported for lists: When evaluating "'a NOT CONTAINS
--   b'", "<tt>a</tt>" can be a list; however, "<tt>b</tt>" cannot be a
--   set, a map, or a list.
--   
--   <tt>BEGINS_WITH</tt> : Checks for a prefix.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   of type String or Binary (not a Number or a set type). The target
--   attribute of the comparison must be of type String or Binary (not a
--   Number or a set type).
--   
--   <tt>IN</tt> : Checks for matching elements within two sets.
--   
--   <i>AttributeValueList</i> can contain one or more
--   <i>AttributeValue</i> elements of type String, Number, or Binary (not
--   a set type). These attributes are compared against an existing set
--   type attribute of an item. If any elements of the input set are
--   present in the item attribute, the expression evaluates to true.
--   
--   <tt>BETWEEN</tt> : Greater than or equal to the first value, and less
--   than or equal to the second value.
--   
--   <i>AttributeValueList</i> must contain two <i>AttributeValue</i>
--   elements of the same type, either String, Number, or Binary (not a set
--   type). A target attribute matches if the target value is greater than,
--   or equal to, the first element and less than, or equal to, the second
--   element. If an item contains an <i>AttributeValue</i> element of a
--   different type than the one provided in the request, the value does
--   not match. For example, '{<a>S</a>:"6"}' does not compare to
--   '{<a>N</a>:"6"}'. Also, '{<a>N</a>:"6"}' does not compare to
--   '{<a>NS</a>:["6", "2", "1"]}'
eavComparisonOperator :: Lens' ExpectedAttributeValue (Maybe ComparisonOperator)

-- | Causes DynamoDB to evaluate the value before attempting a conditional
--   operation:
--   
--   If <i>Exists</i> is <tt>true</tt>, DynamoDB will check to see if that
--   attribute value already exists in the table. If it is found, then the
--   operation succeeds. If it is not found, the operation fails with a
--   <i>ConditionalCheckFailedException</i>.
--   
--   If <i>Exists</i> is <tt>false</tt>, DynamoDB assumes that the
--   attribute value does not exist in the table. If in fact the value does
--   not exist, then the assumption is valid and the operation succeeds. If
--   the value is found, despite the assumption that it does not exist, the
--   operation fails with a <i>ConditionalCheckFailedException</i>.
--   
--   The default setting for <i>Exists</i> is <tt>true</tt>. If you supply
--   a <i>Value</i> all by itself, DynamoDB assumes the attribute exists:
--   You don't have to set <i>Exists</i> to <tt>true</tt>, because it is
--   implied.
--   
--   DynamoDB returns a <i>ValidationException</i> if:
--   
--   <i>Exists</i> is <tt>true</tt> but there is no <i>Value</i> to check.
--   (You expect a value to exist, but don't specify what that value is.)
--   
--   <i>Exists</i> is <tt>false</tt> but you also provide a <i>Value</i>.
--   (You cannot expect an attribute to have a value, while also expecting
--   it not to exist.)
eavExists :: Lens' ExpectedAttributeValue (Maybe Bool)
eavValue :: Lens' ExpectedAttributeValue (Maybe AttributeValue)
data AttributeDefinition

-- | <a>AttributeDefinition</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>adAttributeName</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>adAttributeType</a> <tt>::</tt> <a>ScalarAttributeType</a></li>
--   </ul>
attributeDefinition :: Text -> ScalarAttributeType -> AttributeDefinition

-- | A name for the attribute.
adAttributeName :: Lens' AttributeDefinition Text

-- | The data type for the attribute.
adAttributeType :: Lens' AttributeDefinition ScalarAttributeType
data ComparisonOperator

-- | BEGINS_WITH
BeginsWith :: ComparisonOperator

-- | BETWEEN
Between :: ComparisonOperator

-- | CONTAINS
Contains :: ComparisonOperator

-- | EQ
Eq :: ComparisonOperator

-- | GE
Ge :: ComparisonOperator

-- | GT
Gt :: ComparisonOperator

-- | IN
In' :: ComparisonOperator

-- | LE
Le :: ComparisonOperator

-- | LT
Lt :: ComparisonOperator

-- | NE
Ne :: ComparisonOperator

-- | NOT_CONTAINS
NotContains :: ComparisonOperator

-- | NOT_NULL
NotNull :: ComparisonOperator

-- | NULL
Null :: ComparisonOperator
data ReturnValue

-- | ALL_NEW
RVAllNew :: ReturnValue

-- | ALL_OLD
RVAllOld :: ReturnValue

-- | NONE
RVNone :: ReturnValue

-- | UPDATED_NEW
RVUpdatedNew :: ReturnValue

-- | UPDATED_OLD
RVUpdatedOld :: ReturnValue
data LocalSecondaryIndex

-- | <a>LocalSecondaryIndex</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>lsiIndexName</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>lsiKeySchema</a> <tt>::</tt> <a>NonEmpty</a>
--   <a>KeySchemaElement</a></li>
--   <li><a>lsiProjection</a> <tt>::</tt> <a>Projection</a></li>
--   </ul>
localSecondaryIndex :: Text -> NonEmpty KeySchemaElement -> Projection -> LocalSecondaryIndex

-- | The name of the local secondary index. The name must be unique among
--   all other indexes on this table.
lsiIndexName :: Lens' LocalSecondaryIndex Text

-- | The complete key schema for the local secondary index, consisting of
--   one or more pairs of attribute names and key types (<tt>HASH</tt> or
--   <tt>RANGE</tt>).
lsiKeySchema :: Lens' LocalSecondaryIndex (NonEmpty KeySchemaElement)
lsiProjection :: Lens' LocalSecondaryIndex Projection
data GlobalSecondaryIndexDescription

-- | <a>GlobalSecondaryIndexDescription</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>gsidBackfilling</a> <tt>::</tt> <a>Maybe</a> <a>Bool</a></li>
--   <li><a>gsidIndexName</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>gsidIndexSizeBytes</a> <tt>::</tt> <a>Maybe</a>
--   <a>Integer</a></li>
--   <li><a>gsidIndexStatus</a> <tt>::</tt> <a>Maybe</a>
--   <a>IndexStatus</a></li>
--   <li><a>gsidItemCount</a> <tt>::</tt> <a>Maybe</a> <a>Integer</a></li>
--   <li><a>gsidKeySchema</a> <tt>::</tt> <a>NonEmpty</a>
--   <a>KeySchemaElement</a></li>
--   <li><a>gsidProjection</a> <tt>::</tt> <a>Maybe</a>
--   <a>Projection</a></li>
--   <li><a>gsidProvisionedThroughput</a> <tt>::</tt> <a>Maybe</a>
--   <a>ProvisionedThroughputDescription</a></li>
--   </ul>
globalSecondaryIndexDescription :: NonEmpty KeySchemaElement -> GlobalSecondaryIndexDescription

-- | Indicates whether the index is currently backfilling.
--   <i>Backfilling</i> is the process of reading items from the table and
--   determining whether they can be added to the index. (Not all items
--   will qualify: For example, a hash key attribute cannot have any
--   duplicates.) If an item can be added to the index, DynamoDB will do
--   so. After all items have been processed, the backfilling operation is
--   complete and <i>Backfilling</i> is false.
--   
--   For indexes that were created during a <i>CreateTable</i> operation,
--   the <i>Backfilling</i> attribute does not appear in the
--   <i>DescribeTable</i> output.
gsidBackfilling :: Lens' GlobalSecondaryIndexDescription (Maybe Bool)

-- | The name of the global secondary index.
gsidIndexName :: Lens' GlobalSecondaryIndexDescription (Maybe Text)

-- | The total size of the specified index, in bytes. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
gsidIndexSizeBytes :: Lens' GlobalSecondaryIndexDescription (Maybe Integer)

-- | The current state of the global secondary index:
--   
--   <i>CREATING</i> - The index is being created.
--   
--   <i>UPDATING</i> - The index is being updated.
--   
--   <i>DELETING</i> - The index is being deleted.
--   
--   <i>ACTIVE</i> - The index is ready for use.
gsidIndexStatus :: Lens' GlobalSecondaryIndexDescription (Maybe IndexStatus)

-- | The number of items in the specified index. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
gsidItemCount :: Lens' GlobalSecondaryIndexDescription (Maybe Integer)

-- | The complete key schema for the global secondary index, consisting of
--   one or more pairs of attribute names and key types (<tt>HASH</tt> or
--   <tt>RANGE</tt>).
gsidKeySchema :: Lens' GlobalSecondaryIndexDescription (NonEmpty KeySchemaElement)
gsidProjection :: Lens' GlobalSecondaryIndexDescription (Maybe Projection)
gsidProvisionedThroughput :: Lens' GlobalSecondaryIndexDescription (Maybe ProvisionedThroughputDescription)
data ItemCollectionMetrics

-- | <a>ItemCollectionMetrics</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>icmItemCollectionKey</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>AttributeValue</a></li>
--   <li><a>icmSizeEstimateRangeGB</a> <tt>::</tt> [<a>Double</a>]</li>
--   </ul>
itemCollectionMetrics :: ItemCollectionMetrics

-- | The hash key value of the item collection. This value is the same as
--   the hash key of the item.
icmItemCollectionKey :: Lens' ItemCollectionMetrics (HashMap Text AttributeValue)

-- | An estimate of item collection size, in gigabytes. This value is a
--   two-element array containing a lower bound and an upper bound for the
--   estimate. The estimate includes the size of all the items in the
--   table, plus the size of all attributes projected into all of the local
--   secondary indexes on that table. Use this estimate to measure whether
--   a local secondary index is approaching its size limit.
--   
--   The estimate is subject to change over time; therefore, do not rely on
--   the precision or accuracy of the estimate.
icmSizeEstimateRangeGB :: Lens' ItemCollectionMetrics [Double]
data Capacity

-- | <a>Capacity</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>cCapacityUnits</a> <tt>::</tt> <a>Maybe</a> <a>Double</a></li>
--   </ul>
capacity :: Capacity

-- | The total number of capacity units consumed on a table or an index.
cCapacityUnits :: Lens' Capacity (Maybe Double)
data ConsumedCapacity

-- | <a>ConsumedCapacity</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>ccCapacityUnits</a> <tt>::</tt> <a>Maybe</a> <a>Double</a></li>
--   <li><a>ccGlobalSecondaryIndexes</a> <tt>::</tt> <a>HashMap</a>
--   <a>Text</a> <a>Capacity</a></li>
--   <li><a>ccLocalSecondaryIndexes</a> <tt>::</tt> <a>HashMap</a>
--   <a>Text</a> <a>Capacity</a></li>
--   <li><a>ccTable</a> <tt>::</tt> <a>Maybe</a> <a>Capacity</a></li>
--   <li><a>ccTableName</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   </ul>
consumedCapacity :: ConsumedCapacity

-- | The total number of capacity units consumed by the operation.
ccCapacityUnits :: Lens' ConsumedCapacity (Maybe Double)

-- | The amount of throughput consumed on each global index affected by the
--   operation.
ccGlobalSecondaryIndexes :: Lens' ConsumedCapacity (HashMap Text Capacity)

-- | The amount of throughput consumed on each local index affected by the
--   operation.
ccLocalSecondaryIndexes :: Lens' ConsumedCapacity (HashMap Text Capacity)

-- | The amount of throughput consumed on the table affected by the
--   operation.
ccTable :: Lens' ConsumedCapacity (Maybe Capacity)

-- | The name of the table that was affected by the operation.
ccTableName :: Lens' ConsumedCapacity (Maybe Text)
data GlobalSecondaryIndex

-- | <a>GlobalSecondaryIndex</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>gsiIndexName</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>gsiKeySchema</a> <tt>::</tt> <a>NonEmpty</a>
--   <a>KeySchemaElement</a></li>
--   <li><a>gsiProjection</a> <tt>::</tt> <a>Projection</a></li>
--   <li><a>gsiProvisionedThroughput</a> <tt>::</tt>
--   <a>ProvisionedThroughput</a></li>
--   </ul>
globalSecondaryIndex :: Text -> NonEmpty KeySchemaElement -> Projection -> ProvisionedThroughput -> GlobalSecondaryIndex

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
gsiIndexName :: Lens' GlobalSecondaryIndex Text

-- | The complete key schema for a global secondary index, which consists
--   of one or more pairs of attribute names and key types (<tt>HASH</tt>
--   or <tt>RANGE</tt>).
gsiKeySchema :: Lens' GlobalSecondaryIndex (NonEmpty KeySchemaElement)
gsiProjection :: Lens' GlobalSecondaryIndex Projection
gsiProvisionedThroughput :: Lens' GlobalSecondaryIndex ProvisionedThroughput
data LocalSecondaryIndexDescription

-- | <a>LocalSecondaryIndexDescription</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>lsidIndexName</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>lsidIndexSizeBytes</a> <tt>::</tt> <a>Maybe</a>
--   <a>Integer</a></li>
--   <li><a>lsidItemCount</a> <tt>::</tt> <a>Maybe</a> <a>Integer</a></li>
--   <li><a>lsidKeySchema</a> <tt>::</tt> <a>NonEmpty</a>
--   <a>KeySchemaElement</a></li>
--   <li><a>lsidProjection</a> <tt>::</tt> <a>Maybe</a>
--   <a>Projection</a></li>
--   </ul>
localSecondaryIndexDescription :: NonEmpty KeySchemaElement -> LocalSecondaryIndexDescription

-- | Represents the name of the local secondary index.
lsidIndexName :: Lens' LocalSecondaryIndexDescription (Maybe Text)

-- | The total size of the specified index, in bytes. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
lsidIndexSizeBytes :: Lens' LocalSecondaryIndexDescription (Maybe Integer)

-- | The number of items in the specified index. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
lsidItemCount :: Lens' LocalSecondaryIndexDescription (Maybe Integer)

-- | The complete index key schema, which consists of one or more pairs of
--   attribute names and key types (<tt>HASH</tt> or <tt>RANGE</tt>).
lsidKeySchema :: Lens' LocalSecondaryIndexDescription (NonEmpty KeySchemaElement)
lsidProjection :: Lens' LocalSecondaryIndexDescription (Maybe Projection)
data AttributeAction

-- | ADD
Add :: AttributeAction

-- | DELETE
Delete' :: AttributeAction

-- | PUT
Put :: AttributeAction
data ScalarAttributeType

-- | B
B :: ScalarAttributeType

-- | N
N :: ScalarAttributeType

-- | S
S :: ScalarAttributeType
data Projection

-- | <a>Projection</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>pNonKeyAttributes</a> <tt>::</tt> <a>NonEmpty</a>
--   <a>Text</a></li>
--   <li><a>pProjectionType</a> <tt>::</tt> <a>Maybe</a>
--   <a>ProjectionType</a></li>
--   </ul>
projection :: NonEmpty Text -> Projection

-- | Represents the non-key attribute names which will be projected into
--   the index.
--   
--   For local secondary indexes, the total count of
--   <i>NonKeyAttributes</i> summed across all of the local secondary
--   indexes, must not exceed 20. If you project the same attribute into
--   two different indexes, this counts as two distinct attributes when
--   determining the total.
pNonKeyAttributes :: Lens' Projection (NonEmpty Text)

-- | The set of attributes that are projected into the index:
--   
--   <tt>KEYS_ONLY</tt> - Only the index and primary keys are projected
--   into the index.
--   
--   <tt>INCLUDE</tt> - Only the specified table attributes are projected
--   into the index. The list of projected attributes are in
--   <i>NonKeyAttributes</i>.
--   
--   <tt>ALL</tt> - All of the table attributes are projected into the
--   index.
pProjectionType :: Lens' Projection (Maybe ProjectionType)
data CreateGlobalSecondaryIndexAction

-- | <a>CreateGlobalSecondaryIndexAction</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>cgsiaIndexName</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>cgsiaKeySchema</a> <tt>::</tt> <a>NonEmpty</a>
--   <a>KeySchemaElement</a></li>
--   <li><a>cgsiaProjection</a> <tt>::</tt> <a>Projection</a></li>
--   <li><a>cgsiaProvisionedThroughput</a> <tt>::</tt>
--   <a>ProvisionedThroughput</a></li>
--   </ul>
createGlobalSecondaryIndexAction :: Text -> NonEmpty KeySchemaElement -> Projection -> ProvisionedThroughput -> CreateGlobalSecondaryIndexAction

-- | The name of the global secondary index to be created.
cgsiaIndexName :: Lens' CreateGlobalSecondaryIndexAction Text

-- | The key schema for the global secondary index.
cgsiaKeySchema :: Lens' CreateGlobalSecondaryIndexAction (NonEmpty KeySchemaElement)
cgsiaProjection :: Lens' CreateGlobalSecondaryIndexAction Projection
cgsiaProvisionedThroughput :: Lens' CreateGlobalSecondaryIndexAction ProvisionedThroughput
data Select

-- | ALL_ATTRIBUTES
AllAttributes :: Select

-- | ALL_PROJECTED_ATTRIBUTES
AllProjectedAttributes :: Select

-- | COUNT
Count :: Select

-- | SPECIFIC_ATTRIBUTES
SpecificAttributes :: Select
data KeySchemaElement

-- | <a>KeySchemaElement</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>kseAttributeName</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>kseKeyType</a> <tt>::</tt> <a>KeyType</a></li>
--   </ul>
keySchemaElement :: Text -> KeyType -> KeySchemaElement

-- | The name of a key attribute.
kseAttributeName :: Lens' KeySchemaElement Text

-- | The attribute data, consisting of the data type and the attribute
--   value itself.
kseKeyType :: Lens' KeySchemaElement KeyType
data DeleteGlobalSecondaryIndexAction

-- | <a>DeleteGlobalSecondaryIndexAction</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>dgsiaIndexName</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
deleteGlobalSecondaryIndexAction :: Text -> DeleteGlobalSecondaryIndexAction

-- | The name of the global secondary index to be deleted.
dgsiaIndexName :: Lens' DeleteGlobalSecondaryIndexAction Text
data DeleteRequest

-- | <a>DeleteRequest</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>dKey</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>AttributeValue</a></li>
--   </ul>
deleteRequest :: DeleteRequest

-- | A map of attribute name to attribute values, representing the primary
--   key of the item to delete. All of the table's primary key attributes
--   must be specified, and their data types must match those of the
--   table's key schema.
dKey :: Lens' DeleteRequest (HashMap Text AttributeValue)
data UpdateGlobalSecondaryIndexAction

-- | <a>UpdateGlobalSecondaryIndexAction</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>ugsiaIndexName</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>ugsiaProvisionedThroughput</a> <tt>::</tt>
--   <a>ProvisionedThroughput</a></li>
--   </ul>
updateGlobalSecondaryIndexAction :: Text -> ProvisionedThroughput -> UpdateGlobalSecondaryIndexAction

-- | The name of the global secondary index to be updated.
ugsiaIndexName :: Lens' UpdateGlobalSecondaryIndexAction Text
ugsiaProvisionedThroughput :: Lens' UpdateGlobalSecondaryIndexAction ProvisionedThroughput
data PutRequest

-- | <a>PutRequest</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>pItem</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>AttributeValue</a></li>
--   </ul>
putRequest :: PutRequest

-- | A map of attribute name to attribute values, representing the primary
--   key of an item to be processed by <i>PutItem</i>. All of the table's
--   primary key attributes must be specified, and their data types must
--   match those of the table's key schema. If any attributes are present
--   in the item which are part of an index key schema for the table, their
--   types must match the index key schema.
pItem :: Lens' PutRequest (HashMap Text AttributeValue)
data Condition

-- | <a>Condition</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>cAttributeValueList</a> <tt>::</tt>
--   [<a>AttributeValue</a>]</li>
--   <li><a>cComparisonOperator</a> <tt>::</tt>
--   <a>ComparisonOperator</a></li>
--   </ul>
condition :: ComparisonOperator -> Condition

-- | One or more values to evaluate against the supplied attribute. The
--   number of values in the list depends on the <i>ComparisonOperator</i>
--   being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <a>B</a>. For
--   a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
cAttributeValueList :: Lens' Condition [AttributeValue]

-- | A comparator for evaluating attributes. For example, equals, greater
--   than, less than, etc.
--   
--   The following comparison operators are available:
--   
--   'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS |
--   NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'
--   
--   The following are descriptions of each comparison operator.
--   
--   <a>EQ</a> : Equal. <a>EQ</a> is supported for all datatypes, including
--   lists and maps.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, Binary, String Set, Number Set, or
--   Binary Set. If an item contains an <i>AttributeValue</i> element of a
--   different type than the one provided in the request, the value does
--   not match. For example, '{<a>S</a>:"6"}' does not equal
--   '{<a>N</a>:"6"}'. Also, '{<a>N</a>:"6"}' does not equal
--   '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all datatypes,
--   including lists and maps.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   of type String, Number, Binary, String Set, Number Set, or Binary Set.
--   If an item contains an <i>AttributeValue</i> of a different type than
--   the one provided in the request, the value does not match. For
--   example, '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not equal '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>LE</tt> : Less than or equal.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <a>LT</a> : Less than.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>GE</tt> : Greater than or equal.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <a>GT</a> : Greater than.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all datatypes, including lists and maps.
--   
--   This operator tests for the existence of an attribute, not its data
--   type. If the data type of attribute "<tt>a</tt>" is null, and you
--   evaluate it using <tt>NOT_NULL</tt>, the result is a Boolean
--   <i>true</i>. This result is because the attribute "<tt>a</tt>" exists;
--   its data type is not relevant to the <tt>NOT_NULL</tt> comparison
--   operator.
--   
--   <tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all datatypes, including lists and maps.
--   
--   This operator tests for the nonexistence of an attribute, not its data
--   type. If the data type of attribute "<tt>a</tt>" is null, and you
--   evaluate it using <tt>NULL</tt>, the result is a Boolean <i>false</i>.
--   This is because the attribute "<tt>a</tt>" exists; its data type is
--   not relevant to the <tt>NULL</tt> comparison operator.
--   
--   <tt>CONTAINS</tt> : Checks for a subsequence, or value in a set.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If the
--   target attribute of the comparison is of type String, then the
--   operator checks for a substring match. If the target attribute of the
--   comparison is of type Binary, then the operator looks for a
--   subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.
--   
--   CONTAINS is supported for lists: When evaluating "'a CONTAINS b'",
--   "<tt>a</tt>" can be a list; however, "<tt>b</tt>" cannot be a set, a
--   map, or a list.
--   
--   <tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If the
--   target attribute of the comparison is a String, then the operator
--   checks for the absence of a substring match. If the target attribute
--   of the comparison is Binary, then the operator checks for the absence
--   of a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it <i>does
--   not</i> find an exact match with any member of the set.
--   
--   NOT_CONTAINS is supported for lists: When evaluating "'a NOT CONTAINS
--   b'", "<tt>a</tt>" can be a list; however, "<tt>b</tt>" cannot be a
--   set, a map, or a list.
--   
--   <tt>BEGINS_WITH</tt> : Checks for a prefix.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   of type String or Binary (not a Number or a set type). The target
--   attribute of the comparison must be of type String or Binary (not a
--   Number or a set type).
--   
--   <tt>IN</tt> : Checks for matching elements within two sets.
--   
--   <i>AttributeValueList</i> can contain one or more
--   <i>AttributeValue</i> elements of type String, Number, or Binary (not
--   a set type). These attributes are compared against an existing set
--   type attribute of an item. If any elements of the input set are
--   present in the item attribute, the expression evaluates to true.
--   
--   <tt>BETWEEN</tt> : Greater than or equal to the first value, and less
--   than or equal to the second value.
--   
--   <i>AttributeValueList</i> must contain two <i>AttributeValue</i>
--   elements of the same type, either String, Number, or Binary (not a set
--   type). A target attribute matches if the target value is greater than,
--   or equal to, the first element and less than, or equal to, the second
--   element. If an item contains an <i>AttributeValue</i> element of a
--   different type than the one provided in the request, the value does
--   not match. For example, '{<a>S</a>:"6"}' does not compare to
--   '{<a>N</a>:"6"}'. Also, '{<a>N</a>:"6"}' does not compare to
--   '{<a>NS</a>:["6", "2", "1"]}'
--   
--   For usage examples of <i>AttributeValueList</i> and
--   <i>ComparisonOperator</i>, see <a>Legacy Conditional Parameters</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
cComparisonOperator :: Lens' Condition ComparisonOperator
data ConditionalOperator

-- | AND
And :: ConditionalOperator

-- | OR
Or :: ConditionalOperator
data GlobalSecondaryIndexUpdate

-- | <a>GlobalSecondaryIndexUpdate</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>gsiuCreate</a> <tt>::</tt> <a>Maybe</a>
--   <a>CreateGlobalSecondaryIndexAction</a></li>
--   <li><a>gsiuDelete</a> <tt>::</tt> <a>Maybe</a>
--   <a>DeleteGlobalSecondaryIndexAction</a></li>
--   <li><a>gsiuUpdate</a> <tt>::</tt> <a>Maybe</a>
--   <a>UpdateGlobalSecondaryIndexAction</a></li>
--   </ul>
globalSecondaryIndexUpdate :: GlobalSecondaryIndexUpdate

-- | The parameters required for creating a global secondary index on an
--   existing table:
--   
--   'IndexName '
--   
--   'KeySchema '
--   
--   'AttributeDefinitions '
--   
--   'Projection '
--   
--   'ProvisionedThroughput '
gsiuCreate :: Lens' GlobalSecondaryIndexUpdate (Maybe CreateGlobalSecondaryIndexAction)

-- | The name of an existing global secondary index to be removed.
gsiuDelete :: Lens' GlobalSecondaryIndexUpdate (Maybe DeleteGlobalSecondaryIndexAction)

-- | The name of an existing global secondary index, along with new
--   provisioned throughput settings to be applied to that index.
gsiuUpdate :: Lens' GlobalSecondaryIndexUpdate (Maybe UpdateGlobalSecondaryIndexAction)
instance Eq ProvisionedThroughputDescription
instance Ord ProvisionedThroughputDescription
instance Read ProvisionedThroughputDescription
instance Show ProvisionedThroughputDescription
instance Eq KeyType
instance Ord KeyType
instance Read KeyType
instance Show KeyType
instance Generic KeyType
instance Enum KeyType
instance Eq AttributeValue
instance Read AttributeValue
instance Show AttributeValue
instance Eq IndexStatus
instance Ord IndexStatus
instance Read IndexStatus
instance Show IndexStatus
instance Generic IndexStatus
instance Enum IndexStatus
instance Eq ProvisionedThroughput
instance Ord ProvisionedThroughput
instance Read ProvisionedThroughput
instance Show ProvisionedThroughput
instance Eq TableStatus
instance Ord TableStatus
instance Read TableStatus
instance Show TableStatus
instance Generic TableStatus
instance Enum TableStatus
instance Eq ProjectionType
instance Ord ProjectionType
instance Read ProjectionType
instance Show ProjectionType
instance Generic ProjectionType
instance Enum ProjectionType
instance Eq KeysAndAttributes
instance Read KeysAndAttributes
instance Show KeysAndAttributes
instance Eq ReturnConsumedCapacity
instance Ord ReturnConsumedCapacity
instance Read ReturnConsumedCapacity
instance Show ReturnConsumedCapacity
instance Generic ReturnConsumedCapacity
instance Enum ReturnConsumedCapacity
instance Eq ReturnItemCollectionMetrics
instance Ord ReturnItemCollectionMetrics
instance Read ReturnItemCollectionMetrics
instance Show ReturnItemCollectionMetrics
instance Generic ReturnItemCollectionMetrics
instance Enum ReturnItemCollectionMetrics
instance Eq ComparisonOperator
instance Ord ComparisonOperator
instance Read ComparisonOperator
instance Show ComparisonOperator
instance Generic ComparisonOperator
instance Enum ComparisonOperator
instance Eq ExpectedAttributeValue
instance Read ExpectedAttributeValue
instance Show ExpectedAttributeValue
instance Eq ReturnValue
instance Ord ReturnValue
instance Read ReturnValue
instance Show ReturnValue
instance Generic ReturnValue
instance Enum ReturnValue
instance Eq ItemCollectionMetrics
instance Read ItemCollectionMetrics
instance Show ItemCollectionMetrics
instance Eq Capacity
instance Ord Capacity
instance Read Capacity
instance Show Capacity
instance Eq ConsumedCapacity
instance Read ConsumedCapacity
instance Show ConsumedCapacity
instance Eq AttributeAction
instance Ord AttributeAction
instance Read AttributeAction
instance Show AttributeAction
instance Generic AttributeAction
instance Enum AttributeAction
instance Eq AttributeValueUpdate
instance Read AttributeValueUpdate
instance Show AttributeValueUpdate
instance Eq ScalarAttributeType
instance Ord ScalarAttributeType
instance Read ScalarAttributeType
instance Show ScalarAttributeType
instance Generic ScalarAttributeType
instance Enum ScalarAttributeType
instance Eq AttributeDefinition
instance Read AttributeDefinition
instance Show AttributeDefinition
instance Eq Projection
instance Read Projection
instance Show Projection
instance Eq Select
instance Ord Select
instance Read Select
instance Show Select
instance Generic Select
instance Enum Select
instance Eq KeySchemaElement
instance Read KeySchemaElement
instance Show KeySchemaElement
instance Eq CreateGlobalSecondaryIndexAction
instance Read CreateGlobalSecondaryIndexAction
instance Show CreateGlobalSecondaryIndexAction
instance Eq LocalSecondaryIndexDescription
instance Read LocalSecondaryIndexDescription
instance Show LocalSecondaryIndexDescription
instance Eq GlobalSecondaryIndex
instance Read GlobalSecondaryIndex
instance Show GlobalSecondaryIndex
instance Eq GlobalSecondaryIndexDescription
instance Read GlobalSecondaryIndexDescription
instance Show GlobalSecondaryIndexDescription
instance Eq LocalSecondaryIndex
instance Read LocalSecondaryIndex
instance Show LocalSecondaryIndex
instance Eq TableDescription
instance Read TableDescription
instance Show TableDescription
instance Eq DeleteGlobalSecondaryIndexAction
instance Ord DeleteGlobalSecondaryIndexAction
instance Read DeleteGlobalSecondaryIndexAction
instance Show DeleteGlobalSecondaryIndexAction
instance Monoid DeleteGlobalSecondaryIndexAction
instance IsString DeleteGlobalSecondaryIndexAction
instance Eq DeleteRequest
instance Read DeleteRequest
instance Show DeleteRequest
instance Monoid DeleteRequest
instance Semigroup DeleteRequest
instance Eq UpdateGlobalSecondaryIndexAction
instance Read UpdateGlobalSecondaryIndexAction
instance Show UpdateGlobalSecondaryIndexAction
instance Eq PutRequest
instance Read PutRequest
instance Show PutRequest
instance Monoid PutRequest
instance Semigroup PutRequest
instance Eq WriteRequest
instance Read WriteRequest
instance Show WriteRequest
instance Eq Condition
instance Read Condition
instance Show Condition
instance Eq ConditionalOperator
instance Ord ConditionalOperator
instance Read ConditionalOperator
instance Show ConditionalOperator
instance Generic ConditionalOperator
instance Enum ConditionalOperator
instance Eq GlobalSecondaryIndexUpdate
instance Read GlobalSecondaryIndexUpdate
instance Show GlobalSecondaryIndexUpdate
instance Datatype D1KeyType
instance Constructor C1_0KeyType
instance Constructor C1_1KeyType
instance Datatype D1IndexStatus
instance Constructor C1_0IndexStatus
instance Constructor C1_1IndexStatus
instance Constructor C1_2IndexStatus
instance Constructor C1_3IndexStatus
instance Datatype D1TableStatus
instance Constructor C1_0TableStatus
instance Constructor C1_1TableStatus
instance Constructor C1_2TableStatus
instance Constructor C1_3TableStatus
instance Datatype D1ProjectionType
instance Constructor C1_0ProjectionType
instance Constructor C1_1ProjectionType
instance Constructor C1_2ProjectionType
instance Datatype D1ReturnConsumedCapacity
instance Constructor C1_0ReturnConsumedCapacity
instance Constructor C1_1ReturnConsumedCapacity
instance Constructor C1_2ReturnConsumedCapacity
instance Datatype D1ReturnItemCollectionMetrics
instance Constructor C1_0ReturnItemCollectionMetrics
instance Constructor C1_1ReturnItemCollectionMetrics
instance Datatype D1ComparisonOperator
instance Constructor C1_0ComparisonOperator
instance Constructor C1_1ComparisonOperator
instance Constructor C1_2ComparisonOperator
instance Constructor C1_3ComparisonOperator
instance Constructor C1_4ComparisonOperator
instance Constructor C1_5ComparisonOperator
instance Constructor C1_6ComparisonOperator
instance Constructor C1_7ComparisonOperator
instance Constructor C1_8ComparisonOperator
instance Constructor C1_9ComparisonOperator
instance Constructor C1_10ComparisonOperator
instance Constructor C1_11ComparisonOperator
instance Constructor C1_12ComparisonOperator
instance Datatype D1ReturnValue
instance Constructor C1_0ReturnValue
instance Constructor C1_1ReturnValue
instance Constructor C1_2ReturnValue
instance Constructor C1_3ReturnValue
instance Constructor C1_4ReturnValue
instance Datatype D1AttributeAction
instance Constructor C1_0AttributeAction
instance Constructor C1_1AttributeAction
instance Constructor C1_2AttributeAction
instance Datatype D1ScalarAttributeType
instance Constructor C1_0ScalarAttributeType
instance Constructor C1_1ScalarAttributeType
instance Constructor C1_2ScalarAttributeType
instance Datatype D1Select
instance Constructor C1_0Select
instance Constructor C1_1Select
instance Constructor C1_2Select
instance Constructor C1_3Select
instance Datatype D1ConditionalOperator
instance Constructor C1_0ConditionalOperator
instance Constructor C1_1ConditionalOperator
instance ToJSON GlobalSecondaryIndexUpdate
instance FromJSON GlobalSecondaryIndexUpdate
instance ToJSON ConditionalOperator
instance FromJSON ConditionalOperator
instance ToQuery ConditionalOperator
instance ToHeader ConditionalOperator
instance ToByteString ConditionalOperator
instance ToText ConditionalOperator
instance FromText ConditionalOperator
instance Hashable ConditionalOperator
instance ToJSON Condition
instance FromJSON Condition
instance ToJSON PutRequest
instance FromJSON PutRequest
instance ToJSON UpdateGlobalSecondaryIndexAction
instance FromJSON UpdateGlobalSecondaryIndexAction
instance ToJSON DeleteRequest
instance FromJSON DeleteRequest
instance ToJSON DeleteGlobalSecondaryIndexAction
instance FromJSON DeleteGlobalSecondaryIndexAction
instance ToJSON KeySchemaElement
instance FromJSON KeySchemaElement
instance ToJSON Select
instance FromJSON Select
instance ToQuery Select
instance ToHeader Select
instance ToByteString Select
instance ToText Select
instance FromText Select
instance Hashable Select
instance ToJSON CreateGlobalSecondaryIndexAction
instance FromJSON CreateGlobalSecondaryIndexAction
instance ToJSON Projection
instance FromJSON Projection
instance ToJSON ScalarAttributeType
instance FromJSON ScalarAttributeType
instance ToQuery ScalarAttributeType
instance ToHeader ScalarAttributeType
instance ToByteString ScalarAttributeType
instance ToText ScalarAttributeType
instance FromText ScalarAttributeType
instance Hashable ScalarAttributeType
instance ToJSON AttributeAction
instance FromJSON AttributeAction
instance ToQuery AttributeAction
instance ToHeader AttributeAction
instance ToByteString AttributeAction
instance ToText AttributeAction
instance FromText AttributeAction
instance Hashable AttributeAction
instance ToJSON LocalSecondaryIndexDescription
instance FromJSON LocalSecondaryIndexDescription
instance ToJSON GlobalSecondaryIndex
instance FromJSON GlobalSecondaryIndex
instance ToJSON ConsumedCapacity
instance FromJSON ConsumedCapacity
instance ToJSON Capacity
instance FromJSON Capacity
instance ToJSON ItemCollectionMetrics
instance FromJSON ItemCollectionMetrics
instance ToJSON GlobalSecondaryIndexDescription
instance FromJSON GlobalSecondaryIndexDescription
instance ToJSON LocalSecondaryIndex
instance FromJSON LocalSecondaryIndex
instance ToJSON ReturnValue
instance FromJSON ReturnValue
instance ToQuery ReturnValue
instance ToHeader ReturnValue
instance ToByteString ReturnValue
instance ToText ReturnValue
instance FromText ReturnValue
instance Hashable ReturnValue
instance ToJSON ComparisonOperator
instance FromJSON ComparisonOperator
instance ToQuery ComparisonOperator
instance ToHeader ComparisonOperator
instance ToByteString ComparisonOperator
instance ToText ComparisonOperator
instance FromText ComparisonOperator
instance Hashable ComparisonOperator
instance ToJSON AttributeDefinition
instance FromJSON AttributeDefinition
instance ToJSON ExpectedAttributeValue
instance FromJSON ExpectedAttributeValue
instance ToJSON AttributeValueUpdate
instance FromJSON AttributeValueUpdate
instance ToJSON ReturnItemCollectionMetrics
instance FromJSON ReturnItemCollectionMetrics
instance ToQuery ReturnItemCollectionMetrics
instance ToHeader ReturnItemCollectionMetrics
instance ToByteString ReturnItemCollectionMetrics
instance ToText ReturnItemCollectionMetrics
instance FromText ReturnItemCollectionMetrics
instance Hashable ReturnItemCollectionMetrics
instance ToJSON ReturnConsumedCapacity
instance FromJSON ReturnConsumedCapacity
instance ToQuery ReturnConsumedCapacity
instance ToHeader ReturnConsumedCapacity
instance ToByteString ReturnConsumedCapacity
instance ToText ReturnConsumedCapacity
instance FromText ReturnConsumedCapacity
instance Hashable ReturnConsumedCapacity
instance ToJSON KeysAndAttributes
instance FromJSON KeysAndAttributes
instance ToJSON TableDescription
instance FromJSON TableDescription
instance ToJSON ProjectionType
instance FromJSON ProjectionType
instance ToQuery ProjectionType
instance ToHeader ProjectionType
instance ToByteString ProjectionType
instance ToText ProjectionType
instance FromText ProjectionType
instance Hashable ProjectionType
instance ToJSON TableStatus
instance FromJSON TableStatus
instance ToQuery TableStatus
instance ToHeader TableStatus
instance ToByteString TableStatus
instance ToText TableStatus
instance FromText TableStatus
instance Hashable TableStatus
instance ToJSON ProvisionedThroughput
instance FromJSON ProvisionedThroughput
instance ToJSON IndexStatus
instance FromJSON IndexStatus
instance ToQuery IndexStatus
instance ToHeader IndexStatus
instance ToByteString IndexStatus
instance ToText IndexStatus
instance FromText IndexStatus
instance Hashable IndexStatus
instance ToJSON AttributeValue
instance FromJSON AttributeValue
instance ToJSON KeyType
instance FromJSON KeyType
instance ToQuery KeyType
instance ToHeader KeyType
instance ToByteString KeyType
instance ToText KeyType
instance FromText KeyType
instance Hashable KeyType
instance ToJSON ProvisionedThroughputDescription
instance FromJSON ProvisionedThroughputDescription
instance ToJSON WriteRequest
instance FromJSON WriteRequest
instance AWSService DynamoDB


-- | Edits an existing item's attributes, or adds a new item to the table
--   if it does not already exist. You can put, delete, or add attribute
--   values. You can also perform a conditional update on an existing item
--   (insert a new attribute name-value pair if it doesn't exist, or
--   replace an existing name-value pair if it has certain expected
--   attribute values). If conditions are specified and the item does not
--   exist, then the operation fails and a new item is not created.
--   
--   You can also return the item's attribute values in the same
--   <i>UpdateItem</i> operation using the <i>ReturnValues</i> parameter.
--   
--   
--   <a>http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html</a>
module Network.AWS.DynamoDB.UpdateItem
data UpdateItem

-- | <a>UpdateItem</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>uiAttributeUpdates</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>AttributeValueUpdate</a></li>
--   <li><a>uiConditionExpression</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>uiConditionalOperator</a> <tt>::</tt> <a>Maybe</a>
--   <a>ConditionalOperator</a></li>
--   <li><a>uiExpected</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>ExpectedAttributeValue</a></li>
--   <li><a>uiExpressionAttributeNames</a> <tt>::</tt> <a>HashMap</a>
--   <a>Text</a> <a>Text</a></li>
--   <li><a>uiExpressionAttributeValues</a> <tt>::</tt> <a>HashMap</a>
--   <a>Text</a> <a>AttributeValue</a></li>
--   <li><a>uiKey</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>AttributeValue</a></li>
--   <li><a>uiReturnConsumedCapacity</a> <tt>::</tt> <a>Maybe</a>
--   <a>ReturnConsumedCapacity</a></li>
--   <li><a>uiReturnItemCollectionMetrics</a> <tt>::</tt> <a>Maybe</a>
--   <a>ReturnItemCollectionMetrics</a></li>
--   <li><a>uiReturnValues</a> <tt>::</tt> <a>Maybe</a>
--   <a>ReturnValue</a></li>
--   <li><a>uiTableName</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>uiUpdateExpression</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   </ul>
updateItem :: Text -> UpdateItem

-- | This is a legacy parameter, for backward compatibility. New
--   applications should use <i>UpdateExpression</i> instead. Do not
--   combine legacy parameters and expression parameters in a single API
--   call; otherwise, DynamoDB will return a <i>ValidationException</i>
--   exception.
--   
--   This parameter can be used for modifying top-level attributes;
--   however, it does not support individual list or map elements.
--   
--   The names of attributes to be modified, the action to perform on each,
--   and the new value for each. If you are updating an attribute that is
--   an index key attribute for any indexes on that table, the attribute
--   type must match the index key type defined in the
--   <i>AttributesDefinition</i> of the table description. You can use
--   <i>UpdateItem</i> to update any nonkey attributes.
--   
--   Attribute values cannot be null. String and Binary type attributes
--   must have lengths greater than zero. Set type attributes must not be
--   empty. Requests with empty values will be rejected with a
--   <i>ValidationException</i> exception.
--   
--   Each <i>AttributeUpdates</i> element consists of an attribute name to
--   modify, along with the following:
--   
--   <i>Value</i> - The new value, if applicable, for this attribute.
--   
--   <i>Action</i> - A value that specifies how to perform the update. This
--   action is only valid for an existing attribute whose data type is
--   Number or is a set; do not use <tt>ADD</tt> for other data types.
--   
--   If an item with the specified primary key is found in the table, the
--   following values perform the following actions:
--   
--   <a>PUT</a> - Adds the specified attribute to the item. If the
--   attribute already exists, it is replaced by the new value.
--   
--   <a>DELETE</a> - Removes the attribute and its value, if no value is
--   specified for <a>DELETE</a>. The data type of the specified value must
--   match the existing value's data type.
--   
--   If a set of values is specified, then those values are subtracted from
--   the old set. For example, if the attribute value was the set '[a,b,c]'
--   and the <a>DELETE</a> action specifies '[a,c]', then the final
--   attribute value is '[b]'. Specifying an empty set is an error.
--   
--   <tt>ADD</tt> - Adds the specified value to the item, if the attribute
--   does not already exist. If the attribute does exist, then the behavior
--   of <tt>ADD</tt> depends on the data type of the attribute:
--   
--   If the existing attribute is a number, and if <i>Value</i> is also a
--   number, then <i>Value</i> is mathematically added to the existing
--   attribute. If <i>Value</i> is a negative number, then it is subtracted
--   from the existing attribute.
--   
--   If you use <tt>ADD</tt> to increment or decrement a number value for
--   an item that doesn't exist before the update, DynamoDB uses 0 as the
--   initial value.
--   
--   Similarly, if you use <tt>ADD</tt> for an existing item to increment
--   or decrement an attribute value that doesn't exist before the update,
--   DynamoDB uses '0' as the initial value. For example, suppose that the
--   item you want to update doesn't have an attribute named
--   <i>itemcount</i>, but you decide to <tt>ADD</tt> the number '3' to
--   this attribute anyway. DynamoDB will create the <i>itemcount</i>
--   attribute, set its initial value to '0', and finally add '3' to it.
--   The result will be a new <i>itemcount</i> attribute, with a value of
--   '3'.
--   
--   If the existing data type is a set, and if <i>Value</i> is also a set,
--   then <i>Value</i> is appended to the existing set. For example, if the
--   attribute value is the set '[1,2]', and the <tt>ADD</tt> action
--   specified '[3]', then the final attribute value is '[1,2,3]'. An error
--   occurs if an <tt>ADD</tt> action is specified for a set attribute and
--   the attribute type specified does not match the existing set type.
--   
--   Both sets must have the same primitive data type. For example, if the
--   existing data type is a set of strings, <i>Value</i> must also be a
--   set of strings.
--   
--   If no item with the specified key is found in the table, the following
--   values perform the following actions:
--   
--   <a>PUT</a> - Causes DynamoDB to create a new item with the specified
--   primary key, and then adds the attribute.
--   
--   <a>DELETE</a> - Nothing happens, because attributes cannot be deleted
--   from a nonexistent item. The operation succeeds, but DynamoDB does not
--   create a new item.
--   
--   <tt>ADD</tt> - Causes DynamoDB to create an item with the supplied
--   primary key and number (or set of numbers) for the attribute value.
--   The only data types allowed are Number and Number Set.
--   
--   If you provide any attributes that are part of an index key, then the
--   data types for those attributes must match those of the schema in the
--   table's attribute definition.
uiAttributeUpdates :: Lens' UpdateItem (HashMap Text AttributeValueUpdate)

-- | A condition that must be satisfied in order for a conditional update
--   to succeed.
--   
--   An expression can contain any of the following:
--   
--   Boolean functions: 'attribute_exists | attribute_not_exists | contains
--   |begins_with'
--   
--   These function names are case-sensitive.
--   
--   Comparison operators: ' = | &lt;&gt; | <a>|</a> | <a>|</a>= | BETWEEN
--   | IN'
--   
--   Logical operators: 'AND | OR | NOT'
--   
--   For more information on condition expressions, see <a>Specifying
--   Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <i>ConditionExpression</i> replaces the legacy
--   <i>ConditionalOperator</i> and <i>Expected</i> parameters.
uiConditionExpression :: Lens' UpdateItem (Maybe Text)

-- | This is a legacy parameter, for backward compatibility. New
--   applications should use <i>ConditionExpression</i> instead. Do not
--   combine legacy parameters and expression parameters in a single API
--   call; otherwise, DynamoDB will return a <i>ValidationException</i>
--   exception.
--   
--   A logical operator to apply to the conditions in the <i>Expected</i>
--   map:
--   
--   <tt>AND</tt> - If all of the conditions evaluate to true, then the
--   entire map evaluates to true.
--   
--   <tt>OR</tt> - If at least one of the conditions evaluate to true, then
--   the entire map evaluates to true.
--   
--   If you omit <i>ConditionalOperator</i>, then <tt>AND</tt> is the
--   default.
--   
--   The operation will succeed only if the entire map evaluates to true.
--   
--   This parameter does not support attributes of type List or Map.
uiConditionalOperator :: Lens' UpdateItem (Maybe ConditionalOperator)

-- | This is a legacy parameter, for backward compatibility. New
--   applications should use <i> ConditionExpression </i> instead. Do not
--   combine legacy parameters and expression parameters in a single API
--   call; otherwise, DynamoDB will return a <i>ValidationException</i>
--   exception.
--   
--   A map of attribute<i>condition pairs. </i>Expected/ provides a
--   conditional block for the <i>UpdateItem</i> operation.
--   
--   Each element of <i>Expected</i> consists of an attribute name, a
--   comparison operator, and one or more values. DynamoDB compares the
--   attribute with the value(s) you supplied, using the comparison
--   operator. For each <i>Expected</i> element, the result of the
--   evaluation is either true or false.
--   
--   If you specify more than one element in the <i>Expected</i> map, then
--   by default all of the conditions must evaluate to true. In other
--   words, the conditions are ANDed together. (You can use the
--   <i>ConditionalOperator</i> parameter to OR the conditions instead. If
--   you do this, then at least one of the conditions must evaluate to
--   true, rather than all of them.)
--   
--   If the <i>Expected</i> map evaluates to true, then the conditional
--   operation succeeds; otherwise, it fails.
--   
--   <i>Expected</i> contains the following:
--   
--   <i>AttributeValueList</i> - One or more values to evaluate against the
--   supplied attribute. The number of values in the list depends on the
--   <i>ComparisonOperator</i> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <a>B</a>. For
--   a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For type Binary, DynamoDB treats each byte of the binary data as
--   unsigned when it compares binary values.
--   
--   <i>ComparisonOperator</i> - A comparator for evaluating attributes in
--   the <i>AttributeValueList</i>. When performing the comparison,
--   DynamoDB uses strongly consistent reads.
--   
--   The following comparison operators are available:
--   
--   'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS |
--   NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'
--   
--   The following are descriptions of each comparison operator.
--   
--   <a>EQ</a> : Equal. <a>EQ</a> is supported for all datatypes, including
--   lists and maps.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, Binary, String Set, Number Set, or
--   Binary Set. If an item contains an <i>AttributeValue</i> element of a
--   different type than the one provided in the request, the value does
--   not match. For example, '{<a>S</a>:"6"}' does not equal
--   '{<a>N</a>:"6"}'. Also, '{<a>N</a>:"6"}' does not equal
--   '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all datatypes,
--   including lists and maps.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   of type String, Number, Binary, String Set, Number Set, or Binary Set.
--   If an item contains an <i>AttributeValue</i> of a different type than
--   the one provided in the request, the value does not match. For
--   example, '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not equal '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>LE</tt> : Less than or equal.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <a>LT</a> : Less than.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>GE</tt> : Greater than or equal.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <a>GT</a> : Greater than.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all datatypes, including lists and maps.
--   
--   This operator tests for the existence of an attribute, not its data
--   type. If the data type of attribute "<tt>a</tt>" is null, and you
--   evaluate it using <tt>NOT_NULL</tt>, the result is a Boolean
--   <i>true</i>. This result is because the attribute "<tt>a</tt>" exists;
--   its data type is not relevant to the <tt>NOT_NULL</tt> comparison
--   operator.
--   
--   <tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all datatypes, including lists and maps.
--   
--   This operator tests for the nonexistence of an attribute, not its data
--   type. If the data type of attribute "<tt>a</tt>" is null, and you
--   evaluate it using <tt>NULL</tt>, the result is a Boolean <i>false</i>.
--   This is because the attribute "<tt>a</tt>" exists; its data type is
--   not relevant to the <tt>NULL</tt> comparison operator.
--   
--   <tt>CONTAINS</tt> : Checks for a subsequence, or value in a set.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If the
--   target attribute of the comparison is of type String, then the
--   operator checks for a substring match. If the target attribute of the
--   comparison is of type Binary, then the operator looks for a
--   subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.
--   
--   CONTAINS is supported for lists: When evaluating "'a CONTAINS b'",
--   "<tt>a</tt>" can be a list; however, "<tt>b</tt>" cannot be a set, a
--   map, or a list.
--   
--   <tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If the
--   target attribute of the comparison is a String, then the operator
--   checks for the absence of a substring match. If the target attribute
--   of the comparison is Binary, then the operator checks for the absence
--   of a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it <i>does
--   not</i> find an exact match with any member of the set.
--   
--   NOT_CONTAINS is supported for lists: When evaluating "'a NOT CONTAINS
--   b'", "<tt>a</tt>" can be a list; however, "<tt>b</tt>" cannot be a
--   set, a map, or a list.
--   
--   <tt>BEGINS_WITH</tt> : Checks for a prefix.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   of type String or Binary (not a Number or a set type). The target
--   attribute of the comparison must be of type String or Binary (not a
--   Number or a set type).
--   
--   <tt>IN</tt> : Checks for matching elements within two sets.
--   
--   <i>AttributeValueList</i> can contain one or more
--   <i>AttributeValue</i> elements of type String, Number, or Binary (not
--   a set type). These attributes are compared against an existing set
--   type attribute of an item. If any elements of the input set are
--   present in the item attribute, the expression evaluates to true.
--   
--   <tt>BETWEEN</tt> : Greater than or equal to the first value, and less
--   than or equal to the second value.
--   
--   <i>AttributeValueList</i> must contain two <i>AttributeValue</i>
--   elements of the same type, either String, Number, or Binary (not a set
--   type). A target attribute matches if the target value is greater than,
--   or equal to, the first element and less than, or equal to, the second
--   element. If an item contains an <i>AttributeValue</i> element of a
--   different type than the one provided in the request, the value does
--   not match. For example, '{<a>S</a>:"6"}' does not compare to
--   '{<a>N</a>:"6"}'. Also, '{<a>N</a>:"6"}' does not compare to
--   '{<a>NS</a>:["6", "2", "1"]}'
--   
--   For usage examples of <i>AttributeValueList</i> and
--   <i>ComparisonOperator</i>, see <a>Legacy Conditional Parameters</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   For backward compatibility with previous DynamoDB releases, the
--   following parameters can be used instead of <i>AttributeValueList</i>
--   and <i>ComparisonOperator</i>:
--   
--   <i>Value</i> - A value for DynamoDB to compare with an attribute.
--   
--   <i>Exists</i> - A Boolean value that causes DynamoDB to evaluate the
--   value before attempting the conditional operation:
--   
--   If <i>Exists</i> is <tt>true</tt>, DynamoDB will check to see if that
--   attribute value already exists in the table. If it is found, then the
--   condition evaluates to true; otherwise the condition evaluate to
--   false.
--   
--   If <i>Exists</i> is <tt>false</tt>, DynamoDB assumes that the
--   attribute value does <i>not</i> exist in the table. If in fact the
--   value does not exist, then the assumption is valid and the condition
--   evaluates to true. If the value is found, despite the assumption that
--   it does not exist, the condition evaluates to false.
--   
--   Note that the default value for <i>Exists</i> is <tt>true</tt>.
--   
--   The <i>Value</i> and <i>Exists</i> parameters are incompatible with
--   <i>AttributeValueList</i> and <i>ComparisonOperator</i>. Note that if
--   you use both sets of parameters at once, DynamoDB will return a
--   <i>ValidationException</i> exception.
--   
--   This parameter does not support attributes of type List or Map.
uiExpected :: Lens' UpdateItem (HashMap Text ExpectedAttributeValue)

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <i>ExpressionAttributeNames</i>:
--   
--   To access an attribute whose name conflicts with a DynamoDB reserved
--   word.
--   
--   To create a placeholder for repeating occurrences of an attribute name
--   in an expression.
--   
--   To prevent special characters in an attribute name from being
--   misinterpreted in an expression.
--   
--   Use the # character in an expression to dereference an attribute name.
--   For example, consider the following attribute name:
--   
--   <tt>Percentile</tt>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <i>ExpressionAttributeNames</i>:
--   
--   '{"#P":<a>Percentile</a>}'
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   '#P = :val'
--   
--   Tokens that begin with the : character are <i>expression attribute
--   values</i>, which are placeholders for the actual value at runtime.
--   
--   For more information on expression attribute names, see <a>Using
--   Placeholdersfor Attribute Names and Values</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
uiExpressionAttributeNames :: Lens' UpdateItem (HashMap Text Text)

-- | One or more values that can be substituted in an expression.
--   
--   Use the : (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   'Available | Backordered | Discontinued'
--   
--   You would first need to specify <i>ExpressionAttributeValues</i> as
--   follows:
--   
--   '{ ":avail":{<a>S</a>:<a>Available</a>},
--   ":back":{<a>S</a>:<a>Backordered</a>},":disc":{<a>S</a>:<a>Discontinued</a>}
--   }'
--   
--   You could then use these values in an expression, such as this:
--   
--   'ProductStatus IN (:avail, :back, :disc)'
--   
--   For more information on expression attribute values, see <a>Using
--   Placeholdersfor Attribute Names and Values</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
uiExpressionAttributeValues :: Lens' UpdateItem (HashMap Text AttributeValue)

-- | The primary key of the item to be updated. Each element consists of an
--   attribute name and a value for that attribute.
--   
--   For the primary key, you must provide all of the attributes. For
--   example, with a hash type primary key, you only need to provide the
--   hash attribute. For a hash-and-range type primary key, you must
--   provide both the hash attribute and the range attribute.
uiKey :: Lens' UpdateItem (HashMap Text AttributeValue)
uiReturnConsumedCapacity :: Lens' UpdateItem (Maybe ReturnConsumedCapacity)

-- | A value that if set to <tt>SIZE</tt>, the response includes statistics
--   about item collections, if any, that were modified during the
--   operation are returned in the response. If set to <tt>NONE</tt> (the
--   default), no statistics are returned.
uiReturnItemCollectionMetrics :: Lens' UpdateItem (Maybe ReturnItemCollectionMetrics)

-- | Use <i>ReturnValues</i> if you want to get the item attributes as they
--   appeared either before or after they were updated. For
--   <i>UpdateItem</i>, the valid values are:
--   
--   <tt>NONE</tt> - If <i>ReturnValues</i> is not specified, or if its
--   value is <tt>NONE</tt>, then nothing is returned. (This setting is the
--   default for <i>ReturnValues</i>.)
--   
--   <tt>ALL_OLD</tt> - If <i>UpdateItem</i> overwrote an attribute
--   name-value pair, then the content of the old item is returned.
--   
--   <tt>UPDATED_OLD</tt> - The old versions of only the updated attributes
--   are returned.
--   
--   <tt>ALL_NEW</tt> - All of the attributes of the new version of the
--   item are returned.
--   
--   <tt>UPDATED_NEW</tt> - The new versions of only the updated attributes
--   are returned.
uiReturnValues :: Lens' UpdateItem (Maybe ReturnValue)

-- | The name of the table containing the item to update.
uiTableName :: Lens' UpdateItem Text

-- | An expression that defines one or more attributes to be updated, the
--   action to be performed on them, and new value(s) for them.
--   
--   The following action values are available for <i>UpdateExpression</i>.
--   
--   <tt>SET</tt> - Adds one or more attributes and values to an item. If
--   any of these attribute already exist, they are replaced by the new
--   values. You can also use <tt>SET</tt> to add or subtract from an
--   attribute that is of type Number.
--   
--   <tt>SET</tt> supports the following functions:
--   
--   'if_not_exists (path, operand)' - if the item does not contain an
--   attribute at the specified path, then <tt>if_not_exists</tt> evaluates
--   to operand; otherwise, it evaluates to path. You can use this function
--   to avoid overwriting an attribute that may already be present in the
--   item.
--   
--   'list_append (operand, operand)' - evaluates to a list with a new
--   element added to it. You can append the new element to the start or
--   the end of the list by reversing the order of the operands.
--   
--   These function names are case-sensitive.
--   
--   <tt>REMOVE</tt> - Removes one or more attributes from an item.
--   
--   <tt>ADD</tt> - Adds the specified value to the item, if the attribute
--   does not already exist. If the attribute does exist, then the behavior
--   of <tt>ADD</tt> depends on the data type of the attribute:
--   
--   If the existing attribute is a number, and if <i>Value</i> is also a
--   number, then <i>Value</i> is mathematically added to the existing
--   attribute. If <i>Value</i> is a negative number, then it is subtracted
--   from the existing attribute.
--   
--   If you use <tt>ADD</tt> to increment or decrement a number value for
--   an item that doesn't exist before the update, DynamoDB uses '0' as the
--   initial value.
--   
--   Similarly, if you use <tt>ADD</tt> for an existing item to increment
--   or decrement an attribute value that doesn't exist before the update,
--   DynamoDB uses '0' as the initial value. For example, suppose that the
--   item you want to update doesn't have an attribute named
--   <i>itemcount</i>, but you decide to <tt>ADD</tt> the number '3' to
--   this attribute anyway. DynamoDB will create the <i>itemcount</i>
--   attribute, set its initial value to '0', and finally add '3' to it.
--   The result will be a new <i>itemcount</i> attribute in the item, with
--   a value of '3'.
--   
--   If the existing data type is a set and if <i>Value</i> is also a set,
--   then <i>Value</i> is added to the existing set. For example, if the
--   attribute value is the set '[1,2]', and the <tt>ADD</tt> action
--   specified '[3]', then the final attribute value is '[1,2,3]'. An error
--   occurs if an <tt>ADD</tt> action is specified for a set attribute and
--   the attribute type specified does not match the existing set type.
--   
--   Both sets must have the same primitive data type. For example, if the
--   existing data type is a set of strings, the <i>Value</i> must also be
--   a set of strings.
--   
--   The <tt>ADD</tt> action only supports Number and set data types. In
--   addition, <tt>ADD</tt> can only be used on top-level attributes, not
--   nested attributes.
--   
--   <a>DELETE</a> - Deletes an element from a set.
--   
--   If a set of values is specified, then those values are subtracted from
--   the old set. For example, if the attribute value was the set '[a,b,c]'
--   and the <a>DELETE</a> action specifies '[a,c]', then the final
--   attribute value is '[b]'. Specifying an empty set is an error.
--   
--   The <a>DELETE</a> action only supports Number and set data types. In
--   addition, <a>DELETE</a> can only be used on top-level attributes, not
--   nested attributes.
--   
--   You can have many actions in a single expression, such as the
--   following: 'SET a=:value1, b=:value2 DELETE :value3, :value4, :value5'
--   
--   For more information on update expressions, see <a>Modifying Items
--   andAttributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <i>UpdateExpression</i> replaces the legacy <i>AttributeUpdates</i>
--   parameter.
uiUpdateExpression :: Lens' UpdateItem (Maybe Text)
data UpdateItemResponse

-- | <a>UpdateItemResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>uirAttributes</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>AttributeValue</a></li>
--   <li><a>uirConsumedCapacity</a> <tt>::</tt> <a>Maybe</a>
--   <a>ConsumedCapacity</a></li>
--   <li><a>uirItemCollectionMetrics</a> <tt>::</tt> <a>Maybe</a>
--   <a>ItemCollectionMetrics</a></li>
--   </ul>
updateItemResponse :: UpdateItemResponse

-- | A map of attribute values as they appeared before the
--   <i>UpdateItem</i> operation. This map only appears if
--   <i>ReturnValues</i> was specified as something other than
--   <tt>NONE</tt> in the request. Each element represents one attribute.
uirAttributes :: Lens' UpdateItemResponse (HashMap Text AttributeValue)
uirConsumedCapacity :: Lens' UpdateItemResponse (Maybe ConsumedCapacity)
uirItemCollectionMetrics :: Lens' UpdateItemResponse (Maybe ItemCollectionMetrics)
instance Eq UpdateItem
instance Read UpdateItem
instance Show UpdateItem
instance Eq UpdateItemResponse
instance Read UpdateItemResponse
instance Show UpdateItemResponse
instance FromJSON UpdateItemResponse
instance AWSRequest UpdateItem
instance ToJSON UpdateItem
instance ToHeaders UpdateItem
instance ToQuery UpdateItem
instance ToPath UpdateItem


-- | Updates the provisioned throughput for the given table, or manages the
--   global secondary indexes on the table.
--   
--   You can increase or decrease the table's provisioned throughput values
--   within the maximums and minimums listed in the <a>Limits</a> section
--   in the <i>AmazonDynamoDB Developer Guide</i>.
--   
--   In addition, you can use <i>UpdateTable</i> to add, modify or delete
--   global secondary indexes on the table. For more information, see
--   <a>Managing GlobalSecondary Indexes</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   The table must be in the <tt>ACTIVE</tt> state for <i>UpdateTable</i>
--   to succeed. <i>UpdateTable</i> is an asynchronous operation; while
--   executing the operation, the table is in the <tt>UPDATING</tt> state.
--   While the table is in the <tt>UPDATING</tt> state, the table still has
--   the provisioned throughput from before the call. The table's new
--   provisioned throughput settings go into effect when the table returns
--   to the <tt>ACTIVE</tt> state; at that point, the <i>UpdateTable</i>
--   operation is complete.
--   
--   
--   <a>http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateTable.html</a>
module Network.AWS.DynamoDB.UpdateTable
data UpdateTable

-- | <a>UpdateTable</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>utAttributeDefinitions</a> <tt>::</tt>
--   [<a>AttributeDefinition</a>]</li>
--   <li><a>utGlobalSecondaryIndexUpdates</a> <tt>::</tt>
--   [<a>GlobalSecondaryIndexUpdate</a>]</li>
--   <li><a>utProvisionedThroughput</a> <tt>::</tt> <a>Maybe</a>
--   <a>ProvisionedThroughput</a></li>
--   <li><a>utTableName</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
updateTable :: Text -> UpdateTable

-- | An array of attributes that describe the key schema for the table and
--   indexes. If you are adding a new global secondary index to the table,
--   <i>AttributeDefinitions</i> must include the key element(s) of the new
--   index.
utAttributeDefinitions :: Lens' UpdateTable [AttributeDefinition]

-- | An array of one or more global secondary indexes for the table. For
--   each index in the array, you can request one action:
--   
--   <i>Create</i> - add a new global secondary index to the table.
--   
--   <i>Update</i> - modify the provisioned throughput settings of an
--   existing global secondary index.
--   
--   <i>Delete</i> - remove a global secondary index from the table.
utGlobalSecondaryIndexUpdates :: Lens' UpdateTable [GlobalSecondaryIndexUpdate]
utProvisionedThroughput :: Lens' UpdateTable (Maybe ProvisionedThroughput)

-- | The name of the table to be updated.
utTableName :: Lens' UpdateTable Text
data UpdateTableResponse

-- | <a>UpdateTableResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>utrTableDescription</a> <tt>::</tt> <a>Maybe</a>
--   <a>TableDescription</a></li>
--   </ul>
updateTableResponse :: UpdateTableResponse
utrTableDescription :: Lens' UpdateTableResponse (Maybe TableDescription)
instance Eq UpdateTable
instance Read UpdateTable
instance Show UpdateTable
instance Eq UpdateTableResponse
instance Read UpdateTableResponse
instance Show UpdateTableResponse
instance FromJSON UpdateTableResponse
instance AWSRequest UpdateTable
instance ToJSON UpdateTable
instance ToHeaders UpdateTable
instance ToQuery UpdateTable
instance ToPath UpdateTable


-- | The <i>Scan</i> operation returns one or more items and item
--   attributes by accessing every item in a table or a secondary index. To
--   have DynamoDB return fewer items, you can provide a <i>ScanFilter</i>
--   operation.
--   
--   If the total number of scanned items exceeds the maximum data set size
--   limit of 1 MB, the scan stops and results are returned to the user as
--   a <i>LastEvaluatedKey</i> value to continue the scan in a subsequent
--   operation. The results also include the number of items exceeding the
--   limit. A scan can result in no table data meeting the filter criteria.
--   
--   The result set is eventually consistent.
--   
--   By default, <i>Scan</i> operations proceed sequentially; however, for
--   faster performance on a large table or secondary index, applications
--   can request a parallel <i>Scan</i> operation by providing the
--   <i>Segment</i> and <i>TotalSegments</i> parameters. For more
--   information, see <a>Parallel Scan</a> in the <i>Amazon
--   DynamoDBDeveloper Guide</i>.
--   
--   
--   <a>http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Scan.html</a>
module Network.AWS.DynamoDB.Scan
data Scan

-- | <a>Scan</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>sAttributesToGet</a> <tt>::</tt> <a>NonEmpty</a>
--   <a>Text</a></li>
--   <li><a>sConditionalOperator</a> <tt>::</tt> <a>Maybe</a>
--   <a>ConditionalOperator</a></li>
--   <li><a>sExclusiveStartKey</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>AttributeValue</a></li>
--   <li><a>sExpressionAttributeNames</a> <tt>::</tt> <a>HashMap</a>
--   <a>Text</a> <a>Text</a></li>
--   <li><a>sExpressionAttributeValues</a> <tt>::</tt> <a>HashMap</a>
--   <a>Text</a> <a>AttributeValue</a></li>
--   <li><a>sFilterExpression</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>sIndexName</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>sLimit</a> <tt>::</tt> <a>Maybe</a> <a>Natural</a></li>
--   <li><a>sProjectionExpression</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>sReturnConsumedCapacity</a> <tt>::</tt> <a>Maybe</a>
--   <a>ReturnConsumedCapacity</a></li>
--   <li><a>sScanFilter</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>Condition</a></li>
--   <li><a>sSegment</a> <tt>::</tt> <a>Maybe</a> <a>Natural</a></li>
--   <li><a>sSelect</a> <tt>::</tt> <a>Maybe</a> <a>Select</a></li>
--   <li><a>sTableName</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>sTotalSegments</a> <tt>::</tt> <a>Maybe</a> <a>Natural</a></li>
--   </ul>
scan :: Text -> NonEmpty Text -> Scan

-- | This is a legacy parameter, for backward compatibility. New
--   applications should use <i>ProjectionExpression</i> instead. Do not
--   combine legacy parameters and expression parameters in a single API
--   call; otherwise, DynamoDB will return a <i>ValidationException</i>
--   exception.
--   
--   This parameter allows you to retrieve attributes of type List or Map;
--   however, it cannot retrieve individual elements within a List or a
--   Map.
--   
--   The names of one or more attributes to retrieve. If no attribute names
--   are provided, then all attributes will be returned. If any of the
--   requested attributes are not found, they will not appear in the
--   result.
--   
--   Note that <i>AttributesToGet</i> has no effect on provisioned
--   throughput consumption. DynamoDB determines capacity units consumed
--   based on item size, not on the amount of data that is returned to an
--   application.
sAttributesToGet :: Lens' Scan (NonEmpty Text)

-- | This is a legacy parameter, for backward compatibility. New
--   applications should use <i>FilterExpression</i> instead. Do not
--   combine legacy parameters and expression parameters in a single API
--   call; otherwise, DynamoDB will return a <i>ValidationException</i>
--   exception.
--   
--   A logical operator to apply to the conditions in a <i>ScanFilter</i>
--   map:
--   
--   <tt>AND</tt> - If all of the conditions evaluate to true, then the
--   entire map evaluates to true.
--   
--   <tt>OR</tt> - If at least one of the conditions evaluate to true, then
--   the entire map evaluates to true.
--   
--   If you omit <i>ConditionalOperator</i>, then <tt>AND</tt> is the
--   default.
--   
--   The operation will succeed only if the entire map evaluates to true.
--   
--   This parameter does not support attributes of type List or Map.
sConditionalOperator :: Lens' Scan (Maybe ConditionalOperator)

-- | The primary key of the first item that this operation will evaluate.
--   Use the value that was returned for <i>LastEvaluatedKey</i> in the
--   previous operation.
--   
--   The data type for <i>ExclusiveStartKey</i> must be String, Number or
--   Binary. No set data types are allowed.
--   
--   In a parallel scan, a <i>Scan</i> request that includes
--   <i>ExclusiveStartKey</i> must specify the same segment whose previous
--   <i>Scan</i> returned the corresponding value of
--   <i>LastEvaluatedKey</i>.
sExclusiveStartKey :: Lens' Scan (HashMap Text AttributeValue)

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <i>ExpressionAttributeNames</i>:
--   
--   To access an attribute whose name conflicts with a DynamoDB reserved
--   word.
--   
--   To create a placeholder for repeating occurrences of an attribute name
--   in an expression.
--   
--   To prevent special characters in an attribute name from being
--   misinterpreted in an expression.
--   
--   Use the # character in an expression to dereference an attribute name.
--   For example, consider the following attribute name:
--   
--   <tt>Percentile</tt>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <i>ExpressionAttributeNames</i>:
--   
--   '{"#P":<a>Percentile</a>}'
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   '#P = :val'
--   
--   Tokens that begin with the : character are <i>expression attribute
--   values</i>, which are placeholders for the actual value at runtime.
--   
--   For more information on expression attribute names, see <a>Using
--   Placeholdersfor Attribute Names and Values</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
sExpressionAttributeNames :: Lens' Scan (HashMap Text Text)

-- | One or more values that can be substituted in an expression.
--   
--   Use the : (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   'Available | Backordered | Discontinued'
--   
--   You would first need to specify <i>ExpressionAttributeValues</i> as
--   follows:
--   
--   '{ ":avail":{<a>S</a>:<a>Available</a>},
--   ":back":{<a>S</a>:<a>Backordered</a>},":disc":{<a>S</a>:<a>Discontinued</a>}
--   }'
--   
--   You could then use these values in an expression, such as this:
--   
--   'ProductStatus IN (:avail, :back, :disc)'
--   
--   For more information on expression attribute values, see <a>Using
--   Placeholdersfor Attribute Names and Values</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
sExpressionAttributeValues :: Lens' Scan (HashMap Text AttributeValue)

-- | A string that contains conditions that DynamoDB applies after the
--   <i>Scan</i> operation, but before the data is returned to you. Items
--   that do not satisfy the <i>FilterExpression</i> criteria are not
--   returned.
--   
--   A <i>FilterExpression</i> is applied after the items have already been
--   read; the process of filtering does not consume any additional read
--   capacity units.
--   
--   For more information, see <a>Filter Expressions</a> in the <i>Amazon
--   DynamoDBDeveloper Guide</i>.
--   
--   <i>FilterExpression</i> replaces the legacy <i>ScanFilter</i> and
--   <i>ConditionalOperator</i> parameters.
sFilterExpression :: Lens' Scan (Maybe Text)

-- | The name of a secondary index to scan. This index can be any local
--   secondary index or global secondary index. Note that if you use the
--   <tt>IndexName</tt> parameter, you must also provide
--   <tt>TableName</tt>.
sIndexName :: Lens' Scan (Maybe Text)

-- | The maximum number of items to evaluate (not necessarily the number of
--   matching items). If DynamoDB processes the number of items up to the
--   limit while processing the results, it stops the operation and returns
--   the matching values up to that point, and a key in
--   <i>LastEvaluatedKey</i> to apply in a subsequent operation, so that
--   you can pick up where you left off. Also, if the processed data set
--   size exceeds 1 MB before DynamoDB reaches this limit, it stops the
--   operation and returns the matching values up to the limit, and a key
--   in <i>LastEvaluatedKey</i> to apply in a subsequent operation to
--   continue the operation. For more information, see <a>Query and
--   Scan</a> in the <i>Amazon DynamoDBDeveloper Guide</i>.
sLimit :: Lens' Scan (Maybe Natural)

-- | A string that identifies one or more attributes to retrieve from the
--   specified table or index. These attributes can include scalars, sets,
--   or elements of a JSON document. The attributes in the expression must
--   be separated by commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Accessing Item Attributes</a> in the
--   <i>Amazon DynamoDBDeveloper Guide</i>.
--   
--   <i>ProjectionExpression</i> replaces the legacy <i>AttributesToGet</i>
--   parameter.
sProjectionExpression :: Lens' Scan (Maybe Text)
sReturnConsumedCapacity :: Lens' Scan (Maybe ReturnConsumedCapacity)

-- | This is a legacy parameter, for backward compatibility. New
--   applications should use <i>FilterExpression</i> instead. Do not
--   combine legacy parameters and expression parameters in a single API
--   call; otherwise, DynamoDB will return a <i>ValidationException</i>
--   exception.
--   
--   A condition that evaluates the scan results and returns only the
--   desired values.
--   
--   This parameter does not support attributes of type List or Map.
--   
--   If you specify more than one condition in the <i>ScanFilter</i> map,
--   then by default all of the conditions must evaluate to true. In other
--   words, the conditions are ANDed together. (You can use the
--   <i>ConditionalOperator</i> parameter to OR the conditions instead. If
--   you do this, then at least one of the conditions must evaluate to
--   true, rather than all of them.)
--   
--   Each <i>ScanFilter</i> element consists of an attribute name to
--   compare, along with the following:
--   
--   <i>AttributeValueList</i> - One or more values to evaluate against the
--   supplied attribute. The number of values in the list depends on the
--   operator specified in <i>ComparisonOperator</i> .
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <a>B</a>. For
--   a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
--   
--   For information on specifying data types in JSON, see <a>JSON Data
--   Format</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <i>ComparisonOperator</i> - A comparator for evaluating attributes.
--   For example, equals, greater than, less than, etc.
--   
--   The following comparison operators are available:
--   
--   'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS |
--   NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'
--   
--   For complete descriptions of all comparison operators, see
--   <a>Condition</a>.
sScanFilter :: Lens' Scan (HashMap Text Condition)

-- | For a parallel <i>Scan</i> request, <i>Segment</i> identifies an
--   individual segment to be scanned by an application worker.
--   
--   Segment IDs are zero-based, so the first segment is always 0. For
--   example, if you want to use four application threads to scan a table
--   or an index, then the first thread specifies a <i>Segment</i> value of
--   0, the second thread specifies 1, and so on.
--   
--   The value of <i>LastEvaluatedKey</i> returned from a parallel
--   <i>Scan</i> request must be used as <i>ExclusiveStartKey</i> with the
--   same segment ID in a subsequent <i>Scan</i> operation.
--   
--   The value for <i>Segment</i> must be greater than or equal to 0, and
--   less than the value provided for <i>TotalSegments</i>.
--   
--   If you provide <i>Segment</i>, you must also provide
--   <i>TotalSegments</i>.
sSegment :: Lens' Scan (Maybe Natural)

-- | The attributes to be returned in the result. You can retrieve all item
--   attributes, specific item attributes, or the count of matching items.
--   
--   <tt>ALL_ATTRIBUTES</tt> - Returns all of the item attributes.
--   
--   <tt>COUNT</tt> - Returns the number of matching items, rather than the
--   matching items themselves.
--   
--   <tt>SPECIFIC_ATTRIBUTES</tt> - Returns only the attributes listed in
--   <i>AttributesToGet</i>. This return value is equivalent to specifying
--   <i>AttributesToGet</i> without specifying any value for <i>Select</i>.
--   
--   If neither <i>Select</i> nor <i>AttributesToGet</i> are specified,
--   DynamoDB defaults to <tt>ALL_ATTRIBUTES</tt>. You cannot use both
--   <i>AttributesToGet</i> and <i>Select</i> together in a single request,
--   unless the value for <i>Select</i> is <tt>SPECIFIC_ATTRIBUTES</tt>.
--   (This usage is equivalent to specifying <i>AttributesToGet</i> without
--   any value for <i>Select</i>.)
sSelect :: Lens' Scan (Maybe Select)

-- | The name of the table containing the requested items; or, if you
--   provide <tt>IndexName</tt>, the name of the table to which that index
--   belongs.
sTableName :: Lens' Scan Text

-- | For a parallel <i>Scan</i> request, <i>TotalSegments</i> represents
--   the total number of segments into which the <i>Scan</i> operation will
--   be divided. The value of <i>TotalSegments</i> corresponds to the
--   number of application workers that will perform the parallel scan. For
--   example, if you want to use four application threads to scan a table
--   or an index, specify a <i>TotalSegments</i> value of 4.
--   
--   The value for <i>TotalSegments</i> must be greater than or equal to 1,
--   and less than or equal to 1000000. If you specify a
--   <i>TotalSegments</i> value of 1, the <i>Scan</i> operation will be
--   sequential rather than parallel.
--   
--   If you specify <i>TotalSegments</i>, you must also specify
--   <i>Segment</i>.
sTotalSegments :: Lens' Scan (Maybe Natural)
data ScanResponse

-- | <a>ScanResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>srConsumedCapacity</a> <tt>::</tt> <a>Maybe</a>
--   <a>ConsumedCapacity</a></li>
--   <li><a>srCount</a> <tt>::</tt> <a>Maybe</a> <a>Int</a></li>
--   <li><a>srItems</a> <tt>::</tt> [<a>HashMap</a> <a>Text</a>
--   <a>AttributeValue</a>]</li>
--   <li><a>srLastEvaluatedKey</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>AttributeValue</a></li>
--   <li><a>srScannedCount</a> <tt>::</tt> <a>Maybe</a> <a>Int</a></li>
--   </ul>
scanResponse :: ScanResponse
srConsumedCapacity :: Lens' ScanResponse (Maybe ConsumedCapacity)

-- | The number of items in the response.
--   
--   If you set <i>ScanFilter</i> in the request, then <i>Count</i> is the
--   number of items returned after the filter was applied, and
--   <i>ScannedCount</i> is the number of matching items before the filter
--   was applied.
--   
--   If you did not use a filter in the request, then <i>Count</i> is the
--   same as <i>ScannedCount</i>.
srCount :: Lens' ScanResponse (Maybe Int)

-- | An array of item attributes that match the scan criteria. Each element
--   in this array consists of an attribute name and the value for that
--   attribute.
srItems :: Lens' ScanResponse [HashMap Text AttributeValue]

-- | The primary key of the item where the operation stopped, inclusive of
--   the previous result set. Use this value to start a new operation,
--   excluding this value in the new request.
--   
--   If <i>LastEvaluatedKey</i> is empty, then the "last page" of results
--   has been processed and there is no more data to be retrieved.
--   
--   If <i>LastEvaluatedKey</i> is not empty, it does not necessarily mean
--   that there is more data in the result set. The only way to know when
--   you have reached the end of the result set is when
--   <i>LastEvaluatedKey</i> is empty.
srLastEvaluatedKey :: Lens' ScanResponse (HashMap Text AttributeValue)

-- | The number of items evaluated, before any <i>ScanFilter</i> is
--   applied. A high <i>ScannedCount</i> value with few, or no,
--   <i>Count</i> results indicates an inefficient <i>Scan</i> operation.
--   For more information, see <a>Count and ScannedCount</a> in the
--   <i>AmazonDynamoDB Developer Guide</i>.
--   
--   If you did not use a filter in the request, then <i>ScannedCount</i>
--   is the same as <i>Count</i>.
srScannedCount :: Lens' ScanResponse (Maybe Int)
instance Eq Scan
instance Read Scan
instance Show Scan
instance Eq ScanResponse
instance Read ScanResponse
instance Show ScanResponse
instance AWSPager Scan
instance FromJSON ScanResponse
instance AWSRequest Scan
instance ToJSON Scan
instance ToHeaders Scan
instance ToQuery Scan
instance ToPath Scan


-- | A <i>Query</i> operation uses the primary key of a table or a
--   secondary index to directly access items from that table or index.
--   
--   Use the <i>KeyConditionExpression</i> parameter to provide a specific
--   hash key value. The <i>Query</i> operation will return all of the
--   items from the table or index with that hash key value. You can
--   optionally narrow the scope of the <i>Query</i> by specifying a range
--   key value and a comparison operator in the
--   <i>KeyConditionExpression</i>. You can use the <i>ScanIndexForward</i>
--   parameter to get results in forward or reverse order, by range key or
--   by index key.
--   
--   Queries that do not return results consume the minimum number of read
--   capacity units for that type of read operation.
--   
--   If the total number of items meeting the query criteria exceeds the
--   result set size limit of 1 MB, the query stops and results are
--   returned to the user with <i>LastEvaluatedKey</i> to continue the
--   query in a subsequent operation. Unlike a <i>Scan</i> operation, a
--   <i>Query</i> operation never returns both an empty result set and a
--   <i>LastEvaluatedKey</i>. The <i>LastEvaluatedKey</i> is only provided
--   if the results exceed 1 MB, or if you have used <i>Limit</i>.
--   
--   You can query a table, a local secondary index, or a global secondary
--   index. For a query on a table or on a local secondary index, you can
--   set <i>ConsistentRead</i> to true and obtain a strongly consistent
--   result. Global secondary indexes support eventually consistent reads
--   only, so do not specify <i>ConsistentRead</i> when querying a global
--   secondary index.
--   
--   
--   <a>http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html</a>
module Network.AWS.DynamoDB.Query
data Query

-- | <a>Query</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>qAttributesToGet</a> <tt>::</tt> <a>NonEmpty</a>
--   <a>Text</a></li>
--   <li><a>qConditionalOperator</a> <tt>::</tt> <a>Maybe</a>
--   <a>ConditionalOperator</a></li>
--   <li><a>qConsistentRead</a> <tt>::</tt> <a>Maybe</a> <a>Bool</a></li>
--   <li><a>qExclusiveStartKey</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>AttributeValue</a></li>
--   <li><a>qExpressionAttributeNames</a> <tt>::</tt> <a>HashMap</a>
--   <a>Text</a> <a>Text</a></li>
--   <li><a>qExpressionAttributeValues</a> <tt>::</tt> <a>HashMap</a>
--   <a>Text</a> <a>AttributeValue</a></li>
--   <li><a>qFilterExpression</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>qIndexName</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>qKeyConditionExpression</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>qKeyConditions</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>Condition</a></li>
--   <li><a>qLimit</a> <tt>::</tt> <a>Maybe</a> <a>Natural</a></li>
--   <li><a>qProjectionExpression</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>qQueryFilter</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>Condition</a></li>
--   <li><a>qReturnConsumedCapacity</a> <tt>::</tt> <a>Maybe</a>
--   <a>ReturnConsumedCapacity</a></li>
--   <li><a>qScanIndexForward</a> <tt>::</tt> <a>Maybe</a> <a>Bool</a></li>
--   <li><a>qSelect</a> <tt>::</tt> <a>Maybe</a> <a>Select</a></li>
--   <li><a>qTableName</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
query :: Text -> NonEmpty Text -> Query

-- | This is a legacy parameter, for backward compatibility. New
--   applications should use <i>ProjectionExpression</i> instead. Do not
--   combine legacy parameters and expression parameters in a single API
--   call; otherwise, DynamoDB will return a <i>ValidationException</i>
--   exception.
--   
--   This parameter allows you to retrieve attributes of type List or Map;
--   however, it cannot retrieve individual elements within a List or a
--   Map.
--   
--   The names of one or more attributes to retrieve. If no attribute names
--   are provided, then all attributes will be returned. If any of the
--   requested attributes are not found, they will not appear in the
--   result.
--   
--   Note that <i>AttributesToGet</i> has no effect on provisioned
--   throughput consumption. DynamoDB determines capacity units consumed
--   based on item size, not on the amount of data that is returned to an
--   application.
--   
--   You cannot use both <i>AttributesToGet</i> and <i>Select</i> together
--   in a <i>Query</i> request, <i>unless</i> the value for <i>Select</i>
--   is <tt>SPECIFIC_ATTRIBUTES</tt>. (This usage is equivalent to
--   specifying <i>AttributesToGet</i> without any value for
--   <i>Select</i>.)
--   
--   If you query a local secondary index and request only attributes that
--   are projected into that index, the operation will read only the index
--   and not the table. If any of the requested attributes are not
--   projected into the local secondary index, DynamoDB will fetch each of
--   these attributes from the parent table. This extra fetching incurs
--   additional throughput cost and latency.
--   
--   If you query a global secondary index, you can only request attributes
--   that are projected into the index. Global secondary index queries
--   cannot fetch attributes from the parent table.
qAttributesToGet :: Lens' Query (NonEmpty Text)

-- | This is a legacy parameter, for backward compatibility. New
--   applications should use <i>FilterExpression</i> instead. Do not
--   combine legacy parameters and expression parameters in a single API
--   call; otherwise, DynamoDB will return a <i>ValidationException</i>
--   exception.
--   
--   A logical operator to apply to the conditions in a <i>QueryFilter</i>
--   map:
--   
--   <tt>AND</tt> - If all of the conditions evaluate to true, then the
--   entire map evaluates to true.
--   
--   <tt>OR</tt> - If at least one of the conditions evaluate to true, then
--   the entire map evaluates to true.
--   
--   If you omit <i>ConditionalOperator</i>, then <tt>AND</tt> is the
--   default.
--   
--   The operation will succeed only if the entire map evaluates to true.
--   
--   This parameter does not support attributes of type List or Map.
qConditionalOperator :: Lens' Query (Maybe ConditionalOperator)

-- | A value that if set to <tt>true</tt>, then the operation uses strongly
--   consistent reads; otherwise, eventually consistent reads are used.
--   
--   Strongly consistent reads are not supported on global secondary
--   indexes. If you query a global secondary index with
--   <i>ConsistentRead</i> set to <tt>true</tt>, you will receive an error
--   message.
qConsistentRead :: Lens' Query (Maybe Bool)

-- | The primary key of the first item that this operation will evaluate.
--   Use the value that was returned for <i>LastEvaluatedKey</i> in the
--   previous operation.
--   
--   The data type for <i>ExclusiveStartKey</i> must be String, Number or
--   Binary. No set data types are allowed.
qExclusiveStartKey :: Lens' Query (HashMap Text AttributeValue)

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <i>ExpressionAttributeNames</i>:
--   
--   To access an attribute whose name conflicts with a DynamoDB reserved
--   word.
--   
--   To create a placeholder for repeating occurrences of an attribute name
--   in an expression.
--   
--   To prevent special characters in an attribute name from being
--   misinterpreted in an expression.
--   
--   Use the # character in an expression to dereference an attribute name.
--   For example, consider the following attribute name:
--   
--   <tt>Percentile</tt>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <i>ExpressionAttributeNames</i>:
--   
--   '{"#P":<a>Percentile</a>}'
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   '#P = :val'
--   
--   Tokens that begin with the : character are <i>expression attribute
--   values</i>, which are placeholders for the actual value at runtime.
--   
--   For more information on expression attribute names, see <a>Using
--   Placeholdersfor Attribute Names and Values</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
qExpressionAttributeNames :: Lens' Query (HashMap Text Text)

-- | One or more values that can be substituted in an expression.
--   
--   Use the : (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   'Available | Backordered | Discontinued'
--   
--   You would first need to specify <i>ExpressionAttributeValues</i> as
--   follows:
--   
--   '{ ":avail":{<a>S</a>:<a>Available</a>},
--   ":back":{<a>S</a>:<a>Backordered</a>},":disc":{<a>S</a>:<a>Discontinued</a>}
--   }'
--   
--   You could then use these values in an expression, such as this:
--   
--   'ProductStatus IN (:avail, :back, :disc)'
--   
--   For more information on expression attribute values, see <a>Using
--   Placeholdersfor Attribute Names and Values</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
qExpressionAttributeValues :: Lens' Query (HashMap Text AttributeValue)

-- | A string that contains conditions that DynamoDB applies after the
--   <i>Query</i> operation, but before the data is returned to you. Items
--   that do not satisfy the <i>FilterExpression</i> criteria are not
--   returned.
--   
--   A <i>FilterExpression</i> is applied after the items have already been
--   read; the process of filtering does not consume any additional read
--   capacity units.
--   
--   For more information, see <a>Filter Expressions</a> in the <i>Amazon
--   DynamoDBDeveloper Guide</i>.
--   
--   <i>FilterExpression</i> replaces the legacy <i>QueryFilter</i> and
--   <i>ConditionalOperator</i> parameters.
qFilterExpression :: Lens' Query (Maybe Text)

-- | The name of an index to query. This index can be any local secondary
--   index or global secondary index on the table. Note that if you use the
--   <i>IndexName</i> parameter, you must also provide <i>TableName.</i>
qIndexName :: Lens' Query (Maybe Text)

-- | The condition that specifies the key value(s) for items to be
--   retrieved by the <i>Query</i> action.
--   
--   The condition must perform an equality test on a single hash key
--   value. The condition can also test for one or more range key values. A
--   <i>Query</i> can use <i>KeyConditionExpression</i> to retrieve a
--   single item with a given hash and range key value, or several items
--   that have the same hash key value but different range key values.
--   
--   The hash key equality test is required, and must be specified in the
--   following format:
--   
--   <tt>hashAttributeName</tt> <i>=</i> ':hashval'
--   
--   If you also want to provide a range key condition, it must be combined
--   using <i>AND</i> with the hash key condition. Following is an example,
--   using the = comparison operator for the range key:
--   
--   <tt>hashAttributeName</tt> <i>=</i> ':hashval' <i>AND</i>
--   <tt>rangeAttributeName</tt> <i>=</i> ':rangeval'
--   
--   Valid comparisons for the range key condition are as follows:
--   
--   <tt>rangeAttributeName</tt> <i>=</i> ':rangeval' - true if the range
--   key is equal to ':rangeval'.
--   
--   <tt>rangeAttributeName</tt> <i>&lt;</i> ':rangeval' - true if the
--   range key is less than ':rangeval'.
--   
--   <tt>rangeAttributeName</tt> <i>&lt;=</i> ':rangeval' - true if the
--   range key is less than or equal to ':rangeval'.
--   
--   <tt>rangeAttributeName</tt> <i>&gt;</i> ':rangeval' - true if the
--   range key is greater than ':rangeval'.
--   
--   <tt>rangeAttributeName</tt> <i>&gt;= </i>':rangeval' - true if the
--   range key is greater than or equal to ':rangeval'.
--   
--   <tt>rangeAttributeName</tt> <i>BETWEEN</i> ':rangeval1' <i>AND</i>
--   ':rangeval2' - true if the range key is less than or greater than
--   ':rangeval1', and less than or equal to ':rangeval2'.
--   
--   <i>begins_with (</i><tt>rangeAttributeName</tt>, ':rangeval'<i>)</i> -
--   true if the range key begins with a particular operand. Note that the
--   function name <tt>begins_with</tt> is case-sensitive.
--   
--   Use the <i>ExpressionAttributeValues</i> parameter to replace tokens
--   such as ':hashval' and ':rangeval' with actual values at runtime.
--   
--   You can optionally use the <i>ExpressionAttributeNames</i> parameter
--   to replace the names of the hash and range attributes with placeholder
--   tokens. This might be necessary if an attribute name conflicts with a
--   DynamoDB reserved word. For example, the following
--   <i>KeyConditionExpression</i> causes an error because <i>Size</i> is a
--   reserved word:
--   
--   'Size = :myval' To work around this, define a placeholder (such a
--   '#myval') to represent the attribute name <i>Size</i>.
--   <i>KeyConditionExpression</i> then is as follows:
--   
--   '#S = :myval' For a list of reserved words, see <a>Reserved Words</a>
--   in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   For more information on <i>ExpressionAttributeNames</i> and
--   <i>ExpressionAttributeValues</i>, see <a>Using Placeholders for
--   Attribute Names and Values</a> in the <i>AmazonDynamoDB Developer
--   Guide</i>.
--   
--   <i>KeyConditionExpression</i> replaces the legacy <i>KeyConditions</i>
--   parameter.
qKeyConditionExpression :: Lens' Query (Maybe Text)

-- | This is a legacy parameter, for backward compatibility. New
--   applications should use <i>KeyConditionExpression</i> instead. Do not
--   combine legacy parameters and expression parameters in a single API
--   call; otherwise, DynamoDB will return a <i>ValidationException</i>
--   exception.
--   
--   The selection criteria for the query. For a query on a table, you can
--   have conditions only on the table primary key attributes. You must
--   provide the hash key attribute name and value as an <a>EQ</a>
--   condition. You can optionally provide a second condition, referring to
--   the range key attribute.
--   
--   If you don't provide a range key condition, all of the items that
--   match the hash key will be retrieved. If a <i>FilterExpression</i> or
--   <i>QueryFilter</i> is present, it will be applied after the items are
--   retrieved.
--   
--   For a query on an index, you can have conditions only on the index key
--   attributes. You must provide the index hash attribute name and value
--   as an <a>EQ</a> condition. You can optionally provide a second
--   condition, referring to the index key range attribute.
--   
--   Each <i>KeyConditions</i> element consists of an attribute name to
--   compare, along with the following:
--   
--   <i>AttributeValueList</i> - One or more values to evaluate against the
--   supplied attribute. The number of values in the list depends on the
--   <i>ComparisonOperator</i> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <a>B</a>. For
--   a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
--   
--   <i>ComparisonOperator</i> - A comparator for evaluating attributes,
--   for example, equals, greater than, less than, and so on.
--   
--   For <i>KeyConditions</i>, only the following comparison operators are
--   supported:
--   
--   'EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN'
--   
--   The following are descriptions of these comparison operators.
--   
--   <a>EQ</a> : Equal.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one specified in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not equal '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>LE</tt> : Less than or equal.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <a>LT</a> : Less than.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>GE</tt> : Greater than or equal.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <a>GT</a> : Greater than.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>BEGINS_WITH</tt> : Checks for a prefix.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   of type String or Binary (not a Number or a set type). The target
--   attribute of the comparison must be of type String or Binary (not a
--   Number or a set type).
--   
--   <tt>BETWEEN</tt> : Greater than or equal to the first value, and less
--   than or equal to the second value.
--   
--   <i>AttributeValueList</i> must contain two <i>AttributeValue</i>
--   elements of the same type, either String, Number, or Binary (not a set
--   type). A target attribute matches if the target value is greater than,
--   or equal to, the first element and less than, or equal to, the second
--   element. If an item contains an <i>AttributeValue</i> element of a
--   different type than the one provided in the request, the value does
--   not match. For example, '{<a>S</a>:"6"}' does not compare to
--   '{<a>N</a>:"6"}'. Also, '{<a>N</a>:"6"}' does not compare to
--   '{<a>NS</a>:["6", "2", "1"]}'
--   
--   For usage examples of <i>AttributeValueList</i> and
--   <i>ComparisonOperator</i>, see <a>Legacy Conditional Parameters</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
qKeyConditions :: Lens' Query (HashMap Text Condition)

-- | The maximum number of items to evaluate (not necessarily the number of
--   matching items). If DynamoDB processes the number of items up to the
--   limit while processing the results, it stops the operation and returns
--   the matching values up to that point, and a key in
--   <i>LastEvaluatedKey</i> to apply in a subsequent operation, so that
--   you can pick up where you left off. Also, if the processed data set
--   size exceeds 1 MB before DynamoDB reaches this limit, it stops the
--   operation and returns the matching values up to the limit, and a key
--   in <i>LastEvaluatedKey</i> to apply in a subsequent operation to
--   continue the operation. For more information, see <a>Query and
--   Scan</a> in the <i>Amazon DynamoDBDeveloper Guide</i>.
qLimit :: Lens' Query (Maybe Natural)

-- | A string that identifies one or more attributes to retrieve from the
--   table. These attributes can include scalars, sets, or elements of a
--   JSON document. The attributes in the expression must be separated by
--   commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Accessing Item Attributes</a> in the
--   <i>Amazon DynamoDBDeveloper Guide</i>.
--   
--   <i>ProjectionExpression</i> replaces the legacy <i>AttributesToGet</i>
--   parameter.
qProjectionExpression :: Lens' Query (Maybe Text)

-- | This is a legacy parameter, for backward compatibility. New
--   applications should use <i>FilterExpression</i> instead. Do not
--   combine legacy parameters and expression parameters in a single API
--   call; otherwise, DynamoDB will return a <i>ValidationException</i>
--   exception.
--   
--   A condition that evaluates the query results after the items are read
--   and returns only the desired values.
--   
--   This parameter does not support attributes of type List or Map.
--   
--   A <i>QueryFilter</i> is applied after the items have already been
--   read; the process of filtering does not consume any additional read
--   capacity units.
--   
--   If you provide more than one condition in the <i>QueryFilter</i> map,
--   then by default all of the conditions must evaluate to true. In other
--   words, the conditions are ANDed together. (You can use the
--   <i>ConditionalOperator</i> parameter to OR the conditions instead. If
--   you do this, then at least one of the conditions must evaluate to
--   true, rather than all of them.)
--   
--   Note that <i>QueryFilter</i> does not allow key attributes. You cannot
--   define a filter condition on a hash key or range key.
--   
--   Each <i>QueryFilter</i> element consists of an attribute name to
--   compare, along with the following:
--   
--   <i>AttributeValueList</i> - One or more values to evaluate against the
--   supplied attribute. The number of values in the list depends on the
--   operator specified in <i>ComparisonOperator</i>.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <a>B</a>. For
--   a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For type Binary, DynamoDB treats each byte of the binary data as
--   unsigned when it compares binary values.
--   
--   For information on specifying data types in JSON, see <a>JSON Data
--   Format</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <i>ComparisonOperator</i> - A comparator for evaluating attributes.
--   For example, equals, greater than, less than, etc.
--   
--   The following comparison operators are available:
--   
--   'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS |
--   NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'
--   
--   For complete descriptions of all comparison operators, see the
--   <a>Condition</a> data type.
qQueryFilter :: Lens' Query (HashMap Text Condition)
qReturnConsumedCapacity :: Lens' Query (Maybe ReturnConsumedCapacity)

-- | A value that specifies ascending (true) or descending (false)
--   traversal of the index. DynamoDB returns results reflecting the
--   requested order determined by the range key. If the data type is
--   Number, the results are returned in numeric order. For type String,
--   the results are returned in order of ASCII character code values. For
--   type Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
--   
--   If <i>ScanIndexForward</i> is not specified, the results are returned
--   in ascending order.
qScanIndexForward :: Lens' Query (Maybe Bool)

-- | The attributes to be returned in the result. You can retrieve all item
--   attributes, specific item attributes, the count of matching items, or
--   in the case of an index, some or all of the attributes projected into
--   the index.
--   
--   <tt>ALL_ATTRIBUTES</tt> - Returns all of the item attributes from the
--   specified table or index. If you query a local secondary index, then
--   for each matching item in the index DynamoDB will fetch the entire
--   item from the parent table. If the index is configured to project all
--   item attributes, then all of the data can be obtained from the local
--   secondary index, and no fetching is required.
--   
--   <tt>ALL_PROJECTED_ATTRIBUTES</tt> - Allowed only when querying an
--   index. Retrieves all attributes that have been projected into the
--   index. If the index is configured to project all attributes, this
--   return value is equivalent to specifying <tt>ALL_ATTRIBUTES</tt>.
--   
--   <tt>COUNT</tt> - Returns the number of matching items, rather than the
--   matching items themselves.
--   
--   <tt>SPECIFIC_ATTRIBUTES</tt> - Returns only the attributes listed in
--   <i>AttributesToGet</i>. This return value is equivalent to specifying
--   <i>AttributesToGet</i> without specifying any value for <i>Select</i>.
--   
--   If you query a local secondary index and request only attributes that
--   are projected into that index, the operation will read only the index
--   and not the table. If any of the requested attributes are not
--   projected into the local secondary index, DynamoDB will fetch each of
--   these attributes from the parent table. This extra fetching incurs
--   additional throughput cost and latency.
--   
--   If you query a global secondary index, you can only request attributes
--   that are projected into the index. Global secondary index queries
--   cannot fetch attributes from the parent table.
--   
--   If neither <i>Select</i> nor <i>AttributesToGet</i> are specified,
--   DynamoDB defaults to <tt>ALL_ATTRIBUTES</tt> when accessing a table,
--   and <tt>ALL_PROJECTED_ATTRIBUTES</tt> when accessing an index. You
--   cannot use both <i>Select</i> and <i>AttributesToGet</i> together in a
--   single request, unless the value for <i>Select</i> is
--   <tt>SPECIFIC_ATTRIBUTES</tt>. (This usage is equivalent to specifying
--   <i>AttributesToGet</i> without any value for <i>Select</i>.)
--   
--   If you use the <i>ProjectionExpression</i> parameter, then the value
--   for <i>Select</i> can only be <tt>SPECIFIC_ATTRIBUTES</tt>. Any other
--   value for <i>Select</i> will return an error.
qSelect :: Lens' Query (Maybe Select)

-- | The name of the table containing the requested items.
qTableName :: Lens' Query Text
data QueryResponse

-- | <a>QueryResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>qrConsumedCapacity</a> <tt>::</tt> <a>Maybe</a>
--   <a>ConsumedCapacity</a></li>
--   <li><a>qrCount</a> <tt>::</tt> <a>Maybe</a> <a>Int</a></li>
--   <li><a>qrItems</a> <tt>::</tt> [<a>HashMap</a> <a>Text</a>
--   <a>AttributeValue</a>]</li>
--   <li><a>qrLastEvaluatedKey</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>AttributeValue</a></li>
--   <li><a>qrScannedCount</a> <tt>::</tt> <a>Maybe</a> <a>Int</a></li>
--   </ul>
queryResponse :: QueryResponse
qrConsumedCapacity :: Lens' QueryResponse (Maybe ConsumedCapacity)

-- | The number of items in the response.
--   
--   If you used a <i>QueryFilter</i> in the request, then <i>Count</i> is
--   the number of items returned after the filter was applied, and
--   <i>ScannedCount</i> is the number of matching items before&gt; the
--   filter was applied.
--   
--   If you did not use a filter in the request, then <i>Count</i> and
--   <i>ScannedCount</i> are the same.
qrCount :: Lens' QueryResponse (Maybe Int)

-- | An array of item attributes that match the query criteria. Each
--   element in this array consists of an attribute name and the value for
--   that attribute.
qrItems :: Lens' QueryResponse [HashMap Text AttributeValue]

-- | The primary key of the item where the operation stopped, inclusive of
--   the previous result set. Use this value to start a new operation,
--   excluding this value in the new request.
--   
--   If <i>LastEvaluatedKey</i> is empty, then the "last page" of results
--   has been processed and there is no more data to be retrieved.
--   
--   If <i>LastEvaluatedKey</i> is not empty, it does not necessarily mean
--   that there is more data in the result set. The only way to know when
--   you have reached the end of the result set is when
--   <i>LastEvaluatedKey</i> is empty.
qrLastEvaluatedKey :: Lens' QueryResponse (HashMap Text AttributeValue)

-- | The number of items evaluated, before any <i>QueryFilter</i> is
--   applied. A high <i>ScannedCount</i> value with few, or no,
--   <i>Count</i> results indicates an inefficient <i>Query</i> operation.
--   For more information, see <a>Count and ScannedCount</a> in the
--   <i>AmazonDynamoDB Developer Guide</i>.
--   
--   If you did not use a filter in the request, then <i>ScannedCount</i>
--   is the same as <i>Count</i>.
qrScannedCount :: Lens' QueryResponse (Maybe Int)
instance Eq Query
instance Read Query
instance Show Query
instance Eq QueryResponse
instance Read QueryResponse
instance Show QueryResponse
instance AWSPager Query
instance FromJSON QueryResponse
instance AWSRequest Query
instance ToJSON Query
instance ToHeaders Query
instance ToQuery Query
instance ToPath Query


-- | Creates a new item, or replaces an old item with a new item. If an
--   item that has the same primary key as the new item already exists in
--   the specified table, the new item completely replaces the existing
--   item. You can perform a conditional put operation (add a new item if
--   one with the specified primary key doesn't exist), or replace an
--   existing item if it has certain attribute values.
--   
--   In addition to putting an item, you can also return the item's
--   attribute values in the same operation, using the <i>ReturnValues</i>
--   parameter.
--   
--   When you add an item, the primary key attribute(s) are the only
--   required attributes. Attribute values cannot be null. String and
--   Binary type attributes must have lengths greater than zero. Set type
--   attributes cannot be empty. Requests with empty values will be
--   rejected with a <i>ValidationException</i> exception.
--   
--   You can request that <i>PutItem</i> return either a copy of the
--   original item (before the update) or a copy of the updated item (after
--   the update). For more information, see the <i>ReturnValues</i>
--   description below.
--   
--   To prevent a new item from replacing an existing item, use a
--   conditional put operation with <i>ComparisonOperator</i> set to
--   <tt>NULL</tt> for the primary key attribute, or attributes.
--   
--   For more information about using this API, see <a>Working with
--   Items</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   
--   <a>http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html</a>
module Network.AWS.DynamoDB.PutItem
data PutItem

-- | <a>PutItem</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>piConditionExpression</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>piConditionalOperator</a> <tt>::</tt> <a>Maybe</a>
--   <a>ConditionalOperator</a></li>
--   <li><a>piExpected</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>ExpectedAttributeValue</a></li>
--   <li><a>piExpressionAttributeNames</a> <tt>::</tt> <a>HashMap</a>
--   <a>Text</a> <a>Text</a></li>
--   <li><a>piExpressionAttributeValues</a> <tt>::</tt> <a>HashMap</a>
--   <a>Text</a> <a>AttributeValue</a></li>
--   <li><a>piItem</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>AttributeValue</a></li>
--   <li><a>piReturnConsumedCapacity</a> <tt>::</tt> <a>Maybe</a>
--   <a>ReturnConsumedCapacity</a></li>
--   <li><a>piReturnItemCollectionMetrics</a> <tt>::</tt> <a>Maybe</a>
--   <a>ReturnItemCollectionMetrics</a></li>
--   <li><a>piReturnValues</a> <tt>::</tt> <a>Maybe</a>
--   <a>ReturnValue</a></li>
--   <li><a>piTableName</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
putItem :: Text -> PutItem

-- | A condition that must be satisfied in order for a conditional
--   <i>PutItem</i> operation to succeed.
--   
--   An expression can contain any of the following:
--   
--   Boolean functions: 'attribute_exists | attribute_not_exists | contains
--   |begins_with'
--   
--   These function names are case-sensitive.
--   
--   Comparison operators: ' = | &lt;&gt; | <a>|</a> | <a>|</a>= | BETWEEN
--   | IN'
--   
--   Logical operators: 'AND | OR | NOT'
--   
--   For more information on condition expressions, see <a>Specifying
--   Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <i>ConditionExpression</i> replaces the legacy
--   <i>ConditionalOperator</i> and <i>Expected</i> parameters.
piConditionExpression :: Lens' PutItem (Maybe Text)

-- | This is a legacy parameter, for backward compatibility. New
--   applications should use <i>ConditionExpression</i> instead. Do not
--   combine legacy parameters and expression parameters in a single API
--   call; otherwise, DynamoDB will return a <i>ValidationException</i>
--   exception.
--   
--   A logical operator to apply to the conditions in the <i>Expected</i>
--   map:
--   
--   <tt>AND</tt> - If all of the conditions evaluate to true, then the
--   entire map evaluates to true.
--   
--   <tt>OR</tt> - If at least one of the conditions evaluate to true, then
--   the entire map evaluates to true.
--   
--   If you omit <i>ConditionalOperator</i>, then <tt>AND</tt> is the
--   default.
--   
--   The operation will succeed only if the entire map evaluates to true.
--   
--   This parameter does not support attributes of type List or Map.
piConditionalOperator :: Lens' PutItem (Maybe ConditionalOperator)

-- | This is a legacy parameter, for backward compatibility. New
--   applications should use <i>ConditionExpression</i> instead. Do not
--   combine legacy parameters and expression parameters in a single API
--   call; otherwise, DynamoDB will return a <i>ValidationException</i>
--   exception.
--   
--   A map of attribute<i>condition pairs. </i>Expected/ provides a
--   conditional block for the <i>PutItem</i> operation.
--   
--   This parameter does not support attributes of type List or Map.
--   
--   Each element of <i>Expected</i> consists of an attribute name, a
--   comparison operator, and one or more values. DynamoDB compares the
--   attribute with the value(s) you supplied, using the comparison
--   operator. For each <i>Expected</i> element, the result of the
--   evaluation is either true or false.
--   
--   If you specify more than one element in the <i>Expected</i> map, then
--   by default all of the conditions must evaluate to true. In other
--   words, the conditions are ANDed together. (You can use the
--   <i>ConditionalOperator</i> parameter to OR the conditions instead. If
--   you do this, then at least one of the conditions must evaluate to
--   true, rather than all of them.)
--   
--   If the <i>Expected</i> map evaluates to true, then the conditional
--   operation succeeds; otherwise, it fails.
--   
--   <i>Expected</i> contains the following:
--   
--   <i>AttributeValueList</i> - One or more values to evaluate against the
--   supplied attribute. The number of values in the list depends on the
--   <i>ComparisonOperator</i> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <a>B</a>. For
--   a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For type Binary, DynamoDB treats each byte of the binary data as
--   unsigned when it compares binary values.
--   
--   <i>ComparisonOperator</i> - A comparator for evaluating attributes in
--   the <i>AttributeValueList</i>. When performing the comparison,
--   DynamoDB uses strongly consistent reads.
--   
--   The following comparison operators are available:
--   
--   'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS |
--   NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'
--   
--   The following are descriptions of each comparison operator.
--   
--   <a>EQ</a> : Equal. <a>EQ</a> is supported for all datatypes, including
--   lists and maps.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, Binary, String Set, Number Set, or
--   Binary Set. If an item contains an <i>AttributeValue</i> element of a
--   different type than the one provided in the request, the value does
--   not match. For example, '{<a>S</a>:"6"}' does not equal
--   '{<a>N</a>:"6"}'. Also, '{<a>N</a>:"6"}' does not equal
--   '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all datatypes,
--   including lists and maps.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   of type String, Number, Binary, String Set, Number Set, or Binary Set.
--   If an item contains an <i>AttributeValue</i> of a different type than
--   the one provided in the request, the value does not match. For
--   example, '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not equal '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>LE</tt> : Less than or equal.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <a>LT</a> : Less than.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>GE</tt> : Greater than or equal.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <a>GT</a> : Greater than.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all datatypes, including lists and maps.
--   
--   This operator tests for the existence of an attribute, not its data
--   type. If the data type of attribute "<tt>a</tt>" is null, and you
--   evaluate it using <tt>NOT_NULL</tt>, the result is a Boolean
--   <i>true</i>. This result is because the attribute "<tt>a</tt>" exists;
--   its data type is not relevant to the <tt>NOT_NULL</tt> comparison
--   operator.
--   
--   <tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all datatypes, including lists and maps.
--   
--   This operator tests for the nonexistence of an attribute, not its data
--   type. If the data type of attribute "<tt>a</tt>" is null, and you
--   evaluate it using <tt>NULL</tt>, the result is a Boolean <i>false</i>.
--   This is because the attribute "<tt>a</tt>" exists; its data type is
--   not relevant to the <tt>NULL</tt> comparison operator.
--   
--   <tt>CONTAINS</tt> : Checks for a subsequence, or value in a set.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If the
--   target attribute of the comparison is of type String, then the
--   operator checks for a substring match. If the target attribute of the
--   comparison is of type Binary, then the operator looks for a
--   subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.
--   
--   CONTAINS is supported for lists: When evaluating "'a CONTAINS b'",
--   "<tt>a</tt>" can be a list; however, "<tt>b</tt>" cannot be a set, a
--   map, or a list.
--   
--   <tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If the
--   target attribute of the comparison is a String, then the operator
--   checks for the absence of a substring match. If the target attribute
--   of the comparison is Binary, then the operator checks for the absence
--   of a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it <i>does
--   not</i> find an exact match with any member of the set.
--   
--   NOT_CONTAINS is supported for lists: When evaluating "'a NOT CONTAINS
--   b'", "<tt>a</tt>" can be a list; however, "<tt>b</tt>" cannot be a
--   set, a map, or a list.
--   
--   <tt>BEGINS_WITH</tt> : Checks for a prefix.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   of type String or Binary (not a Number or a set type). The target
--   attribute of the comparison must be of type String or Binary (not a
--   Number or a set type).
--   
--   <tt>IN</tt> : Checks for matching elements within two sets.
--   
--   <i>AttributeValueList</i> can contain one or more
--   <i>AttributeValue</i> elements of type String, Number, or Binary (not
--   a set type). These attributes are compared against an existing set
--   type attribute of an item. If any elements of the input set are
--   present in the item attribute, the expression evaluates to true.
--   
--   <tt>BETWEEN</tt> : Greater than or equal to the first value, and less
--   than or equal to the second value.
--   
--   <i>AttributeValueList</i> must contain two <i>AttributeValue</i>
--   elements of the same type, either String, Number, or Binary (not a set
--   type). A target attribute matches if the target value is greater than,
--   or equal to, the first element and less than, or equal to, the second
--   element. If an item contains an <i>AttributeValue</i> element of a
--   different type than the one provided in the request, the value does
--   not match. For example, '{<a>S</a>:"6"}' does not compare to
--   '{<a>N</a>:"6"}'. Also, '{<a>N</a>:"6"}' does not compare to
--   '{<a>NS</a>:["6", "2", "1"]}'
--   
--   For usage examples of <i>AttributeValueList</i> and
--   <i>ComparisonOperator</i>, see <a>Legacy Conditional Parameters</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   For backward compatibility with previous DynamoDB releases, the
--   following parameters can be used instead of <i>AttributeValueList</i>
--   and <i>ComparisonOperator</i>:
--   
--   <i>Value</i> - A value for DynamoDB to compare with an attribute.
--   
--   <i>Exists</i> - A Boolean value that causes DynamoDB to evaluate the
--   value before attempting the conditional operation:
--   
--   If <i>Exists</i> is <tt>true</tt>, DynamoDB will check to see if that
--   attribute value already exists in the table. If it is found, then the
--   condition evaluates to true; otherwise the condition evaluate to
--   false.
--   
--   If <i>Exists</i> is <tt>false</tt>, DynamoDB assumes that the
--   attribute value does <i>not</i> exist in the table. If in fact the
--   value does not exist, then the assumption is valid and the condition
--   evaluates to true. If the value is found, despite the assumption that
--   it does not exist, the condition evaluates to false.
--   
--   Note that the default value for <i>Exists</i> is <tt>true</tt>.
--   
--   The <i>Value</i> and <i>Exists</i> parameters are incompatible with
--   <i>AttributeValueList</i> and <i>ComparisonOperator</i>. Note that if
--   you use both sets of parameters at once, DynamoDB will return a
--   <i>ValidationException</i> exception.
piExpected :: Lens' PutItem (HashMap Text ExpectedAttributeValue)

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <i>ExpressionAttributeNames</i>:
--   
--   To access an attribute whose name conflicts with a DynamoDB reserved
--   word.
--   
--   To create a placeholder for repeating occurrences of an attribute name
--   in an expression.
--   
--   To prevent special characters in an attribute name from being
--   misinterpreted in an expression.
--   
--   Use the # character in an expression to dereference an attribute name.
--   For example, consider the following attribute name:
--   
--   <tt>Percentile</tt>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <i>ExpressionAttributeNames</i>:
--   
--   '{"#P":<a>Percentile</a>}'
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   '#P = :val'
--   
--   Tokens that begin with the : character are <i>expression attribute
--   values</i>, which are placeholders for the actual value at runtime.
--   
--   For more information on expression attribute names, see <a>Using
--   Placeholdersfor Attribute Names and Values</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
piExpressionAttributeNames :: Lens' PutItem (HashMap Text Text)

-- | One or more values that can be substituted in an expression.
--   
--   Use the : (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   'Available | Backordered | Discontinued'
--   
--   You would first need to specify <i>ExpressionAttributeValues</i> as
--   follows:
--   
--   '{ ":avail":{<a>S</a>:<a>Available</a>},
--   ":back":{<a>S</a>:<a>Backordered</a>},":disc":{<a>S</a>:<a>Discontinued</a>}
--   }'
--   
--   You could then use these values in an expression, such as this:
--   
--   'ProductStatus IN (:avail, :back, :disc)'
--   
--   For more information on expression attribute values, see <a>Using
--   Placeholdersfor Attribute Names and Values</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
piExpressionAttributeValues :: Lens' PutItem (HashMap Text AttributeValue)

-- | A map of attribute name/value pairs, one for each attribute. Only the
--   primary key attributes are required; you can optionally provide other
--   attribute name-value pairs for the item.
--   
--   You must provide all of the attributes for the primary key. For
--   example, with a hash type primary key, you only need to provide the
--   hash attribute. For a hash-and-range type primary key, you must
--   provide both the hash attribute and the range attribute.
--   
--   If you specify any attributes that are part of an index key, then the
--   data types for those attributes must match those of the schema in the
--   table's attribute definition.
--   
--   For more information about primary keys, see <a>Primary Key</a> in the
--   <i>AmazonDynamoDB Developer Guide</i>.
--   
--   Each element in the <i>Item</i> map is an <i>AttributeValue</i>
--   object.
piItem :: Lens' PutItem (HashMap Text AttributeValue)
piReturnConsumedCapacity :: Lens' PutItem (Maybe ReturnConsumedCapacity)

-- | A value that if set to <tt>SIZE</tt>, the response includes statistics
--   about item collections, if any, that were modified during the
--   operation are returned in the response. If set to <tt>NONE</tt> (the
--   default), no statistics are returned.
piReturnItemCollectionMetrics :: Lens' PutItem (Maybe ReturnItemCollectionMetrics)

-- | Use <i>ReturnValues</i> if you want to get the item attributes as they
--   appeared before they were updated with the <i>PutItem</i> request. For
--   <i>PutItem</i>, the valid values are:
--   
--   <tt>NONE</tt> - If <i>ReturnValues</i> is not specified, or if its
--   value is <tt>NONE</tt>, then nothing is returned. (This setting is the
--   default for <i>ReturnValues</i>.)
--   
--   <tt>ALL_OLD</tt> - If <i>PutItem</i> overwrote an attribute name-value
--   pair, then the content of the old item is returned.
piReturnValues :: Lens' PutItem (Maybe ReturnValue)

-- | The name of the table to contain the item.
piTableName :: Lens' PutItem Text
data PutItemResponse

-- | <a>PutItemResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>pirAttributes</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>AttributeValue</a></li>
--   <li><a>pirConsumedCapacity</a> <tt>::</tt> <a>Maybe</a>
--   <a>ConsumedCapacity</a></li>
--   <li><a>pirItemCollectionMetrics</a> <tt>::</tt> <a>Maybe</a>
--   <a>ItemCollectionMetrics</a></li>
--   </ul>
putItemResponse :: PutItemResponse

-- | The attribute values as they appeared before the <i>PutItem</i>
--   operation, but only if <i>ReturnValues</i> is specified as
--   <tt>ALL_OLD</tt> in the request. Each element consists of an attribute
--   name and an attribute value.
pirAttributes :: Lens' PutItemResponse (HashMap Text AttributeValue)
pirConsumedCapacity :: Lens' PutItemResponse (Maybe ConsumedCapacity)

-- | Information about item collections, if any, that were affected by the
--   operation. <i>ItemCollectionMetrics</i> is only returned if the
--   request asked for it. If the table does not have any local secondary
--   indexes, this information is not returned in the response.
--   
--   Each <i>ItemCollectionMetrics</i> element consists of:
--   
--   <i>ItemCollectionKey</i> - The hash key value of the item collection.
--   This is the same as the hash key of the item.
--   
--   <i>SizeEstimateRange</i> - An estimate of item collection size, in
--   gigabytes. This value is a two-element array containing a lower bound
--   and an upper bound for the estimate. The estimate includes the size of
--   all the items in the table, plus the size of all attributes projected
--   into all of the local secondary indexes on that table. Use this
--   estimate to measure whether a local secondary index is approaching its
--   size limit.
--   
--   The estimate is subject to change over time; therefore, do not rely on
--   the precision or accuracy of the estimate.
pirItemCollectionMetrics :: Lens' PutItemResponse (Maybe ItemCollectionMetrics)
instance Eq PutItem
instance Read PutItem
instance Show PutItem
instance Eq PutItemResponse
instance Read PutItemResponse
instance Show PutItemResponse
instance FromJSON PutItemResponse
instance AWSRequest PutItem
instance ToJSON PutItem
instance ToHeaders PutItem
instance ToQuery PutItem
instance ToPath PutItem


-- | Returns an array of table names associated with the current account
--   and endpoint. The output from <i>ListTables</i> is paginated, with
--   each page returning a maximum of 100 table names.
--   
--   
--   <a>http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ListTables.html</a>
module Network.AWS.DynamoDB.ListTables
data ListTables

-- | <a>ListTables</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>ltExclusiveStartTableName</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>ltLimit</a> <tt>::</tt> <a>Maybe</a> <a>Natural</a></li>
--   </ul>
listTables :: ListTables

-- | The first table name that this operation will evaluate. Use the value
--   that was returned for <i>LastEvaluatedTableName</i> in a previous
--   operation, so that you can obtain the next page of results.
ltExclusiveStartTableName :: Lens' ListTables (Maybe Text)

-- | A maximum number of table names to return. If this parameter is not
--   specified, the limit is 100.
ltLimit :: Lens' ListTables (Maybe Natural)
data ListTablesResponse

-- | <a>ListTablesResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>ltrLastEvaluatedTableName</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>ltrTableNames</a> <tt>::</tt> [<a>Text</a>]</li>
--   </ul>
listTablesResponse :: ListTablesResponse

-- | The name of the last table in the current page of results. Use this
--   value as the <i>ExclusiveStartTableName</i> in a new request to obtain
--   the next page of results, until all the table names are returned.
--   
--   If you do not receive a <i>LastEvaluatedTableName</i> value in the
--   response, this means that there are no more table names to be
--   retrieved.
ltrLastEvaluatedTableName :: Lens' ListTablesResponse (Maybe Text)

-- | The names of the tables associated with the current account at the
--   current endpoint. The maximum size of this array is 100.
--   
--   If <i>LastEvaluatedTableName</i> also appears in the output, you can
--   use this value as the <i>ExclusiveStartTableName</i> parameter in a
--   subsequent <i>ListTables</i> request and obtain the next page of
--   results.
ltrTableNames :: Lens' ListTablesResponse [Text]
instance Eq ListTables
instance Ord ListTables
instance Read ListTables
instance Show ListTables
instance Eq ListTablesResponse
instance Ord ListTablesResponse
instance Read ListTablesResponse
instance Show ListTablesResponse
instance AWSPager ListTables
instance FromJSON ListTablesResponse
instance AWSRequest ListTables
instance ToJSON ListTables
instance ToHeaders ListTables
instance ToQuery ListTables
instance ToPath ListTables


-- | The <i>GetItem</i> operation returns a set of attributes for the item
--   with the given primary key. If there is no matching item,
--   <i>GetItem</i> does not return any data.
--   
--   <i>GetItem</i> provides an eventually consistent read by default. If
--   your application requires a strongly consistent read, set
--   <i>ConsistentRead</i> to <tt>true</tt>. Although a strongly consistent
--   read might take more time than an eventually consistent read, it
--   always returns the last updated value.
--   
--   
--   <a>http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html</a>
module Network.AWS.DynamoDB.GetItem
data GetItem

-- | <a>GetItem</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>giAttributesToGet</a> <tt>::</tt> <a>NonEmpty</a>
--   <a>Text</a></li>
--   <li><a>giConsistentRead</a> <tt>::</tt> <a>Maybe</a> <a>Bool</a></li>
--   <li><a>giExpressionAttributeNames</a> <tt>::</tt> <a>HashMap</a>
--   <a>Text</a> <a>Text</a></li>
--   <li><a>giKey</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>AttributeValue</a></li>
--   <li><a>giProjectionExpression</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>giReturnConsumedCapacity</a> <tt>::</tt> <a>Maybe</a>
--   <a>ReturnConsumedCapacity</a></li>
--   <li><a>giTableName</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
getItem :: Text -> NonEmpty Text -> GetItem

-- | This is a legacy parameter, for backward compatibility. New
--   applications should use <i>ProjectionExpression</i> instead. Do not
--   combine legacy parameters and expression parameters in a single API
--   call; otherwise, DynamoDB will return a <i>ValidationException</i>
--   exception.
--   
--   This parameter allows you to retrieve attributes of type List or Map;
--   however, it cannot retrieve individual elements within a List or a
--   Map.
--   
--   The names of one or more attributes to retrieve. If no attribute names
--   are provided, then all attributes will be returned. If any of the
--   requested attributes are not found, they will not appear in the
--   result.
--   
--   Note that <i>AttributesToGet</i> has no effect on provisioned
--   throughput consumption. DynamoDB determines capacity units consumed
--   based on item size, not on the amount of data that is returned to an
--   application.
giAttributesToGet :: Lens' GetItem (NonEmpty Text)

-- | A value that if set to <tt>true</tt>, then the operation uses strongly
--   consistent reads; otherwise, eventually consistent reads are used.
giConsistentRead :: Lens' GetItem (Maybe Bool)

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <i>ExpressionAttributeNames</i>:
--   
--   To access an attribute whose name conflicts with a DynamoDB reserved
--   word.
--   
--   To create a placeholder for repeating occurrences of an attribute name
--   in an expression.
--   
--   To prevent special characters in an attribute name from being
--   misinterpreted in an expression.
--   
--   Use the # character in an expression to dereference an attribute name.
--   For example, consider the following attribute name:
--   
--   <tt>Percentile</tt>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <i>ExpressionAttributeNames</i>:
--   
--   '{"#P":<a>Percentile</a>}'
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   '#P = :val'
--   
--   Tokens that begin with the : character are <i>expression attribute
--   values</i>, which are placeholders for the actual value at runtime.
--   
--   For more information on expression attribute names, see <a>Using
--   Placeholdersfor Attribute Names and Values</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
giExpressionAttributeNames :: Lens' GetItem (HashMap Text Text)

-- | A map of attribute names to <i>AttributeValue</i> objects,
--   representing the primary key of the item to retrieve.
--   
--   For the primary key, you must provide all of the attributes. For
--   example, with a hash type primary key, you only need to provide the
--   hash attribute. For a hash-and-range type primary key, you must
--   provide both the hash attribute and the range attribute.
giKey :: Lens' GetItem (HashMap Text AttributeValue)

-- | A string that identifies one or more attributes to retrieve from the
--   table. These attributes can include scalars, sets, or elements of a
--   JSON document. The attributes in the expression must be separated by
--   commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Accessing Item Attributes</a> in the
--   <i>Amazon DynamoDBDeveloper Guide</i>.
--   
--   <i>ProjectionExpression</i> replaces the legacy <i>AttributesToGet</i>
--   parameter.
giProjectionExpression :: Lens' GetItem (Maybe Text)
giReturnConsumedCapacity :: Lens' GetItem (Maybe ReturnConsumedCapacity)

-- | The name of the table containing the requested item.
giTableName :: Lens' GetItem Text
data GetItemResponse

-- | <a>GetItemResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>girConsumedCapacity</a> <tt>::</tt> <a>Maybe</a>
--   <a>ConsumedCapacity</a></li>
--   <li><a>girItem</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>AttributeValue</a></li>
--   </ul>
getItemResponse :: GetItemResponse
girConsumedCapacity :: Lens' GetItemResponse (Maybe ConsumedCapacity)

-- | A map of attribute names to <i>AttributeValue</i> objects, as
--   specified by <i>AttributesToGet</i>.
girItem :: Lens' GetItemResponse (HashMap Text AttributeValue)
instance Eq GetItem
instance Read GetItem
instance Show GetItem
instance Eq GetItemResponse
instance Read GetItemResponse
instance Show GetItemResponse
instance FromJSON GetItemResponse
instance AWSRequest GetItem
instance ToJSON GetItem
instance ToHeaders GetItem
instance ToQuery GetItem
instance ToPath GetItem


-- | Returns information about the table, including the current status of
--   the table, when it was created, the primary key schema, and any
--   indexes on the table.
--   
--   If you issue a DescribeTable request immediately after a CreateTable
--   request, DynamoDB might return a ResourceNotFoundException. This is
--   because DescribeTable uses an eventually consistent query, and the
--   metadata for your table might not be available at that moment. Wait
--   for a few seconds, and then try the DescribeTable request again.
--   
--   
--   <a>http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DescribeTable.html</a>
module Network.AWS.DynamoDB.DescribeTable
data DescribeTable

-- | <a>DescribeTable</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>dt1TableName</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
describeTable :: Text -> DescribeTable

-- | The name of the table to describe.
dt1TableName :: Lens' DescribeTable Text
data DescribeTableResponse

-- | <a>DescribeTableResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>dtrTable</a> <tt>::</tt> <a>TableDescription</a></li>
--   </ul>
describeTableResponse :: TableDescription -> DescribeTableResponse
dtrTable :: Lens' DescribeTableResponse TableDescription
instance Eq DescribeTable
instance Ord DescribeTable
instance Read DescribeTable
instance Show DescribeTable
instance Monoid DescribeTable
instance IsString DescribeTable
instance Eq DescribeTableResponse
instance Read DescribeTableResponse
instance Show DescribeTableResponse
instance FromJSON DescribeTableResponse
instance AWSRequest DescribeTable
instance ToJSON DescribeTable
instance ToHeaders DescribeTable
instance ToQuery DescribeTable
instance ToPath DescribeTable

module Network.AWS.DynamoDB.Waiters
tableExists :: Wait DescribeTable
tableNotExists :: Wait DescribeTable


-- | The <i>DeleteTable</i> operation deletes a table and all of its items.
--   After a <i>DeleteTable</i> request, the specified table is in the
--   <tt>DELETING</tt> state until DynamoDB completes the deletion. If the
--   table is in the <tt>ACTIVE</tt> state, you can delete it. If a table
--   is in <tt>CREATING</tt> or <tt>UPDATING</tt> states, then DynamoDB
--   returns a <i>ResourceInUseException</i>. If the specified table does
--   not exist, DynamoDB returns a <i>ResourceNotFoundException</i>. If
--   table is already in the <tt>DELETING</tt> state, no error is returned.
--   
--   DynamoDB might continue to accept data read and write operations, such
--   as <i>GetItem</i> and <i>PutItem</i>, on a table in the
--   <tt>DELETING</tt> state until the table deletion is complete.
--   
--   When you delete a table, any indexes on that table are also deleted.
--   
--   Use the <i>DescribeTable</i> API to check the status of the table.
--   
--   
--   <a>http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteTable.html</a>
module Network.AWS.DynamoDB.DeleteTable
data DeleteTable

-- | <a>DeleteTable</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>dtTableName</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
deleteTable :: Text -> DeleteTable

-- | The name of the table to delete.
dtTableName :: Lens' DeleteTable Text
data DeleteTableResponse

-- | <a>DeleteTableResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>dtrTableDescription</a> <tt>::</tt> <a>Maybe</a>
--   <a>TableDescription</a></li>
--   </ul>
deleteTableResponse :: DeleteTableResponse
dtrTableDescription :: Lens' DeleteTableResponse (Maybe TableDescription)
instance Eq DeleteTable
instance Ord DeleteTable
instance Read DeleteTable
instance Show DeleteTable
instance Monoid DeleteTable
instance IsString DeleteTable
instance Eq DeleteTableResponse
instance Read DeleteTableResponse
instance Show DeleteTableResponse
instance FromJSON DeleteTableResponse
instance AWSRequest DeleteTable
instance ToJSON DeleteTable
instance ToHeaders DeleteTable
instance ToQuery DeleteTable
instance ToPath DeleteTable


-- | Deletes a single item in a table by primary key. You can perform a
--   conditional delete operation that deletes the item if it exists, or if
--   it has an expected attribute value.
--   
--   In addition to deleting an item, you can also return the item's
--   attribute values in the same operation, using the <i>ReturnValues</i>
--   parameter.
--   
--   Unless you specify conditions, the <i>DeleteItem</i> is an idempotent
--   operation; running it multiple times on the same item or attribute
--   does <i>not</i> result in an error response.
--   
--   Conditional deletes are useful for deleting items only if specific
--   conditions are met. If those conditions are met, DynamoDB performs the
--   delete. Otherwise, the item is not deleted.
--   
--   
--   <a>http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteItem.html</a>
module Network.AWS.DynamoDB.DeleteItem
data DeleteItem

-- | <a>DeleteItem</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>diConditionExpression</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>diConditionalOperator</a> <tt>::</tt> <a>Maybe</a>
--   <a>ConditionalOperator</a></li>
--   <li><a>diExpected</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>ExpectedAttributeValue</a></li>
--   <li><a>diExpressionAttributeNames</a> <tt>::</tt> <a>HashMap</a>
--   <a>Text</a> <a>Text</a></li>
--   <li><a>diExpressionAttributeValues</a> <tt>::</tt> <a>HashMap</a>
--   <a>Text</a> <a>AttributeValue</a></li>
--   <li><a>diKey</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>AttributeValue</a></li>
--   <li><a>diReturnConsumedCapacity</a> <tt>::</tt> <a>Maybe</a>
--   <a>ReturnConsumedCapacity</a></li>
--   <li><a>diReturnItemCollectionMetrics</a> <tt>::</tt> <a>Maybe</a>
--   <a>ReturnItemCollectionMetrics</a></li>
--   <li><a>diReturnValues</a> <tt>::</tt> <a>Maybe</a>
--   <a>ReturnValue</a></li>
--   <li><a>diTableName</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
deleteItem :: Text -> DeleteItem

-- | A condition that must be satisfied in order for a conditional
--   <i>DeleteItem</i> to succeed.
--   
--   An expression can contain any of the following:
--   
--   Boolean functions: 'attribute_exists | attribute_not_exists | contains
--   |begins_with'
--   
--   These function names are case-sensitive.
--   
--   Comparison operators: ' = | &lt;&gt; | <a>|</a> | <a>|</a>= | BETWEEN
--   | IN'
--   
--   Logical operators: 'AND | OR | NOT'
--   
--   For more information on condition expressions, see <a>Specifying
--   Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <i>ConditionExpression</i> replaces the legacy
--   <i>ConditionalOperator</i> and <i>Expected</i> parameters.
diConditionExpression :: Lens' DeleteItem (Maybe Text)

-- | This is a legacy parameter, for backward compatibility. New
--   applications should use <i>ConditionExpression</i> instead. Do not
--   combine legacy parameters and expression parameters in a single API
--   call; otherwise, DynamoDB will return a <i>ValidationException</i>
--   exception.
--   
--   A logical operator to apply to the conditions in the <i>Expected</i>
--   map:
--   
--   <tt>AND</tt> - If all of the conditions evaluate to true, then the
--   entire map evaluates to true.
--   
--   <tt>OR</tt> - If at least one of the conditions evaluate to true, then
--   the entire map evaluates to true.
--   
--   If you omit <i>ConditionalOperator</i>, then <tt>AND</tt> is the
--   default.
--   
--   The operation will succeed only if the entire map evaluates to true.
--   
--   This parameter does not support attributes of type List or Map.
diConditionalOperator :: Lens' DeleteItem (Maybe ConditionalOperator)

-- | This is a legacy parameter, for backward compatibility. New
--   applications should use <i>ConditionExpression</i> instead. Do not
--   combine legacy parameters and expression parameters in a single API
--   call; otherwise, DynamoDB will return a <i>ValidationException</i>
--   exception.
--   
--   A map of attribute<i>condition pairs. </i>Expected/ provides a
--   conditional block for the <i>DeleteItem</i> operation.
--   
--   Each element of <i>Expected</i> consists of an attribute name, a
--   comparison operator, and one or more values. DynamoDB compares the
--   attribute with the value(s) you supplied, using the comparison
--   operator. For each <i>Expected</i> element, the result of the
--   evaluation is either true or false.
--   
--   If you specify more than one element in the <i>Expected</i> map, then
--   by default all of the conditions must evaluate to true. In other
--   words, the conditions are ANDed together. (You can use the
--   <i>ConditionalOperator</i> parameter to OR the conditions instead. If
--   you do this, then at least one of the conditions must evaluate to
--   true, rather than all of them.)
--   
--   If the <i>Expected</i> map evaluates to true, then the conditional
--   operation succeeds; otherwise, it fails.
--   
--   <i>Expected</i> contains the following:
--   
--   <i>AttributeValueList</i> - One or more values to evaluate against the
--   supplied attribute. The number of values in the list depends on the
--   <i>ComparisonOperator</i> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <a>B</a>. For
--   a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For type Binary, DynamoDB treats each byte of the binary data as
--   unsigned when it compares binary values.
--   
--   <i>ComparisonOperator</i> - A comparator for evaluating attributes in
--   the <i>AttributeValueList</i>. When performing the comparison,
--   DynamoDB uses strongly consistent reads.
--   
--   The following comparison operators are available:
--   
--   'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS |
--   NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'
--   
--   The following are descriptions of each comparison operator.
--   
--   <a>EQ</a> : Equal. <a>EQ</a> is supported for all datatypes, including
--   lists and maps.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, Binary, String Set, Number Set, or
--   Binary Set. If an item contains an <i>AttributeValue</i> element of a
--   different type than the one provided in the request, the value does
--   not match. For example, '{<a>S</a>:"6"}' does not equal
--   '{<a>N</a>:"6"}'. Also, '{<a>N</a>:"6"}' does not equal
--   '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all datatypes,
--   including lists and maps.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   of type String, Number, Binary, String Set, Number Set, or Binary Set.
--   If an item contains an <i>AttributeValue</i> of a different type than
--   the one provided in the request, the value does not match. For
--   example, '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not equal '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>LE</tt> : Less than or equal.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <a>LT</a> : Less than.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>GE</tt> : Greater than or equal.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <a>GT</a> : Greater than.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If an item
--   contains an <i>AttributeValue</i> element of a different type than the
--   one provided in the request, the value does not match. For example,
--   '{<a>S</a>:"6"}' does not equal '{<a>N</a>:"6"}'. Also,
--   '{<a>N</a>:"6"}' does not compare to '{<a>NS</a>:["6", "2", "1"]}'.
--   
--   <tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all datatypes, including lists and maps.
--   
--   This operator tests for the existence of an attribute, not its data
--   type. If the data type of attribute "<tt>a</tt>" is null, and you
--   evaluate it using <tt>NOT_NULL</tt>, the result is a Boolean
--   <i>true</i>. This result is because the attribute "<tt>a</tt>" exists;
--   its data type is not relevant to the <tt>NOT_NULL</tt> comparison
--   operator.
--   
--   <tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all datatypes, including lists and maps.
--   
--   This operator tests for the nonexistence of an attribute, not its data
--   type. If the data type of attribute "<tt>a</tt>" is null, and you
--   evaluate it using <tt>NULL</tt>, the result is a Boolean <i>false</i>.
--   This is because the attribute "<tt>a</tt>" exists; its data type is
--   not relevant to the <tt>NULL</tt> comparison operator.
--   
--   <tt>CONTAINS</tt> : Checks for a subsequence, or value in a set.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If the
--   target attribute of the comparison is of type String, then the
--   operator checks for a substring match. If the target attribute of the
--   comparison is of type Binary, then the operator looks for a
--   subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.
--   
--   CONTAINS is supported for lists: When evaluating "'a CONTAINS b'",
--   "<tt>a</tt>" can be a list; however, "<tt>b</tt>" cannot be a set, a
--   map, or a list.
--   
--   <tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   element of type String, Number, or Binary (not a set type). If the
--   target attribute of the comparison is a String, then the operator
--   checks for the absence of a substring match. If the target attribute
--   of the comparison is Binary, then the operator checks for the absence
--   of a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it <i>does
--   not</i> find an exact match with any member of the set.
--   
--   NOT_CONTAINS is supported for lists: When evaluating "'a NOT CONTAINS
--   b'", "<tt>a</tt>" can be a list; however, "<tt>b</tt>" cannot be a
--   set, a map, or a list.
--   
--   <tt>BEGINS_WITH</tt> : Checks for a prefix.
--   
--   <i>AttributeValueList</i> can contain only one <i>AttributeValue</i>
--   of type String or Binary (not a Number or a set type). The target
--   attribute of the comparison must be of type String or Binary (not a
--   Number or a set type).
--   
--   <tt>IN</tt> : Checks for matching elements within two sets.
--   
--   <i>AttributeValueList</i> can contain one or more
--   <i>AttributeValue</i> elements of type String, Number, or Binary (not
--   a set type). These attributes are compared against an existing set
--   type attribute of an item. If any elements of the input set are
--   present in the item attribute, the expression evaluates to true.
--   
--   <tt>BETWEEN</tt> : Greater than or equal to the first value, and less
--   than or equal to the second value.
--   
--   <i>AttributeValueList</i> must contain two <i>AttributeValue</i>
--   elements of the same type, either String, Number, or Binary (not a set
--   type). A target attribute matches if the target value is greater than,
--   or equal to, the first element and less than, or equal to, the second
--   element. If an item contains an <i>AttributeValue</i> element of a
--   different type than the one provided in the request, the value does
--   not match. For example, '{<a>S</a>:"6"}' does not compare to
--   '{<a>N</a>:"6"}'. Also, '{<a>N</a>:"6"}' does not compare to
--   '{<a>NS</a>:["6", "2", "1"]}'
--   
--   For usage examples of <i>AttributeValueList</i> and
--   <i>ComparisonOperator</i>, see <a>Legacy Conditional Parameters</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   For backward compatibility with previous DynamoDB releases, the
--   following parameters can be used instead of <i>AttributeValueList</i>
--   and <i>ComparisonOperator</i>:
--   
--   <i>Value</i> - A value for DynamoDB to compare with an attribute.
--   
--   <i>Exists</i> - A Boolean value that causes DynamoDB to evaluate the
--   value before attempting the conditional operation:
--   
--   If <i>Exists</i> is <tt>true</tt>, DynamoDB will check to see if that
--   attribute value already exists in the table. If it is found, then the
--   condition evaluates to true; otherwise the condition evaluate to
--   false.
--   
--   If <i>Exists</i> is <tt>false</tt>, DynamoDB assumes that the
--   attribute value does <i>not</i> exist in the table. If in fact the
--   value does not exist, then the assumption is valid and the condition
--   evaluates to true. If the value is found, despite the assumption that
--   it does not exist, the condition evaluates to false.
--   
--   Note that the default value for <i>Exists</i> is <tt>true</tt>.
--   
--   The <i>Value</i> and <i>Exists</i> parameters are incompatible with
--   <i>AttributeValueList</i> and <i>ComparisonOperator</i>. Note that if
--   you use both sets of parameters at once, DynamoDB will return a
--   <i>ValidationException</i> exception.
--   
--   This parameter does not support attributes of type List or Map.
diExpected :: Lens' DeleteItem (HashMap Text ExpectedAttributeValue)

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <i>ExpressionAttributeNames</i>:
--   
--   To access an attribute whose name conflicts with a DynamoDB reserved
--   word.
--   
--   To create a placeholder for repeating occurrences of an attribute name
--   in an expression.
--   
--   To prevent special characters in an attribute name from being
--   misinterpreted in an expression.
--   
--   Use the # character in an expression to dereference an attribute name.
--   For example, consider the following attribute name:
--   
--   <tt>Percentile</tt>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <i>ExpressionAttributeNames</i>:
--   
--   '{"#P":<a>Percentile</a>}'
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   '#P = :val'
--   
--   Tokens that begin with the : character are <i>expression attribute
--   values</i>, which are placeholders for the actual value at runtime.
--   
--   For more information on expression attribute names, see <a>Using
--   Placeholdersfor Attribute Names and Values</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
diExpressionAttributeNames :: Lens' DeleteItem (HashMap Text Text)

-- | One or more values that can be substituted in an expression.
--   
--   Use the : (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   'Available | Backordered | Discontinued'
--   
--   You would first need to specify <i>ExpressionAttributeValues</i> as
--   follows:
--   
--   '{ ":avail":{<a>S</a>:<a>Available</a>},
--   ":back":{<a>S</a>:<a>Backordered</a>},":disc":{<a>S</a>:<a>Discontinued</a>}
--   }'
--   
--   You could then use these values in an expression, such as this:
--   
--   'ProductStatus IN (:avail, :back, :disc)'
--   
--   For more information on expression attribute values, see <a>Using
--   Placeholdersfor Attribute Names and Values</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
diExpressionAttributeValues :: Lens' DeleteItem (HashMap Text AttributeValue)

-- | A map of attribute names to <i>AttributeValue</i> objects,
--   representing the primary key of the item to delete.
--   
--   For the primary key, you must provide all of the attributes. For
--   example, with a hash type primary key, you only need to provide the
--   hash attribute. For a hash-and-range type primary key, you must
--   provide both the hash attribute and the range attribute.
diKey :: Lens' DeleteItem (HashMap Text AttributeValue)
diReturnConsumedCapacity :: Lens' DeleteItem (Maybe ReturnConsumedCapacity)

-- | A value that if set to <tt>SIZE</tt>, the response includes statistics
--   about item collections, if any, that were modified during the
--   operation are returned in the response. If set to <tt>NONE</tt> (the
--   default), no statistics are returned.
diReturnItemCollectionMetrics :: Lens' DeleteItem (Maybe ReturnItemCollectionMetrics)

-- | Use <i>ReturnValues</i> if you want to get the item attributes as they
--   appeared before they were deleted. For <i>DeleteItem</i>, the valid
--   values are:
--   
--   <tt>NONE</tt> - If <i>ReturnValues</i> is not specified, or if its
--   value is <tt>NONE</tt>, then nothing is returned. (This setting is the
--   default for <i>ReturnValues</i>.)
--   
--   <tt>ALL_OLD</tt> - The content of the old item is returned.
diReturnValues :: Lens' DeleteItem (Maybe ReturnValue)

-- | The name of the table from which to delete the item.
diTableName :: Lens' DeleteItem Text
data DeleteItemResponse

-- | <a>DeleteItemResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>dirAttributes</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>AttributeValue</a></li>
--   <li><a>dirConsumedCapacity</a> <tt>::</tt> <a>Maybe</a>
--   <a>ConsumedCapacity</a></li>
--   <li><a>dirItemCollectionMetrics</a> <tt>::</tt> <a>Maybe</a>
--   <a>ItemCollectionMetrics</a></li>
--   </ul>
deleteItemResponse :: DeleteItemResponse

-- | A map of attribute names to <i>AttributeValue</i> objects,
--   representing the item as it appeared before the <i>DeleteItem</i>
--   operation. This map appears in the response only if
--   <i>ReturnValues</i> was specified as <tt>ALL_OLD</tt> in the request.
dirAttributes :: Lens' DeleteItemResponse (HashMap Text AttributeValue)
dirConsumedCapacity :: Lens' DeleteItemResponse (Maybe ConsumedCapacity)

-- | Information about item collections, if any, that were affected by the
--   operation. <i>ItemCollectionMetrics</i> is only returned if the
--   request asked for it. If the table does not have any local secondary
--   indexes, this information is not returned in the response.
--   
--   Each <i>ItemCollectionMetrics</i> element consists of:
--   
--   <i>ItemCollectionKey</i> - The hash key value of the item collection.
--   This is the same as the hash key of the item.
--   
--   <i>SizeEstimateRange</i> - An estimate of item collection size, in
--   gigabytes. This value is a two-element array containing a lower bound
--   and an upper bound for the estimate. The estimate includes the size of
--   all the items in the table, plus the size of all attributes projected
--   into all of the local secondary indexes on that table. Use this
--   estimate to measure whether a local secondary index is approaching its
--   size limit.
--   
--   The estimate is subject to change over time; therefore, do not rely on
--   the precision or accuracy of the estimate.
dirItemCollectionMetrics :: Lens' DeleteItemResponse (Maybe ItemCollectionMetrics)
instance Eq DeleteItem
instance Read DeleteItem
instance Show DeleteItem
instance Eq DeleteItemResponse
instance Read DeleteItemResponse
instance Show DeleteItemResponse
instance FromJSON DeleteItemResponse
instance AWSRequest DeleteItem
instance ToJSON DeleteItem
instance ToHeaders DeleteItem
instance ToQuery DeleteItem
instance ToPath DeleteItem


-- | The <i>CreateTable</i> operation adds a new table to your account. In
--   an AWS account, table names must be unique within each region. That
--   is, you can have two tables with same name if you create the tables in
--   different regions.
--   
--   <i>CreateTable</i> is an asynchronous operation. Upon receiving a
--   <i>CreateTable</i> request, DynamoDB immediately returns a response
--   with a <i>TableStatus</i> of <tt>CREATING</tt>. After the table is
--   created, DynamoDB sets the <i>TableStatus</i> to <tt>ACTIVE</tt>. You
--   can perform read and write operations only on an <tt>ACTIVE</tt>
--   table.
--   
--   You can optionally define secondary indexes on the new table, as part
--   of the <i>CreateTable</i> operation. If you want to create multiple
--   tables with secondary indexes on them, you must create the tables
--   sequentially. Only one table with secondary indexes can be in the
--   <tt>CREATING</tt> state at any given time.
--   
--   You can use the <i>DescribeTable</i> API to check the table status.
--   
--   
--   <a>http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_CreateTable.html</a>
module Network.AWS.DynamoDB.CreateTable
data CreateTable

-- | <a>CreateTable</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>ctAttributeDefinitions</a> <tt>::</tt>
--   [<a>AttributeDefinition</a>]</li>
--   <li><a>ctGlobalSecondaryIndexes</a> <tt>::</tt>
--   [<a>GlobalSecondaryIndex</a>]</li>
--   <li><a>ctKeySchema</a> <tt>::</tt> <a>NonEmpty</a>
--   <a>KeySchemaElement</a></li>
--   <li><a>ctLocalSecondaryIndexes</a> <tt>::</tt>
--   [<a>LocalSecondaryIndex</a>]</li>
--   <li><a>ctProvisionedThroughput</a> <tt>::</tt>
--   <a>ProvisionedThroughput</a></li>
--   <li><a>ctTableName</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
createTable :: Text -> NonEmpty KeySchemaElement -> ProvisionedThroughput -> CreateTable

-- | An array of attributes that describe the key schema for the table and
--   indexes.
ctAttributeDefinitions :: Lens' CreateTable [AttributeDefinition]

-- | One or more global secondary indexes (the maximum is five) to be
--   created on the table. Each global secondary index in the array
--   includes the following:
--   
--   <i>IndexName</i> - The name of the global secondary index. Must be
--   unique only for this table.
--   
--   <i>KeySchema</i> - Specifies the key schema for the global secondary
--   index.
--   
--   <i>Projection</i> - Specifies attributes that are copied (projected)
--   from the table into the index. These are in addition to the primary
--   key attributes and index key attributes, which are automatically
--   projected. Each attribute specification is composed of:
--   
--   <i>ProjectionType</i> - One of the following:
--   
--   <tt>KEYS_ONLY</tt> - Only the index and primary keys are projected
--   into the index.
--   
--   <tt>INCLUDE</tt> - Only the specified table attributes are projected
--   into the index. The list of projected attributes are in
--   <i>NonKeyAttributes</i>.
--   
--   <tt>ALL</tt> - All of the table attributes are projected into the
--   index.
--   
--   <i>NonKeyAttributes</i> - A list of one or more non-key attribute
--   names that are projected into the secondary index. The total count of
--   attributes provided in <i>NonKeyAttributes</i>, summed across all of
--   the secondary indexes, must not exceed 20. If you project the same
--   attribute into two different indexes, this counts as two distinct
--   attributes when determining the total.
--   
--   <i>ProvisionedThroughput</i> - The provisioned throughput settings for
--   the global secondary index, consisting of read and write capacity
--   units.
ctGlobalSecondaryIndexes :: Lens' CreateTable [GlobalSecondaryIndex]

-- | Specifies the attributes that make up the primary key for a table or
--   an index. The attributes in <i>KeySchema</i> must also be defined in
--   the <i>AttributeDefinitions</i> array. For more information, see
--   <a>Data Model</a> in the <i>Amazon DynamoDB DeveloperGuide</i>.
--   
--   Each <i>KeySchemaElement</i> in the array is composed of:
--   
--   <i>AttributeName</i> - The name of this key attribute.
--   
--   <i>KeyType</i> - Determines whether the key attribute is <tt>HASH</tt>
--   or <tt>RANGE</tt>.
--   
--   For a primary key that consists of a hash attribute, you must provide
--   exactly one element with a <i>KeyType</i> of <tt>HASH</tt>.
--   
--   For a primary key that consists of hash and range attributes, you must
--   provide exactly two elements, in this order: The first element must
--   have a <i>KeyType</i> of <tt>HASH</tt>, and the second element must
--   have a <i>KeyType</i> of <tt>RANGE</tt>.
--   
--   For more information, see <a>Specifying the Primary Key</a> in the
--   <i>Amazon DynamoDBDeveloper Guide</i>.
ctKeySchema :: Lens' CreateTable (NonEmpty KeySchemaElement)

-- | One or more local secondary indexes (the maximum is five) to be
--   created on the table. Each index is scoped to a given hash key value.
--   There is a 10 GB size limit per hash key; otherwise, the size of a
--   local secondary index is unconstrained.
--   
--   Each local secondary index in the array includes the following:
--   
--   <i>IndexName</i> - The name of the local secondary index. Must be
--   unique only for this table.
--   
--   <i>KeySchema</i> - Specifies the key schema for the local secondary
--   index. The key schema must begin with the same hash key attribute as
--   the table.
--   
--   <i>Projection</i> - Specifies attributes that are copied (projected)
--   from the table into the index. These are in addition to the primary
--   key attributes and index key attributes, which are automatically
--   projected. Each attribute specification is composed of:
--   
--   <i>ProjectionType</i> - One of the following:
--   
--   <tt>KEYS_ONLY</tt> - Only the index and primary keys are projected
--   into the index.
--   
--   <tt>INCLUDE</tt> - Only the specified table attributes are projected
--   into the index. The list of projected attributes are in
--   <i>NonKeyAttributes</i>.
--   
--   <tt>ALL</tt> - All of the table attributes are projected into the
--   index.
--   
--   <i>NonKeyAttributes</i> - A list of one or more non-key attribute
--   names that are projected into the secondary index. The total count of
--   attributes provided in <i>NonKeyAttributes</i>, summed across all of
--   the secondary indexes, must not exceed 20. If you project the same
--   attribute into two different indexes, this counts as two distinct
--   attributes when determining the total.
ctLocalSecondaryIndexes :: Lens' CreateTable [LocalSecondaryIndex]
ctProvisionedThroughput :: Lens' CreateTable ProvisionedThroughput

-- | The name of the table to create.
ctTableName :: Lens' CreateTable Text
data CreateTableResponse

-- | <a>CreateTableResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>ctrTableDescription</a> <tt>::</tt> <a>Maybe</a>
--   <a>TableDescription</a></li>
--   </ul>
createTableResponse :: CreateTableResponse
ctrTableDescription :: Lens' CreateTableResponse (Maybe TableDescription)
instance Eq CreateTable
instance Read CreateTable
instance Show CreateTable
instance Eq CreateTableResponse
instance Read CreateTableResponse
instance Show CreateTableResponse
instance FromJSON CreateTableResponse
instance AWSRequest CreateTable
instance ToJSON CreateTable
instance ToHeaders CreateTable
instance ToQuery CreateTable
instance ToPath CreateTable


-- | The <i>BatchWriteItem</i> operation puts or deletes multiple items in
--   one or more tables. A single call to <i>BatchWriteItem</i> can write
--   up to 16 MB of data, which can comprise as many as 25 put or delete
--   requests. Individual items to be written can be as large as 400 KB.
--   
--   <i>BatchWriteItem</i> cannot update items. To update items, use the
--   <i>UpdateItem</i> API.
--   
--   The individual <i>PutItem</i> and <i>DeleteItem</i> operations
--   specified in <i>BatchWriteItem</i> are atomic; however
--   <i>BatchWriteItem</i> as a whole is not. If any requested operations
--   fail because the table's provisioned throughput is exceeded or an
--   internal processing failure occurs, the failed operations are returned
--   in the <i>UnprocessedItems</i> response parameter. You can investigate
--   and optionally resend the requests. Typically, you would call
--   <i>BatchWriteItem</i> in a loop. Each iteration would check for
--   unprocessed items and submit a new <i>BatchWriteItem</i> request with
--   those unprocessed items until all items have been processed.
--   
--   Note that if <i>none</i> of the items can be processed due to
--   insufficient provisioned throughput on all of the tables in the
--   request, then <i>BatchWriteItem</i> will return a
--   <i>ProvisionedThroughputExceededException</i>.
--   
--   If DynamoDB returns any unprocessed items, you should retry the batch
--   operation on those items. However, <i>we strongly recommend that you
--   use anexponential backoff algorithm</i>. If you retry the batch
--   operation immediately, the underlying read or write requests can still
--   fail due to throttling on the individual tables. If you delay the
--   batch operation using exponential backoff, the individual requests in
--   the batch are much more likely to succeed.
--   
--   For more information, see <a>Batch Operations and Error Handling</a>
--   in the <i>AmazonDynamoDB Developer Guide</i>.
--   
--   With <i>BatchWriteItem</i>, you can efficiently write or delete large
--   amounts of data, such as from Amazon Elastic MapReduce (EMR), or copy
--   data from another database into DynamoDB. In order to improve
--   performance with these large-scale operations, <i>BatchWriteItem</i>
--   does not behave in the same way as individual <i>PutItem</i> and
--   <i>DeleteItem</i> calls would. For example, you cannot specify
--   conditions on individual put and delete requests, and
--   <i>BatchWriteItem</i> does not return deleted items in the response.
--   
--   If you use a programming language that supports concurrency, such as
--   Java, you can use threads to write items in parallel. Your application
--   must include the necessary logic to manage the threads. With languages
--   that don't support threading, such as PHP, you must update or delete
--   the specified items one at a time. In both situations,
--   <i>BatchWriteItem</i> provides an alternative where the API performs
--   the specified put and delete operations in parallel, giving you the
--   power of the thread pool approach without having to introduce
--   complexity into your application.
--   
--   Parallel processing reduces latency, but each specified put and delete
--   request consumes the same number of write capacity units whether it is
--   processed in parallel or not. Delete operations on nonexistent items
--   consume one write capacity unit.
--   
--   If one or more of the following is true, DynamoDB rejects the entire
--   batch write operation:
--   
--   One or more tables specified in the <i>BatchWriteItem</i> request does
--   not exist.
--   
--   Primary key attributes specified on an item in the request do not
--   match those in the corresponding table's primary key schema.
--   
--   You try to perform multiple operations on the same item in the same
--   <i>BatchWriteItem</i> request. For example, you cannot put and delete
--   the same item in the same <i>BatchWriteItem</i> request.
--   
--   There are more than 25 requests in the batch.
--   
--   Any individual item in a batch exceeds 400 KB.
--   
--   The total request size exceeds 16 MB.
--   
--   
--   <a>http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html</a>
module Network.AWS.DynamoDB.BatchWriteItem
data BatchWriteItem

-- | <a>BatchWriteItem</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>bwiRequestItems</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   (<a>NonEmpty</a> <a>WriteRequest</a>)</li>
--   <li><a>bwiReturnConsumedCapacity</a> <tt>::</tt> <a>Maybe</a>
--   <a>ReturnConsumedCapacity</a></li>
--   <li><a>bwiReturnItemCollectionMetrics</a> <tt>::</tt> <a>Maybe</a>
--   <a>ReturnItemCollectionMetrics</a></li>
--   </ul>
batchWriteItem :: BatchWriteItem

-- | A map of one or more table names and, for each table, a list of
--   operations to be performed (<i>DeleteRequest</i> or
--   <i>PutRequest</i>). Each element in the map consists of the following:
--   
--   <i>DeleteRequest</i> - Perform a <i>DeleteItem</i> operation on the
--   specified item. The item to be deleted is identified by a <i>Key</i>
--   subelement:
--   
--   <i>Key</i> - A map of primary key attribute values that uniquely
--   identify the ! item. Each entry in this map consists of an attribute
--   name and an attribute value. For each primary key, you must provide
--   <i>all</i> of the key attributes. For example, with a hash type
--   primary key, you only need to provide the hash attribute. For a
--   hash-and-range type primary key, you must provide <i>both</i> the hash
--   attribute and the range attribute.
--   
--   <i>PutRequest</i> - Perform a <i>PutItem</i> operation on the
--   specified item. The item to be put is identified by an <i>Item</i>
--   subelement:
--   
--   <i>Item</i> - A map of attributes and their values. Each entry in this
--   map consists of an attribute name and an attribute value. Attribute
--   values must not be null; string and binary type attributes must have
--   lengths greater than zero; and set type attributes must not be empty.
--   Requests that contain empty values will be rejected with a
--   <i>ValidationException</i> exception.
--   
--   If you specify any attributes that are part of an index key, then the
--   data types for those attributes must match those of the schema in the
--   table's attribute definition.
bwiRequestItems :: Lens' BatchWriteItem (HashMap Text (NonEmpty WriteRequest))
bwiReturnConsumedCapacity :: Lens' BatchWriteItem (Maybe ReturnConsumedCapacity)

-- | A value that if set to <tt>SIZE</tt>, the response includes statistics
--   about item collections, if any, that were modified during the
--   operation are returned in the response. If set to <tt>NONE</tt> (the
--   default), no statistics are returned.
bwiReturnItemCollectionMetrics :: Lens' BatchWriteItem (Maybe ReturnItemCollectionMetrics)
data BatchWriteItemResponse

-- | <a>BatchWriteItemResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>bwirConsumedCapacity</a> <tt>::</tt>
--   [<a>ConsumedCapacity</a>]</li>
--   <li><a>bwirItemCollectionMetrics</a> <tt>::</tt> <a>HashMap</a>
--   <a>Text</a> [<a>ItemCollectionMetrics</a>]</li>
--   <li><a>bwirUnprocessedItems</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   (<a>NonEmpty</a> <a>WriteRequest</a>)</li>
--   </ul>
batchWriteItemResponse :: BatchWriteItemResponse

-- | The capacity units consumed by the operation.
--   
--   Each element consists of:
--   
--   <i>TableName</i> - The table that consumed the provisioned throughput.
--   
--   <i>CapacityUnits</i> - The total number of capacity units consumed.
bwirConsumedCapacity :: Lens' BatchWriteItemResponse [ConsumedCapacity]

-- | A list of tables that were processed by <i>BatchWriteItem</i> and, for
--   each table, information about any item collections that were affected
--   by individual <i>DeleteItem</i> or <i>PutItem</i> operations.
--   
--   Each entry consists of the following subelements:
--   
--   <i>ItemCollectionKey</i> - The hash key value of the item collection.
--   This is the same as the hash key of the item.
--   
--   <i>SizeEstimateRange</i> - An estimate of item collection size,
--   expressed in GB. This is a two-element array containing a lower bound
--   and an upper bound for the estimate. The estimate includes the size of
--   all the items in the table, plus the size of all attributes projected
--   into all of the local secondary indexes on the table. Use this
--   estimate to measure whether a local secondary index is approaching its
--   size limit.
--   
--   The estimate is subject to change over time; therefore, do not rely on
--   the precision or accuracy of the estimate.
bwirItemCollectionMetrics :: Lens' BatchWriteItemResponse (HashMap Text [ItemCollectionMetrics])

-- | A map of tables and requests against those tables that were not
--   processed. The <i>UnprocessedItems</i> value is in the same form as
--   <i>RequestItems</i>, so you can provide this value directly to a
--   subsequent <i>BatchGetItem</i> operation. For more information, see
--   <i>RequestItems</i> in the Request Parameters section.
--   
--   Each <i>UnprocessedItems</i> entry consists of a table name and, for
--   that table, a list of operations to perform (<i>DeleteRequest</i> or
--   <i>PutRequest</i>).
--   
--   <i>DeleteRequest</i> - Perform a <i>DeleteItem</i> operation on the
--   specified item. The item to be deleted is identified by a <i>Key</i>
--   subelement:
--   
--   <i>Key</i> - A map of primary key attribute values that uniquely
--   identify the item. Each entry in this map consists of an attribute
--   name and an attribute value.
--   
--   <i>PutRequest</i> - Perform a <i>PutItem</i> operation on the
--   specified item. The item to be put is identified by an <i>Item</i>
--   subelement:
--   
--   <i>Item</i> - A map of attributes and their values. Each entry in this
--   map consists of an attribute name and an attribute value. Attribute
--   values must not be null; string and binary type attributes must have
--   lengths greater than zero; and set type attributes must not be empty.
--   Requests that contain empty values will be rejected with a
--   <i>ValidationException</i> exception.
--   
--   If you specify any attributes that are part of an index key, then the
--   data types for those attributes must match those of the schema in the
--   table's attribute definition.
--   
--   If there are no unprocessed items remaining, the response contains an
--   empty <i>UnprocessedItems</i> map.
bwirUnprocessedItems :: Lens' BatchWriteItemResponse (HashMap Text (NonEmpty WriteRequest))
instance Eq BatchWriteItem
instance Read BatchWriteItem
instance Show BatchWriteItem
instance Eq BatchWriteItemResponse
instance Read BatchWriteItemResponse
instance Show BatchWriteItemResponse
instance FromJSON BatchWriteItemResponse
instance AWSRequest BatchWriteItem
instance ToJSON BatchWriteItem
instance ToHeaders BatchWriteItem
instance ToQuery BatchWriteItem
instance ToPath BatchWriteItem


-- | The <i>BatchGetItem</i> operation returns the attributes of one or
--   more items from one or more tables. You identify requested items by
--   primary key.
--   
--   A single operation can retrieve up to 16 MB of data, which can contain
--   as many as 100 items. <i>BatchGetItem</i> will return a partial result
--   if the response size limit is exceeded, the table's provisioned
--   throughput is exceeded, or an internal processing failure occurs. If a
--   partial result is returned, the operation returns a value for
--   <i>UnprocessedKeys</i>. You can use this value to retry the operation
--   starting with the next item to get.
--   
--   For example, if you ask to retrieve 100 items, but each individual
--   item is 300 KB in size, the system returns 52 items (so as not to
--   exceed the 16 MB limit). It also returns an appropriate
--   <i>UnprocessedKeys</i> value so you can get the next page of results.
--   If desired, your application can include its own logic to assemble the
--   pages of results into one data set.
--   
--   If <i>none</i> of the items can be processed due to insufficient
--   provisioned throughput on all of the tables in the request, then
--   <i>BatchGetItem</i> will return a
--   <i>ProvisionedThroughputExceededException</i>. If <i>at least one</i>
--   of the items is successfully processed, then <i>BatchGetItem</i>
--   completes successfully, while returning the keys of the unread items
--   in <i>UnprocessedKeys</i>.
--   
--   If DynamoDB returns any unprocessed items, you should retry the batch
--   operation on those items. However, <i>we strongly recommend that you
--   use anexponential backoff algorithm</i>. If you retry the batch
--   operation immediately, the underlying read or write requests can still
--   fail due to throttling on the individual tables. If you delay the
--   batch operation using exponential backoff, the individual requests in
--   the batch are much more likely to succeed.
--   
--   For more information, see <a>Batch Operations and Error Handling</a>
--   in the <i>AmazonDynamoDB Developer Guide</i>.
--   
--   By default, <i>BatchGetItem</i> performs eventually consistent reads
--   on every table in the request. If you want strongly consistent reads
--   instead, you can set <i>ConsistentRead</i> to <tt>true</tt> for any or
--   all tables.
--   
--   In order to minimize response latency, <i>BatchGetItem</i> retrieves
--   items in parallel.
--   
--   When designing your application, keep in mind that DynamoDB does not
--   return attributes in any particular order. To help parse the response
--   by item, include the primary key values for the items in your request
--   in the <i>AttributesToGet</i> parameter.
--   
--   If a requested item does not exist, it is not returned in the result.
--   Requests for nonexistent items consume the minimum read capacity units
--   according to the type of read. For more information, see <a>Capacity
--   UnitsCalculations</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   
--   <a>http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchGetItem.html</a>
module Network.AWS.DynamoDB.BatchGetItem
data BatchGetItem

-- | <a>BatchGetItem</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>bgiRequestItems</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>KeysAndAttributes</a></li>
--   <li><a>bgiReturnConsumedCapacity</a> <tt>::</tt> <a>Maybe</a>
--   <a>ReturnConsumedCapacity</a></li>
--   </ul>
batchGetItem :: BatchGetItem

-- | A map of one or more table names and, for each table, a map that
--   describes one or more items to retrieve from that table. Each table
--   name can be used only once per <i>BatchGetItem</i> request.
--   
--   Each element in the map of items to retrieve consists of the
--   following:
--   
--   <i>ConsistentRead</i> - If <tt>true</tt>, a strongly consistent read
--   is used; if <tt>false</tt> (the default), an eventually consistent
--   read is used.
--   
--   <i>ExpressionAttributeNames</i> - One or more substitution tokens for
--   attribute names in the <i>ProjectionExpression</i> parameter. The
--   following are some use cases for using
--   <i>ExpressionAttributeNames</i>:
--   
--   To access an attribute whose name conflicts with a DynamoDB reserved
--   word.
--   
--   To create a placeholder for repeating occurrences of an attribute name
--   in an expression.
--   
--   To prevent special characters in an attribute name from being
--   misinterpreted in an expression.
--   
--   Use the # character in an expression to dereference an attribute name.
--   For example, consider the following attribute name:
--   
--   <tt>Percentile</tt>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <i>ExpressionAttributeNames</i>:
--   
--   '{"#P":<a>Percentile</a>}'
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   '#P = :val'
--   
--   Tokens that begin with the : character are <i>expression attribute
--   values</i>, which are placeholders for the actual value at runtime.
--   
--   For more information on expression attribute names, see <a>Accessing
--   ItemAttributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <i>Keys</i> - An array of primary key attribute values that define
--   specific items in the table. For each primary key, you must provide
--   <i>all</i> of the key attributes. For example, with a hash type
--   primary key, you only need to provide the hash attribute. For a
--   hash-and-range type primary key, you must provide <i>both</i> the hash
--   attribute and the range attribute.
--   
--   <i>ProjectionExpression</i> - A string that identifies one or more
--   attributes to retrieve from the table. These attributes can include
--   scalars, sets, or elements of a JSON document. The attributes in the
--   expression must be separated by commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Accessing Item Attributes</a> in the
--   <i>Amazon DynamoDBDeveloper Guide</i>.
--   
--   <i>AttributesToGet</i> -
--   
--   This is a legacy parameter, for backward compatibility. New
--   applications should use <i>ProjectionExpression</i> instead. Do not
--   combine legacy parameters and expression parameters in a single API
--   call; otherwise, DynamoDB will return a <i>ValidationException</i>
--   exception.
--   
--   This parameter allows you to retrieve attributes of type List or Map;
--   however, it cannot retrieve individual elements within a List or a
--   Map.
--   
--   The names of one or more attributes to retrieve. If no attribute names
--   are provided, then all attributes will be returned. If any of the
--   requested attributes are not found, they will not appear in the
--   result.
--   
--   Note that <i>AttributesToGet</i> has no effect on provisioned
--   throughput consumption. DynamoDB determines capacity units consumed
--   based on item size, not on the amount of data that is returned to an
--   application.
bgiRequestItems :: Lens' BatchGetItem (HashMap Text KeysAndAttributes)
bgiReturnConsumedCapacity :: Lens' BatchGetItem (Maybe ReturnConsumedCapacity)
data BatchGetItemResponse

-- | <a>BatchGetItemResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>bgirConsumedCapacity</a> <tt>::</tt>
--   [<a>ConsumedCapacity</a>]</li>
--   <li><a>bgirResponses</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   [<a>HashMap</a> <a>Text</a> <a>AttributeValue</a>]</li>
--   <li><a>bgirUnprocessedKeys</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>KeysAndAttributes</a></li>
--   </ul>
batchGetItemResponse :: BatchGetItemResponse

-- | The read capacity units consumed by the operation.
--   
--   Each element consists of:
--   
--   <i>TableName</i> - The table that consumed the provisioned throughput.
--   
--   <i>CapacityUnits</i> - The total number of capacity units consumed.
bgirConsumedCapacity :: Lens' BatchGetItemResponse [ConsumedCapacity]

-- | A map of table name to a list of items. Each object in
--   <i>Responses</i> consists of a table name, along with a map of
--   attribute data consisting of the data type and attribute value.
bgirResponses :: Lens' BatchGetItemResponse (HashMap Text [HashMap Text AttributeValue])

-- | A map of tables and their respective keys that were not processed with
--   the current response. The <i>UnprocessedKeys</i> value is in the same
--   form as <i>RequestItems</i>, so the value can be provided directly to
--   a subsequent <i>BatchGetItem</i> operation. For more information, see
--   <i>RequestItems</i> in the Request Parameters section.
--   
--   Each element consists of:
--   
--   <i>Keys</i> - An array of primary key attribute values that define
--   specific items in the table.
--   
--   <i>AttributesToGet</i> - One or more attributes to be retrieved from
--   the table or index. By default, all attributes are returned. If a
--   requested attribute is not found, it does not appear in the result.
--   
--   <i>ConsistentRead</i> - The consistency of a read operation. If set to
--   <tt>true</tt>, then a strongly consistent read is used; otherwise, an
--   eventually consistent read is used.
--   
--   If there are no unprocessed keys remaining, the response contains an
--   empty <i>UnprocessedKeys</i> map.
bgirUnprocessedKeys :: Lens' BatchGetItemResponse (HashMap Text KeysAndAttributes)
instance Eq BatchGetItem
instance Read BatchGetItem
instance Show BatchGetItem
instance Eq BatchGetItemResponse
instance Read BatchGetItemResponse
instance Show BatchGetItemResponse
instance FromJSON BatchGetItemResponse
instance AWSRequest BatchGetItem
instance ToJSON BatchGetItem
instance ToHeaders BatchGetItem
instance ToQuery BatchGetItem
instance ToPath BatchGetItem


-- | Amazon DynamoDB is a fully managed NoSQL database service that
--   provides fast and predictable performance with seamless scalability.
--   You can use Amazon DynamoDB to create a database table that can store
--   and retrieve any amount of data, and serve any level of request
--   traffic. Amazon DynamoDB automatically spreads the data and traffic
--   for the table over a sufficient number of servers to handle the
--   request capacity specified by the customer and the amount of data
--   stored, while maintaining consistent and fast performance.
module Network.AWS.DynamoDB
