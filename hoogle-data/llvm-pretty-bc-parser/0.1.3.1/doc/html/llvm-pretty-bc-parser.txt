-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | LLVM bitcode parsing library
--   
--   A parser for the LLVM bitcode file format, yielding a Module from the
--   llvm-pretty package.
@package llvm-pretty-bc-parser
@version 0.1.3.1

module Data.LLVM.BitCode
parseBitCode :: ByteString -> IO (Either Error Module)
parseBitCodeFromFile :: FilePath -> IO (Either Error Module)
parseBitCodeLazy :: ByteString -> IO (Either Error Module)
parseBitCodeLazyFromFile :: FilePath -> IO (Either Error Module)
data Error
Error :: [String] -> String -> Error
errContext :: Error -> [String]
errMessage :: Error -> String
formatError :: Error -> String


-- | Point-of-contact : jstanley
module Data.LLVM.CFG

-- | The control-flow graph for LLVM functions
data CFG
CFG :: Gr BB () -> BBId -> BBId -> [BB] -> (BBId -> BB) -> (BlockLabel -> BBId) -> (BBId -> BlockLabel) -> (BBId -> [BBId]) -> (BBId -> [BBId]) -> (BBId -> BBId -> Bool) -> (BBId -> Maybe BBId) -> (BBId -> BBId -> Bool) -> (BBId -> Maybe BBId) -> [(BBId, [BBId])] -> CFG
cfgGraph :: CFG -> Gr BB ()

-- | The <tt>BBId</tt> of the entry node in the control-flow graph
entryId :: CFG -> BBId

-- | The <tt>BBId</tt> of the exit node from the control-flow graph
exitId :: CFG -> BBId

-- | All basic blocks in the CFG
allBBs :: CFG -> [BB]

-- | Obtain a basic block from a <tt>BBId</tt> (runtime error if it DNE)
bbById :: CFG -> BBId -> BB

-- | Obtain the <tt>BBId</tt> of a block from its name (runtime error if it
--   DNE)
asId :: CFG -> BlockLabel -> BBId

-- | Obtain the name of a block from a <tt>BBId</tt> (runtime error if it
--   DNE)
asName :: CFG -> BBId -> BlockLabel

-- | Obtain all predecessor basic blocks from a <tt>BBId</tt>
bbPreds :: CFG -> BBId -> [BBId]

-- | Obtain all successor basic blocks from a <tt>BBId</tt>
bbSuccs :: CFG -> BBId -> [BBId]

-- | <tt>dom x y</tt> yields True iff x dominates y in the CFG (i.e., all
--   paths from the entry node to y must pass through x)
dom :: CFG -> BBId -> BBId -> Bool

-- | <tt>idom x</tt> yields the unique immediate dominator of x in the CFG
--   (intuitively, the "nearest" dominator of x; formally, y immediately
--   dominates x iff y dominates x and there is no intervening block z such
--   that y dominates z and z dominates x). The entry node has no immediate
--   dominator.
idom :: CFG -> BBId -> Maybe BBId

-- | <tt>pdom x y</tt> yields True iff x postdominates y in the CFG (i.e.,
--   all paths in the CFG from y to the exit node pass through x)
pdom :: CFG -> BBId -> BBId -> Bool

-- | <tt>ipdom x</tt> yields the unique immediate postdominator of x in the
--   CFG (intuitively, the "nearest" postdominator; formally, y immediately
--   postdominates x iff y postdominates x and there is no intervening
--   block z such that y postdominates z and z postdominates x). The exit
--   node has no immediate postdominator.
ipdom :: CFG -> BBId -> Maybe BBId

-- | <tt>pdom</tt> yields post-dominator analysis for the entire CFG; the
--   resulting list associates each node with a list of its postdominators.
--   The postdominator list is sorted in order of ascending immediacy;
--   i.e., the last element of the list associated with a node <tt>n</tt>
--   is <tt>n</tt>'s immediate dominator, the penultimate element of the
--   list is the immediate postdominator of <tt>n</tt>'s immediate
--   postdominator, and so forth. NB: note the postdominator lists do not
--   explicitly reflect that a node postdominates itself.
pdoms :: CFG -> [(BBId, [BBId])]
type BB = BasicBlock' (BBId, BlockLabel)
data BBId
blockId :: BB -> BBId
blockName :: BB -> BlockLabel

-- | Builds the control-flow graph of a function. Assumes that the entry
--   node is the first basic block in the list. Note that when multiple
--   exit nodes are present in the list, they will all end up connected to
--   a single, unique "dummy" exit node. Note, also, that the CFG basic
--   blocks are of type <tt>BasicBlock' (BBId, Ident)</tt>; that is, they
--   are all named, which is not the case with the input BBs. It is
--   expected that clients use these versions of the basic blocks rather
--   than those that are passed in.
buildCFG :: [BasicBlock] -> CFG
dummyExitName :: String
instance Eq BBId
instance Show BBId
instance Show CFG
