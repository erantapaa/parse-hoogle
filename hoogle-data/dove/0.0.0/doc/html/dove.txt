-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The Dove verification language.
--   
@package dove
@version 0.0.0

module Language.Dove.Syntax
data Expr
Var :: String -> Expr
ForAll :: String -> Expr -> Expr
Let :: String -> Expr -> Expr -> Expr
Record :: [(String, Expr)] -> Expr
RecordOverlay :: Expr -> Expr -> Expr
RecordProject :: Expr -> String -> Expr
Array :: [Expr] -> Expr
ArrayAppend :: Expr -> Expr -> Expr
ArrayProject :: Expr -> Expr -> Expr
ArrayUpdate :: Expr -> Expr -> Expr -> Expr
UniOp :: UniOp -> Expr -> Expr
BinOp :: BinOp -> Expr -> Expr -> Expr
If :: Expr -> Expr -> Expr -> Expr
Unit :: Expr
Bool :: Bool -> Expr
Integer :: Integer -> Expr
Comment :: String -> Expr -> Expr
data UniOp
Not :: UniOp
Length :: UniOp
Negate :: UniOp
Abs :: UniOp
Signum :: UniOp
IsArray :: UniOp
IsInt :: UniOp
data BinOp
And :: BinOp
Or :: BinOp
Implies :: BinOp
Eq :: BinOp
Lt :: BinOp
Le :: BinOp
Gt :: BinOp
Ge :: BinOp
Add :: BinOp
Sub :: BinOp
Mul :: BinOp
Mod :: BinOp
let' :: String -> Expr -> Expr -> Expr
forAll :: [String] -> Expr -> Expr
not' :: Expr -> Expr
(&&.) :: Expr -> Expr -> Expr
(||.) :: Expr -> Expr -> Expr
implies :: Expr -> Expr -> Expr
unit :: Expr
true :: Expr
false :: Expr
if' :: Expr -> Expr -> Expr -> Expr
length' :: Expr -> Expr
isArray :: Expr -> Expr
isInt :: Expr -> Expr
(==.) :: Expr -> Expr -> Expr
(<.) :: Expr -> Expr -> Expr
(<=.) :: Expr -> Expr -> Expr
(>.) :: Expr -> Expr -> Expr
(>=.) :: Expr -> Expr -> Expr
mod' :: Expr -> Expr -> Expr
instance Eq UniOp
instance Eq BinOp
instance Eq Expr
instance Num Expr
instance Show BinOp
instance Show UniOp
instance Show Expr

module Language.Dove.Optimize
optimize :: Expr -> Expr


-- | Interface to ACL2.
module Language.Dove.ACL2
acl2 :: Expr -> Expr
check :: Expr -> IO Bool
check' :: Expr -> IO (Bool, String)

module Language.Dove
