-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | HTML5 Canvas Graphics Library - forked Blank Canvas
--   
--   A Haskell port of the HTML5 Canvas API. blank-canvas works by
--   providing a web service that displays the users' Haskell commands
--   inside a browser.
@package null-canvas
@version 0.2.7

module Graphics.Blank

-- | blankCanvas is the main entry point into blank-canvas. A typical
--   invocation would be
--   
--   <pre>
--   module Main where
--   
--   import Graphics.Blank
--   
--   main = blankCanvas 3000 $ \ context -&gt; do
--           send context $ do
--                   moveTo(50,50)
--                   lineTo(200,100)
--                   lineWidth 10
--                   strokeStyle "red"
--                   stroke()
--   </pre>
--   
--   launch single-canvas app on specified port
blankCanvas :: Int -> (Context -> IO ()) -> IO ()

-- | launch multiple canvas apps, each with a prefix, like
--   `/myprefix/foo/bar`
blankCanvasMany :: Int -> [(String, Context -> IO ())] -> IO ()

-- | as blankCanvasMany but takes customization parameters dataDir and
--   performLogging
blankCanvasManyParams :: Int -> [(String, Context -> IO ())] -> FilePath -> Bool -> IO ()

-- | as blankCanvas but takes customization parameters dataDir and
--   performLogging
blankCanvasParams :: Int -> (Context -> IO ()) -> FilePath -> Bool -> String -> IO ()

-- | parametrised version of blankCanvas, also returns ScottyM application
--   instead of running a server. use <a>scotty</a> to run it.
blankCanvasParamsScotty :: (Context -> IO ()) -> FilePath -> Bool -> String -> IO (ScottyM ())

-- | <a>Context</a> is our abstact handle into a specific 2d-context inside
--   a browser.
data Context

-- | Sends a set of Canvas commands to the canvas. Attempts to common up as
--   many commands as possible.
send :: Context -> Canvas a -> IO a

-- | <a>events</a> gets the raw event queue for a specific event type.
events :: Context -> EventName -> IO EventQueue
data Canvas :: * -> *

-- | see <a>http://www.w3schools.com/tags/canvas_arc.asp</a>
arc :: (Float, Float, Float, Float, Float, Bool) -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_beginpath.asp</a>
beginPath :: Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_beziercurveto.asp</a>
bezierCurveTo :: (Float, Float, Float, Float, Float, Float) -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_clearrect.asp</a>
clearRect :: (Float, Float, Float, Float) -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_closepath.asp</a>
closePath :: Canvas ()

-- | sends command (JS) unchanged. useful for extending this library with
--   functionality it doesn't currently have. example:
--   
--   <pre>
--   custom $ unlines $ [
--         "var grd=c.createRadialGradient(0,0,3,20,20,10); "
--        ,"grd.addColorStop(0,\"white\");"
--        ,"grd.addColorStop(1,\"red\");"
--        ,"c.fillStyle=grd;"]
--   </pre>
custom :: String -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_fill.asp</a>
fill :: Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_fillrect.asp</a>
fillRect :: (Float, Float, Float, Float) -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_fillstyle.asp</a>
fillStyle :: String -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_filltext.asp</a>
fillText :: (String, Float, Float) -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_font.asp</a>
font :: String -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_globalalpha.asp</a>
globalAlpha :: Float -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_linecap.asp</a>
lineCap :: String -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_linejoin.asp</a>
lineJoin :: String -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_lineto.asp</a>
lineTo :: (Float, Float) -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_linewidth.asp</a>
lineWidth :: Float -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_miterlimit.asp</a>
miterLimit :: Float -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_moveto.asp</a>
moveTo :: (Float, Float) -> Canvas ()

-- | see bottom of <a>http://www.w3schools.com/tags/ref_canvas.asp</a>
restore :: Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_rotate.asp</a>
rotate :: Float -> Canvas ()

-- | <a>http://www.w3schools.com/tags/canvas_scale.asp</a>
scale :: (Float, Float) -> Canvas ()

-- | see bottom of <a>http://www.w3schools.com/tags/ref_canvas.asp</a>
save :: Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_stroke.asp</a>
stroke :: Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_strokerect.asp</a>
strokeRect :: (Float, Float, Float, Float) -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_stroketext.asp</a>
strokeText :: (String, Float, Float) -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_strokestyle.asp</a>
strokeStyle :: String -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_textalign.asp</a>
textAlign :: String -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_textbaseline.asp</a>
textBaseline :: String -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_transform.asp</a>
transform :: (Float, Float, Float, Float, Float, Float) -> Canvas ()

-- | see <a>http://www.w3schools.com/tags/canvas_translate.asp</a>
translate :: (Float, Float) -> Canvas ()

-- | read a specific event; wait for it if the event is not in queue.
readEvent :: EventName -> Canvas Event

-- | read a specific event; or return Nothing if the event is not in queue.
tryReadEvent :: EventName -> Canvas (Maybe Event)

-- | size of the canvas
size :: Canvas (Float, Float)

-- | Basic Event from Browser, the code is event-type specific.
data Event
Event :: Int -> Maybe (Int, Int) -> Event
jsCode :: Event -> Int
jsMouse :: Event -> Maybe (Int, Int)

-- | <a>EventName</a> mirrors event names from jquery, where 'map toLower
--   (show name)' gives the jquery event name.
data EventName
KeyPress :: EventName
KeyDown :: EventName
KeyUp :: EventName
MouseDown :: EventName
MouseEnter :: EventName
MouseMove :: EventName
MouseOut :: EventName
MouseOver :: EventName
MouseUp :: EventName

-- | EventQueue is a STM channel (<a>TChan</a>) of <a>Event</a>s.
--   Intentionally, <a>EventQueue</a> is not abstract.
type EventQueue = TChan Event
readEventQueue :: EventQueue -> IO Event
tryReadEventQueue :: EventQueue -> IO (Maybe Event)
