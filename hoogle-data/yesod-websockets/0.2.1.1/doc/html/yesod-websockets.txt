-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | WebSockets support for Yesod
--   
--   API docs and the README are available at
--   <a>http://www.stackage.org/package/yesod-websockets</a>
@package yesod-websockets
@version 0.2.1.1

module Yesod.WebSockets

-- | A transformer for a WebSockets handler.
--   
--   Since 0.1.0
type WebSocketsT = ReaderT Connection

-- | Attempt to run a WebSockets handler. This function first checks if the
--   client initiated a WebSockets connection and, if so, runs the provided
--   application, short-circuiting the rest of your handler. If the client
--   did not request a WebSockets connection, the rest of your handler will
--   be called instead.
--   
--   Since 0.1.0
webSockets :: (MonadBaseControl IO m, MonadHandler m) => WebSocketsT m () -> m ()

-- | Receive a piece of data from the client.
--   
--   Since 0.1.0
receiveData :: (MonadIO m, WebSocketsData a) => WebSocketsT m a

-- | Send a textual message to the client.
--   
--   Since 0.1.0
sendTextData :: (MonadIO m, WebSocketsData a) => a -> WebSocketsT m ()

-- | Send a binary message to the client.
--   
--   Since 0.1.0
sendBinaryData :: (MonadIO m, WebSocketsData a) => a -> WebSocketsT m ()

-- | A <tt>Source</tt> of WebSockets data from the user.
--   
--   Since 0.1.0
sourceWS :: (MonadIO m, WebSocketsData a) => Producer (WebSocketsT m) a

-- | A <tt>Sink</tt> for sending textual data to the user.
--   
--   Since 0.1.0
sinkWSText :: (MonadIO m, WebSocketsData a) => Consumer a (WebSocketsT m) ()

-- | A <tt>Sink</tt> for sending binary data to the user.
--   
--   Since 0.1.0
sinkWSBinary :: (MonadIO m, WebSocketsData a) => Consumer a (WebSocketsT m) ()

-- | Generalized version of <a>race</a>.
--   
--   Since 0.1.0
race :: MonadBaseControl IO m => m a -> m b -> m (Either a b)

-- | Generalized version of <a>race_</a>.
--   
--   Since 0.1.0
race_ :: MonadBaseControl IO m => m a -> m b -> m ()

-- | Generalized version of <a>concurrently</a>. Note that if your
--   underlying monad has some kind of mutable state, the state from the
--   second action will overwrite the state from the first.
--   
--   Since 0.1.0
concurrently :: MonadBaseControl IO m => m a -> m b -> m (a, b)

-- | Run two actions concurrently (like <a>concurrently</a>), but discard
--   their results and any modified monadic state.
--   
--   Since 0.1.0
concurrently_ :: MonadBaseControl IO m => m a -> m b -> m ()
