-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Verilog parser and DSL.
--   
--   A parser and DSL supporting a small subset of Verilog-95. Intended for
--   machine generated, synthesizable code.
@package verilog
@version 0.0.7

module Language.Verilog.Parser.Tokens
data Token
Token :: TokenName -> String -> Position -> Token
data TokenName
KW_alias :: TokenName
KW_always :: TokenName
KW_always_comb :: TokenName
KW_always_ff :: TokenName
KW_always_latch :: TokenName
KW_and :: TokenName
KW_assert :: TokenName
KW_assign :: TokenName
KW_assume :: TokenName
KW_automatic :: TokenName
KW_before :: TokenName
KW_begin :: TokenName
KW_bind :: TokenName
KW_bins :: TokenName
KW_binsof :: TokenName
KW_bit :: TokenName
KW_break :: TokenName
KW_buf :: TokenName
KW_bufif0 :: TokenName
KW_bufif1 :: TokenName
KW_byte :: TokenName
KW_case :: TokenName
KW_casex :: TokenName
KW_casez :: TokenName
KW_cell :: TokenName
KW_chandle :: TokenName
KW_class :: TokenName
KW_clocking :: TokenName
KW_cmos :: TokenName
KW_config :: TokenName
KW_const :: TokenName
KW_constraint :: TokenName
KW_context :: TokenName
KW_continue :: TokenName
KW_cover :: TokenName
KW_covergroup :: TokenName
KW_coverpoint :: TokenName
KW_cross :: TokenName
KW_deassign :: TokenName
KW_default :: TokenName
KW_defparam :: TokenName
KW_design :: TokenName
KW_disable :: TokenName
KW_dist :: TokenName
KW_do :: TokenName
KW_edge :: TokenName
KW_else :: TokenName
KW_end :: TokenName
KW_endcase :: TokenName
KW_endclass :: TokenName
KW_endclocking :: TokenName
KW_endconfig :: TokenName
KW_endfunction :: TokenName
KW_endgenerate :: TokenName
KW_endgroup :: TokenName
KW_endinterface :: TokenName
KW_endmodule :: TokenName
KW_endpackage :: TokenName
KW_endprimitive :: TokenName
KW_endprogram :: TokenName
KW_endproperty :: TokenName
KW_endspecify :: TokenName
KW_endsequence :: TokenName
KW_endtable :: TokenName
KW_endtask :: TokenName
KW_enum :: TokenName
KW_event :: TokenName
KW_expect :: TokenName
KW_export :: TokenName
KW_extends :: TokenName
KW_extern :: TokenName
KW_final :: TokenName
KW_first_match :: TokenName
KW_for :: TokenName
KW_force :: TokenName
KW_foreach :: TokenName
KW_forever :: TokenName
KW_fork :: TokenName
KW_forkjoin :: TokenName
KW_function :: TokenName
KW_function_prototype :: TokenName
KW_generate :: TokenName
KW_genvar :: TokenName
KW_highz0 :: TokenName
KW_highz1 :: TokenName
KW_if :: TokenName
KW_iff :: TokenName
KW_ifnone :: TokenName
KW_ignore_bins :: TokenName
KW_illegal_bins :: TokenName
KW_import :: TokenName
KW_incdir :: TokenName
KW_include :: TokenName
KW_initial :: TokenName
KW_inout :: TokenName
KW_input :: TokenName
KW_inside :: TokenName
KW_instance :: TokenName
KW_int :: TokenName
KW_integer :: TokenName
KW_interface :: TokenName
KW_intersect :: TokenName
KW_join :: TokenName
KW_join_any :: TokenName
KW_join_none :: TokenName
KW_large :: TokenName
KW_liblist :: TokenName
KW_library :: TokenName
KW_local :: TokenName
KW_localparam :: TokenName
KW_logic :: TokenName
KW_longint :: TokenName
KW_macromodule :: TokenName
KW_matches :: TokenName
KW_medium :: TokenName
KW_modport :: TokenName
KW_module :: TokenName
KW_nand :: TokenName
KW_negedge :: TokenName
KW_new :: TokenName
KW_nmos :: TokenName
KW_nor :: TokenName
KW_noshowcancelled :: TokenName
KW_not :: TokenName
KW_notif0 :: TokenName
KW_notif1 :: TokenName
KW_null :: TokenName
KW_option :: TokenName
KW_or :: TokenName
KW_output :: TokenName
KW_package :: TokenName
KW_packed :: TokenName
KW_parameter :: TokenName
KW_pathpulse_dollar :: TokenName
KW_pmos :: TokenName
KW_posedge :: TokenName
KW_primitive :: TokenName
KW_priority :: TokenName
KW_program :: TokenName
KW_property :: TokenName
KW_protected :: TokenName
KW_pull0 :: TokenName
KW_pull1 :: TokenName
KW_pulldown :: TokenName
KW_pullup :: TokenName
KW_pulsestyle_onevent :: TokenName
KW_pulsestyle_ondetect :: TokenName
KW_pure :: TokenName
KW_rand :: TokenName
KW_randc :: TokenName
KW_randcase :: TokenName
KW_randsequence :: TokenName
KW_rcmos :: TokenName
KW_real :: TokenName
KW_realtime :: TokenName
KW_ref :: TokenName
KW_reg :: TokenName
KW_release :: TokenName
KW_repeat :: TokenName
KW_return :: TokenName
KW_rnmos :: TokenName
KW_rpmos :: TokenName
KW_rtran :: TokenName
KW_rtranif0 :: TokenName
KW_rtranif1 :: TokenName
KW_scalared :: TokenName
KW_sequence :: TokenName
KW_shortint :: TokenName
KW_shortreal :: TokenName
KW_showcancelled :: TokenName
KW_signed :: TokenName
KW_small :: TokenName
KW_solve :: TokenName
KW_specify :: TokenName
KW_specparam :: TokenName
KW_static :: TokenName
KW_strength0 :: TokenName
KW_strength1 :: TokenName
KW_string :: TokenName
KW_strong0 :: TokenName
KW_strong1 :: TokenName
KW_struct :: TokenName
KW_super :: TokenName
KW_supply0 :: TokenName
KW_supply1 :: TokenName
KW_table :: TokenName
KW_tagged :: TokenName
KW_task :: TokenName
KW_this :: TokenName
KW_throughout :: TokenName
KW_time :: TokenName
KW_timeprecision :: TokenName
KW_timeunit :: TokenName
KW_tran :: TokenName
KW_tranif0 :: TokenName
KW_tranif1 :: TokenName
KW_tri :: TokenName
KW_tri0 :: TokenName
KW_tri1 :: TokenName
KW_triand :: TokenName
KW_trior :: TokenName
KW_trireg :: TokenName
KW_type :: TokenName
KW_typedef :: TokenName
KW_type_option :: TokenName
KW_union :: TokenName
KW_unique :: TokenName
KW_unsigned :: TokenName
KW_use :: TokenName
KW_var :: TokenName
KW_vectored :: TokenName
KW_virtual :: TokenName
KW_void :: TokenName
KW_wait :: TokenName
KW_wait_order :: TokenName
KW_wand :: TokenName
KW_weak0 :: TokenName
KW_weak1 :: TokenName
KW_while :: TokenName
KW_wildcard :: TokenName
KW_wire :: TokenName
KW_with :: TokenName
KW_within :: TokenName
KW_wor :: TokenName
KW_xnor :: TokenName
KW_xor :: TokenName
Id_simple :: TokenName
Id_escaped :: TokenName
Id_system :: TokenName
Lit_number_unsigned :: TokenName
Lit_number :: TokenName
Lit_string :: TokenName
Sym_paren_l :: TokenName
Sym_paren_r :: TokenName
Sym_brack_l :: TokenName
Sym_brack_r :: TokenName
Sym_brace_l :: TokenName
Sym_brace_r :: TokenName
Sym_tildy :: TokenName
Sym_bang :: TokenName
Sym_at :: TokenName
Sym_pound :: TokenName
Sym_percent :: TokenName
Sym_hat :: TokenName
Sym_amp :: TokenName
Sym_bar :: TokenName
Sym_aster :: TokenName
Sym_dot :: TokenName
Sym_comma :: TokenName
Sym_colon :: TokenName
Sym_semi :: TokenName
Sym_eq :: TokenName
Sym_lt :: TokenName
Sym_gt :: TokenName
Sym_plus :: TokenName
Sym_dash :: TokenName
Sym_question :: TokenName
Sym_slash :: TokenName
Sym_dollar :: TokenName
Sym_s_quote :: TokenName
Sym_tildy_amp :: TokenName
Sym_tildy_bar :: TokenName
Sym_tildy_hat :: TokenName
Sym_hat_tildy :: TokenName
Sym_eq_eq :: TokenName
Sym_bang_eq :: TokenName
Sym_amp_amp :: TokenName
Sym_bar_bar :: TokenName
Sym_aster_aster :: TokenName
Sym_lt_eq :: TokenName
Sym_gt_eq :: TokenName
Sym_gt_gt :: TokenName
Sym_lt_lt :: TokenName
Sym_plus_plus :: TokenName
Sym_dash_dash :: TokenName
Sym_plus_eq :: TokenName
Sym_dash_eq :: TokenName
Sym_aster_eq :: TokenName
Sym_slash_eq :: TokenName
Sym_percent_eq :: TokenName
Sym_amp_eq :: TokenName
Sym_bar_eq :: TokenName
Sym_hat_eq :: TokenName
Sym_plus_colon :: TokenName
Sym_dash_colon :: TokenName
Sym_colon_colon :: TokenName
Sym_dot_aster :: TokenName
Sym_dash_gt :: TokenName
Sym_colon_eq :: TokenName
Sym_colon_slash :: TokenName
Sym_pound_pound :: TokenName
Sym_brack_l_aster :: TokenName
Sym_brack_l_eq :: TokenName
Sym_eq_gt :: TokenName
Sym_at_aster :: TokenName
Sym_paren_l_aster :: TokenName
Sym_aster_paren_r :: TokenName
Sym_aster_gt :: TokenName
Sym_eq_eq_eq :: TokenName
Sym_bang_eq_eq :: TokenName
Sym_eq_question_eq :: TokenName
Sym_bang_question_eq :: TokenName
Sym_gt_gt_gt :: TokenName
Sym_lt_lt_lt :: TokenName
Sym_lt_lt_eq :: TokenName
Sym_gt_gt_eq :: TokenName
Sym_bar_dash_gt :: TokenName
Sym_bar_eq_gt :: TokenName
Sym_brack_l_dash_gt :: TokenName
Sym_at_at_paren_l :: TokenName
Sym_paren_l_aster_paren_r :: TokenName
Sym_dash_gt_gt :: TokenName
Sym_amp_amp_amp :: TokenName
Sym_lt_lt_lt_eq :: TokenName
Sym_gt_gt_gt_eq :: TokenName
Unknown :: TokenName
data Position
Position :: String -> Int -> Int -> Position
tokenString :: Token -> String
instance Eq Position
instance Show TokenName
instance Eq TokenName
instance Show Token
instance Eq Token
instance Show Position

module Language.Verilog.Parser.Preprocess

-- | Remove comments from code.
uncomment :: FilePath -> String -> String

-- | A simple `define preprocessor.
preprocess :: [(String, String)] -> FilePath -> String -> String

module Language.Verilog.Parser.Lex
alexScanTokens :: String -> [Token]
instance Eq AlexPosn
instance Show AlexPosn
instance Functor AlexLastAcc


-- | Unsigned bit vectors.
module Data.BitVec
data BitVec

-- | BitVec construction, given width and value.
bitVec :: Int -> Integer -> BitVec

-- | Bit seclection. LSB is 0.
select :: BitVec -> (BitVec, BitVec) -> BitVec

-- | Width of a <a>BitVec</a>.
width :: BitVec -> Int

-- | Value of a <a>BitVec</a>.
value :: BitVec -> Integer
instance Show BitVec
instance Eq BitVec
instance Monoid BitVec
instance Bits BitVec
instance Num BitVec

module Language.Verilog.AST
type Identifier = String
data Module
Module :: Identifier -> [Identifier] -> [ModuleItem] -> Module
data ModuleItem
Parameter :: (Maybe Range) -> Identifier -> Expr -> ModuleItem
Localparam :: (Maybe Range) -> Identifier -> Expr -> ModuleItem
Input :: (Maybe Range) -> [Identifier] -> ModuleItem
Output :: (Maybe Range) -> [Identifier] -> ModuleItem
Inout :: (Maybe Range) -> [Identifier] -> ModuleItem
Wire :: (Maybe Range) -> [(Identifier, Maybe Expr)] -> ModuleItem
Reg :: (Maybe Range) -> [(Identifier, Maybe Range)] -> ModuleItem
Integer :: [Identifier] -> ModuleItem
Initial :: Stmt -> ModuleItem
Always :: Sense -> Stmt -> ModuleItem
Assign :: LHS -> Expr -> ModuleItem
Instance :: Identifier -> [PortBinding] -> Identifier -> [PortBinding] -> ModuleItem
data Stmt
Block :: (Maybe Identifier) -> [Stmt] -> Stmt
StmtReg :: (Maybe Range) -> [(Identifier, Maybe Range)] -> Stmt
StmtInteger :: [Identifier] -> Stmt
Case :: Expr -> [Case] -> Stmt -> Stmt
BlockingAssignment :: LHS -> Expr -> Stmt
NonBlockingAssignment :: LHS -> Expr -> Stmt
For :: (Identifier, Expr) -> Expr -> (Identifier, Expr) -> Stmt -> Stmt
If :: Expr -> Stmt -> Stmt -> Stmt
StmtCall :: Call -> Stmt
Delay :: Expr -> Stmt -> Stmt
Null :: Stmt
data LHS
LHS :: Identifier -> LHS
LHSBit :: Identifier -> Expr -> LHS
LHSRange :: Identifier -> Range -> LHS
data Expr
String :: String -> Expr
Number :: BitVec -> Expr
ConstBool :: Bool -> Expr
ExprLHS :: LHS -> Expr
ExprCall :: Call -> Expr
UniOp :: UniOp -> Expr -> Expr
BinOp :: BinOp -> Expr -> Expr -> Expr
Mux :: Expr -> Expr -> Expr -> Expr
Bit :: Expr -> Int -> Expr
Repeat :: Expr -> [Expr] -> Expr
Concat :: [Expr] -> Expr
data UniOp
Not :: UniOp
BWNot :: UniOp
UAdd :: UniOp
USub :: UniOp
data BinOp
And :: BinOp
Or :: BinOp
BWAnd :: BinOp
BWXor :: BinOp
BWOr :: BinOp
Mul :: BinOp
Div :: BinOp
Mod :: BinOp
Add :: BinOp
Sub :: BinOp
ShiftL :: BinOp
ShiftR :: BinOp
Eq :: BinOp
Ne :: BinOp
Lt :: BinOp
Le :: BinOp
Gt :: BinOp
Ge :: BinOp
data Sense
Sense :: LHS -> Sense
SenseOr :: Sense -> Sense -> Sense
SensePosedge :: LHS -> Sense
SenseNegedge :: LHS -> Sense
data Call
Call :: Identifier -> [Expr] -> Call
type PortBinding = (Identifier, Maybe Expr)
type Case = ([Expr], Stmt)
type Range = (Expr, Expr)
instance Eq UniOp
instance Eq BinOp
instance Eq Expr
instance Eq Call
instance Eq LHS
instance Eq Sense
instance Eq Stmt
instance Eq ModuleItem
instance Eq Module
instance Show Sense
instance Show Call
instance Show Stmt
instance Show LHS
instance Monoid Expr
instance Bits Expr
instance Num Expr
instance Show Expr
instance Show BinOp
instance Show UniOp
instance Show ModuleItem
instance Show Module


-- | An embedded DSL for Verilog.
module Language.Verilog.DSL
type Verilog a = StateT (Int, a, [ModuleItem]) Id
elaborate :: String -> a -> Verilog a () -> (a, Module)
getMeta :: Verilog a a
setMeta :: a -> Verilog a ()
genVar :: Verilog a String
input :: String -> Int -> Verilog a ()
output :: String -> Int -> Verilog a ()
wire :: String -> Int -> Maybe Expr -> Verilog a ()
reg :: String -> Int -> Verilog a ()
assign :: LHS -> Expr -> Verilog a ()
inst :: Identifier -> [(Identifier, Expr)] -> Identifier -> [(Identifier, Expr)] -> Verilog a ()
var :: String -> Expr
constant :: Int -> Integer -> Expr

-- | An associative operation
mappend :: Monoid a => a -> a -> a

-- | Fold a list using the monoid. For most types, the default definition
--   for <a>mconcat</a> will be used, but the function is included in the
--   class definition so that an optimized version can be provided for
--   specific types.
mconcat :: Monoid a => [a] -> a

-- | An infix synonym for <a>mappend</a>.
(<>) :: Monoid m => m -> m -> m
mux :: Expr -> Expr -> Expr -> Expr
true :: Expr
false :: Expr

module Language.Verilog.Parser.Parse
modules :: [Token] -> [Module]
instance Monad HappyIdentity

module Language.Verilog.Parser

-- | Parses a file given a table of predefined macros, the file name, and
--   the file contents.
parseFile :: [(String, String)] -> FilePath -> String -> [Module]

-- | A simple `define preprocessor.
preprocess :: [(String, String)] -> FilePath -> String -> String


-- | A parser and DSL for Verilog.
module Language.Verilog
