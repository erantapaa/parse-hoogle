-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Trivial package for writing PPM images.
--   
--   This package is written in 100% Haskell and enables you to write PPM
--   ("Portable Pixel Map") images in human-readable text format as well as
--   the more efficient binary format. It uses the ByteString library for
--   maximum efficiency. For those that don't know, PPM is an image file
--   format which is trivially simple, but therefore horribly inefficient.
--   None the less, many programs can read PPM files, so this package
--   represents an easy way to write Haskell code that generates images,
--   without having to depend on any external C code.
@package AC-PPM
@version 1.1.1


-- | Generate textual PPM files ("P3"). These are much larger than binary
--   files and slower to generate, but have the advantage of being
--   <i>vaguely</i> human-readable. (Apart from the file header, each line
--   is three decimal numbers representing the RGB values of a single
--   pixel.) Such files will also survive transfer in "text mode" without
--   being mutilated, unlike binary image files.
module Codec.PPM.Text

-- | Given the image size (X pixels, Y pixels) and a list of pixel values
--   (red, green, blue), produce a lazy ByteString containing the PPM data.
stringPPM :: (Integer, Integer) -> [(Word8, Word8, Word8)] -> ByteString

-- | Convenience function: Generate PPM data and write it to the specified
--   <a>Handle</a>. The handle is not closed or flushed afterwards. This
--   allows writing PPM data to network streams, etc. This function does
--   not return until all the data has been completely written. (It may of
--   course throw some kind of I/O exception instead.)
putPPM :: Handle -> (Integer, Integer) -> [(Word8, Word8, Word8)] -> IO ()

-- | Convenience function: Write PPM data directly to a file. If the file
--   does not exist, it is created. If it exists, it is overwritten. This
--   function does not return until the file has been completely created.
--   (It may of course throw some kind of I/O exception instead.)
writePPM :: FilePath -> (Integer, Integer) -> [(Word8, Word8, Word8)] -> IO ()

-- | Helper function: Given a function from pixel coordinates to pixel
--   colour, produce a list of pixel data ready to feed to one of the other
--   PPM functions.
fn_list :: ((Integer, Integer) -> (Word8, Word8, Word8)) -> (Integer, Integer) -> [(Word8, Word8, Word8)]


-- | Generate binary PPM files ("P6"). These are smaller on disk and faster
--   to generate than text PPM files.
module Codec.PPM.Binary

-- | Given the image size (X pixels, Y pixels) and a list of pixel values
--   (red, green, blue), produce a lazy ByteString containing the PPM data.
stringPPM :: (Integer, Integer) -> [(Word8, Word8, Word8)] -> ByteString

-- | Convenience function: Generate PPM data and write it to the specified
--   <a>Handle</a>. The handle is not closed or flushed afterwards. This
--   allows writing PPM data to network streams, etc. This function does
--   not return until all the data has been completely written. (It may of
--   course throw some kind of I/O exception instead.)
putPPM :: Handle -> (Integer, Integer) -> [(Word8, Word8, Word8)] -> IO ()

-- | Convenience function: Write PPM data directly to a file. If the file
--   does not exist, it is created. If it exists, it is overwritten. This
--   function does not return until the file has been completely created.
--   (It may of course throw some kind of I/O exception instead.)
writePPM :: FilePath -> (Integer, Integer) -> [(Word8, Word8, Word8)] -> IO ()

-- | Helper function: Given a function from pixel coordinates to pixel
--   colour, produce a list of pixel data ready to feed to one of the other
--   PPM functions.
fn_list :: ((Integer, Integer) -> (Word8, Word8, Word8)) -> (Integer, Integer) -> [(Word8, Word8, Word8)]


-- | The two modules <a>Codec.PPM.Text</a> and <a>Codec.PPM.Binary</a>
--   support the generation of text or binary PPM files ("P3" or "P6"
--   respectively). Default is binary (since it is more efficient.) Both
--   modules have an identical API; just change the import declaration to
--   change file mode.
module Codec.PPM
