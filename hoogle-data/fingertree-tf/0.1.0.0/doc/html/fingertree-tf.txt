-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generic finger-tree structure using type families.
--   
@package fingertree-tf
@version 0.1.0.0


-- | A version of Data.FingerTree from package fingertree modified to use
--   associated types instead of functional dependencies and MPTCs.
--   
--   A general sequence representation with arbitrary annotations, for use
--   as a base for implementations of various collection types, as
--   described in section 4 of
--   
--   <ul>
--   <li>Ralf Hinze and Ross Paterson, "Finger trees: a simple
--   general-purpose data structure", <i>Journal of Functional
--   Programming</i> 16:2 (2006) pp 197-217.
--   <a>http://www.soi.city.ac.uk/~ross/papers/FingerTree.html</a></li>
--   </ul>
--   
--   For a directly usable sequence type, see <tt>Data.Sequence</tt>, which
--   is a specialization of this structure.
--   
--   An amortized running time is given for each operation, with <i>n</i>
--   referring to the length of the sequence. These bounds hold even in a
--   persistent (shared) setting.
--   
--   <i>Note</i>: Many of these operations have the same names as similar
--   operations on lists in the <a>Prelude</a>. The ambiguity may be
--   resolved using either qualification or the <tt>hiding</tt> clause.
module Data.FingerTree

-- | A representation of a sequence of values of type <tt>a</tt>, allowing
--   access to the ends in constant time, and append and split in time
--   logarithmic in the size of the smaller piece.
--   
--   The collection is also parameterized by a measure type <tt>v</tt>,
--   which is used to specify a position in the sequence for the
--   <a>split</a> operation. The types of the operations enforce the
--   constraint <tt><a>Measured</a> v a</tt>, which also implies that the
--   type <tt>v</tt> is determined by <tt>a</tt>.
--   
--   A variety of abstract data types can be implemented by using different
--   element types and measurements.
data FingerTree a

-- | Things that can be measured.
class Monoid (Measure a) => Measured a where type family Measure a :: *
measure :: Measured a => a -> Measure a

-- | <i>O(1)</i>. The empty sequence.
empty :: Measured a => FingerTree a

-- | <i>O(1)</i>. A singleton sequence.
singleton :: Measured a => a -> FingerTree a

-- | <i>O(1)</i>. Add an element to the left end of a sequence. Mnemonic: a
--   triangle with the single element at the pointy end.
(<|) :: Measured a => a -> FingerTree a -> FingerTree a

-- | <i>O(1)</i>. Add an element to the right end of a sequence. Mnemonic:
--   a triangle with the single element at the pointy end.
(|>) :: Measured a => FingerTree a -> a -> FingerTree a

-- | <i>O(log(min(n1,n2)))</i>. Concatenate two sequences.
(><) :: Measured a => FingerTree a -> FingerTree a -> FingerTree a

-- | <i>O(n)</i>. Create a sequence from a finite list of elements.
fromList :: Measured a => [a] -> FingerTree a

-- | <i>O(1)</i>. Is this the empty sequence?
null :: Measured a => FingerTree a -> Bool

-- | View of the left end of a sequence.
data ViewL s a

-- | empty sequence
EmptyL :: ViewL s a

-- | leftmost element and the rest of the sequence
(:<) :: a -> s a -> ViewL s a

-- | View of the right end of a sequence.
data ViewR s a

-- | empty sequence
EmptyR :: ViewR s a

-- | the sequence minus the rightmost element, and the rightmost element
(:>) :: s a -> a -> ViewR s a

-- | <i>O(1)</i>. Analyse the left end of a sequence.
viewl :: Measured a => FingerTree a -> ViewL FingerTree a

-- | <i>O(1)</i>. Analyse the right end of a sequence.
viewr :: Measured a => FingerTree a -> ViewR FingerTree a

-- | <i>O(log(min(i,n-i)))</i>. Split a sequence at a point where the
--   predicate on the accumulated measure changes from <a>False</a> to
--   <a>True</a>.
--   
--   For predictable results, one should ensure that there is only one such
--   point, i.e. that the predicate is <i>monotonic</i>.
split :: Measured a => (Measure a -> Bool) -> FingerTree a -> (FingerTree a, FingerTree a)

-- | <i>O(log(min(i,n-i)))</i>. Given a monotonic predicate <tt>p</tt>,
--   <tt><a>takeUntil</a> p t</tt> is the largest prefix of <tt>t</tt>
--   whose measure does not satisfy <tt>p</tt>.
--   
--   <ul>
--   <li><pre><a>takeUntil</a> p t = <a>fst</a> (<a>split</a> p
--   t)</pre></li>
--   </ul>
takeUntil :: Measured a => (Measure a -> Bool) -> FingerTree a -> FingerTree a

-- | <i>O(log(min(i,n-i)))</i>. Given a monotonic predicate <tt>p</tt>,
--   <tt><a>dropUntil</a> p t</tt> is the rest of <tt>t</tt> after removing
--   the largest prefix whose measure does not satisfy <tt>p</tt>.
--   
--   <ul>
--   <li><pre><a>dropUntil</a> p t = <a>snd</a> (<a>split</a> p
--   t)</pre></li>
--   </ul>
dropUntil :: Measured a => (Measure a -> Bool) -> FingerTree a -> FingerTree a

-- | <i>O(n)</i>. The reverse of a sequence.
reverse :: Measured a => FingerTree a -> FingerTree a

-- | Like <a>fmap</a>, but with a more constrained type.
fmap' :: (Measured a, Measured b) => (a -> b) -> FingerTree a -> FingerTree b

-- | Map all elements of the tree with a function that also takes the
--   measure of the prefix of the tree to the left of the element.
fmapWithPos :: (Measured a, Measured b) => (Measure a -> a -> b) -> FingerTree a -> FingerTree b

-- | Like <a>fmap</a>, but safe only if the function preserves the measure.
unsafeFmap :: Measure a ~ Measure b => (a -> b) -> FingerTree a -> FingerTree b

-- | Like <tt>traverse</tt>, but with a more constrained type.
traverse' :: (Measured a, Measured b, Applicative f) => (a -> f b) -> FingerTree a -> f (FingerTree b)

-- | Traverse the tree with a function that also takes the measure of the
--   prefix of the tree to the left of the element.
traverseWithPos :: (Measured a, Measured b, Applicative f) => (Measure a -> a -> f b) -> FingerTree a -> f (FingerTree b)

-- | Like <tt>traverse</tt>, but safe only if the function preserves the
--   measure.
unsafeTraverse :: (Measure a ~ Measure b, Applicative f) => (a -> f b) -> FingerTree a -> f (FingerTree b)
instance (Eq a, Eq (s a)) => Eq (ViewL s a)
instance (Ord a, Ord (s a)) => Ord (ViewL s a)
instance (Show a, Show (s a)) => Show (ViewL s a)
instance (Read a, Read (s a)) => Read (ViewL s a)
instance (Eq a, Eq (s a)) => Eq (ViewR s a)
instance (Ord a, Ord (s a)) => Ord (ViewR s a)
instance (Show a, Show (s a)) => Show (ViewR s a)
instance (Read a, Read (s a)) => Read (ViewR s a)
instance Show a => Show (Digit a)
instance Show a => Show (FingerTree a)
instance Ord a => Ord (FingerTree a)
instance Eq a => Eq (FingerTree a)
instance Foldable FingerTree
instance Measured a => Measured (FingerTree a)
instance Measured a => Measured (Node a)
instance Foldable Node
instance Measured a => Measured (Digit a)
instance Foldable Digit
instance Measured a => Monoid (FingerTree a)
instance Functor s => Functor (ViewR s)
instance Functor s => Functor (ViewL s)
