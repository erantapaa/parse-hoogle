-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Zookeeper back-end for Cloud Haskell.
--   
@package distributed-process-zookeeper
@version 0.2.0.0


-- | Provides service and node discovery for Cloud Haskell applications
--   using a Zookeeper cluster for name registration, lookups and leader
--   election. Uses the hzk bindings to the Zookeeper multi-threaded C
--   library.
--   
--   Objectives and features:
--   
--   <ul>
--   <li>Compatible with <tt>distributed-process-p2p</tt> API - can work as
--   a drop-in replacement.</li>
--   <li>No dependencies beyond those already included by
--   distributed-process, hzk and network-transport-tcp.</li>
--   <li>Automatic registration of local names to Zookeeper.</li>
--   <li>Global singleton processes with leader election and re-elections
--   on leader exit.</li>
--   </ul>
module Control.Distributed.Process.Zookeeper

-- | Create a new Cloud Haskell node on the provided IP/Port and start a
--   Zookeeper-backed controller process (<a>zkController</a>) with a
--   default configuration connected to the provided Zookeeper server list.
--   Finally execute the supplied Process computation.
--   
--   <pre>
--   bootstrap = bootstrapWith defaultConfig
--   </pre>
bootstrap :: HostName -> ServiceName -> String -> RemoteTable -> Process () -> IO ()

-- | Create a new Cloud Haskell node on the provided IP/Port and start a
--   Zookeeper-backed controller process (<a>zkController</a>) connected to
--   the provided Zookeeper server list and finally execute the supplied
--   Process computation.
bootstrapWith :: Config -> HostName -> ServiceName -> String -> RemoteTable -> Process () -> IO ()

-- | Run a Zookeeper service process, and installs an MXAgent to
--   automatically register all local names in Zookeeper using
--   <a>defaultConfig</a>.
--   
--   <pre>
--   zkController = zkControllerWith defaultConfig
--   </pre>
zkController :: String -> Process ()

-- | As <a>zkController</a> but accept <a>Config</a> options rather than
--   assuming defaults.
zkControllerWith :: Config -> String -> Process ()

-- | Register a name and pid as a service in Zookeeper. The controller will
--   monitor the pid and remove its child node from Zookeeper when it
--   exits.
--   
--   Names will be registered at
--   "/distributed-process/services/&lt;name&gt;/&lt;pid&gt;"
--   
--   Note: By default all locally registered names (using <a>register</a>)
--   will be registered in Zookeeper under the same name by an MxAgent
--   process. Use this function if you want to register an anonymous pid or
--   use a different name than is registered with the local Process, or
--   when you are using a <a>registerPrefix</a> to exclude the automatic
--   registration (see <a>Config</a>).
registerZK :: String -> ProcessId -> Process (Either String ())

-- | Returns list of pids registered with the service name.
--   
--   Results are cached by the controller until they are invalidated by
--   subsequent changes to the service node in Zookeeper, which is
--   communicated through a <a>Watcher</a>. Data will be fetched from
--   Zookeeper only when it is changed and then requested again.
getCapable :: String -> Process [ProcessId]

-- | Broadcast a message to all pids registered with a particular service
--   name.
nsendCapable :: Serializable a => String -> a -> Process ()

-- | Register a candidate process for election of a single process
--   associated to the given global name, and returns the <a>ProcessId</a>
--   of the elected global (which may or may not be on the local node). The
--   <tt>Process ()</tt> argument is only evaluated if this node ends up
--   being the elected host for the global. Calling this function
--   subsequently on the same node for the same name will replace the
--   current candidate computation with the new one.
registerCandidate :: String -> Process () -> Process (Either String ProcessId)

-- | Find a registered global by name - see <a>registerCandidate</a>.
whereisGlobal :: String -> Process (Maybe ProcessId)

-- | Get a list of nodes advertised in Zookeeper. These are registered when
--   <a>zkController</a> starts in path
--   "/distributed-process/controllers/&lt;pid&gt;".
--   
--   Note: this is included for API compatibility with
--   <tt>distributed-process-p2p</tt> but its usage would suggest discovery
--   patterns that could be made more efficient when using Zookeeper - i.e.
--   just use <a>getCapable</a>.
getPeers :: Process [NodeId]

-- | Broadcast a message to a specific service on all registered nodes.
--   
--   Note: this is included for API compatibility with
--   <tt>distributed-process-p2p</tt> but its usage would suggest discovery
--   patterns that could be made more efficient when using Zookeeper - i.e.
--   just use <tt>nfSendCapable</tt> to nfSend a broadcast directly to the
--   registered process on each node.
nsendPeers :: Serializable a => String -> a -> Process ()
data Config
Config :: String -> (String -> Process ()) -> (String -> Process ()) -> ZLogLevel -> AclList -> Maybe (Scheme, ByteString) -> Config

-- | Only register locally registered process names with zookeeper if the
--   name begins with the given prefix. Default is "" which will register
--   every locally registered process in the Zookeeper services node.
registerPrefix :: Config -> String

-- | An operation that will be called for trace level logging.
--   <a>defaultConfig</a> uses <a>nolog</a>.
logTrace :: Config -> String -> Process ()

-- | An operation that will be called for error logging.
--   <a>defaultConfig</a> uses <a>say</a>.
logError :: Config -> String -> Process ()

-- | The log level for the C Zookeper library. <a>defaultConfig</a> uses
--   <a>ZLogWarn</a>.
zLogLevel :: Config -> ZLogLevel

-- | The ACL to use for every node - see hzk documentation for
--   <a>AclList</a>. Note that if your nodes do not connect with the same
--   identity, every node will need at least Read permission to all nodes
--   created by this package.
acl :: Config -> AclList

-- | Credentials for Zookeeper, see hzk <a>addAuth</a> for details.
credentials :: Config -> Maybe (Scheme, ByteString)

-- | By default all local names are registered with zookeeper, and only
--   error messages are logged through <a>say</a>.
--   
--   <pre>
--   defaultConfig = Config {
--         registerPrefix = ""
--       , logTrace = nolog
--       , logError = say . ("[C.D.P.Zookeeper: ERROR] - " ++)
--       , zLogLevel = ZK.ZLogWarn
--       , acl = OpenAclUnsafe
--       , credentials = Nothing
--       }
--   </pre>
defaultConfig :: Config

-- | A no-op that can be used for either of the loggers in <a>Config</a>.
--   Because no actual I/O is performed, it fully evaluates the message so
--   thunks do not build up.
nolog :: String -> Process ()

-- | Simple formatter for trace output through <a>say</a>.
sayTrace :: String -> Process ()

-- | Wait for zkController to startup and register iteself. This is only
--   useful if you are *not* using a <a>bootstrap</a> function to start
--   your node, but rather starting the node yourself and using one of the
--   <a>zkController</a> functions.
waitController :: Int -> Process (Maybe ())
instance Typeable Command
instance Typeable Elect
instance Show Command
instance Generic Command
instance Generic Elect
instance Datatype D1Command
instance Constructor C1_0Command
instance Constructor C1_1Command
instance Constructor C1_2Command
instance Constructor C1_3Command
instance Constructor C1_4Command
instance Constructor C1_5Command
instance Constructor C1_6Command
instance Datatype D1Elect
instance Constructor C1_0Elect
instance Show State
instance NFData Elect
instance Binary Elect
instance NFData Command
instance Binary Command
