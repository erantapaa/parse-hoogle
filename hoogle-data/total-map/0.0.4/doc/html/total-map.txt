-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Finitely represented /total/ maps
--   
--   Finitely represented <i>total</i> maps. Represented by as a partial
--   map and a default value. Has Applicative and Monad instances (unlike
--   Data.Map).
@package total-map
@version 0.0.4


-- | Finitely represented <i>total</i> maps. Represented by as a partial
--   map and a default value. Has Applicative and Monad instances (unlike
--   <a>Data.Map</a>).
module Data.TotalMap

-- | Total map
data TMap k v

-- | Sample a total map. Semantic function.
(!) :: Ord k => TMap k v -> k -> v

-- | Construct a total map, given a default value, a set of keys, and a
--   function to sample over that set. You might want to <a>trim</a> the
--   result.
tabulate :: Eq k => v -> Set k -> (k -> v) -> TMap k v

-- | Optimize a <a>TMap</a>, weeding out any explicit default values. A
--   semantic no-op, i.e., <tt>(!) . trim == (!)</tt>.
trim :: (Ord k, Eq v) => TMap k v -> TMap k v
instance Functor (TMap k)
instance Ord k => Monad (TMap k)
instance Ord k => Applicative (TMap k)
instance (Ord k, Monoid v) => Monoid (TMap k v)
