-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | FreeBSD ports index search and analysis tool
--   
--   Porte provides a simple, fast and efficient interface to searching
--   FreeBSD ports index fields. It also has a simple statistics mode which
--   allows collecting frequency statistics for these fields.
@package porte
@version 0.0.4

module Porte.Statistics
type FrequencyMap = Map ByteString Int
type FieldFrequency = (ByteString, Int)
mapFrequency :: [ByteString] -> FrequencyMap
printFrequency :: FieldFrequency -> IO ()

module Porte.Ports
type Name = ByteString
type DistributionName = ByteString
type Path = ByteString
type Prefix = ByteString
type Comment = ByteString
type DescriptionPath = ByteString
type PortDescription = Maybe ByteString
type Maintainer = ByteString
type Categories = [ByteString]
type ExtractDepends = [ByteString]
type PatchDepends = [ByteString]
type FetchDepends = [ByteString]
type BuildDepends = [ByteString]
type RunDepends = [ByteString]
type Website = ByteString
data Port
Port :: Name -> DistributionName -> Path -> Comment -> DescriptionPath -> Maintainer -> Categories -> BuildDepends -> Website -> ExtractDepends -> Port
name :: Port -> Name
distributionName :: Port -> DistributionName
path :: Port -> Path
comment :: Port -> Comment
descriptionPath :: Port -> DescriptionPath
maintainer :: Port -> Maintainer
categories :: Port -> Categories
buildDepends :: Port -> BuildDepends
website :: Port -> Website
extractDepends :: Port -> ExtractDepends
type PortField = Port -> ByteString
type PortQuery = [(PortField, String)]
toField :: String -> Maybe PortField
search :: PortQuery -> [Port] -> [Port]
find :: PortQuery -> [Port] -> [Port]
description :: Port -> IO (Maybe ByteString)
glue :: (Port -> [ByteString]) -> Port -> ByteString
parseEntry :: ByteString -> Port
parseIndex :: ByteString -> [Port]
index :: (Maybe String) -> IO [Port]
putPorts :: [PortField] -> [Port] -> IO ()
hPutPorts :: Handle -> [PortField] -> [Port] -> IO ()
putPort :: [PortField] -> Port -> IO ()
hPutPort :: Handle -> [PortField] -> Port -> IO ()
instance Eq Port
instance Show Port
instance Read Port

module Porte.Tool
toolMain :: IO ()
