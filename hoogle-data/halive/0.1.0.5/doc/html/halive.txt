-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A live recompiler
--   
@package halive
@version 0.1.0.5

module Halive.Concurrent

-- | Kill all threads registered to be killed. Meant to be called at the
--   beginning of your program to clean up threads from the last execution
--   before continuing
killThreads :: IO ()

-- | Register a thread to be killed when killThreads is called
registerThread :: ThreadId -> IO ()

-- | Fork a thread and register it to be killed when killThreads is called
forkIO' :: IO () -> IO ThreadId

-- | Fork an OS thread and register it to be killed when killThreads is
--   called
forkOS' :: IO () -> IO ThreadId

module Halive.Utils

-- | Takes a unique integer representing your value, along with an IO
--   action to create the first instance of your value to be used on
--   subsequent recompilations.
reacquire :: Word32 -> IO a -> IO a
