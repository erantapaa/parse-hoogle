-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Declarative user interface programming
--   
@package grapefruit-ui
@version 0.1.0.5


-- | This module provides general support for user interface components.
--   
--   A user interface component is either a user interface item or a user
--   interface circuit. UI items are introduced by
--   <a>Graphics.UI.Grapefruit.Item</a> and UI circuits by
--   <a>Graphics.UI.Grapefruit.Circuit</a>.
module Graphics.UI.Grapefruit.Comp

-- | The class of all user interface components.
--   
--   A user interface component is a part of a user interface which
--   communicates with the remainder of the user interface through signals.
class UIComp uiComp
(|>>) :: UIComp uiComp => Circuit era i tmp -> uiComp item uiBackend era tmp o -> uiComp item uiBackend era i o
(>>|) :: UIComp uiComp => uiComp item uiBackend era i tmp -> Circuit era tmp o -> uiComp item uiBackend era i o
loop :: UIComp uiComp => uiComp item uiBackend era (i, feedback) (o, feedback) -> uiComp item uiBackend era i o
toUICircuit :: UIComp uiComp => uiComp item uiBackend era i o -> UICircuit item uiBackend era i o
fromUIItem :: UIComp uiComp => UIItem item uiBackend era i o -> uiComp item uiBackend era i o

-- | Puts a circuit before a user interface component.
--   
--   This does not add any items to the user interface but may add data
--   manipulation and control functionality. <tt>(&lt;&lt;|)</tt> is
--   equivalent to <tt>flip (<a>|&gt;&gt;</a>)</tt>.
(<<|) :: UIComp uiComp => uiComp item uiBackend era tmp o -> Circuit era i tmp -> uiComp item uiBackend era i o

-- | Puts a circuit after a user interface component.
--   
--   This does not add any items to the user interface but may add data
--   manipulation and control functionality. <tt>(|&lt;&lt;)</tt> is
--   equivalent to <tt>flip (<a>&gt;&gt;|</a>)</tt>.
(|<<) :: UIComp uiComp => Circuit era tmp o -> uiComp item uiBackend era i tmp -> uiComp item uiBackend era i o


-- | This module defines the basic interface to all user interface
--   backends.
module Graphics.UI.Grapefruit.Backend

-- | The class of all user interface backends.
--   
--   A backend is represented by a type. This technique allows the class
--   system to be used to manage different implementations of the same
--   interface. <tt>UIBackend</tt> declares an interface to basic
--   functionality and is implemented by all user interface backends.
--   Subclasses of <tt>UIBackend</tt> extend the basic interface. A backend
--   can be an instance of only some of these subclasses when some
--   functionality is not yet implemented or cannot be provided by the
--   backend. Backend types are typically used as phantom parameters.
--   However, in some cases, an explicit value of a backend type is needed
--   as a function argument. Therefore, a backend is usually a single-value
--   type whose only value is named like the type.
--   
--   All associated types and methods of <tt>UIBackend</tt> are used
--   internally by Grapefruit and should not be used directly by the user.
class UIBackend uiBackend where type family WidgetPlacement uiBackend :: * type family WindowPlacement uiBackend :: *
initialize :: UIBackend uiBackend => uiBackend -> IO ()
handleEvents :: UIBackend uiBackend => uiBackend -> IO ()
requestQuitting :: UIBackend uiBackend => uiBackend -> IO ()
finalize :: UIBackend uiBackend => uiBackend -> IO ()
topLevel :: UIBackend uiBackend => uiBackend -> Placement Window uiBackend


-- | This module provides support for user interface items.
--   
--   UI items are the building blocks of user interfaces. Typical items are
--   widgets and windows. A UI item may contain another item or a UI
--   circuit which is a system of UI items. An example of the former case
--   is a window which contains a single widget. An example of the latter
--   case is a box widget which contains an arbitrary number of other
--   widgets.
module Graphics.UI.Grapefruit.Item

-- | The type of user interface items.
--   
--   The <tt>item</tt> parameter is a phantom parameter which denotes the
--   kind of the item. It should be an instance of <a>Item</a>.
data UIItem item uiBackend era i o

-- | Constructs an item using functionality of an underlying imperative
--   library.
--   
--   The <tt>nativeItem</tt> type variable represents an item type of the
--   underlying library.
item :: (nativeItem -> IO ()) -> (Placement item uiBackend -> IO nativeItem) -> Interfacing nativeItem era i o -> UIItem item uiBackend era i o

-- | A brick is an era-independent item with a comfortable record-based
--   interface.
--   
--   The parameter <tt>iOptRecord</tt> is an optionality record and
--   therefore specifies a set of required and a set of optional fields.
--   When the brick is used, the input fields can be given in any order and
--   optional fields can be left out. Similarily, <tt>oRecord</tt>
--   specifies a set of fields (without optionalities) of whom not all have
--   to be utilized by the user of the brick.
--   
--   A brick has additional input and output fields which are not
--   explicitely mentioned in its type. For an item kind
--   <tt><i>item</i></tt>, they are given by
--   <tt><a>CommonInputOptRecord</a> <i>item</i></tt> and
--   <tt><a>CommonOutputRecord</a> <i>item</i></tt>. Therefore, it is
--   possible to have inputs and outputs common for all bricks of a certain
--   item kind.
data Brick item uiBackend iOptRecord oRecord

-- | Constructs a brick.
brick :: (Item item, OptRecord iOptRecord, Record SignalKind (All iOptRecord), Record SignalKind oRecord) => ContextConsumerRecord nativeItem (All (CommonInputOptRecord item)) -> ContextProducerRecord nativeItem (CommonOutputRecord item) -> (nativeItem -> IO ()) -> (Placement item uiBackend -> IO nativeItem) -> ContextConsumerRecord nativeItem (All iOptRecord) -> ContextProducerRecord nativeItem oRecord -> Brick item uiBackend iOptRecord oRecord

-- | Converts a brick into an ordinary user interface component.
--   
--   The brick is first converted into a UI item which is then converted
--   into the resulting component by applying <a>fromUIItem</a>.
--   
--   The type of <tt>just</tt> states the following properties of the
--   resulting component:
--   
--   <ul>
--   <li>The input record covers only fields which are input fields
--   according to the type of the brick or are common input fields of all
--   items of the respective kind.<ul><li>The input record covers all input
--   fields which are marked as required.<ul><li>The output record covers
--   only fields which are output fields according to the type of the brick
--   or are common output fields of all items of the respective
--   kind.<ul><li>The order of fields is arbitrary.</li><li>The component
--   is not tied to a specific era.</li><li>All input and output signals
--   use the same era as the component.</li></ul></li></ul>Dropping certain
--   input or output fields results in the corresponding connectors not
--   being executed.To make the type variables <tt>extIRecord</tt> and
--   <tt>extORecord</tt> non-ambiguous, the lists of input and output field
--   names have to be known at the call site. For the output field names,
--   this is usually done via pattern matching.</li></ul></li>
--   </ul>
just :: (Record SignalKind extIRecord, Record SignalKind extORecord, Subrecord extIRecord (All iOptRecord `Cat` All (CommonInputOptRecord item)), Subrecord (Required iOptRecord `Cat` Required (CommonInputOptRecord item)) extIRecord, Subrecord extORecord (oRecord `Cat` CommonOutputRecord item), UIComp uiComp) => Brick item uiBackend iOptRecord oRecord -> uiComp item uiBackend era (SignalRecord era extIRecord) (SignalRecord era extORecord)

-- | A box is a container which can be transformed into an item by putting
--   a user interface component into it.
--   
--   The component which is put into a box is called the inner component of
--   that box. The parameters <tt>innerItem</tt> and <tt>item</tt> tell the
--   type of the inner component and the item kind, it is based on.
--   
--   The interface of an item made from a box is similar to that of an item
--   made from a brick. The only difference is that the interface of the
--   box item covers also the input and the output of the inner component.
data Box innerUIComp innerItem item uiBackend iOptRecord oRecord

-- | Constructs a box.
box :: (UIComp innerUIComp, Item item, OptRecord iOptRecord, Record SignalKind (All iOptRecord), Record SignalKind oRecord) => ContextConsumerRecord nativeItem (All (CommonInputOptRecord item)) -> ContextProducerRecord nativeItem (CommonOutputRecord item) -> (nativeItem -> IO ()) -> (Placement item uiBackend -> IO nativeItem) -> (nativeItem -> Placement innerItem uiBackend) -> ContextConsumerRecord nativeItem (All iOptRecord) -> ContextProducerRecord nativeItem oRecord -> Box innerUIComp innerItem item uiBackend iOptRecord oRecord

-- | Puts an inner component into a box and converts the result into an
--   ordinary user interface component.
--   
--   This function is very similar to <a>just</a>. In contrast to
--   <a>just</a>, it takes the inner component as an additional argument
--   and extends the input and output of the resulting component with the
--   input and output of the inner component. Note that the era of the
--   inner component equals the era of the resulting component.
--   
--   Applications of <tt>with</tt> are usually written infix.
with :: (Record SignalKind extIRecord, Record SignalKind extORecord, Subrecord extIRecord (All iOptRecord `Cat` All (CommonInputOptRecord item)), Subrecord (Required iOptRecord `Cat` Required (CommonInputOptRecord item)) extIRecord, Subrecord extORecord (oRecord `Cat` CommonOutputRecord item), UIComp uiComp) => Box innerUIComp innerItem item uiBackend iOptRecord oRecord -> innerUIComp innerItem uiBackend era innerI innerO -> uiComp item uiBackend era (SignalRecord era extIRecord `With` innerI) (SignalRecord era extORecord `With` innerO)

-- | An input or output, extended with the input or output of an inner
--   component.
data With base inner
With :: base -> inner -> With base inner

-- | The class of all kinds of items.
--   
--   Instances of this class serve as phantom parameters of <a>UIItem</a>,
--   <a>UICircuit</a> and others.
class (OptRecord (CommonInputOptRecord item), Record SignalKind (All (CommonInputOptRecord item)), Record SignalKind (CommonOutputRecord item)) => Item item where type family CommonInputOptRecord item :: * -> * type family CommonOutputRecord item :: * -> *

-- | The family of item placement types.
--   
--   A placement says where to place a user interface item, for example, to
--   place a widget in a certain box or a window at the top level.
--   <tt>Graphics.UI.Grapefruit.Item</tt> declares two instances of
--   <tt>Placement</tt>. <tt>Placement <a>Widget</a> <i>uiBackend</i></tt>
--   is equivalent to <tt><a>WidgetPlacement</a> <i>uiBackend</i></tt> and
--   <tt>Placement <a>Window</a> <i>uiBackend</i></tt> is equivalent to
--   <tt><a>WindowPlacement</a> <i>uiBackend</i></tt>.

-- | The widget item kind.
--   
--   A widget is an item which resides inside a window. Examples of widgets
--   are push buttons, labels and boxes (which contain other widgets
--   themselves).
data Widget

-- | The window item kind.
--   
--   A window is an item which resides directly on the desktop and
--   typically has a frame with a title and some control buttons. Examples
--   of windows are application windows and dialogs.
data Window

-- | A field name.
--   
--   Typical properties:
--   
--   <ul>
--   <li><i>kind</i> input (optional)<ul><li><i>type</i> <tt><a>SSignal</a>
--   `<a>Of</a>` Bool</tt><ul><li><i>meaning</i> whether a widget is
--   enabled or not</li></ul>Disabled widgets cannot receive user events
--   and are typically displayed in a different style</li></ul></li>
--   </ul>
data IsEnabled
IsEnabled :: IsEnabled


-- | This module is about creating interfaces of UI items.
module Graphics.UI.Grapefruit.Interfacing

-- | Describes communication of an item with its environment.
--   
--   An interfacing is a mapping from native items to circuits. These
--   circuits handle input consumption and output production.
data Interfacing nativeItem era i o

-- | Creates an interfacing based on signal connectors (consumers and
--   producers).
--   
--   The input and output are signal records. The only restriction to these
--   records is that their fields must have corresponding fields in the
--   connector records. The order of fields in the signal records may
--   differ from the order of connector fields and there may be connector
--   fields without a corresponding signal field. Connectors, for which no
--   signal field exists, are not performed.
basic :: (Record SignalKind extIShape, Record SignalKind extOShape, Subrecord extIShape iShape, Subrecord extOShape oShape) => ContextConsumerRecord nativeItem iShape -> ContextProducerRecord nativeItem oShape -> Interfacing nativeItem era (SignalRecord era extIShape) (SignalRecord era extOShape)

-- | Extends an interfacing so that the resulting interfacing also adds an
--   inner component to the UI item in question and extends the input and
--   output to contain the input and output of the inner component.
with :: UIComp uiComp => (nativeItem -> Placement innerItem uiBackend) -> uiComp innerItem uiBackend era innerI innerO -> Interfacing nativeItem era baseI baseO -> Interfacing nativeItem era (baseI `With` innerI) (baseO `With` innerO)

-- | An input or output, extended with the input or output of an inner
--   component.
data With base inner
With :: base -> inner -> With base inner


-- | This module provides support for user interface circuits.
--   
--   UI circuits are systems of UI items (for example, widgets). They are
--   similar to ordinary circuits as provided by FRP.Grapefruit.Circuit but
--   have the additional feature of providing parts of user interfaces.
module Graphics.UI.Grapefruit.Circuit

-- | The type of user interface circuits.
--   
--   The <tt>item</tt> parameter is a phantom parameter which says which
--   kind of items the circuit contains. It should be an instance of
--   <tt>Item</tt>.
data UICircuit item uiBackend era i o

-- | Converts an ordinary circuit into a user interface circuit that
--   contains no items.
fromCircuit :: Circuit era i o -> UICircuit item uiBackend era i o

-- | Runs a user interface circuit.
--   
--   <tt>run</tt> quits when the output signal of the circuit has a first
--   occurence. The universal quantification of the circuit’s era parameter
--   ensures that the circuit does not use signals which are produced
--   outside the circuit and therefore avoids era mismatches.
run :: UIBackend uiBackend => uiBackend -> (forall era. UICircuit Window uiBackend era i (DSignal era o)) -> i -> IO o


-- | This module declares a subclass of <a>UIBackend</a> with methods that
--   every reasonable UI backend should implement.
module Graphics.UI.Grapefruit.Backend.Basic

-- | A subclass of <a>UIBackend</a> which declares basic bricks and boxes.
class UIBackend uiBackend => BasicUIBackend uiBackend
label :: BasicUIBackend uiBackend => Brick Widget uiBackend (X :& (Req Text ::: (SSignal `Of` String))) X
pushButton :: BasicUIBackend uiBackend => Brick Widget uiBackend (X :& (Req Text ::: (SSignal `Of` String))) (X :& (Push ::: (DSignal `Of` ())))
lineEditor :: BasicUIBackend uiBackend => Brick Widget uiBackend X (X :& (Content ::: (SSignal `Of` String)))
box :: BasicUIBackend uiBackend => Orientation -> Box UICircuit Widget Widget uiBackend X X
window :: BasicUIBackend uiBackend => Box UIItem Widget Window uiBackend (X :& (Req Title ::: (SSignal `Of` String))) (X :& (Closure ::: (DSignal `Of` ())))

-- | An orientation of widgets in a box.
data Orientation
Horizontal :: Orientation
Vertical :: Orientation

-- | A caption of a widget with an optional hotkey marker.
--   
--   Currently, this type is not used.
data Caption

-- | a caption without a hotkey
ColdCaption :: String -> Caption

-- | a caption consisting of a prefix string, a hotkey and a suffix string
HotCaption :: String -> Char -> String -> Caption

-- | A field name.
--   
--   Typical properties:
--   
--   <ul>
--   <li><i>kind</i> output<ul><li><i>type</i> <tt><a>DSignal</a>
--   `<a>Of</a>` ()</tt><ul><li><i>meaning</i> a “window was closed”
--   event</li></ul></li></ul></li>
--   </ul>
data Closure
Closure :: Closure

-- | A field name.
--   
--   Typical properties:
--   
--   <ul>
--   <li><i>kind</i> output<ul><li><i>type</i> <tt><a>SSignal</a>
--   `<a>Of</a>` <i>val</i></tt> for some type
--   <tt><i>val</i></tt><ul><li><i>meaning</i> the content of an editor
--   widget</li></ul></li></ul></li>
--   </ul>
data Content
Content :: Content

-- | A field name.
--   
--   Typical properties:
--   
--   <ul>
--   <li><i>kind</i> output<ul><li><i>type</i> <tt><a>DSignal</a>
--   `<a>Of</a>` ()</tt><ul><li><i>meaning</i> a stream of button push
--   events</li></ul></li></ul></li>
--   </ul>
data Push
Push :: Push

-- | A field name.
--   
--   Typical properties:
--   
--   <ul>
--   <li><i>kind</i> input (required)<ul><li><i>type</i> <tt><a>SSignal</a>
--   `<a>Of</a>` String</tt><ul><li><i>meaning</i> the caption of a
--   widget</li></ul></li></ul></li>
--   </ul>
data Text
Text :: Text

-- | A field name.
--   
--   Typical properties:
--   
--   <ul>
--   <li><i>kind</i> input (required)<ul><li><i>type</i> <tt><a>SSignal</a>
--   `<a>Of</a>` String</tt><ul><li><i>meaning</i> the title of a
--   window</li></ul></li></ul></li>
--   </ul>
data Title
Title :: Title

module Graphics.UI.Grapefruit.Backend.Container
class BasicUIBackend uiBackend => ContainerUIBackend uiBackend where data family Cell uiBackend :: * -> *
listView :: ContainerUIBackend uiBackend => Brick Widget uiBackend (((X :& (Req Elements ::: (ISignal `Of` Seq el))) :& (Req Columns ::: (ISignal `Of` Seq (Column uiBackend el)))) :& (Opt HasScrollbars ::: (SSignal `Of` (Orientation -> Availability)))) (X :& (Selection ::: (SSignal `Of` Seq el)))
setView :: (ContainerUIBackend uiBackend, Ord el) => Brick Widget uiBackend (((X :& (Req Elements ::: (ISignal `Of` Set el))) :& (Req Columns ::: (ISignal `Of` Seq (Column uiBackend el)))) :& (Opt HasScrollbars ::: (SSignal `Of` (Orientation -> Availability)))) (X :& (Selection ::: (SSignal `Of` Set el)))
textCell :: ContainerUIBackend uiBackend => Cell uiBackend TextCellDisplay
progressCell :: ContainerUIBackend uiBackend => Cell uiBackend ProgressCellDisplay
data Column uiBackend el
Column :: String -> (el -> display) -> Cell uiBackend display -> Column uiBackend el
data TextCellDisplay
TextCellDisplay :: String -> (RGB Fraction) -> TextCellDisplay
data ProgressCellDisplay
ProgressCellDisplay :: Fraction -> (Maybe String) -> ProgressCellDisplay
data Availability
Never :: Availability
AsNecessary :: Availability
Always :: Availability
data Elements
Elements :: Elements
data Columns
Columns :: Columns
data HasScrollbars
HasScrollbars :: HasScrollbars
data Selection
Selection :: Selection
