-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Thread-safe resource pools. (deprecated)
--   
--   This package is deprecated. Users are recommended to switch over to
--   resource-pool and/or pool-conduit. Note: pool-conduit is built on top
--   of resource-pool.
@package pool
@version 0.1.2.1

module Data.Pool
data Pool a

-- | Create a new pool without any resource alive checking.
createPool :: (MonadBaseControl IO m, MonadIO m) => IO a -> (a -> IO ()) -> Int -> (Pool a -> m b) -> m b

-- | Create a new pool, including a function to check if a resource is
--   still alive. Stale resources will automatically be removed from the
--   pool.
createPoolCheckAlive :: (MonadBaseControl IO m, MonadIO m) => IO a -> (a -> IO ()) -> Int -> (Pool a -> m b) -> (a -> IO Bool) -> m b

-- | Attempt to run the given action with a resource from the given
--   <a>Pool</a>. Returns <a>Nothing</a> if no resource was available.
withPool :: (MonadIO m, MonadBaseControl IO m) => Pool a -> (a -> m b) -> m (Maybe b)

-- | This function throws a <a>PoolExhaustedException</a> when no resources
--   are available. See <a>withPoolAllocate</a> to avoid this.
withPool' :: (MonadBaseControl IO m, MonadIO m) => Pool a -> (a -> m b) -> m b

-- | Same as <tt>withPool'</tt>, but instead of throwing a
--   <a>PoolExhaustedException</a> when there the maximum number of
--   resources are created and allocated, it allocates a new resource,
--   passes it to the subprocess and then frees it.
withPoolAllocate :: (MonadIO m, MonadBaseControl IO m) => Pool a -> (a -> m b) -> m b
data PoolStats
PoolStats :: Int -> Int -> Int -> PoolStats
poolStatsMax :: PoolStats -> Int
poolStatsAvailable :: PoolStats -> Int
poolStatsCreated :: PoolStats -> Int
poolStats :: Pool a -> IO PoolStats
instance Typeable PoolExhaustedException
instance Show PoolExhaustedException
instance Exception PoolExhaustedException
