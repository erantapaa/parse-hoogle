-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generic markup builder.
--   
--   Module for assembling/emitting files in any XML-like language.
@package ascetic
@version 0.0.0.4


-- | Ascetic
--   
--   <pre>
--   Text/Ascetic.hs
--   </pre>
--   
--   Data structure, combinators, and functions for assembling data and
--   emitting files in any XML-like or HTML-like markup language
--   (consisting of tags, elements, attributes, declarations, and ASCII
--   text content). Trade-offs are made in favor of simplicity and
--   concision of constructors and combinators.
module Text.Ascetic

-- | Data type for simple markup trees and class for data types that can be
--   converted into it.
type Content = String
type Tag = String
type Attribute = String
type Value = String
data Ascetic
C :: Content -> Ascetic
E :: Tag -> [Ascetic] -> Ascetic
A :: Tag -> [(Attribute, Value)] -> [Ascetic] -> Ascetic
L :: [Ascetic] -> Ascetic
D :: Tag -> [(Attribute, Value)] -> Ascetic -> Ascetic

-- | Type class for data structures that can be converted into the Ascetic
--   representation.
class ToAscetic a
ascetic :: ToAscetic a => a -> Ascetic

-- | Conversion to ASCII string (with indentation for legibility).
ascii :: Ascetic -> Content

-- | Conversion to an ASCII string that has no extra indentation or
--   newlines for legibility.
minified :: Ascetic -> Content
instance Eq Ascetic
instance Show Ascetic


-- | Ascetic
--   
--   <pre>
--   Text/Ascetic/HTML.hs
--   </pre>
--   
--   Wrappers for building HTML file represented using the Ascetic data
--   structure.
module Text.Ascetic.HTML

-- | Data structures specific to HTML files.
type Class = String
type Selector = String
type PseudoClass = Maybe String
type Property = String
type Value = String
type DeclarationBlock = [(Property, Value)]
data CSS
CSS :: [([Selector], PseudoClass, DeclarationBlock)] -> CSS
type HTML = Ascetic
class ToHTML a
html :: ToHTML a => a -> HTML

-- | Combinators for assembling HTML files.
file :: HTML -> HTML -> HTML
head :: [HTML] -> HTML
meta_ :: [(Attribute, Value)] -> HTML
style :: CSS -> HTML
script :: String -> HTML
script_ :: [(Attribute, Value)] -> String -> HTML
body :: [HTML] -> HTML
div :: [HTML] -> HTML
div_ :: [(Attribute, Value)] -> [HTML] -> HTML
span :: [HTML] -> HTML
span_ :: [(Attribute, Value)] -> [HTML] -> HTML
content :: String -> HTML
td :: HTML -> HTML
tr :: [HTML] -> HTML
table :: [HTML] -> HTML
conc :: [HTML] -> HTML
bold :: HTML -> HTML
