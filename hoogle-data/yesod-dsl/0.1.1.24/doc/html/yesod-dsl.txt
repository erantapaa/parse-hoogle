-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | DSL for generating Yesod subsite to manage an RDBMS;
--   
@package yesod-dsl
@version 0.1.1.24

module YesodDsl.SyncFile
syncFile :: FilePath -> String -> IO ()

module YesodDsl.AST
data Module
Module :: Maybe String -> [Entity] -> [Class] -> [EnumType] -> [Route] -> [Import] -> Module
modName :: Module -> Maybe String
modEntities :: Module -> [Entity]
modClasses :: Module -> [Class]
modEnums :: Module -> [EnumType]
modRoutes :: Module -> [Route]
modImports :: Module -> [Import]
moduleName :: Module -> String
emptyModule :: Module
data Import
Import :: String -> [FunctionName] -> Import
importModule :: Import -> String
importFunctions :: Import -> [FunctionName]
type ClassName = String
type ParamName = String
type EntityName = String
type EnumName = String
type EnumValue = String
type FunctionName = String
type FieldName = String
data FieldType
FTWord32 :: FieldType
FTWord64 :: FieldType
FTInt :: FieldType
FTInt32 :: FieldType
FTInt64 :: FieldType
FTText :: FieldType
FTBool :: FieldType
FTDouble :: FieldType
FTTimeOfDay :: FieldType
FTDay :: FieldType
FTUTCTime :: FieldType
FTCheckmark :: FieldType
FTZonedTime :: FieldType
type RowNum = Int
type ColNum = Int
data Location
Loc :: FilePath -> RowNum -> ColNum -> Location
data Unique
Unique :: String -> [FieldName] -> Unique
uniqueName :: Unique -> String
uniqueFields :: Unique -> [FieldName]
data HandlerType
GetHandler :: HandlerType
PutHandler :: HandlerType
PostHandler :: HandlerType
DeleteHandler :: HandlerType
type VariableName = String
data JoinType
InnerJoin :: JoinType
CrossJoin :: JoinType
LeftOuterJoin :: JoinType
RightOuterJoin :: JoinType
FullOuterJoin :: JoinType
isOuterJoin :: JoinType -> Bool
data BinOp
Eq :: BinOp
Ne :: BinOp
Lt :: BinOp
Gt :: BinOp
Le :: BinOp
Ge :: BinOp
Like :: BinOp
Ilike :: BinOp
Is :: BinOp
In :: BinOp
NotIn :: BinOp
data ValBinOp
Add :: ValBinOp
Sub :: ValBinOp
Div :: ValBinOp
Mul :: ValBinOp
Concat :: ValBinOp
data BoolExpr
AndExpr :: BoolExpr -> BoolExpr -> BoolExpr
OrExpr :: BoolExpr -> BoolExpr -> BoolExpr
NotExpr :: BoolExpr -> BoolExpr
BinOpExpr :: ValExpr -> BinOp -> ValExpr -> BoolExpr
ExistsExpr :: SelectQuery -> BoolExpr
ExternExpr :: FunctionName -> [FunctionParam] -> BoolExpr
data FunctionParam
FieldRefParam :: FieldRef -> FunctionParam
VerbatimParam :: String -> FunctionParam
type MaybeLevel = Int
data ValExpr
FieldExpr :: FieldRef -> ValExpr
ConcatManyExpr :: [ValExpr] -> ValExpr
ValBinOpExpr :: ValExpr -> ValBinOp -> ValExpr -> ValExpr
RandomExpr :: ValExpr
FloorExpr :: ValExpr -> ValExpr
CeilingExpr :: ValExpr -> ValExpr
ExtractExpr :: FieldName -> ValExpr -> ValExpr
SubQueryExpr :: SelectQuery -> ValExpr
type EntityRef = Either EntityName Entity
entityRefName :: EntityRef -> EntityName
data Stmt
Public :: Stmt
ParamDefault :: ParamName -> FieldValue -> Stmt
DefaultFilterSort :: Stmt
Select :: SelectQuery -> Stmt
IfFilter :: IfFilterParams -> Stmt
DeleteFrom :: EntityRef -> VariableName -> (Maybe BoolExpr) -> Stmt
GetById :: EntityRef -> FieldRef -> VariableName -> Stmt
Update :: EntityRef -> FieldRef -> (Maybe [FieldRefMapping]) -> Stmt
Insert :: EntityRef -> (Maybe (Maybe VariableName, [FieldRefMapping])) -> (Maybe VariableName) -> Stmt
Return :: [FieldRefMapping] -> Stmt
Require :: SelectQuery -> Stmt
For :: VariableName -> FieldRef -> [Stmt] -> Stmt
Call :: FunctionName -> [FieldRef] -> Stmt
type UseParamFlag = Bool
type IfFilterParams = (ParamName, [Join], BoolExpr, UseParamFlag)
data SelectQuery
SelectQuery :: [SelectField] -> (EntityRef, VariableName) -> [Join] -> Maybe BoolExpr -> [(FieldRef, SortDir)] -> (Int, Int) -> SelectQuery
sqFields :: SelectQuery -> [SelectField]
sqFrom :: SelectQuery -> (EntityRef, VariableName)
sqJoins :: SelectQuery -> [Join]
sqWhere :: SelectQuery -> Maybe BoolExpr
sqOrderBy :: SelectQuery -> [(FieldRef, SortDir)]
sqLimitOffset :: SelectQuery -> (Int, Int)
type MaybeFlag = Bool
sqAliases :: SelectQuery -> Map VariableName (Entity, MaybeFlag)
data SelectField
SelectAllFields :: VariableRef -> SelectField
SelectField :: VariableRef -> FieldName -> (Maybe VariableName) -> SelectField
SelectIdField :: VariableRef -> (Maybe VariableName) -> SelectField
SelectValExpr :: ValExpr -> VariableName -> SelectField
data Join
Join :: JoinType -> EntityRef -> VariableName -> Maybe BoolExpr -> Join
joinType :: Join -> JoinType
joinEntity :: Join -> EntityRef
joinAlias :: Join -> VariableName
joinExpr :: Join -> Maybe BoolExpr
type FieldRefMapping = (ParamName, FieldRef, Maybe FunctionName)
data CheckmarkValue
Active :: CheckmarkValue
Inactive :: CheckmarkValue
data SortDir
SortAsc :: SortDir
SortDesc :: SortDir
data Handler
Handler :: Location -> HandlerType -> [Stmt] -> Handler
handlerLoc :: Handler -> Location
handlerType :: Handler -> HandlerType
handlerStmts :: Handler -> [Stmt]
data Entity
Entity :: Location -> String -> [ClassName] -> [Field] -> [Field] -> [Unique] -> [ClassName] -> [FunctionName] -> Entity
entityLoc :: Entity -> Location
entityName :: Entity -> String
entityInstances :: Entity -> [ClassName]
entityFields :: Entity -> [Field]
entityClassFields :: Entity -> [Field]
entityUniques :: Entity -> [Unique]
entityDeriving :: Entity -> [ClassName]
entityChecks :: Entity -> [FunctionName]
data Route
Route :: Location -> [PathPiece] -> [Handler] -> Route
routeLoc :: Route -> Location
routePath :: Route -> [PathPiece]
routeHandlers :: Route -> [Handler]
routePathParams :: Route -> [PathPiece]
isPathParam :: PathPiece -> Bool
handlerName :: Route -> Handler -> String
routeName :: [PathPiece] -> String
data PathPiece
PathText :: String -> PathPiece
PathId :: Location -> EntityName -> PathPiece
data FieldRef
SqlId :: VariableRef -> FieldRef
SqlField :: VariableRef -> FieldName -> FieldRef
AuthId :: FieldRef
AuthField :: FieldName -> FieldRef
LocalParam :: FieldRef
LocalParamField :: VariableRef -> FieldName -> FieldRef
EnumValueRef :: EnumName -> FieldName -> FieldRef
PathParam :: Int -> FieldRef
RequestField :: FieldName -> FieldRef
NamedLocalParam :: VariableName -> FieldRef
Const :: FieldValue -> FieldRef
Now :: FieldRef
data VariableRef
Var :: VariableName -> EntityRef -> MaybeFlag -> VariableRef
entityFieldByName :: Entity -> FieldName -> Field
data EnumType
EnumType :: Location -> String -> [String] -> EnumType
enumLoc :: EnumType -> Location
enumName :: EnumType -> String
enumValues :: EnumType -> [String]
data Class
Class :: Location -> String -> [Field] -> [Unique] -> Class
classLoc :: Class -> Location
className :: Class -> String
classFields :: Class -> [Field]
classUniques :: Class -> [Unique]
type DefaultValue = String
type IsListFlag = Bool
data FieldContent
NormalField :: FieldType -> [FieldOption] -> FieldContent
EntityField :: EntityName -> FieldContent
EnumField :: EnumName -> (Maybe EnumValue) -> FieldContent
data Field
Field :: Location -> Bool -> Bool -> FieldName -> FieldContent -> Maybe (ClassName, FieldName) -> Field
fieldLoc :: Field -> Location
fieldOptional :: Field -> Bool
fieldInternal :: Field -> Bool
fieldName :: Field -> FieldName
fieldContent :: Field -> FieldContent
fieldClassName :: Field -> Maybe (ClassName, FieldName)
data FieldOption
FieldCheck :: FunctionName -> FieldOption
FieldDefault :: FieldValue -> FieldOption
data FieldValue
StringValue :: String -> FieldValue
IntValue :: Int -> FieldValue
FloatValue :: Double -> FieldValue
BoolValue :: Bool -> FieldValue
NothingValue :: FieldValue
CheckmarkValue :: CheckmarkValue -> FieldValue
EnumFieldValue :: EnumName -> EnumValue -> FieldValue
EmptyList :: FieldValue
fieldValueToSql :: FieldValue -> String
fieldValueToEsqueleto :: FieldValue -> String
fieldValueToHs :: FieldValue -> String
fieldOptions :: Field -> [FieldOption]
fieldDefault :: Field -> Maybe FieldValue
fieldChecks :: Field -> [FunctionName]
lookupField :: Entity -> FieldName -> Maybe Field
lowerFirst :: String -> String
upperFirst :: String -> String
instance Typeable Import
instance Typeable FieldType
instance Typeable Location
instance Typeable Unique
instance Typeable HandlerType
instance Typeable JoinType
instance Typeable BinOp
instance Typeable ValBinOp
instance Typeable CheckmarkValue
instance Typeable SortDir
instance Typeable PathPiece
instance Typeable EnumType
instance Typeable FieldValue
instance Typeable FieldOption
instance Typeable FieldContent
instance Typeable Field
instance Typeable Class
instance Typeable Entity
instance Typeable VariableRef
instance Typeable FieldRef
instance Typeable FunctionParam
instance Typeable BoolExpr
instance Typeable SelectQuery
instance Typeable Join
instance Typeable SelectField
instance Typeable ValExpr
instance Typeable Stmt
instance Typeable Handler
instance Typeable Route
instance Typeable Module
instance Show Import
instance Data Import
instance Eq FieldType
instance Show FieldType
instance Data FieldType
instance Eq Location
instance Data Location
instance Show Unique
instance Eq Unique
instance Data Unique
instance Eq HandlerType
instance Data HandlerType
instance Show JoinType
instance Eq JoinType
instance Data JoinType
instance Show BinOp
instance Eq BinOp
instance Data BinOp
instance Show ValBinOp
instance Eq ValBinOp
instance Data ValBinOp
instance Show CheckmarkValue
instance Eq CheckmarkValue
instance Ord CheckmarkValue
instance Data CheckmarkValue
instance Show SortDir
instance Eq SortDir
instance Data SortDir
instance Eq PathPiece
instance Data PathPiece
instance Show EnumType
instance Eq EnumType
instance Data EnumType
instance Show FieldValue
instance Eq FieldValue
instance Ord FieldValue
instance Data FieldValue
instance Show FieldOption
instance Eq FieldOption
instance Data FieldOption
instance Show FieldContent
instance Eq FieldContent
instance Data FieldContent
instance Show Field
instance Eq Field
instance Data Field
instance Show Class
instance Eq Class
instance Data Class
instance Show Entity
instance Eq Entity
instance Data Entity
instance Show VariableRef
instance Eq VariableRef
instance Data VariableRef
instance Show FieldRef
instance Eq FieldRef
instance Data FieldRef
instance Show FunctionParam
instance Eq FunctionParam
instance Data FunctionParam
instance Show BoolExpr
instance Eq BoolExpr
instance Data BoolExpr
instance Show SelectQuery
instance Eq SelectQuery
instance Data SelectQuery
instance Show Join
instance Eq Join
instance Data Join
instance Show SelectField
instance Eq SelectField
instance Data SelectField
instance Show ValExpr
instance Eq ValExpr
instance Data ValExpr
instance Show Stmt
instance Eq Stmt
instance Data Stmt
instance Show Handler
instance Eq Handler
instance Data Handler
instance Show Route
instance Eq Route
instance Data Route
instance Show Module
instance Data Module
instance Show PathPiece
instance Show HandlerType
instance Show Location

module YesodDsl.ModuleMerger
mergeModules :: [(FilePath, Module)] -> Module

module YesodDsl.ClassImplementer
implementClasses :: Module -> Module

module YesodDsl.Simplify
simplify :: Module -> Module

module YesodDsl.Generator.Routes
routeModuleName :: Route -> String
hsRouteName :: [PathPiece] -> String
hsRouteType :: [PathPiece] -> String
hsRoutePath :: Route -> String
routes :: Module -> String

module YesodDsl.Generator.Cabal
syncCabal :: FilePath -> Module -> IO ()

module YesodDsl.Generator.Common
brackets :: Bool -> String -> String
maybeHsJust :: Bool -> String -> String
makeJust :: Int -> String -> String
quote :: String -> String
indent :: Int -> String -> String
entityFieldName :: Entity -> Field -> String
resultMapper :: Maybe FunctionName -> String

module YesodDsl.Generator.Models
boolToMaybe :: Bool -> String
hsFieldType :: Field -> String
fieldTypeToHsType :: FieldType -> String
baseFieldType :: Field -> String
persistFieldType :: Field -> String
entityFieldTypeName :: Entity -> Field -> String
enum :: EnumType -> String
modelField :: Field -> String
modelUnique :: Unique -> String
modelDeriving :: String -> String
model :: Entity -> String
models :: Module -> String

module YesodDsl.Generator.EntityFactories
entityFactory :: Entity -> String
entityFactories :: Module -> String

module YesodDsl.Generator.Classes
classFieldName :: Class -> Field -> String
classDefField :: Class -> Field -> String
classFieldTypeName :: Class -> Field -> String
classFieldType :: Class -> [Field] -> String
classInstanceField :: Class -> Entity -> Field -> String
classInstance :: Class -> Entity -> String
classEntityInstanceField :: Class -> [Entity] -> Field -> String
classEntityInstances :: Class -> [Entity] -> String
classSelectFilterDataType :: Class -> String
classSelect :: Class -> [Entity] -> String
classUpdate :: Class -> [Entity] -> String
instancesOf :: Module -> Class -> [Entity]
classInstances :: Module -> Class -> String
entityClassFieldWrappers :: Module -> Entity -> String
classes :: Module -> String

module YesodDsl.Generator.Validation
validationFieldCheck :: Entity -> Field -> FunctionName -> String
validationEntityCheck :: Entity -> FunctionName -> String
validationEntity :: Entity -> String

module YesodDsl.Generator.Input
inputFieldRef :: FieldRef -> String
getJsonAttrs :: Stmt -> [FieldName]
getParamDefaults :: [Stmt] -> Map ParamName FieldValue

module YesodDsl.Generator.Json
moduleToJson :: Module -> String

module YesodDsl.Generator.Esqueleto
hsBinOp :: BinOp -> String
type TypeName = String
data Context
Context :: Map VariableName (Entity, MaybeFlag) -> Maybe String -> Bool -> Context
ctxNames :: Context -> Map VariableName (Entity, MaybeFlag)
ctxExprType :: Context -> Maybe String
ctxExprListValue :: Context -> Bool
emptyContext :: Context
boolToInt :: Bool -> Int
annotateType :: Bool -> Maybe String -> String -> String
projectField :: MaybeFlag -> String
extractSubField :: FieldName -> String
valueOrValueList :: Bool -> Int -> String
normalFieldRef :: MaybeLevel -> String -> Reader Context String
hsFieldRef :: MaybeLevel -> FieldRef -> Reader Context String
hsOrderBy :: (FieldRef, SortDir) -> Reader Context String
hsValBinOp :: ValBinOp -> String
hsValExpr :: MaybeLevel -> ValExpr -> Reader Context String
fieldRefMaybeLevel :: FieldRef -> Int
exprMaybeLevel :: ValExpr -> Int
exprReturnType :: ValExpr -> Maybe String
mapJoinExpr :: Join -> Reader Context String
selectFieldExprs :: SelectField -> [ValExpr]
selectReturnFields :: SelectQuery -> Reader Context String
joinDef :: Join -> String
subQuery :: String -> SelectQuery -> Reader Context String
withScope :: Map VariableName (Entity, MaybeFlag) -> Reader Context a -> Reader Context a
scopedBoolExpr :: Map VariableName (Entity, MaybeFlag) -> BoolExpr -> String
hsBoolExpr :: BoolExpr -> Reader Context String

module YesodDsl.Generator.EsqueletoInstances
esqueletoInstances :: Module -> String

module YesodDsl.Generator.Require
requireStmts :: [Stmt] -> String

module YesodDsl.Generator.GetHandler
getStmt :: Stmt -> String
ctxFields :: SelectQuery -> Reader Context [(Entity, VariableName, Field, VariableName, MaybeFlag)]
defaultFilterField :: (Entity, VariableName, Field, VariableName, MaybeFlag) -> Reader Context String
defaultFilterFields :: SelectQuery -> Reader Context String
defaultSortField :: (Entity, VariableName, Field, ParamName, MaybeFlag) -> Reader Context String
defaultSortFields :: SelectQuery -> Reader Context String
implicitJoinExpr :: Join -> Reader Context String
baseIfFilter :: IfFilterParams -> Reader Context String
getHandlerSelect :: [Stmt] -> String
getHandlerReturn :: SelectQuery -> String
getHandlerMaybeAuth :: [Stmt] -> String
callStmts :: [Stmt] -> String
getHandlerReadRequestFields :: [Stmt] -> String
getHandler :: [Stmt] -> String

module YesodDsl.Generator.UpdateHandlers
updateHandlerRunDB :: (Int, Stmt) -> String
defaultFieldValue :: Field -> String
mapJsonInputField :: [FieldRefMapping] -> Bool -> (Entity, Field) -> Maybe String
matchInputField :: [FieldRefMapping] -> FieldName -> Maybe (FieldRef, Maybe FunctionName)
prepareJsonInputField :: (FieldName, Maybe FieldValue) -> String
updateHandlerDecode :: (Int, Stmt) -> String
updateHandlerReadJsonFields :: [Stmt] -> String
updateHandlerMaybeCurrentTime :: [Stmt] -> String
updateHandlerMaybeAuth :: [Stmt] -> String
updateHandlerReturnRunDB :: [Stmt] -> String
updateHandler :: [Stmt] -> String

module YesodDsl.Generator.Handlers
hsRouteParams :: [PathPiece] -> String
hsHandlerMethod :: HandlerType -> String
handler :: Module -> Route -> Handler -> String

module YesodDsl.Generator
generate :: FilePath -> Module -> IO ()
hsRouteName :: [PathPiece] -> String
genJson :: FilePath -> Module -> IO ()

module YesodDsl.Lexer
lexer :: String -> [Token]
tokenType :: Token -> TokenType
tokenLineNum :: Token -> Int
tokenColNum :: Token -> Int
data Token
Tk :: AlexPosn -> TokenType -> Token
data TokenType
TSemicolon :: TokenType
TLBrace :: TokenType
TRBrace :: TokenType
TLParen :: TokenType
TRParen :: TokenType
TLBracket :: TokenType
TRBracket :: TokenType
TEquals :: TokenType
TNe :: TokenType
TLt :: TokenType
TGt :: TokenType
TLe :: TokenType
TGe :: TokenType
TLike :: TokenType
TIlike :: TokenType
TPipe :: TokenType
TComma :: TokenType
TDot :: TokenType
TImport :: TokenType
TEnum :: TokenType
TModule :: TokenType
TEntity :: TokenType
TUnique :: TokenType
TClass :: TokenType
TRoute :: TokenType
THash :: TokenType
TIn :: TokenType
TLimit :: TokenType
TOffset :: TokenType
TString :: String -> TokenType
TVerbatim :: String -> TokenType
TLowerId :: String -> TokenType
TUpperId :: String -> TokenType
TInt :: Int -> TokenType
TFloat :: Double -> TokenType
TConcatOp :: TokenType
TSlash :: TokenType
TOrder :: TokenType
TIdentified :: TokenType
TUpdate :: TokenType
TInsert :: TokenType
TWith :: TokenType
TBy :: TokenType
TAsc :: TokenType
TDesc :: TokenType
TCheck :: TokenType
TWord32 :: TokenType
TWord64 :: TokenType
TInt32 :: TokenType
TIntType :: TokenType
TInt64 :: TokenType
TText :: TokenType
TBool :: TokenType
TDouble :: TokenType
TMaybe :: TokenType
TTimeOfDay :: TokenType
TDay :: TokenType
TUTCTime :: TokenType
TZonedTime :: TokenType
TJoin :: TokenType
TLeft :: TokenType
TRight :: TokenType
TInner :: TokenType
TOuter :: TokenType
TFull :: TokenType
TCross :: TokenType
TOn :: TokenType
TGet :: TokenType
TPut :: TokenType
TPost :: TokenType
TInstance :: TokenType
TOf :: TokenType
TDelete :: TokenType
TPublic :: TokenType
TSelect :: TokenType
TFrom :: TokenType
TAnd :: TokenType
TOr :: TokenType
TBeforeHandler :: TokenType
TAfterHandler :: TokenType
TDefaultFilterSort :: TokenType
TId :: TokenType
TNot :: TokenType
TIf :: TokenType
TThen :: TokenType
TAsterisk :: TokenType
TPlus :: TokenType
TMinus :: TokenType
TParam :: TokenType
TWhere :: TokenType
TAs :: TokenType
TIs :: TokenType
TDeriving :: TokenType
TDefault :: TokenType
TPathParam :: Int -> TokenType
TEntityId :: String -> TokenType
TLocalParam :: TokenType
TTrue :: TokenType
TFalse :: TokenType
TNothing :: TokenType
TRequest :: TokenType
TLArrow :: TokenType
TNow :: TokenType
TAuth :: TokenType
TReturn :: TokenType
TInternal :: TokenType
TRequire :: TokenType
TUnderScore :: TokenType
TFor :: TokenType
TExtract :: TokenType
TConcat :: TokenType
TRandom :: TokenType
TFloor :: TokenType
TCeiling :: TokenType
TExists :: TokenType
TCheckmark :: TokenType
TCheckmarkActive :: TokenType
TCheckmarkInactive :: TokenType
tkString :: Token -> String
tkInt :: Token -> Int
instance Eq AlexPosn
instance Show AlexPosn
instance Show TokenType
instance Show Token
instance Functor AlexLastAcc

module YesodDsl.ParserState
type ParserMonad = StateT ParserState IO
initParserState :: ParserState
getParserState :: ParserMonad ParserState
getPath :: ParserMonad FilePath
getParsed :: ParserMonad [FilePath]
setParserState :: ParserState -> ParserMonad ()
runParser :: FilePath -> ParserState -> ParserMonad a -> IO (a, ParserState)
pushScope :: ParserMonad ()
popScope :: ParserMonad ()
declare :: Location -> String -> SymType -> ParserMonad ()
declareGlobal :: Location -> String -> SymType -> ParserMonad ()
data SymType
SEnum :: EnumType -> SymType
SClass :: Class -> SymType
SEntity :: EntityName -> SymType
SEntityResult :: EntityName -> SymType
SEntityId :: EntityName -> SymType
SField :: Field -> SymType
SFieldType :: FieldType -> SymType
SUnique :: Unique -> SymType
SRoute :: Route -> SymType
SHandler :: Handler -> SymType
SParam :: SymType
SForParam :: FieldRef -> SymType
SReserved :: SymType
SFunction :: SymType
data ParserState
mkLoc :: Token -> ParserMonad Location
parseErrorCount :: ParserState -> Int
withSymbol :: Location -> String -> (Location -> Location -> SymType -> ParserMonad ()) -> ParserMonad ()
withGlobalSymbol :: Location -> String -> (Location -> Location -> SymType -> ParserMonad ()) -> ParserMonad ()
withSymbolNow :: a -> Location -> String -> (Location -> Location -> SymType -> ParserMonad a) -> ParserMonad a
pError :: Location -> String -> ParserMonad ()
hasReserved :: String -> ParserMonad Bool
getEntitySymbol :: Location -> Location -> SymType -> ParserMonad (Maybe EntityName)
symbolMatches :: String -> (SymType -> Bool) -> ParserMonad Bool
requireClass :: (Class -> ParserMonad ()) -> (Location -> Location -> SymType -> ParserMonad ())
requireEntity :: (Entity -> ParserMonad ()) -> (Location -> Location -> SymType -> ParserMonad ())
requireEntityResult :: (Entity -> ParserMonad ()) -> (Location -> Location -> SymType -> ParserMonad ())
requireEntityOrClass :: Location -> Location -> SymType -> ParserMonad ()
requireEntityId :: (EntityName -> ParserMonad (Maybe a)) -> (Location -> Location -> SymType -> ParserMonad (Maybe a))
requireEntityField :: Location -> FieldName -> ((Entity, Field) -> ParserMonad ()) -> (Location -> Location -> SymType -> ParserMonad ())
requireEntityFieldSelectedOrResult :: Location -> FieldName -> (Location -> Location -> SymType -> ParserMonad ())
requireField :: (Field -> ParserMonad ()) -> (Location -> Location -> SymType -> ParserMonad ())
requireEnum :: Location -> Location -> SymType -> ParserMonad ()
requireEnumValue :: Location -> EnumValue -> (Location -> Location -> SymType -> ParserMonad ())
requireParam :: Location -> Location -> SymType -> ParserMonad ()
requireFunction :: Location -> Location -> SymType -> ParserMonad ()
setCurrentHandlerType :: HandlerType -> ParserMonad ()
getCurrentHandlerType :: ParserMonad (Maybe HandlerType)
requireHandlerType :: Location -> String -> (HandlerType -> Bool) -> ParserMonad ()
validateExtractField :: Location -> String -> ParserMonad ()
validateInsert :: Location -> Entity -> Maybe (Maybe VariableName, [FieldRefMapping]) -> ParserMonad ()
beginHandler :: ParserMonad ()
statement :: Location -> String -> ParserMonad ()
lastStatement :: Location -> String -> ParserMonad ()
postValidation :: Module -> ParserState -> IO Int
instance Show Sym
instance Show ParserState
instance Show (Entity -> ParserMonad ())
instance Show (Syms -> ParserMonad ())
instance Show SymType

module YesodDsl.Parser
parse :: FilePath -> IO (Maybe Module)
instance Typeable ParseError
instance Show ModDef
instance Eq FieldFlag
instance Show ParseError
instance Exception ParseError
