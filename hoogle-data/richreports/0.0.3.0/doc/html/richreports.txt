-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Integrated pretty-printing and error/static analysis reporting.
--   
--   Integrated pretty-printing and error/static analysis reporting.
@package richreports
@version 0.0.3.0


-- | RichReports
--   
--   <pre>
--   Text/RichReports.hs
--   </pre>
--   
--   A library that supports the manual and automated assembly of modules
--   for building interactive HTML reports consisting of abstract syntax
--   trees as concrete syntax annotated with the results of static analysis
--   and abstract interpretation algorithms.
--   
--   Web: richreports.org Version: 0.0.3.0
module Text.RichReports

-- | Rich report data structure definitions.
type Message = Report
data Highlight
HighlightUnbound :: Highlight
HighlightUnreachable :: Highlight
HighlightDuplicate :: Highlight
HighlightError :: Highlight
Highlight :: [Class] -> Highlight
data Entity
Lt :: Entity
Gt :: Entity
Space :: Entity
Ampersand :: Entity
data Report
Entity :: Entity -> Report
Text :: String -> Report
Symbol :: String -> Report
Punctuation :: String -> Report
Keyword :: String -> Report
Literal :: String -> Report
Konstant :: String -> Report
Operator :: String -> Report
Builtin :: String -> Report
Library :: String -> Report
Variable :: String -> Report
Error :: String -> Report
Atom :: [Highlight] -> [Message] -> [Report] -> Report
Span :: [Highlight] -> [Message] -> [Report] -> Report
Line :: [Report] -> Report
Block :: [Highlight] -> [Message] -> [Report] -> Report
Concat :: [Report] -> Report
Intersperse :: Report -> [Report] -> Report
Field :: [Report] -> Report
Row :: [Report] -> Report
Table :: [Report] -> Report
Page :: Report -> Report

-- | Rich report class declaration (typically, abstract syntax data
--   structures would be members).
class ToReport a
report :: ToReport a => a -> Report

-- | Rich report highlight and message class declaration (typically, static
--   analysis results data structures would be members).
class ToHighlights a
highlights :: ToHighlights a => a -> [Highlight]
class ToMessages a
messages :: ToMessages a => a -> [Message]

-- | Generation of an interactive HTML version of the report.
highlightsStr :: [Highlight] -> [Class]
highlightStr :: Highlight -> [Class]
entityStr :: Entity -> String
messagesToAttr :: [Message] -> (Property, Value)
instance Eq Highlight
instance Show Highlight
instance Eq Entity
instance Show Entity
instance Show Report
instance Eq Report
instance ToHTML Report
instance ToReport a => ToReport (Maybe a)
instance ToReport a => ToReport [a]
