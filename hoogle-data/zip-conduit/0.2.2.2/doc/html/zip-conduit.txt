-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Working with zip archives via conduits.
--   
--   Working with zip archives via conduits.
@package zip-conduit
@version 0.2.2.2


-- | Sink entries to the archive:
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings #-}
--   
--   import qualified Data.Conduit.Binary as CB
--   import           Codec.Archive.Zip
--   
--   
--   main = do
--       withArchive "some.zip" $ do
--           sinkEntry "first"  $ CB.sourceLbs "hello"
--           sinkEntry "second" $ CB.sourceLbs "world"
--   </pre>
--   
--   Source first entry from the archive:
--   
--   <pre>
--   import           System.Environment (getArgs)
--   import qualified Data.Conduit.Binary as CB
--   import           Codec.Archive.Zip
--   
--   main = do
--       archivePath:_ &lt;- getArgs
--       withArchive archivePath $ do
--           name:_ &lt;- entryNames
--           sourceEntry name $ CB.sinkFile name
--   </pre>
--   
--   List entries in the archive:
--   
--   <pre>
--   import System.Environment (getArgs)
--   import Codec.Archive.Zip
--   
--   main = do
--       archivePath:_ &lt;- getArgs
--       names &lt;- withArchive archivePath entryNames
--       mapM_ putStrLn names
--   </pre>
--   
--   Add files to the archive:
--   
--   <pre>
--   import Control.Monad (filterM)
--   import System.Directory (doesFileExist, getDirectoryContents)
--   import System.Environment (getArgs)
--   import Codec.Archive.Zip
--   
--   main = do
--       dirPath:_ &lt;- getArgs
--       paths     &lt;- getDirectoryContents dirPath
--       filePaths &lt;- filterM doesFileExist paths
--       withArchive "some.zip" $ addFiles filePaths
--   </pre>
--   
--   Extract files from the archive:
--   
--   <pre>
--   import System.Environment (getArgs)
--   import Codec.Archive.Zip
--   
--   main = do
--       dirPath:_ &lt;- getArgs
--       withArchive "some.zip" $ do
--           names &lt;- entryNames
--           extractFiles names dirPath
--   </pre>
module Codec.Archive.Zip
type Archive = StateT Zip IO
withArchive :: FilePath -> Archive a -> IO a
getComment :: Archive ByteString
setComment :: ByteString -> Archive ()
entryNames :: Archive [FilePath]

-- | Stream the contents of an archive entry to the specified sink.
sourceEntry :: FilePath -> Sink ByteString (ResourceT Archive) a -> Archive a

-- | Stream data from the specified source to an archive entry.
sinkEntry :: FilePath -> Source (ResourceT Archive) ByteString -> Archive ()

-- | Stream data from the specified source to an uncompressed archive
--   entry.
sinkEntryUncompressed :: FilePath -> Source (ResourceT Archive) ByteString -> Archive ()

-- | Extracts files from the <a>Zip</a> to a directory.
extractFiles :: [FilePath] -> FilePath -> Archive ()

-- | Appends files to the <a>Zip</a>. The file paths are used verbatim as
--   zip entry names, save for the application of <a>dropDrive</a>.
addFiles :: [FilePath] -> Archive ()

-- | Appends files to the <a>Zip</a> using a function to transform the file
--   paths into zip entry names. Useful when dealing with absolute paths.
--   <a>dropDrive</a> is applied to the paths before the supplied function.
addFilesAs :: (FilePath -> FilePath) -> [FilePath] -> Archive ()
fileNames :: Archive [FilePath]
getSource :: MonadResource m => FilePath -> Archive (Source m ByteString)
getSink :: MonadResource m => FilePath -> UTCTime -> Archive (Sink ByteString m ())
instance Show Zip
