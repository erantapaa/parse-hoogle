-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Weakened partial isomorphisms, reversible computations.
--   
--   Semi-isomorphisms are partial isomorphisms with weakened iso laws.
--   They are a basic building block of reversible computations. And they
--   work with Iso and Prism from <tt>lens</tt>!
--   
--   The module <a>Control.Lens.SemiIso</a> defines semi-isomorphisms and
--   provides some basic semi-isos and combinators. A <tt>SemiIso' a b</tt>
--   can be applied in both directions to get a <tt>a -&gt; Either String
--   b</tt> and <tt>b -&gt; Either String a</tt>. SemiIsos can be composed
--   with Isos and Prisms (to get another SemiIso). Isos and Prisms can be
--   directly used as SemiIsos.
--   
--   Semi-isomorphisms obey weaker laws then isomorphisms. We require only
--   
--   <pre>
--   apply f &gt;=&gt; unapply f &gt;=&gt; apply f = apply f
--   unapply f &gt;=&gt; apply f &gt;=&gt; unapply f = unapply f
--   </pre>
--   
--   instead of
--   
--   <pre>
--   apply f &gt;=&gt; unapply f = f
--   unapply f &gt;=&gt; apply f = f
--   </pre>
--   
--   Modules <a>Control.SIArrow</a> and <a>Control.Category.Structures</a>
--   define an <tt>Arrow</tt>-like class hierarchy. Unfortunately
--   <a>Control.Arrow</a> cannot be used, as it is too restrictive (the
--   dreaded <tt>arr</tt>). SIArrow abstracts categories of reversible
--   computations (with reversible side effects). In the case of parsing
--   and pretty-printing using the "syntax" library if we have an arrow
--   <tt>SIArrow cat =&gt; cat a b</tt> then we can:
--   
--   <ul>
--   <li>Evaluate it from left to right, turning a value of type <tt>a</tt>
--   into a value of type <tt>b</tt>, with the side effect of consuming a
--   sequence. (Parsing)</li>
--   <li>Evaluate it from right to left, turning a value of type <tt>b</tt>
--   into a value of type <tt>a</tt>, with the side effect of generating a
--   sequence. (Pretty-printing)</li>
--   </ul>
--   
--   In the particular case of parsing/pretty-printing the type <tt>a</tt>
--   will be usually <tt>()</tt>, e.g. we just produce a value during
--   parsing and just consume a value during pretty-printing. To support
--   this style we define a functor and applicative structure on <tt>cat ()
--   b</tt>, for example <a>/*/</a> (equivalent of <a>&lt;*&gt;</a>) has
--   type <tt>(/*/) :: SIArrow cat =&gt; cat () a -&gt; cat () b -&gt; cat
--   () (a, b)</tt>.
--   
--   When more power then applicative is needed - for example when the
--   syntax depends on the parsed value - we turn back to arrow
--   composition.
--   
--   Module <a>Control.Category.Reader</a> defines a Reader category
--   transformer. It is like a monad transformer, but for categories. The
--   next version will include some more transformers and mtl-style
--   classes.
@package semi-iso
@version 1.0.0.0


module Data.Profunctor.Exposed

-- | Exposes structure of a Kleisli category beneath a profunctor.
--   
--   Should obey laws:
--   
--   <pre>
--   merge . rmap return = id
--   </pre>
--   
--   <pre>
--   lmap return . expose = id
--   </pre>
--   
--   <pre>
--   rmap (&gt;&gt;= f) = merge . rmap (fmap f)
--   </pre>
--   
--   <pre>
--   lmap (fmap f) . expose = expose . lmap f
--   </pre>
class (Monad m, Profunctor p) => Exposed m p | p -> m
expose :: Exposed m p => p a b -> p (m a) b
merge :: Exposed m p => p a (m b) -> p a b


module Control.Lens.Internal.SemiIso

-- | Type used internally to access <tt>SemiIso</tt>.
--   
--   Continues the naming tradition of <tt>lens</tt>.
data Retail s t a b
Retail :: (a -> Either String s) -> (t -> Either String b) -> Retail s t a b
instance Exposed (Either String) (Retail s t)
instance Choice (Retail s t)
instance Profunctor (Retail s t)


-- | This module defines some basic structures in a category in a more
--   fine-grained way then <a>Control.Arrow</a>.
--   
--   Unfortunately names in this module clash with <a>Control.Arrow</a>.
module Control.Category.Structures

-- | A category with finite products.
class Category cat => Products cat where first a = a *** id second a = id *** a a *** b = first a >>> second b
first :: Products cat => cat a b -> cat (a, c) (b, c)
second :: Products cat => cat a b -> cat (c, a) (c, b)
(***) :: Products cat => cat a b -> cat c d -> cat (a, c) (b, d)

-- | A category with finite coproducts.
class Category cat => Coproducts cat where left a = a +++ id right a = id +++ a a +++ b = left a >>> right b
left :: Coproducts cat => cat a b -> cat (Either a c) (Either b c)
right :: Coproducts cat => cat a b -> cat (Either c a) (Either c b)
(+++) :: Coproducts cat => cat a b -> cat c d -> cat (Either a c) (Either b d)

-- | A category <tt>cat</tt> is a CatPlus when <tt>cat a b</tt> is a monoid
--   for all a, b.
class Category cat => CatPlus cat
cempty :: CatPlus cat => cat a b
(/+/) :: CatPlus cat => cat a b -> cat a b -> cat a b

-- | A category transformer.
class CatTrans t
clift :: (CatTrans t, Category cat) => cat a b -> t cat a b
instance CatPlus cat => CatPlus (Dual cat)
instance MonadPlus m => CatPlus (Kleisli m)
instance Coproducts (->)
instance Coproducts cat => Coproducts (Dual cat)
instance Monad m => Coproducts (Kleisli m)
instance Products (->)
instance Products cat => Products (Dual cat)
instance Monad m => Products (Kleisli m)


-- | Semi-isomorphisms were motivated by reversible parsing/pretty
--   printing. For example we can map a number 12 to a string "12" (and the
--   other way around). But the isomorphism is partial - we cannot map the
--   string "forty-two" to a number.
--   
--   Another example: when parsing a list of numbers like "12_53___42" we
--   want to skip underscores between numbers (and forget about them).
--   During pretty printing we have to decide how many underscores should
--   we insert between numbers. Let's say we insert a single underscore.
--   But now <tt>prettyPrint (parse "12_53___42") = "12_53_42"</tt> and not
--   "12_53___42". We have to weaken isomorphism laws to allow such
--   semi-iso. Notice that
--   
--   <pre>
--   parse (prettyPrint (parse "12_53___42"))       = parse "12_53___42"
--   prettyPrint (parse (prettyPrint [12, 53, 42])) = prettyPrint [12, 53, 42]
--   </pre>
--   
--   Our semi-isomorphisms will obey weakened laws:
--   
--   <pre>
--   apply i   &gt;=&gt; unapply i &gt;=&gt; apply i   = apply i
--   unapply i &gt;=&gt; apply i   &gt;=&gt; unapply i = unapply i
--   </pre>
--   
--   When you see an "Either String a", the String is usually an error
--   message.
--   
--   Disclaimer: the name "semi-isomorphism" is fictitious and made up for
--   this library. Any resemblance to known mathematical objects of the
--   same name is purely coincidental.
module Control.Lens.SemiIso

-- | A semi-isomorphism is a partial isomorphism with weakened laws.
--   
--   Should satisfy laws:
--   
--   <pre>
--   apply i   &gt;=&gt; unapply i &gt;=&gt; apply i   = apply i
--   unapply i &gt;=&gt; apply i   &gt;=&gt; unapply i = unapply i
--   </pre>
--   
--   Every <tt>Prism</tt> is a <a>SemiIso</a>. Every <a>Iso</a> is a
--   <tt>Prism</tt>.
type SemiIso s t a b = forall p f. (Exposed (Either String) p, Traversable f) => p a (f b) -> p s (f t)

-- | Non-polymorphic variant of <a>SemiIso</a>.
type SemiIso' s a = SemiIso s s a a

-- | When you see this as an argument to a function, it expects a
--   <a>SemiIso</a>.
type ASemiIso s t a b = Retail a b a (Identity b) -> Retail a b s (Identity t)

-- | When you see this as an argument to a function, it expects a
--   <a>SemiIso'</a>.
type ASemiIso' s a = ASemiIso s s a a

-- | Constructs a semi isomorphism from a pair of functions that can fail
--   with an error message.
semiIso :: (s -> Either String a) -> (b -> Either String t) -> SemiIso s t a b

-- | Clones a semi-iso.
cloneSemiIso :: ASemiIso s t a b -> SemiIso s t a b

-- | A semi-iso stored in a container.
newtype ReifiedSemiIso' s a
ReifiedSemiIso' :: SemiIso' s a -> ReifiedSemiIso' s a
runSemiIso :: ReifiedSemiIso' s a -> SemiIso' s a

-- | Reifies a semi-iso.
reifySemiIso :: ASemiIso' s a -> ReifiedSemiIso' s a

-- | Applies the <a>SemiIso</a>.
apply :: ASemiIso s t a b -> s -> Either String a

-- | Applies the <a>SemiIso</a> in the opposite direction.
unapply :: ASemiIso s t a b -> b -> Either String t

-- | Extracts the two functions that characterize the <a>SemiIso</a>.
withSemiIso :: ASemiIso s t a b -> ((s -> Either String a) -> (b -> Either String t) -> r) -> r

-- | Extracts the two functions that characterize the <a>SemiIso</a>.
viewSemiIso :: ASemiIso s t a b -> (s -> Either String a, b -> Either String t)

-- | A trivial isomorphism between a and (a, ()).
unit :: Iso' a (a, ())

-- | <pre>
--   <a>swapped</a> <a>.</a> <a>swapped</a> â‰¡ <a>id</a>
--   <tt>first</tt> f <a>.</a> <a>swapped</a> = <a>swapped</a> <a>.</a> <tt>second</tt> f
--   <tt>second</tt> g <a>.</a> <a>swapped</a> = <a>swapped</a> <a>.</a> <tt>first</tt> g
--   <a>bimap</a> f g <a>.</a> <a>swapped</a> = <a>swapped</a> <a>.</a> <a>bimap</a> g f
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (1,2)^.swapped
--   (2,1)
--   </pre>
swapped :: Swapped p => forall a b c d (p :: * -> * -> *) (f :: * -> *). (Profunctor p, Functor f) => p (p b a) (f (p d c)) -> p (p a b) (f (p c d))

-- | Products are associative.
associated :: Iso' (a, (b, c)) ((a, b), c)

-- | An isomorphism between two arbitrary nested tuples, as long the
--   contained types (ignoring units!) read from left to right are the
--   same.
--   
--   This is implemented using <a>morph</a> from 'tuple-morph'.
morphed :: (HFoldable a, HUnfoldable a, HFoldable b, HUnfoldable b, Rep a ~ Rep b) => Iso' a b

-- | -&gt; Always returns the argument.
--   
--   &lt;- Maps everything to a <tt>()</tt>.
--   
--   Note that this isn't an <tt>Iso'</tt> because
--   
--   <pre>
--   unapply (constant x) &gt;=&gt; apply (constant x) /= id
--   </pre>
--   
--   But SemiIso laws do hold.
constant :: a -> SemiIso' () a

-- | -&gt; Filters out all values not equal to the argument.
--   
--   &lt;- Always returns the argument.
exact :: Eq a => a -> SemiIso' a ()

-- | Like <tt>filtered</tt> but checks the predicate in both ways.
bifiltered :: (a -> Bool) -> SemiIso' a a

-- | A semi-iso that fails in both directions.
alwaysFailing :: String -> SemiIso s t a b

-- | -&gt; Matches only negative numbers, turns it into a positive one.
--   
--   &lt;- Matches only positive numbers, turns it into a negative one.
_Negative :: Real a => SemiIso' a a

-- | Reverses a <a>SemiIso</a>.
rev :: ASemiIso s t a b -> SemiIso b a t s

-- | A product of semi-isos.
prod :: ASemiIso' s a -> ASemiIso' t b -> SemiIso' (s, t) (a, b)

-- | Uses an <tt>SemiIso' a ()</tt> to construct a <tt>SemiIso' (a, b)
--   b</tt>, i.e. eliminates the first pair element.
elimFirst :: ASemiIso' s () -> SemiIso' (s, t) t

-- | Uses an <tt>SemiIso b ()</tt> to construct a <tt>SemiIso (a, b)
--   a</tt>, i.e. eliminates the second pair element.
elimSecond :: ASemiIso' s () -> SemiIso' (t, s) t

-- | Transforms the semi-iso so that applying it in both directions never
--   fails, but instead catches any errors and returns them as an
--   <tt>Either String a</tt>.
attempt :: ASemiIso s t a b -> SemiIso s (Either String t) (Either String a) b

-- | Transforms the semi-iso so that applying it in direction (-&gt;) never
--   fails, but instead catches any errors and returns them as an
--   <tt>Either String a</tt>.
attemptAp :: ASemiIso s t a b -> SemiIso s t (Either String a) b

-- | Transforms the semi-iso so that applying it in direction (&lt;-) never
--   fails, but instead catches any errors and returns them as an
--   <tt>Either String a</tt>.
attemptUn :: ASemiIso s t a b -> SemiIso s (Either String t) a b

-- | Transforms the semi-iso like <a>attempt</a>, but ignores the error
--   message.
attempt_ :: ASemiIso s t a b -> SemiIso s (Maybe t) (Maybe a) b

-- | Transforms the semi-iso like <a>attemptAp</a>, but ignores the error
--   message.
--   
--   Very useful when you want to bifold using a prism.
attemptAp_ :: ASemiIso s t a b -> SemiIso s t (Maybe a) b

-- | Transforms the semi-iso like <a>attemptUn</a>, but ignores the error
--   message.
attemptUn_ :: ASemiIso s t a b -> SemiIso s (Maybe t) a b

-- | Constructs a bidirectional fold. Works with prisms.
--   
--   -&gt; Right unfolds using the (-&gt;) part of the given semi-iso,
--   until it fails.
--   
--   &lt;- Right folds using the (&lt;-) part of the given semi-iso.
bifoldr :: ASemiIso' a (b, a) -> SemiIso' a (a, [b])

-- | Constructs a bidirectional fold. Works with prisms.
--   
--   -&gt; Right unfolds using the (-&gt;) part of the given semi-iso,
--   until it fails. It should produce a non-empty list.
--   
--   &lt;- Right folds a non-empty list using the (&lt;-) part of the given
--   semi-iso.
bifoldr1 :: ASemiIso' a (a, a) -> SemiIso' a [a]

-- | Constructs a bidirectional fold. Works with prisms.
--   
--   -&gt; Left unfolds using the (-&gt;) part of the given semi-iso, until
--   it fails.
--   
--   &lt;- Left folds using the (&lt;-) part of the given semi-iso.
bifoldl :: ASemiIso' a (a, b) -> SemiIso' a (a, [b])

-- | Constructs a bidirectional fold. Works with prisms.
--   
--   -&gt; Left unfolds using the (-&gt;) part of the given semi-iso, until
--   it fails. It should produce a non-empty list.
--   
--   &lt;- Left folds a non-empty list using the (&lt;-) part of the given
--   semi-iso.
bifoldl1 :: ASemiIso' a (a, a) -> SemiIso' a [a]

-- | Constructs a bidirectional fold.
--   
--   -&gt; Right unfolds using the (-&gt;) part of the given semi-iso.
--   
--   &lt;- Right folds using the (&lt;-) part of the given semi-iso.
bifoldr_ :: ASemiIso a a (Maybe (b, a)) (b, a) -> SemiIso' a (a, [b])

-- | Constructs a bidirectional fold.
--   
--   -&gt; Right unfolds using the (-&gt;) part of the given semi-iso. It
--   should produce a non-empty list.
--   
--   &lt;- Right folds a non-empty list using the (&lt;-) part of the given
--   semi-iso.
bifoldr1_ :: ASemiIso a a (Maybe (a, a)) (a, a) -> SemiIso' a [a]

-- | Constructs a bidirectional fold.
--   
--   -&gt; Left unfolds using the (-&gt;) part of the given semi-iso.
--   
--   &lt;- Left folds using the (&lt;-) part of the given semi-iso.
bifoldl_ :: ASemiIso a a (Maybe (a, b)) (a, b) -> SemiIso' a (a, [b])

-- | Constructs a bidirectional fold.
--   
--   -&gt; Left unfolds using the (-&gt;) part of the given semi-iso. It
--   should produce a non-empty list.
--   
--   &lt;- Left folds a non-empty list using the (&lt;-) part of the given
--   semi-iso.
bifoldl1_ :: ASemiIso a a (Maybe (a, a)) (a, a) -> SemiIso' a [a]
instance CatPlus ReifiedSemiIso'
instance Coproducts ReifiedSemiIso'
instance Products ReifiedSemiIso'
instance Category ReifiedSemiIso'


-- | Categories of reversible computations.
module Control.SIArrow

-- | A category equipped with an embedding <a>siarr</a> from
--   <tt>SemiIso</tt> into <tt>cat</tt> and some additional structure.
--   
--   SIArrow abstracts categories of reversible computations (with
--   reversible side effects).
--   
--   The category <tt>cat</tt> should contain <tt>SemiIso</tt> as a sort of
--   "subcategory of pure computations".
class (Products cat, Coproducts cat, CatPlus cat) => SIArrow cat where siarr = sipure . rev sipure = siarr . rev sisome v = _Cons /$/ v /*/ simany v simany v = sisome v /+/ sipure _Empty
siarr :: SIArrow cat => ASemiIso' a b -> cat a b
sipure :: SIArrow cat => ASemiIso' b a -> cat a b
sibind :: SIArrow cat => ASemiIso a (cat a b) (cat a b) b -> cat a b
sisome :: SIArrow cat => cat () b -> cat () [b]
simany :: SIArrow cat => cat () b -> cat () [b]

-- | Composes a SemiIso with an arrow.
(^>>) :: SIArrow cat => ASemiIso' a b -> cat b c -> cat a c

-- | Composes an arrow with a SemiIso.
(>>^) :: SIArrow cat => cat a b -> ASemiIso' b c -> cat a c

-- | Composes a SemiIso with an arrow, backwards.
(^<<) :: SIArrow cat => ASemiIso' b c -> cat a b -> cat a c

-- | Composes an arrow with a SemiIso, backwards.
(<<^) :: SIArrow cat => cat b c -> ASemiIso' a b -> cat a c

-- | Composes a reversed SemiIso with an arrow.
(#>>) :: SIArrow cat => ASemiIso' b a -> cat b c -> cat a c

-- | Composes an arrow with a reversed SemiIso.
(>>#) :: SIArrow cat => cat a b -> ASemiIso' c b -> cat a c

-- | Composes a reversed SemiIso with an arrow, backwards.
(#<<) :: SIArrow cat => ASemiIso' c b -> cat a b -> cat a c

-- | Composes an arrow with a reversed SemiIso, backwards.
(<<#) :: SIArrow cat => cat b c -> ASemiIso' b a -> cat a c

-- | Postcomposes an arrow with a reversed SemiIso. The analogue of
--   <tt>&lt;$&gt;</tt> and synonym for '#&lt;&lt;'.
(/$/) :: SIArrow cat => ASemiIso' b' b -> cat a b -> cat a b'

-- | Convenient fmap.
--   
--   <pre>
--   ai /$~ f = ai . morphed /$/ f
--   </pre>
--   
--   This operator handles all the hairy stuff with uncurried application:
--   it reassociates the argument tuple and removes unnecessary (or adds
--   necessary) units to match the function type. You don't have to use
--   <tt>/*</tt> and <tt>*/</tt> with this operator.
(/$~) :: (SIArrow cat, HFoldable b', HFoldable b, HUnfoldable b', HUnfoldable b, Rep b' ~ Rep b) => ASemiIso' a b' -> cat c b -> cat c a

-- | The product of two arrows with duplicate units removed. Side effect
--   are sequenced from left to right.
--   
--   The uncurried analogue of <tt>&lt;*&gt;</tt>.
(/*/) :: SIArrow cat => cat () b -> cat () c -> cat () (b, c)

-- | The product of two arrows, where the second one has no input and no
--   output (but can have side effects), with duplicate units removed. Side
--   effect are sequenced from left to right.
--   
--   The uncurried analogue of <tt>&lt;*</tt>.
(/*) :: SIArrow cat => cat () a -> cat () () -> cat () a

-- | The product of two arrows, where the first one has no input and no
--   output (but can have side effects), with duplicate units removed. Side
--   effect are sequenced from left to right.
--   
--   The uncurried analogue of <tt>*&gt;</tt>.
(*/) :: SIArrow cat => cat () () -> cat () a -> cat () a

-- | An arrow that fails with an error message.
sifail :: SIArrow cat => String -> cat a b

-- | Provides an error message in the case of failure.
(/?/) :: SIArrow cat => cat a b -> String -> cat a b

-- | Equivalent of <a>sequence</a>.
sisequence :: SIArrow cat => [cat () a] -> cat () [a]

-- | Equivalent of <a>sequence_</a>, restricted to units.
sisequence_ :: SIArrow cat => [cat () ()] -> cat () ()

-- | Equivalent of <a>replicateM</a>.
sireplicate :: SIArrow cat => Int -> cat () a -> cat () [a]

-- | Equivalent of <a>replicateM_</a>, restricted to units.
sireplicate_ :: SIArrow cat => Int -> cat () () -> cat () ()
instance SIArrow ReifiedSemiIso'
instance SIArrow cat => SIArrow (Dual cat)
instance MonadPlus m => SIArrow (Kleisli m)


-- | Provides a Reader category transformer.
module Control.Category.Reader
newtype ReaderCT env cat a b
ReaderCT :: (env -> cat a b) -> ReaderCT env cat a b
runReaderCT :: ReaderCT env cat a b -> env -> cat a b
instance SIArrow cat => SIArrow (ReaderCT env cat)
instance CatPlus cat => CatPlus (ReaderCT env cat)
instance Coproducts cat => Coproducts (ReaderCT env cat)
instance Products cat => Products (ReaderCT env cat)
instance Category cat => Category (ReaderCT env cat)
instance CatTrans (ReaderCT env)
