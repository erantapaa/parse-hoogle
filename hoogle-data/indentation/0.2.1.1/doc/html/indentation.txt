-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Indentation sensitive parsing combinators for Parsec and Trifecta
--   
--   Indentation sensitive parsing combinators for Parsec and Trifecta.
--   
--   See
--   
--   __Michael D. Adams and Ömer S. Ağacan__. Indentation-sensitive parsing
--   for Parsec. In <i>Proceedings of the 2014 ACM SIGPLAN Symposium on
--   Haskell</i>, Haskell ’14, pages 121–132. ACM, New York, NY, USA,
--   September 2014. ISBN 978-1-4503-3041-1.
--   <a>doi:10.1145/2633357.2633369</a>.
@package indentation
@version 0.2.1.1

module Text.Parser.Indentation.Implementation
type Indentation = Int
data IndentationRel
Eq :: IndentationRel
Any :: IndentationRel
Const :: Indentation -> IndentationRel
Ge :: IndentationRel
Gt :: IndentationRel
infIndentation :: Indentation
mkIndentationState :: Indentation -> Indentation -> Bool -> IndentationRel -> IndentationState
data IndentationState
IndentationState :: {-# UNPACK #-} !Indentation -> {-# UNPACK #-} !Indentation -> !Bool -> !IndentationRel -> IndentationState
minIndentation :: IndentationState -> {-# UNPACK #-} !Indentation
maxIndentation :: IndentationState -> {-# UNPACK #-} !Indentation
absMode :: IndentationState -> !Bool
tokenRel :: IndentationState -> !IndentationRel
indentationStateAbsMode :: IndentationState -> Bool
updateIndentation :: IndentationState -> Indentation -> (IndentationState -> a) -> (String -> a) -> a
updateIndentation' :: Indentation -> Indentation -> IndentationRel -> Indentation -> (Indentation -> Indentation -> a) -> (String -> a) -> a
type LocalState a = (IndentationState -> IndentationState) -> (IndentationState -> IndentationState -> IndentationState) -> a -> a
localTokenMode :: (LocalState a) -> (IndentationRel -> IndentationRel) -> a -> a
absoluteIndentation :: LocalState a -> a -> a
ignoreAbsoluteIndentation :: LocalState a -> a -> a
localAbsoluteIndentation :: LocalState a -> a -> a
localIndentation' :: LocalState a -> (Indentation -> Indentation) -> (Indentation -> Indentation) -> (Indentation -> Indentation -> Indentation) -> a -> a
localIndentation :: LocalState a -> IndentationRel -> a -> a
instance Show IndentationRel
instance Eq IndentationRel
instance Show IndentationState

module Text.Parsec.Indentation
data IndentStream s
IndentStream :: !IndentationState -> !s -> IndentStream s
indentationState :: IndentStream s -> !IndentationState
tokenStream :: IndentStream s -> !s
type IndentationToken t = t
mkIndentStream :: Indentation -> Indentation -> Bool -> IndentationRel -> s -> IndentStream s
localState :: Monad m => LocalState (ParsecT (IndentStream s) u m a)
localStateUnlessAbsMode :: Monad m => LocalState (ParsecT (IndentStream s) u m a)
localTokenMode :: Monad m => (IndentationRel -> IndentationRel) -> ParsecT (IndentStream s) u m a -> ParsecT (IndentStream s) u m a
localIndentation :: Monad m => IndentationRel -> ParsecT (IndentStream s) u m a -> ParsecT (IndentStream s) u m a
absoluteIndentation :: Monad m => ParsecT (IndentStream s) u m a -> ParsecT (IndentStream s) u m a
ignoreAbsoluteIndentation :: Monad m => ParsecT (IndentStream s) u m a -> ParsecT (IndentStream s) u m a
localAbsoluteIndentation :: Monad m => ParsecT (IndentStream s) u m a -> ParsecT (IndentStream s) u m a
streamToList :: (Monad m, Stream s m t) => s -> m [t]
indentStreamParser :: Monad m => ParsecT s u m (t, Indentation) -> ParsecT (IndentStream s) u m (IndentationToken t)
consumed :: Monad m => (a -> m b) -> (a -> m b) -> Consumed (m a) -> m b
data IndentationRel
Eq :: IndentationRel
Any :: IndentationRel
Const :: Indentation -> IndentationRel
Ge :: IndentationRel
Gt :: IndentationRel
type Indentation = Int
infIndentation :: Indentation
instance Show s => Show (IndentStream s)
instance Stream s m (t, Indentation) => Stream (IndentStream s) m (IndentationToken t)

module Text.Parsec.Indentation.Char
mkCharIndentStream :: s -> CharIndentStream s
data CharIndentStream s
CharIndentStream :: {-# UNPACK #-} !Indentation -> !s -> CharIndentStream s
charIndentStreamColumn :: CharIndentStream s -> {-# UNPACK #-} !Indentation
charIndentStreamStream :: CharIndentStream s -> !s
updateColumn :: Integral a => a -> Char -> a
charIndentStreamParser :: Monad m => ParsecT s u m t -> ParsecT (CharIndentStream s) u m (t, Indentation)
consumed :: Monad m => (a -> m b) -> (a -> m b) -> Consumed (m a) -> m b
instance Show s => Show (CharIndentStream s)
instance Stream s m Char => Stream (CharIndentStream s) m (Char, Indentation)

module Text.Parsec.Indentation.Token
type IndentLanguageDef st = GenLanguageDef (IndentStream (CharIndentStream String)) st Identity
makeIndentLanguageDef :: Monad m => GenLanguageDef s st m -> GenLanguageDef (IndentStream (CharIndentStream s)) st m
makeTokenParser :: Stream s m (Char, Indentation) => GenLanguageDef (IndentStream s) u m -> GenTokenParser (IndentStream s) u m

module Text.Trifecta.Indentation
data IndentationRel
Eq :: IndentationRel
Any :: IndentationRel
Const :: Indentation -> IndentationRel
Ge :: IndentationRel
Gt :: IndentationRel
type Indentation = Int
infIndentation :: Indentation
mkIndentationState :: Indentation -> Indentation -> Bool -> IndentationRel -> IndentationState
data IndentationState
class IndentationParsing m where localAbsoluteIndentation = ignoreAbsoluteIndentation . absoluteIndentation
localTokenMode :: IndentationParsing m => (IndentationRel -> IndentationRel) -> m a -> m a
localIndentation :: IndentationParsing m => IndentationRel -> m a -> m a
absoluteIndentation :: IndentationParsing m => m a -> m a
ignoreAbsoluteIndentation :: IndentationParsing m => m a -> m a
localAbsoluteIndentation :: IndentationParsing m => m a -> m a
data Token
data IndentationParserT t m a
runIndentationParserT :: IndentationParserT t m a -> IndentationState -> m (a, IndentationState)
evalIndentationParserT :: Monad m => IndentationParserT t m a -> IndentationState -> m a
execIndentationParserT :: Monad m => IndentationParserT t m a -> IndentationState -> m IndentationState
instance MarkParsing Delta m => MarkParsing Delta (IndentationParserT Token m)
instance DeltaParsing m => DeltaParsing (IndentationParserT Token m)
instance MarkParsing Delta m => MarkParsing Delta (IndentationParserT Char m)
instance DeltaParsing m => DeltaParsing (IndentationParserT Char m)
instance (Parsing m, MonadPlus m) => Parsing (IndentationParserT t m)
instance Functor m => Functor (IndentationParserT t m)
instance (Monad m, Functor m) => Applicative (IndentationParserT t m)
instance Monad m => Monad (IndentationParserT t m)
instance MonadTrans (IndentationParserT t)
instance MonadPlus m => MonadPlus (IndentationParserT t m)
instance (Functor m, MonadPlus m) => Alternative (IndentationParserT t m)
instance Monad m => IndentationParsing (IndentationParserT t m)
instance (LookAheadParsing m, MonadPlus m) => LookAheadParsing (IndentationParserT t m)
instance DeltaParsing m => TokenParsing (IndentationParserT Token m)
instance DeltaParsing m => CharParsing (IndentationParserT Token m)
instance DeltaParsing m => TokenParsing (IndentationParserT Char m)
instance DeltaParsing m => CharParsing (IndentationParserT Char m)
instance IndentationParsing i => IndentationParsing (StateT s i)
instance IndentationParsing i => IndentationParsing (StateT s i)
