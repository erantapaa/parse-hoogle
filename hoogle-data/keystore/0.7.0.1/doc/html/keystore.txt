-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Managing stores of secret things
--   
@package keystore
@version 0.7.0.1

module Data.KeyStore.Types.PasswordStoreSchema
passwordStoreSchema :: API
passwordStoreChangelog :: APIChangelog

module Data.KeyStore.Types.Schema
keystoreSchema :: API
keystoreChangelog :: APIChangelog

module Data.KeyStore.Types.E
type E a = Either Reason a
data Reason

-- | Creates an exception with a message. The default implementation of
--   <tt><a>strMsg</a> s</tt> is <a>noMsg</a>.
strMsg :: Error a => String -> a
rsaError :: Error -> Reason
eWrap :: IO a -> IO a
showReason :: Reason -> String
instance Typeable Reason
instance Show Reason
instance Error Reason
instance Exception Reason

module Data.KeyStore.Types.NameAndSafeguard
data Name
name :: String -> E Name
_name :: Name -> String
data Safeguard
safeguard :: [Name] -> Safeguard
safeguardKeys :: Safeguard -> [Name]
isWildSafeguard :: Safeguard -> Bool
printSafeguard :: Safeguard -> String
parseSafeguard :: String -> E Safeguard
instance Eq Name
instance Ord Name
instance IsString Name
instance Read Name
instance Show Name
instance Eq Safeguard
instance Ord Safeguard
instance Show Safeguard
instance IsString Safeguard

module Data.KeyStore.Types.PasswordStoreModel
newtype PasswordStoreComment
PasswordStoreComment :: Text -> PasswordStoreComment
_PasswordStoreComment :: PasswordStoreComment -> Text
newtype PasswordName
PasswordName :: Text -> PasswordName
_PasswordName :: PasswordName -> Text
newtype PasswordText
PasswordText :: Text -> PasswordText
_PasswordText :: PasswordText -> Text
newtype SessionName
SessionName :: Text -> SessionName
_SessionName :: SessionName -> Text
data Session
Session :: !SessionName -> !PasswordText -> !Bool -> !UTCTime -> Session
_ssn_name :: Session -> !SessionName
_ssn_password :: Session -> !PasswordText
_ssn_isOneShot :: Session -> !Bool
_ssn_setup :: Session -> !UTCTime
data SessionPasswordAssoc
SessionPasswordAssoc :: !SessionName -> !Session -> SessionPasswordAssoc
_spa_name :: SessionPasswordAssoc -> !SessionName
_spa_session :: SessionPasswordAssoc -> !Session
data REP__SessionMap
REP__SessionMap :: ![SessionPasswordAssoc] -> REP__SessionMap
_smp_map :: REP__SessionMap -> ![SessionPasswordAssoc]
data Password
Password :: !PasswordName -> !PasswordText -> !SessionMap -> !Bool -> !Bool -> !UTCTime -> Password
_pw_name :: Password -> !PasswordName
_pw_text :: Password -> !PasswordText
_pw_sessions :: Password -> !SessionMap
_pw_isOneShot :: Password -> !Bool
_pw_primed :: Password -> !Bool
_pw_setup :: Password -> !UTCTime
data PasswordStore
PasswordStore :: !PasswordStoreComment -> !PasswordMap -> !UTCTime -> PasswordStore
_ps_comment :: PasswordStore -> !PasswordStoreComment
_ps_map :: PasswordStore -> !PasswordMap
_ps_setup :: PasswordStore -> !UTCTime
data NamePasswordAssoc
NamePasswordAssoc :: !PasswordName -> !Password -> NamePasswordAssoc
_npa_name :: NamePasswordAssoc -> !PasswordName
_npa_password :: NamePasswordAssoc -> !Password
data REP__PasswordMap
REP__PasswordMap :: ![NamePasswordAssoc] -> REP__PasswordMap
_pm_map :: REP__PasswordMap -> ![NamePasswordAssoc]
type PasswordMap = Map PasswordName Password
inj_pwmap :: REP__PasswordMap -> ParserWithErrs PasswordMap
prj_pwmap :: PasswordMap -> REP__PasswordMap
type SessionMap = Map SessionName Session
inj_snmap :: REP__SessionMap -> ParserWithErrs SessionMap
prj_snmap :: SessionMap -> REP__SessionMap
sessionName :: Iso' SessionName Text
passwordText :: Iso' PasswordText Text
passwordName :: Iso' PasswordName Text
passwordStoreComment :: Iso' PasswordStoreComment Text
ssn_setup :: Lens' Session UTCTime
ssn_password :: Lens' Session PasswordText
ssn_name :: Lens' Session SessionName
ssn_isOneShot :: Lens' Session Bool
spa_session :: Lens' SessionPasswordAssoc Session
spa_name :: Lens' SessionPasswordAssoc SessionName
smp_map :: Iso' REP__SessionMap [SessionPasswordAssoc]
pw_text :: Lens' Password PasswordText
pw_setup :: Lens' Password UTCTime
pw_sessions :: Lens' Password SessionMap
pw_primed :: Lens' Password Bool
pw_name :: Lens' Password PasswordName
pw_isOneShot :: Lens' Password Bool
npa_password :: Lens' NamePasswordAssoc Password
npa_name :: Lens' NamePasswordAssoc PasswordName
pm_map :: Iso' REP__PasswordMap [NamePasswordAssoc]
ps_setup :: Lens' PasswordStore UTCTime
ps_map :: Lens' PasswordStore PasswordMap
ps_comment :: Lens' PasswordStore PasswordStoreComment
instance FromJSONWithErrs SessionName
instance ToJSON SessionName
instance FromJSONWithErrs PasswordText
instance ToJSON PasswordText
instance FromJSONWithErrs PasswordName
instance ToJSON PasswordName
instance FromJSONWithErrs PasswordStoreComment
instance ToJSON PasswordStoreComment
instance FromJSONWithErrs Session
instance ToJSON Session
instance FromJSONWithErrs SessionPasswordAssoc
instance ToJSON SessionPasswordAssoc
instance FromJSONWithErrs SessionMap
instance FromJSONWithErrs REP__SessionMap
instance ToJSON SessionMap
instance ToJSON REP__SessionMap
instance FromJSONWithErrs Password
instance ToJSON Password
instance FromJSONWithErrs NamePasswordAssoc
instance ToJSON NamePasswordAssoc
instance FromJSONWithErrs PasswordMap
instance FromJSONWithErrs REP__PasswordMap
instance ToJSON PasswordMap
instance ToJSON REP__PasswordMap
instance FromJSONWithErrs PasswordStore
instance ToJSON PasswordStore
instance Typeable PasswordStoreComment
instance Typeable PasswordName
instance Typeable PasswordText
instance Typeable SessionName
instance Typeable Session
instance Typeable SessionPasswordAssoc
instance Typeable REP__SessionMap
instance Typeable Password
instance Typeable PasswordStore
instance Typeable NamePasswordAssoc
instance Typeable REP__PasswordMap
instance Show PasswordStoreComment
instance Eq PasswordStoreComment
instance Ord PasswordStoreComment
instance IsString PasswordStoreComment
instance Show PasswordName
instance Eq PasswordName
instance Ord PasswordName
instance IsString PasswordName
instance Show PasswordText
instance Eq PasswordText
instance Ord PasswordText
instance IsString PasswordText
instance Show SessionName
instance Eq SessionName
instance Ord SessionName
instance IsString SessionName
instance Show Session
instance Eq Session
instance Show SessionPasswordAssoc
instance Eq SessionPasswordAssoc
instance Show REP__SessionMap
instance Eq REP__SessionMap
instance Show Password
instance Eq Password
instance Show PasswordStore
instance Eq PasswordStore
instance Show NamePasswordAssoc
instance Eq NamePasswordAssoc
instance Show REP__PasswordMap
instance Eq REP__PasswordMap

module Data.KeyStore.KS.CPRNG
data CPRNG
newCPRNG :: IO CPRNG
testCPRNG :: CPRNG
generateCPRNG :: Int -> CPRNG -> (ByteString, CPRNG)
instance CPRG CPRNG


-- | The KeyStore and Associated Types
--   
--   Note that most of these types and functions were generated by the
--   api-tools (<a>Data.Api.Tools</a>) from the schema in
--   <a>Data.KeyStore.Types.Schema</a>, marked down in
--   <a>https://github.com/cdornan/keystore/blob/master/schema.md</a>.
module Data.KeyStore.Types
data REP__Settings
REP__Settings :: !Value -> REP__Settings
_stgs_json :: REP__Settings -> !Value
data REP__Safeguard
REP__Safeguard :: ![Name] -> REP__Safeguard
_sg_names :: REP__Safeguard -> ![Name]
data REP__PublicKey
REP__PublicKey :: !Int -> !Integer -> !Integer -> REP__PublicKey
_puk_size :: REP__PublicKey -> !Int
_puk_n :: REP__PublicKey -> !Integer
_puk_e :: REP__PublicKey -> !Integer
data REP__PrivateKey
REP__PrivateKey :: !PublicKey -> !Integer -> !Integer -> !Integer -> !Integer -> !Integer -> !Integer -> REP__PrivateKey
_prk_pub :: REP__PrivateKey -> !PublicKey
_prk_d :: REP__PrivateKey -> !Integer
_prk_p :: REP__PrivateKey -> !Integer
_prk_q :: REP__PrivateKey -> !Integer
_prk_dP :: REP__PrivateKey -> !Integer
_prk_dQ :: REP__PrivateKey -> !Integer
_prk_qinv :: REP__PrivateKey -> !Integer
data Cipher
CPH_aes128 :: Cipher
CPH_aes192 :: Cipher
CPH_aes256 :: Cipher
data HashPRF
PRF_sha1 :: HashPRF
PRF_sha256 :: HashPRF
PRF_sha512 :: HashPRF
newtype FragmentID
FragmentID :: Text -> FragmentID
_FragmentID :: FragmentID -> Text
newtype REP__Pattern
REP__Pattern :: Text -> REP__Pattern
_REP__Pattern :: REP__Pattern -> Text
newtype Iterations
Iterations :: Int -> Iterations
_Iterations :: Iterations -> Int
newtype Octets
Octets :: Int -> Octets
_Octets :: Octets -> Int
newtype REP__Name
REP__Name :: Text -> REP__Name
_REP__Name :: REP__Name -> Text
newtype Identity
Identity :: Text -> Identity
_Identity :: Identity -> Text
newtype SettingID
SettingID :: Text -> SettingID
_SettingID :: SettingID -> Text
data TextJsonAssoc
TextJsonAssoc :: !SettingID -> !Value -> TextJsonAssoc
_tja_id :: TextJsonAssoc -> !SettingID
_tja_key :: TextJsonAssoc -> !Value
newtype TriggerID
TriggerID :: Text -> TriggerID
_TriggerID :: TriggerID -> Text
newtype Comment
Comment :: Text -> Comment
_Comment :: Comment -> Text
newtype EnvVar
EnvVar :: Text -> EnvVar
_EnvVar :: EnvVar -> Text
newtype ClearText
ClearText :: Binary -> ClearText
_ClearText :: ClearText -> Binary
newtype Salt
Salt :: Binary -> Salt
_Salt :: Salt -> Binary
data HashDescription
HashDescription :: !Comment -> !HashPRF -> !Iterations -> !Octets -> !Octets -> !Salt -> HashDescription
_hashd_comment :: HashDescription -> !Comment
_hashd_prf :: HashDescription -> !HashPRF
_hashd_iterations :: HashDescription -> !Iterations
_hashd_width_octets :: HashDescription -> !Octets
_hashd_salt_octets :: HashDescription -> !Octets
_hashd_salt :: HashDescription -> !Salt
newtype IV
IV :: Binary -> IV
_IV :: IV -> Binary
newtype HashData
HashData :: Binary -> HashData
_HashData :: HashData -> Binary
data Hash
Hash :: !HashDescription -> !HashData -> Hash
_hash_description :: Hash -> !HashDescription
_hash_hash :: Hash -> !HashData
newtype AESKey
AESKey :: Binary -> AESKey
_AESKey :: AESKey -> Binary
newtype SecretData
SecretData :: Binary -> SecretData
_SecretData :: SecretData -> Binary
data AESSecretData
AESSecretData :: !IV -> !SecretData -> AESSecretData
_asd_iv :: AESSecretData -> !IV
_asd_secret_data :: AESSecretData -> !SecretData
newtype RSAEncryptedKey
RSAEncryptedKey :: Binary -> RSAEncryptedKey
_RSAEncryptedKey :: RSAEncryptedKey -> Binary
data RSASecretData
RSASecretData :: !RSAEncryptedKey -> !AESSecretData -> RSASecretData
_rsd_encrypted_key :: RSASecretData -> !RSAEncryptedKey
_rsd_aes_secret_data :: RSASecretData -> !AESSecretData
newtype RSASecretBytes
RSASecretBytes :: Binary -> RSASecretBytes
_RSASecretBytes :: RSASecretBytes -> Binary
newtype RSASignature
RSASignature :: Binary -> RSASignature
_RSASignature :: RSASignature -> Binary
newtype EncryptionPacket
EncryptionPacket :: Binary -> EncryptionPacket
_EncryptionPacket :: EncryptionPacket -> Binary
newtype SignaturePacket
SignaturePacket :: Binary -> SignaturePacket
_SignaturePacket :: SignaturePacket -> Binary
newtype Void
Void :: Int -> Void
_Void :: Void -> Int
data EncryptionKey
EK_public :: !PublicKey -> EncryptionKey
EK_private :: !PrivateKey -> EncryptionKey
EK_symmetric :: !AESKey -> EncryptionKey
EK_none :: !Void -> EncryptionKey
data EncrypedCopyData
ECD_rsa :: !RSASecretData -> EncrypedCopyData
ECD_aes :: !AESSecretData -> EncrypedCopyData
ECD_clear :: !ClearText -> EncrypedCopyData
ECD_no_data :: !Void -> EncrypedCopyData
data EncrypedCopy
EncrypedCopy :: !Safeguard -> !Cipher -> !HashPRF -> !Iterations -> !Salt -> !EncrypedCopyData -> EncrypedCopy
_ec_safeguard :: EncrypedCopy -> !Safeguard
_ec_cipher :: EncrypedCopy -> !Cipher
_ec_prf :: EncrypedCopy -> !HashPRF
_ec_iterations :: EncrypedCopy -> !Iterations
_ec_salt :: EncrypedCopy -> !Salt
_ec_secret_data :: EncrypedCopy -> !EncrypedCopyData
data REP__EncrypedCopyMap
REP__EncrypedCopyMap :: ![EncrypedCopy] -> REP__EncrypedCopyMap
_ecm_map :: REP__EncrypedCopyMap -> ![EncrypedCopy]
data Trigger
Trigger :: !TriggerID -> !Pattern -> !Settings -> Trigger
_trg_id :: Trigger -> !TriggerID
_trg_pattern :: Trigger -> !Pattern
_trg_settings :: Trigger -> !Settings
data REP__TriggerMap
REP__TriggerMap :: ![Trigger] -> REP__TriggerMap
_tmp_map :: REP__TriggerMap -> ![Trigger]
data Configuration
Configuration :: !Settings -> !TriggerMap -> Configuration
_cfg_settings :: Configuration -> !Settings
_cfg_triggers :: Configuration -> !TriggerMap
data Key
Key :: !Name -> !Comment -> !Identity -> !Bool -> !(Maybe EnvVar) -> !(Maybe Hash) -> !(Maybe PublicKey) -> !EncrypedCopyMap -> !(Maybe ClearText) -> !(Maybe PrivateKey) -> !UTCTime -> Key
_key_name :: Key -> !Name
_key_comment :: Key -> !Comment
_key_identity :: Key -> !Identity
_key_is_binary :: Key -> !Bool
_key_env_var :: Key -> !(Maybe EnvVar)
_key_hash :: Key -> !(Maybe Hash)
_key_public :: Key -> !(Maybe PublicKey)
_key_secret_copies :: Key -> !EncrypedCopyMap
_key_clear_text :: Key -> !(Maybe ClearText)
_key_clear_private :: Key -> !(Maybe PrivateKey)
_key_created_at :: Key -> !UTCTime
data KeyStore
KeyStore :: !Configuration -> !KeyMap -> KeyStore
_ks_config :: KeyStore -> !Configuration
_ks_keymap :: KeyStore -> !KeyMap
data NameKeyAssoc
NameKeyAssoc :: !Name -> !Key -> NameKeyAssoc
_nka_name :: NameKeyAssoc -> !Name
_nka_key :: NameKeyAssoc -> !Key
data REP__KeyMap
REP__KeyMap :: ![NameKeyAssoc] -> REP__KeyMap
_kmp_map :: REP__KeyMap -> ![NameKeyAssoc]

-- | Keystore session context, created at the start of a session and passed
--   to the keystore access functions.
data Pattern
Pattern :: String -> Regex -> Pattern
_pat_string :: Pattern -> String
_pat_regex :: Pattern -> Regex
pattern :: String -> Pattern
inj_pattern :: REP__Pattern -> ParserWithErrs Pattern
prj_pattern :: Pattern -> REP__Pattern
type TriggerMap = Map TriggerID Trigger
inj_trigger_map :: REP__TriggerMap -> ParserWithErrs TriggerMap
prj_trigger_map :: TriggerMap -> REP__TriggerMap
newtype Settings
Settings :: Object -> Settings
_Settings :: Settings -> Object
inj_settings :: REP__Settings -> ParserWithErrs Settings
prj_settings :: Settings -> REP__Settings
defaultSettings :: Settings
checkSettingsCollisions :: Settings -> [SettingID]
marker :: Value
type KeyMap = Map Name Key
inj_keymap :: REP__KeyMap -> ParserWithErrs KeyMap
prj_keymap :: KeyMap -> REP__KeyMap
emptyKeyStore :: Configuration -> KeyStore
emptyKeyMap :: KeyMap
type EncrypedCopyMap = Map Safeguard EncrypedCopy
inj_encrypted_copy_map :: REP__EncrypedCopyMap -> ParserWithErrs EncrypedCopyMap
prj_encrypted_copy_map :: EncrypedCopyMap -> REP__EncrypedCopyMap
defaultConfiguration :: Settings -> Configuration
inj_safeguard :: REP__Safeguard -> ParserWithErrs Safeguard
prj_safeguard :: Safeguard -> REP__Safeguard
inj_name :: REP__Name -> ParserWithErrs Name
prj_name :: Name -> REP__Name
inj_PublicKey :: REP__PublicKey -> ParserWithErrs PublicKey
prj_PublicKey :: PublicKey -> REP__PublicKey
inj_PrivateKey :: REP__PrivateKey -> ParserWithErrs PrivateKey
prj_PrivateKey :: PrivateKey -> REP__PrivateKey
e2p :: E a -> ParserWithErrs a
data Dirctn
Encrypting :: Dirctn
Decrypting :: Dirctn
pbkdf :: HashPRF -> ClearText -> Salt -> Iterations -> Octets -> (ByteString -> a) -> a
keyWidth :: Cipher -> Octets
void_ :: Void
map_from_list :: Ord a => String -> (c -> [b]) -> (b -> a) -> (a -> Text) -> c -> ParserWithErrs (Map a b)
void :: Iso' Void Int
signaturePacket :: Iso' SignaturePacket Binary
encryptionPacket :: Iso' EncryptionPacket Binary
rSASignature :: Iso' RSASignature Binary
rSASecretBytes :: Iso' RSASecretBytes Binary
rSAEncryptedKey :: Iso' RSAEncryptedKey Binary
secretData :: Iso' SecretData Binary
aESKey :: Iso' AESKey Binary
hashData :: Iso' HashData Binary
iV :: Iso' IV Binary
salt :: Iso' Salt Binary
clearText :: Iso' ClearText Binary
envVar :: Iso' EnvVar Text
comment :: Iso' Comment Text
triggerID :: Iso' TriggerID Text
settingID :: Iso' SettingID Text
identity :: Iso' Identity Text
rEP__Name :: Iso' REP__Name Text
octets :: Iso' Octets Int
iterations :: Iso' Iterations Int
rEP__Pattern :: Iso' REP__Pattern Text
fragmentID :: Iso' FragmentID Text
prk_qinv :: Lens' REP__PrivateKey Integer
prk_q :: Lens' REP__PrivateKey Integer
prk_pub :: Lens' REP__PrivateKey PublicKey
prk_p :: Lens' REP__PrivateKey Integer
prk_dQ :: Lens' REP__PrivateKey Integer
prk_dP :: Lens' REP__PrivateKey Integer
prk_d :: Lens' REP__PrivateKey Integer
puk_size :: Lens' REP__PublicKey Int
puk_n :: Lens' REP__PublicKey Integer
puk_e :: Lens' REP__PublicKey Integer
asd_secret_data :: Lens' AESSecretData SecretData
asd_iv :: Lens' AESSecretData IV
rsd_encrypted_key :: Lens' RSASecretData RSAEncryptedKey
rsd_aes_secret_data :: Lens' RSASecretData AESSecretData
sg_names :: Iso' REP__Safeguard [Name]
ec_secret_data :: Lens' EncrypedCopy EncrypedCopyData
ec_salt :: Lens' EncrypedCopy Salt
ec_safeguard :: Lens' EncrypedCopy Safeguard
ec_prf :: Lens' EncrypedCopy HashPRF
ec_iterations :: Lens' EncrypedCopy Iterations
ec_cipher :: Lens' EncrypedCopy Cipher
ecm_map :: Iso' REP__EncrypedCopyMap [EncrypedCopy]
hashd_width_octets :: Lens' HashDescription Octets
hashd_salt_octets :: Lens' HashDescription Octets
hashd_salt :: Lens' HashDescription Salt
hashd_prf :: Lens' HashDescription HashPRF
hashd_iterations :: Lens' HashDescription Iterations
hashd_comment :: Lens' HashDescription Comment
hash_hash :: Lens' Hash HashData
hash_description :: Lens' Hash HashDescription
key_secret_copies :: Lens' Key EncrypedCopyMap
key_public :: Lens' Key (Maybe PublicKey)
key_name :: Lens' Key Name
key_is_binary :: Lens' Key Bool
key_identity :: Lens' Key Identity
key_hash :: Lens' Key (Maybe Hash)
key_env_var :: Lens' Key (Maybe EnvVar)
key_created_at :: Lens' Key UTCTime
key_comment :: Lens' Key Comment
key_clear_text :: Lens' Key (Maybe ClearText)
key_clear_private :: Lens' Key (Maybe PrivateKey)
nka_name :: Lens' NameKeyAssoc Name
nka_key :: Lens' NameKeyAssoc Key
kmp_map :: Iso' REP__KeyMap [NameKeyAssoc]
tja_key :: Lens' TextJsonAssoc Value
tja_id :: Lens' TextJsonAssoc SettingID
stgs_json :: Iso' REP__Settings Value
trg_settings :: Lens' Trigger Settings
trg_pattern :: Lens' Trigger Pattern
trg_id :: Lens' Trigger TriggerID
tmp_map :: Iso' REP__TriggerMap [Trigger]
cfg_triggers :: Lens' Configuration TriggerMap
cfg_settings :: Lens' Configuration Settings
ks_keymap :: Lens' KeyStore KeyMap
ks_config :: Lens' KeyStore Configuration
_map_HashPRF :: Map Text HashPRF
_text_HashPRF :: HashPRF -> Text
_map_Cipher :: Map Text Cipher
_text_Cipher :: Cipher -> Text

-- | Represent a RSA public key
data PublicKey :: *
PublicKey :: Int -> Integer -> Integer -> PublicKey

-- | size of key in bytes
public_size :: PublicKey -> Int

-- | public p*q
public_n :: PublicKey -> Integer

-- | public exponant e
public_e :: PublicKey -> Integer

-- | Represent a RSA private key.
--   
--   Only the pub, d fields are mandatory to fill.
--   
--   p, q, dP, dQ, qinv are by-product during RSA generation, but are
--   useful to record here to speed up massively the decrypt and sign
--   operation.
--   
--   implementations can leave optional fields to 0.
data PrivateKey :: *
PrivateKey :: PublicKey -> Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> PrivateKey

-- | public part of a private key (size, n and e)
private_pub :: PrivateKey -> PublicKey

-- | private exponant d
private_d :: PrivateKey -> Integer

-- | p prime number
private_p :: PrivateKey -> Integer

-- | q prime number
private_q :: PrivateKey -> Integer

-- | d mod (p-1)
private_dP :: PrivateKey -> Integer

-- | d mod (q-1)
private_dQ :: PrivateKey -> Integer

-- | q^(-1) mod p
private_qinv :: PrivateKey -> Integer
instance FromJSONWithErrs Void
instance ToJSON Void
instance FromJSONWithErrs SignaturePacket
instance ToJSON SignaturePacket
instance FromJSONWithErrs EncryptionPacket
instance ToJSON EncryptionPacket
instance FromJSONWithErrs RSASignature
instance ToJSON RSASignature
instance FromJSONWithErrs RSASecretBytes
instance ToJSON RSASecretBytes
instance FromJSONWithErrs RSAEncryptedKey
instance ToJSON RSAEncryptedKey
instance FromJSONWithErrs SecretData
instance ToJSON SecretData
instance FromJSONWithErrs AESKey
instance ToJSON AESKey
instance FromJSONWithErrs HashData
instance ToJSON HashData
instance FromJSONWithErrs IV
instance ToJSON IV
instance FromJSONWithErrs Salt
instance ToJSON Salt
instance FromJSONWithErrs ClearText
instance ToJSON ClearText
instance FromJSONWithErrs EnvVar
instance ToJSON EnvVar
instance FromJSONWithErrs Comment
instance ToJSON Comment
instance FromJSONWithErrs TriggerID
instance ToJSON TriggerID
instance FromJSONWithErrs SettingID
instance ToJSON SettingID
instance FromJSONWithErrs Identity
instance ToJSON Identity
instance FromJSONWithErrs Name
instance FromJSONWithErrs REP__Name
instance ToJSON Name
instance ToJSON REP__Name
instance FromJSONWithErrs Octets
instance ToJSON Octets
instance FromJSONWithErrs Iterations
instance ToJSON Iterations
instance FromJSONWithErrs Pattern
instance FromJSONWithErrs REP__Pattern
instance ToJSON Pattern
instance ToJSON REP__Pattern
instance FromJSONWithErrs FragmentID
instance ToJSON FragmentID
instance FromJSONWithErrs EncryptionKey
instance ToJSON EncryptionKey
instance FromJSONWithErrs HashPRF
instance ToJSON HashPRF
instance FromJSONWithErrs Cipher
instance ToJSON Cipher
instance FromJSONWithErrs PrivateKey
instance FromJSONWithErrs REP__PrivateKey
instance ToJSON PrivateKey
instance ToJSON REP__PrivateKey
instance FromJSONWithErrs PublicKey
instance FromJSONWithErrs REP__PublicKey
instance ToJSON PublicKey
instance ToJSON REP__PublicKey
instance FromJSONWithErrs AESSecretData
instance ToJSON AESSecretData
instance FromJSONWithErrs RSASecretData
instance ToJSON RSASecretData
instance FromJSONWithErrs EncrypedCopyData
instance ToJSON EncrypedCopyData
instance FromJSONWithErrs Safeguard
instance FromJSONWithErrs REP__Safeguard
instance ToJSON Safeguard
instance ToJSON REP__Safeguard
instance FromJSONWithErrs EncrypedCopy
instance ToJSON EncrypedCopy
instance FromJSONWithErrs EncrypedCopyMap
instance FromJSONWithErrs REP__EncrypedCopyMap
instance ToJSON EncrypedCopyMap
instance ToJSON REP__EncrypedCopyMap
instance FromJSONWithErrs HashDescription
instance ToJSON HashDescription
instance FromJSONWithErrs Hash
instance ToJSON Hash
instance FromJSONWithErrs Key
instance ToJSON Key
instance FromJSONWithErrs NameKeyAssoc
instance ToJSON NameKeyAssoc
instance FromJSONWithErrs KeyMap
instance FromJSONWithErrs REP__KeyMap
instance ToJSON KeyMap
instance ToJSON REP__KeyMap
instance FromJSONWithErrs TextJsonAssoc
instance ToJSON TextJsonAssoc
instance FromJSONWithErrs Settings
instance FromJSONWithErrs REP__Settings
instance ToJSON Settings
instance ToJSON REP__Settings
instance FromJSONWithErrs Trigger
instance ToJSON Trigger
instance FromJSONWithErrs TriggerMap
instance FromJSONWithErrs REP__TriggerMap
instance ToJSON TriggerMap
instance ToJSON REP__TriggerMap
instance FromJSONWithErrs Configuration
instance ToJSON Configuration
instance FromJSONWithErrs KeyStore
instance ToJSON KeyStore
instance Typeable REP__Settings
instance Typeable REP__Safeguard
instance Typeable REP__PublicKey
instance Typeable REP__PrivateKey
instance Typeable Cipher
instance Typeable HashPRF
instance Typeable FragmentID
instance Typeable REP__Pattern
instance Typeable Iterations
instance Typeable Octets
instance Typeable REP__Name
instance Typeable Identity
instance Typeable SettingID
instance Typeable TextJsonAssoc
instance Typeable TriggerID
instance Typeable Comment
instance Typeable EnvVar
instance Typeable ClearText
instance Typeable Salt
instance Typeable HashDescription
instance Typeable IV
instance Typeable HashData
instance Typeable Hash
instance Typeable AESKey
instance Typeable SecretData
instance Typeable AESSecretData
instance Typeable RSAEncryptedKey
instance Typeable RSASecretData
instance Typeable RSASecretBytes
instance Typeable RSASignature
instance Typeable EncryptionPacket
instance Typeable SignaturePacket
instance Typeable Void
instance Typeable EncryptionKey
instance Typeable EncrypedCopyData
instance Typeable EncrypedCopy
instance Typeable REP__EncrypedCopyMap
instance Typeable Trigger
instance Typeable REP__TriggerMap
instance Typeable Configuration
instance Typeable Key
instance Typeable KeyStore
instance Typeable NameKeyAssoc
instance Typeable REP__KeyMap
instance Num Octets
instance Num Iterations
instance Show REP__Settings
instance Eq REP__Settings
instance Show REP__Safeguard
instance Eq REP__Safeguard
instance Show REP__PublicKey
instance Eq REP__PublicKey
instance Show REP__PrivateKey
instance Eq REP__PrivateKey
instance Show Cipher
instance Eq Cipher
instance Ord Cipher
instance Bounded Cipher
instance Enum Cipher
instance Show HashPRF
instance Eq HashPRF
instance Ord HashPRF
instance Bounded HashPRF
instance Enum HashPRF
instance Show FragmentID
instance Eq FragmentID
instance Ord FragmentID
instance IsString FragmentID
instance Show REP__Pattern
instance Eq REP__Pattern
instance Ord REP__Pattern
instance IsString REP__Pattern
instance Show Iterations
instance Eq Iterations
instance Ord Iterations
instance Show Octets
instance Eq Octets
instance Ord Octets
instance Show REP__Name
instance Eq REP__Name
instance Ord REP__Name
instance IsString REP__Name
instance Show Identity
instance Eq Identity
instance Ord Identity
instance IsString Identity
instance Show SettingID
instance Eq SettingID
instance Ord SettingID
instance IsString SettingID
instance Show TextJsonAssoc
instance Eq TextJsonAssoc
instance Show TriggerID
instance Eq TriggerID
instance Ord TriggerID
instance IsString TriggerID
instance Show Comment
instance Eq Comment
instance Ord Comment
instance IsString Comment
instance Show EnvVar
instance Eq EnvVar
instance Ord EnvVar
instance IsString EnvVar
instance Show ClearText
instance Eq ClearText
instance Ord ClearText
instance Show Salt
instance Eq Salt
instance Ord Salt
instance Show HashDescription
instance Eq HashDescription
instance Show IV
instance Eq IV
instance Ord IV
instance Show HashData
instance Eq HashData
instance Ord HashData
instance Show Hash
instance Eq Hash
instance Show AESKey
instance Eq AESKey
instance Ord AESKey
instance Show SecretData
instance Eq SecretData
instance Ord SecretData
instance Show AESSecretData
instance Eq AESSecretData
instance Show RSAEncryptedKey
instance Eq RSAEncryptedKey
instance Ord RSAEncryptedKey
instance Show RSASecretData
instance Eq RSASecretData
instance Show RSASecretBytes
instance Eq RSASecretBytes
instance Ord RSASecretBytes
instance Show RSASignature
instance Eq RSASignature
instance Ord RSASignature
instance Show EncryptionPacket
instance Eq EncryptionPacket
instance Ord EncryptionPacket
instance Show SignaturePacket
instance Eq SignaturePacket
instance Ord SignaturePacket
instance Show Void
instance Eq Void
instance Ord Void
instance Show EncryptionKey
instance Eq EncryptionKey
instance Show EncrypedCopyData
instance Eq EncrypedCopyData
instance Show EncrypedCopy
instance Eq EncrypedCopy
instance Show REP__EncrypedCopyMap
instance Eq REP__EncrypedCopyMap
instance Eq Settings
instance Show Settings
instance Show Trigger
instance Eq Trigger
instance Show REP__TriggerMap
instance Eq REP__TriggerMap
instance Show Configuration
instance Eq Configuration
instance Show Key
instance Eq Key
instance Show KeyStore
instance Eq KeyStore
instance Show NameKeyAssoc
instance Eq NameKeyAssoc
instance Show REP__KeyMap
instance Eq REP__KeyMap
instance Show Dirctn
instance Monoid Settings
instance IsString Pattern
instance Show Pattern
instance Eq Pattern

module Data.KeyStore.KS.Configuration
configurationSettings :: Configuration -> Settings
trigger :: Name -> Configuration -> Settings -> E Settings

module Data.KeyStore.Version
version :: String
versionTuple :: (Int, Int, Int, Int)

module Data.KeyStore.KS.Opt
data Opt a
data OptEnum
Debug__enabled :: OptEnum
Verify__enabled :: OptEnum
Sections__fix :: OptEnum
Backup__keys :: OptEnum
Hash__comment :: OptEnum
Hash__prf :: OptEnum
Hash__iterations :: OptEnum
Hash__width_octets :: OptEnum
Hash__salt_octets :: OptEnum
Crypt__cipher :: OptEnum
Crypt__prf :: OptEnum
Crypt__iterations :: OptEnum
Crypt__salt_octets :: OptEnum
opt_enum :: Opt a -> OptEnum
getSettingsOpt :: Opt a -> Settings -> a
getSettingsOpt' :: Opt a -> Settings -> Maybe a
setSettingsOpt :: Opt a -> a -> Settings -> Settings
opt__debug_enabled :: Opt Bool
opt__verify_enabled :: Opt Bool
opt__sections_fix :: Opt Bool
opt__backup_keys :: Opt [Name]
opt__hash_comment :: Opt Comment
opt__hash_prf :: Opt HashPRF
opt__hash_iterations :: Opt Iterations
opt__hash_width_octets :: Opt Octets
opt__hash_salt_octets :: Opt Octets
opt__crypt_cipher :: Opt Cipher
opt__crypt_prf :: Opt HashPRF
opt__crypt_iterations :: Opt Iterations
opt__crypt_salt_octets :: Opt Octets
data Opt_
Opt_ :: (Opt a) -> Opt_
opt_ :: OptEnum -> Opt_
listSettingsOpts :: Maybe OptEnum -> Text
optHelp :: OptEnum -> Text
optName :: OptEnum -> Text
parseOpt :: Text -> Maybe OptEnum
instance Show Help
instance Bounded OptEnum
instance Enum OptEnum
instance Eq OptEnum
instance Ord OptEnum
instance Show OptEnum

module Data.KeyStore.KS.KS
data KS a
data Ctx
Ctx :: UTCTime -> FilePath -> Settings -> Ctx
ctx_now :: Ctx -> UTCTime
ctx_store :: Ctx -> FilePath
ctx_settings :: Ctx -> Settings
data State
State :: KeyStore -> CPRNG -> State
st_keystore :: State -> KeyStore
st_cprng :: State -> CPRNG
data LogEntry
LogEntry :: Bool -> String -> LogEntry
le_debug :: LogEntry -> Bool
le_message :: LogEntry -> String
withKey :: Name -> KS a -> KS a
trun :: KS a -> a
e2io :: E a -> IO a
e2ks :: E a -> KS a
run_ :: Ctx -> State -> KS a -> (E a, State, [LogEntry])
randomBytes :: Octets -> (ByteString -> a) -> KS a
currentTime :: KS UTCTime
putStrKS :: String -> KS ()
btw :: String -> KS ()
debugLog :: String -> KS ()
catchKS :: KS a -> (Reason -> KS a) -> KS a
errorKS :: String -> KS a
throwKS :: Reason -> KS a
lookupOpt :: Show a => Opt a -> KS a
storeKS :: KS FilePath
getSettings :: KS Settings
lookupKey :: Name -> KS Key
insertNewKey :: Key -> KS ()
insertKey :: Key -> KS ()
adjustKeyKS :: Name -> (Key -> Key) -> KS ()
deleteKeysKS :: [Name] -> KS ()
randomRSA :: (CPRNG -> (Either Error a, CPRNG)) -> KS a
randomKS :: (CPRNG -> (a, CPRNG)) -> KS a
getKeymap :: KS KeyMap
getConfig :: KS Configuration
modConfig :: (Configuration -> Configuration) -> KS ()
instance Typeable Ctx
instance Typeable State
instance Show Ctx
instance Show LogEntry
instance Functor KS
instance Applicative KS
instance Monad KS
instance MonadError Reason KS

module Data.KeyStore.KS.Packet
encocdeEncryptionPacket :: Safeguard -> RSASecretBytes -> EncryptionPacket
decocdeEncryptionPacketE :: EncryptionPacket -> E (Safeguard, RSASecretBytes)
encocdeSignaturePacket :: Safeguard -> RSASignature -> SignaturePacket
decocdeSignaturePacketE :: SignaturePacket -> E (Safeguard, RSASignature)
testBP :: ByteString -> BP a -> IO a
instance Functor BP
instance Applicative BP
instance Monad BP
instance MonadError Reason BP

module Data.KeyStore.KS.Crypto
sizeAesIV :: Octets
sizeOAE :: Octets
defaultEncryptedCopyKS :: Safeguard -> KS EncrypedCopy
saveKS :: EncryptionKey -> ClearText -> KS EncrypedCopyData
restoreKS :: EncrypedCopyData -> EncryptionKey -> KS ClearText
mkAESKeyKS :: EncrypedCopy -> [ClearText] -> KS AESKey
encryptKS :: PublicKey -> ClearText -> KS RSASecretData
decryptKS :: PrivateKey -> RSASecretData -> KS ClearText
decryptE :: PrivateKey -> RSASecretData -> E ClearText
encodeRSASecretData :: RSASecretData -> RSASecretBytes
decodeRSASecretData :: RSASecretBytes -> KS RSASecretData
decodeRSASecretData_ :: ByteString -> E RSASecretData
encryptRSAKS :: PublicKey -> AESKey -> KS RSAEncryptedKey
decryptRSAKS :: PrivateKey -> RSAEncryptedKey -> KS AESKey
decryptRSAE :: PrivateKey -> RSAEncryptedKey -> E AESKey
oaep :: OAEPParams
signKS :: PrivateKey -> ClearText -> KS RSASignature
verifyKS :: PublicKey -> ClearText -> RSASignature -> Bool
pssp :: PSSParams
encryptAESKS :: AESKey -> ClearText -> KS AESSecretData
encryptAES :: AESKey -> IV -> ClearText -> AESSecretData
decryptAES :: AESKey -> AESSecretData -> ClearText
randomAESKeyKS :: Cipher -> KS AESKey
randomIVKS :: KS IV
hashKS :: ClearText -> KS Hash
defaultHashParams :: HashDescription
defaultHashParamsKS :: KS HashDescription
hashKS_ :: HashDescription -> ClearText -> Hash
generateKeysKS :: KS (PublicKey, PrivateKey)
generateKeysKS_ :: Int -> KS (PublicKey, PrivateKey)
decodePrivateKeyDERE :: ClearText -> E PrivateKey
decodePublicKeyDERE :: ClearText -> E PublicKey
encodePrivateKeyDER :: PrivateKey -> ClearText
encodePublicKeyDER :: PublicKey -> ClearText
decodeDERE :: ASN1Object a => ByteString -> E a
encodeDER :: ASN1Object a => a -> ByteString
test_crypto :: Bool

module Data.KeyStore.KS

-- | Encode a key store as a JSON ByteString (discarding any cached
--   cleartext copies of secrets it may have)
keyStoreBytes :: KeyStore -> ByteString
keyStoreFromBytes :: ByteString -> E KeyStore
settingsFromBytes :: ByteString -> E Settings
createRSAKeyPairKS :: Name -> Comment -> Identity -> [Safeguard] -> KS ()

-- | Encrypt a clear text message with a name RSA key pair.
encryptWithRSAKeyKS :: Name -> ClearText -> KS EncryptionPacket
encryptWithRSAKeyKS_ :: Name -> ClearText -> KS RSASecretData

-- | Decrypt an RSA-encrypted message (the RSA secret key named in the
--   message must be available.)
decryptWithRSAKeyKS :: EncryptionPacket -> KS ClearText
decryptWithRSAKeyKS_ :: Name -> RSASecretData -> KS ClearText

-- | Sign a message with a named RSA secret key (which must be available).
signWithRSAKeyKS :: Name -> ClearText -> KS SignaturePacket

-- | Verify that an RSA signature of a message is correct.
verifyWithRSAKeyKS :: ClearText -> SignaturePacket -> KS Bool

-- | Symetrically encrypt a message with a Safeguard (list of names private
--   keys).
encryptWithKeysKS :: Safeguard -> ClearText -> KS EncrypedCopy

-- | Symetrically encrypt a message with a Safeguard (list of names private
--   keys).
decryptWithKeysKS :: EncrypedCopy -> KS ClearText

-- | Create a private key.
createKeyKS :: Name -> Comment -> Identity -> Maybe EnvVar -> Maybe ClearText -> KS ()

-- | Backup all of the keys in the store with their configured backup keys.
backupKeysKS :: KS ()

-- | Remember the secret text for a key -- will record the hash and encrypt
--   it with the configured safeguards, generating an error if any of the
--   safeguards are not available.
rememberKeyKS :: Name -> ClearText -> KS ()

-- | Primitive to make a cryptographic copy (i.e., a safeguard) of the
--   secret text of a key, storing it in the key (and doing nothing if the
--   that safeguard is already present).
secureKeyKS :: Name -> Safeguard -> KS ()

-- | Return all of the keys in the keystore.
getKeysKS :: KS [Key]

-- | List all of the keys in the store, one per line, on the output.
listKS :: KS ()

-- | Print out the information of a particular key.
keyInfoKS :: Name -> KS ()

-- | Try to load the secret copy into the key and return it. (No error is
--   raised if it failed to recover the secret.)
loadKeyKS :: Name -> KS Key

-- | Try to load an encryption or decryption key for an encrypted message.
loadEncryptionKeyKS :: Dirctn -> EncrypedCopy -> KS (Maybe EncryptionKey)
instance Show Line

module Data.KeyStore.IO.IC
data IC
IC :: CtxParams -> Maybe (IORef (Ctx, State)) -> IC
ic_ctx_params :: IC -> CtxParams
ic_cache :: IC -> Maybe (IORef (Ctx, State))

-- | The parameters used to set up a KeyStore session.
data CtxParams
CtxParams :: Maybe FilePath -> Maybe Bool -> Maybe Bool -> CtxParams

-- | location of any explictlt specified keystore file
cp_store :: CtxParams -> Maybe FilePath

-- | whether debug output has been specified enabled or not
cp_debug :: CtxParams -> Maybe Bool

-- | Just True =&gt; do not update keystore
cp_readonly :: CtxParams -> Maybe Bool

-- | Suitable default <a>CtxParams</a>.
defaultCtxParams :: CtxParams

-- | The default place for keystore settings (settings).
defaultSettingsFilePath :: FilePath

-- | Add the standard file extension to a base name (.json).
settingsFilePath :: String -> FilePath

-- | The default file for a keystore (keystore.json).
defaultKeyStoreFilePath :: FilePath

-- | Determine the <a>Ctx</a> and keystore <a>State</a> from
--   <a>CtxParams</a>
determineCtx :: CtxParams -> IO (Ctx, State)

-- | Set up the keystore state.
establishState :: Ctx -> IO State
newGenerator :: IO CPRNG
readKeyStore :: Ctx -> IO KeyStore

-- | Read the JSON-encoded KeyStore settings from the named file.
readSettings :: FilePath -> IO Settings
scanEnv :: KeyStore -> IO (KeyStore, [LogEntry])
errorIO :: String -> IO a
logit :: Ctx -> LogEntry -> IO ()
instance Show CtxParams

module Data.KeyStore.CLI.Command
data CLI
CLI :: CtxParams -> Command -> CLI
cli_params :: CLI -> CtxParams
cli_command :: CLI -> Command
data Command
Version :: Command
Keystore :: Command
Initialise :: FilePath -> Command
UpdateSettings :: FilePath -> Command
ListSettings :: Command
ListSettingOpts :: (Maybe OptEnum) -> Command
AddTrigger :: TriggerID -> Pattern -> FilePath -> Command
RmvTrigger :: TriggerID -> Command
ListTriggers :: Command
Create :: Name -> Comment -> Identity -> (Maybe EnvVar) -> (Maybe FilePath) -> [Safeguard] -> Command
CreateKeyPair :: Name -> Comment -> Identity -> [Safeguard] -> Command
Secure :: Name -> (Maybe FilePath) -> [Safeguard] -> Command
List :: Command
Info :: [Name] -> Command
ShowIdentity :: Bool -> Name -> Command
ShowComment :: Bool -> Name -> Command
ShowDate :: Bool -> Name -> Command
ShowHash :: Bool -> Name -> Command
ShowHashComment :: Bool -> Name -> Command
ShowHashSalt :: Bool -> Name -> Command
ShowPublic :: Bool -> Name -> Command
ShowSecret :: Bool -> Name -> Command
Encrypt :: Name -> FilePath -> FilePath -> Command
Decrypt :: FilePath -> FilePath -> Command
Sign :: Name -> FilePath -> FilePath -> Command
Verify :: FilePath -> FilePath -> Command
Delete :: [Name] -> Command
parseCLI :: IO CLI
parseCLI' :: [String] -> IO CLI
cliInfo :: ParserInfo CLI
cliParser :: Parser CLI
paramsParser :: Parser CtxParams
runParse :: ParserInfo a -> [String] -> IO a
instance Show Command
instance Show CLI

module Data.KeyStore.PasswordManager

-- | The password manager is used for storing locally the passwords and
--   session tokens of a single user. The password used to encode the store
--   is stored in an environment variable and the passwords and tokens are
--   stored in a file. The file and and environment cariable are specified
--   in the <tt>PWConfig</tt> record. (The attributes of each password and
--   session list, including the environment variables that they are
--   communicated through, is statically specified with the PW class
--   below.)
data PMConfig p
PMConfig :: FilePath -> EnvVar -> String -> String -> IO () -> HashDescription -> Bool -> String -> Maybe String -> (PasswordName -> Maybe EnvVar) -> PMConfig p

-- | file in which to store the encrypted passords
_pmc_location :: PMConfig p -> FilePath

-- | the environmant variable containing the master password used to secure
--   the store
_pmc_env_var :: PMConfig p -> EnvVar

-- | error message to be used on failure to locate the keystore
_pmc_keystore_msg :: PMConfig p -> String

-- | error message to be used on failure to locate the master password
_pmc_password_msg :: PMConfig p -> String

-- | for firing up an interactive shell on successful login
_pmc_shell :: PMConfig p -> IO ()

-- | for generating has descriptions (can use <a>defaultHashDescription</a>
--   here)
_pmc_hash_descr :: PMConfig p -> HashDescription

-- | must be true to enable <a>dump</a> commands
_pmc_allow_dumps :: PMConfig p -> Bool

-- | the prefix string to be used in making up the commands from dump
--   scripts
_pmc_dump_prefix :: PMConfig p -> String

-- | the sample script
_pmc_sample_script :: PMConfig p -> Maybe String

-- | map the dynamic (plus) passwords to their environment variables
_pmc_plus_env_var :: PMConfig p -> PasswordName -> Maybe EnvVar

-- | The PW class provides all of the information on the bounded
--   enumeration type used to identify the passwords
class (Bounded p, Enum p, Eq p, Ord p, Show p) => PW p where pwName = PasswordName . pack . show parsePwName = \ pnm -> listToMaybe [p | p <- [minBound .. maxBound], pwName p == pnm] isSession = const Nothing isOneShot = const False enVar = EnvVar . (append "KEY_pw_") . _PasswordName . pwName summarize _ = "" describe p = (unpack $ _PasswordName $ pwName p) ++ ": description to follow"
pwName :: PW p => p -> PasswordName
parsePwName :: PW p => PasswordName -> Maybe p
isSession :: PW p => p -> Maybe (PasswordText -> Either String SessionDescriptor)
isOneShot :: PW p => p -> Bool
enVar :: PW p => p -> EnvVar
summarize :: PW p => p -> String
describe :: PW p => p -> String

-- | we resort to phantom types when we have no other way of passing PW
--   into a function (see <a>defaultSampleScript</a>)
data PW_ p
PW_ :: PW_ p
data SessionDescriptor
SessionDescriptor :: SessionName -> Bool -> SessionDescriptor
_sd_name :: SessionDescriptor -> SessionName
_sd_isOneShot :: SessionDescriptor -> Bool

-- | the client calls <a>collect</a> to bind the passwords into the
--   environment
data CollectConfig p
CollectConfig :: Bool -> [p] -> CollectConfig p

-- | if True , collect will not report an error if the master password is
--   missing
_cc_optional :: CollectConfig p -> Bool

-- | the list of active passwords for this collection
_cc_active :: CollectConfig p -> [p]

-- | raise an error if not logged in and collect all of the passwords
defaultCollectConfig :: PW p => CollectConfig p
data Password
Password :: !PasswordName -> !PasswordText -> !SessionMap -> !Bool -> !Bool -> !UTCTime -> Password
_pw_name :: Password -> !PasswordName
_pw_text :: Password -> !PasswordText
_pw_sessions :: Password -> !SessionMap
_pw_isOneShot :: Password -> !Bool
_pw_primed :: Password -> !Bool
_pw_setup :: Password -> !UTCTime
newtype PasswordName
PasswordName :: Text -> PasswordName
_PasswordName :: PasswordName -> Text
newtype PasswordText
PasswordText :: Text -> PasswordText
_PasswordText :: PasswordText -> Text
newtype SessionName
SessionName :: Text -> SessionName
_SessionName :: SessionName -> Text
newtype EnvVar
EnvVar :: Text -> EnvVar
_EnvVar :: EnvVar -> Text

-- | the password manager CLI: it just needs the config and command line
passwordManager :: PW p => PMConfig p -> [String] -> IO ()

-- | a sample <a>HashDescription</a> generator to help with setting up
--   <a>PMConfig</a>
defaultHashDescription :: Salt -> HashDescription

-- | sample sample-script generator to help with setting up <a>PMConfig</a>
defaultSampleScript :: PW p => PW_ p -> String -> String

-- | hashing the master password to create the private key for securing the
--   store
hashMasterPassword :: PW p => PMConfig p -> String -> PasswordText

-- | bind the master password in the environment
bindMasterPassword :: PW p => PMConfig p -> PasswordText -> IO ()

-- | create an empty passowrd store; if the boolean flag is False then an
--   interactive shell is fired up with access to the new store; if no
--   password is specified then one is read from stdin
setup :: PW p => PMConfig p -> Bool -> Maybe PasswordText -> IO ()

-- | launch an interactive shell with access to the password store; if the
--   bool boolean flag is True then it will loop asking for the passwoord
--   until the correct password is typed (or an error ocurrs, possibly from
--   a SIGint); if no <a>PasswordText</a> is specified then one will be
--   read from stdin
login :: PW p => PMConfig p -> Bool -> Maybe PasswordText -> IO ()

-- | is this the correct master password?
passwordValid :: PW p => PMConfig p -> PasswordText -> IO Bool

-- | is this the correct master password for this keystore? Return the
--   decrypted keystore if so.
passwordValid' :: PW p => PMConfig p -> FilePath -> PasswordText -> IO (Maybe PasswordStore)

-- | is the password store there?
isStorePresent :: PW p => PMConfig p -> IO Bool

-- | are we currently logged in?
amLoggedIn :: PW p => PMConfig p -> IO Bool

-- | is the password/session bound to a value in the store?
isBound :: PW p => PMConfig p -> p -> Maybe SessionName -> IO Bool

-- | import the contents of another keystore into the current keystore
import_ :: PW p => PMConfig p -> FilePath -> Maybe PasswordText -> IO ()

-- | loads a password into the store; if this is a session password and the
--   boolean ss is True then the session will be reset to this password
--   also; if no <a>PasswordText</a> is specified then one will be read
--   from stdin
load :: PW p => PMConfig p -> p -> Maybe PasswordText -> IO ()

-- | load a dynamic password into the Password store
loadPlus :: PW p => PMConfig p -> PasswordName -> Maybe PasswordText -> IO ()

-- | set the comment for the password store
psComment :: PW p => PMConfig p -> PasswordStoreComment -> IO ()

-- | collect the available passwords listed in <a>CollectConfig</a> from
--   the store and bind them in their designated environmants variables
collect :: PW p => PMConfig p -> CollectConfig p -> IO ()

-- | prime a one-shot password so that it will be availabe on the next
--   collection (probably for a deployment); if no password is specified
--   then they are all primed
prime :: PW p => PMConfig p -> Bool -> Maybe p -> IO ()

-- | select a different session for use
select :: PW p => PMConfig p -> Maybe p -> SessionName -> IO ()

-- | delete a password from the store
deletePassword :: PW p => PMConfig p -> p -> IO ()

-- | delete a password from the store
deletePasswordPlus :: PW p => PMConfig p -> Maybe PasswordName -> IO ()

-- | delete a session from the store
deleteSession :: PW p => PMConfig p -> Maybe p -> SessionName -> IO ()

-- | print a status line; if <tt>q</tt> is <tt>True</tt> then don't output
--   anything and exit with fail code 1 if not logged in
status :: PW p => PMConfig p -> Bool -> IO ()

-- | print a status apropriate for a prompt
prompt :: PW p => PMConfig p -> IO ()

-- | list the passwords, one per line; if <tt>a</tt> is set then all
--   passwords will be listed, otherwise just the primed passwords will be
--   listed
passwords :: PW p => PMConfig p -> Bool -> IO ()

-- | list all of the dynamic (+) passwords
passwordsPlus :: PW p => PMConfig p -> Bool -> IO ()

-- | list the sessions, one per line; if <tt>p</tt> is specified then all
--   of the sessions are listed for that password
sessions :: PW p => PMConfig p -> Bool -> Bool -> Maybe p -> IO ()

-- | print the info, including the text descriton, for an individual
--   passowrd
infoPassword :: PW p => PMConfig p -> Bool -> p -> IO ()

-- | get the info on a password
infoPassword_ :: PW p => PMConfig p -> Bool -> p -> IO Doc

-- | print the info for a dynamic (+) password
infoPasswordPlus :: PW p => PMConfig p -> Bool -> PasswordName -> IO ()

-- | get the info on a dynamic (+) password
infoPasswordPlus_ :: PW p => PMConfig p -> Bool -> PasswordName -> IO Doc

-- | dump the store in a s script that can be used to reload it
dump :: PW p => PMConfig p -> Bool -> IO ()

-- | collect the passowrds, bthem into the environmant and launch an
--   interacive shell
collectShell :: PW p => PMConfig p -> IO ()

-- | run a password manager command
passwordManager' :: PW p => PMConfig p -> PMCommand p -> IO ()

-- | the abstract syntax for the passowd manager commands
data PMCommand p
PMCD_version :: PMCommand p
PMCD_setup :: Bool -> (Maybe PasswordText) -> PMCommand p
PMCD_login :: Bool -> (Maybe PasswordText) -> PMCommand p
PMCD_import :: Bool -> FilePath -> (Maybe PasswordText) -> PMCommand p
PMCD_load :: p -> (Maybe PasswordText) -> PMCommand p
PMCD_load_plus :: PasswordName -> (Maybe PasswordText) -> PMCommand p
PMCD_comment :: PasswordStoreComment -> PMCommand p
PMCD_prime :: Bool -> p -> PMCommand p
PMCD_prime_all :: Bool -> PMCommand p
PMCD_select :: (Maybe p) -> SessionName -> PMCommand p
PMCD_delete_password :: p -> PMCommand p
PMCD_delete_password_plus :: (Maybe PasswordName) -> PMCommand p
PMCD_delete_session :: (Maybe p) -> SessionName -> PMCommand p
PMCD_status :: Bool -> PMCommand p
PMCD_prompt :: PMCommand p
PMCD_passwords :: Bool -> PMCommand p
PMCD_passwords_plus :: Bool -> PMCommand p
PMCD_session :: Bool -> PMCommand p
PMCD_sessions :: Bool -> (Maybe p) -> PMCommand p
PMCD_info :: Bool -> p -> PMCommand p
PMCD_info_plus :: Bool -> PasswordName -> PMCommand p
PMCD_dump :: Bool -> PMCommand p
PMCD_collect :: PMCommand p
PMCD_sample_script :: PMCommand p
pmCommandParser :: PW p => PMConfig p -> Parser (PMCommand p)
getStore :: PW p => PMConfig p -> IO PasswordStore
instance Show SessionDescriptor
instance Show p => Show (PMCommand p)


-- | This module provide an IO-based API. The <i>ks</i> executable provides
--   some keystore management functions that can be used from the shell and
--   <a>Data.KeyStore.KeyStore</a> provides the underlying functional
--   model.
module Data.KeyStore.IO

-- | Read the JSON-encoded KeyStore settings from the named file.
readSettings :: FilePath -> IO Settings

-- | The parameters used to set up a KeyStore session.
data CtxParams
CtxParams :: Maybe FilePath -> Maybe Bool -> Maybe Bool -> CtxParams

-- | location of any explictlt specified keystore file
cp_store :: CtxParams -> Maybe FilePath

-- | whether debug output has been specified enabled or not
cp_debug :: CtxParams -> Maybe Bool

-- | Just True =&gt; do not update keystore
cp_readonly :: CtxParams -> Maybe Bool
data IC
IC :: CtxParams -> Maybe (IORef (Ctx, State)) -> IC
ic_ctx_params :: IC -> CtxParams
ic_cache :: IC -> Maybe (IORef (Ctx, State))

-- | Encode a key store as a JSON ByteString (discarding any cached
--   cleartext copies of secrets it may have)
keyStoreBytes :: KeyStore -> ByteString
keyStoreFromBytes :: ByteString -> E KeyStore
settingsFromBytes :: ByteString -> E Settings

-- | The default place for keystore settings (settings).
defaultSettingsFilePath :: FilePath

-- | Add the standard file extension to a base name (.json).
settingsFilePath :: String -> FilePath

-- | The default file for a keystore (keystore.json).
defaultKeyStoreFilePath :: FilePath

-- | Suitable default <a>CtxParams</a>.
defaultCtxParams :: CtxParams

-- | Given <a>CtxParams</a> describing the location of the keystore, etc.,
--   generate an IC for use in the following keystore access functions that
--   will allow context to be cached between calls to these access
--   functions.
instanceCtx :: CtxParams -> IO IC

-- | This functional method will generate an IC that will not cache any
--   state between calls.
instanceCtx_ :: CtxParams -> IC

-- | Generate a new keystore located in the given file with the given
--   global settings.
newKeyStore :: FilePath -> Settings -> IO ()

-- | the filepath of the loaded store
store :: IC -> IO FilePath

-- | List the JSON settings on stdout.
listSettings :: IC -> IO ()

-- | Return the settings associated with the keystore.
settings :: IC -> IO Settings

-- | Update the global settings of a keystore from the given JSON settings.
updateSettings :: IC -> FilePath -> IO ()

-- | List the triggers set up in the keystore on stdout.
listTriggers :: IC -> IO ()

-- | Returns the striggers setup on the keystore.
triggers :: IC -> IO [Trigger]

-- | addTrigger' cariant that erads the setting from a file.
addTrigger :: IC -> TriggerID -> Pattern -> FilePath -> IO ()

-- | Set up a named trigger on a keystore that will fire when a key matches
--   the given pattern establishing the settings.
addTrigger' :: IC -> TriggerID -> Pattern -> Settings -> IO ()

-- | Remove the named trigger from the keystore.
rmvTrigger :: IC -> TriggerID -> IO ()

-- | Create an RSA key pair, encoding the private key in the named
--   Safeguards.
createRSAKeyPair :: IC -> Name -> Comment -> Identity -> [Safeguard] -> IO ()

-- | Create a symmetric key, possibly auto-loaded from an environment
--   variable.
createKey :: IC -> Name -> Comment -> Identity -> Maybe EnvVar -> Maybe ByteString -> IO ()

-- | Adjust a named key.
adjustKey :: IC -> Name -> (Key -> Key) -> IO ()

-- | Load a named key from the named file.
rememberKey :: IC -> Name -> FilePath -> IO ()

-- | Load the named key.
rememberKey_ :: IC -> Name -> ByteString -> IO ()

-- | Encrypt and store the key with the named safeguard.
secureKey :: IC -> Name -> Safeguard -> IO ()

-- | Try and retrieve the secret text for a given key.
loadKey :: IC -> Name -> IO Key

-- | Return the identity of a key.
showIdentity :: IC -> Bool -> Name -> IO ByteString

-- | Return the comment associated with a key.
showComment :: IC -> Bool -> Name -> IO ByteString

-- | Return the creation UTC of a key.
showDate :: IC -> Bool -> Name -> IO ByteString

-- | Return the hash of a key.
showHash :: IC -> Bool -> Name -> IO ByteString

-- | Return the hash comment of a key/
showHashComment :: IC -> Bool -> Name -> IO ByteString

-- | Retuen the hash salt of a key.
showHashSalt :: IC -> Bool -> Name -> IO ByteString

-- | (For public key pairs only) return the public key.
showPublic :: IC -> Bool -> Name -> IO ByteString

-- | Return the secret text of a key (will be the private key for a public
--   key pair).
showSecret :: IC -> Bool -> Name -> IO ByteString

-- | Return all of the keys in the keystore.
keys :: IC -> IO [Key]

-- | List a summary of all of the keys on stdout.
list :: IC -> IO ()
keyInfo :: IC -> Name -> IO ()

-- | Delete a list of keys from the keystore.
deleteKeys :: IC -> [Name] -> IO ()
encrypt :: IC -> Name -> FilePath -> FilePath -> IO ()

-- | Encrypt a <a>ByteString</a> with a named key.
encrypt_ :: IC -> Name -> ByteString -> IO ByteString

-- | Encrypt a <a>ByteString</a> with a named key to produce a
--   <a>RSASecretData</a>.
encrypt__ :: IC -> Name -> ByteString -> IO RSASecretData

-- | Decrypt a file with the named key (whose secret text must be
--   accessible).
decrypt :: IC -> FilePath -> FilePath -> IO ()

-- | Decrypt a <a>ByteString</a> with the named key (whose secret text must
--   be accessible).
decrypt_ :: IC -> ByteString -> IO ByteString

-- | Decrypt a <a>ByteString</a> from a <a>RSASecretData</a> with the named
--   key (whose secret text must be accessible).
decrypt__ :: IC -> Name -> RSASecretData -> IO ByteString

-- | Sign a file with the named key (whose secret text must be accessible)
--   to produce a detached signature in the named file.
sign :: IC -> Name -> FilePath -> FilePath -> IO ()

-- | Sign a <a>ByteString</a> with the named key (whose secret text must be
--   accessible) to produce a detached signature.
sign_ :: IC -> Name -> ByteString -> IO ByteString

-- | Verify that a signature for a file via the named public key.
verify :: IC -> FilePath -> FilePath -> IO Bool

-- | Verify that a signature for a <a>ByteString</a> via the named public
--   key.
verify_ :: IC -> ByteString -> ByteString -> IO Bool

-- | Run a KS function in an IO context, dealing with keystore updates,
--   output, debug logging and errors.
run :: IC -> KS a -> IO a
getKeystore :: IC -> IO KeyStore
getState :: IC -> IO State
getCtxState :: IC -> IO (Ctx, State)
putCtxState :: IC -> Ctx -> State -> IO ()

module Data.KeyStore.Sections
data SECTIONS h s k
SECTIONS :: SECTIONS h s k
class (Bounded a, Enum a, Eq a, Ord a, Show a) => Code a where decode s = listToMaybe [k | k <- [minBound .. maxBound], encode k == s]
encode :: Code a => a -> String
decode :: Code a => String -> Maybe a

-- | This class describes the relationship between the host-id, section-id
--   and key-id types used to build a hierarchical deployment model for a
--   keystore. A minimal instance would have to define hostDeploySection.
--   The deploy example program contains a fairly thorough example of this
--   class being used to implement a quite realitic deploymrnt scenario.
class (Code h, Code s, Code k) => Sections h s k | s -> h, k -> h, h -> s, k -> s, s -> k, h -> k where sectionType = const ST_keys superSections = const [] keyIsHostIndexed = const Nothing keyIsInSection = const $ const True getKeyData mb s k = snd <$> getKeyDataWithMode mb s k getKeyDataWithMode Nothing s = get_kd $ encode s getKeyDataWithMode (Just h) _ = get_kd $ encode h sectionSettings = const $ return mempty describeKey k = "The '" ++ encode k ++ "' key." describeSection s = "The '" ++ encode s ++ "' Section." sectionPWEnvVar = EnvVar . pack . ("KEY_pw_" ++) . encode
hostDeploySection :: Sections h s k => h -> s
sectionType :: Sections h s k => s -> SectionType
superSections :: Sections h s k => s -> [s]
keyIsHostIndexed :: Sections h s k => k -> Maybe (h -> Bool)
keyIsInSection :: Sections h s k => k -> s -> Bool
getKeyData :: Sections h s k => Maybe h -> s -> k -> IO KeyData
getKeyDataWithMode :: Sections h s k => Maybe h -> s -> k -> IO (KeyDataMode, KeyData)
sectionSettings :: Sections h s k => Maybe s -> IO Settings
describeKey :: Sections h s k => k -> String
describeSection :: Sections h s k => s -> String
sectionPWEnvVar :: Sections h s k => s -> EnvVar

-- | Sections are used to hold the top (master) key for the keystore, its
--   signing key, or deployment keys
data SectionType
ST_top :: SectionType
ST_signing :: SectionType
ST_keys :: SectionType

-- | A key is triple containing some (plain-text) identity information for
--   the key, some comment text and the secret text to be encrypted. Note
--   that the keystore doesn't rely on this information but merely stores
--   it. (They can be empty.) The identity field will often be used to
--   storte the key's identity within the system that generates and uses
--   it, ofor example.
data KeyData
KeyData :: Identity -> Comment -> ByteString -> KeyData
kd_identity :: KeyData -> Identity
kd_comment :: KeyData -> Comment
kd_secret :: KeyData -> ByteString
data KeyDataMode
KDM_static :: KeyDataMode
KDM_random :: KeyDataMode

-- | One, many or all of the keys in a store may be rotated at a time. we
--   use one of these to specify which keys are to be rotated.
type KeyPredicate h s k = Maybe h -> s -> k -> Bool

-- | This type specifies the reasons that an attempt to access a key from
--   the store has failed. This kind of failure suggests an inconsistent
--   model and will be raised regardless of which keys have been stored in
--   the store.
data RetrieveDg
RDG_key_not_reachable :: RetrieveDg
RDG_no_such_host_key :: RetrieveDg

-- | Here we create the store and rotate in a buch of keys. N.B. All of the
--   section passwords must be bound in the process environment before
--   calling procedure.
initialise :: Sections h s k => CtxParams -> KeyPredicate h s k -> IO ()

-- | Rotate in a set of keys specified by the predicate.
rotate :: Sections h s k => IC -> KeyPredicate h s k -> IO ()

-- | Rotate in a set of keys specified by the predicate, rotating each key
--   only if it has changed: NB the check is contingent on the secret text
--   being accessible; if the secret text is not accessible then the
--   rotation will happen.
rotateIfChanged :: Sections h s k => IC -> KeyPredicate h s k -> IO ()

-- | Rotate in a set of keys specified by the predicate with the first
--   argument controlling whether to squash duplicate rotations
rotate_ :: Sections h s k => IC -> Maybe KeyDataMode -> Bool -> KeyPredicate h s k -> IO ()

-- | Retrieve the keys for a given host from the store. Note that the whole
--   history for the given key is returned. Note also that the secret text
--   may not be present if it is not accessible (depnding upon hwich
--   section passwords are correctly bound in the process environment).
--   Note also that the <a>Retrieve</a> diagnostic should not fail if a
--   coherent model has been ddefined for <a>Sections</a>.
retrieve :: Sections h s k => IC -> h -> k -> IO (Retrieve [Key])

-- | Sign the keystore. (Requites the password for the signing section to
--   be correctly bound in the environment)
signKeystore :: Sections h s k => IC -> SECTIONS h s k -> IO ByteString
verifyKeystore :: Sections h s k => IC -> SECTIONS h s k -> ByteString -> IO Bool

-- | A predicate specifying all of the keys in the store.
noKeys :: KeyPredicate h s k

-- | A predicate specifying none of the keys in the keystore.
allKeys :: KeyPredicate h s k

-- | List all of the keys specified by a KeyPredicate
listKeys :: Sections h s k => KeyPredicate h s k -> [(Maybe h, s, k)]

-- | A utility for specifing a slice of the keys in the store, optionally
--   specifying host section and key that should belong to the slice. (If
--   the host is specified then the resulting predicate will only include
--   host-indexed keys belonging to the given host.)
keyPrededicate :: Sections h s k => Maybe h -> Maybe s -> Maybe k -> KeyPredicate h s k
keyHelp :: Sections h s k => Maybe k -> Text
sectionHelp :: Sections h s k => Maybe s -> IO Text

-- | List a shell script for establishing all of the keys in the
--   environment. NB For this to work the password for the top section (or
--   the passwords for all of the sections must be bound if the store does
--   not maintain a top key).
secretKeySummary :: Sections h s k => IC -> SECTIONS h s k -> IO Text

-- | List a shell script for storing the public signing key for the store.
publicKeySummary :: Sections h s k => IC -> SECTIONS h s k -> FilePath -> IO Text

-- | List all of the keys that have the given name as their prefix. If the
--   generic name of a key is given then it will list the complete history
--   for the key, the current (or most recent) entry first.
locateKeys :: Sections h s k => IC -> SECTIONS h s k -> Name -> IO [Key]

-- | Return the generic name for a given key thst is used by the specified
--   host, returning a failure diagnostic if the host does not have such a
--   key on the given Section model.
keyName :: Sections h s k => h -> k -> Retrieve Name

-- | Basic function for generating a key name from the host (if it is host
--   indexex), section name and key id.
keyName_ :: Sections h s k => Maybe h -> s -> k -> Name

-- | The name of the key that stores the password for a given sections.
passwordName :: Sections h s k => s -> Name
mkSection :: Sections h s k => IC -> s -> IO ()
instance Show SectionType
instance Eq SectionType
instance Ord SectionType
instance Show KeyData
instance Eq KeyData
instance Bounded KeyDataMode
instance Enum KeyDataMode
instance Eq KeyDataMode
instance Ord KeyDataMode
instance Show KeyDataMode
instance Show RetrieveDg
instance Eq RetrieveDg
instance Ord RetrieveDg
instance Monad Munch
instance Alternative Munch
instance Applicative Munch
instance Functor Munch

module Data.KeyStore.CLI
cli :: IO ()
cli' :: Maybe CtxParams -> [String] -> IO ()
paramsParser :: Parser CtxParams
runParse :: ParserInfo a -> [String] -> IO a
cliInfo :: ParserInfo CLI
cliParser :: Parser CLI
execute :: Maybe CtxParams -> CLI -> IO ()
data Command
Version :: Command
Keystore :: Command
Initialise :: FilePath -> Command
UpdateSettings :: FilePath -> Command
ListSettings :: Command
ListSettingOpts :: (Maybe OptEnum) -> Command
AddTrigger :: TriggerID -> Pattern -> FilePath -> Command
RmvTrigger :: TriggerID -> Command
ListTriggers :: Command
Create :: Name -> Comment -> Identity -> (Maybe EnvVar) -> (Maybe FilePath) -> [Safeguard] -> Command
CreateKeyPair :: Name -> Comment -> Identity -> [Safeguard] -> Command
Secure :: Name -> (Maybe FilePath) -> [Safeguard] -> Command
List :: Command
Info :: [Name] -> Command
ShowIdentity :: Bool -> Name -> Command
ShowComment :: Bool -> Name -> Command
ShowDate :: Bool -> Name -> Command
ShowHash :: Bool -> Name -> Command
ShowHashComment :: Bool -> Name -> Command
ShowHashSalt :: Bool -> Name -> Command
ShowPublic :: Bool -> Name -> Command
ShowSecret :: Bool -> Name -> Command
Encrypt :: Name -> FilePath -> FilePath -> Command
Decrypt :: FilePath -> FilePath -> Command
Sign :: Name -> FilePath -> FilePath -> Command
Verify :: FilePath -> FilePath -> Command
Delete :: [Name] -> Command

-- | The parameters used to set up a KeyStore session.
data CtxParams
CtxParams :: Maybe FilePath -> Maybe Bool -> Maybe Bool -> CtxParams

-- | location of any explictlt specified keystore file
cp_store :: CtxParams -> Maybe FilePath

-- | whether debug output has been specified enabled or not
cp_debug :: CtxParams -> Maybe Bool

-- | Just True =&gt; do not update keystore
cp_readonly :: CtxParams -> Maybe Bool
data CLI
CLI :: CtxParams -> Command -> CLI
cli_params :: CLI -> CtxParams
cli_command :: CLI -> Command

module Data.KeyStore
