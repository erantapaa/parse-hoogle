-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bindings for the Z3 Theorem Prover
--   
--   Bindings for the (now open source!) Z3 4.<i>x</i> Theorem Prover
--   (<a>https://github.com/Z3Prover/z3</a>).
--   
--   <ul>
--   <li><a>Z3.Base.C</a> provides the raw foreign imports from Z3's C
--   API.</li>
--   <li><a>Z3.Base</a> does the marshaling of values between Haskell and
--   C, and transparently handles reference counting of Z3 objects for
--   you.</li>
--   <li><a>Z3.Monad</a> provides a convenient monadic wrapper for the
--   common usage scenario.</li>
--   </ul>
--   
--   Examples:
--   <a>https://bitbucket.org/iago/z3-haskell/src/tip/examples</a>
--   
--   Changelog:
--   <a>https://bitbucket.org/iago/z3-haskell/src/tip/CHANGES.md</a>
--   
--   Installation:
--   
--   <ul>
--   <li><i>Unix-like</i>: Just be sure to use the standard locations for
--   dynamic libraries (/usr/lib) and header files (/usr/include), or else
--   use the --extra-lib-dirs and --extra-include-dirs Cabal flags.</li>
--   </ul>
--   
--   (Hackage reports a build failure because Z3's library is missing.)
@package z3
@version 4.1.0


-- | Z3 API foreign imports.
module Z3.Base.C
data Z3_config
data Z3_context
data Z3_symbol
data Z3_ast
data Z3_sort
data Z3_func_decl
data Z3_app
data Z3_pattern
data Z3_constructor
data Z3_model
data Z3_func_interp
data Z3_func_entry
data Z3_solver
data Z3_params
data Z3_ast_vector

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga6c2de6ea89b244e37c3ffb17a9ea2a89</a>
newtype Z3_lbool
Z3_lbool :: CInt -> Z3_lbool
z3_l_true :: Z3_lbool
z3_l_undef :: Z3_lbool
z3_l_false :: Z3_lbool

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga3a65ded0ada3ee285865759a21140eeb</a>
newtype Z3_bool
Z3_bool :: CInt -> Z3_bool

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga311274c8a65a5d25cf715ebdf0c68747</a>
type Z3_error_handler = Ptr Z3_context -> Z3_error_code -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gad86c8730a2e4e61bac585b240a6288d4</a>
z3_true :: Z3_bool

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga1d9cee57472b2c7623642f123b8f1781</a>
z3_false :: Z3_bool

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga49f047b93b0282e686956678da5b86b1</a>
type Z3_string = CString

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga0112dc1e8e08a19bf7a4299bb09a9727</a>
type Z3_ast_print_mode = CInt
z3_print_smtlib_full :: Z3_ast_print_mode
z3_print_low_level :: Z3_ast_print_mode
z3_print_smtlib_compliant :: Z3_ast_print_mode
z3_print_smtlib2_compliant :: Z3_ast_print_mode

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaa9f9e7b1b5b81381fab96debbaaa638f</a>
type Z3_error_code = CInt
z3_ok :: Z3_error_code
z3_sort_error :: Z3_error_code
z3_iob :: Z3_error_code
z3_invalid_arg :: Z3_error_code
z3_parser_error :: Z3_error_code
z3_no_parser :: Z3_error_code
z3_invalid_pattern :: Z3_error_code
z3_memout_fail :: Z3_error_code
z3_file_access_error :: Z3_error_code

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga015148ad21a032e79a496629651dedb8</a>
type Z3_ast_kind = CInt
z3_numeral_ast :: Z3_ast_kind
z3_internal_fatal :: Z3_error_code
z3_app_ast :: Z3_ast_kind
z3_invalid_usage :: Z3_error_code
z3_var_ast :: Z3_ast_kind
z3_dec_ref_error :: Z3_error_code
z3_quantifier_ast :: Z3_ast_kind
z3_exception :: Z3_error_code
z3_sort_ast :: Z3_ast_kind
z3_func_decl_ast :: Z3_ast_kind
z3_unknown_ast :: Z3_ast_kind

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga7d6c40d9b79fe8a8851cc8540970787f</a>
z3_mk_config :: IO (Ptr Z3_config)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga5e620acf5d55d0271097c9bb97219774</a>
z3_del_config :: Ptr Z3_config -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga001ade87a1671fe77d7e53ed0f4f1ec3</a>
z3_set_param_value :: Ptr Z3_config -> Z3_string -> Z3_string -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga98acd59d946eceb4f261bc50489216ee</a>
z3_mk_context_rc :: Ptr Z3_config -> IO (Ptr Z3_context)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga556eae80ed43ab13e1e7dc3b38c35200</a>
z3_del_context :: Ptr Z3_context -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga4a11514494fbf3467b89f0a80ac81e7a</a>
z3_inc_ref :: Ptr Z3_context -> Ptr Z3_ast -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga9cd52225142c085630495044acc68bd2</a>
z3_dec_ref :: Ptr Z3_context -> Ptr Z3_ast -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga3df806baf6124df3e63a58cf23e12411</a>
z3_mk_int_symbol :: Ptr Z3_context -> CInt -> IO (Ptr Z3_symbol)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gafebb0d3c212927cf7834c3a20a84ecae</a>
z3_mk_string_symbol :: Ptr Z3_context -> Z3_string -> IO (Ptr Z3_symbol)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga57c27f2c4e9eccf17072a84c6cecb1db</a>
z3_sort_to_ast :: Ptr Z3_context -> Ptr Z3_sort -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga736e88741af1c178cbebf94c49aa42de</a>
z3_mk_uninterpreted_sort :: Ptr Z3_context -> Ptr Z3_symbol -> IO (Ptr Z3_sort)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gacdc73510b69a010b71793d429015f342</a>
z3_mk_bool_sort :: Ptr Z3_context -> IO (Ptr Z3_sort)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga6cd426ab5748653b77d389fd3eac1015</a>
z3_mk_int_sort :: Ptr Z3_context -> IO (Ptr Z3_sort)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga40ef93b9738485caed6dc84631c3c1a0</a>
z3_mk_real_sort :: Ptr Z3_context -> IO (Ptr Z3_sort)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaeed000a1bbb84b6ca6fdaac6cf0c1688</a>
z3_mk_bv_sort :: Ptr Z3_context -> CUInt -> IO (Ptr Z3_sort)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gafe617994cce1b516f46128e448c84445</a>
z3_mk_array_sort :: Ptr Z3_context -> Ptr Z3_sort -> Ptr Z3_sort -> IO (Ptr Z3_sort)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga7156b9c0a76a28fae46c81f8e3cdf0f1</a>
z3_mk_tuple_sort :: Ptr Z3_context -> Ptr Z3_symbol -> CUInt -> Ptr (Ptr Z3_symbol) -> Ptr (Ptr Z3_sort) -> Ptr (Ptr Z3_func_decl) -> Ptr (Ptr Z3_func_decl) -> IO (Ptr Z3_sort)
z3_mk_constructor :: Ptr Z3_context -> Ptr Z3_symbol -> Ptr Z3_symbol -> CUInt -> Ptr (Ptr Z3_symbol) -> Ptr (Ptr Z3_sort) -> Ptr CUInt -> IO (Ptr Z3_constructor)
z3_del_constructor :: Ptr Z3_context -> Ptr Z3_constructor -> IO ()
z3_mk_datatype :: Ptr Z3_context -> Ptr Z3_symbol -> CUInt -> Ptr (Ptr Z3_constructor) -> IO (Ptr Z3_sort)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga6865879523e7e882d7e50a2d8445ac8b</a>
z3_mk_set_sort :: Ptr Z3_context -> Ptr Z3_sort -> IO (Ptr Z3_sort)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaa5c5e2602a44d5f1373f077434859ca2</a>
z3_mk_func_decl :: Ptr Z3_context -> Ptr Z3_symbol -> CUInt -> Ptr (Ptr Z3_sort) -> Ptr Z3_sort -> IO (Ptr Z3_func_decl)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga33a202d86bf628bfab9b6f437536cebe</a>
z3_mk_app :: Ptr Z3_context -> Ptr Z3_func_decl -> CUInt -> Ptr (Ptr Z3_ast) -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga093c9703393f33ae282ec5e8729354ef</a>
z3_mk_const :: Ptr Z3_context -> Ptr Z3_symbol -> Ptr Z3_sort -> IO (Ptr Z3_ast)
z3_mk_fresh_const :: Ptr Z3_context -> Z3_string -> Ptr Z3_sort -> IO (Ptr Z3_ast)
z3_mk_fresh_func_decl :: Ptr z3_context -> Z3_string -> CUInt -> Ptr (Ptr Z3_sort) -> Ptr Z3_sort -> IO (Ptr Z3_func_decl)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gae898e7380409bbc57b56cc5205ef1db7</a>
z3_mk_true :: Ptr Z3_context -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga5952ac17671117a02001fed6575c778d</a>
z3_mk_false :: Ptr Z3_context -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga95a19ce675b70e22bb0401f7137af37c</a>
z3_mk_eq :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaa076d3a668e0ec97d61744403153ecf7</a>
z3_mk_distinct :: Ptr Z3_context -> CUInt -> Ptr (Ptr Z3_ast) -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga3329538091996eb7b3dc677760a61072</a>
z3_mk_not :: Ptr Z3_context -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga94417eed5c36e1ad48bcfc8ad6e83547</a>
z3_mk_ite :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga930a8e844d345fbebc498ac43a696042</a>
z3_mk_iff :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gac829c0e25bbbd30343bf073f7b524517</a>
z3_mk_implies :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gacc6d1b848032dec0c4617b594d4229ec</a>
z3_mk_xor :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gacde98ce4a8ed1dde50b9669db4838c61</a>
z3_mk_and :: Ptr Z3_context -> CUInt -> Ptr (Ptr Z3_ast) -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga00866d16331d505620a6c515302021f9</a>
z3_mk_or :: Ptr Z3_context -> CUInt -> Ptr (Ptr Z3_ast) -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga4e4ac0a4e53eee0b4b0ef159ed7d0cd5</a>
z3_mk_add :: Ptr Z3_context -> CUInt -> Ptr (Ptr Z3_ast) -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gab9affbf8401a18eea474b59ad4adc890</a>
z3_mk_mul :: Ptr Z3_context -> CUInt -> Ptr (Ptr Z3_ast) -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga4f5fea9b683f9e674fd8f14d676cc9a9</a>
z3_mk_sub :: Ptr Z3_context -> CUInt -> Ptr (Ptr Z3_ast) -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gadcd2929ad732937e25f34277ce4988ea</a>
z3_mk_unary_minus :: Ptr Z3_context -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga1ac60ee8307af8d0b900375914194ff3</a>
z3_mk_div :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga8e350ac77e6b8fe805f57efe196e7713</a>
z3_mk_mod :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga2fcdb17f9039bbdaddf8a30d037bd9ff</a>
z3_mk_rem :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga58a3dc67c5de52cf599c346803ba1534</a>
z3_mk_lt :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaa9a33d11096841f4e8c407f1578bc0bf</a>
z3_mk_le :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga46167b86067586bb742c0557d7babfd3</a>
z3_mk_gt :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gad9245cbadb80b192323d01a8360fb942</a>
z3_mk_ge :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga7130641e614c7ebafd28ae16a7681a21</a>
z3_mk_int2real :: Ptr Z3_context -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga759b6563ba1204aae55289009a3fdc6d</a>
z3_mk_real2int :: Ptr Z3_context -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaac2ad0fb04e4900fdb4add438d137ad3</a>
z3_mk_is_int :: Ptr Z3_context -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga36cf75c92c54c1ca633a230344f23080</a>
z3_mk_bvnot :: Ptr Z3_context -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaccc04f2b58903279b1b3be589b00a7d8</a>
z3_mk_bvredand :: Ptr Z3_context -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gafd18e127c0586abf47ad9cd96895f7d2</a>
z3_mk_bvredor :: Ptr Z3_context -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gab96e0ea55334cbcd5a0e79323b57615d</a>
z3_mk_bvand :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga77a6ae233fb3371d187c6d559b2843f5</a>
z3_mk_bvor :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga0a3821ea00b1c762205f73e4bc29e7d8</a>
z3_mk_bvxor :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga96dc37d36efd658fff5b2b4df49b0e61</a>
z3_mk_bvnand :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gabf15059e9e8a2eafe4929fdfd259aadb</a>
z3_mk_bvnor :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga784f5ca36a4b03b93c67242cc94b21d6</a>
z3_mk_bvxnor :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   &lt;<a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga0c78be00c03eda4ed6a983224ed5c7b7</a>
z3_mk_bvneg :: Ptr Z3_context -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga819814e33573f3f9948b32fdc5311158</a>
z3_mk_bvadd :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga688c9aa1347888c7a51be4e46c19178e</a>
z3_mk_bvsub :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga6abd3dde2a1ceff1704cf7221a72258c</a>
z3_mk_bvmul :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga56ce0cd61666c6f8cf5777286f590544</a>
z3_mk_bvudiv :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gad240fedb2fda1c1005b8e9d3c7f3d5a0</a>
z3_mk_bvsdiv :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga5df4298ec835e43ddc9e3e0bae690c8d</a>
z3_mk_bvurem :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga46c18a3042fca174fe659d3185693db1</a>
z3_mk_bvsrem :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga95dac8e6eecb50f63cb82038560e0879</a>
z3_mk_bvsmod :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga5774b22e93abcaf9b594672af6c7c3c4</a>
z3_mk_bvult :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga8ce08af4ed1fbdf08d4d6e63d171663a</a>
z3_mk_bvslt :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gab738b89de0410e70c089d3ac9e696e87</a>
z3_mk_bvule :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gab7c026feb93e7d2eab180e96f1e6255d</a>
z3_mk_bvsle :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gade58fbfcf61b67bf8c4a441490d3c4df</a>
z3_mk_bvuge :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaeec3414c0e8a90a6aa5a23af36bf6dc5</a>
z3_mk_bvsge :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga063ab9f16246c99e5c1c893613927ee3</a>
z3_mk_bvugt :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga4e93a985aa2a7812c7c11a2c65d7c5f0</a>
z3_mk_bvsgt :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gae774128fa5e9ff7458a36bd10e6ca0fa</a>
z3_mk_concat :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga32d2fe7563f3e6b114c1b97b205d4317</a>
z3_mk_extract :: Ptr Z3_context -> CUInt -> CUInt -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gad29099270b36d0680bb54b560353c10e</a>
z3_mk_sign_ext :: Ptr Z3_context -> CUInt -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gac9322fae11365a78640baf9078c428b3</a>
z3_mk_zero_ext :: Ptr Z3_context -> CUInt -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga03e81721502ea225c264d1f556c9119d</a>
z3_mk_repeat :: Ptr Z3_context -> CUInt -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gac8d5e776c786c1172fa0d7dfede454e1</a>
z3_mk_bvshl :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gac59645a6edadad79a201f417e4e0c512</a>
z3_mk_bvlshr :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga674b580ad605ba1c2c9f9d3748be87c4</a>
z3_mk_bvashr :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga4932b7d08fea079dd903cd857a52dcda</a>
z3_mk_rotate_left :: Ptr Z3_context -> CUInt -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga3b94e1bf87ecd1a1858af8ebc1da4a1c</a>
z3_mk_rotate_right :: Ptr Z3_context -> CUInt -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaf46f1cb80e5a56044591a76e7c89e5e7</a>
z3_mk_ext_rotate_left :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gabb227526c592b523879083f12aab281f</a>
z3_mk_ext_rotate_right :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga35f89eb05df43fbd9cce7200cc1f30b5</a>
z3_mk_int2bv :: Ptr Z3_context -> CUInt -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gac87b227dc3821d57258d7f53a28323d4</a>
z3_mk_bv2int :: Ptr Z3_context -> Ptr Z3_ast -> Z3_bool -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga88f6b5ec876f05e0d7ba51e96c4b077f</a>
z3_mk_bvadd_no_overflow :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> Z3_bool -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga1e2b1927cf4e50000c1600d47a152947</a>
z3_mk_bvadd_no_underflow :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga785f8127b87e0b42130e6d8f52167d7c</a>
z3_mk_bvsub_no_overflow :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga6480850f9fa01e14aea936c88ff184c4</a>
z3_mk_bvsub_no_underflow :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaa17e7b2c33dfe2abbd74d390927ae83e</a>
z3_mk_bvsdiv_no_overflow :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gae9c5d72605ddcd0e76657341eaccb6c7</a>
z3_mk_bvneg_no_overflow :: Ptr Z3_context -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga86f4415719d295a2f6845c70b3aaa1df</a>
z3_mk_bvmul_no_overflow :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> Z3_bool -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga501ccc01d737aad3ede5699741717fda</a>
z3_mk_bvmul_no_underflow :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga38f423f3683379e7f597a7fe59eccb67</a>
z3_mk_select :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gae305a4f54b4a64f7e5973ae6ccb13593</a>
z3_mk_store :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga84ea6f0c32b99c70033feaa8f00e8f2d</a>
z3_mk_const_array :: Ptr Z3_context -> Ptr Z3_sort -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga9150242d9430a8c3d55d2ca3b9a4362d</a>
z3_mk_map :: Ptr Z3_context -> Ptr Z3_func_decl -> CUInt -> Ptr (Ptr Z3_ast) -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga78e89cca82f0ab4d5f4e662e5e5fba7d</a>
z3_mk_array_default :: Ptr Z3_context -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga358b6b80509a567148f1c0ca9252118c</a>
z3_mk_empty_set :: Ptr Z3_context -> Ptr Z3_sort -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga5e92662c657374f7332aa32ce4503dd2</a>
z3_mk_full_set :: Ptr Z3_context -> Ptr Z3_sort -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga856c3d0e28ce720f53912c2bbdd76175</a>
z3_mk_set_add :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga80e883f39dd3b88f9d0745c8a5b91d1d</a>
z3_mk_set_del :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga4050162a13d539b8913200963bb4743c</a>
z3_mk_set_union :: Ptr Z3_context -> CUInt -> Ptr (Ptr Z3_ast) -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga8a8abff0ebe6aeeaa6c919eaa013049d</a>
z3_mk_set_intersect :: Ptr Z3_context -> CUInt -> Ptr (Ptr Z3_ast) -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gabb49c62f70b8198362e1a29ba6d8bde1</a>
z3_mk_set_difference :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga5c57143c9229cdf730c5103ff696590f</a>
z3_mk_set_complement :: Ptr Z3_context -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gac6e516f3dce0bdd41095c6d6daf56063</a>
z3_mk_set_member :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga139c5803af0e86464adc7cedc53e7f3a</a>
z3_mk_set_subset :: Ptr Z3_context -> Ptr Z3_ast -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gac8aca397e32ca33618d8024bff32948c</a>
z3_mk_numeral :: Ptr Z3_context -> Z3_string -> Ptr Z3_sort -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gabe0bbc1e01a084a75506a62e5e6900b3</a>
z3_mk_real :: Ptr Z3_context -> CInt -> CInt -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga8779204998136569c3e166c34cfd3e2c</a>
z3_mk_int :: Ptr Z3_context -> CInt -> Ptr Z3_sort -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga7201b6231b61421c005457206760a121</a>
z3_mk_unsigned_int :: Ptr Z3_context -> CUInt -> Ptr Z3_sort -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga42cc319787d485d9cb665d80e02d206f</a>
z3_mk_int64 :: Ptr Z3_context -> CLLong -> Ptr Z3_sort -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga88a165138162a8bac401672f0a1b7891</a>
z3_mk_unsigned_int64 :: Ptr Z3_context -> CULLong -> Ptr Z3_sort -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaf15c95b66dc3b0af735774ee401a6f85</a>
z3_mk_pattern :: Ptr Z3_context -> CUInt -> Ptr (Ptr Z3_ast) -> IO (Ptr Z3_pattern)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga1d4da8849fca699b345322f8ee1fa31e</a>
z3_mk_bound :: Ptr Z3_context -> CUInt -> Ptr Z3_sort -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga7e975b7d7ac96de1db73d8f71166c663</a>
z3_mk_forall :: Ptr Z3_context -> CUInt -> CUInt -> Ptr (Ptr Z3_pattern) -> CUInt -> Ptr (Ptr Z3_sort) -> Ptr (Ptr Z3_symbol) -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Referece:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga4ffce34ff9117e6243283f11d87c1407</a>
z3_mk_exists :: Ptr Z3_context -> CUInt -> CUInt -> Ptr (Ptr Z3_pattern) -> CUInt -> Ptr (Ptr Z3_sort) -> Ptr (Ptr Z3_symbol) -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gabdb40b3ac220bce5a3801e6d29fb3bb6</a>
z3_mk_forall_const :: Ptr Z3_context -> CUInt -> CUInt -> Ptr (Ptr Z3_app) -> CUInt -> Ptr (Ptr Z3_pattern) -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga2011bea0f4445d58ec4d7cefe4499ceb</a>
z3_mk_exists_const :: Ptr Z3_context -> CUInt -> CUInt -> Ptr (Ptr Z3_app) -> CUInt -> Ptr (Ptr Z3_pattern) -> Ptr Z3_ast -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gadc82da786f3b558de8ded05bf6478902</a>
z3_func_decl_to_ast :: Ptr Z3_context -> Ptr Z3_func_decl -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga4c43608feea4cae363ef9c520c239a5c</a>
z3_get_ast_kind :: Ptr Z3_context -> Ptr Z3_ast -> IO Z3_ast_kind
z3_get_app_num_args :: Ptr Z3_context -> Ptr Z3_app -> IO CUInt
z3_get_app_arg :: Ptr Z3_context -> Ptr Z3_app -> CUInt -> IO (Ptr Z3_ast)
z3_get_app_decl :: Ptr Z3_context -> Ptr Z3_app -> IO (Ptr Z3_func_decl)
z3_get_datatype_sort_num_constructors :: Ptr Z3_context -> Ptr Z3_sort -> IO CUInt
z3_get_datatype_sort_constructor :: Ptr Z3_context -> Ptr Z3_sort -> CUInt -> IO (Ptr Z3_func_decl)
z3_get_datatype_sort_recognizer :: Ptr Z3_context -> Ptr Z3_sort -> CUInt -> IO (Ptr Z3_func_decl)
z3_get_datatype_sort_constructor_accessor :: Ptr Z3_context -> Ptr Z3_sort -> CUInt -> CUInt -> IO (Ptr Z3_func_decl)
z3_get_decl_name :: Ptr Z3_context -> Ptr Z3_func_decl -> IO (Ptr Z3_symbol)
z3_get_symbol_string :: Ptr Z3_context -> Ptr Z3_symbol -> IO Z3_string

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga8fc3550edace7bc046e16d1f96ddb419</a>
z3_get_bv_sort_size :: Ptr Z3_context -> Ptr Z3_sort -> IO CUInt

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gae259256eb0f2c10e48fc6227760b7fda</a>
z3_app_to_ast :: Ptr Z3_context -> Ptr Z3_app -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga0a4dac7e9397ff067136354cd33cb933</a>
z3_get_sort :: Ptr Z3_context -> Ptr Z3_ast -> IO (Ptr Z3_sort)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga133aaa1ec31af9b570ed7627a3c8c5a4</a>
z3_get_bool_value :: Ptr Z3_context -> Ptr Z3_ast -> IO Z3_lbool

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga94617ef18fa7157e1a3f85db625d2f4b</a>
z3_get_numeral_string :: Ptr Z3_context -> Ptr Z3_ast -> IO Z3_string

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaf9345fd0822d7e9928dd4ab14a09765b</a>
z3_to_app :: Ptr Z3_context -> Ptr Z3_ast -> IO (Ptr Z3_app)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gafe4334258b639fa1f8754375b9b56fd7</a>
z3_pattern_to_ast :: Ptr Z3_context -> Ptr Z3_pattern -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga99d6a99e914fcb11e5dcf9fcc3584425</a>
z3_ast_vector_size :: Ptr Z3_context -> Ptr Z3_ast_vector -> IO CUInt

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga3a90216036017ce16db63fb3aa5f6047</a>
z3_ast_vector_get :: Ptr Z3_context -> Ptr Z3_ast_vector -> CUInt -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaea0024e05e6f82434ff31e6ec6fab432</a>
z3_ast_vector_inc_ref :: Ptr Z3_context -> Ptr Z3_ast_vector -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gab0e22d719f55f93fb8788fa4534cc342</a>
z3_ast_vector_dec_ref :: Ptr Z3_context -> Ptr Z3_ast_vector -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gac06a904e7ac6209d8019c606412d3cec</a>
z3_model_inc_ref :: Ptr Z3_context -> Ptr Z3_model -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gacc2df0767d4a94d7216d3db49c41547f</a>
z3_model_dec_ref :: Ptr Z3_context -> Ptr Z3_model -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga86670c291a16640b932e7892176a9d1b</a>
z3_model_eval :: Ptr Z3_context -> Ptr Z3_model -> Ptr Z3_ast -> Z3_bool -> Ptr (Ptr Z3_ast) -> IO Z3_bool

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga4674da67d226bfb16861829b9f129cfa</a>
z3_is_as_array :: Ptr Z3_context -> Ptr Z3_ast -> IO Z3_bool

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga7d9262dc6e79f2aeb23fd4a383589dda</a>
z3_get_as_array_func_decl :: Ptr Z3_context -> Ptr Z3_ast -> IO (Ptr Z3_func_decl)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gafb9cc5eca9564d8a849c154c5a4a8633</a>
z3_model_get_func_interp :: Ptr Z3_context -> Ptr Z3_model -> Ptr Z3_func_decl -> IO (Ptr Z3_func_interp)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga80218e1d50bdc4dac5ba18bd13a8ddfb</a>
z3_func_interp_inc_ref :: Ptr Z3_context -> Ptr Z3_func_interp -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gabe3aefc84db4fc3ce5349e958f1ec34b</a>
z3_func_interp_dec_ref :: Ptr Z3_context -> Ptr Z3_func_interp -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga2bab9ae1444940e7593729beec279844</a>
z3_func_interp_get_num_entries :: Ptr Z3_context -> Ptr Z3_func_interp -> IO CUInt

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaf157e1e1cd8c0cfe6a21be6370f659da</a>
z3_func_interp_get_entry :: Ptr Z3_context -> Ptr Z3_func_interp -> CUInt -> IO (Ptr Z3_func_entry)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga46de7559826ba71b8488d727cba1fb64</a>
z3_func_interp_get_else :: Ptr Z3_context -> Ptr Z3_func_interp -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaca22cbdb6f7787aaae5d814f2ab383d8</a>
z3_func_interp_get_arity :: Ptr Z3_context -> Ptr Z3_func_interp -> IO CUInt

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga82cd36e7b02c432436950d5c2301245e</a>
z3_func_entry_inc_ref :: Ptr Z3_context -> Ptr Z3_func_entry -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga9a9a2a75d7fc3d842839662e53365903</a>
z3_func_entry_dec_ref :: Ptr Z3_context -> Ptr Z3_func_entry -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga9fd65e2ab039aa8e40608c2ecf7084da</a>
z3_func_entry_get_value :: Ptr Z3_context -> Ptr Z3_func_entry -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga51aed8c5bc4b1f53f0c371312de3ce1a</a>
z3_func_entry_get_num_args :: Ptr Z3_context -> Ptr Z3_func_entry -> IO CUInt

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga6fe03fe3c824fceb52766a4d8c2cbeab</a>
z3_func_entry_get_arg :: Ptr Z3_context -> Ptr Z3_func_entry -> CUInt -> IO (Ptr Z3_ast)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaf36d49862a8c0d20dd5e6508eef5f8af</a>
z3_model_to_string :: Ptr Z3_context -> Ptr Z3_model -> IO Z3_string

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gac7f883536538ab0ad234fde58988e673</a>
z3_mk_params :: Ptr Z3_context -> IO (Ptr Z3_params)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga3a91c9f749b89e1dcf1493177d395d0c</a>
z3_params_inc_ref :: Ptr Z3_context -> Ptr Z3_params -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gae4df28ba713b81ee99abd929e32484ea</a>
z3_params_dec_ref :: Ptr Z3_context -> Ptr Z3_params -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga39e3df967eaad45b343256d56c54e91c</a>
z3_params_set_bool :: Ptr Z3_context -> Ptr Z3_params -> Ptr Z3_symbol -> Z3_bool -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga4974397cb652c7f7f479012eb465e250</a>
z3_params_set_uint :: Ptr Z3_context -> Ptr Z3_params -> Ptr Z3_symbol -> CUInt -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga11498ce4b25d294f5f89ab7ac1b74c62</a>
z3_params_set_double :: Ptr Z3_context -> Ptr Z3_params -> Ptr Z3_symbol -> CDouble -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gac2e899a4906b6133a23fdb60ef992ec9</a>
z3_params_set_symbol :: Ptr Z3_context -> Ptr Z3_params -> Ptr Z3_symbol -> Ptr Z3_symbol -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga624e692e180a8b2f617156b1e1ae9722</a>
z3_params_to_string :: Ptr Z3_context -> Ptr Z3_params -> IO Z3_string

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga5735499ef0b46846c5d45982eaa0e74c</a>
z3_mk_solver :: Ptr Z3_context -> IO (Ptr Z3_solver)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga5735499ef0b46846c5d45982eaa0e74c</a>
z3_mk_simple_solver :: Ptr Z3_context -> IO (Ptr Z3_solver)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga54244cfc9d9cd2ca8f08c3909d700628</a>
z3_mk_solver_for_logic :: Ptr Z3_context -> Ptr Z3_symbol -> IO (Ptr Z3_solver)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga047bb9dff9d57c7d3a71b7af4555956b</a>
z3_solver_get_help :: Ptr Z3_context -> Ptr Z3_solver -> IO Z3_string

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga887441b3468a1bc605bbf564ddebf2ae</a>
z3_solver_set_params :: Ptr Z3_context -> Ptr Z3_solver -> Ptr Z3_params -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga388e25a8b477abbd49f08c6c29dfa12d</a>
z3_solver_inc_ref :: Ptr Z3_context -> Ptr Z3_solver -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga2362dcef4e9b8ede41298a50428902ff</a>
z3_solver_dec_ref :: Ptr Z3_context -> Ptr Z3_solver -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gae41bebe15b1b1105f9abb8690188d1e2</a>
z3_solver_push :: Ptr Z3_context -> Ptr Z3_solver -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga40aa98e15aceffa5be3afad2e065478a</a>
z3_solver_pop :: Ptr Z3_context -> Ptr Z3_solver -> CUInt -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gafd4b4a6465601835341b477b75725b28</a>
z3_solver_get_num_scopes :: Ptr Z3_context -> Ptr Z3_solver -> IO CUInt

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga4a4a215b9130d7980e3c393fe857335f</a>
z3_solver_reset :: Ptr Z3_context -> Ptr Z3_solver -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga72afadf5e8b216f2c6ae675e872b8be4</a>
z3_solver_assert :: Ptr Z3_context -> Ptr Z3_solver -> Ptr Z3_ast -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaf46fb6f3aa3ef451d6be01a737697810</a>
z3_solver_assert_and_track :: Ptr Z3_context -> Ptr Z3_solver -> Ptr Z3_ast -> Ptr Z3_ast -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga000e369de7b71caa4ee701089709c526</a>
z3_solver_check :: Ptr Z3_context -> Ptr Z3_solver -> IO Z3_lbool

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga45b40829aaa382bbf427a744911452f9</a>
z3_solver_check_assumptions :: Ptr Z3_context -> Ptr Z3_solver -> CUInt -> Ptr (Ptr Z3_ast) -> IO Z3_lbool

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaf14a54d904a7e45eecc00c5fb8a9d5c9</a>
z3_solver_get_model :: Ptr Z3_context -> Ptr Z3_solver -> IO (Ptr Z3_model)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gabb4f8ed6a09873f5aeefe9cc01010864</a>
z3_solver_get_unsat_core :: Ptr Z3_context -> Ptr Z3_solver -> IO (Ptr Z3_ast_vector)

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaed5d19000004b43dd75e487682e91b55</a>
z3_solver_get_reason_unknown :: Ptr Z3_context -> Ptr Z3_solver -> IO Z3_string

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaf52e41db4b12a84188b80255454d3abb</a>
z3_solver_to_string :: Ptr Z3_context -> Ptr Z3_solver -> IO Z3_string

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga20d66dac19b6d6a06537843d0e25f761</a>
z3_set_ast_print_mode :: Ptr Z3_context -> Z3_ast_print_mode -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gab1aa4b78298fe00b3167bf7bfd88aea3</a>
z3_ast_to_string :: Ptr Z3_context -> Ptr Z3_ast -> IO Z3_string

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga51b048ddbbcd88708e7aa4fe1c2462d6</a>
z3_pattern_to_string :: Ptr Z3_context -> Ptr Z3_pattern -> IO Z3_string

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaf90c72f63eab298e1dd750f6a26fb945</a>
z3_sort_to_string :: Ptr Z3_context -> Ptr Z3_sort -> IO Z3_string

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga15243dcad77f5571e28e8aa1da465675</a>
z3_func_decl_to_string :: Ptr Z3_context -> Ptr Z3_func_decl -> IO Z3_string

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaf93844a5964ad8dee609fac3470d86e4</a>
z3_benchmark_to_smtlib_string :: Ptr Z3_context -> Z3_string -> Z3_string -> Z3_string -> Z3_string -> CUInt -> Ptr (Ptr Z3_ast) -> Ptr Z3_ast -> IO Z3_string

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga8ac771e68b28d2c86f40aa84889b3807</a>
z3_get_error_code :: Ptr Z3_context -> IO Z3_error_code

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gadaa12e9990f37b0c1e2bf1dd502dbf39</a>
z3_set_error_handler :: Ptr Z3_context -> FunPtr Z3_error_handler -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga41cf70319c4802ab7301dd168d6f5e45</a>
z3_set_error :: Ptr Z3_context -> Z3_error_code -> IO ()

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaf06357c49299efb8a0bdaeb3bc96c6d6</a>
z3_get_error_msg :: Z3_error_code -> IO Z3_string

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gae0aba52b5738b2ea78e0d6ad67ef1f92</a>
z3_get_error_msg_ex :: Ptr Z3_context -> Z3_error_code -> IO Z3_string

-- | Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga45fcd18a00379b13a536c5b6117190ae</a>
z3_get_version :: Ptr CUInt -> Ptr CUInt -> Ptr CUInt -> Ptr CUInt -> IO ()
instance Eq Z3_lbool
instance Eq Z3_bool


-- | Low-level bindings to Z3 API.
--   
--   There is (mostly) a one-to-one correspondence with Z3 C API, thus see
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html</a>
--   for further details.
module Z3.Base

-- | A Z3 <i>configuration object</i>.
data Config

-- | A Z3 <i>logical context</i>.
data Context

-- | A Z3 <i>symbol</i>.
--   
--   Used to name types, constants and functions.
data Symbol

-- | A Z3 <i>AST node</i>.
--   
--   This is the data-structure used in Z3 to represent terms, formulas and
--   types.
data AST

-- | A kind of AST representing <i>types</i>.
data Sort

-- | A kind of AST representing function symbols.
data FuncDecl

-- | A kind of AST representing constant and function declarations.
data App

-- | A kind of AST representing pattern and multi-patterns to guide
--   quantifier instantiation.
data Pattern

-- | A type contructor for a (recursive) datatype.
data Constructor

-- | A model for the constraints asserted into the logical context.
data Model

-- | An interpretation of a function in a model.
data FuncInterp

-- | Representation of the value of a <a>Z3_func_interp</a> at a particular
--   point.
data FuncEntry

-- | A Z3 parameter set.
--   
--   Starting at Z3 4.0, parameter sets are used to configure many
--   components such as: simplifiers, tactics, solvers, etc.
data Params

-- | A Z3 solver engine.
--   
--   A(n) (incremental) solver, possibly specialized by a particular tactic
--   or logic.
data Solver

-- | Different kinds of Z3 AST nodes.
data ASTKind
Z3_NUMERAL_AST :: ASTKind
Z3_APP_AST :: ASTKind
Z3_VAR_AST :: ASTKind
Z3_QUANTIFIER_AST :: ASTKind
Z3_SORT_AST :: ASTKind
Z3_FUNC_DECL_AST :: ASTKind
Z3_UNKNOWN_AST :: ASTKind

-- | Result of a satisfiability check.
--   
--   This corresponds to the <i>z3_lbool</i> type in the C API.
data Result
Sat :: Result
Unsat :: Result
Undef :: Result

-- | Create a configuration.
--   
--   See <a>withConfig</a>.
mkConfig :: IO Config

-- | Delete a configuration.
--   
--   See <a>withConfig</a>.
delConfig :: Config -> IO ()

-- | Set a configuration parameter.
setParamValue :: Config -> String -> String -> IO ()

-- | Run a computation using a temporally created configuration.
--   
--   Note that the configuration object can be thrown away once it has been
--   used to create the Z3 <a>Context</a>.
withConfig :: (Config -> IO a) -> IO a

-- | Create a context using the given configuration.
--   
--   <i>Z3_del_context</i> is called by Haskell's garbage collector before
--   freeing the <a>Context</a> object.
mkContext :: Config -> IO Context
withContext :: Context -> (Ptr Z3_context -> IO r) -> IO r

-- | Create a Z3 (empty) parameter set.
--   
--   Starting at Z3 4.0, parameter sets are used to configure many
--   components such as: simplifiers, tactics, solvers, etc.
mkParams :: Context -> IO Params

-- | Add a Boolean parameter <i>k</i> with value <i>v</i> to the parameter
--   set <i>p</i>.
paramsSetBool :: Context -> Params -> Symbol -> Bool -> IO ()

-- | Add a unsigned parameter <i>k</i> with value <i>v</i> to the parameter
--   set <i>p</i>.
paramsSetUInt :: Context -> Params -> Symbol -> Word -> IO ()

-- | Add a double parameter <i>k</i> with value <i>v</i> to the parameter
--   set <i>p</i>.
paramsSetDouble :: Context -> Params -> Symbol -> Double -> IO ()

-- | Add a symbol parameter <i>k</i> with value <i>v</i> to the parameter
--   set <i>p</i>.
paramsSetSymbol :: Context -> Params -> Symbol -> Symbol -> IO ()

-- | Convert a parameter set into a string.
--   
--   This function is mainly used for printing the contents of a parameter
--   set.
paramsToString :: Context -> Params -> IO String

-- | Create a Z3 symbol using an integer.
--   
--   <tt>mkIntSymbol c i</tt> <i>requires</i> <tt>0 &lt;= i &lt; 2^30</tt>
mkIntSymbol :: Integral int => Context -> int -> IO Symbol

-- | Create a Z3 symbol using a <a>String</a>.
mkStringSymbol :: Context -> String -> IO Symbol

-- | Create a free (uninterpreted) type using the given name (symbol).
--   
--   Two free types are considered the same iff the have the same name.
mkUninterpretedSort :: Context -> Symbol -> IO Sort

-- | Create the <i>boolean</i> type.
--   
--   This type is used to create propositional variables and predicates.
mkBoolSort :: Context -> IO Sort

-- | Create the <i>integer</i> type.
--   
--   This is the type of arbitrary precision integers. A machine integer
--   can be represented using bit-vectors, see <a>mkBvSort</a>.
mkIntSort :: Context -> IO Sort

-- | Create the <i>real</i> type.
--   
--   This type is not a floating point number. Z3 does not have support for
--   floating point numbers yet.
mkRealSort :: Context -> IO Sort

-- | Create a bit-vector type of the given size.
--   
--   This type can also be seen as a machine integer.
--   
--   <tt>mkBvSort c sz</tt> <i>requires</i> <tt>sz &gt;= 0</tt>
mkBvSort :: Integral int => Context -> int -> IO Sort

-- | Create an array type
--   
--   We usually represent the array type as: [domain -&gt; range]. Arrays
--   are usually used to model the heap/memory in software verification.
mkArraySort :: Context -> Sort -> Sort -> IO Sort

-- | Create a tuple type
--   
--   A tuple with n fields has a constructor and n projections. This
--   function will also declare the constructor and projection functions.
mkTupleSort :: Context -> Symbol -> [(Symbol, Sort)] -> IO (Sort, FuncDecl, [FuncDecl])

-- | Create a contructor
mkConstructor :: Context -> Symbol -> Symbol -> [(Symbol, Maybe Sort, Int)] -> IO Constructor

-- | Create datatype, such as lists, trees, records, enumerations or unions
--   of records.
--   
--   The datatype may be recursive. Returns the datatype sort.
mkDatatype :: Context -> Symbol -> [Constructor] -> IO Sort

-- | Create an set type with a given domain type
mkSetSort :: Context -> Sort -> IO Sort

-- | Declare a constant or function.
mkFuncDecl :: Context -> Symbol -> [Sort] -> Sort -> IO FuncDecl

-- | Create a constant or function application.
mkApp :: Context -> FuncDecl -> [AST] -> IO AST

-- | Declare and create a constant.
--   
--   This is a shorthand for: <tt>do xd &lt;- mkFunDecl c x [] s; mkApp c
--   xd []</tt>
mkConst :: Context -> Symbol -> Sort -> IO AST

-- | Declare a fresh constant or function.
mkFreshFuncDecl :: Context -> String -> [Sort] -> Sort -> IO FuncDecl

-- | Declare and create a fresh constant.
mkFreshConst :: Context -> String -> Sort -> IO AST

-- | Declare and create a variable (aka <i>constant</i>).
--   
--   An alias for <a>mkConst</a>.
mkVar :: Context -> Symbol -> Sort -> IO AST

-- | Declarate and create a variable of sort <i>bool</i>.
--   
--   See <a>mkVar</a>.
mkBoolVar :: Context -> Symbol -> IO AST

-- | Declarate and create a variable of sort <i>real</i>.
--   
--   See <a>mkVar</a>.
mkRealVar :: Context -> Symbol -> IO AST

-- | Declarate and create a variable of sort <i>int</i>.
--   
--   See <a>mkVar</a>.
mkIntVar :: Context -> Symbol -> IO AST

-- | Declarate and create a variable of sort <i>bit-vector</i>.
--   
--   See <a>mkVar</a>.
mkBvVar :: Context -> Symbol -> Int -> IO AST

-- | Declare and create a <i>fresh</i> variable (aka <i>constant</i>).
--   
--   An alias for <a>mkFreshConst</a>.
mkFreshVar :: Context -> String -> Sort -> IO AST

-- | Declarate and create a <i>fresh</i> variable of sort <i>bool</i>.
--   
--   See <a>mkFreshVar</a>.
mkFreshBoolVar :: Context -> String -> IO AST

-- | Declarate and create a <i>fresh</i> variable of sort <i>real</i>.
--   
--   See <a>mkFreshVar</a>.
mkFreshRealVar :: Context -> String -> IO AST

-- | Declarate and create a <i>fresh</i> variable of sort <i>int</i>.
--   
--   See <a>mkFreshVar</a>.
mkFreshIntVar :: Context -> String -> IO AST

-- | Declarate and create a <i>fresh</i> variable of sort
--   <i>bit-vector</i>.
--   
--   See <a>mkFreshVar</a>.
mkFreshBvVar :: Context -> String -> Int -> IO AST

-- | Create an AST node representing <i>true</i>.
mkTrue :: Context -> IO AST

-- | Create an AST node representing <i>false</i>.
mkFalse :: Context -> IO AST

-- | Create an AST node representing <i>l = r</i>.
mkEq :: Context -> AST -> AST -> IO AST

-- | Create an AST node representing <i>not(a)</i>.
mkNot :: Context -> AST -> IO AST

-- | Create an AST node representing an if-then-else: <i>ite(t1, t2,
--   t3)</i>.
mkIte :: Context -> AST -> AST -> AST -> IO AST

-- | Create an AST node representing <i>t1 iff t2</i>.
mkIff :: Context -> AST -> AST -> IO AST

-- | Create an AST node representing <i>t1 implies t2</i>.
mkImplies :: Context -> AST -> AST -> IO AST

-- | Create an AST node representing <i>t1 xor t2</i>.
mkXor :: Context -> AST -> AST -> IO AST

-- | Create an AST node representing args[0] and ... and args[num_args-1].
mkAnd :: Context -> [AST] -> IO AST

-- | Create an AST node representing args[0] or ... or args[num_args-1].
mkOr :: Context -> [AST] -> IO AST

-- | The distinct construct is used for declaring the arguments pairwise
--   distinct.
--   
--   That is, <tt>and [ args!!i /= args!!j | i &lt;- [0..length(args)-1], j
--   &lt;- [i+1..length(args)-1] ]</tt>
mkDistinct :: Context -> [AST] -> IO AST

-- | Create an AST node representing the given boolean.
mkBool :: Context -> Bool -> IO AST

-- | Create an AST node representing args[0] + ... + args[num_args-1].
mkAdd :: Context -> [AST] -> IO AST

-- | Create an AST node representing args[0] * ... * args[num_args-1].
mkMul :: Context -> [AST] -> IO AST

-- | Create an AST node representing args[0] - ... - args[num_args - 1].
mkSub :: Context -> [AST] -> IO AST

-- | Create an AST node representing -arg.
mkUnaryMinus :: Context -> AST -> IO AST

-- | Create an AST node representing arg1 div arg2.
mkDiv :: Context -> AST -> AST -> IO AST

-- | Create an AST node representing arg1 mod arg2.
mkMod :: Context -> AST -> AST -> IO AST

-- | Create an AST node representing arg1 rem arg2.
mkRem :: Context -> AST -> AST -> IO AST

-- | Create less than.
mkLt :: Context -> AST -> AST -> IO AST

-- | Create less than or equal to.
mkLe :: Context -> AST -> AST -> IO AST

-- | Create greater than.
mkGt :: Context -> AST -> AST -> IO AST

-- | Create greater than or equal to.
mkGe :: Context -> AST -> AST -> IO AST

-- | Coerce an integer to a real.
mkInt2Real :: Context -> AST -> IO AST

-- | Coerce a real to an integer.
mkReal2Int :: Context -> AST -> IO AST

-- | Check if a real number is an integer.
mkIsInt :: Context -> AST -> IO AST

-- | Bitwise negation.
mkBvnot :: Context -> AST -> IO AST

-- | Take conjunction of bits in vector, return vector of length 1.
mkBvredand :: Context -> AST -> IO AST

-- | Take disjunction of bits in vector, return vector of length 1.
mkBvredor :: Context -> AST -> IO AST

-- | Bitwise and.
mkBvand :: Context -> AST -> AST -> IO AST

-- | Bitwise or.
mkBvor :: Context -> AST -> AST -> IO AST

-- | Bitwise exclusive-or.
mkBvxor :: Context -> AST -> AST -> IO AST

-- | Bitwise nand.
mkBvnand :: Context -> AST -> AST -> IO AST

-- | Bitwise nor.
mkBvnor :: Context -> AST -> AST -> IO AST

-- | Bitwise xnor.
mkBvxnor :: Context -> AST -> AST -> IO AST

-- | Standard two's complement unary minus.
mkBvneg :: Context -> AST -> IO AST

-- | Standard two's complement addition.
mkBvadd :: Context -> AST -> AST -> IO AST

-- | Standard two's complement subtraction.
mkBvsub :: Context -> AST -> AST -> IO AST

-- | Standard two's complement multiplication.
mkBvmul :: Context -> AST -> AST -> IO AST

-- | Unsigned division.
mkBvudiv :: Context -> AST -> AST -> IO AST

-- | Two's complement signed division.
mkBvsdiv :: Context -> AST -> AST -> IO AST

-- | Unsigned remainder.
mkBvurem :: Context -> AST -> AST -> IO AST

-- | Two's complement signed remainder (sign follows dividend).
mkBvsrem :: Context -> AST -> AST -> IO AST

-- | Two's complement signed remainder (sign follows divisor).
mkBvsmod :: Context -> AST -> AST -> IO AST

-- | Unsigned less than.
mkBvult :: Context -> AST -> AST -> IO AST

-- | Two's complement signed less than.
mkBvslt :: Context -> AST -> AST -> IO AST

-- | Unsigned less than or equal to.
mkBvule :: Context -> AST -> AST -> IO AST

-- | Two's complement signed less than or equal to.
mkBvsle :: Context -> AST -> AST -> IO AST

-- | Unsigned greater than or equal to.
mkBvuge :: Context -> AST -> AST -> IO AST

-- | Two's complement signed greater than or equal to.
mkBvsge :: Context -> AST -> AST -> IO AST

-- | Unsigned greater than.
mkBvugt :: Context -> AST -> AST -> IO AST

-- | Two's complement signed greater than.
mkBvsgt :: Context -> AST -> AST -> IO AST

-- | Concatenate the given bit-vectors.
mkConcat :: Context -> AST -> AST -> IO AST

-- | Extract the bits high down to low from a bitvector of size m to yield
--   a new bitvector of size <i>n</i>, where <i>n = high - low + 1</i>.
mkExtract :: Context -> Int -> Int -> AST -> IO AST

-- | Sign-extend of the given bit-vector to the (signed) equivalent
--   bitvector of size <i>m+i</i>, where <i>m</i> is the size of the given
--   bit-vector.
mkSignExt :: Context -> Int -> AST -> IO AST

-- | Extend the given bit-vector with zeros to the (unsigned) equivalent
--   bitvector of size <i>m+i</i>, where <i>m</i> is the size of the given
--   bit-vector.
mkZeroExt :: Context -> Int -> AST -> IO AST

-- | Repeat the given bit-vector up length <i>i</i>.
mkRepeat :: Context -> Int -> AST -> IO AST

-- | Shift left.
mkBvshl :: Context -> AST -> AST -> IO AST

-- | Logical shift right.
mkBvlshr :: Context -> AST -> AST -> IO AST

-- | Arithmetic shift right.
mkBvashr :: Context -> AST -> AST -> IO AST

-- | Rotate bits of <i>t1</i> to the left <i>i</i> times.
mkRotateLeft :: Context -> Int -> AST -> IO AST

-- | Rotate bits of <i>t1</i> to the right <i>i</i> times.
mkRotateRight :: Context -> Int -> AST -> IO AST

-- | Rotate bits of <i>t1</i> to the left <i>t2</i> times.
mkExtRotateLeft :: Context -> AST -> AST -> IO AST

-- | Rotate bits of <i>t1</i> to the right <i>t2</i> times.
mkExtRotateRight :: Context -> AST -> AST -> IO AST

-- | Create an <i>n</i> bit bit-vector from the integer argument <i>t1</i>.
mkInt2bv :: Context -> Int -> AST -> IO AST

-- | Create an integer from the bit-vector argument <i>t1</i>.
--   
--   If <i>is_signed</i> is false, then the bit-vector <i>t1</i> is treated
--   as unsigned. So the result is non-negative and in the range
--   [0..2^<i>N</i>-1], where <i>N</i> are the number of bits in <i>t1</i>.
--   If <i>is_signed</i> is true, <i>t1</i> is treated as a signed
--   bit-vector.
mkBv2int :: Context -> AST -> Bool -> IO AST

-- | Check that bit-wise negation does not overflow when <i>t1</i> is
--   interpreted as a signed bit-vector.
mkBvnegNoOverflow :: Context -> AST -> IO AST

-- | Create a predicate that checks that the bit-wise addition of <i>t1</i>
--   and <i>t2</i> does not overflow.
mkBvaddNoOverflow :: Context -> AST -> AST -> Bool -> IO AST

-- | Create a predicate that checks that the bit-wise signed addition of
--   <i>t1</i> and <i>t2</i> does not underflow.
mkBvaddNoUnderflow :: Context -> AST -> AST -> IO AST

-- | Create a predicate that checks that the bit-wise signed subtraction of
--   <i>t1</i> and <i>t2</i> does not overflow.
mkBvsubNoOverflow :: Context -> AST -> AST -> IO AST

-- | Create a predicate that checks that the bit-wise subtraction of
--   <i>t1</i> and <i>t2</i> does not underflow.
mkBvsubNoUnderflow :: Context -> AST -> AST -> IO AST

-- | Create a predicate that checks that the bit-wise multiplication of
--   <i>t1</i> and <i>t2</i> does not overflow.
mkBvmulNoOverflow :: Context -> AST -> AST -> Bool -> IO AST

-- | Create a predicate that checks that the bit-wise signed multiplication
--   of <i>t1</i> and <i>t2</i> does not underflow.
mkBvmulNoUnderflow :: Context -> AST -> AST -> IO AST

-- | Create a predicate that checks that the bit-wise signed division of
--   <i>t1</i> and <i>t2</i> does not overflow.
mkBvsdivNoOverflow :: Context -> AST -> AST -> IO AST

-- | Array read. The argument a is the array and i is the index of the
--   array that gets read.
mkSelect :: Context -> AST -> AST -> IO AST

-- | Array update.
--   
--   The result of this function is an array that is equal to the input
--   array (with respect to select) on all indices except for i, where it
--   maps to v.
--   
--   The semantics of this function is given by the theory of arrays
--   described in the SMT-LIB standard. See <a>http://smtlib.org</a> for
--   more details.
mkStore :: Context -> AST -> AST -> AST -> IO AST

-- | Create the constant array.
--   
--   The resulting term is an array, such that a select on an arbitrary
--   index produces the value <i>v</i>.
mkConstArray :: Context -> Sort -> AST -> IO AST

-- | Map a function <i>f</i> on the the argument arrays.
--   
--   The <i>n</i> nodes args must be of array sorts [domain -&gt; range_i].
--   The function declaration <i>f</i> must have type range_1 .. range_n
--   -&gt; range. The sort of the result is [domain -&gt; range].
mkMap :: Context -> FuncDecl -> [AST] -> IO AST

-- | Access the array default value.
--   
--   Produces the default range value, for arrays that can be represented
--   as finite maps with a default range value.
mkArrayDefault :: Context -> AST -> IO AST

-- | Create the empty set.
mkEmptySet :: Context -> Sort -> IO AST

-- | Create the full set.
mkFullSet :: Context -> Sort -> IO AST

-- | Add an element to a set.
mkSetAdd :: Context -> AST -> AST -> IO AST

-- | Remove an element from a set.
mkSetDel :: Context -> AST -> AST -> IO AST

-- | Take the union of a list of sets.
mkSetUnion :: Context -> [AST] -> IO AST

-- | Take the intersection of a list of sets.
mkSetIntersect :: Context -> [AST] -> IO AST

-- | Take the set difference between two sets.
mkSetDifference :: Context -> AST -> AST -> IO AST

-- | Take the complement of a set.
mkSetComplement :: Context -> AST -> IO AST

-- | Check for set membership.
mkSetMember :: Context -> AST -> AST -> IO AST

-- | Check if the first set is a subset of the second set.
mkSetSubset :: Context -> AST -> AST -> IO AST

-- | Create a numeral of a given sort.
mkNumeral :: Context -> String -> Sort -> IO AST

-- | Create a real from a fraction.
mkReal :: Context -> Int -> Int -> IO AST

-- | Create a numeral of an int, bit-vector, or finite-domain sort.
--   
--   This function can be use to create numerals that fit in a <i>machine
--   integer</i>. It is slightly faster than <a>mkNumeral</a> since it is
--   not necessary to parse a string.
mkInt :: Context -> Int -> Sort -> IO AST

-- | Create a numeral of an int, bit-vector, or finite-domain sort.
--   
--   This function can be use to create numerals that fit in a <i>machine
--   unsigned integer</i>. It is slightly faster than <a>mkNumeral</a>
--   since it is not necessary to parse a string.
mkUnsignedInt :: Context -> Word -> Sort -> IO AST

-- | Create a numeral of an int, bit-vector, or finite-domain sort.
--   
--   This function can be use to create numerals that fit in a <i>machine
--   64-bit integer</i>. It is slightly faster than <a>mkNumeral</a> since
--   it is not necessary to parse a string.
mkInt64 :: Context -> Int64 -> Sort -> IO AST

-- | Create a numeral of an int, bit-vector, or finite-domain sort.
--   
--   This function can be use to create numerals that fit in a <i>machine
--   unsigned 64-bit integer</i>. It is slightly faster than
--   <a>mkNumeral</a> since it is not necessary to parse a string.
mkUnsignedInt64 :: Context -> Word64 -> Sort -> IO AST

-- | Create a numeral of an int, bit-vector, or finite-domain sort.
mkIntegral :: Integral a => Context -> a -> Sort -> IO AST

-- | Create a numeral of sort <i>real</i> from a <a>Rational</a>.
mkRational :: Context -> Rational -> IO AST

-- | Create a numeral of sort <i>real</i> from a <a>Fixed</a>.
mkFixed :: HasResolution a => Context -> Fixed a -> IO AST

-- | Create a numeral of sort <i>real</i> from a <a>Real</a>.
mkRealNum :: Real r => Context -> r -> IO AST

-- | Create a numeral of sort <i>int</i> from an <a>Integer</a>.
mkInteger :: Context -> Integer -> IO AST

-- | Create a numeral of sort <i>int</i> from an <a>Integral</a>.
mkIntNum :: Integral a => Context -> a -> IO AST

-- | Create a numeral of sort <i>Bit-vector</i> from an <a>Integer</a>.
mkBitvector :: Context -> Int -> Integer -> IO AST

-- | Create a numeral of sort <i>Bit-vector</i> from an <a>Integral</a>.
mkBvNum :: Integral i => Context -> Int -> i -> IO AST

-- | Create a pattern for quantifier instantiation.
--   
--   Z3 uses pattern matching to instantiate quantifiers. If a pattern is
--   not provided for a quantifier, then Z3 will automatically compute a
--   set of patterns for it. However, for optimal performance, the user
--   should provide the patterns.
--   
--   Patterns comprise a list of terms. The list should be non-empty. If
--   the list comprises of more than one term, it is a called a
--   multi-pattern.
--   
--   In general, one can pass in a list of (multi-)patterns in the
--   quantifier constructor.
mkPattern :: Context -> [AST] -> IO Pattern

-- | Create a bound variable.
--   
--   Bound variables are indexed by de-Bruijn indices.
--   
--   See
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga1d4da8849fca699b345322f8ee1fa31e</a>
mkBound :: Context -> Int -> Sort -> IO AST

-- | Create a forall formula.
--   
--   The bound variables are de-Bruijn indices created using
--   <a>mkBound</a>.
--   
--   Z3 applies the convention that the last element in <i>xs</i> refers to
--   the variable with index 0, the second to last element of <i>xs</i>
--   refers to the variable with index 1, etc.
mkForall :: Context -> [Pattern] -> [Symbol] -> [Sort] -> AST -> IO AST

-- | Create an exists formula.
--   
--   Similar to <a>mkForall</a>.
mkExists :: Context -> [Pattern] -> [Symbol] -> [Sort] -> AST -> IO AST

-- | Create a universal quantifier using a list of constants that will form
--   the set of bound variables.
mkForallConst :: Context -> [Pattern] -> [App] -> AST -> IO AST

-- | Create a existential quantifier using a list of constants that will
--   form the set of bound variables.
mkExistsConst :: Context -> [Pattern] -> [App] -> AST -> IO AST

-- | Return the symbol name.
getSymbolString :: Context -> Symbol -> IO String

-- | Return the size of the given bit-vector sort.
getBvSortSize :: Context -> Sort -> IO Int

-- | Get list of constructors for datatype.
getDatatypeSortConstructors :: Context -> Sort -> IO [FuncDecl]

-- | Get list of recognizers for datatype.
getDatatypeSortRecognizers :: Context -> Sort -> IO [FuncDecl]

-- | Return the constant declaration name as a symbol.
getDeclName :: Context -> FuncDecl -> IO Symbol

-- | Return the sort of an AST node.
getSort :: Context -> AST -> IO Sort

-- | Return Z3_L_TRUE if a is true, Z3_L_FALSE if it is false, and
--   Z3_L_UNDEF otherwise.
getBoolValue :: Context -> AST -> IO (Maybe Bool)

-- | Return the kind of the given AST.
getAstKind :: Context -> AST -> IO ASTKind

-- | Convert an ast into an APP_AST. This is just type casting.
toApp :: Context -> AST -> IO App

-- | Return numeral value, as a string of a numeric constant term.
getNumeralString :: Context -> AST -> IO String

-- | Read a <a>Bool</a> value from an <a>AST</a>
getBool :: Context -> AST -> IO Bool

-- | Read an <a>Integer</a> value from an <a>AST</a>
getInt :: Context -> AST -> IO Integer

-- | Read a <a>Rational</a> value from an <a>AST</a>
getReal :: Context -> AST -> IO Rational

-- | Read the <a>Integer</a> value from an <a>AST</a> of sort
--   <i>bit-vector</i>.
--   
--   See <a>mkBv2int</a>.
getBv :: Context -> AST -> Bool -> IO Integer

-- | Evaluate an AST node in the given model.
--   
--   The evaluation may fail for the following reasons:
--   
--   <ul>
--   <li><i>t</i> contains a quantifier.</li>
--   <li>the model <i>m</i> is partial.</li>
--   <li><i>t</i> is type incorrect.</li>
--   </ul>
modelEval :: Context -> Model -> AST -> Bool -> IO (Maybe AST)

-- | Evaluate an array as a function, if possible.
evalArray :: Context -> Model -> AST -> IO (Maybe FuncModel)

-- | Return the interpretation of the function f in the model m. Return
--   NULL, if the model does not assign an interpretation for f. That
--   should be interpreted as: the f does not matter.
getFuncInterp :: Context -> Model -> FuncDecl -> IO (Maybe FuncInterp)

-- | The (_ as-array f) AST node is a construct for assigning
--   interpretations for arrays in Z3. It is the array such that forall
--   indices i we have that (select (_ as-array f) i) is equal to (f i).
--   This procedure returns Z3_TRUE if the a is an as-array AST node.
isAsArray :: Context -> AST -> IO Bool

-- | Return the function declaration f associated with a (_ as_array f)
--   node.
getAsArrayFuncDecl :: Context -> AST -> IO FuncDecl

-- | Return the number of entries in the given function interpretation.
funcInterpGetNumEntries :: Context -> FuncInterp -> IO Int

-- | Return a _point_ of the given function intepretation. It represents
--   the value of f in a particular point.
funcInterpGetEntry :: Context -> FuncInterp -> Int -> IO FuncEntry

-- | Return the 'else' value of the given function interpretation.
funcInterpGetElse :: Context -> FuncInterp -> IO AST

-- | Return the arity (number of arguments) of the given function
--   interpretation.
funcInterpGetArity :: Context -> FuncInterp -> IO Int

-- | Return the value of this point.
funcEntryGetValue :: Context -> FuncEntry -> IO AST

-- | Return the number of arguments in a Z3_func_entry object.
funcEntryGetNumArgs :: Context -> FuncEntry -> IO Int

-- | Return an argument of a Z3_func_entry object.
funcEntryGetArg :: Context -> FuncEntry -> Int -> IO AST

-- | Convert the given model into a string.
modelToString :: Context -> Model -> IO String

-- | Alias for <a>modelToString</a>.

-- | <i>Deprecated: Use modelToString instead.</i>
showModel :: Context -> Model -> IO String

-- | Type of an evaluation function for <a>AST</a>.
--   
--   Evaluation may fail (i.e. return <a>Nothing</a>) for a few reasons,
--   see <a>modelEval</a>.
type EvalAst a = Model -> AST -> IO (Maybe a)

-- | An alias for <a>modelEval</a> with model completion enabled.
eval :: Context -> EvalAst AST

-- | Evaluate an AST node of sort <i>bool</i> in the given model.
--   
--   See <a>modelEval</a> and <a>getBool</a>.
evalBool :: Context -> EvalAst Bool

-- | Evaluate an AST node of sort <i>int</i> in the given model.
--   
--   See <a>modelEval</a> and <a>getInt</a>.
evalInt :: Context -> EvalAst Integer

-- | Evaluate an AST node of sort <i>real</i> in the given model.
--   
--   See <a>modelEval</a> and <a>getReal</a>.
evalReal :: Context -> EvalAst Rational

-- | Evaluate an AST node of sort <i>bit-vector</i> in the given model.
--   
--   The flag <i>signed</i> decides whether the bit-vector value is
--   interpreted as a signed or unsigned integer.
--   
--   See <a>modelEval</a> and <a>getBv</a>.
evalBv :: Context -> Bool -> EvalAst Integer

-- | Run a evaluation function on a <a>Traversable</a> data structure of
--   <a>AST</a>s (e.g. <tt>[AST]</tt>, <tt>Vector AST</tt>, <tt>Maybe
--   AST</tt>, etc).
--   
--   This a generic version of <a>evalT</a> which can be used in
--   combination with other helpers. For instance, <tt>mapEval (evalInt
--   c)</tt> can be used to obtain the <a>Integer</a> interpretation of a
--   list of <a>AST</a> of sort <i>int</i>.
mapEval :: Traversable t => EvalAst a -> Model -> t AST -> IO (Maybe (t a))

-- | Evaluate a <i>collection</i> of AST nodes in the given model.
evalT :: Traversable t => Context -> Model -> t AST -> IO (Maybe (t AST))

-- | The interpretation of a function.
data FuncModel
FuncModel :: [([AST], AST)] -> AST -> FuncModel

-- | Mapping from arguments to values.
interpMap :: FuncModel -> [([AST], AST)]

-- | Default value.
interpElse :: FuncModel -> AST

-- | Evaluate a function declaration to a list of argument/value pairs.
evalFunc :: Context -> Model -> FuncDecl -> IO (Maybe FuncModel)

-- | Pretty-printing mode for converting ASTs to strings. The mode can be
--   one of the following:
--   
--   <ul>
--   <li>Z3_PRINT_SMTLIB_FULL: Print AST nodes in SMTLIB verbose
--   format.</li>
--   <li>Z3_PRINT_LOW_LEVEL: Print AST nodes using a low-level format.</li>
--   <li>Z3_PRINT_SMTLIB_COMPLIANT: Print AST nodes in SMTLIB 1.x compliant
--   format.</li>
--   <li>Z3_PRINT_SMTLIB2_COMPLIANT: Print AST nodes in SMTLIB 2.x
--   compliant format.</li>
--   </ul>
data ASTPrintMode
Z3_PRINT_SMTLIB_FULL :: ASTPrintMode
Z3_PRINT_LOW_LEVEL :: ASTPrintMode
Z3_PRINT_SMTLIB_COMPLIANT :: ASTPrintMode
Z3_PRINT_SMTLIB2_COMPLIANT :: ASTPrintMode

-- | Set the pretty-printing mode for converting ASTs to strings.
setASTPrintMode :: Context -> ASTPrintMode -> IO ()

-- | Convert an AST to a string.
astToString :: Context -> AST -> IO String

-- | Convert a pattern to a string.
patternToString :: Context -> Pattern -> IO String

-- | Convert a sort to a string.
sortToString :: Context -> Sort -> IO String

-- | Convert a FuncDecl to a string.
funcDeclToString :: Context -> FuncDecl -> IO String

-- | Convert the given benchmark into SMT-LIB formatted string.
--   
--   The output format can be configured via <a>setASTPrintMode</a>.
benchmarkToSMTLibString :: Context -> String -> String -> String -> String -> [AST] -> AST -> IO String

-- | Z3 exceptions.
--   
--   Z3 errors are re-thrown as Haskell <a>Z3Error</a> exceptions, see
--   <a>Exception</a>.
data Z3Error
Z3Error :: Z3ErrorCode -> String -> Z3Error
errCode :: Z3Error -> Z3ErrorCode
errMsg :: Z3Error -> String

-- | Z3 error codes.
data Z3ErrorCode
SortError :: Z3ErrorCode
IOB :: Z3ErrorCode
InvalidArg :: Z3ErrorCode
ParserError :: Z3ErrorCode
NoParser :: Z3ErrorCode
InvalidPattern :: Z3ErrorCode
MemoutFail :: Z3ErrorCode
FileAccessError :: Z3ErrorCode
InternalFatal :: Z3ErrorCode
InvalidUsage :: Z3ErrorCode
DecRefError :: Z3ErrorCode
Z3Exception :: Z3ErrorCode
data Version
Version :: !Int -> !Int -> !Int -> !Int -> Version
z3Major :: Version -> !Int
z3Minor :: Version -> !Int
z3Build :: Version -> !Int
z3Revision :: Version -> !Int

-- | Return Z3 version number information.
getVersion :: IO Version

-- | Solvers available in Z3.
--   
--   These are described at <a>http://smtlib.cs.uiowa.edu/logics.html</a>
data Logic

-- | Closed formulas over the theory of linear integer arithmetic and
--   arrays extended with free sort and function symbols but restricted to
--   arrays with integer indices and values.
AUFLIA :: Logic

-- | Closed linear formulas with free sort and function symbols over one-
--   and two-dimentional arrays of integer index and real value.
AUFLIRA :: Logic

-- | Closed formulas with free function and predicate symbols over a theory
--   of arrays of arrays of integer index and real value.
AUFNIRA :: Logic

-- | Closed linear formulas in linear real arithmetic.
LRA :: Logic

-- | Closed quantifier-free formulas over the theory of bitvectors and
--   bitvector arrays.
QF_ABV :: Logic

-- | Closed quantifier-free formulas over the theory of bitvectors and
--   bitvector arrays extended with free sort and function symbols.
QF_AUFBV :: Logic

-- | Closed quantifier-free linear formulas over the theory of integer
--   arrays extended with free sort and function symbols.
QF_AUFLIA :: Logic

-- | Closed quantifier-free formulas over the theory of arrays with
--   extensionality.
QF_AX :: Logic

-- | Closed quantifier-free formulas over the theory of fixed-size
--   bitvectors.
QF_BV :: Logic

-- | Difference Logic over the integers. In essence, Boolean combinations
--   of inequations of the form x - y &lt; b where x and y are integer
--   variables and b is an integer constant.
QF_IDL :: Logic

-- | Unquantified linear integer arithmetic. In essence, Boolean
--   combinations of inequations between linear polynomials over integer
--   variables.
QF_LIA :: Logic

-- | Unquantified linear real arithmetic. In essence, Boolean combinations
--   of inequations between linear polynomials over real variables.
QF_LRA :: Logic

-- | Quantifier-free integer arithmetic.
QF_NIA :: Logic

-- | Quantifier-free real arithmetic.
QF_NRA :: Logic

-- | Difference Logic over the reals. In essence, Boolean combinations of
--   inequations of the form x - y &lt; b where x and y are real variables
--   and b is a rational constant.
QF_RDL :: Logic

-- | Unquantified formulas built over a signature of uninterpreted (i.e.,
--   free) sort and function symbols.
QF_UF :: Logic

-- | Unquantified formulas over bitvectors with uninterpreted sort function
--   and symbols.
QF_UFBV :: Logic

-- | Difference Logic over the integers (in essence) but with uninterpreted
--   sort and function symbols.
QF_UFIDL :: Logic

-- | Unquantified linear integer arithmetic with uninterpreted sort and
--   function symbols.
QF_UFLIA :: Logic

-- | Unquantified linear real arithmetic with uninterpreted sort and
--   function symbols.
QF_UFLRA :: Logic

-- | Unquantified non-linear real arithmetic with uninterpreted sort and
--   function symbols.
QF_UFNRA :: Logic

-- | Linear real arithmetic with uninterpreted sort and function symbols.
UFLRA :: Logic

-- | Non-linear integer arithmetic with uninterpreted sort and function
--   symbols.
UFNIA :: Logic
mkSolver :: Context -> IO Solver
mkSimpleSolver :: Context -> IO Solver
mkSolverForLogic :: Context -> Logic -> IO Solver

-- | Return a string describing all solver available parameters.
solverGetHelp :: Context -> Solver -> IO String

-- | Set the given solver using the given parameters.
solverSetParams :: Context -> Solver -> Params -> IO ()
solverPush :: Context -> Solver -> IO ()
solverPop :: Context -> Solver -> Int -> IO ()
solverReset :: Context -> Solver -> IO ()

-- | Number of backtracking points.
solverGetNumScopes :: Context -> Solver -> IO Int
solverAssertCnstr :: Context -> Solver -> AST -> IO ()
solverAssertAndTrack :: Context -> Solver -> AST -> AST -> IO ()

-- | Check whether the assertions in a given solver are consistent or not.
solverCheck :: Context -> Solver -> IO Result

-- | Check whether the assertions in the given solver and optional
--   assumptions are consistent or not.
solverCheckAssumptions :: Context -> Solver -> [AST] -> IO Result

-- | Retrieve the model for the last <a>solverCheck</a>.
--   
--   The error handler is invoked if a model is not available because the
--   commands above were not invoked for the given solver, or if the result
--   was <a>Unsat</a>.
solverGetModel :: Context -> Solver -> IO Model

-- | Retrieve the unsat core for the last <a>solverCheckAssumptions</a>;
--   the unsat core is a subset of the assumptions
solverGetUnsatCore :: Context -> Solver -> IO [AST]

-- | Return a brief justification for an <tt>Unknown</tt> result for the
--   commands <a>solverCheck</a> and <a>solverCheckAssumptions</a>.
solverGetReasonUnknown :: Context -> Solver -> IO String

-- | Convert the given solver into a string.
solverToString :: Context -> Solver -> IO String
solverCheckAndGetModel :: Context -> Solver -> IO (Result, Maybe Model)
instance Typeable AST
instance Typeable FuncDecl
instance Typeable Z3ErrorCode
instance Typeable Z3Error
instance Eq Config
instance Eq Context
instance Eq Symbol
instance Ord Symbol
instance Show Symbol
instance Storable Symbol
instance Eq AST
instance Ord AST
instance Show AST
instance Eq Sort
instance Ord Sort
instance Show Sort
instance Eq FuncDecl
instance Ord FuncDecl
instance Show FuncDecl
instance Eq App
instance Ord App
instance Show App
instance Eq Pattern
instance Ord Pattern
instance Show Pattern
instance Eq Constructor
instance Ord Constructor
instance Show Constructor
instance Eq Model
instance Eq FuncInterp
instance Eq FuncEntry
instance Eq Params
instance Eq Solver
instance Eq Result
instance Ord Result
instance Read Result
instance Show Result
instance Show Z3ErrorCode
instance Eq Version
instance Ord Version
instance Marshal Solver (Ptr Z3_solver)
instance Marshal Constructor (Ptr Z3_constructor)
instance Marshal Pattern (Ptr Z3_pattern)
instance Marshal Model (Ptr Z3_model)
instance Marshal FuncInterp (Ptr Z3_func_interp)
instance Marshal FuncEntry (Ptr Z3_func_entry)
instance Marshal FuncDecl (Ptr Z3_func_decl)
instance Marshal Sort (Ptr Z3_sort)
instance Marshal [AST] (Ptr Z3_ast_vector)
instance Marshal AST (Ptr Z3_ast)
instance Marshal Symbol (Ptr Z3_symbol)
instance Marshal Params (Ptr Z3_params)
instance Marshal App (Ptr Z3_app)
instance Marshal String CString
instance Marshal Double CDouble
instance Integral h => Marshal h CULLong
instance Integral h => Marshal h CLLong
instance Integral h => Marshal h CUInt
instance Integral h => Marshal h CInt
instance Marshal Result Z3_lbool
instance Marshal Bool Z3_bool
instance Marshal () ()
instance Marshal h (Ptr x) => Marshal (Maybe h) (Ptr x)
instance Show Logic
instance Show Version
instance Exception Z3Error
instance Show Z3Error


-- | Configuring Z3.
--   
--   Z3 has plenty of configuration options and these had varied quite a
--   lot from Z3 3.x to Z3 4.x. We decided to keep things simple.
--   
--   Configurations are essentially sets of <a>String</a> pairs, assigning
--   values to parameters. We just provide a thin layer of abstraction on
--   top of this.
--   
--   For instance, <tt>opt "proof" True</tt> creates a configuration where
--   proof generation is enabled. The first argument of <a>opt</a> is the
--   option name, the second is the option value. The same configuration is
--   created by <tt>opt "proof" "true"</tt>. We do not check option names,
--   and we do not assign types to options ---any <a>String</a> is accepted
--   as a value. The <a>OptValue</a> class is a specialization of
--   <a>Show</a> to convert Haskell values into a proper <a>String</a>
--   representation for Z3.
--   
--   Configurations can be combined with the <a>+?</a> operator, for
--   instance, <tt>opt "proof" True +? opt "model" True</tt> is a
--   configuration with both proof and model generation enabled.
--   Configurations are <a>Monoid</a>s, and <a>+?</a> is just an alias for
--   <a>mappend</a>.
--   
--   Configurations are set by <a>setOpts</a> if you are using
--   <a>Z3.Base</a>, or passing the configuration object (of type
--   <a>Opts</a>) to a runner if you are using the <a>Z3.Monad</a>
--   interface.
module Z3.Opts

-- | Z3 configuration.
data Opts

-- | Set configuration.
--   
--   If you are using the <a>Monad</a> interface, you don't need to call
--   this function directly, just pass your <a>Opts</a> to <i>evalZ3*</i>
--   functions.
setOpts :: Config -> Opts -> IO ()

-- | Default configuration.
stdOpts :: Opts

-- | Append configurations.
(+?) :: Opts -> Opts -> Opts

-- | Set a configuration option.
opt :: OptValue val => String -> val -> Opts

-- | Values for Z3 options.
--   
--   Any <a>OptValue</a> type can be passed to a Z3 option (and values will
--   be converted into an appropriate <a>String</a>).
--   
--   <i>Since 0.4</i> the <a>Double</a> instance has been replaced by a new
--   <a>Fixed</a> instance.
class OptValue val
instance OptValue [Char]
instance HasResolution a => OptValue (Fixed a)
instance OptValue Integer
instance OptValue Int
instance OptValue Bool
instance Monoid Opts


-- | A simple monadic interface to Z3 API.
--   
--   Examples:
--   <a>https://bitbucket.org/iago/z3-haskell/src/tip/examples/Example/Monad</a>
module Z3.Monad
class (Applicative m, Monad m, MonadIO m) => MonadZ3 m
getSolver :: MonadZ3 m => m Solver
getContext :: MonadZ3 m => m Context
data Z3 a

-- | Solvers available in Z3.
--   
--   These are described at <a>http://smtlib.cs.uiowa.edu/logics.html</a>
data Logic

-- | Closed formulas over the theory of linear integer arithmetic and
--   arrays extended with free sort and function symbols but restricted to
--   arrays with integer indices and values.
AUFLIA :: Logic

-- | Closed linear formulas with free sort and function symbols over one-
--   and two-dimentional arrays of integer index and real value.
AUFLIRA :: Logic

-- | Closed formulas with free function and predicate symbols over a theory
--   of arrays of arrays of integer index and real value.
AUFNIRA :: Logic

-- | Closed linear formulas in linear real arithmetic.
LRA :: Logic

-- | Closed quantifier-free formulas over the theory of bitvectors and
--   bitvector arrays.
QF_ABV :: Logic

-- | Closed quantifier-free formulas over the theory of bitvectors and
--   bitvector arrays extended with free sort and function symbols.
QF_AUFBV :: Logic

-- | Closed quantifier-free linear formulas over the theory of integer
--   arrays extended with free sort and function symbols.
QF_AUFLIA :: Logic

-- | Closed quantifier-free formulas over the theory of arrays with
--   extensionality.
QF_AX :: Logic

-- | Closed quantifier-free formulas over the theory of fixed-size
--   bitvectors.
QF_BV :: Logic

-- | Difference Logic over the integers. In essence, Boolean combinations
--   of inequations of the form x - y &lt; b where x and y are integer
--   variables and b is an integer constant.
QF_IDL :: Logic

-- | Unquantified linear integer arithmetic. In essence, Boolean
--   combinations of inequations between linear polynomials over integer
--   variables.
QF_LIA :: Logic

-- | Unquantified linear real arithmetic. In essence, Boolean combinations
--   of inequations between linear polynomials over real variables.
QF_LRA :: Logic

-- | Quantifier-free integer arithmetic.
QF_NIA :: Logic

-- | Quantifier-free real arithmetic.
QF_NRA :: Logic

-- | Difference Logic over the reals. In essence, Boolean combinations of
--   inequations of the form x - y &lt; b where x and y are real variables
--   and b is a rational constant.
QF_RDL :: Logic

-- | Unquantified formulas built over a signature of uninterpreted (i.e.,
--   free) sort and function symbols.
QF_UF :: Logic

-- | Unquantified formulas over bitvectors with uninterpreted sort function
--   and symbols.
QF_UFBV :: Logic

-- | Difference Logic over the integers (in essence) but with uninterpreted
--   sort and function symbols.
QF_UFIDL :: Logic

-- | Unquantified linear integer arithmetic with uninterpreted sort and
--   function symbols.
QF_UFLIA :: Logic

-- | Unquantified linear real arithmetic with uninterpreted sort and
--   function symbols.
QF_UFLRA :: Logic

-- | Unquantified non-linear real arithmetic with uninterpreted sort and
--   function symbols.
QF_UFNRA :: Logic

-- | Linear real arithmetic with uninterpreted sort and function symbols.
UFLRA :: Logic

-- | Non-linear integer arithmetic with uninterpreted sort and function
--   symbols.
UFNIA :: Logic

-- | Eval a Z3 script with default configuration options.
evalZ3 :: Z3 a -> IO a

-- | Eval a Z3 script.
evalZ3With :: Maybe Logic -> Opts -> Z3 a -> IO a

-- | Z3 environment.
data Z3Env

-- | Create a new Z3 environment.
newEnv :: Maybe Logic -> Opts -> IO Z3Env

-- | Eval a Z3 script with a given environment.
--   
--   Environments may facilitate running many queries under the same
--   logical context.
--   
--   Note that an environment may change after each query. If you want to
--   preserve the same environment then use <a>local</a>, as in
--   <tt>evalZ3WithEnv <i>env</i> (local <i>query</i>)</tt>.
evalZ3WithEnv :: Z3 a -> Z3Env -> IO a

-- | A Z3 <i>symbol</i>.
--   
--   Used to name types, constants and functions.
data Symbol

-- | A Z3 <i>AST node</i>.
--   
--   This is the data-structure used in Z3 to represent terms, formulas and
--   types.
data AST

-- | A kind of AST representing <i>types</i>.
data Sort

-- | A kind of AST representing function symbols.
data FuncDecl

-- | A kind of AST representing constant and function declarations.
data App

-- | A kind of AST representing pattern and multi-patterns to guide
--   quantifier instantiation.
data Pattern

-- | A type contructor for a (recursive) datatype.
data Constructor

-- | A model for the constraints asserted into the logical context.
data Model

-- | A Z3 <i>logical context</i>.
data Context

-- | An interpretation of a function in a model.
data FuncInterp

-- | Representation of the value of a <a>Z3_func_interp</a> at a particular
--   point.
data FuncEntry

-- | A Z3 parameter set.
--   
--   Starting at Z3 4.0, parameter sets are used to configure many
--   components such as: simplifiers, tactics, solvers, etc.
data Params

-- | A Z3 solver engine.
--   
--   A(n) (incremental) solver, possibly specialized by a particular tactic
--   or logic.
data Solver

-- | Different kinds of Z3 AST nodes.
data ASTKind
Z3_NUMERAL_AST :: ASTKind
Z3_APP_AST :: ASTKind
Z3_VAR_AST :: ASTKind
Z3_QUANTIFIER_AST :: ASTKind
Z3_SORT_AST :: ASTKind
Z3_FUNC_DECL_AST :: ASTKind
Z3_UNKNOWN_AST :: ASTKind

-- | Result of a satisfiability check.
--   
--   This corresponds to the <i>z3_lbool</i> type in the C API.
data Result
Sat :: Result
Unsat :: Result
Undef :: Result

-- | Create a Z3 (empty) parameter set.
--   
--   Starting at Z3 4.0, parameter sets are used to configure many
--   components such as: simplifiers, tactics, solvers, etc.
mkParams :: MonadZ3 z3 => z3 Params

-- | Add a Boolean parameter <i>k</i> with value <i>v</i> to the parameter
--   set <i>p</i>.
paramsSetBool :: MonadZ3 z3 => Params -> Symbol -> Bool -> z3 ()

-- | Add a unsigned parameter <i>k</i> with value <i>v</i> to the parameter
--   set <i>p</i>.
paramsSetUInt :: MonadZ3 z3 => Params -> Symbol -> Word -> z3 ()

-- | Add a double parameter <i>k</i> with value <i>v</i> to the parameter
--   set <i>p</i>.
paramsSetDouble :: MonadZ3 z3 => Params -> Symbol -> Double -> z3 ()

-- | Add a symbol parameter <i>k</i> with value <i>v</i> to the parameter
--   set <i>p</i>.
paramsSetSymbol :: MonadZ3 z3 => Params -> Symbol -> Symbol -> z3 ()

-- | Convert a parameter set into a string.
--   
--   This function is mainly used for printing the contents of a parameter
--   set.
paramsToString :: MonadZ3 z3 => Params -> z3 String

-- | Create a Z3 symbol using an integer.
mkIntSymbol :: (MonadZ3 z3, Integral i) => i -> z3 Symbol

-- | Create a Z3 symbol using a string.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gafebb0d3c212927cf7834c3a20a84ecae</a>
mkStringSymbol :: MonadZ3 z3 => String -> z3 Symbol

-- | Create a free (uninterpreted) type using the given name (symbol).
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga736e88741af1c178cbebf94c49aa42de</a>
mkUninterpretedSort :: MonadZ3 z3 => Symbol -> z3 Sort

-- | Create the <i>boolean</i> type.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gacdc73510b69a010b71793d429015f342</a>
mkBoolSort :: MonadZ3 z3 => z3 Sort

-- | Create the <i>integer</i> type.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga6cd426ab5748653b77d389fd3eac1015</a>
mkIntSort :: MonadZ3 z3 => z3 Sort

-- | Create the <i>real</i> type.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga40ef93b9738485caed6dc84631c3c1a0</a>
mkRealSort :: MonadZ3 z3 => z3 Sort

-- | Create a bit-vector type of the given size.
--   
--   This type can also be seen as a machine integer.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaeed000a1bbb84b6ca6fdaac6cf0c1688</a>
mkBvSort :: MonadZ3 z3 => Int -> z3 Sort

-- | Create an array type
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gafe617994cce1b516f46128e448c84445</a>
mkArraySort :: MonadZ3 z3 => Sort -> Sort -> z3 Sort

-- | Create a tuple type
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga7156b9c0a76a28fae46c81f8e3cdf0f1</a>
mkTupleSort :: MonadZ3 z3 => Symbol -> [(Symbol, Sort)] -> z3 (Sort, FuncDecl, [FuncDecl])

-- | Create a contructor
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaa779e39f7050b9d51857887954b5f9b0</a>
mkConstructor :: MonadZ3 z3 => Symbol -> Symbol -> [(Symbol, Maybe Sort, Int)] -> z3 Constructor

-- | Create datatype, such as lists, trees, records, enumerations or unions
--   of records. The datatype may be recursive. Return the datatype sort.
--   
--   Reference
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gab6809d53327d807da9158abdf75df387</a>
mkDatatype :: MonadZ3 z3 => Symbol -> [Constructor] -> z3 Sort

-- | Create a set type
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga6865879523e7e882d7e50a2d8445ac8b</a>
mkSetSort :: MonadZ3 z3 => Sort -> z3 Sort

-- | A Z3 function
mkFuncDecl :: MonadZ3 z3 => Symbol -> [Sort] -> Sort -> z3 FuncDecl

-- | Create a constant or function application.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga33a202d86bf628bfab9b6f437536cebe</a>
mkApp :: MonadZ3 z3 => FuncDecl -> [AST] -> z3 AST

-- | Declare and create a constant.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga093c9703393f33ae282ec5e8729354ef</a>
mkConst :: MonadZ3 z3 => Symbol -> Sort -> z3 AST

-- | Declare and create a constant.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga093c9703393f33ae282ec5e8729354ef</a>
mkFreshConst :: MonadZ3 z3 => String -> Sort -> z3 AST

-- | Declare a fresh constant or function.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga1f60c7eb41c5603e55a188a14dc929ec</a>
mkFreshFuncDecl :: MonadZ3 z3 => String -> [Sort] -> Sort -> z3 FuncDecl

-- | Declare and create a variable (aka <i>constant</i>).
--   
--   An alias for <a>mkConst</a>.
mkVar :: MonadZ3 z3 => Symbol -> Sort -> z3 AST

-- | Declarate and create a variable of sort <i>bool</i>.
--   
--   See <a>mkVar</a>.
mkBoolVar :: MonadZ3 z3 => Symbol -> z3 AST

-- | Declarate and create a variable of sort <i>real</i>.
--   
--   See <a>mkVar</a>.
mkRealVar :: MonadZ3 z3 => Symbol -> z3 AST

-- | Declarate and create a variable of sort <i>int</i>.
--   
--   See <a>mkVar</a>.
mkIntVar :: MonadZ3 z3 => Symbol -> z3 AST

-- | Declarate and create a variable of sort <i>bit-vector</i>.
--   
--   See <a>mkVar</a>.
mkBvVar :: MonadZ3 z3 => Symbol -> Int -> z3 AST

-- | Declare and create a <i>fresh</i> variable (aka <i>constant</i>).
--   
--   An alias for <a>mkFreshConst</a>.
mkFreshVar :: MonadZ3 z3 => String -> Sort -> z3 AST

-- | Declarate and create a <i>fresh</i> variable of sort <i>bool</i>.
--   
--   See <a>mkFreshVar</a>.
mkFreshBoolVar :: MonadZ3 z3 => String -> z3 AST

-- | Declarate and create a <i>fresh</i> variable of sort <i>real</i>.
--   
--   See <a>mkFreshVar</a>.
mkFreshRealVar :: MonadZ3 z3 => String -> z3 AST

-- | Declarate and create a <i>fresh</i> variable of sort <i>int</i>.
--   
--   See <a>mkFreshVar</a>.
mkFreshIntVar :: MonadZ3 z3 => String -> z3 AST

-- | Declarate and create a <i>fresh</i> variable of sort
--   <i>bit-vector</i>.
--   
--   See <a>mkFreshVar</a>.
mkFreshBvVar :: MonadZ3 z3 => String -> Int -> z3 AST

-- | Create an AST node representing <i>true</i>.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gae898e7380409bbc57b56cc5205ef1db7</a>
mkTrue :: MonadZ3 z3 => z3 AST

-- | Create an AST node representing <i>false</i>.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga5952ac17671117a02001fed6575c778d</a>
mkFalse :: MonadZ3 z3 => z3 AST

-- | Create an AST node representing <i>l = r</i>.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga95a19ce675b70e22bb0401f7137af37c</a>
mkEq :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Create an AST node representing <i>not(a)</i>.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga3329538091996eb7b3dc677760a61072</a>
mkNot :: MonadZ3 z3 => AST -> z3 AST

-- | Create an AST node representing an if-then-else: <i>ite(t1, t2,
--   t3)</i>.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga94417eed5c36e1ad48bcfc8ad6e83547</a>
mkIte :: MonadZ3 z3 => AST -> AST -> AST -> z3 AST

-- | Create an AST node representing <i>t1 iff t2</i>.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga930a8e844d345fbebc498ac43a696042</a>
mkIff :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Create an AST node representing <i>t1 implies t2</i>.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gac829c0e25bbbd30343bf073f7b524517</a>
mkImplies :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Create an AST node representing <i>t1 xor t2</i>.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gacc6d1b848032dec0c4617b594d4229ec</a>
mkXor :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Create an AST node representing args[0] and ... and args[num_args-1].
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gacde98ce4a8ed1dde50b9669db4838c61</a>
mkAnd :: MonadZ3 z3 => [AST] -> z3 AST

-- | Create an AST node representing args[0] or ... or args[num_args-1].
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga00866d16331d505620a6c515302021f9</a>
mkOr :: MonadZ3 z3 => [AST] -> z3 AST

-- | The distinct construct is used for declaring the arguments pairwise
--   distinct.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaa076d3a668e0ec97d61744403153ecf7</a>
mkDistinct :: MonadZ3 z3 => [AST] -> z3 AST

-- | Create an AST node representing the given boolean.
mkBool :: MonadZ3 z3 => Bool -> z3 AST

-- | Create an AST node representing args[0] + ... + args[num_args-1].
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga4e4ac0a4e53eee0b4b0ef159ed7d0cd5</a>
mkAdd :: MonadZ3 z3 => [AST] -> z3 AST

-- | Create an AST node representing args[0] * ... * args[num_args-1].
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gab9affbf8401a18eea474b59ad4adc890</a>
mkMul :: MonadZ3 z3 => [AST] -> z3 AST

-- | Create an AST node representing args[0] - ... - args[num_args - 1].
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga4f5fea9b683f9e674fd8f14d676cc9a9</a>
mkSub :: MonadZ3 z3 => [AST] -> z3 AST

-- | Create an AST node representing -arg.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gadcd2929ad732937e25f34277ce4988ea</a>
mkUnaryMinus :: MonadZ3 z3 => AST -> z3 AST

-- | Create an AST node representing arg1 div arg2.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga1ac60ee8307af8d0b900375914194ff3</a>
mkDiv :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Create an AST node representing arg1 mod arg2.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga8e350ac77e6b8fe805f57efe196e7713</a>
mkMod :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Create an AST node representing arg1 rem arg2.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga2fcdb17f9039bbdaddf8a30d037bd9ff</a>
mkRem :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Create less than.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga58a3dc67c5de52cf599c346803ba1534</a>
mkLt :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Create less than or equal to.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaa9a33d11096841f4e8c407f1578bc0bf</a>
mkLe :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Create greater than.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga46167b86067586bb742c0557d7babfd3</a>
mkGt :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Create greater than or equal to.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gad9245cbadb80b192323d01a8360fb942</a>
mkGe :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Coerce an integer to a real.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga7130641e614c7ebafd28ae16a7681a21</a>
mkInt2Real :: MonadZ3 z3 => AST -> z3 AST

-- | Coerce a real to an integer.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga759b6563ba1204aae55289009a3fdc6d</a>
mkReal2Int :: MonadZ3 z3 => AST -> z3 AST

-- | Check if a real number is an integer.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaac2ad0fb04e4900fdb4add438d137ad3</a>
mkIsInt :: MonadZ3 z3 => AST -> z3 AST

-- | Bitwise negation.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga36cf75c92c54c1ca633a230344f23080</a>
mkBvnot :: MonadZ3 z3 => AST -> z3 AST

-- | Take conjunction of bits in vector, return vector of length 1.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaccc04f2b58903279b1b3be589b00a7d8</a>
mkBvredand :: MonadZ3 z3 => AST -> z3 AST

-- | Take disjunction of bits in vector, return vector of length 1.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gafd18e127c0586abf47ad9cd96895f7d2</a>
mkBvredor :: MonadZ3 z3 => AST -> z3 AST

-- | Bitwise and.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gab96e0ea55334cbcd5a0e79323b57615d</a>
mkBvand :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Bitwise or.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga77a6ae233fb3371d187c6d559b2843f5</a>
mkBvor :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Bitwise exclusive-or.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga0a3821ea00b1c762205f73e4bc29e7d8</a>
mkBvxor :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Bitwise nand.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga96dc37d36efd658fff5b2b4df49b0e61</a>
mkBvnand :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Bitwise nor.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gabf15059e9e8a2eafe4929fdfd259aadb</a>
mkBvnor :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Bitwise xnor.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga784f5ca36a4b03b93c67242cc94b21d6</a>
mkBvxnor :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Standard two's complement unary minus.
--   
--   Reference:
--   &lt;<a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga0c78be00c03eda4ed6a983224ed5c7b7</a>
mkBvneg :: MonadZ3 z3 => AST -> z3 AST

-- | Standard two's complement addition.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga819814e33573f3f9948b32fdc5311158</a>
mkBvadd :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Standard two's complement subtraction.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga688c9aa1347888c7a51be4e46c19178e</a>
mkBvsub :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Standard two's complement multiplication.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga6abd3dde2a1ceff1704cf7221a72258c</a>
mkBvmul :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Unsigned division.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga56ce0cd61666c6f8cf5777286f590544</a>
mkBvudiv :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Two's complement signed division.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gad240fedb2fda1c1005b8e9d3c7f3d5a0</a>
mkBvsdiv :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Unsigned remainder.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga5df4298ec835e43ddc9e3e0bae690c8d</a>
mkBvurem :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Two's complement signed remainder (sign follows dividend).
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga46c18a3042fca174fe659d3185693db1</a>
mkBvsrem :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Two's complement signed remainder (sign follows divisor).
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga95dac8e6eecb50f63cb82038560e0879</a>
mkBvsmod :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Unsigned less than.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga5774b22e93abcaf9b594672af6c7c3c4</a>
mkBvult :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Two's complement signed less than.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga8ce08af4ed1fbdf08d4d6e63d171663a</a>
mkBvslt :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Unsigned less than or equal to.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gab738b89de0410e70c089d3ac9e696e87</a>
mkBvule :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Two's complement signed less than or equal to.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gab7c026feb93e7d2eab180e96f1e6255d</a>
mkBvsle :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Unsigned greater than or equal to.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gade58fbfcf61b67bf8c4a441490d3c4df</a>
mkBvuge :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Two's complement signed greater than or equal to.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaeec3414c0e8a90a6aa5a23af36bf6dc5</a>
mkBvsge :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Unsigned greater than.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga063ab9f16246c99e5c1c893613927ee3</a>
mkBvugt :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Two's complement signed greater than.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga4e93a985aa2a7812c7c11a2c65d7c5f0</a>
mkBvsgt :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Concatenate the given bit-vectors.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gae774128fa5e9ff7458a36bd10e6ca0fa</a>
mkConcat :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Extract the bits high down to low from a bitvector of size m to yield
--   a new bitvector of size <i>n</i>, where <i>n = high - low + 1</i>.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga32d2fe7563f3e6b114c1b97b205d4317</a>
mkExtract :: MonadZ3 z3 => Int -> Int -> AST -> z3 AST

-- | Sign-extend of the given bit-vector to the (signed) equivalent
--   bitvector of size <i>m+i</i>, where <i>m</i> is the size of the given
--   bit-vector.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gad29099270b36d0680bb54b560353c10e</a>
mkSignExt :: MonadZ3 z3 => Int -> AST -> z3 AST

-- | Extend the given bit-vector with zeros to the (unsigned) equivalent
--   bitvector of size <i>m+i</i>, where <i>m</i> is the size of the given
--   bit-vector.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gac9322fae11365a78640baf9078c428b3</a>
mkZeroExt :: MonadZ3 z3 => Int -> AST -> z3 AST

-- | Repeat the given bit-vector up length <i>i</i>.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga03e81721502ea225c264d1f556c9119d</a>
mkRepeat :: MonadZ3 z3 => Int -> AST -> z3 AST

-- | Shift left.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gac8d5e776c786c1172fa0d7dfede454e1</a>
mkBvshl :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Logical shift right.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gac59645a6edadad79a201f417e4e0c512</a>
mkBvlshr :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Arithmetic shift right.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga674b580ad605ba1c2c9f9d3748be87c4</a>
mkBvashr :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Rotate bits of <i>t1</i> to the left <i>i</i> times.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga4932b7d08fea079dd903cd857a52dcda</a>
mkRotateLeft :: MonadZ3 z3 => Int -> AST -> z3 AST

-- | Rotate bits of <i>t1</i> to the right <i>i</i> times.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga3b94e1bf87ecd1a1858af8ebc1da4a1c</a>
mkRotateRight :: MonadZ3 z3 => Int -> AST -> z3 AST

-- | Rotate bits of <i>t1</i> to the left <i>t2</i> times.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaf46f1cb80e5a56044591a76e7c89e5e7</a>
mkExtRotateLeft :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Rotate bits of <i>t1</i> to the right <i>t2</i> times.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gabb227526c592b523879083f12aab281f</a>
mkExtRotateRight :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Create an <i>n</i> bit bit-vector from the integer argument <i>t1</i>.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga35f89eb05df43fbd9cce7200cc1f30b5</a>
mkInt2bv :: MonadZ3 z3 => Int -> AST -> z3 AST

-- | Create an integer from the bit-vector argument <i>t1</i>. If
--   <i>is_signed</i> is false, then the bit-vector <i>t1</i> is treated as
--   unsigned. So the result is non-negative and in the range
--   [0..2^<i>N</i>-1], where <i>N</i> are the number of bits in <i>t1</i>.
--   If <i>is_signed</i> is true, <i>t1</i> is treated as a signed
--   bit-vector.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gac87b227dc3821d57258d7f53a28323d4</a>
mkBv2int :: MonadZ3 z3 => AST -> Bool -> z3 AST

-- | Check that bit-wise negation does not overflow when <i>t1</i> is
--   interpreted as a signed bit-vector.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gae9c5d72605ddcd0e76657341eaccb6c7</a>
mkBvnegNoOverflow :: MonadZ3 z3 => AST -> z3 AST

-- | Create a predicate that checks that the bit-wise addition of <i>t1</i>
--   and <i>t2</i> does not overflow.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga88f6b5ec876f05e0d7ba51e96c4b077f</a>
mkBvaddNoOverflow :: MonadZ3 z3 => AST -> AST -> Bool -> z3 AST

-- | Create a predicate that checks that the bit-wise signed addition of
--   <i>t1</i> and <i>t2</i> does not underflow.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga1e2b1927cf4e50000c1600d47a152947</a>
mkBvaddNoUnderflow :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Create a predicate that checks that the bit-wise signed subtraction of
--   <i>t1</i> and <i>t2</i> does not overflow.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga785f8127b87e0b42130e6d8f52167d7c</a>
mkBvsubNoOverflow :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Create a predicate that checks that the bit-wise subtraction of
--   <i>t1</i> and <i>t2</i> does not underflow.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga6480850f9fa01e14aea936c88ff184c4</a>
mkBvsubNoUnderflow :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Create a predicate that checks that the bit-wise multiplication of
--   <i>t1</i> and <i>t2</i> does not overflow.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga86f4415719d295a2f6845c70b3aaa1df</a>
mkBvmulNoOverflow :: MonadZ3 z3 => AST -> AST -> Bool -> z3 AST

-- | Create a predicate that checks that the bit-wise signed multiplication
--   of <i>t1</i> and <i>t2</i> does not underflow.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga501ccc01d737aad3ede5699741717fda</a>
mkBvmulNoUnderflow :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Create a predicate that checks that the bit-wise signed division of
--   <i>t1</i> and <i>t2</i> does not overflow.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaa17e7b2c33dfe2abbd74d390927ae83e</a>
mkBvsdivNoOverflow :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Array read. The argument a is the array and i is the index of the
--   array that gets read.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga38f423f3683379e7f597a7fe59eccb67</a>
mkSelect :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Array update.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gae305a4f54b4a64f7e5973ae6ccb13593</a>
mkStore :: MonadZ3 z3 => AST -> AST -> AST -> z3 AST

-- | Create the constant array.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga84ea6f0c32b99c70033feaa8f00e8f2d</a>
mkConstArray :: MonadZ3 z3 => Sort -> AST -> z3 AST

-- | map f on the the argument arrays.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga9150242d9430a8c3d55d2ca3b9a4362d</a>
mkMap :: MonadZ3 z3 => FuncDecl -> [AST] -> z3 AST

-- | Access the array default value. Produces the default range value, for
--   arrays that can be represented as finite maps with a default range
--   value.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga78e89cca82f0ab4d5f4e662e5e5fba7d</a>
mkArrayDefault :: MonadZ3 z3 => AST -> z3 AST

-- | Create the empty set.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga358b6b80509a567148f1c0ca9252118c</a>
mkEmptySet :: MonadZ3 z3 => Sort -> z3 AST

-- | Create the full set.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga5e92662c657374f7332aa32ce4503dd2</a>
mkFullSet :: MonadZ3 z3 => Sort -> z3 AST

-- | Add an element to a set.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga856c3d0e28ce720f53912c2bbdd76175</a>
mkSetAdd :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Remove an element from a set.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga80e883f39dd3b88f9d0745c8a5b91d1d</a>
mkSetDel :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Take the union of a list of sets.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga4050162a13d539b8913200963bb4743c</a>
mkSetUnion :: MonadZ3 z3 => [AST] -> z3 AST

-- | Take the intersection of a list of sets.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga8a8abff0ebe6aeeaa6c919eaa013049d</a>
mkSetIntersect :: MonadZ3 z3 => [AST] -> z3 AST

-- | Take the set difference between two sets.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gabb49c62f70b8198362e1a29ba6d8bde1</a>
mkSetDifference :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Take the complement of a set.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga5c57143c9229cdf730c5103ff696590f</a>
mkSetComplement :: MonadZ3 z3 => AST -> z3 AST

-- | Check for set membership.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gac6e516f3dce0bdd41095c6d6daf56063</a>
mkSetMember :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Check if the first set is a subset of the second set.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga139c5803af0e86464adc7cedc53e7f3a</a>
mkSetSubset :: MonadZ3 z3 => AST -> AST -> z3 AST

-- | Create a numeral of a given sort.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gac8aca397e32ca33618d8024bff32948c</a>
mkNumeral :: MonadZ3 z3 => String -> Sort -> z3 AST

-- | Create a numeral of an int, bit-vector, or finite-domain sort.
--   
--   This function can be use to create numerals that fit in a <i>machine
--   integer</i>. It is slightly faster than <a>mkNumeral</a> since it is
--   not necessary to parse a string.
mkInt :: MonadZ3 z3 => Int -> Sort -> z3 AST

-- | Create a numeral of sort <i>real</i>.
mkReal :: MonadZ3 z3 => Int -> Int -> z3 AST

-- | Create a numeral of an int, bit-vector, or finite-domain sort.
--   
--   This function can be use to create numerals that fit in a <i>machine
--   unsigned integer</i>. It is slightly faster than <a>mkNumeral</a>
--   since it is not necessary to parse a string.
mkUnsignedInt :: MonadZ3 z3 => Word -> Sort -> z3 AST

-- | Create a numeral of an int, bit-vector, or finite-domain sort.
--   
--   This function can be use to create numerals that fit in a <i>machine
--   64-bit integer</i>. It is slightly faster than <a>mkNumeral</a> since
--   it is not necessary to parse a string.
mkInt64 :: MonadZ3 z3 => Int64 -> Sort -> z3 AST

-- | Create a numeral of an int, bit-vector, or finite-domain sort.
--   
--   This function can be use to create numerals that fit in a <i>machine
--   unsigned 64-bit integer</i>. It is slightly faster than
--   <a>mkNumeral</a> since it is not necessary to parse a string.
mkUnsignedInt64 :: MonadZ3 z3 => Word64 -> Sort -> z3 AST

-- | Create a numeral of an int, bit-vector, or finite-domain sort.
mkIntegral :: (MonadZ3 z3, Integral a) => a -> Sort -> z3 AST

-- | Create a numeral of sort <i>real</i> from a <a>Rational</a>.
mkRational :: MonadZ3 z3 => Rational -> z3 AST

-- | Create a numeral of sort <i>real</i> from a <a>Fixed</a>.
mkFixed :: (MonadZ3 z3, HasResolution a) => Fixed a -> z3 AST

-- | Create a numeral of sort <i>real</i> from a <a>Real</a>.
mkRealNum :: (MonadZ3 z3, Real r) => r -> z3 AST

-- | Create a numeral of sort <i>int</i> from an <a>Integer</a>.
mkInteger :: MonadZ3 z3 => Integer -> z3 AST

-- | Create a numeral of sort <i>int</i> from an <a>Integral</a>.
mkIntNum :: (MonadZ3 z3, Integral a) => a -> z3 AST

-- | Create a numeral of sort <i>Bit-vector</i> from an <a>Integer</a>.
mkBitvector :: MonadZ3 z3 => Int -> Integer -> z3 AST

-- | Create a numeral of sort <i>Bit-vector</i> from an <a>Integral</a>.
mkBvNum :: (MonadZ3 z3, Integral i) => Int -> i -> z3 AST
mkPattern :: MonadZ3 z3 => [AST] -> z3 Pattern
mkBound :: MonadZ3 z3 => Int -> Sort -> z3 AST
mkForall :: MonadZ3 z3 => [Pattern] -> [Symbol] -> [Sort] -> AST -> z3 AST
mkExists :: MonadZ3 z3 => [Pattern] -> [Symbol] -> [Sort] -> AST -> z3 AST
mkForallConst :: MonadZ3 z3 => [Pattern] -> [App] -> AST -> z3 AST
mkExistsConst :: MonadZ3 z3 => [Pattern] -> [App] -> AST -> z3 AST

-- | Return the symbol name.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaf1683d9464f377e5089ce6ebf2a9bd31</a>
getSymbolString :: MonadZ3 z3 => Symbol -> z3 String

-- | Return the size of the given bit-vector sort.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga8fc3550edace7bc046e16d1f96ddb419</a>
getBvSortSize :: MonadZ3 z3 => Sort -> z3 Int

-- | Get list of constructors for datatype.
getDatatypeSortConstructors :: MonadZ3 z3 => Sort -> z3 [FuncDecl]

-- | Get list of recognizers for datatype.
getDatatypeSortRecognizers :: MonadZ3 z3 => Sort -> z3 [FuncDecl]

-- | Return the constant declaration name as a symbol.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga741b1bf11cb92aa2ec9ef2fef73ff129</a>
getDeclName :: MonadZ3 z3 => FuncDecl -> z3 Symbol

-- | Return the sort of an AST node.
getSort :: MonadZ3 z3 => AST -> z3 Sort

-- | Returns <tt>Just True</tt>, <tt>Just False</tt>, or <tt>Nothing</tt>
--   for <i>undefined</i>.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga133aaa1ec31af9b570ed7627a3c8c5a4</a>
getBoolValue :: MonadZ3 z3 => AST -> z3 (Maybe Bool)

-- | Return the kind of the given AST.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga4c43608feea4cae363ef9c520c239a5c</a>
getAstKind :: MonadZ3 z3 => AST -> z3 ASTKind

-- | Cast AST into an App.
toApp :: MonadZ3 z3 => AST -> z3 App

-- | Return numeral value, as a string of a numeric constant term.
getNumeralString :: MonadZ3 z3 => AST -> z3 String

-- | Read a <a>Bool</a> value from an <a>AST</a>
getBool :: MonadZ3 z3 => AST -> z3 Bool

-- | Return the integer value
getInt :: MonadZ3 z3 => AST -> z3 Integer

-- | Return rational value
getReal :: MonadZ3 z3 => AST -> z3 Rational

-- | Read the <a>Integer</a> value from an <a>AST</a> of sort
--   <i>bit-vector</i>.
--   
--   See <a>mkBv2int</a>.
getBv :: MonadZ3 z3 => AST -> Bool -> z3 Integer

-- | Evaluate an AST node in the given model.
--   
--   The evaluation may fail for the following reasons:
--   
--   <ul>
--   <li><i>t</i> contains a quantifier.</li>
--   <li>the model <i>m</i> is partial.</li>
--   <li><i>t</i> is type incorrect.</li>
--   </ul>
modelEval :: MonadZ3 z3 => Model -> AST -> Bool -> z3 (Maybe AST)

-- | Get array as a list of argument/value pairs, if it is represented as a
--   function (ie, using as-array).
evalArray :: MonadZ3 z3 => Model -> AST -> z3 (Maybe FuncModel)

-- | Return the interpretation of the function f in the model m. Return
--   NULL, if the model does not assign an interpretation for f. That
--   should be interpreted as: the f does not matter.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gafb9cc5eca9564d8a849c154c5a4a8633</a>
getFuncInterp :: MonadZ3 z3 => Model -> FuncDecl -> z3 (Maybe FuncInterp)

-- | The (_ as-array f) AST node is a construct for assigning
--   interpretations for arrays in Z3. It is the array such that forall
--   indices i we have that (select (_ as-array f) i) is equal to (f i).
--   This procedure returns Z3_TRUE if the a is an as-array AST node.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga4674da67d226bfb16861829b9f129cfa</a>
isAsArray :: MonadZ3 z3 => AST -> z3 Bool

-- | Return the function declaration f associated with a (_ as_array f)
--   node.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga7d9262dc6e79f2aeb23fd4a383589dda</a>
getAsArrayFuncDecl :: MonadZ3 z3 => AST -> z3 FuncDecl

-- | Return the number of entries in the given function interpretation.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga2bab9ae1444940e7593729beec279844</a>
funcInterpGetNumEntries :: MonadZ3 z3 => FuncInterp -> z3 Int

-- | Return a "point" of the given function intepretation. It represents
--   the value of f in a particular point.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaf157e1e1cd8c0cfe6a21be6370f659da</a>
funcInterpGetEntry :: MonadZ3 z3 => FuncInterp -> Int -> z3 FuncEntry

-- | Return the 'else' value of the given function interpretation.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga46de7559826ba71b8488d727cba1fb64</a>
funcInterpGetElse :: MonadZ3 z3 => FuncInterp -> z3 AST

-- | Return the arity (number of arguments) of the given function
--   interpretation.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaca22cbdb6f7787aaae5d814f2ab383d8</a>
funcInterpGetArity :: MonadZ3 z3 => FuncInterp -> z3 Int

-- | Return the value of this point.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga9fd65e2ab039aa8e40608c2ecf7084da</a>
funcEntryGetValue :: MonadZ3 z3 => FuncEntry -> z3 AST

-- | Return the number of arguments in a Z3_func_entry object.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga51aed8c5bc4b1f53f0c371312de3ce1a</a>
funcEntryGetNumArgs :: MonadZ3 z3 => FuncEntry -> z3 Int

-- | Return an argument of a Z3_func_entry object.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga6fe03fe3c824fceb52766a4d8c2cbeab</a>
funcEntryGetArg :: MonadZ3 z3 => FuncEntry -> Int -> z3 AST

-- | Convert the given model into a string.
modelToString :: MonadZ3 z3 => Model -> z3 String

-- | Alias for <a>modelToString</a>.
showModel :: MonadZ3 z3 => Model -> z3 String

-- | Type of an evaluation function for <a>AST</a>.
--   
--   Evaluation may fail (i.e. return <a>Nothing</a>) for a few reasons,
--   see <a>modelEval</a>.
type EvalAst m a = Model -> AST -> m (Maybe a)

-- | An alias for <a>modelEval</a> with model completion enabled.
eval :: MonadZ3 z3 => EvalAst z3 AST

-- | Evaluate an AST node of sort <i>bool</i> in the given model.
--   
--   See <a>modelEval</a> and <a>getBool</a>.
evalBool :: MonadZ3 z3 => EvalAst z3 Bool

-- | Evaluate an AST node of sort <i>int</i> in the given model.
--   
--   See <a>modelEval</a> and <a>getInt</a>.
evalInt :: MonadZ3 z3 => EvalAst z3 Integer

-- | Evaluate an AST node of sort <i>real</i> in the given model.
--   
--   See <a>modelEval</a> and <a>getReal</a>.
evalReal :: MonadZ3 z3 => EvalAst z3 Rational

-- | Evaluate an AST node of sort <i>bit-vector</i> in the given model.
--   
--   The flag <i>signed</i> decides whether the bit-vector value is
--   interpreted as a signed or unsigned integer.
--   
--   See <a>modelEval</a> and <a>getBv</a>.
evalBv :: MonadZ3 z3 => Bool -> EvalAst z3 Integer

-- | Evaluate a collection of AST nodes in the given model.
evalT :: (MonadZ3 z3, Traversable t) => Model -> t AST -> z3 (Maybe (t AST))

-- | Run a evaluation function on a <a>Traversable</a> data structure of
--   <a>AST</a>s (e.g. <tt>[AST]</tt>, <tt>Vector AST</tt>, <tt>Maybe
--   AST</tt>, etc).
--   
--   This a generic version of <a>evalT</a> which can be used in
--   combination with other helpers. For instance, <tt>mapEval evalInt</tt>
--   can be used to obtain the <a>Integer</a> interpretation of a list of
--   <a>AST</a> of sort <i>int</i>.
mapEval :: (MonadZ3 z3, Traversable t) => EvalAst z3 a -> Model -> t AST -> z3 (Maybe (t a))

-- | The interpretation of a function.
data FuncModel
FuncModel :: [([AST], AST)] -> AST -> FuncModel

-- | Mapping from arguments to values.
interpMap :: FuncModel -> [([AST], AST)]

-- | Default value.
interpElse :: FuncModel -> AST

-- | Get function as a list of argument/value pairs.
evalFunc :: MonadZ3 z3 => Model -> FuncDecl -> z3 (Maybe FuncModel)

-- | Pretty-printing mode for converting ASTs to strings. The mode can be
--   one of the following:
--   
--   <ul>
--   <li>Z3_PRINT_SMTLIB_FULL: Print AST nodes in SMTLIB verbose
--   format.</li>
--   <li>Z3_PRINT_LOW_LEVEL: Print AST nodes using a low-level format.</li>
--   <li>Z3_PRINT_SMTLIB_COMPLIANT: Print AST nodes in SMTLIB 1.x compliant
--   format.</li>
--   <li>Z3_PRINT_SMTLIB2_COMPLIANT: Print AST nodes in SMTLIB 2.x
--   compliant format.</li>
--   </ul>
data ASTPrintMode
Z3_PRINT_SMTLIB_FULL :: ASTPrintMode
Z3_PRINT_LOW_LEVEL :: ASTPrintMode
Z3_PRINT_SMTLIB_COMPLIANT :: ASTPrintMode
Z3_PRINT_SMTLIB2_COMPLIANT :: ASTPrintMode

-- | Set the mode for converting expressions to strings.
setASTPrintMode :: MonadZ3 z3 => ASTPrintMode -> z3 ()

-- | Convert an AST to a string.
astToString :: MonadZ3 z3 => AST -> z3 String

-- | Convert a pattern to a string.
patternToString :: MonadZ3 z3 => Pattern -> z3 String

-- | Convert a sort to a string.
sortToString :: MonadZ3 z3 => Sort -> z3 String

-- | Convert a FuncDecl to a string.
funcDeclToString :: MonadZ3 z3 => FuncDecl -> z3 String

-- | Convert the given benchmark into SMT-LIB formatted string.
--   
--   The output format can be configured via <a>setASTPrintMode</a>.
benchmarkToSMTLibString :: MonadZ3 z3 => String -> String -> String -> String -> [AST] -> AST -> z3 String

-- | Z3 exceptions.
--   
--   Z3 errors are re-thrown as Haskell <a>Z3Error</a> exceptions, see
--   <a>Exception</a>.
data Z3Error
Z3Error :: Z3ErrorCode -> String -> Z3Error
errCode :: Z3Error -> Z3ErrorCode
errMsg :: Z3Error -> String

-- | Z3 error codes.
data Z3ErrorCode
SortError :: Z3ErrorCode
IOB :: Z3ErrorCode
InvalidArg :: Z3ErrorCode
ParserError :: Z3ErrorCode
NoParser :: Z3ErrorCode
InvalidPattern :: Z3ErrorCode
MemoutFail :: Z3ErrorCode
FileAccessError :: Z3ErrorCode
InternalFatal :: Z3ErrorCode
InvalidUsage :: Z3ErrorCode
DecRefError :: Z3ErrorCode
Z3Exception :: Z3ErrorCode
data Version
Version :: !Int -> !Int -> !Int -> !Int -> Version
z3Major :: Version -> !Int
z3Minor :: Version -> !Int
z3Build :: Version -> !Int
z3Revision :: Version -> !Int

-- | Return Z3 version number information.
getVersion :: MonadZ3 z3 => z3 Version

-- | Return a string describing all solver available parameters.
solverGetHelp :: MonadZ3 z3 => z3 String

-- | Set the solver using the given parameters.
solverSetParams :: MonadZ3 z3 => Params -> z3 ()

-- | Create a backtracking point.
solverPush :: MonadZ3 z3 => z3 ()

-- | Backtrack <i>n</i> backtracking points.
solverPop :: MonadZ3 z3 => Int -> z3 ()
solverReset :: MonadZ3 z3 => z3 ()

-- | Number of backtracking points.
solverGetNumScopes :: MonadZ3 z3 => z3 Int

-- | Assert a constraing into the logical context.
--   
--   Reference:
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#ga1a05ff73a564ae7256a2257048a4680a</a>
solverAssertCnstr :: MonadZ3 z3 => AST -> z3 ()

-- | Assert a constraint a into the solver, and track it (in the unsat)
--   core using the Boolean constant <i>p</i>.
--   
--   This API is an alternative to Z3_solver_check_assumptions for
--   extracting unsat cores. Both APIs can be used in the same solver. The
--   unsat core will contain a combination of the Boolean variables
--   provided using Z3_solver_assert_and_track and the Boolean literals
--   provided using Z3_solver_check_assumptions.
solverAssertAndTrack :: MonadZ3 z3 => AST -> AST -> z3 ()

-- | Check whether the assertions in a given solver are consistent or not.
solverCheck :: MonadZ3 z3 => z3 Result

-- | Check whether the assertions in the given solver and optional
--   assumptions are consistent or not.
solverCheckAssumptions :: MonadZ3 z3 => [AST] -> z3 Result

-- | Retrieve the model for the last <a>solverCheck</a>.
--   
--   The error handler is invoked if a model is not available because the
--   commands above were not invoked for the given solver, or if the result
--   was <a>Unsat</a>.
solverGetModel :: MonadZ3 z3 => z3 Model

-- | Retrieve the unsat core for the last <a>solverCheckAssumptions</a>;
--   the unsat core is a subset of the assumptions
solverGetUnsatCore :: MonadZ3 z3 => z3 [AST]

-- | Return a brief justification for an <tt>Unknown</tt> result for the
--   commands <a>solverCheck</a> and <a>solverCheckAssumptions</a>.
solverGetReasonUnknown :: MonadZ3 z3 => z3 String

-- | Convert the given solver into a string.
solverToString :: MonadZ3 z3 => z3 String
assert :: MonadZ3 z3 => AST -> z3 ()

-- | Check whether the given logical context is consistent or not.
check :: MonadZ3 z3 => z3 Result

-- | Check whether the assertions in the given solver and optional
--   assumptions are consistent or not.
checkAssumptions :: MonadZ3 z3 => [AST] -> z3 Result
solverCheckAndGetModel :: MonadZ3 z3 => z3 (Result, Maybe Model)

-- | Get model.
--   
--   Reference :
--   <a>http://research.microsoft.com/en-us/um/redmond/projects/z3/group__capi.html#gaff310fef80ac8a82d0a51417e073ec0a</a>
getModel :: MonadZ3 z3 => z3 (Result, Maybe Model)

-- | Check satisfiability and, if <i>sat</i>, compute a value from the
--   given model.
--   
--   E.g. <tt> withModel $ \m -&gt; fromJust &lt;$&gt; evalInt m x </tt>
withModel :: (Applicative z3, MonadZ3 z3) => (Model -> z3 a) -> z3 (Result, Maybe a)

-- | Retrieve the unsat core for the last <a>checkAssumptions</a>; the
--   unsat core is a subset of the assumptions.
getUnsatCore :: MonadZ3 z3 => z3 [AST]

-- | Create a backtracking point.
--   
--   For <tt>push; m; pop 1</tt> see <a>local</a>.
push :: MonadZ3 z3 => z3 ()

-- | Backtrack <i>n</i> backtracking points.
--   
--   Contrary to <a>solverPop</a> this funtion checks whether <i>n</i> is
--   within the size of the solver scope stack.
pop :: MonadZ3 z3 => Int -> z3 ()

-- | Run a query and restore the initial logical context.
--   
--   This is a shorthand for <a>push</a>, run the query, and <a>pop</a>.
local :: MonadZ3 z3 => z3 a -> z3 a

-- | Backtrack all the way.
reset :: MonadZ3 z3 => z3 ()

-- | Get number of backtracking points.
getNumScopes :: MonadZ3 z3 => z3 Int
instance Functor Z3
instance Applicative Z3
instance Monad Z3
instance MonadIO Z3
instance MonadFix Z3
instance MonadZ3 Z3
