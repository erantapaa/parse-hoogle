-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Render overloaded expressions to their textual representation.
--   
--   This library allows you to render overloaded expressions to their
--   textual representation. For example:
--   
--   <pre>
--   *Repr&gt; let r = 1.5 + 2 + (3 + (-4) * (5 - pi / sqrt 6)) :: Repr Double
--   *Repr&gt; extract r
--   17.281195923884734
--   *Repr&gt; show rd
--   "1.5 + 2.0 + (3.0 + negate 4.0 * (5.0 - pi / sqrt 6.0))"
--   </pre>
@package repr
@version 0.4.1.3


-- | Textual representation of values.
module Text.Repr

-- | <tt>Repr α</tt> is a value of type <tt>α</tt> paired with a way to
--   render that value to its textual representation.
--   
--   <tt>Repr</tt>s follow the property that given a <tt>Repr</tt>
--   <tt>r</tt> if you evaluate the textual representation of <tt>r</tt>
--   you should get the value or <tt>r</tt>.
--   
--   Note that <tt>Repr α</tt> has an instance for most classes in
--   <tt>base</tt> provided that <tt>α</tt> has instances for the respected
--   classes. This allows you to write a numeric expression of type
--   <tt>Repr α</tt>. For example:
--   
--   <pre>
--   *Repr&gt; let r = 1.5 + 2 + (3 + (-4) * (5 - pi / sqrt 6)) :: Repr Double
--   </pre>
--   
--   You can <a>extract</a> the value of <tt>r</tt>:
--   
--   <pre>
--   *Repr&gt; extract r
--   17.281195923884734
--   </pre>
--   
--   And you can render <tt>r</tt> to its textual representation using
--   <a>show</a>:
--   
--   <pre>
--   *Repr&gt; show r
--   "1.5 + 2.0 + (3.0 + negate 4.0 * (5.0 - pi / sqrt 6.0))"
--   </pre>
data Repr α

-- | Extract the value of the <tt>Repr</tt>.
extract :: Repr α -> α

-- | Extract the renderer of the <tt>Repr</tt>.
renderer :: Repr α -> Renderer

-- | To render you need to supply the precedence and fixity of the
--   enclosing context.
--   
--   For more documentation about precedence and fixity see:
--   
--   <a>http://haskell.org/onlinereport/decls.html#sect4.4.2</a>
--   
--   The reason the renderer returns a <a>DString</a>, instead of for
--   example a <tt>String</tt> has to do with efficiency. The rendering of
--   expressions involves lots of left-factored appends i.e.: <tt>((a ++ b)
--   ++ c) ++ d</tt>. A <a>DString</a>, which is equivalent to a
--   <tt>ShowS</tt>, has a O(1) append operation while a <tt>String</tt>
--   has a O(n) append.
type Renderer = Precedence -> Fixity -> DString

-- | The precedence of operators and function application.
--   
--   <ul>
--   <li>Operators usually have a precedence in the range of 0 to 9.</li>
--   <li>Function application always has precedence 10.</li>
--   </ul>
type Precedence = Int

-- | Fixity of operators.
data Fixity

-- | No fixity information.
Non :: Fixity

-- | Left associative operator.
L :: Fixity

-- | Right associative operator.
R :: Fixity

-- | <tt>x &lt;?&gt; s</tt> annotates the rendering with the given string.
--   
--   The rendering wil look like: <tt>"({- s -} ...)"</tt> where
--   <tt>...</tt> is the rendering of <tt>x</tt>.
--   
--   This combinator is handy when you want to render the ouput of a
--   function and you want to see how the parameters of the function
--   contribute to the result. For example, suppose you defined the
--   following function <tt>f</tt>:
--   
--   <pre>
--   f p0 p1 p2 = p0 ^ 2 + sqrt p1 * ([p2..] !! 10)
--   </pre>
--   
--   You can then apply <tt>f</tt> to some parameters annotated with some
--   descriptive strings (the name of the parameter is usally a good idea):
--   
--   <pre>
--   f (1 &lt;?&gt; "p0") (2 &lt;?&gt; "p1") (3 &lt;?&gt; "p2")
--   </pre>
--   
--   The rendering will then look like:
--   
--   <pre>
--   "({- p0 -} fromInteger 1) * ({- p0 -} fromInteger 1) + sqrt ({- p1 -} (fromInteger 2)) * enumFrom ({- p2 -} (fromInteger 3)) !! 10"
--   </pre>
(<?>) :: Repr α -> DString -> Repr α

-- | <tt>pure x</tt> constructs a <a>Repr</a> which has <tt>x</tt> as value
--   and the showed <tt>x</tt> as rendering. For example:
--   
--   <pre>
--   *Repr&gt; let r = pure [1,2,3]
--   *Repr&gt; extract r
--   [1,2,3]
--   *Repr&gt; show r
--   "[1,2,3]"
--   </pre>
pure :: Show α => α -> Repr α

-- | Construct a <tt>Repr</tt> from the given value and its renderer.
repr :: α -> Renderer -> Repr α

-- | For example: <tt>pi = <a>constant</a> <a>pi</a> "pi"</tt>
constant :: α -> DString -> Repr α

-- | For example: <tt>toInteger = <a>to</a> <a>toInteger</a></tt>
to :: (α -> β) -> (Repr α -> β)

-- | For example: <tt>(&lt;) = <a>to2</a> (<a>&lt;</a>)</tt>
to2 :: (α -> β -> γ) -> (Repr α -> Repr β -> γ)

-- | For example: <tt>abs = <a>app</a> <a>abs</a> "abs"</tt>
app :: (α -> β) -> DString -> (Repr α -> Repr β)

-- | For example: <tt>div = <a>app2</a> <a>div</a> "div"</tt>
app2 :: (α -> β -> γ) -> DString -> (Repr α -> Repr β -> Repr γ)

-- | For example: <tt>(+) = <a>infx</a> <a>L</a> 6 (<a>+</a>) "+"</tt>
infx :: Fixity -> Precedence -> (α -> β -> γ) -> DString -> (Repr α -> Repr β -> Repr γ)
instance [safe] Typeable1 Repr
instance [safe] Eq Fixity
instance [safe] (Random α, Show α) => Random (Repr α)
instance [safe] Exception α => Exception (Repr α)
instance [safe] (Show α, Storable α) => Storable (Repr α)
instance [safe] Ix α => Ix (Repr α)
instance [safe] HasResolution α => HasResolution (Repr α)
instance [safe] (Bits α, Show α) => Bits (Repr α)
instance [safe] Monoid α => Monoid (Repr α)
instance [safe] Bounded α => Bounded (Repr α)
instance [safe] Eq α => Eq (Repr α)
instance [safe] Ord α => Ord (Repr α)
instance [safe] Enum α => Enum (Repr α)
instance [safe] (RealFloat α, Show α) => RealFloat (Repr α)
instance [safe] (RealFrac α, Show α) => RealFrac (Repr α)
instance [safe] (Floating α, Show α) => Floating (Repr α)
instance [safe] (Fractional α, Show α) => Fractional (Repr α)
instance [safe] (Integral α, Show α) => Integral (Repr α)
instance [safe] (Real α, Show α) => Real (Repr α)
instance [safe] (Num α, Show α) => Num (Repr α)
instance [safe] IsString α => IsString (Repr α)
instance [safe] Read α => Read (Repr α)
instance [safe] Show (Repr α)


-- | The numeric functions from the <tt>Prelude</tt> lifted into
--   <tt><a>Repr</a>s</tt>.
module Prelude.Repr

-- | Lifts <tt>Prelude.<a>subtract</a></tt> into <tt><a>Repr</a>s</tt>
subtract :: Num α => Repr α -> Repr α -> Repr α

-- | Lifts <tt>Prelude.<a>even</a></tt> into a <a>Repr</a>
even :: Integral α => Repr α -> Bool

-- | Lifts <tt>Prelude.<a>odd</a></tt> into a <a>Repr</a>
odd :: Integral α => Repr α -> Bool

-- | Lifts <tt>Prelude.<a>gcd</a></tt> into <tt><a>Repr</a>s</tt>
gcd :: Integral α => Repr α -> Repr α -> Repr α

-- | Lifts <tt>Prelude.<a>lcm</a></tt> into <tt><a>Repr</a>s</tt>
lcm :: Integral α => Repr α -> Repr α -> Repr α

-- | Lifts <tt>Prelude.<a>^</a></tt> into <tt><a>Repr</a>s</tt>
(^) :: (Num α, Integral β) => Repr α -> Repr β -> Repr α

-- | Lifts <tt>Prelude.<a>^^</a></tt> into <tt><a>Repr</a>s</tt>
(^^) :: (Fractional α, Integral β) => Repr α -> Repr β -> Repr α

-- | Lifts <tt>Prelude.<a>fromIntegral</a></tt> into <tt><a>Repr</a>s</tt>
fromIntegral :: (Integral α, Num β) => Repr α -> Repr β

-- | Lifts <tt>Prelude.<a>realToFrac</a></tt> into <tt><a>Repr</a>s</tt>
realToFrac :: (Real α, Fractional β) => Repr α -> Repr β
