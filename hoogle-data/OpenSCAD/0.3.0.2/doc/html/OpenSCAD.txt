-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | ADT wrapper and renderer for OpenSCAD models.
--   
@package OpenSCAD
@version 0.3.0.2


-- | <h1>Overview</h1>
--   
--   The Graphics.OpenSCAD module provides abstract data types for creating
--   OpenSCAD model definitions calls, along with a function to render it
--   as a string, and some utilities. The primary goal is that the output
--   should always be valid OpenSCAD. If you manage to generate OpenSCAD
--   source that causes OpenSCAD to complain, please open an issue.
--   
--   The primary effect of this is that Graphics.OpenSCAD distinguishes
--   between 2d and 3d <a>Model</a>s. If you want to mix them, you must
--   explicitly convert between them. While two-dimensional model creation
--   could be polymorphic functions that create either, so that such models
--   could be treated as either 2d or 3d, you'd still have to explicitly
--   convert models whose type was fixed as 2d by a transformation, and
--   <a>render</a> wouldn't work if the type was still ambiguous, ala
--   <tt>render $ square 2</tt>.
--   
--   <h1>Usage</h1>
--   
--   Standard usage is to have a <tt>main</tt> function that looks like:
--   
--   <pre>
--   main = draw $ <i>Solid</i>
--   </pre>
--   
--   or <tt> main = drawL $ [<i>Solid</i>] </tt>
--   
--   and then set your IDE's compile command to use <tt>runhaskell</tt> or
--   equivalent to run your code and send the output to a .scad file. Open
--   that file in OpenSCAD, and set it to automatically reload if the file
--   changes. Recompiling your program will cause the model to be loaded
--   and displayed by OpenSCAD.
--   
--   The type constructors are not exported, with functions being exported
--   in their stead. This allows extra checking to be done on those that
--   need it. It also provides consistency, as otherwise you'd have to
--   remember whether <a>box</a> is a constructor or a convenience
--   function, etc.
--   
--   Because of this, the constructors are not documented, the exported
--   functions are. The documentation is generally just the corresponding
--   OpenSCAD function name, along with the names of the arguments from the
--   OpenSCAD documentation. If no OpenSCAD function name is given, then
--   it's the same as the <a>OpenSCAD</a> function. You should check the
--   OpenSCAD documentation for usage information.
--   
--   <h1>Oddities</h1>
--   
--   <a>importFile</a> has been left polymorphic. I couldn't find a sane
--   way to check that you're importing the right file type, so detecting
--   such errors - including importing a 3d file and trying to extrude it -
--   have to be left up to OpenSCAD in any case. So for now, there's just
--   <a>importFile</a>. This does create the oddity that if you import a
--   file and try and render it without doing something to indicate how
--   many dimensions it has (one of the transformations, an extrusion or
--   projection, or <a>solid</a>) you'll get a compile error because the
--   type is ambiguous. Later, this may turn into <tt>import2d</tt> and
--   <tt>import3d</tt>.
--   
--   The interfaces for <a>polygon</a>s and <a>polyhedron</a>s is seriously
--   different from the OpenSCAD interface. Rather than expecting you to
--   enter a list of points and then references to them, you just enter the
--   points directly. If you really want to do it the OpenSCAD way, you can
--   do something like:
--   
--   <pre>
--   draw $ polyhedron [[(p 0, p 1, p 2), (p 0, p 2, p 3), ... ]]
--   where points = [.....]
--         p i = points !! i
--   </pre>
--   
--   Also, the OpenSCAD polyedron code recently changed. The old version
--   requires that the faces all be triangles, the new version allows for
--   them to be arbitrary polygons. <a>OpenSCAD</a> supports both: if all
--   your faces are triangles, it will use the old version. If some have
--   more points, the new version will be used. If any have fewer than
--   three points you get an error. At this time, no tests are done on the
--   faces. That will probably change in the future.
--   
--   Finally, polygon and polyhedron can generate errors on input that
--   seems to generate proper solids. If you turn on 'View-&gt;Thrown
--   Together', you'll see it highlighting errors in the object.
--   
--   Offset is missing even though it's documented, as it isn't supported
--   by a released version of OpenSCAD, so presumably subject to change. It
--   is implemented, but untested as yet. You can add it to the module's
--   export lists if you want to play with it.
module Graphics.OpenSCAD

-- | A <a>Model</a> is either a <a>Model2d</a>, a <a>Model3d</a>, a
--   transformation of a <a>Model</a>, a combination of <a>Model</a>s, or a
--   <a>Model</a> with it's rendering tweaked by a <a>Facet</a>.
--   <a>Model</a>s can be rendered.
data Model v
class Eq a => Vector a where v1 #. v2 = sum $ zipWith (*) (toList v1) (toList v2) isZero = all (== 0) . toList collinear [] = False collinear [_] = False collinear [v1, v2] = v1 /= v2 collinear (v1 : v2 : vs) | v1 /= v2 = all (\ v -> isZero $ (v2 #- v1) #* (v1 #- v)) vs | otherwise = collinear (v2 : vs)

-- | A two-dimensional model. Note that the types do not mix implicitly.
--   You must turn a <a>Model2d</a> into a <a>Model3d</a> using one of
--   <a>linearExtrude</a>, <a>rotateExtrude</a>, or <a>solid</a>.
type Model2d = Model Vector2d

-- | A three-dimensional model. You can create a <a>Model2d</a> from a
--   <a>Model3d</a> using <a>projection</a>.
type Model3d = Model Vector3d

-- | <a>Vector2d</a> is used where <a>OpenSCAD</a> expects an OpenSCAD
--   <tt>vector</tt> of length 2.
type Vector2d = (Double, Double)

-- | <a>Vector3d</a> is used where <a>OpenSCAD</a> expects an OpenSCAD
--   <tt>vector</tt> of length 3.
type Vector3d = (Double, Double, Double)

-- | A <a>Facet</a> is used to set one of the special variables that
--   control the mesh used during generation of circular objects. They
--   appear as arguments to various constructors, as well as in the
--   <a>var</a> function to set them for the argument objects.
data Facet

-- | A 4x4 transformation matrix specifying a complete 3-space transform of
--   a <a>Model3d</a>.
type TransMatrix = ((Double, Double, Double, Double), (Double, Double, Double, Double), (Double, Double, Double, Double), (Double, Double, Double, Double))

-- | The third argument to unsafePolyhedron is a <a>Sides</a>.
data Sides
Faces :: [[Int]] -> Sides
Triangles :: [[Int]] -> Sides

-- | Create a rectangular <a>Model2d</a> with <tt>rectangle <i>x-size
--   y-size</i></tt>.
rectangle :: Double -> Double -> Model2d

-- | <a>square</a> is a <a>rectangle</a> with both sides the same size.
square :: Double -> Model2d

-- | Create a circular <a>Model</a> with <tt>circle <i>radius</i>
--   <a>Facet</a></tt>.
circle :: Double -> Facet -> Model2d

-- | Turn a list of lists of <a>Vector2d</a>s and an Int into <tt>polygon
--   <i>convexity points path</i></tt>. The argument to polygon is the list
--   of paths that is the second argument to the OpenSCAD polygon function,
--   except the points are <a>Vector2d</a>s, not references to
--   <a>Vector2d</a>s in that functions points argument. If you were just
--   going to pass in the points, it now needs to be in an extra level of
--   <tt>List</tt>.
polygon :: Int -> [[Vector2d]] -> Model2d

-- | This provides direct access to the OpenScad <tt>polygon</tt> command
--   for performance reasons. This version uses the OpenSCAD arguments:
--   <tt>polygon <i>convexity points path</i></tt> to allow client code to
--   save space. However, it bypasses all the checks done by
--   <a>polygon</a>, which need the other representation.
unsafePolygon :: Int -> [Vector2d] -> [[Int]] -> Model2d

-- | Project a <a>Model3d</a> into a <a>Model</a> with <tt>projection
--   <i>cut <a>Model3d</a></i></tt>.
projection :: Bool -> Model3d -> Model2d

-- | <a>importFile</a> is <tt>import <i>filename</i></tt>.
importFile :: Vector v => FilePath -> Model v

-- | Create a sphere with <tt>sphere <i>radius <a>Facet</a></i></tt>.
sphere :: Double -> Facet -> Model3d

-- | Create a box with <tt>cube <i>x-size y-size z-size</i></tt>
box :: Double -> Double -> Double -> Model3d

-- | A convenience function for creating a cube as a <a>box</a> with all
--   sides the same length.
cube :: Double -> Model3d

-- | Create a cylinder with <tt>cylinder <i>radius height
--   <a>Facet</a></i></tt>.
cylinder :: Double -> Double -> Facet -> Model3d

-- | Create an oblique cylinder with <tt>cylinder <i>radius1 height radius2
--   <a>Facet</a></i></tt>.
obCylinder :: Double -> Double -> Double -> Facet -> Model Vector3d

-- | Turn a list of list of <a>Vector3d</a>s and an int into <tt>polyhedron
--   <i>convexity points <a>Sides</a></i></tt>. The argument to polyhedron
--   is the list of paths that is the second argument to the OpenSCAD
--   polyhedron function, except the points are <a>Vector3d</a>s, not the
--   references to <a>Vector3d</a>s used in that functions <tt>points</tt>
--   argument. The function will build the appropriate function call, using
--   <tt>faces</tt> if you pass in a side that uses more than 3 points, or
--   <tt>triangles</tt> if not. Note that <tt>faces</tt> doesn't work in
--   older versions of OpenSCAD, and <tt>triangles</tt> is depreciated.
--   Until a mechanism to set the version of OpenSCAD is provided,
--   generating the <tt>faces</tt> version will cause an error.
--   
--   Passing in <a>Sides</a> that have fewer than three points, have
--   collinear points or have points that aren't in the same plane is an
--   error that is caught by the library.
polyhedron :: Int -> [[Vector3d]] -> Model3d

-- | This provides direct access to the OpenSCAD <tt>polyhedron</tt>
--   command for performance reasons. This version uses the OpenSCAD
--   arguments: <tt>polyhedron <i>convexity points <a>Sides</a></i></tt> to
--   allow client code to save space. However, it bypasses all the checks
--   done by <a>polyhedron</a>, which needs the other representation.
unsafePolyhedron :: Int -> [Vector3d] -> Sides -> Model3d

-- | Transform a <a>Model3d</a> with a <a>TransMatrix</a>
multMatrix :: TransMatrix -> Model3d -> Model3d

-- | Extrude a <a>Model2d</a> along a line with <tt>linear_extrude</tt>.
linearExtrude :: Double -> Double -> Vector2d -> Int -> Int -> Facet -> Model2d -> Model3d

-- | Rotate a <a>Model2d</a> around the origin with <tt>rotate_extrude
--   <i>convexity <a>Facet</a> <a>Model</a></i></tt>
rotateExtrude :: Int -> Facet -> Model2d -> Model3d

-- | Load a height map from a file with <tt>surface <i>FilePath Invert
--   Convexity</i></tt>.
surface :: FilePath -> Bool -> Int -> Model3d

-- | Turn a <a>Model2d</a> into a <a>Model3d</a> exactly as is.
solid :: Model2d -> Model3d

-- | Create the union of a list of <a>Model</a>s.
union :: Vector v => [Model v] -> Model v

-- | Create the intersection of a list of <a>Model</a>s.
intersection :: Vector v => [Model v] -> Model v

-- | The difference between two <a>Model</a>s.
difference :: Vector v => Model v -> Model v -> Model v

-- | The Minkowski sum of a list of <a>Model</a>s.
minkowski :: Vector v => [Model v] -> Model v

-- | The convex hull of a list of <a>Model</a>s.
hull :: Vector v => [Model v] -> Model v

-- | Scale a <a>Model</a>, the vector specifying the scale factor for each
--   axis.
scale :: Vector v => v -> Model v -> Model v

-- | Resize a <a>Model</a> to occupy the dimensions given by the vector.
--   Note that this does nothing prior to the 2014 versions of OpenSCAD.
resize :: Vector v => v -> Model v -> Model v

-- | Rotate a <a>Model</a> by different amounts around each of the three
--   axis.
rotate :: Vector v => v -> Model v -> Model v

-- | Translate a <a>Model</a> along a <a>Vector</a>.
translate :: Vector v => v -> Model v -> Model v

-- | Mirror a <a>Model</a> across a plane intersecting the origin.
mirror :: Vector v => v -> Model v -> Model v

-- | Render a <a>Model</a> in a specific color. This doesn't use the
--   OpenSCAD color model, but instead uses the <a>Colour</a> model. The
--   <a>OpenSCAD</a> module rexports <a>Names</a> so you can conveniently
--   say <tt><a>color</a> <a>red</a> <i><a>Model</a></i></tt>.
color :: Vector v => Colour Double -> Model v -> Model v

-- | Render a <a>Model</a> in a transparent color. This uses the
--   <a>AlphaColour</a> color model.
transparent :: Vector v => AlphaColour Double -> Model v -> Model v

-- | A <a>translate</a> that just goes up, since those seem to be common.
up :: Double -> Model3d -> Model3d

-- | <a>render</a> does all the real work. It will walk the AST for a
--   <a>Model</a>, returning an OpenSCAD program in a <a>String</a>.
render :: Vector v => Model v -> String

-- | A convenience function to render a list of <a>Model</a>s by taking
--   their union.
renderL :: Vector v => [Model v] -> String

-- | <a>var</a> uses <tt>assign</tt> to set a <a>Facet</a> variable for
--   it's <a>Model</a>s.
var :: Facet -> [Model v] -> Model v

-- | <a>fn</a> is used to set the <tt>$fn</tt> variable in a <a>Facet</a>
--   or <a>var</a>.
fn :: Int -> Facet

-- | <a>fs</a> is used to set the <tt>$fs</tt> variable in a <a>Facet</a>
--   or <a>var</a>.
fs :: Double -> Facet

-- | <a>fa</a> is used to set the <tt>$fa</tt> variable in a <a>Facet</a>
--   or <a>var</a>.
fa :: Double -> Facet

-- | <a>def</a> is used where a <a>Facet</a> is needed but we don't want to
--   change any of the values.
def :: Facet

-- | Use <a>diam</a> to turn a diameter into a radius for circles, spheres,
--   etc.
diam :: Double -> Double

-- | A convenience function to write the rendered <a>Model</a> to standard
--   output.
draw :: Vector v => Model v -> IO ()

-- | A convenience function to write a <a>union</a> of <a>Model</a>s to
--   standard output.
drawL :: Vector v => [Model v] -> IO ()

-- | You can use '(#)' to write transformations in a more readable postfix
--   form, cube 3 translate (-3, -3, -3)
(#) :: b -> (b -> c) -> c
instance Show Facet
instance Show Join
instance Show Sides
instance Show v => Show (Model v)
instance Show Solid
instance Show Shape
instance Vector v => Monoid (Model v)
instance Vector v => Semigroup (Model v)
instance Vector Vector3d
instance Vector Vector2d

module Graphics.OpenSCAD.Unicode

-- | (∪) = <a>union</a>
--   
--   U+222A, UNION
(∪) :: Vector v => Model v -> Model v -> Model v

-- | (∩) = <a>intersection</a>
--   
--   U+2229, INTERSECTION
(∩) :: Vector v => Model v -> Model v -> Model v

-- | (∖) = <a>difference</a>
--   
--   U+2216, SET MINUS
(∖) :: Vector v => Model v -> Model v -> Model v

-- | (⊖) = Symmetric difference
--   
--   U+2296, CIRCLED MINUS
(⊖) :: Vector v => Model v -> Model v -> Model v

-- | (ࣷ) = <a>minkowski</a>
--   
--   U+2295, CIRCLED PLUS
(⊕) :: Vector v => Model v -> Model v -> Model v
