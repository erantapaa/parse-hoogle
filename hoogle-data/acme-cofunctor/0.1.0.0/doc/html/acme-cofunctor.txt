-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Cofunctor is a structure from category theory dual to Functor
--   
@package acme-cofunctor
@version 0.1.0.0


-- | <a>Cofunctor</a> is a structure from category theory dual to
--   <a>Functor</a>
--   
--   A <a>Functor</a> is defined by the operation <a>fmap</a>:
--   
--   <pre>
--   fmap :: (a -&gt; b) -&gt; (f a -&gt; f b)
--   </pre>
--   
--   This means that its dual must be defined by the following operation:
--   
--   <pre>
--   cofmap :: (b -&gt; a) -&gt; (f b -&gt; f a)
--   </pre>
--   
--   Since beginning his investigations, the author of this package has
--   discovered that this pattern is <i>at least</i> as commonly used as
--   <a>Functor</a>. In fact, many ubiquitous Haskell types (e.g.
--   <tt>[]</tt>, <a>Maybe</a>, <tt>((-&gt;) a)</tt> turn out to have a
--   <a>Cofunctor</a> instance.
module Data.Cofunctor

-- | <a>Cofunctor</a> is a structure from category theory dual to
--   <a>Functor</a>
class Cofunctor f
cofmap :: Cofunctor f => (b -> a) -> f b -> f a
instance Cofunctor IO
instance Cofunctor ((,) a)
instance Cofunctor ((->) a)
instance Cofunctor (Either e)
instance Cofunctor Maybe
instance Cofunctor []
