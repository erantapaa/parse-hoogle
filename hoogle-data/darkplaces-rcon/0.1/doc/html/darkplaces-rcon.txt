-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Darkplaces rcon client library
--   
@package darkplaces-rcon
@version 0.1

module DarkPlaces.Rcon.Internal

-- | max Darkplaces packet size
maxPacketSize :: Int
quakePacketHeader :: ByteString
challangePacket :: ByteString
hmacMD4 :: ByteString -> ByteString -> ByteString
parseChallenge :: ByteString -> Maybe ByteString

-- | Try to parse packet as dp rcon packet. if parsing fails returns
--   Nothing
parseRcon :: ByteString -> Maybe ByteString

-- | generates simple quake rcon packet
rconNonSecurePacket :: ByteString -> ByteString -> ByteString

-- | generates time based secure packet
rconSecureTimePacket :: Real a => a -> ByteString -> ByteString -> ByteString

-- | generates chalange based secure packet
rconSecureChallangePacket :: ByteString -> ByteString -> ByteString -> ByteString

module DarkPlaces.Rcon
data RconMode
NonSecureRcon :: RconMode
TimeSecureRcon :: RconMode
ChallangeSecureRcon :: RconMode
data ProtocolOptions
OnlyIPv4 :: ProtocolOptions
OnlyIPv6 :: ProtocolOptions
BothProtocols :: ProtocolOptions
data RconInfo
RconInfo :: HostName -> ServiceName -> RconMode -> ByteString -> Int -> ProtocolOptions -> RconInfo
rconHost :: RconInfo -> HostName
rconPort :: RconInfo -> ServiceName
rconMode :: RconInfo -> RconMode
rconPassword :: RconInfo -> ByteString
rconTimeDiff :: RconInfo -> Int
rconProtoOpt :: RconInfo -> ProtocolOptions
data RconConnection
defaultRcon :: RconInfo

-- | Create <a>RconInfo</a> for givven host, port and password
makeRcon :: HostName -> ServiceName -> ByteString -> RconInfo

-- | Connect to darkplaces server
connect :: RconInfo -> IO RconConnection

-- | Close connection
close :: RconConnection -> IO ()

-- | Return True if connection is active and False if it closed
isConnected :: RconConnection -> IO Bool

-- | Sends rcon command via <a>RconConnection</a>
send :: RconConnection -> ByteString -> IO ()

-- | Receive packet and tries parse it as rcon packet. If succeeds returns
--   Right ByteString with parsed response else returns Left ByteString
--   with raw packet
recv :: RconConnection -> IO (Either ByteString ByteString)

-- | Waits for rcon packet and return parsed response. if parsing fails it
--   discard packet and waits another.
recvRcon :: RconConnection -> IO ByteString

-- | Send rcon command for activating rcon log. This feature will not work
--   over NAT
enableLog :: RconConnection -> IO ()

-- | Opposite action for <a>enableLog</a>
disableLog :: RconConnection -> IO ()
setPassword :: RconConnection -> ByteString -> IO ()
setMode :: RconConnection -> RconMode -> IO ()
setTimeDiff :: RconConnection -> Int -> IO ()
getPassword :: RconConnection -> IO ByteString
getMode :: RconConnection -> IO RconMode
getTimeDiff :: RconConnection -> IO Int
getHost :: RconConnection -> IO HostName
getPort :: RconConnection -> IO ServiceName
instance Show RconMode
instance Read RconMode
instance Eq RconMode
instance Ord RconMode
instance Enum RconMode
instance Bounded RconMode
instance Show ProtocolOptions
instance Read ProtocolOptions
instance Eq ProtocolOptions
instance Ord ProtocolOptions
instance Enum ProtocolOptions
instance Bounded ProtocolOptions
instance Show RconInfo
instance Read RconInfo
instance Eq RconInfo
