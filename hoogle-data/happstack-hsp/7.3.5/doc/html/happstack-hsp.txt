-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Support for using HSP templates in Happstack
--   
@package happstack-hsp
@version 7.3.5

module HSP.Google.Analytics
newtype UACCT

-- | The UACCT provided to you by Google (looks like: <tt>UA-XXXXX-X</tt>)
UACCT :: String -> UACCT

-- | create the (even older) google analytics script tags
--   
--   NOTE: you must put the <a>analytics yourUACCT %</a> immediately before
--   the <a>/body</a> tag
--   
--   You probably want to use <a>analyticsAsync</a> instead.
--   
--   See also: <tt>addAnalytics</tt>, <a>analyticsAsync</a>,
--   <a>universalAnalytics</a>
analytics :: (XMLGenerator m, StringType m ~ Text) => UACCT -> GenXMLList m

-- | create the google analytics asynchronous tracking script tag
--   
--   This uses the now dubbed 'classic google analytics'
--   
--   NOTE: you must put this right before the &lt;/head&gt; tag see also:
--   universalAnalytics
analyticsAsync :: (XMLGenerator m, StringType m ~ Text) => UACCT -> GenXML m
universalAnalytics :: (XMLGenerator m, StringType m ~ Text) => UACCT -> GenXML m
instance Typeable UACCT
instance Read UACCT
instance Show UACCT
instance Eq UACCT
instance Ord UACCT
instance Data UACCT


-- | This module provides, <tt>instance <a>XMLGenerator</a>
--   (<a>ServerPartT</a> m)</tt>
module HSP.ServerPartT
instance (Functor m, Monad m) => XMLGenerator (ServerPartT m)
instance (Functor m, Monad m) => SetAttr (ServerPartT m) XML
instance (Functor m, Monad m) => AppendChild (ServerPartT m) XML
instance (Functor m, Monad m) => EmbedAsChild (ServerPartT m) Text
instance (Functor m, Monad m) => EmbedAsChild (ServerPartT m) Text
instance Monad m => EmbedAsChild (ServerPartT m) ()
instance (Functor m, Monad m) => EmbedAsChild (ServerPartT m) XML
instance (Functor m, Monad m) => EmbedAsChild (ServerPartT m) Integer
instance (Functor m, Monad m) => EmbedAsChild (ServerPartT m) Int
instance (Functor m, Monad m) => EmbedAsChild (ServerPartT m) String
instance (Functor m, Monad m) => EmbedAsChild (ServerPartT m) Char
instance (Functor m, Monad m, IsName n Text) => EmbedAsAttr (ServerPartT m) (Attr n Text)
instance (Functor m, Monad m, IsName n Text) => EmbedAsAttr (ServerPartT m) (Attr n Text)
instance (Functor m, Monad m, IsName n Text) => EmbedAsAttr (ServerPartT m) (Attr n Int)
instance (Functor m, Monad m, IsName n Text) => EmbedAsAttr (ServerPartT m) (Attr n Bool)
instance (Functor m, Monad m, IsName n Text) => EmbedAsAttr (ServerPartT m) (Attr n String)
instance (Functor m, Monad m, IsName n Text) => EmbedAsAttr (ServerPartT m) (Attr n Char)
instance (Functor m, Monad m) => EmbedAsAttr (ServerPartT m) Attribute
instance Monad m => XMLGen (ServerPartT m)


-- | This module contains orphan <a>XMLGenT</a> instances for
--   <a>ServerMonad</a>, <a>FilterMonad</a>, <a>WebMonad</a>,
--   <a>HasRqData</a>, and <a>Happstack</a>. It does not export any
--   functions.
module Happstack.Server.XMLGenT
instance (Alternative m, MonadPlus m, Functor m, MonadIO m, ServerMonad m, FilterMonad a m, WebMonad a m, HasRqData m, a ~ Response) => Happstack (HSPT xml m)
instance HasRqData m => HasRqData (HSPT xml m)
instance WebMonad a m => WebMonad a (HSPT xml m)
instance FilterMonad a m => FilterMonad a (HSPT xml m)
instance ServerMonad m => ServerMonad (HSPT xml m)
instance (Alternative m, MonadPlus m, Functor m, MonadIO m, ServerMonad m, FilterMonad a m, WebMonad a m, HasRqData m, a ~ Response) => Happstack (XMLGenT m)
instance HasRqData m => HasRqData (XMLGenT m)
instance WebMonad a m => WebMonad a (XMLGenT m)
instance FilterMonad a m => FilterMonad a (XMLGenT m)
instance ServerMonad m => ServerMonad (XMLGenT m)


-- | support for using HSP+Happstack for rendering HTML
module Happstack.Server.HSP.HTML

-- | A generic webpage template
defaultTemplate :: (XMLGenerator m, EmbedAsChild m headers, EmbedAsChild m body, StringType m ~ Text) => Text -> headers -> body -> m (XMLType m)
instance ToMessage XML
instance ToMessage (Maybe XMLMetaData, XML)
