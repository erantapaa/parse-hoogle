-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Drop-in(ish) background worker system for Yesod apps
--   
@package yesod-worker
@version 0.0.1

module Yesod.Worker

-- | Provides the default <a>runW</a> implementation for running SQL
--   queries inside a <tt>Worker</tt>
defaultRunW :: (PersistConfig c, MonadWorker m, MonadBaseControl IO m) => (WorkerSite m -> c) -> (WorkerSite m -> PersistConfigPool c) -> PersistConfigBackend c m b -> m b

-- | Add a job to the site queue from within a Handler
enqueue :: YesodWorker site => Job -> HandlerT site IO ()

-- | An empty queue, suitable for initializing the app queue at boot
emptyQueue :: IO (JobQueue a)

-- | Get the master site application argument.
getYesodW :: MonadWorker m => m (WorkerSite m)
type JobQueue a = TVar (Seq a)

-- | Spawns a number of workers which will consume from the application
--   queue performing jobs as they are popped.
spawnWorkers :: YesodWorker site => site -> IO ()
data WorkerT site m a

-- | Typeclass for customizing Worker settings
class Yesod site => YesodWorker site where type family Job workerCount _ = 3
queue :: YesodWorker site => site -> JobQueue Job
workerCount :: YesodWorker site => site -> Int
perform :: YesodWorker site => Job -> WorkerT site IO ()
runW :: YesodWorker site => SqlPersistT (WorkerT site IO) a -> WorkerT site IO a
