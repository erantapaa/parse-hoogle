-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell source code analyzer
--   
@package hs-inspector
@version 0.5.2.0

module Language.Haskell.Names
isName :: String -> HsName -> Bool
name :: HsName -> String
qName :: HsQName -> Maybe String
declName :: HsDecl -> String

module Language.Haskell.Explorer
parseDecls :: Code -> [HsDecl]
parseBindings :: Code -> [Binding]
declsOf :: Binding -> Code -> [HsDecl]
rhssOf :: Binding -> Code -> [HsRhs]
bindingsOf :: Binding -> Code -> [Binding]
transitiveBindingsOf :: Binding -> Code -> [Binding]
expressionsOf :: Binding -> Code -> [Expression]
expressionToBinding :: Expression -> Maybe Binding
data Expression
E :: HsExp -> Expression
O :: HsQOp -> Expression
type Binding = String
type Code = String

module Language.Haskell.Inspector

-- | Inspection that tells whether a binding uses the composition operator
--   <a>.</a> in its definition
hasComposition :: Inspection

-- | Inspection that tells whether a binding uses guards in its definition
hasGuards :: Inspection

-- | Inspection that tells whether a binding uses ifs in its definition
hasIf :: Inspection

-- | Inspection that tells whether a binding uses ifs or guards in its
--   definition
hasConditional :: Inspection

-- | Inspection that tells whether a binding uses a lambda expression in
--   its definition
hasLambda :: Inspection

-- | Inspection that tells whether a binding is direct recursive
hasDirectRecursion :: Inspection

-- | Inspection that tells whether a binding uses the the given target
--   binding in its definition
hasUsage :: String -> Inspection

-- | Inspection that tells whether a binding uses lists comprehensions in
--   its definition
hasComprehension :: Inspection

-- | Inspection that tells whether a top level binding exists
hasBinding :: Inspection
hasTypeDeclaration :: Inspection
hasTypeSignature :: Inspection
hasExpression :: (Expression -> Bool) -> Inspection
hasDecl :: (HsDecl -> Bool) -> GlobalInspection
hasRhs :: (HsRhs -> Bool) -> Inspection
isParseable :: GlobalInspection
type Inspection = Binding -> Code -> Bool
type GlobalInspection = Code -> Bool

module Language.Haskell.Inspector.Smell

-- | Inspection that tells whether a binding has expressions like 'x ==
--   True'
hasRedundantBooleanComparison :: Inspection

-- | Inspection that tells whether a binding has an if expression where
--   both branches return boolean literals
hasRedundantIf :: Inspection

-- | Inspection that tells whether a binding has guards where both branches
--   return boolean literals
hasRedundantGuards :: Inspection

-- | Inspection that tells whether a binding has lambda expressions like 'x
--   -&gt; g x'
hasRedundantLambda :: Inspection

-- | Inspection that tells whether a binding has parameters that can be
--   avoided using point-free
hasRedundantParameter :: Inspection

module Language.Haskell.Inspector.Combiner
detect :: Inspection -> Code -> [Binding]
negative :: Inspection -> Inspection
transitive :: Inspection -> Inspection
