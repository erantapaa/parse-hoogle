-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | ContStuff instances for monads-tf transformers (deprecated)
--   
--   PLEASE NOTE: This package is deprecated in favor of
--   contstuff-transformers, which generalizes to all transformers-based
--   libraries. This package provides contstuff transformer class instances
--   for the monad transformers from the monads-tf package as well as
--   monads-tf transformer class instances for the monad transformers from
--   contstuff. This makes using both transformer libraries in a single
--   project much more convenient as you get along with a single set of
--   lifting functions.
@package contstuff-monads-tf
@version 0.2.1


-- | This package provides contstuff transformer class instances for the
--   monad transformers from the monads-tf package as well as monads-tf
--   transformer class instances for the monad transformers from contstuff.
--   This makes using both transformer libraries in a single project much
--   more convenient as you get along with a single set of lifting
--   functions.
module Control.ContStuff.MonadsTf

-- | Monads in which <a>IO</a> computations may be embedded. Any monad
--   built by applying a sequence of monad transformers to the <a>IO</a>
--   monad will be an instance of this class.
--   
--   Instances should satisfy the following laws, which state that
--   <a>liftIO</a> is a transformer of monads:
--   
--   <ul>
--   <li><pre><a>liftIO</a> . <a>return</a> = <a>return</a></pre></li>
--   <li><pre><a>liftIO</a> (m &gt;&gt;= f) = <a>liftIO</a> m &gt;&gt;=
--   (<a>liftIO</a> . f)</pre></li>
--   </ul>
class Monad m => MonadIO m :: (* -> *)
liftIO :: MonadIO m => IO a -> m a

-- | The class of monad transformers. Instances should satisfy the
--   following laws, which state that <a>lift</a> is a transformer of
--   monads:
--   
--   <ul>
--   <li><pre><a>lift</a> . <a>return</a> = <a>return</a></pre></li>
--   <li><pre><a>lift</a> (m &gt;&gt;= f) = <a>lift</a> m &gt;&gt;=
--   (<a>lift</a> . f)</pre></li>
--   </ul>
class MonadTrans t :: ((* -> *) -> * -> *)

-- | Interface to <tt>Control.Monad.Trans.lift</tt>.
liftTF :: (Monad m, MonadTrans t) => m a -> t m a
instance (LiftBase m, Monad m, Monoid w) => LiftBase (WriterT w m)
instance (LiftBase m, Monad m, Monoid w) => LiftBase (WriterT w m)
instance (LiftBase m, Monad m) => LiftBase (StateT s m)
instance (LiftBase m, Monad m) => LiftBase (StateT s m)
instance (LiftBase m, Monad m) => LiftBase (ReaderT r m)
instance (LiftBase m, Monad m, Monoid w) => LiftBase (RWST r w s m)
instance (LiftBase m, Monad m, Monoid w) => LiftBase (RWST r w s m)
instance (LiftBase m, Monad m) => LiftBase (ListT m)
instance (Error e, LiftBase m, Monad m) => LiftBase (ErrorT e m)
instance (LiftBase m, Monad m) => LiftBase (ContT r m)
instance Monoid w => Transformer (WriterT w)
instance Monoid w => Transformer (WriterT w)
instance Transformer (StateT s)
instance Transformer (StateT s)
instance Transformer (ReaderT r)
instance Monoid w => Transformer (RWST r w s)
instance Monoid w => Transformer (RWST r w s)
instance Transformer ListT
instance Error e => Transformer (ErrorT e)
instance Transformer (ContT r)
instance MonadIO m => MonadIO (StateT r s m)
instance MonadIO m => MonadIO (MaybeT r m)
instance MonadIO m => MonadIO (EitherT r e m)
instance MonadIO m => MonadIO (ContT r m)
instance MonadIO m => MonadIO (ChoiceT r i m)
instance MonadTrans (StateT r s)
instance MonadTrans (MaybeT r)
instance MonadTrans (EitherT r e)
instance MonadTrans (ContT r)
instance MonadTrans (ChoiceT r i)
