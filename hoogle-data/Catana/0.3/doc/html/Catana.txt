-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A monad for complex manipulation of a stream.
--   
--   A monad for complex manipulation of a stream.
@package Catana
@version 0.3


-- | <ul>
--   <li><i>Computation type:</i> Computations that both consume and
--   produce elements lazily with support for advanced control flow using
--   continuations, recursion, and parallel and serial composition.</li>
--   <li><i>Binding Strategy:</i> Binding a function to a monadic value
--   produces a continuation which is represented as a <a>Step</a> that
--   either <a>Wait</a>s for input or <a>Yield</a>s a value, and returns
--   the next <a>Step</a>.</li>
--   <li><i>Useful for:</i> Lazily processing a list with complex control
--   structures.</li>
--   <li><i>Zero and plus:</i> mzero consumes all input with producing any
--   output, mplus combines output of two Catana's in parallel</li>
--   <li><i>Example type:</i> <tt><a>Catana</a> i o b a</tt></li>
--   </ul>
--   
--   The Catana monad represents computations that are both catamorphisms
--   and anamorphisms; they both consume and produce values. In addition,
--   the Catana monad represents the computation in continuation-passing
--   style, and implements callCC.
module Control.Monad.Catana
data Catana i o b a
Catana :: ((a -> Step i o b) -> Step i o b) -> Catana i o b a
step :: Catana i o b a -> (a -> Step i o b) -> Step i o b

-- | Consumes an element from the input list, returning it If there is no
--   more input, the chain of continuations ends immediately; no more
--   computations will be processed
consume :: Catana i o a i

-- | Returns the next input without consuming it
top :: Catana i o a i

-- | Pushes <tt>x</tt> into the input
push :: i -> Catana i o a ()

-- | Produces <tt>x</tt> in the output
produce :: o -> Catana i o a ()

-- | Stops computation, ending the continuation chain
stop :: b -> Catana i o b a

-- | Converts a Catana monad into a function over lists
execCatana :: Catana i o a a -> [i] -> [o]

-- | Evaluates a Catana monad over a list returning the result and output
runCatana :: Catana i o a a -> [i] -> (Maybe a, [o])

-- | Combine two monads to run in parallel, consuming the same input
parallelB :: Catana i o a a -> Catana i o b b -> Catana i o c (a, b)

-- | Combine two monads to run in parallel, consuming the same input,
--   stopping when either of them finish.
parallelE :: Catana i o a a -> Catana i o b b -> Catana i o c (Either a b)

-- | Combine two monads to run in serial, the first consuming the output of
--   the second
serial :: Catana io o a a -> Catana i io b b -> Catana i o c (Either a b)
instance Monoid (Catana i o b a)
instance MonadPlus (Catana i o b)
instance MonadFix (Catana i o b)
instance MonadCont (Catana i o b)
instance Monad (Catana i o b)
instance Applicative (Catana i o b)
instance Functor (Catana i o b)
