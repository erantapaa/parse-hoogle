-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Optionally serializable dynamic state keyed by type
--   
@package dynamic-state
@version 0.2.0.0


-- | Copyright (c)2011, Reiner Pope
--   
--   All rights reserved.
--   
--   Redistribution and use in source and binary forms, with or without
--   modification, are permitted provided that the following conditions are
--   met:
--   
--   <ul>
--   <li>Redistributions of source code must retain the above copyright
--   notice, this list of conditions and the following
--   disclaimer.<ul><li>Redistributions in binary form must reproduce the
--   above copyright notice, this list of conditions and the following
--   disclaimer in the documentation and/or other materials provided with
--   the distribution.</li><li>Neither the name of Reiner Pope nor the
--   names of other contributors may be used to endorse or promote products
--   derived from this software without specific prior written
--   permission.</li></ul></li>
--   </ul>
--   
--   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
--   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
--   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
--   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
--   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
--   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
--   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
--   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
--   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
--   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
--   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
--   
--   This module defines <a>Binary</a> and <a>Hashable</a> instances for
--   <a>TypeRep</a>. These are defined on a newtype of <a>TypeRep</a>,
--   namely <a>ConcreteTypeRep</a>, for two purposes:
--   
--   <ul>
--   <li>to avoid making orphan instances</li>
--   <li>the <a>Hashable</a> instance for <a>ConcreteTypeRep</a> may not be
--   pure enough for some people's tastes.</li>
--   </ul>
--   
--   As usual with <a>Typeable</a>, this module will typically be used with
--   some variant of <tt>Data.Dynamic</tt>. Two possible uses of this
--   module are:
--   
--   <ul>
--   <li>making hashmaps: <tt>HashMap <a>ConcreteTypeRep</a>
--   Dynamic</tt></li>
--   <li>serializing <tt>Dynamic</tt>s.</li>
--   </ul>
module Data.ConcreteTypeRep

-- | Abstract type providing the functionality of <a>TypeRep</a>, but
--   additionally supporting hashing and serialization.
--   
--   The <a>Eq</a> instance is just the <a>Eq</a> instance for
--   <a>TypeRep</a>, so an analogous guarantee holds: <tt><a>cTypeOf</a> a
--   == <a>cTypeOf</a> b</tt> if and only if <tt>a</tt> and <tt>b</tt> have
--   the same type. The hashing and serialization functions preserve this
--   equality.
data ConcreteTypeRep

-- | "Concrete" version of <a>typeOf</a>.
cTypeOf :: Typeable a => a -> ConcreteTypeRep

-- | Converts to the underlying <a>TypeRep</a>
toTypeRep :: ConcreteTypeRep -> TypeRep

-- | Converts from the underlying <a>TypeRep</a>
fromTypeRep :: TypeRep -> ConcreteTypeRep
instance Typeable ConcreteTypeRep
instance Eq ConcreteTypeRep
instance Binary SerialRep
instance Binary ConcreteTypeRep
instance Hashable ConcreteTypeRep
instance Show ConcreteTypeRep


-- | This module implements a simple HashMap ConcreteTypeRep Dynamic
module Data.DynamicState

-- | An extensible record, indexed by type
newtype DynamicState
DynamicState :: HashMap ConcreteTypeRep Dynamic -> DynamicState
unDynamicState :: DynamicState -> HashMap ConcreteTypeRep Dynamic
getDyn :: Typeable a => DynamicState -> Maybe a
setDyn :: Typeable a => DynamicState -> a -> DynamicState

-- | Lens with default value
_dyn :: (Typeable a, Functor f) => a -> (a -> f a) -> DynamicState -> f DynamicState
instance Typeable DynamicState
instance Monoid DynamicState


-- | This module is HashMap ConcreteTypeRep Dynamic with a twist. The
--   Dynamic used can also be ByteString, to make repeated reserialization
--   cheap. A user-provided State-like is used to store this.
module Data.DynamicState.Serializable

-- | An extensible record, indexed by type, using state to cache
--   deserializtion
newtype DynamicState
DynamicState :: HashMap ConcreteTypeRep Dynamic -> DynamicState
unDynamicState :: DynamicState -> HashMap ConcreteTypeRep Dynamic

-- | Get a value, inside a State-like monad specified by the first two
--   functions
getDyn :: (Typeable a, Binary a, Monad m) => m DynamicState -> (DynamicState -> m ()) -> m (Maybe a)

-- | Set a value, inside a State-like monad specified by the first two
--   functions
putDyn :: (Typeable a, Binary a, Monad m) => m DynamicState -> (DynamicState -> m ()) -> a -> m ()
instance Typeable DynamicState
instance Binary DynamicState
instance Monoid DynamicState
instance Binary Dynamic
