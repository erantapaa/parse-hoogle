-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Primitives for manipulating the state of the universe
--   
--   GHC represents an IO action internally as a function from one state of
--   the world to the next:
--   
--   <pre>
--   State# RealWorld -&gt; (# State# RealWorld, a #)
--   </pre>
--   
--   This module provides a very useful capability stemming directly from
--   this representation: the ability to save the current state of the
--   universe and restore it later. This provides a way to "undo" certain
--   types of side effects in the IO monad:
--   
--   <pre>
--   import Acme.Missiles
--   import Acme.RealWorld
--   
--   main :: IO ()
--   main = do
--       -- Save the current state of the universe
--       world_as_we_know_it &lt;- getWorld
--   
--       -- Cause serious international side effects
--       launchMissiles
--   
--       -- After realizing that was a terrible, terrible mistake, restore the
--       -- pre-war state of the universe.
--       putWorld world_as_we_know_it
--   </pre>
@package acme-realworld
@version 0.1.1


-- | Primitives for manipulating the state of the universe.
module Acme.RealWorld

-- | <tt>RealWorld</tt> is deeply magical. It is <i>primitive</i>, but it
--   is not <i>unlifted</i> (hence <tt>ptrArg</tt>). We never manipulate
--   values of type <tt>RealWorld</tt>; it's only used in the type system,
--   to parameterise <tt>State#</tt>.
data RealWorld :: *

-- | Retrieve the current state of the universe.
getWorld :: IO RealWorld

-- | Set the current state of the universe. Program values are not affected
--   by this operation, but the rest of the universe is.
--   
--   <a>putWorld</a> may not be called on the same state twice (this is
--   enforced by the runtime system). Otherwise, it would be possible to
--   trap the universe in a temporal loop:
--   
--   <pre>
--   getWorld &gt;&gt;= forever . putWorld
--   </pre>
putWorld :: RealWorld -> IO ()

-- | Given an action, construct a function that, given a state of the
--   universe, returns the state of the universe after the action has
--   occurred.
--   
--   Example:
--   
--   <pre>
--   main = do
--       let f = execIO $ putStrLn "Second"
--           g = execIO $ putStrLn "First"
--           getWorld &gt;&gt;= putWorld . f . g
--   </pre>
execIO :: IO a -> RealWorld -> RealWorld

-- | Perform an action and return its value, but undo any side effects to
--   the universe. Thus, it appears to return instantly, regardless of how
--   long the action would take to run.
--   
--   The caller must ensure that the program <i>would</i> have enough time
--   to perform the computation. Otherwise, either an exception will be
--   thrown, or the operation will block because it never gets a chance to
--   restore the original state of the universe.
hypothetically :: IO a -> IO a
