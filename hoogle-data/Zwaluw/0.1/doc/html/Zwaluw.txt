-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Combinators for bidirectional URL routing
--   
--   Combinators for bidirectional URL routing
@package Zwaluw
@version 0.1

module Web.Zwaluw
data Router a b
data (:-) a b
(:-) :: a -> b -> :- a b

-- | Infix operator for <a>mappend</a>.
(<>) :: Monoid m => m -> m -> m
parse :: Router () a -> String -> [a]
unparse :: Router () a -> a -> [String]
parse1 :: Router () (a :- ()) -> String -> [a]
unparse1 :: Router () (a :- ()) -> a -> [String]

-- | For example:
--   
--   <pre>
--   nil :: Router r ([a] :- r)
--   nil = constr0 [] $ \x -&gt; do [] &lt;- x; Just ()
--   </pre>
constr0 :: o -> (Maybe o -> Maybe ()) -> Router r (o :- r)

-- | For example:
--   
--   <pre>
--   left :: Router (a :- r) (Either a b :- r)
--   left = constr1 Left $ \x -&gt; do Left a &lt;- x; return a
--   </pre>
constr1 :: (a -> o) -> (Maybe o -> Maybe a) -> Router (a :- r) (o :- r)

-- | For example:
--   
--   <pre>
--   cons :: Router (a :- [a] :- r) ([a] :- r)
--   cons = constr2 (:) $ \x -&gt; do a:as &lt;- x; return (a, as)
--   </pre>
constr2 :: (a -> b -> o) -> (Maybe o -> Maybe (a, b)) -> Router (a :- (b :- r)) (o :- r)

-- | Routes any integer.
int :: Router r (Int :- r)

-- | Routes a slash.
slash :: Router r r

-- | Routes a constant string.
lit :: String -> Router r r
instance (Eq a, Eq b) => Eq (a :- b)
instance (Show a, Show b) => Show (a :- b)
instance Monoid (Router a b)
instance Category Router
