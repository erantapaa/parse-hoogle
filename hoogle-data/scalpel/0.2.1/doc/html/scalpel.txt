-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A high level web scraping library for Haskell.
--   
@package scalpel
@version 0.2.1


-- | Scalpel is a web scraping library inspired by libraries like parsec
--   and Perl's <a>Web::Scraper</a>. Scalpel builds on top of
--   <a>Text.HTML.TagSoup</a> to provide a declarative and monadic
--   interface.
--   
--   There are two general mechanisms provided by this library that are
--   used to build web scrapers: Selectors and Scrapers.
--   
--   Selectors describe a location within an HTML DOM tree. The simplest
--   selector, that can be written is a simple string value. For example,
--   the selector <tt>"div"</tt> matches every single div node in a DOM.
--   Selectors can be combined using tag combinators. The <a>//</a>
--   operator to define nested relationships within a DOM tree. For
--   example, the selector <tt>"div" // "a"</tt> matches all anchor tags
--   nested arbitrarily deep within a div tag.
--   
--   In addition to describing the nested relationships between tags,
--   selectors can also include predicates on the attributes of a tag. The
--   <a>@:</a> operator creates a selector that matches a tag based on the
--   name and various conditions on the tag's attributes. An attribute
--   predicate is just a function that takes an attribute and returns a
--   boolean indicating if the attribute matches a criteria. There are
--   several attribute operators that can be used to generate common
--   predicates. The <a>@=</a> operator creates a predicate that matches
--   the name and value of an attribute exactly. For example, the selector
--   <tt>"div" @: ["id" @= "article"]</tt> matches div tags where the id
--   attribute is equal to <tt>"article"</tt>.
--   
--   Scrapers are values that are parameterized over a selector and produce
--   a value from an HTML DOM tree. The <a>Scraper</a> type takes two type
--   parameters. The first is the string like type that is used to store
--   the text values within a DOM tree. Any string like type supported by
--   <a>Text.StringLike</a> is valid. The second type is the type of value
--   that the scraper produces.
--   
--   There are several scraper primitives that take selectors and extract
--   content from the DOM. Each primitive defined by this library comes in
--   two variants: singular and plural. The singular variants extract the
--   first instance matching the given selector, while the plural variants
--   match every instance.
--   
--   The following is an example that demonstrates most of the features
--   provided by this library. Suppose you have the following hypothetical
--   HTML located at <tt>"http:/<i>example.com</i>article.html"</tt> and
--   you would like to extract a list of all of the comments.
--   
--   <pre>
--   &lt;html&gt;
--     &lt;body&gt;
--       &lt;div class='comments'&gt;
--         &lt;div class='comment container'&gt;
--           &lt;span class='comment author'&gt;Sally&lt;/span&gt;
--           &lt;div class='comment text'&gt;Woo hoo!&lt;/div&gt;
--         &lt;/div&gt;
--         &lt;div class='comment container'&gt;
--           &lt;span class='comment author'&gt;Bill&lt;/span&gt;
--           &lt;img class='comment image' src='http://example.com/cat.gif' /&gt;
--         &lt;/div&gt;
--         &lt;div class='comment container'&gt;
--           &lt;span class='comment author'&gt;Susan&lt;/span&gt;
--           &lt;div class='comment text'&gt;WTF!?!&lt;/div&gt;
--         &lt;/div&gt;
--       &lt;/div&gt;
--     &lt;/body&gt;
--   &lt;/html&gt;
--   </pre>
--   
--   The following snippet defines a function, <tt>allComments</tt>, that
--   will download the web page, and extract all of the comments into a
--   list:
--   
--   <pre>
--   type Author = String
--   
--   data Comment
--       = TextComment Author String
--       | ImageComment Author URL
--       deriving (Show, Eq)
--   
--   allComments :: IO (Maybe [Comment])
--   allComments = scrapeURL "http://example.com/article.html" comments
--      where
--          comments :: Scraper String [Comment]
--          comments = chroots ("div" @: [hasClass "container"]) comment
--   
--          comment :: Scraper String Comment
--          comment = textComment &lt;|&gt; imageComment
--   
--          textComment :: Scraper String Comment
--          textComment = do
--              author      &lt;- text $ "span" @: [hasClass "author"]
--              commentText &lt;- text $ "div"  @: [hasClass "text"]
--              return $ TextComment author commentText
--   
--          imageComment :: Scraper String Comment
--          imageComment = do
--              author   &lt;- text       $ "span" @: [hasClass "author"]
--              imageURL &lt;- attr "src" $ "img"  @: [hasClass "image"]
--              return $ ImageComment author imageURL
--   </pre>
--   
--   Complete examples can be found in the <a>examples</a> folder in the
--   scalpel git repository.
module Text.HTML.Scalpel

-- | <a>Selector</a> defines a selection of an HTML DOM tree to be operated
--   on by a web scraper. The selection includes the opening tag that
--   matches the selection, all of the inner tags, and the corresponding
--   closing tag.
data Selector

-- | The <a>Selectable</a> class defines a class of types that are capable
--   of being cast into a <a>Selector</a> which in turns describes a
--   section of an HTML DOM tree.
class Selectable s
toSelector :: Selectable s => s -> Selector

-- | An <a>AttributePredicate</a> is a method that takes a <a>Attribute</a>
--   and returns a <a>Bool</a> indicating if the given attribute matches a
--   predicate.
data AttributePredicate

-- | The <a>AttributeName</a> class defines a class of types that can be
--   used when creating <a>Selector</a>s to specify the name of an
--   attribute of a tag.
--   
--   The most basic types of <a>AttributeName</a> are the string like types
--   (e.g. <a>String</a>, <a>Text</a>, etc). Values of these types refer to
--   attributes with names of that value.
--   
--   In addition there is also the <a>Any</a> type which will match any
--   attribute name.
class AttributeName k

-- | The <a>TagName</a> class defines a class of types that can be used
--   when creating <a>Selector</a>s to specify the name of a tag.
--   
--   The most basic types of <a>TagName</a> are the string like types (e.g.
--   <a>String</a>, <a>Text</a>, etc). Values of these types refer to tags
--   of the given value.
--   
--   In addition there is also the <a>Any</a> type which will match any
--   tag.
class TagName t

-- | <a>Any</a> can be used as a wildcard when constructing selectors to
--   match tags and attributes with any name.
--   
--   For example, the selector <tt>Any @: [Any @= "foo"]</tt> matches all
--   tags that have any attribute where the value is <tt>"foo"</tt>.
data Any
Any :: Any

-- | The <a>//</a> operator creates an <a>Selector</a> by nesting one
--   <a>Selector</a> in another. For example, <tt>"div" // "a"</tt> will
--   create a <a>Selector</a> that matches anchor tags that are nested
--   arbitrarily deep within a div tag.
(//) :: (Selectable a, Selectable b) => a -> b -> Selector

-- | The <a>@:</a> operator creates a <a>Selector</a> by combining a
--   <a>TagName</a> with a list of <a>AttributePredicate</a>s.
(@:) :: TagName tag => tag -> [AttributePredicate] -> Selector

-- | The <a>@=</a> operator creates an <a>AttributePredicate</a> that will
--   match attributes with the given name and value.
--   
--   If you are attempting to match a specific class of a tag with
--   potentially multiple classes, you should use the <a>hasClass</a>
--   utility function.
(@=) :: AttributeName key => key -> String -> AttributePredicate

-- | The <a>@=~</a> operator creates an <a>AttributePredicate</a> that will
--   match attributes with the given name and whose value matches the given
--   regular expression.
(@=~) :: (AttributeName key, RegexLike re String) => key -> re -> AttributePredicate

-- | The classes of a tag are defined in HTML as a space separated list
--   given by the <tt>class</tt> attribute. The <a>hasClass</a> function
--   will match a <tt>class</tt> attribute if the given class appears
--   anywhere in the space separated list of classes.
hasClass :: String -> AttributePredicate

-- | The <a>select</a> function takes a <a>Selectable</a> value and a list
--   of <a>Tag</a>s and returns a list of every subsequence of the given
--   list of Tags that matches the given selector.
select :: (StringLike str, Selectable s) => s -> [Tag str] -> [[Tag str]]

-- | A value of <a>Scraper</a> <tt>a</tt> defines a web scraper that is
--   capable of consuming a list of <a>Tag</a>s and optionally producing a
--   value of type <tt>a</tt>.
data Scraper str a

-- | The <a>attr</a> function takes an attribute name and a selector and
--   returns the value of the attribute of the given name for the first
--   opening tag that matches the given selector.
--   
--   This function will match only the opening tag matching the selector,
--   to match every tag, use <a>attrs</a>.
attr :: (Show str, StringLike str, Selectable s) => String -> s -> Scraper str str

-- | The <a>attrs</a> function takes an attribute name and a selector and
--   returns the value of the attribute of the given name for every opening
--   tag that matches the given selector.
attrs :: (Show str, StringLike str, Selectable s) => String -> s -> Scraper str [str]

-- | The <a>html</a> function takes a selector and returns the html string
--   from the set of tags described by the given selector.
--   
--   This function will match only the first set of tags matching the
--   selector, to match every set of tags, use <a>htmls</a>.
html :: (StringLike str, Selectable s) => s -> Scraper str str

-- | The <a>htmls</a> function takes a selector and returns the html string
--   from every set of tags matching the given selector.
htmls :: (StringLike str, Selectable s) => s -> Scraper str [str]

-- | The <a>text</a> function takes a selector and returns the inner text
--   from the set of tags described by the given selector.
--   
--   This function will match only the first set of tags matching the
--   selector, to match every set of tags, use <a>texts</a>.
text :: (StringLike str, Selectable s) => s -> Scraper str str

-- | The <a>texts</a> function takes a selector and returns the inner text
--   from every set of tags matching the given selector.
texts :: (StringLike str, Selectable s) => s -> Scraper str [str]

-- | The <a>chroot</a> function takes a selector and an inner scraper and
--   executes the inner scraper as if it were scraping a document that
--   consists solely of the tags corresponding to the selector.
--   
--   This function will match only the first set of tags matching the
--   selector, to match every set of tags, use <a>chroots</a>.
chroot :: (StringLike str, Selectable s) => s -> Scraper str a -> Scraper str a

-- | The <a>chroots</a> function takes a selector and an inner scraper and
--   executes the inner scraper as if it were scraping a document that
--   consists solely of the tags corresponding to the selector. The inner
--   scraper is executed for each set of tags matching the given selector.
chroots :: (StringLike str, Selectable s) => s -> Scraper str a -> Scraper str [a]

-- | The <a>scrape</a> function executes a <a>Scraper</a> on a list of
--   <a>Tag</a>s and produces an optional value.
scrape :: Scraper str a -> [Tag str] -> Maybe a

-- | The <a>scrapeStringLike</a> function parses a <tt>StringLike</tt>
--   value into a list of tags and executes a <a>Scraper</a> on it.
scrapeStringLike :: StringLike str => str -> Scraper str a -> Maybe a
type URL = String

-- | The <a>scrapeURL</a> function downloads the contents of the given URL
--   and executes a <a>Scraper</a> on it.
scrapeURL :: StringLike str => URL -> Scraper str a -> IO (Maybe a)

-- | The <a>scrapeURLWithOpts</a> function take a list of curl options and
--   downloads the contents of the given URL and executes a <a>Scraper</a>
--   on it.
scrapeURLWithOpts :: StringLike str => [CurlOption] -> URL -> Scraper str a -> IO (Maybe a)
