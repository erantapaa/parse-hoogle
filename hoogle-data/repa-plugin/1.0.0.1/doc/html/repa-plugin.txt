-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Data Flow Fusion GHC Plugin.
--   
--   This GHC plugin implements Data Flow Fusion as described in the paper:
--   Data Flow Fusion with Series Expressions in Haskell, Haskell Symposium
--   2013.
@package repa-plugin
@version 1.0.0.1


-- | This GHC plugin performs Data Flow Fusion as described in the
--   following paper:
--   
--   <pre>
--   Data Flow Fusion with Series Expressions in Haskell
--   Ben Lippmeier, Manuel Chakravarty, Gabriele Keller, Amos Robinson.
--   Haskell Sympoium, 2013.
--   </pre>
--   
--   
--   <a>http://www.cse.unsw.edu.au/~benl/papers/flow/flow-Haskell2013.pdf</a>
--   
--   The user-facing API is defined by the repa-series package.
--   
--   To run the transform on a program do something like:
--   
--   <pre>
--   ghc -O2 -fplugin=Data.Array.Repa.Plugin --make Main.hs
--   </pre>
--   
--   To see intermediate code as it is transformed, pass the <tt>dump</tt>
--   flag to the plugin.
--   
--   <pre>
--   ghc -O2 -fplugin=Data.Array.Repa.Plugin -fplugin-opt Data.Array.Repa.Plugin:dump --make Main.hs
--   </pre>
--   
--   There is example code at:
--   <a>http://code.ouroborus.net/repa/repa-head/repa-plugin/test/</a>
--   
--   This is an EXPERIMENTAL implementation that some CURRENT LIMITATIONS:
--   
--   <ul>
--   <li>Only supports Series of element types <tt>Int</tt> and
--   (<tt>Int</tt>, <tt>Int</tt>). You can't yet fuse code using the
--   <tt>Float</tt> type, or anything else.</li>
--   <li>You can't use case-expressions in the worker functions passed to
--   combinators like <tt>map</tt> and <tt>fold</tt>.</li>
--   <li>The plugin lacks support for many common list functions, such as
--   <tt>append</tt>.</li>
--   <li>If your code cannot be fused then you may get an unhelpful error
--   message.</li>
--   </ul>
module Data.Array.Repa.Plugin

-- | The Data Flow Fusion plugin.
plugin :: Plugin
