-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | EDSL for Google and GMail search expressions
--   
--   Construct well-typed search expressions for use in various Google
--   services.
@package google-search
@version 0.1.0.1


-- | An orphan lives in this module,
--   
--   <pre>
--   instance (<a>Functor</a> f, <a>IsString</a> a) =&gt; <a>IsString</a> (<a>Free</a> f a)
--   </pre>
--   
--   so that we can write <tt>"simple queries" :: <a>Simple</a></tt>.
module Language.Google.Search.Simple
data Duration
Days :: Duration
Months :: Duration
Years :: Duration
data Size
Bytes :: Size
KBytes :: Size
MBytes :: Size

-- | <a>Builder</a> with precedence, though ambiguous associativity. (But
--   that's okay because Google doesn't mind which way you lean.)
--   
--   Note that at Google <tt>OR</tt> binds tighter than conjunction, which
--   is flipped in contrast to everywhere else. We take the analogous
--   Haskell fixities when building search expressions:
--   
--   <ul>
--   <li>11: atomic tokens or parenthesised expressions</li>
--   <li>10: complementation, search operators (cf. Haskell prefix
--   application)</li>
--   <li>3: disjunction (<tt>OR</tt> or <tt>|</tt>)</li>
--   <li>2: conjunction (by juxtaposition)</li>
--   </ul>
data PrecBuilder
PrecBuilder :: Int -> Builder -> PrecBuilder

-- | Give me the precedence of the piece of syntax you're building, and
--   I'll give you a function that parenthesise any sub-expressions when
--   necessary.
parentheses :: Int -> ((PrecBuilder -> Builder) -> Builder) -> PrecBuilder

-- | Render a search expression using Google search syntax.
class SearchBuilder e
searchBuilder :: SearchBuilder e => e -> PrecBuilder

-- | Higher-order version of <a>SearchBuilder</a>.
class SyntaxBuilder f
syntaxBuilder :: SyntaxBuilder f => f PrecBuilder -> PrecBuilder
class DisjunctF f
disjunctF :: DisjunctF f => e -> e -> f e
class Disjunct e
(\/) :: Disjunct e => e -> e -> e
class ConjunctF f
conjunctF :: ConjunctF f => e -> e -> f e
class Conjunct e
(/\) :: Conjunct e => e -> e -> e
class ComplementF f
complementF :: ComplementF f => e -> f e
class Complement e
notB :: Complement e => e -> e

-- | <a>andB</a> is to <a>/\</a> what <a>and</a> is to <a>&amp;&amp;</a>.
andB :: Conjunct e => [e] -> e

-- | <a>orB</a> is to <a>\/</a> what <a>or</a> is to <a>||</a>.
orB :: Disjunct e => [e] -> e

-- | <a>Fuzzy</a> terms are grouped with parentheses (if necessary), while
--   <a>Exact</a> terms are always “double-quoted”. The <a>IsString</a>
--   instance defaults to <a>Fuzzy</a>, so just writing <tt>"literal
--   string" ∷ <a>Term</a> <a>Text</a></tt> is acceptable.
data Term t
Fuzzy :: t -> Term t
Exact :: t -> Term t

-- | The shape of Boolean expressions.
data BooleanF e
NotB :: e -> BooleanF e
AndB :: e -> e -> BooleanF e
OrB :: e -> e -> BooleanF e

-- | The free Boolean-shaped monad. No refunds.
type BooleanM = Free BooleanF

-- | Simple Boolean combinations of <a>Term</a>s.
type Simple = BooleanM (Term Text)
instance Show Duration
instance Show Size
instance Show PrecBuilder
instance Functor Term
instance Show t => Show (Term t)
instance Functor BooleanF
instance Show e => Show (BooleanF e)
instance SyntaxBuilder BooleanF
instance ComplementF BooleanF
instance DisjunctF BooleanF
instance ConjunctF BooleanF
instance SearchBuilder a => SearchBuilder (Term a)
instance SyntaxBuilder Term
instance SearchBuilder Text
instance IsString t => IsString (Term t)
instance ComplementF f => Complement (Free f a)
instance ConjunctF f => Conjunct (Free f a)
instance DisjunctF f => Disjunct (Free f a)
instance (Functor f, SearchBuilder a, SyntaxBuilder f) => SearchBuilder (Free f a)
instance (Functor f, IsString a) => IsString (Free f a)


-- | <a>https://support.google.com/mail/answer/7190</a>
module Language.Google.Search.Mail

-- | Features for the <tt>has:</tt> operator.
data Feature
Attachment :: Feature
NoUserLabels :: Feature
UserLabels :: Feature
BlueInfo :: Feature
BlueStar :: Feature
Circle :: Feature
GreenCheck :: Feature
GreenStar :: Feature
OrangeGuillemet :: Feature
OrangeStar :: Feature
PurpleQuestion :: Feature
PurpleStar :: Feature
RedBang :: Feature
RedStar :: Feature
YellowBang :: Feature
YellowStar :: Feature

-- | Locations for the <tt>in:</tt> operator.
data Location
Anywhere :: Location
Inbox :: Location
Trash :: Location
Spam :: Location

-- | Statuses for the <tt>is:</tt> operator.
data Status
Important :: Status
Starred :: Status
Unread :: Status
Read :: Status
Chat :: Status

-- | Categories for the <tt>category:</tt> operator.
data Category
Forums :: Category
Personal :: Category
Promotions :: Category
Social :: Category
Updates :: Category

-- | GMail search operators.
data MailOp
Plain :: Simple -> MailOp
From :: Simple -> MailOp
To :: Simple -> MailOp
Subject :: Simple -> MailOp
Label :: Text -> MailOp
Has :: Feature -> MailOp
List :: Simple -> MailOp
Filename :: Simple -> MailOp
In :: Location -> MailOp
Is :: Status -> MailOp
Cc :: Simple -> MailOp
Bcc :: Simple -> MailOp
After :: Day -> MailOp
Before :: Day -> MailOp
Older :: Natural -> Duration -> MailOp
Newer :: Natural -> Duration -> MailOp
DeliveredTo :: Simple -> MailOp
FromCircle :: Simple -> MailOp
Category :: Category -> MailOp
Larger :: Natural -> Size -> MailOp
Smaller :: Natural -> Size -> MailOp
RFC822MsgId :: Text -> MailOp

-- | Boolean combinations of GMail operators or <a>Plain</a> <a>Simple</a>
--   terms.
type Mail = BooleanM MailOp
instance Show Feature
instance Show Location
instance Show Status
instance Show Category
instance Show MailOp
instance SearchBuilder MailOp
instance IsString MailOp
