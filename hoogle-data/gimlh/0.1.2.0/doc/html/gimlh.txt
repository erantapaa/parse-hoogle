-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell parser for GIML
--   
--   Parser for small simple language for big data Gimlh
--   (https:/<i>github.com</i>gazay/gimlh)
@package gimlh
@version 0.1.2.0


-- | Haskell parser for GIML.
module Gimlh

-- | Type <a>Giml</a> represent list of <a>GimlNode</a>s
type Giml = [GimlNode]

-- | Value represent parsed data for specified variable name
data GimlVal

-- | Text value
Text :: String -> GimlVal

-- | List value
List :: [String] -> GimlVal

-- | Integer number value
Number :: Integer -> GimlVal

-- | Float number value
Float :: Double -> GimlVal

-- | Type of value for internal functions
data GimlType

-- | Type for text value, stored in <a>GimlNode</a>
TextG :: GimlType

-- | Type for list value, stored in <a>GimlNode</a>
ListG :: GimlType

-- | Type for integer number value, stored in <a>GimlNode</a>
NumberG :: GimlType

-- | Type for float number value, stored in <a>GimlNode</a>
FloatG :: GimlType

-- | Type <a>GimlNode</a> represent list of tuples. Tuple contains
--   <a>String</a> as key, <a>GimlType</a> as type of value and
--   <a>GimlVal</a> as value
type GimlNode = (String, GimlType, GimlVal)

-- | Type <a>SimpleGiml</a> represent list of tuples. Tuple contains
--   <a>String</a> as key and <a>GimlVal</a> as value
type SimpleGiml = [(String, GimlVal)]

-- | The <a>parseString</a> method will parse <tt>GIML</tt> from pure
--   string.
parseString :: String -> Giml

-- | The <a>parseFile</a> method will parse <tt>GIML</tt> from file by
--   <a>FilePath</a>
parseFile :: FilePath -> IO Giml

-- | The <a>simplifyGiml</a> method will remove types from <a>Giml</a>
--   creating <a>SimpleGiml</a> object
simplifyGiml :: Giml -> SimpleGiml

-- | The <a>fetch</a> method will fetch values from simplified giml by
--   given key
fetch :: SimpleGiml -> String -> Maybe GimlVal

-- | The <a>fetchG</a> method will fetch values from giml by given key
fetchG :: Giml -> String -> Maybe GimlVal

-- | The <a>val2Str</a> method will retrun values stored in GIML in string
--   representation
val2Str :: GimlVal -> String

-- | The <a>val2List</a> method will retrun values stored in GIML in list
--   of string representation
val2List :: GimlVal -> [String]
instance Show GimlVal
instance Eq GimlVal
instance Show GimlType
instance Eq GimlType
