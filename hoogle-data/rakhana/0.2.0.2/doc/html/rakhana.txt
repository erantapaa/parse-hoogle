-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Stream based PDF library
--   
@package rakhana
@version 0.2.0.2


module Data.Rakhana
type Dictionary = Map ByteString Object
type Drive m a = Client' TReq TResp m a
data Header
data Object
data NReq
data NResp
data Number
data NurseryException
NurseryParsingException :: (Maybe Reference) -> String -> NurseryException
NurseryParsingExceptionInObjStm :: String -> NurseryException
NurseryUnresolvedObject :: Int -> Int -> NurseryException
NurseryRootNotFound :: NurseryException
NurseryPagesNotFound :: NurseryException
NurseryInvalidStreamObject :: NurseryException
NurseryInvalidLinearizedObject :: NurseryException
NurseryXRefException :: XRefException -> NurseryException
NurseryExpectedStreamObject :: NurseryException
NurseryInvalidObjStm :: NurseryException
NurseryUnresolvedObjectInObjStm :: Int -> NurseryException
NurseryWrongObject :: Reference -> Reference -> NurseryException
type Playground m a = Client' NReq NResp m a
type Reference = (Int, Int)
data Stream
type Tape m a = Server' TReq TResp m a
data TReq
data TResp
data XRefException
XRefParsingException :: String -> XRefException
InvalidXRefStream :: XRefException
UnsupportedFilter :: ByteString -> XRefException
UnsupportedPredictor :: Integer -> XRefException
ZLibException :: String -> String -> XRefException
_Array :: Prism' Object (Vector Object)
_Boolean :: Prism' Object Bool
_Bytes :: Prism' Object ByteString
_Dict :: Prism' Object Dictionary
_Name :: Prism' Object ByteString
_Natural :: Prism' Number Integer
_Number :: Prism' Object Number
_Real :: Prism' Number Double
_Ref :: Prism' Object Reference
_Stream :: Prism' Object Stream
dictKey :: ByteString -> Traversal' Dictionary Object
nth :: Int -> Traversal' (Vector a) a
streamDict :: Lens' Stream Dictionary
streamPos :: Lens' Stream Integer
nurseryGetInfo :: Monad m => Playground m Dictionary
nurseryGetHeader :: Monad m => Playground m Header
nurseryGetPages :: Monad m => Playground m Dictionary
nurseryLoadStreamData :: Monad m => Stream -> Playground m ByteString
nurseryGetReferences :: Monad m => Playground m [Reference]
nurseryResolve :: Monad m => Reference -> Playground m Object
withNursery :: MonadError NurseryException m => Client' NReq NResp m a -> Drive m a
driveBackward :: Monad m => Drive m ()
driveBottom :: Monad m => Drive m ()
driveDiscard :: Monad m => Int -> Drive m ()
driveForward :: Monad m => Drive m ()
driveGet :: Monad m => Int -> Drive m ByteString
driveGetLazy :: Monad m => Int -> Drive m ByteString
driveGetSeek :: Monad m => Drive m Integer
driveModifySeek :: Monad m => (Integer -> Integer) -> Drive m ()
drivePeek :: Monad m => Int -> Drive m ByteString
driveSeek :: Monad m => Integer -> Drive m ()
driveTop :: Monad m => Drive m ()
fileTape :: MonadIO m => FilePath -> Tape m r
runDrive :: Monad m => (forall r. Tape m r) -> Drive m a -> m a
