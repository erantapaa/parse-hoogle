-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Binding to libxml2
--   
--   Minimal binding to libxml2. Additional functions will be added when
--   needed.
@package libxml
@version 0.1.1

module Text.XML.LibXML.Types
newtype Document
Document :: (ForeignPtr Document) -> Document
newtype Node
Node :: (ForeignPtr Node) -> Node
newtype Property
Property :: (ForeignPtr Property) -> Property
newtype Namespace
Namespace :: (ForeignPtr Namespace) -> Namespace
withDocument :: Document -> (Ptr Document -> IO a) -> IO a
withNode :: Node -> (Ptr Node -> IO a) -> IO a
withProperty :: Property -> (Ptr Property -> IO a) -> IO a
withNamespace :: Namespace -> (Ptr Namespace -> IO a) -> IO a

module Text.XML.LibXML.Internals

-- | Force the finalization of a document. This function is a no-op on
--   non-ghc systems.
freeDocument :: Document -> IO ()
xmlFreeNode :: FunPtr (Ptr Node -> IO ())
xmlFreeDoc :: FunPtr (Ptr Document -> IO ())
mkFinalizedDocument :: Ptr Document -> IO Document
mkFinalizedNode :: Ptr Node -> IO Node

module Text.XML.LibXML.Tree
addChild :: (MonadIO m) => Node -> Node -> m ()
newChild :: (MonadIO m) => Node -> Maybe Namespace -> String -> Maybe String -> m Node
addSibling :: (MonadIO m) => Node -> Node -> m ()
newNode :: (MonadIO m) => Maybe Namespace -> String -> m Node
newProperty :: (MonadIO m) => Node -> String -> String -> m ()
newText :: (MonadIO m) => String -> m Node
newTextChild :: (MonadIO m) => Node -> Maybe Namespace -> String -> String -> m Node
newDocument :: (MonadIO m) => String -> m Document
newDocumentPI :: (MonadIO m) => Document -> String -> String -> m Node
documentDumpMemory :: (MonadIO m) => Document -> m ByteString
newDocumentNode :: (MonadIO m) => Document -> Maybe Namespace -> String -> Maybe String -> m Node
setDocumentRootElement :: (MonadIO m) => Document -> Node -> m ()
getDocumentRootElement :: (MonadIO m) => Document -> m Node

module Text.XML.LibXML.Parser

-- | Parse XML document from a file. Throws an exception on error.
parseFile :: (MonadIO m) => FilePath -> m Document
parseFile_ :: (MonadIO m) => FilePath -> m (Maybe Document)
parseMemory :: (MonadIO m) => ByteString -> m Document
parseMemory_ :: (MonadIO m) => ByteString -> m (Maybe Document)
cleanupParser :: IO ()

-- | Set and return the previous value for default entity support.
substituteEntitiesDefault :: (MonadIO m) => Bool -> m Bool

module Text.XML.LibXML
