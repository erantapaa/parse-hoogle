-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Use Pandoc to render servant API documentation
--   
@package servant-pandoc
@version 0.4.1


-- | There are two ways in which to use this module.
--   
--   The first is to use the renderer directly with the pandoc API. A very
--   simple program to render the API documentation as a mediawiki document
--   might look as follows.
--   
--   <pre>
--   import Text.Pandoc
--   import Servant.Docs.Pandoc
--   import Servant.Docs
--   import Data.Default (def)
--   
--   myApi :: Proxy MyAPI
--   myApi = Proxy
--   
--   writeDocs :: API -&gt; IO ()
--   writeDocs api = writeFile "api.mw" (writeMediaWiki def (pandoc api))
--   </pre>
--   
--   The second approach is to use <a>makeFilter</a> to make a filter which
--   can be used directly with pandoc from the command line. This filter
--   will just append the API documentation to the end of the document.
--   Example usage
--   
--   <pre>
--   -- api.hs
--   main :: IO ()
--   main = makeFilter (docs myApi)
--   </pre>
--   
--   <pre>
--   &gt; pandoc -o api.pdf --filter=api.hs manual.md
--   </pre>
module Servant.Docs.Pandoc

-- | Generate a <a>Pandoc</a> representation of a given <a>API</a>.
pandoc :: API -> Pandoc

-- | Helper function which can be used to make a pandoc filter which
--   appends the generate docs to the end of the document.
--   
--   This function is exposed for convenience. More experienced authors can
--   of course define a more complicated filter to inject the API
--   documentation.
makeFilter :: API -> IO ()
