-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Machinery to express how servant should turn results of database operations into proper JSON-encodable response types
--   
--   Machinery to express how servant should turn results of database
--   operations into proper JSON-encodable response types
@package servant-response
@version 0.1


-- | This module contains a generic <a>Response</a> class for tying the
--   result of some "database operation" to some response type of yours, or
--   to the standard ones from <a>Servant.Scotty.Prelude</a> for example.
module Servant.Response

-- | A class that ties return types of your database operations and the
--   output that will be generated to communicate the result.
--   
--   <ul>
--   <li>The first type, <tt>resp</tt>, is the response type that will be
--   encoded in JSON and sent as the response body.</li>
--   <li>The second type, <tt>result</tt>, is the result type of your
--   "database" or "context" operation.</li>
--   </ul>
--   
--   For example, if you're adding an item, and if you're using
--   postgresql-simple, you'll probably want to use the <a>Response</a>
--   instances defined in the servant-postgresql package, in the
--   <tt>Servant.PostgreSQL.Prelude</tt> module.
--   
--   It lets you specify, given a value of your result, if no exception is
--   thrown, what response should be sent as JSON to the client along with
--   what HTTP status.
--   
--   There's a functional dependency at play: the result type of a database
--   operation determines the representation that'll be picked for
--   generating the json output.
class ToJSON resp => Response resp result | result -> resp
toResponse :: Response resp result => result -> (resp, Status)

module Servant.Response.Prelude

-- | A generic response type for any <a>effectul</a> operation on a
--   <tt>Resource</tt>, like adding, updating or deleting an item.
--   
--   It simply holds a <a>Bool</a> that indicates whether the operation was
--   successful or not, and if it wasn't, it'll embed a text describing
--   what went wrong and is meant to be tagged (see the <tt>o</tt> type
--   parameter) with the operation it's associated to.
--   
--   This lets us have different instances for the standard <i>Add</i> and
--   <i>Update</i> operations for example, where the former should respond
--   with HTTP status code <i>201</i> if the entry was created, whereas the
--   latter should just use status code <i>200</i>.
--   
--   You can of course skip this one and use a more appropriate for your
--   particular application.
data UpdateResponse o
UpdateResponse :: !Bool -> !Text -> UpdateResponse o
success :: UpdateResponse o -> !Bool
msg :: UpdateResponse o -> !Text

-- | A generic response type for an operation performing some kind of
--   (potentially failing) lookup of an item
--   
--   This is useful when writing a web application, where you want to send
--   for example a JSON message saying the item wasn't found along with
--   status 404 when the item isn't found, but just send the item if it
--   could be found. This is (purposefully) isomorphic to <a>Maybe</a>.
data LookupResponse a
NotFound :: LookupResponse a
Found :: !a -> LookupResponse a
instance Eq (UpdateResponse o)
instance Show (UpdateResponse o)
instance Generic (UpdateResponse o)
instance Eq a => Eq (LookupResponse a)
instance Show a => Show (LookupResponse a)
instance Datatype D1UpdateResponse
instance Constructor C1_0UpdateResponse
instance Selector S1_0_0UpdateResponse
instance Selector S1_0_1UpdateResponse
instance ToJSON a => Response [a] [a]
instance ToJSON a => Response (LookupResponse a) (Maybe a)
instance ToJSON a => ToJSON (LookupResponse a)
instance ToJSON (UpdateResponse o)
