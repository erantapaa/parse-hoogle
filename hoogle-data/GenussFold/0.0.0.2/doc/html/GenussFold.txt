-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | MCFGs for Genus-1 RNA Pseudoknots
--   
@package GenussFold
@version 0.0.0.2

module BioInf.GenussFold.PKN

-- | Define signature and grammar
data SigPKN m_ac79 s_ac7a r_ac7b t_c_ac7c
SigPKN :: (s_ac7a -> t_c_ac7c -> s_ac7a -> t_c_ac7c -> s_ac7a) -> (() -> s_ac7a) -> ((:.) ((:.) Z ()) () -> s_ac7a) -> ((:.) ((:.) Z s_ac7a) () -> (:.) ((:.) Z t_c_ac7c) () -> s_ac7a -> (:.) ((:.) Z ()) s_ac7a -> (:.) ((:.) Z ()) t_c_ac7c -> s_ac7a) -> ((:.) ((:.) Z s_ac7a) () -> (:.) ((:.) Z t_c_ac7c) () -> s_ac7a -> (:.) ((:.) Z ()) s_ac7a -> (:.) ((:.) Z ()) t_c_ac7c -> s_ac7a) -> (() -> () -> s_ac7a -> s_ac7a -> s_ac7a) -> (s_ac7a -> t_c_ac7c -> s_ac7a) -> (Stream m_ac79 s_ac7a -> m_ac79 r_ac7b) -> SigPKN m_ac79 s_ac7a r_ac7b t_c_ac7c
jux :: SigPKN m_ac79 s_ac7a r_ac7b t_c_ac7c -> s_ac7a -> t_c_ac7c -> s_ac7a -> t_c_ac7c -> s_ac7a
nil :: SigPKN m_ac79 s_ac7a r_ac7b t_c_ac7c -> () -> s_ac7a
nll :: SigPKN m_ac79 s_ac7a r_ac7b t_c_ac7c -> (:.) ((:.) Z ()) () -> s_ac7a
pk1 :: SigPKN m_ac79 s_ac7a r_ac7b t_c_ac7c -> (:.) ((:.) Z s_ac7a) () -> (:.) ((:.) Z t_c_ac7c) () -> s_ac7a -> (:.) ((:.) Z ()) s_ac7a -> (:.) ((:.) Z ()) t_c_ac7c -> s_ac7a
pk2 :: SigPKN m_ac79 s_ac7a r_ac7b t_c_ac7c -> (:.) ((:.) Z s_ac7a) () -> (:.) ((:.) Z t_c_ac7c) () -> s_ac7a -> (:.) ((:.) Z ()) s_ac7a -> (:.) ((:.) Z ()) t_c_ac7c -> s_ac7a
pse :: SigPKN m_ac79 s_ac7a r_ac7b t_c_ac7c -> () -> () -> s_ac7a -> s_ac7a -> s_ac7a
unp :: SigPKN m_ac79 s_ac7a r_ac7b t_c_ac7c -> s_ac7a -> t_c_ac7c -> s_ac7a
h :: SigPKN m_ac79 s_ac7a r_ac7b t_c_ac7c -> Stream m_ac79 s_ac7a -> m_ac79 r_ac7b
gPKN :: (Build b3, MkStream m ((:!:) ((:!:) ((:!:) ((:!:) S (Split "ss_UU_1627436531" Fragment b2)) (Split "ss_VV_1627436532" Fragment b1)) (Split "ss_UU_1627436531" Final b2)) (Split "ss_VV_1627436532" Final b1)) t2, MkStream m (Pair ((:!:) ((:!:) S (TermSymbol (TermSymbol M b3) Deletion)) (TermSymbol (TermSymbol M b) Deletion)) b2) t3, MkStream m (Pair ((:!:) ((:!:) S (TermSymbol (TermSymbol M b3) Deletion)) (TermSymbol (TermSymbol M b) Deletion)) b1) t4, MkStream m ((:!:) ((:!:) ((:!:) (Stack b3) b) b3) b) t2, MkStream m ((:!:) S Epsilon) t2, MkStream m ((:!:) (Stack b3) b) t2, MkStream m S t4, MkStream m S t3, Element ((:!:) ((:!:) ((:!:) ((:!:) S (Split "ss_UU_1627436531" Fragment b2)) (Split "ss_VV_1627436532" Fragment b1)) (Split "ss_UU_1627436531" Final b2)) (Split "ss_VV_1627436532" Final b1)) t2, Element (Pair ((:!:) ((:!:) S (TermSymbol (TermSymbol M b3) Deletion)) (TermSymbol (TermSymbol M b) Deletion)) b2) t3, Element (Pair ((:!:) ((:!:) S (TermSymbol (TermSymbol M b3) Deletion)) (TermSymbol (TermSymbol M b) Deletion)) b1) t4, Element ((:!:) ((:!:) ((:!:) (Stack b3) b) b3) b) t2, Element ((:!:) (Stack b3) b) t2, RuleContext t4, RuleContext t3, RuleContext t2, TermStaticVar (TermSymbol (TermSymbol M Deletion) b3) t4, TermStaticVar (TermSymbol (TermSymbol M Deletion) b3) t3, TermStaticVar (TermSymbol (TermSymbol M Deletion) b) t4, TermStaticVar (TermSymbol (TermSymbol M Deletion) b) t3, TermStaticVar (TermSymbol (TermSymbol M Epsilon) Epsilon) t4, TermStaticVar (TermSymbol (TermSymbol M Epsilon) Epsilon) t3, TerminalStream m (TermSymbol (TermSymbol M Deletion) b3) t4, TerminalStream m (TermSymbol (TermSymbol M Deletion) b3) t3, TerminalStream m (TermSymbol (TermSymbol M Deletion) b) t4, TerminalStream m (TermSymbol (TermSymbol M Deletion) b) t3, TerminalStream m (TermSymbol (TermSymbol M Epsilon) Epsilon) t4, TerminalStream m (TermSymbol (TermSymbol M Epsilon) Epsilon) t3, Apply ((:.) ((:.) (Arg ((:!:) ((:!:) ((:!:) S (TermSymbol (TermSymbol M b3) Deletion)) (TermSymbol (TermSymbol M b) Deletion)) b2)) (TermArg (TermSymbol (TermSymbol M Deletion) b3))) (TermArg (TermSymbol (TermSymbol M Deletion) b)) -> a), Apply ((:.) ((:.) (Arg ((:!:) ((:!:) ((:!:) S (TermSymbol (TermSymbol M b3) Deletion)) (TermSymbol (TermSymbol M b) Deletion)) b1)) (TermArg (TermSymbol (TermSymbol M Deletion) b3))) (TermArg (TermSymbol (TermSymbol M Deletion) b)) -> a), Apply (Arg ((:!:) ((:!:) ((:!:) (Stack b3) b) b3) b) -> a), Apply (Arg ((:!:) ((:!:) ((:!:) ((:!:) S (Split "ss_UU_1627436531" Fragment b2)) (Split "ss_VV_1627436532" Fragment b1)) (Split "ss_UU_1627436531" Final b2)) (Split "ss_VV_1627436532" Final b1)) -> a), Apply (Arg ((:!:) (Stack b3) b) -> a), (~) * (Fun ((:.) ((:.) (Arg ((:!:) ((:!:) ((:!:) S (TermSymbol (TermSymbol M b3) Deletion)) (TermSymbol (TermSymbol M b) Deletion)) b2)) (TermArg (TermSymbol (TermSymbol M Deletion) b3))) (TermArg (TermSymbol (TermSymbol M Deletion) b)) -> a)) ((:.) ((:.) Z a) () -> (:.) ((:.) Z t1) () -> a -> (:.) ((:.) Z ()) a -> (:.) ((:.) Z ()) t1 -> a), (~) * (Fun ((:.) ((:.) (Arg ((:!:) ((:!:) ((:!:) S (TermSymbol (TermSymbol M b3) Deletion)) (TermSymbol (TermSymbol M b) Deletion)) b1)) (TermArg (TermSymbol (TermSymbol M Deletion) b3))) (TermArg (TermSymbol (TermSymbol M Deletion) b)) -> a)) ((:.) ((:.) Z a) () -> (:.) ((:.) Z t1) () -> a -> (:.) ((:.) Z ()) a -> (:.) ((:.) Z ()) t1 -> a), (~) * (Fun (Arg ((:!:) ((:!:) ((:!:) (Stack b3) b) b3) b) -> a)) (a -> t1 -> a -> t1 -> a), (~) * (Fun (Arg ((:!:) ((:!:) ((:!:) ((:!:) S (Split "ss_UU_1627436531" Fragment b2)) (Split "ss_VV_1627436532" Fragment b1)) (Split "ss_UU_1627436531" Final b2)) (Split "ss_VV_1627436532" Final b1)) -> a)) (() -> () -> a -> a -> a), (~) * (Fun (Arg ((:!:) (Stack b3) b) -> a)) (a -> t1 -> a)) => SigPKN m a t t1 -> ((t2 -> t2 -> m t) -> b3) -> ((t3 -> t3 -> m t) -> b2) -> ((t4 -> t4 -> m t) -> b1) -> b -> (:.) ((:.) ((:.) Z b3) b2) b1
bpmax :: Monad m => SigPKN m Int Int Char
pairs :: Char -> Char -> Bool

-- | TODO It could be beneficial to introduce <tt>type Splitted = Either
--   String (String,String)</tt> or something isomorphic. While [String]
--   works, it allows for too many possibilities here! ([] ist lightweight,
--   on the other hand ...)
pretty :: Monad m => SigPKN m [String] [[String]] Char

-- | <pre>
--   [{]}(())
--   caguagcu
--   [ ]
--    { }
--       (())
--   </pre>
pknPairMax :: Int -> String -> (Int, [[String]])
type X = ITbl Id Unboxed Subword Int
type T = ITbl Id Unboxed ((Z :. Subword) :. Subword) Int
runInsideForward :: Vector Char -> ((Z :. X) :. T) :. T
runInsideBacktrack :: Vector Char -> ((Z :. X) :. T) :. T -> [[String]]
instance (Monad mL0, Monad mR0, Eq xL0, mL0 ~ mR0, xL0 ~ rL0) => ProductBacktracking (SigPKN mL0 xL0 rL0 t_c0) (SigPKN mR0 xR0 rR0 t_c0)

module BioInf.GenussFold

-- | <pre>
--   [{]}(())
--   caguagcu
--   [ ]
--    { }
--       (())
--   </pre>
pknPairMax :: Int -> String -> (Int, [[String]])
