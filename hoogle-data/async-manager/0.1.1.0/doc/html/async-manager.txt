-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A thread manager for async
--   
@package async-manager
@version 0.1.1.0

module Control.Concurrent.AsyncManager

-- | A existentially quantified wrapper for Async a
data AnyAsync
AnyAsync :: (Async a) -> AnyAsync

-- | An Async thread manager. Keeps track of allocated and running Async
--   threads. Useful for ensure threads are cleaned up
data AsyncManager
AsyncManager :: MVar (HashMap ThreadId AnyAsync) -> MVar [AsyncManager] -> AsyncManager
childrenThreads :: AsyncManager -> MVar (HashMap ThreadId AnyAsync)
childrenManagers :: AsyncManager -> MVar [AsyncManager]

-- | Create a new empty manager
newAsyncManager :: IO AsyncManager

-- | Create a child manager
newChildManager :: AsyncManager -> IO AsyncManager

-- | Insert a new thread into the manager TODO: maybe I should check if the
--   computation is still running
insert :: AsyncManager -> Async a -> IO ()

-- | Cancel all threads and empty the manager
clear :: AsyncManager -> IO ()

-- | Thread count. Includes alive and dead threads
count :: AsyncManager -> IO Int

-- | Remove references to dead threads
compact :: AsyncManager -> IO ()

-- | Cancel the thread and remove the entry from the manager
cancelWithManager :: AsyncManager -> Async a -> IO ()

-- | Create a new thread and add it to the manager
asyncWithManager :: AsyncManager -> IO a -> IO (Async a)
labelAsyncWithManager :: AsyncManager -> String -> IO a -> IO (Async a)
