-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Binding to upskirt
--   
--   Bindings to the github fork of upskirt, a nice C markdown library:
--   <a>https://github.com/tanoku/upskirt</a>
@package upskirt
@version 0.0.4

module Text.Upskirt.Renderers.Html

-- | Parses a <a>ByteString</a> containing the markdown, returns the Html
--   code.
renderHtml :: ByteString -> Extensions -> HtmlRenderMode -> ByteString

-- | All the <a>HtmlRenderMode</a> disabled
noHtmlModes :: HtmlRenderMode

-- | All the <a>HtmlRenderMode</a> enabled
allHtmlModes :: HtmlRenderMode

-- | Converts punctuation in Html entities,
--   <a>http://daringfireball.net/projects/smartypants/</a>
smartypants :: ByteString -> ByteString
data HtmlRenderMode
HtmlRenderMode :: Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> HtmlRenderMode
htmlSkipHtml :: HtmlRenderMode -> Bool
htmlSkipStyle :: HtmlRenderMode -> Bool
htmlSkipImages :: HtmlRenderMode -> Bool
htmlSkipLinks :: HtmlRenderMode -> Bool
htmlExpandTabs :: HtmlRenderMode -> Bool
htmlSafelink :: HtmlRenderMode -> Bool
htmlToc :: HtmlRenderMode -> Bool
htmlHardWrap :: HtmlRenderMode -> Bool
htmlGithubBlockcode :: HtmlRenderMode -> Bool
htmlUseXhtml :: HtmlRenderMode -> Bool

module Text.Upskirt.Markdown

-- | A set of switches to enable or disable markdown features.
data Extensions
Extensions :: Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Extensions
extNoIntraEmphasis :: Extensions -> Bool
extTables :: Extensions -> Bool
extFencedCode :: Extensions -> Bool
extAutolink :: Extensions -> Bool
extStrikethrough :: Extensions -> Bool
extLaxHtmlBlocks :: Extensions -> Bool

-- | All <a>Extensions</a> enabled
allExtensions :: Extensions

-- | All <a>Extensions</a> disabled
noExtensions :: Extensions


-- | Bindings to the github fork of the upskirt library:
--   <a>https://github.com/tanoku/upskirt</a>
--   
--   Example usage:
--   
--   <pre>
--   import Text.Upskirt
--   import Text.Upskirt.Renderers.Html
--   import qualified Data.ByteString as BS
--   import qualified Data.ByteString.UTF8 as UTF8
--   import System (getArgs)
--   import Control.Monad (liftM)
--   
--   main :: IO ()
--   main = do
--     input &lt;- liftM (!! 0) getArgs &gt;&gt;= BS.readFile
--     putStrLn $ UTF8.toString $ renderHtml input allExtensions noHtmlModes
--   </pre>
module Text.Upskirt
