-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | data Nat = Zero | Succ Nat
--   
--   The usual <tt>data Nat = Zero | Succ Nat</tt> datatype with the
--   appropriate instances.
--   
--   Should be portable to any Haskell 98 compiler which supports the
--   <tt>CPP</tt> extension.
@package data-nat
@version 0.1.2


-- | Operations which are undefined mathematically (<tt>0 / 0</tt>,
--   <tt>infinity * 0</tt>, <tt>infinity - infinity</tt>, etc.) also have
--   undefined results in this implementation.
module Data.Nat
data Nat
Zero :: Nat
Succ :: Nat -> Nat

-- | Shallow deconstruction. Returns the first argument if <tt>Zero</tt>,
--   applies the second argument to the inner value if <tt>Succ</tt>.
nat :: r -> (Nat -> r) -> Nat -> r

-- | Returns the first argument if <tt>Zero</tt>, applies the second
--   argument recursively for each <tt>Succ</tt>.
foldNat :: r -> (r -> r) -> Nat -> r

-- | Build a <tt>Nat</tt> from a seed value: the first argument should
--   return the next seed value if the building is to continue, or
--   <tt>Nothing</tt> if it is to stop. A <tt>Succ</tt> is added at each
--   iteration.
unfoldNat :: (a -> Maybe a) -> a -> Nat

-- | Very big!
infinity :: Nat

-- | <pre>
--   diff n m | n &gt;= m    = Right (n - m)
--            | otherwise = Left  (m - n)
--   </pre>
diff :: Nat -> Nat -> Either Nat Nat
instance Typeable Nat
instance Eq Nat
instance Ord Nat
instance Read Nat
instance Show Nat
instance Generic Nat
instance Datatype D1Nat
instance Constructor C1_0Nat
instance Constructor C1_1Nat
instance Ix Nat
instance Whole Nat
instance Integral Nat
instance Real Nat
instance Num Nat
instance Bounded Nat
instance Enum Nat
