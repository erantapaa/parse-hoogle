-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Third-party extensions to hbro.
--   
--   Third-party extensions to hbro.
@package hbro-contrib
@version 0.9.1.0

module Hbro.WebSettings

-- | Disable HTML5 database &amp; local storage, plugins and scripts.
paranoidWebSettings :: [AttrOp WebSettings]
chromeUserAgent, safariUserAgent, operaUserAgent, internetExplorerUserAgent, firefoxUserAgent, epiphanyUserAgent :: String

module Hbro.StatusBar

-- | Write current scroll position in the given Label.
setupScrollWidget :: Label -> K ()

-- | /! Doesn't work for now. Write current zoom level in the given Label.
setupZoomWidget :: Label -> K ()
printInLabel :: String -> (String, Bool) -> K (String, Bool)

-- | Write current load progress in the given Label.
setupProgressWidget :: Label -> K ()

-- | Write current URI, or the destination of a hovered link, in the given
--   Label.
setupURIWidget :: URIColors -> URIColors -> Label -> K ()
labelSetURI :: URIColors -> URIColors -> Label -> URI -> IO ()
data URIColors
URIColors :: Color -> Color -> Color -> Color -> Color -> Color -> Color -> URIColors
mScheme :: URIColors -> Color
mHost :: URIColors -> Color
mPort :: URIColors -> Color
mUser :: URIColors -> Color
mPath :: URIColors -> Color
mQuery :: URIColors -> Color
mFragment :: URIColors -> Color
defaultURIColors :: URIColors
defaultSecureURIColors :: URIColors

module Hbro.Session

module Hbro.Misc

-- | List preceding URIs in dmenu and let the user select which one to
--   load.
goBackList :: [String] -> K (Maybe URI)

-- | List succeeding URIs in dmenu and let the user select which one to
--   load.
goForwardList :: [String] -> K (Maybe URI)
itemToEntry :: WebHistoryItem -> IO (Maybe String)

module Hbro.History
data Entry
Entry :: LocalTime -> URI -> String -> Entry
mTime :: Entry -> LocalTime
mURI :: Entry -> URI
mTitle :: Entry -> String

-- | Log current visited page to history file
log :: PortableFilePath -> K ()

-- | Add a new entry to history file
add :: PortableFilePath -> Entry -> IO Bool

-- | Try to parse a String into a history Entry.
parseEntry :: String -> Maybe Entry

-- | Open a dmenu with all (sorted alphabetically) history entries, and
--   return the user's selection, if any
select :: PortableFilePath -> [String] -> IO (Maybe Entry)
instance Show Entry

module Hbro.Download
aria, axel, wget :: PortableFilePath -> URI -> String -> IO ()

module Hbro.Clipboard

-- | Write given String to primary clipboard.
toClipboard :: String -> IO ()
withClipboard :: (String -> K ()) -> K ()

module Hbro.Bookmarks
data Entry
Entry :: URI -> [String] -> Entry
mURI :: Entry -> URI
mTags :: Entry -> [String]

-- | Add current webpage to bookmarks with given tags
add :: PortableFilePath -> [String] -> K ()

-- | Add a custom entry to bookmarks
addCustom :: PortableFilePath -> Entry -> IO Bool

-- | Open a dmenu with all (sorted alphabetically) bookmarks entries, and
--   return the user's selection, if any.
select :: PortableFilePath -> [String] -> IO (Maybe URI)

-- | Open a dmenu with all (sorted alphabetically) bookmarks tags, and
--   return the user's selection, if any.
selectTag :: PortableFilePath -> [String] -> IO (Maybe [URI])

-- | popOldest :: PortableFilePath -&gt; String -&gt; IO (Maybe URI)
--   popOldest file tags = do
--   
--   Return a random Bookmark entry with a given tag, while removing it
--   from bookmarks. popRandom :: PortableFilePath -&gt; String -&gt; IO
--   (Maybe URI) popRandom file tags = do file' &lt;- resolve file result
--   &lt;- try . readFile $ file' file'' <a>- either (\e -</a> errorHandler
--   file' e &gt;&gt; return Nothing) (x -&gt; return $ Just x) result
--   
--   Remove all bookmarks entries matching the given tag.
deleteWithTag :: PortableFilePath -> [String] -> IO ()
instance Show Entry
