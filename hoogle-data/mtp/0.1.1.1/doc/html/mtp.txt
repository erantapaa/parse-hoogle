-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bindings to libmtp
--   
--   A FFI binding to libmtp, an implementation of the Media Transfer
--   Protocol.
--   
--   See <a>http://libmtp.sourceforge.net</a> for more information.
@package mtp
@version 0.1.1.1


-- | Bindings to libmtp. High-level interface.
--   
--   Usage:
--   
--   <pre>
--   import qualified MTP
--   </pre>
--   
--   <pre>
--   main = do
--   </pre>
--   
--   <pre>
--   MTP.init
--   </pre>
--   
--   <pre>
--   MTP.withFirstDevice MTP.getDeviceVersion
--   </pre>
module MTP

-- | A handle to an MTP device connection.
data MTPHandle

-- | Track metadata.
data Track
Track :: Int -> Int -> Int -> String -> String -> String -> String -> String -> String -> String -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Integer -> FileType -> Track
trackID :: Track -> Int
trackParentID :: Track -> Int
trackStorageID :: Track -> Int
trackTitle :: Track -> String
trackArtist :: Track -> String
trackComposer :: Track -> String
trackGenre :: Track -> String
trackAlbum :: Track -> String
trackDate :: Track -> String
trackFileName :: Track -> String
trackNumber :: Track -> Int
trackDuration :: Track -> Int
trackSamplerate :: Track -> Int
trackChannels :: Track -> Int
trackWavecodec :: Track -> Int
trackBitrate :: Track -> Int
trackBitrateType :: Track -> Int
trackRating :: Track -> Int
trackUseCount :: Track -> Int
trackFileSize :: Track -> Integer
trackFileType :: Track -> FileType

-- | File metadata.
data File
File :: Int -> Int -> Int -> String -> Integer -> FileType -> File
fileID :: File -> Int
fileParentID :: File -> Int
fileStorageID :: File -> Int
fileName :: File -> String
fileSize :: File -> Integer
fileType :: File -> FileType

-- | Folder metadata.
data Folder
Folder :: Int -> Int -> Int -> String -> Maybe Folder -> Folder
folderID :: Folder -> Int
folderParentID :: Folder -> Int
folderStorageID :: Folder -> Int
folderName :: Folder -> String
folderChild :: Folder -> Maybe Folder

-- | Playlist metadata.
data Playlist
Playlist :: Int -> Int -> Int -> String -> [Int] -> Int -> Playlist
playlistID :: Playlist -> Int
playlistParentID :: Playlist -> Int
playlistStorageID :: Playlist -> Int
playlistName :: Playlist -> String
playlistTracks :: Playlist -> [Int]
playlistNoTracks :: Playlist -> Int

-- | Filetype enumeration.
data FileType

-- | MTP exceptions.
data MTPException
NoDevice :: MTPException
StorageFull :: MTPException
ConnectionFailed :: MTPException
Cancelled :: MTPException
General :: String -> MTPException

-- | MTP library version.
version :: Integer
wav :: FileType
mp3 :: FileType
wma :: FileType
ogg :: FileType
audible :: FileType
mp4 :: FileType
undef_audio :: FileType
wmv :: FileType
avi :: FileType
mpeg :: FileType
asf :: FileType
qt :: FileType
undef_video :: FileType
jpeg :: FileType
jfif :: FileType
tiff :: FileType
bmp :: FileType
gif :: FileType
pict :: FileType
png :: FileType
vcalendar1 :: FileType
vcalendar2 :: FileType
vcard2 :: FileType
vcard3 :: FileType
windowsimageformat :: FileType
winexec :: FileType
text :: FileType
html :: FileType
firmware :: FileType
aac :: FileType
mediacard :: FileType
flac :: FileType
mp2 :: FileType
m4a :: FileType
doc :: FileType
xml :: FileType
xls :: FileType
ppt :: FileType
mht :: FileType
jp2 :: FileType
unknown :: FileType

-- | Initialize MTP.
init :: IO ()

-- | Connect to the first available MTP device.
getFirstDevice :: IO MTPHandle

-- | Close connection to a MTP device. The handle is unusable after this.
releaseDevice :: MTPHandle -> IO ()

-- | Reset device.
resetDevice :: MTPHandle -> IO ()

-- | Open a connection to the first available MTP device and run an action,
--   closing the connection afterwards.
withFirstDevice :: (MTPHandle -> IO a) -> IO a

-- | Get device hardware and firmware version.
getDeviceVersion :: MTPHandle -> IO String

-- | Get the device manufacturer name.
getManufacturerName :: MTPHandle -> IO String

-- | Get the device model name.
getModelName :: MTPHandle -> IO String

-- | Get the device serial number.
getSerialNumber :: MTPHandle -> IO String

-- | Get the owner string aka. the "friendly name".
getFriendlyName :: MTPHandle -> IO String

-- | Get battery level, maximum and current.
getBatteryLevel :: MTPHandle -> IO (Int, Int)

-- | Get a list of supported file types.
getSupportedFileTypes :: MTPHandle -> IO [FileType]

-- | Get a list of all files stored on the device.
getFileListing :: MTPHandle -> IO [File]

-- | Copy a file from the device to a local file.
getFile :: MTPHandle -> Int -> FilePath -> IO ()

-- | Send a local file to the device.
sendFile :: MTPHandle -> FilePath -> IO ()

-- | Get a file from the device to a file handle.
hGetFile :: MTPHandle -> Int -> Handle -> IO ()

-- | Send a file to the device from a file handle.
hSendFile :: MTPHandle -> Handle -> File -> IO ()

-- | Rename a file on the device.
setFileName :: MTPHandle -> File -> String -> IO ()

-- | An empty track.
emptyTrack :: Track

-- | Test whether a track exists on the device.
doesTrackExist :: MTPHandle -> Int -> IO Bool

-- | Get a list of all tracks stored on the device.
getTrackListing :: MTPHandle -> IO [Track]

-- | Copy a track from the device to a local file.
getTrack :: MTPHandle -> Int -> FilePath -> IO ()

-- | Send a local track to the device, using the supplied metadata.
sendTrack :: MTPHandle -> FilePath -> Track -> IO ()

-- | Copy a track from the device to a file handle.
hGetTrack :: MTPHandle -> Int -> Handle -> IO ()

-- | Send a track to the device from a file handle.
hSendTrack :: MTPHandle -> Handle -> Track -> IO ()

-- | Update track metadata.
updateTrack :: MTPHandle -> Track -> IO ()

-- | Get metadata for a single track.
getTrackMetadata :: MTPHandle -> Int -> IO (Maybe Track)

-- | Rename a single track.
setTrackName :: MTPHandle -> Track -> String -> IO ()

-- | Create a new folder.
createFolder :: MTPHandle -> String -> Int -> Int -> IO Int

-- | Get a list of all folders on the device.
getFolderList :: MTPHandle -> IO [Folder]

-- | Rename a folder.
setFolderName :: MTPHandle -> Folder -> String -> IO ()

-- | Get a list of playlists on the device.
getPlaylistList :: MTPHandle -> IO [Playlist]

-- | Get a single playlist by ID.
getPlaylist :: MTPHandle -> Int -> IO (Maybe Playlist)

-- | Create a new playlist using the metadata supplied.
createPlaylist :: MTPHandle -> Playlist -> IO ()

-- | Update an existing playlist.
updatePlaylist :: MTPHandle -> Playlist -> IO ()

-- | Rename an existing playlist. The expected name suffix is ".pla".
setPlaylistName :: MTPHandle -> Playlist -> String -> IO ()

-- | Delete a single file, track, playlist, folder or any other object.
deleteObject :: MTPHandle -> Int -> IO ()

-- | Set the filename of any object.
setObjectName :: MTPHandle -> Int -> String -> IO ()

-- | Find the FileType for a given file name.
findFileType :: FilePath -> FileType
instance Typeable MTPException
instance Eq Playlist
instance Show Playlist
instance Eq Track
instance Show Track
instance Eq File
instance Show File
instance Eq MTPException
instance Show MTPException
instance Exception MTPException
