-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Evaluation combinators for breadth-first evaluated catamorphisms
@package bf-cata
@version 1.1


-- | Some combinators to express breadth-first evaluation of catamorphisms,
--   which allows you to stepwise evaluate the results of children. If,
--   during the evaluation of an alternative, a choice needs to be made
--   between taking the results of its children, with these combinators,
--   you can stepwise evaluate the children in parallel, until a choice can
--   be made. Until a choice is made, evaluation proceeds strictly; after a
--   choice is made, evaluation proceeds lazily. What constitutes to be a
--   step is determined by the callee.
module Data.BreadthFirstCata.Cata

-- | Semantics of a child of type <tt>n</tt> as a function from inherited
--   attributes (<tt>Inh n</tt>) to a computation <tt>Comp i n</tt> of
--   synthesized attributes (<tt>Syn n</tt>).
newtype Child i n
Child :: (Inh n -> Comp i n) -> Child i n

-- | Computation of synthesized attributes of nonterminal of type
--   <tt>n</tt>. It is a trace of <tt>Info</tt>-effects, that keeps track
--   of the intermediate states of the tree (using <tt>Pending</tt>),
--   ending ultimately in the synthesized values (using <tt>Final</tt>).
--   Operationally, we lift <tt>Info</tt>-values over
--   <tt>Pending</tt>-values, thereby gradually rewriting the latter, until
--   it results in a <tt>Final</tt>.
data Comp i n

-- | Unwraps a <tt>Child</tt>
invoke :: Child i n -> Inh n -> Comp i n

-- | Wrapper for final result.
final :: Syn n -> Comp i n

-- | Wrapper for an effect.
info :: i -> Comp i n -> Comp i n

-- | Create a |Pending| computation that waits for the given computation.
resume :: Comp i n' -> (Syn n' -> Comp i n) -> Comp i n
inject :: i -> Comp i Inject
sem_Inject :: Child i Inject

-- | Injection of steps as conventional call
data Inject

-- | Lazy evaluation of a computation. Note: we cannot inspect the
--   effect-trace, as it would sequentialize the evaluation of children.
lazyEval :: Comp i n -> Syn n

-- | One step strict evaluation. Reduction proceeds until the computation
--   is either finished or yields an <tt>Info</tt>-effect.
oneStep :: Comp i n -> Outcome i n

-- | Result of one step evaluation: either the final result or an updated
--   computation. What constitutes to a step depends on the application:
--   evaluation proceeds until an outcome can be given.
data Outcome i n
Fin :: !Syn n -> Outcome i n
Step :: !i -> (Comp i n) -> Outcome i n
