-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Integrating HttpSpec with Haskoon
--   
--   Allows to send and receive Http requests using the HttpSpec
--   specifications.
@package haskoon-httpspec
@version 0.5.0.1

module Factis.Haskoon.HttpSpec.SendRecv
getReqIn :: (Web m) => m ReqIn
sendReqOut :: (MonadIO m) => ReqOut -> m (Either String ResIn)
sendResOut :: (Web m) => ResOut -> m (WebRes m)
forwardReq :: (WebIO m) => (ReqIn -> m ReqOut) -> (ResIn -> m ResOut) -> m (WebRes m)

module Factis.Haskoon.HttpSpec.WebHandler
class (MonadError WebExc m) => ReqHandler m
sendReq :: (ReqHandler m) => ReqOut -> m ResIn
newtype ReqHandlerT m a
ReqHandlerT :: ReaderT (ReqHandlerState m) (ErrorT WebExc m) a -> ReqHandlerT m a
unReqHandlerT :: ReqHandlerT m a -> ReaderT (ReqHandlerState m) (ErrorT WebExc m) a
data ReqHandlerState m
ReqHandlerState :: (ReqOut -> m (Either String ResIn)) -> ReqHandlerState m
rhst_sendReqOut :: ReqHandlerState m -> ReqOut -> m (Either String ResIn)
runWebReq :: (WebIO m) => (ReqIn -> ReqHandlerT m ResOut) -> m (WebRes m)
runWebReqHandlerT :: (WebIO m) => ReqHandlerT m a -> m (Either WebExc a)
runReqHandlerT :: (Monad m) => ReqHandlerT m a -> ReqHandlerState m -> m (Either WebExc a)
runIOReqHandlerT :: (MonadIO m) => ReqHandlerT m a -> m (Either WebExc a)
match :: (MonadError WebExc m) => [ReqIn -> m ResOut] -> ReqIn -> m ResOut
instance (Monad m) => Monad (ReqHandlerT m)
instance (MonadIO m) => ReqHandler (ReqHandlerT m)
instance (Web m) => Web (ReqHandlerT m)
instance WebTrans ReqHandlerT
instance MonadTrans ReqHandlerT
instance (MonadIO m) => MonadIO (ReqHandlerT m)
instance (Monad m) => MonadError WebExc (ReqHandlerT m)

module Factis.Haskoon.HttpSpec.SpecHandler
matchBySpec :: (MonadError WebExc m, HasReqSpec a, HasResSpec b) => (a -> m b) -> ReqIn -> m ResOut
matchByReqSpec :: (MonadError WebExc m, HasReqSpec a) => (a -> m ResOut) -> ReqIn -> m ResOut
rawSendBySpec :: (HasReqSpec a, ReqHandler m) => HttpUrl -> a -> m ResIn
sendBySpec :: (HasReqSpec a, HasResSpec b, ReqHandler m) => HttpUrl -> a -> m b
rawSendToUrl :: (HasReqSpec a, ReqHandler m) => String -> a -> m ResIn
sendToUrl :: (HasReqSpec a, HasResSpec b, ReqHandler m) => String -> a -> m b
rhSendReq :: (ReqHandler m) => ReqOut -> m ResIn
rhParseResIn :: (ReqHandler m) => ResSpec a -> ResIn -> m a
rhGenReqOut :: (ReqHandler m) => HttpUrl -> ReqSpec a -> a -> m ReqOut
rhParseUrl :: (ReqHandler m) => String -> m HttpUrl
