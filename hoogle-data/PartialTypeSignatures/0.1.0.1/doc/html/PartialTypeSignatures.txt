-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | emulate partial type signatures with template haskell
--   
--   emulate partial type signatures with template haskell
@package PartialTypeSignatures
@version 0.1.0.1


-- | Example usage (GHC-7.8):
--   
--   <pre>
--   sigs
--       [| ["f1" :: a -&gt; b -&gt; (a, Int),
--           "f1" :: b -&gt; a -&gt; (Char, a) ] |]
--   
--   f1 x y | False = $(unionSigs [| f1 x y |])
--   f1 x y = undefined -- (x,y)
--   </pre>
--   
--   A GHC-7.6 compatible version must be slightly longer to work around
--   the extra typechecking done of [| |] brackets:
--   
--   <pre>
--   sigs [| do
--     f2 &lt;- Nothing
--     Just [ f2 :: a -&gt; b -&gt; (a, Int),
--            f2 :: b -&gt; a -&gt; (Char, a) ]
--     |]
--     
--   f2 x y | False = $(unionSigs [| f2  x y |])
--   f2 x y = undefined -- (x,y)
--   </pre>
--   
--   If the expression splice generated by <a>unionSigs</a> is left out,
--   
--   <pre>
--   sigs
--       [| ["g" :: a -&gt; b -&gt; (a, Int),
--           "g" :: b -&gt; a -&gt; (Char, a) ] |]
--   
--   g x y = undefined -- (x,y)
--   </pre>
--   
--   then <tt>g</tt>'s type takes the most general type <tt>(g :: t)</tt>,
--   and the two functions defined by <a>sigs</a> can be used to restrict
--   the type of g:
--   
--   <pre>
--   partialTypeSig_g1 :: (t -&gt; t1 -&gt; (t, Int)) -&gt; t -&gt; t1 -&gt; (t, Int)
--   partialTypeSig_g1 = id
--   
--   partialTypeSig_g2 :: (t -&gt; t1 -&gt; (Char, t1)) -&gt; t -&gt; t1 -&gt; (Char, t1)
--   partialTypeSig_g2 = id
--   </pre>
module PartialTypeSigs

-- | any subexpression of the passed-in expression which looks like:
--   
--   <pre>
--   "functionName" :: t
--   functionName :: t
--   </pre>
--   
--   generates the following function:
--   
--   <pre>
--   partialTypeSig_functionName1 x = x `asTypeOf` (functionName `asTypeOf` (undefined :: t))
--   </pre>
--   
--   Note that the above function is not the same as
--   
--   <pre>
--   badId x = x `asTypeOf` (functionName :: t)
--   </pre>
--   
--   which requires that <tt>t</tt> be more specific than
--   <tt>functionName</tt>
sigs :: ExpQ -> DecsQ
unionSigs :: ExpQ -> ExpQ
