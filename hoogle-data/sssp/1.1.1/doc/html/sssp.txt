-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | HTTP proxy for S3.
--   
--   An HTTP proxy for S3 that generates signed URLs for GETs and PUTs and
--   proxies DELETEs. A very limited form of range queries, using semantic
--   version sort and ASCII set, are supported.
@package sssp
@version 1.1.1


-- | Helper functions for writing the web server.
module Aws.SSSP.WWW
proxied :: Manager -> String -> ResourceT IO Response
reSource :: MonadIO m => ResumableSource m o -> m (Source m o)
b2b :: Monad m => Conduit ByteString m (Flush Builder)
addHeaders :: PutObject -> RequestHeaders -> PutObject

module Aws.SSSP
wai :: Ctx -> Application
task :: Ctx -> Method -> Resource -> ResourceT IO (Maybe Task)
data Task
Retrieve :: Text -> Task
Listing :: [Text] -> Task
Remove :: [Text] -> Task
Write :: Text -> Task

-- | Resources are either singular or plural in character. URLs ending
--   ending in <tt>/</tt> or containing set wildcards specify plural
--   resources; all other URLs indicate singular resources. A singular
--   resource results in a redirect while a plural resource results in a
--   newline-separated list of URLs (themselves singular in character).
data Resource
Singular :: [Either Text Wildcard] -> Resource
Plural :: [Either (Either Text Wildcard) SetWildcard] -> Resource
data Ctx
Ctx :: Bucket -> Configuration -> S3Configuration NormalQuery -> Manager -> Ctx
bucket :: Ctx -> Bucket
aws :: Ctx -> Configuration
s3 :: Ctx -> S3Configuration NormalQuery
manager :: Ctx -> Manager
data Order
ASCII :: Order
SemVer :: Order
data Wildcard
Hi :: Order -> Wildcard
Lo :: Order -> Wildcard
data SetWildcard
Include :: Word -> Wildcard -> SetWildcard
Exclude :: Word -> Wildcard -> SetWildcard

-- | Interpret a request URL as a resource, expanding wildcards as needed.
--   By default, wildcards are expanded with <tt>@</tt> as the
--   meta-character (<tt>@hi</tt>, <tt>@lo.semver5</tt>) but the
--   meta-character can be changed with a query parameter so we pass the
--   whole request here.
--   
--   The meta-character is in leading position in wildcard path components
--   and escapes itself in leading position, in a simple way: leading runs
--   are shortened by one character. Some examples of path components and
--   their interpretation are helpful:
--   
--   <pre>
--   hi      -&gt; The string "hi".
--   @hi     -&gt; The hi.semver wildcard.
--   @@hi    -&gt; The string "@hi".
--   @@@hi   -&gt; The string "@@hi".
--   ...and so on...
--   </pre>
--   
--   Sending <tt>meta=_</tt> as a query parameter changes the
--   meta-character to an underscore. The meta-character may be any single
--   character; empty or overlong <tt>meta</tt> parameters are ignored.
resource :: Request -> Resource
url :: Char -> [Text] -> Resource

-- | Parse a single path component.
component :: Char -> Parser (Either (Either Text Wildcard) SetWildcard)

-- | Parse a plain string, shrinking leading runs of the metacharacter by
--   one.
plain :: Char -> Parser Text

-- | Match a simple, singular wildcard.
wildcard :: Char -> Parser Wildcard

-- | Match a wildcard set, ending with a count (if it is inclusive) or an
--   optional count and a final tilde (if it is exclusive).
setWildcard :: Char -> Parser SetWildcard
star :: Char -> Parser SetWildcard

-- | Wildcards and their textual representations.
wildcards :: [(Text, Wildcard)]

-- | Translate a resource in to a listing of objects. While intermediate S3
--   prefixes (directories) are traversed, the final match is always on
--   keys for objects.
resolve :: Ctx -> Resource -> ResourceT IO (Attempt [Text])
listing :: Ctx -> Text -> ResourceT IO (Attempt ([Text], [Text]))
expand :: SetWildcard -> [Text] -> [Text]
(-/-) :: Text -> Text -> Text

-- | Split a URL into components, placing the balance of slashes in a slash
--   run to the left of the last slash. This is what all the Amazon APIs --
--   including the HTTP interface -- seem to expect, based on experiment.
--   This function exists so that we can split a URL retrieved from S3, by
--   way of list bucket, for example, into pieces for later escaping.
s3Pieces :: Text -> [Text]

-- | Encode an S3 path to a URL, splitting on slashes but preserving slash
--   runs as appropriate.
s3Encode :: Text -> Builder
plusNL :: Builder -> Builder
order :: Order -> [Text] -> [Text]
textSemVer :: Text -> [Integer]
instance Eq Task
instance Ord Task
instance Show Task
instance Eq Order
instance Ord Order
instance Show Order
instance Eq Wildcard
instance Ord Wildcard
instance Show Wildcard
instance Eq SetWildcard
instance Ord SetWildcard
instance Show SetWildcard
instance Eq Resource
instance Ord Resource
instance Show Resource
instance Show Ctx


-- | Utilities for determining the server configuration from environment
--   variables and file input.
module Aws.SSSP.Configuration
variables :: [ByteString]
fromEnv :: IO (Map ByteString ByteString)
maybeGetEnv :: ByteString -> IO (Maybe ByteString)
fromBytes :: ByteString -> Map ByteString ByteString

-- | Recognizes a parseable <tt>k = v</tt> or <tt>k: v</tt> style line.
--   It's relatively flexible on input but rejects lines that might have
--   shell interpolations in them -- lines containing one of <tt>$`{}</tt>
--   -- as well as lines with shell quotes (<tt>'"</tt>). This allows the
--   file input parser to skip over such values when a raw rc file is
--   loaded.
line :: Parser (ByteString, ByteString)
fromEnvAndSTDIN :: IO (Map ByteString ByteString)
conf :: IO (Either (Map ByteString ByteString) (Ctx, Settings))
createSettings :: Map ByteString ByteString -> Maybe Settings
createCtx :: Map ByteString ByteString -> IO (Maybe Ctx)
validate :: ByteString -> ByteString -> Maybe ByteString
prune :: Map ByteString ByteString -> Map ByteString ByteString

-- | Interpret a region name, like <tt>us-west-1</tt>, in accord with the
--   Amazon's documentation for endpoint lcoations.
--   <a>http://docs.amazonwebservices.com/general/latest/gr/rande.html</a>
endpoint :: ByteString -> Maybe ByteString
render :: Map ByteString ByteString -> ByteString

module Aws.SSSP.App
app :: IO ()
args :: [String] -> IO ()
web :: IO ()
argumentError :: [String] -> IO b
msg :: ByteString -> IO ()
err :: ByteString -> IO b
