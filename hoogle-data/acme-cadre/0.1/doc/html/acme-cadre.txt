-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | car, cdr and more
--   
--   Powerful and compositional tuple processing, informed by classic
--   functional programming principles.
@package acme-cadre
@version 0.1


-- | Cadre is a powerful framework for the organization of heterogeneous
--   units. A live-fire demonstration follows.
--   
--   Cadre allows any unit to be addressed uniformly:
--   
--   <pre>
--   &gt;&gt;&gt; <a>car</a> (1, 2)
--   <i>1</i>
--   &gt;&gt;&gt; car (1, 2, 3)
--   <i>1</i>
--   &gt;&gt;&gt; car (1, 2, 3, 4)
--   <i>1</i>
--   &gt;&gt;&gt; <a>cdr</a> (1, 2)
--   <i>2</i>
--   &gt;&gt;&gt; cdr (1, 2, 3)
--   <i>(2, 3)</i>
--   &gt;&gt;&gt; cdr (1, 2, 3, 4)
--   <i>(2, 3, 4)</i>
--   </pre>
--   
--   and also reassigned uniformly:
--   
--   <pre>
--   &gt;&gt;&gt; <a>setCar</a> (+ 1) (1, 2)
--   <i>(2, 2)</i>
--   &gt;&gt;&gt; <a>setCdr</a> (subtract 1) (1, 2)
--   <i>(1, 1)</i>
--   </pre>
--   
--   Of course, these basic functions can be used to carry out combined
--   operations:
--   
--   <pre>
--   &gt;&gt;&gt; <a>caddr</a> (1, 2, 3, 4)
--   <i>3</i>
--   &gt;&gt;&gt; caddr (1, 2, (3, 4))
--   <i>3</i>
--   &gt;&gt;&gt; caddr (1, (2, 3, 4))
--   <i>3</i>
--   &gt;&gt;&gt; <a>setCaddr</a> (+ 1) (1, 2, 3, (4, 5))
--   <i>(1, 2, 4, (4, 5))</i>
--   &gt;&gt;&gt; <a>cdaar</a> . <a>cdddr</a> $ (1, (2, 3, ((4, 5), 6), 7))
--   <i>5</i>
--   </pre>
--   
--   Observe the simplicity and scalability of our approach. Cadre can use
--   any type of car, opening up more logistical possibilities:
--   
--   <pre>
--   &gt;&gt;&gt; <a>cdddddr</a> [1 .. 10]
--   <i>[6, 7, 8, 9, 10]</i>
--   &gt;&gt;&gt; <a>setCddr</a> reverse (0, [1 .. 4])
--   <i>(0, [1, 4, 3, 2])</i>
--   </pre>
--   
--   From time to time you may find dissent among your ranks. Suppose that
--   your lieutenant insists on
--   
--   <pre>
--   capture :: IO (X, Y, (Z, Z))
--   </pre>
--   
--   but your right-hand-man demands compliance with
--   
--   <pre>
--   dispose :: (X, (Y, [Z])) -&gt; IO ()
--   </pre>
--   
--   Cadre helps them look past their differences and find solidarity:
--   
--   <pre>
--   capture &gt;&gt;= <a>repair4</a> <a>&lt;&amp;&gt;</a> dispose
--   </pre>
--   
--   <tt>repair</tt> is straightforward, even in the field. In fact, its
--   constituent steps are clear from its name:
--   
--   <pre>
--   <a>repair4</a> = <a>reap4</a> &lt;&amp;&gt; <a>pare4</a>
--   
--   &gt;&gt;&gt; reap4 (1, 2, 3, 4)
--   <i>(1, (2, (3, 4)))</i>
--   &gt;&gt;&gt; pare4 (1, (2, (3, 4))) :: (Int, Int, Int, Int)
--   <i>(1, 2, 3, 4)</i>
--   &gt;&gt;&gt; pare4 (1, (2, (3, 4))) :: (Int, [Int])
--   <i>(1, [2, 3, 4])</i>
--   </pre>
--   
--   By understanding the details of <tt>repair</tt>, we gain more
--   flexibility in field operations:
--   
--   <pre>
--   &gt;&gt;&gt; <a>setCddr</a> (uncurry (++)) ("a", "b", "c", "d")
--   <i>-- not permitted due to negative assessment of typing protocol</i>
--   &gt;&gt;&gt; pare3 . setCddr (uncurry (++)) . reap4 $ ("a", "b", "c", "d") :: (String, String, String)
--   <i>("a", "b", "cd")</i>
--   </pre>
--   
--   This concludes the live demonstration.
module Acme.Cadre

-- | <tt>(&lt;&amp;&gt;) = flip (.)</tt>. Hide this if you are importing
--   <tt>&lt;&amp;&gt;</tt> from <a>Control.Lens</a>.
(<&>) :: (a -> b) -> (b -> c) -> a -> c
class Cadre a car cdr | a -> car cdr
cadre :: Cadre a car cdr => a -> (car, cdr)
car :: Cadre a c b => a -> c
cdr :: Cadre a a1 c => a -> c
caar :: (Cadre b c b1, Cadre a b b2) => a -> c
cadr :: (Cadre b c b1, Cadre a a1 b) => a -> c
cdar :: (Cadre b a1 c, Cadre a b b1) => a -> c
cddr :: (Cadre b a1 c, Cadre a a2 b) => a -> c
caaar :: (Cadre b c b1, Cadre b2 b b3, Cadre a b2 b4) => a -> c
caadr :: (Cadre b c b1, Cadre b2 b b3, Cadre a a1 b2) => a -> c
cadar :: (Cadre b c b1, Cadre b2 a1 b, Cadre a b2 b3) => a -> c
caddr :: (Cadre b c b1, Cadre b2 a1 b, Cadre a a2 b2) => a -> c
cdaar :: (Cadre b a1 c, Cadre b1 b b2, Cadre a b1 b3) => a -> c
cdadr :: (Cadre b a1 c, Cadre b1 b b2, Cadre a a2 b1) => a -> c
cddar :: (Cadre b a1 c, Cadre b1 a2 b, Cadre a b1 b2) => a -> c
cdddr :: (Cadre b a1 c, Cadre b1 a2 b, Cadre a a3 b1) => a -> c
caaaar :: (Cadre b1 c b2, Cadre b b1 b3, Cadre b4 b b5, Cadre a b4 b6) => a -> c
caaadr :: (Cadre b1 c b2, Cadre b b1 b3, Cadre b4 b b5, Cadre a a1 b4) => a -> c
caadar :: (Cadre b1 c b2, Cadre b b1 b3, Cadre b4 a1 b, Cadre a b4 b5) => a -> c
caaddr :: (Cadre b1 c b2, Cadre b b1 b3, Cadre b4 a1 b, Cadre a a2 b4) => a -> c
cadaar :: (Cadre b1 c b2, Cadre b a1 b1, Cadre b3 b b4, Cadre a b3 b5) => a -> c
cadadr :: (Cadre b1 c b2, Cadre b a1 b1, Cadre b3 b b4, Cadre a a2 b3) => a -> c
caddar :: (Cadre b1 c b2, Cadre b a1 b1, Cadre b3 a2 b, Cadre a b3 b4) => a -> c
cadddr :: (Cadre b1 c b2, Cadre b a1 b1, Cadre b3 a2 b, Cadre a a3 b3) => a -> c
cdaaar :: (Cadre b1 a1 c, Cadre b b1 b2, Cadre b3 b b4, Cadre a b3 b5) => a -> c
cdaadr :: (Cadre b1 a1 c, Cadre b b1 b2, Cadre b3 b b4, Cadre a a2 b3) => a -> c
cdadar :: (Cadre b1 a1 c, Cadre b b1 b2, Cadre b3 a2 b, Cadre a b3 b4) => a -> c
cdaddr :: (Cadre b1 a1 c, Cadre b b1 b2, Cadre b3 a2 b, Cadre a a3 b3) => a -> c
cddaar :: (Cadre b1 a1 c, Cadre b a2 b1, Cadre b2 b b3, Cadre a b2 b4) => a -> c
cddadr :: (Cadre b1 a1 c, Cadre b a2 b1, Cadre b2 b b3, Cadre a a3 b2) => a -> c
cdddar :: (Cadre b1 a1 c, Cadre b a2 b1, Cadre b2 a3 b, Cadre a b2 b3) => a -> c
cddddr :: (Cadre b1 a1 c, Cadre b a2 b1, Cadre b2 a3 b, Cadre a a4 b2) => a -> c
caddddr :: (Cadre b c b1, Cadre b3 a1 b, Cadre b2 a2 b3, Cadre b4 a3 b2, Cadre a a4 b4) => a -> c
cdddddr :: (Cadre b a1 c, Cadre b2 a2 b, Cadre b1 a3 b2, Cadre b3 a4 b1, Cadre a a5 b3) => a -> c
cadddddr :: (Cadre b1 c b2, Cadre b a1 b1, Cadre b4 a2 b, Cadre b3 a3 b4, Cadre b5 a4 b3, Cadre a a5 b5) => a -> c
cddddddr :: (Cadre b1 a1 c, Cadre b a2 b1, Cadre b3 a3 b, Cadre b2 a4 b3, Cadre b4 a5 b2, Cadre a a6 b4) => a -> c
caddddddr :: (Cadre b1 c b2, Cadre b3 a1 b1, Cadre b a2 b3, Cadre b5 a3 b, Cadre b4 a4 b5, Cadre b6 a5 b4, Cadre a a6 b6) => a -> c
cdddddddr :: (Cadre b1 a1 c, Cadre b2 a2 b1, Cadre b a3 b2, Cadre b4 a4 b, Cadre b3 a5 b4, Cadre b5 a6 b3, Cadre a a7 b5) => a -> c
cadddddddr :: (Cadre b2 c b3, Cadre b1 a1 b2, Cadre b4 a2 b1, Cadre b a3 b4, Cadre b6 a4 b, Cadre b5 a5 b6, Cadre b7 a6 b5, Cadre a a7 b7) => a -> c
cddddddddr :: (Cadre b2 a1 c, Cadre b1 a2 b2, Cadre b3 a3 b1, Cadre b a4 b3, Cadre b5 a5 b, Cadre b4 a6 b5, Cadre b6 a7 b4, Cadre a a8 b6) => a -> c
caddddddddr :: (Cadre b c b1, Cadre b4 a1 b, Cadre b3 a2 b4, Cadre b5 a3 b3, Cadre b2 a4 b5, Cadre b7 a5 b2, Cadre b6 a6 b7, Cadre b8 a7 b6, Cadre a a8 b8) => a -> c
cdddddddddr :: (Cadre b a1 c, Cadre b3 a2 b, Cadre b2 a3 b3, Cadre b4 a4 b2, Cadre b1 a5 b4, Cadre b6 a6 b1, Cadre b5 a7 b6, Cadre b7 a8 b5, Cadre a a9 b7) => a -> c
cadddddddddr :: (Cadre b1 c b2, Cadre b a1 b1, Cadre b5 a2 b, Cadre b4 a3 b5, Cadre b6 a4 b4, Cadre b3 a5 b6, Cadre b8 a6 b3, Cadre b7 a7 b8, Cadre b9 a8 b7, Cadre a a9 b9) => a -> c
cddddddddddr :: (Cadre b1 a1 c, Cadre b a2 b1, Cadre b4 a3 b, Cadre b3 a4 b4, Cadre b5 a5 b3, Cadre b2 a6 b5, Cadre b7 a7 b2, Cadre b6 a8 b7, Cadre b8 a9 b6, Cadre a a10 b8) => a -> c
class (Cadre a car cdr, Cadre a' car' cdr') => CadreAssign a car cdr a' car' cdr' | a car' cdr' -> a'
setCadre :: CadreAssign a car cdr a' car' cdr' => (car -> car') -> (cdr -> cdr') -> a -> a'
setCar :: CadreAssign a car cdr' a' car' cdr' => (car -> car') -> a -> a'
setCdr :: CadreAssign a car' cdr a' car' cdr' => (cdr -> cdr') -> a -> a'
setCaar :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 a cdr'1 a'1 a' cdr'1) => (car -> car') -> a1 -> a'1
setCadr :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a') => (car -> car') -> a1 -> a'1
setCdar :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 a cdr'1 a'1 a' cdr'1) => (cdr -> cdr') -> a1 -> a'1
setCddr :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a') => (cdr -> cdr') -> a1 -> a'1
setCaaar :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 a cdr'1 a'1 a' cdr'1, CadreAssign a2 a1 cdr'2 a'2 a'1 cdr'2) => (car -> car') -> a2 -> a'2
setCaadr :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 a cdr'1 a'1 a' cdr'1, CadreAssign a2 car'1 a1 a'2 car'1 a'1) => (car -> car') -> a2 -> a'2
setCadar :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 a1 cdr'1 a'2 a'1 cdr'1) => (car -> car') -> a2 -> a'2
setCaddr :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 car'2 a1 a'2 car'2 a'1) => (car -> car') -> a2 -> a'2
setCdaar :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 a cdr'1 a'1 a' cdr'1, CadreAssign a2 a1 cdr'2 a'2 a'1 cdr'2) => (cdr -> cdr') -> a2 -> a'2
setCdadr :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 a cdr'1 a'1 a' cdr'1, CadreAssign a2 car'1 a1 a'2 car'1 a'1) => (cdr -> cdr') -> a2 -> a'2
setCddar :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 a1 cdr'1 a'2 a'1 cdr'1) => (cdr -> cdr') -> a2 -> a'2
setCdddr :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 car'2 a1 a'2 car'2 a'1) => (cdr -> cdr') -> a2 -> a'2
setCaaaar :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 a cdr'1 a'1 a' cdr'1, CadreAssign a2 a1 cdr'2 a'2 a'1 cdr'2, CadreAssign a3 a2 cdr'3 a'3 a'2 cdr'3) => (car -> car') -> a3 -> a'3
setCaaadr :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 a cdr'1 a'1 a' cdr'1, CadreAssign a2 a1 cdr'2 a'2 a'1 cdr'2, CadreAssign a3 car'1 a2 a'3 car'1 a'2) => (car -> car') -> a3 -> a'3
setCaadar :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 a cdr'1 a'1 a' cdr'1, CadreAssign a2 car'1 a1 a'2 car'1 a'1, CadreAssign a3 a2 cdr'2 a'3 a'2 cdr'2) => (car -> car') -> a3 -> a'3
setCaaddr :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 a cdr'1 a'1 a' cdr'1, CadreAssign a2 car'1 a1 a'2 car'1 a'1, CadreAssign a3 car'2 a2 a'3 car'2 a'2) => (car -> car') -> a3 -> a'3
setCadaar :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 a1 cdr'1 a'2 a'1 cdr'1, CadreAssign a3 a2 cdr'2 a'3 a'2 cdr'2) => (car -> car') -> a3 -> a'3
setCadadr :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 a1 cdr'1 a'2 a'1 cdr'1, CadreAssign a3 car'2 a2 a'3 car'2 a'2) => (car -> car') -> a3 -> a'3
setCaddar :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 car'2 a1 a'2 car'2 a'1, CadreAssign a3 a2 cdr'1 a'3 a'2 cdr'1) => (car -> car') -> a3 -> a'3
setCadddr :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 car'2 a1 a'2 car'2 a'1, CadreAssign a3 car'3 a2 a'3 car'3 a'2) => (car -> car') -> a3 -> a'3
setCdaaar :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 a cdr'1 a'1 a' cdr'1, CadreAssign a2 a1 cdr'2 a'2 a'1 cdr'2, CadreAssign a3 a2 cdr'3 a'3 a'2 cdr'3) => (cdr -> cdr') -> a3 -> a'3
setCdaadr :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 a cdr'1 a'1 a' cdr'1, CadreAssign a2 a1 cdr'2 a'2 a'1 cdr'2, CadreAssign a3 car'1 a2 a'3 car'1 a'2) => (cdr -> cdr') -> a3 -> a'3
setCdadar :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 a cdr'1 a'1 a' cdr'1, CadreAssign a2 car'1 a1 a'2 car'1 a'1, CadreAssign a3 a2 cdr'2 a'3 a'2 cdr'2) => (cdr -> cdr') -> a3 -> a'3
setCdaddr :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 a cdr'1 a'1 a' cdr'1, CadreAssign a2 car'1 a1 a'2 car'1 a'1, CadreAssign a3 car'2 a2 a'3 car'2 a'2) => (cdr -> cdr') -> a3 -> a'3
setCddaar :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 a1 cdr'1 a'2 a'1 cdr'1, CadreAssign a3 a2 cdr'2 a'3 a'2 cdr'2) => (cdr -> cdr') -> a3 -> a'3
setCddadr :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 a1 cdr'1 a'2 a'1 cdr'1, CadreAssign a3 car'2 a2 a'3 car'2 a'2) => (cdr -> cdr') -> a3 -> a'3
setCdddar :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 car'2 a1 a'2 car'2 a'1, CadreAssign a3 a2 cdr'1 a'3 a'2 cdr'1) => (cdr -> cdr') -> a3 -> a'3
setCddddr :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 car'2 a1 a'2 car'2 a'1, CadreAssign a3 car'3 a2 a'3 car'3 a'2) => (cdr -> cdr') -> a3 -> a'3
setCaddddr :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 car'2 a1 a'2 car'2 a'1, CadreAssign a3 car'3 a2 a'3 car'3 a'2, CadreAssign a4 car'4 a3 a'4 car'4 a'3) => (car -> car') -> a4 -> a'4
setCdddddr :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 car'2 a1 a'2 car'2 a'1, CadreAssign a3 car'3 a2 a'3 car'3 a'2, CadreAssign a4 car'4 a3 a'4 car'4 a'3) => (cdr -> cdr') -> a4 -> a'4
setCadddddr :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 car'2 a1 a'2 car'2 a'1, CadreAssign a3 car'3 a2 a'3 car'3 a'2, CadreAssign a4 car'4 a3 a'4 car'4 a'3, CadreAssign a5 car'5 a4 a'5 car'5 a'4) => (car -> car') -> a5 -> a'5
setCddddddr :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 car'2 a1 a'2 car'2 a'1, CadreAssign a3 car'3 a2 a'3 car'3 a'2, CadreAssign a4 car'4 a3 a'4 car'4 a'3, CadreAssign a5 car'5 a4 a'5 car'5 a'4) => (cdr -> cdr') -> a5 -> a'5
setCaddddddr :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 car'2 a1 a'2 car'2 a'1, CadreAssign a3 car'3 a2 a'3 car'3 a'2, CadreAssign a4 car'4 a3 a'4 car'4 a'3, CadreAssign a5 car'5 a4 a'5 car'5 a'4, CadreAssign a6 car'6 a5 a'6 car'6 a'5) => (car -> car') -> a6 -> a'6
setCdddddddr :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 car'2 a1 a'2 car'2 a'1, CadreAssign a3 car'3 a2 a'3 car'3 a'2, CadreAssign a4 car'4 a3 a'4 car'4 a'3, CadreAssign a5 car'5 a4 a'5 car'5 a'4, CadreAssign a6 car'6 a5 a'6 car'6 a'5) => (cdr -> cdr') -> a6 -> a'6
setCadddddddr :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 car'2 a1 a'2 car'2 a'1, CadreAssign a3 car'3 a2 a'3 car'3 a'2, CadreAssign a4 car'4 a3 a'4 car'4 a'3, CadreAssign a5 car'5 a4 a'5 car'5 a'4, CadreAssign a6 car'6 a5 a'6 car'6 a'5, CadreAssign a7 car'7 a6 a'7 car'7 a'6) => (car -> car') -> a7 -> a'7
setCddddddddr :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 car'2 a1 a'2 car'2 a'1, CadreAssign a3 car'3 a2 a'3 car'3 a'2, CadreAssign a4 car'4 a3 a'4 car'4 a'3, CadreAssign a5 car'5 a4 a'5 car'5 a'4, CadreAssign a6 car'6 a5 a'6 car'6 a'5, CadreAssign a7 car'7 a6 a'7 car'7 a'6) => (cdr -> cdr') -> a7 -> a'7
setCaddddddddr :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 car'2 a1 a'2 car'2 a'1, CadreAssign a3 car'3 a2 a'3 car'3 a'2, CadreAssign a4 car'4 a3 a'4 car'4 a'3, CadreAssign a5 car'5 a4 a'5 car'5 a'4, CadreAssign a6 car'6 a5 a'6 car'6 a'5, CadreAssign a7 car'7 a6 a'7 car'7 a'6, CadreAssign a8 car'8 a7 a'8 car'8 a'7) => (car -> car') -> a8 -> a'8
setCdddddddddr :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 car'2 a1 a'2 car'2 a'1, CadreAssign a3 car'3 a2 a'3 car'3 a'2, CadreAssign a4 car'4 a3 a'4 car'4 a'3, CadreAssign a5 car'5 a4 a'5 car'5 a'4, CadreAssign a6 car'6 a5 a'6 car'6 a'5, CadreAssign a7 car'7 a6 a'7 car'7 a'6, CadreAssign a8 car'8 a7 a'8 car'8 a'7) => (cdr -> cdr') -> a8 -> a'8
setCadddddddddr :: (CadreAssign a car cdr' a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 car'2 a1 a'2 car'2 a'1, CadreAssign a3 car'3 a2 a'3 car'3 a'2, CadreAssign a4 car'4 a3 a'4 car'4 a'3, CadreAssign a5 car'5 a4 a'5 car'5 a'4, CadreAssign a6 car'6 a5 a'6 car'6 a'5, CadreAssign a7 car'7 a6 a'7 car'7 a'6, CadreAssign a8 car'8 a7 a'8 car'8 a'7, CadreAssign a9 car'9 a8 a'9 car'9 a'8) => (car -> car') -> a9 -> a'9
setCddddddddddr :: (CadreAssign a car' cdr a' car' cdr', CadreAssign a1 car'1 a a'1 car'1 a', CadreAssign a2 car'2 a1 a'2 car'2 a'1, CadreAssign a3 car'3 a2 a'3 car'3 a'2, CadreAssign a4 car'4 a3 a'4 car'4 a'3, CadreAssign a5 car'5 a4 a'5 car'5 a'4, CadreAssign a6 car'6 a5 a'6 car'6 a'5, CadreAssign a7 car'7 a6 a'7 car'7 a'6, CadreAssign a8 car'8 a7 a'8 car'8 a'7, CadreAssign a9 car'9 a8 a'9 car'9 a'8) => (cdr -> cdr') -> a9 -> a'9

-- | Things that can be reshaped into cons pairs.
class PearShaped2 a a1 a2 | a -> a1 a2
reap2 :: PearShaped2 a a1 a2 => a -> (a1, a2)
pare2 :: PearShaped2 a a1 a2 => (a1, a2) -> a
repair2 :: (PearShaped2 a a1 a2, PearShaped2 c a1 a2) => a -> c
class PearShaped3 a a1 a2 a3 | a -> a1 a2 a3
reap3 :: PearShaped3 a a1 a2 a3 => a -> (a1, (a2, a3))
pare3 :: PearShaped3 a a1 a2 a3 => (a1, (a2, a3)) -> a
repair3 :: (PearShaped3 a a1 a2 a3, PearShaped3 c a1 a2 a3) => a -> c
class PearShaped4 a a1 a2 a3 a4 | a -> a1 a2 a3 a4
reap4 :: PearShaped4 a a1 a2 a3 a4 => a -> (a1, (a2, (a3, a4)))
pare4 :: PearShaped4 a a1 a2 a3 a4 => (a1, (a2, (a3, a4))) -> a
repair4 :: (PearShaped4 a a1 a2 a3 a4, PearShaped4 c a1 a2 a3 a4) => a -> c
class PearShaped5 a a1 a2 a3 a4 a5 | a -> a1 a2 a3 a4 a5
reap5 :: PearShaped5 a a1 a2 a3 a4 a5 => a -> (a1, (a2, (a3, (a4, a5))))
pare5 :: PearShaped5 a a1 a2 a3 a4 a5 => (a1, (a2, (a3, (a4, a5)))) -> a
repair5 :: (PearShaped5 a a1 a2 a3 a4 a5, PearShaped5 c a1 a2 a3 a4 a5) => a -> c
class PearShaped6 a a1 a2 a3 a4 a5 a6 | a -> a1 a2 a3 a4 a5 a6
reap6 :: PearShaped6 a a1 a2 a3 a4 a5 a6 => a -> (a1, (a2, (a3, (a4, (a5, a6)))))
pare6 :: PearShaped6 a a1 a2 a3 a4 a5 a6 => (a1, (a2, (a3, (a4, (a5, a6))))) -> a
repair6 :: (PearShaped6 a a1 a2 a3 a4 a5 a6, PearShaped6 c a1 a2 a3 a4 a5 a6) => a -> c
class PearShaped7 a a1 a2 a3 a4 a5 a6 a7 | a -> a1 a2 a3 a4 a5 a6 a7
reap7 :: PearShaped7 a a1 a2 a3 a4 a5 a6 a7 => a -> (a1, (a2, (a3, (a4, (a5, (a6, a7))))))
pare7 :: PearShaped7 a a1 a2 a3 a4 a5 a6 a7 => (a1, (a2, (a3, (a4, (a5, (a6, a7)))))) -> a
repair7 :: (PearShaped7 a a1 a2 a3 a4 a5 a6 a7, PearShaped7 c a1 a2 a3 a4 a5 a6 a7) => a -> c
class PearShaped8 a a1 a2 a3 a4 a5 a6 a7 a8 | a -> a1 a2 a3 a4 a5 a6 a7 a8
reap8 :: PearShaped8 a a1 a2 a3 a4 a5 a6 a7 a8 => a -> (a1, (a2, (a3, (a4, (a5, (a6, (a7, a8)))))))
pare8 :: PearShaped8 a a1 a2 a3 a4 a5 a6 a7 a8 => (a1, (a2, (a3, (a4, (a5, (a6, (a7, a8))))))) -> a
repair8 :: (PearShaped8 a a1 a2 a3 a4 a5 a6 a7 a8, PearShaped8 c a1 a2 a3 a4 a5 a6 a7 a8) => a -> c
class PearShaped9 a a1 a2 a3 a4 a5 a6 a7 a8 a9 | a -> a1 a2 a3 a4 a5 a6 a7 a8 a9
reap9 :: PearShaped9 a a1 a2 a3 a4 a5 a6 a7 a8 a9 => a -> (a1, (a2, (a3, (a4, (a5, (a6, (a7, (a8, a9))))))))
pare9 :: PearShaped9 a a1 a2 a3 a4 a5 a6 a7 a8 a9 => (a1, (a2, (a3, (a4, (a5, (a6, (a7, (a8, a9)))))))) -> a
repair9 :: (PearShaped9 a a1 a2 a3 a4 a5 a6 a7 a8 a9, PearShaped9 c a1 a2 a3 a4 a5 a6 a7 a8 a9) => a -> c
class PearShaped10 a a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 | a -> a1 a2 a3 a4 a5 a6 a7 a8 a9 a10
reap10 :: PearShaped10 a a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 => a -> (a1, (a2, (a3, (a4, (a5, (a6, (a7, (a8, (a9, a10)))))))))
pare10 :: PearShaped10 a a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 => (a1, (a2, (a3, (a4, (a5, (a6, (a7, (a8, (a9, a10))))))))) -> a
repair10 :: (PearShaped10 a a1 a2 a3 a4 a5 a6 a7 a8 a9 a10, PearShaped10 c a1 a2 a3 a4 a5 a6 a7 a8 a9 a10) => a -> c
instance PearShaped10 [a] a a a a a a a a a a
instance PearShaped10 (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) a1 a2 a3 a4 a5 a6 a7 a8 a9 a10
instance PearShaped9 a a2 a3 a4 a5 a6 a7 a8 a9 a10 => PearShaped10 (a1, a) a1 a2 a3 a4 a5 a6 a7 a8 a9 a10
instance PearShaped8 a a3 a4 a5 a6 a7 a8 a9 a10 => PearShaped10 (a1, a2, a) a1 a2 a3 a4 a5 a6 a7 a8 a9 a10
instance PearShaped7 a a4 a5 a6 a7 a8 a9 a10 => PearShaped10 (a1, a2, a3, a) a1 a2 a3 a4 a5 a6 a7 a8 a9 a10
instance PearShaped6 a a5 a6 a7 a8 a9 a10 => PearShaped10 (a1, a2, a3, a4, a) a1 a2 a3 a4 a5 a6 a7 a8 a9 a10
instance PearShaped5 a a6 a7 a8 a9 a10 => PearShaped10 (a1, a2, a3, a4, a5, a) a1 a2 a3 a4 a5 a6 a7 a8 a9 a10
instance PearShaped4 a a7 a8 a9 a10 => PearShaped10 (a1, a2, a3, a4, a5, a6, a) a1 a2 a3 a4 a5 a6 a7 a8 a9 a10
instance PearShaped3 a a8 a9 a10 => PearShaped10 (a1, a2, a3, a4, a5, a6, a7, a) a1 a2 a3 a4 a5 a6 a7 a8 a9 a10
instance PearShaped2 a a9 a10 => PearShaped10 (a1, a2, a3, a4, a5, a6, a7, a8, a) a1 a2 a3 a4 a5 a6 a7 a8 a9 a10
instance PearShaped9 [a] a a a a a a a a a
instance PearShaped9 (a1, a2, a3, a4, a5, a6, a7, a8, a9) a1 a2 a3 a4 a5 a6 a7 a8 a9
instance PearShaped8 a a2 a3 a4 a5 a6 a7 a8 a9 => PearShaped9 (a1, a) a1 a2 a3 a4 a5 a6 a7 a8 a9
instance PearShaped7 a a3 a4 a5 a6 a7 a8 a9 => PearShaped9 (a1, a2, a) a1 a2 a3 a4 a5 a6 a7 a8 a9
instance PearShaped6 a a4 a5 a6 a7 a8 a9 => PearShaped9 (a1, a2, a3, a) a1 a2 a3 a4 a5 a6 a7 a8 a9
instance PearShaped5 a a5 a6 a7 a8 a9 => PearShaped9 (a1, a2, a3, a4, a) a1 a2 a3 a4 a5 a6 a7 a8 a9
instance PearShaped4 a a6 a7 a8 a9 => PearShaped9 (a1, a2, a3, a4, a5, a) a1 a2 a3 a4 a5 a6 a7 a8 a9
instance PearShaped3 a a7 a8 a9 => PearShaped9 (a1, a2, a3, a4, a5, a6, a) a1 a2 a3 a4 a5 a6 a7 a8 a9
instance PearShaped2 a a8 a9 => PearShaped9 (a1, a2, a3, a4, a5, a6, a7, a) a1 a2 a3 a4 a5 a6 a7 a8 a9
instance PearShaped8 [a] a a a a a a a a
instance PearShaped8 (a1, a2, a3, a4, a5, a6, a7, a8) a1 a2 a3 a4 a5 a6 a7 a8
instance PearShaped7 a a2 a3 a4 a5 a6 a7 a8 => PearShaped8 (a1, a) a1 a2 a3 a4 a5 a6 a7 a8
instance PearShaped6 a a3 a4 a5 a6 a7 a8 => PearShaped8 (a1, a2, a) a1 a2 a3 a4 a5 a6 a7 a8
instance PearShaped5 a a4 a5 a6 a7 a8 => PearShaped8 (a1, a2, a3, a) a1 a2 a3 a4 a5 a6 a7 a8
instance PearShaped4 a a5 a6 a7 a8 => PearShaped8 (a1, a2, a3, a4, a) a1 a2 a3 a4 a5 a6 a7 a8
instance PearShaped3 a a6 a7 a8 => PearShaped8 (a1, a2, a3, a4, a5, a) a1 a2 a3 a4 a5 a6 a7 a8
instance PearShaped2 a a7 a8 => PearShaped8 (a1, a2, a3, a4, a5, a6, a) a1 a2 a3 a4 a5 a6 a7 a8
instance PearShaped7 [a] a a a a a a a
instance PearShaped7 (a1, a2, a3, a4, a5, a6, a7) a1 a2 a3 a4 a5 a6 a7
instance PearShaped6 a a2 a3 a4 a5 a6 a7 => PearShaped7 (a1, a) a1 a2 a3 a4 a5 a6 a7
instance PearShaped5 a a3 a4 a5 a6 a7 => PearShaped7 (a1, a2, a) a1 a2 a3 a4 a5 a6 a7
instance PearShaped4 a a4 a5 a6 a7 => PearShaped7 (a1, a2, a3, a) a1 a2 a3 a4 a5 a6 a7
instance PearShaped3 a a5 a6 a7 => PearShaped7 (a1, a2, a3, a4, a) a1 a2 a3 a4 a5 a6 a7
instance PearShaped2 a a6 a7 => PearShaped7 (a1, a2, a3, a4, a5, a) a1 a2 a3 a4 a5 a6 a7
instance PearShaped6 [a] a a a a a a
instance PearShaped6 (a1, a2, a3, a4, a5, a6) a1 a2 a3 a4 a5 a6
instance PearShaped5 a a2 a3 a4 a5 a6 => PearShaped6 (a1, a) a1 a2 a3 a4 a5 a6
instance PearShaped4 a a3 a4 a5 a6 => PearShaped6 (a1, a2, a) a1 a2 a3 a4 a5 a6
instance PearShaped3 a a4 a5 a6 => PearShaped6 (a1, a2, a3, a) a1 a2 a3 a4 a5 a6
instance PearShaped2 a a5 a6 => PearShaped6 (a1, a2, a3, a4, a) a1 a2 a3 a4 a5 a6
instance PearShaped5 [a] a a a a a
instance PearShaped5 (a1, a2, a3, a4, a5) a1 a2 a3 a4 a5
instance PearShaped4 a a2 a3 a4 a5 => PearShaped5 (a1, a) a1 a2 a3 a4 a5
instance PearShaped3 a a3 a4 a5 => PearShaped5 (a1, a2, a) a1 a2 a3 a4 a5
instance PearShaped2 a a4 a5 => PearShaped5 (a1, a2, a3, a) a1 a2 a3 a4 a5
instance PearShaped4 [a] a a a a
instance PearShaped4 (a1, a2, a3, a4) a1 a2 a3 a4
instance PearShaped3 a a2 a3 a4 => PearShaped4 (a1, a) a1 a2 a3 a4
instance PearShaped2 a a3 a4 => PearShaped4 (a1, a2, a) a1 a2 a3 a4
instance PearShaped3 [a] a a a
instance PearShaped3 (a1, a2, a3) a1 a2 a3
instance PearShaped2 a a2 a3 => PearShaped3 (a1, a) a1 a2 a3
instance PearShaped2 [a] a a
instance PearShaped2 (a1, a2) a1 a2
instance CadreAssign [a] a [a] [a] a [a]
instance CadreAssign (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) a1 (a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) (b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16) b1 (b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16)
instance CadreAssign (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) a1 (a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) (b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15) b1 (b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15)
instance CadreAssign (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) a1 (a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) (b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14) b1 (b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14)
instance CadreAssign (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) a1 (a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) (b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13) b1 (b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13)
instance CadreAssign (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) a1 (a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) (b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12) b1 (b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12)
instance CadreAssign (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) a1 (a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) (b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11) b1 (b2, b3, b4, b5, b6, b7, b8, b9, b10, b11)
instance CadreAssign (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) a1 (a2, a3, a4, a5, a6, a7, a8, a9, a10) (b1, b2, b3, b4, b5, b6, b7, b8, b9, b10) b1 (b2, b3, b4, b5, b6, b7, b8, b9, b10)
instance CadreAssign (a1, a2, a3, a4, a5, a6, a7, a8, a9) a1 (a2, a3, a4, a5, a6, a7, a8, a9) (b1, b2, b3, b4, b5, b6, b7, b8, b9) b1 (b2, b3, b4, b5, b6, b7, b8, b9)
instance CadreAssign (a1, a2, a3, a4, a5, a6, a7, a8) a1 (a2, a3, a4, a5, a6, a7, a8) (b1, b2, b3, b4, b5, b6, b7, b8) b1 (b2, b3, b4, b5, b6, b7, b8)
instance CadreAssign (a1, a2, a3, a4, a5, a6, a7) a1 (a2, a3, a4, a5, a6, a7) (b1, b2, b3, b4, b5, b6, b7) b1 (b2, b3, b4, b5, b6, b7)
instance CadreAssign (a1, a2, a3, a4, a5, a6) a1 (a2, a3, a4, a5, a6) (b1, b2, b3, b4, b5, b6) b1 (b2, b3, b4, b5, b6)
instance CadreAssign (a1, a2, a3, a4, a5) a1 (a2, a3, a4, a5) (b1, b2, b3, b4, b5) b1 (b2, b3, b4, b5)
instance CadreAssign (a1, a2, a3, a4) a1 (a2, a3, a4) (b1, b2, b3, b4) b1 (b2, b3, b4)
instance CadreAssign (a1, a2, a3) a1 (a2, a3) (b1, b2, b3) b1 (b2, b3)
instance CadreAssign (a1, a2) a1 a2 (b1, b2) b1 b2
instance Cadre [a] a [a]
instance Cadre (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) a1 (a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16)
instance Cadre (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) a1 (a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15)
instance Cadre (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) a1 (a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14)
instance Cadre (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) a1 (a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
instance Cadre (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) a1 (a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
instance Cadre (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) a1 (a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)
instance Cadre (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) a1 (a2, a3, a4, a5, a6, a7, a8, a9, a10)
instance Cadre (a1, a2, a3, a4, a5, a6, a7, a8, a9) a1 (a2, a3, a4, a5, a6, a7, a8, a9)
instance Cadre (a1, a2, a3, a4, a5, a6, a7, a8) a1 (a2, a3, a4, a5, a6, a7, a8)
instance Cadre (a1, a2, a3, a4, a5, a6, a7) a1 (a2, a3, a4, a5, a6, a7)
instance Cadre (a1, a2, a3, a4, a5, a6) a1 (a2, a3, a4, a5, a6)
instance Cadre (a1, a2, a3, a4, a5) a1 (a2, a3, a4, a5)
instance Cadre (a1, a2, a3, a4) a1 (a2, a3, a4)
instance Cadre (a1, a2, a3) a1 (a2, a3)
instance Cadre (a1, a2) a1 a2
