-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Geometry types in Haskell
--   
--   Several basic geometry types and functions on these types.
@package hgeometry
@version 0.1.1.1

module Data.Geometry.Point
data Point2' a
Point2 :: (a, a) -> Point2' a
(|+|) :: Num a => Point2' a -> Point2' a -> Point2' a
(|-|) :: Num a => Point2' a -> Point2' a -> Point2' a

-- | scalar multiplication
(|*|) :: Num a => a -> Point2' a -> Point2' a

-- | dot product
(|@|) :: Num a => Point2' a -> Point2' a -> a
getX :: Point2' a -> a
getY :: Point2' a -> a

-- | euclidean distance between p and q
dist :: Floating a => Point2' a -> Point2' a -> a

-- | Squared euclidean distance between p and q
l22dist :: Num a => Point2' a -> Point2' a -> a
instance Show a => Show (Point2' a)
instance Read a => Read (Point2' a)
instance Eq a => Eq (Point2' a)
instance Ord a => Ord (Point2' a)
instance Functor Point2'

module Data.Geometry.Geometry

-- | Point based geometries
--   
--   A class that defines a point2 functor. This defines that every
--   operation that we can do on a point we can also do on instances of
--   this class. i.e. by applying the operation on the underlying points.
class IsPoint2Functor g
p2fmap :: IsPoint2Functor g => (Point2' a -> Point2' b) -> g a -> g b

-- | Class that indicates that something can be transformable using an
--   affine transformation
class IsTransformable g
transformWith :: (IsTransformable g, Num a) => Matrix3 a -> g a -> g a
class HasPoints g
points :: HasPoints g => g a -> [Point2' a]

-- | Basic linear algebra to support affine transformations in 2D
--   
--   Type to represent a matrix, form is: [ [ a11, a12, a13 ] [ a21, a22,
--   a23 ] [ a31, a32, a33 ] ]
newtype Vec3 a
Vec3 :: (a, a, a) -> Vec3 a
newtype Matrix3 a
Matrix3 :: (Vec3 (Vec3 a)) -> Matrix3 a
identityMatrix3 :: Num a => Matrix3 a

-- | Given a 3x3 matrix as a list of lists, convert it to a Matrix3
matrix3FromLists :: [[a]] -> Matrix3 a

-- | given a single list of 9 elements, construct a Matrix3
matrix3FromList :: [a] -> Matrix3 a

-- | Gather the elements of the matrix in one long list (in row by row
--   order)
matrix3ToList :: Matrix3 a -> [a]
matrix3ToLists :: Matrix3 a -> [[a]]
instance [overlap ok] Show a => Show (Vec3 a)
instance [overlap ok] Eq a => Eq (Vec3 a)
instance [overlap ok] Show a => Show (Matrix3 a)
instance [overlap ok] Eq a => Eq (Matrix3 a)
instance [overlap ok] IsPoint2Functor g => IsTransformable g
instance [overlap ok] IsTransformable Point2'
instance [overlap ok] Functor Matrix3
instance [overlap ok] Functor Vec3
instance [overlap ok] HasPoints Point2'

module Data.Geometry.BoundingBox

-- | Bounding boxes
--   
--   Note that a bounding box is always axis parallel, so rotating may have
--   not | the expected effect
data BoundingBox2' a
BoundingBox2 :: Point2' a -> Point2' a -> BoundingBox2' a
lowerLeft :: BoundingBox2' a -> Point2' a
upperRight :: BoundingBox2' a -> Point2' a

-- | A class of objects for which we can compute a boundingbox
class IsBoxable g where bbFromList = mergeBoxes . map boundingBox
boundingBox :: (IsBoxable g, Ord a) => g a -> BoundingBox2' a
bbFromList :: (IsBoxable g, Ord a) => [g a] -> BoundingBox2' a

-- | get the bounding box of a list of things
mergeBoxes :: Ord a => [BoundingBox2' a] -> BoundingBox2' a
bbFromPoints :: Ord a => [Point2' a] -> BoundingBox2' a
bbLeft :: BoundingBox2' a -> a
bbRight :: BoundingBox2' a -> a
bbTop :: BoundingBox2' a -> a
bbBottom :: BoundingBox2' a -> a
width :: Num a => BoundingBox2' a -> a
height :: Num a => BoundingBox2' a -> a
instance Show a => Show (BoundingBox2' a)
instance Eq a => Eq (BoundingBox2' a)
instance Read a => Read (BoundingBox2' a)
instance HasPoints p => IsBoxable p
instance HasPoints BoundingBox2'
instance IsPoint2Functor BoundingBox2'

module Data.Geometry.Line

-- | A simple line segment in 2D consisint of a start and an end-point
data LineSegment2' a
LineSegment2 :: Point2' a -> Point2' a -> LineSegment2' a
startPoint :: LineSegment2' a -> Point2' a
endPoint :: LineSegment2' a -> Point2' a

-- | An infinite line
newtype Line2' a
Line2 :: (LineSegment2' a) -> Line2' a

-- | Polylines
newtype Polyline2' a
Polyline2 :: [LineSegment2' a] -> Polyline2' a

-- | Constructing polylines
polyLine :: [Point2' a] -> Polyline2' a

-- | functions on Linesegments and Polylines
isSimpleLine :: Polyline2' a -> Bool
toSimpleLine :: Polyline2' a -> LineSegment2' a
toSimpleLineOption :: Polyline2' a -> Maybe (LineSegment2' a)

-- | Linear interpolation / points on line segments etc.
--   
--   simple linear interpolation, assuming t in [0,1]
linear :: Num a => a -> a -> a -> a
inRange :: Ord a => a -> (a, a) -> Bool
onLineSegment :: (Ord a, Fractional a) => Point2' a -> LineSegment2' a -> Bool
class HasLength c where type family PM c
length :: HasLength c => c -> PM c
class LineLike c
pointAt :: (LineLike c, Num a) => a -> c a -> Point2' a
instance Eq a => Eq (LineSegment2' a)
instance Ord a => Ord (LineSegment2' a)
instance Show a => Show (LineSegment2' a)
instance Read a => Read (LineSegment2' a)
instance Eq a => Eq (Line2' a)
instance Ord a => Ord (Line2' a)
instance Show a => Show (Line2' a)
instance Read a => Read (Line2' a)
instance Eq a => Eq (Polyline2' a)
instance Show a => Show (Polyline2' a)
instance Read a => Read (Polyline2' a)
instance LineLike LineSegment2'
instance Floating a => HasLength (Polyline2' a)
instance Floating a => HasLength (LineSegment2' a)
instance HasPoints Polyline2'
instance IsPoint2Functor Polyline2'
instance HasPoints Line2'
instance IsPoint2Functor Line2'
instance Functor Line2'
instance HasPoints LineSegment2'
instance IsPoint2Functor LineSegment2'
instance Functor LineSegment2'

module Data.Geometry.Polygon

-- | Polygons
--   
--   Class that defines what a polygon is. Note that it is assumed that the
--   first and the last point are *NOT* the same point.
class (HasPoints p, IsTransformable p) => IsPolygon p where vertices = points edges p = let pts = points p in zip pts (tail pts ++ [head pts])
vertices :: IsPolygon p => p a -> [Point2' a]
edges :: IsPolygon p => p a -> [(Point2' a, Point2' a)]
isSimple :: IsPolygon p => p a -> Bool
containsHoles :: IsPolygon p => p a -> Bool

-- | Simple polygons, i.e. polygons consisting of a sequence of points
--   (vertices) | such that the edges do not intersect. Simple polygons do
--   not contain holes
data SimplePolygon' a
SimplePolygon :: [Point2' a] -> SimplePolygon' a

-- | A multipolygon consists of several simple polygons
data MultiPolygon' a
MultiPolygon :: [SimplePolygon' a] -> MultiPolygon' a
instance Show a => Show (SimplePolygon' a)
instance Eq a => Eq (SimplePolygon' a)
instance Show a => Show (MultiPolygon' a)
instance Eq a => Eq (MultiPolygon' a)
instance IsPolygon BoundingBox2'
instance IsPoint2Functor MultiPolygon'
instance IsPolygon MultiPolygon'
instance HasPoints MultiPolygon'
instance IsPoint2Functor SimplePolygon'
instance IsPolygon SimplePolygon'
instance HasPoints SimplePolygon'

module Data.Geometry.Circle

-- | A circle in the plane
data Circle2' a
Circle2 :: (Point2' a) -> a -> Circle2' a

-- | A disc in the plane (i.e. a circle inclusiding its contents)
newtype Disc2' a
Disc2 :: Circle2' a -> Disc2' a
border :: Disc2' a -> Circle2' a

-- | functions on circles
--   
--   Class expressing functions that circlelike objects all have. Like a
--   center and a radius. Minimal implementation is either getCircle or
--   center and radius
class IsCircleLike t where getCircle x = Circle2 (center x) (radius x) center = center . getCircle radius = radius . getCircle distance p = distance p . getCircle distanceToCenter p = distanceToCenter p . getCircle
getCircle :: IsCircleLike t => t a -> Circle2' a
center :: IsCircleLike t => t a -> Point2' a
radius :: IsCircleLike t => t a -> a
distance :: (IsCircleLike t, Floating a) => Point2' a -> t a -> a
distanceToCenter :: (IsCircleLike t, Floating a) => Point2' a -> t a -> a

-- | whether or not p lies in OR on the circle c
inCircle :: (Ord a, Num a) => Point2' a -> Circle2' a -> Bool

-- | whether or not p lies strictly inside the circle c
insideCircle :: (Num a, Ord a) => Point2' a -> Circle2' a -> Bool

-- | whether or not p lies on the circle
onCircle :: (Eq a, Num a) => Point2' a -> Circle2' a -> Bool

-- | whether or not a point lies in a disc: this includes its border
inDisc :: (Num a, Ord a) => Point2' a -> Disc2' a -> Bool

-- | whether or not a point lies strictly inside a disc.
insideDisc :: (Num a, Ord a) => Point2' a -> Disc2' a -> Bool
instance Eq a => Eq (Circle2' a)
instance Ord a => Ord (Circle2' a)
instance Show a => Show (Circle2' a)
instance Read a => Read (Circle2' a)
instance Show a => Show (Disc2' a)
instance Eq a => Eq (Disc2' a)
instance Ord a => Ord (Disc2' a)
instance Read a => Read (Disc2' a)
instance IsCircleLike Disc2'
instance IsCircleLike Circle2'
instance HasPoints Disc2'
instance HasPoints Circle2'

module Data.Geometry.SetOperations

-- | A class to represent that a pair of geometry objects (both
--   parameterized over a) can be intersected.
class AreIntersectable g h a
intersectionPoints :: AreIntersectable g h a => g a -> h a -> [Point2' a]
instance (Ord a, Floating a) => AreIntersectable Circle2' Line2' a
instance (Ord a, Floating a) => AreIntersectable Circle2' Polyline2' a
instance (Ord a, Floating a) => AreIntersectable Circle2' LineSegment2' a
