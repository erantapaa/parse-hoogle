-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | CUI FTP client like 'ftp', 'ncftp'
--   
--   Just CUI FTP client.
--   
--   If no arguments, then it ask server address, user name and password.
--   
--   If only argument server address are given, then it try login as
--   anonymous user.
--   
--   If argument server address and user name, then it ask password.
--   
--   And password can give by '-p [passwd]' from command line.
--   
--   Once login, you can run command <a>ls</a>, <a>cd</a>, <a>cat</a>,
--   <a>put</a>, <a>get</a>, <a>edit</a>, <a>show</a> and so on.
--   
--   And you can put or get immediately by doing following.
--   
--   <pre>
--   yjftp put filepath srvr.address/directorypath [user_name] [-p password]
--   yjftp get srvr.address/filepath [user_name] [-p password]
--   </pre>
@package yjftp
@version 0.3.6.2

module Network.Yjftp
runYjftp :: CommandList -> IO ()
type CommandList = [(String, Command)]
defaultCommandList :: CommandList
getAction :: Command -> Action
getHelp :: Command -> String
getComp :: Command -> FTPConnection -> String -> IO [String]
quitFTP :: Action
systemFTP :: Action
pwdFTP :: Action
listFTP :: Action
directoryFTP :: Action
changeDirectoryLocal :: Action
changeDirectoryFTP :: Action
getFileFTP :: Action
putFileFTP :: Action
showFileFTP :: Action
removeFileFTP :: Action
makeDirectoryFTP :: Action
removeDirectoryFTP :: Action
moveFileFTP :: Action
copyFileFTP :: Action
editBy :: (String -> IO String) -> Action
readBy :: (String -> IO String) -> Action
const2 :: a -> b -> c -> a
compRemoteFile :: FTPConnection -> String -> IO [String]
compLs :: FTPConnection -> String -> IO [String]
compFilename :: String -> IO [String]
instance Show CLAction
