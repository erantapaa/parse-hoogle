-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A tested, minimal wrapper around GitHub's API.
--   
@package octohat
@version 0.1.4.2

module Network.Octohat.Types

-- | Represents a user in GitHub. Contains no more than login and user ID
data Member
Member :: Text -> Integer -> Member
memberLogin :: Member -> Text
memberId :: Member -> Integer

-- | Represents a GitHub user with its public keys and fingerprints. A
--   GitHub user might or might not have any public keys
data MemberWithKey
MemberWithKey :: Member -> [PublicKey] -> [PublicKeyFingerprint] -> MemberWithKey
member :: MemberWithKey -> Member
memberKey :: MemberWithKey -> [PublicKey]
memberKeyFingerprint :: MemberWithKey -> [PublicKeyFingerprint]

-- | Represents a team in GitHub. Contains the team's ID, the team's name
--   and an optional description
data Team
Team :: Integer -> Text -> Maybe Text -> TeamPermission -> Team
teamId :: Team -> Integer
teamName :: Team -> Text
teamDescription :: Team -> Maybe Text
teamPermission :: Team -> TeamPermission

-- | Represents the different permissions that a team can have in an
--   organisation.
data TeamPermission

-- | Default team of owners.
OwnerAccess :: TeamPermission

-- | This team will be able to view and clone its repositories.
PullAccess :: TeamPermission

-- | This team will be able to read its repositories, as well as push to
--   them.
PushAccess :: TeamPermission

-- | This team will be able to push/pull to its repositories, as well as
--   add other collaborators to them.
AdminAccess :: TeamPermission

-- | Represents a repo in GitHub. Contains the Name, Description, and
--   Private status
data Repo
Repo :: Text -> Maybe Text -> Bool -> Repo
repoName :: Repo -> Text
repoDescription :: Repo -> Maybe Text
repoPrivate :: Repo -> Bool

-- | Represents an organisation in GitHub. Only has name and description
data Organization
Organization :: Text -> Maybe Text -> Organization
orgLogin :: Organization -> Text
orgDescription :: Organization -> Maybe Text

-- | GitHub's OAuth 2.0 bearer token. This is simply added in an
--   Authorization header
newtype BearerToken
BearerToken :: Text -> BearerToken
unBearerToken :: BearerToken -> Text

-- | OrganizationName is added in order to have type safety in functions
--   where the Organization name and the Team name are both strings and may
--   be confused
newtype OrganizationName
OrganizationName :: Text -> OrganizationName
unOrganizationName :: OrganizationName -> Text

-- | TeamName is added in order to have type safety in functions where the
--   Team name and the Organization name are both strings and may be
--   confused
newtype TeamName
TeamName :: Text -> TeamName
unTeamName :: TeamName -> Text

-- | When adding a user to a team GitHub will add it immediately if the
--   user already belongs to the to the organization the team is in.
--   Otherwise it will send an email for the user to accept the request to
--   join the team. Functions related adding or removing teams will return
--   either Active or Pending correspondingly.
data StatusInTeam
Active :: StatusInTeam
Pending :: StatusInTeam

-- | Some Wreq functions expect a body, but often GitHub's API will request
--   no body. The PUT verb and its implementation in Wreq is an example of
--   this.
data EmptyBody
EmptyBody :: EmptyBody

-- | Sum type to represent the success or failure of deletion of a resource
--   within GitHub's API
data DidDelete
Deleted :: DidDelete
NotDeleted :: DidDelete

-- | Represents a PublicKey within GitHub. It includes its ID and the
--   public key encoded as base 64
data PublicKey
PublicKey :: Integer -> Text -> PublicKey
publicKeyId :: PublicKey -> Integer
publicKey :: PublicKey -> Text

-- | Represents a Fingerprint. The <a>fingerprintId</a> field should match
--   the fingerprint's public key ID within GitHub
data PublicKeyFingerprint
PublicKeyFingerprint :: Integer -> Text -> PublicKeyFingerprint
fingerprintId :: PublicKeyFingerprint -> Integer
publicKeyFingerprint :: PublicKeyFingerprint -> Text

-- | Represents a request to create a new team within an organization. The
--   rest of the paramaters are passed in the URL. Refer to
--   <a>https://developer.github.com/v3/orgs/teams/#create-team</a>
data TeamCreateRequest
TeamCreateRequest :: Text -> Text -> TeamPermission -> TeamCreateRequest
newTeamName :: TeamCreateRequest -> Text
newTeamDescription :: TeamCreateRequest -> Text
newTeamPermission :: TeamCreateRequest -> TeamPermission

-- | Error codes GitHub might return when attempting to use an API endpoint
data GitHubReturnStatus

-- | GitHub could not parse the JSON document sent
InvalidJSON :: GitHubReturnStatus

-- | Validation failed, an example of this error is trying to create teams
--   with the same name within one organization
ValidationFailed :: GitHubReturnStatus

-- | In case GitHub returns 500 Internal Server Error to some request
InternalError :: GitHubReturnStatus

-- | When a resource has not been found. It does not imply the resource
--   does not exist
NotFound :: GitHubReturnStatus

-- | Usually returned after GitHub replies with 403 Forbidden. The user
--   might not have permission to access/modify that resource
NotAllowed :: GitHubReturnStatus

-- | This should never be returned
AllOk :: GitHubReturnStatus

-- | Accesing this resource requires authentication
RequiresAuthentication :: GitHubReturnStatus

-- | This library has failed to fulfill its purpose and could not handle
--   GitHub's response
UnexpectedJSON :: String -> GitHubReturnStatus
data DidAddKey
KeyAdded :: DidAddKey
KeyNotAdded :: DidAddKey
data AddPublicKeyRequest
AddPublicKeyRequest :: Text -> Text -> AddPublicKeyRequest
addPublicKeyRequestKey :: AddPublicKeyRequest -> Text
addPublicKeyRequestTitle :: AddPublicKeyRequest -> Text

-- | Links are used in the Pagination object
data Links
Links :: Maybe Link -> Maybe Link -> Maybe Link -> Maybe Link -> Links
linkNext :: Links -> Maybe Link
linkLast :: Links -> Maybe Link
linkFirst :: Links -> Maybe Link
linkPrev :: Links -> Maybe Link

-- | Pagination options that can be set, including the page number, and the
--   per_page
data Pagination
Pagination :: Int -> Int -> Links -> Bool -> Pagination
perPage :: Pagination -> Int
page :: Pagination -> Int
links :: Pagination -> Links
recurse :: Pagination -> Bool

-- | Executes a computation built within the GitHub monad returning an
--   Either within the IO data type. Reads an API token from an environment
--   variable named GITHUB_TOKEN
runGitHub :: GitHub a -> IO (Either GitHubReturnStatus a)

-- | Executes a computation built within the GitHub monad returning an
--   Either within the IO data type using the provided token
runGitHub' :: GitHub a -> BearerToken -> IO (Either GitHubReturnStatus a)

-- | The monad transformer where all operations run. Supports initial
--   configuration through a Reader monad and the possibility of failure
--   through Either
type GitHub = EitherT GitHubReturnStatus (ReaderT BearerToken (StateT Pagination IO))
instance Show GitHubReturnStatus
instance Eq GitHubReturnStatus
instance Show BearerToken
instance Show OrganizationName
instance Show TeamName
instance Show Links
instance Show Pagination
instance Postable AddPublicKeyRequest
instance Postable TeamCreateRequest
instance Putable EmptyBody
instance FromJSON AddPublicKeyRequest
instance ToJSON AddPublicKeyRequest
instance FromJSON TeamCreateRequest
instance ToJSON TeamCreateRequest
instance FromJSON Organization
instance ToJSON Organization
instance FromJSON Repo
instance ToJSON Repo
instance FromJSON Team
instance ToJSON Team
instance FromJSON Member
instance ToJSON Member
instance Show Member
instance Eq Member
instance Show TeamPermission
instance Eq TeamPermission
instance Show Team
instance Eq Team
instance Show TeamCreateRequest
instance Eq TeamCreateRequest
instance Show Organization
instance Eq Organization
instance Show Repo
instance Eq Repo
instance Show PublicKey
instance Eq PublicKey
instance Show PublicKeyFingerprint
instance Eq PublicKeyFingerprint
instance Show MemberWithKey
instance Eq MemberWithKey
instance Show EmptyBody
instance Eq EmptyBody
instance Show StatusInTeam
instance Eq StatusInTeam
instance Show DidDelete
instance Eq DidDelete
instance ToJSON TeamPermission
instance FromJSON TeamPermission
instance FromJSON StatusInTeam
instance FromJSON PublicKey


-- | Execute the result of these functions using <a>runGitHub</a> or
--   <a>runGitHub'</a>
module Network.Octohat.Members

-- | Returns a list of members of an organization with the given name.
membersForOrganization :: OrganizationName -> GitHub [Member]

-- | Returns a list of teams for the organization with the given name
teamsForOrganization :: OrganizationName -> GitHub [Team]

-- | Returns a list of members of a team with the given team ID.
membersForTeam :: Integer -> GitHub [Member]

-- | Returns a list of repos of a team with the given team ID.
reposForTeam :: Integer -> GitHub [Repo]

-- | Adds a member to a team, might invite or add the member. Refer to
--   <a>StatusInTeam</a>
addMemberToTeam :: Text -> Integer -> GitHub StatusInTeam

-- | Adds a repo to a team, might invite or add the member. Refer to
--   <a>StatusInTeam</a>
addRepoToTeam :: OrganizationName -> Text -> Integer -> GitHub StatusInTeam

-- | Deletes a member with the given name from a team with the given ID.
--   Might or might not delete
deleteMemberFromTeam :: Text -> Integer -> GitHub DidDelete

-- | Deletes a team from an organization using its team ID.
deleteTeamFromOrganization :: Integer -> GitHub DidDelete

-- | Returns the public keys of the user with the given name
publicKeysForUser :: Text -> GitHub [PublicKey]

-- | Takes a new team name, the description of a team and the organization
--   where to create the team and creates a new team. Regular GitHub
--   authorization/authentication applies.
addTeamToOrganization :: TeamName -> Text -> TeamPermission -> OrganizationName -> GitHub Team

-- | Returns a list of all organizations for the user
organizations :: GitHub [Organization]

-- | Finds a user ID given their username
userForUsername :: Text -> GitHub Member

-- | Finds a repo ID given their reponame
repoForReponame :: Text -> Text -> GitHub Repo

-- | Add a key for the currently authenticated user
addPublicKey :: Text -> Text -> GitHub PublicKey
resetPage :: GitHub ()

module Network.Octohat.Keys

-- | Computes a fingerprint from its Base 64 encoded representation.
--   Assumes leading <tt>ssh-rsa </tt> (mind the space) prefix and no
--   user@hostname suffix
fingerprintFor :: PublicKey -> PublicKeyFingerprint


-- | Convenience functions for some common operations with teams. Execute
--   the result of these functions using <a>runGitHub</a> or
--   <a>runGitHub'</a>
module Network.Octohat

-- | Adds a user with <tt>nameOfUser</tt> to the team named
--   <tt>nameOfTeam</tt> within the organization named <tt>nameOfOrg</tt>
addUserToTeam :: Text -> OrganizationName -> TeamName -> GitHub StatusInTeam

-- | Gets all the members of the organization
membersOfTeamInOrganization :: OrganizationName -> TeamName -> GitHub [Member]

-- | Retrieves a list of members in a given team within an organization
--   together with their public keys
keysOfTeamInOrganization :: OrganizationName -> TeamName -> GitHub [MemberWithKey]
teamForTeamNameInOrg :: OrganizationName -> TeamName -> GitHub Team
