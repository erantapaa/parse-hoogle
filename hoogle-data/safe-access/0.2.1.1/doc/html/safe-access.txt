-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A simple environment to control access to data
--   
@package safe-access
@version 0.2.1.1

module Control.SafeAccess

-- | Check that the access is legal or make the monad "fail".
ensureAccess :: MonadSafeAccess d m => d -> m ()

-- | Allow things to be accessed. See <a>ensureAccess</a>.
--   
--   <tt>d</tt> is the type describing an access.
newtype Capability d
MkCapability :: (d -> AccessDecision) -> Capability d
runCapability :: Capability d -> d -> AccessDecision
type Capabilities d = [Capability d]

-- | Control the decision process.
--   
--   The constructors are ordered by prevalence. For instance, if two
--   capabilities respectively return <a>AccessGranted</a> and
--   <a>AccessDenied</a>, the final decision will be <a>AccessDenied</a>.
data AccessDecision

-- | No but another <a>Capability</a> can still decide to grant
AccessDeniedSoft :: AccessDecision

-- | Final yes (see explanation)
AccessGranted :: AccessDecision

-- | Final no
AccessDenied :: AccessDecision

-- | A simple monad (transformer) to ensure that data are accessed
--   legitimately.
--   
--   The return value is either the description of an access having been
--   denied (left) or the result of the normal computation (right).
newtype SafeAccessT d m a
SafeAccessT :: (Capabilities d -> m (Either d a)) -> SafeAccessT d m a
runSafeAccessT :: SafeAccessT d m a -> Capabilities d -> m (Either d a)
class Monad m => MonadSafeAccess d m
getCapabilities :: MonadSafeAccess d m => m (Capabilities d)
denyAccess :: MonadSafeAccess d m => d -> m ()

-- | Lift an action from <tt>ErrorT</tt> to <a>SafeAccessT</a>.
liftExceptT :: ExceptT d m a -> SafeAccessT d m a
instance Show AccessDecision
instance Eq AccessDecision
instance (MonadSafeAccess d m, Monoid w) => MonadSafeAccess d (WriterT w m)
instance (MonadSafeAccess d m, Monoid w) => MonadSafeAccess d (RWST r w s m)
instance MonadSafeAccess d m => MonadSafeAccess d (ReaderT r m)
instance MonadSafeAccess d m => MonadSafeAccess d (MaybeT m)
instance MonadSafeAccess d m => MonadSafeAccess d (ListT m)
instance MonadSafeAccess d m => MonadSafeAccess d (IdentityT m)
instance MonadSafeAccess d m => MonadSafeAccess d (ExceptT e m)
instance MonadSafeAccess d m => MonadSafeAccess d (ContT e m)
instance MonadWriter w m => MonadWriter w (SafeAccessT d m)
instance MonadState s m => MonadState s (SafeAccessT d m)
instance MonadReader r m => MonadReader r (SafeAccessT d m)
instance MonadError e m => MonadError e (SafeAccessT d m)
instance Monad m => MonadSafeAccess d (SafeAccessT d m)
instance MonadIO m => MonadIO (SafeAccessT d m)
instance Applicative f => Applicative (SafeAccessT d f)
instance Functor f => Functor (SafeAccessT d f)
instance MonadTrans (SafeAccessT d)
instance Monad m => Monad (SafeAccessT d m)
