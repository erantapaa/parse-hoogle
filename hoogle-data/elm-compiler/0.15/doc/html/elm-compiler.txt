-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Values to help with elm-package, elm-make, and elm-lang.org.
--   
@package elm-compiler
@version 0.15

module Elm.Compiler.Type
data Type
Lambda :: Type -> Type -> Type
Var :: String -> Type
Type :: String -> Type
App :: Type -> [Type] -> Type
Record :: [(String, Type)] -> (Maybe Type) -> Type
toString :: Type -> String
instance FromJSON Type
instance ToJSON Type

module Elm.Utils

-- | Forward function application `x |&gt; f == f x`. This function is
--   useful for avoiding parenthesis and writing code in a more natural
--   way.
(|>) :: a -> (a -> b) -> b

-- | Backward function application `f &lt;| x == f x`. This function is
--   useful for avoiding parenthesis.
(<|) :: (a -> b) -> a -> b

-- | Get the absolute path to a data file. If you install with cabal it
--   will look
getAsset :: String -> (FilePath -> IO FilePath) -> FilePath -> IO FilePath

-- | Run a command, throw an error if the command is not found or if
--   something goes wrong.
run :: (MonadError String m, MonadIO m) => String -> [String] -> m String
unwrappedRun :: String -> [String] -> IO (Either CommandError String)
data CommandError
MissingExe :: String -> CommandError
CommandFailed :: String -> String -> CommandError

module Elm.Compiler.Module
type Interface = Interface
newtype Name
Name :: [String] -> Name
nameToPath :: Name -> FilePath
nameToString :: Name -> String
nameFromString :: String -> Maybe Name
hyphenate :: Name -> String
dehyphenate :: String -> Maybe Name
defaultImports :: [Name]
interfacePorts :: Interface -> [String]
interfaceTypes :: Interface -> Map String Type
instance Eq Name
instance Ord Name
instance FromJSON Name
instance ToJSON Name

module Elm.Docs
data Documentation
Documentation :: Name -> String -> [Alias] -> [Union] -> [Value] -> Documentation
moduleName :: Documentation -> Name
comment :: Documentation -> String
aliases :: Documentation -> [Alias]
types :: Documentation -> [Union]
values :: Documentation -> [Value]
data Alias
Alias :: String -> String -> [String] -> Type -> Alias
aliasName :: Alias -> String
aliasComment :: Alias -> String
aliasArgs :: Alias -> [String]
aliasType :: Alias -> Type
data Union
Union :: String -> String -> [String] -> [(String, [Type])] -> Union
unionName :: Union -> String
unionComment :: Union -> String
unionArgs :: Union -> [String]
unionCases :: Union -> [(String, [Type])]
data Value
Value :: String -> String -> Type -> Maybe (String, Int) -> Value
valueName :: Value -> String
valueComment :: Value -> String
valueType :: Value -> Type
valueAssocPrec :: Value -> Maybe (String, Int)
instance FromJSON Value
instance ToJSON Value
instance FromJSON Union
instance ToJSON Union
instance FromJSON Alias
instance ToJSON Alias
instance FromJSON Documentation
instance ToJSON Documentation

module Elm.Compiler
version :: String
rawVersion :: [Int]
parseDependencies :: MonadError String m => String -> m (Name, [Name])

-- | Compiles Elm source code to JavaScript.
compile :: String -> String -> String -> Map Name Interface -> Either String (Interface, String)
