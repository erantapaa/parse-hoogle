-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A geometric library with bindings to GPC.
--   
--   hgeometric is a geometric library with bindings to the General Polygon
--   Clipper Library (GPC), a flexible and highly robust polygon set
--   operations library. GPC is free for non-comercial use and can be
--   obtained at <a>http://www.cs.man.ac.uk/~toby/alan/software/</a>.
--   hgeometric also include some functions to deal with geometric types.
@package hgeometric
@version 0.0.2.2


-- | <a>Area</a> calculation.
module Algebra.Geometric.Area

-- | Calculates the <a>area</a> of an geometric object.
class Area a
area :: Area a => a -> Double


-- | Basic geometric types used by
--   <tt>Algebra.Geometric.Polygon.Polygon</tt> and
--   <tt>Algebra.Geometric.Strip.Strip</tt>.
module Algebra.Geometric.Contour

-- | A list of 2D Points. A <a>Contour</a> is the border of a
--   <tt>Algebra.Geometric.Polygon.Polygon</tt> or the internal border of a
--   hole in a <tt>Algebra.Geometric.Polygon.Polygon</tt>. In a
--   <tt>Algebra.Geometric.Strip.Strip</tt>, it is the border of each
--   division of the <tt>Algebra.Geometric.Strip.Strip</tt>.
newtype Contour
ContourC :: [Vertex] -> Contour
contourList :: Contour -> [Vertex]

-- | A 2D Point.
data Vertex
VertexC :: Double -> Double -> Vertex
vertexX :: Vertex -> Double
vertexY :: Vertex -> Double
instance Eq Vertex
instance Ord Vertex
instance Show Vertex
instance Ord Contour
instance Show Contour
instance Storable Vertex
instance Area Contour
instance Eq Contour
instance Storable Contour


-- | <a>Polygon</a> data type.
module Algebra.Geometric.Polygon

-- | A <a>Polygon</a>, which support holes and disjoint areas. Each
--   <a>Bool</a> in the tuple tells if the <a>Contour</a> is the border of
--   a hole (<a>True</a>) or of a <a>Polygon</a> (<a>False</a>).
newtype Polygon
PolygonC :: Set (Bool, Contour) -> Polygon
polygonSet :: Polygon -> Set (Bool, Contour)
instance Show Polygon
instance Area Polygon
instance Storable Polygon


-- | <a>Strip</a> data type and convertions.
module Algebra.Geometric.Strip

-- | A <a>Strip</a> is an alternative form of representing a <a>Polygon</a>
--   composed by <a>Contour</a>s that are not holes. It's a good idea to
--   use it to draw filled figures, and to use <a>Polygon</a> to draw the
--   <a>Contour</a>s.
newtype Strip
StripC :: Set Contour -> Strip
stripSet :: Strip -> Set Contour

-- | An <a>IO</a> version of <a>polygonToStrip</a>, which does not use
--   <a>unsafePerformIO</a>.
safePolygonToStrip :: Polygon -> IO Strip

-- | Converts a <a>Polygon</a> to a <a>Strip</a>.
polygonToStrip :: Polygon -> Strip
instance Show Strip
instance Storable Strip


-- | <a>Clip</a> operations to <a>Polygon</a>s and <a>Strip</a>s.
module Algebra.Geometric.Clip
class Storable geometry => Clip geometry
difference :: Clip geometry => Polygon -> Polygon -> IO geometry
intersection :: Clip geometry => Polygon -> Polygon -> IO geometry
xor :: Clip geometry => Polygon -> Polygon -> IO geometry
union :: Clip geometry => Polygon -> Polygon -> IO geometry
(\\) :: Clip geometry => Polygon -> Polygon -> geometry
(/\) :: Clip geometry => Polygon -> Polygon -> geometry
(<+>) :: Clip geometry => Polygon -> Polygon -> geometry
(\/) :: Clip geometry => Polygon -> Polygon -> geometry
instance Clip Strip
instance Clip Polygon


-- | Support for reading and writing a <a>Polygon</a> in a file.
module Algebra.Geometric.Polygon.File

-- | Reads a file into a <a>Polygon</a>. If the file isn't accessible, then
--   <a>Nothing</a> is returned.
readPolygon :: FilePath -> Bool -> IO (Maybe Polygon)

-- | If the <a>Polygon</a> was successfully written, then this function
--   returns <a>True</a>, and <a>False</a> otherwise.
writePolygon :: String -> Bool -> Polygon -> IO Bool


-- | Geometric data types and operations.
module Algebra.Geometric
