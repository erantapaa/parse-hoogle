-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Monadic functions with injected parameters.
--   
--   An “inject function” is a regular monadic function (like a -&gt; m b),
--   but adds “injected parameters”. You can imagine such a function as an
--   action taking parameters (the regular monadic function parameters) and
--   vertical parameters. When you compose two compatible monadic functions
--   (the regular way is through &gt;=&gt;), you can choose the types of
--   the injected parameters so that, after some compositions, you have a
--   total control of all the process.
@package inject-function
@version 0.2.1.0

module Control.InjFun

-- | Function able to be injected parameters in. <tt>c</tt> is the injected
--   control parameters, <tt>i</tt> represents its input, <tt>m</tt> is the
--   resulting monad and <tt>o</tt> is the output.
data InjFun c i m o

-- | Feed a <a>InjFun</a> with its regular parameters and injected
--   parameters.
cfapply :: InjFun c i m o -> c -> i -> m o

-- | Create an inject function.
inject :: (c -> i -> m o) -> InjFun c i m o

-- | Explode an <a>InjFun</a> that outputs two values into two other
--   <a>InjFun</a>.
explode :: Monad m => InjFun c i m (o0, o1) -> (InjFun c i m o0, InjFun c i m o1)

-- | Merge two <a>InjFun</a> into one.
merge :: Monad m => InjFun c0 i0 m o0 -> InjFun c1 i1 m o1 -> InjFun (c0, c1) (i0, i1) m (o0, o1)

-- | Sequencing operator. It’s a helper function that composes with
--   <a>&gt;&gt;=</a> the two <a>InjFun</a>, respecting the order.
--   
--   That version (with double `|`) means that the two injected parameters
--   are considered different.
(||->) :: Monad m => InjFun c i m o -> InjFun c' o m o' -> InjFun (c, c') i m o'

-- | Sequencing operator. It’s a helper function that composes with
--   <a>&gt;&gt;=</a> the two <a>InjFun</a>, respecting the order.
--   
--   That version (with a single `|`) means that both the two injected
--   parameters are considered the same; then they’re shared as a single
--   <tt>c</tt>.
(|->) :: Monad m => InjFun c i m o -> InjFun c o m o' -> InjFun c i m o'

-- | Explode an <a>InjFun</a> and feed two other ones with exploded parts
--   of it.
--   
--   In that version, each of the three functions has its own inject
--   parameter.
(-<) :: Monad m => InjFun c i m (o0, o1) -> (InjFun c' o0 m o0', InjFun c'' o1 m o1') -> (InjFun (c, c') i m o0', InjFun (c, c'') i m o1')

-- | Explode an <a>InjFun</a> and feed two other ones with exploded parts
--   of it.
--   
--   In that version, all the three functions share the same inject
--   parameter.
(-<|) :: Monad m => InjFun c i m (o0, o1) -> (InjFun c o0 m o0', InjFun c o1 m o1') -> (InjFun c i m o0', InjFun c i m o1')

-- | Merge two <a>InjFun</a> and feed another one with the merged function.
--   
--   In that version, each of the three functions has it its own inject
--   parameter.
(>-) :: Monad m => (InjFun c0 i0 m o0, InjFun c1 i1 m o1) -> InjFun c2 (o0, o1) m o' -> InjFun (c0, c1, c2) (i0, i1) m o'

-- | Merge two <a>InjFun</a> and feed another one with the merged function.
--   
--   In that version, all the three functions share the same inject
--   parameter.
(>-|) :: Monad m => (InjFun c i0 m o0, InjFun c i1 m o1) -> InjFun c (o0, o1) m o' -> InjFun c (i0, i1) m o'
