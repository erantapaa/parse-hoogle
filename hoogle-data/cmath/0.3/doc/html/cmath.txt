-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A binding to the standard C math library
--   
--   A binding to the standard C math library
@package cmath
@version 0.3


module Foreign.C.Math.Double

-- | The acos function computes the principal value of the arc cosine of x
--   in the range [0, pi]
acos :: Double -> Double
c_acos :: CDouble -> CDouble

-- | The asin function computes the principal value of the arc sine of x in
--   the range [-pi<i>2, +pi</i>2].
asin :: Double -> Double
c_asin :: CDouble -> CDouble

-- | The atan function computes the principal value of the arc tangent of x
--   in the range [-pi<i>2, +pi</i>2].
atan :: Double -> Double
c_atan :: CDouble -> CDouble

-- | The atan2 function computes the principal value of the arc tangent of
--   y/x, using the signs of both arguments to determine the quadrant of
--   the return value.
atan2 :: Double -> Double -> Double
c_atan2 :: CDouble -> CDouble -> CDouble

-- | The cos function computes the cosine of x (measured in radians). A
--   large magnitude argument may yield a result with little or no
--   significance. For a discussion of error due to roundoff, see math(3).
cos :: Double -> Double
c_cos :: CDouble -> CDouble

-- | The sin function computes the sine of x (measured in radians). A large
--   magnitude argument may yield a result with little or no significance.
--   For a discussion of error due to roundoff, see math(3).
sin :: Double -> Double
c_sin :: CDouble -> CDouble

-- | The tan function computes the tangent of x (measured in radians). A
--   large magnitude argument may yield a result with little or no
--   significance. For a discussion of error due to roundoff, see math(3).
tan :: Double -> Double
c_tan :: CDouble -> CDouble

-- | The cosh function computes the hyperbolic cosine of x.
cosh :: Double -> Double
c_cosh :: CDouble -> CDouble

-- | The sinh function computes the hyperbolic sine of x.
sinh :: Double -> Double
c_sinh :: CDouble -> CDouble

-- | The tanh function computes the hyperbolic tangent of x.
tanh :: Double -> Double
c_tanh :: CDouble -> CDouble

-- | The exp() function computes the exponential value of the given
--   argument x.
exp :: Double -> Double
c_exp :: CDouble -> CDouble

-- | frexp convert floating-point number to fractional and integral
--   components frexp is not defined in the Haskell 98 report.
frexp :: Double -> (Double, Int)
c_frexp :: CDouble -> Ptr CInt -> IO Double

-- | The ldexp function multiplies a floating-point number by an integral
--   power of 2. ldexp is not defined in the Haskell 98 report.
ldexp :: Double -> Int -> Double
c_ldexp :: CDouble -> CInt -> Double

-- | The log() function computes the value of the natural logarithm of
--   argument x.
log :: Double -> Double
c_log :: CDouble -> CDouble

-- | The log10 function computes the value of the logarithm of argument x
--   to base 10. log10 is not defined in the Haskell 98 report.
log10 :: Double -> Double
c_log10 :: CDouble -> CDouble

-- | The modf function breaks the argument value into integral and
--   fractional parts, each of which has the same sign as the argument.
--   modf is not defined in the Haskell 98 report.
modf :: Double -> (Double, Double)
c_modf :: CDouble -> Ptr CDouble -> IO CDouble

-- | The pow function computes the value of x to the exponent y.
pow :: Double -> Double -> Double
c_pow :: CDouble -> CDouble -> CDouble

-- | The sqrt function computes the non-negative square root of x.
sqrt :: Double -> Double
c_sqrt :: CDouble -> CDouble

-- | The ceil function returns the smallest integral value greater than or
--   equal to x.
ceil :: Double -> Double
c_ceil :: CDouble -> CDouble

-- | The fabs function computes the absolute value of a floating-point
--   number x.
fabs :: Double -> Double
c_fabs :: CDouble -> CDouble

-- | The floor function returns the largest integral value less than or
--   equal to x.
floor :: Double -> Double
c_floor :: CDouble -> CDouble

-- | The fmod function computes the floating-point remainder of x / y.
fmod :: Double -> Double -> Double
c_fmod :: CDouble -> CDouble -> CDouble

-- | The round function returns the nearest integral value to x; if x lies
--   halfway between two integral values, then these functions return the
--   integral value with the larger absolute value (i.e., it rounds away
--   from zero).
round :: Double -> Double
c_round :: CDouble -> CDouble

-- | The fmod function computes the floating-point remainder of x / y.
trunc :: Double -> Double
c_trunc :: CDouble -> CDouble

-- | The erf calculates the error function of x. The error function is
--   defined as:
--   
--   <pre>
--   erf(x) = 2/sqrt(pi)*integral from 0 to x of exp(-t*t) dt.
--   </pre>
erf :: Double -> Double
c_erf :: CDouble -> CDouble

-- | The erfc function calculates the complementary error function of x;
--   that is erfc() subtracts the result of the error function erf(x) from
--   1.0. This is useful, since for large x places disappear.
erfc :: Double -> Double
c_erfc :: CDouble -> CDouble

-- | The gamma function.
gamma :: Double -> Double
c_gamma :: CDouble -> CDouble

-- | The hypot function function computes the sqrt(x*x+y*y) in such a way
--   that underflow will not happen, and overflow occurs only if the final
--   result deserves it.
--   
--   <pre>
--   hypot(Infinity, v) = hypot(v, Infinity) = +Infinity for all v, including NaN.
--   </pre>
hypot :: Double -> Double -> Double
c_hypot :: CDouble -> CDouble -> CDouble

-- | The isinf function returns 1 if the number n is Infinity, otherwise 0.
isinf :: Double -> Int
c_isinf :: CDouble -> CInt

-- | The isnan function returns 1 if the number n is ``not-a-number'',
--   otherwise 0.
isnan :: Double -> Int
c_isnan :: CDouble -> CInt

-- | finite returns the value 1 just when -Infinity &lt; x &lt; +Infinity;
--   otherwise a zero is returned (when |x| = Infinity or x is NaN.
finite :: Double -> Int
c_finite :: CDouble -> CInt

-- | The functions j0() and j1() compute the Bessel function of the first
--   kind of the order 0 and the order 1, respectively, for the real value
--   x
j0 :: Double -> Double
c_j0 :: CDouble -> CDouble

-- | The functions j0() and j1() compute the Bessel function of the first
--   kind of the order 0 and the order 1, respectively, for the real value
--   x
j1 :: Double -> Double
c_j1 :: CDouble -> CDouble

-- | The functions y0() and y1() compute the linearly independent Bessel
--   function of the second kind of the order 0 and the order 1,
--   respectively, for the positive integer value x (expressed as a double)
y0 :: Double -> Double
c_y0 :: CDouble -> CDouble

-- | The functions y0() and y1() compute the linearly independent Bessel
--   function of the second kind of the order 0 and the order 1,
--   respectively, for the positive integer value x (expressed as a double)
y1 :: Double -> Double
c_y1 :: CDouble -> CDouble

-- | yn() computes the Bessel function of the second kind for the integer
--   Bessel0 n for the positive integer value x (expressed as a double).
yn :: Int -> Double -> Double
c_yn :: CInt -> CDouble -> CDouble

-- | lgamma(x) returns ln|| (x)|.
lgamma :: Double -> Double
c_lgamma :: CDouble -> CDouble

-- | The acosh function computes the inverse hyperbolic cosine of the real
--   argument x.
acosh :: Double -> Double
c_acosh :: CDouble -> CDouble

-- | The asinh function computes the inverse hyperbolic sine of the real
--   argument.
asinh :: Double -> Double
c_asinh :: CDouble -> CDouble

-- | The atanh function computes the inverse hyperbolic tangent of the real
--   argument x.
atanh :: Double -> Double
c_atanh :: CDouble -> CDouble

-- | The cbrt function computes the cube root of x.
cbrt :: Double -> Double
c_cbrt :: CDouble -> CDouble

-- | logb x returns x's exponent n, a signed integer converted to
--   double-precision floating-point.
--   
--   <pre>
--   logb(+-Infinity) = +Infinity;
--   logb(0) = -Infinity with a division by zero exception.
--   </pre>
logb :: Double -> Double
c_logb :: CDouble -> CDouble

-- | nextafter returns the next machine representable number from x in
--   direction y.
nextafter :: Double -> Double -> Double
c_nextafter :: CDouble -> CDouble -> CDouble

-- | remainder returns the remainder r := x - n*y where n is the integer
--   nearest the exact value of x<i>y; moreover if |n - x</i>y| = 1/2 then
--   n is even. Consequently, the remainder is computed exactly and |r|
--   &lt;= |y|/2. But remainder(x, 0) and remainder(Infinity, 0) are
--   invalid operations that produce a NaN. --
remainder :: Double -> Double -> Double
c_remainder :: CDouble -> CDouble -> CDouble

-- | scalb(x, n) returns x*(2**n) computed by exponent manipulation.
scalb :: Double -> Double -> Double
c_scalb :: CDouble -> CDouble -> CDouble

-- | significand(x) returns sig, where x := sig * 2**n with 1 &lt;= sig
--   &lt; 2. significand(x) is not defined when x is 0, +-Infinity, or NaN.
significand :: Double -> Double
c_significand :: CDouble -> CDouble

-- | copysign x y returns x with its sign changed to y's.
copysign :: Double -> Double -> Double
c_copysign :: CDouble -> CDouble -> CDouble

-- | ilogb() returns x's exponent n, in integer format. ilogb(+-Infinity)
--   re- turns INT_MAX and ilogb(0) returns INT_MIN.
ilogb :: Double -> Int
c_ilogb :: CDouble -> CInt

-- | The rint() function returns the integral value (represented as a
--   double precision number) nearest to x according to the prevailing
--   rounding mode.
rint :: Double -> Double
c_rint :: CDouble -> CDouble
