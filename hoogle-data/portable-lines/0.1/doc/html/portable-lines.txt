-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Alternative 'lines' implementation that understands CR-LF and CR
--   
--   Provides an alternative implementation of the <a>Prelude.lines</a>
--   function that treats the following sequences as newline characters:
--   
--   <ul>
--   <li><tt>"\r\n"</tt> (Windows style)</li>
--   <li><tt>"\r"</tt> (Macintosh style, before OS X)</li>
--   <li><tt>"\n"</tt> (Unix style)</li>
--   </ul>
--   
--   Haskell's IO system supports both platform-specific line ending
--   conversion (by opening the file in "text mode"), and explicit setting
--   of the newline mode for input and output (see
--   <a>System.IO.hSetNewlineMode</a>). However:
--   
--   <ul>
--   <li>If you don't know the line ending format in advance, you would
--   have to open the file and detect the newline format manually.</li>
--   <li>ByteString currently honors neither of these; see
--   <a>http://stackoverflow.com/questions/6837628</a>.</li>
--   </ul>
@package portable-lines
@version 0.1

module Text.PortableLines.ByteString.Lazy

-- | Like the <a>lines</a> function from Data.ByteString.Lazy.Char8, but
--   treat the <tt>"\r\n"</tt> and <tt>"\r"</tt> sequences as newlines too,
--   not just <tt>"\n"</tt>.
--   
--   Input is assumed to be in ASCII or an ASCII-compatible encoding (at
--   least with respect to newline characters). For example, UTF-8 is fine,
--   but UTF-16 is not.
lines8 :: ByteString -> [ByteString]

module Text.PortableLines.ByteString

-- | Like the <a>lines</a> function from Data.ByteString.Char8, but treat
--   the <tt>"\r\n"</tt> and <tt>"\r"</tt> sequences as newlines too, not
--   just <tt>"\n"</tt>.
--   
--   Input is assumed to be in ASCII or an ASCII-compatible encoding (at
--   least with respect to newline characters). For example, UTF-8 is fine,
--   but UTF-16 is not.
lines8 :: ByteString -> [ByteString]

module Text.PortableLines

-- | Like the <a>lines</a> function from Prelude, but treat the
--   <tt>"\r\n"</tt> and <tt>"\r"</tt> sequences as newlines too, not just
--   <tt>"\n"</tt>.
lines :: String -> [String]
