-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | C99 printf "%a" style formatting and parsing
--   
--   Format and parse floating point values as C99 printf/scanf with format
--   string %a do
@package float-binstring
@version 0.2


-- | This module contains functions for formatting and parsing floating
--   point values as C99 printf/scanf functions with format string
--   <tt>%a</tt> do.
--   
--   The format is [-]0x<i>h.hhhhh</i>p<i>ddd</i>, where <i>h.hhhhh</i> is
--   significand as a hexadecimal floating-point number and <i>±dd</i> is
--   exponent as a decimal number. Significand has as many digits as needed
--   to exactly represent the value, fractional part may be ommitted.
--   
--   Infinity and NaN values are represented as <tt>±in</tt> and
--   <tt>nan</tt> accordingly.
--   
--   For example, <tt>(π ∷ Double) = 0x1.921fb54442d18p+1</tt>
--   (<i>exactly</i>).
--   
--   This assertion holds (assuming NaN ≡ NaN)
--   
--   <pre>
--   ∀x. Just x ≡ readFloat (showFloat x)
--   </pre>
--   
--   Floating point radix is assumed to be 2.
module Data.Float.BinString

-- | Parse a value from <a>Text</a>.
readFloat :: RealFloat a => Text -> Maybe a

-- | Format a value. Will provide enough digits to reconstruct the value
--   exactly.
showFloat :: RealFloat a => a -> Text

-- | A <a>Builder</a> for a value
floatBuilder :: RealFloat a => a -> Builder

-- | <i>Deprecated: use readFloat </i>
readFloatStr :: RealFloat a => String -> Maybe a

-- | <i>Deprecated: use showFloat </i>
showFloatStr :: RealFloat a => a -> String
instance Show Sign
instance Show ParsedFloat
