-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Tokenizes Tag, so [ Tag ] can be used as parser input.
--   
--   Tokenizes Tag, so [ Tag ] can be used as parser input. Provides basic
--   combinators.
@package tagsoup-parsec
@version 0.0.8

module Text.HTML.TagSoup.Parsec

-- | The Tag parser, using Tag as the token.
type TagParser str = GenParser (Tag str) ()

-- | A stateful tag parser This is a new type alias to allow backwards
--   compatibility with old code.
type TagParserSt str u = GenParser (Tag str) u

-- | A type represent the TagOpen, any inner tags , and the TagClose.
type WholeTag str = (Tag str, [Tag str], Tag str)

-- | Used to invoke parsing of Tags.
tParse :: (StringLike str, Show str) => TagParser str a -> [Tag str] -> a

-- | Simply run a stateful tag parser
tStParse :: (StringLike str, Show str) => TagParserSt str st a -> st -> [Tag str] -> a

-- | openTag matches a TagOpen with the given name. It is not case
--   sensitive.
openTag :: (StringLike str, Show str) => str -> TagParserSt str st (Tag str)

-- | maybeOpenTag will return <a>Just</a> the tag if it gets a TagOpen with
--   he given name, It will return <a>Nothing</a> otherwise. It is not case
--   sensitive.
maybeOpenTag :: (StringLike str, Show str) => str -> TagParserSt str st (Maybe (Tag str))

-- | either a Right TagOpen or a Left arbitary tag.
eitherOpenTag :: (StringLike str, Show str) => str -> TagParserSt str st (Either (Tag str) (Tag str))

-- | notOpenTag will match any tag which is not a TagOpen with the given
--   name. It is not case sensitive.
notOpenTag :: (StringLike str, Show str) => str -> TagParserSt str st (Tag str)

-- | allOpenTags will return all TagOpen with the given name. It is not
--   case sensitive.
allOpenTags :: (StringLike str, Show str) => str -> TagParserSt str st [Tag str]

-- | wholeTag matches a TagOpen with the given name, then all intervening
--   tags, until it reaches a TagClose with the given name. It is not case
--   sensitive.
wholeTag :: (StringLike str, Show str) => str -> TagParserSt str st (WholeTag str)

-- | maybeWholeTag will return <a>Just</a> the tag if it gets a WholeTag
--   with he given name, It will return <a>Nothing</a> otherwise. It is not
--   case sensitive.
maybeWholeTag :: (StringLike str, Show str) => str -> TagParserSt str st (Maybe (WholeTag str))

-- | either a Right WholeTag or a Left arbitary tag.
eitherWholeTag :: (StringLike str, Show str) => str -> TagParserSt str st (Either (Tag str) (WholeTag str))

-- | allWholeTags will return all WholeTag with the given name. It is not
--   case sensitive.
allWholeTags :: (StringLike str, Show str) => str -> TagParserSt str st [WholeTag str]

-- | closeTag matches a TagClose with the given name. It is not case
--   sensitive.
closeTag :: (StringLike str, Show str) => str -> TagParserSt str st (Tag str)

-- | maybeCloseTag will return <a>Just</a> the tag if it gets a TagClose
--   with he given name, It will return <a>Nothing</a> otherwise. It is not
--   case sensitive.
maybeCloseTag :: (StringLike str, Show str) => str -> TagParserSt str st (Maybe (Tag str))

-- | either a Right TagClose or a Left arbitary tag.
eitherCloseTag :: (StringLike str, Show str) => str -> TagParserSt str st (Either (Tag str) (Tag str))

-- | notCloseTag will match any tag which is not a TagClose with the given
--   name. It is not case sensitive.
notCloseTag :: (StringLike str, Show str) => str -> TagParserSt str st (Tag str)

-- | allCloseTags will return all TagClose with the given name. It is not
--   case sensitive.
allCloseTags :: (StringLike str, Show str) => str -> TagParserSt str st [Tag str]

-- | maybeP takes a parser, and becomes its <a>Maybe</a> equivalent --
--   returning <a>Just</a> if it matches, and <a>Nothing</a> if it doesn't.
maybeP :: Show tok => GenParser tok st a -> GenParser tok st (Maybe a)

-- | allP takes a parser which returns a <a>Maybe</a> value, and returns a
--   list of matching tokens.
allP :: GenParser tok st (Maybe a) -> GenParser tok st [a]

-- | eitherP takes a parser, and becomes its <a>Either</a> equivalent --
--   returning <a>Right</a> if it matches, and <a>Left</a> of anyToken if
--   it doesn't.
eitherP :: Show tok => GenParser tok st a -> GenParser tok st (Either tok a)
