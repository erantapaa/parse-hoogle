-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Overloaded pitch literals.
--   
@package music-pitch-literal
@version 1.9.0


module Music.Pitch.Alterable

-- | Class of things that can be altered.
--   
--   <pre>
--   accidental (sharpen a) = sharpen (accidental a)
--   accidental (flatten a) = flatten (accidental a)
--   sharpen . flatten      = id
--   </pre>
class Alterable a
sharpen :: Alterable a => a -> a
flatten :: Alterable a => a -> a
alter :: Alterable a => Int -> a -> a
instance Alterable a => Alterable (b, a)
instance Alterable a => Alterable [a]
instance Integral a => Alterable (Ratio a)
instance Alterable Integer
instance Alterable Double
instance Alterable a => Alterable (b -> a)


module Music.Pitch.Augmentable

-- | Class of types that can be augmented.
--   
--   <pre>
--   quality (augment a)  = augment (quality a)
--   quality (diminish a) = diminish (quality a)
--   augment . diminish   = id
--   </pre>
class Augmentable a
augment :: Augmentable a => a -> a
diminish :: Augmentable a => a -> a
augmentN :: Augmentable a => Int -> a -> a
instance Augmentable a => Augmentable (b, a)
instance Augmentable a => Augmentable [a]
instance Integral a => Augmentable (Ratio a)
instance Augmentable Integer
instance Augmentable Double


-- | Provides overloaded interval literals.
module Music.Pitch.Literal.Interval
class IsInterval a
fromInterval :: IsInterval a => IntervalL -> a
newtype IntervalL
IntervalL :: (Integer, Integer, Integer) -> IntervalL
d1 :: IsInterval a => a
_P1 :: IsInterval a => a
_A1 :: IsInterval a => a
d2 :: IsInterval a => a
m2 :: IsInterval a => a
_M2 :: IsInterval a => a
_A2 :: IsInterval a => a
d3 :: IsInterval a => a
m3 :: IsInterval a => a
_M3 :: IsInterval a => a
_A3 :: IsInterval a => a
d4 :: IsInterval a => a
_P4 :: IsInterval a => a
_A4 :: IsInterval a => a
d5 :: IsInterval a => a
_P5 :: IsInterval a => a
_A5 :: IsInterval a => a
d6 :: IsInterval a => a
m6 :: IsInterval a => a
_M6 :: IsInterval a => a
_A6 :: IsInterval a => a
d7 :: IsInterval a => a
m7 :: IsInterval a => a
_M7 :: IsInterval a => a
_A7 :: IsInterval a => a
d8 :: IsInterval a => a
_P8 :: IsInterval a => a
_A8 :: IsInterval a => a
d9 :: IsInterval a => a
m9 :: IsInterval a => a
_M9 :: IsInterval a => a
_A9 :: IsInterval a => a
d10 :: IsInterval a => a
m10 :: IsInterval a => a
_M10 :: IsInterval a => a
_A10 :: IsInterval a => a
d11 :: IsInterval a => a
_P11 :: IsInterval a => a
_A11 :: IsInterval a => a
d12 :: IsInterval a => a
_P12 :: IsInterval a => a
_A12 :: IsInterval a => a
d13 :: IsInterval a => a
m13 :: IsInterval a => a
_M13 :: IsInterval a => a
_A13 :: IsInterval a => a
d14 :: IsInterval a => a
m14 :: IsInterval a => a
_M14 :: IsInterval a => a
_A14 :: IsInterval a => a
d15 :: IsInterval a => a
_P15 :: IsInterval a => a
_A15 :: IsInterval a => a
instance IsInterval Integer
instance IsInterval Word
instance IsInterval Int
instance (Monoid b, IsInterval a) => IsInterval (b, a)
instance IsInterval a => IsInterval [a]
instance IsInterval a => IsInterval (Last a)
instance IsInterval a => IsInterval (First a)
instance IsInterval a => IsInterval (Maybe a)
instance IsInterval IntervalL


-- | Provides overloaded pitch literals.
module Music.Pitch.Literal.Pitch
class IsPitch a
fromPitch :: IsPitch a => PitchL -> a
newtype PitchL
PitchL :: (Int, Maybe Double, Int) -> PitchL
getPitchL :: PitchL -> (Int, Maybe Double, Int)
cs'''' :: IsPitch a => a
ds'''' :: IsPitch a => a
es'''' :: IsPitch a => a
fs'''' :: IsPitch a => a
gs'''' :: IsPitch a => a
as'''' :: IsPitch a => a
bs'''' :: IsPitch a => a
c'''' :: IsPitch a => a
d'''' :: IsPitch a => a
e'''' :: IsPitch a => a
f'''' :: IsPitch a => a
g'''' :: IsPitch a => a
a'''' :: IsPitch a => a
b'''' :: IsPitch a => a
cb'''' :: IsPitch a => a
db'''' :: IsPitch a => a
eb'''' :: IsPitch a => a
fb'''' :: IsPitch a => a
gb'''' :: IsPitch a => a
ab'''' :: IsPitch a => a
bb'''' :: IsPitch a => a
cs''' :: IsPitch a => a
ds''' :: IsPitch a => a
es''' :: IsPitch a => a
fs''' :: IsPitch a => a
gs''' :: IsPitch a => a
as''' :: IsPitch a => a
bs''' :: IsPitch a => a
c''' :: IsPitch a => a
d''' :: IsPitch a => a
e''' :: IsPitch a => a
f''' :: IsPitch a => a
g''' :: IsPitch a => a
a''' :: IsPitch a => a
b''' :: IsPitch a => a
cb''' :: IsPitch a => a
db''' :: IsPitch a => a
eb''' :: IsPitch a => a
fb''' :: IsPitch a => a
gb''' :: IsPitch a => a
ab''' :: IsPitch a => a
bb''' :: IsPitch a => a
cs'' :: IsPitch a => a
ds'' :: IsPitch a => a
es'' :: IsPitch a => a
fs'' :: IsPitch a => a
gs'' :: IsPitch a => a
as'' :: IsPitch a => a
bs'' :: IsPitch a => a
c'' :: IsPitch a => a
d'' :: IsPitch a => a
e'' :: IsPitch a => a
f'' :: IsPitch a => a
g'' :: IsPitch a => a
a'' :: IsPitch a => a
b'' :: IsPitch a => a
cb'' :: IsPitch a => a
db'' :: IsPitch a => a
eb'' :: IsPitch a => a
fb'' :: IsPitch a => a
gb'' :: IsPitch a => a
ab'' :: IsPitch a => a
bb'' :: IsPitch a => a
cs' :: IsPitch a => a
ds' :: IsPitch a => a
es' :: IsPitch a => a
fs' :: IsPitch a => a
gs' :: IsPitch a => a
as' :: IsPitch a => a
bs' :: IsPitch a => a
c' :: IsPitch a => a
d' :: IsPitch a => a
e' :: IsPitch a => a
f' :: IsPitch a => a
g' :: IsPitch a => a
a' :: IsPitch a => a
b' :: IsPitch a => a
cb' :: IsPitch a => a
db' :: IsPitch a => a
eb' :: IsPitch a => a
fb' :: IsPitch a => a
gb' :: IsPitch a => a
ab' :: IsPitch a => a
bb' :: IsPitch a => a
cs :: IsPitch a => a
ds :: IsPitch a => a
es :: IsPitch a => a
fs :: IsPitch a => a
gs :: IsPitch a => a
as :: IsPitch a => a
bs :: IsPitch a => a
c :: IsPitch a => a
d :: IsPitch a => a
e :: IsPitch a => a
f :: IsPitch a => a
g :: IsPitch a => a
a :: IsPitch a => a
b :: IsPitch a => a
cb :: IsPitch a => a
db :: IsPitch a => a
eb :: IsPitch a => a
fb :: IsPitch a => a
gb :: IsPitch a => a
ab :: IsPitch a => a
bb :: IsPitch a => a
cs_ :: IsPitch a => a
ds_ :: IsPitch a => a
es_ :: IsPitch a => a
fs_ :: IsPitch a => a
gs_ :: IsPitch a => a
as_ :: IsPitch a => a
bs_ :: IsPitch a => a
c_ :: IsPitch a => a
d_ :: IsPitch a => a
e_ :: IsPitch a => a
f_ :: IsPitch a => a
g_ :: IsPitch a => a
a_ :: IsPitch a => a
b_ :: IsPitch a => a
cb_ :: IsPitch a => a
db_ :: IsPitch a => a
eb_ :: IsPitch a => a
fb_ :: IsPitch a => a
gb_ :: IsPitch a => a
ab_ :: IsPitch a => a
bb_ :: IsPitch a => a
cs__ :: IsPitch a => a
ds__ :: IsPitch a => a
es__ :: IsPitch a => a
fs__ :: IsPitch a => a
gs__ :: IsPitch a => a
as__ :: IsPitch a => a
bs__ :: IsPitch a => a
c__ :: IsPitch a => a
d__ :: IsPitch a => a
e__ :: IsPitch a => a
f__ :: IsPitch a => a
g__ :: IsPitch a => a
a__ :: IsPitch a => a
b__ :: IsPitch a => a
cb__ :: IsPitch a => a
db__ :: IsPitch a => a
eb__ :: IsPitch a => a
fb__ :: IsPitch a => a
gb__ :: IsPitch a => a
ab__ :: IsPitch a => a
bb__ :: IsPitch a => a
cs___ :: IsPitch a => a
ds___ :: IsPitch a => a
es___ :: IsPitch a => a
fs___ :: IsPitch a => a
gs___ :: IsPitch a => a
as___ :: IsPitch a => a
bs___ :: IsPitch a => a
c___ :: IsPitch a => a
d___ :: IsPitch a => a
e___ :: IsPitch a => a
f___ :: IsPitch a => a
g___ :: IsPitch a => a
a___ :: IsPitch a => a
b___ :: IsPitch a => a
cb___ :: IsPitch a => a
db___ :: IsPitch a => a
eb___ :: IsPitch a => a
fb___ :: IsPitch a => a
gb___ :: IsPitch a => a
ab___ :: IsPitch a => a
bb___ :: IsPitch a => a
cs____ :: IsPitch a => a
ds____ :: IsPitch a => a
es____ :: IsPitch a => a
fs____ :: IsPitch a => a
gs____ :: IsPitch a => a
as____ :: IsPitch a => a
bs____ :: IsPitch a => a
c____ :: IsPitch a => a
d____ :: IsPitch a => a
e____ :: IsPitch a => a
f____ :: IsPitch a => a
g____ :: IsPitch a => a
a____ :: IsPitch a => a
b____ :: IsPitch a => a
cb____ :: IsPitch a => a
db____ :: IsPitch a => a
eb____ :: IsPitch a => a
fb____ :: IsPitch a => a
gb____ :: IsPitch a => a
ab____ :: IsPitch a => a
bb____ :: IsPitch a => a
instance Eq PitchL
instance Show PitchL
instance Ord PitchL
instance IsPitch Integer
instance IsPitch Double
instance Integral a => IsPitch (Ratio a)
instance HasResolution a => IsPitch (Fixed a)
instance IsPitch Float
instance IsPitch Word
instance IsPitch Int
instance (Monoid b, IsPitch a) => IsPitch (b, a)
instance IsPitch a => IsPitch [a]
instance IsPitch a => IsPitch (Last a)
instance IsPitch a => IsPitch (First a)
instance IsPitch a => IsPitch (Maybe a)
instance IsPitch PitchL


-- | Provides overloaded pitch and interval literals.
module Music.Pitch.Literal
