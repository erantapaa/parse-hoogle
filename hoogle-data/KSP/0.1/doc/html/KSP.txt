-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A library with the kerbal space program universe and demo code
--   
@package KSP
@version 0.1


module System.KSP.Auxiliary

-- | The function <a>takeUntil</a> takes a test function and a list of
--   values. It returns all elements that do not pass the test function
--   until it reaches the first one that passes the test function,
--   otherwise it returns the empty list.
takeUntil :: (a -> Bool) -> [a] -> [a]

-- | <a>firstJust</a> returns of a list of <a>Maybe</a> values the first
--   actual <a>Just</a> value or nothing if none is within the list.
firstJust :: [Maybe a] -> Maybe a


module System.KSP.DataConstructors

-- | An <a>Object</a> is something named.
data Object
Object :: String -> Object
name :: Object -> String

-- | The <a>Celestial</a> type defines a celestial object within this
--   library. Every celestial object has
--   
--   <ul>
--   <li><a>r</a> [m] the radius (from the bodys center) in meter</li>
--   <li><a>m</a> [kg] the mass of the object in kilo gramms</li>
--   <li><a>soi</a> [m] the <i>s</i>phere <i>o</i>f <i>i</i>nfluence of the
--   object in meter</li>
--   <li><a>system</a> empty or a system of surronding objects.</li>
--   </ul>
data Celestial
Celestial :: Double -> Double -> Double -> System Body Body -> Celestial
r :: Celestial -> Double
m :: Celestial -> Double
soi :: Celestial -> Double
system :: Celestial -> System Body Body

-- | The <a>Body</a> type is the central data type within the KSP library.
--   It could be either <a>Railed</a> or <a>Movable</a>
--   
--   <ul>
--   <li><a>Railed</a> is everything withing ksp that is a star, a planet
--   or a moon. They are static in their orbits and are therefore called
--   railed.</li>
--   <li><a>Movable</a> is every other part in ksp, that is physical. Here
--   they include deltaV counter, but are also modelled as celestial
--   objects. Actually in ksp orbits around movable parts arent possible.
--   Anyhow, within this data type such constructs are doable.</li>
--   </ul>
data Body
Railed :: Object -> Celestial -> Body
object :: Body -> Object
celestial :: Body -> Celestial
Movable :: Object -> Celestial -> DeltaV -> Body
object :: Body -> Object
celestial :: Body -> Celestial
deltaV :: Body -> DeltaV

-- | The 'Orbit a' data type defines an orbit around a central body
--   <a>centerBody</a>.
--   
--   <ul>
--   <li><a>centerBody</a> is the body the orbit is around</li>
--   <li><a>apoapsis</a> is the height of the heighest point of the
--   orbit</li>
--   <li><a>periapsis</a> is the height of the lowest point of the
--   orbit</li>
--   <li><a>inclination</a> is the angle that the orbit is inclined against
--   the aquatorial plane</li>
--   <li><a>omega_big</a> is the longitude of the ascending node</li>
--   <li><a>omega_small</a> is the argument of the periapsis</li>
--   </ul>
data Orbit a
Landed :: Orbit a
O :: a -> Double -> Double -> Maybe Double -> Maybe Double -> Maybe Double -> Orbit a
centerBody :: Orbit a -> a
apoapsis :: Orbit a -> Double
periapsis :: Orbit a -> Double
inclination :: Orbit a -> Maybe Double
omega_big :: Orbit a -> Maybe Double
omega_small :: Orbit a -> Maybe Double

-- | <a>mkOrbit</a> takes a body as well as apoapsis and periapsis and of
--   that creates an orbit.
mkOrbit :: a -> Height -> Height -> Orbit a

-- | <a>mkCircOrbit</a> is similar to <a>mkOrbit</a> with the difference
--   that it creates a circular orbit.
mkCircOrbit :: a -> Height -> Orbit a

-- | The <a>Height</a> is the height above ground level.
type Height = Double

-- | The <a>System</a> module contains the type definition of a
--   <a>System</a>.
data System b a
Empty :: System b a
System :: [(Orbit b, a)] -> System b a

-- | <a>GravConst</a> is the type of the gravitation constant, which is
--   obious a double.
type GravConst = Double

-- | <a>KSystem</a> creates a data constructor, that binds the
--   <a>System</a> to a <a>System</a> of <a>Orbit</a>s around <a>Body</a>s.
type KSystem = System Body


module System.KSP.OrbitalMechanics

-- | <a>Radius</a> of <a>Orbit</a> at the current Position
type Radius = Double

-- | <a>Speed</a> is an alias for <a>Double</a>
type Speed = Double

-- | <a>var_G</a> [Nm^2/kg^2] is the Gravitation constant in newton meter
--   squared over kilo gramms squared
var_G :: GravConst

-- | <a>semiMajor</a> calculates the semi major axis of an orbit.
semiMajor :: Orbit Body -> Double

-- | <a>v</a> takes an orbit and a radius (from the center of the
--   centerBody) and calculates the orbital speed at that position.
v :: Orbit Body -> Radius -> Speed

-- | <a>v_e</a> calculates the escape velocity of that body.
v_e :: Body -> Speed

-- | <tt>burnProgradeFromCircOrb</tt> calculates the transformed orbit,
--   after the supplied delta V is applied to the initial orbit.
--   
--   A prograde burn is done through a positive <a>Speed</a> parameter, a
--   retrograde burn respective through a negative <a>Speed</a>.
burnFromCircOrb :: Orbit Body -> Speed -> Orbit Body

-- | <a>updateOrbit</a> is a function that takes an orbit and two heights.
--   It updates the apoapsis with the bigger height and the periapsis with
--   the smaller.
updateOrbit :: Orbit Body -> Double -> Double -> Orbit Body

-- | <a>burnAt</a> calculates the new orbit after a burn of <a>Speed</a>
--   delta V is applied to the given orbit.
--   
--   <ul>
--   <li><tt>f</tt> is the function that calculates returns the distance of
--   the body within orbit, to the center body. Typical this is one of
--   <a>apoapsis</a> or <a>periapsis</a></li>
--   <li><tt>o</tt> is the initial orbit</li>
--   <li><tt>dV</tt> is the amount of delta V to apply to the orbit.</li>
--   </ul>
burnAt :: (Orbit Body -> Double) -> Orbit Body -> Speed -> Orbit Body

-- | <a>burnAtPeriapsis</a> calculates the new orbit after a burn of
--   <a>Speed</a> delta V is applied to the given orbit at the periapsis.
burnAtPeriapsis :: Orbit Body -> Speed -> Orbit Body

-- | <a>burnAt</a> calculates the new orbit after a burn of <a>Speed</a>
--   delta V is applied to the given orbit at the apoapsis.
burnAtApoapsis :: Orbit Body -> Speed -> Orbit Body

-- | <a>hohmann</a> takes two orbits around the same centerBody. It
--   calculates both (v1 and v2 ) delta V changes for a hohmann transfair.
hohmann :: Orbit Body -> Orbit Body -> (Double, Double)


module System.KSP.DataDestructors

-- | <a>getNextUp</a> takes a <a>KSystem</a> system and a <a>Body</a>. It
--   returns the body that the supplied body orbits. <a>Nothing</a> is
--   returned if the supplied body is not found within the system.
getNextUp :: KSystem Body -> Body -> Maybe Body

-- | <a>getPathUp</a> takes a <a>KSystem</a> system and a <a>Body</a>. It
--   returns the chain of body's that are orbiting each other.
getPathUp :: KSystem Body -> Body -> [Body]

-- | <a>getDivid</a> takes a <a>KSystem</a> system and a <b>from</b>
--   <a>Body</a> and a <b>to</b> <a>Body</a>. For both bodys, the path up
--   is calculated by <a>getPathUp</a> and the position, where they reach
--   the same body is returned (as Position and with the actual body).
getDivid :: KSystem Body -> Body -> Body -> (Int, Body)

-- | <a>sOrbitInSystem</a> takes a body, a <a>KSystem</a> system and maybe
--   returns the orbit of the body.
sOrbitInSystem :: Body -> KSystem Body -> Maybe (Orbit Body)

-- | <a>pathOBetween</a> takes a <a>KSystem</a> system and a <b>from</b>
--   <a>Body</a> and a <b>to</b> <a>Body</a>. If one want's to reach the
--   <b>to</b> body from <b>from</b> body the bodys between and their orbit
--   around their centerBody are returnd.
pathOBetween :: KSystem Body -> Body -> Body -> [(Body, Orbit Body)]

-- | <a>pathOBetween'</a> takes a <a>KSystem</a> system and a <b>from</b>
--   <a>Body</a> and a <b>to</b> <a>Body</a>. If one want's to reach the
--   <b>to</b> body from <b>from</b> body the bodys between and their orbit
--   around their centerBody are returnd. They are returnd as triple, with
--   the overlapping body in the center of the triple and the path of the
--   <b>from</b> body in the first element of the triple. The path of the
--   <b>to</b> body in the last element of the triple.
pathOBetween' :: KSystem Body -> Body -> Body -> ([(Body, Orbit Body)], (Body, Orbit Body), [(Body, Orbit Body)])

-- | <a>pathBetween_</a> takes a <a>KSystem</a> system and a <b>from</b>
--   <a>Body</a> and a <b>to</b> <a>Body</a>. If one want's to reach the
--   <b>to</b> body from <b>from</b> body the bodys between are returnd,
--   without the common body.
pathBetween_ :: KSystem Body -> Body -> Body -> [Body]

-- | <a>pathBetween</a> takes a <a>KSystem</a> system and <b>from</b>
--   <a>Body</a> and a <b>to</b> <a>Body</a>. If one want's to reach the
--   <b>to</b> body from <b>from</b> body the bodys between and their orbit
--   around their centerBody are returnd. They are returnd as triple, with
--   the overlapping body in the center of the triple and the path of the
--   <b>from</b> body in the first element of the triple. The path of the
--   <b>to</b> body in the last element of the triple.
pathBetween' :: KSystem Body -> Body -> Body -> ([Body], Body, [Body])

-- | <a>pathBetween</a> takes a <a>KSystem</a> system and a <b>from</b>
--   <a>Body</a> and a <b>to</b> <a>Body</a>. If one want's to reach the
--   <b>to</b> body from <b>from</b> body the bodys between are returnd,
--   including the common body.
pathBetween :: KSystem Body -> Body -> Body -> [Body]

-- | <a>pathSpeeds</a> takes the result of <a>pathOBetween</a> and
--   calculates the corresponding orbital speeds.
pathSpeeds :: [(Body, Orbit Body)] -> [Speed]

-- | <a>orbitalSpeed</a> returns the orbital velocity of the given orbit.
orbitalSpeed :: (Orbit Body) -> Speed

-- | <a>updateOrbit</a> is a function that takes an orbit and two heights.
--   It updates the apoapsis with the bigger height and the periapsis with
--   the smaller.
updateOrbit :: Orbit Body -> Double -> Double -> Orbit Body

-- | <tt>burnProgradeFromCircOrb</tt> calculates the transformed orbit,
--   after the supplied delta V is applied to the initial orbit.
--   
--   A prograde burn is done through a positive <a>Speed</a> parameter, a
--   retrograde burn respective through a negative <a>Speed</a>.
burnFromCircOrb :: Orbit Body -> Speed -> Orbit Body

-- | <a>burnAt</a> calculates the new orbit after a burn of <a>Speed</a>
--   delta V is applied to the given orbit.
--   
--   <ul>
--   <li><tt>f</tt> is the function that calculates returns the distance of
--   the body within orbit, to the center body. Typical this is one of
--   <a>apoapsis</a> or <a>periapsis</a></li>
--   <li><tt>o</tt> is the initial orbit</li>
--   <li><tt>dV</tt> is the amount of delta V to apply to the orbit.</li>
--   </ul>
burnAt :: (Orbit Body -> Double) -> Orbit Body -> Speed -> Orbit Body

-- | <a>burnAt</a> calculates the new orbit after a burn of <a>Speed</a>
--   delta V is applied to the given orbit at the apoapsis.
burnAtApoapsis :: Orbit Body -> Speed -> Orbit Body

-- | <a>burnAtPeriapsis</a> calculates the new orbit after a burn of
--   <a>Speed</a> delta V is applied to the given orbit at the periapsis.
burnAtPeriapsis :: Orbit Body -> Speed -> Orbit Body


module System.KSP.Datatypes

-- | An <a>Object</a> is something named.
data Object
Object :: String -> Object
name :: Object -> String

-- | The <a>Celestial</a> type defines a celestial object within this
--   library. Every celestial object has
--   
--   <ul>
--   <li><a>r</a> [m] the radius (from the bodys center) in meter</li>
--   <li><a>m</a> [kg] the mass of the object in kilo gramms</li>
--   <li><a>soi</a> [m] the <i>s</i>phere <i>o</i>f <i>i</i>nfluence of the
--   object in meter</li>
--   <li><a>system</a> empty or a system of surronding objects.</li>
--   </ul>
data Celestial
Celestial :: Double -> Double -> Double -> System Body Body -> Celestial
r :: Celestial -> Double
m :: Celestial -> Double
soi :: Celestial -> Double
system :: Celestial -> System Body Body

-- | The <a>Body</a> type is the central data type within the KSP library.
--   It could be either <a>Railed</a> or <a>Movable</a>
--   
--   <ul>
--   <li><a>Railed</a> is everything withing ksp that is a star, a planet
--   or a moon. They are static in their orbits and are therefore called
--   railed.</li>
--   <li><a>Movable</a> is every other part in ksp, that is physical. Here
--   they include deltaV counter, but are also modelled as celestial
--   objects. Actually in ksp orbits around movable parts arent possible.
--   Anyhow, within this data type such constructs are doable.</li>
--   </ul>
data Body
Railed :: Object -> Celestial -> Body
object :: Body -> Object
celestial :: Body -> Celestial
Movable :: Object -> Celestial -> DeltaV -> Body
object :: Body -> Object
celestial :: Body -> Celestial
deltaV :: Body -> DeltaV

-- | The 'Orbit a' data type defines an orbit around a central body
--   <a>centerBody</a>.
--   
--   <ul>
--   <li><a>centerBody</a> is the body the orbit is around</li>
--   <li><a>apoapsis</a> is the height of the heighest point of the
--   orbit</li>
--   <li><a>periapsis</a> is the height of the lowest point of the
--   orbit</li>
--   <li><a>inclination</a> is the angle that the orbit is inclined against
--   the aquatorial plane</li>
--   <li><a>omega_big</a> is the longitude of the ascending node</li>
--   <li><a>omega_small</a> is the argument of the periapsis</li>
--   </ul>
data Orbit a
Landed :: Orbit a
O :: a -> Double -> Double -> Maybe Double -> Maybe Double -> Maybe Double -> Orbit a
centerBody :: Orbit a -> a
apoapsis :: Orbit a -> Double
periapsis :: Orbit a -> Double
inclination :: Orbit a -> Maybe Double
omega_big :: Orbit a -> Maybe Double
omega_small :: Orbit a -> Maybe Double

-- | <a>mkOrbit</a> takes a body as well as apoapsis and periapsis and of
--   that creates an orbit.
mkOrbit :: a -> Height -> Height -> Orbit a

-- | <a>mkCircOrbit</a> is similar to <a>mkOrbit</a> with the difference
--   that it creates a circular orbit.
mkCircOrbit :: a -> Height -> Orbit a

-- | The <a>Height</a> is the height above ground level.
type Height = Double

-- | The <a>System</a> module contains the type definition of a
--   <a>System</a>.
data System b a
Empty :: System b a
System :: [(Orbit b, a)] -> System b a

-- | <a>GravConst</a> is the type of the gravitation constant, which is
--   obious a double.
type GravConst = Double

-- | <a>KSystem</a> creates a data constructor, that binds the
--   <a>System</a> to a <a>System</a> of <a>Orbit</a>s around <a>Body</a>s.
type KSystem = System Body

-- | <a>getNextUp</a> takes a <a>KSystem</a> system and a <a>Body</a>. It
--   returns the body that the supplied body orbits. <a>Nothing</a> is
--   returned if the supplied body is not found within the system.
getNextUp :: KSystem Body -> Body -> Maybe Body

-- | <a>getPathUp</a> takes a <a>KSystem</a> system and a <a>Body</a>. It
--   returns the chain of body's that are orbiting each other.
getPathUp :: KSystem Body -> Body -> [Body]

-- | <a>getDivid</a> takes a <a>KSystem</a> system and a <b>from</b>
--   <a>Body</a> and a <b>to</b> <a>Body</a>. For both bodys, the path up
--   is calculated by <a>getPathUp</a> and the position, where they reach
--   the same body is returned (as Position and with the actual body).
getDivid :: KSystem Body -> Body -> Body -> (Int, Body)

-- | <a>sOrbitInSystem</a> takes a body, a <a>KSystem</a> system and maybe
--   returns the orbit of the body.
sOrbitInSystem :: Body -> KSystem Body -> Maybe (Orbit Body)

-- | <a>pathOBetween</a> takes a <a>KSystem</a> system and a <b>from</b>
--   <a>Body</a> and a <b>to</b> <a>Body</a>. If one want's to reach the
--   <b>to</b> body from <b>from</b> body the bodys between and their orbit
--   around their centerBody are returnd.
pathOBetween :: KSystem Body -> Body -> Body -> [(Body, Orbit Body)]

-- | <a>pathOBetween'</a> takes a <a>KSystem</a> system and a <b>from</b>
--   <a>Body</a> and a <b>to</b> <a>Body</a>. If one want's to reach the
--   <b>to</b> body from <b>from</b> body the bodys between and their orbit
--   around their centerBody are returnd. They are returnd as triple, with
--   the overlapping body in the center of the triple and the path of the
--   <b>from</b> body in the first element of the triple. The path of the
--   <b>to</b> body in the last element of the triple.
pathOBetween' :: KSystem Body -> Body -> Body -> ([(Body, Orbit Body)], (Body, Orbit Body), [(Body, Orbit Body)])

-- | <a>pathBetween_</a> takes a <a>KSystem</a> system and a <b>from</b>
--   <a>Body</a> and a <b>to</b> <a>Body</a>. If one want's to reach the
--   <b>to</b> body from <b>from</b> body the bodys between are returnd,
--   without the common body.
pathBetween_ :: KSystem Body -> Body -> Body -> [Body]

-- | <a>pathBetween</a> takes a <a>KSystem</a> system and <b>from</b>
--   <a>Body</a> and a <b>to</b> <a>Body</a>. If one want's to reach the
--   <b>to</b> body from <b>from</b> body the bodys between and their orbit
--   around their centerBody are returnd. They are returnd as triple, with
--   the overlapping body in the center of the triple and the path of the
--   <b>from</b> body in the first element of the triple. The path of the
--   <b>to</b> body in the last element of the triple.
pathBetween' :: KSystem Body -> Body -> Body -> ([Body], Body, [Body])

-- | <a>pathSpeeds</a> takes the result of <a>pathOBetween</a> and
--   calculates the corresponding orbital speeds.
pathSpeeds :: [(Body, Orbit Body)] -> [Speed]

-- | <a>orbitalSpeed</a> returns the orbital velocity of the given orbit.
orbitalSpeed :: (Orbit Body) -> Speed


module System.KSP.Universe

-- | <a>kMoho</a> is the definition of Moho
kMoho :: Body

-- | <a>kGilly</a> is the definition of Gilly
kGilly :: Body

-- | <a>kEve</a> is the definition of Eve
kEve :: Body

-- | <a>kMun</a> is the definition of Mun
kMun :: Body

-- | <a>kMinmus</a> is the definition of Minmus
kMinmus :: Body

-- | <a>kKerbin</a> is the definition of Kerbin
kKerbin :: Body

-- | <a>kIke</a> is the definition of Ike
kIke :: Body

-- | <a>kDres</a> is the definition of Dres
kDres :: Body

-- | <a>kDuna</a> is the definition of Duna
kDuna :: Body

-- | <a>kLaythe</a> is the definition of Laythe
kLaythe :: Body

-- | <a>kVall</a> is the definition of Vall
kVall :: Body

-- | <a>kTylo</a> is the definition of Tylo
kTylo :: Body

-- | <a>kBop</a> is the definition of Bop
kBop :: Body

-- | <a>kPol</a> is the definition of Pol
kPol :: Body

-- | <a>kJool</a> is the definition of Jool
kJool :: Body

-- | <a>kEeloo</a> is the definition of Eeloo
kEeloo :: Body

-- | <a>kKerbol</a> is the definition of Kerbol
kKerbol :: Body

-- | <a>kGillyOrbit</a> is the definition of the Orbit of Gilly
kGillyOrbit :: Orbit Body

-- | <a>kMunOrbit</a> is the definition of the Orbit of Mun
kMunOrbit :: Orbit Body

-- | <a>kMinmusOrbit</a> is the definition of the Orbit of Minmus
kMinmusOrbit :: Orbit Body

-- | <a>kIkeOrbit</a> is the definition of the Orbit of Ike
kIkeOrbit :: Orbit Body

-- | <a>kLaytheOrbit</a> is the definition of the Orbit of Laythe
kLaytheOrbit :: Orbit Body

-- | <a>kVallOrbit</a> is the definition of the Orbit of Vall
kVallOrbit :: Orbit Body

-- | <a>kTyloOrbit</a> is the definition of the Orbit of Tylo
kTyloOrbit :: Orbit Body

-- | <a>kBopOrbit</a> is the definition of the Orbit of Bop
kBopOrbit :: Orbit Body

-- | <a>kPolOrbit</a> is the definition of the Orbit of Pol
kPolOrbit :: Orbit Body

-- | <a>kMohoOrbit</a> is the definition of the Orbit of Moho
kMohoOrbit :: Orbit Body

-- | <a>kEveOrbit</a> is the definition of the Orbit of Eve
kEveOrbit :: Orbit Body

-- | <a>kKerbinOrbit</a> is the definition of the Orbit of Kerbin
kKerbinOrbit :: Orbit Body

-- | <a>kDunaOrbit</a> is the definition of the Orbit of Duna
kDunaOrbit :: Orbit Body

-- | <a>kDresOrbit</a> is the definition of the Orbit of Dres
kDresOrbit :: Orbit Body

-- | <a>kJoolOrbit</a> is the definition of the Orbit of Jool
kJoolOrbit :: Orbit Body

-- | <a>kEelooOrbit</a> is the definition of the Orbit of Eeloo
kEelooOrbit :: Orbit Body


-- | <h1>Simple Calculation</h1>
--   
--   The folowing should show some basic calculations that can be done with
--   this library.
--   
--   <h2>Orbital Velocity</h2>
--   
--   The orbital velocity of something in an 80k orbit around kerbin could
--   be calculated by:
--   
--   <pre>
--   &gt;&gt;&gt; v_orbKerbin 80e3
--   2278.9316462467027
--   </pre>
--   
--   The corresponding velocity of a 100k orbit is calculated via:
--   
--   <pre>
--   &gt;&gt;&gt; v_orbKerbin 100e3
--   2246.1395532335027
--   </pre>
--   
--   <h2>Paths</h2>
--   
--   Paths are always calculated within an existing system. Typically is
--   such a system the one around kerbol.
--   
--   <pre>
--   &gt;&gt;&gt; let ksp_system = (system . celestial $ kKerbol) :: KSystem Body
--   
--   &gt;&gt;&gt; :t ksp_system
--   ksp_system :: KSystem Body
--   </pre>
--   
--   An easy path is the one between mun and minmus, via kerbin. This one
--   is calculated via:
--   
--   <pre>
--   &gt;&gt;&gt; pathBetween ksp_system kMun kMinmus
--   [R/Mun,R/Kerbin,R/Minmus]
--   </pre>
--   
--   A much wieder path would be the one between kerbins moon minmus and
--   jools moon tylo. The path could be calculated via:
--   
--   <pre>
--   &gt;&gt;&gt; pathBetween ksp_system kMinmus kTylo
--   [R/Minmus,R/Kerbin,R/Kerbol,R/Jool,R/Tylo]
--   </pre>
--   
--   <h2>Paths with Orbits</h2>
--   
--   The function <a>pathOBetween</a> calculates not only the path between
--   two given bodys. It also calculates the orbit, of each body. For the
--   path between mun and minmus, the orbits of mun and minmus (each around
--   kerbin) are also returned.
--   
--   <pre>
--   &gt;&gt;&gt; pathOBetween ksp_system kMun kMinmus
--   [(R/Mun,Around R/Kerbin (1.14e7|1.14e7)),(R/Minmus,Around R/Kerbin
--   (4.64e7|4.64e7))]
--   </pre>
--   
--   <h2>Path speeds</h2>
--   
--   To calculate the differences in deltaV between different orbits, do
--   the following. First calculate the <a>pathOBetween</a>, then take that
--   result and feed it into <a>pathSpeeds</a> to get the orbital speeds
--   along the path.
--   
--   <pre>
--   &gt;&gt;&gt; let pathMunMinmus = pathOBetween ksp_system kMun kMinmus
--   
--   &gt;&gt;&gt; pathSpeeds pathMunMinmus
--   [542.4942415070719,274.11754059162286]
--   </pre>
--   
--   The orbital velocity of the Mun is 542.5 m/s, the one around Minmus is
--   274.1 m/s.
--   
--   <h2>Hohmann Transfair</h2>
--   
--   To do a hohmann transfair of a low kerbin orbit (100km) to the orbit
--   of Mun (47Mm) the following burns must be done.
--   
--   <pre>
--   &gt;&gt;&gt; let o1 = mkCircOrbit kKerbin 100e3
--   
--   &gt;&gt;&gt; let o2 = mkCircOrbit kKerbin 47000e3
--   
--   &gt;&gt;&gt; hohmann o1 o2
--   (907.2791882798308,226.01062520890378)
--   </pre>
--   
--   Lets save these two speeds:
--   
--   <pre>
--   &gt;&gt;&gt; let (v1, v2) = hohmann o1 o2
--   </pre>
--   
--   To calculate the transfair orbit from orbit o1 to orbit o2, the speed
--   v1 has to be applied within the orbit o1.
--   
--   <pre>
--   &gt;&gt;&gt; burnFromCircOrb o1 v1
--   Around R/Kerbin (4.7000000000000596e7|100000.0)
--   </pre>
--   
--   Again save that orbit into o12
--   
--   <pre>
--   &gt;&gt;&gt; let o12 = burnFromCircOrb o1 v1
--   </pre>
--   
--   And apply the speed v2 to the transfair orbit o12:
--   
--   <pre>
--   &gt;&gt;&gt; burnAtApoapsis o12 v2
--   Around R/Kerbin (4.700000000000125e7|4.7000000000000596e7)
--   </pre>
--   
--   Which is the desired, circular orbit, with the height of round 47Mm.
module System.KSP.KSP

-- | To calculate the orbital velocity of a circular orbit around kerbin,
--   <a>v_orbKerbin</a> uses <a>v_orb</a> with <a>kKerbin</a> as default
--   parameter.
v_orbKerbin :: Height -> Speed

-- | <a>v_orb</a> calculates the velocity within an orbit around
--   <a>Body</a> b, <a>Height</a> h meters above the ground.
v_orb :: Height -> Body -> Speed
