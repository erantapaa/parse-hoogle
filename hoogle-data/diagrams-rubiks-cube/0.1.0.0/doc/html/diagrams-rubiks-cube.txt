-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Library for drawing the Rubik's Cube.
--   
@package diagrams-rubiks-cube
@version 0.1.0.0

module Diagrams.RubiksCube.Move

-- | A move in <a>standard notation</a>.
data Move
D :: Move
D' :: Move
U :: Move
U' :: Move
L :: Move
L' :: Move
R :: Move
R' :: Move
F :: Move
F' :: Move
B :: Move
B' :: Move

-- | Swaps left and right.
mirror :: Move -> Move

-- | The opposite move.
invert :: Move -> Move
instance Eq Move
instance Show Move
instance Read Move

module Diagrams.RubiksCube.Model

-- | One side of the Rubik's Cube with 3*3 facets.
data Side a
Side :: a -> a -> a -> a -> a -> a -> a -> a -> a -> Side a
_topLeft :: Side a -> a
_topCenter :: Side a -> a
_topRight :: Side a -> a
_middleLeft :: Side a -> a
_middleCenter :: Side a -> a
_middleRight :: Side a -> a
_bottomLeft :: Side a -> a
_bottomCenter :: Side a -> a
_bottomRight :: Side a -> a
topLeft :: Lens' (Side a_a7Mz) a_a7Mz
topCenter :: Lens' (Side a_a7Mz) a_a7Mz
topRight :: Lens' (Side a_a7Mz) a_a7Mz
middleLeft :: Lens' (Side a_a7Mz) a_a7Mz
middleCenter :: Lens' (Side a_a7Mz) a_a7Mz
middleRight :: Lens' (Side a_a7Mz) a_a7Mz
bottomLeft :: Lens' (Side a_a7Mz) a_a7Mz
bottomCenter :: Lens' (Side a_a7Mz) a_a7Mz
bottomRight :: Lens' (Side a_a7Mz) a_a7Mz

-- | Rotate the side clockwise.
rotateSideCW :: Aut (Side a)

-- | Rotate the side counter-clockwise.
rotateSideCCW :: Aut (Side a)

-- | A cube with six sides.
--   
--   <pre>
--       +---+
--       | u |
--   +---+---+---+---+
--   | l | f | r | b |
--   +---+---+---+---+
--       | d |
--       +---+
--   </pre>
data Cube a
Cube :: a -> a -> a -> a -> a -> a -> Cube a
_frontSide :: Cube a -> a
_backSide :: Cube a -> a
_leftSide :: Cube a -> a
_rightSide :: Cube a -> a
_upSide :: Cube a -> a
_downSide :: Cube a -> a
frontSide :: Lens' (Cube a_aaoj) a_aaoj
backSide :: Lens' (Cube a_aaoj) a_aaoj
leftSide :: Lens' (Cube a_aaoj) a_aaoj
rightSide :: Lens' (Cube a_aaoj) a_aaoj
upSide :: Lens' (Cube a_aaoj) a_aaoj
downSide :: Lens' (Cube a_aaoj) a_aaoj

-- | A normal Rubik's cube with 6 sides with 9 facets each.
newtype RubiksCube a
RubiksCube :: Cube (Side a) -> RubiksCube a
_cube :: RubiksCube a -> Cube (Side a)
cube :: Iso (RubiksCube a_ab54) (RubiksCube a_abbu) (Cube (Side a_ab54)) (Cube (Side a_abbu))

-- | A list of fixed length 3.
data Vec3 a
Vec3 :: a -> a -> a -> Vec3 a

-- | The top three facets (from left to right).
topRow :: Lens' (Side a) (Vec3 a)

-- | The middle three facets (from left to right).
middleRow :: Lens' (Side a) (Vec3 a)

-- | The bottom three facets (from left to right).
bottomRow :: Lens' (Side a) (Vec3 a)

-- | The left column (from top to down).
leftCol :: Lens' (Side a) (Vec3 a)

-- | The center column (from top to down).
centerCol :: Lens' (Side a) (Vec3 a)

-- | The right column (from top to down).
rightCol :: Lens' (Side a) (Vec3 a)

-- | The 21=4*3+9 facets in the top layer.
topLayerFacets :: Traversal' (RubiksCube a) a

-- | The 12=4*3 facets in the middle layer.
middleLayerFacets :: Traversal' (RubiksCube a) a

-- | The 21=4*3+9 facets in the bottom layer.
bottomLayerFacets :: Traversal' (RubiksCube a) a

-- | The six facets that are the center of their side.
centerFacets :: Traversal' (RubiksCube a) a

-- | The 24=6*4=8*3 corner facets.
cornerFacets :: Traversal' (RubiksCube a) a

-- | The 24=6*4=12*2 edge facets.
edgeFacets :: Traversal' (RubiksCube a) a

-- | The type of automorphisms
type Aut a = Iso' a a

-- | Rotate the whole Rubik's Cube such that the front side becomes the new
--   left side and the top and bottom sides stay fixed.
rotateLeft :: Aut (RubiksCube a)

-- | Rotate the whole Rubik's Cube such that the front side becomes the new
--   right side and the top and bottom sides stay fixed.
rotateRight :: Aut (RubiksCube a)

-- | Rotate the whole Rubik's Cube such that the front side becomes the new
--   bottom side and the left and right sides stay fixed.
rotateDown :: Aut (RubiksCube a)

-- | Rotate the whole Rubik's Cube such that the front side becomes the new
--   top side and the left and right sides stay fixed.
rotateUp :: Aut (RubiksCube a)

-- | Rotate the whole Rubik's Cube such that the top side becomes the new
--   right side and the front and back sides stay fixed.
rotateCW :: Aut (RubiksCube a)

-- | Rotate the whole Rubik's Cube such that the top side becomes the new
--   left side and the front and back sides stay fixed.
rotateCCW :: Aut (RubiksCube a)

-- | Perform a move.
move :: Move -> Aut (RubiksCube a)

-- | Perform a list of moves.
doMoves :: [Move] -> Aut (RubiksCube a)

-- | Undo the actions of a list of moves.
undoMoves :: [Move] -> Aut (RubiksCube a)
instance Show a => Show (RubiksCube a)
instance Eq a => Eq (RubiksCube a)
instance Functor RubiksCube
instance Applicative RubiksCube
instance Show a => Show (Cube a)
instance Eq a => Eq (Cube a)
instance Functor Cube
instance Foldable Cube
instance Traversable Cube
instance Applicative Cube
instance Reversing (Side a)
instance Show a => Show (Vec3 a)
instance Eq a => Eq (Vec3 a)
instance Functor Vec3
instance Foldable Vec3
instance Traversable Vec3
instance Show a => Show (Vec4 a)
instance Eq a => Eq (Vec4 a)
instance Functor Vec4
instance Foldable Vec4
instance Traversable Vec4
instance Show a => Show (Side a)
instance Eq a => Eq (Side a)
instance Functor Side
instance Foldable Side
instance Traversable Side
instance Applicative Side
instance Applicative Vec4
instance Reversing (Vec3 a)
instance Applicative Vec3

module Diagrams.RubiksCube.Draw

-- | The solved cube.
--   
solvedRubiksCube :: RubiksCube (Colour Double)

-- | Draws one 3x3 side of the cube.
--   
drawSide :: Renderable (Path R2) b => R2 -> R2 -> Side (Colour Double) -> Diagram b R2

-- | Draw the folding pattern of the cube. The front side is at the center
--   of the pattern.
drawFoldingPattern :: Renderable (Path R2) b => RubiksCube (Colour Double) -> Diagram b R2

data Offsets
Offsets :: Double -> Double -> Offsets
_offsetX :: Offsets -> Double
_offsetY :: Offsets -> Double
offsetX :: Lens' Offsets Double
offsetY :: Lens' Offsets Double

-- | Draw the Rubik's cube in parallel perspective.
--   
--   
--   <pre>
--   import Diagrams.RubiksCube
--   import Control.Lens
--   drawCubeExample =
--     let c = solvedRubiksCube ^. undoMoves [R,U,R',U']
--     in drawRubiksCube with c
--   </pre>
drawRubiksCube :: Renderable (Path R2) b => Offsets -> RubiksCube (Colour Double) -> Diagram b R2

-- | Draw the Rubik's cube in parallel perspective with an arrow indicating
--   the next move. If the the bottom layer is moved, the cube will be
--   shown from below.
--   
--   
--   <pre>
--   import Diagrams.RubiksCube
--   import Control.Lens
--   drawMoveExample =
--     let c = solvedRubiksCube ^. undoMoves [L,U,L',U']
--     in drawMove L with c
--   </pre>
drawMove :: Renderable (Path R2) b => Move -> Offsets -> RubiksCube (Colour Double) -> Diagram b R2
data MovesSettings
MovesSettings :: Double -> Bool -> Bool -> Offsets -> MovesSettings

-- | space between cubes
_moveSep :: MovesSettings -> Double

-- | show the start configuration?
_showStart :: MovesSettings -> Bool

-- | show the end configuration?
_showEnd :: MovesSettings -> Bool
_offsets :: MovesSettings -> Offsets
moveSep :: Lens' MovesSettings Double
showStart :: Lens' MovesSettings Bool
showEnd :: Lens' MovesSettings Bool
offsets :: Lens' MovesSettings Offsets

-- | Draws a sequence of moves.
--   
--   
--   <pre>
--   import Diagrams.RubiksCube
--   import Control.Lens
--   drawMovesExample =
--     let moves = [R, F', R', D', F, F]
--         startPos = solvedRubiksCube ^. undoMoves moves
--         settings = with &amp; showStart .~ True
--     in drawMoves settings startPos moves
--   </pre>
drawMoves :: Renderable (Path R2) b => MovesSettings -> RubiksCube (Colour Double) -> [Move] -> Diagram b R2

-- | Like <a>drawMoves</a>, but takes the end configuration instead of the
--   start configuration. The previous example can be simplified with this:
--   
--   <pre>
--   import Diagrams.RubiksCube
--   import Control.Lens
--   drawMovesExample' =
--     let moves = [R, F', R', D', F, F]
--         endPos = solvedRubiksCube
--         settings = with &amp; showStart .~ True
--     in drawMovesBackward settings endPos moves
--   </pre>
drawMovesBackward :: Renderable (Path R2) b => MovesSettings -> RubiksCube (Colour Double) -> [Move] -> Diagram b R2
instance Default MovesSettings
instance Eq MovesSettings
instance Show MovesSettings
instance Read MovesSettings
instance Default Offsets
instance Show Offsets
instance Eq Offsets
instance Read Offsets

module Diagrams.RubiksCube
