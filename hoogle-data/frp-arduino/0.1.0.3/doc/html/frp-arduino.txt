-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Arduino programming without the hassle of C.
--   
--   Arduino programming without the hassle of C.
@package frp-arduino
@version 0.1.0.3

module Arduino.DSL
type Action a = State DAGState a
data Stream a
data Output a
data LLI a
compileProgram :: Action a -> IO ()
def :: Stream a -> Action (Stream a)
(=:) :: Output a -> Stream a -> Action ()
foo :: Output a -> (Stream b -> Stream a) -> Output b
data Expression a
data Bit
bitHigh :: Expression Bit
bitLow :: Expression Bit
flipBit :: Expression Bit -> Expression Bit
isHigh :: Expression Bit -> Expression Bool
boolToBit :: Expression Bool -> Expression Bit
type Byte = Word8
type Word = Word16
isEven :: Expression Word -> Expression Bool
greater :: Expression Word -> Expression Word -> Expression Bool
formatString :: String -> Expression [Byte]
formatNumber :: Expression Word -> Expression [Byte]
pack2 :: (Expression a1, Expression a2) -> Expression (a1, a2)
pack6 :: (Expression a1, Expression a2, Expression a3, Expression a4, Expression a5, Expression a6) -> Expression (a1, a2, a3, a4, a5, a6)
unpack2 :: Expression (a1, a2) -> (Expression a1, Expression a2)
unpack6 :: Expression (a1, a2, a3, a4, a5, a6) -> (Expression a1, Expression a2, Expression a3, Expression a4, Expression a5, Expression a6)
output2 :: Output a1 -> Output a2 -> Output (a1, a2)
output6 :: Output a1 -> Output a2 -> Output a3 -> Output a4 -> Output a5 -> Output a6 -> Output (a1, a2, a3, a4, a5, a6)
if_ :: Expression Bool -> Expression a -> Expression a -> Expression a

-- | Similar to map in Haskell. "S" is for stream.
mapS :: (Expression a -> Expression b) -> Stream a -> Stream b

-- | Contrast with <a>flattenS</a>.
mapSMany :: (Expression a -> [Expression b]) -> Stream a -> Stream b
mapS2 :: (Expression a -> Expression b -> Expression c) -> Stream a -> Stream b -> Stream c
filterS :: (Expression a -> Expression Bool) -> Stream a -> Stream a

-- | Similar to fold in Haskell. "S" is for stream.
--   
--   Inspired by <a>Elm's</a> <a>foldp</a>.
foldpS :: (Expression a -> Expression b -> Expression b) -> Expression b -> Stream a -> Stream b

-- | Contrast with <a>mapSMany</a>.
flattenS :: Stream [a] -> Stream a

-- | Needs a tuple created with <a>pack2</a>.
delay :: Stream (a, Word) -> Stream a
(~>) :: Stream a -> (Stream a -> Stream b) -> Stream b
createOutput :: String -> LLI () -> (LLI a -> LLI ()) -> Output a
createInput :: String -> LLI () -> LLI a -> Stream a
setBit :: String -> String -> LLI a -> LLI a
clearBit :: String -> String -> LLI a -> LLI a
writeBit :: String -> String -> LLI a -> LLI b -> LLI b
writeByte :: String -> LLI Byte -> LLI a -> LLI a
writeWord :: String -> LLI Word -> LLI a -> LLI a
readBit :: String -> String -> LLI Bit
readWord :: String -> LLI a -> LLI Word
waitBitSet :: String -> String -> LLI a -> LLI a
byteConstant :: Byte -> LLI Byte
wordConstant :: Word -> LLI Word
end :: LLI ()
instance Num (Expression a)

module Arduino.Library
toggle :: Stream Word -> Stream Bit
invert :: Stream Bit -> Stream Bit
count :: Stream a -> Stream Word
keepWhen :: Stream Bit -> Expression a -> Stream a -> Stream a

module Arduino.Library.LCD
type Command = (Bit, Bit, Bit, Bit, Bit, Word)
output :: Output Bit -> Output Bit -> Output Bit -> Output Bit -> Output Bit -> Output Bit -> Output Command
init :: [Expression Command]
text :: String -> [Expression Command]

module Arduino.Uno
data GPIO
digitalOutput :: GPIO -> Output Bit
digitalRead :: GPIO -> Stream Bit
pin3 :: GPIO
pin4 :: GPIO
pin5 :: GPIO
pin6 :: GPIO
pin7 :: GPIO
pin8 :: GPIO
pin10 :: GPIO
pin11 :: GPIO
pin12 :: GPIO
pin13 :: GPIO
uart :: Output Byte
timerDelta :: Stream Word
every :: Expression Word -> Stream Word
clock :: Stream Word
