-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Conveniently run shell commands
--   
--   This is a standalone version of the powerful and intuitive command
--   line functions present in the Shake build system.
--   
--   They are intended as an easy-to-remember, easy-to-use alternative to
--   the System.Process functions.
--   
--   All credit goes to the Shake author! I hope he'll take it over as a
--   standalone project.
--   
--   CHANGELOG
--   
--   Version 0.1.0
--   
--   <ul>
--   <li>Initial version, copied from Shake.</li>
--   </ul>
@package command
@version 0.1.1

module System.Command

-- | Execute a system command. Before running <a>command</a> make sure you
--   <a>need</a> any files that are required by the command.
--   
--   This function takes a list of options (often just <tt>[]</tt>, see
--   <a>CmdOption</a> for the available options), the name of the
--   executable (either a full name, or a program on the <tt>$PATH</tt>)
--   and a list of arguments. The result is often <tt>()</tt>, but can be a
--   tuple containg any of <a>Stdout</a>, <a>Stderr</a> and <a>Exit</a>.
--   Some examples:
--   
--   <pre>
--   <a>command_</a> [] "gcc" ["-c","myfile.c"]                          -- compile a file, throwing an exception on failure
--   <a>Exit</a> c &lt;- <a>command</a> [] "gcc" ["-c",myfile]                     -- run a command, recording the exit code
--   (<a>Exit</a> c, <a>Stderr</a> err) &lt;- <a>command</a> [] "gcc" ["-c","myfile.c"]   -- run a command, recording the exit code and error output
--   <a>Stdout</a> out &lt;- <a>command</a> [] "gcc" ["-MM","myfile.c"]            -- run a command, recording the output
--   <a>command_</a> [<a>Cwd</a> "generated"] "gcc" ["-c",myfile]               -- run a command in a directory
--   </pre>
--   
--   Unless you retrieve the <a>ExitCode</a> using <a>Exit</a>, any
--   <a>ExitFailure</a> will throw an error, including the <a>Stderr</a> in
--   the exception message. If you capture the <a>Stdout</a> or
--   <a>Stderr</a>, that stream will not be echoed to the console, unless
--   you use the option <a>EchoStdout</a> or <a>EchoStderr</a>.
--   
--   If you use <a>command</a> inside a <tt>do</tt> block and do not use
--   the result, you may get a compile-time error about being unable to
--   deduce <a>CmdResult</a>. To avoid this error, use <a>command_</a>.
command :: CmdResult r => [CmdOption] -> String -> [String] -> IO r

-- | A version of <a>command</a> where you do not require any results, used
--   to avoid errors about being unable to deduce <a>CmdResult</a>.
command_ :: [CmdOption] -> String -> [String] -> IO ()

-- | A variable arity version of <a>command</a>.
--   
--   <ul>
--   <li><tt>String</tt> arguments are treated as whitespace separated
--   arguments.</li>
--   <li><tt>[String]</tt> arguments are treated as literal arguments.</li>
--   <li><a>CmdOption</a> arguments are used as options.</li>
--   </ul>
--   
--   To take the examples from <a>command</a>:
--   
--   <pre>
--   () &lt;- <a>cmd</a> "gcc -c myfile.c"                                  -- compile a file, throwing an exception on failure
--   <a>Exit</a> c &lt;- <a>cmd</a> "gcc -c" [myfile]                              -- run a command, recording the exit code
--   (<a>Exit</a> c, <a>Stderr</a> err) &lt;- <a>cmd</a> "gcc -c myfile.c"                -- run a command, recording the exit code and error output
--   <a>Stdout</a> out &lt;- <a>cmd</a> "gcc -MM myfile.c"                         -- run a command, recording the output
--   <a>cmd</a> (<a>Cwd</a> "generated") "gcc -c" [myfile] :: <a>IO</a> ()         -- run a command in a directory
--   </pre>
--   
--   When passing file arguments we use <tt>[myfile]</tt> so that if the
--   <tt>myfile</tt> variable contains spaces they are properly escaped.
--   
--   If you use <a>cmd</a> inside a <tt>do</tt> block and do not use the
--   result, you may get a compile-time error about being unable to deduce
--   <a>CmdResult</a>. To avoid this error, bind the result to <tt>()</tt>,
--   or include a type signature.
cmd :: CmdArguments args => args :-> IO r

-- | Collect the <tt>stdout</tt> of the process. If you are collecting the
--   <tt>stdout</tt>, it will not be echoed to the terminal, unless you
--   include <a>EchoStdout</a>.
newtype Stdout
Stdout :: String -> Stdout
fromStdout :: Stdout -> String

-- | Collect the <tt>stderr</tt> of the process. If you are collecting the
--   <tt>stderr</tt>, it will not be echoed to the terminal, unless you
--   include <a>EchoStderr</a>.
newtype Stderr
Stderr :: String -> Stderr
fromStderr :: Stderr -> String

-- | Collect the <a>ExitCode</a> of the process. If you do not collect the
--   exit code, any <a>ExitFailure</a> will cause an exception.
newtype Exit
Exit :: ExitCode -> Exit
fromExit :: Exit -> ExitCode

-- | A class for specifying what results you want to collect from a
--   process. Values are formed of <a>Stdout</a>, <a>Stderr</a>,
--   <a>Exit</a> and tuples of those.
class CmdResult a

-- | Options passed to <a>command</a> or <a>cmd</a> to control how
--   processes are executed.
data CmdOption

-- | Change the current directory in the spawned process. By default uses
--   this processes current directory.
Cwd :: FilePath -> CmdOption

-- | Change the environment variables in the spawned process. By default
--   uses this processes environment.
Env :: [(String, String)] -> CmdOption

-- | Given as the <tt>stdin</tt> of the spawned process. By default no
--   <tt>stdin</tt> is given.
Stdin :: String -> CmdOption

-- | Pass the command to the shell without escaping - any arguments will be
--   joined with spaces. By default arguments are escaped properly.
Shell :: CmdOption

-- | Treat the <tt>stdin</tt>/<tt>stdout</tt>/<tt>stderr</tt> messages as
--   binary. By default streams use text encoding.
BinaryPipes :: CmdOption

-- | Name to use with <tt>traced</tt>, or <tt>""</tt> for no tracing. By
--   default traces using the name of the executable.
Traced :: String -> CmdOption

-- | Should I include the <tt>stderr</tt> in the exception if the command
--   fails? Defaults to <a>True</a>.
WithStderr :: Bool -> CmdOption

-- | Should I echo the <tt>stdout</tt>? Defaults to <a>True</a> unless a
--   <a>Stdout</a> result is required.
EchoStdout :: Bool -> CmdOption

-- | Should I echo the <tt>stderr</tt>? Defaults to <a>True</a> unless a
--   <a>Stderr</a> result is required.
EchoStderr :: Bool -> CmdOption
instance Eq CmdOption
instance Ord CmdOption
instance Show CmdOption
instance Eq Result
instance Arg [CmdOption]
instance Arg CmdOption
instance Arg [String]
instance Arg String
instance CmdResult r => CmdArguments (IO r)
instance (Arg a, CmdArguments r) => CmdArguments (a -> r)
instance (CmdResult x1, CmdResult x2, CmdResult x3) => CmdResult (x1, x2, x3)
instance (CmdResult x1, CmdResult x2) => CmdResult (x1, x2)
instance CmdResult ()
instance CmdResult Stderr
instance CmdResult Stdout
instance CmdResult ExitCode
instance CmdResult Exit
