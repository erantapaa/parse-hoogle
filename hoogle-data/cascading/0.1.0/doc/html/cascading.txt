-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | DSL for HTML CSS (Cascading Style Sheets)
--   
--   This library implements an HTML-specific domain-specific language for
--   cascading style sheets (CSS) in the spirit of blaze-html. See the
--   documentation of the Data.CSS module for a tutorial.
@package cascading
@version 0.1.0


module Data.CSS.Utils

-- | Render the given list of builders separated by commas.
commas :: [Builder] -> Builder

-- | Render the given list of builders separated by commas.
commasBS :: [ByteString] -> Builder

-- | Renders the given CSS string in double-quotes, escaped as necessary.
cssString :: Text -> Builder

-- | <tt>showHexInt p n</tt> builds the hexadecimal representation of
--   <tt>n</tt> with at least <tt>p</tt> digits. Prepends zeroes to fill.
showHexInt :: Integral a => Int -> a -> Builder

-- | Lossily convert the given <a>Real</a> number into a decimal
--   representation suitable for CSS.
showReal :: Real a => a -> Builder


module Data.CSS.Properties.Classes

-- | Class of types, which feature CSS lengths.
--   
--   Minimal complete definition: <a>_Em</a>, <a>_Ex</a>, <a>_Mm</a>,
--   <a>_Px</a>, <a>zeroLen</a>.
class HasLength len where _Cm = _Mm . iso (/ 10) (* 10) _In = _Mm . iso (/ 25.4) (* 25.4) _Pc = _Mm . iso (/ (127 / 30)) (* (127 / 30)) _Pt = _Mm . iso (/ (127 / 360)) (* (127 / 360))
_Cm :: (HasLength len, Fractional a, Real a) => Prism' (len a) a
_Em :: (HasLength len, Fractional a, Real a) => Prism' (len a) a
_Ex :: (HasLength len, Fractional a, Real a) => Prism' (len a) a
_In :: (HasLength len, Fractional a, Real a) => Prism' (len a) a
_Mm :: (HasLength len, Fractional a, Real a) => Prism' (len a) a
_Pc :: (HasLength len, Fractional a, Real a) => Prism' (len a) a
_Pt :: (HasLength len, Fractional a, Real a) => Prism' (len a) a
_Px :: (HasLength len, Fractional a, Real a) => Prism' (len a) a
zeroLen :: HasLength len => len a

-- | Class for length types with a notion of automatic length.
class HasAutoLength len
autoLen :: HasAutoLength len => len a

-- | Class for length types with percentages.
--   
--   Minimal complete definition: <a>_Factor</a>.
class HasPercent len where _Percent = _Factor . iso (* 100) (/ 100)
_Factor :: (HasPercent len, Fractional a, Real a) => Prism' (len a) a
_Percent :: (HasPercent len, Fractional a, Real a) => Prism' (len a) a


module Data.CSS.Types

-- | Cascading style sheets.
data CSS
CSS :: Map Text (Set MediaType) -> Map (Set MediaType) [Property] -> CSS

-- | External stylesheets (url, media-type).
_cssImports :: CSS -> Map Text (Set MediaType)

-- | Properties.
_cssProps :: CSS -> Map (Set MediaType) [Property]
cssImports :: Lens' CSS (Map Text (Set MediaType))
cssProps :: Lens' CSS (Map (Set MediaType) [Property])

-- | Style properties.
data Property
Property :: [Selector] -> PropName -> PropValue -> Bool -> Property

-- | Selector for this property.
_propSelector :: Property -> [Selector]

-- | Property name.
_propName :: Property -> PropName

-- | Property value.
_propValue :: Property -> PropValue

-- | <tt>!important</tt> property?
_propImportant :: Property -> Bool
propName :: Lens' Property PropName
propSelector :: Lens' Property [Selector]
propValue :: Lens' Property PropValue
propImportant :: Lens' Property Bool

-- | CSS builder configuration.
data BuildCfg
BuildCfg :: Set MediaType -> [Selector] -> BuildCfg

-- | Current media type.
_bcMedia :: BuildCfg -> Set MediaType

-- | Current selector.
_bcSelector :: BuildCfg -> [Selector]
bcMedia :: Lens' BuildCfg (Set MediaType)
bcSelector :: Lens' BuildCfg [Selector]

-- | Property setter.
type SetProp = forall m. SetPropM m

-- | Parametric property setter.
type SetPropM m = (MonadReader BuildCfg m, MonadWriter CSS m) => m ()

-- | Media types, e.g. <tt>all</tt> or <tt>print</tt>.
newtype MediaType
MediaType :: ByteString -> MediaType
_mediaTypeStr :: MediaType -> ByteString
mediaTypeStr :: Iso' MediaType ByteString

-- | Property names, e.g. <tt>font-family</tt>.
newtype PropName
PropName :: ByteString -> PropName
_propNameStr :: PropName -> ByteString
propNameStr :: Iso' PropName ByteString

-- | Property values, e.g. <tt>sans-serif</tt>.
newtype PropValue
PropValue :: ByteString -> PropValue
_propValueStr :: PropValue -> ByteString
propValueStr :: Iso' PropValue ByteString

-- | Selectors, e.g. <tt>*</tt> or <tt>#content p</tt>.
newtype Selector
Selector :: ByteString -> Selector
_selectorStr :: Selector -> ByteString
selectorStr :: Iso' Selector ByteString

-- | Types that feature a conversion function to <a>PropValue</a>.
class ToPropValue a where toPropBuilder = fromByteString . _propValueStr . toPropValue toPropValue = PropValue . toByteString . toPropBuilder
toPropBuilder :: ToPropValue a => a -> Builder
toPropValue :: ToPropValue a => a -> PropValue
instance [incoherent] Typeable MediaType
instance [incoherent] Typeable PropName
instance [incoherent] Typeable PropValue
instance [incoherent] Typeable Selector
instance [incoherent] Typeable Property
instance [incoherent] Typeable CSS
instance [incoherent] Typeable BuildCfg
instance [incoherent] Data MediaType
instance [incoherent] Eq MediaType
instance [incoherent] Ord MediaType
instance [incoherent] Read MediaType
instance [incoherent] Show MediaType
instance [incoherent] Data PropName
instance [incoherent] Eq PropName
instance [incoherent] Ord PropName
instance [incoherent] Read PropName
instance [incoherent] Show PropName
instance [incoherent] Data PropValue
instance [incoherent] Eq PropValue
instance [incoherent] Ord PropValue
instance [incoherent] Read PropValue
instance [incoherent] Show PropValue
instance [incoherent] Data Selector
instance [incoherent] Eq Selector
instance [incoherent] Ord Selector
instance [incoherent] Read Selector
instance [incoherent] Show Selector
instance [incoherent] Data Property
instance [incoherent] Eq Property
instance [incoherent] Ord Property
instance [incoherent] Read Property
instance [incoherent] Show Property
instance [incoherent] Data CSS
instance [incoherent] Eq CSS
instance [incoherent] Ord CSS
instance [incoherent] Read CSS
instance [incoherent] Show CSS
instance [incoherent] Data BuildCfg
instance [incoherent] Eq BuildCfg
instance [incoherent] Ord BuildCfg
instance [incoherent] Read BuildCfg
instance [incoherent] Show BuildCfg
instance [incoherent] IsString Selector
instance [incoherent] ToPropValue PropValue
instance [incoherent] IsString PropValue
instance [incoherent] IsString PropName
instance [incoherent] IsString MediaType
instance [incoherent] Monoid CSS
instance [incoherent] (ToPropValue a, ToPropValue b, ToPropValue c) => ToPropValue (a, b, c)
instance [incoherent] (ToPropValue a, ToPropValue b) => ToPropValue (a, b)
instance [incoherent] ToPropValue a => ToPropValue [a]
instance [incoherent] (Floating a, RealFrac a) => ToPropValue (Colour a)
instance [incoherent] (Floating a, RealFrac a) => ToPropValue (AlphaColour a)
instance [incoherent] ToPropValue Text
instance [incoherent] ToPropValue Text
instance [incoherent] ToPropValue [Char]
instance [incoherent] ToPropValue Char
instance [incoherent] ToPropValue ByteString
instance [incoherent] ToPropValue ByteString
instance [incoherent] Integral a => ToPropValue (Ratio a)
instance [incoherent] ToPropValue Word64
instance [incoherent] ToPropValue Word32
instance [incoherent] ToPropValue Word16
instance [incoherent] ToPropValue Word8
instance [incoherent] ToPropValue Word
instance [incoherent] ToPropValue Integer
instance [incoherent] ToPropValue Int64
instance [incoherent] ToPropValue Int32
instance [incoherent] ToPropValue Int16
instance [incoherent] ToPropValue Int8
instance [incoherent] ToPropValue Int
instance [incoherent] ToPropValue Float
instance [incoherent] ToPropValue Double


module Data.CSS.Properties.Compat

-- | Adds vendor-prefixed properties for all properties in the given style
--   sheet. The following vendors are currently added:
--   
--   <ul>
--   <li>Microsoft (<tt>-ms-</tt>),</li>
--   <li>Mozilla (<tt>-moz-</tt>),</li>
--   <li>Opera (<tt>-o-</tt>),</li>
--   <li>WebKit (<tt>-webkit-</tt>).</li>
--   </ul>
--   
--   This combinator keeps the original (non-prefixed) property and does
--   not prefix properties that already have a vendor prefix.
vendors :: MonadWriter CSS m => m a -> m a


module Data.CSS.Properties.Utils

-- | Convenience wrapper around <a>maybe</a> for properties. Renders as the
--   given bytestring if <a>Nothing</a>.
maybeBuilder :: ToPropValue a => ByteString -> Maybe a -> Builder

-- | Convenience wrapper around <a>maybe</a> for properties. Renders as the
--   given bytestring if <a>Nothing</a>.
maybeProp :: ToPropValue a => ByteString -> Maybe a -> PropValue


module Data.CSS.Properties.Types

-- | Length transformer to add lengths in various CSS units.
data Length a

-- | Length transformer to add automatic lengths.
data AutoLen len a

-- | Length transformer to add percental lengths.
data FactorLen len a

-- | CSS strings.
newtype CssString a
CssString :: a -> CssString a
getCssString :: CssString a -> a

-- | CSS URLs.
newtype CssUrl a
CssUrl :: a -> CssUrl a
getCssUrl :: CssUrl a -> a

-- | Edge-oriented specifications.
data Edge a

-- | All edges.
Edges :: [a] -> Edge a

-- | Bottom edge.
BottomEdge :: a -> Edge a

-- | Left edge.
LeftEdge :: a -> Edge a

-- | Right edge.
RightEdge :: a -> Edge a

-- | Top edge.
TopEdge :: a -> Edge a

-- | Background attachment.
data BackgroundAttachment

-- | <tt>fixed</tt> background.
FixedBgr :: BackgroundAttachment

-- | <tt>scroll</tt> background.
ScrollBgr :: BackgroundAttachment

-- | Background repeating.
data BackgroundRepeat

-- | <tt>no-repeat</tt>.
NoRepeat :: BackgroundRepeat

-- | <tt>repeat</tt> both axes.
Repeat :: BackgroundRepeat

-- | <tt>repeat-x</tt> axis.
RepeatX :: BackgroundRepeat

-- | <tt>repeat-y</tt> axis.
RepeatY :: BackgroundRepeat

-- | Border style.
data BorderStyle
NoBorder :: BorderStyle
HiddenBorder :: BorderStyle
DottedBorder :: BorderStyle
DashedBorder :: BorderStyle
SolidBorder :: BorderStyle
DoubleBorder :: BorderStyle
GrooveBorder :: BorderStyle
RidgeBorder :: BorderStyle
InsetBorder :: BorderStyle
OutsetBorder :: BorderStyle

-- | Border widths.
data BorderWidth a

-- | Custom border width.
BorderWidth :: (Length a) -> BorderWidth a

-- | Medium border width.
MediumWidth :: BorderWidth a

-- | Thick border width.
ThickWidth :: BorderWidth a

-- | Thin border width.
ThinWidth :: BorderWidth a

-- | Font families.
data FontFamily

-- | Generic <tt>cursive</tt> font.
CursiveFont :: FontFamily

-- | Generic <tt>fantasy</tt> font.
FantasyFont :: FontFamily

-- | Generic <tt>monospace</tt> font.
MonospaceFont :: FontFamily

-- | Generic <tt>sans-serif</tt> font.
SansSerifFont :: FontFamily

-- | Generic <tt>serif</tt> font.
SerifFont :: FontFamily

-- | Specific named font.
NamedFont :: (CssString Text) -> FontFamily

-- | Font sizes.
data FontSize a

-- | Absolutely <tt>xx-small</tt> size.
XXSmallSize :: FontSize a

-- | Absolutely <tt>x-small</tt> size.
XSmallSize :: FontSize a

-- | Absolutely <tt>small</tt> size.
SmallSize :: FontSize a

-- | Absolutely <tt>medium</tt> size.
MediumSize :: FontSize a

-- | Absolutely <tt>large</tt> size.
LargeSize :: FontSize a

-- | Absolutely <tt>x-large</tt> size.
XLargeSize :: FontSize a

-- | Absolutely <tt>xx-large</tt> size.
XXLargeSize :: FontSize a

-- | Relatively <tt>larger</tt> size.
LargerSize :: FontSize a

-- | Relatively <tt>smaller</tt> size.
SmallerSize :: FontSize a

-- | Specific font size.
LengthSize :: (FactorLen Length a) -> FontSize a

-- | Font styles.
data FontStyle

-- | Select <tt>italic</tt> style.
ItalicStyle :: FontStyle

-- | Select <tt>oblique</tt> style.
ObliqueStyle :: FontStyle

-- | Select <tt>normal</tt> style.
NormalStyle :: FontStyle

-- | Font variants.
data FontVariant

-- | Select <tt>normal</tt> font.
NormalVariant :: FontVariant

-- | Select <tt>small-caps</tt> font.
SmallCapsVariant :: FontVariant

-- | Font weight.
data FontWeight

-- | Relatively <tt>bolder</tt> font weight.
BolderWeight :: FontWeight

-- | Relatively <tt>lighter</tt> font weight.
LighterWeight :: FontWeight

-- | Specific font weight (1-9), 4 = <tt>normal</tt>, 7 = <tt>bold</tt>.
FontWeight :: Int -> FontWeight

-- | Parts for the <tt>content</tt> property.
data ContentPart url

-- | <tt>attr(x)</tt> part.
AttrPart :: ByteString -> ContentPart url

-- | <tt>close-quote</tt> part.
CloseQuotePart :: ContentPart url

-- | <tt>counter(x, y)</tt> part.
CounterPart :: ByteString -> (Maybe ListStyle) -> ContentPart url

-- | <tt>counters(x, y)</tt> part.
CountersPart :: ByteString -> Text -> (Maybe ListStyle) -> ContentPart url

-- | <tt>no-close-quote</tt> part.
NoCloseQuotePart :: ContentPart url

-- | <tt>no-open-quote</tt> part.
NoOpenQuotePart :: ContentPart url

-- | <tt>open-quote</tt> part.
OpenQuotePart :: ContentPart url

-- | Text part.
TextPart :: (CssString Text) -> ContentPart url

-- | <tt>url(x)</tt> part.
UriPart :: url -> ContentPart url

-- | Clipping modes.
data ClipMode a

-- | Rectangular clipping region.
ClipRect :: (AutoLen Length a) -> (AutoLen Length a) -> (AutoLen Length a) -> (AutoLen Length a) -> ClipMode a

-- | Display modes.
data DisplayMode

-- | <tt>block</tt> display.
BlockDisplay :: DisplayMode

-- | <tt>inline-block</tt> display.
InlineBlockDisplay :: DisplayMode

-- | <tt>inline</tt> display.
InlineDisplay :: DisplayMode

-- | <tt>list-item</tt> display
ListItemDisplay :: DisplayMode

-- | <tt>none</tt> display.
NoneDisplay :: DisplayMode

-- | <tt>table</tt> display.
TableDisplay :: DisplayMode

-- | <tt>inline-table</tt> display.
InlineTableDisplay :: DisplayMode

-- | <tt>table-row-group</tt> display.
TableRowGroupDisplay :: DisplayMode

-- | <tt>table-column</tt> display.
TableColumnDisplay :: DisplayMode

-- | <tt>table-column-group</tt> display.
TableColumnGroupDisplay :: DisplayMode

-- | <tt>table-header-group</tt> display.
TableHeaderGroupDisplay :: DisplayMode

-- | <tt>table-footer-group</tt> display.
TableFooterGroupDisplay :: DisplayMode

-- | <tt>table-row</tt> display.
TableRowDisplay :: DisplayMode

-- | <tt>table-cell</tt> display.
TableCellDisplay :: DisplayMode

-- | <tt>table-caption</tt> display.
TableCaptionDisplay :: DisplayMode

-- | Floating edge.
data FloatEdge
LeftFloat :: FloatEdge
RightFloat :: FloatEdge

-- | Overflow handling mode.
data OverflowMode

-- | <tt>auto</tt> overflow handling.
AutoOverflow :: OverflowMode

-- | <tt>hidden</tt> overflow handling.
HiddenOverflow :: OverflowMode

-- | <tt>scroll</tt> overflow handling.
ScrollOverflow :: OverflowMode

-- | <tt>visible</tt> overflow handling.
VisibleOverflow :: OverflowMode

-- | Position modes.
data PositionMode

-- | <tt>absolute</tt> positioning.
AbsolutePos :: PositionMode

-- | <tt>fixed</tt> positioning.
FixedPos :: PositionMode

-- | <tt>relative</tt> positioning.
RelativePos :: PositionMode

-- | <tt>static</tt> positioning.
StaticPos :: PositionMode

-- | Visibility modes.
data VisibilityMode

-- | <tt>collapse</tt> visibility.
CollapseVisibility :: VisibilityMode

-- | <tt>hidden</tt> visibility.
HiddenVisibility :: VisibilityMode

-- | <tt>visible</tt> visibility.
VisibleVisibility :: VisibilityMode

-- | List number/bullet position.
data ListPosition

-- | <tt>inside</tt> the box.
InsideList :: ListPosition

-- | <tt>outside</tt> of the box.
OutsideList :: ListPosition

-- | List number/bullet styles.
data ListStyle

-- | <tt>armenian</tt> numbering.
ArmenianList :: ListStyle

-- | <tt>circle</tt> bullets.
CircleList :: ListStyle

-- | <tt>decimal-leading-zero</tt> numbering.
DecimalLeadingZeroList :: ListStyle

-- | <tt>decimal</tt> numbering.
DecimalList :: ListStyle

-- | <tt>disc</tt> bullets.
DiscList :: ListStyle

-- | <tt>georgian</tt> numbering.
GeorgianList :: ListStyle

-- | <tt>lower-alpha</tt> numbering.
LowerAlphaList :: ListStyle

-- | <tt>lower-greek</tt> numbering.
LowerGreekList :: ListStyle

-- | <tt>lower-latin</tt> numbering.
LowerLatinList :: ListStyle

-- | <tt>lower-roman</tt> numbering.
LowerRomanList :: ListStyle

-- | <tt>square</tt> bullets.
SquareList :: ListStyle

-- | <tt>upper-alpha</tt> numbering.
UpperAlphaList :: ListStyle

-- | <tt>upper-latin</tt> numbering.
UpperLatinList :: ListStyle

-- | <tt>upper-roman</tt> numbering.
UpperRomanList :: ListStyle

-- | Page break rules.
data PageBreak :: * -> *
AlwaysBreak :: PageBreak AnyBreak
AvoidBreak :: PageBreak InsideBreak
LeftBreak :: PageBreak AnyBreak
RightBreak :: PageBreak AnyBreak

-- | Page break context: any.
data AnyBreak

-- | Page break context: <tt>page-break-inside</tt>.
data InsideBreak

-- | Page selectors for paged media.
data PageSelector

-- | Select all pages (<tt>@page</tt>).
AllPages :: PageSelector

-- | Select first page (<tt>@page :first</tt>).
FirstPage :: PageSelector

-- | Select all left pages (<tt>@page :left</tt>).
LeftPages :: PageSelector

-- | Select all right pages (<tt>@page :right</tt>).
RightPages :: PageSelector

-- | Table caption sides.
data CaptionSide

-- | Table's <tt>bottom</tt> side.
BottomSide :: CaptionSide

-- | Table's <tt>top</tt> side.
TopSide :: CaptionSide

-- | Table layout.
data TableLayout

-- | <tt>auto</tt> layout.
AutoLayout :: TableLayout

-- | <tt>fixed</tt> layout.
FixedLayout :: TableLayout

-- | Text alignment.
data TextAlign

-- | <tt>center</tt> alignment.
CenterAlign :: TextAlign

-- | <tt>justify</tt> alignment.
JustifyAlign :: TextAlign

-- | <tt>left</tt> alignment.
LeftAlign :: TextAlign

-- | <tt>right</tt> alignment.
RightAlign :: TextAlign

-- | Text decoration.
data TextDecoration

-- | <tt>blink</tt> text.
BlinkText :: TextDecoration

-- | <tt>line-through</tt> text.
LineThroughText :: TextDecoration

-- | <tt>overline</tt> text.
OverlineText :: TextDecoration

-- | <tt>underline</tt> text.
UnderlineText :: TextDecoration

-- | Text direction.
data TextDirection
LeftToRight :: TextDirection
RightToLeft :: TextDirection

-- | Text transformation modes.
data TextTransform

-- | <tt>capitalize</tt> transform.
CapitalizeText :: TextTransform

-- | <tt>lowercase</tt> transform.
LowercaseText :: TextTransform

-- | <tt>uppercase</tt> transform.
UppercaseText :: TextTransform

-- | Text wrapping modes.
data TextWrapMode

-- | <tt>normal</tt> wrapping.
NormalWrapping :: TextWrapMode

-- | <tt>nowrap</tt> wrapping.
NowrapWrapping :: TextWrapMode

-- | <tt>pre-line</tt> wrapping.
PreLineWrapping :: TextWrapMode

-- | <tt>pre-wrap</tt> wrapping.
PreWrapWrapping :: TextWrapMode

-- | <tt>pre</tt> wrapping.
PreWrapping :: TextWrapMode

-- | Unicode bidi embedding mode.
data UnicodeBidiMode

-- | <tt>embed</tt> mode.
EmbedBidi :: UnicodeBidiMode

-- | <tt>normal</tt> mode.
NormalBidi :: UnicodeBidiMode

-- | <tt>bidi-override</tt> mode.
OverrideBidi :: UnicodeBidiMode

-- | Vertical text/box alignment.
data VerticalAlign a
BaselineAlign :: VerticalAlign a
BottomAlign :: VerticalAlign a
LengthAlign :: (FactorLen Length a) -> VerticalAlign a
MiddleAlign :: VerticalAlign a
SubAlign :: VerticalAlign a
SuperAlign :: VerticalAlign a
TextBottomAlign :: VerticalAlign a
TextTopAlign :: VerticalAlign a
TopAlign :: VerticalAlign a

-- | Cursors.
data Cursor url

-- | <tt>crosshair</tt> cursor.
CrosshairCursor :: Cursor url

-- | Cursor from one of the given URLs.
CursorFrom :: [url] -> Cursor url

-- | <tt>default</tt> cursor.
DefaultCursor :: Cursor url

-- | <tt>e-resize</tt> cursor.
EResizeCursor :: Cursor url

-- | <tt>help</tt> cursor.
HelpCursor :: Cursor url

-- | <tt>move</tt> cursor.
MoveCursor :: Cursor url

-- | <tt>n-resize</tt> cursor.
NResizeCursor :: Cursor url

-- | <tt>ne-resize</tt> cursor.
NeResizeCursor :: Cursor url

-- | <tt>nw-resize</tt> cursor.
NwResizeCursor :: Cursor url

-- | <tt>pointer</tt> cursor.
PointerCursor :: Cursor url

-- | <tt>progress</tt> cursor.
ProgressCursor :: Cursor url

-- | <tt>s-resize</tt> cursor.
SResizeCursor :: Cursor url

-- | <tt>se-resize</tt> cursor.
SeResizeCursor :: Cursor url

-- | <tt>sw-resize</tt> cursor.
SwResizeCursor :: Cursor url

-- | <tt>text</tt> cursor.
TextCursor :: Cursor url

-- | <tt>w-resize</tt> cursor.
WResizeCursor :: Cursor url

-- | <tt>wait</tt> cursor.
WaitCursor :: Cursor url
instance Typeable BackgroundAttachment
instance Typeable BackgroundRepeat
instance Typeable BorderStyle
instance Typeable CaptionSide
instance Typeable1 CssString
instance Typeable1 CssUrl
instance Typeable1 Cursor
instance Typeable DisplayMode
instance Typeable1 Edge
instance Typeable FloatEdge
instance Typeable FontFamily
instance Typeable FontStyle
instance Typeable FontVariant
instance Typeable FontWeight
instance Typeable1 Length
instance Typeable1 FontSize
instance Typeable1 ClipMode
instance Typeable1 BorderWidth
instance Typeable ListPosition
instance Typeable ListStyle
instance Typeable1 ContentPart
instance Typeable OverflowMode
instance Typeable PageSelector
instance Typeable PositionMode
instance Typeable TableLayout
instance Typeable TextAlign
instance Typeable TextDecoration
instance Typeable TextDirection
instance Typeable TextTransform
instance Typeable TextWrapMode
instance Typeable UnicodeBidiMode
instance Typeable1 VerticalAlign
instance Typeable VisibilityMode
instance Eq (len a) => Eq (AutoLen len a)
instance Ord (len a) => Ord (AutoLen len a)
instance Show (len a) => Show (AutoLen len a)
instance Data BackgroundAttachment
instance Eq BackgroundAttachment
instance Ord BackgroundAttachment
instance Read BackgroundAttachment
instance Show BackgroundAttachment
instance Data BackgroundRepeat
instance Eq BackgroundRepeat
instance Ord BackgroundRepeat
instance Read BackgroundRepeat
instance Show BackgroundRepeat
instance Data BorderStyle
instance Eq BorderStyle
instance Ord BorderStyle
instance Read BorderStyle
instance Show BorderStyle
instance Data CaptionSide
instance Eq CaptionSide
instance Ord CaptionSide
instance Read CaptionSide
instance Show CaptionSide
instance Data a => Data (CssString a)
instance Eq a => Eq (CssString a)
instance Foldable CssString
instance Functor CssString
instance Ord a => Ord (CssString a)
instance Read a => Read (CssString a)
instance Show a => Show (CssString a)
instance Traversable CssString
instance Data a => Data (CssUrl a)
instance Eq a => Eq (CssUrl a)
instance Foldable CssUrl
instance Functor CssUrl
instance Ord a => Ord (CssUrl a)
instance Read a => Read (CssUrl a)
instance Show a => Show (CssUrl a)
instance Traversable CssUrl
instance Data url => Data (Cursor url)
instance Eq url => Eq (Cursor url)
instance Foldable Cursor
instance Functor Cursor
instance Ord url => Ord (Cursor url)
instance Read url => Read (Cursor url)
instance Show url => Show (Cursor url)
instance Traversable Cursor
instance Data DisplayMode
instance Eq DisplayMode
instance Ord DisplayMode
instance Read DisplayMode
instance Show DisplayMode
instance Data a => Data (Edge a)
instance Eq a => Eq (Edge a)
instance Foldable Edge
instance Functor Edge
instance Ord a => Ord (Edge a)
instance Read a => Read (Edge a)
instance Show a => Show (Edge a)
instance Traversable Edge
instance (Eq a, Eq (len a)) => Eq (FactorLen len a)
instance (Ord a, Ord (len a)) => Ord (FactorLen len a)
instance (Show a, Show (len a)) => Show (FactorLen len a)
instance Data FloatEdge
instance Eq FloatEdge
instance Ord FloatEdge
instance Read FloatEdge
instance Show FloatEdge
instance Data FontFamily
instance Eq FontFamily
instance Ord FontFamily
instance Read FontFamily
instance Show FontFamily
instance Data FontStyle
instance Eq FontStyle
instance Ord FontStyle
instance Read FontStyle
instance Show FontStyle
instance Data FontVariant
instance Eq FontVariant
instance Ord FontVariant
instance Read FontVariant
instance Show FontVariant
instance Data FontWeight
instance Eq FontWeight
instance Ord FontWeight
instance Read FontWeight
instance Show FontWeight
instance Eq a => Eq (Length a)
instance Ord a => Ord (Length a)
instance Show a => Show (Length a)
instance Eq a => Eq (FontSize a)
instance Ord a => Ord (FontSize a)
instance Show a => Show (FontSize a)
instance Eq a => Eq (ClipMode a)
instance Ord a => Ord (ClipMode a)
instance Show a => Show (ClipMode a)
instance Eq a => Eq (BorderWidth a)
instance Ord a => Ord (BorderWidth a)
instance Show a => Show (BorderWidth a)
instance Data ListPosition
instance Eq ListPosition
instance Ord ListPosition
instance Read ListPosition
instance Show ListPosition
instance Data ListStyle
instance Eq ListStyle
instance Ord ListStyle
instance Read ListStyle
instance Show ListStyle
instance Data url => Data (ContentPart url)
instance Eq url => Eq (ContentPart url)
instance Functor ContentPart
instance Ord url => Ord (ContentPart url)
instance Read url => Read (ContentPart url)
instance Show url => Show (ContentPart url)
instance Data OverflowMode
instance Eq OverflowMode
instance Ord OverflowMode
instance Read OverflowMode
instance Show OverflowMode
instance Data PageSelector
instance Eq PageSelector
instance Ord PageSelector
instance Read PageSelector
instance Show PageSelector
instance Data PositionMode
instance Eq PositionMode
instance Ord PositionMode
instance Read PositionMode
instance Show PositionMode
instance Data TableLayout
instance Eq TableLayout
instance Ord TableLayout
instance Read TableLayout
instance Show TableLayout
instance Data TextAlign
instance Eq TextAlign
instance Ord TextAlign
instance Read TextAlign
instance Show TextAlign
instance Data TextDecoration
instance Eq TextDecoration
instance Ord TextDecoration
instance Read TextDecoration
instance Show TextDecoration
instance Data TextDirection
instance Eq TextDirection
instance Ord TextDirection
instance Read TextDirection
instance Show TextDirection
instance Data TextTransform
instance Eq TextTransform
instance Ord TextTransform
instance Read TextTransform
instance Show TextTransform
instance Data TextWrapMode
instance Eq TextWrapMode
instance Ord TextWrapMode
instance Read TextWrapMode
instance Show TextWrapMode
instance Data UnicodeBidiMode
instance Eq UnicodeBidiMode
instance Ord UnicodeBidiMode
instance Read UnicodeBidiMode
instance Show UnicodeBidiMode
instance Eq a => Eq (VerticalAlign a)
instance Ord a => Ord (VerticalAlign a)
instance Show a => Show (VerticalAlign a)
instance Data VisibilityMode
instance Eq VisibilityMode
instance Ord VisibilityMode
instance Read VisibilityMode
instance Show VisibilityMode
instance ToPropValue VisibilityMode
instance Real a => ToPropValue (VerticalAlign a)
instance HasPercent VerticalAlign
instance HasLength VerticalAlign
instance ToPropValue UnicodeBidiMode
instance ToPropValue TextWrapMode
instance ToPropValue TextTransform
instance ToPropValue TextDirection
instance ToPropValue TextDecoration
instance ToPropValue TextAlign
instance ToPropValue TableLayout
instance ToPropValue PositionMode
instance ToPropValue (PageBreak a)
instance ToPropValue OverflowMode
instance ToPropValue ListStyle
instance ToPropValue ListPosition
instance Real a => ToPropValue (Length a)
instance HasLength Length
instance ToPropValue FontWeight
instance ToPropValue FontVariant
instance ToPropValue FontStyle
instance Real a => ToPropValue (FontSize a)
instance HasPercent FontSize
instance HasLength FontSize
instance ToPropValue FontFamily
instance IsString FontFamily
instance ToPropValue FloatEdge
instance (Real a, ToPropValue (len a)) => ToPropValue (FactorLen len a)
instance HasPercent (FactorLen len)
instance HasLength len => HasLength (FactorLen len)
instance HasAutoLength len => HasAutoLength (FactorLen len)
instance ToPropValue DisplayMode
instance ToPropValue url => ToPropValue (Cursor url)
instance ToPropValue (CssUrl Text)
instance IsString a => IsString (CssUrl a)
instance ToPropValue (CssString Text)
instance IsString a => IsString (CssString a)
instance ToPropValue url => ToPropValue (ContentPart url)
instance IsString (ContentPart url)
instance Real a => ToPropValue (ClipMode a)
instance ToPropValue CaptionSide
instance Real a => ToPropValue (BorderWidth a)
instance HasLength BorderWidth
instance ToPropValue BorderStyle
instance ToPropValue BackgroundRepeat
instance ToPropValue BackgroundAttachment
instance ToPropValue (len a) => ToPropValue (AutoLen len a)
instance HasPercent len => HasPercent (AutoLen len)
instance HasLength len => HasLength (AutoLen len)
instance HasAutoLength (AutoLen len)


module Data.CSS.Render

-- | Render the given stylesheet.
renderCSS :: Writer CSS a -> Builder

-- | Render the given stylesheet.
renderCSST :: Monad m => WriterT CSS m a -> m Builder

-- | Render the given raw stylesheet to a <a>Builder</a>.
fromCSS :: CSS -> Builder


module Data.CSS.Build

-- | Specify stylesheets for all media,
onAll :: Monad m => ReaderT (Set MediaType) m a -> m a

-- | Specify stylesheets for the given media.
onMedia :: Monad m => [MediaType] -> ReaderT (Set MediaType) m a -> m a

-- | Specify the selector.
select :: Monad m => [Selector] -> ReaderT BuildCfg m a -> ReaderT (Set MediaType) m a

-- | Given children of the current selector.
below :: MonadWriter CSS m => [Selector] -> m a -> m a

-- | Executes a computation in a modified environment.
local :: MonadReader r m => forall a. (r -> r) -> m a -> m a

-- | Set the given property to the given value. (infix 2)
--   
--   Infix version of <a>setProp</a>.
($=) :: ToPropValue a => PropName -> a -> SetProp

-- | Mark all property values important.
important :: MonadWriter CSS m => m a -> m a

-- | Set the given property to be inherited.
inherit :: (MonadReader BuildCfg m, MonadWriter CSS m) => PropName -> m ()

-- | Set the given property to the given value.
--   
--   Non-infix version of <a>$=</a>.
setProp :: ToPropValue a => PropName -> a -> SetProp

-- | Import the given style sheet for the given media type.
importFrom :: MonadWriter CSS m => MediaType -> Text -> m ()

-- | Import the given style sheet for the given media type.
importUrl :: (MonadRoute m, MonadWriter CSS m) => MediaType -> URL m -> m ()


module Data.CSS.Properties.Font

-- | Set the <tt>background-attachment</tt>.
backgroundAttachment :: BackgroundAttachment -> SetProp

-- | Set the <tt>background-color</tt>.
backgroundColor :: (ColourOps f, ToPropValue (f a)) => f a -> SetProp

-- | Set the <tt>background-image</tt>.
backgroundImage :: Maybe (CssUrl Text) -> SetProp

-- | Set the <tt>background-image</tt>.
backgroundImageUrl :: MonadRoute m => Maybe (URL m) -> SetPropM m

-- | Set the <tt>background-position</tt>.
backgroundPosition :: (Real a, Real b) => FactorLen Length a -> FactorLen Length b -> SetProp

-- | Set <tt>background-repeat</tt>.
backgroundRepeat :: BackgroundRepeat -> SetProp

-- | Set the foreground <tt>color</tt>.
color :: (ColourOps f, ToPropValue (f a)) => f a -> SetProp

-- | Set the <tt>font-family</tt> choices.
fontFamily :: [FontFamily] -> SetProp

-- | Set the <tt>font-size</tt>.
fontSize :: Real a => FontSize a -> SetProp

-- | Set the <tt>font-style</tt>.
fontStyle :: FontStyle -> SetProp

-- | Set the <tt>font-variant</tt>.
fontVariant :: FontVariant -> SetProp

-- | Set the <tt>font-weight</tt>.
fontWeight :: FontWeight -> SetProp

-- | Set the <tt>text-decoration</tt>.
textDecoration :: Maybe TextDecoration -> SetProp


module Data.CSS.Properties.Layout

-- | Set all <tt>border</tt> properties for all edges.
border :: (ColourOps f, Real a, ToPropValue (f b)) => BorderWidth a -> BorderStyle -> f b -> SetProp

-- | Set the border color for the given edges (<tt>border*-color</tt>).
borderColor :: (ColourOps f, ToPropValue (f a)) => Edge (f a) -> SetProp

-- | Set the border style for the given edges (<tt>border*-style</tt>).
borderStyle :: Edge BorderStyle -> SetProp

-- | Set the border width for the given edges (<tt>border*-width</tt>).
borderWidth :: Real a => Edge (BorderWidth a) -> SetProp

-- | Set the <tt>line-height</tt> to the given length or <tt>normal</tt>.
lineHeight :: Real a => Maybe (FactorLen Length a) -> SetProp

-- | Set the <tt>vertical-align</tt> mode.
verticalAlign :: Real a => VerticalAlign a -> SetProp

-- | Set the margin for the given edges (<tt>margin*</tt>).
margin :: Real a => Edge (AutoLen (FactorLen Length) a) -> SetProp

-- | Set the padding for the given edges (<tt>padding*</tt>).
padding :: Real a => Edge (FactorLen Length a) -> SetProp

-- | Specify the page margins for paged media.
pageMargins :: (MonadWriter CSS m, Real a) => PageSelector -> Edge (AutoLen (FactorLen Length) a) -> ReaderT (Set MediaType) m ()

-- | Set page breaking behaviour before the element
--   (<tt>page-break-before</tt>) to the given value or <tt>auto</tt>.
pageBreakBefore :: Maybe (PageBreak a) -> SetProp

-- | Set page breaking behaviour after the element
--   (<tt>page-break-after</tt>) to the given value or <tt>auto</tt>.
pageBreakAfter :: Maybe (PageBreak a) -> SetProp

-- | Set page breaking behaviour inside the element
--   (<tt>page-break-inside</tt>) to the given value or <tt>auto</tt>.
pageBreakInside :: Maybe (PageBreak InsideBreak) -> SetProp

-- | Set edge positions (<tt>top</tt>, <tt>right</tt>, <tt>bottom</tt>,
--   <tt>left</tt>).
edgePos :: Real a => Edge (AutoLen (FactorLen Length) a) -> SetProp

-- | Set the <tt>position</tt> mode.
position :: PositionMode -> SetProp

-- | Set the <tt>z-index</tt> to the given integer or <tt>auto</tt>.
zIndex :: Integral a => Maybe a -> SetProp

-- | Set the sides to <tt>clear</tt>.
clear :: [FloatEdge] -> SetProp

-- | Set <tt>float</tt> side.
float :: Maybe FloatEdge -> SetProp

-- | Set the <tt>height</tt>.
height :: Real a => AutoLen (FactorLen Length) a -> SetProp

-- | Set the <tt>min-height</tt>.
minHeight :: Real a => FactorLen Length a -> SetProp

-- | Set the <tt>max-height</tt>.
maxHeight :: Real a => Maybe (FactorLen Length a) -> SetProp

-- | Set the <tt>width</tt>.
width :: Real a => AutoLen (FactorLen Length) a -> SetProp

-- | Set the <tt>min-width</tt>.
minWidth :: Real a => FactorLen Length a -> SetProp

-- | Set the <tt>max-width</tt>.
maxWidth :: Real a => Maybe (FactorLen Length a) -> SetProp

-- | Collapse borders for tables (<tt>border-collapse</tt>)?
borderCollapse :: Bool -> SetProp

-- | Set the table's <tt>border-spacing</tt> (up to two values).
borderSpacing :: Real a => [Length a] -> SetProp

-- | Set the <tt>caption-side</tt>.
captionSide :: CaptionSide -> SetProp

-- | Show <tt>empty-cells</tt>?
emptyCells :: Bool -> SetProp

-- | Set the <tt>table-layout</tt>.
tableLayout :: TableLayout -> SetProp

-- | Set the <tt>clip</tt> mode to the given shape or <tt>auto</tt>.
clip :: Real a => Maybe (ClipMode a) -> SetProp

-- | Set the <tt>display</tt> mode.
display :: DisplayMode -> SetProp

-- | Set the <tt>overflow</tt> handling mode.
overflow :: OverflowMode -> SetProp

-- | Set the <tt>visibility</tt> mode.
visibility :: VisibilityMode -> SetProp


module Data.CSS.Properties.Text

-- | Set the <tt>letter-spacing</tt> to the specified value or
--   <tt>normal</tt>.
letterSpacing :: Real a => Maybe (Length a) -> SetProp

-- | Set <tt>text-align</tt>.
textAlign :: TextAlign -> SetProp

-- | Set the <tt>text-indent</tt>.
textIndent :: Real a => FactorLen Length a -> SetProp

-- | Set the white space collapse and text wrapping modes
--   (<tt>white-space</tt>).
whiteSpace :: TextWrapMode -> SetProp

-- | Set the <tt>word-spacing</tt> to the specified value or
--   <tt>normal</tt>.
wordSpacing :: Real a => Maybe (Length a) -> SetProp

-- | Set the text <tt>direction</tt>.
direction :: TextDirection -> SetProp

-- | Set the <tt>unicode-bidi</tt> mode.
unicodeBidi :: UnicodeBidiMode -> SetProp

-- | Set the generated <tt>content</tt> to the given list of parts or
--   <tt>normal</tt>.
content :: Maybe [ContentPart (CssUrl Text)] -> SetProp

-- | Set the generated <tt>content</tt> to the given list of parts or
--   <tt>normal</tt>.
contentUrl :: MonadRoute m => Maybe [ContentPart (URL m)] -> SetPropM m

-- | Increment the given counters by the given value
--   (<tt>counter-increment</tt>).
counterIncrement :: Integral a => [(ByteString, a)] -> SetProp

-- | Reset the given counters to the given value (<tt>counter-reset</tt>).
counterReset :: Integral a => [(ByteString, a)] -> SetProp

-- | Set the <tt>quotes</tt> pairs (<tt>none</tt> if empty).
quotes :: [(CssString Text, CssString Text)] -> SetProp

-- | Set all <tt>list-style</tt> properties.
listStyle :: ListStyle -> ListPosition -> Maybe (CssUrl Text) -> SetProp

-- | Set the <tt>list-style-image</tt>.
listStyleImage :: Maybe (CssUrl Text) -> SetProp

-- | Set the <tt>list-style-image</tt>.
listStyleImageUrl :: MonadRoute m => Maybe (URL m) -> SetPropM m

-- | Set the <tt>list-style-position</tt>.
listStylePosition :: ListPosition -> SetProp

-- | Set the <tt>list-style-type</tt>.
listStyleType :: ListStyle -> SetProp

-- | Set all <tt>list-style</tt> properties.
listStyleUrl :: MonadRoute m => ListStyle -> ListPosition -> Maybe (URL m) -> SetPropM m

-- | Set the <tt>orphans</tt> threshold (minimum number of lines at the
--   bottom of a page).
orphans :: Integral a => a -> SetProp

-- | Set the <tt>widows</tt> threshold (minimum number of lines at the top
--   of a page).
widows :: Integral a => a -> SetProp

-- | Set the <tt>text-transform</tt>.
textTransform :: Maybe TextTransform -> SetProp


module Data.CSS.Properties.UI

-- | Set the <tt>cursor</tt> to the specified value or <tt>auto</tt>.
cursor :: Maybe (Cursor (CssUrl Text)) -> SetProp

-- | Set the <tt>cursor</tt> to the specified value or <tt>auto</tt>.
cursorUrl :: MonadRoute m => Maybe (Cursor (URL m)) -> SetPropM m

-- | Set the <tt>outline</tt> properties.
outline :: (ColourOps f, Real b, ToPropValue (f a)) => Maybe (f a) -> BorderStyle -> BorderWidth b -> SetProp

-- | Set the <tt>outline-color</tt> to the given color or <tt>invert</tt>.
outlineColor :: (ColourOps f, ToPropValue (f a)) => Maybe (f a) -> SetProp

-- | Set the <tt>outline-style</tt>.
outlineStyle :: BorderStyle -> SetProp

-- | Set the <tt>outline-width</tt>.
outlineWidth :: Real a => BorderWidth a -> SetProp


module Data.CSS.Properties


-- | This library implements a domain-specific language for cascading style
--   sheets as used in web pages. It allows you to specify your style
--   sheets in regular Haskell syntax and gives you all the additional
--   power of server-side document generation.
module Data.CSS
