-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | bindings to imagemagick library
--   
--   Basic image magick bindings.
@package imagemagick
@version 0.0.2

module Graphics.ImageMagick.MagickWand.FFI.ImageDrawing

module Graphics.ImageMagick.MagickCore.Types.FFI.ColorspaceType
newtype ColorspaceType
ColorspaceType :: CInt -> ColorspaceType
unColorspaceType :: ColorspaceType -> CInt
undefinedColorspace :: ColorspaceType
rgbColorspace :: ColorspaceType
grayColorspace :: ColorspaceType
transparentColorspace :: ColorspaceType
ohtaColorspace :: ColorspaceType
labColorspace :: ColorspaceType
xyzColorspace :: ColorspaceType
ycbCrColorspace :: ColorspaceType
yccColorspace :: ColorspaceType
yiqColorspace :: ColorspaceType
ypbprColorspace :: ColorspaceType
yuvColorspace :: ColorspaceType
cmykColorspace :: ColorspaceType
srgbColorspace :: ColorspaceType
hsbColorspace :: ColorspaceType
hslColorspace :: ColorspaceType
hwbColorspace :: ColorspaceType
rec601LumaColorspace :: ColorspaceType
rec601YCbCrColorspace :: ColorspaceType
rec709LumaColorspace :: ColorspaceType
rec709YCbCrColorspace :: ColorspaceType
logColorspace :: ColorspaceType
cmyColorspace :: ColorspaceType
instance Eq ColorspaceType
instance Show ColorspaceType

module Graphics.ImageMagick.MagickCore.Types.FFI.AlphaChannelType
newtype AlphaChannelType
AlphaChannelType :: CInt -> AlphaChannelType
unAlphaChannelType :: AlphaChannelType -> CInt
undefinedAlphaChannel :: AlphaChannelType
activateAlphaChannel :: AlphaChannelType
backgroundAlphaChannel :: AlphaChannelType
copyAlphaChannel :: AlphaChannelType
deactivateAlphaChannel :: AlphaChannelType
extractAlphaChannel :: AlphaChannelType
opaqueAlphaChannel :: AlphaChannelType
resetAlphaChannel :: AlphaChannelType
setAlphaChannel :: AlphaChannelType
shapeAlphaChannel :: AlphaChannelType
transparentAlphaChannel :: AlphaChannelType
lattenAlphaChannel :: AlphaChannelType
removeAlphaChannel :: AlphaChannelType
instance Eq AlphaChannelType
instance Show AlphaChannelType

module Graphics.ImageMagick.MagickCore.Types.FFI.FilterTypes
newtype FilterTypes
FilterTypes :: CInt -> FilterTypes
unPCREOption :: FilterTypes -> CInt
undefinedFilter :: FilterTypes
pointFilter :: FilterTypes
boxFilter :: FilterTypes
triangleFilter :: FilterTypes
hermiteFilter :: FilterTypes
hanningFilter :: FilterTypes
hammingFilter :: FilterTypes
blackmanFilter :: FilterTypes
gaussianFilter :: FilterTypes
qaudraticFilter :: FilterTypes
cubicFilter :: FilterTypes
catromFilter :: FilterTypes
mirchellFilter :: FilterTypes
jincFilter :: FilterTypes
sinkFilter :: FilterTypes
sinkFastFilter :: FilterTypes
kaiserFilter :: FilterTypes
welshFilter :: FilterTypes
parzenFilter :: FilterTypes
bohmanFilter :: FilterTypes
bartlettFilter :: FilterTypes
lagrangeFilter :: FilterTypes
lanczosFilter :: FilterTypes
lanczosSharpFilter :: FilterTypes
lanczos2Filter :: FilterTypes
lanczos2SharpFilter :: FilterTypes
robidouxFilter :: FilterTypes
instance Eq FilterTypes
instance Show FilterTypes

module Graphics.ImageMagick.MagickCore.Types.FFI.MagickFunction
newtype MagickFunction
MagickFunction :: CInt -> MagickFunction
unMagickFunction :: MagickFunction -> CInt
undefinedFunction :: MagickFunction
polynomialFunction :: MagickFunction
sinusoidFunction :: MagickFunction
arcsinFunction :: MagickFunction
arctanFunction :: MagickFunction
instance Eq MagickFunction
instance Show MagickFunction

module Graphics.ImageMagick.MagickCore.Types.FFI.Statistic
newtype MagickEvaluateOperator
MagickEvaluateOperator :: CInt -> MagickEvaluateOperator
unMagickEvaluateOperator :: MagickEvaluateOperator -> CInt
undefinedEvaluateOperator :: MagickEvaluateOperator
addEvaluateOperator :: MagickEvaluateOperator
andEvaluateOperator :: MagickEvaluateOperator
divideEvaluateOperator :: MagickEvaluateOperator
leftShiftEvaluateOperator :: MagickEvaluateOperator
maxEvaluateOperator :: MagickEvaluateOperator
minEvaluateOperator :: MagickEvaluateOperator
multiplyEvaluateOperator :: MagickEvaluateOperator
orEvaluateOperator :: MagickEvaluateOperator
rightShiftEvaluateOperator :: MagickEvaluateOperator
setEvaluateOperator :: MagickEvaluateOperator
subtractEvaluateOperator :: MagickEvaluateOperator
xorEvaluateOperator :: MagickEvaluateOperator
powEvaluateOperator :: MagickEvaluateOperator
logEvaluateOperator :: MagickEvaluateOperator
thresholdEvaluateOperator :: MagickEvaluateOperator
thresholdBlackEvaluateOperator :: MagickEvaluateOperator
thresholdWhiteEvaluateOperator :: MagickEvaluateOperator
gaussianNoiseEvaluateOperator :: MagickEvaluateOperator
impulseNoiseEvaluateOperator :: MagickEvaluateOperator
laplacianNoiseEvaluateOperator :: MagickEvaluateOperator
multiplicativeNoiseEvaluateOperator :: MagickEvaluateOperator
poissonNoiseEvaluateOperator :: MagickEvaluateOperator
uniformNoiseEvaluateOperator :: MagickEvaluateOperator
cosineEvaluateOperator :: MagickEvaluateOperator
sineEvaluateOperator :: MagickEvaluateOperator
addModulusEvaluateOperator :: MagickEvaluateOperator
meanEvaluateOperator :: MagickEvaluateOperator
absEvaluateOperator :: MagickEvaluateOperator
exponentialEvaluateOperator :: MagickEvaluateOperator
medianEvaluateOperator :: MagickEvaluateOperator
sumEvaluateOperator :: MagickEvaluateOperator
instance Eq MagickEvaluateOperator
instance Show MagickEvaluateOperator

module Graphics.ImageMagick.MagickCore.Types.FFI.PixelPacket
data PixelPacket
pixelPacketGetRed :: Storable a => Ptr b -> IO a
pixelPacketGetGreen :: Storable a => Ptr b -> IO a
pixelPacketGetBlue :: Storable a => Ptr b -> IO a
pixelPacketGetOpacity :: Storable a => Ptr b -> IO a
pixelPacketSetRed :: Storable a => Ptr b -> a -> IO ()
pixelPacketSetGreen :: Storable a => Ptr b -> a -> IO ()
pixelPacketSetBlue :: Storable a => Ptr b -> a -> IO ()
pixelPacketSetOpacity :: Storable a => Ptr b -> a -> IO ()
instance Storable PixelPacket

module Graphics.ImageMagick.MagickCore.Types.FFI.PaintMethod
newtype PaintMethod
PaintMethod :: CInt -> PaintMethod
unPaintMethod :: PaintMethod -> CInt
undefinedMethod :: PaintMethod
pointMethod :: PaintMethod
replaceMethod :: PaintMethod
floodfillMethod :: PaintMethod
fillToBorderMethod :: PaintMethod
resetMethod :: PaintMethod

module Graphics.ImageMagick.MagickCore.Types.FFI.Layer
newtype ImageLayerMethod
ImageLayerMethod :: CInt -> ImageLayerMethod
unImageLayerMethod :: ImageLayerMethod -> CInt
undefinedLayer :: ImageLayerMethod
coalesceLayer :: ImageLayerMethod
compareAnyLayer :: ImageLayerMethod
compareClearLayer :: ImageLayerMethod
compareOverlayLayer :: ImageLayerMethod
disposeLayer :: ImageLayerMethod
optimizeLayer :: ImageLayerMethod
optimizeImageLayer :: ImageLayerMethod
optimizePlusLayer :: ImageLayerMethod
optimizeTransLayer :: ImageLayerMethod
removeDupsLayer :: ImageLayerMethod
removeZeroLayer :: ImageLayerMethod
compositeLayer :: ImageLayerMethod
mergeLayer :: ImageLayerMethod
flattenLayer :: ImageLayerMethod
mosaicLayer :: ImageLayerMethod
trimBoundsLayer :: ImageLayerMethod
instance Eq ImageLayerMethod
instance Show ImageLayerMethod

module Graphics.ImageMagick.MagickCore.Types.FFI.Image
newtype ImageType
ImageType :: CInt -> ImageType
unImageType :: ImageType -> CInt
undefinedType :: ImageType
bilevelType :: ImageType
grayscaleType :: ImageType
grayscaleMatteType :: ImageType
paletteType :: ImageType
paletteMatteType :: ImageType
trueColorType :: ImageType
trueColorMatteType :: ImageType
colorSeparationType :: ImageType
colorSeparationMatteType :: ImageType
optimizeType :: ImageType
paletteBilevelMatteType :: ImageType
instance Eq ImageType
instance Show ImageType

module Graphics.ImageMagick.MagickCore.Types.FFI.Geometry
newtype GravityType
GravityType :: CInt -> GravityType
unGravityType :: GravityType -> CInt
forgetGravity :: GravityType
northWestGravity :: GravityType
northGravity :: GravityType
northEastGravity :: GravityType
westGravity :: GravityType
centerGravity :: GravityType
eastGravity :: GravityType
southWestGravity :: GravityType
undefinedGravity :: GravityType
southGravity :: GravityType
southEastGravity :: GravityType
staticGravity :: GravityType
instance Eq GravityType
instance Show GravityType

module Graphics.ImageMagick.MagickCore.Types.FFI.Fx
newtype NoiseType
NoiseType :: CInt -> NoiseType
unNoiseType :: NoiseType -> CInt
undefinedNoise :: NoiseType
uniformNoise :: NoiseType
gaussianNoise :: NoiseType
multiplicativeGaussianNoise :: NoiseType
impulseNoise :: NoiseType
laplacianNoise :: NoiseType
poissonNoise :: NoiseType
randomNoise :: NoiseType
instance Eq NoiseType
instance Show NoiseType

module Graphics.ImageMagick.MagickCore.Types.FFI.Exception
newtype ExceptionType
ExceptionType :: CInt -> ExceptionType
unExceptionType :: ExceptionType -> CInt
undefinedException :: ExceptionType
warningException :: ExceptionType
resourceLimitWarning :: ExceptionType
typeWarning :: ExceptionType
optionWarning :: ExceptionType
delegateWarning :: ExceptionType
missingDelegateWarning :: ExceptionType
corruptImageWarning :: ExceptionType
fileOpenWarning :: ExceptionType
blobWarning :: ExceptionType
streamWarning :: ExceptionType
cacheWarning :: ExceptionType
coderWarning :: ExceptionType
filterWarning :: ExceptionType
moduleWarning :: ExceptionType
drawWarning :: ExceptionType
imageWarning :: ExceptionType
wandWarning :: ExceptionType
randomWarning :: ExceptionType
xServerWarning :: ExceptionType
monitorWarning :: ExceptionType
registryWarning :: ExceptionType
configureWarning :: ExceptionType
policyWarning :: ExceptionType
errorException :: ExceptionType
resourceLimitError :: ExceptionType
typeError :: ExceptionType
optionError :: ExceptionType
delegateError :: ExceptionType
missingDelegateError :: ExceptionType
corruptImageError :: ExceptionType
fileOpenError :: ExceptionType
blobError :: ExceptionType
streamError :: ExceptionType
cacheError :: ExceptionType
coderError :: ExceptionType
filterError :: ExceptionType
data ExceptionSeverity
Undefined :: ExceptionSeverity
Warning :: ExceptionSeverity
Error :: ExceptionSeverity
FatalError :: ExceptionSeverity
moduleError :: ExceptionType
drawError :: ExceptionType
toSeverity :: ExceptionType -> ExceptionSeverity
imageError :: ExceptionType
wandError :: ExceptionType
randomError :: ExceptionType
xServerError :: ExceptionType
monitorError :: ExceptionType
registryError :: ExceptionType
configureError :: ExceptionType
policyError :: ExceptionType
fatalErrorException :: ExceptionType
resourceLimitFatalError :: ExceptionType
typeFatalError :: ExceptionType
optionFatalError :: ExceptionType
delegateFatalError :: ExceptionType
missingDelegateFatalError :: ExceptionType
corruptImageFatalError :: ExceptionType
fileOpenFatalError :: ExceptionType
blobFatalError :: ExceptionType
streamFatalError :: ExceptionType
cacheFatalError :: ExceptionType
coderFatalError :: ExceptionType
filterFatalError :: ExceptionType
moduleFatalError :: ExceptionType
drawFatalError :: ExceptionType
imageFatalError :: ExceptionType
wandFatalError :: ExceptionType
randomFatalError :: ExceptionType
xServerFatalError :: ExceptionType
monitorFatalError :: ExceptionType
registryFatalError :: ExceptionType
configureFatalError :: ExceptionType
policyFatalError :: ExceptionType
instance Eq ExceptionType
instance Show ExceptionType
instance Storable ExceptionType
instance Eq ExceptionSeverity
instance Show ExceptionSeverity

module Graphics.ImageMagick.MagickCore.Types.FFI.Distort
newtype DistortImageMethod
DistortImageMethod :: CInt -> DistortImageMethod
unDistortImageMethod :: DistortImageMethod -> CInt
undefinedDistortion :: DistortImageMethod
affineDistortion :: DistortImageMethod
affineProjectionDistortion :: DistortImageMethod
scaleRotateTranslateDistortion :: DistortImageMethod
perspectiveDistortion :: DistortImageMethod
perspectiveProjectionDistortion :: DistortImageMethod
bilinearForwardDistortion :: DistortImageMethod
bilinearReverseDistortion :: DistortImageMethod
polynomialDistortion :: DistortImageMethod
arcDistortion :: DistortImageMethod
polarDistortion :: DistortImageMethod
dePolarDistortion :: DistortImageMethod
bilinearDistortion :: DistortImageMethod
cylinder2PlaneDistortion :: DistortImageMethod
newtype SparseColorMethod
SparseColorMethod :: CInt -> SparseColorMethod
unSparseColorMethod :: SparseColorMethod -> CInt
undefinedColorInterpolate :: SparseColorMethod
plane2CylinderDistortion :: DistortImageMethod
barrelDistortion :: DistortImageMethod
barycentricColorInterpolate :: SparseColorMethod
bilinearColorInterpolate :: SparseColorMethod
barrelInverseDistortion :: DistortImageMethod
shepardsDistortion :: DistortImageMethod
polynomialColorInterpolate :: SparseColorMethod
resizeDistortion :: DistortImageMethod
shepardsColorInterpolate :: SparseColorMethod
sentinelDistortion :: DistortImageMethod
voronoiColorInterpolate :: SparseColorMethod
inverseColorInterpolate :: SparseColorMethod

module Graphics.ImageMagick.MagickCore.Types.FFI.Constitute
newtype StorageType
StorageType :: CInt -> StorageType
unStorageType :: StorageType -> CInt
undefinedPixel :: StorageType
charPixel :: StorageType
doublePixel :: StorageType
floatPixel :: StorageType
integerPixel :: StorageType
longPixel :: StorageType
quantumPixel :: StorageType
shortPixel :: StorageType
instance Eq StorageType
instance Show StorageType

module Graphics.ImageMagick.MagickCore.Types.FFI.Compress
newtype CompressionType
CompressionType :: CInt -> CompressionType
unCompressionType :: CompressionType -> CInt
undefinedCompression :: CompressionType
noCompression :: CompressionType
bzipCompression :: CompressionType
dxt1Compression :: CompressionType
dxt3Compression :: CompressionType
dxt5Compression :: CompressionType
axCompression :: CompressionType
group4Compression :: CompressionType
jpegCompression :: CompressionType
jpeg2000Compression :: CompressionType
losslessJPEGCompression :: CompressionType
lzwCompression :: CompressionType
rleCompression :: CompressionType
zipCompression :: CompressionType
zipsCompression :: CompressionType
pizCompression :: CompressionType
pxr24Compression :: CompressionType
b44Compression :: CompressionType
b44aCompression :: CompressionType
lzmaCompression :: CompressionType
jbig1Compression :: CompressionType
jbig2Compression :: CompressionType
instance Eq CompressionType
instance Show CompressionType

module Graphics.ImageMagick.MagickCore.Types.FFI.Composite
newtype CompositeOperator
CompositeOperator :: CInt -> CompositeOperator
unCompositeOperator :: CompositeOperator -> CInt
undefinedCompositeOp :: CompositeOperator
noCompositeOp :: CompositeOperator
modulusAddCompositeOp :: CompositeOperator
atopCompositeOp :: CompositeOperator
blendCompositeOp :: CompositeOperator
bumpmapCompositeOp :: CompositeOperator
changeMaskCompositeOp :: CompositeOperator
clearCompositeOp :: CompositeOperator
colorBurnCompositeOp :: CompositeOperator
colorDodgeCompositeOp :: CompositeOperator
colorizeCompositeOp :: CompositeOperator
copyBlackCompositeOp :: CompositeOperator
copyBlueCompositeOp :: CompositeOperator
copyCompositeOp :: CompositeOperator
copyCyanCompositeOp :: CompositeOperator
copyGreenCompositeOp :: CompositeOperator
copyMagentaCompositeOp :: CompositeOperator
copyOpacityCompositeOp :: CompositeOperator
copyRedCompositeOp :: CompositeOperator
copyYellowCompositeOp :: CompositeOperator
darkenCompositeOp :: CompositeOperator
dstAtopCompositeOp :: CompositeOperator
dstCompositeOp :: CompositeOperator
dstInCompositeOp :: CompositeOperator
dstOutCompositeOp :: CompositeOperator
dstOverCompositeOp :: CompositeOperator
differenceCompositeOp :: CompositeOperator
displaceCompositeOp :: CompositeOperator
dissolveCompositeOp :: CompositeOperator
exclusionCompositeOp :: CompositeOperator
hardLightCompositeOp :: CompositeOperator
hueCompositeOp :: CompositeOperator
inCompositeOp :: CompositeOperator
lightenCompositeOp :: CompositeOperator
linearLightCompositeOp :: CompositeOperator
luminizeCompositeOp :: CompositeOperator
minusDstCompositeOp :: CompositeOperator
modulateCompositeOp :: CompositeOperator
multiplyCompositeOp :: CompositeOperator
outCompositeOp :: CompositeOperator
overCompositeOp :: CompositeOperator
overlayCompositeOp :: CompositeOperator
plusCompositeOp :: CompositeOperator
replaceCompositeOp :: CompositeOperator
saturateCompositeOp :: CompositeOperator
screenCompositeOp :: CompositeOperator
softLightCompositeOp :: CompositeOperator
srcAtopCompositeOp :: CompositeOperator
srcCompositeOp :: CompositeOperator
srcInCompositeOp :: CompositeOperator
srcOutCompositeOp :: CompositeOperator
srcOverCompositeOp :: CompositeOperator
modulusSubtractCompositeOp :: CompositeOperator
thresholdCompositeOp :: CompositeOperator
xorCompositeOp :: CompositeOperator
divideDstCompositeOp :: CompositeOperator
distortCompositeOp :: CompositeOperator
blurCompositeOp :: CompositeOperator
pegtopLightCompositeOp :: CompositeOperator
vividLightCompositeOp :: CompositeOperator
pinLightCompositeOp :: CompositeOperator
linearDodgeCompositeOp :: CompositeOperator
linearBurnCompositeOp :: CompositeOperator
mathematicsCompositeOp :: CompositeOperator
divideSrcCompositeOp :: CompositeOperator
minusSrcCompositeOp :: CompositeOperator
darkenIntensityCompositeOp :: CompositeOperator
lightenIntensityCompositeOp :: CompositeOperator

module Graphics.ImageMagick.MagickCore.Types.FFI.CacheView
newtype VirtualPixelMethod
VirtualPixelMethod :: CInt -> VirtualPixelMethod
unVirtualPixelMethod :: VirtualPixelMethod -> CInt
undefinedVirtualPixelMethod :: VirtualPixelMethod
backgroundVirtualPixelMethod :: VirtualPixelMethod
constantVirtualPixelMethod :: VirtualPixelMethod
ditherVirtualPixelMethod :: VirtualPixelMethod
edgeVirtualPixelMethod :: VirtualPixelMethod
mirrorVirtualPixelMethod :: VirtualPixelMethod
randomVirtualPixelMethod :: VirtualPixelMethod
tileVirtualPixelMethod :: VirtualPixelMethod
transparentVirtualPixelMethod :: VirtualPixelMethod
maskVirtualPixelMethod :: VirtualPixelMethod
blackVirtualPixelMethod :: VirtualPixelMethod
grayVirtualPixelMethod :: VirtualPixelMethod
whiteVirtualPixelMethod :: VirtualPixelMethod
horizontalTileVirtualPixelMethod :: VirtualPixelMethod
verticalTileVirtualPixelMethod :: VirtualPixelMethod
horizontalTileEdgeVirtualPixelMethod :: VirtualPixelMethod
verticalTileEdgeVirtualPixelMethod :: VirtualPixelMethod
checkerTileVirtualPixelMethod :: VirtualPixelMethod
instance Eq VirtualPixelMethod
instance Show VirtualPixelMethod

module Graphics.ImageMagick.MagickCore.Types.FFI.ChannelType
newtype ChannelType
ChannelType :: CInt -> ChannelType
unChannelType :: ChannelType -> CInt
undefinedCHannel :: ChannelType
redChannel :: ChannelType
grayChannel :: ChannelType
cyanChannel :: ChannelType
greenChannel :: ChannelType
magentaChannel :: ChannelType
blueChannel :: ChannelType
yellowChannel :: ChannelType
alphaChannel :: ChannelType
opacityChannel :: ChannelType
matteChannel :: ChannelType
blackChannel :: ChannelType
indexChannel :: ChannelType
compositeChannels :: ChannelType
allChannels :: ChannelType
trueAlphaChannel :: ChannelType
rgbChannels :: ChannelType
grayChannels :: ChannelType
syncChannels :: ChannelType
defaultChannels :: ChannelType
instance Eq ChannelType
instance Show ChannelType

module Graphics.ImageMagick.MagickCore.Types.MBits
class MBits a
(^|^) :: MBits a => a -> a -> a
(^&^) :: MBits a => a -> a -> a
instance MBits ChannelType

module Graphics.ImageMagick.MagickCore.FFI.Option

-- | ParseChannelOption() parses channel type string representation
parseChannelOption :: CString -> IO ChannelType

module Graphics.ImageMagick.MagickCore.FFI.Mime

-- | MagickToMime() returns the officially registered (or de facto) MIME
--   media-type corresponding to a magick string. If there is no registered
--   media-type, then the string <a>image/x-magick</a> (all lower case) is
--   returned. The returned string must be deallocated by the user.
magickToMime :: CString -> IO CString

module Graphics.ImageMagick.MagickCore.Types.FFI.Log
newtype LogEventType
LogEventType :: CInt -> LogEventType
unLogEventType :: LogEventType -> CInt
undefinedEvents :: LogEventType
oEvents :: LogEventType
raceEvent :: LogEventType
nnotateEvent :: LogEventType
lobEvent :: LogEventType
acheEvent :: LogEventType
oderEvent :: LogEventType
onfigureEvent :: LogEventType
eprecateEvent :: LogEventType
rawEvent :: LogEventType
xceptionEvent :: LogEventType
mageEvent :: LogEventType
ocaleEvent :: LogEventType
oduleEvent :: LogEventType
olicyEvent :: LogEventType
esourceEvent :: LogEventType
ransformEvent :: LogEventType
serEvent :: LogEventType
andEvent :: LogEventType
x11Event :: LogEventType
ccelerateEvent :: LogEventType
allEvents :: LogEventType
instance Eq LogEventType
instance Show LogEventType

module Graphics.ImageMagick.MagickCore.FFI.Log

-- | SetLogEventMask() accepts a list that determines which events to log.
--   All other events are ignored. By default, no debug is enabled. This
--   method returns the previous log event mask.
setLogEventMask :: CString -> IO LogEventType

module Graphics.ImageMagick.MagickCore.Types.FFI.Types
type MagickRealType = Double
type MagickStatusType = Word32
type MagickOffsetType = Int64
type MagickSizeType = Word64
type SignedQuantum = Int32
type QuantumAny = Word64
type Quantum = Word16
type IndexPacket = Word16
magickEpsilon :: Fractional a => a
magickHuge :: Num a => a
maxColormapSize :: Num a => a
maxMap :: Num a => a
quantumFormat :: Num a => a
quantumRange :: Num a => a

module Graphics.ImageMagick.MagickWand.FFI.Types
data PixelIterator
data MagickWand
data PixelWand
data DrawingWand
data Image
data PointInfo
PointInfo :: CDouble -> CDouble -> PointInfo
piX :: PointInfo -> CDouble
piY :: PointInfo -> CDouble
newtype MagickBooleanType
MagickBooleanType :: CInt -> MagickBooleanType
unMagickBooleanType :: MagickBooleanType -> CInt
mFalse :: MagickBooleanType
mTrue :: MagickBooleanType
newtype ClassType
ClassType :: CInt -> ClassType
unClassType :: ClassType -> CInt
undefinedClass :: ClassType
directClass :: ClassType
pseudoClass :: ClassType
newtype LineCap
LineCap :: CInt -> LineCap
unLineCap :: LineCap -> CInt
udefinedCap :: LineCap
buttCap :: LineCap
roundCap :: LineCap
squareCap :: LineCap
newtype LineJoin
LineJoin :: CInt -> LineJoin
unLineJoin :: LineJoin -> CInt
undefinedJoin :: LineJoin
mitterJoin :: LineJoin
roundJoin :: LineJoin
bevelJoin :: LineJoin
newtype FillRule
FillRule :: CInt -> FillRule
unFillRule :: FillRule -> CInt
undefinedRule :: FillRule
evenOddRule :: FillRule
nonZeroRule :: FillRule
data MagickPixelPacket
getPixelRed :: Storable a => Ptr b -> IO a
getPixelGreen :: Storable a => Ptr b -> IO a
getPixelBlue :: Storable a => Ptr b -> IO a
getPixelIndex :: Storable a => Ptr b -> IO a
setPixelRed :: Storable a => Ptr b -> a -> IO ()
setPixelGreen :: Storable a => Ptr b -> a -> IO ()
setPixelBlue :: Storable a => Ptr b -> a -> IO ()
setPixelIndex :: Storable a => Ptr b -> a -> IO ()
instance Eq PointInfo
instance Show PointInfo
instance Eq MagickBooleanType
instance Show MagickBooleanType
instance Eq ClassType
instance Show ClassType
instance Storable MagickPixelPacket
instance Storable PointInfo

module Graphics.ImageMagick.MagickWand.FFI.WandProperties
magickDeleteOption :: Ptr MagickWand -> CString -> IO MagickBooleanType

-- | MagickGetOption() returns a value associated with a wand and the
--   specified key. Use MagickRelinquishMemory() to free the value when you
--   are finished with it.
magickGetOption :: Ptr MagickWand -> CString -> IO CString

-- | MagickSetOption() associates one or options with the wand (e.g.
--   MagickSetOption(wand,<a>jpeg:perserve</a>,<a>yes</a>)).
magickSetOption :: Ptr MagickWand -> CString -> CString -> IO MagickBooleanType

-- | MagickGetOptions() returns all the option names that match the
--   specified pattern associated with a wand. Use MagickGetOption() to
--   return the value of a particular option. Use MagickRelinquishMemory()
--   to free the value when you are finished with it.
magickGetOptions :: Ptr MagickWand -> CString -> Ptr CSize -> IO (Ptr CString)

-- | MagickDeleteImageProperty() deletes a wand property.
magickDeleteImageProperty :: Ptr MagickWand -> CString -> IO MagickBooleanType

-- | MagickGetImageProperty() returns a value associated with the specified
--   property. Use MagickRelinquishMemory() to free the value when you are
--   finished with it.
magickGetImageProperty :: Ptr MagickWand -> CString -> IO CString

-- | MagickGetImageProperties() returns all the property names that match
--   the specified pattern associated with a wand. Use
--   MagickGetImageProperty() to return the value of a particular property.
--   Use MagickRelinquishMemory() to free the value when you are finished
--   with it.
magickGetImageProperties :: Ptr MagickWand -> CString -> Ptr CSize -> IO (Ptr CString)

-- | MagickSetImageProperty() associates a property with an image.
magickSetImageProperty :: Ptr MagickWand -> CString -> CString -> IO MagickBooleanType

-- | MagickGetImageProfile() returns the named image profile.
magickGetImageProfile :: Ptr MagickWand -> CString -> Ptr CSize -> IO (Ptr Word8)

-- | MagickRemoveImageProfile() removes the named image profile and returns
--   it.
magickRemoveImageProfile :: Ptr MagickWand -> CString -> Ptr CSize -> IO (Ptr Word8)

-- | MagickSetImageProfile() adds a named profile to the magick wand. If a
--   profile with the same name already exists, it is replaced. This method
--   differs from the MagickProfileImage() method in that it does not apply
--   any CMS color profiles.
magickSetImageProfile :: Ptr MagickWand -> CString -> Ptr Word8 -> CSize -> IO MagickBooleanType

-- | MagickGetImageProfiles() returns all the profile names that match the
--   specified pattern associated with a wand. Use MagickGetImageProfile()
--   to return the value of a particular property. Use
--   MagickRelinquishMemory() to free the value when you are finished with
--   it.
magickGetImageProfiles :: Ptr MagickWand -> CString -> Ptr CSize -> IO (Ptr CString)

-- | MagickSetResolution() sets the image resolution.
magickSetImageResolution :: Ptr MagickWand -> CDouble -> CDouble -> IO MagickBooleanType

-- | MagickGetResolution() gets the image resolution.
magickGetImageResolution :: Ptr MagickWand -> Ptr CDouble -> Ptr CDouble -> IO MagickBooleanType

-- | MagickGetImageArtifacts() returns all the artifact names that match
--   the specified pattern associated with a wand. Use
--   MagickGetImageProperty() to return the value of a particular artifact.
--   Use MagickRelinquishMemory() to free the value when you are finished
--   with it.
magickGetImageArtifacts :: Ptr MagickWand -> CString -> Ptr CSize -> IO (Ptr CString)

module Graphics.ImageMagick.MagickCore.FFI.Gem
convertHSBToRGB :: CDouble -> CDouble -> CDouble -> Ptr Quantum -> Ptr Quantum -> Ptr Quantum -> IO ()
convertHSLToRGB :: CDouble -> CDouble -> CDouble -> Ptr Quantum -> Ptr Quantum -> Ptr Quantum -> IO ()
convertHWBToRGB :: CDouble -> CDouble -> CDouble -> Ptr Quantum -> Ptr Quantum -> Ptr Quantum -> IO ()
convertRGBToHSB :: Quantum -> Quantum -> Quantum -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO ()
convertRGBToHSL :: Quantum -> Quantum -> Quantum -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO ()
convertRGBToHWB :: Quantum -> Quantum -> Quantum -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO ()

module Graphics.ImageMagick.MagickCore.Types

module Graphics.ImageMagick.MagickCore.FFI.MagickCore

module Graphics.ImageMagick.MagickWand.FFI.MagickWand

-- | MagickWandGenesis() initializes the MagickWand environment.
magickWandGenesis :: IO ()

-- | MagickWandTerminus() terminates the MagickWand environment.
magickWandTerminus :: IO ()

-- | NewMagickWand() returns a wand required for all other methods in the
--   API. A fatal exception is thrown if there is not enough memory to
--   allocate the wand. Use DestroyMagickWand() to dispose of the wand when
--   it is no longer needed.
newMagickWand :: IO (Ptr MagickWand)

-- | NewMagickWandFromImage() returns a wand with an image.
newMagickWandFromImage :: Ptr Image -> IO (Ptr MagickWand)

-- | CloneMagickWand() makes an exact copy of the specified wand.
cloneMagickWand :: Ptr MagickWand -> IO (Ptr MagickWand)

-- | ClearMagickWand() clears resources associated with the wand, leaving
--   the wand blank, and ready to be used for a new set of images.
clearMagickWand :: Ptr MagickWand -> IO ()

-- | DestroyMagickWand() deallocates memory associated with an MagickWand.
destroyMagickWand :: Ptr MagickWand -> IO (Ptr MagickWand)
pDestroyMagickWand :: FunPtr (Ptr MagickWand -> IO ())

-- | IsMagickWand() returns MagickTrue if the wand is verified as a magick
--   wand.
isMagicWand :: Ptr MagickWand -> IO MagickBooleanType

-- | MagickClearException() clears any exceptions associated with the wand.
magickClearException :: Ptr MagickWand -> IO MagickBooleanType

-- | MagickGetException() returns the severity, reason, and description of
--   any error that occurs when using other methods in this API.
magickGetException :: Ptr MagickWand -> Ptr ExceptionType -> IO CString

-- | MagickGetExceptionType() returns the exception type associated with
--   the wand. If no exception has occurred, UndefinedExceptionType is
--   returned.
magickGetExceptionType :: Ptr MagickWand -> IO ExceptionType

-- | MagickGetIteratorIndex() returns the position of the iterator in the
--   image list.
magickGetIteratorIndex :: Ptr MagickWand -> IO CSize

-- | MagickNextImage() sets the next image in the wand as the current
--   image. It is typically used after MagickResetIterator(), after which
--   its first use will set the first image as the current image (unless
--   the wand is empty).
--   
--   It will return MagickFalse when no more images are left to be returned
--   which happens when the wand is empty, or the current image is the last
--   image.
--   
--   When the above condition (end of image list) is reached, the iterator
--   is automatically set so that you can start using MagickPreviousImage()
--   to again iterate over the images in the reverse direction, starting
--   with the last image (again). You can jump to this condition
--   immeditally using MagickSetLastIterator().
magickNextImage :: Ptr MagickWand -> IO MagickBooleanType

-- | MagickPreviousImage() sets the previous image in the wand as the
--   current image.
--   
--   It is typically used after MagickSetLastIterator(), after which its
--   first use will set the last image as the current image (unless the
--   wand is empty).
--   
--   It will return MagickFalse when no more images are left to be returned
--   which happens when the wand is empty, or the current image is the
--   first image. At that point the iterator is than reset to again process
--   images in the forward direction, again starting with the first image
--   in list. Images added at this point are prepended.
--   
--   Also at that point any images added to the wand using
--   MagickAddImages() or MagickReadImages() will be prepended before the
--   first image. In this sense the condition is not quite exactly the same
--   as MagickResetIterator().
magickPreviousImage :: Ptr MagickWand -> IO MagickBooleanType

-- | MagickResizeImage() scales an image to the desired dimensions with one
--   of these filters:
--   
--   Most of the filters are FIR (finite impulse response), however,
--   Bessel, Gaussian, and Sinc are IIR (infinite impulse response). Bessel
--   and Sinc are windowed (brought down to zero) with the Blackman filter.
magickResizeImage :: Ptr MagickWand -> CSize -> CSize -> FilterTypes -> CDouble -> IO MagickBooleanType

-- | MagickWriteImages() writes an image or image sequence.
magickWriteImages :: Ptr MagickWand -> CString -> MagickBooleanType -> IO MagickBooleanType

-- | MagickSetSize() sets the size of the magick wand. Set it before you
--   read a raw image format such as RGB, GRAY, or CMYK.
magickSetSize :: Ptr MagickWand -> CSize -> CSize -> IO MagickBooleanType

-- | MagickGetSize() returns the size associated with the magick wand.
magickGetSize :: Ptr MagickWand -> Ptr CSize -> Ptr CSize -> IO MagickBooleanType

-- | MagickGaussianBlurImage() blurs an image. We convolve the image with a
--   Gaussian operator of the given radius and standard deviation (sigma).
--   For reasonable results, the radius should be larger than sigma. Use a
--   radius of 0 and MagickGaussianBlurImage() selects a suitable radius
--   for you.
magickGaussianBlurImage :: Ptr MagickWand -> CDouble -> CDouble -> IO MagickBooleanType
magickGaussianBlurImageChannel :: Ptr MagickWand -> ChannelType -> CDouble -> CDouble -> IO MagickBooleanType

-- | MagickSetImageArtifact() associates a artifact with an image. The
--   format of the MagickSetImageArtifact method is:
magickSetImageArtifact :: Ptr MagickWand -> CString -> CString -> IO MagickBooleanType

-- | MagickDeleteImageArtifact() deletes a wand artifact.
magickDeleteImageArtifact :: Ptr MagickWand -> CString -> IO MagickBooleanType

-- | MagickSetIteratorIndex() set the iterator to the given position in the
--   image list specified with the index parameter. A zero index will set
--   the first image as current, and so on. Negative indexes can be used to
--   specify an image relative to the end of the images in the wand, with
--   -1 being the last image in the wand.
--   
--   If the index is invalid (range too large for number of images in wand)
--   the function will return MagickFalse, but no <tt>exception</tt> will
--   be raised, as it is not actually an error. In that case the current
--   image will not change.
--   
--   After using any images added to the wand using <tt>magickAddImage</tt>
--   or <tt>magickReadImage</tt> will be added after the image indexed,
--   regardless of if a zero (first image in list) or negative index (from
--   end) is used.
--   
--   Jumping to index 0 is similar to <a>magickResetIterator</a> but
--   differs in how <a>magickNextImage</a> behaves afterward.
magickSetIteratorIndex :: Ptr MagickWand -> CSize -> IO MagickBooleanType

-- | MagickResetIterator() resets the wand iterator.
--   
--   It is typically used either before iterating though images, or before
--   calling specific functions such as <tt>magickAppendImages</tt> to
--   append all images together.
--   
--   Afterward you can use <a>magickNextImage</a> to iterate over all the
--   images in a wand container, starting with the first image.
--   
--   Using this before <tt>magickAddImages</tt> or
--   <tt>magickReadImages</tt> will cause new images to be inserted between
--   the first and second image.
magickResetIterator :: Ptr MagickWand -> IO ()

-- | MagickSetLastIterator() sets the wand iterator to the last image. The
--   last image is actually the current image, and the next use of
--   MagickPreviousImage() will not change this allowing this function to
--   be used to iterate over the images in the reverse direction. In this
--   sense it is more like MagickResetIterator() than
--   MagickSetFirstIterator(). Typically this function is used before
--   MagickAddImage(), MagickReadImage() functions to ensure new images are
--   appended to the very end of wand's image list.
magickSetFirstIterator :: Ptr MagickWand -> IO ()

-- | MagickSetFirstIterator() sets the wand iterator to the first image.
--   After using any images added to the wand using MagickAddImage() or
--   MagickReadImage() will be prepended before any image in the wand. Also
--   the current image has been set to the first image (if any) in the
--   Magick Wand. Using MagickNextImage() will then set teh current image
--   to the second image in the list (if present). This operation is
--   similar to MagickResetIterator() but differs in how MagickAddImage(),
--   MagickReadImage(), and MagickNextImage() behaves afterward.
magickSetLastIterator :: Ptr MagickWand -> IO ()

-- | MagickRelinquishMemory() relinquishes memory resources returned by
--   such methods as MagickIdentifyImage(), MagickGetException(), etc.
magickRelinquishMemory :: Ptr () -> IO ()
magickGetColorspace :: Ptr MagickWand -> IO ColorspaceType
magickSetColorspace :: Ptr MagickWand -> ColorspaceType -> IO MagickBooleanType
magickGetCompressionQuality :: Ptr MagickWand -> IO CSize
magickSetCompressionQuality :: Ptr MagickWand -> CSize -> IO MagickBooleanType
magickGetCompression :: Ptr MagickWand -> IO CompressionType
magickSetCompression :: Ptr MagickWand -> CompressionType -> IO MagickBooleanType

module Graphics.ImageMagick.MagickWand.FFI.WandImage

-- | MagickGetImageHeight() returns the image height.
magickGetImageHeight :: Ptr MagickWand -> IO CSize

-- | MagickGetImageWidth() returns the image width.
magickGetImageWidth :: Ptr MagickWand -> IO CSize

-- | MagickGetImagePixelColor() returns the color of the specified pixel.
magickGetImagePixelColor :: Ptr MagickWand -> CSize -> CSize -> Ptr PixelWand -> IO MagickBooleanType

-- | MagickGetImageCompressionQuality() gets the image compression quality.
magickGetImageCompressionQuality :: Ptr MagickWand -> IO CSize

-- | MagickSetImageCompression() sets the image compression.
magickSetImageCompression :: Ptr MagickWand -> CompressionType -> IO MagickBooleanType

-- | MagickSetImageCompressionQuality() sets the image compression quality.
magickSetImageCompressionQuality :: Ptr MagickWand -> CSize -> IO MagickBooleanType

-- | MagickGetImageBackgroundColor() returns the image background color.
magickGetImageBackgroundColor :: Ptr MagickWand -> Ptr PixelWand -> IO MagickBooleanType

-- | MagickSetImageBackgroundColor() sets the image background color.
magickSetImageBackgroundColor :: Ptr MagickWand -> Ptr PixelWand -> IO MagickBooleanType

-- | MagickExtentImage() extends the image as defined by the geometry,
--   gravity, and wand background color. Set the (x,y) offset of the
--   geometry to move the original wand relative to the extended wand.
magickExtentImage :: Ptr MagickWand -> CSize -> CSize -> CSize -> CSize -> IO MagickBooleanType

-- | MagickFloodfillPaintImage() changes the color value of any pixel that
--   matches target and is an immediate neighbor. If the method
--   FillToBorderMethod is specified, the color value is changed for any
--   neighbor pixel that does not match the bordercolor member of image.
magickFloodfillPaintImage :: Ptr MagickWand -> ChannelType -> Ptr PixelWand -> CDouble -> Ptr PixelWand -> CSize -> CSize -> MagickBooleanType -> IO MagickBooleanType

-- | MagickNegateImage() negates the colors in the reference image. The
--   Grayscale option means that only grayscale values within the image are
--   negated. You can also reduce the influence of a particular channel
--   with a gamma value of 0.
magickNegateImage :: Ptr MagickWand -> MagickBooleanType -> IO MagickBooleanType
magickNegateImageChannel :: Ptr MagickWand -> ChannelType -> MagickBooleanType -> IO MagickBooleanType

-- | MagickGetImageClipMask() gets the image clip mask at the current image
--   index.
magickGetImageClipMask :: Ptr MagickWand -> IO (Ptr MagickWand)

-- | MagickSetImageClipMask() sets image clip mask.
magickSetImageClipMask :: Ptr MagickWand -> Ptr MagickWand -> IO MagickBooleanType

-- | MagickCompositeImage() composite one image onto another at the
--   specified offset.
magickCompositeImage :: Ptr MagickWand -> Ptr MagickWand -> CompositeOperator -> CSize -> CSize -> IO MagickBooleanType
magickCompositeImageChannel :: Ptr MagickWand -> Ptr MagickWand -> ChannelType -> CompositeOperator -> CSize -> CSize -> IO MagickBooleanType

-- | MagickTransparentPaintImage() changes any pixel that matches color
--   with the color defined by fill.
magickTransparentPaintImage :: Ptr MagickWand -> Ptr PixelWand -> Double -> Double -> MagickBooleanType -> IO MagickBooleanType

-- | MagickBorderImage() surrounds the image with a border of the color
--   defined by the bordercolor pixel wand.
magickBorderImage :: Ptr MagickWand -> Ptr PixelWand -> CSize -> CSize -> IO MagickBooleanType

-- | MagickShaveImage() shaves pixels from the image edges. It allocates
--   the memory necessary for the new Image structure and returns a pointer
--   to the new image.
magickShaveImage :: Ptr MagickWand -> CSize -> CSize -> IO MagickBooleanType

-- | MagickSetImageAlphaChannel() activates, deactivates, resets, or sets
--   the alpha channel.
magickSetImageAlphaChannel :: Ptr MagickWand -> AlphaChannelType -> IO MagickBooleanType

-- | MagickNewImage() adds a blank image canvas of the specified size and
--   background color to the wand.
magickNewImage :: Ptr MagickWand -> CSize -> CSize -> Ptr PixelWand -> IO MagickBooleanType

-- | MagickDrawImage() renders the drawing wand on the current image.
magickDrawImage :: Ptr MagickWand -> Ptr DrawingWand -> IO MagickBooleanType

-- | MagickFlopImage() creates a horizontal mirror image by reflecting the
--   pixels around the central y-axis.
magickFlopImage :: Ptr MagickWand -> IO MagickBooleanType

-- | MagickAddNoiseImage() adds random noise to the image. The type of
--   noise: Uniform, Gaussian, Multiplicative, Impulse, Laplacian, or
--   Poisson.
magickAddNoiseImage :: Ptr MagickWand -> NoiseType -> IO MagickBooleanType

-- | MagickAddImage() adds a clone of the images from the second wand and
--   inserts them into the first wand. Use MagickSetLastIterator(), to
--   append new images into an existing wand, current image will be set to
--   last image so later adds with also be appened to end of wand.
--   
--   Use MagickSetFirstIterator() to prepend new images into wand, any more
--   images added will also be prepended before other images in the wand.
--   However the order of a list of new images will not change.
--   
--   Otherwise the new images will be inserted just after the current
--   image, and any later image will also be added after this current image
--   but before the previously added images. Caution is advised when
--   multiple image adds are inserted into the middle of the wand image
--   list.
magickAddImage :: Ptr MagickWand -> Ptr MagickWand -> IO MagickBooleanType

-- | MagickFlipImage() creates a vertical mirror image by reflecting the
--   pixels around the central x-axis.
magickFlipImage :: Ptr MagickWand -> IO MagickBooleanType

-- | MagickSetImageVirtualPixelMethod() sets the image virtual pixel
--   method. the image virtual pixel method : UndefinedVirtualPixelMethod,
--   ConstantVirtualPixelMethod, EdgeVirtualPixelMethod,
--   MirrorVirtualPixelMethod, or TileVirtualPixelMethod.
magickSetVirtualPixelMethod :: Ptr MagickWand -> VirtualPixelMethod -> IO VirtualPixelMethod

-- | MagickAppendImages() append the images in a wand from the current
--   image onwards, creating a new wand with the single image result. This
--   is affected by the gravity and background settings of the first image.
--   Typically you would call either MagickResetIterator() or
--   MagickSetFirstImage() before calling this function to ensure that all
--   the images in the wand's image list will be appended together.
magickAppendImages :: Ptr MagickWand -> MagickBooleanType -> IO (Ptr MagickWand)

-- | MagickReadImage() reads an image or image sequence. The images are
--   inserted at the current image pointer position. Use
--   MagickSetFirstIterator(), MagickSetLastIterator, or
--   MagickSetImageIndex() to specify the current image pointer position at
--   the beginning of the image list, the end, or anywhere in-between
--   respectively.
magickReadImage :: Ptr MagickWand -> CString -> IO MagickBooleanType

-- | MagickReadImageBlob() reads an image or image sequence from a blob.
magickReadImageBlob :: Ptr MagickWand -> Ptr () -> CSize -> IO MagickBooleanType

-- | MagickWriteImage() writes an image to the specified filename. If the
--   filename parameter is NULL, the image is written to the filename set
--   by MagickReadImage() or MagickSetImageFilename().
magickWriteImage :: Ptr MagickWand -> CString -> IO (MagickBooleanType)

-- | MagickBlurImage() blurs an image. We convolve the image with a
--   gaussian operator of the given radius and standard deviation (sigma).
--   For reasonable results, the radius should be larger than sigma. Use a
--   radius of 0 and BlurImage() selects a suitable radius for you.
--   
--   The format of the MagickBlurImage method is:
magickBlurImage :: Ptr MagickWand -> CDouble -> CDouble -> IO MagickBooleanType
magickBlurImageChannel :: Ptr MagickWand -> ChannelType -> CDouble -> CDouble -> IO MagickBooleanType

-- | MagickNormalizeImage() enhances the contrast of a color image by
--   adjusting the pixels color to span the entire range of colors
--   available
--   
--   You can also reduce the influence of a particular channel with a gamma
--   value of 0.
magickNormalizeImage :: Ptr MagickWand -> IO MagickBooleanType
magickNormalizeImageChannel :: Ptr MagickWand -> ChannelType -> IO MagickBooleanType

-- | MagickShadowImage() simulates an image shadow.
magickShadowImage :: Ptr MagickWand -> CDouble -> CDouble -> CSize -> CSize -> IO MagickBooleanType

-- | MagickTrimImage() remove edges that are the background color from the
--   image.
magickTrimImage :: Ptr MagickWand -> CDouble -> IO MagickBooleanType

-- | MagickResetImagePage() resets the Wand page canvas and position.
magickResetImagePage :: Ptr MagickWand -> CString -> IO MagickBooleanType

-- | MagickDistortImage() distorts an image using various distortion
--   methods, by mapping color lookups of the source image to a new
--   destination image usally of the same size as the source image, unless
--   <tt>bestfit</tt> is set to true. If <tt>bestfit</tt> is enabled, and
--   distortion allows it, the destination image is adjusted to ensure the
--   whole source <tt>image</tt> will just fit within the final destination
--   image, which will be sized and offset accordingly. Also in many cases
--   the virtual offset of the source image will be taken into account in
--   the mapping.
magickDistortImage :: Ptr MagickWand -> DistortImageMethod -> CSize -> Ptr CDouble -> MagickBooleanType -> IO MagickBooleanType

-- | MagickShadeImage() shines a distant light on an image to create a
--   three-dimensional effect. You control the positioning of the light
--   with azimuth and elevation; azimuth is measured in degrees off the x
--   axis and elevation is measured in pixels above the Z axis.
magickShadeImage :: Ptr MagickWand -> MagickBooleanType -> CDouble -> CDouble -> IO MagickBooleanType

-- | MagickColorizeImage() blends the fill color with each pixel in the
--   image.
magickColorizeImage :: Ptr MagickWand -> Ptr PixelWand -> Ptr PixelWand -> IO MagickBooleanType

-- | MagickFxImage() evaluate expression for each pixel in the image.
magickFxImage :: Ptr MagickWand -> CString -> IO (Ptr MagickWand)

-- | MagickFxImageChannel() evaluate expression for each pixel in the
--   image.
magickFxImageChannel :: Ptr MagickWand -> ChannelType -> CString -> IO (Ptr MagickWand)

-- | MagickSigmoidalContrastImage() adjusts the contrast of an image with a
--   non-linear sigmoidal contrast algorithm. Increase the contrast of the
--   image using a sigmoidal transfer function without saturating
--   highlights or shadows. Contrast indicates how much to increase the
--   contrast (0 is none; 3 is typical; 20 is pushing it); mid-point
--   indicates where midtones fall in the resultant image (0 is white; 50
--   is middle-gray; 100 is black). Set sharpen to <a>True</a> to increase
--   the image contrast otherwise the contrast is reduced.
magickSigmoidalContrastImage :: Ptr MagickWand -> MagickBooleanType -> CDouble -> CDouble -> IO MagickBooleanType

-- | see <a>magickSigmoidalContrastImage</a>
magickSigmoidalContrastImageChannel :: Ptr MagickWand -> ChannelType -> MagickBooleanType -> CDouble -> CDouble -> IO MagickBooleanType

-- | MagickEvaluateImage() applies an arithmetic, relational, or logical
--   expression to an image. Use these operators to lighten or darken an
--   image, to increase or decrease contrast in an image, or to produce the
--   <a>negative</a> of an image.
magickEvaluateImage :: Ptr MagickWand -> MagickEvaluateOperator -> CDouble -> IO MagickBooleanType

-- | see <a>magickEvaluateImage</a>
magickEvaluateImages :: Ptr MagickWand -> MagickEvaluateOperator -> IO MagickBooleanType

-- | see <a>magickEvaluateImage</a>
magickEvaluateImageChannel :: Ptr MagickWand -> ChannelType -> MagickEvaluateOperator -> CDouble -> IO MagickBooleanType

-- | MagickRollImage() offsets an image as defined by x and y.
magickRollImage :: Ptr MagickWand -> CDouble -> CDouble -> IO MagickBooleanType

-- | MagickAnnotateImage() annotates an image with text.
magickAnnotateImage :: Ptr MagickWand -> Ptr DrawingWand -> CDouble -> CDouble -> CDouble -> CString -> IO MagickBooleanType

-- | MagickMergeImageLayers() composes all the image layers from the
--   current given image onward to produce a single image of the merged
--   layers. The inital canvas's size depends on the given
--   ImageLayerMethod, and is initialized using the first images background
--   color. The images are then compositied onto that image in sequence
--   using the given composition that has been assigned to each individual
--   image.
magickMergeImageLayers :: Ptr MagickWand -> ImageLayerMethod -> IO (Ptr MagickWand)

-- | MagickTintImage() applies a color vector to each pixel in the image.
--   The length of the vector is 0 for black and white and at its maximum
--   for the midtones. The vector weighting function is
--   f(x)=(1-(4.0*((x-0.5)*(x-0.5)))).
magickTintImage :: Ptr MagickWand -> Ptr PixelWand -> Ptr PixelWand -> IO MagickBooleanType

-- | MagickSetImageMatte() sets the image matte channel.
magickSetImageMatte :: Ptr MagickWand -> MagickBooleanType -> IO MagickBooleanType

-- | MagickCropImage() extracts a region of the image.
magickCropImage :: Ptr MagickWand -> CSize -> CSize -> CSize -> CSize -> IO MagickBooleanType

-- | MagickShearImage() slides one edge of an image along the X or Y axis,
--   creating a parallelogram. An X direction shear slides an edge along
--   the X axis, while a Y direction shear slides an edge along the Y axis.
--   The amount of the shear is controlled by a shear angle. For X
--   direction shears, x_shear is measured relative to the Y axis, and
--   similarly, for Y direction shears y_shear is measured relative to the
--   X axis. Empty triangles left over from shearing the image are filled
--   with the background color.
magickShearImage :: Ptr MagickWand -> Ptr PixelWand -> CDouble -> CDouble -> IO MagickBooleanType

-- | MagickScaleImage() scales the size of an image to the given
--   dimensions.
magickScaleImage :: Ptr MagickWand -> CSize -> CSize -> IO MagickBooleanType

-- | MagickSparseColorImage(), given a set of coordinates, interpolates the
--   colors found at those coordinates, across the whole image, using
--   various methods.
--   
--   The format of the MagickSparseColorImage method is: ArcSparseColorion
--   will always ignore source image offset, and always <tt>bestfit</tt>
--   the destination image with the top left corner offset relative to the
--   polar mapping center.
--   
--   Bilinear has no simple inverse mapping so will not allow
--   <tt>bestfit</tt> style of image sparseion.
--   
--   Affine, Perspective, and Bilinear, will do least squares fitting of
--   the distrotion when more than the minimum number of control point
--   pairs are provided.
--   
--   Perspective, and Bilinear, will fall back to a Affine sparseion when
--   less than 4 control point pairs are provided. While Affine sparseions
--   will let you use any number of control point pairs, that is Zero pairs
--   is a No-Op (viewport only) distrotion, one pair is a translation and
--   two pairs of control points will do a scale-rotate-translate, without
--   any shearing.
magickSparseColorImage :: Ptr MagickWand -> ChannelType -> SparseColorMethod -> CSize -> Ptr Double -> IO MagickBooleanType

-- | MagickFunctionImage() applys an arithmetic, relational, or logical
--   expression to an image. Use these operators to lighten or darken an
--   image, to increase or decrease contrast in an image, or to produce the
--   <a>negative</a> of an image.
magickFunctionImage :: Ptr MagickWand -> MagickFunction -> CSize -> Ptr Double -> IO MagickBooleanType
magickFunctionImageChannel :: Ptr MagickWand -> ChannelType -> MagickFunction -> CSize -> Ptr Double -> IO MagickBooleanType

-- | MagickCoalesceImages() composites a set of images while respecting any
--   page offsets and disposal methods. GIF, MIFF, and MNG animation
--   sequences typically start with an image background and each subsequent
--   image varies in size and offset. MagickCoalesceImages() returns a new
--   sequence where each image in the sequence is the same size as the
--   first and composited with the next image in the sequence.
magickCoalesceImages :: Ptr MagickWand -> IO (Ptr MagickWand)

-- | MagickGetNumberImages() returns the number of images associated with a
--   magick wand.
magickGetNumberImages :: Ptr MagickWand -> IO CSize

-- | MagickGetImage() gets the image at the current image index.
magickGetImage :: Ptr MagickWand -> IO (Ptr MagickWand)

-- | MagickCompareImageLayers() compares each image with the next in a
--   sequence and returns the maximum bounding region of any pixel
--   differences it discovers.
magickCompareImageLayers :: Ptr MagickWand -> ImageLayerMethod -> IO (Ptr MagickWand)

-- | MagickGetImageScene() gets the image scene
magickGetImageScene :: Ptr MagickWand -> IO CSize

-- | MagickRemoveImage() removes an image from the image list.
magickRemoveImage :: Ptr MagickWand -> IO MagickBooleanType

-- | MagickSetImage() replaces the last image returned by
--   MagickSetImageIndex(), MagickNextImage(), MagickPreviousImage() with
--   the images from the specified wand.
magickSetImage :: Ptr MagickWand -> Ptr MagickWand -> IO MagickBooleanType

-- | MagickImportImagePixels() accepts pixel data and stores it in the
--   image at the location you specify. The method returns MagickFalse on
--   success otherwise MagickTrue if an error is encountered. The pixel
--   data can be either char, short int, int, ssize_t, float, or double in
--   the order specified by map.
--   
--   Suppose your want to upload the first scanline of a 640x480 image from
--   character data in red-green-blue order: magickImportImagePixels wand 0
--   0 640 1 <a>RGB</a> charPixel pixels
magickImportImagePixels :: Ptr MagickWand -> CSize -> CSize -> CSize -> CSize -> CString -> StorageType -> Ptr () -> IO MagickBooleanType

-- | MagickExportImagePixels() extracts pixel data from an image and
--   returns it to you. The method returns MagickTrue on success otherwise
--   MagickFalse if an error is encountered. The data is returned as char,
--   short int, int, ssize_t, float, or double in the order specified by
--   map.
magickExportImagePixels :: Ptr MagickWand -> CSize -> CSize -> CSize -> CSize -> CString -> StorageType -> Ptr () -> IO MagickBooleanType

-- | MagickRotateImage() rotates an image the specified number of degrees.
--   Empty triangles left over from rotating the image are filled with the
--   background color.
magickRotateImage :: Ptr MagickWand -> Ptr PixelWand -> CDouble -> IO MagickBooleanType

-- | MagickSetImageDepth() sets the image depth.
magickSetImageDepth :: Ptr MagickWand -> CSize -> IO MagickBooleanType

-- | MagickSetImageDelay() sets the image delay.
magickSetImageDelay :: Ptr MagickWand -> CSize -> IO MagickBooleanType

-- | MagickGetImageDelay() gets the image delay.
magickGetImageDelay :: Ptr MagickWand -> IO CSize

-- | MagickGetImageBlob() implements direct to memory image formats. It
--   returns the image as a blob (a formatted <a>file</a> in memory) and
--   its length, starting from the current position in the image sequence.
--   Use MagickSetImageFormat() to set the format to write to the blob
--   (GIF, JPEG, PNG, etc.). Utilize MagickResetIterator() to ensure the
--   write is from the beginning of the image sequence. Use
--   MagickRelinquishMemory() to free the blob when you are done with it.
--   The format of the MagickGetImageBlob method is:
magickGetImageBlob :: Ptr MagickWand -> Ptr CSize -> IO (Ptr CChar)

-- | MagickGetImageDepth() gets the image depth.
magickGetImageDepth :: Ptr MagickWand -> IO CSize

-- | MagickGetImageFormat() returns the format of a particular image in a
--   sequence.
magickGetImageFormat :: Ptr MagickWand -> IO CString

-- | MagickSetImageFormat() sets the format of a particular image in a
--   sequence.
magickSetImageFormat :: Ptr MagickWand -> CString -> IO MagickBooleanType

-- | MagickStripImage() strips an image of all profiles and comments.
magickStripImage :: Ptr MagickWand -> IO MagickBooleanType

-- | MagickGetImageSignature() generates an SHA-256 message digest for the
--   image pixel stream.
magickGetImageSignature :: Ptr MagickWand -> IO CString

-- | MagickGetImageAlphaChannel() returns MagickFalse if the image alpha
--   channel is not activated. That is, the image is RGB rather than RGBA
--   or CMYK rather than CMYKA.
magickGetImageAlphaChannel :: Ptr MagickWand -> IO MagickBooleanType

-- | MagickSetImageType() sets the image type.
magickSetImageType :: Ptr MagickWand -> ImageType -> IO MagickBooleanType

module Graphics.ImageMagick.MagickWand.FFI.DrawingWand

-- | NewDrawingWand() returns a drawing wand required for all other methods
--   in the API.
newDrawingWand :: IO (Ptr DrawingWand)

-- | DestroyDrawingWand() frees all resources associated with the drawing
--   wand. Once the drawing wand has been freed, it should not be used and
--   further unless it re-allocated.
destroyDrawingWand :: Ptr DrawingWand -> IO (Ptr DrawingWand)

-- | PixelGetException() returns the severity, reason, and description of
--   any error that occurs when using other methods in this API.
drawGetException :: Ptr DrawingWand -> Ptr ExceptionType -> IO CString

-- | DrawGetFillColor() returns the fill color used for drawing filled
--   objects.
drawGetFillColor :: Ptr DrawingWand -> Ptr PixelWand -> IO ()

-- | DrawSetFillColor() sets the fill color to be used for drawing filled
--   objects.
drawSetFillColor :: Ptr DrawingWand -> Ptr PixelWand -> IO ()

-- | DrawSetFillPatternURL() sets the URL to use as a fill pattern for
--   filling objects. Only local URLs (<a>#identifier</a>) are supported at
--   this time. These local URLs are normally created by defining a named
--   fill pattern with DrawPushPattern/DrawPopPattern.
drawSetFillPatternURL :: Ptr DrawingWand -> CString -> IO MagickBooleanType

-- | DrawSetFillRule() sets the fill rule to use while drawing polygons.
drawSetFillRule :: Ptr DrawingWand -> FillRule -> IO ()

-- | DrawSetFont() sets the fully-sepecified font to use when annotating
--   with text.
drawSetFont :: Ptr DrawingWand -> CString -> IO ()

-- | DrawSetFontSize() sets the font pointsize to use when annotating with
--   text.
drawSetFontSize :: Ptr DrawingWand -> CDouble -> IO ()

-- | DrawSetGravity() sets the text placement gravity to use when
--   annotating with text.
drawSetGravity :: Ptr DrawingWand -> GravityType -> IO ()

-- | DrawSetStrokeAntialias() controls whether stroked outlines are
--   antialiased. Stroked outlines are antialiased by default. When
--   antialiasing is disabled stroked pixels are thresholded to determine
--   if the stroke color or underlying canvas color should be used.
drawSetStrokeAntialias :: Ptr DrawingWand -> MagickBooleanType -> IO ()

-- | DrawSetStrokeColor() sets the color used for stroking object outlines.
drawSetStrokeColor :: Ptr DrawingWand -> Ptr PixelWand -> IO ()

-- | DrawSetStrokeDashArray() specifies the pattern of dashes and gaps used
--   to stroke paths. The stroke dash array represents an array of numbers
--   that specify the lengths of alternating dashes and gaps in pixels. If
--   an odd number of values is provided, then the list of values is
--   repeated to yield an even number of values. To remove an existing dash
--   array, pass a zero number_elements argument and null dash_array. A
--   typical stroke dash array might contain the members 5 3 2.
drawSetStrokeDashArray :: Ptr DrawingWand -> CSize -> Ptr CDouble -> IO ()

-- | DrawSetStrokeLineCap() specifies the shape to be used at the end of
--   open subpaths when they are stroked. Values of LineCap are
--   UndefinedCap, ButtCap, RoundCap, and SquareCap.
drawSetStrokeLineCap :: Ptr DrawingWand -> LineCap -> IO ()

-- | DrawSetStrokeLineJoin() specifies the shape to be used at the corners
--   of paths (or other vector shapes) when they are stroked. Values of
--   LineJoin are UndefinedJoin, MiterJoin, RoundJoin, and BevelJoin.
drawSetStrokeLineJoin :: Ptr DrawingWand -> LineJoin -> IO ()

-- | DrawSetStrokeOpacity() specifies the opacity of stroked object
--   outlines.
drawSetStrokeOpacity :: Ptr DrawingWand -> CDouble -> IO ()

-- | DrawSetStrokeOpacity() specifies the opacity of stroked object
--   outlines.
drawSetTextAntialias :: Ptr DrawingWand -> MagickBooleanType -> IO ()

-- | DrawSetStrokeWidth() sets the width of the stroke used to draw object
--   outlines.
drawSetStrokeWidth :: Ptr DrawingWand -> CDouble -> IO ()

-- | DrawAnnotation() draws text on the image.
drawAnnotation :: Ptr DrawingWand -> CDouble -> CDouble -> CString -> IO ()

-- | DrawCircle() draws a circle on the image.
drawCircle :: Ptr DrawingWand -> CDouble -> CDouble -> CDouble -> CDouble -> IO ()

-- | DrawComposite() composites an image onto the current image, using the
--   specified composition operator, specified position, and at the
--   specified size.
drawComposite :: Ptr DrawingWand -> CompositeOperator -> CDouble -> CDouble -> CDouble -> CDouble -> Ptr MagickWand -> IO MagickBooleanType

-- | DrawEllipse() draws an ellipse on the image.
drawEllipse :: Ptr DrawingWand -> CDouble -> CDouble -> CDouble -> CDouble -> CDouble -> CDouble -> IO ()

-- | DrawLine() draws a line on the image using the current stroke color,
--   stroke opacity, and stroke width.
drawLine :: Ptr DrawingWand -> CDouble -> CDouble -> CDouble -> CDouble -> IO ()

-- | DrawPolygon() draws a polygon using the current stroke, stroke width,
--   and fill color or texture, using the specified array of coordinates.
drawPolygon :: Ptr DrawingWand -> CSize -> Ptr PointInfo -> IO ()

-- | DrawRectangle() draws a rectangle given two coordinates and using the
--   current stroke, stroke width, and fill settings.
drawRectangle :: Ptr DrawingWand -> CDouble -> CDouble -> CDouble -> CDouble -> IO ()

-- | DrawRoundRectangle() draws a rounted rectangle given two coordinates,
--   x &amp; y corner radiuses and using the current stroke, stroke width,
--   and fill settings.
drawRoundRectangle :: Ptr DrawingWand -> CDouble -> CDouble -> CDouble -> CDouble -> CDouble -> CDouble -> IO ()

-- | PushDrawingWand() clones the current drawing wand to create a new
--   drawing wand. The original drawing wand(s) may be returned to by
--   invoking PopDrawingWand(). The drawing wands are stored on a drawing
--   wand stack. For every Pop there must have already been an equivalent
--   Push.
pushDrawingWand :: Ptr DrawingWand -> IO MagickBooleanType

-- | PopDrawingWand() destroys the current drawing wand and returns to the
--   previously pushed drawing wand. Multiple drawing wands may exist. It
--   is an error to attempt to pop more drawing wands than have been
--   pushed, and it is proper form to pop all drawing wands which have been
--   pushed.
popDrawingWand :: Ptr DrawingWand -> IO MagickBooleanType

-- | DrawRotate() applies the specified rotation to the current coordinate
--   space.
drawRotate :: Ptr DrawingWand -> CDouble -> IO ()

-- | DrawTranslate() applies a translation to the current coordinate system
--   which moves the coordinate system origin to the specified coordinate.
drawTranslate :: Ptr DrawingWand -> CDouble -> CDouble -> IO ()

-- | DrawPushPattern() indicates that subsequent commands up to a
--   DrawPopPattern() command comprise the definition of a named pattern.
--   The pattern space is assigned top left corner coordinates, a width and
--   height, and becomes its own drawing space. Anything which can be drawn
--   may be used in a pattern definition. Named patterns may be used as
--   stroke or brush definitions.
drawPushPattern :: Ptr DrawingWand -> CString -> CDouble -> CDouble -> CDouble -> CDouble -> IO MagickBooleanType

-- | DrawPopPattern() terminates a pattern definition.
drawPopPattern :: Ptr DrawingWand -> IO MagickBooleanType

-- | DrawColor() draws color on image using the current fill color,
--   starting at specified position, and using specified paint method. The
--   available paint methods are:
--   
--   PointMethod: Recolors the target pixel ReplaceMethod: Recolor any
--   pixel that matches the target pixel. FloodfillMethod: Recolors target
--   pixels and matching neighbors. ResetMethod: Recolor all pixels.
drawColor :: Ptr DrawingWand -> CDouble -> CDouble -> PaintMethod -> IO ()

-- | DrawPoint() draws a point using the current fill color.
drawPoint :: Ptr DrawingWand -> CDouble -> CDouble -> IO ()

module Graphics.ImageMagick.MagickWand.FFI.PixelIterator

-- | ClearPixelIterator() clear resources associated with a PixelIterator.
clearPixelIterator :: Ptr PixelIterator -> IO ()

-- | ClonePixelIterator() makes an exact copy of the specified iterator.
clonePixelIterator :: Ptr PixelIterator -> IO (Ptr PixelIterator)

-- | DestroyPixelIterator() deallocates resources associated with a
--   PixelIterator.
destroyPixelIterator :: Ptr PixelIterator -> IO (Ptr PixelIterator)

-- | IsPixelIterator() returns MagickTrue if the iterator is verified as a
--   pixel iterator.
isPixelIterator :: Ptr PixelIterator -> IO MagickBooleanType
newPixelIterator :: Ptr MagickWand -> IO (Ptr PixelIterator)

-- | NewPixelRegionIterator() returns a new pixel iterator.
newPixelRegionIterator :: Ptr MagickWand -> CSize -> CSize -> CSize -> CSize -> IO (Ptr PixelIterator)

-- | PixelClearIteratorException() clear any exceptions associated with the
--   iterator.
pixelClearIteratorException :: Ptr PixelIterator -> IO MagickBooleanType

-- | PixelGetIteratorException() returns the severity, reason, and
--   description of any error that occurs when using other methods in this
--   API.
pixelGetIteratorException :: Ptr PixelIterator -> Ptr ExceptionType -> IO CString

-- | PixelGetIteratorExceptionType() the exception type associated with the
--   iterator. If no exception has occurred, UndefinedExceptionType is
--   returned.
pixelGetIteratorExceptionType :: Ptr PixelIterator -> IO ExceptionType

-- | PixelGetCurrentIteratorRow() returns the current row as an array of
--   pixel wands from the pixel iterator.
pixelGetCurrentIteratorRow :: Ptr PixelIterator -> CSize -> Ptr (Ptr PixelWand)

-- | PixelGetIteratorRow() returns the current pixel iterator row.
pixelGetIteratorRow :: Ptr PixelIterator -> IO ()

-- | PixelGetNextIteratorRow() returns the next row as an array of pixel
--   wands from the pixel iterator.
pixelGetNextIteratorRow :: Ptr PixelIterator -> Ptr CSize -> IO (Ptr (Ptr PixelWand))
pixelSyncIterator :: Ptr PixelIterator -> IO MagickBooleanType

-- | PixelResetIterator() resets the pixel iterator. Use it in conjunction
--   with PixelGetNextIteratorRow() to iterate over all the pixels in a
--   pixel container.
pixelResetIterator :: Ptr PixelIterator -> IO ()

module Graphics.ImageMagick.MagickWand.FFI.PixelWand

-- | DestroyPixelWand() deallocates resources associated with a PixelWand.
destroyPixelWand :: Ptr PixelWand -> IO (Ptr PixelWand)
destroyPixelWands :: Ptr PixelWand -> CSize -> IO ()
isPixelWand :: Ptr PixelWand -> IO MagickBooleanType

-- | PixelGetMagickColor() gets the magick color of the pixel wand.
pixelGetMagickColor :: Ptr PixelWand -> Ptr MagickPixelPacket -> IO ()

-- | PixelSetMagickColor() sets the color of the pixel wand.
pixelSetMagickColor :: Ptr PixelWand -> Ptr MagickPixelPacket -> IO ()
clearPixelWand :: Ptr PixelWand -> IO ()
clonePixelWand :: Ptr PixelWand -> IO (Ptr PixelWand)

-- | NewPixelWand() returns a new pixel wand.
newPixelWand :: IO (Ptr PixelWand)

-- | NewPixelWands() returns an array of pixel wands.
newPixelWands :: CSize -> IO (Ptr (Ptr PixelWand))

-- | PixelSetColor() sets the color of the pixel wand with a string (e.g.
--   <a>blue</a>, <a>#0000ff</a>, <a>rgb(0,0,255)</a>,
--   <a>cmyk(100,100,100,10)</a>, etc.).
pixelSetColor :: Ptr PixelWand -> CString -> IO MagickBooleanType

-- | PixelClearException() clear any exceptions associated with the
--   iterator.
pixelClearException :: Ptr PixelWand -> IO MagickBooleanType

-- | PixelGetException() returns the severity, reason, and description of
--   any error that occurs when using other methods in this API.
pixelGetException :: Ptr PixelWand -> Ptr ExceptionType -> IO CString

-- | PixelGetExceptionType() the exception type associated with the wand.
--   If no exception has occurred, UndefinedExceptionType is returned.
pixelGetExceptionType :: Ptr PixelWand -> IO ExceptionType

-- | PixelGetColorAsString() returnsd the color of the pixel wand as a
--   string.
pixelGetColorAsString :: Ptr PixelWand -> IO CString

-- | PixelGetColorAsNormalizedString() returns the normalized color of the
--   pixel wand as a string.
pixelGetColorAsNormalizedString :: Ptr PixelWand -> IO CString

-- | PixelGetRed) returns the normalized red color of the pixel wand.
pixelSetRed :: Ptr PixelWand -> CDouble -> IO ()

-- | PixelSetRedQuantum() sets the red color of the pixel wand.
pixelSetRedQuantum :: Ptr PixelWand -> Quantum -> IO ()

-- | PixelGetRed) returns the normalized red color of the pixel wand.
pixelGetRed :: Ptr PixelWand -> IO CDouble

-- | PixelGetRedQuantum() returns the red color of the pixel wand.
pixelGetRedQuantum :: Ptr PixelWand -> IO Quantum

-- | PixelGetGreen) returns the normalized green color of the pixel wand.
pixelGetGreen :: Ptr PixelWand -> IO CDouble

-- | PixelGetGreenQuantum() returns the green color of the pixel wand.
pixelGetGreenQuantum :: Ptr PixelWand -> IO Quantum

-- | PixelSetGreen() sets the green color of the pixel wand.
pixelSetGreen :: Ptr PixelWand -> CDouble -> IO ()

-- | PixelSetGreenQuantum() sets the green color of the pixel wand.
pixelSetGreenQuantum :: Ptr PixelWand -> Quantum -> IO ()

-- | PixelGetBlue() returns the normalized blue color of the pixel wand.
pixelGetBlue :: Ptr PixelWand -> IO CDouble
pixelSetBlue :: Ptr PixelWand -> CDouble -> IO ()

-- | PixelGetBlueQuantum() returns the blue color of the pixel wand.
pixelGetBlueQuantum :: Ptr PixelWand -> IO Quantum

-- | PixelSetBlueQuantum() sets the blue color of the pixel wand.
pixelSetBlueQuantum :: Ptr PixelWand -> Quantum -> IO ()

-- | IsPixelWandSimilar() returns MagickTrue if the distance between two
--   colors is less than the specified distance.
isPixelWandSimilar :: Ptr PixelWand -> Ptr PixelWand -> CDouble -> IO MagickBooleanType

-- | PixelGetCyan) returns the normalized blue color of the pixel wand.
pixelGetCyan :: Ptr PixelWand -> IO CDouble
pixelSetCyan :: Ptr PixelWand -> CDouble -> IO ()

-- | PixelGetCyanQuantum() returns the blue color of the pixel wand.
pixelGetCyanQuantum :: Ptr PixelWand -> IO Quantum

-- | PixelSetCyanQuantum() sets the blue color of the pixel wand.
pixelSetCyanQuantum :: Ptr PixelWand -> Quantum -> IO ()

-- | PixelGetMagenta) returns the normalized blue color of the pixel wand.
pixelGetMagenta :: Ptr PixelWand -> IO CDouble
pixelSetMagenta :: Ptr PixelWand -> CDouble -> IO ()

-- | PixelGetMagentaQuantum() returns the blue color of the pixel wand.
pixelGetMagentaQuantum :: Ptr PixelWand -> IO Quantum

-- | PixelSetMagentaQuantum() sets the blue color of the pixel wand.
pixelSetMagentaQuantum :: Ptr PixelWand -> Quantum -> IO ()

-- | PixelGetYellow) returns the normalized blue color of the pixel wand.
pixelGetYellow :: Ptr PixelWand -> IO CDouble
pixelSetYellow :: Ptr PixelWand -> CDouble -> IO ()

-- | PixelGetYellowQuantum() returns the blue color of the pixel wand.
pixelGetYellowQuantum :: Ptr PixelWand -> IO Quantum

-- | PixelSetYellowQuantum() sets the blue color of the pixel wand.
pixelSetYellowQuantum :: Ptr PixelWand -> Quantum -> IO ()

-- | PixelGetBlack) returns the normalized blue color of the pixel wand.
pixelGetBlack :: Ptr PixelWand -> IO CDouble
pixelSetBlack :: Ptr PixelWand -> CDouble -> IO ()

-- | PixelGetBlackQuantum() returns the blue color of the pixel wand.
pixelGetBlackQuantum :: Ptr PixelWand -> IO Quantum

-- | PixelSetBlackQuantum() sets the blue color of the pixel wand.
pixelSetBlackQuantum :: Ptr PixelWand -> Quantum -> IO ()

-- | PixelGetAlpha) returns the normalized blue color of the pixel wand.
pixelGetAlpha :: Ptr PixelWand -> IO CDouble

-- | PixelGetAlphaQuantum() returns the blue color of the pixel wand.
pixelGetAlphaQuantum :: Ptr PixelWand -> IO Quantum

-- | PixelSetAlphaQuantum() sets the blue color of the pixel wand.
pixelSetAlphaQuantum :: Ptr PixelWand -> Quantum -> IO ()
pixelSetAlpha :: Ptr PixelWand -> CDouble -> IO ()

-- | PixelGetOpacity) returns the normalized blue color of the pixel wand.
pixelGetOpacity :: Ptr PixelWand -> IO CDouble

-- | PixelGetOpacityQuantum() returns the blue color of the pixel wand.
pixelGetOpacityQuantum :: Ptr PixelWand -> IO Quantum

-- | PixelSetOpacityQuantum() sets the blue color of the pixel wand.
pixelSetOpacityQuantum :: Ptr PixelWand -> Quantum -> IO ()
pixelSetOpacity :: Ptr PixelWand -> CDouble -> IO ()

-- | PixelGetColorCount() returns the color count associated with this
--   color.
pixelGetColorCount :: Ptr PixelWand -> IO CSize

-- | PixelSetColorCount() sets the color count of the pixel wand.
pixelSetColorCount :: Ptr PixelWand -> CSize -> IO ()
pixelGetHSL :: Ptr PixelWand -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO ()

-- | PixelSetHSL() sets the normalized HSL color of the pixel wand.
pixelSetHSL :: Ptr PixelWand -> CDouble -> CDouble -> CDouble -> IO ()

-- | PixelSetColorFromWand() sets the color of the pixel wand.
pixelSetColorFromWand :: Ptr PixelWand -> Ptr PixelWand -> IO ()

-- | PixelGetIndex() returns the colormap index from the pixel wand.
pixelGetIndex :: Ptr PixelWand -> IO IndexPacket

-- | PixelSetIndex() sets the colormap index of the pixel wand.
pixelSetIndex :: Ptr PixelWand -> IndexPacket -> IO ()

-- | PixelGetQuantumColor() gets the color of the pixel wand as a
--   PixelPacket.
pixelGetQuantumColor :: Ptr PixelWand -> Ptr PixelPacket -> IO ()

-- | PixelGetQuantumColor() gets the color of the pixel wand as a
--   PixelPacket.
pixelSetQuantumColor :: Ptr PixelWand -> Ptr PixelPacket -> IO ()

-- | PixelGetFuzz() returns the normalized fuzz value of the pixel wand.
pixelGetFuzz :: Ptr PixelWand -> IO CDouble

-- | PixelSetFuzz() sets the fuzz value of the pixel wand.
pixelSetFuzz :: Ptr PixelWand -> CDouble -> IO ()

module Graphics.ImageMagick.MagickCore.Option
parseChannelOption :: MonadResource m => ByteString -> m ChannelType

module Graphics.ImageMagick.MagickCore.Mime
toMime :: MonadResource m => Text -> m Text

module Graphics.ImageMagick.MagickCore.Gem
convertHSBToRGB :: MonadResource m => Double -> Double -> Double -> m (Quantum, Quantum, Quantum)
convertHSLToRGB :: MonadResource m => Double -> Double -> Double -> m (Quantum, Quantum, Quantum)
convertHWBToRGB :: MonadResource m => Double -> Double -> Double -> m (Quantum, Quantum, Quantum)
convertRGBToHSB :: MonadResource m => Quantum -> Quantum -> Quantum -> m (Double, Double, Double)
convertRGBToHSL :: MonadResource m => Quantum -> Quantum -> Quantum -> m (Double, Double, Double)
convertRGBToHWB :: MonadResource m => Quantum -> Quantum -> Quantum -> m (Double, Double, Double)

module Graphics.ImageMagick.MagickCore.Exception
data MagickWandException
MagickWandException :: ExceptionSeverity -> ExceptionType -> String -> MagickWandException
class ExceptionCarrier a
getException :: ExceptionCarrier a => a -> IO MagickWandException
data ExceptionSeverity
data ExceptionType
instance Typeable MagickWandException
instance Exception MagickWandException
instance Show MagickWandException

module Graphics.ImageMagick.MagickWand.Types
type PPixelIterator = Ptr PixelIterator
type PPixelWand = Ptr PixelWand
type PPixelPacket = ForeignPtr PixelPacket
type PMagickPixelPacket = ForeignPtr MagickPixelPacket
type PDrawingWand = Ptr DrawingWand
type PMagickWand = Ptr MagickWand
data MagickWandException
MagickWandException :: ExceptionSeverity -> ExceptionType -> String -> MagickWandException
class ExceptionCarrier a
getException :: ExceptionCarrier a => a -> IO MagickWandException
class Storable a => Pixel a where withPixels xs f = unsafeWith (fromList xs) f
pixelStorageType :: Pixel a => [a] -> StorageType
withPixels :: Pixel a => [a] -> (Ptr a -> IO b) -> IO b
instance Pixel Double
instance Pixel Float
instance Pixel Word64
instance Pixel Word32
instance Pixel Word16
instance Pixel Word8
instance ExceptionCarrier (Ptr DrawingWand)
instance ExceptionCarrier (Ptr PixelWand)
instance ExceptionCarrier (Ptr PixelIterator)
instance ExceptionCarrier (Ptr MagickWand)

module Graphics.ImageMagick.MagickWand.PixelPacket
getPixelRed :: MonadIO m => PMagickPixelPacket -> m MagickRealType
setPixelRed :: MonadIO m => PMagickPixelPacket -> MagickRealType -> m ()
getPixelBlue :: MonadIO m => PMagickPixelPacket -> m MagickRealType
setPixelBlue :: MonadIO m => PMagickPixelPacket -> MagickRealType -> m ()
getPixelGreen :: MonadIO m => PMagickPixelPacket -> m MagickRealType
setPixelGreen :: MonadIO m => PMagickPixelPacket -> MagickRealType -> m ()
getPixelIndex :: MonadIO m => PMagickPixelPacket -> m MagickRealType
setPixelIndex :: MonadIO m => PMagickPixelPacket -> MagickRealType -> m ()

module Graphics.ImageMagick.MagickWand.Utils
fromMBool :: MonadResource m => IO MagickBooleanType -> m Bool
toMBool :: Bool -> MagickBooleanType
withException :: (MonadResource m, ExceptionCarrier a) => a -> IO (MagickBooleanType, b) -> m b
withException_ :: (MonadResource m, ExceptionCarrier a) => a -> IO MagickBooleanType -> m ()
withExceptionIO :: ExceptionCarrier a => a -> IO (MagickBooleanType, b) -> IO b

module Graphics.ImageMagick.MagickWand.DrawingWand
drawingWand :: MonadResource m => m (ReleaseKey, PDrawingWand)

-- | returns the fill color used for drawing filled objects.
getFillColor :: MonadResource m => PDrawingWand -> PPixelWand -> m ()

-- | DrawSetFillColor() sets the fill color to be used for drawing filled
--   objects.
setFillColor :: MonadResource m => PDrawingWand -> PPixelWand -> m ()

-- | Sets the URL to use as a fill pattern for filling objects. Only local
--   URLs (<a>#identifier</a>) are supported at this time. These local URLs
--   are normally created by defining a named fill pattern with
--   <a>pushPattern</a>/<a>popPattern</a>.
setFillPatternURL :: MonadResource m => PDrawingWand -> Text -> m ()

-- | Sets the fill rule to use while drawing polygons.
setFillRule :: MonadResource m => PDrawingWand -> FillRule -> m ()

-- | Sets the fully-sepecified font to use when annotating with text.
setFont :: MonadResource m => PDrawingWand -> ByteString -> m ()

-- | Sets the font pointsize to use when annotating with text.
setFontSize :: MonadResource m => PDrawingWand -> Double -> m ()

-- | Sets the text placement gravity to use when annotating with text.
setGravity :: MonadResource m => PDrawingWand -> GravityType -> m ()
setStrokeAntialias :: MonadResource m => PDrawingWand -> Bool -> m ()

-- | sets the color used for stroking object outlines.
setStrokeColor :: MonadResource m => PDrawingWand -> PPixelWand -> m ()

-- | Specifies the pattern of dashes and gaps used to stroke paths. The
--   stroke dash array represents an array of numbers that specify the
--   lengths of alternating dashes and gaps in pixels. If an odd number of
--   values is provided, then the list of values is repeated to yield an
--   even number of values. To remove an existing dash array, pass an emtpy
--   list. A typical stroke dash array might contain the members 5 3 2.
setStrokeDashArray :: MonadResource m => PDrawingWand -> [Double] -> m ()

-- | Specifies the shape to be used at the end of open subpaths when they
--   are stroked. Values of <a>LineCap</a> are <tt>undefinedCap</tt>,
--   `buttCap, <a>roundCap</a> and <a>squareCap</a>.
setStrokeLineCap :: MonadResource m => PDrawingWand -> LineCap -> m ()

-- | Specifies the shape to be used at the corners of paths (or other
--   vector shapes) when they are stroked. Values of <a>LineJoin</a> are
--   <a>undefinedJoin</a>, <tt>miterJoin</tt>, <a>roundJoin</a> and
--   <a>bevelJoin</a>.
setStrokeLineJoin :: MonadResource m => PDrawingWand -> LineJoin -> m ()

-- | specifies the opacity of stroked object outlines.
setStrokeOpacity :: MonadResource m => PDrawingWand -> Double -> m ()

-- | sets the width of the stroke used to draw object outlines.
setStrokeWidth :: MonadResource m => PDrawingWand -> Double -> m ()

-- | Controls whether text is antialiased. Text is antialiased by default.
setTextAntialias :: MonadResource m => PDrawingWand -> Bool -> m ()

-- | Draws text on the image.
drawAnnotation :: MonadResource m => PDrawingWand -> Double -> Double -> Text -> m ()

-- | Draws a circle on the image.
drawCircle :: MonadResource m => PDrawingWand -> Double -> Double -> Double -> Double -> m ()

-- | Composites an image onto the current image, using the specified
--   composition operator, specified position, and at the specified size.
drawComposite :: MonadResource m => PDrawingWand -> CompositeOperator -> Double -> Double -> Double -> Double -> PMagickWand -> m ()

-- | Draws an ellipse on the image.
drawEllipse :: MonadResource m => PDrawingWand -> Double -> Double -> Double -> Double -> Double -> Double -> m ()

-- | Draws a line on the image using the current stroke color, stroke
--   opacity, and stroke width.
drawLine :: MonadResource m => PDrawingWand -> Double -> Double -> Double -> Double -> m ()

-- | Draws a point using the current fill color.
drawPoint :: MonadResource m => PDrawingWand -> Double -> Double -> m ()

-- | Draws a polygon using the current stroke, stroke width, and fill color
--   or texture, using the specified array of coordinates.
drawPolygon :: MonadResource m => PDrawingWand -> [PointInfo] -> m ()

-- | Draws a rectangle given two coordinates and using the current stroke,
--   stroke width, and fill settings.
drawRectangle :: MonadResource m => PDrawingWand -> Double -> Double -> Double -> Double -> m ()

-- | DrawRoundRectangle() draws a rounted rectangle given two coordinates,
--   x &amp; y corner radiuses and using the current stroke, stroke width,
--   and fill settings.
drawRoundRectangle :: MonadResource m => PDrawingWand -> Double -> Double -> Double -> Double -> Double -> Double -> m ()

-- | DrawColor() draws color on image using the current fill color,
--   starting at specified position, and using specified paint method. The
--   available paint methods are:
--   
--   PointMethod: Recolors the target pixel ReplaceMethod: Recolor any
--   pixel that matches the target pixel. FloodfillMethod: Recolors target
--   pixels and matching neighbors. ResetMethod: Recolor all pixels.
drawColor :: MonadResource m => PDrawingWand -> Double -> Double -> PaintMethod -> m ()

-- | Clones the current drawing wand to create a new drawing wand. The
--   original drawing wand(s) may be returned to by invoking
--   <a>popDrawingWand</a>. The drawing wands are stored on a drawing wand
--   stack. For every Pop there must have already been an equivalent Push.
pushDrawingWand :: MonadResource m => PDrawingWand -> m ()

-- | Destroys the current drawing wand and returns to the previously pushed
--   drawing wand. Multiple drawing wands may exist. It is an error to
--   attempt to pop more drawing wands than have been pushed, and it is
--   proper form to pop all drawing wands which have been pushed.
popDrawingWand :: MonadResource m => PDrawingWand -> m ()

-- | Applies the specified rotation to the current coordinate space.
rotate :: MonadResource m => PDrawingWand -> Double -> m ()

-- | Applies a translation to the current coordinate system which moves the
--   coordinate system origin to the specified coordinate.
translate :: MonadResource m => PDrawingWand -> Double -> Double -> m ()

-- | Indicates that subsequent commands up to a <a>popPattern</a> command
--   comprise the definition of a named pattern. The pattern space is
--   assigned top left corner coordinates, a width and height, and becomes
--   its own drawing space. Anything which can be drawn may be used in a
--   pattern definition. Named patterns may be used as stroke or brush
--   definitions.
pushPattern :: MonadResource m => PDrawingWand -> Text -> Double -> Double -> Double -> Double -> m ()

-- | Terminates a pattern definition.
popPattern :: MonadResource m => PDrawingWand -> m ()

module Graphics.ImageMagick.MagickWand.MagickWand

-- | Create magic wand environment and closes it at the end of the work,
--   should wrap all MagickWand functions withMagickWandGenesis :: IO a
--   -&gt; IO a withMagickWandGenesis :: (MonadCatchIO m, MonadBaseControl
--   IO m, MonadCatchIO (ResourceT IO)) =&gt; (ResourceT m c) -&gt; m c
withMagickWandGenesis :: ResourceT IO c -> IO c

-- | Open a nested block inside genesis (for tracking nested resources)
localGenesis :: MonadBaseControl IO m => ResourceT m a -> m a
magickWand :: MonadResource m => m (ReleaseKey, Ptr MagickWand)
wandResource :: MonadResource m => (IO (Ptr MagickWand)) -> m (ReleaseKey, Ptr MagickWand)
cloneMagickWand :: MonadResource m => Ptr MagickWand -> m (ReleaseKey, Ptr MagickWand)

-- | Returns the size associated with the magick wand.
getSize :: MonadResource m => Ptr MagickWand -> m (Int, Int)
setSize :: MonadResource m => Ptr MagickWand -> Int -> Int -> m ()

-- | MagickSetImageArtifact() associates a artifact with an image. The
--   format of the MagickSetImageArtifact method is:
setImageArtifact :: MonadResource m => PMagickWand -> ByteString -> ByteString -> m ()

-- | MagickDeleteImageArtifact() deletes a wand artifact.
deleteImageArtifact :: MonadResource m => PMagickWand -> ByteString -> m ()

-- | Returns the position of the iterator in the image list.
getIteratorIndex :: MonadResource m => Ptr MagickWand -> m Int

-- | Sets the iterator to the given position in the image list specified
--   with the index parameter. A zero index will set the first image as
--   current, and so on. Negative indexes can be used to specify an image
--   relative to the end of the images in the wand, with -1 being the last
--   image in the wand.
setIteratorIndex :: MonadResource m => Ptr MagickWand -> Int -> m ()
resetIterator :: MonadResource m => Ptr MagickWand -> m ()
magickIterate :: MonadResource m => Ptr MagickWand -> (Ptr MagickWand -> m ()) -> m ()
magickIterateReverse :: MonadResource m => Ptr MagickWand -> (Ptr MagickWand -> m ()) -> m ()

-- | Associates one or options with the wand (e.g. setOption wand
--   <a>jpeg:perserve</a> <a>yes</a>).
deleteOption :: MonadResource m => Ptr MagickWand -> Text -> m ()
getOption :: MonadResource m => Ptr MagickWand -> Text -> m Text

-- | Associates one or options with the wand (e.g. setOption wand
--   <a>jpeg:perserve</a> <a>yes</a>).
setOption :: MonadResource m => Ptr MagickWand -> Text -> Text -> m ()
getOptions :: MonadResource m => Ptr MagickWand -> Text -> m [Text]

-- | Deletes a wand property
deleteImageProperty :: MonadResource m => Ptr MagickWand -> Text -> m ()

-- | Returns a value associated with the specified property
getImageProperty :: MonadResource m => Ptr MagickWand -> Text -> m Text

-- | Associates a property with an image.
setImageProperty :: MonadResource m => Ptr MagickWand -> Text -> Text -> m ()

-- | Returns all the property names that match the specified pattern
--   associated with a wand
getImageProperties :: MonadResource m => Ptr MagickWand -> Text -> m [Text]

-- | Returns the named image profile.
getImageProfile :: MonadResource m => Ptr MagickWand -> Text -> m (Vector Word8)

-- | Removes the named image profile and returns it
removeImageProfile :: MonadResource m => Ptr MagickWand -> Text -> m (Vector Word8)

-- | Adds a named profile to the magick wand. If a profile with the same
--   name already exists, it is replaced. This method differs from the
--   <tt>profileImage</tt> method in that it does not apply any CMS color
--   profiles.
setImageProfile :: MonadResource m => Ptr MagickWand -> Text -> Vector Word8 -> m ()

-- | Returns all the profile names that match the specified pattern
--   associated with a wand.
getImageProfiles :: MonadResource m => Ptr MagickWand -> Text -> m [Text]

-- | MagickGetColorspace() gets the wand colorspace type.
getColorspace :: MonadResource m => PMagickWand -> m ColorspaceType
getCompression :: MonadResource m => PMagickWand -> m CompressionType
getCompressionQuality :: MonadResource m => PMagickWand -> m Int
getImageArtifacts :: MonadResource m => Ptr MagickWand -> Text -> m [Text]
getImageResolution :: MonadResource m => PMagickWand -> m (Double, Double)

-- | MagickSetColorspace() sets the wand colorspace type.
setColorspace :: MonadResource m => PMagickWand -> ColorspaceType -> m ()
setCompression :: MonadResource m => PMagickWand -> CompressionType -> m ()
setCompressionQuality :: MonadResource m => PMagickWand -> Int -> m ()
setImageResolution :: MonadResource m => PMagickWand -> Double -> Double -> m ()

module Graphics.ImageMagick.MagickWand.PixelIterator
pixelIterator :: MonadResource m => Ptr MagickWand -> m (ReleaseKey, PPixelIterator)
pixelRegionIterator :: MonadResource m => Ptr MagickWand -> Int -> Int -> Int -> Int -> m (ReleaseKey, PPixelIterator)
pixelGetNextIteratorRow :: MonadResource m => PPixelIterator -> m (Maybe (Vector PPixelWand))
pixelSyncIterator :: MonadResource m => PPixelIterator -> m ()
pixelResetIterator :: MonadResource m => PPixelIterator -> m ()

-- | creates lazy list of pixel vectors
pixelIterateList :: MonadResource m => PPixelIterator -> m [Vector PPixelWand]
pixelGetMagickColor :: MonadIO m => PPixelWand -> m PMagickPixelPacket
pixelSetMagickColor :: MonadResource m => PPixelWand -> PMagickPixelPacket -> m ()

module Graphics.ImageMagick.MagickWand.PixelWand
pixelWand :: MonadResource m => m PPixelWand
isPixelWandSimilar :: MonadResource m => PPixelWand -> PPixelWand -> Double -> m Bool
setColorCount :: MonadResource m => PPixelWand -> Int -> m ()
getColorCount :: MonadResource m => PPixelWand -> m Int
setColor :: MonadResource m => PPixelWand -> ByteString -> m ()
getColorAsString :: MonadResource m => PPixelWand -> m ByteString
getColorAsNormalizedString :: MonadResource m => PPixelWand -> m ByteString
getHSL :: MonadResource m => PPixelWand -> m (Double, Double, Double)
setHSL :: MonadResource m => PPixelWand -> Double -> Double -> Double -> m ()
getMagickColor :: MonadResource m => PPixelWand -> m PMagickPixelPacket
setMagickColor :: MonadResource m => PPixelWand -> PMagickPixelPacket -> m ()
setColorFromWand :: MonadResource m => PPixelWand -> PPixelWand -> m ()
getQuantumColor :: MonadResource m => PPixelWand -> m PPixelPacket
setQuantumColor :: MonadResource m => PPixelWand -> PPixelPacket -> m ()
getIndex :: MonadResource m => PPixelWand -> m IndexPacket
setIndex :: MonadResource m => PPixelWand -> IndexPacket -> m ()
getFuzz :: MonadResource m => PPixelWand -> m Double
setFuzz :: MonadResource m => PPixelWand -> Double -> m ()
getOpacity :: MonadResource m => PPixelWand -> m Double
getOpacityQuantum :: MonadResource m => PPixelWand -> m Quantum
setOpacity :: MonadResource m => PPixelWand -> Double -> m ()
setOpacityQuantum :: MonadResource m => PPixelWand -> Quantum -> m ()
getAlpha :: MonadResource m => PPixelWand -> m Double
getAlphaQuantum :: MonadResource m => PPixelWand -> m Quantum
setAlpha :: MonadResource m => PPixelWand -> Double -> m ()
setAlphaQuantum :: MonadResource m => PPixelWand -> Quantum -> m ()
getRed :: MonadResource m => PPixelWand -> m Double
getRedQuantum :: MonadResource m => PPixelWand -> m Quantum
setRed :: MonadResource m => PPixelWand -> Double -> m ()
setRedQuantum :: MonadResource m => PPixelWand -> Quantum -> m ()
getBlue :: MonadResource m => PPixelWand -> m Double
getBlueQuantum :: MonadResource m => PPixelWand -> m Quantum
setBlue :: MonadResource m => PPixelWand -> Double -> m ()
setBlueQuantum :: MonadResource m => PPixelWand -> Quantum -> m ()
getGreen :: MonadResource m => PPixelWand -> m Double
getGreenQuantum :: MonadResource m => PPixelWand -> m Quantum
setGreen :: MonadResource m => PPixelWand -> Double -> m ()
setGreenQuantum :: MonadResource m => PPixelWand -> Quantum -> m ()
getCyan :: MonadResource m => PPixelWand -> m Double
getCyanQuantum :: MonadResource m => PPixelWand -> m Quantum
setCyan :: MonadResource m => PPixelWand -> Double -> m ()
setCyanQuantum :: MonadResource m => PPixelWand -> Quantum -> m ()
getMagenta :: MonadResource m => PPixelWand -> m Double
getMagentaQuantum :: MonadResource m => PPixelWand -> m Quantum
setMagenta :: MonadResource m => PPixelWand -> Double -> m ()
setMagentaQuantum :: MonadResource m => PPixelWand -> Quantum -> m ()
getYellow :: MonadResource m => PPixelWand -> m Double
getYellowQuantum :: MonadResource m => PPixelWand -> m Quantum
setYellow :: MonadResource m => PPixelWand -> Double -> m ()
setYellowQuantum :: MonadResource m => PPixelWand -> Quantum -> m ()
getBlack :: MonadResource m => PPixelWand -> m Double
getBlackQuantum :: MonadResource m => PPixelWand -> m Quantum
setBlack :: MonadResource m => PPixelWand -> Double -> m ()
setBlackQuantum :: MonadResource m => PPixelWand -> Quantum -> m ()

module Graphics.ImageMagick.MagickWand.WandImage
getImageHeight :: MonadResource m => Ptr MagickWand -> m Int
getImageWidth :: MonadResource m => Ptr MagickWand -> m Int

-- | returns the color of the specified pixel into the pixelwand.
getImagePixelColor :: MonadResource m => PMagickWand -> Int -> Int -> PPixelWand -> m ()
resizeImage :: MonadResource m => Ptr MagickWand -> Int -> Int -> FilterTypes -> Double -> m ()
getImageCompressionQuality :: MonadResource m => Ptr MagickWand -> m Int

-- | Sets the image compression.
setImageCompression :: MonadResource m => PMagickWand -> CompressionType -> m ()
setImageCompressionQuality :: MonadResource m => Ptr MagickWand -> Int -> m ()
getImageBackgroundColor :: MonadResource m => PMagickWand -> m PPixelWand
setImageBackgroundColor :: MonadResource m => PMagickWand -> PPixelWand -> m ()
extentImage :: MonadResource m => PMagickWand -> Int -> Int -> Int -> Int -> m ()
floodfillPaintImage :: MonadResource m => PMagickWand -> ChannelType -> PPixelWand -> Double -> PPixelWand -> Int -> Int -> Bool -> m ()
negateImage :: MonadResource m => PMagickWand -> Bool -> m ()
negateImageChannel :: MonadResource m => PMagickWand -> ChannelType -> Bool -> m ()
getImageClipMask :: MonadResource m => PMagickWand -> m PMagickWand
setImageClipMask :: MonadResource m => PMagickWand -> PMagickWand -> m ()
compositeImage :: MonadResource m => PMagickWand -> PMagickWand -> CompositeOperator -> Int -> Int -> m ()
compositeImageChannel :: MonadResource m => PMagickWand -> PMagickWand -> ChannelType -> CompositeOperator -> Int -> Int -> m ()

-- | transparentPaintImage changes any pixel that matches color with the
--   color defined by fill.
transparentPaintImage :: MonadResource m => PMagickWand -> PPixelWand -> Double -> Double -> Bool -> m ()

-- | newImage adds a blank image canvas of the specified size and
--   background color to the wand.
newImage :: MonadResource m => PMagickWand -> Int -> Int -> PPixelWand -> m ()

-- | drawImage renders the drawing wand on the current image.
drawImage :: MonadResource m => PMagickWand -> PDrawingWand -> m ()
borderImage :: MonadResource m => PMagickWand -> PPixelWand -> Int -> Int -> m ()
shaveImage :: MonadResource m => PMagickWand -> Int -> Int -> m ()
setImageAlphaChannel :: MonadResource m => PMagickWand -> AlphaChannelType -> m ()
flipImage :: MonadResource m => Ptr MagickWand -> m ()
flopImage :: MonadResource m => Ptr MagickWand -> m ()

-- | MagickBlurImage() blurs an image. We convolve the image with a
--   gaussian operator of the given radius and standard deviation (sigma).
--   For reasonable results, the radius should be larger than sigma. Use a
--   radius of 0 and BlurImage() selects a suitable radius for you.
--   
--   The format of the MagickBlurImage method is:
blurImage :: MonadResource m => PMagickWand -> Double -> Double -> m ()
blurImageChannel :: MonadResource m => PMagickWand -> ChannelType -> Double -> Double -> m ()

-- | MagickNormalizeImage() enhances the contrast of a color image by
--   adjusting the pixels color to span the entire range of colors
--   available
--   
--   You can also reduce the influence of a particular channel with a gamma
--   value of 0.
normalizeImage :: MonadResource m => PMagickWand -> m ()
normalizeImageChannel :: MonadResource m => PMagickWand -> ChannelType -> m ()

-- | Simulates an image shadow.
shadowImage :: MonadResource m => PMagickWand -> Double -> Double -> Int -> Int -> m ()
addImage :: MonadResource m => PMagickWand -> PMagickWand -> m ()

-- | MagickAppendImages() append the images in a wand from the current
--   image onwards, creating a new wand with the single image result. This
--   is affected by the gravity and background settings of the first image.
--   Typically you would call either MagickResetIterator() or
--   MagickSetFirstImage() before calling this function to ensure that all
--   the images in the wand's image list will be appended together.
appendImages :: MonadResource m => PMagickWand -> Bool -> m (ReleaseKey, PMagickWand)

-- | MagickAddNoiseImage() adds random noise to the image.
addNoiseImage :: MonadResource m => PMagickWand -> NoiseType -> m ()

-- | writeImage() writes an image to the specified filename. If the
--   filename parameter is Nothing, the image is written to the filename
--   set by MagickReadImage or MagickSetImageFilename().
writeImage :: MonadResource m => PMagickWand -> Maybe (FilePath) -> m ()
writeImages :: MonadResource m => Ptr MagickWand -> FilePath -> Bool -> m ()

-- | sets the image virtual pixel method. the image virtual pixel method :
--   UndefinedVirtualPixelMethod, ConstantVirtualPixelMethod,
--   EdgeVirtualPixelMethod, MirrorVirtualPixelMethod, or
--   TileVirtualPixelMethod.
setVirtualPixelMethod :: MonadResource m => PMagickWand -> VirtualPixelMethod -> m VirtualPixelMethod

-- | Remove edges that are the background color from the image.
trimImage :: MonadResource m => PMagickWand -> Double -> m ()

-- | Resets the Wand page canvas and position.
resetImagePage :: MonadResource m => PMagickWand -> Maybe Text -> m ()

-- | Resets the Wand page canvas and position.
distortImage :: MonadResource m => PMagickWand -> DistortImageMethod -> [Double] -> Bool -> m ()

-- | Sshines a distant light on an image to create a three-dimensional
--   effect. You control the positioning of the light with azimuth and
--   elevation; azimuth is measured in degrees off the x axis and elevation
--   is measured in pixels above the Z axis.
shadeImage :: MonadResource m => PMagickWand -> Bool -> Double -> Double -> m ()

-- | Resets the Wand page canvas and position.
colorizeImage :: MonadResource m => PMagickWand -> PPixelWand -> PPixelWand -> m ()

-- | Evaluate expression for each pixel in the image.
fxImage :: MonadResource m => PMagickWand -> Text -> m (ReleaseKey, Ptr MagickWand)

-- | Evaluate expression for each pixel in the image.
fxImageChannel :: MonadResource m => PMagickWand -> ChannelType -> Text -> m (ReleaseKey, Ptr MagickWand)

-- | Adjusts the contrast of an image with a non-linear sigmoidal contrast
--   algorithm. Increase the contrast of the image using a sigmoidal
--   transfer function without saturating highlights or shadows. Contrast
--   indicates how much to increase the contrast (0 is none; 3 is typical;
--   20 is pushing it); mid-point indicates where midtones fall in the
--   resultant image (0 is white; 50 is middle-gray; 100 is black). Set
--   sharpen to <a>True</a> to increase the image contrast otherwise the
--   contrast is reduced.
sigmoidalContrastImage :: MonadResource m => PMagickWand -> Bool -> Double -> Double -> m ()
sigmoidalContrastImageChannel :: MonadResource m => PMagickWand -> ChannelType -> Bool -> Double -> Double -> m ()

-- | Applies an arithmetic, relational, or logical expression to an image.
--   Use these operators to lighten or darken an image, to increase or
--   decrease contrast in an image, or to produce the <a>negative</a> of an
--   image.
evaluateImage :: MonadResource m => PMagickWand -> MagickEvaluateOperator -> CDouble -> m ()

-- | see <a>evaluateImage</a>
evaluateImageChannel :: MonadResource m => PMagickWand -> ChannelType -> MagickEvaluateOperator -> CDouble -> m ()

-- | see <a>evaluateImage</a>
evaluateImages :: MonadResource m => PMagickWand -> MagickEvaluateOperator -> m ()

-- | Offsets an image as defined by x and y.
rollImage :: MonadResource m => PMagickWand -> Double -> Double -> m ()

-- | Annotates an image with text.
annotateImage :: MonadResource m => PMagickWand -> PDrawingWand -> Double -> Double -> Double -> Text -> m ()

-- | Composes all the image layers from the current given image onward to
--   produce a single image of the merged layers. The inital canvas's size
--   depends on the given ImageLayerMethod, and is initialized using the
--   first images background color. The images are then compositied onto
--   that image in sequence using the given composition that has been
--   assigned to each individual image.
mergeImageLayers :: MonadResource m => PMagickWand -> ImageLayerMethod -> m (ReleaseKey, PMagickWand)

-- | Applies a color vector to each pixel in the image. The length of the
--   vector is 0 for black and white and at its maximum for the midtones.
--   The vector weighting function is f(x)=(1-(4.0*((x-0.5)*(x-0.5)))).
--   
--   The format of the MagickTintImage method is:
tintImage :: MonadResource m => PMagickWand -> PPixelWand -> PPixelWand -> m ()
gaussianBlurImageChannel :: MonadResource m => PMagickWand -> ChannelType -> Double -> Double -> m ()

-- | MagickGaussianBlurImage() blurs an image. We convolve the image with a
--   Gaussian operator of the given radius and standard deviation (sigma).
--   For reasonable results, the radius should be larger than sigma. Use a
--   radius of 0 and MagickGaussianBlurImage() selects a suitable radius
--   for you.
gaussianBlurImage :: MonadResource m => PMagickWand -> Double -> Double -> m ()
setImageMatte :: MonadResource m => PMagickWand -> Bool -> m ()

-- | Extracts a region of the image.
cropImage :: MonadResource m => PMagickWand -> Int -> Int -> Int -> Int -> m ()

-- | Slides one edge of an image along the X or Y axis, creating a
--   parallelogram. An X direction shear slides an edge along the X axis,
--   while a Y direction shear slides an edge along the Y axis. The amount
--   of the shear is controlled by a shear angle. For X direction shears,
--   x_shear is measured relative to the Y axis, and similarly, for Y
--   direction shears y_shear is measured relative to the X axis. Empty
--   triangles left over from shearing the image are filled with the
--   background color.
shearImage :: MonadResource m => PMagickWand -> PPixelWand -> Double -> Double -> m ()

-- | Scales the size of an image to the given dimensions.
scaleImage :: MonadResource m => PMagickWand -> Int -> Int -> m ()

-- | MagickSparseColorImage(), given a set of coordinates, interpolates the
--   colors found at those coordinates, across the whole image, using
--   various methods.
--   
--   The format of the MagickSparseColorImage method is: ArcSparseColorion
--   will always ignore source image offset, and always <tt>bestfit</tt>
--   the destination image with the top left corner offset relative to the
--   polar mapping center.
--   
--   Bilinear has no simple inverse mapping so will not allow
--   <tt>bestfit</tt> style of image sparseion.
--   
--   Affine, Perspective, and Bilinear, will do least squares fitting of
--   the distrotion when more than the minimum number of control point
--   pairs are provided.
--   
--   Perspective, and Bilinear, will fall back to a Affine sparseion when
--   less than 4 control point pairs are provided. While Affine sparseions
--   will let you use any number of control point pairs, that is Zero pairs
--   is a No-Op (viewport only) distrotion, one pair is a translation and
--   two pairs of control points will do a scale-rotate-translate, without
--   any shearing.
sparseColorImage :: MonadResource m => PMagickWand -> ChannelType -> SparseColorMethod -> Vector Double -> m ()

-- | MagickFunctionImage() applys an arithmetic, relational, or logical
--   expression to an image. Use these operators to lighten or darken an
--   image, to increase or decrease contrast in an image, or to produce the
--   <a>negative</a> of an image.
functionImage :: MonadResource m => PMagickWand -> MagickFunction -> Vector Double -> m ()
functionImageChannel :: MonadResource m => PMagickWand -> ChannelType -> MagickFunction -> Vector Double -> m ()

-- | MagickCoalesceImages() composites a set of images while respecting any
--   page offsets and disposal methods. GIF, MIFF, and MNG animation
--   sequences typically start with an image background and each subsequent
--   image varies in size and offset. MagickCoalesceImages() returns a new
--   sequence where each image in the sequence is the same size as the
--   first and composited with the next image in the sequence.
coalesceImages :: MonadResource m => PMagickWand -> m (ReleaseKey, PMagickWand)

-- | returns the number of images associated with a magick wand.
getNumberImages :: MonadResource m => PMagickWand -> m Int

-- | Gets the image at the current image index.
getImage :: MonadResource m => PMagickWand -> m (ReleaseKey, PMagickWand)

-- | Compares each image with the next in a sequence and returns the
--   maximum bounding region of any pixel differences it discovers.
compareImageLayers :: MonadResource m => PMagickWand -> ImageLayerMethod -> m (ReleaseKey, PMagickWand)

-- | Returns <a>False</a> if the image alpha channel is not activated. That
--   is, the image is RGB rather than RGBA or CMYK rather than CMYKA.
getImageAlphaChannel :: MonadResource m => PMagickWand -> m Bool

-- | MagickGetImageBlob() implements direct to memory image formats. It
--   returns the image as a blob (a formatted <a>file</a> in memory) and
--   its length, starting from the current position in the image sequence.
--   Use <a>setImageFormat</a> to set the format to write to the blob (GIF,
--   JPEG, PNG, etc.). ImageMagick blob is automatically freed in this
--   function, returned bytestring is on haskell heap.
getImageBlob :: MonadResource m => PMagickWand -> m ByteString

-- | Gets the image delay.
getImageDelay :: MonadResource m => PMagickWand -> m Int

-- | Gets the image depth.
getImageDepth :: MonadResource m => PMagickWand -> m Int

-- | Returns the format of a particular image in a sequence.
getImageFormat :: MonadResource m => PMagickWand -> m Text

-- | Generates an SHA-256 message digest for the image pixel stream
getImageSignature :: MonadResource m => PMagickWand -> m ByteString

-- | Reads an image or image sequence. The images are inserted at the
--   current image pointer position
readImage :: MonadResource m => Ptr MagickWand -> FilePath -> m ()

-- | Reads an image or image sequence from a blob
readImageBlob :: MonadResource m => PMagickWand -> ByteString -> m ()

-- | Sets the image delay.
setImageDelay :: MonadResource m => PMagickWand -> Int -> m ()

-- | Sets the image depth.
setImageDepth :: MonadResource m => PMagickWand -> Int -> m ()
setImageFormat :: MonadResource m => PMagickWand -> Text -> m ()

-- | Sets image Type
setImageType :: MonadResource m => PMagickWand -> ImageType -> m ()

-- | Strips an image of all profiles and comments.
stripImage :: MonadResource m => PMagickWand -> m ()

-- | Gets the image scene
getImageScene :: MonadResource m => PMagickWand -> m Int

-- | Replaces the last image returned by <tt>setImageIndex</tt> and
--   iteration methods with the images from the specified wand.
setImage :: MonadResource m => PMagickWand -> PMagickWand -> m ()

-- | MagickRemoveImage() removes an image from the image list.
removeImage :: MonadResource m => PMagickWand -> m ()

-- | Accepts pixel data. The pixel data can be in any <tt>Pixels</tt>
--   format in the order specified by map.
importImagePixels :: (MonadResource m, Pixel a) => PMagickWand -> Int -> Int -> Int -> Int -> Text -> [a] -> m ()

-- | Extracts pixel data from an image and returns it to you. The data is
--   returned as <tt>Pixels</tt> in the order specified by cmap.
exportImagePixels :: (MonadResource m, Pixel a) => PMagickWand -> Int -> Int -> Int -> Int -> Text -> m [a]

-- | Rotates an image the specified number of degrees. Empty triangles left
--   over from rotating the image are filled with the background color.
rotateImage :: MonadResource m => PMagickWand -> PPixelWand -> Double -> m ()

module Graphics.ImageMagick.MagickCore

module Graphics.ImageMagick.MagickWand
