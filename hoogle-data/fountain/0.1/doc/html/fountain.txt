-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A fountain codec.
--   
--   Fountain codes are forward error correction codes for erasure
--   channels. They are able to recover lost packets without needing a
--   backchannel. As a rateless code, transmitters generate packets at
--   random, on the fly. Receivers then listen to as many packets as needed
--   to reconstruct the message.
@package fountain
@version 0.1


-- | Fountain codes are forward error correction codes for erasure
--   channels. They are able to recover lost packets without needing a
--   backchannel. As a rateless code, transmitters generate packets at
--   random, on the fly. Receivers then listen to as many packets as needed
--   to reconstruct the message.
module Codec.Fountain

-- | A message droplet is a set of message indices and the combined symbol.
data Droplet a
Droplet :: IntSet -> a -> Droplet a

-- | A decoder holds the state of the decoding process.
data Decoder a

-- | A precoding matrix that appends extra symbols to a message.
type Precoding = [IntSet]

-- | Generates a random precoding matrix.
--   
--   <pre>
--   precoding seed messageLength extraSymbols boundaries
--   </pre>
precoding :: Int -> Int -> Int -> (Int, Int) -> Precoding

-- | An infinite list of droplets, given a seed, the max degree, precoding,
--   and a message.
droplets :: (Num a, Bits a) => Int -> Int -> Precoding -> [a] -> [Droplet a]

-- | Creates a new decoder given a message length and the precoding.
decoder :: (Num a, Bits a) => Int -> Precoding -> Decoder a

-- | Given a <a>Decoder</a> and a new <a>Droplet</a>, returns either an
--   updated <a>Decoder</a> or the decoded message.
decode :: (Num a, Bits a) => Decoder a -> Droplet a -> (Decoder a, Maybe [a])

-- | Runs a test of a [Word8] message given the message length, max droplet
--   degree, and a seed. Returns the number of droplets that were needed to
--   decode the message and if the message was sucessfully decoded.
test :: Int -> Int -> Precoding -> Int -> (Int, Bool, [Decoder Word8])

-- | Runs a test with a randomly generated precoding.
--   
--   <pre>
--   test' messageLength dropletMaxDegree extraSymbols (precodingMinDegree, precodingMaxDegree) seed
--   </pre>
test' :: Int -> Int -> Int -> (Int, Int) -> Int -> (Int, Bool, [Decoder Word8])

-- | A visual of <a>Decoder</a> progress.
decoderProgress :: Decoder a -> String
instance Show a => Show (Droplet a)
instance Eq a => Eq (Droplet a)
