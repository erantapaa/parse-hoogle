-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | HsQML (Qt5) backend for Diagrams
--   
--   `diagrams-hsqml` is a <a>diagrams</a> backend painting on a QtQuick
--   Canvas.
--   
--   To use the package, you only need the main module
--   <a>Diagrams.Backend.HsQML</a>
--   
--   Example usage and QML scripts provided in
--   <a>Diagrams.Backend.HsQML.Tutorial</a>
@package diagrams-hsqml
@version 0.0.0.2


-- | A QML object controlling the gradient object.
module Diagrams.Backend.HsQML.GradientObj
data AddColourStopSignal
addColourStopSignal :: Proxy AddColourStopSignal
data GradientObj
GradientObj :: GradientObj

-- | Adds a new colour stop to a gradient.
addColourStop :: ObjRef GradientObj -> Double -> Double -> Double -> Double -> Double -> IO ()

-- | Create a new gradient object.
newGradient :: IO (ObjRef GradientObj)
instance Typeable AddColourStopSignal
instance Typeable GradientObj
instance DefaultClass GradientObj
instance SignalKeyClass AddColourStopSignal


-- | Ceci est une boilerplate.
module Diagrams.Backend.HsQML.DiagramObj.Signals
data Save
data Restore
data RenderText
data BeginPath
data ClosePath
data MoveTo
data Stroke
data Fill
data LineTo
data BezierCurveTo
data SetLineCap
data SetLineJoin
data SetLineMiterLimit
data SetGlobalAlpha
data SetLineWidth
data SetStrokeColour
data SetFillColour
data ConnectLinearGradient
data ConnectRadialGradient
data SetLineGradient
data SetFillGradient
data SetFont
data OddEvenFill
data WindingFill
save :: Proxy Save
restore :: Proxy Restore
renderText :: Proxy RenderText
beginPath :: Proxy BeginPath
closePath :: Proxy ClosePath
moveTo :: Proxy MoveTo
stroke :: Proxy Stroke
fill :: Proxy Fill
lineTo :: Proxy LineTo
bezierCurveTo :: Proxy BezierCurveTo
setLineCap :: Proxy SetLineCap
setLineJoin :: Proxy SetLineJoin
setLineMiterLimit :: Proxy SetLineMiterLimit
setGlobalAlpha :: Proxy SetGlobalAlpha
setLineWidth :: Proxy SetLineWidth
setStrokeColour :: Proxy SetStrokeColour
setFillColour :: Proxy SetFillColour
connectLinearGradient :: Proxy ConnectLinearGradient
connectRadialGradient :: Proxy ConnectRadialGradient
setLineGradient :: Proxy SetLineGradient
setFillGradient :: Proxy SetFillGradient
setFont :: Proxy SetFont
oddEvenFill :: Proxy OddEvenFill
windingFill :: Proxy WindingFill
instance Typeable Save
instance Typeable Restore
instance Typeable RenderText
instance Typeable BeginPath
instance Typeable ClosePath
instance Typeable MoveTo
instance Typeable Stroke
instance Typeable Fill
instance Typeable LineTo
instance Typeable BezierCurveTo
instance Typeable SetLineCap
instance Typeable SetLineJoin
instance Typeable SetLineMiterLimit
instance Typeable SetGlobalAlpha
instance Typeable SetLineWidth
instance Typeable SetStrokeColour
instance Typeable SetFillColour
instance Typeable ConnectLinearGradient
instance Typeable ConnectRadialGradient
instance Typeable SetLineGradient
instance Typeable SetFillGradient
instance Typeable SetFont
instance Typeable OddEvenFill
instance Typeable WindingFill
instance SignalKeyClass WindingFill
instance SignalKeyClass OddEvenFill
instance SignalKeyClass SetFont
instance SignalKeyClass SetFillGradient
instance SignalKeyClass SetLineGradient
instance SignalKeyClass ConnectRadialGradient
instance SignalKeyClass ConnectLinearGradient
instance SignalKeyClass SetFillColour
instance SignalKeyClass SetStrokeColour
instance SignalKeyClass SetLineWidth
instance SignalKeyClass SetGlobalAlpha
instance SignalKeyClass SetLineMiterLimit
instance SignalKeyClass SetLineJoin
instance SignalKeyClass SetLineCap
instance SignalKeyClass BezierCurveTo
instance SignalKeyClass LineTo
instance SignalKeyClass Fill
instance SignalKeyClass Stroke
instance SignalKeyClass MoveTo
instance SignalKeyClass ClosePath
instance SignalKeyClass BeginPath
instance SignalKeyClass RenderText
instance SignalKeyClass Restore
instance SignalKeyClass Save


-- | The <a>DiagramObj</a> type, together with a corresponding
--   <a>DefaultClass</a> instance that defines the necessary methods and
--   signals for use by QML.
module Diagrams.Backend.HsQML.DiagramObj.Type

-- | The type to which the parts of a diagram are rendered. The end result
--   of rendering is always a DiagramObj (). The monoid instance sequences
--   actions on the same argument, with noop as identity. As DiagramObj is
--   a wrapper over a function to IO, <a>Functor</a>, <a>Applicative</a>,
--   <a>Monad</a>, and <a>MonadIO</a> instances are defined in an expected
--   way.
newtype DiagramObj a
DiagramObj :: (ObjRef (DiagramObj ()) -> IO a) -> DiagramObj a

-- | Function called on every repaint of the QML. The <a>ObjRef</a> is
--   necessary to fire signals into QML.
reload :: DiagramObj a -> ObjRef (DiagramObj ()) -> IO a
instance Typeable DiagramObj
instance Functor DiagramObj
instance DefaultClass (DiagramObj ())
instance MonadIO DiagramObj
instance Monad DiagramObj
instance Applicative DiagramObj
instance Monoid a => Monoid (DiagramObj a)


-- | As <a>DiagramObj</a> is a <a>Monoid</a>, complex diagrams may be
--   optained by <a>mappend</a>ing simple ones together. This module
--   provides functions creating <a>DiagramObj</a>s containing a single
--   command each.
module Diagrams.Backend.HsQML.DiagramObj.Commands

-- | Push the current state (style, font, etc) onto the state stack.
save :: DiagramObj ()

-- | Pop the current state (style, font, etc) from the state stack.
restore :: DiagramObj ()

-- | Display text on a specified point.
text :: String -> Double -> Double -> DiagramObj ()

-- | Start assembling a new path.
beginPath :: DiagramObj ()

-- | Connect the current path vertex to the start of the path.
closePath :: DiagramObj ()

-- | Change the current position.
moveTo :: P2 -> DiagramObj ()

-- | Stroke the current path.
stroke :: DiagramObj ()

-- | Fill the current path. Works only on paths that were previously
--   <tt>close</tt>d.
fill :: DiagramObj ()

-- | Draw a straight line from the current position to a given point.
lineTo :: P2 -> DiagramObj ()

-- | Draw a bezier curve from the current position to a given point, using
--   two control points.
bezierCurveTo :: P2 -> P2 -> P2 -> DiagramObj ()

-- | Set the line cap style.
setLineCap :: LineCap -> DiagramObj ()

-- | Set the line join style.
setLineJoin :: LineJoin -> DiagramObj ()

-- | Set the miter limit.
setLineMiterLimit :: LineMiterLimit -> DiagramObj ()

-- | Set the global alpha (subject to <a>save</a> and <a>restore</a>).
setOpacity :: Opacity -> DiagramObj ()

-- | Set the line width (output coordinates assumed).
setLineWidth :: LineWidth -> DiagramObj ()

-- | Convert a colour to a tuple of (r,g,b,a) components.
getRGBA :: SomeColor -> (Double, Double, Double, Double)

-- | Create a linear gradient.
getLinearGradient :: LGradient -> DiagramObj (ObjRef GradientObj)

-- | Create a radial gradient.
getRadialGradient :: RGradient -> DiagramObj (ObjRef GradientObj)

-- | Set stroke style to a flat colour.
setStrokeColour :: SomeColor -> DiagramObj ()

-- | Set stroke style to a previously assembled gradient.
setLineGradient :: DiagramObj ()

-- | Set stroke style.
setLineTexture :: LineTexture -> DiagramObj ()

-- | Add colour stops to a gradient.
setGradient :: [GradientStop] -> ObjRef GradientObj -> IO ()

-- | Set fill style to a flat colour.
setFillColour :: SomeColor -> DiagramObj ()

-- | Set fill style to a previously defined gradient.
setFillGradient :: DiagramObj ()

-- | Set fill style.
setFillTexture :: FillTexture -> DiagramObj ()

-- | Set font.
setFont :: Font -> DiagramObj ()

-- | Set fill rule.
setFillRule :: FillRule -> DiagramObj ()

module Diagrams.Backend.HsQML.DiagramObj


-- | Interface to the Diagrams backend machinery.
module Diagrams.Backend.HsQML.Render
data HsQML
HsQML :: HsQML

-- | A lens from HsQML backend options to a <a>SizeSpec2D</a>.
--   
--   <pre>
--   sizeSpec :: <a>Lens'</a> (<a>Options</a> <a>HsQML</a> <a>R2</a>) <a>SizeSpec2D</a>
--   </pre>
sizeSpec :: Functor f => (SizeSpec2D -> f SizeSpec2D) -> Options HsQML R2 -> f (Options HsQML R2)

-- | Currently not supported, returns <a>mempty</a>.
addAnnotation :: String -> DiagramObj ()

-- | Apply style to a Context2D. Currently supports the following
--   <a>Attribute</a>s:
--   
--   <ul>
--   <li><a>LineCap</a></li>
--   <li><a>LineJoin</a></li>
--   <li><a>LineMiterLimit</a></li>
--   <li><a>Opacity</a></li>
--   <li><a>LineWidth</a></li>
--   <li><a>LineTexture</a></li>
--   <li><a>FillTexture</a></li>
--   <li><a>Font</a></li>
--   <li><a>FillRule</a></li>
--   </ul>
useStyle :: Style R2 -> DiagramObj ()

-- | Render a <a>RTree</a> to an intermediate representation.
renderHsQML :: Options HsQML R2 -> RTree HsQML R2 Annotation -> Render HsQML R2

-- | Render a trail, closing loops.
renderTrail :: P2 -> Trail R2 -> DiagramObj ()

-- | Render a closed segment beginning on a given point.
renderSeg :: P2 -> Segment Closed R2 -> DiagramObj ()

-- | Close a loop using the last (open) segment and two endpoints.
closeSeg :: Segment Open R2 -> P2 -> P2 -> DiagramObj ()
instance Typeable HsQML
instance Renderable (Path R2) HsQML
instance Renderable (Trail R2) HsQML
instance Renderable Text HsQML
instance Backend HsQML R2


-- | The end-user API.
module Diagrams.Backend.HsQML

-- | Render a diagram to a QML object that controls a Canvas.
renderHsQML :: SizeSpec2D -> Diagram HsQML R2 -> IO (ObjRef (DiagramObj ()))

-- | A specification of a (requested) rectangular size.
data SizeSpec2D :: *

-- | Specify an explicit width. The height should be determined
--   automatically (so as to preserve aspect ratio).
Width :: UnpkDouble -> SizeSpec2D

-- | Specify an explicit height. The width should be determined
--   automatically (so as to preserve aspect ratio).
Height :: UnpkDouble -> SizeSpec2D

-- | An explicit specification of a width and height.
Dims :: UnpkDouble -> UnpkDouble -> SizeSpec2D

-- | Absolute size: use whatever size an object already has; do not
--   rescale.
Absolute :: SizeSpec2D

-- | Create a size specification from a possibly-specified width and
--   height.
mkSizeSpec :: Maybe Double -> Maybe Double -> SizeSpec2D
data HsQML
HsQML :: HsQML

-- | Backend-specific rendering options.
type B = HsQML

-- | The type to which the parts of a diagram are rendered. The end result
--   of rendering is always a DiagramObj (). The monoid instance sequences
--   actions on the same argument, with noop as identity. As DiagramObj is
--   a wrapper over a function to IO, <a>Functor</a>, <a>Applicative</a>,
--   <a>Monad</a>, and <a>MonadIO</a> instances are defined in an expected
--   way.
data DiagramObj a

module Diagrams.Backend.HsQML.Tutorial
