-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Networked-game support library
--   
--   Networked-game support library
@package networked-game
@version 0.1.0.1

module NetworkedGame.Packet
newtype Packet
Packet :: ByteString -> Packet
mkPacket :: Binary a => a -> Packet
hPutPacket :: Handle -> Packet -> IO ()
hGetPacketed :: Binary a => Handle -> IO a

module NetworkedGame.Handles
newtype ConnectionId
ConnectionId :: Int -> ConnectionId
data Handles
emptyHandles :: Handles
removeHandle :: ConnectionId -> Handles -> Handles
lookupHandle :: ConnectionId -> Handles -> Maybe Handle
nullHandles :: Handles -> Bool
addHandle :: ConnectionId -> Handle -> Handles -> Handles
forHandles_ :: Monad m => Handles -> (Handle -> m a) -> m ()
instance Eq ConnectionId
instance Show ConnectionId
instance Ord ConnectionId
instance Read ConnectionId

module NetworkedGame.Server
data NetworkServer c w
NetworkServer :: PortID -> Int -> (Handles -> Float -> w -> IO w) -> (Handles -> ConnectionId -> w -> IO w) -> (Handles -> ConnectionId -> w -> IO w) -> (Handles -> ConnectionId -> c -> w -> IO w) -> NetworkServer c w
serverPort :: NetworkServer c w -> PortID
eventsPerSecond :: NetworkServer c w -> Int
onTick :: NetworkServer c w -> Handles -> Float -> w -> IO w
onConnect :: NetworkServer c w -> Handles -> ConnectionId -> w -> IO w
onDisconnect :: NetworkServer c w -> Handles -> ConnectionId -> w -> IO w
onCommand :: NetworkServer c w -> Handles -> ConnectionId -> c -> w -> IO w
data Handles
data ConnectionId

-- | Main entry point for server
serverMain :: Binary c => NetworkServer c w -> w -> IO ()

-- | Send a command to a collection of clients
announce :: (MonadIO m, Binary c) => Handles -> c -> m ()

-- | Send a command to a single client identified by id.
announceOne :: (MonadIO m, Binary c) => Handles -> ConnectionId -> c -> m ()
