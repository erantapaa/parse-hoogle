-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Json Quasiquatation for Haskell.
--   
--   <tt>text-json-qq</tt> provides json quasiquatation for Haskell.
--   
--   This package expose the function <tt>jsonQQ</tt> that compile time
--   converts json code into a <tt>Text.JSON.JSValue</tt>. <tt>jsonQQ</tt>
--   got the signature
--   
--   <pre>
--   jsonQQ :: QuasiQuoter.
--   </pre>
--   
--   Consult documentation in the module <tt>Text.JSON.QQ</tt>.
@package text-json-qq
@version 0.4.1


-- | This package expose the function <tt>jsonQQ</tt> that compile time
--   converts json code into a <tt>Text.JSON.JSValue</tt>. <tt>jsonQQ</tt>
--   got the signature
--   
--   <pre>
--   jsonQQ :: QuasiQuoter
--   </pre>
--   
--   and is used like
--   
--   <pre>
--   myCode = [jsonQQ| {age: 23, name: "Pelle", likes: ["mac","Haskell"] } |]
--   </pre>
--   
--   where it is important that
--   
--   <ul>
--   <li>you got no space in <tt>[jsonQQ|</tt> and</li>
--   <li>no additional code after <tt>|]</tt>.</li>
--   </ul>
--   
--   The quasiquatation can also bind to variables like
--   
--   <pre>
--   myCode = [jsonQQ| {age: &lt;|age|&gt;, name: &lt;|name|&gt;} |]
--   where age = 34 :: Integer
--         name = "Pelle"
--   </pre>
--   
--   where the function <tt>toJSON</tt> will be called on <tt>age</tt> and
--   <tt>name</tt> runtime.
--   
--   You can also insert Haskell code:
--   
--   <pre>
--   myCode = [jsonQQ| {age: &lt;|age + 34 :: Integer|&gt;, name: &lt;|map toUpper name|&gt;} |]
--   where age = 34 :: Integer
--         name = "Pelle"
--   </pre>
--   
--   You can use a similar syntax if you want to insert a value of type
--   JSValue like
--   
--   <pre>
--   myCode = [jsonQQ| {"age": &lt;&lt;age&gt;&gt;} |]
--   </pre>
--   
--   If you want to replace the name of the key in a hash you'll use the
--   $-syntax:
--   
--   <pre>
--   foo = [jsonQQ| {$bar: 42} |]
--   bar = "age"
--   </pre>
module Text.JSON.QQ
jsonQQ :: QuasiQuoter
