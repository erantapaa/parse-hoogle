-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | FFI interface to libev
--   
--   FFI interface to libev
@package hlibev
@version 0.4.0


-- | <tt>Network.Libev</tt> is a low-level binding to the libev library
--   (<a>http://libev.schmorp.de/</a>). The <tt>libev</tt> documentation is
--   available here:
--   <a>http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod</a>.
module Network.Libev
type EvLoopPtr = Ptr EvLoop
evDefaultLoop :: CInt -> IO EvLoopPtr
evLoopNew :: CUInt -> IO EvLoopPtr
evLoop :: EvLoopPtr -> CInt -> IO ()
evUnloop :: EvLoopPtr -> CInt -> IO ()
evLoopDestroy :: EvLoopPtr -> IO ()
type CEvLoopFlagType = CInt
evloop_nonblock :: CEvLoopFlagType
evloop_oneshot :: CEvLoopFlagType
type CEvUnloopFlagType = CInt
evunloop_cancel :: CEvUnloopFlagType
evunloop_one :: CEvUnloopFlagType
evunloop_all :: CEvUnloopFlagType
type CEvFlagType = CInt

-- | Returns the default set of <a>CEvFlagType</a> flags
evRecommendedBackends :: IO CEvFlagType
evflag_auto :: CEvFlagType
evflag_noenv :: CEvFlagType
evflag_forkcheck :: CEvFlagType
evflag_noinotify :: CEvFlagType
evflag_nosigfd :: CEvFlagType
evflag_signalfd :: CEvFlagType
type CEvBackendFlagType = CInt
evbackend_select :: CEvBackendFlagType
evbackend_poll :: CEvBackendFlagType
evbackend_epoll :: CEvBackendFlagType
evbackend_kqueue :: CEvBackendFlagType
evbackend_devpoll :: CEvBackendFlagType
evbackend_port :: CEvBackendFlagType
evbackend_all :: CEvBackendFlagType

-- | <a>MutexCallback</a> is called by <tt>ev_set_loop_release_cb</tt>
type MutexCallback = EvLoopPtr -> IO ()

-- | Set up the given loop for mutex locking from haskell-land -- if you
--   want to touch the loop from other Haskell threads, you'll need to do
--   this. The two FunPtr objects returned need to be explicitly freed with
--   <a>freeMutexCallback</a>.
--   
--   IMPORTANT: if you want multithreaded access to an <a>EvLoopPtr</a>,
--   you'll have to acquire the <a>MVar</a> returned here (using
--   <a>withMVar</a>) whenever you call any of the <tt>ev</tt> functions.
--   Very bad C-land crash/bang/boom could otherwise result.
--   
--   ALSO IMPORTANT: any changes you make to an <a>EvLoopPtr</a> from
--   another thread while the event loop thread is blocked inside
--   <tt>ev_loop()</tt> will NOT take effect until the the event loop
--   thread unblocks. You'll need to set up an <tt>ev_async</tt> watcher in
--   order to wake up the event loop thread.
setupLockingForLoop :: EvLoopPtr -> IO (FunPtr MutexCallback, FunPtr MutexCallback, MVar ())
freeMutexCallback :: FunPtr MutexCallback -> IO ()

-- | <a>CEventType</a> is a bitfield used to flag whether a file descriptor
--   is readable, writable, or both. Valid values are <a>ev_read</a> and
--   <a>ev_write</a>. TODO: deprecate and replace by a datatype
type CEventType = CInt

-- | eventmask, revents, events...
ev_undef :: CEventType
ev_none :: CEventType
ev_read :: CEventType
ev_write :: CEventType
ev__iofdset :: CEventType
ev_io :: CEventType
ev_timeout :: CEventType
ev_timer :: CEventType
ev_periodic :: CEventType
ev_signal :: CEventType
ev_child :: CEventType
ev_stat :: CEventType

-- | <a>CEvFlagType</a> is a bitfield used to pass flags into
--   <a>evDefaultLoop</a>. Values (<a>evflag_auto</a>, <a>evflag_noenv</a>,
--   etc.) are combined with bitwise or. TODO: replace with a newtype with
--   a monoid instance
ev_idle :: CEventType
ev_prepare :: CEventType
ev_check :: CEventType
ev_embed :: CEventType
ev_fork :: CEventType
ev_async :: CEventType
ev_custom :: CEventType
ev_error :: CEventType
type EvIoPtr = Ptr EvIo

-- | An <a>IoCallback</a> is called when a file descriptor becomes readable
--   or writable. It takes a pointer to an <tt>ev_loop</tt> structure, a
--   pointer to an <tt>ev_io</tt> structure, and an event mask.
type IoCallback = EvLoopPtr -> EvIoPtr -> CEventType -> IO ()

-- | Makes a new <tt>ev_io</tt> struct using <a>malloc</a>. You are
--   responsible for freeing it with <a>freeEvIo</a>.
mkEvIo :: IO (EvIoPtr)

-- | free() an <a>EvIoPtr</a>
freeEvIo :: EvIoPtr -> IO ()

-- | Wrap up an <a>IoCallback</a> so it can be delivered into C-land. This
--   resource is not garbage-collected, you are responsible for freeing it
--   with <a>freeIoCallback</a>.
mkIoCallback :: IoCallback -> IO (FunPtr IoCallback)
freeIoCallback :: FunPtr IoCallback -> IO ()
evIoInit :: EvIoPtr -> FunPtr IoCallback -> CInt -> CEventType -> IO ()
evIoStart :: EvLoopPtr -> EvIoPtr -> IO ()
evIoStop :: EvLoopPtr -> EvIoPtr -> IO ()
data EvTimer
type EvTimerPtr = Ptr EvTimer

-- | A <a>TimerCallback</a> is called when a timer expires. It takes a
--   pointer to an <tt>ev_loop</tt> structure, a pointer to an
--   <tt>ev_timer</tt> structure, and an (unused?) event mask.
type TimerCallback = EvLoopPtr -> EvTimerPtr -> CEventType -> IO ()

-- | Makes a new <tt>ev_timer</tt> struct using <a>malloc</a>. You are
--   responsible for freeing it with <a>freeEvTimer</a>.
mkEvTimer :: IO (EvTimerPtr)

-- | free() an <a>EvTimer</a>
freeEvTimer :: EvTimerPtr -> IO ()

-- | Wrap up a <a>TimerCallback</a> so it can be delivered into C-land.
--   This resource is not garbage-collected, you are responsible for
--   freeing it with <a>freeTimerCallback</a>.
mkTimerCallback :: TimerCallback -> IO (FunPtr TimerCallback)
freeTimerCallback :: FunPtr TimerCallback -> IO ()
evTimerInit :: EvTimerPtr -> FunPtr TimerCallback -> EvTimestamp -> EvTimestamp -> IO ()
evTimerStart :: EvLoopPtr -> EvTimerPtr -> IO ()
evTimerStop :: EvLoopPtr -> EvTimerPtr -> IO ()
evTimerAgain :: EvLoopPtr -> EvTimerPtr -> IO ()
evTimerRemaining :: EvLoopPtr -> EvTimerPtr -> IO (EvTimestamp)
evTimerSetRepeat :: EvTimerPtr -> Double -> IO ()
type EvAsyncPtr = Ptr EvAsync

-- | An <a>AsyncCallback</a> is called when you wakeup an event loop with
--   <tt>ev_async_send</tt>
type AsyncCallback = EvLoopPtr -> EvAsyncPtr -> CEventType -> IO ()

-- | Makes a new <tt>ev_async</tt> struct using <a>malloc</a>. You are
--   responsible for freeing it with <a>freeEvAsync</a>.
mkEvAsync :: IO (EvAsyncPtr)

-- | free() an <a>EvAsync</a>
freeEvAsync :: EvAsyncPtr -> IO ()
evAsyncInit :: EvAsyncPtr -> FunPtr AsyncCallback -> IO ()
evAsyncSend :: EvLoopPtr -> EvAsyncPtr -> IO ()
evAsyncStart :: EvLoopPtr -> EvAsyncPtr -> IO ()
evAsyncStop :: EvLoopPtr -> EvAsyncPtr -> IO ()

-- | Wrap up an <a>AsyncCallback</a> so it can be delivered into C-land.
--   This resource is not garbage-collected, you are responsible for
--   freeing it with <a>freeAsyncCallback</a>.
mkAsyncCallback :: AsyncCallback -> IO (FunPtr AsyncCallback)
freeAsyncCallback :: FunPtr AsyncCallback -> IO ()

-- | Libev timestamp values are C doubles containing the (floating) number
--   of seconds since Jan 1, 1970.
type EvTimestamp = CDouble

-- | Fetch a the cached copy of the current time from a loop.
evNow :: EvLoopPtr -> IO EvTimestamp

-- | Fetches the current time from the operating system. Usually
--   <a>evNow</a> is preferred since it avoids a context switch by
--   returning a cached value.
evTime :: IO EvTimestamp

-- | Calls <tt>accept()</tt> and sets the socket non-blocking.
c_accept :: CInt -> IO (CInt)
c_close :: CInt -> IO (CInt)
c_read :: CInt -> CString -> CSize -> IO (CSize)
c_write :: CInt -> CString -> CSize -> IO (CSize)
c_setnonblocking :: CInt -> IO ()
instance Storable EvAsync
instance Storable EvTimer
instance Storable EvIo
instance Storable EvWatcher
