-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Toolset for the Haskell Game Programmer - Data Definitions
--   
--   HGamer3D is a toolset for developing 3D games in the programming
--   language Haskell. HGamer3D is available on Windows and Linux. This
--   package provides common data definitions and utility functions for
--   HGamer3D. Also in this package, the Entity Component System is placed.
@package HGamer3D-Data
@version 0.5.0


-- | Type definitions for 2D window
module HGamer3D.Data.Window

-- | A window is simply represented by it's window id, an unsigned C int
data Window
Window :: Int -> Window


-- | Module providing the time type for HGamer3D
module HGamer3D.Data.GameTime
type GameTime = TimeSpec
sec :: TimeSpec -> Int
msec :: TimeSpec -> Int
usec :: TimeSpec -> Int
secT :: Int -> TimeSpec
msecT :: Int -> TimeSpec
usecT :: Int -> TimeSpec
getTime :: IO GameTime
getThreadCPUTime :: IO GameTime
getProcessCPUTime :: IO GameTime
sleepFor :: GameTime -> IO ()
instance Num GameTime


-- | Angles as Degrees or Radians, based on Float datatype
module HGamer3D.Data.Angle
data Angle
Rad :: Float -> Angle
Deg :: Float -> Angle
data Radians
Radians :: Float -> Radians
data Degrees
Degrees :: Float -> Degrees
fromAngle :: Angles a => Angle -> a
addA :: Angle -> Angle -> Angle
subA :: Angle -> Angle -> Angle
mulA :: Angle -> Float -> Angle
divA :: Angle -> Float -> Angle
sinA :: Angle -> Float
cosA :: Angle -> Float
tanA :: Angle -> Float
asinA :: Float -> Angle
acosA :: Float -> Angle
atanA :: Float -> Angle
instance Eq Angle
instance Ord Angle
instance Show Angle
instance Eq Radians
instance Ord Radians
instance Show Radians
instance Eq Degrees
instance Ord Degrees
instance Show Degrees
instance Angles Degrees
instance Angles Radians
instance Angles Float


-- | Utility class to encapsulate class pointers
module HGamer3D.Data.HG3DClass
data HG3DClass
HG3DClass :: Ptr () -> Ptr () -> HG3DClass
ocPtr :: HG3DClass -> Ptr ()
ocFptr :: HG3DClass -> Ptr ()
instance Eq HG3DClass
instance Show HG3DClass
instance Storable HG3DClass


-- | Module providing the Colour type and some standard colours
module HGamer3D.Data.Colour

-- | HGamer3D colour type
data Colour
Colour :: Float -> Float -> Float -> Float -> Colour

-- | red component ranging from 0.0 to 1.0
cRed :: Colour -> Float

-- | green component ranging from 0.0 to 1.0
cGreen :: Colour -> Float

-- | blue component ranging from 0.0 to 1.0
cBlue :: Colour -> Float

-- | alpha component ranging from 0.0 to 1.0 with 1.0 being fully opaque
cAlpha :: Colour -> Float
white :: Colour
silver :: Colour
grey :: Colour
darkgrey :: Colour
black :: Colour
red :: Colour
maroon :: Colour
yellow :: Colour
olive :: Colour
lime :: Colour
green :: Colour
aqua :: Colour
teal :: Colour
blue :: Colour
navy :: Colour
fuchsia :: Colour
purple :: Colour
instance Eq Colour
instance Show Colour


-- | Vector library for HGamer3D
module HGamer3D.Data.Vector

-- | the 3d Zero vector
zeroVec3 :: Vec3

-- | the 2d unity vector
unitVec2 :: Vec2

-- | the 3d Zero vector
zeroVec3 :: Vec3

-- | the 3d Unity vector
unitVec3 :: Vec3
instance Typeable Vec4
instance Typeable Vec3
instance Typeable Vec2
instance Typeable UnitQuaternion
instance Eq Vec4
instance Eq Vec3
instance Eq Vec2
instance Eq UnitQuaternion


-- | Type definitions for 2D geometry
module HGamer3D.Data.Geometry2D

-- | A point has two coordinates an x and y one
data Point a
Point :: a -> a -> Point a
ptX :: Point a -> a
ptY :: Point a -> a

-- | A rectangle has an a position as x and y and widht and height
data Num a => Rectangle a
Rectangle :: a -> a -> a -> a -> Rectangle a
rectX :: Rectangle a -> a
rectY :: Rectangle a -> a
rectWidth :: Rectangle a -> a
rectHeight :: Rectangle a -> a

-- | derive a rectangle from upper left and lower right points
rectFromPoints :: Num a => Point a -> Point a -> Rectangle a

-- | get upper left and lower right point from a rect
pointsFromRect :: Num a => Rectangle a -> (Point a, Point a)
instance (Eq a, Num a) => Eq (Rectangle a)
instance (Num a, Show a) => Show (Rectangle a)


-- | Module providing better type names for standard types in HGamer3D
module HGamer3D.Data.TypeSynonyms

-- | the Size, Position and Orientation types, implemented as a Vec3 and
--   UnitQuaternion
type Size = Vec3
type Position = Vec3
type Orientation = UnitQuaternion


-- | Typeclasses for basic 3D transformations
module HGamer3D.Data.Transform3D

-- | a type with a HasPosition instance has a Position
class HasPosition t
position :: HasPosition t => t -> IO Position
positionTo :: HasPosition t => t -> Position -> IO ()

-- | a type with a HasSize instance has a Size
class HasSize t
size :: HasSize t => t -> IO Size
sizeTo :: HasSize t => t -> Size -> IO ()

-- | a type with an HasOrientation instance has an oriented in space
class HasOrientation t
orientation :: HasOrientation t => t -> IO Orientation
orientationTo :: HasOrientation t => t -> Orientation -> IO ()

-- | move the position
translate :: Position -> Position -> Position

-- | scale the size
scale :: Size -> Vec3 -> Size

-- | rotate object on own axis (yaw) by angle
yaw :: Orientation -> Angle -> Orientation

-- | rotate object on own axis (pitch) by angle
pitch :: Orientation -> Angle -> Orientation

-- | rotate object on own axis (roll) by angle
roll :: Orientation -> Angle -> Orientation


-- | Common data definitions for HGamer3D
module HGamer3D.Data

-- | A window is simply represented by it's window id, an unsigned C int
data Window
