-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | a distributed storage system
--   
--   This package contains a library for building distributed storage
--   systems.
@package Holumbus-Storage
@version 0.1.0


-- | Version : 0.1
--   
--   This Module contains the typeclass of a storage and the associated
--   datatypes.
module Holumbus.FileSystem.Storage

-- | The file-identifier, should be unique in the whole system and be an
--   instance of the classes show, eq, ord and binary
type FileId = String
type FileContent = ByteString
getContentLength :: FileContent -> Integer

-- | metadata of a file, known by the storage.
data FileData
MkFileData :: FileId -> Integer -> UTCTime -> UTCTime -> Integer -> FileData

-- | filename
fd_FileId :: FileData -> FileId

-- | filesize
fd_Size :: FileData -> Integer

-- | creation date
fd_CreationDate :: FileData -> UTCTime

-- | last modified date
fd_LastModifiedDate :: FileData -> UTCTime

-- | hash value
fd_Hashvalue :: FileData -> Integer

-- | Create a new file data item.
createFileData :: FileId -> FileContent -> IO (FileData)

-- | Updates a new file data item with the date, size and hash value of an
--   old one. First parameter is the new item, second the old one.
updateFileData :: FileData -> FileData -> FileData

-- | The interface of a storage.
class Storage s
openStorage :: (Storage s) => s -> IO (s)
closeStorage :: (Storage s) => s -> IO (s)
createFile :: (Storage s) => s -> FileId -> FileContent -> IO (s)
createFiles :: (Storage s) => s -> [(FileId, FileContent)] -> IO (s)
deleteFile :: (Storage s) => s -> FileId -> IO (s)
appendFile :: (Storage s) => s -> FileId -> FileContent -> IO (s)
containsFile :: (Storage s) => s -> FileId -> IO Bool
getFileContent :: (Storage s) => s -> FileId -> IO (Maybe FileContent)
getFileData :: (Storage s) => s -> FileId -> IO (Maybe FileData)
getFileIds :: (Storage s) => s -> IO [FileId]
instance Show FileData
instance Binary FileData


-- | Version : 0.1
module Holumbus.FileSystem.Node
class NodeClass n
closeNode :: (NodeClass n) => n -> IO ()
createFile :: (NodeClass n) => FileId -> FileContent -> n -> IO ()
createFiles :: (NodeClass n) => [(FileId, FileContent)] -> n -> IO ()
appendFile :: (NodeClass n) => FileId -> FileContent -> n -> IO ()
deleteFile :: (NodeClass n) => FileId -> Bool -> n -> IO ()
copyFile :: (NodeClass n) => FileId -> ClientPort -> n -> IO ()
containsFile :: (NodeClass n) => FileId -> n -> IO Bool
getFileContent :: (NodeClass n) => FileId -> n -> IO (Maybe FileContent)
getMultiFileContent :: (NodeClass n) => [FileId] -> n -> IO [(FileId, FileContent)]
getFileData :: (NodeClass n) => FileId -> n -> IO (Maybe FileData)
getFileIds :: (NodeClass n) => n -> IO [FileId]


-- | Version : 0.1
--   
--   Implementation of the storage class. The FileStorage saves each file
--   in a single physical file. The metadata of the files is hold in an
--   extra directory an saved on disk.
module Holumbus.FileSystem.Storage.FileStorage

-- | The filestorage datatype. Every file is physically saved in one file
--   on the harddisk
data FileStorage

-- | Create a new filestorage, which is empty an contains no files
newFileStorage :: FilePath -> FilePath -> FileStorage
instance Show FileStorage
instance Storage FileStorage


-- | Version : 0.1
--   
--   This module contains all message types which are exchanged between
--   node and Controller.
module Holumbus.FileSystem.Messages
type NodeId = Int

-- | Requests datatype, which is send to a filesystem Controller.
data ControllerRequestMessage
CReqContains :: FileId -> ControllerRequestMessage
CReqGetFileSites :: FileId -> ControllerRequestMessage
CReqGetNearestNodePortWithFile :: FileId -> SiteId -> ControllerRequestMessage
CReqGetNearestNodePortWithFiles :: [FileId] -> SiteId -> ControllerRequestMessage
CReqGetNearestNodePortForFile :: FileId -> Integer -> SiteId -> ControllerRequestMessage
CReqGetNearestNodePortForFiles :: [(FileId, Integer)] -> SiteId -> ControllerRequestMessage
CReqCreate :: FileId -> NodeId -> ControllerRequestMessage
CReqCreateS :: [(FileId, NodeId)] -> ControllerRequestMessage
CReqAppend :: FileId -> NodeId -> ControllerRequestMessage
CReqDelete :: FileId -> NodeId -> ControllerRequestMessage
CReqUnknown :: ControllerRequestMessage

-- | Response datatype from a filesystem Controller.
data ControllerResponseMessage
CRspSuccess :: ControllerResponseMessage
CRspGetFileSites :: (Set SiteId) -> ControllerResponseMessage
CRspContains :: Bool -> ControllerResponseMessage
CRspGetNearestNodePortWithFile :: (Maybe ClientPort) -> ControllerResponseMessage
CRspGetNearestNodePortWithFiles :: ClientPortMap -> ControllerResponseMessage
CRspGetNearestNodePortForFile :: (Maybe ClientPort) -> ControllerResponseMessage
CRspGetNearestNodePortForFiles :: ClientPortMap -> ControllerResponseMessage
CRspError :: String -> ControllerResponseMessage
CRspUnknown :: ControllerResponseMessage

-- | Requests datatype, which is send to a filesystem node.
data NodeRequestMessage
NReqCreate :: FileId -> FileContent -> NodeRequestMessage
NReqCreateS :: [(FileId, FileContent)] -> NodeRequestMessage
NReqAppend :: FileId -> FileContent -> NodeRequestMessage
NReqDelete :: FileId -> Bool -> NodeRequestMessage
NReqCopy :: FileId -> ClientPort -> NodeRequestMessage
NReqContains :: FileId -> NodeRequestMessage
NReqGetFileContent :: FileId -> NodeRequestMessage
NReqGetMultiFileContent :: [FileId] -> NodeRequestMessage
NReqGetFileData :: FileId -> NodeRequestMessage
NReqGetFileIds :: NodeRequestMessage
NReqUnknown :: NodeRequestMessage

-- | Response datatype from a filesystem node.
data NodeResponseMessage
NRspSuccess :: NodeResponseMessage
NRspContains :: Bool -> NodeResponseMessage
NRspGetFileContent :: (Maybe FileContent) -> NodeResponseMessage
NRspGetMultiFileContent :: [(FileId, FileContent)] -> NodeResponseMessage
NRspGetFileData :: (Maybe FileData) -> NodeResponseMessage
NRspGetFileIds :: [FileId] -> NodeResponseMessage
NRspError :: String -> NodeResponseMessage
NRspUnknown :: NodeResponseMessage

-- | Sends a request to the server (stream) and handles the response and
--   all error cases. Very helpful when simulating a request response
--   scheme with the mailboxes.
performPortAction :: (Show a, Binary a, Show b, Binary b, RspMsg b) => Port a -> Stream b -> Int -> a -> (b -> IO (Maybe c)) -> IO c
type ClientPortMap = [(ClientPort, [FileId])]
instance Show NodeResponseMessage
instance Show NodeRequestMessage
instance Show ControllerResponseMessage
instance Show ControllerRequestMessage
instance Binary NodeResponseMessage
instance RspMsg NodeResponseMessage
instance Binary NodeRequestMessage
instance Binary ControllerResponseMessage
instance RspMsg ControllerResponseMessage
instance Binary ControllerRequestMessage


-- | Version : 0.1
module Holumbus.FileSystem.Controller
class ControllerClass c
closeController :: (ControllerClass c) => c -> IO ()
getFileSites :: (ControllerClass c) => FileId -> c -> IO (Set SiteId)
containsFile :: (ControllerClass c) => FileId -> c -> IO Bool
getNearestNodePortWithFile :: (ControllerClass c) => FileId -> SiteId -> c -> IO (Maybe ClientPort)
getNearestNodePortWithFiles :: (ControllerClass c) => [FileId] -> SiteId -> c -> IO ClientPortMap
getNearestNodePortForFile :: (ControllerClass c) => FileId -> Integer -> SiteId -> c -> IO (Maybe ClientPort)
getNearestNodePortForFiles :: (ControllerClass c) => [(FileId, Integer)] -> SiteId -> c -> IO ClientPortMap
createFile :: (ControllerClass c) => FileId -> IdType -> c -> IO ()
createFiles :: (ControllerClass c) => [(FileId, IdType)] -> c -> IO ()
deleteFile :: (ControllerClass c) => FileId -> IdType -> c -> IO ()
appendFile :: (ControllerClass c) => FileId -> IdType -> c -> IO ()


-- | Version : 0.1
module Holumbus.FileSystem.Controller.ControllerPort
data ControllerPort

-- | Creates a new ControllerPort
newControllerPort :: StreamName -> Maybe SocketId -> IO ControllerPort
newControllerPortFromServerPort :: ServerPort -> ControllerPort
instance Show ControllerPort
instance Debug ControllerPort
instance ControllerClass ControllerPort


-- | Version : 0.1
module Holumbus.FileSystem.Node.NodePort
data NodePort

-- | Creates a new NodePort.
newNodePort :: ClientPort -> NodePort
instance Show NodePort
instance Debug NodePort
instance NodeClass NodePort


-- | Version : 0.1
module Holumbus.FileSystem.Controller.ControllerData
data ControllerData
newController :: StreamName -> Maybe PortNumber -> IO ControllerData
instance Debug ControllerData
instance ControllerClass ControllerData


-- | Version : 0.1
module Holumbus.FileSystem.Node.NodeData

-- | Node datatype.
data NodeData
newNode :: StreamName -> Maybe SocketId -> FileStorage -> IO Node
instance Debug Node
instance NodeClass Node


-- | Version : 0.1
module Holumbus.FileSystem.FileSystem

-- | The file-identifier, should be unique in the whole system and be an
--   instance of the classes show, eq, ord and binary
type FileId = String
type FileContent = ByteString
getContentLength :: FileContent -> Integer

-- | metadata of a file, known by the storage.
data FileData
MkFileData :: FileId -> Integer -> UTCTime -> UTCTime -> Integer -> FileData

-- | filename
fd_FileId :: FileData -> FileId

-- | filesize
fd_Size :: FileData -> Integer

-- | creation date
fd_CreationDate :: FileData -> UTCTime

-- | last modified date
fd_LastModifiedDate :: FileData -> UTCTime

-- | hash value
fd_Hashvalue :: FileData -> Integer
data FileSystem
data FSStandaloneConf
FSStandaloneConf :: StreamName -> FilePath -> FilePath -> FSStandaloneConf
fstc_StreamName :: FSStandaloneConf -> StreamName
fstc_StoragePath :: FSStandaloneConf -> FilePath
fstc_StorageFile :: FSStandaloneConf -> FilePath
defaultFSStandaloneConfig :: FSStandaloneConf
data FSControllerConf
FSControllerConf :: StreamName -> Maybe PortNumber -> FSControllerConf
fcoc_StreamName :: FSControllerConf -> StreamName
fcoc_PortNumber :: FSControllerConf -> Maybe PortNumber
defaultFSControllerConfig :: FSControllerConf
data FSNodeConf
FSNodeConf :: StreamName -> Maybe SocketId -> FilePath -> FilePath -> FSNodeConf
fnoc_StreamName :: FSNodeConf -> StreamName
fnoc_SocketId :: FSNodeConf -> Maybe SocketId
fnoc_StoragePath :: FSNodeConf -> FilePath
fnoc_StorageFile :: FSNodeConf -> FilePath
defaultFSNodeConfig :: FSNodeConf
data FSClientConf
FSClientConf :: StreamName -> Maybe SocketId -> FSClientConf
fclc_StreamName :: FSClientConf -> StreamName
fclc_SocketId :: FSClientConf -> Maybe SocketId
defaultFSClientConfig :: FSClientConf
mkStandaloneFileSystem :: FSStandaloneConf -> IO (FileSystem)
mkFileSystemController :: FSControllerConf -> IO (FileSystem)
mkFileSystemNode :: FSNodeConf -> IO (FileSystem)
mkFileSystemClient :: FSClientConf -> IO (FileSystem)

-- | Closes the filesystem.
closeFileSystem :: FileSystem -> IO ()
getMySiteId :: FileSystem -> IO (SiteId)

-- | Get a set of all sites the file exists.
getFileSites :: FileId -> FileSystem -> IO (Set SiteId)

-- | gets the nearest NodePort with our fileId
getNearestNodePortWithFile :: FileId -> FileSystem -> IO (Maybe NodePort)

-- | gets the nearest NodePort on which we can create our fileId. we need
--   the content-size to get a node with enough space.
getNearestNodePortForFile :: FileId -> Integer -> FileSystem -> IO (Maybe NodePort)

-- | Checks if a file is in the filesystem
containsFile :: FileId -> FileSystem -> IO Bool

-- | Creates a file in the filesystem.
createFile :: FileId -> FileContent -> FileSystem -> IO ()

-- | Creates a list of files in the filesystem.
createFiles :: [(FileId, FileContent)] -> FileSystem -> IO ()

-- | Appends a file in the fileSystem.
appendFile :: FileId -> FileContent -> FileSystem -> IO ()

-- | Deletes a file from the filesystem.
deleteFile :: FileId -> FileSystem -> IO ()

-- | Gets the file content from the nearest site whitch holds the file
getFileContent :: FileId -> FileSystem -> IO (Maybe FileContent)

-- | Gets the file content from the nearest site whitch holds the file
getMultiFileContent :: [FileId] -> FileSystem -> IO [(FileId, FileContent)]

-- | Gets the file data from the nearest site whitch holds the file
getFileData :: FileId -> FileSystem -> IO (Maybe FileData)

-- | Tests, if the local storage (if one exists) holds the file
isFileLocal :: FileId -> FileSystem -> IO Bool
instance Debug FileSystem
instance Show FileSystem


-- | Version : 0.1
--   
--   A nice console-user interface for the Holumbus-Filesystem based on the
--   Holumbus-Commandline-Interface. To get a standalone FileSystem-Site,
--   just add a filesystem-object.
module Holumbus.FileSystem.UserInterface

-- | runs the user interface... just add an fileSystem an a fancy
--   version-number
runUI :: FileSystem -> String -> IO ()
