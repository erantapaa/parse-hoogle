-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Classify objects by key-generating function, like SQL GROUP BY
--   
--   A library to classify objects into multimaps by using a function
--   generating keys for any object in the list. This allows an approach
--   similar to SQL GROUP BY. Provides a more flexible approach to
--   <a>GHC.Exts.groupWith</a>.
@package group-with
@version 0.2.0.2


-- | A collection of grouping utility functions. For a given function that
--   assigns a key to objects, provides functions that group said objects
--   into a multimap by said key.
--   
--   This can be used similarly to the SQL GROUP BY statement.
--   
--   Provides a more flexible approach to GHC.Exts.groupWith
--   
--   <pre>
--   groupWith (take 1) ["a","ab","bc"] == Map.fromList [("a",["a","ab"]), ("b",["bc"])]
--   </pre>
--   
--   In order to use monadic / applicative functions as key generators, use
--   the A- or M-postfixed variants like <a>groupWithA</a> or
--   <a>groupWithMultipleM</a>
module Control.GroupWith
type MultiMap a b = Map a [b]

-- | Group values in a list by a key, generated by a given function. The
--   resulting map contains for each generated key the values (from the
--   given list) that yielded said key by applying the function on said
--   value.
groupWith :: Ord b => (a -> b) -> [a] -> MultiMap b a

-- | Like <a>groupWith</a>, but the identifier-generating function may
--   generate multiple keys for each value (or none at all). The
--   corresponding value from the original list will be placed in the
--   identifier-corresponding map entry for each generated identifier. Note
--   that values are added to the
groupWithMultiple :: Ord b => (a -> [b]) -> [a] -> MultiMap b a

-- | Like groupWith, but uses a custom combinator function
groupWithUsing :: Ord b => (a -> c) -> (c -> c -> c) -> (a -> b) -> [a] -> Map b c

-- | Group values in a list by a key, generated by a given applicative
--   function. Applicative version of <a>groupWith</a>. See
--   <a>groupWith</a> for documentation.
groupWithA :: (Ord b, Applicative f) => (a -> f b) -> [a] -> f (MultiMap b a)

-- | Alias for <a>groupWithA</a>, with additional monad constraint
groupWithM :: (Ord b, Monad m, Applicative m) => (a -> m b) -> [a] -> m (MultiMap b a)

-- | Like <a>groupWithM</a>, but the identifier-generating function may
--   generate multiple keys for each value (or none at all). See
--   <a>groupWithMultiple</a> for further behavioural details.
--   
--   Note that it's impossible to define this for applicatives: See
--   http:<i></i>stackoverflow.com<i>a</i>6032260/2597135
groupWithMultipleM :: (Ord b, Monad m, Applicative m) => (a -> m [b]) -> [a] -> m (MultiMap b a)

-- | Like <a>groupWithM</a>, but uses a custom combinator function
groupWithUsingM :: (Ord b, Monad m, Applicative m) => (a -> m c) -> (c -> c -> c) -> (a -> m b) -> [a] -> m (Map b c)
