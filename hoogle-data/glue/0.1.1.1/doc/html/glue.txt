-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Make better services.
--   
@package glue
@version 0.1.1.1


-- | Module containing the root types and some support functionality.
module Glue.Types

-- | Type alias for the most basic form of a service supported.
type BasicService m a b = a -> m b

-- | Type alias for a service that looks up multiple values and returns
--   multiple results.
type MultiGetService m a b = BasicService m (MultiGetRequest a) (MultiGetResponse a b)

-- | Type alias for the request portion of a <a>MultiGetService</a>.
type MultiGetRequest a = HashSet a

-- | Type alias for the response portion of a <a>MultiGetService</a>.
type MultiGetResponse a b = HashMap a b

-- | Type alias for the common container of a result used in asynchronous
--   calls.
type ResultVar a = MVar (Either SomeException a)

-- | Convert a <a>MultiGetService</a> into a <a>BasicService</a> that looks
--   up a single key, returning a <a>Maybe</a> which determines if the
--   value was present.
multiGetToBasic :: (Hashable a, Eq a, Monad m) => MultiGetService m a b -> BasicService m a (Maybe b)

-- | Convert a <a>BasicService</a> into a <a>MultiGetService</a>
basicToMultiGet :: (Hashable a, Eq a, Applicative m) => BasicService m a b -> MultiGetService m a b

-- | Obtain a result from a <a>ResultVar</a> in the <a>Monad</a> of your
--   choice.
getResult :: MonadBaseControl IO m => ResultVar a -> m a


-- | Module supporting failover of a service by transforming the request
--   each time a failure occurs up to a fixed number of attempts.
module Glue.Failover

-- | Options for determining behaviour of failover services.
data FailoverOptions a

-- | Simple defaults that results in retrying 3 times in a dumb way
--   immediately without transforming the request.
defaultFailoverOptions :: FailoverOptions a

-- | Creates a service that can transform requests with each subsequent
--   failure.
failover :: MonadBaseControl IO m => FailoverOptions a -> BasicService m a b -> BasicService m a b

-- | The maximum numer of times the service will failover and make another
--   attempt.
maxFailovers :: FailoverOptions a -> Int

-- | Each time the service performs a failover, transform the request with
--   this function.
transformFailoverRequest :: FailoverOptions a -> a -> a


-- | Module supporting the caching of a service.
module Glue.Caching

-- | Caching of a <a>BasicService</a> instance, that defers to external
--   functions for the actual caching. | Note: Values within m will be lost
--   for calls that hit the cache.
cacheWithBasic :: Monad m => (a -> m (Maybe b)) -> (a -> b -> m ()) -> BasicService m a b -> BasicService m a b

-- | Caching of a <a>MultiGetService</a> instance, that defers to external
--   functions for the actual caching. | Partial responses will result in
--   partial fallback calls that get just the missing keys. | Values within
--   m will be lost for calls that hit the cache.
cacheWithMulti :: (Monad m, Functor m, Eq a, Hashable a) => ((MultiGetRequest a) -> m (MultiGetResponse a b)) -> ((MultiGetResponse a b) -> m ()) -> MultiGetService m a b -> MultiGetService m a b


-- | Module containing circuit breaker functionality, which is the ability
--   to open a circuit once a number of failures have occurred, thereby
--   preventing later calls from attempting to make unsuccessful calls. |
--   Often this is useful if the underlying service were to repeatedly time
--   out, so as to reduce the number of calls inflight holding up upstream
--   callers.
module Glue.CircuitBreaker

-- | Options for determining behaviour of circuit breaking services.
data CircuitBreakerOptions

-- | Status indicating if the circuit is open.
data CircuitBreakerStatus

-- | Exception thrown when the circuit is open.
data CircuitBreakerException
CircuitBreakerException :: String -> CircuitBreakerException

-- | Defaulted options for the circuit breaker with 3 failures over 60
--   seconds.
defaultCircuitBreakerOptions :: CircuitBreakerOptions

-- | Circuit breaking services can be constructed with this function.
circuitBreaker :: (MonadBaseControl IO m, MonadBaseControl IO n) => CircuitBreakerOptions -> BasicService m a b -> n (IORef CircuitBreakerStatus, BasicService m a b)

-- | How many times the underlying service must fail in the given window
--   before the circuit opens.
maxBreakerFailures :: CircuitBreakerOptions -> Int

-- | The window of time in which the underlying service must fail for the
--   circuit to open.
resetTimeoutSecs :: CircuitBreakerOptions -> Int

-- | Description that is attached to the failure so as to identify the
--   particular circuit.
breakerDescription :: CircuitBreakerOptions -> String
instance Typeable CircuitBreakerException
instance Eq CircuitBreakerException
instance Show CircuitBreakerException
instance Exception CircuitBreakerException


-- | Module supporting the dogpile protection of a service, see
--   <a>http://en.wikipedia.org/wiki/Cache_stampede</a>.
module Glue.DogpileProtection

-- | Dogpile protection of a service, to prevent multiple calls for the
--   same value being submitted. | Loses the values held within m.
dogpileProtect :: (MonadBaseControl IO m, MonadBaseControl IO n, Eq a, Hashable a) => BasicService m a b -> n (IORef (HashMap a (ResultVar b)), BasicService m a b)


-- | Module supporting adding timeouts to a given service.
module Glue.Timeout

-- | Options for determining behaviour of services with a timeout.
data TimeoutOptions

-- | Exception thrown when the timeout is exceeded.
data TimeoutException
TimeoutException :: String -> TimeoutException

-- | Default instance of <a>TimeoutOptions</a> with a timeout of 30
--   seconds.
defaultTimeoutOptions :: TimeoutOptions

-- | Function for producing services protected with a timeout.
addTimeout :: MonadBaseControl IO m => TimeoutOptions -> BasicService m a b -> BasicService m a b

-- | Description added to the <a>TimeoutException</a> thrown when the
--   timeout is exceeded.
timeoutDescription :: TimeoutOptions -> String

-- | Timeout in milliseconds.
timeoutLimitMs :: TimeoutOptions -> Int
instance Typeable TimeoutException
instance Eq TimeoutException
instance Show TimeoutException
instance Exception TimeoutException


-- | Module containing retry functionality, allowing the construction of
--   services that attempt multiple times in case of transient failure.
module Glue.Retry

-- | Options for determining behaviour of retrying services.
data RetryOptions a

-- | Defaulted options for retrying 3 times with no wait time.
defaultRetryOptions :: RetryOptions a

-- | Retries a call to a service multiple times, potentially backing off
--   wait times between subsequent calls.
retryingService :: MonadBaseControl IO m => RetryOptions a -> BasicService m a b -> BasicService m a b

-- | Predicate for determining if we can retry a call, can be used to
--   prevent retries on non-idempotent operations.
retryAllowed :: RetryOptions a -> a -> Bool

-- | Amount of time to wait after the first failure.
retryInitialWaitTimeMs :: RetryOptions a -> Int

-- | The upper bound on how many attempts to make when invoking the
--   service.
maximumRetries :: RetryOptions a -> Int

-- | How much to multiply <a>retryInitialWaitTimeMs</a> by for each number
--   of times the service has retried.
retryWaitTimeMultiplier :: RetryOptions a -> Double


-- | Module for creating a service that batches calls across requests.
module Glue.Batcher

-- | Options for configuring the batching.
data BatchingOptions

-- | Function for constructing a batching service.
batchingService :: (Eq a, Hashable a, MonadBaseControl IO m, Applicative m, MonadBaseControl IO n) => BatchingOptions -> MultiGetService m a b -> n (BasicService m a (Maybe b), MultiGetService m a b)

-- | Default instance of <a>BatchingOptions</a> with a batching window of
--   10ms.
defaultBatchingOptions :: BatchingOptions

-- | Window in milliseconds over which to batch.
batchWindowMs :: BatchingOptions -> Int
instance Eq BatchingOptions
instance Show BatchingOptions


-- | Module supporting the recording of various stats about a service using
--   <a>System.Metrics</a>.
module Glue.Stats

-- | Record the timings for service invocations with a <a>Distribution</a>
--   held in the passed in <a>Store</a>..
recordDistribution :: (MonadBaseControl IO m, MonadBaseControl IO n) => Store -> Text -> BasicService m a b -> n (BasicService m a b)

-- | Increments a counter with a <a>Counter</a> held in the passed in
--   <a>Store</a> for each time the service is called.
recordAttempts :: (MonadBaseControl IO m, MonadBaseControl IO n) => Store -> Text -> BasicService m a b -> n (BasicService m a b)

-- | Increments a counter with a <a>Counter</a> held in the passed in
--   <a>Store</a> for each time the service successfully returns.
recordSuccesses :: (MonadBaseControl IO m, MonadBaseControl IO n) => Store -> Text -> BasicService m a b -> n (BasicService m a b)

-- | Increments a counter with a <a>Counter</a> held in the passed in
--   <a>Store</a> for each time the service fails.
recordFailures :: (MonadBaseControl IO m, MonadBaseControl IO n) => Store -> Text -> BasicService m a b -> n (BasicService m a b)

-- | Sets a <a>Label</a> held in the passed in <a>Store</a> for each
--   request the service receives.
recordLastRequest :: (MonadBaseControl IO m, MonadBaseControl IO n, Show a) => Store -> Text -> BasicService m a b -> n (BasicService m a b)

-- | Sets a <a>Label</a> held in the passed in <a>Store</a> for each
--   successful result the service returns.
recordLastResult :: (MonadBaseControl IO m, MonadBaseControl IO n, Show b) => Store -> Text -> BasicService m a b -> n (BasicService m a b)


-- | Module that re-exports the entirety of the library.
module Glue
