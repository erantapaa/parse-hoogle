-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Automagically generate the HUnit- and Quickcheck-bulk-code using Template Haskell.
--   
--   A fork of of test-framework-th modified to use tasty instead of
--   test-framework.
@package tasty-th
@version 0.1.3

module Test.Tasty.TH

-- | Generate the usual code and extract the usual functions needed for a
--   testGroup in HUnit<i>Quickcheck</i>Quickcheck2. All functions
--   beginning with case_, prop_ or test_ will be extracted.
--   
--   <pre>
--   -- file SomeModule.hs
--   fooTestGroup = $(testGroupGenerator)
--   main = defaultMain [fooTestGroup]
--   case_1 = do 1 @=? 1
--   case_2 = do 2 @=? 2
--   prop_p xs = reverse (reverse xs) == xs
--    where types = xs :: [Int]
--   </pre>
--   
--   is the same as
--   
--   <pre>
--   -- file SomeModule.hs
--   fooTestGroup = testGroup "SomeModule" [testProperty "p" prop_1, testCase "1" case_1, testCase "2" case_2]
--   main = defaultMain [fooTestGroup]
--   case_1 = do 1 @=? 1
--   case_2 = do 2 @=? 2
--   prop_1 xs = reverse (reverse xs) == xs
--    where types = xs :: [Int]
--   </pre>
testGroupGenerator :: ExpQ

-- | Generate the usual code and extract the usual functions needed in
--   order to run HUnit<i>Quickcheck</i>Quickcheck2. All functions
--   beginning with case_, prop_ or test_ will be extracted.
--   
--   <pre>
--   {-# OPTIONS_GHC -fglasgow-exts -XTemplateHaskell #-}
--   module MyModuleTest where
--   import Test.HUnit
--   import MainTestGenerator
--   
--   main = $(defaultMainGenerator)
--   
--   case_Foo = do 4 @=? 4
--   
--   case_Bar = do "hej" @=? "hej"
--   
--   prop_Reverse xs = reverse (reverse xs) == xs
--   where types = xs :: [Int]
--   
--   test_Group =
--   [ testCase "1" case_Foo
--   , testProperty "2" prop_Reverse
--   ]
--   </pre>
--   
--   will automagically extract prop_Reverse, case_Foo, case_Bar and
--   test_Group and run them as well as present them as belonging to the
--   testGroup <tt>MyModuleTest</tt> such as
--   
--   <pre>
--   me: runghc MyModuleTest.hs
--   MyModuleTest:
--   Reverse: [OK, passed 100 tests]
--   Foo: [OK]
--   Bar: [OK]
--   Group:
--   1: [OK]
--   2: [OK, passed 100 tests]
--   
--   Properties Test Cases Total
--   Passed 2 3 5
--   Failed 0 0 0
--   Total 2 3 5
--   </pre>
defaultMainGenerator :: ExpQ
