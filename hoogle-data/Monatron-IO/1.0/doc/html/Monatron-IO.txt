-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | MonadIO instances for the Monatron transformers.
--   
--   This package defines instances of the
--   <a>Control.Monad.IO.Class.MonadIO</a> class (see
--   <a>Control.Monad.IO.Class</a>) for all the monad transformers in
--   <a>Control.Monatron.Transformer</a> (except
--   <a>Control.Monadtron.Transformer.StepT</a>) and for the zipper type
--   (<a>:&gt;</a>) in <a>Control.Monad.Zipper</a>.
@package Monatron-IO
@version 1.0


-- | An instance of the <a>MonadIO</a> class for a zipper:
--   
--   <pre>
--   instance (<a>MonadIO</a> (t2 m), <a>MonadT</a> t1, <a>MonadT</a> t2, <a>Monad</a> m) =&gt; <a>MonadIO</a> ((t1 <a>:&gt;</a> t2) m)
--   </pre>
--   
--   Re-exports <a>Control.Monad.IO.Class</a> for convenience.
module Control.Monatron.Zipper.IO
instance (MonadIO (t2 m), MonadT t1, MonadT t2, Monad m) => MonadIO ((:>) t1 t2 m)


-- | Instances of the <a>MonadIO</a> class for <a>StateT</a>,
--   <a>WriterT</a>, <a>ReaderT</a>, <a>ExcT</a>, <a>ContT</a>, and
--   <a>ListT</a>.
--   
--   Re-exports <a>Control.Monad.IO.Class</a> for convenience.
module Control.Monatron.IO
instance MonadIO m => MonadIO (ListT m)
instance MonadIO m => MonadIO (ContT r m)
instance MonadIO m => MonadIO (ExcT z m)
instance MonadIO m => MonadIO (ReaderT z m)
instance (MonadIO m, Monoid z) => MonadIO (WriterT z m)
instance MonadIO m => MonadIO (StateT z m)
