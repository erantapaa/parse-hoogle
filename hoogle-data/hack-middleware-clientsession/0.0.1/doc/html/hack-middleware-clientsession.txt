-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Middleware for easily keeping session data in client cookies.
--   
--   Uses the clientsession package for automatic encryption, hashing,
--   expiring and renewing of sessions stored in cookies on the client.
@package hack-middleware-clientsession
@version 0.0.1

module Hack.Middleware.ClientSession

-- | Automatic encrypting and decrypting of client session data.
--   
--   Using the clientsession package, this middleware handles automatic
--   encryption, decryption, checking, expiration and renewal of whichever
--   cookies you ask it to. For example, if you tell it to deal with the
--   cookie "IDENTIFIER", it will do the following:
--   
--   <ul>
--   <li>When you specify an "IDENTIFIER" value in your <a>Response</a>, it
--   will encrypt the value, along with the session expiration date and the
--   REMOTE_HOST of the user. It will then be set as a cookie on the
--   client.</li>
--   <li>When there is an incoming "IDENTIFIER" cookie from the user, it
--   will decrypt it and check both the expiration date and the
--   REMOTE_HOST. If everything matches up, it will set the "IDENTIFIER"
--   value in <a>hackHeaders</a>.</li>
--   <li>If the client sent an "IDENTIFIER" and the application does not
--   set a new value, this will reset the cookie to a new expiration date.
--   This way, you do not have sessions timing out every 20 minutes.</li>
--   </ul>
--   
--   As far as security: clientsesion itself handles hashing and encrypting
--   the data to make sure that the user can neither see not tamper with
--   it.
clientsession :: [String] -> Word256 -> Middleware
type Word256 = LargeKey Word64 Word192

-- | The default key file.
defaultKeyFile :: String

-- | Get a 256-bit key from the given text file. If the file does not
--   exist, or did not contain enough bits, a random key will be generated
--   and stored in that file.
getKey :: FilePath -> IO Word256

-- | Simply calls <a>getKey</a> "client_session_key.aes"
getDefaultKey :: IO Word256
instance Show Cookie
instance Read Cookie
