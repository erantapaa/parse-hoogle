-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Haskell backend kernel for the IPython project.
--   
--   IHaskell is a Haskell backend kernel for the IPython project. This
--   allows using Haskell via a console or notebook interface. Additional
--   packages may be installed to provide richer data visualizations.
@package ihaskell
@version 0.4.3.0

module Paths_ihaskell
version :: Version
getBinDir :: IO FilePath
getLibDir :: IO FilePath
getDataDir :: IO FilePath
getLibexecDir :: IO FilePath
getDataFileName :: FilePath -> IO FilePath
getSysconfDir :: IO FilePath


-- | Generate, parse, and pretty print UUIDs for use with IPython.
module IHaskell.IPython.Message.UUID

-- | A UUID (universally unique identifier).
data UUID

-- | Generate a single random UUID.
random :: IO UUID

-- | Generate a list of random UUIDs.
randoms :: Int -> IO [UUID]
instance Show UUID
instance Read UUID
instance Eq UUID
instance Ord UUID
instance ToJSON UUID
instance FromJSON UUID


-- | This module contains all types used to create an IPython language
--   kernel.
module IHaskell.IPython.Types

-- | A kernel profile, specifying how the kernel communicates.
data Profile
Profile :: IP -> Transport -> Port -> Port -> Port -> Port -> Port -> Text -> Profile

-- | The IP on which to listen.
ip :: Profile -> IP

-- | The transport mechanism.
transport :: Profile -> Transport

-- | The stdin channel port.
stdinPort :: Profile -> Port

-- | The control channel port.
controlPort :: Profile -> Port

-- | The heartbeat channel port.
hbPort :: Profile -> Port

-- | The shell command port.
shellPort :: Profile -> Port

-- | The IOPub port.
iopubPort :: Profile -> Port

-- | The HMAC encryption key.
key :: Profile -> Text

-- | The transport mechanism used to communicate with the IPython frontend.
data Transport

-- | Default transport mechanism via TCP.
TCP :: Transport

-- | A TCP port.
type Port = Int

-- | An IP address.
type IP = String

-- | A message used to communicate with the IPython frontend.
data Message

-- | A request from a frontend for information about the kernel.
KernelInfoRequest :: MessageHeader -> Message
header :: Message -> MessageHeader

-- | A response to a KernelInfoRequest.
KernelInfoReply :: MessageHeader -> [Int] -> String -> Message
header :: Message -> MessageHeader

-- | The version of the language, e.g. [7, 6, 3] for GHC 7.6.3
versionList :: Message -> [Int]

-- | The language name, e.g. <a>haskell</a>
language :: Message -> String

-- | A request from a frontend to execute some code.
ExecuteRequest :: MessageHeader -> Text -> Bool -> Bool -> Bool -> [Text] -> [Text] -> Message
header :: Message -> MessageHeader

-- | The entire block of text where the line is. This may be useful in the
--   case of multiline completions where more context may be needed. Note:
--   if in practice this field proves unnecessary, remove it to lighten the
--   messages. json field <tt>block</tt>
--   
--   The code string.
getCode :: Message -> Text

-- | Whether this should be silently executed.
getSilent :: Message -> Bool

-- | Whether to store this in history.
getStoreHistory :: Message -> Bool

-- | Whether this code can use stdin.
getAllowStdin :: Message -> Bool

-- | Unused.
getUserVariables :: Message -> [Text]

-- | Unused.
getUserExpressions :: Message -> [Text]

-- | A reply to an execute request.
ExecuteReply :: MessageHeader -> ExecuteReplyStatus -> String -> Int -> Message
header :: Message -> MessageHeader

-- | The status of the output.
status :: Message -> ExecuteReplyStatus

-- | The help string to show in the pager.
pagerOutput :: Message -> String

-- | The execution count, i.e. which output this is.
executionCounter :: Message -> Int
PublishStatus :: MessageHeader -> ExecutionState -> Message
header :: Message -> MessageHeader

-- | The execution state of the kernel.
executionState :: Message -> ExecutionState
PublishStream :: MessageHeader -> StreamType -> String -> Message
header :: Message -> MessageHeader

-- | Which stream to publish to.
streamType :: Message -> StreamType

-- | What to publish.
streamContent :: Message -> String
PublishDisplayData :: MessageHeader -> String -> [DisplayData] -> Message
header :: Message -> MessageHeader

-- | The name of the data source.
source :: Message -> String

-- | A list of data representations.
displayData :: Message -> [DisplayData]
PublishOutput :: MessageHeader -> String -> Int -> Message
header :: Message -> MessageHeader

-- | Printed output text.
reprText :: Message -> String

-- | Which input this is.
--   
--   Which output this is for.
executionCount :: Message -> Int
PublishInput :: MessageHeader -> String -> Int -> Message
header :: Message -> MessageHeader

-- | Submitted input code.
inCode :: Message -> String

-- | Which input this is.
--   
--   Which output this is for.
executionCount :: Message -> Int
CompleteRequest :: MessageHeader -> Text -> Text -> Int -> Message
header :: Message -> MessageHeader

-- | The entire block of text where the line is. This may be useful in the
--   case of multiline completions where more context may be needed. Note:
--   if in practice this field proves unnecessary, remove it to lighten the
--   messages. json field <tt>block</tt>
--   
--   The code string.
getCode :: Message -> Text

-- | just the line with the cursor. json field <tt>line</tt>
getCodeLine :: Message -> Text

-- | position of the cursor (index into the line?). json field
--   <tt>cursor_pos</tt>
getCursorPos :: Message -> Int
CompleteReply :: MessageHeader -> [Text] -> Text -> Text -> Bool -> Message
header :: Message -> MessageHeader
completionMatches :: Message -> [Text]
completionMatchedText :: Message -> Text
completionText :: Message -> Text
completionStatus :: Message -> Bool
ObjectInfoRequest :: MessageHeader -> Text -> Int -> Message
header :: Message -> MessageHeader

-- | Name of object which was searched for.
--   
--   Name of object being searched for.
objectName :: Message -> Text

-- | Level of detail desired (defaults to 0). 0 is equivalent to foo?, 1 is
--   equivalent to foo??.
detailLevel :: Message -> Int
ObjectInfoReply :: MessageHeader -> Text -> Bool -> Text -> Text -> Message
header :: Message -> MessageHeader

-- | Name of object which was searched for.
--   
--   Name of object being searched for.
objectName :: Message -> Text

-- | Whether the object was found.
objectFound :: Message -> Bool

-- | Object type.
objectTypeString :: Message -> Text
objectDocString :: Message -> Text
ShutdownRequest :: MessageHeader -> Bool -> Message
header :: Message -> MessageHeader

-- | Whether this shutdown precedes a restart.
--   
--   Whether this shutdown precedes a restart.
restartPending :: Message -> Bool
ShutdownReply :: MessageHeader -> Bool -> Message
header :: Message -> MessageHeader

-- | Whether this shutdown precedes a restart.
--   
--   Whether this shutdown precedes a restart.
restartPending :: Message -> Bool
ClearOutput :: MessageHeader -> Bool -> Message
header :: Message -> MessageHeader

-- | Whether to wait to redraw until there is more output.
wait :: Message -> Bool
RequestInput :: MessageHeader -> String -> Message
header :: Message -> MessageHeader
inputPrompt :: Message -> String
InputReply :: MessageHeader -> String -> Message
header :: Message -> MessageHeader
inputValue :: Message -> String
CommOpen :: MessageHeader -> String -> UUID -> Value -> Message
header :: Message -> MessageHeader
commTargetName :: Message -> String
commUuid :: Message -> UUID
commData :: Message -> Value
CommData :: MessageHeader -> UUID -> Value -> Message
header :: Message -> MessageHeader
commUuid :: Message -> UUID
commData :: Message -> Value
CommClose :: MessageHeader -> UUID -> Value -> Message
header :: Message -> MessageHeader
commUuid :: Message -> UUID
commData :: Message -> Value
SendNothing :: Message

-- | A message header with some metadata.
data MessageHeader
MessageHeader :: [ByteString] -> Maybe MessageHeader -> Metadata -> UUID -> UUID -> Username -> MessageType -> MessageHeader

-- | The identifiers sent with the message.
identifiers :: MessageHeader -> [ByteString]

-- | The parent header, if present.
parentHeader :: MessageHeader -> Maybe MessageHeader

-- | A dict of metadata.
metadata :: MessageHeader -> Metadata

-- | A unique message UUID.
messageId :: MessageHeader -> UUID

-- | A unique session UUID.
sessionId :: MessageHeader -> UUID

-- | The user who sent this message.
username :: MessageHeader -> Username

-- | The message type.
msgType :: MessageHeader -> MessageType

-- | A username for the source of a message.
type Username = Text

-- | A metadata dictionary.
type Metadata = Map Text Text

-- | The type of a message, corresponding to IPython message types.
data MessageType
KernelInfoReplyMessage :: MessageType
KernelInfoRequestMessage :: MessageType
ExecuteReplyMessage :: MessageType
ExecuteRequestMessage :: MessageType
StatusMessage :: MessageType
StreamMessage :: MessageType
DisplayDataMessage :: MessageType
OutputMessage :: MessageType
InputMessage :: MessageType
CompleteRequestMessage :: MessageType
CompleteReplyMessage :: MessageType
ObjectInfoRequestMessage :: MessageType
ObjectInfoReplyMessage :: MessageType
ShutdownRequestMessage :: MessageType
ShutdownReplyMessage :: MessageType
ClearOutputMessage :: MessageType
InputRequestMessage :: MessageType
InputReplyMessage :: MessageType
CommOpenMessage :: MessageType
CommDataMessage :: MessageType
CommCloseMessage :: MessageType

-- | Possible MIME types for the display data.
type Width = Int
type Height = Int

-- | Input and output streams.
data StreamType
Stdin :: StreamType
Stdout :: StreamType

-- | The execution state of the kernel.
data ExecutionState
Busy :: ExecutionState
Idle :: ExecutionState
Starting :: ExecutionState

-- | Possible statuses in the execution reply messages.
data ExecuteReplyStatus
Ok :: ExecuteReplyStatus
Err :: ExecuteReplyStatus
Abort :: ExecuteReplyStatus

-- | Get the reply message type for a request message type.
replyType :: MessageType -> Maybe MessageType

-- | Data for display: a string with associated MIME type.
data DisplayData
DisplayData :: MimeType -> Text -> DisplayData
data MimeType
PlainText :: MimeType
MimeHtml :: MimeType
MimePng :: Width -> Height -> MimeType
MimeJpg :: Width -> Height -> MimeType
MimeSvg :: MimeType
MimeLatex :: MimeType
MimeJavascript :: MimeType
extractPlain :: [DisplayData] -> String
instance Typeable MimeType
instance Typeable DisplayData
instance Show Transport
instance Read Transport
instance Show Profile
instance Read Profile
instance Show MessageType
instance Read MessageType
instance Eq MessageType
instance Show MessageHeader
instance Read MessageHeader
instance Show ExecutionState
instance Show StreamType
instance Eq MimeType
instance Generic MimeType
instance Generic DisplayData
instance Show Message
instance Datatype D1MimeType
instance Constructor C1_0MimeType
instance Constructor C1_1MimeType
instance Constructor C1_2MimeType
instance Constructor C1_3MimeType
instance Constructor C1_4MimeType
instance Constructor C1_5MimeType
instance Constructor C1_6MimeType
instance Datatype D1DisplayData
instance Constructor C1_0DisplayData
instance Show MimeType
instance Serialize MimeType
instance Serialize DisplayData
instance Serialize Text
instance Show DisplayData
instance Show ExecuteReplyStatus
instance FromJSON MessageType
instance ToJSON MessageHeader
instance ToJSON Transport
instance FromJSON Transport
instance ToJSON Profile
instance FromJSON Profile


-- | This module contains the <tt>ToJSON</tt> instance for
--   <tt>Message</tt>.
module IHaskell.IPython.Message.Writer

-- | A type that can be converted to JSON.
--   
--   An example type and instance:
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings #-}
--   
--   data Coord = Coord { x :: Double, y :: Double }
--   
--   instance ToJSON Coord where
--      toJSON (Coord x y) = <a>object</a> ["x" <tt>.=</tt> x, "y" <tt>.=</tt> y]
--   </pre>
--   
--   Note the use of the <tt>OverloadedStrings</tt> language extension
--   which enables <tt>Text</tt> values to be written as string literals.
--   
--   Instead of manually writing your <a>ToJSON</a> instance, there are
--   three options to do it automatically:
--   
--   <ul>
--   <li><a>Data.Aeson.TH</a> provides template-haskell functions which
--   will derive an instance at compile-time. The generated instance is
--   optimized for your type so will probably be more efficient than the
--   following two options:</li>
--   <li><a>Data.Aeson.Generic</a> provides a generic <tt>toJSON</tt>
--   function that accepts any type which is an instance of
--   <tt>Data</tt>.</li>
--   <li>If your compiler has support for the <tt>DeriveGeneric</tt> and
--   <tt>DefaultSignatures</tt> language extensions (GHC 7.2 and newer),
--   <tt>toJSON</tt> will have a default generic implementation.</li>
--   </ul>
--   
--   To use the latter option, simply add a <tt>deriving
--   <a>Generic</a></tt> clause to your datatype and declare a
--   <tt>ToJSON</tt> instance for your datatype without giving a definition
--   for <tt>toJSON</tt>.
--   
--   For example the previous example can be simplified to just:
--   
--   <pre>
--   {-# LANGUAGE DeriveGeneric #-}
--   
--   import GHC.Generics
--   
--   data Coord = Coord { x :: Double, y :: Double } deriving Generic
--   
--   instance ToJSON Coord
--   </pre>
--   
--   Note that, instead of using <tt>DefaultSignatures</tt>, it's also
--   possible to parameterize the generic encoding using
--   <a>genericToJSON</a> applied to your encoding/decoding <a>Options</a>:
--   
--   <pre>
--   instance ToJSON Coord where
--       toJSON = <a>genericToJSON</a> <a>defaultOptions</a>
--   </pre>
class ToJSON a
toJSON :: ToJSON a => a -> Value
instance ToJSON StreamType
instance ToJSON ExecutionState
instance ToJSON Message


-- | This module is responsible for converting from low-level ByteStrings
--   obtained from the 0MQ sockets into Messages. The only exposed function
--   is <a>parseMessage</a>, which should only be used in the low-level 0MQ
--   interface.
module IHaskell.IPython.Message.Parser

-- | Parse a message from its ByteString components into a Message.
parseMessage :: [ByteString] -> ByteString -> ByteString -> ByteString -> ByteString -> Message


-- | The <a>ZeroMQ</a> module abstracts away the low-level 0MQ based
--   interface with IPython, replacing it instead with a Haskell Channel
--   based interface. The <a>serveProfile</a> function takes a IPython
--   profile specification and returns the channel interface to use.
module IHaskell.IPython.ZeroMQ

-- | The channel interface to the ZeroMQ sockets. All communication is done
--   via Messages, which are encoded and decoded into a lower level form
--   before being transmitted to IPython. These channels should
--   functionally serve as high-level sockets which speak Messages instead
--   of ByteStrings.
data ZeroMQInterface
Channels :: Chan Message -> Chan Message -> Chan Message -> Chan Message -> Chan Message -> ZeroMQInterface

-- | A channel populated with requests from the frontend.
shellRequestChannel :: ZeroMQInterface -> Chan Message

-- | Writing to this channel causes a reply to be sent to the frontend.
shellReplyChannel :: ZeroMQInterface -> Chan Message

-- | This channel is a duplicate of the shell request channel, ^ though
--   using a different backend socket.
controlRequestChannel :: ZeroMQInterface -> Chan Message

-- | This channel is a duplicate of the shell reply channel, ^ though using
--   a different backend socket.
controlReplyChannel :: ZeroMQInterface -> Chan Message

-- | Writing to this channel sends an iopub message to the frontend.
iopubChannel :: ZeroMQInterface -> Chan Message
data ZeroMQStdin
StdinChannel :: Chan Message -> Chan Message -> ZeroMQStdin
stdinRequestChannel :: ZeroMQStdin -> Chan Message
stdinReplyChannel :: ZeroMQStdin -> Chan Message

-- | Start responding on all ZeroMQ channels used to communicate with
--   IPython | via the provided profile. Return a set of channels which can
--   be used to | communicate with IPython in a more structured manner.
serveProfile :: Profile -> IO ZeroMQInterface
serveStdin :: Profile -> IO ZeroMQStdin


-- | This module exports all the types and functions necessary to create an
--   IPython language kernel that supports the <tt>ipython console</tt> and
--   <tt>ipython notebook</tt> frontends.
module IHaskell.IPython.Kernel


-- | This module provides a way in which the Haskell standard input may be
--   forwarded to the IPython frontend and thus allows the notebook to use
--   the standard input.
--   
--   This relies on the implementation of file handles in GHC, and is
--   generally unsafe and terrible. However, it is difficult to find
--   another way to do it, as file handles are generally meant to point to
--   streams and files, and not networked communication protocols.
--   
--   In order to use this module, it must first be initialized with two
--   things. First of all, in order to know how to communicate with the
--   IPython frontend, it must know the kernel profile used for
--   communication. For this, use <tt>recordKernelProfile</tt> once the
--   profile is known. Both this and <tt>recordParentHeader</tt> take a
--   directory name where they can store this data.
--   
--   Finally, the module must know what <tt>execute_request</tt> message is
--   currently being replied to (which will request the input). Thus, every
--   time the language kernel receives an <tt>execute_request</tt> message,
--   it should inform this module via <tt>recordParentHeader</tt>, so that
--   the module may generate messages with an appropriate parent header
--   set. If this is not done, the IPython frontends will not recognize the
--   target of the communication.
--   
--   Finally, in order to activate this module, <tt>fixStdin</tt> must be
--   called once. It must be passed the same directory name as
--   <tt>recordParentHeader</tt> and <tt>recordKernelProfile</tt>. Note
--   that if this is being used from within the GHC API, <tt>fixStdin</tt>
--   <i>must</i> be called from within the GHC session not from the host
--   code.
module IHaskell.IPython.Stdin

-- | Manipulate standard input so that it is sourced from the IPython
--   frontend. This function is build on layers of deep magical hackery, so
--   be careful modifying it.
fixStdin :: String -> IO ()
recordParentHeader :: String -> MessageHeader -> IO ()
recordKernelProfile :: String -> Profile -> IO ()

module IHaskell.BrokenPackages

-- | Get a list of broken packages. This function internally shells out to
--   `ghc-pkg`, and parses the output in order to determine what packages
--   are broken.
getBrokenPackages :: IO [String]
instance Show BrokenPackage

module IHaskell.Eval.Util

-- | Initialize the GHC API. Run this as the first thing in the
--   <a>runGhc</a>. This initializes some dyn flags
--   (<tt>ExtendedDefaultRules</tt>, <tt>NoMonomorphismRestriction</tt>),
--   sets the target to interpreted, link in memory, sets a reasonable
--   output width, and potentially a few other things. It should be invoked
--   before other functions from this module.
--   
--   We also require that the sandbox PackageConf (if any) is passed here
--   as setSessionDynFlags will read the package database the first time
--   (and only the first time) it is called.
initGhci :: GhcMonad m => Maybe String -> m ()

-- | Find the extension that corresponds to a given flag. Create the
--   corresponding <a>ExtFlag</a> via <tt>SetFlag</tt> or
--   <tt>UnsetFlag</tt>. If no such extension exist, yield
--   <tt>Nothing</tt>.
extensionFlag :: String -> Maybe ExtFlag

-- | Set an extension and update flags. Return <tt>Nothing</tt> on success.
--   On failure, return an error message.
setExtension :: GhcMonad m => String -> m (Maybe String)

-- | A extension flag that can be set or unset.
data ExtFlag
SetFlag :: ExtensionFlag -> ExtFlag
UnsetFlag :: ExtensionFlag -> ExtFlag

-- | Set a list of flags, as per GHCi's `:set`. This was adapted from GHC's
--   InteractiveUI.hs (newDynFlags). It returns a list of error messages.
setFlags :: GhcMonad m => [String] -> m [String]

-- | Evaluate a single import statement. If this import statement is
--   importing a module which was previously imported implicitly (such as
--   <tt>Prelude</tt>) or if this module has a <tt>hiding</tt> annotation,
--   the previous import is removed.
evalImport :: GhcMonad m => String -> m ()

-- | Evaluate a series of declarations. Return all names which were bound
--   by these declarations.
evalDeclarations :: GhcMonad m => String -> m [String]

-- | Get the type of an expression and convert it to a string.
getType :: GhcMonad m => String -> m String

-- | A wrapper around <tt>getInfo</tt>. Return info about each name in the
--   string.
getDescription :: GhcMonad m => String -> m [String]

-- | Convert an <a>SDoc</a> into a string. This is similar to the family of
--   <a>showSDoc</a> functions, but does not impose an arbitrary width
--   limit on the output (in terms of number of columns). Instead, it
--   respsects the <a>pprCols</a> field in the structure returned by
--   <a>getSessionDynFlags</a>, and thus gives a configurable width of
--   output.
doc :: GhcMonad m => SDoc -> m String

module IHaskell.Eval.Parser

-- | Parse a string into code blocks.
parseString :: String -> Ghc [Located CodeBlock]

-- | A block of code to be evaluated. Each block contains a single element
--   - one declaration, statement, expression, etc. If parsing of the block
--   failed, the block is instead a ParseError, which has the error
--   location and error message.
data CodeBlock

-- | A Haskell expression.
Expression :: String -> CodeBlock

-- | A data type or function declaration.
Declaration :: String -> CodeBlock

-- | A Haskell statement (as if in a `do` block).
Statement :: String -> CodeBlock

-- | An import statement.
Import :: String -> CodeBlock

-- | A lonely type signature (not above a function declaration).
TypeSignature :: String -> CodeBlock

-- | An IHaskell directive.
Directive :: DirectiveType -> String -> CodeBlock

-- | A full Haskell module, to be compiled and loaded.
Module :: String -> CodeBlock

-- | An error indicating that parsing the code block failed.
ParseError :: StringLoc -> ErrMsg -> CodeBlock

-- | A location in an input string.
data StringLoc :: *
Loc :: LineNumber -> ColumnNumber -> StringLoc

-- | Directive types. Each directive is associated with a string in the
--   directive code block.
data DirectiveType

-- | Get the type of an expression via ':type' (or unique prefixes)
GetType :: DirectiveType

-- | Get info about the identifier via ':info' (or unique prefixes)
GetInfo :: DirectiveType

-- | Enable or disable an extensions, packages etc. via `:set`. Emulates
--   GHCi's `:set`
SetDynFlag :: DirectiveType

-- | Load a Haskell module.
LoadFile :: DirectiveType

-- | Set IHaskell kernel option `:option`.
SetOption :: DirectiveType

-- | `:extension Foo` is a shortcut for `:set -XFoo`
SetExtension :: DirectiveType

-- | Execute a shell command.
ShellCmd :: DirectiveType

-- | General help via <tt>:?</tt> or ':help'.
GetHelp :: DirectiveType

-- | Search for something via Hoogle.
SearchHoogle :: DirectiveType

-- | Get documentation for an identifier via Hoogle.
GetDoc :: DirectiveType

-- | Get the kind of a type via ':kind'.
GetKind :: DirectiveType

-- | A line number in an input string.
type LineNumber = Int

-- | A column number in an input string.
type ColumnNumber = Int

-- | An error message string.
type ErrMsg = String

-- | Split an input string into chunks based on indentation. A chunk is a
--   line and all lines immediately following that are indented beyond the
--   indentation of the first line. This parses Haskell layout rules
--   properly, and allows using multiline expressions via indentation.
layoutChunks :: String -> [Located String]

-- | Parse a directive of the form :directiveName.
parseDirective :: String -> Int -> CodeBlock

-- | Parse a module and return the name declared in the 'module X where'
--   line. That line is required, and if it does not exist, this will
--   error. Names with periods in them are returned piece y piece.
getModuleName :: GhcMonad m => String -> m [String]

-- | Store locations along with a value.
data Located a :: * -> *
Located :: LineNumber -> a -> Located a
line :: Located a -> LineNumber
unloc :: Located a -> a
instance Show DirectiveType
instance Eq DirectiveType
instance Show CodeBlock
instance Eq CodeBlock


-- | This module splits a shell command line into a list of strings, one
--   for each command / filename
module IHaskell.Eval.ParseShell
parseShell :: String -> Either ParseError [String]


module IHaskell.Types

-- | A message used to communicate with the IPython frontend.
data Message

-- | A request from a frontend for information about the kernel.
KernelInfoRequest :: MessageHeader -> Message
header :: Message -> MessageHeader

-- | A response to a KernelInfoRequest.
KernelInfoReply :: MessageHeader -> [Int] -> String -> Message
header :: Message -> MessageHeader

-- | The version of the language, e.g. [7, 6, 3] for GHC 7.6.3
versionList :: Message -> [Int]

-- | The language name, e.g. <a>haskell</a>
language :: Message -> String

-- | A request from a frontend to execute some code.
ExecuteRequest :: MessageHeader -> Text -> Bool -> Bool -> Bool -> [Text] -> [Text] -> Message
header :: Message -> MessageHeader

-- | The entire block of text where the line is. This may be useful in the
--   case of multiline completions where more context may be needed. Note:
--   if in practice this field proves unnecessary, remove it to lighten the
--   messages. json field <tt>block</tt>
--   
--   The code string.
getCode :: Message -> Text

-- | Whether this should be silently executed.
getSilent :: Message -> Bool

-- | Whether to store this in history.
getStoreHistory :: Message -> Bool

-- | Whether this code can use stdin.
getAllowStdin :: Message -> Bool

-- | Unused.
getUserVariables :: Message -> [Text]

-- | Unused.
getUserExpressions :: Message -> [Text]

-- | A reply to an execute request.
ExecuteReply :: MessageHeader -> ExecuteReplyStatus -> String -> Int -> Message
header :: Message -> MessageHeader

-- | The status of the output.
status :: Message -> ExecuteReplyStatus

-- | The help string to show in the pager.
pagerOutput :: Message -> String

-- | The execution count, i.e. which output this is.
executionCounter :: Message -> Int
PublishStatus :: MessageHeader -> ExecutionState -> Message
header :: Message -> MessageHeader

-- | The execution state of the kernel.
executionState :: Message -> ExecutionState
PublishStream :: MessageHeader -> StreamType -> String -> Message
header :: Message -> MessageHeader

-- | Which stream to publish to.
streamType :: Message -> StreamType

-- | What to publish.
streamContent :: Message -> String
PublishDisplayData :: MessageHeader -> String -> [DisplayData] -> Message
header :: Message -> MessageHeader

-- | The name of the data source.
source :: Message -> String

-- | A list of data representations.
displayData :: Message -> [DisplayData]
PublishOutput :: MessageHeader -> String -> Int -> Message
header :: Message -> MessageHeader

-- | Printed output text.
reprText :: Message -> String

-- | Which input this is.
--   
--   Which output this is for.
executionCount :: Message -> Int
PublishInput :: MessageHeader -> String -> Int -> Message
header :: Message -> MessageHeader

-- | Submitted input code.
inCode :: Message -> String

-- | Which input this is.
--   
--   Which output this is for.
executionCount :: Message -> Int
CompleteRequest :: MessageHeader -> Text -> Text -> Int -> Message
header :: Message -> MessageHeader

-- | The entire block of text where the line is. This may be useful in the
--   case of multiline completions where more context may be needed. Note:
--   if in practice this field proves unnecessary, remove it to lighten the
--   messages. json field <tt>block</tt>
--   
--   The code string.
getCode :: Message -> Text

-- | just the line with the cursor. json field <tt>line</tt>
getCodeLine :: Message -> Text

-- | position of the cursor (index into the line?). json field
--   <tt>cursor_pos</tt>
getCursorPos :: Message -> Int
CompleteReply :: MessageHeader -> [Text] -> Text -> Text -> Bool -> Message
header :: Message -> MessageHeader
completionMatches :: Message -> [Text]
completionMatchedText :: Message -> Text
completionText :: Message -> Text
completionStatus :: Message -> Bool
ObjectInfoRequest :: MessageHeader -> Text -> Int -> Message
header :: Message -> MessageHeader

-- | Name of object which was searched for.
--   
--   Name of object being searched for.
objectName :: Message -> Text

-- | Level of detail desired (defaults to 0). 0 is equivalent to foo?, 1 is
--   equivalent to foo??.
detailLevel :: Message -> Int
ObjectInfoReply :: MessageHeader -> Text -> Bool -> Text -> Text -> Message
header :: Message -> MessageHeader

-- | Name of object which was searched for.
--   
--   Name of object being searched for.
objectName :: Message -> Text

-- | Whether the object was found.
objectFound :: Message -> Bool

-- | Object type.
objectTypeString :: Message -> Text
objectDocString :: Message -> Text
ShutdownRequest :: MessageHeader -> Bool -> Message
header :: Message -> MessageHeader

-- | Whether this shutdown precedes a restart.
--   
--   Whether this shutdown precedes a restart.
restartPending :: Message -> Bool
ShutdownReply :: MessageHeader -> Bool -> Message
header :: Message -> MessageHeader

-- | Whether this shutdown precedes a restart.
--   
--   Whether this shutdown precedes a restart.
restartPending :: Message -> Bool
ClearOutput :: MessageHeader -> Bool -> Message
header :: Message -> MessageHeader

-- | Whether to wait to redraw until there is more output.
wait :: Message -> Bool
RequestInput :: MessageHeader -> String -> Message
header :: Message -> MessageHeader
inputPrompt :: Message -> String
InputReply :: MessageHeader -> String -> Message
header :: Message -> MessageHeader
inputValue :: Message -> String
CommOpen :: MessageHeader -> String -> UUID -> Value -> Message
header :: Message -> MessageHeader
commTargetName :: Message -> String
commUuid :: Message -> UUID
commData :: Message -> Value
CommData :: MessageHeader -> UUID -> Value -> Message
header :: Message -> MessageHeader
commUuid :: Message -> UUID
commData :: Message -> Value
CommClose :: MessageHeader -> UUID -> Value -> Message
header :: Message -> MessageHeader
commUuid :: Message -> UUID
commData :: Message -> Value
SendNothing :: Message

-- | A message header with some metadata.
data MessageHeader
MessageHeader :: [ByteString] -> Maybe MessageHeader -> Metadata -> UUID -> UUID -> Username -> MessageType -> MessageHeader

-- | The identifiers sent with the message.
identifiers :: MessageHeader -> [ByteString]

-- | The parent header, if present.
parentHeader :: MessageHeader -> Maybe MessageHeader

-- | A dict of metadata.
metadata :: MessageHeader -> Metadata

-- | A unique message UUID.
messageId :: MessageHeader -> UUID

-- | A unique session UUID.
sessionId :: MessageHeader -> UUID

-- | The user who sent this message.
username :: MessageHeader -> Username

-- | The message type.
msgType :: MessageHeader -> MessageType

-- | The type of a message, corresponding to IPython message types.
data MessageType
KernelInfoReplyMessage :: MessageType
KernelInfoRequestMessage :: MessageType
ExecuteReplyMessage :: MessageType
ExecuteRequestMessage :: MessageType
StatusMessage :: MessageType
StreamMessage :: MessageType
DisplayDataMessage :: MessageType
OutputMessage :: MessageType
InputMessage :: MessageType
CompleteRequestMessage :: MessageType
CompleteReplyMessage :: MessageType
ObjectInfoRequestMessage :: MessageType
ObjectInfoReplyMessage :: MessageType
ShutdownRequestMessage :: MessageType
ShutdownReplyMessage :: MessageType
ClearOutputMessage :: MessageType
InputRequestMessage :: MessageType
InputReplyMessage :: MessageType
CommOpenMessage :: MessageType
CommDataMessage :: MessageType
CommCloseMessage :: MessageType

-- | A username for the source of a message.
type Username = Text

-- | A metadata dictionary.
type Metadata = Map Text Text

-- | Get the reply message type for a request message type.
replyType :: MessageType -> Maybe MessageType

-- | The execution state of the kernel.
data ExecutionState
Busy :: ExecutionState
Idle :: ExecutionState
Starting :: ExecutionState

-- | Input and output streams.
data StreamType
Stdin :: StreamType
Stdout :: StreamType
data MimeType
PlainText :: MimeType
MimeHtml :: MimeType
MimePng :: Width -> Height -> MimeType
MimeJpg :: Width -> Height -> MimeType
MimeSvg :: MimeType
MimeLatex :: MimeType
MimeJavascript :: MimeType

-- | Data for display: a string with associated MIME type.
data DisplayData
DisplayData :: MimeType -> Text -> DisplayData

-- | Output of evaluation.
data EvaluationResult

-- | An intermediate result which communicates what has been printed thus
--   far.
IntermediateResult :: Display -> EvaluationResult

-- | Display outputs.
--   
--   Display outputs.
outputs :: EvaluationResult -> Display
FinalResult :: Display -> String -> [CommInfo] -> EvaluationResult

-- | Display outputs.
--   
--   Display outputs.
outputs :: EvaluationResult -> Display

-- | Text to display in the IPython pager.
pagerOut :: EvaluationResult -> String

-- | Comms to start.
startComms :: EvaluationResult -> [CommInfo]

-- | Possible statuses in the execution reply messages.
data ExecuteReplyStatus
Ok :: ExecuteReplyStatus
Err :: ExecuteReplyStatus
Abort :: ExecuteReplyStatus

-- | Initialization information for the kernel.
data InitInfo
InitInfo :: [String] -> [String] -> String -> FrontendType -> InitInfo

-- | Extensions to enable at start.
extensions :: InitInfo -> [String]

-- | Code blocks to run before start.
initCells :: InitInfo -> [String]

-- | Which directory this kernel should pretend to operate in.
initDir :: InitInfo -> String

-- | What frontend this serves.
frontend :: InitInfo -> FrontendType

-- | All state stored in the kernel between executions.
data KernelState
KernelState :: Int -> LintStatus -> FrontendType -> Bool -> Bool -> Bool -> Bool -> Map UUID Widget -> KernelState
getExecutionCounter :: KernelState -> Int
getLintStatus :: KernelState -> LintStatus
getFrontend :: KernelState -> FrontendType
useSvg :: KernelState -> Bool
useShowErrors :: KernelState -> Bool
useShowTypes :: KernelState -> Bool
usePager :: KernelState -> Bool
openComms :: KernelState -> Map UUID Widget

-- | Current HLint status.
data LintStatus
LintOn :: LintStatus
LintOff :: LintStatus

-- | Possible MIME types for the display data.
type Width = Int
type Height = Int
data FrontendType
IPythonConsole :: FrontendType
IPythonNotebook :: FrontendType
data ViewFormat
Pdf :: ViewFormat
Html :: ViewFormat
Ipynb :: ViewFormat
Markdown :: ViewFormat
Latex :: ViewFormat

-- | Wrapper for ipython-kernel's DisplayData which allows sending multiple
--   results from the same expression.
data Display
Display :: [DisplayData] -> Display
ManyDisplay :: [Display] -> Display
defaultKernelState :: KernelState
extractPlain :: [DisplayData] -> String
kernelOpts :: [KernelOpt]

-- | Kernel options to be set via `:set` and `:option`.
data KernelOpt
KernelOpt :: [String] -> [String] -> (KernelState -> KernelState) -> KernelOpt

-- | Ways to set this option via `:option`
getOptionName :: KernelOpt -> [String]

-- | Ways to set this option via `:set`
getSetName :: KernelOpt -> [String]

-- | Function to update the kernel state.
getUpdateKernelState :: KernelOpt -> KernelState -> KernelState

-- | A class for displayable Haskell types.
--   
--   IHaskell's displaying of results behaves as if these two
--   overlapping/undecidable instances also existed:
--   
--   <pre>
--   instance (Show a) =&gt; IHaskellDisplay a
--   instance Show a where shows _ = id
--   </pre>
class IHaskellDisplay a
display :: IHaskellDisplay a => a -> IO Display

-- | Display as an interactive widget.
class IHaskellDisplay a => IHaskellWidget a where open _ _ = return () comm _ _ _ = return () close _ _ = return ()
targetName :: IHaskellWidget a => a -> String
open :: IHaskellWidget a => a -> (Value -> IO ()) -> IO ()
comm :: IHaskellWidget a => a -> Value -> (Value -> IO ()) -> IO ()
close :: IHaskellWidget a => a -> Value -> IO ()
data Widget
Widget :: a -> Widget
data CommInfo
CommInfo :: Widget -> UUID -> String -> CommInfo
instance Typeable Display
instance Typeable Widget
instance Eq ViewFormat
instance Show Display
instance Generic Display
instance Show FrontendType
instance Eq FrontendType
instance Read FrontendType
instance Show InitInfo
instance Read InitInfo
instance Eq LintStatus
instance Show LintStatus
instance Show KernelState
instance Datatype D1Display
instance Constructor C1_0Display
instance Constructor C1_1Display
instance Semigroup Display
instance Monoid Display
instance Serialize Display
instance Show Widget
instance IHaskellWidget Widget
instance IHaskellDisplay Widget
instance Read ViewFormat
instance Show ViewFormat

module IHaskell.Flags
data IHaskellMode
ShowHelp :: String -> IHaskellMode
Notebook :: IHaskellMode
Console :: IHaskellMode
ConvertLhs :: IHaskellMode
Kernel :: (Maybe String) -> IHaskellMode
View :: (Maybe ViewFormat) -> (Maybe String) -> IHaskellMode
data Argument

-- | Which directory to serve notebooks from.
ServeFrom :: String -> Argument

-- | An extension to load at startup.
Extension :: String -> Argument

-- | A file with commands to load at startup.
ConfFile :: String -> Argument

-- | Which executable to use for IPython.
IPythonFrom :: String -> Argument

-- | Present when output should overwrite existing files.
OverwriteFiles :: Argument
ConvertFrom :: String -> Argument
ConvertTo :: String -> Argument
ConvertFromFormat :: NotebookFormat -> Argument
ConvertToFormat :: NotebookFormat -> Argument
ConvertLhsStyle :: (LhsStyle String) -> Argument

-- | Display help text.
Help :: Argument
data Args
Args :: IHaskellMode -> [Argument] -> Args
data LhsStyle string
LhsStyle :: string -> string -> string -> string -> string -> string -> LhsStyle string

-- | <pre>
--   &gt;
--   </pre>
lhsCodePrefix :: LhsStyle string -> string

-- | <pre>
--   &lt;&lt;
--   </pre>
lhsOutputPrefix :: LhsStyle string -> string

-- | <pre>
--   \begin{code}
--   </pre>
lhsBeginCode :: LhsStyle string -> string

-- | <pre>
--   \end{code}
--   </pre>
lhsEndCode :: LhsStyle string -> string

-- | <pre>
--   \begin{verbatim}
--   </pre>
lhsBeginOutput :: LhsStyle string -> string

-- | <pre>
--   \end{verbatim}
--   </pre>
lhsEndOutput :: LhsStyle string -> string
lhsStyleBird :: LhsStyle String
data NotebookFormat
LhsMarkdown :: NotebookFormat
IpynbFile :: NotebookFormat

-- | Given a list of command-line arguments, return the IHaskell mode and
--   arguments to process.
parseFlags :: [String] -> Either String Args

-- | Get help text for a given IHaskell ode.
help :: IHaskellMode -> String
instance Eq string => Eq (LhsStyle string)
instance Functor LhsStyle
instance Show string => Show (LhsStyle string)
instance Eq NotebookFormat
instance Show NotebookFormat
instance Eq Argument
instance Show Argument
instance Eq IHaskellMode
instance Show IHaskellMode
instance Show Args


module IHaskell.Convert.Args

-- | ConvertSpec is the accumulator for command line arguments
data ConvertSpec f
ConvertSpec :: f Bool -> f FilePath -> f FilePath -> f (LhsStyle Text) -> Bool -> ConvertSpec f
convertToIpynb :: ConvertSpec f -> f Bool
convertInput :: ConvertSpec f -> f FilePath
convertOutput :: ConvertSpec f -> f FilePath
convertLhsStyle :: ConvertSpec f -> f (LhsStyle Text)
convertOverwriteFiles :: ConvertSpec f -> Bool

-- | Convert a possibly-incomplete specification for what to convert into
--   one which can be executed. Calls error when data is missing.
fromJustConvertSpec :: ConvertSpec Maybe -> ConvertSpec Identity
toConvertSpec :: [Argument] -> ConvertSpec Maybe

module IHaskell.Convert.IpynbToLhs
ipynbToLhs :: LhsStyle Text -> FilePath -> FilePath -> IO ()

module IHaskell.Convert.LhsToIpynb
lhsToIpynb :: LhsStyle Text -> FilePath -> FilePath -> IO ()
instance Show a => Show (CellLine a)
instance Show a => Show (Cell a)


module IHaskell.Convert

-- | used by <tt>IHaskell convert</tt>
convert :: [Argument] -> IO ()


module IHaskell.IPython

-- | Set up IPython properly.
setupIPython :: WhichIPython -> IO ()
runConsole :: WhichIPython -> InitInfo -> IO ()
runNotebook :: WhichIPython -> InitInfo -> Maybe String -> IO ()
readInitInfo :: IO InitInfo
defaultConfFile :: IO (Maybe String)
getIHaskellDir :: IO String
getSandboxPackageConf :: IO (Maybe String)

-- | Find a notebook and then convert it into the provided format.
--   Notebooks are searched in the current directory as well as the
--   IHaskell notebook directory (in that order).
nbconvert :: WhichIPython -> ViewFormat -> String -> IO ()

-- | Replace <a>~</a> with $HOME if $HOME is defined. Otherwise, do
--   nothing.
subHome :: String -> IO String
data ViewFormat
Pdf :: ViewFormat
Html :: ViewFormat
Ipynb :: ViewFormat
Markdown :: ViewFormat
Latex :: ViewFormat

-- | Which IPython to use.
data WhichIPython

-- | Use the one that IHaskell tries to install.
DefaultIPython :: WhichIPython

-- | Use the command-line flag provided one.
ExplicitIPython :: String -> WhichIPython
instance Eq WhichIPython

module IHaskell.Eval.Hoogle

-- | Search for a query on Hoogle. Return all search results.
search :: String -> IO [HoogleResult]

-- | Look up an identifier on Hoogle. Return documentation for that
--   identifier. If there are many identifiers, include documentation for
--   all of them.
document :: String -> IO [HoogleResult]

-- | Render a Hoogle search result into an output format.
render :: OutputFormat -> HoogleResult -> String

-- | Types of formats to render output to.
data OutputFormat

-- | Render to plain text.
Plain :: OutputFormat

-- | Render to HTML.
HTML :: OutputFormat
data HoogleResult
instance Eq HoogleResponse
instance Show HoogleResponse
instance Show HoogleResult
instance FromJSON HoogleResponse
instance FromJSON [HoogleResponse]


-- | If you are interested in the IHaskell library for the purpose of
--   augmenting the IHaskell notebook or writing your own display
--   mechanisms and widgets, this module contains all functions you need.
--   
--   In order to create a display mechanism for a particular data type,
--   write a module named (for example) <tt>IHaskell.Display.YourThing</tt>
--   in a package named <tt>ihaskell-yourThing</tt>. (Note the
--   capitalization - it's important!) Then, in that module, add an
--   instance of <tt>IHaskellDisplay</tt> for your data type. Similarly, to
--   create a widget, add an instance of <tt>IHaskellWidget</tt>.
--   
--   An example of creating a display is provided in the <a>demo
--   notebook</a>.
module IHaskell.Display

-- | A class for displayable Haskell types.
--   
--   IHaskell's displaying of results behaves as if these two
--   overlapping/undecidable instances also existed:
--   
--   <pre>
--   instance (Show a) =&gt; IHaskellDisplay a
--   instance Show a where shows _ = id
--   </pre>
class IHaskellDisplay a
display :: IHaskellDisplay a => a -> IO Display

-- | Wrapper for ipython-kernel's DisplayData which allows sending multiple
--   results from the same expression.
data Display
Display :: [DisplayData] -> Display
ManyDisplay :: [Display] -> Display

-- | Data for display: a string with associated MIME type.
data DisplayData
DisplayData :: MimeType -> Text -> DisplayData

-- | Display as an interactive widget.
class IHaskellDisplay a => IHaskellWidget a where open _ _ = return () comm _ _ _ = return () close _ _ = return ()
targetName :: IHaskellWidget a => a -> String
open :: IHaskellWidget a => a -> (Value -> IO ()) -> IO ()
comm :: IHaskellWidget a => a -> Value -> (Value -> IO ()) -> IO ()
close :: IHaskellWidget a => a -> Value -> IO ()

-- | Write to the display channel. The contents will be displayed in the
--   notebook once the current execution call ends.
printDisplay :: IHaskellDisplay a => a -> IO ()

-- | Generate a plain text display.
plain :: String -> DisplayData

-- | Generate an HTML display.
html :: String -> DisplayData

-- | Generate a PNG display of the given width and height. Data must be
--   provided in a Base64 encoded manner, suitable for embedding into HTML.
--   The <tt>base64</tt> function may be used to encode data into this
--   format.
png :: Width -> Height -> Base64 -> DisplayData

-- | Generate a JPG display of the given width and height. Data must be
--   provided in a Base64 encoded manner, suitable for embedding into HTML.
--   The <tt>base64</tt> function may be used to encode data into this
--   format.
jpg :: Width -> Height -> Base64 -> DisplayData

-- | Generate an SVG display.
svg :: String -> DisplayData

-- | Generate a LaTeX display.
latex :: String -> DisplayData

-- | Generate a Javascript display.
javascript :: String -> DisplayData

-- | Encode many displays into a single one. All will be output.
many :: [Display] -> Display

-- | Possible MIME types for the display data.
type Width = Int
type Height = Int
type Base64 = Text

-- | Convert from a string into base 64 encoded data.
encode64 :: String -> Base64

-- | Convert from a ByteString into base 64 encoded data.
base64 :: ByteString -> Base64

-- | Convenience function for client libraries. Switch to a temporary
--   directory so that any files we create aren't visible. On Unix, this is
--   usually /tmp.
switchToTmpDir :: IO ()

-- | Take everything that was put into the <a>displayChan</a> at that point
--   out, and make a <a>Display</a> out of it.
displayFromChan :: IO (Maybe Display)

-- | For internal use within IHaskell. Serialize displays to a ByteString.
serializeDisplay :: Display -> ByteString
data Widget
Widget :: a -> Widget
instance IHaskellDisplay a => IHaskellDisplay [a]
instance IHaskellDisplay DisplayData
instance IHaskellDisplay Display
instance IHaskellDisplay a => IHaskellDisplay (IO a)

module IHaskell.Eval.Lint

-- | Given parsed code chunks, perform linting and output a displayable
--   report on linting warnings and errors.
lint :: [Located CodeBlock] -> IO Display
instance Eq LintSuggestion
instance Show LintSuggestion


-- | This module exports all functions used for evaluation of IHaskell
--   input.
module IHaskell.Eval.Evaluate

-- | Run an interpreting action. This is effectively runGhc with
--   initialization and importing. First argument indicates whether
--   <a>stdin</a> is handled specially, which cannot be done in a testing
--   environment.
interpret :: Bool -> Interpreter a -> IO a

-- | Evaluate some IPython input code.
evaluate :: KernelState -> String -> (EvaluationResult -> IO ()) -> Interpreter KernelState
type Interpreter = Ghc
liftIO :: MonadIO m => forall a. IO a -> m a
typeCleaner :: String -> String
globalImports :: [String]
instance Show ErrorOccurred
instance Eq ErrorOccurred
instance MonadIO Interpreter


-- | This has a limited amount of context sensitivity. It distinguishes
--   between four contexts at the moment: - import statements (completed
--   using modules) - identifiers (completed using in scope values) -
--   extensions via :ext (completed using GHC extensions) - qualified
--   identifiers (completed using in-scope values)
module IHaskell.Eval.Completion
complete :: String -> Int -> Interpreter (String, [String])

-- | Get the word under a given cursor location.
completionTarget :: String -> Int -> [String]

-- | Get which type of completion this is from the surrounding context.
completionType :: String -> Int -> [String] -> CompletionType
data CompletionType
Empty :: CompletionType
Identifier :: String -> CompletionType
DynFlag :: String -> CompletionType
Qualified :: String -> String -> CompletionType
ModuleName :: String -> String -> CompletionType
HsFilePath :: String -> String -> CompletionType
FilePath :: String -> String -> CompletionType
KernelOption :: String -> CompletionType
Extension :: String -> CompletionType
instance Show CompletionType
instance Eq CompletionType


module IHaskell.Eval.Info
info :: String -> Interpreter String
