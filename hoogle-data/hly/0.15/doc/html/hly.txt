-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell LilyPond
--   
@package hly
@version 0.15

module Music.LilyPond.Light.Model
data Version
Version :: String -> Version
data Units
MM :: Units
CM :: Units
data Length
Length :: Double -> Units -> Length
data Paper
Paper :: Length -> Length -> Length -> Length -> Length -> Length -> Length -> Length -> Bool -> Bool -> Bool -> Bool -> Length -> Length -> Bool -> Bool -> Maybe Integer -> Maybe Integer -> Maybe Integer -> Maybe Integer -> Maybe Integer -> Maybe String -> Paper
binding_offset :: Paper -> Length
bottom_margin :: Paper -> Length
indent :: Paper -> Length
inner_margin :: Paper -> Length
left_margin :: Paper -> Length
outer_margin :: Paper -> Length
paper_width :: Paper -> Length
paper_height :: Paper -> Length
ragged_right :: Paper -> Bool
ragged_last :: Paper -> Bool
ragged_bottom :: Paper -> Bool
ragged_last_bottom :: Paper -> Bool
right_margin :: Paper -> Length
top_margin :: Paper -> Length
two_sided :: Paper -> Bool
print_page_number :: Paper -> Bool
min_systems_per_page :: Paper -> Maybe Integer
max_systems_per_page :: Paper -> Maybe Integer
systems_per_page :: Paper -> Maybe Integer
systems_count :: Paper -> Maybe Integer
page_count :: Paper -> Maybe Integer
system_separator_markup :: Paper -> Maybe String
data Header
Header :: String -> String -> String -> String -> String -> String -> String -> String -> String -> Header
dedication :: Header -> String
title :: Header -> String
subtitle :: Header -> String
subsubtitle :: Header -> String
instrument :: Header -> String
composer :: Header -> String
opus :: Header -> String
poet :: Header -> String
tagline :: Header -> String
data Articulation_T
Accent :: Articulation_T
Arpeggio :: Articulation_T
ArpeggioDown :: Articulation_T
ArpeggioNeutral :: Articulation_T
ArpeggioUp :: Articulation_T
DownBow :: Articulation_T
Fermata :: Articulation_T
Flageolet :: Articulation_T
Glissando :: Articulation_T
Harmonic :: Articulation_T
LaissezVibrer :: Articulation_T
Marcato :: Articulation_T
Open :: Articulation_T
Portato :: Articulation_T
Staccato :: Articulation_T
StemTremolo :: Integer -> Articulation_T
Stopped :: Articulation_T
Tenuto :: Articulation_T
Trill :: Articulation_T
UpBow :: Articulation_T
data Dynamic_T
Dynamic_Mark :: Dynamic_Mark_T -> Dynamic_T
Hairpin :: Hairpin_T -> Dynamic_T
Espressivo :: Dynamic_T
data Phrasing_T
Begin_Slur :: Phrasing_T
End_Slur :: Phrasing_T
Begin_PhrasingSlur :: Phrasing_T
End_PhrasingSlur :: Phrasing_T
Begin_Beam :: Phrasing_T
End_Beam :: Phrasing_T
SustainOn :: Phrasing_T
SustainOff :: Phrasing_T
data Text_T
Text_Symbol :: Text_T
Text_Plain :: Text_T
Text_Markup :: Text_T
data Annotation
Articulation :: Articulation_T -> Annotation
Dynamic :: Dynamic_T -> Annotation
Phrasing :: Phrasing_T -> Annotation
Begin_Tie :: Annotation
Place_Above :: Annotation
Place_Default :: Annotation
Place_Below :: Annotation
Text_Mark :: Annotation
Text :: Text_T -> String -> Annotation
ReminderAccidental :: Annotation
CautionaryAccidental :: Annotation
CompositeAnnotation :: [Annotation] -> Annotation
data Bar_T
NormalBarline :: Bar_T
DoubleBarline :: Bar_T
LeftRepeatBarline :: Bar_T
RightRepeatBarline :: Bar_T
FinalBarline :: Bar_T
DottedBarline :: Bar_T
DashedBarline :: Bar_T
TickBarline :: Bar_T
data Command_T
AutoBeamOff :: Command_T
Bar :: Bar_T -> Command_T
BarlineCheck :: Command_T
BarNumberCheck :: Integer -> Command_T
Break :: Command_T
Change :: String -> Command_T
DynamicDown :: Command_T
DynamicNeutral :: Command_T
DynamicUp :: Command_T
NoBreak :: Command_T
NoPageBreak :: Command_T
Octavation :: Integer -> Command_T
PageBreak :: Command_T
Partial :: Duration -> Command_T
StemDown :: Command_T
StemNeutral :: Command_T
StemUp :: Command_T
TupletDown :: Command_T
TupletNeutral :: Command_T
TupletUp :: Command_T
User :: String -> Command_T
VoiceOne :: Command_T
VoiceTwo :: Command_T
VoiceThree :: Command_T
VoiceFour :: Command_T
type Tuplet_T = (Integer, Integer)
data Tuplet_Mode
Normal_Tuplet :: Tuplet_Mode
Scale_Durations :: Tuplet_Mode

-- | <a>Music</a> element category enumeration.
data Music_C
Note_C :: Music_C
Chord_C :: Music_C
Tremolo_C :: Music_C
Rest_C :: Music_C
MMRest_C :: Music_C
Skip_C :: Music_C
Repeat_C :: Music_C
Tuplet_C :: Music_C
Grace_C :: Music_C
AfterGrace_C :: Music_C
Join_C :: Music_C
Clef_C :: Music_C
Time_C :: Music_C
Key_C :: Music_C
Tempo_C :: Music_C
Command_C :: Music_C
Polyphony_C :: Music_C
Empty_C :: Music_C

-- | Categorise <a>Music</a> element.
music_c :: Music -> Music_C

-- | Type of rest. Perhaps MMRest should be given here also.
data Rest_T
Normal_Rest :: Rest_T
Spacer_Rest :: Rest_T
data Music
Note :: Pitch -> Maybe Duration -> [Annotation] -> Music
note_pitch :: Music -> Pitch
note_duration :: Music -> Maybe Duration
note_annotations :: Music -> [Annotation]
Chord :: [Music] -> Duration -> [Annotation] -> Music
chord_notes :: Music -> [Music]
chord_duration :: Music -> Duration
chord_annotations :: Music -> [Annotation]
Tremolo :: (Either Music (Music, Music)) -> Integer -> Music
Rest :: Rest_T -> Duration -> [Annotation] -> Music
MMRest :: Integer -> Time_Signature -> [Annotation] -> Music
Skip :: Duration -> [Annotation] -> Music
Repeat :: Integer -> Music -> Music
Tuplet :: Tuplet_Mode -> Tuplet_T -> Music -> Music
Grace :: Music -> Music
AfterGrace :: Music -> Music -> Music
Join :: [Music] -> Music
Clef :: (Clef Int) -> Music
Time :: Time_Signature -> Music
Key :: Note_T -> (Maybe Alteration_T) -> Mode_T -> Music
Tempo :: (Maybe String) -> Duration -> Rational -> Music
Command :: Command_T -> [Annotation] -> Music
Polyphony :: Music -> Music -> Music
Empty :: Music
type Staff_Name = (String, String)
type Staff_ID = String
data Staff_T
Normal_Staff :: Staff_T
Rhythmic_Staff :: Staff_T
data Part
Part :: (Maybe String) -> [Music] -> Part
MultipleParts :: [[Music]] -> Part
data Staff_Set_T
ChoirStaff :: Staff_Set_T
GrandStaff :: Staff_Set_T
PianoStaff :: Staff_Set_T
StaffGroup :: Staff_Set_T
StaffGroup_SquareBracket :: Staff_Set_T
type Staff_Scalar = Int
data Staff_Settings
Staff_Settings :: Staff_T -> Staff_ID -> Staff_Scalar -> Staff_Settings
data Staff
Staff :: Staff_Settings -> Staff_Name -> Part -> Staff
Staff_Set :: Staff_Set_T -> Staff_Name -> [Staff] -> Staff
data Score_Settings
Score_Settings :: Bool -> Bool -> Bool -> Bool -> Score_Settings
independent_time_signatures :: Score_Settings -> Bool
hide_time_signatures :: Score_Settings -> Bool
remove_empty_staves :: Score_Settings -> Bool
remove_empty_staves_first_system :: Score_Settings -> Bool
data Score
Score :: Score_Settings -> [Staff] -> Score
data Work
Work :: Version -> Paper -> Header -> Score -> Work
work_version :: Work -> Version
work_paper :: Work -> Paper
work_header :: Work -> Header
work_score :: Work -> Score
data Fragment
Fragment :: Version -> Paper -> Staff -> Fragment
fragment_version :: Fragment -> Version
fragment_paper :: Fragment -> Paper
fragment_staff :: Fragment -> Staff
data Format
PDF :: Format
PS :: Format
PNG :: Format
default_version :: Version
default_header :: Header
default_score_settings :: Score_Settings
ly_bool :: Bool -> String
instance Eq Version
instance Show Version
instance Eq Units
instance Show Units
instance Eq Length
instance Show Length
instance Eq Paper
instance Show Paper
instance Eq Header
instance Show Header
instance Eq Articulation_T
instance Show Articulation_T
instance Eq Dynamic_T
instance Show Dynamic_T
instance Eq Phrasing_T
instance Show Phrasing_T
instance Eq Text_T
instance Show Text_T
instance Eq Annotation
instance Show Annotation
instance Eq Bar_T
instance Show Bar_T
instance Eq Command_T
instance Show Command_T
instance Eq Tuplet_Mode
instance Show Tuplet_Mode
instance Eq Music_C
instance Enum Music_C
instance Bounded Music_C
instance Eq Rest_T
instance Show Rest_T
instance Eq Music
instance Show Music
instance Eq Staff_T
instance Show Staff_T
instance Eq Part
instance Show Part
instance Eq Staff_Set_T
instance Show Staff_Set_T
instance Eq Staff_Settings
instance Show Staff_Settings
instance Eq Staff
instance Show Staff
instance Eq Score_Settings
instance Show Score_Settings
instance Eq Score
instance Show Score
instance Eq Work
instance Show Work
instance Eq Fragment
instance Show Fragment
instance Enum Format
instance Eq Format
instance Show Format
instance Monoid Music

module Music.LilyPond.Light.Output.LilyPond

-- | Translate <a>Work</a> to lilypond source code.
ly_work :: Work -> String
ly_fragment :: Fragment -> String

-- | Translate <a>Music</a> element to lilypond source code.
--   
--   <pre>
--   import Music.LilyPond.Light
--   import Music.Theory.Duration.Name.Abbreviation
--   ly_music_elem (Join [c4#q',e4#h]) == "c' 4. e' 2"
--   </pre>
ly_music_elem :: Music -> String

-- | Notate <a>Lilypond</a> value, write to file, and run <tt>lilypond</tt>
--   to generate output in <a>Format</a>.
ly_process :: Lilypond a => FilePath -> Format -> String -> a -> IO ExitCode

-- | Variant of <a>ly_process</a> using current working directory.
ly_process_cwd :: Lilypond a => Format -> String -> a -> IO ExitCode
class Lilypond a
ly_notate :: Lilypond a => a -> String
instance Lilypond Fragment
instance Lilypond Work
instance Lilypond Score


-- | Paper related functions and constants.
module Music.LilyPond.Light.Paper
a4_paper :: Paper
b4_paper :: Paper

-- | Set margins, ordering as for CSS, ie. clockwise from top.
paper_set_margins :: Length -> Length -> Length -> Length -> Paper -> Paper

-- | Variant with margins given in <i>mm</i>.
paper_set_margins_mm :: Real n => n -> n -> n -> n -> Paper -> Paper
length_scale :: Double -> Length -> Length
paper_incr_size :: Paper -> Paper
paper_decr_size :: Paper -> Paper
a3_paper :: Paper
a2_paper :: Paper
b5_paper :: Paper
landscape :: Paper -> Paper
mk_fragment_paper :: Double -> Double -> Paper


-- | Dynamic constants.
module Music.LilyPond.Light.Constant.Dynamic
pppp :: Annotation
sfz :: Annotation
fp :: Annotation
ffff :: Annotation
fff :: Annotation
ff :: Annotation
f :: Annotation
mf :: Annotation
mp :: Annotation
p :: Annotation
pp :: Annotation
ppp :: Annotation
cresc :: Annotation
espressivo :: Annotation
end_decr :: Annotation
end_cresc :: Annotation
decr :: Annotation


-- | <a>Pitch</a> names lifted to <a>Music</a> values.
module Music.LilyPond.Light.Constant.Note
pitch_to_music :: Pitch -> Music
c1 :: Music
b1 :: Music
a1 :: Music
g1 :: Music
f1 :: Music
e1 :: Music
d1 :: Music
ces1 :: Music
bes1 :: Music
aes1 :: Music
ges1 :: Music
fes1 :: Music
ees1 :: Music
des1 :: Music
cis1 :: Music
bis1 :: Music
ais1 :: Music
gis1 :: Music
fis1 :: Music
eis1 :: Music
dis1 :: Music
c2 :: Music
b2 :: Music
a2 :: Music
g2 :: Music
f2 :: Music
e2 :: Music
d2 :: Music
ces2 :: Music
bes2 :: Music
aes2 :: Music
ges2 :: Music
fes2 :: Music
ees2 :: Music
des2 :: Music
cis2 :: Music
bis2 :: Music
ais2 :: Music
gis2 :: Music
fis2 :: Music
eis2 :: Music
dis2 :: Music
cisis2 :: Music
bisis2 :: Music
aisis2 :: Music
gisis2 :: Music
fisis2 :: Music
eisis2 :: Music
disis2 :: Music
c3 :: Music
b3 :: Music
a3 :: Music
g3 :: Music
f3 :: Music
e3 :: Music
d3 :: Music
ces3 :: Music
bes3 :: Music
aes3 :: Music
ges3 :: Music
fes3 :: Music
ees3 :: Music
des3 :: Music
cis3 :: Music
bis3 :: Music
ais3 :: Music
gis3 :: Music
fis3 :: Music
eis3 :: Music
dis3 :: Music
cisis3 :: Music
bisis3 :: Music
aisis3 :: Music
gisis3 :: Music
fisis3 :: Music
eisis3 :: Music
disis3 :: Music
ceseh3 :: Music
beseh3 :: Music
aeseh3 :: Music
geseh3 :: Music
feseh3 :: Music
eeseh3 :: Music
deseh3 :: Music
ceh3 :: Music
beh3 :: Music
aeh3 :: Music
geh3 :: Music
feh3 :: Music
eeh3 :: Music
deh3 :: Music
cih3 :: Music
bih3 :: Music
aih3 :: Music
gih3 :: Music
fih3 :: Music
eih3 :: Music
dih3 :: Music
cisih3 :: Music
bisih3 :: Music
aisih3 :: Music
gisih3 :: Music
fisih3 :: Music
eisih3 :: Music
disih3 :: Music
c4 :: Music
b4 :: Music
a4 :: Music
g4 :: Music
f4 :: Music
e4 :: Music
d4 :: Music
ces4 :: Music
bes4 :: Music
aes4 :: Music
ges4 :: Music
fes4 :: Music
ees4 :: Music
des4 :: Music
cis4 :: Music
bis4 :: Music
ais4 :: Music
gis4 :: Music
fis4 :: Music
eis4 :: Music
dis4 :: Music
ceses4 :: Music
beses4 :: Music
aeses4 :: Music
geses4 :: Music
feses4 :: Music
eeses4 :: Music
deses4 :: Music
cisis4 :: Music
bisis4 :: Music
aisis4 :: Music
gisis4 :: Music
fisis4 :: Music
eisis4 :: Music
disis4 :: Music
ceseh4 :: Music
beseh4 :: Music
aeseh4 :: Music
geseh4 :: Music
feseh4 :: Music
eeseh4 :: Music
deseh4 :: Music
ceh4 :: Music
beh4 :: Music
aeh4 :: Music
geh4 :: Music
feh4 :: Music
eeh4 :: Music
deh4 :: Music
cih4 :: Music
bih4 :: Music
aih4 :: Music
gih4 :: Music
fih4 :: Music
eih4 :: Music
dih4 :: Music
cisih4 :: Music
bisih4 :: Music
aisih4 :: Music
gisih4 :: Music
fisih4 :: Music
eisih4 :: Music
disih4 :: Music
c5 :: Music
b5 :: Music
a5 :: Music
g5 :: Music
f5 :: Music
e5 :: Music
d5 :: Music
ces5 :: Music
bes5 :: Music
aes5 :: Music
ges5 :: Music
fes5 :: Music
ees5 :: Music
des5 :: Music
cis5 :: Music
bis5 :: Music
ais5 :: Music
gis5 :: Music
fis5 :: Music
eis5 :: Music
dis5 :: Music
ceses5 :: Music
beses5 :: Music
aeses5 :: Music
geses5 :: Music
feses5 :: Music
eeses5 :: Music
deses5 :: Music
cisis5 :: Music
bisis5 :: Music
aisis5 :: Music
gisis5 :: Music
fisis5 :: Music
eisis5 :: Music
disis5 :: Music
ceseh5 :: Music
beseh5 :: Music
aeseh5 :: Music
geseh5 :: Music
feseh5 :: Music
eeseh5 :: Music
deseh5 :: Music
ceh5 :: Music
beh5 :: Music
aeh5 :: Music
geh5 :: Music
feh5 :: Music
eeh5 :: Music
deh5 :: Music
cih5 :: Music
bih5 :: Music
aih5 :: Music
gih5 :: Music
fih5 :: Music
eih5 :: Music
dih5 :: Music
cisih5 :: Music
bisih5 :: Music
aisih5 :: Music
gisih5 :: Music
fisih5 :: Music
eisih5 :: Music
disih5 :: Music
c6 :: Music
b6 :: Music
a6 :: Music
g6 :: Music
f6 :: Music
e6 :: Music
d6 :: Music
ces6 :: Music
bes6 :: Music
aes6 :: Music
ges6 :: Music
fes6 :: Music
ees6 :: Music
des6 :: Music
cis6 :: Music
bis6 :: Music
ais6 :: Music
gis6 :: Music
fis6 :: Music
eis6 :: Music
dis6 :: Music
ceseh6 :: Music
beseh6 :: Music
aeseh6 :: Music
geseh6 :: Music
feseh6 :: Music
eeseh6 :: Music
deseh6 :: Music
ceh6 :: Music
beh6 :: Music
aeh6 :: Music
geh6 :: Music
feh6 :: Music
eeh6 :: Music
deh6 :: Music
cih6 :: Music
bih6 :: Music
aih6 :: Music
gih6 :: Music
fih6 :: Music
eih6 :: Music
dih6 :: Music
cisih6 :: Music
bisih6 :: Music
aisih6 :: Music
gisih6 :: Music
fisih6 :: Music
eisih6 :: Music
disih6 :: Music
c7 :: Music
b7 :: Music
a7 :: Music
g7 :: Music
f7 :: Music
e7 :: Music
d7 :: Music
ces7 :: Music
bes7 :: Music
aes7 :: Music
ges7 :: Music
fes7 :: Music
ees7 :: Music
des7 :: Music
cis7 :: Music
bis7 :: Music
ais7 :: Music
gis7 :: Music
fis7 :: Music
eis7 :: Music
dis7 :: Music

module Music.LilyPond.Light.Measure
type M_Annotation = Music
data Measure
Measure :: [M_Annotation] -> [Music] -> Measure
m_annotate :: M_Annotation -> Measure -> Measure
m_annotate' :: [M_Annotation] -> Measure -> Measure
m_annotate_first' :: [M_Annotation] -> [Measure] -> [Measure]
m_annotate_last' :: [M_Annotation] -> [Measure] -> [Measure]
m_append :: [Music] -> Measure -> Measure
m_elements :: Measure -> [Music]
mm_elements :: [Measure] -> [Music]
instance Eq Measure
instance Show Measure


-- | Notation related constants.
module Music.LilyPond.Light.Constant
arpeggio :: Annotation
glissando :: Annotation
laissezVibrer :: Annotation
harmonic :: Annotation
flageolet :: Annotation
fermata :: Annotation
marcato :: Annotation
accent :: Annotation
tenuto :: Annotation
staccato :: Annotation
stem_tremolo :: Integer -> Annotation
bass_clef :: Music
percussion_clef :: Music
treble_clef :: Music
alto_clef :: Music
tenor_clef :: Music
bass_8vb_clef :: Music
treble_15ma_clef :: Music
treble_8vb_clef :: Music
treble_8va_clef :: Music
bar_line_check :: Music
normal_barline :: Music
dotted_barline :: Music
dashed_barline :: Music
tick_barline :: Music
final_barline :: Music
double_barline :: Music
system_break :: Music
no_system_break :: Music
page_break :: Music
no_page_break :: Music
auto_beam_off :: Music
tuplet_down :: Music
tuplet_up :: Music
tuplet_neutral :: Music
voice_one :: Music
voice_two :: Music
stem_down :: Music
stem_up :: Music
stem_neutral :: Music
dynamic_down :: Music
dynamic_up :: Music
dynamic_neutral :: Music
begin_8va :: Music
end_8va :: Music
cadenzaOn :: Music
ped :: Annotation
no_ped :: Annotation
tie :: Annotation

-- | Beaming annotations.
begin_beam :: Annotation

-- | Beaming annotations.
end_beam :: Annotation

-- | Slur annotations.
begin_slur :: Annotation

-- | Slur annotations.
end_slur :: Annotation
slur_down :: Music
slur_up :: Music
slur_neutral :: Music

-- | Phrasing slur annotations.
begin_phrasing_slur :: Annotation

-- | Phrasing slur annotations.
end_phrasing_slur :: Annotation
rAcc :: Annotation
cAcc :: Annotation
set_accidental_style_dodecaphonic :: Music
set_accidental_style_neo_modern :: Music
set_accidental_style_modern :: Music

-- | Request particular note-heads.
set_noteheads :: String -> Music

-- | Request specific note-heads.
cross_noteheads :: Music
baroque_noteheads :: Music
neomensural_noteheads :: Music
petrucci_noteheads :: Music
mensural_noteheads :: Music
harmonic_noteheads :: Music
diamond_noteheads :: Music
harmonic_mixed_noteheads :: Music

-- | Revert to standard note-heads.
revert_noteheads :: Music
tempo :: Duration -> Integer -> Music
tempo_text :: String -> Duration -> Integer -> Music
after_grace :: Music -> Music -> Music
grace :: Music -> Music
tremolo1 :: Music -> Integer -> Music
tremolo2 :: (Music, Music) -> Integer -> Music
slash_separator :: String

module Music.LilyPond.Light.Notation
is_music_c :: Music_C -> Music -> Bool
is_note :: Music -> Bool
is_chord :: Music -> Bool
is_rest :: Music -> Bool
is_skip :: Music -> Bool
is_mm_rest :: Music -> Bool
is_grace :: Music -> Bool
is_after_grace :: Music -> Bool

-- | These are required to avoid issues in lilypond (see manual)
is_grace_skip :: Music -> Bool
is_clef :: Music -> Bool
is_time :: Music -> Bool
is_tempo :: Music -> Bool
is_command :: Music -> Bool
is_barlinecheck :: Music -> Bool
is_tied :: Music -> Bool
is_tuplet :: Music -> Bool

-- | Remove any reminder or cautionary accidentals at note or chord.
clr_acc :: Music -> Music
octpc_to_note :: (Octave, PitchClass) -> Music

-- | Construct normal rest.
rest :: Duration -> Music

-- | Construct spacer rest.
spacer_rest :: Duration -> Music

-- | Multi-measure variant of <a>rest</a>.
mm_rest :: Time_Signature -> Music

-- | Non-printing variant of <a>rest</a>.
skip :: Duration -> Music

-- | Create an empty measure for the specified time signature.
empty_measure :: Integer -> Integer -> Music

-- | Like <a>empty_measure</a>, but with an invisible rest.
null_measure :: Integer -> Integer -> Music

-- | Like <a>empty_measure</a> but write time signature.
measure_rest :: Integer -> Integer -> Music

-- | Like <a>measure_rest</a> but write time signature.
measure_null :: Integer -> Integer -> Music

-- | Apply a <a>Duration</a> function to a <a>Music</a> node, if it has a
--   duration.
edit_dur :: (Duration -> Duration) -> Music -> Music

-- | Temporal scaling of music (tuplets).
tuplet :: Tuplet_T -> [Music] -> Music

-- | Tuplet variants that set location, and then restore to neutral.
tuplet_above :: Tuplet_T -> [Music] -> Music

-- | Tuplet variants that set location, and then restore to neutral.
tuplet_below :: Tuplet_T -> [Music] -> Music

-- | Like tuplet but does not annotate music, see also
--   <a>ts_set_fraction</a>.
scale_durations :: Tuplet_T -> [Music] -> Music

-- | Construct time signature.
time_signature :: Time_Signature -> Music

-- | Allow proper auto-indenting of multiple measures with the same time
--   signature.
with_time_signature :: Time_Signature -> [Music] -> Music

-- | Command to request that <tt>4/4</tt> and <tt>2/2</tt> etc. are typeset
--   as fractions.
ts_use_fractions :: Music

-- | Set the printed time-signature fraction.
ts_set_fraction :: Integer -> Integer -> Music
numeric_time_signature :: Music
ts_parentheses :: Music
ts_stencil :: Bool -> Music
ts_transparent :: Bool -> Music
ts_all_invisible :: Music

-- | Construct key signature.
key :: Music -> Mode_T -> Music

-- | Construct standard (two times) repeat.
std_repeat :: Integer -> [Music] -> Music

-- | Shift the octave of a note element, else identity.
note_edit_octave :: (Octave -> Octave) -> Music -> Music

-- | Shift the octave of a note element, else identity.
note_shift_octave :: Octave -> Music -> Music
tie_r_ann :: [D_Annotation] -> [Annotation]

-- | Rest of <a>Duration_A</a>.
da_rest :: Duration_A -> Music

-- | Add <a>Duration_A</a> to <a>Pitch</a> to make a <tt>Note</tt>
--   <a>Music</a> element.
(##@) :: Pitch -> Duration_A -> Music

-- | Add <a>Duration</a> to <a>Pitch</a> to make a <tt>Note</tt>
--   <a>Music</a> element.
(##) :: Pitch -> Duration -> Music

-- | Add <a>Duration_A</a> to either a <tt>Note</tt> or <tt>Chord</tt>
--   <a>Music</a> element.
(#@) :: Music -> Duration_A -> Music

-- | Add <a>Duration</a> to either a <tt>Note</tt> or <tt>Chord</tt>
--   <a>Music</a> element.
(#) :: Music -> Duration -> Music

-- | Construct chord from <a>Pitch</a> elements.
chd_p_ann :: [Pitch] -> [[Annotation]] -> Duration -> Music

-- | Construct chord from <a>Pitch</a> elements.
chd_p :: [Pitch] -> Duration -> Music

-- | Construct chord from <a>Music</a> elements.
chd :: [Music] -> Duration -> Music

-- | Construct bar number check command.
bar_number_check :: Integer -> Music

-- | Switch bar numbering visibility.
bar_numbering :: Bool -> Music

-- | Change staff (for cross staff notation).
change :: String -> Music

-- | Indicate initial partial measure.
partial :: Duration -> Music

-- | Set or unset the <tt>circled-tip</tt> hairpin attribute.
hairpin_circled_tip :: Bool -> Music

-- | Set or unset the <tt>to-barline</tt> hairpin attribute.
hairpin_to_barline :: Bool -> Music

-- | Set or unset the <tt>minimum-length</tt> hairpin attribute.
hairpin_minimum_length :: Maybe Int -> Music
set_8va_notation :: Music
name_to_id :: Staff_Name -> Staff_ID

-- | Construct staff.
staff :: Staff_Name -> [Music] -> Staff

-- | Construct rhythmic staff.
rhythmic_staff :: Staff_Name -> [Music] -> Staff

-- | Construct staff with text underlay.
text_staff :: Staff_Name -> String -> [Music] -> Staff

-- | Construct piano staff. For two staff piano music the staffs have
--   identifiers rh and lh.
piano_staff :: Staff_Name -> [[Music]] -> Staff
grand_staff :: Staff_Name -> [[Music]] -> Staff
staff_group :: Staff_Name -> [[Music]] -> Staff
rhythmic_grand_staff :: Staff_Name -> [[Music]] -> Staff

-- | Variant with names for each staff.
grand_staff' :: Staff_Name -> [Staff_Name] -> [[Music]] -> Staff
staff_group' :: Staff_Name -> [Staff_Name] -> [[Music]] -> Staff
two_part_staff :: Staff_Name -> ([Music], [Music]) -> Staff
instr_name :: Staff_Name -> Staff -> Staff
resize_staff :: Int -> Staff -> Staff
score :: [Staff] -> Score

-- | Interior polyphony. For two part music on one staff see
--   <a>two_part_staff</a>.
polyphony :: Music -> Music -> Music
polyphony' :: [Music] -> [Music] -> Music

-- | Joins directly adjacent rest elements. Type is adopted from the right
--   when joining.
join_rests :: [Music] -> [Music]

-- | Transform ascribed <a>Duration_A</a> value to <a>Music</a>.
type DA_F x = (Duration_A, x) -> Music

-- | Given <a>DA_F</a> transform, transform set of ascribed
--   <a>Duration_A</a> values to <a>Music</a>.
--   
--   <pre>
--   import Music.Theory.Duration.Sequence.Notate as T
--   import Music.Theory.Duration.RQ.Tied as T
--   import Music.Theory.Pitch.Name as T
--   import Music.LilyPond.Light.Output.LilyPond as L
--   </pre>
--   
--   <pre>
--   let {Right d = T.m_notate True [[(2/3,_f),(1/3,_t)],[(1,_t)],[(1,_f)]]
--       ;jn (i,j) = j ##@ i
--       ;n = T.ascribe d [c4,d4]
--       ;r = "\\times 2/3 { c' 4 d' 8 ~ } d' 4 ~ d' 4"}
--   in L.ly_music_elem (Join (da_to_music jn n)) == r
--   </pre>
da_to_music :: DA_F t -> [(Duration_A, t)] -> [Music]

-- | Variant of <a>da_to_music</a> that operates on sets of measures.
da_to_measures :: DA_F x -> Maybe [Time_Signature] -> [[(Duration_A, x)]] -> [Measure]

-- | <a>da_to_measures</a> of <a>notate_mm_ascribe</a>.
--   
--   <pre>
--   import Music.Theory.Pitch.Name as T
--   import Music.LilyPond.Light.Output.LilyPond as L
--   </pre>
--   
--   <pre>
--   let {jn (i,j) = j ##@ i
--       ;[Measure _ m] = rq_to_measures jn [] [(3,4)] Nothing [2/3,1/3 + 2] [c4,d4]
--       ;r = "\\times 2/3 { c' 4 d' 8 ~ } d' 2"}
--   in L.ly_music_elem (Join m) == r
--   </pre>
rq_to_measures :: Show x => DA_F x -> [Simplify_T] -> [Time_Signature] -> Maybe [[RQ]] -> [RQ] -> [x] -> [Measure]

-- | Make a fragment (possibly multiple staffs) from <a>Music</a> elements.
--   Width and height are in millimeters.
mk_fragment :: (Double, Double) -> [[Music]] -> Fragment

-- | <a>Measure</a> variant of <a>mk_fragment</a>.
mk_fragment_mm :: (Double, Double) -> [[Measure]] -> Fragment
stem_transparent :: Bool -> Music
text_length_on :: Music
text_outside_staff_priority :: Maybe Double -> Music
text_extra_spacing_width :: (Double, Double) -> Music

-- | Delete redundant (repeated) time signatures.
--   
--   <pre>
--   let mm = [Measure [Time (3,4)] [],Measure [Time (3,4)] []]
--   in mm_delete_redundant_ts mm == [Measure [Time (3,4)] [],Measure [] []]
--   </pre>
mm_delete_redundant_ts :: [Measure] -> [Measure]
default_rehearsal_mark :: Music

module Music.LilyPond.Light.Literal
l :: Music
r :: Duration -> Music
r' :: Time_Signature -> Music

module Music.LilyPond.Light.Annotation

-- | Can a <a>Music</a> element be annotated? <a>Skip</a> and
--   <a>Command</a> do not ordinarily allow annotations, though there are
--   some cases...
allows_annotations :: Music -> Bool

-- | Attempt to add a set of <a>Annotation</a> to a <a>Music</a> element.
add_annotations :: [Annotation] -> Music -> Maybe Music

-- | Erroring variant.
add_annotations_err :: [Annotation] -> Music -> Music

-- | Unary form.
add_annotation :: Annotation -> Music -> Maybe Music

-- | Erroring variant.
add_annotation_err :: Annotation -> Music -> Music

-- | Infix form of <a>add_annotation_err</a>.
(&) :: Music -> Annotation -> Music

-- | Add an <a>Annotation</a> to a <a>Pitch</a>.
(&#) :: Pitch -> Annotation -> Music

-- | Add an <a>Annotation</a> to a <a>Music</a> element.
perhaps_annotate :: Annotation -> Music -> Music
bracket_annotation_fn :: (Annotation -> Music -> Music) -> (Annotation, Annotation) -> [Music] -> [Music]
bracket_annotation :: (Annotation, Annotation) -> [Music] -> [Music]
bracket_annotation' :: (Annotation, Annotation) -> [Music] -> [Music]
beam' :: [Music] -> [Music]

-- | Manual beaming.
beam :: [Music] -> Music
slur' :: [Music] -> [Music]
slur :: [Music] -> Music
phrasing_slur' :: [Music] -> [Music]
phrasing_slur :: [Music] -> Music
text_above :: String -> Annotation
text_mark :: String -> Annotation
text_below :: String -> Annotation
text_above_fmt :: String -> Annotation
text_mark_fmt :: String -> Annotation
text_below_fmt :: String -> Annotation
arco :: Annotation
pizz :: Annotation
place_above :: Annotation -> Annotation
place_below :: Annotation -> Annotation

-- | Add an <a>Annotation</a> to a <tt>Note</tt> <a>Music</a> element, else
--   identity.
note_annotate :: Annotation -> Music -> Music

-- | Annotate the first note/chord element.
initial_note_chord_annotate :: Annotation -> [Music] -> [Music]
allows_indirect_annotation :: Music -> Bool
indirect_annotation :: Annotation -> Music -> Music
attach_indirect_annotation :: Annotation -> [Music] -> [Music]

-- | Add reminder accidental to note.
r_acc :: Music -> Music

-- | Add cautionary accidental to note.
c_acc :: Music -> Music

-- | Predicate composition.
p_cmp :: (t1 -> t2 -> t) -> (t3 -> t1) -> (t3 -> t2) -> t3 -> t

-- | Predicate composition (or).
--   
--   <pre>
--   p_or even odd 1 == True
--   </pre>
p_or :: (t -> Bool) -> (t -> Bool) -> t -> Bool

-- | Predicate composition (and).
--   
--   <pre>
--   p_and even odd 1 == False
--   </pre>
p_and :: (t -> Bool) -> (t -> Bool) -> t -> Bool

-- | Variant of <a>span</a> that further spans the reverse of the right
--   hand side.
--   
--   <pre>
--   span_r (&lt; 0) [-1,-2,1,2,3,-3,-4] == ([-1,-2],[1,2,3],[-3,-4])
--   </pre>
span_r :: (a -> Bool) -> [a] -> ([a], [a], [a])

-- | Beam if at least two elements.
perhaps_beam :: [Music] -> [Music]

-- | Beam interior notes/chords (ie. skip exterior non-note/non-chords).
beam_notes :: [Music] -> Music
set_subdivide_beams :: Integer -> Music

module Music.LilyPond.Light

module Music.LilyPond.Light.Analysis

-- | Apply a function to all elements and collect results in a list.
traverse :: (Music -> a) -> Music -> [a]

-- | Collect all elements of a given type.
collect_entries :: (Music -> Bool) -> Music -> [Music]
count_entries :: (Music -> Bool) -> Music -> Integer
count_notes :: Music -> Integer
count_chords :: Music -> Integer
count_ts :: Music -> Integer

-- | Does music element contain one or more pitches?
has_pitch :: Music -> Bool

-- | Collect pitches from a note or chord or join of such.
collect_pitches_no_grace :: Music -> [Pitch]

-- | Collect pitches from a note, chord, or grace note.
collect_pitches :: Music -> [Pitch]

-- | Collect note sequence, filters tied notes.
note_seq :: Music -> [Music]
freq_anal_by :: Ord a => (a -> a -> Ordering) -> [a] -> [(Int, a)]
freq_anal :: Ord a => [a] -> [(Int, a)]
type Time_Signature_Map = [(Measure, Time_Signature)]
type Tempo_Marking_Map = [(Measure, Tempo_Marking)]
type Temporal_Map = (Time_Signature_Map, Tempo_Marking_Map)
temporal_map :: [Music] -> Temporal_Map

-- | Return duration (in seconds) and pulse counts for n measures.
mm_durations :: Temporal_Map -> Integer -> [(Rational, Integer)]
integrate :: Num a => [a] -> [a]

-- | Return start time and duration (in seconds) and pulse counts for i
--   measures.
mm_start_times :: Temporal_Map -> Integer -> [(Rational, Rational, Integer)]
location_to_rt :: [(Rational, Rational, Integer)] -> Location -> Rational
locate_rt :: [Music] -> [(Rational, Music)]
data Locate_Mode
LM_Normal :: Locate_Mode
LM_In_Tuplet :: Locate_Mode
type Measure = Integer
type Pulse = Rational
type Part_ID = Integer

-- | Data type representing the location of a musical element.
data Location
Location :: Measure -> Pulse -> Part_ID -> Locate_Mode -> Location
measure :: Location -> Measure
pulse :: Location -> Pulse
part :: Location -> Part_ID
mode :: Location -> Locate_Mode

-- | Convert a location to normal form under given time signature.
location_nf :: Time_Signature -> Location -> Location

-- | Type to thread state through location calculations.
type Locate_ST = (Time_Signature, Location)

-- | Update state part number.
st_set_part :: Locate_ST -> Part_ID -> Locate_ST

-- | Update state part number.
st_set_mode :: Locate_ST -> Locate_Mode -> Locate_ST

-- | Step location state by duration.
location_step :: Locate_ST -> Duration -> Locate_ST

-- | Located music
type LM = (Location, Music)

-- | Located value
type LV a = (Location, a)

-- | State threading form of location calculations. Currently, nested
--   polyphonic parts generate duplicate IDs (?)
locate_st :: Locate_ST -> Music -> (Locate_ST, [LM])

-- | Run location calculations.
locate :: Music -> [LM]
locate' :: [Music] -> [LM]

-- | Extract list of part identifiers.
lv_located_parts :: [LV a] -> [Part_ID]
lv_group_parts :: [LV a] -> [[LV a]]

-- | Drop <tt>n</tt> measures.
lv_from_measure :: Integer -> [LV a] -> [LV a]
lv_group_measures :: [LV a] -> [[LV a]]
lv_extract_part :: Part_ID -> [LV a] -> [LV a]
lv_extract_measure :: Measure -> [LV a] -> [LV a]
lm_pitches :: [LM] -> [Pitch]
lm_pcset :: [LM] -> [PitchClass]
lm_pitches_per_measure :: [LM] -> [[Pitch]]
lm_pcset_per_measure :: [LM] -> [[PitchClass]]
unlocate_p :: Music -> Bool
normal_mode_p :: Location -> Bool
lm_unlocate :: [LM] -> [Music]
location_time :: Location -> (Measure, Pulse)
lv_sort :: [LV a] -> [LV a]
located_pitches :: [[Music]] -> [(Location, [Pitch])]
measure_diff :: Location -> Location -> Integer
lv_last_measure :: [LV a] -> Measure
time_unpack :: Music -> Time_Signature

-- | Time signature structure of music.
ts_structure :: Music -> [[(Time_Signature, Integer)]]
ts_structure' :: [Music] -> [[(Time_Signature, Integer)]]
structure_unfold' :: Integral i => [(a, i)] -> [a]
structure_unfold :: Integral i => [(a, i)] -> [Maybe a]
lm_ts_map :: [LM] -> Time_Signature_Map
ts_map :: [Music] -> Time_Signature_Map

-- | Keys are in ascending order, the value retrieved is the that with the
--   greatest key less than or equal to the key requested.
map_lookup :: Ord i => [(i, a)] -> i -> a
ts_lookup :: [(Measure, Time_Signature)] -> Measure -> Time_Signature
lm_tempo_map :: [LM] -> [(Measure, Tempo_Marking)]
tempo_map :: [Music] -> [(Measure, Tempo_Marking)]
tempo_lookup :: [(Measure, Tempo_Marking)] -> Measure -> Tempo_Marking
kv_group_by :: Ord c => (a -> c) -> [(a, b)] -> [[(a, b)]]
kv_collate :: Ord k => (a -> k) -> (a -> v) -> [a] -> [(k, [v])]
kv_collate' :: Ord k => [(k, v)] -> [(k, [v])]

-- | Filter with predicates at key and value.
kv_filter :: (k -> Bool) -> (v -> Bool) -> [(k, v)] -> [(k, v)]

-- | Apply functions to keys and values.
kv_map :: (k -> k') -> (v -> v') -> [(k, v)] -> [(k', v')]
measure_collate :: (Music -> Bool) -> Music -> [[(Integer, [Music])]]
collation_unfold :: [(Integer, a)] -> [Maybe a]
type ST_r st = (st, Music)
type ST_f st = st -> Music -> ST_r st
transform_st :: ST_f st -> st -> Music -> ST_r st
transform :: (Music -> Music) -> Music -> Music
write_out_repeats :: Music -> Music

-- | Replace the pitch of note element n1 with that of n0.
note_replace_pitch :: Pitch -> Music -> Music
note_replace_pitch_m :: Music -> Music -> Music
replace_notes_fn :: (a -> Pitch) -> [a] -> Music -> ([a], Music)

-- | Replaces notes with indicated pitches, rhythms and annotations are not
--   replaced. Tied notes do not use multiple pitches from the input
--   sequence.
replace_notes_p :: [Pitch] -> Music -> Music
replace_notes :: [Music] -> Music -> Music
insert_after_notes_fn :: [Maybe Music] -> Music -> ([Maybe Music], Music)

-- | Inserts a value after each note as indicated.
insert_after_notes :: [Maybe Music] -> Music -> Music
discard_tied_notes_pr :: (a -> Bool) -> (a -> Bool) -> [a] -> [a]
discard_tied_notes :: [Music] -> [Music]
lm_discard_tied_notes :: [LM] -> [LM]
spell_ks :: (Octave, PitchClass) -> Music
spell_sharp :: (Octave, PitchClass) -> Music
spell_flat :: (Octave, PitchClass) -> Music
v_assert :: String -> (Music -> Bool) -> Music -> Maybe String

-- | Notes in chords must not have duration.
v_chord_note_valid :: Music -> Maybe String
validate :: Music -> [String]
instance Show Locate_Mode
instance Eq Locate_Mode
instance Ord Locate_Mode
instance Show Location
instance Eq Location
instance Ord Location
