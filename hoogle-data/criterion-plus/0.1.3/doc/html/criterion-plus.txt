-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Enhancement of the "criterion" benchmarking library
--   
--   A dome library over "criterion", which enhances it with the following
--   features:
--   
--   <ul>
--   <li>Support for partial measuring, e.g., exclusion of the
--   setup/teardown phases.</li>
--   <li>Generation of multiple unrelated comparison reports.</li>
--   <li>A flexible monadic API, which allows you to benchmark monad
--   transformers and control which parts you actually want measured.</li>
--   </ul>
@package criterion-plus
@version 0.1.3


-- | Using this library you can create executables with benchmarks. It
--   automatically implants a command-line options parser and info
--   generator.
--   
--   Here is an example of how this library is supposed to be used:
--   
--   <pre>
--   import CriterionPlus
--   import qualified SomeMySQLLib as MySQL
--   import qualified SomePostgreSQLLib as PostgreSQL
--   
--   main = 
--     benchmark $ do
--       standoff "Inserting rows" $ do
--         subject "MySQL" $ do
--           -- Exclude the "setup" phase from measurement:
--           pause
--           connection &lt;- liftIO $ MySQL.openConnection
--           -- Measure what we want:
--           continue
--           liftIO $ MySQL.insertAThousandRows connection
--           -- Exclude the "teardown" phase from measurement:
--           pause
--           liftIO $ MySQL.closeConnection connection
--         subject "PostgreSQL" $ do
--           -- This is how we can exclude the "setup" phase from monad transformers:
--           pause
--           PostgreSQL.runSession $ do
--             lift $ continue
--             PostgreSQL.insertAThousandRows
--             -- Exclude "teardown":
--             lift $ pause
--       -- Each standoff generates an independent report file:
--       standoff "Querying" $ do
--         subject "MySQL" $ error "So on..."
--         subject "PostgreSQL" $ error "So on..."
--   </pre>
module CriterionPlus

-- | Parse the command line options and run the benchmark.
benchmark :: Benchmark () -> IO ()

-- | A root of the "criterion-plus" monad stack.
--   
--   Use this monad to declare <a>standoff</a>s. You can also lift a shared
--   initialization into it using <a>liftIO</a>.
data Benchmark a

-- | Declare a named comparison of multiple subjects. This will generate a
--   separate report file.
standoff :: Name -> Standoff () -> Benchmark ()

-- | A monad for declaration of independent comparison, which will produce
--   a dedicated report file.
--   
--   Use this monad to <a>group</a> and declare <a>subject</a>s. You can
--   also lift a shared initialization into it using <a>liftIO</a>.
data Standoff a

-- | Put the wrapped computations into a named group. Can be nested.
group :: Name -> Standoff () -> Standoff ()

-- | Execute a named subject.
subject :: Name -> Subject a -> Standoff ()

-- | A monad, which wraps the benchmarking subject and controls its
--   measurement.
data Subject a

-- | Continue the timer.
--   
--   By default it is already running, so if you need to eclude something
--   from the beginning of the subject use <a>pause</a>. E.g.:
--   
--   <pre>
--   subject "MySQL" $ do
--     pause
--     connection &lt;- liftIO $ openConnection
--     continue
--     liftIO $ workWithConnection connection
--     pause
--     liftIO $ closeConnection connection
--   </pre>
continue :: Subject ()

-- | Pause the timer.
pause :: Subject ()

-- | An adaptation of <tt>Criterion.Types.<a>whnf</a></tt>.
whnf :: MonadIO m => (a -> b) -> a -> m ()

-- | An adaptation of <tt>Criterion.Types.<a>nf</a></tt>.
nf :: (MonadIO m, NFData b) => (a -> b) -> a -> m ()

-- | An adaptation of <tt>Criterion.Types.<a>nfIO</a></tt>.
nfIO :: (MonadIO m, NFData a) => IO a -> m ()

-- | An adaptation of <tt>Criterion.Types.<a>whnfIO</a></tt>.
whnfIO :: MonadIO m => IO a -> m ()
type Name = StrictText
