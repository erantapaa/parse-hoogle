-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | General purpose LLVM bindings
--   
@package llvm-general
@version 3.4.5.3


-- | This module provides an enumeration of the various transformation
--   (e.g. optimization) passes provided by LLVM. They can be used to
--   create a <a>PassManager</a> to, in turn, run the passes on
--   <a>Module</a>s. If you don't know what passes you want, consider
--   instead using <a>CuratedPassSetSpec</a>.
module LLVM.General.Transforms

-- | <a>http://llvm.org/docs/Passes.html#transform-passes</a> A few passes
--   can make use of information in a <a>TargetMachine</a> if one is
--   provided to <a>createPassManager</a>.
--   <a>http://llvm.org/doxygen/classllvm_1_1Pass.html</a>
data Pass
AggressiveDeadCodeElimination :: Pass
BreakCriticalEdges :: Pass

-- | can use a <a>TargetMachine</a>
CodeGenPrepare :: Pass
ConstantPropagation :: Pass
CorrelatedValuePropagation :: Pass
DeadCodeElimination :: Pass
DeadInstructionElimination :: Pass
DeadStoreElimination :: Pass
DemoteRegisterToMemory :: Pass
EarlyCommonSubexpressionElimination :: Pass
GlobalValueNumbering :: Bool -> Pass
noLoads :: Pass -> Bool
InductionVariableSimplify :: Pass
InstructionCombining :: Pass
JumpThreading :: Pass
LoopClosedSingleStaticAssignment :: Pass
LoopInvariantCodeMotion :: Pass
LoopDeletion :: Pass
LoopIdiom :: Pass
LoopInstructionSimplify :: Pass
LoopRotate :: Pass
LoopStrengthReduce :: Pass
LoopUnroll :: Maybe Word -> Maybe Word -> Maybe Bool -> Pass
loopUnrollThreshold :: Pass -> Maybe Word
count :: Pass -> Maybe Word
allowPartial :: Pass -> Maybe Bool
LoopUnswitch :: Bool -> Pass
optimizeForSize :: Pass -> Bool
LowerAtomic :: Pass

-- | can use a <a>TargetMachine</a>
LowerInvoke :: Bool -> Pass
useExpensiveExceptionHandlingSupport :: Pass -> Bool
LowerSwitch :: Pass
LowerExpectIntrinsic :: Pass
MemcpyOptimization :: Pass
PromoteMemoryToRegister :: Pass
Reassociate :: Pass
ScalarReplacementOfAggregates :: Bool -> Pass
requiresDominatorTree :: Pass -> Bool
OldScalarReplacementOfAggregates :: Maybe Word -> Bool -> Maybe Word -> Maybe Word -> Maybe Word -> Pass
oldScalarReplacementOfAggregatesThreshold :: Pass -> Maybe Word
useDominatorTree :: Pass -> Bool
structMemberThreshold :: Pass -> Maybe Word
arrayElementThreshold :: Pass -> Maybe Word
scalarLoadThreshold :: Pass -> Maybe Word
SparseConditionalConstantPropagation :: Pass
SimplifyLibCalls :: Pass
SimplifyControlFlowGraph :: Pass
Sinking :: Pass
TailCallElimination :: Pass
AlwaysInline :: Bool -> Pass
insertLifetime :: Pass -> Bool
ArgumentPromotion :: Pass
ConstantMerge :: Pass
FunctionAttributes :: Pass
FunctionInlining :: Word -> Pass
functionInliningThreshold :: Pass -> Word
GlobalDeadCodeElimination :: Pass
InternalizeFunctions :: [String] -> Pass
exportList :: Pass -> [String]
InterproceduralConstantPropagation :: Pass
InterproceduralSparseConditionalConstantPropagation :: Pass
MergeFunctions :: Pass
PartialInlining :: Pass
PruneExceptionHandling :: Pass
StripDeadDebugInfo :: Pass
StripDebugDeclare :: Pass
StripNonDebugSymbols :: Pass
StripSymbols :: Bool -> Pass
onlyDebugInfo :: Pass -> Bool
BasicBlockVectorize :: Word -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Word -> Word -> Word -> Bool -> Word -> Word -> Bool -> Bool -> Bool -> Pass
vectorBits :: Pass -> Word
vectorizeBools :: Pass -> Bool
vectorizeInts :: Pass -> Bool
vectorizeFloats :: Pass -> Bool
vectorizePointers :: Pass -> Bool
vectorizeCasts :: Pass -> Bool
vectorizeMath :: Pass -> Bool
vectorizeFusedMultiplyAdd :: Pass -> Bool
vectorizeSelect :: Pass -> Bool
vectorizeCmp :: Pass -> Bool
vectorizeGetElementPtr :: Pass -> Bool
vectorizeMemoryOperations :: Pass -> Bool
alignedOnly :: Pass -> Bool
requiredChainDepth :: Pass -> Word
searchLimit :: Pass -> Word
maxCandidatePairsForCycleCheck :: Pass -> Word
splatBreaksChain :: Pass -> Bool
maxInstructions :: Pass -> Word
maxIterations :: Pass -> Word
powerOfTwoLengthsOnly :: Pass -> Bool
noMemoryOperationBoost :: Pass -> Bool
fastDependencyAnalysis :: Pass -> Bool
LoopVectorize :: Bool -> Pass
noUnrolling :: Pass -> Bool
SuperwordLevelParallelismVectorize :: Pass
GCOVProfiler :: Bool -> Bool -> GCOVVersion -> Bool -> Bool -> Bool -> Pass
emitNotes :: Pass -> Bool
emitData :: Pass -> Bool
version :: Pass -> GCOVVersion
useCfgChecksum :: Pass -> Bool
noRedZone :: Pass -> Bool
functionNamesInData :: Pass -> Bool
AddressSanitizer :: Bool -> Bool -> Bool -> Maybe FilePath -> Bool -> Pass
checkInitOrder :: Pass -> Bool
checkUseAfterReturn :: Pass -> Bool
checkLifetime :: Pass -> Bool
blackListFile :: Pass -> Maybe FilePath
zeroBaseShadow :: Pass -> Bool
AddressSanitizerModule :: Bool -> Maybe FilePath -> Bool -> Pass
checkInitOrder :: Pass -> Bool
blackListFile :: Pass -> Maybe FilePath
zeroBaseShadow :: Pass -> Bool
MemorySanitizer :: Bool -> Maybe FilePath -> Pass
trackOrigins :: Pass -> Bool
blackListFile :: Pass -> Maybe FilePath
ThreadSanitizer :: Maybe FilePath -> Pass
blackListFile :: Pass -> Maybe FilePath
BoundsChecking :: Pass
DebugGeneratedIR :: Bool -> Bool -> Maybe FilePath -> Maybe FilePath -> Pass
hideDebugIntrinsics :: Pass -> Bool
hideDebugMetadata :: Pass -> Bool
fileName :: Pass -> Maybe FilePath
directory :: Pass -> Maybe FilePath
DebugExistingIR :: Pass

-- | Defaults for the <a>LoopVectorize</a> pass
defaultLoopVectorize :: Pass

-- | Defaults for the <a>BasicBlockVectorize</a> pass - copied from the C++
--   code to keep these defaults constant. (The C++ defaults are modifiable
--   through global objects used for command-line processing, in a design
--   apparently oblivious to uses of LLVM besides the standard command-line
--   tools).
defaultVectorizeBasicBlocks :: Pass

-- | See
--   <a>http://gcc.gnu.org/viewcvs/gcc/trunk/gcc/gcov-io.h?view=markup</a>.
newtype GCOVVersion
GCOVVersion :: String -> GCOVVersion

-- | Defaults for <a>GCOVProfiler</a>.
defaultGCOVProfiler :: Pass

-- | Defaults for <a>AddressSanitizer</a>.
defaultAddressSanitizer :: Pass

-- | Defaults for <a>AddressSanitizerModule</a>.
defaultAddressSanitizerModule :: Pass

-- | Defaults for <a>MemorySanitizer</a>.
defaultMemorySanitizer :: Pass

-- | Defaults for <a>ThreadSanitizer</a>.
defaultThreadSanitizer :: Pass

-- | Defaults for <a>DebugGeneratedIR</a>.
defaultDebugGeneratedIR :: Pass
instance Typeable GCOVVersion
instance Typeable Pass
instance Eq GCOVVersion
instance Ord GCOVVersion
instance Read GCOVVersion
instance Show GCOVVersion
instance Data GCOVVersion
instance Eq Pass
instance Ord Pass
instance Read Pass
instance Show Pass
instance Data Pass


-- | functionality necessary when running LLVM in multiple threads at the
--   same time.
module LLVM.General.Threading

-- | Set the multithreading mode of LLVM. If it is disabled (as by default)
--   locks are not enforced.
setMultithreaded :: Bool -> IO ()

-- | Check if multithreading is enabled in LLVM
isMultithreaded :: IO Bool


-- | <a>http://llvm.org/doxygen/classllvm_1_1TargetOptions.html</a>
module LLVM.General.Target.Options

-- | 
--   <a>http://llvm.org/doxygen/namespacellvm_1_1FloatABI.html#aea077c52d84934aabf9445cef9eab2e2</a>
data FloatABI
FloatABIDefault :: FloatABI
FloatABISoft :: FloatABI
FloatABIHard :: FloatABI

-- | 
--   <a>http://llvm.org/doxygen/namespacellvm_1_1FPOpFusion.html#a9c71bae9f02af273833fde586d529fc5</a>
data FloatingPointOperationFusionMode
FloatingPointOperationFusionFast :: FloatingPointOperationFusionMode
FloatingPointOperationFusionStandard :: FloatingPointOperationFusionMode
FloatingPointOperationFusionStrict :: FloatingPointOperationFusionMode

-- | The options of a <a>TargetOptions</a>
--   <a>http://llvm.org/doxygen/classllvm_1_1TargetOptions.html</a>
data Options
Options :: Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Word32 -> String -> FloatABI -> FloatingPointOperationFusionMode -> Options
printMachineCode :: Options -> Bool
noFramePointerElimination :: Options -> Bool
lessPreciseFloatingPointMultiplyAddOption :: Options -> Bool
unsafeFloatingPointMath :: Options -> Bool
noInfinitiesFloatingPointMath :: Options -> Bool
noNaNsFloatingPointMath :: Options -> Bool
honorSignDependentRoundingFloatingPointMathOption :: Options -> Bool
useSoftFloat :: Options -> Bool
noZerosInBSS :: Options -> Bool
jITEmitDebugInfo :: Options -> Bool
jITEmitDebugInfoToDisk :: Options -> Bool
guaranteedTailCallOptimization :: Options -> Bool
disableTailCalls :: Options -> Bool
enableFastInstructionSelection :: Options -> Bool
positionIndependentExecutable :: Options -> Bool
enableSegmentedStacks :: Options -> Bool
useInitArray :: Options -> Bool
stackAlignmentOverride :: Options -> Word32
trapFunctionName :: Options -> String
floatABIType :: Options -> FloatABI
allowFloatingPointOperationFusion :: Options -> FloatingPointOperationFusionMode
instance Typeable FloatABI
instance Typeable FloatingPointOperationFusionMode
instance Eq FloatABI
instance Ord FloatABI
instance Read FloatABI
instance Show FloatABI
instance Enum FloatABI
instance Bounded FloatABI
instance Data FloatABI
instance Eq FloatingPointOperationFusionMode
instance Ord FloatingPointOperationFusionMode
instance Read FloatingPointOperationFusionMode
instance Show FloatingPointOperationFusionMode
instance Enum FloatingPointOperationFusionMode
instance Bounded FloatingPointOperationFusionMode
instance Data FloatingPointOperationFusionMode
instance Eq Options
instance Ord Options
instance Read Options
instance Show Options


-- | A <a>LibraryFunction</a> identifies a function of which LLVM has
--   particular knowledge.
module LLVM.General.Target.LibraryFunction

-- | 
--   <a>http://llvm.org/doxygen/namespacellvm_1_1LibFunc.html#abf8f6830387f338fed0bce2e65108c6f</a>
data LibraryFunction
LF__under_IO_getc :: LibraryFunction
LF__under_IO_putc :: LibraryFunction
LF__ZdaPv :: LibraryFunction
LF__ZdaPvRKSt9nothrow_t :: LibraryFunction
LF__ZdlPv :: LibraryFunction
LF__ZdlPvRKSt9nothrow_t :: LibraryFunction
LF__Znaj :: LibraryFunction
LF__ZnajRKSt9nothrow_t :: LibraryFunction
LF__Znam :: LibraryFunction
LF__ZnamRKSt9nothrow_t :: LibraryFunction
LF__Znwj :: LibraryFunction
LF__ZnwjRKSt9nothrow_t :: LibraryFunction
LF__Znwm :: LibraryFunction
LF__ZnwmRKSt9nothrow_t :: LibraryFunction
LF__cospi :: LibraryFunction
LF__cospif :: LibraryFunction
LF__cxa_atexit :: LibraryFunction
LF__cxa_guard_abort :: LibraryFunction
LF__cxa_guard_acquire :: LibraryFunction
LF__cxa_guard_release :: LibraryFunction
LF__dunder_isoc99_scanf :: LibraryFunction
LF__dunder_isoc99_sscanf :: LibraryFunction
LF__memcpy_chk :: LibraryFunction
LF__sincospi_stret :: LibraryFunction
LF__sincospi_stretf :: LibraryFunction
LF__sinpi :: LibraryFunction
LF__sinpif :: LibraryFunction
LF__sqrt_finite :: LibraryFunction
LF__sqrtf_finite :: LibraryFunction
LF__sqrtl_finite :: LibraryFunction
LF__dunder_strdup :: LibraryFunction
LF__dunder_strndup :: LibraryFunction
LF__dunder_strtok_r :: LibraryFunction
LF__abs :: LibraryFunction
LF__access :: LibraryFunction
LF__acos :: LibraryFunction
LF__acosf :: LibraryFunction
LF__acosh :: LibraryFunction
LF__acoshf :: LibraryFunction
LF__acoshl :: LibraryFunction
LF__acosl :: LibraryFunction
LF__asin :: LibraryFunction
LF__asinf :: LibraryFunction
LF__asinh :: LibraryFunction
LF__asinhf :: LibraryFunction
LF__asinhl :: LibraryFunction
LF__asinl :: LibraryFunction
LF__atan :: LibraryFunction
LF__atan2 :: LibraryFunction
LF__atan2f :: LibraryFunction
LF__atan2l :: LibraryFunction
LF__atanf :: LibraryFunction
LF__atanh :: LibraryFunction
LF__atanhf :: LibraryFunction
LF__atanhl :: LibraryFunction
LF__atanl :: LibraryFunction
LF__atof :: LibraryFunction
LF__atoi :: LibraryFunction
LF__atol :: LibraryFunction
LF__atoll :: LibraryFunction
LF__bcmp :: LibraryFunction
LF__bcopy :: LibraryFunction
LF__bzero :: LibraryFunction
LF__calloc :: LibraryFunction
LF__cbrt :: LibraryFunction
LF__cbrtf :: LibraryFunction
LF__cbrtl :: LibraryFunction
LF__ceil :: LibraryFunction
LF__ceilf :: LibraryFunction
LF__ceill :: LibraryFunction
LF__chmod :: LibraryFunction
LF__chown :: LibraryFunction
LF__clearerr :: LibraryFunction
LF__closedir :: LibraryFunction
LF__copysign :: LibraryFunction
LF__copysignf :: LibraryFunction
LF__copysignl :: LibraryFunction
LF__cos :: LibraryFunction
LF__cosf :: LibraryFunction
LF__cosh :: LibraryFunction
LF__coshf :: LibraryFunction
LF__coshl :: LibraryFunction
LF__cosl :: LibraryFunction
LF__ctermid :: LibraryFunction
LF__exp :: LibraryFunction
LF__exp10 :: LibraryFunction
LF__exp10f :: LibraryFunction
LF__exp10l :: LibraryFunction
LF__exp2 :: LibraryFunction
LF__exp2f :: LibraryFunction
LF__exp2l :: LibraryFunction
LF__expf :: LibraryFunction
LF__expl :: LibraryFunction
LF__expm1 :: LibraryFunction
LF__expm1f :: LibraryFunction
LF__expm1l :: LibraryFunction
LF__fabs :: LibraryFunction
LF__fabsf :: LibraryFunction
LF__fabsl :: LibraryFunction
LF__fclose :: LibraryFunction
LF__fdopen :: LibraryFunction
LF__feof :: LibraryFunction
LF__ferror :: LibraryFunction
LF__fflush :: LibraryFunction
LF__ffs :: LibraryFunction
LF__ffsl :: LibraryFunction
LF__ffsll :: LibraryFunction
LF__fgetc :: LibraryFunction
LF__fgetpos :: LibraryFunction
LF__fgets :: LibraryFunction
LF__fileno :: LibraryFunction
LF__fiprintf :: LibraryFunction
LF__flockfile :: LibraryFunction
LF__floor :: LibraryFunction
LF__floorf :: LibraryFunction
LF__floorl :: LibraryFunction
LF__fmod :: LibraryFunction
LF__fmodf :: LibraryFunction
LF__fmodl :: LibraryFunction
LF__fopen :: LibraryFunction
LF__fopen64 :: LibraryFunction
LF__fprintf :: LibraryFunction
LF__fputc :: LibraryFunction
LF__fputs :: LibraryFunction
LF__fread :: LibraryFunction
LF__free :: LibraryFunction
LF__frexp :: LibraryFunction
LF__frexpf :: LibraryFunction
LF__frexpl :: LibraryFunction
LF__fscanf :: LibraryFunction
LF__fseek :: LibraryFunction
LF__fseeko :: LibraryFunction
LF__fseeko64 :: LibraryFunction
LF__fsetpos :: LibraryFunction
LF__fstat :: LibraryFunction
LF__fstat64 :: LibraryFunction
LF__fstatvfs :: LibraryFunction
LF__fstatvfs64 :: LibraryFunction
LF__ftell :: LibraryFunction
LF__ftello :: LibraryFunction
LF__ftello64 :: LibraryFunction
LF__ftrylockfile :: LibraryFunction
LF__funlockfile :: LibraryFunction
LF__fwrite :: LibraryFunction
LF__getc :: LibraryFunction
LF__getc_unlocked :: LibraryFunction
LF__getchar :: LibraryFunction
LF__getenv :: LibraryFunction
LF__getitimer :: LibraryFunction
LF__getlogin_r :: LibraryFunction
LF__getpwnam :: LibraryFunction
LF__gets :: LibraryFunction
LF__gettimeofday :: LibraryFunction
LF__htonl :: LibraryFunction
LF__htons :: LibraryFunction
LF__iprintf :: LibraryFunction
LF__isascii :: LibraryFunction
LF__isdigit :: LibraryFunction
LF__labs :: LibraryFunction
LF__lchown :: LibraryFunction
LF__llabs :: LibraryFunction
LF__log :: LibraryFunction
LF__log10 :: LibraryFunction
LF__log10f :: LibraryFunction
LF__log10l :: LibraryFunction
LF__log1p :: LibraryFunction
LF__log1pf :: LibraryFunction
LF__log1pl :: LibraryFunction
LF__log2 :: LibraryFunction
LF__log2f :: LibraryFunction
LF__log2l :: LibraryFunction
LF__logb :: LibraryFunction
LF__logbf :: LibraryFunction
LF__logbl :: LibraryFunction
LF__logf :: LibraryFunction
LF__logl :: LibraryFunction
LF__lstat :: LibraryFunction
LF__lstat64 :: LibraryFunction
LF__malloc :: LibraryFunction
LF__memalign :: LibraryFunction
LF__memccpy :: LibraryFunction
LF__memchr :: LibraryFunction
LF__memcmp :: LibraryFunction
LF__memcpy :: LibraryFunction
LF__memmove :: LibraryFunction
LF__memrchr :: LibraryFunction
LF__memset :: LibraryFunction
LF__memset_pattern16 :: LibraryFunction
LF__mkdir :: LibraryFunction
LF__mktime :: LibraryFunction
LF__modf :: LibraryFunction
LF__modff :: LibraryFunction
LF__modfl :: LibraryFunction
LF__nearbyint :: LibraryFunction
LF__nearbyintf :: LibraryFunction
LF__nearbyintl :: LibraryFunction
LF__ntohl :: LibraryFunction
LF__ntohs :: LibraryFunction
LF__open :: LibraryFunction
LF__open64 :: LibraryFunction
LF__opendir :: LibraryFunction
LF__pclose :: LibraryFunction
LF__perror :: LibraryFunction
LF__popen :: LibraryFunction
LF__posix_memalign :: LibraryFunction
LF__pow :: LibraryFunction
LF__powf :: LibraryFunction
LF__powl :: LibraryFunction
LF__pread :: LibraryFunction
LF__printf :: LibraryFunction
LF__putc :: LibraryFunction
LF__putchar :: LibraryFunction
LF__puts :: LibraryFunction
LF__pwrite :: LibraryFunction
LF__qsort :: LibraryFunction
LF__read :: LibraryFunction
LF__readlink :: LibraryFunction
LF__realloc :: LibraryFunction
LF__reallocf :: LibraryFunction
LF__realpath :: LibraryFunction
LF__remove :: LibraryFunction
LF__rename :: LibraryFunction
LF__rewind :: LibraryFunction
LF__rint :: LibraryFunction
LF__rintf :: LibraryFunction
LF__rintl :: LibraryFunction
LF__rmdir :: LibraryFunction
LF__round :: LibraryFunction
LF__roundf :: LibraryFunction
LF__roundl :: LibraryFunction
LF__scanf :: LibraryFunction
LF__setbuf :: LibraryFunction
LF__setitimer :: LibraryFunction
LF__setvbuf :: LibraryFunction
LF__sin :: LibraryFunction
LF__sinf :: LibraryFunction
LF__sinh :: LibraryFunction
LF__sinhf :: LibraryFunction
LF__sinhl :: LibraryFunction
LF__sinl :: LibraryFunction
LF__siprintf :: LibraryFunction
LF__snprintf :: LibraryFunction
LF__sprintf :: LibraryFunction
LF__sqrt :: LibraryFunction
LF__sqrtf :: LibraryFunction
LF__sqrtl :: LibraryFunction
LF__sscanf :: LibraryFunction
LF__stat :: LibraryFunction
LF__stat64 :: LibraryFunction
LF__statvfs :: LibraryFunction
LF__statvfs64 :: LibraryFunction
LF__stpcpy :: LibraryFunction
LF__stpncpy :: LibraryFunction
LF__strcasecmp :: LibraryFunction
LF__strcat :: LibraryFunction
LF__strchr :: LibraryFunction
LF__strcmp :: LibraryFunction
LF__strcoll :: LibraryFunction
LF__strcpy :: LibraryFunction
LF__strcspn :: LibraryFunction
LF__strdup :: LibraryFunction
LF__strlen :: LibraryFunction
LF__strncasecmp :: LibraryFunction
LF__strncat :: LibraryFunction
LF__strncmp :: LibraryFunction
LF__strncpy :: LibraryFunction
LF__strndup :: LibraryFunction
LF__strnlen :: LibraryFunction
LF__strpbrk :: LibraryFunction
LF__strrchr :: LibraryFunction
LF__strspn :: LibraryFunction
LF__strstr :: LibraryFunction
LF__strtod :: LibraryFunction
LF__strtof :: LibraryFunction
LF__strtok :: LibraryFunction
LF__strtok_r :: LibraryFunction
LF__strtol :: LibraryFunction
LF__strtold :: LibraryFunction
LF__strtoll :: LibraryFunction
LF__strtoul :: LibraryFunction
LF__strtoull :: LibraryFunction
LF__strxfrm :: LibraryFunction
LF__system :: LibraryFunction
LF__tan :: LibraryFunction
LF__tanf :: LibraryFunction
LF__tanh :: LibraryFunction
LF__tanhf :: LibraryFunction
LF__tanhl :: LibraryFunction
LF__tanl :: LibraryFunction
LF__times :: LibraryFunction
LF__tmpfile :: LibraryFunction
LF__tmpfile64 :: LibraryFunction
LF__toascii :: LibraryFunction
LF__trunc :: LibraryFunction
LF__truncf :: LibraryFunction
LF__truncl :: LibraryFunction
LF__uname :: LibraryFunction
LF__ungetc :: LibraryFunction
LF__unlink :: LibraryFunction
LF__unsetenv :: LibraryFunction
LF__utime :: LibraryFunction
LF__utimes :: LibraryFunction
LF__valloc :: LibraryFunction
LF__vfprintf :: LibraryFunction
LF__vfscanf :: LibraryFunction
LF__vprintf :: LibraryFunction
LF__vscanf :: LibraryFunction
LF__vsnprintf :: LibraryFunction
LF__vsprintf :: LibraryFunction
LF__vsscanf :: LibraryFunction
LF__write :: LibraryFunction


-- | Relocations, used in specifying TargetMachine
module LLVM.General.Relocation

-- | <a>http://llvm.org/doxygen/namespacellvm_1_1Reloc.html</a>
data Model
Default :: Model
Static :: Model
PIC :: Model
DynamicNoPIC :: Model
instance Typeable Model
instance Eq Model
instance Read Model
instance Show Model
instance Data Model


-- | Diagnostics describe parse errors
module LLVM.General.Diagnostic

-- | What kind of problem does a diagnostic describe?
data DiagnosticKind
ErrorKind :: DiagnosticKind
WarningKind :: DiagnosticKind
NoteKind :: DiagnosticKind

-- | A <a>Diagnostic</a> described a problem during parsing of LLVM IR
data Diagnostic
Diagnostic :: Int -> Int -> DiagnosticKind -> String -> String -> String -> Diagnostic
lineNumber :: Diagnostic -> Int
columnNumber :: Diagnostic -> Int
diagnosticKind :: Diagnostic -> DiagnosticKind
filename :: Diagnostic -> String
message :: Diagnostic -> String
lineContents :: Diagnostic -> String

-- | Convert a <a>Diagnostic</a> to a printable form.
diagnosticDisplay :: Diagnostic -> String
instance Typeable DiagnosticKind
instance Eq DiagnosticKind
instance Ord DiagnosticKind
instance Read DiagnosticKind
instance Show DiagnosticKind
instance Data DiagnosticKind
instance Eq Diagnostic
instance Ord Diagnostic
instance Read Diagnostic
instance Show Diagnostic


-- | functions for the LLVM Context object which holds thread-scope state
module LLVM.General.Context

-- | a Context object holds the state the of LLVM system needs for one
--   thread of | LLVM compilation. Once upon a time, in early versions of
--   LLVM, this state was global. | Then it got packed up in this object to
--   allow multiple threads to compile at once.
data Context

-- | Create a Context, run an action (to which it is provided), then
--   destroy the Context.
withContext :: (Context -> IO a) -> IO a


-- | Tools for processing command line arguments, for command line tools
--   build with llvm (or for other uses forced into pretending to be such
--   to get at (ack) global state).
module LLVM.General.CommandLine

-- | 
--   <a>http://llvm.org/doxygen/namespacellvm_1_1cl.html#a992a39dae9eb8d4e54ffee5467902803</a>
--   Sadly, there is occasionally some configuration one would like to
--   control in LLVM which are accessible only as command line flags
--   setting global state, as if the command line tools were the only use
--   of LLVM. Very sad.
parseCommandLineOptions :: [String] -> Maybe String -> IO ()


-- | Relocations, used in specifying TargetMachine
module LLVM.General.CodeModel

-- | <a>http://llvm.org/doxygen/namespacellvm_1_1CodeModel.html</a>
data Model
Default :: Model
JITDefault :: Model
Small :: Model
Kernel :: Model
Medium :: Model
Large :: Model
instance Typeable Model
instance Eq Model
instance Read Model
instance Show Model
instance Data Model


-- | Code generation options, used in specifying TargetMachine
module LLVM.General.CodeGenOpt

-- | <a>http://llvm.org/doxygen/namespacellvm_1_1CodeGenOpt.html</a>
data Level
None :: Level
Less :: Level
Default :: Level
Aggressive :: Level
instance Typeable Level
instance Eq Level
instance Ord Level
instance Read Level
instance Show Level
instance Data Level


-- | Tools for JIT execution
module LLVM.General.ExecutionEngine

-- | <a>http://llvm.org/doxygen/classllvm_1_1ExecutionEngine.html</a>
class ExecutionEngine e f | e -> f
withModuleInEngine :: ExecutionEngine e f => e -> Module -> (ExecutableModule e -> IO a) -> IO a
getFunction :: ExecutionEngine e f => ExecutableModule e -> Name -> IO (Maybe f)

-- | a <a>ExecutableModule</a> e represents a <a>Module</a> which is
--   currently "in" an <a>ExecutionEngine</a>, and so the functions of
--   which may be executed.
data ExecutableModule e

-- | <a>http://llvm.org/doxygen/classllvm_1_1JIT.html</a>
data JIT

-- | bracket the creation and destruction of a <a>JIT</a>
withJIT :: Context -> Word -> (JIT -> IO a) -> IO a

-- | <a>http://llvm.org/doxygen/classllvm_1_1MCJIT.html</a>
--   <a>http://blog.llvm.org/2010/04/intro-to-llvm-mc-project.html</a> N.B.
--   - the LLVM MCJIT does not current support adding multiple modules to
--   any one instance of the MCJIT.
data MCJIT

-- | bracket the creation and destruction of an <a>MCJIT</a>
withMCJIT :: Context -> Maybe Word -> Maybe Model -> Maybe Bool -> Maybe Bool -> (MCJIT -> IO a) -> IO a


-- | A <a>PassManager</a> holds collection of passes, to be run on
--   <tt>Module</tt>s. Build one with <a>withPassManager</a>:
--   
--   <ul>
--   <li>using <a>CuratedPassSetSpec</a> if you want optimization but not
--   to play with your compiler</li>
--   <li>using <a>PassSetSpec</a> if you do want to play with your
--   compiler</li>
--   </ul>
module LLVM.General.PassManager

-- | <a>http://llvm.org/doxygen/classllvm_1_1PassManager.html</a> Note: a
--   PassManager does substantive behind-the-scenes work, arranging for the
--   results of various analyses to be available as needed by transform
--   passes, shared as possible.
data PassManager

-- | There are different ways to get a <a>PassManager</a>. This type
--   embodies them.
data PassSetSpec

-- | a <a>PassSetSpec</a> is a lower-level, detailed specification of a set
--   of passes. It allows fine-grained control of what passes are to be run
--   when, and the specification of passes not available through
--   <a>CuratedPassSetSpec</a>.
PassSetSpec :: [Pass] -> Maybe DataLayout -> Maybe TargetLibraryInfo -> Maybe TargetMachine -> PassSetSpec
transforms :: PassSetSpec -> [Pass]
dataLayout :: PassSetSpec -> Maybe DataLayout
targetLibraryInfo :: PassSetSpec -> Maybe TargetLibraryInfo
targetMachine :: PassSetSpec -> Maybe TargetMachine

-- | This type is a high-level specification of a set of passes. It uses
--   the same collection of passes chosen by the LLVM team in the command
--   line tool <tt>opt</tt>. The fields of this spec are much like typical
--   compiler command-line flags - e.g. -O&lt;n&gt;, etc.
CuratedPassSetSpec :: Maybe Word -> Maybe Word -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Word -> Maybe DataLayout -> Maybe TargetLibraryInfo -> Maybe TargetMachine -> PassSetSpec
optLevel :: PassSetSpec -> Maybe Word
sizeLevel :: PassSetSpec -> Maybe Word
unitAtATime :: PassSetSpec -> Maybe Bool
simplifyLibCalls :: PassSetSpec -> Maybe Bool
loopVectorize :: PassSetSpec -> Maybe Bool
superwordLevelParallelismVectorize :: PassSetSpec -> Maybe Bool
useInlinerWithThreshold :: PassSetSpec -> Maybe Word
dataLayout :: PassSetSpec -> Maybe DataLayout
targetLibraryInfo :: PassSetSpec -> Maybe TargetLibraryInfo
targetMachine :: PassSetSpec -> Maybe TargetMachine

-- | an empty <a>PassSetSpec</a>
defaultPassSetSpec :: PassSetSpec

-- | Helper to make a curated <a>PassSetSpec</a>
defaultCuratedPassSetSpec :: PassSetSpec

-- | bracket the creation of a <a>PassManager</a>
withPassManager :: PassSetSpec -> (PassManager -> IO a) -> IO a

-- | run the passes in a <a>PassManager</a> on a <a>Module</a>, modifying
--   the <a>Module</a>.
runPassManager :: PassManager -> Module -> IO Bool


-- | A <a>Target</a> describes that for which code may be intended. Targets
--   are used both during actual | lowering of LLVM IR to machine code and
--   by some optimization passes which use the target to | judge costs.
module LLVM.General.Target

-- | Find a <a>Target</a> given an architecture and/or a "triple". |
--   <a>http://llvm.org/doxygen/structllvm_1_1TargetRegistry.html#a3105b45e546c9cc3cf78d0f2ec18ad89</a>
--   | Be sure to run either <a>initializeAllTargets</a> or
--   <a>initializeNativeTarget</a> before expecting this to succeed,
--   depending on what target(s) you want to use.
lookupTarget :: Maybe String -> String -> ExceptT String IO (Target, String)

-- | <a>http://llvm.org/doxygen/classllvm_1_1TargetOptions.html</a>
data TargetOptions

-- | <a>http://llvm.org/doxygen/classllvm_1_1Target.html</a>
data Target

-- | <a>http://llvm.org/doxygen/classllvm_1_1TargetMachine.html</a>
data TargetMachine

-- | <a>http://llvm.org/doxygen/classllvm_1_1TargetLowering.html</a>
data TargetLowering

-- | e.g. an instruction set extension
newtype CPUFeature
CPUFeature :: String -> CPUFeature

-- | bracket creation and destruction of a <a>TargetOptions</a> object
withTargetOptions :: (TargetOptions -> IO a) -> IO a

-- | get all target options
peekTargetOptions :: TargetOptions -> IO Options

-- | set all target options
pokeTargetOptions :: Options -> TargetOptions -> IO ()

-- | bracket creation and destruction of a <a>TargetMachine</a>
withTargetMachine :: Target -> String -> String -> Set CPUFeature -> TargetOptions -> Model -> Model -> Level -> (TargetMachine -> IO a) -> IO a

-- | Bracket creation and destruction of a <a>TargetMachine</a> configured
--   for the host
withDefaultTargetMachine :: (TargetMachine -> IO a) -> ExceptT String IO a

-- | get the <a>TargetLowering</a> of a <a>TargetMachine</a>
getTargetLowering :: TargetMachine -> IO TargetLowering

-- | the default target triple that LLVM has been configured to produce
--   code for
getDefaultTargetTriple :: IO String

-- | a target triple suitable for loading code into the current process
getProcessTargetTriple :: IO String

-- | the LLVM name for the host CPU
getHostCPUName :: IO String

-- | a space-separated list of LLVM feature names supported by the host CPU
getHostCPUFeatures :: IO (Set CPUFeature)

-- | <a>DataLayout</a> to use for the given <a>TargetMachine</a>
getTargetMachineDataLayout :: TargetMachine -> IO DataLayout

-- | Initialize the native target. This function is called automatically in
--   these Haskell bindings when creating an <a>ExecutionEngine</a> which
--   will require it, and so it should not be necessary to call it
--   separately.
initializeNativeTarget :: IO ()

-- | Initialize all targets so they can be found by <a>lookupTarget</a>
initializeAllTargets :: IO ()

-- | 
--   <a>http://llvm.org/docs/doxygen/html/classllvm_1_1TargetLibraryInfo.html</a>
data TargetLibraryInfo

-- | Look up a <a>LibraryFunction</a> by its standard name
getLibraryFunction :: TargetLibraryInfo -> String -> IO (Maybe LibraryFunction)

-- | Get a the current name to be emitted for a <a>LibraryFunction</a>
getLibraryFunctionName :: TargetLibraryInfo -> LibraryFunction -> IO String

-- | Set the name of the function on the target platform that corresponds
--   to funcName
setLibraryFunctionAvailableWithName :: TargetLibraryInfo -> LibraryFunction -> String -> IO ()

-- | look up information about the library functions available on a given
--   platform
withTargetLibraryInfo :: String -> (TargetLibraryInfo -> IO a) -> IO a


-- | functionality for analyzing <a>Module</a>s. Much of the analysis
--   possible with LLVM is managed internally, as needed by
--   <tt>Transforms</tt>, and so is not yet exposed here.
module LLVM.General.Analysis

-- | Run basic sanity checks on a <a>Module</a>. Note that the same checks
--   will trigger assertions within LLVM if LLVM was built with them turned
--   on, before this function can be is called.
verify :: Module -> ExceptT String IO ()


-- | A <a>Module</a> holds a C++ LLVM IR module. <a>Module</a>s may be
--   converted to or from strings or Haskell ASTs, or added to an
--   <a>ExecutionEngine</a> and so JIT compiled to get function pointers.
module LLVM.General.Module

-- | <a>http://llvm.org/doxygen/classllvm_1_1Module.html</a>
data Module

-- | A newtype to distinguish strings used for paths from other strings
newtype File
File :: FilePath -> File

-- | Build an LLVM.General.<a>Module</a> from a
--   LLVM.General.AST.<a>Module</a> - i.e. lower an AST from Haskell into
--   C++ objects.
withModuleFromAST :: Context -> Module -> (Module -> IO a) -> ExceptT String IO a

-- | Get an LLVM.General.AST.<a>Module</a> from a
--   LLVM.General.<a>Module</a> - i.e. raise C++ objects into an Haskell
--   AST.
moduleAST :: Module -> IO Module

-- | parse <a>Module</a> from LLVM assembly
withModuleFromLLVMAssembly :: LLVMAssemblyInput s => Context -> s -> (Module -> IO a) -> ExceptT (Either String Diagnostic) IO a

-- | generate LLVM assembly from a <a>Module</a>
moduleLLVMAssembly :: Module -> IO String

-- | write LLVM assembly for a <a>Module</a> to a file
writeLLVMAssemblyToFile :: File -> Module -> ExceptT String IO ()

-- | parse <a>Module</a> from LLVM bitcode
withModuleFromBitcode :: BitcodeInput b => Context -> b -> (Module -> IO a) -> ExceptT String IO a

-- | generate LLVM bitcode from a <a>Module</a>
moduleBitcode :: Module -> IO ByteString

-- | write LLVM bitcode from a <a>Module</a> into a file
writeBitcodeToFile :: File -> Module -> ExceptT String IO ()

-- | produce target-specific assembly as a <a>String</a>
moduleTargetAssembly :: TargetMachine -> Module -> ExceptT String IO String

-- | write target-specific assembly directly into a file
writeTargetAssemblyToFile :: TargetMachine -> File -> Module -> ExceptT String IO ()

-- | produce target-specific object code as a <tt>ByteString</tt>
moduleObject :: TargetMachine -> Module -> ExceptT String IO ByteString

-- | write target-specific object code directly into a file
writeObjectToFile :: TargetMachine -> File -> Module -> ExceptT String IO ()

-- | link LLVM modules - move or copy parts of a source module into a
--   destination module. Note that this operation is not commutative - not
--   only concretely (e.g. the destination module is modified, becoming the
--   result) but abstractly (e.g. unused private globals in the source
--   module do not appear in the result, but similar globals in the
--   destination remain).
linkModules :: Bool -> Module -> Module -> ExceptT String IO ()


-- | An interface to use LLVM in all capacities
module LLVM.General
