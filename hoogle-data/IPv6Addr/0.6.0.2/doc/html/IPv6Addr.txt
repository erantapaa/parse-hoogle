-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Library to deal with IPv6 address text representations.
--   
@package IPv6Addr
@version 0.6.0.2


-- | Dealing with IPv6 address text representations, canonization and
--   manipulations.
module Text.IPv6Addr.Types
data IPv6Addr
IPv6Addr :: Text -> IPv6Addr
data IPv6AddrToken

-- | A four hexadecimal digits group representing a 16-Bit chunk
SixteenBit :: Text -> IPv6AddrToken

-- | An all zeros 16-Bit chunk
AllZeros :: IPv6AddrToken

-- | A separator between 16-Bit chunks
Colon :: IPv6AddrToken

-- | A double-colon stands for a unique compression of many consecutive
--   16-Bit chunks
DoubleColon :: IPv6AddrToken

-- | An embedded IPv4 address as representation of the last 32-Bit
IPv4Addr :: Text -> IPv6AddrToken
instance Eq IPv6AddrToken
instance Show IPv6AddrToken
instance Show IPv6Addr


-- | Dealing with IPv6 address text representations, canonization and
--   manipulations.
module Text.IPv6Addr.Internal
expandTokens :: [IPv6AddrToken] -> [IPv6AddrToken]
macAddr :: Parser (Maybe [IPv6AddrToken])

-- | Tokenize a <a>Text</a> into <a>Just</a> a list of
--   <a>IPv6AddrToken</a>, or <a>Nothing</a>.
maybeIPv6AddrTokens :: Text -> Maybe [IPv6AddrToken]

-- | Rewrites an embedded <a>IPv4Addr</a> into the corresponding list of
--   pure <a>IPv6Addr</a> tokens.
--   
--   <pre>
--   ipv4AddrToIPv6AddrTokens (IPv4Addr "127.0.0.1") == [SixteenBits "7f0",Colon,SixteenBits "1"]
--   </pre>
ipv4AddrToIPv6AddrTokens :: IPv6AddrToken -> [IPv6AddrToken]

-- | Given an arbitrary list of <a>IPv6AddrToken</a>, returns the
--   corresponding <a>Text</a>.
ipv6TokensToText :: [IPv6AddrToken] -> Text
ipv6TokensToIPv6Addr :: [IPv6AddrToken] -> Maybe IPv6Addr

-- | Returns <a>True</a> if a list of <a>IPv6AddrToken</a> constitutes a
--   valid IPv6 Address.
isIPv6Addr :: [IPv6AddrToken] -> Bool

-- | This is the main function which returns <a>Just</a> the list of a
--   tokenized IPv6 address text representation validated against RFC 4291
--   and canonized in conformation with RFC 5952, or <a>Nothing</a>.
maybeTokIPv6Addr :: Text -> Maybe [IPv6AddrToken]

-- | Returns <a>Just</a> the list of tokenized pure IPv6 address, always
--   rewriting an embedded IPv4 address if present.
maybeTokPureIPv6Addr :: Text -> Maybe [IPv6AddrToken]
fromDoubleColon :: [IPv6AddrToken] -> [IPv6AddrToken]

-- | Returns the <a>Text</a> of an IPv6 address.
fromIPv6Addr :: IPv6Addr -> Text
toDoubleColon :: [IPv6AddrToken] -> [IPv6AddrToken]
networkInterfacesIPv6AddrList :: IO [(String, IPv6)]


-- | Dealing with IPv6 address text representations, canonization and
--   manipulations.
module Text.IPv6Addr.Manip

-- | Returns <a>Just</a> a random <a>SixteenBit</a> token based on a mask
--   "____", each underscore being replaced by a random hexadecimal digit.
--   
--   <pre>
--   randIPv6AddrChunk "_f__" == Just (SixteenBit "bfd4")
--   </pre>
randIPv6AddrChunk :: String -> IO IPv6AddrToken

-- | Generates a random partial <a>IPv6Addr</a> with n <a>SixteenBit</a>
randPartialIPv6Addr :: Int -> IO [IPv6AddrToken]

-- | Given a MAC address, returns the corresponding <a>IPv6AddrToken</a>
--   list, or an empty list.
--   
--   <pre>
--   macAddrToIPv6AddrTokens "fa:1d:58:cc:95:16" == [SixteenBit "fa1d",Colon,SixteenBit "58cc",Colon,SixteenBit "9516"]
--   </pre>
macAddrToIPv6AddrTokens :: Text -> Maybe [IPv6AddrToken]

-- | Given a valid name of a local network interface, returns <a>Just</a>
--   the list of tokens of the interface's IPv6 address, or <a>Nothing</a>.
--   
--   <pre>
--   getTokIPv6AddrOf "eth0" == Just [SixteenBit "fe80",DoubleColon,SixteenBit "fa1d",Colon,SixteenBit "58cc",Colon,SixteenBit "9516"]
--   </pre>
getTokIPv6AddrOf :: String -> IO (Maybe [IPv6AddrToken])

-- | Given a valid name of a local network interface, returns <a>Just</a>
--   the corresponding list of <a>IPv6AddrToken</a> of the interface's MAC
--   Address, or <a>Nothing</a>.
--   
--   <pre>
--   getTokMacAddrOf "eth0" == Just [SixteenBit "fa1d",Colon,SixteenBit "58cc",Colon,SixteenBit "9516"]
--   </pre>
getTokMacAddrOf :: String -> IO (Maybe [IPv6AddrToken])

module Text.IPv6Addr
data IPv6Addr
IPv6Addr :: Text -> IPv6Addr

-- | Returns <a>Just</a> the text representation of a canonized
--   <a>IPv6Addr</a> in conformation with RFC 5952, or <a>Nothing</a>.
--   
--   <pre>
--   maybeIPv6Addr "0:0::FFFF:192.0.2.128" == Just (IPv6Addr "::ffff:192.0.2.128")
--   </pre>
maybeIPv6Addr :: Text -> Maybe IPv6Addr

-- | Returns <a>Just</a> a pure <a>IPv6Addr</a>, or <a>Nothing</a>.
--   
--   <pre>
--   maybePureIPv6Addr "::ffff:192.0.2.128" == Just (IPv6Addr "::ffff:c000:280")
--   </pre>
maybePureIPv6Addr :: Text -> Maybe IPv6Addr

-- | Returns <a>Just</a> a pure and fully expanded <a>IPv6Addr</a>, or
--   <a>Nothing</a>.
--   
--   <pre>
--   maybeFullIPv6Addr "::ffff:192.0.2.128" == Just (IPv6Addr "0000:0000:0000:0000:0000:ffff:c000:0280")
--   </pre>
maybeFullIPv6Addr :: Text -> Maybe IPv6Addr

-- | Returns <a>True</a> if arguments are two textual representations of a
--   same IPv6 address.
sameIPv6Addr :: Text -> Text -> Bool

-- | Returns the <a>Text</a> of an IPv6 address.
fromIPv6Addr :: IPv6Addr -> Text

-- | Given an <tt>IPv6addr</tt>, returns the corresponding <a>IPv6</a>
--   address.
toIPv6 :: IPv6Addr -> IPv6

-- | Given an <a>IPv6Addr</a>, returns the corresponding <a>HostName</a>.
toHostName :: IPv6Addr -> HostName

-- | Returns the reverse lookup domain name corresponding of the given IPv6
--   address (RFC 3596 Section 2.5).
--   
--   <pre>
--   toIP6ARPA (IPv6Addr "4321:0:1:2:3:4:567:89ab") == "b.a.9.8.7.6.5.0.4.0.0.0.3.0.0.0.2.0.0.0.1.0.0.0.0.0.0.0.1.2.3.4.IP6.ARPA."
--   </pre>
toIP6ARPA :: IPv6Addr -> Text

-- | Returns <a>Just</a> the canonized <a>IPv6Addr</a> of the given local
--   network interface, or <a>Nothing</a>.
--   
--   <pre>
--   getIPv6AddrOf "eth0"
--   </pre>
getIPv6AddrOf :: String -> IO (Maybe IPv6Addr)

-- | Returns a random <a>IPv6Addr</a>.
randIPv6Addr :: IO IPv6Addr

-- | Returns a random <a>IPv6Addr</a>, optionally with the given prefix.
--   
--   <pre>
--   randIPv6AddrWithPrefix (Just "4321:0:1:2:3:4")
--   </pre>
randIPv6AddrWithPrefix :: Maybe Text -> IO (Maybe IPv6Addr)
instance Eq IPv6Addr
