-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A simple, sinatra-inspired web framework.
--   
--   Bird is a hack-compatible framework for simple websites.
@package bird
@version 0.0.19

module Bird.Request.QueryStringParser
parseQueryString :: String -> [(String, Maybe String)]

module Bird.Request.UrlencodedFormParser
parseUrlencodedForm :: String -> [(String, Maybe String)]

module Bird.Request
data Request
Request :: RequestMethod -> Path -> [(String, Maybe String)] -> String -> Request
verb :: Request -> RequestMethod
path :: Request -> Path
params :: Request -> [(String, Maybe String)]
rawRequestUri :: Request -> String
data RequestMethod
GET :: RequestMethod
POST :: RequestMethod
PUT :: RequestMethod
DELETE :: RequestMethod
type Path = [String]
instance Show Request
instance Show RequestMethod
instance Default Request

module Bird.Reply
data Reply
Reply :: Int -> Map String String -> String -> Reply
replyStatus :: Reply -> Int
replyHeaders :: Reply -> Map String String
replyBody :: Reply -> String
instance Show Reply
instance Default Reply

module Bird.BirdResponder
type BirdResponder = StateT Reply (ReaderT Request (WriterT [String] IO))

module Bird.Logger

module Bird.Config
type Router = Request -> BirdResponder ()
data BirdConfig
BirdConfig :: String -> (Request -> Router -> IO Reply) -> BirdConfig
staticDir :: BirdConfig -> String
birdLogger :: BirdConfig -> Request -> Router -> IO Reply
instance Default BirdConfig

module Bird.Translator
class BirdReplyTranslator a
fromBirdReply :: BirdReplyTranslator a => Reply -> a
class BirdRequestTranslator a
toBirdRequest :: BirdRequestTranslator a => a -> Request

module Bird.Translator.Hack
fromBirdReply :: BirdReplyTranslator a => Reply -> a
toBirdRequest :: BirdRequestTranslator a => a -> Request
instance BirdRequestTranslator Env
instance BirdReplyTranslator Response

module Bird
