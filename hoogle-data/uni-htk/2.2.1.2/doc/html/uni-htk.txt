-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Graphical User Interface for Haskell Programs
--   
@package uni-htk
@version 2.2.1.2


-- | This module contains <tt>MenuType</tt> - a general abstract datatype
--   for menus - plus some map-like operations on it.
--   
--   NBNBNB. <tt>MenuType</tt> is also used by the graphs and daVinci
--   stuff, which is supposed to be independent of HTk. So before making
--   HTk-specific changes to this datatype, please find some way of
--   harmlessly ignoring them (at best) for daVinci.
module HTk.Toolkit.MenuType
data MenuPrim subMenuValue value
Button :: String -> value -> MenuPrim subMenuValue value
Menu :: subMenuValue -> [MenuPrim subMenuValue value] -> MenuPrim subMenuValue value
Blank :: MenuPrim subMenuValue value
mapMenuPrim :: (a -> b) -> MenuPrim c a -> MenuPrim c b
mapMenuPrim' :: (c -> d) -> MenuPrim c a -> MenuPrim d a
mapMMenuPrim :: Monad m => (a -> m b) -> MenuPrim c a -> m (MenuPrim c b)
mapMMenuPrim' :: Monad m => (c -> m d) -> MenuPrim c a -> m (MenuPrim d a)


-- | This module exports a common interface for named objects.
module HTk.Toolkit.Name

-- | The <tt>Name</tt> datatype.
data Name
Name :: (Int -> String) -> String -> Name
short :: Name -> Int -> String
full :: Name -> String

-- | Creates a new name.
createName :: String -> Name

-- | Gets the full name from a <tt>Name</tt> object.
getFullName :: Name -> String

-- | Gets a short name of the given length from a <tt>Name</tt> object.
getShortName :: Name -> Int -> String


-- | Pack options for the grid geometry manager.
module HTk.Kernel.GridPackOptions

-- | Various pack options of the grid geometry manager.
data GridPackOption

-- | the column to pack the widget
Column :: Int -> GridPackOption

-- | the row to pack the widget
Row :: Int -> GridPackOption

-- | row column and row to pack the widget
GridPos :: (Int, Int) -> GridPackOption

-- | pack widgets sticky to the grid (see type
--   <a>code</a>StickyKind<a>/code</a>)
Sticky :: StickyKind -> GridPackOption

-- | columnspan like HTML
Columnspan :: Int -> GridPackOption

-- | rowspan like HTML
Rowspan :: Int -> GridPackOption

-- | horizontal pad
GridPadX :: Int -> GridPackOption

-- | vertical pad
GridPadY :: Int -> GridPackOption

-- | inner horizontal pad
GridIPadX :: Int -> GridPackOption

-- | inner vertical pad
GridIPadY :: Int -> GridPackOption

-- | The <tt>StickyKind</tt> datatype - sticky packing to the grid.
data StickyKind
N :: StickyKind
S :: StickyKind
E :: StickyKind
W :: StickyKind
NS :: StickyKind
NE :: StickyKind
NW :: StickyKind
SE :: StickyKind
SW :: StickyKind
EW :: StickyKind
NSE :: StickyKind
NSW :: StickyKind
NEW :: StickyKind
SEW :: StickyKind
NSEW :: StickyKind

-- | Internal.
showGridPackOptions :: [GridPackOption] -> String
instance Show StickyKind
instance Show GridPackOption

module HTk.Kernel.GUIValue
data Generator
HaskellTk :: Generator
Tk :: Generator
data GUIVALUE
GUIVALUE :: Generator -> String -> GUIVALUE
class (Show a, Read a) => GUIValue a where toGUIValue v = GUIVALUE HaskellTk (toTkString (show v)) maybeGUIValue (GUIVALUE HaskellTk s) = case [x | (x, t) <- reads (fromTkString s), ("", "") <- lex t] of { [x] -> Just x _ -> Nothing } maybeGUIValue (GUIVALUE Tk s) = case [x | (x, t) <- reads s, ("", "") <- lex t] of { [x] -> Just x _ -> Nothing } fromGUIValue val = case (maybeGUIValue val) of { (Just a) -> a }
cdefault :: GUIValue a => a
toGUIValue :: GUIValue a => a -> GUIVALUE
maybeGUIValue :: GUIValue a => GUIVALUE -> (Maybe a)
fromGUIValue :: GUIValue a => GUIVALUE -> a
newtype RawData
RawData :: String -> RawData
newtype TkCommand
TkCommand :: String -> TkCommand
creadTk :: GUIValue a => String -> IO a
toTkString :: String -> String
escapeString :: String -> String
delimitString :: String -> String
illegalGUIValue :: IOError
instance [overlap ok] (GUIValue a, GUIValue b) => GUIValue (a, b)
instance [overlap ok] GUIValue Double
instance [overlap ok] GUIValue Int
instance [overlap ok] GUIValue Bool
instance [overlap ok] Read TkCommand
instance [overlap ok] Show TkCommand
instance [overlap ok] GUIValue TkCommand
instance [overlap ok] GUIValue [[Char]]
instance [overlap ok] GUIValue [Char]
instance [overlap ok] GUIValue RawData
instance [overlap ok] Show RawData
instance [overlap ok] Read RawData
instance [overlap ok] GUIValue ()
instance [overlap ok] Show GUIVALUE
instance [overlap ok] Read GUIVALUE
instance [overlap ok] GUIValue GUIVALUE


-- | The <tt>module Geometry</tt> exports basic geometric types and
--   functionality.
module HTk.Kernel.Geometry

-- | The <tt>Distance</tt> datatype - general representation of distances
--   in HTk.
newtype Distance
Distance :: Int -> Distance

-- | The <tt>Size</tt> datatype - a pair of two <tt>Distance</tt> values.
type Size = (Distance, Distance)

-- | The <tt>Coord</tt> datatype - e.g. representing the coords of a canvas
--   item.
type Coord = [Position]

-- | The <tt>Position</tt> - a pair of two <tt>Distance</tt> values.
type Position = (Distance, Distance)

-- | The Geometry datatype - normally representing position, width and
--   height.
type Geometry = (Distance, Distance, Distance, Distance)

-- | Conversion from cm to <tt>Distance</tt>.
cm :: Double -> Distance

-- | Conversion from points to <tt>Distance</tt>.
pp :: Double -> Distance

-- | Conversion from mm to <tt>Distance</tt>.
mm :: Double -> Distance

-- | Conversion from inch to <tt>Distance</tt>.
ic :: Double -> Distance

-- | Conversion from <tt>Distance</tt> to cm.
tocm :: Distance -> Double

-- | Conversion from <tt>Distance</tt> to inch.
toinch :: Distance -> Double
instance Eq Distance
instance Ord Distance
instance Read Distances
instance Show Distances
instance GUIValue [Distance]
instance Integral Distance
instance Real Distance
instance Num Distance
instance Enum Distance
instance GUIValue Distance
instance Read Distance
instance Show Distance
instance Read Coord'
instance Show Coord'
instance GUIValue [(Distance, Distance)]
instance Read Geometry'
instance Show Geometry'
instance GUIValue (Distance, Distance, Distance, Distance)
instance Show Point
instance Read Point
instance GUIValue (Distance, Distance)


-- | Encapsulation of Event parameters used in TkCommands.
module HTk.Kernel.EventInfo
data EventParameter
HASH :: EventParameter
Pa :: EventParameter
Pb :: EventParameter
Pc :: EventParameter
Pd :: EventParameter
Pf :: EventParameter
Ph :: EventParameter
Pk :: EventParameter
Pm :: EventParameter
Po :: EventParameter
Pp :: EventParameter
Ps :: EventParameter
Pt :: EventParameter
Pv :: EventParameter
Pw :: EventParameter
Px :: EventParameter
Py :: EventParameter
PA :: EventParameter
PB :: EventParameter
PE :: EventParameter
PK :: EventParameter
PN :: EventParameter
PR :: EventParameter
PS :: EventParameter
PT :: EventParameter
PW :: EventParameter
PX :: EventParameter
PY :: EventParameter
epToChar :: EventParameter -> Char
epFromChar :: Char -> EventParameter
data EventInfoSet
emptyEventInfoSet :: EventInfoSet
mkEventInfoSet :: [EventParameter] -> EventInfoSet
listEventInfoSet :: EventInfoSet -> [EventParameter]
addEventInfoSet :: EventInfoSet -> [EventParameter] -> EventInfoSet
delEventInfoSet :: EventInfoSet -> [EventParameter] -> EventInfoSet
data EventInfo
EventInfo :: Distance -> Distance -> Distance -> Distance -> Int -> EventInfo
x :: EventInfo -> Distance
y :: EventInfo -> Distance
xRoot :: EventInfo -> Distance
yRoot :: EventInfo -> Distance
button :: EventInfo -> Int
mkEventInfo :: [(EventParameter, String)] -> EventInfo
defaultEventInfoSet :: EventInfoSet
instance Eq EventParameter
instance Ord EventParameter
instance Show EventParameter
instance Read EventParameter


-- | The <tt>module Font</tt> export basic types and classes concerning
--   font resources.
module HTk.Kernel.Font

-- | Datatypes that describe a font instantiate the <tt>class
--   FontDesignator</tt>.
class FontDesignator fh
toFont :: FontDesignator fh => fh -> Font

-- | The general <tt>Font</tt> datatype.
newtype Font
Font :: String -> Font

-- | The <tt>XFont</tt> datatype - representing the elements of an X font
--   string.
data XFont
XFont :: String -> Maybe FontFamily -> Maybe FontWeight -> Maybe FontSlant -> Maybe FontWidth -> (Maybe Int) -> (Maybe Int) -> (Maybe Int) -> (Maybe Int) -> Maybe FontSpacing -> (Maybe Int) -> Maybe String -> XFont
foundry :: XFont -> String
family :: XFont -> Maybe FontFamily
weight :: XFont -> Maybe FontWeight
slant :: XFont -> Maybe FontSlant
fontwidth :: XFont -> Maybe FontWidth
pixels :: XFont -> (Maybe Int)
points :: XFont -> (Maybe Int)
xres :: XFont -> (Maybe Int)
yres :: XFont -> (Maybe Int)
spacing :: XFont -> Maybe FontSpacing
charwidth :: XFont -> (Maybe Int)
charset :: XFont -> Maybe String
XFontAlias :: String -> XFont

-- | Standard font.
xfont :: XFont

-- | The <tt>FontFamily</tt> datatype.
data FontFamily
Lucida :: FontFamily
Times :: FontFamily
Helvetica :: FontFamily
Courier :: FontFamily
Symbol :: FontFamily
Other :: String -> FontFamily

-- | The <tt>FontWeight</tt> datatype.
data FontWeight
NormalWeight :: FontWeight
Medium :: FontWeight
Bold :: FontWeight

-- | The <tt>FontSlant</tt> datatype.
data FontSlant
Roman :: FontSlant
Italic :: FontSlant
Oblique :: FontSlant

-- | The <tt>FontWidth</tt> datatype.
data FontWidth
NormalWidth :: FontWidth
Condensed :: FontWidth
Narrow :: FontWidth

-- | The <tt>FontSpacing</tt> datatype.
data FontSpacing
MonoSpace :: FontSpacing
Proportional :: FontSpacing
instance GUIValue FontSpacing
instance Show FontSpacing
instance Read FontSpacing
instance GUIValue FontWidth
instance Show FontWidth
instance Read FontWidth
instance GUIValue FontSlant
instance Show FontSlant
instance Read FontSlant
instance GUIValue FontFamily
instance Show FontFamily
instance Read FontFamily
instance GUIValue FontWeight
instance Show FontWeight
instance Read FontWeight
instance Read XFont
instance Show XFont
instance GUIValue XFont
instance Read Font
instance Show Font
instance GUIValue Font
instance FontDesignator (FontFamily, FontSlant, Int)
instance FontDesignator (FontFamily, FontWeight, Int)
instance FontDesignator (FontFamily, Int)
instance FontDesignator FontFamily
instance FontDesignator XFont
instance FontDesignator String
instance FontDesignator Font


-- | Basic resources used with object configuration options.
module HTk.Kernel.Resources

-- | The <tt>State</tt> datatype - the state of certain widgets can be
--   normal, disabled or active.
data State
Disabled :: State
Active :: State
Normal :: State

-- | The <tt>Justify</tt> datatype - representing a text justification.
data Justify
JustLeft :: Justify
JustCenter :: Justify
JustRight :: Justify

-- | The <tt>Relief</tt> datatype - represents the relief of certain
--   widgets.
data Relief
Groove :: Relief
Ridge :: Relief
Flat :: Relief
Sunken :: Relief
Raised :: Relief

-- | The <tt>Anchor</tt> datatype - used for different purposes, e.g. text
--   anchors or anchor positions of canvas items.
data Anchor
SouthEast :: Anchor
South :: Anchor
SouthWest :: Anchor
East :: Anchor
Center :: Anchor
West :: Anchor
NorthEast :: Anchor
North :: Anchor
NorthWest :: Anchor

-- | A simple <tt>Toggle</tt> datatype - used for different purposes.
data Toggle
Off :: Toggle
On :: Toggle
toggle :: Toggle -> Toggle

-- | The <tt>Orientation</tt> datatype - used for different purposes.
data Orientation
Horizontal :: Orientation
Vertical :: Orientation

-- | The <tt>Alignment</tt> datatype - widget alignment etc.
data Alignment
Top :: Alignment
InCenter :: Alignment
Bottom :: Alignment
Baseline :: Alignment

-- | The <tt>Flexibility</tt> datatype - used in the context of boxes (see
--   containers).
data Flexibility
Rigid :: Flexibility
Flexible :: Flexibility

-- | Internal.
type CreationConfig w = IO String

-- | Internal.
showCreationConfigs :: [CreationConfig a] -> IO String
instance Eq State
instance Ord State
instance Enum State
instance Eq Justify
instance Ord Justify
instance Enum Justify
instance Eq Relief
instance Ord Relief
instance Enum Relief
instance Eq Orientation
instance Ord Orientation
instance Enum Orientation
instance Eq Toggle
instance Ord Toggle
instance Eq Alignment
instance Ord Alignment
instance Enum Alignment
instance Eq Anchor
instance Ord Anchor
instance Enum Anchor
instance Show Anchor
instance Read Anchor
instance GUIValue Anchor
instance Show Alignment
instance Read Alignment
instance GUIValue Alignment
instance Show Toggle
instance Read Toggle
instance GUIValue Toggle
instance Show Orientation
instance Read Orientation
instance GUIValue Orientation
instance Show Relief
instance Read Relief
instance GUIValue Relief
instance Show Justify
instance Read Justify
instance GUIValue Justify
instance Show State
instance Read State
instance GUIValue State


-- | Packing options for the pack geometry manager.
module HTk.Kernel.PackOptions
data PackOption

-- | side to pack the widget
Side :: SideSpec -> PackOption

-- | orientations to fill.
Fill :: FillSpec -> PackOption

-- | expand toggle
Expand :: Toggle -> PackOption

-- | inner horizontal pad
IPadX :: Distance -> PackOption

-- | inner vertical pad
IPadY :: Distance -> PackOption

-- | horizontal pad
PadX :: Distance -> PackOption

-- | vertical pad
PadY :: Distance -> PackOption

-- | anchor position
Anchor :: Anchor -> PackOption

-- | The <tt>SideSpec</tt> datatype.
data SideSpec
AtLeft :: SideSpec
AtRight :: SideSpec
AtTop :: SideSpec
AtBottom :: SideSpec

-- | The <tt>FillSpec</tt> datatype.
data FillSpec
X :: FillSpec
Y :: FillSpec
Both :: FillSpec
None :: FillSpec

-- | Internal.
showPackOptions :: [PackOption] -> String
instance Show PackOption
instance Show FillSpec
instance Show SideSpec

module HTk.Kernel.GUIObjectName
data ObjectName
ObjectName :: String -> ObjectName
MenuItemName :: ObjectName -> Int -> ObjectName
CanvasItemName :: ObjectName -> CanvasTagOrID -> ObjectName
TextPaneItemName :: ObjectName -> TextItemName -> ObjectName
NoteBookPageName :: ObjectID -> ObjectName
LabelFrameName :: ObjectName -> ObjectID -> ObjectName
PaneName :: ObjectID -> ObjectName
data TextItemName
TextTagID :: ObjectID -> TextItemName
TextItemPosition :: GUIVALUE -> TextItemName
EmbeddedWindowName :: ObjectName -> TextItemName
data WidgetName
WidgetName :: String -> WidgetName
data CanvasTagOrID
CanvasTagOrID :: ObjectID -> CanvasTagOrID
CanvasTagNot :: CanvasTagOrID -> CanvasTagOrID
CanvasTagAnd :: CanvasTagOrID -> CanvasTagOrID -> CanvasTagOrID
CanvasTagOr :: CanvasTagOrID -> CanvasTagOrID -> CanvasTagOrID
CanvasTagXOr :: CanvasTagOrID -> CanvasTagOrID -> CanvasTagOrID
toWidgetName :: ObjectName -> WidgetName
instance Show WidgetName
instance Read WidgetName
instance GUIValue WidgetName
instance Show CanvasTagOrID
instance Show TextItemName
instance Show ObjectName

module HTk.Kernel.GUIObjectKind
data ObjectKind
FRAME :: ObjectKind
LABEL :: ObjectKind
MESSAGE :: ObjectKind
BUTTON :: ObjectKind
CHECKBUTTON :: ObjectKind
RADIOBUTTON :: ObjectKind
MENUBUTTON :: ObjectKind
MENU :: ObjectKind
MENUITEM :: MenuItemKind -> Int -> ObjectKind
OPTIONMENU :: [GUIVALUE] -> ObjectKind
LISTBOX :: [GUIVALUE] -> ObjectKind
SEPARATOR :: ObjectKind
ENTRY :: ObjectKind
TEXT :: GUIVALUE -> ObjectKind
CANVAS :: ObjectKind
SCALE :: ObjectKind
SCROLLBAR :: ObjectKind
TOPLEVEL :: ObjectKind
TEXTTAG :: [GUIVALUE] -> ObjectKind
EMBEDDEDTEXTWIN :: GUIVALUE -> ObjectName -> ObjectKind
CANVASITEM :: CanvasItemKind -> Coord -> ObjectKind
POSTSCRIPT :: ObjectKind
SESSION :: ObjectKind
GRAPH :: ObjectKind
ABSTRACT :: ObjectKind
WIDGET :: String -> ObjectKind
NOTEBOOK :: ObjectKind
NOTEBOOKPAGE :: String -> ObjectKind
LABELFRAME :: ObjectKind
PANEDWINDOW :: Orientation -> ObjectKind
WINDOWPANE :: ObjectKind
COMBOBOX :: Bool -> ObjectKind
BOX :: Orientation -> Flexibility -> ObjectKind
SUBWIDGET :: ObjectKind -> String -> ObjectKind
data CanvasItemKind
ARC :: CanvasItemKind
LINE :: CanvasItemKind
POLYGON :: CanvasItemKind
RECTANGLE :: CanvasItemKind
OVAL :: CanvasItemKind
BITMAPITEM :: CanvasItemKind
IMAGEITEM :: CanvasItemKind
TEXTITEM :: CanvasItemKind
CANVASTAG :: CanvasItemKind
EMBEDDEDCANVASWIN :: CanvasItemKind
data MenuItemKind
MENUCASCADE :: MenuItemKind
MENUCOMMAND :: MenuItemKind
MENUCHECKBUTTON :: MenuItemKind
MENURADIOBUTTON :: MenuItemKind
MENUSEPARATOR :: MenuItemKind
instance Show ObjectKind


-- | Basic types and classes for coloured resources.
module HTk.Kernel.Colour

-- | Datatypes that describe a colour instantiate the <tt>class
--   ColourDesignator</tt>.
class ColourDesignator c
toColour :: ColourDesignator c => c -> Colour

-- | The <tt>Colour</tt> datatype.
newtype Colour
Colour :: String -> Colour
instance Show Colour
instance Read Colour
instance GUIValue Colour
instance ColourDesignator (Double, Double, Double)
instance ColourDesignator (Int, Int, Int)
instance ColourDesignator [Char]
instance ColourDesignator Colour


-- | This is the bare-bones interface which actually calls the wish
--   program.
module HTk.Kernel.CallWish
data CalledWish
callWish :: IO CalledWish
sendCalledWish :: CalledWish -> CStringLen -> IO ()
readCalledWish :: CalledWish -> IO String
destroyCalledWish :: CalledWish -> IO ()


-- | HTk - a GUI toolkit for Haskell - (c) Universitaet Bremen
--   -----------------------------------------------------------------------
module HTk.Kernel.Wish
wish :: Wish
evalTclScript :: TclScript -> IO String
execTclScript :: TclScript -> IO ()
execCmd :: TclCmd -> IO ()
evalCmd :: TclCmd -> IO String
data Wish
Wish :: BSem -> EqGuardedChannel BindTag EventInfo -> EqGuardedChannel CallBackId () -> MVar BindTag -> GuardedEvent (EqMatch TclMessageType) (TclMessageType, String) -> (CStringLen -> IO ()) -> IO () -> MVar (Int, TclScript) -> ObjectID -> Wish
wishLock :: Wish -> BSem
eventQueue :: Wish -> EqGuardedChannel BindTag EventInfo
coQueue :: Wish -> EqGuardedChannel CallBackId ()
bindTags :: Wish -> MVar BindTag
readWish :: Wish -> GuardedEvent (EqMatch TclMessageType) (TclMessageType, String)
writeWish :: Wish -> CStringLen -> IO ()
destroyWish :: Wish -> IO ()
bufferedCommands :: Wish -> MVar (Int, TclScript)
oID :: Wish -> ObjectID
type TclCmd = String
type TclScript = [TclCmd]
data TclMessageType
OKType :: TclMessageType
ERType :: TclMessageType
COType :: TclMessageType
EVType :: TclMessageType
data BindTag
bindTagS :: BindTag -> String
succBindTag :: BindTag -> BindTag
data WishEvent
WishEvent :: [WishEventModifier] -> WishEventType -> WishEvent
data WishEventModifier
Control :: WishEventModifier
Shift :: WishEventModifier
Lock :: WishEventModifier
CommandKey :: WishEventModifier
Meta :: WishEventModifier
M :: WishEventModifier
Alt :: WishEventModifier
Mod1 :: WishEventModifier
Mod2 :: WishEventModifier
Mod3 :: WishEventModifier
Mod4 :: WishEventModifier
Mod5 :: WishEventModifier
Button1 :: WishEventModifier
Button2 :: WishEventModifier
Button3 :: WishEventModifier
Button4 :: WishEventModifier
Button5 :: WishEventModifier
Double :: WishEventModifier
Triple :: WishEventModifier
data WishEventType
Activate :: WishEventType
ButtonPress :: (Maybe BNo) -> WishEventType
ButtonRelease :: (Maybe BNo) -> WishEventType
Circulate :: WishEventType
Colormap :: WishEventType
Configure :: WishEventType
Deactivate :: WishEventType
Destroy :: WishEventType
Enter :: WishEventType
Expose :: WishEventType
FocusIn :: WishEventType
FocusOut :: WishEventType
Gravity :: WishEventType
KeyPress :: (Maybe KeySym) -> WishEventType
KeyRelease :: (Maybe KeySym) -> WishEventType
Motion :: WishEventType
Leave :: WishEventType
Map :: WishEventType
Property :: WishEventType
Reparent :: WishEventType
Unmap :: WishEventType
Visibility :: WishEventType
mkBoundCmdArg :: BindTag -> EventInfoSet -> Bool -> String
newtype KeySym
KeySym :: String -> KeySym
newtype CallBackId
CallBackId :: ObjectID -> CallBackId
showP :: Show a => a -> String -> String
requirePackage :: String -> IO (Bool)
forgetPackage :: String -> IO ()
isPackageAvailable :: String -> IO Bool
isTixAvailable :: IO Bool
cleanupWish :: IO ()
delayWish :: IO a -> IO a
instance Eq TclMessageType
instance Ord TclMessageType
instance Show TclMessageType
instance Eq BindTag
instance Ord BindTag
instance Show KeySym
instance Ord KeySym
instance Eq KeySym
instance Show WishEventType
instance Eq WishEventType
instance Ord WishEventType
instance Show WishEventModifier
instance Ord WishEventModifier
instance Eq WishEventModifier
instance Ord WishEvent
instance Eq WishEvent
instance Eq CallBackId
instance Ord CallBackId
instance Show CallBackId
instance Show WishEvent
instance Destroyable Wish
instance Object Wish


-- | Basic types and classes associated with the mouse cursor.
module HTk.Kernel.Cursor

-- | Datatypes that describe cursors instantiate the <tt>class
--   CursorDesignator</tt>.
class CursorDesignator ch
toCursor :: CursorDesignator ch => ch -> Cursor

-- | The general <tt>Cursor</tt> datatype.
newtype Cursor
Cursor :: String -> Cursor

-- | The <tt>XCursor</tt> dataype for predefined X cursors.
data XCursor
XCursor :: String -> (Maybe Colour) -> (Maybe Colour) -> XCursor

-- | The <tt>BCursor</tt> datatype for bitmap cursors.
data BCursor
BCursor :: String -> (Maybe String) -> Colour -> (Maybe Colour) -> BCursor

-- | A standard X cursor.
arrow :: Cursor

-- | A standard X cursor.
circle :: Cursor

-- | A standard X cursor.
clock :: Cursor

-- | A standard X cursor.
diamondCross :: Cursor

-- | A standard X cursor.
dot :: Cursor

-- | A standard X cursor.
drapedBox :: Cursor

-- | A standard X cursor.
exchange :: Cursor

-- | A standard X cursor.
fleur :: Cursor

-- | A standard X cursor.
gobbler :: Cursor

-- | A standard X cursor.
gumby :: Cursor

-- | A standard X cursor.
hand1 :: Cursor

-- | A standard X cursor.
hand2 :: Cursor

-- | A standard X cursor.
pencil :: Cursor

-- | A standard X cursor.
plus :: Cursor

-- | A standard X cursor.
spraycan :: Cursor

-- | A standard X cursor.
tcross :: Cursor

-- | A standard X cursor.
watch :: Cursor

-- | A standard X cursor.
xterm :: Cursor
instance Show BCursor
instance Show XCursor
instance Show Cursor
instance Read Cursor
instance GUIValue Cursor
instance CursorDesignator ([Char], [Char], Colour, Colour)
instance CursorDesignator (String, Colour, Colour)
instance CursorDesignator (String, Colour)
instance CursorDesignator String
instance CursorDesignator BCursor
instance CursorDesignator XCursor
instance CursorDesignator Cursor

module HTk.Kernel.GUIObject
class GUIObject w where cset w cid v = setConfig (toGUIObject w) cid v >> return w cget w cid = getConfig (toGUIObject w) cid
toGUIObject :: GUIObject w => w -> GUIOBJECT
cname :: GUIObject w => w -> String
cset :: (GUIObject w, GUIValue a) => w -> ConfigID -> a -> IO w
cget :: (GUIObject w, GUIValue a) => w -> ConfigID -> IO a
data GUIOBJECT
GUIOBJECT :: ObjectID -> (Ref OST) -> GUIOBJECT
ROOT :: GUIOBJECT
newGUIObject :: GUIOBJECT -> ObjectKind -> Methods -> IO GUIOBJECT
setObjectKind :: GUIOBJECT -> ObjectKind -> IO ()
setObjectName :: GUIOBJECT -> ObjectName -> IO ()
getMethods :: GUIOBJECT -> IO Methods
setMethods :: GUIOBJECT -> Methods -> IO ()
getObjectName :: GUIOBJECT -> IO ObjectName
getObjectNo :: GUIOBJECT -> Int
getObjectKind :: GUIOBJECT -> IO ObjectKind
data OST
OST :: ObjectKind -> ObjectName -> ObjectID -> Methods -> OST
objectkind :: OST -> ObjectKind
objectname :: OST -> ObjectName
parentobj :: OST -> ObjectID
methods :: OST -> Methods
type ConfigID = String
type ConfigOption = (ConfigID, GUIVALUE)
data Methods
Methods :: (ObjectName -> ConfigID -> TclScript) -> (ObjectName -> [ConfigOption] -> TclScript) -> (ObjectName -> ObjectKind -> ObjectName -> ObjectID -> [ConfigOption] -> TclScript) -> (ObjectName -> [PackOption] -> TclScript) -> (ObjectName -> [GridPackOption] -> TclScript) -> (ObjectName -> TclScript) -> (ObjectName -> BindTag -> [WishEvent] -> EventInfoSet -> Bool -> TclScript) -> (ObjectName -> BindTag -> [WishEvent] -> Bool -> TclScript) -> (ObjectID -> ObjectName -> TclScript) -> Methods
cgetCmd :: Methods -> ObjectName -> ConfigID -> TclScript
csetCmd :: Methods -> ObjectName -> [ConfigOption] -> TclScript
createCmd :: Methods -> ObjectName -> ObjectKind -> ObjectName -> ObjectID -> [ConfigOption] -> TclScript
packCmd :: Methods -> ObjectName -> [PackOption] -> TclScript
gridCmd :: Methods -> ObjectName -> [GridPackOption] -> TclScript
destroyCmd :: Methods -> ObjectName -> TclScript
bindCmd :: Methods -> ObjectName -> BindTag -> [WishEvent] -> EventInfoSet -> Bool -> TclScript
unbindCmd :: Methods -> ObjectName -> BindTag -> [WishEvent] -> Bool -> TclScript
cleanupCmd :: Methods -> ObjectID -> ObjectName -> TclScript
instance Synchronized GUIOBJECT
instance Object GUIOBJECT
instance Ord GUIOBJECT
instance Eq GUIOBJECT


-- | Basic types and classes concerning widget configuration.
module HTk.Kernel.Configuration

-- | Coloured objects instantiate the <tt>class HasColour</tt>.
class GUIObject w => HasColour w where legalColourID _ "background" = True legalColourID _ _ = False setColour w cid col = if legalColourID w cid then cset w cid col else return w getColour w cid = if legalColourID w cid then cget w cid else return cdefault
legalColourID :: HasColour w => w -> ConfigID -> Bool
setColour :: HasColour w => w -> ConfigID -> Colour -> IO w
getColour :: HasColour w => w -> ConfigID -> IO Colour

-- | Sets the background colour.
background :: (ColourDesignator c, HasColour w) => c -> Config w

-- | Gets the background colour.
getBackground :: HasColour w => w -> IO Colour

-- | Sets the foreground colour.
foreground :: (ColourDesignator c, HasColour w) => c -> Config w

-- | Gets the foreground colour.
getForeground :: HasColour w => w -> IO Colour

-- | Sets the active background colour.
activeBackground :: (ColourDesignator c, HasColour w) => c -> Config w

-- | Gets the active background colour.
getActiveBackground :: HasColour w => w -> IO Colour

-- | Sets the active foreground colour.
activeForeground :: (ColourDesignator c, HasColour w) => c -> Config w

-- | Gets the active foreground colour.
getActiveForeground :: HasColour w => w -> IO Colour

-- | Sets the disabled foreground colour.
disabledForeground :: (ColourDesignator c, HasColour w) => c -> Config w

-- | Gets the disabled foreground colour.
getDisabledForeground :: HasColour w => w -> IO Colour

-- | Sets the foreground colour.
fg :: (ColourDesignator c, HasColour w) => c -> Config w

-- | Sets the background colour.
bg :: (ColourDesignator c, HasColour w) => c -> Config w

-- | Internal.
hasBackGroundColour :: HasColour w => w -> ConfigID -> Bool

-- | Internal.
hasForeGroundColour :: HasColour w => w -> ConfigID -> Bool

-- | Objects with a configureable size instantiate the <tt>class
--   HasSize</tt>.
class GUIObject w => HasSize w where width s w = cset w "width" s getWidth w = cget w "width" height s w = cset w "height" s getHeight w = cget w "height" size (x, y) w = width x w >> height y w getSize w = getWidth w >>= \ x -> getHeight w >>= \ y -> return (x, y)
width :: HasSize w => Distance -> Config w
getWidth :: HasSize w => w -> IO Distance
height :: HasSize w => Distance -> Config w
getHeight :: HasSize w => w -> IO Distance
size :: HasSize w => Size -> Config w
getSize :: HasSize w => w -> IO Size

-- | Objects with a configureable positon (e.g. canvas items) instantiate
--   the <tt>class HasPosition</tt>.
class GUIObject w => HasPosition w
position :: HasPosition w => Position -> Config w
getPosition :: HasPosition w => w -> IO Position

-- | Objects with a configureable size and position instantiate the
--   <tt>class HasGeometry</tt>.
class (HasSize w, HasPosition w) => HasGeometry w
geometry :: HasGeometry w => Geometry -> Config w
getGeometry :: HasGeometry w => w -> IO Geometry

-- | Canvasitems with an anchor position on the canvas instantiate the
--   <tt>class HasCanvAnchor</tt>.
class GUIObject w => HasCanvAnchor w
canvAnchor :: HasCanvAnchor w => Anchor -> Config w
getCanvAnchor :: HasCanvAnchor w => w -> IO Anchor

-- | Objects with a configureable border instantiate the <tt>class
--   HasBorder</tt>.
class GUIObject w => HasBorder w where borderwidth s w = cset w "borderwidth" s getBorderwidth w = cget w "borderwidth" relief r w = cset w "relief" r getRelief w = cget w "relief"
borderwidth :: HasBorder w => Distance -> Config w
getBorderwidth :: HasBorder w => w -> IO Distance
relief :: HasBorder w => Relief -> Config w
getRelief :: HasBorder w => w -> IO Relief

-- | Objects that have a value instantiate the <tt>class HasValue</tt>.
class (GUIObject w, GUIValue v) => HasValue w v where value v w = cset w "value" v >> return w getValue w = cget w "value"
value :: HasValue w v => v -> Config w
getValue :: HasValue w v => w -> IO v

-- | Objects containing text instantiate the class <tt>HasText</tt>.
class (GUIObject w, GUIValue v) => HasText w v where text t w = cset w "text" t getText w = cget w "text"
text :: HasText w v => v -> Config w
getText :: HasText w v => w -> IO v

-- | Objects with a configureable font instantiate the <tt>class
--   HasFont</tt>.
class GUIObject w => HasFont w where font f w = cset w "font" (toFont f) getFont w = cget w "font"
font :: (HasFont w, FontDesignator f) => f -> Config w
getFont :: HasFont w => w -> IO Font

-- | Objects that have a text underline configure option instantiate th
--   <tt>class HasUnderline</tt>.
class GUIObject w => HasUnderline w where underline i w = cset w "underline" i getUnderline w = cget w "underline" wraplength l w = cset w "wraplength" l getWraplength w = cget w "wraplength"
underline :: HasUnderline w => Int -> Config w
getUnderline :: HasUnderline w => w -> IO Int
wraplength :: HasUnderline w => Int -> Config w
getWraplength :: HasUnderline w => w -> IO Int

-- | Objects that have a configureable text justification instantiate the
--   <tt>class HasJustify</tt>.
class GUIObject w => HasJustify w where justify js w = cset w "justify" js getJustify w = cget w "justify"
justify :: HasJustify w => Justify -> Config w
getJustify :: HasJustify w => w -> IO Justify

-- | Objects that support geometry gridding instantiate the <tt>class
--   HasGrid</tt>.
class GUIObject w => HasGrid w where setgrid b w = cset w "setgrid" b getGrid w = cget w "setgrid"
setgrid :: HasGrid w => Toggle -> Config w
getGrid :: HasGrid w => w -> IO Toggle

-- | Oriented objects instantiate the <tt>class HasOrientation</tt>.
class GUIObject w => HasOrientation w where orient o w = cset w "orient" o getOrient w = cget w "orient"
orient :: HasOrientation w => Orientation -> Config w
getOrient :: HasOrientation w => w -> IO Orientation

-- | Objects associated with a file instantiate the <tt>class HasFile</tt>.
class GUIObject w => HasFile w
filename :: HasFile w => String -> Config w
getFileName :: HasFile w => w -> IO String

-- | Objects with a configureable alignment instantiate the <tt>class
--   HasAlign</tt>.
class GUIObject w => HasAlign w where align a w = cset w "align" a getAlign w = cget w "align"
align :: HasAlign w => Alignment -> Config w
getAlign :: HasAlign w => w -> IO Alignment

-- | Incrementable objects (e.g. scale wigdgets) instantiate the <tt>class
--   HasIncrement</tt>.
class HasIncrement w a
increment :: HasIncrement w a => a -> Config w
getIncrement :: HasIncrement w a => w -> IO a

-- | Stateful objects that can be enabled or disabled instantiate the
--   <tt>class HasEnable</tt>.
class GUIObject w => HasEnable w where state s w = cset w "state" s getState w = cget w "state" disable = state Disabled enable = state Normal isEnabled w = do { st <- getState w; return (st /= Disabled) }
state :: HasEnable w => State -> Config w
getState :: HasEnable w => w -> IO State
disable :: HasEnable w => Config w
enable :: HasEnable w => Config w
isEnabled :: HasEnable w => w -> IO Bool

-- | Objects that have an anchor position instantiate the <tt>class
--   HasAnchor</tt>.
class GUIObject w => HasAnchor w where anchor a w = cset w "anchor" a getAnchor w = cget w "anchor"
anchor :: HasAnchor w => Anchor -> Config w
getAnchor :: HasAnchor w => w -> IO Anchor

-- | Objects or sets of objects with a bounding box (e.g. canvas tags)
--   instantiate the <tt>class HasBBox</tt>.
class GUIObject w => HasBBox w i
bbox :: HasBBox w i => w -> i -> IO (Maybe (Distance, Distance, Distance, Distance))

module HTk.Kernel.Tooltip

-- | Widgets can have tooltips (if you are using tixwish).
class GUIObject w => HasTooltip w where tooltip str w = do { tixAvailable <- isTixAvailable; (if tixAvailable then do { nm <- getObjectName (toGUIObject w); execTclScript ["destroy " ++ show nm ++ "ttip", "tixBalloon " ++ show nm ++ "ttip", show nm ++ "ttip bind " ++ show nm ++ " -msg \"" ++ str ++ "\""] } else done) >> return w } destroyTooltip w = do { tixAvailable <- isTixAvailable; (if tixAvailable then do { nm <- getObjectName (toGUIObject w); execTclScript ["destroy " ++ show nm ++ "ttip"] } else done) }
tooltip :: HasTooltip w => String -> w -> IO w
destroyTooltip :: HasTooltip w => w -> IO ()


-- | Basic types and classes.
module HTk.Kernel.BaseClasses

-- | Widgets instantiate the <tt>class Widget</tt>.
class GUIObject w => Widget w where cursor s w = cset w "cursor" (toCursor s) getCursor w = cget w "cursor" takeFocus b w = cset w "takefocus" b getTakeFocus w = cget w "takefocus"
cursor :: (Widget w, CursorDesignator ch) => ch -> Config w
getCursor :: Widget w => w -> IO Cursor
takeFocus :: Widget w => Bool -> Config w
getTakeFocus :: Widget w => w -> IO Bool

module HTk.Kernel.Core
data Wish
Wish :: BSem -> EqGuardedChannel BindTag EventInfo -> EqGuardedChannel CallBackId () -> MVar BindTag -> GuardedEvent (EqMatch TclMessageType) (TclMessageType, String) -> (CStringLen -> IO ()) -> IO () -> MVar (Int, TclScript) -> ObjectID -> Wish
wishLock :: Wish -> BSem
eventQueue :: Wish -> EqGuardedChannel BindTag EventInfo
coQueue :: Wish -> EqGuardedChannel CallBackId ()
bindTags :: Wish -> MVar BindTag
readWish :: Wish -> GuardedEvent (EqMatch TclMessageType) (TclMessageType, String)
writeWish :: Wish -> CStringLen -> IO ()
destroyWish :: Wish -> IO ()
bufferedCommands :: Wish -> MVar (Int, TclScript)
oID :: Wish -> ObjectID
wish :: Wish
type TclCmd = String
type TclScript = [TclCmd]
data TclMessageType
OKType :: TclMessageType
ERType :: TclMessageType
COType :: TclMessageType
EVType :: TclMessageType
execCmd :: TclCmd -> IO ()
evalCmd :: TclCmd -> IO String
execTclScript :: TclScript -> IO ()
evalTclScript :: TclScript -> IO String
execMethod :: GUIObject a => a -> (ObjectName -> TclScript) -> IO ()
evalMethod :: (GUIObject a, GUIValue b) => a -> (ObjectName -> TclScript) -> IO b
setTclVariable :: GUIValue a => String -> a -> IO ()
getTclVariable :: GUIValue a => String -> IO a
data GUI
GUI :: GUIOBJECT -> (Ref GST) -> GUI
getGUI :: IO GUI
type ConfigOption = (ConfigID, GUIVALUE)
type ConfigID = String
showConfigs :: [(ConfigID, GUIVALUE)] -> String
showConfig :: (ConfigID, GUIVALUE) -> String

-- | Stateful objects that can be enabled or disabled instantiate the
--   <tt>class HasEnable</tt>.
class GUIObject w => HasEnable w where state s w = cset w "state" s getState w = cget w "state" disable = state Disabled enable = state Normal isEnabled w = do { st <- getState w; return (st /= Disabled) }
state :: HasEnable w => State -> Config w
getState :: HasEnable w => w -> IO State
disable :: HasEnable w => Config w
enable :: HasEnable w => Config w
isEnabled :: HasEnable w => w -> IO Bool
data GUIOBJECT
GUIOBJECT :: ObjectID -> (Ref OST) -> GUIOBJECT
ROOT :: GUIOBJECT
data OST
OST :: ObjectKind -> ObjectName -> ObjectID -> Methods -> OST
objectkind :: OST -> ObjectKind
objectname :: OST -> ObjectName
parentobj :: OST -> ObjectID
methods :: OST -> Methods
class GUIObject w where cset w cid v = setConfig (toGUIObject w) cid v >> return w cget w cid = getConfig (toGUIObject w) cid
toGUIObject :: GUIObject w => w -> GUIOBJECT
cname :: GUIObject w => w -> String
cset :: (GUIObject w, GUIValue a) => w -> ConfigID -> a -> IO w
cget :: (GUIObject w, GUIValue a) => w -> ConfigID -> IO a
class Object o
objectID :: Object o => o -> ObjectID
newtype ObjectID :: *
ObjectID :: Int -> ObjectID
getObjectNo :: GUIOBJECT -> Int
getParentObjectID :: GUIOBJECT -> IO ObjectID
createGUIObject :: GUIOBJECT -> ObjectKind -> Methods -> IO GUIOBJECT
createHTkObject :: Methods -> IO GUIOBJECT
createWidget :: GUIOBJECT -> ObjectKind -> IO GUIOBJECT
lookupGUIObjectByName :: WidgetName -> IO (Maybe GUIOBJECT)
lookupGUIObject :: ObjectID -> IO GUIOBJECT
getParentPathName :: GUIObject w => w -> IO (Maybe ObjectName)
getParentObject :: GUIObject w => w -> IO (Maybe GUIOBJECT)
getObjectKind :: GUIOBJECT -> IO ObjectKind
setObjectKind :: GUIOBJECT -> ObjectKind -> IO ()
getObjectName :: GUIOBJECT -> IO ObjectName
setObjectName :: GUIOBJECT -> ObjectName -> IO ()
data Methods
Methods :: (ObjectName -> ConfigID -> TclScript) -> (ObjectName -> [ConfigOption] -> TclScript) -> (ObjectName -> ObjectKind -> ObjectName -> ObjectID -> [ConfigOption] -> TclScript) -> (ObjectName -> [PackOption] -> TclScript) -> (ObjectName -> [GridPackOption] -> TclScript) -> (ObjectName -> TclScript) -> (ObjectName -> BindTag -> [WishEvent] -> EventInfoSet -> Bool -> TclScript) -> (ObjectName -> BindTag -> [WishEvent] -> Bool -> TclScript) -> (ObjectID -> ObjectName -> TclScript) -> Methods
cgetCmd :: Methods -> ObjectName -> ConfigID -> TclScript
csetCmd :: Methods -> ObjectName -> [ConfigOption] -> TclScript
createCmd :: Methods -> ObjectName -> ObjectKind -> ObjectName -> ObjectID -> [ConfigOption] -> TclScript
packCmd :: Methods -> ObjectName -> [PackOption] -> TclScript
gridCmd :: Methods -> ObjectName -> [GridPackOption] -> TclScript
destroyCmd :: Methods -> ObjectName -> TclScript
bindCmd :: Methods -> ObjectName -> BindTag -> [WishEvent] -> EventInfoSet -> Bool -> TclScript
unbindCmd :: Methods -> ObjectName -> BindTag -> [WishEvent] -> Bool -> TclScript
cleanupCmd :: Methods -> ObjectID -> ObjectName -> TclScript
defMethods :: Methods
voidMethods :: Methods
setMethods :: GUIOBJECT -> Methods -> IO ()
data WishEvent
WishEvent :: [WishEventModifier] -> WishEventType -> WishEvent
data WishEventType
Activate :: WishEventType
ButtonPress :: (Maybe BNo) -> WishEventType
ButtonRelease :: (Maybe BNo) -> WishEventType
Circulate :: WishEventType
Colormap :: WishEventType
Configure :: WishEventType
Deactivate :: WishEventType
Destroy :: WishEventType
Enter :: WishEventType
Expose :: WishEventType
FocusIn :: WishEventType
FocusOut :: WishEventType
Gravity :: WishEventType
KeyPress :: (Maybe KeySym) -> WishEventType
KeyRelease :: (Maybe KeySym) -> WishEventType
Motion :: WishEventType
Leave :: WishEventType
Map :: WishEventType
Property :: WishEventType
Reparent :: WishEventType
Unmap :: WishEventType
Visibility :: WishEventType
data WishEventModifier
Control :: WishEventModifier
Shift :: WishEventModifier
Lock :: WishEventModifier
CommandKey :: WishEventModifier
Meta :: WishEventModifier
M :: WishEventModifier
Alt :: WishEventModifier
Mod1 :: WishEventModifier
Mod2 :: WishEventModifier
Mod3 :: WishEventModifier
Mod4 :: WishEventModifier
Mod5 :: WishEventModifier
Button1 :: WishEventModifier
Button2 :: WishEventModifier
Button3 :: WishEventModifier
Button4 :: WishEventModifier
Button5 :: WishEventModifier
Double :: WishEventModifier
Triple :: WishEventModifier
newtype KeySym
KeySym :: String -> KeySym

-- | Binds an event for this widget. The second action returned unbinds the
--   event.
bind :: GUIObject wid => wid -> [WishEvent] -> IO (Event EventInfo, IO ())

-- | Simple version of bind for only one event and without modifiers.
bindSimple :: GUIObject wid => wid -> WishEventType -> IO (Event (), IO ())

-- | Binds an event for this widget and its parent widgets. The second
--   action returned unbinds the event.
bindPath :: Widget wid => wid -> [WishEvent] -> IO (Event EventInfo, IO ())

-- | Simple version of bindPath for only one event and without modifiers.
bindPathSimple :: Widget wid => wid -> WishEventType -> IO (Event (), IO ())
class GUIObject w => HasCommand w where clicked w = do { let (GUIOBJECT oid _) = toGUIObject w; cset w "command" (TkCommand ("puts \"CO " ++ show oid ++ "\"")); return (toEvent (listen (coQueue wish) |> Eq (CallBackId oid)) >>> return ()) }
clicked :: HasCommand w => w -> IO (Event ())
bindTagS :: BindTag -> String
showP :: Show a => a -> String -> String
mkBoundCmdArg :: BindTag -> EventInfoSet -> Bool -> String
data BindTag
data EventInfoSet
tkDeclVar :: String -> String -> TclScript
tkUndeclVar :: String -> TclScript
instance [overlap ok] GUIObject GUI
instance [overlap ok] Object GUI
instance [overlap ok] GUIObject a => Destroyable a
instance [overlap ok] GUIObject GUIOBJECT


-- | This module provides general functionality on button widgets.
module HTk.Kernel.ButtonWidget

-- | Button widgets instantiate the <tt>class ButtonWidget</tt>.
class Widget w => ButtonWidget w where flash w = do { try (execMethod w (\ nm -> tkFlash nm)) :: IO (Either SomeException ()); return () } invoke w = execMethod (toGUIObject w) (\ nm -> tkInvoke nm)
flash :: ButtonWidget w => w -> IO ()
invoke :: ButtonWidget w => w -> IO ()

-- | Internal.
buttonColours :: HasColour w => w -> ConfigID -> Bool


-- | <ul>
--   
--   <li>----------------------------------------------------------------------</li>
--   <li></li>
--   <li>module HTk.Kernel.TkVariables</li>
--   <li></li>
--   <li>author: ludi</li>
--   <li></li>
--   
--   <li>--------------------------------------------------------------------</li>
--   </ul>
module HTk.Kernel.TkVariables
newtype GUIValue a => TkVariable a
TkVariable :: ObjectID -> TkVariable a
class GUIObject w => HasVariable w where variable (TkVariable oid) w = cset w "variable" ("v" ++ show oid) >> return w
variable :: HasVariable w => TkVariable v -> Config w
createTkVariable :: GUIValue a => a -> IO (TkVariable a)
readTkVariable :: GUIValue a => TkVariable a -> IO a
setTkVariable :: GUIValue a => TkVariable a -> a -> IO ()


-- | Basic types and classes concerning toplevel window resources.
module HTk.Containers.Window

-- | Toplevel windows instantiate the <tt>class Window</tt>.
class GUIObject w => Window w where iconify win = cset win "state" Iconified >> done deiconify win = do { cset win "state" Deiconified; done } withdraw win = do { cset win "state" Withdrawn; done } putWinOnTop win = execMethod win (\ nm -> [tkPutOnTop nm]) putWinAtBottom win = execMethod win (\ nm -> [tkPutAtBottom nm]) screen "" win = cset win "screen" ":0.0" screen scr win = cset win "screen" scr getScreen win = cget win "screen" getClassName win = evalMethod win (\ nm -> [tkWInfoClass nm]) getWindowState win = cget win "state" aspectRatio ratio win = cset win "aspect" ratio getAspectRatio win = cget win "aspect" positionFrom w win = cset win "positionfrom" w getPositionFrom win = cget win "positionfrom" sizeFrom w win = cset win "sizefrom" w getSizeFrom win = cget win "sizefrom"
iconify :: Window w => w -> IO ()
deiconify :: Window w => w -> IO ()
withdraw :: Window w => w -> IO ()
putWinOnTop :: Window w => w -> IO ()
putWinAtBottom :: Window w => w -> IO ()
screen :: Window w => Display -> Config w
getScreen :: Window w => w -> IO (Display)
getClassName :: Window w => w -> IO String
getWindowState :: Window w => w -> IO WindowState
aspectRatio :: Window w => AspectRatio -> Config w
getAspectRatio :: Window w => w -> IO AspectRatio
positionFrom :: Window w => Whom -> Config w
getPositionFrom :: Window w => w -> IO Whom
sizeFrom :: Window w => Whom -> Config w
getSizeFrom :: Window w => w -> IO Whom
type Display = String

-- | Constraints the maximum size of the window.
maxSize :: Window w => Size -> Config w

-- | Gets the maximum size of the window.
getMaxSize :: Window w => w -> IO Size

-- | Constraints the minimum size of the window.
minSize :: Window w => Size -> Config w

-- | Gets the minimum size of the window.
getMinSize :: Window w => w -> IO Size

-- | Puts the first given window just above the second given window in the
--   stacking order.
raiseWin :: (Window w1, Window w2) => w1 -> w2 -> IO ()

-- | Puts the first given window just below the second given window in the
--   stacking order.
lowerWin :: (Window w1, Window w2) => w1 -> w2 -> IO ()

-- | The <tt>WindowState</tt> datatype.
data WindowState
Deiconified :: WindowState
Iconified :: WindowState
Withdrawn :: WindowState

-- | The <tt>AspectRatio</tt> datatype.
data AspectRatio

-- | The <tt>Whom</tt> datatype.
data Whom

-- | Internal.
isWMConfig :: ConfigID -> Bool
instance [overlap ok] Eq WindowState
instance [overlap ok] Ord WindowState
instance [overlap ok] Enum WindowState
instance [overlap ok] Eq AspectRatio
instance [overlap ok] Eq Whom
instance [overlap ok] Ord Whom
instance [overlap ok] Enum Whom
instance [overlap ok] Show Whom
instance [overlap ok] Read Whom
instance [overlap ok] GUIValue Whom
instance [overlap ok] Read AspectRatio
instance [overlap ok] Show AspectRatio
instance [overlap ok] GUIValue AspectRatio
instance [overlap ok] Show WindowState
instance [overlap ok] Read WindowState
instance [overlap ok] GUIValue WindowState
instance [overlap ok] (Window w, GUIValue v) => HasText w v
instance [overlap ok] Window w => HasPosition w
instance [overlap ok] Window w => HasSize w
instance [overlap ok] Window w => HasGeometry w


-- | This module exports basic types and classes on index positions, e.g.
--   inside an editor or entry widget.
module HTk.Components.Index

-- | The <tt>EndOfText</tt> datatype - a handle indexing the last position
--   inside the concerned widget.
data EndOfText
EndOfText :: EndOfText

-- | Internal.
class HasIndex w i b
getBaseIndex :: HasIndex w i b => w -> i -> IO b

-- | The <tt>BaseIndex</tt> datatype - an index handle specified by an
--   index number, an index position (line, char) or an index text (see
--   text marks).
data BaseIndex

-- | entries, listboxes
IndexNo :: Int -> BaseIndex

-- | text widgets
IndexPos :: Position -> BaseIndex

-- | listboxes, "end" etc.
IndexText :: String -> BaseIndex

-- | The <tt>Pixels</tt> datatype - a handle indexing a position inside a
--   widget with its coordinates.
data Pixels
Pixels :: Distance -> Distance -> Pixels

-- | The <tt>First</tt> datatype - a handle indexing the first entry e.g.
--   inside a listbox.
data First
First :: First

-- | The <tt>Last</tt> datatype - a handle indexing the last entry e.g.
--   inside a listbox.
data Last
Last :: Last
instance Eq EndOfText
instance Read BaseIndex
instance Show BaseIndex
instance GUIValue BaseIndex
instance Show Last
instance Show First
instance Show Pixels
instance GUIValue EndOfText
instance Read EndOfText
instance Show EndOfText


-- | This module provides funtionality for postscript export of the
--   contents of canvas widgets.
module HTk.Devices.Printer

-- | Widgets that support postscript export instantiate the <tt>class
--   HasPostscript</tt>.
class GUIObject w => HasPostscript w where postscript target confs = do { confstr <- showCreationConfigs confs; try (execMethod target (\ nm -> [tkPostScript nm confstr])) :: IO (Either SomeException ()); return () } where tkPostScript :: ObjectName -> String -> TclCmd tkPostScript name confstr = show name ++ " postscript " ++ confstr
postscript :: HasPostscript w => w -> [CreationConfig PostScript] -> IO ()

-- | The <tt>PostScript</tt> datatype.
data PostScript

-- | Sets the page height.
pageheight :: Distance -> CreationConfig PostScript

-- | Sets the page width.
pagewidth :: Distance -> CreationConfig PostScript

-- | Sets the output x coordinate of the anchor point.
pagex :: Distance -> CreationConfig PostScript

-- | Sets the output y coordinate of the anchor point.
pagey :: Distance -> CreationConfig PostScript

-- | If <tt>True</tt>, rotate so that X axis isthe long direction of the
--   page.
rotate :: Bool -> CreationConfig PostScript

-- | Sets the page anchor.
pageAnchor :: Anchor -> CreationConfig PostScript

-- | Sets the width of the area to print.
pswidth :: Distance -> CreationConfig PostScript

-- | Sets the height of the area to print.
psheight :: Distance -> CreationConfig PostScript

-- | Sets the width and height of the area to print.
pssize :: Size -> CreationConfig PostScript

-- | Sets the filename of the output file.
psfile :: String -> CreationConfig PostScript

-- | The <tt>ColourMode</tt> datatype.
data ColourMode
FullColourMode :: ColourMode
GrayScaleMode :: ColourMode
MonoChromeMode :: ColourMode

-- | Sets the colourmode.
colourmode :: ColourMode -> CreationConfig PostScript
instance Eq ColourMode
instance Ord ColourMode
instance Enum ColourMode
instance Show ColourMode
instance Read ColourMode
instance GUIValue ColourMode


-- | The <tt>module Screen</tt> exports general functionality on the
--   screen's properties.
module HTk.Devices.Screen

-- | The <tt>Screen</tt> datatype.
newtype Screen w
Screen :: w -> Screen w

-- | Gets the height of the screen.
getScreenHeight :: Window a => Screen a -> IO Distance

-- | Gets the width of the screen.
getScreenWidth :: Window a => Screen a -> IO Distance

-- | Gets the screen manager from a screen.
getScreenManager :: Window a => Screen a -> IO String

-- | The <tt>VisualClass</tt> datatype (see
--   <tt>Screen.getScreenVisual</tt>).
data VisualClass
DirectColour :: VisualClass
GrayScale :: VisualClass
PseudoColour :: VisualClass
StaticColour :: VisualClass
StaticGray :: VisualClass
TrueColour :: VisualClass

-- | Gets the visual properties of the screen.
getScreenVisual :: Window a => Screen a -> IO VisualClass
instance Eq VisualClass
instance Ord VisualClass
instance Enum VisualClass
instance Show VisualClass
instance Read VisualClass
instance GUIValue VisualClass


-- | Packing of widgets - HTk supports Tk's standard packer and grid
--   packer.
module HTk.Kernel.Packer

-- | Container widgets instantiate the abstract <tt>class Container</tt> to
--   enable packing.
class GUIObject a => Container a

-- | Packs a widget via the pack geometry manager.
pack :: Widget w => w -> [PackOption] -> IO ()

-- | Packs a widget via the grid geometry manager.
grid :: Widget w => w -> [GridPackOption] -> IO ()
data AbstractWidget
NONE :: AbstractWidget
instance Container AbstractWidget
instance GUIObject AbstractWidget


-- | A container widget with a preset packing orientation (for simple
--   packing).
module HTk.Containers.Box

-- | The <tt>Box</tt> datatype.
data Box

-- | Constructs a new box and returns a handler.
newBox :: Container par => par -> Flexibility -> [Config Box] -> IO Box

-- | Constructs a new box with horizontal packing order and rigid
--   flexibility and returns a handler.
newHBox :: Container par => par -> [Config Box] -> IO Box

-- | Constructs a new box with vertical packing order and rigid flexibility
--   and returns a handler.
newVBox :: Container par => par -> [Config Box] -> IO Box

-- | Constructs a new flexible box with horizontal packing order and
--   returns a handler.
newHFBox :: Container par => par -> [Config Box] -> IO Box

-- | Constructs a new flexible box with vertical packing order and returns
--   a handler.
newVFBox :: Container par => par -> [Config Box] -> IO Box
instance HasSize Box
instance HasOrientation Box
instance HasColour Box
instance HasBorder Box
instance Container Box
instance Widget Box
instance Synchronized Box
instance Destroyable Box
instance GUIObject Box
instance Eq Box


-- | HTk's <i>frame</i> widget. A frame is a simple container for widgets.
module HTk.Containers.Frame

-- | The <tt>Frame</tt> datatype.
data Frame

-- | Constructs a new frame widget and returns a handler.
newFrame :: Container par => par -> [Config Frame] -> IO Frame
instance Eq Frame
instance Synchronized Frame
instance HasSize Frame
instance HasColour Frame
instance HasBorder Frame
instance Container Frame
instance Widget Frame
instance Destroyable Frame
instance GUIObject Frame


-- | HTk's <i>toplevel</i> widget. A toplevel widget is a toplevel
--   container for widgets (a window).
module HTk.Containers.Toplevel

-- | The <tt>Toplevel</tt> datatype.
newtype Toplevel
Toplevel :: GUIOBJECT -> Toplevel

-- | Constructs a new toplevel widget and returns a handler.
createToplevel :: [Config Toplevel] -> IO Toplevel
tkGetToplevelConfig :: ObjectName -> ConfigID -> TclScript
tkSetToplevelConfigs :: ObjectName -> [ConfigOption] -> TclScript
instance [overlap ok] Eq Toplevel
instance [overlap ok] Window Toplevel
instance [overlap ok] Synchronized Toplevel
instance [overlap ok] Container Toplevel
instance [overlap ok] Widget Toplevel
instance [overlap ok] Destroyable Toplevel
instance [overlap ok] GUIObject Toplevel


-- | This module provides access to the terminal bell.
module HTk.Devices.Bell

-- | Rings the bell for the given window.
ringBell :: Window w => Maybe w -> IO ()

-- | Rings the bell.
bell :: IO ()


-- | This module provides access to bitmap resources.
module HTk.Components.BitMap

-- | The <tt>BitMap</tt> datatype.
data BitMap

-- | Constructs a new bitmap object and returns a handler. The bitmap
--   object can be packed like a widget, then it is implicitely displayed
--   inside a label widget.
newBitMap :: [Config BitMap] -> IO BitMap

-- | The <tt>BitMapHandle</tt> datatype - a handle for a bitmap resource.
data BitMapHandle
Predefined :: String -> BitMapHandle
BitMapHandle :: BitMap -> BitMapHandle
BitMapFile :: String -> BitMapHandle

-- | Containers for bitmaps instantiate the <tt>class HasBitMap</tt>.
class GUIObject w => HasBitMap w where bitmap d w = setBitMapHandle w "bitmap" (toBitMap d) True getBitMap w = getBitMapHandle w "bitmap"
bitmap :: (HasBitMap w, BitMapDesignator d) => d -> Config w
getBitMap :: HasBitMap w => w -> IO BitMapHandle

-- | Internal.
class BitMapDesignator d
toBitMap :: BitMapDesignator d => d -> BitMapHandle

-- | A handle for the predefined "error" bitmap.
errmap :: BitMapHandle

-- | A handle for the predefined "gray50" bitmap.
gray50 :: BitMapHandle

-- | A handle for the predefined "gray25" bitmap.
gray25 :: BitMapHandle

-- | A handle for the predefined "hourglass" bitmap.
hourglass :: BitMapHandle

-- | A handle for the predefined "info" bitmap.
info :: BitMapHandle

-- | A handle for the predefined "questhead" bitmap.
questhead :: BitMapHandle

-- | A handle for the predefined "question" bitmap.
question :: BitMapHandle

-- | A handle for the predefined "warning" bitmap.
warning :: BitMapHandle

-- | Internal.
setBitMapHandle :: GUIObject w => w -> ConfigID -> BitMapHandle -> Bool -> IO w

-- | Internal.
getBitMapHandle :: GUIObject w => w -> ConfigID -> IO BitMapHandle

-- | Internal.
stringToBitMapHandle :: String -> IO BitMapHandle
instance Eq BitMap
instance Synchronized BitMap
instance HasFile BitMap
instance HasSize BitMap
instance HasColour BitMap
instance HasBorder BitMap
instance Widget BitMap
instance Destroyable BitMap
instance GUIObject BitMap
instance BitMapDesignator [Char]
instance BitMapDesignator BitMap
instance BitMapDesignator BitMapHandle


-- | This module provides access to window icons.
module HTk.Components.Icon

-- | The <tt>Icon</tt> datatype.
data Window w => Icon w
Icon :: w -> Icon w

-- | Sets the corresponding icon mask.
iconMask :: (Window w, BitMapDesignator h) => h -> Config (Icon w)

-- | Gets the corresponding icon mask.
getIconMask :: Window w => Icon w -> IO BitMapHandle
instance (Eq w, Window w) => Eq (Icon w)
instance (Ord w, Window w) => Ord (Icon w)
instance Window w => Synchronized (Icon w)
instance Window w => HasPosition (Icon w)
instance (Window w, GUIValue v) => HasText (Icon w) v
instance Window w => HasBitMap (Icon w)
instance Window w => GUIObject (Icon w)


-- | This module provides functionality on the current focus.
module HTk.Components.Focus

-- | The <tt>CurrentFocus</tt> datatype.
data CurrentFocus

-- | The <tt>FocusModel</tt> datatype (focus model of a toplevel window).
data FocusModel
ActiveFocus :: FocusModel
PassiveFocus :: FocusModel

-- | Sets a window's focus model.
focusModel :: Window w => FocusModel -> Config w

-- | Gets a window's focus model.
getFocusModel :: Window w => w -> IO FocusModel

-- | Gets the current focus inside a window.
getFocus :: Window w => w -> IO (Maybe CurrentFocus)

-- | Sets the current for the containing window.
setFocus :: Widget w => w -> IO ()

-- | Forces the current focus for the containing window.
forceFocus :: Widget w => w -> IO ()

-- | Gets the last focused widget inside a window.
getRecentFocus :: Window w => w -> IO (Maybe CurrentFocus)

-- | The <tt>GrabStatus</tt> datatype.
data GrabStatus
Local :: GrabStatus
Global :: GrabStatus

-- | The <tt>CurrentGrab</tt> datatype.
data CurrentGrab
CurrentGrab :: GUIOBJECT -> CurrentGrab

-- | Grabs the focus local.
grabLocal :: Widget w => w -> IO ()

-- | Grabs the focus global.
grabGlobal :: Widget w => w -> IO ()

-- | Releases a focus grab.
releaseGrab :: Widget w => w -> IO ()
returnGrab :: Maybe CurrentGrab -> IO ()

-- | Gets the grab status from a widget.
getGrabStatus :: Widget w => w -> IO (Maybe GrabStatus)

-- | Gets the current grab.
getCurrentGrab :: IO (Maybe CurrentGrab)
instance Eq GrabStatus
instance Ord GrabStatus
instance Enum GrabStatus
instance Eq CurrentGrab
instance Eq FocusModel
instance Ord FocusModel
instance Enum FocusModel
instance Widget CurrentFocus
instance GUIObject CurrentFocus
instance Object CurrentFocus
instance Show FocusModel
instance Read FocusModel
instance GUIValue FocusModel
instance Widget CurrentGrab
instance GUIObject CurrentGrab
instance Object CurrentGrab
instance Show GrabStatus
instance Read GrabStatus
instance GUIValue GrabStatus


-- | Basic types and classes concerning insertion cursors in entry and text
--   fields.
module HTk.Components.ICursor

-- | The <tt>ICursor</tt> datatype.
newtype ICursor w
ICursor :: w -> ICursor w

-- | Widgets with an insertion cursor instantiate the <tt>class
--   HasInsertionCursor</tt>.
class Widget w => HasInsertionCursor w

-- | Widgets from which you can get the index of the insertion cursor
--   instantiate the <tt>class HasInsertionCursorIndexSet</tt>.
class HasInsertionCursor w => HasInsertionCursorIndexGet w i
getInsertionCursor :: HasInsertionCursorIndexGet w i => w -> IO i

-- | Widgets with an insertion cursor that can be set to a specific index
--   instantiate the <tt>class HasInsertionCursorIndexSet</tt>.
class HasInsertionCursor w => HasInsertionCursorIndexSet w i
insertionCursor :: HasInsertionCursorIndexSet w i => i -> Config w

-- | Sets the time the insertion cursor blinks off (in milliseconds, zero
--   disables blinking).
insertOffTime :: HasInsertionCursor w => Int -> Config (ICursor w)

-- | Gets the time the insertion cursor blinks off.
getInsertOffTime :: HasInsertionCursor w => ICursor w -> IO Int

-- | Sets the time the insertion cursor blinks on (in milliseconds).
insertOnTime :: HasInsertionCursor w => Int -> Config (ICursor w)

-- | Gets the time the insertion cursor blinks on.
getInsertOnTime :: HasInsertionCursor w => (ICursor w) -> IO Int
instance (HasInsertionCursor w, Widget w) => HasSize (ICursor w)
instance (HasInsertionCursor w, Widget w) => HasBorder (ICursor w)
instance (HasInsertionCursor w, Widget w) => HasColour (ICursor w)
instance GUIObject w => GUIObject (ICursor w)


-- | This module provides access to image resources from files or base64
--   encoded strings.
module HTk.Components.Image

-- | Image containers instantiate the <tt>class HasPhoto</tt>.
class GUIObject w => HasPhoto w where photo img w = imageToInt img >>= cset w "image" getPhoto w = cget w "image" >>= intToImage
photo :: HasPhoto w => Image -> Config w
getPhoto :: HasPhoto w => w -> IO (Maybe Image)

-- | The <tt>Image</tt> datatype.
data Image

-- | Constructs a new image object and returns a handler. The image object
--   can be packed like a widget, then it is implicitely displayed inside a
--   label widget.
newImage :: [Config Image] -> IO Image

-- | Internal.
intToImage :: Int -> IO (Maybe Image)

-- | Internal.
imageToInt :: Image -> IO Int

-- | The <tt>Format</tt> datatype - represents the format of a base64
--   encoded image (see <tt>Image.imgData</tt>).
data Format
GIF :: Format
PPM :: Format
PGM :: Format

-- | Sets the image data from a base64 encoded string.
imgData :: Format -> String -> Config Image

-- | The <tt>gamma</tt> correction factor. Values less than one darken the
--   image, values greater than one brighten up the image.
imgGamma :: Double -> Config Image
imgPalette :: PaletteSpec p => p -> Config Image
instance Eq Image
instance Synchronized Image
instance HasFile Image
instance HasSize Image
instance HasColour Image
instance HasBorder Image
instance Widget Image
instance Destroyable Image
instance GUIObject Image
instance PaletteSpec (Int, Int, Int)
instance PaletteSpec Int


-- | This module provides access to a widgets selection (e.g. inside a
--   listbox, editor or entry widget).
module HTk.Components.Selection

-- | The <tt>Selection</tt> datatype.
newtype Selection w
Selection :: w -> Selection w

-- | A widget with a selectable content instantiates the <tt>class
--   HasSelection</tt>.
class GUIObject w => HasSelection w
clearSelection :: HasSelection w => w -> IO ()

-- | A widget with a indexable selection instantiates the <tt>class
--   HasSelectionIndex</tt>.
class HasSelectionIndex w i
selection :: HasSelectionIndex w i => i -> Config w
isSelected :: HasSelectionIndex w i => w -> i -> IO Bool

-- | A widget with an indexable selection base instantiates the <tt>class
--   HasSelectionBaseIndex</tt>.
class HasSelectionBaseIndex w i
getSelection :: HasSelectionBaseIndex w i => w -> IO (Maybe i)

-- | A widget with an indexable selection range instantiates the <tt>class
--   HasSelectionIndexRange</tt>.
class HasSelectionIndexRange w i1 i2
selectionRange :: HasSelectionIndexRange w i1 i2 => i1 -> i2 -> Config w

-- | A widget with an indexable selection index range instantiates the
--   <tt>class HasSelectionBaseIndexRange</tt>.
class HasSelectionIndex w i => HasSelectionBaseIndexRange w i where getSelectionRange w = do { start <- getSelectionStart w; end <- getSelectionEnd w; case (start, end) of { ((Just start), (Just end)) -> return (Just (start, end)) _ -> return Nothing } }
getSelectionStart :: HasSelectionBaseIndexRange w i => w -> IO (Maybe i)
getSelectionEnd :: HasSelectionBaseIndexRange w i => w -> IO (Maybe i)
getSelectionRange :: HasSelectionBaseIndexRange w i => w -> IO (Maybe (i, i))
instance (HasSelection w, Widget w) => HasBorder (Selection w)
instance (HasSelection w, Widget w) => HasColour (Selection w)
instance GUIObject w => GUIObject (Selection w)


-- | This module provides access to the X selection.
module HTk.Devices.XSelection

-- | Widgets that have an X selection instantiate the <tt>class
--   HasXSelection</tt>.
class HasSelection w => HasXSelection w where exportSelection b w = cset w "exportselection" b getExportSelection w = cget w "exportselection"
exportSelection :: HasXSelection w => Bool -> Config w
getExportSelection :: HasXSelection w => w -> IO Bool

-- | The <tt>XSelection</tt> datatype.
data XSelection
PRIMARY :: XSelection
CLIPBOARD :: XSelection

-- | Clears the X selection.
clearXSelection :: GUIObject a => Screen a -> XSelection -> IO ()

-- | Gets the current X selection.
getXSelection :: (GUIObject a, GUIValue b) => Screen a -> XSelection -> TargetType -> IO b
instance Eq XSelection
instance Ord XSelection
instance Show XSelection
instance Read XSelection
instance GUIValue XSelection


-- | The <tt>module Slider</tt> implements configuration options for
--   widgets with sliders (scale widgets and scrollbars).
module HTk.Components.Slider

-- | The <tt>Slider</tt> datatype.
newtype Slider w
Slider :: w -> Slider w

-- | Widgets with sliders (scale widget, scrollbar) instantiate the
--   <tt>class HasSlider</tt>.
class Widget w => HasSlider w where repeatInterval c w = cset w "repeatinterval" c getRepeatInterval w = cget w "repeatinterval" repeatDelay c w = cset w "repeatdelay" c getRepeatDelay w = cget w "repeatdelay"
repeatInterval :: HasSlider w => Int -> Config (Slider w)
getRepeatInterval :: HasSlider w => (Slider w) -> IO Int
repeatDelay :: HasSlider w => Int -> Config (Slider w)
getRepeatDelay :: HasSlider w => (Slider w) -> IO Int
instance (HasSlider w, GUIObject w) => HasColour (Slider w)
instance GUIObject w => GUIObject (Slider w)


-- | HTk's <i>LabelFrame</i> widget. A labelled container for widgets. This
--   widget is from the Tix library and therefore only available if Tix is
--   installed. When Tix is not available, a normal frame widget will be
--   used instead.
module HTk.Tix.LabelFrame

-- | The <tt>LabelFrame</tt> datatype.
data LabelFrame

-- | Constructs a new label frame and returns it as a value.
newLabelFrame :: Container par => par -> [Config LabelFrame] -> IO LabelFrame

-- | You can specify the side to display the label.
labelSide :: LabelSide -> Config LabelFrame

-- | Gets the side where the label is displayed.
getLabelSide :: LabelFrame -> IO LabelSide

-- | The <tt>LabelSide</tt> datatype.
data LabelSide
TopLabel :: LabelSide
LeftLabel :: LabelSide
RightLabel :: LabelSide
BottomLabel :: LabelSide
NoLabel :: LabelSide
AcrossTopLabel :: LabelSide
instance Eq LabelFrame
instance Synchronized LabelFrame
instance GUIValue v => HasText LabelFrame v
instance HasSize LabelFrame
instance HasTooltip LabelFrame
instance HasColour LabelFrame
instance HasBorder LabelFrame
instance Container LabelFrame
instance Widget LabelFrame
instance Destroyable LabelFrame
instance GUIObject LabelFrame
instance GUIValue LabelSide
instance Show LabelSide
instance Read LabelSide


-- | HTk's <i>notebook</i> and <i>notebook pages</i>. This widget is from
--   the Tix library and therefore only available if you are using tixwish.
module HTk.Tix.NoteBook

-- | The <tt>NoteBook</tt> datatype.
data NoteBook

-- | The <tt>NoteBookPage</tt> datatype - a single page of a notebook.
data NoteBookPage

-- | Constructs a new notebook widget and returns it as a value.
newNoteBook :: Container par => par -> [Config NoteBook] -> IO NoteBook

-- | Constructs a new page inside a notebook widget and returns it as a
--   value.
createNoteBookPage :: NoteBook -> String -> [Config NoteBookPage] -> IO NoteBookPage
instance Eq NoteBook
instance Eq NoteBookPage
instance Synchronized NoteBookPage
instance HasColour NoteBookPage
instance HasTooltip NoteBookPage
instance HasBorder NoteBookPage
instance GUIValue a => HasText NoteBookPage a
instance Container NoteBookPage
instance Widget NoteBookPage
instance Destroyable NoteBookPage
instance GUIObject NoteBookPage
instance Synchronized NoteBook
instance Destroyable NoteBook
instance Widget NoteBook
instance HasSize NoteBook
instance GUIObject NoteBook


-- | HTk's <i>PanedWindow</i>. A paned window is a container widget, that
--   is divided into scaleable horizontal or vertical panes.
module HTk.Tix.PanedWindow

-- | The <tt>PanedWindow</tt> datatype.
data PanedWindow

-- | Constructs a new paned window and returns it as a value.
newPanedWindow :: Container par => par -> Orientation -> [Config PanedWindow] -> IO PanedWindow

-- | The <tt>Pane</tt> datatype - a pane inside a paned window.
data Pane

-- | Constructs a new pane inside a paned window and returns it as a value.
createPane :: PanedWindow -> [CreationConfig Pane] -> [Config Pane] -> IO Pane

-- | Specifies that the new pane should be placed after pane in the list of
--   panes in this PanedWindow widget (this is an initial configuration
--   that cannot be changed later).
after :: Pane -> CreationConfig Pane

-- | Specifies that the new pane should be placed before pane in the list
--   of panes in this PanedWindow widget (this is an initial configuration
--   that cannot be changed later).
before :: Pane -> CreationConfig Pane

-- | Specifies the position of the new pane in the list of panes in this
--   PanedWindow widget. 0 means the first position, 1 means the second,
--   and so on.
at :: Int -> CreationConfig Pane

-- | Specifies the expand/shrink factor of this pane as a non-negative
--   floating point number. The default value is 0.0. The expand/shrink
--   factor is used to calculate how much each pane should grow or shrink
--   when the size of the PanedWindow main window is changed. When the main
--   window expands/shrinks by n pixels, then pane i will grow/shrink by
--   about n * factor(i) / summation(factors), where factor(i) is the
--   expand/shrink factor of pane i and summation(factors) is the summation
--   of the expand/shrink factors of all the panes. If summation(factors)
--   is 0.0, however, only the last visible pane will be grown or shrunk.
expand :: Double -> CreationConfig Pane

-- | Specifies the minimum size, in pixels, of the new pane; the default is
--   0.
minsize :: Int -> CreationConfig Pane

-- | Specifies the maximum size, in pixels, of the new pane; the default is
--   10000.
maxsize :: Int -> CreationConfig Pane

-- | Specifies the size, in pixels, of the new pane; if the -size option is
--   not given, the PanedWindow widget will use the natural size of the
--   pane subwidget.
initsize :: Int -> CreationConfig Pane
instance Eq PanedWindow
instance Eq Pane
instance Synchronized Pane
instance Container Pane
instance HasColour Pane
instance Widget Pane
instance Destroyable Pane
instance GUIObject Pane
instance Synchronized PanedWindow
instance Widget PanedWindow
instance Destroyable PanedWindow
instance HasSize PanedWindow
instance GUIObject PanedWindow

module HTk.Tix.Subwidget

-- | Tix mega widgets are composed of several subwidgets. As it is
--   sometimes important to access these subwidgets, there is a way in Htk
--   of creating widgets as subwidgets by instanciating the <tt>class
--   CanBeSubwidget</tt>.
--   
--   Use createAsSubwidget instead of the normal constructor
--   new[WidgetName].
class Widget w => CanBeSubwidget w
createAsSubwidget :: CanBeSubwidget w => GUIOBJECT -> IO w

-- | Using the function createSubwidget, instantiating the <tt>class
--   CanBeSubwidget</tt> should be easy, compare as an example
--   instantiation of the <tt>Entry</tt> widget.
createSubwidget :: ObjectKind -> Methods -> GUIOBJECT -> IO GUIOBJECT


-- | HTk's <i>menus</i>. A <tt>Menu</tt> is a container for menu
--   structures.
module HTk.Menuitems.Menu

-- | The <tt>Menu</tt> datatype.
data Menu
Menu :: GUIOBJECT -> (Ref Int) -> Menu

-- | Containers for menus (toplevel windows and menubuttons) instantiate
--   the <tt>class HasMenu</tt>.
class GUIObject w => HasMenu w where menu m w = do { let (GUIOBJECT _ mostref) = toGUIObject m; most <- getRef mostref; cset w "menu" (show (objectname most)) }
menu :: HasMenu w => Menu -> Config w
createMenu :: GUIObject par => par -> Bool -> [Config Menu] -> IO Menu

-- | Posts a menu (e.g. in respose of a keystroke or mousebutton press).
popup :: GUIObject i => Menu -> Position -> Maybe i -> IO ()

-- | Displays a menu at the specified position.
post :: Menu -> Position -> IO ()

-- | Unmaps the menu.
unpost :: Menu -> IO ()
instance [overlap ok] HasFont Menu
instance [overlap ok] HasColour Menu
instance [overlap ok] HasBorder Menu
instance [overlap ok] Synchronized Menu
instance [overlap ok] Widget Menu
instance [overlap ok] Destroyable Menu
instance [overlap ok] GUIObject Menu
instance [overlap ok] Eq Menu
instance [overlap ok] Window w => HasMenu w


-- | The <tt>module MenuItem</tt> exports general resources for menu items.
module HTk.Menuitems.MenuItem

-- | Menu items instantiate the abstract <tt>class MenuItem</tt>.
class GUIObject w => MenuItem w

-- | Internal.
createMenuItem :: MenuItem w => Menu -> MenuItemKind -> (GUIOBJECT -> w) -> [Config w] -> IO w

-- | Internal.
menuItemMethods :: Methods

-- | Coloured objects instantiate the <tt>class HasColour</tt>.
class GUIObject w => HasColour w where legalColourID _ "background" = True legalColourID _ _ = False setColour w cid col = if legalColourID w cid then cset w cid col else return w getColour w cid = if legalColourID w cid then cget w cid else return cdefault
legalColourID :: HasColour w => w -> ConfigID -> Bool
setColour :: HasColour w => w -> ConfigID -> Colour -> IO w
getColour :: HasColour w => w -> ConfigID -> IO Colour

-- | Image containers instantiate the <tt>class HasPhoto</tt>.
class GUIObject w => HasPhoto w where photo img w = imageToInt img >>= cset w "image" getPhoto w = cget w "image" >>= intToImage
photo :: HasPhoto w => Image -> Config w
getPhoto :: HasPhoto w => w -> IO (Maybe Image)

-- | A select button can be selected or not selected.
class ButtonWidget w => SelectButton w where selectionState On w = execMethod (toGUIObject w) (\ nm -> tkSelect nm) >> return w selectionState Off w = execMethod (toGUIObject w) (\ nm -> tkDeselect nm) >> return w
selectionState :: SelectButton w => Toggle -> Config w
getSelectionState :: SelectButton w => w -> IO Toggle
selectionStateSet :: SelectButton w => w -> Event Toggle

-- | The state of a <tt>ToggleButton</tt> can be toggled.
class SelectButton w => ToggleButton w where toggleButton w = execMethod (toGUIObject w) (\ nm -> tkToggle nm)
toggleButton :: ToggleButton w => w -> IO ()

-- | Menu items can have an optional text to display as a reminder about a
--   keystroke binding.
class GUIObject w => HasAccelerator w where accelerator s w = cset w "accelerator" s getAccelerator w = cget w "accelerator"
accelerator :: HasAccelerator w => String -> Config w
getAccelerator :: HasAccelerator w => w -> IO String

-- | Internal.
buttonColours :: HasColour w => w -> ConfigID -> Bool


-- | HTk's menuitem <i>indicators</i>. Indicators are displayed with menu
--   checkbuttons, menu buttons and menu radiobuttons.
module HTk.Menuitems.Indicator

-- | The <tt>Indicator</tt> datatype.
data Indicator a
Indicator :: a -> Indicator a

-- | Coloured objects instantiate the <tt>class HasColour</tt>.
class GUIObject w => HasColour w where legalColourID _ "background" = True legalColourID _ _ = False setColour w cid col = if legalColourID w cid then cset w cid col else return w getColour w cid = if legalColourID w cid then cget w cid else return cdefault
legalColourID :: HasColour w => w -> ConfigID -> Bool
setColour :: HasColour w => w -> ConfigID -> Colour -> IO w
getColour :: HasColour w => w -> ConfigID -> IO Colour

-- | Image containers instantiate the <tt>class HasPhoto</tt>.
class GUIObject w => HasPhoto w where photo img w = imageToInt img >>= cset w "image" getPhoto w = cget w "image" >>= intToImage
photo :: HasPhoto w => Image -> Config w
getPhoto :: HasPhoto w => w -> IO (Maybe Image)

-- | A select button can be selected or not selected.
class ButtonWidget w => SelectButton w where selectionState On w = execMethod (toGUIObject w) (\ nm -> tkSelect nm) >> return w selectionState Off w = execMethod (toGUIObject w) (\ nm -> tkDeselect nm) >> return w
selectionState :: SelectButton w => Toggle -> Config w
getSelectionState :: SelectButton w => w -> IO Toggle
selectionStateSet :: SelectButton w => w -> Event Toggle

-- | Menu items that can have an indicator instantiate the <tt>class
--   HasIndicator</tt>.
class GUIObject w => HasIndicator w where indicator i w = cset w "indicatoron" i getIndicator w = cget w "indicatoron"
indicator :: HasIndicator w => Toggle -> Config w
getIndicator :: HasIndicator w => w -> IO Toggle
instance HasIndicator GUIOBJECT
instance (HasIndicator w, SelectButton w) => HasPhoto (Indicator w)
instance (HasIndicator w, SelectButton w) => HasColour (Indicator w)
instance HasIndicator w => GUIObject (Indicator w)


-- | HTk's <i>menu cascade item</i>. A containers for cascaded menus.
module HTk.Menuitems.MenuCascade

-- | The <tt>MenuCascade</tt> datatype.
data MenuCascade

-- | Constructs a new menu cascasde item and returns a handler.
createMenuCascade :: Menu -> [Config MenuCascade] -> IO MenuCascade

-- | Utility function: create a pulldown menu
createPulldownMenu :: Menu -> [Config MenuCascade] -> IO Menu
instance HasUnderline MenuCascade
instance GUIValue v => HasText MenuCascade v
instance HasSize MenuCascade
instance HasPhoto MenuCascade
instance HasIndicator MenuCascade
instance HasJustify MenuCascade
instance HasFont MenuCascade
instance HasEnable MenuCascade
instance HasColour MenuCascade
instance HasBorder MenuCascade
instance HasBitMap MenuCascade
instance HasAccelerator MenuCascade
instance Synchronized MenuCascade
instance GUIObject MenuCascade
instance Eq MenuCascade
instance MenuItem MenuCascade
instance HasMenu MenuCascade


-- | HTk's <i>menu checkbutton</i>. A simple checkbutton inside a menu
--   associated with a polymorphic variable.
module HTk.Menuitems.MenuCheckButton

-- | The <tt>MenuCheckButton</tt> datatype.
data MenuCheckButton

-- | Constructs a new menu checkbutton and returns a handler.
createMenuCheckButton :: Menu -> [Config MenuCheckButton] -> IO MenuCheckButton
instance HasCommand MenuCheckButton
instance GUIValue v => HasValue MenuCheckButton v
instance HasVariable MenuCheckButton
instance HasUnderline MenuCheckButton
instance GUIValue v => HasText MenuCheckButton v
instance HasSize MenuCheckButton
instance HasPhoto MenuCheckButton
instance HasIndicator MenuCheckButton
instance HasJustify MenuCheckButton
instance HasFont MenuCheckButton
instance HasEnable MenuCheckButton
instance HasColour MenuCheckButton
instance HasBorder MenuCheckButton
instance HasBitMap MenuCheckButton
instance HasAccelerator MenuCheckButton
instance Synchronized MenuCheckButton
instance GUIObject MenuCheckButton
instance Eq MenuCheckButton
instance MenuItem MenuCheckButton


-- | HTk's <i>menu command</i>. A simple command inside a menu.
module HTk.Menuitems.MenuCommand

-- | The <tt>MenuCommand</tt> datatype.
data MenuCommand

-- | Constructs a new menu command and returns a handler.
createMenuCommand :: Menu -> [Config MenuCommand] -> IO MenuCommand
instance HasCommand MenuCommand
instance HasUnderline MenuCommand
instance GUIValue v => HasText MenuCommand v
instance HasSize MenuCommand
instance HasPhoto MenuCommand
instance HasIndicator MenuCommand
instance HasJustify MenuCommand
instance HasFont MenuCommand
instance HasEnable MenuCommand
instance HasColour MenuCommand
instance HasBorder MenuCommand
instance HasBitMap MenuCommand
instance HasAccelerator MenuCommand
instance Synchronized MenuCommand
instance GUIObject MenuCommand
instance Eq MenuCommand
instance MenuItem MenuCommand


-- | HTk's <i>menu radiobutton</i>. A simple radiobutton inside a menu
--   associated with a polymorphic variable.
module HTk.Menuitems.MenuRadioButton

-- | The <tt>MenuRadioButton</tt> datatype.
data MenuRadioButton

-- | Constructs a new menu radiobutton and returns a handler.
createMenuRadioButton :: Menu -> [Config MenuRadioButton] -> IO MenuRadioButton
instance Eq MenuRadioButton
instance HasCommand MenuRadioButton
instance GUIValue v => HasValue MenuRadioButton v
instance HasVariable MenuRadioButton
instance HasUnderline MenuRadioButton
instance GUIValue v => HasText MenuRadioButton v
instance HasSize MenuRadioButton
instance HasPhoto MenuRadioButton
instance HasIndicator MenuRadioButton
instance HasJustify MenuRadioButton
instance HasFont MenuRadioButton
instance HasEnable MenuRadioButton
instance HasColour MenuRadioButton
instance HasBorder MenuRadioButton
instance HasBitMap MenuRadioButton
instance HasAccelerator MenuRadioButton
instance Synchronized MenuRadioButton
instance GUIObject MenuRadioButton
instance MenuItem MenuRadioButton


-- | HTk's <i>menu separator</i>. A simple separator to group menu entries.
module HTk.Menuitems.MenuSeparator

-- | The <tt>MenuSeparator</tt> datatype.
data MenuSeparator

-- | Constructs a new menu separator and returns a handler.
createMenuSeparator :: Menu -> [Config MenuSeparator] -> IO MenuSeparator
instance Eq MenuSeparator
instance HasSize MenuSeparator
instance HasOrientation MenuSeparator
instance HasBorder MenuSeparator
instance Synchronized MenuSeparator
instance GUIObject MenuSeparator
instance MenuItem MenuSeparator


-- | HTk's <i>button widget</i>. A simple click button.
module HTk.Widgets.Button

-- | The <tt>Button</tt> datatype.
data Button

-- | Constructs a new button widget and returns a handler.
newButton :: Container par => par -> [Config Button] -> IO Button
instance Eq Button
instance HasAnchor Button
instance HasTooltip Button
instance HasCommand Button
instance Synchronized Button
instance HasUnderline Button
instance GUIValue v => HasText Button v
instance HasSize Button
instance HasPhoto Button
instance HasJustify Button
instance HasFont Button
instance HasEnable Button
instance HasColour Button
instance HasBorder Button
instance HasBitMap Button
instance ButtonWidget Button
instance Widget Button
instance Destroyable Button
instance GUIObject Button


-- | HTk's <i>scrollbar</i> widget.
--   
--   A scroll bar is a widget which controls scrolling.
module HTk.Widgets.ScrollBar

-- | Scrollable widgets instantiate <tt>class HasScroller</tt>.
class Widget w => HasScroller w where isWfOrientation _ _ = True scrollbar Horizontal sc w | isWfOrientation w Horizontal = do { cset sc "command" (TkCommand (varname w ++ " xview")); execTclScript [tkDeclScrollVar w]; cset w "xscrollcommand" (TkCommand (varname sc ++ " set")); execTclScript [tkDeclScrollVar sc]; return w } scrollbar Vertical sc w | isWfOrientation w Vertical = do { cset sc "command" (TkCommand (varname w ++ " yview")); execTclScript [tkDeclScrollVar w]; cset w "yscrollcommand" (TkCommand (varname sc ++ " set")); execTclScript [tkDeclScrollVar sc]; return w } scrollbar _ _ w = return w moveto ax w f | isWfOrientation w ax = execMethod w (\ nm -> [tkMoveTo ax nm f]) moveto _ _ _ = done scroll ax w num what | isWfOrientation w ax = execMethod w (\ nm -> [tkScroll ax nm num what]) scroll ax w num what = done view ax w = do { FractionPair os vis <- (evalMethod w (tkView ax) :: IO FractionPair); return (os, vis) }
isWfOrientation :: HasScroller w => w -> Orientation -> Bool
scrollbar :: HasScroller w => Orientation -> ScrollBar -> Config w
moveto :: HasScroller w => Orientation -> w -> Fraction -> IO ()
scroll :: HasScroller w => Orientation -> w -> Int -> ScrollUnit -> IO ()
view :: HasScroller w => Orientation -> w -> IO (Fraction, Fraction)

-- | The <tt>ScrollBar</tt> datatype.
data ScrollBar

-- | Constructs a new scrollbar widget and returns a handler.
newScrollBar :: Container par => par -> [Config ScrollBar] -> IO ScrollBar

-- | The <tt>ScrollUnit</tt> datatype - units for scrolling operations.
data ScrollUnit
Units :: ScrollUnit
Pages :: ScrollUnit

-- | The <tt>Slider</tt> datatype.
newtype Slider w
Slider :: w -> Slider w

-- | Widgets with sliders (scale widget, scrollbar) instantiate the
--   <tt>class HasSlider</tt>.
class Widget w => HasSlider w where repeatInterval c w = cset w "repeatinterval" c getRepeatInterval w = cget w "repeatinterval" repeatDelay c w = cset w "repeatdelay" c getRepeatDelay w = cget w "repeatdelay"
repeatInterval :: HasSlider w => Int -> Config (Slider w)
getRepeatInterval :: HasSlider w => (Slider w) -> IO Int
repeatDelay :: HasSlider w => Int -> Config (Slider w)
getRepeatDelay :: HasSlider w => (Slider w) -> IO Int

-- | The <tt>ScrollBarElem</tt> datatype - representing the elements of the
--   scrollbar.
data ScrollBarElem
Arrow1 :: ScrollBarElem
Trough1 :: ScrollBarElem
ScrollBarSlider :: ScrollBarElem
Trough2 :: ScrollBarElem
Arrow2 :: ScrollBarElem

-- | Sets the active element (which can be arrow1, arrow2 or slider).
activateScrollBarElem :: ScrollBar -> ScrollBarElem -> IO ()

-- | Gets the active element (arrow1, arrow2 or slider).
getActivatedElem :: ScrollBar -> IO (Maybe ScrollBarElem)

-- | Fractions are floating point values between 0 and 1 representing
--   relative positions within the scrolled range.
type Fraction = Double

-- | Returns a fraction between 0 and 1 indicating the relative location of
--   the given position in the through.
fraction :: ScrollBar -> Position -> IO Fraction

-- | Returns the <tt>ScrollBarElem</tt> to indicate what is under the given
--   position.
identify :: ScrollBar -> Position -> IO (Maybe ScrollBarElem)

-- | Sets the scrollbar parameters.
setView :: ScrollBar -> Fraction -> Fraction -> IO ()
instance Eq ScrollBar
instance Eq ScrollBarElem
instance Ord ScrollBarElem
instance Enum ScrollBarElem
instance Show ScrollUnit
instance Read ScrollUnit
instance GUIValue ScrollUnit
instance Show ScrollBarElem
instance Read ScrollBarElem
instance GUIValue ScrollBarElem
instance HasTooltip ScrollBar
instance HasOrientation ScrollBar
instance HasSlider ScrollBar
instance HasSize ScrollBar
instance HasEnable ScrollBar
instance HasColour ScrollBar
instance HasBorder ScrollBar
instance Widget ScrollBar
instance Destroyable ScrollBar
instance GUIObject ScrollBar
instance Read FractionPair
instance Show FractionPair
instance GUIValue FractionPair


-- | HTk's <a>strong</a>canvas widget<a>/strong</a>.<a>br</a> A canvas is a
--   drawing pad, that can also contain widgets in embedded
--   windows.<a>br</a> A canvas widget contains <a>strong</a>canvas
--   items<a>/strong</a>.
module HTk.Widgets.Canvas

-- | The <tt>Canvas</tt> datatype.
data Canvas

-- | Constructs a new canvas widget and returns a handler.
newCanvas :: Container par => par -> [Config Canvas] -> IO Canvas

-- | Sets the maximum distance from the mouse to an overlapped object.
closeEnough :: Double -> Canvas -> IO Canvas

-- | Selector for the maximum distance from the mouse to an overlapped
--   object.
getCloseEnough :: Canvas -> IO Double

-- | <tt>True</tt> constraints view to the scroll region.
confine :: Bool -> Canvas -> IO Canvas

-- | Selector for the <tt>confine</tt> configuration, constraints view to
--   the scroll region if <tt>True</tt>.
getConfine :: Canvas -> IO Bool

-- | Maps from screen X or Y coordinates (orientation parameter) to the
--   corresponding coordinates in canvas space.
screenToCanvasCoord :: Canvas -> Orientation -> Distance -> Maybe Distance -> IO Distance

-- | The <tt>ScrollRegion</tt> datatype (scrollable region of the canvas
--   widget).
type ScrollRegion = (Position, Position)

-- | Sets the scrollable region for a canvas widget.
scrollRegion :: ScrollRegion -> Canvas -> IO Canvas

-- | Gets the applied scroll region from a canvas widget.
getScrollRegion :: Canvas -> IO ScrollRegion

-- | Sets the distance for one scrolling unit.
scrollIncrement :: Orientation -> Distance -> Canvas -> IO Canvas
instance Eq Canvas
instance GUIObject c => HasBBox Canvas c
instance HasTooltip Canvas
instance Synchronized Canvas
instance HasPostscript Canvas
instance HasScroller Canvas
instance HasSize Canvas
instance HasEnable Canvas
instance HasColour Canvas
instance HasBorder Canvas
instance Container Canvas
instance Widget Canvas
instance Destroyable Canvas
instance GUIObject Canvas


-- | The <tt>module CanvasItem</tt> exports basic classes and general
--   functionality on canvas items.
module HTk.Canvasitems.CanvasItem

-- | The <tt>Canvas</tt> datatype.
data Canvas

-- | You can set the coords (position / size) of a canvas item on the
--   parent canvas.
class HasCoords w
coord :: HasCoords w => Coord -> Config w
getCoord :: HasCoords w => w -> IO Coord

-- | Any canvas item is an instance of the abstract <tt>class
--   CanvasItem</tt>.
class GUIObject w => CanvasItem w

-- | Any canvas item has a filling, outline, outline width and stipple
--   configuration.
class CanvasItem w => FilledCanvasItem w where filling c w = cset w "fill" (toColour c) getFilling w = cget w "fill" outline c w = cset w "outline" (toColour c) getOutline w = cget w "outline" stipple b w = setBitMapHandle w "stipple" b True getStipple w = getBitMapHandle w "stipple" outlinewidth b w = cset w "width" b getOutlineWidth w = cget w "width"
filling :: (FilledCanvasItem w, ColourDesignator c) => c -> Config w
getFilling :: FilledCanvasItem w => w -> IO Colour
outline :: (FilledCanvasItem w, ColourDesignator c) => c -> Config w
getOutline :: FilledCanvasItem w => w -> IO Colour
stipple :: FilledCanvasItem w => BitMapHandle -> Config w
getStipple :: FilledCanvasItem w => w -> IO BitMapHandle
outlinewidth :: FilledCanvasItem w => Distance -> Config w
getOutlineWidth :: FilledCanvasItem w => w -> IO Distance

-- | Segmented canvas items have a splinesteps and smooth configuration.
class CanvasItem w => SegmentedCanvasItem w where splinesteps c w = cset w "splinesteps" c getSplinesteps w = cget w "splinesteps" smooth c w = cset w "smooth" c getSmooth w = cget w "smooth"
splinesteps :: SegmentedCanvasItem w => Int -> Config w
getSplinesteps :: SegmentedCanvasItem w => w -> IO Int
smooth :: SegmentedCanvasItem w => Bool -> Config w
getSmooth :: SegmentedCanvasItem w => w -> IO Bool

-- | Moves a canvas item horizontally and vertically by the given
--   distances.
moveItem :: (Synchronized w, CanvasItem w) => w -> Distance -> Distance -> IO ()

-- | Scales a canvas item horizontally and vertically by the given
--   distances.
scaleItem :: (Synchronized w, CanvasItem w) => w -> Distance -> Distance -> Double -> Double -> IO ()

-- | Moves an item above another item in the display list.
raiseItem :: (CanvasItem ci, CanvasItem w) => ci -> w -> IO ()

-- | Moves an item below another item in the display list.
lowerItem :: (CanvasItem ci, CanvasItem w) => ci -> w -> IO ()

-- | Puts an item on top of the display list.
putItemOnTop :: CanvasItem w => w -> IO ()

-- | Puts an items at bottom of the display list.
putItemAtBottom :: CanvasItem ci => ci -> IO ()

-- | Exception raised by <tt>CanasItem.onSameCanvas</tt>.
itemsNotOnSameCanvas :: IOError

-- | Retrieve all tagnames in a complex tag expression and declare them
--   global in form of a TclScript
declVar :: CanvasTagOrID -> TclScript

-- | Retrieve all tagnames in a complex tag expression and declare them
--   global in form of a TclCmd
declVarList :: CanvasTagOrID -> TclCmd
instance CanvasItem w => HasCoords w

module HTk.Canvasitems.CanvasItemAux
createCanvasItem :: CanvasItem w => Canvas -> CanvasItemKind -> (GUIOBJECT -> w) -> [Config w] -> Coord -> IO w
itemGeo :: CanvasItem w => Geometry -> Config w
getGeo :: CanvasItem w => w -> IO Geometry
setGeo :: CanvasItem w => w -> Geometry -> IO w
itemWidth :: CanvasItem w => Distance -> Config w
getItemWidth :: CanvasItem w => w -> IO Distance
itemHeight :: CanvasItem w => Distance -> Config w
getItemHeight :: CanvasItem w => w -> IO Distance
itemSize :: CanvasItem w => Size -> Config w
getItemSize :: CanvasItem w => w -> IO (Distance, Distance)
itemPosition :: CanvasItem w => Position -> Config w
getItemPosition :: CanvasItem w => w -> IO (Distance, Distance)
itemPositionD2 :: CanvasItem w => Position -> Config w
getItemPositionD2 :: CanvasItem w => w -> IO (Distance, Distance)
canvasitemMethods :: Methods

module HTk.Canvasitems.CanvasTag

-- | The <tt>CanvasTag</tt> datatype.
data CanvasTag

-- | A canvas item can have several tags (handlers for a set of canvas
--   items).
class CanvasItem w => TaggedCanvasItem w where tags cts item = mapM (\ ct -> do { CanvasItemName name tid <- getObjectName (toGUIObject ct); cset item "tag" (show tid) }) cts >> return item
tags :: TaggedCanvasItem w => [CanvasTag] -> Config w

-- | The <tt>SearchSpec</tt> datatype (see <a>addCanvasTag</a>).
data SearchSpec

-- | Adds all objects in the canvas.
allItems :: SearchSpec

-- | Adds the item just above the given item in the display list.
aboveItem :: CanvasItem item => item -> SearchSpec

-- | Adds the item just below in the given item in the display list.
belowItem :: CanvasItem item => item -> SearchSpec

-- | Adds the item(s) identified by the given handler (which can also be
--   another canvas tag).
withTag :: CanvasItem item => item -> SearchSpec

-- | Adds the item closest to the given position.
closest :: Position -> SearchSpec

-- | Adds the items enclosed in the specified region.
enclosed :: Position -> Position -> SearchSpec

-- | Adds the items overpalling the specified region.
overlapping :: Position -> Position -> SearchSpec

-- | Constructs a new canvas tag.
createCanvasTag :: Canvas -> [Config CanvasTag] -> IO CanvasTag

-- | Adds the canvas items identified by the <tt>SearchSpec</tt> to the
--   tag.
addCanvasTag :: SearchSpec -> CanvasTag -> IO ()

-- | Removes a canvas item from a canvas tag.
removeCanvasTag :: CanvasItem i => i -> CanvasTag -> IO ()

-- | Forms the conjunction of two canvas tags
(&#&) :: CanvasTag -> CanvasTag -> IO CanvasTag

-- | Forms the disjunction of two canvas tags
(|#|) :: CanvasTag -> CanvasTag -> IO CanvasTag

-- | Forms "either - or" of two canvas tags
(^#) :: CanvasTag -> CanvasTag -> IO CanvasTag
tagNot :: CanvasTag -> IO CanvasTag
instance Eq CanvasTag
instance Synchronized CanvasTag
instance CanvasItem CanvasTag
instance Destroyable CanvasTag
instance GUIObject CanvasTag


-- | HTk's <i>arc</i> canvas item. An arc object on a canvas widget.
module HTk.Canvasitems.Arc

-- | The <tt>Arc</tt> datatype.
data Arc

-- | Constructs a new arc item.
createArc :: Canvas -> [Config Arc] -> IO Arc

-- | Sets the length of an arc in counter-clockwise direction.
extent :: Degree -> Config Arc

-- | Gets the length of an arc in counter-clockwise direction.
getExtent :: Arc -> IO Degree

-- | Sets the starting angle of an arc.
start :: Degree -> Config Arc

-- | Gets the starting angle of an arc.
getStart :: Arc -> IO Degree
instance Eq Arc
instance HasSize Arc
instance HasPosition Arc
instance HasGeometry Arc
instance FilledCanvasItem Arc
instance TaggedCanvasItem Arc
instance CanvasItem Arc
instance Synchronized Arc
instance Destroyable Arc
instance GUIObject Arc


-- | HTk's <i>bitmap</i> canvas item. A bitmap object on a canvas widget.
module HTk.Canvasitems.BitMapItem

-- | The <tt>BitMapItem</tt> datatype.
data BitMapItem

-- | Constructs a new bitmap item.
createBitMapItem :: Canvas -> [Config BitMapItem] -> IO BitMapItem
instance Eq BitMapItem
instance Synchronized BitMapItem
instance HasBitMap BitMapItem
instance FilledCanvasItem BitMapItem
instance HasCanvAnchor BitMapItem
instance HasPosition BitMapItem
instance TaggedCanvasItem BitMapItem
instance CanvasItem BitMapItem
instance Destroyable BitMapItem
instance GUIObject BitMapItem


-- | HTk's <i>image</i> canvas item. An image object on a canvas widget.
module HTk.Canvasitems.ImageItem

-- | The <tt>ImageItem</tt> datatype.
data ImageItem

-- | Constructs a new bitmap item.
createImageItem :: Canvas -> [Config ImageItem] -> IO ImageItem
instance Eq ImageItem
instance Synchronized ImageItem
instance HasPhoto ImageItem
instance HasCanvAnchor ImageItem
instance HasPosition ImageItem
instance TaggedCanvasItem ImageItem
instance CanvasItem ImageItem
instance Destroyable ImageItem
instance GUIObject ImageItem


-- | HTk's <i>line</i> canvas item. A line object on a canvas widget.
module HTk.Canvasitems.Line

-- | The <tt>ArrowHead</tt> datatype (see <tt>Line.arrowstyle</tt>).
data ArrowHead
BothEnds :: ArrowHead
LastEnd :: ArrowHead
FirstEnd :: ArrowHead
NoHead :: ArrowHead

-- | The <tt>CapStyle</tt> datatype (see <tt>Line.capstyle</tt>).
data CapStyle
CapRound :: CapStyle
CapProjecting :: CapStyle
CapButt :: CapStyle

-- | The <tt>JoinStyle</tt> datatype (see <tt>Line.joinstyle</tt>).
data JoinStyle
JoinRound :: JoinStyle
JoinMiter :: JoinStyle
JoinBevel :: JoinStyle

-- | The <tt>Line</tt> datatype.
data Line

-- | Constructs a new line item.
createLine :: Canvas -> [Config Line] -> IO Line

-- | Sets the shape of the arrows at the ends of a line.
arrowshape :: ArrowShape -> Config Line

-- | Gets the shape of the arrows at the end of a line.
getArrowshape :: Line -> IO ArrowShape

-- | Sets the style of the arrows at the ends of a line.
arrowstyle :: ArrowHead -> Config Line

-- | Gets the style of the arrows at the ends of a line.
getArrowstyle :: Line -> IO ArrowHead

-- | Sets the capstyle at the ends of a line (butt, projecting or round).
capstyle :: CapStyle -> Config Line

-- | Gets the capstyle at the ends of a line.
getCapstyle :: Line -> IO CapStyle

-- | Sets the joinstyle between the line segments (bevel, miter or round).
joinstyle :: JoinStyle -> Config Line

-- | Gets the joinstyle between the line segments.
getJoinstyle :: Line -> IO JoinStyle
instance Eq Line
instance Eq ArrowHead
instance Ord ArrowHead
instance Enum ArrowHead
instance Eq CapStyle
instance Ord CapStyle
instance Enum CapStyle
instance Eq JoinStyle
instance Ord JoinStyle
instance Enum JoinStyle
instance Show JoinStyle
instance Read JoinStyle
instance GUIValue JoinStyle
instance Show CapStyle
instance Read CapStyle
instance GUIValue CapStyle
instance Show ArrowHead
instance Read ArrowHead
instance GUIValue ArrowHead
instance HasSize Line
instance Synchronized Line
instance SegmentedCanvasItem Line
instance FilledCanvasItem Line
instance TaggedCanvasItem Line
instance CanvasItem Line
instance Destroyable Line
instance GUIObject Line


-- | HTk's <i>oval</i> canvas item. An oval object on a canvas widget.
module HTk.Canvasitems.Oval

-- | The <tt>Oval</tt> datatype.
data Oval

-- | Constructs a new oval item.
createOval :: Canvas -> [Config Oval] -> IO Oval
instance Eq Oval
instance HasSize Oval
instance HasPosition Oval
instance HasGeometry Oval
instance FilledCanvasItem Oval
instance TaggedCanvasItem Oval
instance CanvasItem Oval
instance Synchronized Oval
instance Destroyable Oval
instance GUIObject Oval


-- | HTk's <i>polygon</i> canvas item. A polygon object on a canvas widget.
module HTk.Canvasitems.Polygon

-- | The <tt>Polygon</tt> datatype.
data Polygon

-- | Constructs a new polygon item.
createPolygon :: Canvas -> [Config Polygon] -> IO Polygon
instance Eq Polygon
instance SegmentedCanvasItem Polygon
instance FilledCanvasItem Polygon
instance TaggedCanvasItem Polygon
instance CanvasItem Polygon
instance Synchronized Polygon
instance Destroyable Polygon
instance GUIObject Polygon


-- | HTk's <i>rectangle</i> canvas item. A rectangle object on a canvas
--   widget.
module HTk.Canvasitems.Rectangle

-- | The <tt>Rectangle</tt> datatype.
data Rectangle

-- | Constructs a new rectangle item.
createRectangle :: Canvas -> [Config Rectangle] -> IO Rectangle
instance Eq Rectangle
instance HasSize Rectangle
instance HasPosition Rectangle
instance HasGeometry Rectangle
instance FilledCanvasItem Rectangle
instance TaggedCanvasItem Rectangle
instance CanvasItem Rectangle
instance Synchronized Rectangle
instance Destroyable Rectangle
instance GUIObject Rectangle


-- | HTk's <i>text</i> canvas item. A text container on a canvas widget.
module HTk.Canvasitems.TextItem

-- | The <tt>TextItem</tt> datatype.
data TextItem

-- | Constructs a new text item.
createTextItem :: Canvas -> [Config TextItem] -> IO TextItem
instance Eq TextItem
instance HasAnchor TextItem
instance GUIValue b => HasText TextItem b
instance Synchronized TextItem
instance HasCanvAnchor TextItem
instance HasFont TextItem
instance HasJustify TextItem
instance HasSize TextItem
instance HasPosition TextItem
instance TaggedCanvasItem TextItem
instance FilledCanvasItem TextItem
instance CanvasItem TextItem
instance Destroyable TextItem
instance GUIObject TextItem


-- | HTk's <i>checkbutton</i> widget. A simple checkbutton associated with
--   a polymorphic variable.
module HTk.Widgets.CheckButton

-- | The <tt>CheckButton</tt> datatpe - it is associated with a polymorphic
--   <tt>TkVariable</tt>.
data CheckButton a

-- | Constructs a new checkbutton widget and returns a handler.
newCheckButton :: Container par => par -> [Config (CheckButton a)] -> IO (CheckButton a)
instance Eq (CheckButton a)
instance HasAnchor (CheckButton a)
instance HasTooltip (CheckButton a)
instance HasVariable (CheckButton a)
instance HasCommand (CheckButton a)
instance Synchronized (CheckButton a)
instance HasUnderline (CheckButton a)
instance GUIValue v => HasText (CheckButton a) v
instance HasSize (CheckButton a)
instance HasPhoto (CheckButton a)
instance HasJustify (CheckButton a)
instance HasFont (CheckButton a)
instance HasEnable (CheckButton a)
instance HasColour (CheckButton a)
instance HasBorder (CheckButton a)
instance HasBitMap (CheckButton a)
instance ButtonWidget (CheckButton a)
instance Widget (CheckButton a)
instance Destroyable (CheckButton a)
instance GUIObject (CheckButton a)


-- | HTk's <a>strong</a>entry field<a>/strong</a>.<a>br</a> A simple widget
--   that displays an editable line of text.
module HTk.Widgets.Entry

-- | The <tt>Entry</tt> datatype.
data Entry a

-- | Constructs a new entry field and returns a handler.
newEntry :: (Container par, GUIValue a) => par -> [Config (Entry a)] -> IO (Entry a)

-- | The <tt>XCoord</tt> datatype.
data XCoord
XCoord :: Distance -> XCoord

-- | Sets a character to display instead of contents (e.g. for password
--   fields).
showText :: GUIValue a => Char -> Entry a -> IO (Entry a)

-- | Gets the character to show instead of contents.
getShowText :: GUIValue a => Entry a -> IO Char
instance Eq (Entry a)
instance GUIValue a => CanBeSubwidget (Entry a)
instance HasInsertionCursorIndexGet (Entry a) Int
instance HasIndex (Entry a) i BaseIndex => HasInsertionCursorIndexSet (Entry a) i
instance HasInsertionCursor (Entry a)
instance HasXSelection (Entry a)
instance HasSelectionBaseIndexRange (Entry a) Int
instance (HasIndex (Entry a) i1 BaseIndex, HasIndex (Entry a) i2 BaseIndex) => HasSelectionIndexRange (Entry a) i1 i2
instance HasSelectionBaseIndex (Entry a) (Int, Int)
instance HasIndex (Entry a) i BaseIndex => HasSelectionIndex (Entry a) i
instance HasSelection (Entry a)
instance HasIndex (Entry a) i BaseIndex => HasIndex (Entry a) i Int
instance HasIndex (Entry a) (Selection (Entry a), Last) BaseIndex
instance HasIndex (Entry a) (Selection (Entry a), First) BaseIndex
instance HasIndex (Entry a) (ICursor (Entry a)) BaseIndex
instance HasIndex (Entry a) XCoord BaseIndex
instance HasIndex (Entry a) EndOfText BaseIndex
instance HasIndex (Entry a) BaseIndex BaseIndex
instance HasIndex (Entry a) Int BaseIndex
instance Show XCoord
instance HasTooltip (Entry a)
instance Synchronized (Entry a)
instance HasScroller (Entry a)
instance HasEnable (Entry a)
instance HasJustify (Entry a)
instance GUIValue a => HasValue (Entry a) a
instance HasVariable (Entry a)
instance HasFont (Entry a)
instance HasColour (Entry a)
instance HasBorder (Entry a)
instance Widget (Entry a)
instance Destroyable (Entry a)
instance HasSize (Entry a)
instance GUIObject (Entry a)


-- | HTk's <i>listbox widget</i> . A scrollable widget that displays a set
--   of text lines with selection functionality.
module HTk.Widgets.ListBox

-- | The <tt>ListBox</tt> datatype - parametrised over the type of the list
--   elements.
data ListBox a

-- | Constructs a new listbox widget and returns a handler.
newListBox :: (Container par, GUIValue a) => par -> [Config (ListBox a)] -> IO (ListBox a)
data SelectMode
Single :: SelectMode
Browse :: SelectMode
Multiple :: SelectMode
Extended :: SelectMode

-- | Sets the select mode of a listbox.
selectMode :: GUIValue a => SelectMode -> ListBox a -> IO (ListBox a)

-- | Gets the set select mode from a listbox.
getSelectMode :: GUIValue a => (ListBox a) -> IO SelectMode

-- | Activates the specified line.
activateElem :: HasIndex (ListBox a) i Int => ListBox a -> i -> IO ()

-- | Anchors the selection at the specified line.
selectionAnchor :: HasIndex (ListBox a) i Int => ListBox a -> i -> IO ()

-- | The <tt>ListBoxElem</tt> datatype.
data Eq a => ListBoxElem a
ListBoxElem :: a -> ListBoxElem a
elemNotFound :: IOError
instance Eq (ListBox a)
instance Eq a => Eq (ListBoxElem a)
instance Eq SelectMode
instance Ord SelectMode
instance Enum SelectMode
instance Show SelectMode
instance Read SelectMode
instance GUIValue SelectMode
instance HasSelectionBaseIndexRange (ListBox a) Int
instance (HasIndex (ListBox a) i1 Int, HasIndex (ListBox a) i2 Int) => HasSelectionIndexRange (ListBox a) i1 i2
instance HasSelectionBaseIndex (ListBox a) [Int]
instance HasIndex (ListBox a) i Int => HasSelectionIndex (ListBox a) i
instance HasSelection (ListBox a)
instance (Eq a, GUIValue a, GUIValue [a]) => HasIndex (ListBox a) Int (ListBoxElem a)
instance (Eq a, GUIValue a) => HasIndex (ListBox [a]) (ListBoxElem a) Int
instance HasIndex (ListBox a) Pixels Int
instance HasIndex (ListBox a) EndOfText Int
instance HasIndex (ListBox a) Int Int
instance HasIndex (ListBox a) i Int => HasBBox (ListBox a) i
instance GUIValue a => CanBeSubwidget (ListBox a)
instance HasXSelection (ListBox a)
instance HasTooltip (ListBox a)
instance (GUIValue a, GUIValue [a]) => HasValue (ListBox a) [a]
instance HasSize (ListBox a)
instance HasScroller (ListBox a)
instance HasGrid (ListBox a)
instance HasFont (ListBox a)
instance HasEnable (ListBox a)
instance HasColour (ListBox a)
instance HasBorder (ListBox a)
instance Synchronized (ListBox a)
instance Widget (ListBox a)
instance Destroyable (ListBox a)
instance GUIObject (ListBox a)


-- | HTk's <i>ComboBox</i>. Only available when using tixwish. However this
--   module needs to go in the uni-htk-widgets package because it depends
--   on it.
module HTk.Widgets.ComboBox

-- | The <tt>ComboBox</tt> datatype. A ComboBox is a so called mega widget
--   composed of an entry widget and a list box. Both subwidgets are
--   accessible by themselves.
data GUIValue a => ComboBox a

-- | Constructs a new combo box and returns a handler.
newComboBox :: (GUIValue a, Container par) => par -> Bool -> [Config (ComboBox a)] -> IO (ComboBox a)

-- | Sets the index item in the listbox to be the current value of the
--   ComboBox.
pick :: GUIValue a => Int -> Config (ComboBox a)

-- | Retrieve the entry subwidget of a combo box.
entrySubwidget :: GUIValue a => ComboBox a -> Entry a

-- | Retrieve the list box subwidget of a combo box.
listBoxSubwidget :: GUIValue a => ComboBox a -> ListBox a
instance GUIValue a => Eq (ComboBox a)
instance GUIValue a => HasEnable (ComboBox a)
instance GUIValue a => Synchronized (ComboBox a)
instance GUIValue a => HasSize (ComboBox a)
instance GUIValue a => HasColour (ComboBox a)
instance GUIValue a => HasAnchor (ComboBox a)
instance GUIValue a => HasBorder (ComboBox a)
instance GUIValue a => Destroyable (ComboBox a)
instance GUIValue a => Widget (ComboBox a)
instance (GUIValue a, GUIValue [a]) => HasValue (ComboBox a) [a]
instance GUIValue a => GUIObject (ComboBox a)


-- | HTk's <i>editor widget</i>. A text container for editing purposes. An
--   editor widget can contain text tags, to which you can bind events, and
--   also embedded windows.
module HTk.Widgets.Editor

-- | The <tt>Editor</tt> datatpe.
data Editor

-- | Constructs a new editor widget and returns it as a value.
newEditor :: Container par => par -> [Config Editor] -> IO Editor

-- | Deletes the character at the specified index.
deleteText :: HasIndex Editor i BaseIndex => Editor -> i -> IO ()

-- | Deletes the text in the specified range.
deleteTextRange :: (HasIndex Editor i1 BaseIndex, HasIndex Editor i2 BaseIndex) => Editor -> i1 -> i2 -> IO ()

-- | Gets the text in the specified range.
getTextRange :: (HasIndex Editor i1 BaseIndex, HasIndex Editor i2 BaseIndex) => Editor -> i1 -> i2 -> IO String

-- | Inserts the given text at the specified index.
insertText :: (HasIndex Editor i BaseIndex, GUIValue a) => Editor -> i -> a -> IO ()

-- | Inserts a newline character at the end of the editor widget.
insertNewline :: Editor -> IO ()

-- | Gets a text line from an editor widget.
getTextLine :: HasIndex Editor i BaseIndex => Editor -> i -> IO String

-- | Appends text at the end of the editor widget.
appendText :: Editor -> String -> IO ()

-- | Returns the position on the text widget for a given index.
getIndexPosition :: HasIndex Editor i BaseIndex => Editor -> i -> IO Position

-- | Compares two indizes.
compareIndices :: (HasIndex Editor i1 BaseIndex, HasIndex Editor i2 BaseIndex) => Editor -> String -> i1 -> i2 -> IO Bool

-- | Writes the contained text to a file.
writeTextToFile :: Editor -> FilePath -> IO ()

-- | Reads a text from a file and inserts it into the editor pane.
readTextFromFile :: Editor -> FilePath -> IO ()

-- | Widgets with adjustable tab stops instantiate the <tt>class
--   HasTabulators</tt>.
class GUIObject w => HasTabulators w where tabs s w = cset w "tabs" s getTabs w = cget w "tabs"
tabs :: HasTabulators w => String -> Config w
getTabs :: HasTabulators w => w -> IO String

-- | Widgets with an adjustable line spacing instantiate the <tt>class
--   HasLineSpacing</tt>.
class GUIObject w => HasLineSpacing w where getSpaceAbove w = cget w "spacing1" spaceAbove d w = cset w "spacing1" d getSpaceBelow w = cget w "spacing3" spaceBelow d w = cset w "spacing3" d spaceWrap d w = cset w "spacing2" d getSpaceWrap w = cget w "spacing2"
spaceAbove :: HasLineSpacing w => Distance -> Config w
getSpaceAbove :: HasLineSpacing w => w -> IO Distance
spaceWrap :: HasLineSpacing w => Distance -> Config w
getSpaceWrap :: HasLineSpacing w => w -> IO Distance
spaceBelow :: HasLineSpacing w => Distance -> Config w
getSpaceBelow :: HasLineSpacing w => w -> IO Distance

-- | Adjusts the view so that the character at the specified position is
--   visible.
adjustViewTo :: HasIndex Editor i BaseIndex => Editor -> i -> IO ()

-- | Anchor a scrolling operation.
scanMark :: HasIndex Editor i BaseIndex => Editor -> i -> IO ()

-- | Scroll based on a new position.
scanDragTo :: HasIndex Editor i BaseIndex => Editor -> i -> IO ()

-- | The <tt>SearchDirection</tt> datatype.
data SearchDirection
Forward :: SearchDirection
Backward :: SearchDirection

-- | The <tt>SearchMode</tt> datatype.
data SearchMode
Exact :: SearchMode
Nocase :: SearchMode

-- | The <tt>SearchSwitch</tt> datatype.
data SearchSwitch
SearchSwitch :: SearchDirection -> SearchMode -> Bool -> SearchSwitch
searchdirection :: SearchSwitch -> SearchDirection
searchmode :: SearchSwitch -> SearchMode
rexexp :: SearchSwitch -> Bool

-- | Searches for text inside an editor widget.
search :: HasIndex Editor i BaseIndex => Editor -> SearchSwitch -> String -> i -> IO (Maybe BaseIndex)

-- | The <tt>IndexModifiers</tt> datatype.
newtype IndexModifiers
IndexModifiers :: [IndexModifier] -> IndexModifiers

-- | The <tt>IndexModifier</tt> datatype.
data IndexModifier
ForwardChars :: Int -> IndexModifier
BackwardChars :: Int -> IndexModifier
ForwardLines :: Int -> IndexModifier
BackwardLines :: Int -> IndexModifier
LineStart :: IndexModifier
LineEnd :: IndexModifier
WordStart :: IndexModifier
WordEnd :: IndexModifier

-- | The <tt>WrapMode</tt> datatype.
data WrapMode
NoWrap :: WrapMode
CharWrap :: WrapMode
WordWrap :: WrapMode

-- | Sets the editor's wrap mode.
wrap :: WrapMode -> Config Editor

-- | Gets the editor's wrap mode.
getWrapMode :: Editor -> IO WrapMode
instance Eq Editor
instance Eq WrapMode
instance Ord WrapMode
instance Enum WrapMode
instance Eq SearchDirection
instance Ord SearchDirection
instance Enum SearchDirection
instance Eq SearchMode
instance Ord SearchMode
instance Enum SearchMode
instance Show SearchSwitch
instance Show SearchMode
instance Show SearchDirection
instance Show WrapMode
instance Read WrapMode
instance GUIValue WrapMode
instance HasInsertionCursorIndexGet Editor (Distance, Distance)
instance HasIndex Editor i BaseIndex => HasInsertionCursorIndexSet Editor i
instance HasInsertionCursor Editor
instance HasXSelection Editor
instance HasSelectionBaseIndex Editor ((Distance, Distance), (Distance, Distance))
instance (HasIndex Editor i1 BaseIndex, HasIndex Editor i2 BaseIndex) => HasSelectionIndexRange Editor i1 i2
instance HasSelectionBaseIndexRange Editor (Distance, Distance)
instance HasIndex Editor i BaseIndex => HasSelectionIndex Editor i
instance HasSelection Editor
instance Show IndexModifiers
instance Show IndexModifier
instance HasIndex Editor i BaseIndex => HasIndex Editor i (Distance, Distance)
instance HasIndex Editor i BaseIndex => HasIndex Editor (i, IndexModifier) BaseIndex
instance HasIndex Editor i BaseIndex => HasIndex Editor (i, [IndexModifier]) BaseIndex
instance HasIndex Editor (Distance, Distance) BaseIndex
instance HasIndex Editor Pixels BaseIndex
instance HasIndex Editor EndOfText BaseIndex
instance HasIndex Editor BaseIndex BaseIndex
instance HasIndex Editor i BaseIndex => HasBBox Editor i
instance HasTooltip Editor
instance GUIValue a => HasValue Editor a
instance Synchronized Editor
instance HasScroller Editor
instance HasTabulators Editor
instance HasLineSpacing Editor
instance HasEnable Editor
instance HasFont Editor
instance HasSize Editor
instance HasColour Editor
instance HasBorder Editor
instance Container Editor
instance Widget Editor
instance Destroyable Editor
instance GUIObject Editor


-- | This module provides access to text marks inside an editor widget.
module HTk.Textitems.Mark

-- | The <tt>Gravity</tt> datatype.
data Gravity
ToLeft :: Gravity
ToRight :: Gravity

-- | The <tt>Mark</tt> datatype.
data Mark
Mark :: Editor -> String -> Mark

-- | Creates a text mark inside an editor widget and returns a handler.
createMark :: HasIndex Editor i BaseIndex => Editor -> String -> i -> IO Mark

-- | Sets the gravity of the given text mark.
setMarkGravity :: Mark -> Gravity -> IO ()

-- | Sets the index position of the text mark.
setMark :: HasIndex Editor i BaseIndex => Mark -> i -> IO ()

-- | Unsets a text mark inside an editor widget.
unsetMark :: Mark -> IO ()

-- | Gets the current marks from an editor widget.
getCurrentMarks :: Editor -> IO [Mark]
instance Eq Mark
instance Eq Gravity
instance Ord Gravity
instance Enum Gravity
instance GUIValue Gravity
instance Show Gravity
instance Read Gravity
instance HasIndex Editor MousePosition BaseIndex
instance HasIndex Editor (ICursor Editor) BaseIndex
instance HasIndex Editor (Selection Editor) BaseIndex
instance HasIndex Editor Mark BaseIndex


-- | This module provides access to text tags inside an editor widget.
module HTk.Textitems.TextTag

-- | The <tt>TextTag</tt> datatype.
data TextTag

-- | Creates a text tag inside an editor widget and returns a handler.
createTextTag :: (HasIndex Editor i1 BaseIndex, HasIndex Editor i2 BaseIndex) => Editor -> i1 -> i2 -> [Config TextTag] -> IO TextTag

-- | Adds the specified text range to a text tag.
addTextTag :: (HasIndex Editor i1 BaseIndex, HasIndex Editor i2 BaseIndex) => TextTag -> i1 -> i2 -> IO ()

-- | Lowers the text tag.
lowerTextTag :: TextTag -> IO ()

-- | Raises the given text tag.
raiseTextTag :: TextTag -> IO ()

-- | Removes the specified text range from a text tag.
removeTextTag :: (HasIndex Editor i1 BaseIndex, HasIndex Editor i2 BaseIndex) => TextTag -> i1 -> i2 -> IO ()

-- | Sets the normal left intend for a line.
lmargin1 :: Distance -> Config TextTag

-- | Gets the normal left intend for a line.
getLmargin1 :: TextTag -> IO Distance

-- | Sets the intend for a part of a line that gets wrapped.
lmargin2 :: Distance -> Config TextTag

-- | Gets the intend for a part of a line that gets wrapped.
getLmargin2 :: TextTag -> IO Distance

-- | Sets the right-hand margin.
rmargin :: Distance -> Config TextTag

-- | Gets the right-hand margin.
getRmargin :: TextTag -> IO Distance

-- | Sets the baseline offset (positive for superscripts).
offset :: Distance -> Config TextTag

-- | Gets the baseline offset.
getOffset :: TextTag -> IO Distance

-- | If <tt>True</tt>, the text is drawn with a horizontal line through it.
overstrike :: Toggle -> Config TextTag

-- | Gets the current overstrike setting.
getOverstrike :: TextTag -> IO Toggle

-- | If <tt>True</tt>, the text is underlined.
underlined :: Toggle -> Config TextTag

-- | Gets the current underline setting.
getUnderlined :: TextTag -> IO Toggle

-- | Sets a stipple pattern for the background colour.
bgstipple :: BitMapHandle -> Config TextTag

-- | Gets the stipple pattern for the background colour.
getBgstipple :: TextTag -> IO BitMapHandle

-- | Sets a stipple pattern for the foreground colour.
fgstipple :: BitMapHandle -> Config TextTag

-- | Gets the stipple pattern for the foreground colour.
getFgstipple :: TextTag -> IO BitMapHandle
instance HasIndex Editor (TextTag, Last) BaseIndex
instance HasIndex Editor (TextTag, First) BaseIndex
instance Synchronized TextTag
instance HasTabulators TextTag
instance HasLineSpacing TextTag
instance HasJustify TextTag
instance HasFont TextTag
instance HasColour TextTag
instance HasBorder TextTag
instance Destroyable TextTag
instance GUIObject TextTag
instance Eq TextTag


-- | HTk's <i>label</i> widget. A label is a simple container for text or
--   images/bitmaps.
module HTk.Widgets.Label

-- | The <tt>Label</tt> datatype.
data Label

-- | Constructs a new label widget and returns a handler.
newLabel :: Container par => par -> [Config Label] -> IO Label
instance Eq Label
instance HasAnchor Label
instance Synchronized Label
instance HasTooltip Label
instance GUIValue b => HasText Label b
instance HasUnderline Label
instance HasSize Label
instance HasBitMap Label
instance HasPhoto Label
instance HasJustify Label
instance HasFont Label
instance HasColour Label
instance HasBorder Label
instance Widget Label
instance Destroyable Label
instance GUIObject Label

module HTk.Widgets.MenuButton

-- | The <tt>MenuButton</tt> datatype.
data MenuButton

-- | Constructs a new menubutton widget and returns a handler.
newMenuButton :: Container par => par -> [Config MenuButton] -> IO MenuButton
instance HasAnchor MenuButton
instance HasTooltip MenuButton
instance HasMenu MenuButton
instance HasCommand MenuButton
instance Synchronized MenuButton
instance HasUnderline MenuButton
instance GUIValue v => HasText MenuButton v
instance HasSize MenuButton
instance HasPhoto MenuButton
instance HasJustify MenuButton
instance HasFont MenuButton
instance HasEnable MenuButton
instance HasColour MenuButton
instance HasBorder MenuButton
instance HasBitMap MenuButton
instance ButtonWidget MenuButton
instance Widget MenuButton
instance Destroyable MenuButton
instance GUIObject MenuButton


-- | HTkMenu is a user-friendly interface to HTk's menu operations, which
--   compiles a version of MenuType.MenuPrim to an HTk menu.
module HTk.Toolkit.HTkMenu

-- | Describes a menu to be compiled. The value identifies the buttons in
--   the menu so the client can tell which was clicked. The String is a
--   title which is given to menu cascades.
newtype HTkMenu value
HTkMenu :: (MenuPrim String value) -> HTkMenu value

-- | compileHTkMenu compiles a menu to a MenuButton. It does not display
--   it; the caller should pack the MenuButton in the parent with whatever
--   options are desired.
compileHTkMenu :: Container parent => parent -> HTkMenu value -> IO (MenuButton, Event value)


-- | HTk's <a>strong</a>message widget<a>/strong</a>.<a>br</a> A message
--   widget is a simple container for text.
module HTk.Widgets.Message

-- | The <tt>Message</tt> datatype.
data Message

-- | Constructs a new message widget and returns a handler.
newMessage :: Container par => par -> [Config Message] -> IO Message

-- | Sets the aspect of a message widget (100 * width / height).
aspect :: Int -> Config Message

-- | Gets the aspect froma message widget.
getAspect :: Message -> IO Int
instance Eq Message
instance HasAnchor Message
instance HasTooltip Message
instance Synchronized Message
instance GUIValue b => HasText Message b
instance HasSize Message
instance HasJustify Message
instance HasFont Message
instance HasColour Message
instance HasBorder Message
instance Widget Message
instance Destroyable Message
instance GUIObject Message


-- | HTk's <i>option menu</i> widget. A simple clip up menu displaying a
--   set of radiobuttons.
module HTk.Widgets.OptionMenu

-- | The <tt>OptionMenu</tt> datatype.
data OptionMenu a

-- | Constructs a new option menu and returns a handler.
newOptionMenu :: (Container par, GUIValue a) => par -> [a] -> [Config (OptionMenu a)] -> IO (OptionMenu a)
instance Eq (OptionMenu a)
instance HasAnchor (OptionMenu a)
instance HasTooltip (OptionMenu a)
instance GUIValue a => HasValue (OptionMenu a) a
instance HasSize (OptionMenu a)
instance HasFont (OptionMenu a)
instance HasEnable (OptionMenu a)
instance HasColour (OptionMenu a)
instance HasBorder (OptionMenu a)
instance Widget (OptionMenu a)
instance Destroyable (OptionMenu a)
instance GUIObject (OptionMenu a)


-- | HTk's <i>radiobutton</i> widget. A simple radiobutton associated with
--   a polymorphic variable.
module HTk.Widgets.RadioButton

-- | The <tt>RadioButton</tt> datatpe - it is associated with a polymorphic
--   <tt>TkVariable</tt>.
data RadioButton a

-- | Constructs a new radiobutton widget and returns a handler.
newRadioButton :: Container par => par -> [Config (RadioButton a)] -> IO (RadioButton a)
instance Eq (RadioButton a)
instance HasTooltip (RadioButton a)
instance HasVariable (RadioButton a)
instance GUIValue c => HasValue (RadioButton a) c
instance HasCommand (RadioButton a)
instance Synchronized (RadioButton a)
instance HasUnderline (RadioButton a)
instance GUIValue v => HasText (RadioButton a) v
instance HasSize (RadioButton a)
instance HasPhoto (RadioButton a)
instance HasJustify (RadioButton a)
instance HasFont (RadioButton a)
instance HasEnable (RadioButton a)
instance HasColour (RadioButton a)
instance HasBorder (RadioButton a)
instance HasBitMap (RadioButton a)
instance ButtonWidget (RadioButton a)
instance Widget (RadioButton a)
instance Destroyable (RadioButton a)
instance GUIObject (RadioButton a)


-- | HTk's <i>scale</i> widget. A simple slider in a through representing a
--   range of numeric values.
module HTk.Widgets.Scale

-- | Values associated with a scale instansiate the <tt>class
--   ScaleValue</tt>.
class (Num a, GUIValue a) => ScaleValue a
toDouble :: ScaleValue a => a -> Double
fromDouble :: ScaleValue a => Double -> a

-- | The <tt>Scale</tt> datatype.
data Scale a

-- | Constructs a new scale widget and returns a handler.
newScale :: (GUIValue a, ScaleValue a, Container par) => par -> [Config (Scale a)] -> IO (Scale a)

-- | Sets the number of significant values in the scale widget.
digits :: Int -> Config (Scale a)

-- | Gets the number of significant values in the scale widget.
getDigits :: Scale a -> IO Int

-- | Sets the scale widgets maximum and minumum value.
interval :: ScaleValue a => (a, a) -> Config (Scale a)

-- | Gets the scale widgets maximum and minumum value.
getInterval :: ScaleValue a => Scale a -> IO (a, a)

-- | Sets the maximum value of the scale widget.
intervalTo :: ScaleValue a => a -> Config (Scale a)

-- | Gets the maximum value of the scale widget.
getIntervalTo :: ScaleValue a => Scale a -> IO a

-- | Sets the minimum value of the scale widget.
intervalFrom :: ScaleValue a => a -> Config (Scale a)

-- | Gets the minimum value of the scale widget.
getIntervalFrom :: ScaleValue a => Scale a -> IO a

-- | Sets the coarse grain slider adjustment value.
bigIncrement :: ScaleValue a => a -> Config (Slider (Scale a))

-- | Gets the coarse grain slider adjustment value.
getBigIncrement :: ScaleValue a => (Slider (Scale a)) -> IO a

-- | Shows the sliders value when set.
showValue :: Toggle -> Config (Slider (Scale a))

-- | Gets the current showvalue setting.
getShowValue :: (Slider (Scale a)) -> IO Toggle
instance HasSize (Slider (Scale a))
instance ScaleValue a => HasIncrement (Slider (Scale a)) a
instance HasTooltip (Scale a)
instance GUIValue v => HasText (Scale a) v
instance HasSlider (Scale a)
instance HasSize (Scale a)
instance HasOrientation (Scale a)
instance ScaleValue a => HasIncrement (Scale a) a
instance HasFont (Scale a)
instance HasEnable (Scale a)
instance HasColour (Scale a)
instance HasBorder (Scale a)
instance Synchronized (Scale a)
instance Widget (Scale a)
instance Destroyable (Scale a)
instance GUIObject (Scale a)
instance Eq (Scale a)
instance ScaleValue Double


-- | HTk's <i>space</i> widget. A simple spacer for special packing
--   purposes.
module HTk.Widgets.Space

-- | The <tt>Space</tt> datatype.
data Space

-- | Constructs a new space widget and returns a handler.
newSpace :: Container par => par -> Distance -> [Config Space] -> IO Space
instance HasOrientation Space
instance HasColour Space
instance Synchronized Space
instance Widget Space
instance Destroyable Space
instance GUIObject Space
instance Eq Space


-- | HTk's <i>embedded canvas windows</i>. A container for widgets on a
--   canvas widget.
module HTk.Canvasitems.EmbeddedCanvasWin

-- | The <tt>EmbeddedCanvasWin</tt> datatype.
data EmbeddedCanvasWin

-- | Constructs a new embedded canvas window.
createEmbeddedCanvasWin :: Widget w => Canvas -> w -> [Config EmbeddedCanvasWin] -> IO EmbeddedCanvasWin
instance Eq EmbeddedCanvasWin
instance HasCanvAnchor EmbeddedCanvasWin
instance Synchronized EmbeddedCanvasWin
instance Widget EmbeddedCanvasWin
instance HasSize EmbeddedCanvasWin
instance HasPosition EmbeddedCanvasWin
instance TaggedCanvasItem EmbeddedCanvasWin
instance CanvasItem EmbeddedCanvasWin
instance Destroyable EmbeddedCanvasWin
instance GUIObject EmbeddedCanvasWin


-- | HTk's <i>embedded windows</i> inside an editor widget.
module HTk.Textitems.EmbeddedTextWin

-- | The <tt>EmbeddedTextWin</tt> datatype.
data EmbeddedTextWin

-- | Constructs a new embedded window inside an editor widget and returns a
--   handler.
createEmbeddedTextWin :: (HasIndex Editor i BaseIndex, Widget w) => Editor -> i -> w -> [Config EmbeddedTextWin] -> IO EmbeddedTextWin

-- | If set the contained widget is stretched vertically to match the
--   spacing of the line.
stretch :: Toggle -> Config EmbeddedTextWin

-- | Gets the current stretch setting.
getStretch :: EmbeddedTextWin -> IO Toggle
instance Eq EmbeddedTextWin
instance HasIndex Editor EmbeddedTextWin BaseIndex
instance Synchronized EmbeddedTextWin
instance Destroyable EmbeddedTextWin
instance GUIObject EmbeddedTextWin


module HTk.Toplevel.HTk
requirePackage :: String -> IO (Bool)
forgetPackage :: String -> IO ()
isPackageAvailable :: String -> IO Bool
isTixAvailable :: IO Bool
data WishEvent
WishEvent :: [WishEventModifier] -> WishEventType -> WishEvent
data WishEventType
Activate :: WishEventType
ButtonPress :: (Maybe BNo) -> WishEventType
ButtonRelease :: (Maybe BNo) -> WishEventType
Circulate :: WishEventType
Colormap :: WishEventType
Configure :: WishEventType
Deactivate :: WishEventType
Destroy :: WishEventType
Enter :: WishEventType
Expose :: WishEventType
FocusIn :: WishEventType
FocusOut :: WishEventType
Gravity :: WishEventType
KeyPress :: (Maybe KeySym) -> WishEventType
KeyRelease :: (Maybe KeySym) -> WishEventType
Motion :: WishEventType
Leave :: WishEventType
Map :: WishEventType
Property :: WishEventType
Reparent :: WishEventType
Unmap :: WishEventType
Visibility :: WishEventType
data WishEventModifier
Control :: WishEventModifier
Shift :: WishEventModifier
Lock :: WishEventModifier
CommandKey :: WishEventModifier
Meta :: WishEventModifier
M :: WishEventModifier
Alt :: WishEventModifier
Mod1 :: WishEventModifier
Mod2 :: WishEventModifier
Mod3 :: WishEventModifier
Mod4 :: WishEventModifier
Mod5 :: WishEventModifier
Button1 :: WishEventModifier
Button2 :: WishEventModifier
Button3 :: WishEventModifier
Button4 :: WishEventModifier
Button5 :: WishEventModifier
Double :: WishEventModifier
Triple :: WishEventModifier
newtype KeySym
KeySym :: String -> KeySym

-- | Binds an event for this widget. The second action returned unbinds the
--   event.
bind :: GUIObject wid => wid -> [WishEvent] -> IO (Event EventInfo, IO ())

-- | Simple version of bind for only one event and without modifiers.
bindSimple :: GUIObject wid => wid -> WishEventType -> IO (Event (), IO ())

-- | Binds an event for this widget and its parent widgets. The second
--   action returned unbinds the event.
bindPath :: Widget wid => wid -> [WishEvent] -> IO (Event EventInfo, IO ())

-- | Simple version of bindPath for only one event and without modifiers.
bindPathSimple :: Widget wid => wid -> WishEventType -> IO (Event (), IO ())
class GUIObject w => HasCommand w where clicked w = do { let (GUIOBJECT oid _) = toGUIObject w; cset w "command" (TkCommand ("puts \"CO " ++ show oid ++ "\"")); return (toEvent (listen (coQueue wish) |> Eq (CallBackId oid)) >>> return ()) }
clicked :: HasCommand w => w -> IO (Event ())
delayWish :: IO a -> IO a

-- | Initializes HTk.
initHTk :: [Config HTk] -> IO HTk

-- | Withdraws the main window.
withdrawMainWin :: Config HTk
resourceFile :: String -> Config HTk
finishHTk :: IO ()
withdrawWish :: IO ()

-- | The <tt>HTk</tt> datatype - a handle for the wish instance and the
--   main window.
data HTk

-- | Updates all tasks.
updateAllTasks :: IO ()

-- | Updates idle tasks.
updateIdleTasks :: IO ()
class Destroyable o => Destructible o
destroyed :: Destructible o => o -> Event ()
class Destroyable o
destroy :: Destroyable o => o -> IO ()
cleanupWish :: IO ()
getHTk :: IO HTk
instance GUIValue v => HasValue HTk v
instance Synchronized HTk
instance Container HTk
instance Window HTk
instance Destroyable HTk
instance Eq HTk
instance GUIObject HTk


-- | Objects with a name and an icon (used for several purposes).
module HTk.Toolkit.CItem

-- | Objects with a name and an icon.
class Eq c => CItem c
getName :: CItem c => c -> IO Name
getIcon :: CItem c => c -> IO Image


-- | A simple container for a group of button widgets.
module HTk.Toolkit.SelectBox

-- | The <tt>SelectBox</tt> datatype.
data SelectBox

-- | Constructs a new select box and returns a handler.
newSelectBox :: Container par => par -> Maybe Int -> [Config SelectBox] -> IO SelectBox

-- | Adds a button widget at the end of the select box.
addButton :: SelectBox -> [Config Button] -> [PackOption] -> IO Button

-- | Adds a space widget at the end of the select box.
addSpace :: SelectBox -> Distance -> IO Space

-- | Gets the default button from a select box (if there is one).
getDefault :: SelectBox -> IO (Maybe Button)

-- | Selects the default button of a select box.
selectDefault :: SelectBox -> IO ()
instance Synchronized SelectBox
instance HasEnable SelectBox
instance HasBorder SelectBox
instance HasSize SelectBox
instance Widget SelectBox
instance HasColour SelectBox
instance GUIObject SelectBox
instance Destroyable SelectBox
instance Eq SelectBox

module HTk.Toolkit.ModalDialog
modalDialog :: Toplevel -> Bool -> Event a -> IO a
modalInteraction :: Toplevel -> Bool -> Bool -> Event a -> IO a


-- | A simple markup language for convenient writing into an editor widget.
module HTk.Toolkit.MarkupText

-- | The <tt>MarkupText</tt> datatype.
data MarkupText

-- | The markup prose combinator.
prose :: String -> MarkupText

-- | The markup font combinator.
font :: FontDesignator f => f -> [MarkupText] -> MarkupText

-- | The markup newline combinator.
newline :: MarkupText

-- | The markup bold combinator.
bold :: [MarkupText] -> MarkupText

-- | The markup underline combinator.
underline :: [MarkupText] -> MarkupText

-- | The markup italics combinator.
italics :: [MarkupText] -> MarkupText

-- | The markup space combinator (a number of space characters).
spaces :: Int -> MarkupText

-- | The markup baseline offset combinator.
offset :: Int -> [MarkupText] -> MarkupText

-- | The markup foreground colour combinator.
colour :: ColourDesignator c => c -> [MarkupText] -> MarkupText

-- | The markup background colour combinator.
bgcolour :: ColourDesignator c => c -> [MarkupText] -> MarkupText

-- | The markup flipcolour combinator (flips the colour when the mouse is
--   over this text segment).
flipcolour :: ColourDesignator c => c -> c -> [MarkupText] -> MarkupText

-- | The markup flipunderline combinator (underlines this text segment when
--   the mouse is over this segment).
flipunderline :: [MarkupText] -> MarkupText

-- | The markup action combinator (binds an action for mouse clicks on this
--   text segment).
action :: IO () -> [MarkupText] -> MarkupText

-- | The markup range action combinator (binds actions for entering and/or
--   leaving this text segment with the mouse cursor).
rangeaction :: Maybe (IO ()) -> Maybe (IO ()) -> [MarkupText] -> MarkupText

-- | The markup clipup combinator (clips up a text segment on a mouse
--   click).
clipup :: [MarkupText] -> [MarkupText] -> MarkupText

-- | The markup left margin combinator (normal left intend for a line).
leftmargin :: Int -> [MarkupText] -> MarkupText

-- | The markup wrap margin combinator (intend for a part of a line that
--   gets wrapped).
wrapmargin :: Int -> [MarkupText] -> MarkupText

-- | The markup right margin combinator.
rightmargin :: Int -> [MarkupText] -> MarkupText

-- | Center this part of the text
centered :: [MarkupText] -> MarkupText
flushright :: [MarkupText] -> MarkupText

-- | Flush this part of the against the left margin
flushleft :: [MarkupText] -> MarkupText

-- | The markup href combinator (a link to another markup text).
href :: [MarkupText] -> [MarkupText] -> MarkupText
window :: Widget w => IO (w, IO ()) -> MarkupText

-- | The markup window combinator (a widget container inside the editor
--   widget).
window1 :: Widget w => (Editor -> IO (w, IO ())) -> MarkupText

-- | Special character.
alpha :: MarkupText

-- | Special character.
beta :: MarkupText

-- | Special character.
chi :: MarkupText

-- | Special character.
delta :: MarkupText

-- | Special character.
epsilon :: MarkupText

-- | Special character.
phi :: MarkupText

-- | Special character.
gamma :: MarkupText

-- | Special character.
eta :: MarkupText

-- | Special character.
varphi :: MarkupText

-- | Special character.
iota :: MarkupText

-- | Special character.
kappa :: MarkupText

-- | Special character.
lambda :: MarkupText

-- | Special character.
mu :: MarkupText

-- | Special character.
nu :: MarkupText

-- | Special character.
omikron :: MarkupText

-- | Special character.
pi :: MarkupText

-- | Special character.
theta :: MarkupText

-- | Special character.
vartheta :: MarkupText

-- | Special character.
rho :: MarkupText

-- | Special character.
sigma :: MarkupText

-- | Special character.
varsigma :: MarkupText

-- | Special character.
tau :: MarkupText

-- | Special character.
upsilon :: MarkupText

-- | Special character.
varpi :: MarkupText

-- | Special character.
omega :: MarkupText

-- | Special character.
xi :: MarkupText

-- | Special character.
psi :: MarkupText

-- | Special character.
zeta :: MarkupText

-- | Special character (uppercase).
aalpha :: MarkupText

-- | Special character (uppercase).
bbeta :: MarkupText

-- | Special character (uppercase).
cchi :: MarkupText

-- | Special character (uppercase).
ddelta :: MarkupText

-- | Special character (uppercase).
eeps :: MarkupText

-- | Special character (uppercase).
pphi :: MarkupText

-- | Special character (uppercase).
ggamma :: MarkupText

-- | Special character (uppercase).
eeta :: MarkupText

-- | Special character (uppercase).
iiota :: MarkupText

-- | Special character (uppercase).
kkappa :: MarkupText

-- | Special character (uppercase).
llambda :: MarkupText

-- | Special character (uppercase).
mmu :: MarkupText

-- | Special character (uppercase).
nnu :: MarkupText

-- | Special character (uppercase).
oomikron :: MarkupText

-- | Special character (uppercase).
ppi :: MarkupText

-- | Special character (uppercase).
ttheta :: MarkupText

-- | Special character (uppercase).
rrho :: MarkupText

-- | Special character (uppercase).
ssigma :: MarkupText

-- | Special character (uppercase).
ttau :: MarkupText

-- | Special character (uppercase).
uupsilon :: MarkupText

-- | Special character (uppercase).
oomega :: MarkupText

-- | Special character (uppercase).
xxi :: MarkupText

-- | Special character (uppercase).
ppsi :: MarkupText

-- | Special character (uppercase).
zzeta :: MarkupText

-- | Special character.
forallsmall :: MarkupText

-- | Special character.
exists :: MarkupText

-- | Special character.
forallbig :: MarkupText

-- | Special character.
eexists :: MarkupText

-- | Special character.
existsone :: MarkupText

-- | Special character.
not :: MarkupText

-- | Special character.
and :: MarkupText

-- | Special character.
bigand :: MarkupText

-- | Special character.
or :: MarkupText

-- | Special character.
times :: MarkupText

-- | Special character.
sum :: MarkupText

-- | Special character.
prod :: MarkupText

-- | Special character.
comp :: MarkupText

-- | Special character.
bullet :: MarkupText

-- | Special character.
tensor :: MarkupText

-- | Special character.
otimes :: MarkupText

-- | Special character.
oplus :: MarkupText

-- | Special character.
bot :: MarkupText

-- | Special character.
rightarrow :: MarkupText

-- | Special character.
rrightarrow :: MarkupText

-- | Special character.
longrightarrow :: MarkupText

-- | Special character.
llongrightarrow :: MarkupText

-- | Special character.
leftrightarrow :: MarkupText

-- | Special character.
lleftrightarrow :: MarkupText

-- | Special character.
ddownarrow :: MarkupText

-- | Special character.
uuparrow :: MarkupText

-- | Special character.
vline :: MarkupText

-- | Special character.
hline :: MarkupText

-- | Special character.
rbrace1 :: MarkupText

-- | Special character.
rbrace2 :: MarkupText

-- | Special character.
rbrace3 :: MarkupText

-- | Special character.
emptyset :: MarkupText

-- | Special character.
inset :: MarkupText

-- | Special character.
notin :: MarkupText

-- | Special character.
intersect :: MarkupText

-- | Special character.
union :: MarkupText

-- | Special character.
subset :: MarkupText

-- | Special character.
subseteq :: MarkupText

-- | Special character.
setminus :: MarkupText

-- | Special character.
powerset :: MarkupText

-- | Special character.
inf :: MarkupText

-- | Special character.
iintersect :: MarkupText

-- | Special character.
uunion :: MarkupText

-- | Special character.
equiv :: MarkupText

-- | Special character.
neq :: MarkupText

-- | Special character.
leq :: MarkupText

-- | Special character.
grteq :: MarkupText

-- | Special character.
lsem :: MarkupText

-- | Special character.
rsem :: MarkupText

-- | Special character.
dots :: MarkupText

-- | Special character.
copyright :: MarkupText

-- | Widgets that can contain markup text instantiate the <tt>class
--   HasMarkupText</tt>.
class HasMarkupText w
new :: HasMarkupText w => [MarkupText] -> w -> IO w
insertAt :: HasMarkupText w => [MarkupText] -> Position -> Config w
clear :: HasMarkupText w => Config w
scrollMarkupText :: Size -> [MarkupText] -> MarkupText
instance HasMarkupText Editor


-- | Separators for widgets. It is just a frame with a given relief and
--   borderwidth etc.
module HTk.Toolkit.Separator

-- | The <tt>Separator</tt> datatype.
data Separator

-- | Constructs a new separator widget and returns it as a value.
newSeparator :: Container par => par -> [Config Separator] -> IO Separator

-- | Constructs a new horizontal separator widget and returns it as a
--   value. (no packing needed)
newHSeparator :: Container par => par -> IO Separator

-- | Constructs a new vertical separator widget and returns it as a value.
--   (no packing needed)
newVSeparator :: Container par => par -> IO Separator
instance Eq Separator
instance HasOrientation Separator
instance HasSize Separator
instance HasBorder Separator
instance Destroyable Separator
instance GUIObject Separator


-- | Basic dialog window and a couple of predefined abstractions.
module HTk.Toolkit.DialogWin

-- | The <tt>Dialog</tt> datatype.
data Dialog a

-- | Creates a new dialogue with its label, text and buttons.
dialog :: Bool -> [Choice a] -> Maybe Int -> [Config (Dialog a)] -> [Config Toplevel] -> IO (Dialog a)

-- | Constructs an alert window with the given text

-- | <i>Deprecated: Please use the functions in util/Messages instead</i>
createAlertWin :: String -> [Config Toplevel] -> IO ()

-- | Constructs an error window with the given text

-- | <i>Deprecated: Please use the functions in util/Messages instead</i>
createErrorWin :: String -> [Config Toplevel] -> IO ()

-- | Constructs an warning window with the given text

-- | <i>Deprecated: Please use the functions in util/Messages instead</i>
createWarningWin :: String -> [Config Toplevel] -> IO ()

-- | Constructs an confirm window with the given text

-- | <i>Deprecated: Please use the functions in util/Messages instead</i>
createConfirmWin :: String -> [Config Toplevel] -> IO Bool

-- | Constructs a message (info) window with the given string.

-- | <i>Deprecated: Please use the functions in util/Messages instead</i>
createMessageWin :: String -> [Config Toplevel] -> IO ()

-- | Constructs an alert window with the given markuptext
createAlertWin' :: [MarkupText] -> [Config Toplevel] -> IO ()

-- | Constructs an error window with the given markuptext
createErrorWin' :: [MarkupText] -> [Config Toplevel] -> IO ()

-- | Constructs an warning window with the given markuptext
createWarningWin' :: [MarkupText] -> [Config Toplevel] -> IO ()

-- | Constructs an confirm window with the given markuptext
createConfirmWin' :: [MarkupText] -> [Config Toplevel] -> IO Bool

-- | Constructs a message (info) window with the given markuptext
createMessageWin' :: [MarkupText] -> [Config Toplevel] -> IO ()

-- | Constructs a new dialogue window for plain text
createDialogWin :: [Choice a] -> Maybe Int -> [Config (Dialog a)] -> [Config Toplevel] -> IO a

-- | Constructs a new dialow window for markup text
createDialogWin' :: [Choice a] -> Maybe Int -> [Config (Dialog a)] -> [Config Toplevel] -> IO a
loadHTkImages :: ()
questionImg :: Image
useHTk :: IO ()
instance GUIValue v => HasText (Dialog a) v
instance HasMarkupText (Dialog a)
instance HasPhoto (Dialog a)
instance GUIObject (Dialog a)


-- | HTk's <i>file dialog box</i>.
module HTk.Toolkit.FileDialog

-- | Opens a file dialog box for a file which should already exist.
fileDialogStr :: String -> FilePath -> IO (Event (Maybe FilePath))

-- | Opens a file dialog box for a file which is to be created.
newFileDialogStr :: String -> FilePath -> IO (Event (Maybe FilePath))

-- | Opens a file dialog box for a file which should already exist.
fileDialog :: String -> Ref FilePath -> IO (Event (Maybe FilePath))

-- | Opens a file dialog box for a file which is to be created.
newFileDialog :: String -> Ref FilePath -> IO (Event (Maybe FilePath))


-- | A simple scroll pane for a scrolled widget.
module HTk.Toolkit.ScrollBox

-- | The <tt>ScrollBox</tt> datatype.
data ScrollBox a
ScrollBox :: Frame -> [Frame] -> [ScrollBar] -> a -> ScrollBox a
fScrollFrame :: ScrollBox a -> Frame
fPadFrames :: ScrollBox a -> [Frame]
fScrollBars :: ScrollBox a -> [ScrollBar]
fScrolledWidget :: ScrollBox a -> a

-- | Constructs a new scrollbox and returns a handler.
newScrollBox :: (Widget wid, HasScroller wid, Container par) => par -> (Frame -> IO wid) -> [Config (ScrollBox wid)] -> IO (ScrollBox wid, wid)

-- | Gets the scrolled widget from a scrollbox.
getScrolledWidget :: (Widget a, HasScroller a) => ScrollBox a -> a

-- | Gets the scrollbars from a scrollbox.
getScrollBars :: HasScroller a => ScrollBox a -> [ScrollBar]
instance HasSize (ScrollBox a)
instance Synchronized (ScrollBox a)
instance HasScroller a => HasScroller (ScrollBox a)
instance HasBorder (ScrollBox a)
instance (HasColour a, HasScroller a) => HasColour (ScrollBox a)
instance (Widget a, HasScroller a) => Widget (ScrollBox a)
instance Destroyable (ScrollBox a)
instance GUIObject (ScrollBox a)
instance Eq (ScrollBox a)


-- | HTk's <i>TreeList</i> module.
module HTk.Toolkit.TreeList

-- | Constructs a new tree list.
newTreeList :: (Container par, CItem a) => par -> ChildrenFun a -> [TreeListObject a] -> [Config (TreeList a)] -> IO (TreeList a)

-- | The <tt>TreeList</tt> datatype.
data CItem c => TreeList c

-- | Binds a listener for tree list events to the tree list and returns a
--   corresponding event and an unbind action.
bindTreeListEv :: CItem c => TreeList c -> IO (Event (TreeListEvent c), IO ())

-- | The <tt>TreeListEvent</tt> datatype.
data TreeListEvent c
Selected :: (Maybe (TreeListObject c)) -> TreeListEvent c
Focused :: (Maybe (TreeListObject c), EventInfo) -> TreeListEvent c

-- | Removes the corresponding objects to a given tree list object value
--   from the tree list.
removeTreeListObject :: CItem a => TreeList a -> a -> IO ()

-- | Updates the tree list by recalling the children function for all
--   opened objects.
updateTreeList :: CItem a => TreeList a -> IO ()

-- | Adds a toplevel tree list object.
addTreeListRootObject :: CItem a => TreeList a -> TreeListObject a -> IO ()

-- | Adds a subobject to a tree list object.
addTreeListSubObject :: CItem a => TreeList a -> a -> TreeListObject a -> IO ()

-- | Constructs a new tree list object.
newTreeListObject :: CItem a => a -> TreeListObjectType -> TreeListObject a

-- | The <tt>TreeListObject</tt> datatype.
data TreeListObject a

-- | The <tt>TreeListObjectType</tt> datatype.
data TreeListObjectType
Node :: TreeListObjectType
Leaf :: TreeListObjectType

-- | Checks for a given tree list object value if the corresponding object
--   is a leaf.
isLeaf :: CItem a => TreeList a -> a -> IO (Maybe Bool)

-- | Checks for a given tree list object value if the corresponding object
--   is a node.
isNode :: CItem a => TreeList a -> a -> IO (Maybe Bool)

-- | Converts the corresponding object to a given tree list object value to
--   a leaf.
mkLeaf :: CItem a => TreeList a -> a -> IO ()

-- | Converts the corresponding object to a given tree list object value to
--   a node.
mkNode :: CItem a => TreeList a -> a -> IO ()

-- | Selector for the value of a tree list object.
getTreeListObjectValue :: TreeListObject a -> a

-- | Selector for the type of a tree list object (node or leaf).
getTreeListObjectType :: TreeListObject a -> TreeListObjectType

-- | True, if the object with the given value is currently opened in the
--   tree list.
isTreeListObjectOpen :: CItem c => TreeList c -> c -> IO Bool

-- | The <tt>ChildrenFun</tt> type.
type ChildrenFun a = TreeListObject a -> IO [TreeListObject a]

-- | (Re-)sets the image of a tree list object.
setImage :: CItem a => TreeList a -> a -> Image -> IO ()

-- | (Re-)sets the name of a tree list object.
setTreeListObjectName :: CItem a => TreeList a -> a -> Name -> IO ()
data TreeListExportItem a
TreeListExportItem :: a -> TreeListObjectType -> Bool -> Int -> Bool -> TreeListExportItem a
obj_val :: TreeListExportItem a -> a
obj_type :: TreeListExportItem a -> TreeListObjectType
open :: TreeListExportItem a -> Bool
intend :: TreeListExportItem a -> Int
selected :: TreeListExportItem a -> Bool
type TreeListState a = [TreeListExportItem a]

-- | Exports the tree list's state.
exportTreeListState :: CItem c => TreeList c -> IO (TreeListState c)

-- | Imports a previously saved tree list state.
importTreeListState :: CItem a => TreeList a -> TreeListState a -> IO ()

-- | Constructs a new tree list recovering a previously saved state.
recoverTreeList :: (Container par, CItem a) => par -> ChildrenFun a -> TreeListState a -> [Config (TreeList a)] -> IO (TreeList a)
instance Eq TreeListObjectType
instance CItem a => Eq (StateEntry a)
instance CItem a => HasPhoto (TREELISTOBJECT a)
instance CItem a => GUIObject (TREELISTOBJECT a)
instance CItem a => Eq (TREELISTOBJECT a)
instance CItem c => HasSize (TreeList c)
instance CItem c => HasColour (TreeList c)
instance CItem c => HasBorder (TreeList c)
instance CItem c => Synchronized (TreeList c)
instance CItem c => Widget (TreeList c)
instance CItem c => Destroyable (TreeList c)
instance CItem c => GUIObject (TreeList c)


-- | A simple drag and drop field.
module HTk.Toolkit.Notepad

-- | The <tt>Notepad</tt> datatype.
data Notepad a

-- | The <tt>NotepadItem</tt> datatype.
data NotepadItem a

-- | Constructs a new notepad and returns a handler.
newNotepad :: (CItem c, Container par) => par -> ScrollType -> Size -> Maybe (NotepadState c) -> [Config (Notepad c)] -> IO (Notepad c)

-- | Creates a new notepad item and returns a handler.
createNotepadItem :: CItem c => c -> Notepad c -> Bool -> [Config (NotepadItem c)] -> IO (NotepadItem c)

-- | Returns a free item position on the notepad.
getFreeItemPosition :: CItem c => Notepad c -> IO Position

-- | Gets the value from a notepad item.
getItemValue :: NotepadItem a -> IO a

-- | The <tt>ScrollType</tt> datatype.
data ScrollType
Scrolled :: ScrollType
NotScrolled :: ScrollType

-- | (Re-)sets the name of a notepad item.
setName :: CItem c => NotepadItem c -> Name -> IO ()
updNotepadScrollRegion :: Notepad a -> IO ()

-- | Selects all items inside the notepad.
selectAll :: Notepad a -> IO ()

-- | Deselects all items inside the notepad.
deselectAll :: Notepad a -> IO ()

-- | Selects a specific notepad item.
selectItem :: Notepad a -> NotepadItem a -> IO ()

-- | Adds an item to the notepad's selection.
selectAnotherItem :: Notepad a -> NotepadItem a -> IO ()

-- | Selects all items within the specified region.
selectItemsWithin :: Position -> Position -> Notepad a -> IO ()

-- | Deselects a notepad item.
deselectItem :: Notepad a -> NotepadItem a -> IO ()

-- | Gets the items from a notepad.
getItems :: Notepad a -> IO [NotepadItem a]

-- | Gets the selected items from a notepad.
getSelectedItems :: Notepad a -> IO [NotepadItem a]

-- | <tt>True</tt> if the given notepad item is selected.
isNotepadItemSelected :: Notepad a -> NotepadItem a -> IO Bool

-- | Deletes an item from a notepad.
deleteItem :: CItem c => Notepad c -> NotepadItem c -> IO ()

-- | Deletes all items from a notepad.
clearNotepad :: Notepad a -> IO ()

-- | Internal (for use with GenGUI).
undoLastMotion :: Notepad a -> IO ()

-- | Binds a listener for notepad events to the notepad and returns a
--   corresponding event and an unbind action.
bindNotepadEv :: Notepad a -> IO (Event (NotepadEvent a), IO ())

-- | The <tt>NotepadEvent</tt> datatype.
data NotepadEvent a

-- | Drop event.
Dropped :: (NotepadItem a, [NotepadItem a]) -> NotepadEvent a

-- | Selection event.
Selected :: (NotepadItem a) -> NotepadEvent a

-- | Deselection event.
Deselected :: (NotepadItem a) -> NotepadEvent a

-- | Doubleclick event.
Doubleclick :: (NotepadItem a) -> NotepadEvent a

-- | Rightclick event.
Rightclick :: [NotepadItem a] -> NotepadEvent a

-- | Buttonrelease after a selection.
ReleaseSelection :: NotepadEvent a

-- | Buttonrelease after a movement.
ReleaseMovement :: EventInfo -> NotepadEvent a

-- | The <tt>NotepadExportItem</tt> datatype.
data CItem c => NotepadExportItem c
NotepadExportItem :: c -> Position -> Bool -> NotepadExportItem c
val :: NotepadExportItem c -> c
pos :: NotepadExportItem c -> Position
selected :: NotepadExportItem c -> Bool
type NotepadState c = [NotepadExportItem c]

-- | Exports a notepad's state.
exportNotepadState :: CItem c => Notepad c -> IO (NotepadState c)

-- | Imports a notepad's state.
importNotepadState :: CItem c => Notepad c -> NotepadState c -> IO ()
instance Eq IntState
instance Eq ScrollType
instance HasSize (Notepad a)
instance HasColour (Notepad a)
instance HasBorder (Notepad a)
instance Synchronized (Notepad a)
instance Widget (Notepad a)
instance Destroyable (Notepad a)
instance GUIObject (Notepad a)
instance Destroyable (NotepadItem a)
instance HasPosition (NotepadItem a)
instance Synchronized (NotepadItem a)
instance GUIObject (NotepadItem a)
instance Eq (NotepadItem a)


-- | A generic graphical user interface.
module HTk.Toolkit.GenGUI

-- | The <tt>GenGUI</tt> datatye.
data GenGUI c

-- | Constructs a new gui and returns a handler.
newGenGUI :: CItem c => Maybe (GenGUIState c) -> Bool -> IO (GenGUI c)

-- | Sets the status label's text.
setStatus :: CItem c => GenGUI c -> String -> IO ()

-- | Clears the status label.
clearStatus :: CItem c => GenGUI c -> IO ()

-- | Displays the given markup text on the editor pane.
updateTextArea :: CItem c => GenGUI c -> [MarkupText] -> IO ()

-- | Clears the editor pane.
clearTextArea :: CItem c => GenGUI c -> IO ()

-- | Gets the gui's menu container.
genGUIMainMenu :: CItem c => GenGUI c -> Menu

-- | External representation of gengui objects.
data NewItem c
LeafItem :: c -> (Maybe (Position, Bool)) -> NewItem c
FolderItem :: c -> [NewItem c] -> (Maybe (Bool, Bool)) -> NewItem c

-- | internal object representation
data Item c

-- | The <tt>Name</tt> datatype.
data Name
Name :: (Int -> String) -> String -> Name
short :: Name -> Int -> String
full :: Name -> String

-- | Objects with a name and an icon.
class Eq c => CItem c
getName :: CItem c => c -> IO Name
getIcon :: CItem c => c -> IO Image

-- | GenGUI's root object.
root :: CItem c => GenGUI c -> IO (Item c)

-- | Gets the item that is currently open (displayed on notepad).
openedFolder :: CItem c => GenGUI c -> IO (Maybe (Item c))

-- | Adds a gengui object.
addItem :: CItem c => GenGUI c -> Item c -> NewItem c -> IO (Item c)

-- | Gets the children from a folder item.
children :: CItem c => Item c -> IO [Item c]

-- | Returns the <tt>CItem</tt> content of an item.
content :: CItem c => (Item c) -> c

-- | The <tt>GenGUIEvent</tt> datatype.
data GenGUIEvent c
FocusTreeList :: (Maybe (Item c)) -> GenGUIEvent c
SelectTreeList :: (Maybe (Item c)) -> GenGUIEvent c
FocusNotepad :: (Item c, Bool) -> GenGUIEvent c
Dropped :: (Item c, [Item c]) -> GenGUIEvent c
Doubleclick :: (Item c) -> GenGUIEvent c
Rightclick :: [Item c] -> GenGUIEvent c
Addition :: (Item c) -> GenGUIEvent c
DroppedOnTextArea :: [Item c] -> GenGUIEvent c

-- | Binds a listener for gengui events to the gengui and returns a
--   corresponding event and an unbind action.
bindGenGUIEv :: CItem c => GenGUI c -> IO (Event (GenGUIEvent c), IO ())

-- | The gui's state.
type GenGUIState c = [NewItem c]

-- | Exports the gui's state.
exportGenGUIState :: CItem c => GenGUI c -> IO (GenGUIState c)
instance CItem c => Synchronized (GenGUI c)
instance CItem c => Window (GenGUI c)
instance CItem c => Destroyable (GenGUI c)
instance CItem c => GUIObject (GenGUI c)
instance CItem c => Eq (GenGUI c)
instance CItem c => CItem (Item c)
instance CItem c => Eq (Item c)


-- | A generic data browser.
module HTk.Toolkit.GenericBrowser

-- | Constructs a new generic browser and returns a handler.
newGenericBrowser :: (GBObject o, Container par) => par -> [o] -> [Config (GenericBrowser o)] -> IO (GenericBrowser o)

-- | The <tt>GenericBrowser</tt> datatype.
data GBObject o => GenericBrowser o

-- | Browsed data needs to instantiate the class <tt>CItem</tt>.
class CItem o => GBObject o
getChildren :: GBObject o => o -> IO [o]
isObjectNode :: GBObject o => o -> IO Bool
data GBObject o => GenericBrowserEvent o
SelectedInTreeList :: (Maybe o) -> GenericBrowserEvent o
FocusedInTreeList :: (Maybe o) -> GenericBrowserEvent o
Dropped :: (o, [o]) -> GenericBrowserEvent o
SelectedInNotepad :: o -> GenericBrowserEvent o
DeselectedInNotepad :: o -> GenericBrowserEvent o
Doubleclick :: o -> GenericBrowserEvent o
Rightclick :: [o] -> GenericBrowserEvent o

-- | Binds a listener for generic browser events to the tree list and
--   returns a corresponding event and an unbind action.
bindGenericBrowserEv :: GBObject o => GenericBrowser o -> IO (Event (GenericBrowserEvent o), IO ())
instance GBObject o => Widget (GenericBrowser o)
instance GBObject o => GUIObject (GenericBrowser o)


-- | A simple <i>icon bar</i> containing buttons and separators.
module HTk.Toolkit.IconBar

-- | The <tt>IconBar</tt> datatype.
data IconBar

-- | Creates a new icon bar and returns a handler.
newIconBar :: Container par => par -> [Config IconBar] -> IO IconBar

-- | Adds a separator at the end of the icon bar.
addSeparator :: IconBar -> IO Separator

-- | Adds a button at the end of the icon bar.
addButton :: IconBar -> [Config Button] -> IO Button

-- | The <tt>Button</tt> datatype.
data Button
type Separator = Frame

-- | Gets the buttons from an icon bar.
getIconButtons :: IconBar -> IO [Button]

-- | Gets the items from an icon bar.
getIconBarItems :: IconBar -> IO [Either Frame Button]
instance Synchronized IconBar
instance HasOrientation IconBar
instance HasEnable IconBar
instance HasBorder IconBar
instance HasSize IconBar
instance Widget IconBar
instance HasColour IconBar
instance Destroyable IconBar
instance GUIObject IconBar
instance Eq IconBar


-- | A spin button widget consisting of two button widgets.
module HTk.Toolkit.SpinButton

-- | The <tt>Spin</tt> datatype.
data Spin
Down :: Spin
Up :: Spin

-- | The <tt>SpinButton</tt> datatype.
data SpinButton

-- | Constructs a new spin button and returns a handler.
newSpinButton :: Container par => par -> (Spin -> IO a) -> [Config SpinButton] -> IO SpinButton
instance Eq Spin
instance Ord Spin
instance HasSize SpinButton
instance HasFont SpinButton
instance HasEnable SpinButton
instance HasBorder SpinButton
instance HasColour SpinButton
instance Synchronized SpinButton
instance Widget SpinButton
instance Destroyable SpinButton
instance GUIObject SpinButton
instance Eq SpinButton


-- | the inputform
module HTk.Toolkit.InputForm

-- | The <tt>InputForm</tt> datatype.
data InputForm a
InputForm :: Box -> (Ref (FormState a)) -> InputForm a

-- | Creates a new <tt>InputForm</tt>
newInputForm :: Box -> Maybe a -> [Config (InputForm a)] -> IO (InputForm a)
class InputField f
selector :: (InputField f, GUIValue b) => (a -> b) -> Config (f a b)
modifier :: (InputField f, GUIValue b) => (a -> b -> a) -> Config (f a b)
data FormState a

-- | The <tt>EntryField</tt> datatype.
data EntryField a b

-- | Add a new <tt>EntryField</tt> to the form
newEntryField :: GUIValue b => InputForm a -> [Config (EntryField a b)] -> IO (EntryField a b)

-- | The <tt>NumEntryField</tt> datatype.
data NumEntryField a b

-- | Add a new <tt>NumEntryField</tt> to the form
newNumEntryField :: (Ord b, Num b, GUIValue b) => InputForm a -> (b, b) -> b -> [Config (NumEntryField a b)] -> IO (NumEntryField a b)

-- | The <tt>CheckboxField</tt> datatype.
data CheckboxField a b

-- | Add a new <tt>CheckboxField</tt> to the form
newCheckboxField :: GUIValue b => InputForm a -> b -> [Config (CheckboxField a b)] -> IO (CheckboxField a b)

-- | The <tt>EnumField</tt> datatype.
data EnumField a b

-- | Add a new <tt>EnumField</tt> to the form
newEnumField :: GUIValue b => InputForm a -> [b] -> [Config (EnumField a b)] -> IO (EnumField a b)

-- | The <tt>TextField</tt> datatype.
data TextField a b

-- | Add a new <tt>TextField</tt> to the form
newTextField :: GUIValue b => InputForm a -> [Config (TextField a b)] -> IO (TextField a b)
getFormValue :: InputForm a -> IO a
setFormValue :: InputForm a -> a -> IO ()
data RecordField a b
newRecordField :: InputForm a -> (Box -> IO (InputForm b)) -> [Config (RecordField a b)] -> IO (RecordField a b, InputForm b)
undefinedFormValue :: IOError
instance InputField RecordField
instance GUIValue b => Variable (RecordField a b) b
instance Synchronized (RecordField a b)
instance GUIValue c => HasText (RecordField a b) c
instance HasEnable (RecordField a b)
instance HasFont (RecordField a b)
instance HasSize (RecordField a b)
instance HasBorder (RecordField a b)
instance HasColour (RecordField a b)
instance Widget (RecordField a b)
instance GUIObject (RecordField a b)
instance Eq (RecordField a b)
instance InputField EnumField
instance GUIValue b => Variable (EnumField a b) b
instance Synchronized (EnumField a b)
instance GUIValue c => HasText (EnumField a b) c
instance HasEnable (EnumField a b)
instance HasFont (EnumField a b)
instance HasSize (EnumField a b)
instance HasBorder (EnumField a b)
instance HasColour (EnumField a b)
instance Widget (EnumField a b)
instance GUIObject (EnumField a b)
instance Eq (EnumField a b)
instance InputField TextField
instance GUIValue b => Variable (TextField a b) b
instance (GUIValue b, GUIValue c) => HasText (TextField a b) c
instance HasEnable (TextField a b)
instance HasFont (TextField a b)
instance HasSize (TextField a b)
instance HasBorder (TextField a b)
instance HasColour (TextField a b)
instance Synchronized (TextField a b)
instance GUIObject (TextField a b)
instance Eq (TextField a b)
instance InputField CheckboxField
instance GUIValue b => Variable (CheckboxField a b) b
instance Synchronized (CheckboxField a b)
instance (GUIValue b, GUIValue c) => HasText (CheckboxField a b) c
instance HasEnable (CheckboxField a b)
instance HasFont (CheckboxField a b)
instance HasSize (CheckboxField a b)
instance HasBorder (CheckboxField a b)
instance HasColour (CheckboxField a b)
instance Widget (CheckboxField a b)
instance GUIObject (CheckboxField a b)
instance Eq (CheckboxField a b)
instance InputField NumEntryField
instance GUIValue b => Variable (NumEntryField a b) b
instance Synchronized (NumEntryField a b)
instance (GUIValue b, GUIValue c) => HasText (NumEntryField a b) c
instance HasEnable (NumEntryField a b)
instance HasFont (NumEntryField a b)
instance HasSize (NumEntryField a b)
instance HasBorder (NumEntryField a b)
instance HasColour (NumEntryField a b)
instance Widget (NumEntryField a b)
instance GUIObject (NumEntryField a b)
instance Eq (NumEntryField a b)
instance InputField EntryField
instance GUIValue b => Variable (EntryField a b) b
instance Synchronized (EntryField a b)
instance (GUIValue b, GUIValue c) => HasText (EntryField a b) c
instance HasEnable (EntryField a b)
instance HasFont (EntryField a b)
instance HasSize (EntryField a b)
instance HasBorder (EntryField a b)
instance HasColour (EntryField a b)
instance Widget (EntryField a b)
instance GUIObject (EntryField a b)
instance Eq (EntryField a b)
instance Variable (InputForm a) a
instance Synchronized (InputForm a)
instance HasBorder (InputForm a)
instance HasSize (InputForm a)
instance Container (InputForm a)
instance Widget (InputForm a)
instance HasEnable (InputForm a)
instance HasFont (InputForm a)
instance HasColour (InputForm a)
instance GUIObject (InputForm a)
instance Eq (InputForm a)


-- | Basic input window for record values and their fields.
module HTk.Toolkit.InputWin

-- | The <tt>InputWin</tt> datatype.
data InputWin a
createInputWin :: String -> (Box -> IO (InputForm a)) -> [Config Toplevel] -> IO (InputWin a, InputForm a)

-- | Create an <tt>InputWindow</tt> with a generic message box title
createInputWin' :: String -> [Config Message] -> (Box -> IO (InputForm a)) -> [Config Toplevel] -> IO (InputWin a, InputForm a)

-- | Wait for the user to end the dialog.
wait :: InputWin a -> Bool -> IO (Maybe a)

-- | Wait for the user to end the dialog, and validate the result
waitValidate :: InputWin a -> (a -> IO Bool) -> Bool -> IO (Maybe a)
instance GUIObject (InputWin a)


-- | A simple log window.
module HTk.Toolkit.LogWin

-- | The <tt>LogWin</tt> datatype.
data LogWin
LogWin :: Toplevel -> Editor -> (IO ()) -> LogWin

-- | Creates a new log window and returns a handler.
createLogWin :: [Config Toplevel] -> IO LogWin

-- | Objects associated with a file instantiate the <tt>class HasFile</tt>.
class GUIObject w => HasFile w
filename :: HasFile w => String -> Config w
getFileName :: HasFile w => w -> IO String

-- | Writes into the log window.
writeLogWin :: LogWin -> String -> IO ()
instance Destroyable LogWin
instance GUIObject LogWin


-- | A simple prompt (a labelled entry field).
module HTk.Toolkit.Prompt

-- | The <tt>Prompt</tt> datatype.
data Prompt a

-- | Construct a new prompt and returns a handler.
newPrompt :: GUIValue a => Box -> [Config (Prompt a)] -> IO (Prompt a)

-- | Gets the entry field of the prompt.
getPromptEntry :: Prompt a -> Entry a
instance GUIValue a => HasValue (Prompt a) a
instance Synchronized (Prompt a)
instance HasEnable (Prompt a)
instance (GUIValue a, GUIValue b) => HasText (Prompt a) b
instance HasFont (Prompt a)
instance HasColour (Prompt a)
instance HasBorder (Prompt a)
instance Widget (Prompt a)
instance GUIObject (Prompt a)
instance Eq (Prompt a)


-- | This module defines <tt>SimpleForm</tt>s, a simple interface to
--   filling in forms using HTk. (Indeed, it is simple enough that it might
--   be ported to some other GUI sometime.)
module HTk.Toolkit.SimpleForm
data Form value
newFormEntry :: (FormLabel label, FormValue value) => label -> value -> Form value
emptyForm :: Form ()
nullForm :: FormLabel label => label -> Form ()
newFormMenu :: FormLabel label => label -> HTkMenu value -> Form (Maybe value)
newFormOptionMenu :: GUIValue a => [a] -> Form a
newFormOptionMenu2 :: (Eq a, GUIValue a) => [(a, b)] -> Form b
(//) :: Form value1 -> Form value2 -> Form (value1, value2)
(\\) :: Form x -> Form y -> Form (x, y)
column :: [Form value] -> Form [value]
row :: [Form value] -> Form [value]
doForm :: String -> Form value -> IO (Maybe value)
doFormMust :: String -> Form value -> IO value
doFormList :: String -> [(Form x, String)] -> IO (Event (WithError x), IO ())
mapForm :: (x -> WithError y) -> Form x -> Form y
mapFormIO :: (x -> IO (WithError y)) -> Form x -> Form y
guardForm :: (x -> Bool) -> String -> Form x -> Form x
guardFormIO :: (x -> IO Bool) -> String -> Form x -> Form x
guardNothing :: String -> Form (Maybe x) -> Form x
class FormValue value
makeFormEntry :: FormValue value => Frame -> value -> IO (EnteredForm value)
mapMakeFormEntry :: FormValue value2 => (value1 -> value2) -> (value2 -> value1) -> (Frame -> value1 -> IO (EnteredForm value1))
class FormTextField value
makeFormString :: FormTextField value => value -> String
readFormString :: FormTextField value => String -> WithError value
class FormTextFieldIO value
makeFormStringIO :: FormTextFieldIO value => value -> IO String
readFormStringIO :: FormTextFieldIO value => String -> IO (WithError value)
newtype Password value
Password :: value -> Password value
class FormLabel label
formLabel :: FormLabel label => Frame -> label -> IO (IO ())
data EmptyLabel
EmptyLabel :: EmptyLabel
data WrappedFormLabel
WrappedFormLabel :: label -> WrappedFormLabel
data Radio x
Radio :: x -> Radio x
NoRadio :: Radio x
class HasConfigRadioButton value
configRadioButton :: HasConfigRadioButton value => value -> Config (RadioButton Int)

-- | An editable text window as a form entry Useful config options: (value
--   String) to set initial contents (height i), (width i) to set the
--   height and width in characters. (background s) to set the background
--   colour to s.
editableTextForm :: [Config Editor] -> Form String

-- | Like <a>editableTextForm</a> but no scrollbars are displayed.
editableTextForm0 :: [Config Editor] -> Form String
instance [overlap ok] Typeable Radio
instance [overlap ok] FormValue ()
instance [overlap ok] FormValue Bool
instance [overlap ok] (Monad m, HasBinary x m) => HasBinary (Radio x) m
instance [overlap ok] (HasConfigRadioButton value, Bounded value, Enum value) => FormValue (Radio value)
instance [overlap ok] FormTextFieldIO value => FormTextFieldIO (Maybe value)
instance [overlap ok] FormTextFieldIO value => FormValue (Password value)
instance [overlap ok] FormTextFieldIO value => FormValue value
instance [overlap ok] FormTextField value => FormTextFieldIO value
instance [overlap ok] (Num a, Show a, Read a) => FormTextField a
instance [overlap ok] FormTextField String
instance [overlap ok] FormLabel EmptyLabel
instance [overlap ok] FormLabel WrappedFormLabel
instance [overlap ok] FormLabel Image
instance [overlap ok] FormLabel String
instance [overlap ok] Functor Form


-- | This module implements a simple list box to which strings can be added
--   at the end and deleted.
module HTk.Toolkit.SimpleListBox
data SimpleListBox val
newSimpleListBox :: Container par => par -> (val -> String) -> [Config (SimpleListBox val)] -> IO (SimpleListBox val)
data SimpleListBoxItem val
addItemAtEnd :: SimpleListBox val -> val -> IO (SimpleListBoxItem val)
deleteItem :: SimpleListBox val -> SimpleListBoxItem val -> IO ()
getItems :: SimpleListBox value -> IO [value]
bindSelection :: SimpleListBox val -> IO (Event [SimpleListBoxItem val], IO ())
instance HasSize (SimpleListBox val)
instance Widget (SimpleListBox val)
instance GUIObject (SimpleListBox val)
instance Ord (SimpleListBoxItem val)
instance Eq (SimpleListBoxItem val)
instance Object (SimpleListBoxItem val)
instance Destroyable (SimpleListBox val)
instance Object (SimpleListBox val)


-- | A simple window to display uneditable, scrollable text (e.g. error
--   logs)
module HTk.Toolkit.TextDisplay

-- | Display some (longish) text in an uneditable, scrollable editor.
--   Returns immediately-- the display is forked off to separate thread.
createTextDisplayExt :: String -> String -> [Config Editor] -> IO () -> IO (Toplevel, Editor)

-- | Display some (longish) text in an uneditable, scrollable editor.
--   Simplified version of createTextDisplayExt
createTextDisplay :: String -> String -> [Config Editor] -> IO ()
