-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Perl printf like formatter.
--   
--   A Perl printf like formatter.
@package printf-mauke
@version 0.5.2

module Text.Printf.Mauke.TH

-- | A static checking layer on top of <a>printf</a>. It hasn't been tested
--   much, but static argument checking is always a good idea. To use it,
--   add
--   
--   <pre>
--   {-# LANGUAGE TemplateHaskell #-}
--   
--   import Text.Printf.Mauke.TH
--   </pre>
--   
--   at the top of your code and call <tt>$(<a>printf</a> "%d %d") x y</tt>
--   instead of <tt><a>printf</a> "%d %d" x y</tt>.
printf :: String -> ExpQ
instance Eq PType
instance Ord PType
instance Show PType
instance Read PType
instance ToString ByteString
instance ToString ByteString
instance ToChar a => ToString [a]

module Text.Printf.Mauke

-- | Format a variable number of arguments according to a format string,
--   similar to (s)printf in Perl. The return value is either a
--   <a>String</a> or <tt><a>IO</a> a</tt>, in which case the result is
--   printed to <a>stdout</a>. If you use the <a>IO</a> variant, don't use
--   the result: Because it has to be of any type <tt>a</tt>, this library
--   makes it <a>undefined</a>.
--   
--   The format string consists of ordinary characters (everything except
--   <tt>'%'</tt>), which are passed through unchanged, and formatting
--   directives, which have the following form:
--   
--   <pre>
--   % <i>flag</i>* <i>vector</i>? <i>width</i>? <i>precision</i>? <i>type</i>
--   </pre>
--   
--   (<tt>*</tt> and <tt>?</tt> mean 0 or more and 0 or 1 of the preceding
--   item, respectively.)
--   
--   Flags:
--   
--   <ul>
--   <li><i><tt>space</tt></i> prefix positive numbers with a space</li>
--   <li><i><tt>+</tt></i> prefix positive numbers with a plus sign
--   (overrides space if both are present)</li>
--   <li><i><tt>-</tt></i> left-justify within the field</li>
--   <li><i><tt>0</tt></i> pad with zeroes on the left, not spaces</li>
--   <li><i><tt>#</tt></i> prefix binary numbers with
--   <tt>0b</tt>/<tt>0B</tt>, octal numbers with <tt>0o</tt>/<tt>0O</tt>
--   and hexadecimal numbers with <tt>0x</tt>/<tt>0X</tt></li>
--   </ul>
--   
--   The <i>vector</i> flag <tt>v</tt> tells <a>printf</a> to format each
--   character in the string argument according to the current directive,
--   then joins the results with a separator that defaults to <tt>"."</tt>.
--   When <tt>*v</tt> is used, the separator is taken from the argument
--   list (use e.g. <tt><a>printf</a> "%*v.2x" "" str</tt> if you want no
--   separator).
--   
--   The <i>width</i> is either a decimal integer or <tt>*</tt>, in which
--   case the width is taken from the argument list (this argument must be
--   an integer). It specifies the minimum width for this field. Shorter
--   values are padded on the left with spaces (but this can be changed by
--   the <tt>0</tt> and <tt>-</tt> flags). If the <i>width</i> taken from
--   the argument list is negative, it behaves as if the <tt>-</tt> flag
--   was specified.
--   
--   The <i>precision</i> consists of a <tt>.</tt> followed by digits or a
--   <tt>*</tt> (see the description of <i>width</i> above). The effects
--   depend on the format <i>type</i>:
--   
--   <ul>
--   <li>for floating point formats, this specifies the number of digits
--   after the decimal point</li>
--   <li>for string formats, this is the maximum number of characters to
--   appear (longer strings are truncated)</li>
--   <li>for integer formats, this is the minimum number of digits to
--   appear in the output; shorter values are zero-padded</li>
--   </ul>
--   
--   Types:
--   
--   <ul>
--   <li><i><tt>%</tt></i> A percent sign. No argument is consumed.</li>
--   <li><i><tt>c</tt></i> A character. If the argument is an integer, it
--   is converted with <tt>chr</tt>.</li>
--   <li><i><tt>s</tt></i> A string.</li>
--   <li><i><tt>d</tt></i> A decimal integer.</li>
--   <li><i><tt>u</tt></i> An unsigned decimal integer.</li>
--   <li><i><tt>b</tt></i> A binary integer.</li>
--   <li><i><tt>B</tt></i> Like <tt>b</tt>, but using a <tt>0B</tt> prefix
--   with <tt>#</tt>.</li>
--   <li><i><tt>o</tt></i> An octal integer.</li>
--   <li><i><tt>O</tt></i> Like <tt>o</tt>, but using a <tt>0O</tt> prefix
--   with <tt>#</tt>.</li>
--   <li><i><tt>x</tt></i> A hexadecimal integer.</li>
--   <li><i><tt>X</tt></i> Like <tt>x</tt>, but using uppercase
--   letters.</li>
--   <li><i><tt>e</tt></i> A floating point number in scientific
--   notation.</li>
--   <li><i><tt>E</tt></i> Like <tt>e</tt>, but using an uppercase
--   <tt>E</tt>.</li>
--   <li><i><tt>f</tt></i> A floating point number in fixed decimal
--   notation.</li>
--   <li><i><tt>g</tt></i> A floating point number in <tt>%e</tt> or
--   <tt>%f</tt> notation.</li>
--   <li><i><tt>G</tt></i> Like <tt>g</tt>, but using an uppercase
--   <tt>E</tt>.</li>
--   <li><i><tt>_</tt></i> A generic format; it behaves like <tt>%c</tt>,
--   <tt>%s</tt>, <tt>%d</tt> or <tt>%g</tt>, depending on the argument
--   type.</li>
--   </ul>
printf :: PrintfType r => String -> r

-- | Like <a>printf</a>, except that the result is printed to the specified
--   <a>Handle</a>.
hPrintf :: HPrintfType r => Handle -> String -> r

-- | Class for valid printf arguments.
class PrintfArg a
embed :: PrintfArg a => a -> Arg

-- | The internal type used to wrap and store all arguments.
data Arg
AInt :: Integer -> Arg
AChar :: Char -> Arg
AStr :: String -> Arg
AFloat :: Double -> Arg
class FromChar a
fromChar :: FromChar a => Char -> a
class ToChar a
toChar :: ToChar a => a -> Char
class PrintfType a
class HPrintfType a
instance HPrintfType (IO a)
instance (PrintfArg a, HPrintfType r) => HPrintfType (a -> r)
instance PrintfType (IO a)
instance (PrintfArg a, PrintfType r) => PrintfType (a -> r)
instance FromChar a => PrintfType [a]
instance FromChar Char
