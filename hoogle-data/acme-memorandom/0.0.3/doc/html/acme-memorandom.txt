-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Memoized random number generation
--   
@package acme-memorandom
@version 0.0.3


-- | A library for generating random numbers in a memoized manner.
--   Implemented as a lazy table indexed by serialized <a>StdGen</a>.
--   Monomorphism is used to facilitate memoization, users should adapt
--   their design to work with random <a>Int</a> values only.
--   
--   In a benchmark, the initial generation of 100000 random <a>Int</a>s
--   took 10.30 seconds and consumed 2.5 gigabytes of memory. Generating
--   the 100000 <a>Int</a>s again from the same seed only took 2.06
--   seconds, a 5-fold speedup thanks to memoization!
--   
--   Incidentally, generating the 100000 <a>Int</a>s with the non-memoized
--   function took 0.12 seconds, but that of course lacks all the benefits
--   of memoization.
module System.Random.Memoized

-- | A memoized variant of <a>randomR</a>.
randomR' :: (Int, Int) -> StdGen -> (Int, StdGen)

-- | A memoized variant of <a>random</a>.
random' :: StdGen -> (Int, StdGen)

-- | A memoized variant of <a>randomRs</a>.
randomRs' :: (Int, Int) -> StdGen -> [Int]

-- | A memoized variant of <a>randoms</a>.
randoms' :: StdGen -> [Int]

-- | A memoized variant of <a>randomRIO</a>.
randomRIO' :: (Int, Int) -> IO Int

-- | A memoized variant of <a>randomIO</a>.
randomIO' :: IO Int
instance HasTrie StdGen'
