-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Implementation of basic western musical theory objects.
--   
--   music-diatonic provides an implementation of basic western musical
--   theory objects. Includes notes, scales, chords, degrees and harmonies.
@package music-diatonic
@version 0.1.0


-- | The module implements a typeclass for enharmonic equivalence.
module Music.Diatonic.Equivalence
class Equiv a
equiv :: Equiv a => a -> a -> Bool


-- | The module implements musical qualities. Qualities are generic and are
--   shared between various types of musical objects.
module Music.Diatonic.Quality
data Quality
Major :: Quality
Minor :: Quality
Neutral :: Quality
Diminished :: Quality
Augmented :: Quality
Perfect :: Quality
class Qual a
quality :: Qual a => a -> Quality
instance Eq Quality
instance Show Quality


-- | The Interval module implements diatonic intervals.
module Music.Diatonic.Interval

-- | Use these constructors to create <a>Interval</a>s. To alter them, use
--   the <a>diminish</a> or <a>augment</a> functions.
data Interval
Unison :: Interval
Min2nd :: Interval
Maj2nd :: Interval
Min3rd :: Interval
Maj3rd :: Interval
Perf4th :: Interval
Perf5th :: Interval
Min6th :: Interval
Maj6th :: Interval
Min7th :: Interval
Maj7th :: Interval

-- | Creates compound interval (adds an <a>octave</a>) to the specified
--   <a>Interval</a>
compound :: Interval -> Interval
octave :: Interval
min9th :: Interval
maj9th :: Interval
perf11th :: Interval
min13th :: Interval
maj13th :: Interval

-- | Augments an <a>Interval</a> by a semitone. The interval type remains
--   the same.
augment :: Interval -> Interval

-- | Diminishes an <a>Interval</a> by a semitone. The interval type remains
--   the same.
diminish :: Interval -> Interval

-- | Returns the number of scale steps in an <a>Interval</a>.
steps :: Interval -> Int

-- | Returns the number of semitones in an <a>Interval</a>.
semitones :: Interval -> Int
instance Eq Interval
instance Equiv Interval
instance Show Interval
instance Qual Interval


-- | The Note module implements the basic Music.Diatonic musical objects:
--   
--   <ul>
--   <li>Note</li>
--   <li>Accidental</li>
--   </ul>
module Music.Diatonic.Note

-- | Use these constructors to create <a>Note</a>s. To alter them, use the
--   <a>raise</a> and <a>lower</a> functions (or their <a>sharp</a> and
--   <a>flat</a> aliases).
data Note
C :: Note
D :: Note
E :: Note
F :: Note
G :: Note
A :: Note
B :: Note

-- | Many musical objects have a note at their core (scales, chords, ...).
--   The <a>Nte</a> class allows these objects to make use of all the
--   note-manipulating functions.
class Nte a
noteMap :: Nte a => (Note -> Note) -> a -> a
($#) :: Nte a => (Note -> Note) -> a -> a
notePlus :: Nte a => (Note -> Note -> b) -> a -> a -> b

-- | Used to extract a list of notes from something (scale, chord, ...).
class Nts a
notes :: Nts a => a -> [Note]

-- | Returns the next natural <a>Note</a> in the cycle:
--   
--   <pre>
--   C -&gt; D -&gt; E -&gt; F -&gt; G -&gt; A -&gt; B 
--   ^------------------------------
--   </pre>
next :: Note -> Note

-- | Returns the previous natural <a>Note</a> in the cycle:
--   
--   <pre>
--   C -&gt; B -&gt; A -&gt; G -&gt; F -&gt; E -&gt; D 
--   ^------------------------------
--   </pre>
prev :: Note -> Note

-- | Applies the specified <a>Interval</a> upwards to a <a>Note</a>,
--   returning the <a>Note</a> above.
above :: Interval -> Note -> Note

-- | Applies the specified <a>Interval</a> downwards to a <a>Note</a>,
--   returning the <a>Note</a> below.
below :: Interval -> Note -> Note

-- | Returns the <a>Interval</a> between the two <a>Note</a>s.
distance :: Note -> Note -> Interval

-- | Raises a <a>Note</a> by a semitone by applying an accidental. The note
--   name stays the same.
raise :: Note -> Note

-- | Lowers a <a>Note</a> by a semitone by applying an accidental. The note
--   name stays the same.
lower :: Note -> Note

-- | Alias for <a>raise</a>.
sharp :: Note -> Note

-- | Alias for <a>lower</a>.
flat :: Note -> Note

-- | Strips all <a>Accidental</a>s from a <a>Note</a>.
natural :: Note -> Note

-- | Return the <a>Accidental</a> applied to the <a>Note</a>.
accidental :: Note -> Accidental

-- | Brings a <a>Note</a> to it's most straight forward representation. For
--   example:
--   
--   <pre>
--   canonize (sharp B) == C
--   </pre>
canonize :: Note -> Note

-- | Returns a list of 15 <a>Note</a>s representing the circle of fifths
--   centered around the specified <a>Note</a> (which is always the 7th
--   element in the list). For example:
--   
--   <pre>
--   circleOfFifths C = [Gb,Db,Ab,Eb,Bb,F,C,G,D,A,E,B,F#] 
--   </pre>
circleOfFifths :: Note -> [Note]

-- | Transposes instances of the <a>Nte</a> class using the given
--   <a>Interval</a> and tranposition function. A typical use would be:
--   
--   <pre>
--   transpose Min3rd above [D, sharp F, A] == [F,A,C]
--   </pre>
transpose :: Nte a => Interval -> (Interval -> Note -> Note) -> a -> a

-- | Accidentals are rarely used directly. To alter <a>Note</a>s, use the
--   <a>raise</a> and <a>lower</a> functions (or their <a>sharp</a> and
--   <a>flat</a> aliases).
data Accidental
Sharp :: Accidental
Flat :: Accidental
Natural :: Accidental
instance Eq Accidental
instance Ord Accidental
instance Eq Note
instance Ord Note
instance Read Note
instance Show Note
instance Equiv Note
instance Nte Note
instance Read Accidental
instance Show Accidental


-- | This module implements scale degrees.
module Music.Diatonic.Degree

-- | Use these constructors to create <a>Degree</a>s. To alter them, use
--   the <a>flat</a> or <a>sharp</a> functions along with the <a>$#</a>
--   operator.
data Degree
First :: Degree
Second :: Degree
Third :: Degree
Fourth :: Degree
Fifth :: Degree
Sixth :: Degree
Seventh :: Degree
class Eq n => Deg s n | s -> n
degrees :: Deg s n => s -> [(Degree, n)]
first :: Deg s n => s -> n

-- | Assuming n1 as the tonic, returns the <a>Degree</a> of n2.
degree :: Note -> Note -> Degree

-- | Returns the <a>Note</a> that corresponds to <a>Degree</a> d in a scale
--   where the specified <a>Note</a> is the <a>tonic</a>.
from :: Degree -> Note -> Note

-- | Returns the <a>Second</a> <a>Degree</a> of s.
second :: Deg s n => s -> Maybe n

-- | Returns the <a>Third</a> <a>Degree</a> of s.
third :: Deg s n => s -> Maybe n

-- | Returns the <a>Fourth</a> <a>Degree</a> of s.
fourth :: Deg s n => s -> Maybe n

-- | Returns the <a>Fifth</a> <a>Degree</a> of s.
fifth :: Deg s n => s -> Maybe n

-- | Returns the <a>Sixth</a> <a>Degree</a> of s.
sixth :: Deg s n => s -> Maybe n

-- | Returns the <a>Seventh</a> <a>Degree</a> of s.
seventh :: Deg s n => s -> Maybe n

-- | An alias for <a>first</a>.
tonic :: Deg s n => s -> n

-- | An alias for <a>second</a>.
supertonic :: Deg s n => s -> Maybe n

-- | An alias for <a>third</a>.
mediant :: Deg s n => s -> Maybe n

-- | An alias for <a>fourth</a>.
subdominant :: Deg s n => s -> Maybe n

-- | An alias for <a>fifth</a>.
dominant :: Deg s n => s -> Maybe n

-- | An alias for <a>sixth</a>.
submediant :: Deg s n => s -> Maybe n

-- | An alias for <a>seventh</a>, but only if the <a>Seventh</a> is a
--   <a>Min7th</a> above the <a>tonic</a>.
subtonic :: (Deg s n, Nte n) => s -> Maybe n

-- | An alias for <a>seventh</a>, but only if the <a>Seventh</a> is a
--   <a>Maj7th</a> above the <a>tonic</a>.
leadingTone :: (Deg s n, Nte n) => s -> Maybe n
instance Eq Degree
instance Ord Degree
instance Equiv Degree
instance Nte Degree
instance Show Degree


-- | The module is used as a convinient starting point. It re-exports:
--   
--   <ul>
--   <li><a>Music.Diatonic.Note</a></li>
--   <li><a>Music.Diatonic.Interval</a></li>
--   <li><a>Music.Diatonic.Degree</a></li>
--   <li><a>Music.Diatonic.Quality</a></li>
--   <li><a>Music.Diatonic.Equivalence</a></li>
--   </ul>
module Music.Diatonic


-- | The Scale module implements scales.
module Music.Diatonic.Scale
data Scale
class Scl a
scale :: Scl a => a -> Scale

-- | Creates a <a>Major</a> diatonic <a>Scale</a> using the given
--   <a>Note</a> as the tonic.
majorScale :: Note -> Scale

-- | Creates a <a>Minor</a> diatonic <a>Scale</a> using the given
--   <a>Note</a> as the tonic.
minorScale :: Note -> Scale

-- | Creates a <a>Major</a> pentatonic <a>Scale</a> using the given
--   <a>Note</a> as the tonic.
majorPentatonicScale :: Note -> Scale

-- | Creates a <a>Minor</a> pentatonic <a>Scale</a> using the given
--   <a>Note</a> as the tonic.
minorPentatonicScale :: Note -> Scale

-- | Creates a <a>Minor</a> harmonic <a>Scale</a> using the given
--   <a>Note</a> as the tonic.
minorHarmonicScale :: Note -> Scale

-- | Creates a <a>Minor</a> melodic <a>Scale</a> using the given
--   <a>Note</a> as the tonic.
minorMelodicScale :: Note -> Scale

-- | Returns a tetrachord using the given <a>Note</a> as the starting note.
--   
--   <pre>
--   tetrachord G == [G,A,B,C]
--   </pre>
tetrachord :: Note -> [Note]
instance Eq Scale
instance Equiv Scale
instance Deg Scale Note
instance Show Scale
instance Qual Scale
instance Nts Scale
instance Nte Scale


-- | This module implements chords.
module Music.Diatonic.Chord
data Chord

-- | Returns the root of the <a>Chord</a>.
root :: Chord -> Note

-- | Builds a <a>Major</a> <a>Chord</a> (1-3-5) rooted at the specified
--   <a>Note</a>.
majorChord :: Note -> Chord

-- | Builds a <a>Minor</a> <a>Chord</a> (1-b3-5) rooted at the specified
--   <a>Note</a>.
minorChord :: Note -> Chord

-- | Builds a <a>Diminished</a> <a>Chord</a> (1-b3-b5) rooted at the
--   specified <a>Note</a>.
diminishedChord :: Note -> Chord

-- | Builds a <a>Diminished</a> <a>Chord</a> (1-3-#5) rooted at the
--   specified <a>Note</a>.
augmentedChord :: Note -> Chord

-- | Builds a <a>Major</a> 7th <a>Chord</a> (1-3-5-7) rooted at the
--   specified <a>Note</a>.
major7thChord :: Note -> Chord

-- | Builds a Dominant 7th <a>Chord</a> (1-3-5-b7) rooted at the specified
--   <a>Note</a>.
dominant7thChord :: Note -> Chord

-- | Builds a <a>Minor</a> 7th <a>Chord</a> (1-b3-5-b7) rooted at the
--   specified <a>Note</a>.
minor7thChord :: Note -> Chord

-- | Builds a <a>Minor</a> Major 7th <a>Chord</a> (1-b3-5-7) rooted at the
--   specified <a>Note</a>.
minorMajor7thChord :: Note -> Chord

-- | Builds a <a>Minor</a> Flat 5th <a>Chord</a> (1-b3-b5-b7) rooted at the
--   specified <a>Note</a>.
minor7thFlat5thChord :: Note -> Chord

-- | Builds a <a>Diminished</a> 7th <a>Chord</a> (1-b3-b5-bb7) rooted at
--   the specified <a>Note</a>.
diminished7thChord :: Note -> Chord

-- | Builds an <a>Augmented</a> Major 7th <a>Chord</a> (1-3-#5-7) rooted at
--   the specified <a>Note</a>.
augmentedMajor7thChord :: Note -> Chord
instance Eq Chord
instance Equiv Chord
instance Qual Chord
instance Read Chord
instance Show Chord
instance Deg Chord Note
instance Nte Chord
instance Nts Chord


-- | This module implements harmonies.
module Music.Diatonic.Harmony
data Harmony

-- | Returns the <a>Harmony</a> for the specified <a>Scale</a>.
harmony :: Scale -> Harmony

-- | Returns the 7ths <a>Harmony</a> for the specified <a>Scale</a>.
harmony7 :: Scale -> Harmony

-- | Returns the <a>Chord</a>s that compose the specified <a>Harmony</a>.
chords :: Harmony -> [Chord]

-- | Returns a Roman notation string representing the <a>Degree</a> of the
--   <a>Chord</a>.
showRoman :: Chord -> Degree -> String
instance Eq HarmonyType
instance Show HarmonyType
instance Eq Harmony
instance Scl Harmony
instance Qual Harmony
instance Deg Harmony Chord
instance Show Harmony


-- | This module inplements keys.
module Music.Diatonic.Key
data Key

-- | Creates a <a>Major</a> <a>Key</a> centered around the specified
--   <a>Note</a>.
majorKey :: Note -> Key

-- | Creates a <a>Major</a> <a>Key</a> centered around the specified
--   <a>Note</a>.
minorKey :: Note -> Key

-- | Returns the <a>Note</a> that is the key's center.
center :: Key -> Note

-- | Creates a <a>Key</a> based on the specified <a>Scale</a>.
key :: Scale -> Key

-- | Returns the parallel <a>Key</a> of the specified <a>Key</a>.
parallel :: Key -> Key

-- | Returns the relative <a>Key</a> of the specified <a>Key</a>.
relative :: Key -> Key

-- | Returns the relative <a>Major</a> <a>Key</a> of the specified
--   <a>Key</a>.
relativeMajor :: Key -> Key

-- | Returns the relative <a>Minor</a> <a>Key</a> of the specified
--   <a>Key</a>.
relativeMinor :: Key -> Key
data Signature

-- | Returns the <a>Signature</a> of the specified <a>Key</a>.
signature :: Key -> Signature

-- | Returns the details of the specified <a>Key</a>:
--   
--   <ol>
--   <li>The <a>Accidental</a> that is used in the <a>Key</a>
--   <a>Signature</a>.</li>
--   <li>The number of those <a>Accidental</a>s used in the <a>Key</a>
--   <a>Signature</a>.</li>
--   </ol>
sigDetails :: Signature -> (Accidental, Int)
instance Eq Key
instance Eq Signature
instance Equiv Key
instance Qual Key
instance Scl Key
instance Read Key
instance Show Signature
instance Show Key
instance Nts Signature
instance Nte Key
