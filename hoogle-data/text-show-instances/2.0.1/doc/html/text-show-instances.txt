-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Additional instances for text-show
--   
@package text-show-instances
@version 2.0.1


-- | Monomorphic <a>TextShow</a> functions for data types in the
--   <tt>xhtml</tt> library.
--   
--   <i>Since: 2</i>
module TextShow.Text.XHtml

-- | Convert an <a>Html</a> value to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbHtml :: Html -> Builder

-- | Convert a list of <a>Html</a> values to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbHtmlList :: [Html] -> Builder

-- | Convert an <a>HtmlAttr</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbHtmlAttr :: HtmlAttr -> Builder

-- | Convert a <a>HotLink</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbHotLinkPrec :: Int -> HotLink -> Builder

-- | Convert an <a>HtmlTable</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbHtmlTable :: HtmlTable -> Builder
instance TextShow HtmlTable
instance TextShow HotLink
instance TextShow HtmlAttr
instance TextShow Html


-- | Monomorphic <a>TextShow</a> function for <a>Permissions</a>.
--   
--   <i>Since: 2</i>
module TextShow.System.Directory

-- | Convert <a>Permissions</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbPermissionsPrec :: Int -> Permissions -> Builder
instance TextShow Permissions


-- | Monomorphic <a>TextShow</a> functions for data types in the
--   <tt>pretty</tt> library.
--   
--   <i>Since: 2</i>
module TextShow.Text.PrettyPrint

-- | Renders a <a>Doc</a> to a <a>Builder</a> using the default
--   <a>style</a>.
--   
--   <i>Since: 2</i>
renderB :: Doc -> Builder

-- | Renders a <a>Doc</a> to a <a>Builder</a> using the given <a>Style</a>.
--   
--   <i>Since: 2</i>
renderStyleB :: Style -> Doc -> Builder

-- | Convert a <a>Mode</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbMode :: Mode -> Builder

-- | Convert a <a>Style</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbStylePrec :: Int -> Style -> Builder

-- | Convert <a>TextDetails</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbTextDetailsPrec :: Int -> TextDetails -> Builder
instance TextShow TextDetails
instance TextShow Style
instance TextShow Mode
instance TextShow Doc


-- | Monomorphic <tt>TextShow</tt> functions for data types in the
--   <tt>Win32</tt> library. This module only exports functions if using
--   Windows.
--   
--   <i>Since: 2</i>
module TextShow.System.Win32


-- | Monomorphic <a>TextShow</a> functions for data types in the
--   <tt>old-time</tt> library.
--   
--   <i>Since: 2</i>
module TextShow.System.Time

-- | Convert a <a>ClockTime</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbClockTime :: ClockTime -> Builder

-- | Convert a <a>TimeDiff</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbTimeDiffPrec :: Int -> TimeDiff -> Builder

-- | Convert a <a>CalendarTime</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbCalendarTimePrec :: Int -> CalendarTime -> Builder

-- | Convert a <a>Month</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbMonth :: Month -> Builder

-- | Convert a <a>Day</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbDay :: Day -> Builder
instance TextShow Day
instance TextShow Month
instance TextShow CalendarTime
instance TextShow TimeDiff
instance TextShow ClockTime


-- | Monomorphic <a>TextShow</a> function for <a>StdGen</a>.
--   
--   <i>Since: 2</i>
module TextShow.System.Random

-- | Convert a <a>StdGen</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbStdGenPrec :: Int -> StdGen -> Builder
instance TextShow StdGen


-- | Monomorphic <tt>TextShow</tt> functions for data types in the
--   <tt>unix</tt> library. This module only exports functions if using a
--   Unix-like operating system (i.e., not Windows).
--   
--   <i>Since: 2</i>
module TextShow.System.Posix

-- | Convert an <a>RTLDFlags</a> value to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbRTLDFlags :: RTLDFlags -> Builder

-- | Convert a <a>DL</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbDLPrec :: Int -> DL -> Builder

-- | Convert a <a>ProcessStatus</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbProcessStatusPrec :: Int -> ProcessStatus -> Builder

-- | Convert a <a>GroupEntry</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbGroupEntryPrec :: Int -> GroupEntry -> Builder

-- | Convert a <a>UserEntry</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbUserEntryPrec :: Int -> UserEntry -> Builder
instance TextShow UserEntry
instance TextShow GroupEntry
instance TextShow ProcessStatus
instance TextShow DL
instance TextShow RTLDFlags


-- | Monomorphic <a>TextShow</a> function for old <a>TimeLocale</a>s.
--   
--   <i>Since: 2</i>
module TextShow.System.Locale

-- | Convert a <a>TimeLocale</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbTimeLocalePrec :: Int -> TimeLocale -> Builder
instance TextShow TimeLocale


-- | Monomorphic <a>TextShow</a> functions for data types in the
--   <tt>terminfo</tt> library. This module only exports functions if using
--   a Unix-like operating system (i.e., not Windows).
--   
--   <i>Since: 2</i>
module TextShow.System.Console.Terminfo

-- | Convert a <a>Color</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbColorPrec :: Int -> Color -> Builder

-- | Convert a <a>SetupTermError</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbSetupTermError :: SetupTermError -> Builder
instance TextShow SetupTermError
instance TextShow Color


-- | Monomorphic <a>TextShow</a> functions for data types in the
--   <tt>template-haskell</tt> library.
--   
--   <i>Since: 2</i>
module TextShow.Language.Haskell.TH

-- | Convert an <a>AnnLookup</a> to a <a>Builder</a> with the given
--   precedence. This function is only available with
--   <tt>template-haskell-2.9.0.0</tt> or later.
--   
--   <i>Since: 2</i>
showbAnnLookupPrec :: Int -> AnnLookup -> Builder

-- | Convert an <a>AnnTarget</a> to a <a>Builder</a> with the given
--   precedence. This function is only available with
--   <tt>template-haskell-2.9.0.0</tt> or later.
--   
--   <i>Since: 2</i>
showbAnnTargetPrec :: Int -> AnnTarget -> Builder

-- | Convert a <a>Body</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbBodyPrec :: Int -> Body -> Builder

-- | Convert a <a>Callconv</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCallconv :: Callconv -> Builder

-- | Convert a <a>Clause</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbClausePrec :: Int -> Clause -> Builder

-- | Convert a <a>Con</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbConPrec :: Int -> Con -> Builder

-- | Convert a <a>Dec</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbDecPrec :: Int -> Dec -> Builder

-- | Convert an <a>Exp</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbExpPrec :: Int -> Exp -> Builder

-- | Convert a <a>FamFlavour</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbFamFlavour :: FamFlavour -> Builder

-- | Convert a <a>Fixity</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbFixityPrec :: Int -> Fixity -> Builder

-- | Convert a <a>FixityDirection</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbFixityDirection :: FixityDirection -> Builder

-- | Convert a <a>Foreign</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbForeignPrec :: Int -> Foreign -> Builder

-- | Convert a <a>FunDep</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbFunDepPrec :: Int -> FunDep -> Builder

-- | Convert a <a>Guard</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbGuardPrec :: Int -> Guard -> Builder

-- | Convert an <a>Info</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbInfoPrec :: Int -> Info -> Builder

-- | Convert an <a>Inline</a> to a <a>Builder</a>. This function is only
--   available with <tt>template-haskell-2.8.0.0</tt> or later.
--   
--   <i>Since: 2</i>
showbInline :: Inline -> Builder

-- | Convert a <a>Kind</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbKindPrec :: Int -> Kind -> Builder

-- | Convert a <a>Lit</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbLitPrec :: Int -> Dec -> Builder

-- | Convert a <a>Loc</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbLocPrec :: Int -> Loc -> Builder

-- | Convert a <a>Match</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbMatchPrec :: Int -> Match -> Builder

-- | Convert a <a>ModName</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbModNamePrec :: Int -> ModName -> Builder

-- | Convert a <a>Module</a> to a <a>Builder</a> with the given precedence.
--   This function is only available with <tt>template-haskell-2.9.0.0</tt>
--   or later.
--   
--   <i>Since: 2</i>
showbModulePrec :: Int -> Module -> Builder

-- | Convert a <a>ModuleInfo</a> to a <a>Builder</a> with the given
--   precedence. This function is only available with
--   <tt>template-haskell-2.9.0.0</tt> or later.
--   
--   <i>Since: 2</i>
showbModuleInfoPrec :: Int -> ModuleInfo -> Builder

-- | Convert a <a>Name</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbName :: Name -> Builder

-- | Convert a <a>Name</a> to a <a>Builder</a> with the given <a>NameIs</a>
--   settings.
--   
--   <i>Since: 2</i>
showbName' :: NameIs -> Name -> Builder

-- | Convert an <a>OccName</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbOccNamePrec :: Int -> OccName -> Builder

-- | Convert a <a>Pat</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbPatPrec :: Int -> Pat -> Builder

-- | Convert a <a>Phases</a> to a <a>Builder</a> with the given precedence.
--   This function is only available with <tt>template-haskell-2.8.0.0</tt>
--   or later.
--   
--   <i>Since: 2</i>
showbPhasesPrec :: Int -> Phases -> Builder

-- | Convert a <a>PkgName</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbPkgNamePrec :: Int -> PkgName -> Builder

-- | Convert a <a>Pragma</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbPragmaPrec :: Int -> Pragma -> Builder

-- | Convert a <a>Pred</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbPredPrec :: Int -> Pred -> Builder

-- | Convert a <a>Range</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbRangePrec :: Int -> Range -> Builder

-- | Convert a <a>Role</a> to a <a>Builder</a>. This function is only
--   available with <tt>template-haskell-2.9.0.0</tt> or later.
--   
--   <i>Since: 2</i>
showbRole :: Role -> Builder

-- | Convert a <a>RuleBndr</a> to a <a>Builder</a> with the given
--   precedence. This function is only available with
--   <tt>template-haskell-2.8.0.0</tt> or later.
--   
--   <i>Since: 2</i>
showbRuleBndrPrec :: Int -> RuleBndr -> Builder

-- | Convert a <a>RuleMatch</a> to a <a>Builder</a>. This function is only
--   available with <tt>template-haskell-2.8.0.0</tt> or later.
--   
--   <i>Since: 2</i>
showbRuleMatch :: RuleMatch -> Builder

-- | Convert a <a>Safety</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbSafety :: Safety -> Builder

-- | Convert a <a>Stmt</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbStmtPrec :: Int -> Stmt -> Builder

-- | Convert a <a>Strict</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbStrict :: Strict -> Builder

-- | Convert a <a>TyLit</a> to a <a>Builder</a> with the given precedence.
--   This function is only available with <tt>template-haskell-2.8.0.0</tt>
--   or later.
--   
--   <i>Since: 2</i>
showbTyLitPrec :: Int -> TyLit -> Builder

-- | Convert a <a>Type</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbTypePrec :: Int -> Type -> Builder

-- | Convert a <a>TyVarBndr</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbTyVarBndrPrec :: Int -> TyVarBndr -> Builder

-- | Convert a <a>TySynEqn</a> to a <a>Builder</a> with the given
--   precedence. This function is only available with
--   <tt>template-haskell-2.9.0.0</tt> or later.
--   
--   <i>Since: 2</i>
showbTySynEqnPrec :: Int -> TySynEqn -> Builder

-- | Convert a <a>Doc</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbDoc :: Doc -> Builder
instance TextShow Pred
instance TextShow TySynEqn
instance TextShow Role
instance TextShow ModuleInfo
instance TextShow Module
instance TextShow AnnTarget
instance TextShow AnnLookup
instance TextShow TyLit
instance TextShow RuleMatch
instance TextShow RuleBndr
instance TextShow Phases
instance TextShow Inline
instance TextShow Doc
instance TextShow TyVarBndr
instance TextShow Type
instance TextShow Strict
instance TextShow Stmt
instance TextShow Safety
instance TextShow Range
instance TextShow Pragma
instance TextShow PkgName
instance TextShow Pat
instance TextShow OccName
instance TextShow Name
instance TextShow ModName
instance TextShow Match
instance TextShow Loc
instance TextShow Lit
instance TextShow Info
instance TextShow Guard
instance TextShow FunDep
instance TextShow Foreign
instance TextShow FixityDirection
instance TextShow Fixity
instance TextShow FamFlavour
instance TextShow Exp
instance TextShow Dec
instance TextShow Con
instance TextShow Clause
instance TextShow Callconv
instance TextShow Body


-- | Monomorphic <a>TextShow</a> functions for <tt>Vector</tt> types.
--   
--   <i>Since: 2</i>
module TextShow.Data.Vector

-- | Convert a boxed <a>Vector</a> to a <a>Builder</a> with the given
--   precedence. Note that with <tt>vector-0.11</tt> and above, the
--   precedence argument is ignored.
--   
--   <i>Since: 2</i>
showbVectorPrec :: TextShow a => Int -> Vector a -> Builder

-- | Convert a boxed <a>Vector</a> to a <a>Builder</a> with the given show
--   function and precedence. Note that with <tt>vector-0.11</tt> and
--   above, the precedence argument is ignored.
--   
--   <i>Since: 2</i>
showbVectorPrecWith :: (a -> Builder) -> Int -> Vector a -> Builder

-- | Convert a generic <a>Vector</a> to a <a>Builder</a> with the given
--   precedence. Note that with <tt>vector-0.11</tt> and above, the
--   precedence argument is ignored.
--   
--   <i>Since: 2</i>
showbVectorGenericPrec :: (Vector v a, TextShow a) => Int -> v a -> Builder

-- | Convert a generic <a>Vector</a> to a <a>Builder</a> with the given
--   show function and precedence. Note that with <tt>vector-0.11</tt> and
--   above, the precedence argument is ignored.
--   
--   <i>Since: 2</i>
showbVectorGenericPrecWith :: Vector v a => (a -> Builder) -> Int -> v a -> Builder

-- | Convert a primitive <a>Vector</a> to a <a>Builder</a> with the given
--   precedence. Note that with <tt>vector-0.11</tt> and above, the
--   precedence argument is ignored.
--   
--   <i>Since: 2</i>
showbVectorPrimitivePrec :: (TextShow a, Prim a) => Int -> Vector a -> Builder

-- | Convert a storable <a>Vector</a> to a <a>Builder</a> with the given
--   precedence. Note that with <tt>vector-0.11</tt> and above, the
--   precedence argument is ignored.
--   
--   <i>Since: 2</i>
showbVectorStorablePrec :: (TextShow a, Storable a) => Int -> Vector a -> Builder

-- | Convert an unboxed <a>Vector</a> to a <a>Builder</a> with the given
--   precedence. Note that with <tt>vector-0.11</tt> and above, the
--   precedence argument is ignored.
--   
--   <i>Since: 2</i>
showbVectorUnboxedPrec :: (TextShow a, Unbox a) => Int -> Vector a -> Builder

-- | Convert a <a>Size</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbSizePrec :: Int -> Size -> Builder
instance TextShow Size
instance (TextShow a, Unbox a) => TextShow (Vector a)
instance (TextShow a, Storable a) => TextShow (Vector a)
instance (TextShow a, Prim a) => TextShow (Vector a)
instance TextShow1 Vector
instance TextShow a => TextShow (Vector a)


-- | Monomorphic <a>TextShow</a> functions for data types in the
--   <tt>time</tt> library.
--   
--   <i>Since: 2</i>
module TextShow.Data.Time

-- | Convert a <a>Day</a> into a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbDay :: Day -> Builder

-- | Convert a <a>DiffTime</a> into a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbDiffTime :: DiffTime -> Builder

-- | Convert a <a>UTCTime</a> into a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbUTCTime :: UTCTime -> Builder

-- | Convert a <a>NominalDiffTime</a> into a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbNominalDiffTime :: NominalDiffTime -> Builder

-- | Convert a <a>AbsoluteTime</a> into a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbAbsoluteTime :: AbsoluteTime -> Builder

-- | Convert a <a>TimeZone</a> into a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbTimeZone :: TimeZone -> Builder

-- | Convert a <a>TimeOfDay</a> into a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbTimeOfDay :: TimeOfDay -> Builder

-- | Convert a <a>LocalTime</a> into a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbLocalTime :: LocalTime -> Builder

-- | Convert a <a>ZonedTime</a> into a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbZonedTime :: ZonedTime -> Builder
instance TextShow ZonedTime
instance TextShow LocalTime
instance TextShow TimeOfDay
instance TextShow TimeZone
instance TextShow AbsoluteTime
instance TextShow NominalDiffTime
instance TextShow UTCTime
instance TextShow DiffTime
instance TextShow Day


-- | Monomorphic <a>TextShow</a> functions for data types in the
--   <tt>hpc</tt> library.
--   
--   <i>Since: 2</i>
module TextShow.Trace.Hpc

-- | Convert a <a>Mix</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbMixPrec :: Int -> Mix -> Builder

-- | Convert a <a>BoxLabel</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbBoxLabelPrec :: Int -> BoxLabel -> Builder

-- | Convert a <a>CondBox</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbCondBox :: CondBox -> Builder

-- | Convert a <a>Tix</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbTixPrec :: Int -> Tix -> Builder

-- | Convert a <a>TixModule</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbTixModulePrec :: Int -> TixModule -> Builder

-- | Convert a <a>HpcPos</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbHpcPos :: HpcPos -> Builder

-- | Convert a <a>Hash</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbHash :: Hash -> Builder
instance TextShow Hash
instance TextShow HpcPos
instance TextShow TixModule
instance TextShow Tix
instance TextShow CondBox
instance TextShow BoxLabel
instance TextShow Mix


-- | Monomorphic <a>TextShow</a> function for <a>Tagged</a> values.
--   
--   <i>Since: 2</i>
module TextShow.Data.Tagged

-- | Convert a <a>Tagged</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbTaggedPrecWith :: (Int -> b -> Builder) -> Int -> Tagged s b -> Builder
instance TextShow2 Tagged
instance TextShow1 (Tagged s)
instance TextShow b => TextShow (Tagged s b)


-- | Monomorphic <tt>TextShow</tt> functions for <tt>Semigroup</tt> data
--   types.
--   
--   <i>Since: 2</i>
module TextShow.Data.Semigroup

-- | Convert a <a>Min</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbMinPrecWith :: (Int -> a -> Builder) -> Int -> Min a -> Builder

-- | Convert a <a>Max</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbMaxPrecWith :: (Int -> a -> Builder) -> Int -> Max a -> Builder

-- | Convert a <a>First</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbFirstPrecWith :: (Int -> a -> Builder) -> Int -> First a -> Builder

-- | Convert a <a>Last</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbLastPrecWith :: (Int -> a -> Builder) -> Int -> Last a -> Builder

-- | Convert a <a>WrappedMonoid</a> to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbWrappedMonoidPrecWith :: (Int -> m -> Builder) -> Int -> WrappedMonoid m -> Builder

-- | Convert an <a>Option</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbOptionPrecWith :: (Int -> a -> Builder) -> Int -> Option a -> Builder

-- | Convert an <a>Arg</a> value to a <a>Builder</a> with the given show
--   functions and precedence.
--   
--   <i>Since: 2</i>
showbArgPrecWith2 :: (Int -> a -> Builder) -> (Int -> b -> Builder) -> Int -> Arg a b -> Builder
instance TextShow2 Arg
instance TextShow a0 => TextShow1 (Arg a0)
instance (TextShow a0, TextShow b0) => TextShow (Arg a0 b0)
instance TextShow1 Option
instance TextShow a0 => TextShow (Option a0)
instance TextShow1 WrappedMonoid
instance TextShow m0 => TextShow (WrappedMonoid m0)
instance TextShow1 Last
instance TextShow a0 => TextShow (Last a0)
instance TextShow1 First
instance TextShow a0 => TextShow (First a0)
instance TextShow1 Max
instance TextShow a0 => TextShow (Max a0)
instance TextShow1 Min
instance TextShow a0 => TextShow (Min a0)


-- | Monomorphic <tt>TextShow</tt> function for <a>NonEmpty</a> lists.
--   
--   <i>Since: 2</i>
module TextShow.Data.List.NonEmpty

-- | Convert a <a>NonEmpty</a> list to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbNonEmptyPrecWith :: (Int -> a -> Builder) -> Int -> NonEmpty a -> Builder
instance TextShow1 NonEmpty
instance TextShow a0 => TextShow (NonEmpty a0)


-- | Monomorphic <a>TextShow</a> functions for functor transformers. Note
--   that an instance for the <tt>Identity</tt> transformer is found in
--   <tt>text-show</tt>, since it is a part of <tt>base-4.8.0.0</tt> and
--   later.
--   
--   <i>Since: 2</i>
module TextShow.Data.Functor.Trans

-- | Convert a <a>Compose</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbComposePrecWith :: (TextShow1 f, TextShow1 g) => (Int -> a -> Builder) -> Int -> Compose f g a -> Builder

-- | Convert a <a>Constant</a> value to a <a>Builder</a> with the given
--   show function and precedence.
--   
--   <i>Since: 2</i>
showbConstantPrecWith :: (Int -> a -> Builder) -> Int -> Constant a b -> Builder

-- | Convert a <a>Product</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbProductPrecWith :: (TextShow1 f, TextShow1 g) => (Int -> a -> Builder) -> Int -> Product f g a -> Builder

-- | Convert a <a>Reverse</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbReversePrecWith :: TextShow1 f => (Int -> a -> Builder) -> Int -> Reverse f a -> Builder

-- | Convert a <a>Sum</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbSumPrecWith :: (TextShow1 f, TextShow1 g) => (Int -> a -> Builder) -> Int -> Sum f g a -> Builder
instance (TextShow1 f, TextShow1 g) => TextShow1 (Sum f g)
instance (TextShow1 f, TextShow1 g, TextShow a) => TextShow (Sum f g a)
instance TextShow1 f => TextShow1 (Reverse f)
instance (TextShow1 f, TextShow a) => TextShow (Reverse f a)
instance (TextShow1 f, TextShow1 g) => TextShow1 (Product f g)
instance (TextShow1 f, TextShow1 g, TextShow a) => TextShow (Product f g a)
instance TextShow2 Constant
instance TextShow a => TextShow1 (Constant a)
instance TextShow a => TextShow (Constant a b)
instance (TextShow1 f, TextShow1 g) => TextShow1 (Compose f g)
instance (TextShow1 f, TextShow1 g, TextShow a) => TextShow (Compose f g a)


-- | Monomorphic <a>TextShow</a> function for <a>Decoder</a>s.
--   
--   <i>Since: 2</i>
module TextShow.Data.Binary

-- | Convert a <a>Decoder</a> to a <a>Builder</a> with the given show
--   function.
--   
--   <i>Since: 2</i>
showbDecoderWith :: (a -> Builder) -> Decoder a -> Builder
instance TextShow1 Decoder
instance TextShow a => TextShow (Decoder a)


-- | Monomorphic <a>TextShow</a> functions for data types in the
--   <tt>bifunctors</tt> library.
--   
--   <i>Since: 2</i>
module TextShow.Data.Bifunctor

-- | Convert a <a>Biff</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbBiffPrec :: TextShow (p (f a) (g b)) => Int -> Biff p f g a b -> Builder

-- | Convert a <a>Biff</a> value to a <a>Builder</a> with the given show
--   functions and precedence.
--   
--   <i>Since: 2</i>
showbBiffPrecWith2 :: (TextShow2 p, TextShow1 f, TextShow1 g) => (Int -> a -> Builder) -> (Int -> b -> Builder) -> Int -> Biff p f g a b -> Builder

-- | Convert a <a>Clown</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbClownPrec :: TextShow (f a) => Int -> Clown f a b -> Builder

-- | Convert a <a>Clown</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbClownPrecWith :: TextShow1 f => (Int -> a -> Builder) -> Int -> Clown f a b -> Builder

-- | Convert a <a>Flip</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbFlipPrec :: TextShow (p b a) => Int -> Flip p a b -> Builder

-- | Convert a <a>Flip</a> value to a <a>Builder</a> with the given show
--   functions and precedence.
--   
--   <i>Since: 2</i>
showbFlipPrecWith2 :: TextShow2 p => (Int -> a -> Builder) -> (Int -> b -> Builder) -> Int -> Flip p a b -> Builder

-- | Convert a <a>Join</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbJoinPrec :: TextShow (p a a) => Int -> Join p a -> Builder

-- | Convert a <a>Join</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbJoinPrecWith :: TextShow2 p => (Int -> a -> Builder) -> Int -> Join p a -> Builder

-- | Convert a <a>Joker</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbJokerPrec :: TextShow (g b) => Int -> Joker g a b -> Builder

-- | Convert a <a>Joker</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbJokerPrecWith :: TextShow1 g => (Int -> b -> Builder) -> Int -> Joker g a b -> Builder

-- | Convert a <a>Product</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbProductPrec :: (TextShow (f a b), TextShow (g a b)) => Int -> Product f g a b -> Builder

-- | Convert a <a>Product</a> value to a <a>Builder</a> with the given show
--   functions and precedence.
--   
--   <i>Since: 2</i>
showbProductPrecWith2 :: (TextShow2 f, TextShow2 g) => (Int -> a -> Builder) -> (Int -> b -> Builder) -> Int -> Product f g a b -> Builder

-- | Convert a <a>Tannen</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbTannenPrec :: TextShow (f (p a b)) => Int -> Tannen f p a b -> Builder

-- | Convert a <a>Tannen</a> value to a <a>Builder</a> with the given show
--   functions and precedence.
--   
--   <i>Since: 2</i>
showbTannenPrecWith2 :: (TextShow1 f, TextShow2 p) => (Int -> a -> Builder) -> (Int -> b -> Builder) -> Int -> Tannen f p a b -> Builder

-- | Convert a <a>WrappedBifunctor</a> value to a <a>Builder</a> with the
--   given precedence.
--   
--   <i>Since: 2</i>
showbWrappedBifunctorPrec :: TextShow (p a b) => Int -> WrappedBifunctor p a b -> Builder

-- | Convert a <a>WrappedBifunctor</a> value to a <a>Builder</a> with the
--   given show functions and precedence.
--   
--   <i>Since: 2</i>
showbWrappedBifunctorPrecWith2 :: TextShow2 p => (Int -> a -> Builder) -> (Int -> b -> Builder) -> Int -> WrappedBifunctor p a b -> Builder
instance TextShow2 p0 => TextShow2 (WrappedBifunctor p0)
instance (TextShow2 p, TextShow a) => TextShow1 (WrappedBifunctor p a)
instance TextShow (p a b) => TextShow (WrappedBifunctor p a b)
instance (TextShow1 f0, TextShow2 p0) => TextShow2 (Tannen f0 p0)
instance (TextShow1 f, TextShow2 p, TextShow a) => TextShow1 (Tannen f p a)
instance TextShow (f (p a b)) => TextShow (Tannen f p a b)
instance (TextShow2 f0, TextShow2 g0) => TextShow2 (Product f0 g0)
instance (TextShow2 f, TextShow2 g, TextShow a) => TextShow1 (Product f g a)
instance (TextShow (f a b), TextShow (g a b)) => TextShow (Product f g a b)
instance TextShow1 g0 => TextShow2 (Joker g0)
instance TextShow1 g => TextShow1 (Joker g a)
instance TextShow (g b) => TextShow (Joker g a b)
instance TextShow2 p => TextShow1 (Join p)
instance TextShow (p a a) => TextShow (Join p a)
instance TextShow2 p0 => TextShow2 (Flip p0)
instance (TextShow2 p, TextShow a) => TextShow1 (Flip p a)
instance TextShow (p b a) => TextShow (Flip p a b)
instance TextShow1 f0 => TextShow2 (Clown f0)
instance (TextShow1 f0, TextShow a0) => TextShow1 (Clown f0 a0)
instance TextShow (f a) => TextShow (Clown f a b)
instance (TextShow2 p0, TextShow1 f0, TextShow1 g0) => TextShow2 (Biff p0 f0 g0)
instance (TextShow2 p, TextShow1 f, TextShow1 g, TextShow a) => TextShow1 (Biff p f g a)
instance TextShow (p (f a) (g b)) => TextShow (Biff p f g a b)


-- | Monomorphic <a>TextShow</a> functions for monad transformers.
--   
--   <i>Since: 2</i>
module TextShow.Control.Monad.Trans

-- | Convert an <a>ErrorT</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbErrorTPrecWith :: (TextShow e, TextShow1 m) => (Int -> a -> Builder) -> Int -> ErrorT e m a -> Builder

-- | Convert an <a>ExceptT</a> value to a <a>Builder</a> with the given
--   show function and precedence.
--   
--   <i>Since: 2</i>
showbExceptTPrecWith :: (TextShow e, TextShow1 m) => (Int -> a -> Builder) -> Int -> ExceptT e m a -> Builder

-- | Convert an <a>IdentityT</a> value to a <a>Builder</a> with the given
--   show function and precedence.
--   
--   <i>Since: 2</i>
showbIdentityTPrecWith :: TextShow1 f => (Int -> a -> Builder) -> Int -> IdentityT f a -> Builder

-- | Convert a <a>ListT</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbListTPrec :: (TextShow1 m, TextShow a) => Int -> ListT m a -> Builder

-- | Convert a <a>ListT</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbListTPrecWith :: TextShow1 m => (a -> Builder) -> Int -> ListT m a -> Builder

-- | Convert a <a>MaybeT</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbMaybeTPrecWith :: TextShow1 m => (Int -> a -> Builder) -> Int -> MaybeT m a -> Builder

-- | Convert a lazy <a>WriterT</a> value to a <a>Builder</a> with the given
--   show function and precedence.
--   
--   <i>Since: 2</i>
showbWriterTLazyPrecWith :: (TextShow w, TextShow1 m) => (a -> Builder) -> Int -> WriterT w m a -> Builder

-- | Convert a strict <a>WriterT</a> value to a <a>Builder</a> with the
--   given show function and precedence.
--   
--   <i>Since: 2</i>
showbWriterTStrictPrecWith :: (TextShow w, TextShow1 m) => (a -> Builder) -> Int -> WriterT w m a -> Builder
instance (TextShow w, TextShow1 m) => TextShow1 (WriterT w m)
instance (TextShow w, TextShow1 m, TextShow a) => TextShow (WriterT w m a)
instance (TextShow w, TextShow1 m) => TextShow1 (WriterT w m)
instance (TextShow w, TextShow1 m, TextShow a) => TextShow (WriterT w m a)
instance TextShow1 m => TextShow1 (MaybeT m)
instance (TextShow1 m, TextShow a) => TextShow (MaybeT m a)
instance TextShow1 m => TextShow1 (ListT m)
instance (TextShow1 m, TextShow a) => TextShow (ListT m a)
instance TextShow1 f => TextShow1 (IdentityT f)
instance (TextShow1 f, TextShow a) => TextShow (IdentityT f a)
instance (TextShow e, TextShow1 m) => TextShow1 (ExceptT e m)
instance (TextShow e, TextShow1 m, TextShow a) => TextShow (ExceptT e m a)
instance (TextShow e, TextShow1 m) => TextShow1 (ErrorT e m)
instance (TextShow e, TextShow1 m, TextShow a) => TextShow (ErrorT e m a)


-- | Monomorphic <a>TextShow</a> functions for applicative functor
--   transformers.
--   
--   <i>Since: 2</i>
module TextShow.Control.Applicative.Trans

-- | Convert a <a>Backwards</a> value to a <a>Builder</a> with the given
--   show function and precedence.
--   
--   <i>Since: 2</i>
showbBackwardsPrecWith :: TextShow1 f => (Int -> a -> Builder) -> Int -> Backwards f a -> Builder

-- | Convert a <a>Lift</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbLiftPrecWith :: TextShow1 f => (Int -> a -> Builder) -> Int -> Lift f a -> Builder
instance TextShow1 f => TextShow1 (Lift f)
instance (TextShow1 f, TextShow a) => TextShow (Lift f a)
instance TextShow1 f => TextShow1 (Backwards f)
instance (TextShow1 f, TextShow a) => TextShow (Backwards f a)


-- | Monomorphic <a>TextShow</a> functions for data types in the
--   <tt>containers</tt> library.
--   
--   <i>Since: 2</i>
module TextShow.Data.Containers

-- | Convert an <a>IntMap</a> to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbIntMapPrecWith :: (v -> Builder) -> Int -> IntMap v -> Builder

-- | Convert an <a>IntSet</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbIntSetPrec :: Int -> IntSet -> Builder

-- | Convert a <a>Map</a> to a <a>Builder</a> with the given show functions
--   and precedence.
--   
--   <i>Since: 2</i>
showbMapPrecWith2 :: (k -> Builder) -> (v -> Builder) -> Int -> Map k v -> Builder

-- | Convert a <tt>Sequence</tt> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbSequencePrec :: TextShow a => Int -> Seq a -> Builder

-- | Convert a <tt>Sequence</tt> to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbSequencePrecWith :: (a -> Builder) -> Int -> Seq a -> Builder

-- | Convert a <a>ViewL</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbViewLPrec :: TextShow a => Int -> ViewL a -> Builder

-- | Convert a <a>ViewL</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbViewLPrecWith :: (a -> Builder) -> Int -> ViewL a -> Builder

-- | Convert a <a>ViewR</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbViewRPrec :: TextShow a => Int -> ViewR a -> Builder

-- | Convert a <a>ViewR</a> value to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbViewRPrecWith :: (a -> Builder) -> Int -> ViewR a -> Builder

-- | Convert a <a>Set</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbSetPrec :: TextShow a => Int -> Set a -> Builder

-- | Convert a <a>Set</a> to a <a>Builder</a> with the given show function
--   and precedence.
--   
--   <i>Since: 2</i>
showbSetPrecWith :: (a -> Builder) -> Int -> Set a -> Builder

-- | Convert a <a>Tree</a> to a <a>Builder</a> with the given precedence.
--   
--   <i>Since: 2</i>
showbTreePrec :: TextShow a => Int -> Tree a -> Builder

-- | Convert a <a>Tree</a> to a <a>Builder</a> with the given show function
--   and precedence.
--   
--   <i>Since: 2</i>
showbTreePrecWith :: (a -> Builder) -> Int -> Tree a -> Builder
instance TextShow1 Tree
instance TextShow a0 => TextShow (Tree a0)
instance TextShow1 Set
instance TextShow a => TextShow (Set a)
instance TextShow1 ViewR
instance TextShow a0 => TextShow (ViewR a0)
instance TextShow1 ViewL
instance TextShow a0 => TextShow (ViewL a0)
instance TextShow1 Seq
instance TextShow a => TextShow (Seq a)
instance TextShow2 Map
instance TextShow k => TextShow1 (Map k)
instance (TextShow k, TextShow v) => TextShow (Map k v)
instance TextShow IntSet
instance TextShow1 IntMap
instance TextShow v => TextShow (IntMap v)


-- | Monomorphic <a>TextShow</a> functions for data types in the
--   <tt>hoopl</tt> library.
--   
--   <i>Since: 2</i>
module TextShow.Compiler.Hoopl

-- | Convert a <a>Label</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbLabel :: Label -> Builder

-- | Convert a <a>LabelMap</a> to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbLabelMapPrecWith :: (Int -> v -> Builder) -> Int -> LabelMap v -> Builder

-- | Convert a <a>LabelSet</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbLabelSetPrec :: Int -> LabelSet -> Builder

-- | Convert a <a>Pointed</a> value to a <a>Builder</a> with the given show
--   function.
--   
--   <i>Since: 2</i>
showbPointedWith :: (a -> Builder) -> Pointed t b a -> Builder

-- | Convert a <a>Unique</a> value to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbUnique :: Unique -> Builder

-- | Convert a <a>UniqueMap</a> to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbUniqueMapPrecWith :: (Int -> v -> Builder) -> Int -> UniqueMap v -> Builder

-- | Convert a <a>UniqueSet</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbUniqueSetPrec :: Int -> UniqueSet -> Builder

-- | Convert a <a>DominatorNode</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbDominatorNode :: DominatorNode -> Builder

-- | Convert a <a>DominatorTree</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbDominatorTree :: DominatorTree -> Builder

-- | Convert a <a>DPath</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbDPath :: DPath -> Builder
instance TextShow DPath
instance TextShow DominatorTree
instance TextShow DominatorNode
instance TextShow UniqueSet
instance TextShow1 UniqueMap
instance TextShow v0 => TextShow (UniqueMap v0)
instance TextShow2 (Pointed t)
instance TextShow1 (Pointed t b)
instance TextShow a => TextShow (Pointed t b a)
instance TextShow LabelSet
instance TextShow1 LabelMap
instance TextShow v0 => TextShow (LabelMap v0)
instance TextShow Label


-- | Monomorphic <a>TextShow</a> functions for <a>HashMap</a>s and
--   <a>HashSet</a>s.
--   
--   <i>Since: 2</i>
module TextShow.Data.UnorderedContainers

-- | Convert a <a>HashMap</a> to a <a>Builder</a> with the given show
--   functions and precedence.
--   
--   <i>Since: 2</i>
showbHashMapPrecWith2 :: (k -> Builder) -> (v -> Builder) -> Int -> HashMap k v -> Builder

-- | Convert a <a>HashSet</a> to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbHashSetPrec :: TextShow a => Int -> HashSet a -> Builder

-- | Convert a <a>HashSet</a> to a <a>Builder</a> with the given show
--   function and precedence.
--   
--   <i>Since: 2</i>
showbHashSetPrecWith :: (a -> Builder) -> Int -> HashSet a -> Builder
instance TextShow1 HashSet
instance TextShow a => TextShow (HashSet a)
instance TextShow2 HashMap
instance TextShow k => TextShow1 (HashMap k)
instance (TextShow k, TextShow v) => TextShow (HashMap k v)


-- | Monomorphic <a>TextShow</a> functions for data types in the
--   <tt>haskeline</tt> library.
--   
--   <i>Since: 2</i>
module TextShow.System.Console.Haskeline

-- | Convert an <a>Interrupt</a> to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbInterrupt :: Interrupt -> Builder

-- | Convert a <a>Prefs</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbPrefsPrec :: Int -> Prefs -> Builder

-- | Convert a <a>Completion</a> value to a <a>Builder</a> with the given
--   precedence.
--   
--   <i>Since: 2</i>
showbCompletionPrec :: Int -> Completion -> Builder

-- | Convert a <a>History</a> value to a <a>Builder</a>.
--   
--   <i>Since: 2</i>
showbHistory :: History -> Builder
instance TextShow History
instance TextShow Completion
instance TextShow Prefs
instance TextShow Interrupt


-- | Additional <tt>TextShow</tt>, <tt>TextShow1</tt>, and
--   <tt>TextShow2</tt> instances not provided by <tt>text-show</tt>.
--   
--   <i>Since: 2</i>
module TextShow.Instances
