-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Preprocessor for embedding diagrams in Haddock documentation
--   
@package diagrams-haddock
@version 0.2.2.14


-- | Include inline diagrams code in Haddock documentation! For example,
--   here is a green circle:
--   
--   
--   which was literally produced by this code:
--   
--   <pre>
--   greenCircle = circle 1
--               # fc green # pad 1.1
--   </pre>
--   
--   For a much better example of the use of diagrams-haddock, see the
--   diagrams-contrib package:
--   <a>http://hackage.haskell.org/package/diagrams%2Dcontrib</a>.
--   
--   For complete documentation and examples, see
--   <a>https://github.com/diagrams/diagrams-haddock/blob/master/README.md</a>.
module Diagrams.Haddock

-- | An abstract representation of inline Haddock image URLs with diagrams
--   tags, like <tt>&lt;&lt;URL#diagram=name&amp;width=100&gt;&gt;</tt>.
data DiagramURL
DiagramURL :: String -> String -> Map String String -> DiagramURL
_diagramURL :: DiagramURL -> String
_diagramName :: DiagramURL -> String
_diagramOpts :: DiagramURL -> Map String String

-- | Display a diagram URL in the format
--   <tt>&lt;&lt;URL#diagram=name&amp;key=val&amp;...&gt;&gt;</tt>.
displayDiagramURL :: DiagramURL -> String

-- | Parse things of the form
--   <tt>&lt;&lt;URL#diagram=name&amp;key=val&amp;...&gt;&gt;</tt>. The URL
--   is optional (the <tt>#</tt>, however, is required).
parseDiagramURL :: Parser DiagramURL

-- | Parse a key/value pair of the form <tt>&amp;key=val</tt>.
parseKeyValPair :: Parser (String, String)

-- | Parse a diagram URL <i>or</i> a single character which is not the
--   start of a diagram URL.
maybeParseDiagramURL :: Parser (Either Char DiagramURL)

-- | Decompose a string into a parsed form with explicitly represented
--   diagram URLs interspersed with other content.
parseDiagramURLs :: Parser [Either String DiagramURL]

-- | Serialize a parsed comment with diagram URLs back into a String.
displayDiagramURLs :: [Either String DiagramURL] -> String

-- | Get the names of all diagrams referenced from diagram URLs in the
--   given comment.
getDiagramNames :: Comment -> Set String

-- | Given a series of comments, return a list of their contents,
--   coalescing blocks of adjacent single-line comments into one String.
--   Each string will be paired with the number of the line on which it
--   begins.
coalesceComments :: [Comment] -> [(String, Int)]

-- | A <tt>CodeBlock</tt> represents a portion of a comment which is a
--   valid code block (set off by &gt; bird tracks). It also caches the
--   list of bindings present in the code block.
data CodeBlock
CodeBlock :: String -> Set String -> Set String -> CodeBlock
_codeBlockCode :: CodeBlock -> String
_codeBlockIdents :: CodeBlock -> Set String
_codeBlockBindings :: CodeBlock -> Set String
codeBlockCode :: Lens' CodeBlock String
codeBlockIdents :: Lens' CodeBlock (Set String)
codeBlockBindings :: Lens' CodeBlock (Set String)

-- | Given a <tt>String</tt> representing a code block, <i>i.e.</i> valid
--   Haskell code with any bird tracks already stripped off, along with its
--   beginning line number (and the name of the file from which it was
--   taken), attempt to parse it, extract the list of bindings present, and
--   construct a <a>CodeBlock</a> value.
makeCodeBlock :: FilePath -> (String, Int) -> CollectErrors (Maybe CodeBlock)

-- | Collect the list of names bound in a module.
collectBindings :: Module l -> Set String

-- | From a <tt>String</tt> representing a comment (along with its
--   beginning line number, and the name of the file it came from, for
--   error reporting purposes), extract all the code blocks (consecutive
--   lines beginning with bird tracks), and error messages for code blocks
--   that fail to parse.
extractCodeBlocks :: FilePath -> (String, Int) -> CollectErrors [CodeBlock]

-- | Take the contents of a Haskell source file (and the name of the file,
--   for error reporting purposes), and extract all the code blocks, as
--   well as the referenced diagram names.
parseCodeBlocks :: FilePath -> String -> CollectErrors (Maybe ([CodeBlock], Set String))

-- | Given an identifier and a list of CodeBlocks, filter the list of
--   CodeBlocks to the transitive closure of the "depends-on" relation,
--   <i>i.e.</i> only blocks which bind identifiers referenced in blocks
--   ultimately needed by the block which defines the desired identifier.
transitiveClosure :: String -> [CodeBlock] -> [CodeBlock]

-- | Given a directory for cached diagrams and a directory for outputting
--   final diagrams, and all the relevant code blocks, compile the diagram
--   referenced by a single URL, returning a new URL updated to point to
--   the location of the generated diagram. Also return a <tt>Bool</tt>
--   indicating whether the URL changed.
--   
--   In particular, the diagram will be output to <tt>outDir/name.svg</tt>,
--   where <tt>outDir</tt> is the second argument to
--   <tt>compileDiagram</tt>, and <tt>name</tt> is the name of the diagram.
--   The updated URL will also refer to <tt>outDir/name.svg</tt>, under the
--   assumption that <tt>outDir</tt> will be copied into the Haddock output
--   directory. (For information on how to make this copying happen, see
--   the README:
--   <a>https://github.com/diagrams/diagrams-haddock/blob/master/README.md</a>.)
--   If for some reason you would like this scheme to be more
--   flexible/configurable, feel free to file a feature request.
compileDiagram :: Bool -> Bool -> FilePath -> FilePath -> FilePath -> Set String -> [CodeBlock] -> DiagramURL -> WriterT [String] IO (DiagramURL, Bool)

-- | Compile all the diagrams referenced in an entire module.
compileDiagrams :: Bool -> Bool -> FilePath -> FilePath -> FilePath -> Set String -> [CodeBlock] -> [Either String DiagramURL] -> WriterT [String] IO ([Either String DiagramURL], Bool)

-- | Read a file, compile all the referenced diagrams, and update all the
--   diagram URLs to refer to the proper image files. Note, this
--   <i>overwrites</i> the file, so it's recommended to only do this on
--   files that are under version control, so you can compare the two
--   versions and roll back if <a>processHaddockDiagrams</a> does something
--   horrible.
--   
--   Returns a list of warnings and/or errors.
processHaddockDiagrams :: Bool -> Bool -> FilePath -> FilePath -> FilePath -> IO [String]

-- | Version of <a>processHaddockDiagrams</a> that takes options for
--   <tt>cpphs</tt>.
processHaddockDiagrams' :: CpphsOptions -> Bool -> Bool -> FilePath -> FilePath -> FilePath -> IO [String]
showParseFailure :: SrcLoc -> String -> String
newtype CollectErrors a
CE :: Writer [String] a -> CollectErrors a
unCE :: CollectErrors a -> Writer [String] a
failWith :: String -> CollectErrors (Maybe a)
runCE :: CollectErrors a -> (a, [String])
instance Show CodeBlock
instance Eq CodeBlock
instance Functor CollectErrors
instance Applicative CollectErrors
instance Monad CollectErrors
instance MonadWriter [String] CollectErrors
instance Show DiagramURL
instance Eq DiagramURL
