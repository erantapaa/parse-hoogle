-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple strict heterogeneous lists
--   
@package hvect
@version 0.2.0.0

module Data.HVect

-- | Heterogeneous vector
data HVect (ts :: [*])
HNil :: HVect []
(:&:) :: !t -> !(HVect ts) -> HVect (t : ts)
empty :: HVect []
null :: HVect as -> Bool
head :: HVect (t : ts) -> t
tail :: HVect (t : ts) -> HVect ts
singleton :: a -> HVect '[a]
length :: HVect as -> SNat (HVectLen as)
(!!) :: (n :< HVectLen as) ~ True => SNat n -> HVect as -> HVectIdx n as
(<++>) :: HVect as -> HVect bs -> HVect (Append as bs)
type Reverse as = ReverseLoop as []
reverse :: HVect as -> HVect (Reverse as)
uncurry :: HVectElim ts a -> HVect ts -> a
data Rep (ts :: [*])
RNil :: Rep []
RCons :: Rep ts -> Rep (t : ts)
class HasRep (ts :: [*])
hasRep :: HasRep ts => Rep ts
curryExpl :: Rep ts -> (HVect ts -> a) -> HVectElim ts a
curry :: HasRep ts => (HVect ts -> a) -> HVectElim ts a
packExpl :: Rep ts -> (forall a. HVectElim ts a -> a) -> HVect ts
pack :: HasRep ts => (forall a. HVectElim ts a -> a) -> HVect ts
data Nat
Zero :: Nat
Succ :: Nat -> Nat
data SNat (n :: Nat)
SZero :: SNat Zero
SSucc :: SNat n -> SNat (Succ n)
sNatToInt :: SNat n -> Int
intToSNat :: Int -> AnySNat
data AnySNat
AnySNat :: SNat n -> AnySNat
instance HasRep ts => HasRep (t : ts)
instance HasRep '[]
instance (Ord (HVect ts), Ord t) => Ord (HVect (t : ts))
instance Ord (HVect '[])
instance (Show (HVect ts), Show t) => Show (HVect (t : ts))
instance Show (HVect '[])
instance (Eq (HVect ts), Eq t) => Eq (HVect (t : ts))
instance Eq (HVect '[])
