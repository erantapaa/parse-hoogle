-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bindings for AWS SNS Version 2013-03-31
--   
--   Bindings for AWS SNS
--   
--   <i>API Version: 2013-03-31</i>
--   
--   
--   <a>http://docs.aws.amazon.com/sns/2010-03-31/APIReference/Welcome.html</a>
@package aws-sns
@version 0.1


module Aws.Sns.Internal
parseXmlEntryMap :: Cursor -> [(Text, Text)]
forceE :: Exception e => e -> [a] -> Either e a
fmapL :: (a -> b) -> Either a c -> Either b c
expectValue :: (Monad m, Eq a, Show a) => a -> a -> m ()


-- | <i>API Version: 2013-03-31</i>
--   
--   
--   <a>http://docs.aws.amazon.com/sns/2010-03-31/APIReference/Welcome.html</a>
module Aws.Sns.Core
data SnsVersion
SnsVersion_2013_03_31 :: SnsVersion
data SnsConfiguration qt
SnsConfiguration :: Protocol -> Region -> SnsConfiguration qt
snsConfProtocol :: SnsConfiguration qt -> Protocol
snsConfRegion :: SnsConfiguration qt -> Region
data SnsMetadata
SnsMetadata :: Maybe Text -> Maybe Text -> SnsMetadata
snsMAmzId2 :: SnsMetadata -> Maybe Text
snsMRequestId :: SnsMetadata -> Maybe Text

-- | TODO use type SnsError for snsErrorCode.
data SnsErrorResponse
SnsErrorResponse :: !Status -> !Text -> !Text -> !(Maybe Text) -> !(Maybe Text) -> !(Maybe Text) -> !(Maybe ByteString) -> SnsErrorResponse
snsErrorStatusCode :: SnsErrorResponse -> !Status
snsErrorCode :: SnsErrorResponse -> !Text
snsErrorMessage :: SnsErrorResponse -> !Text
snsErrorResource :: SnsErrorResponse -> !(Maybe Text)
snsErrorHostId :: SnsErrorResponse -> !(Maybe Text)
snsErrorAccessKeyId :: SnsErrorResponse -> !(Maybe Text)
snsErrorStringToSign :: SnsErrorResponse -> !(Maybe ByteString)
SnsResponseDecodeError :: Text -> SnsErrorResponse
data SnsProtocol
SnsProtocolHttp :: SnsProtocol
SnsProtocolHttps :: SnsProtocol
SnsProtocolEmail :: SnsProtocol
SnsProtocolEmailJson :: SnsProtocol
SnsProtocolSms :: SnsProtocol
SnsProtocolSqs :: SnsProtocol
SnsProtocolApplication :: SnsProtocol
snsProtocolToText :: IsString a => SnsProtocol -> a
parseSnsProtocol :: CharParsing m => m SnsProtocol
type SnsEndpoint = Text
data SnsAction
SnsActionAddPermission :: SnsAction
SnsActionConfirmSubscription :: SnsAction
SnsActionCreatePlatformApplication :: SnsAction
SnsActionCreatePlatformEndpoint :: SnsAction
SnsActionCreateTopic :: SnsAction
SnsActionDeleteEndPoint :: SnsAction
SnsActionDeletePlatformApplication :: SnsAction
SnsActionDeleteTopic :: SnsAction
SnsActionGetEndpointAttributes :: SnsAction
SnsActionGetPlatformApplicationAttribute :: SnsAction
SnsActionGetSubscriptionAttributes :: SnsAction
SnsActionGetTopicAttributes :: SnsAction
SnsActionListEndpointsByPlatformApplication :: SnsAction
SnsActionListPlatformApplications :: SnsAction
SnsActionListSubscriptions :: SnsAction
SnsActionListSubscriptionsByTopic :: SnsAction
SnsActionListTopics :: SnsAction
SnsActionPublish :: SnsAction
SnsActionRemovePermission :: SnsAction
SnsActionSetEndpointAttributes :: SnsAction
SnsActionSetPlatformApplicationAttributes :: SnsAction
SnsActionSetSubscriptionAttributes :: SnsAction
SnsActionSetTopicAttributes :: SnsAction
SnsActionSubscribe :: SnsAction
SnsActionUnsubscribe :: SnsAction
snsActionToText :: IsString a => SnsAction -> a
parseSnsAction :: CharParsing m => m SnsAction

-- | SNS Endpoints as specified in AWS General API version 0.1
--   
--   <a>http://docs.aws.amazon.com/general/1.0/gr/rande.html#sns_region</a>
--   
--   This are the endpoints of the AWS SNS Service. This must not be
--   confused with an SNS endpoint that is a client that subscribes to
--   receive SNS notifications (see <a>SnsEndpoint</a>).
snsServiceEndpoint :: Region -> ByteString
data SnsQuery
SnsQuery :: !Method -> !SnsAction -> !QueryText -> !(Maybe ByteString) -> SnsQuery
snsQueryMethod :: SnsQuery -> !Method
snsQueryAction :: SnsQuery -> !SnsAction
snsQueryParameters :: SnsQuery -> !QueryText
snsQueryBody :: SnsQuery -> !(Maybe ByteString)

-- | Creates a signed query.
--   
--   Uses AWS Signature V4. All requests expect for publish are GET
--   requests with the signature embedded into the URI.
--   
--   FIXME eliminate usage of <a>error</a>. Either statically elimintate
--   possibility of failures or change type to Either.
snsSignQuery :: SnsQuery -> SnsConfiguration qt -> SignatureData -> SignedQuery
snsResponseConsumer :: HTTPResponseConsumer a -> IORef SnsMetadata -> HTTPResponseConsumer a

-- | Parse XML Responses
snsXmlResponseConsumer :: (Cursor -> Response SnsMetadata a) -> IORef SnsMetadata -> HTTPResponseConsumer a

-- | Parse Error Responses
snsErrorResponseConsumer :: HTTPResponseConsumer a
data SnsError a
SnsErrorCommon :: SnsCommonError -> SnsError a
SnsErrorCommand :: a -> SnsError a

-- | Common SNS Parameters
--   
--   
--   <a>http://docs.aws.amazon.com/sns/2010-03-31/APIReference/CommonParameters.html</a>
--   
--   The user of this API hardy needs to deal with the data type directly.
--   
--   This API supports only signature version 4 with signature method
--   <tt>AWS4-HMAC-SHA256</tt>.
--   
--   /This is not currently used for computing the requests, but serves as
--   documentation and reference for the implementation of yet missing
--   features./
data SnsCommonParameters
SnsCommonParameters :: !SnsAction -> () -> !ByteString -> !UTCTime -> !UTCTime -> () -> !Signature -> !SignatureMethod -> !SignatureVersion -> SnsVersion -> SnsCommonParameters

-- | The action to be performed.
snsAction :: SnsCommonParameters -> !SnsAction

-- | The parameters that are required to authenticate a Conditional
--   request.
snsParams :: SnsCommonParameters -> ()

-- | The access key ID that corresponds to the secret access key that you
--   used to sign the request.
snsAWSAccessKeyId :: SnsCommonParameters -> !ByteString

-- | The date and time when the request signature expires. Precisely one of
--   snsExpires or snsTimestamp must be present.
--   
--   format: <tt>YYYY-MM-DDThh:mm:ssZ</tt> (ISO 8601)
snsExpires :: SnsCommonParameters -> !UTCTime

-- | The date and time of the request. Precisely one of snsExpires or
--   snsTimestamp must be present.
--   
--   format: <tt>YYYY-MM-DDThh:mm:ssZ</tt> (ISO 8601)
snsTimestamp :: SnsCommonParameters -> !UTCTime

-- | TODO
snsSecurityToken :: SnsCommonParameters -> ()

-- | The digital signature that you created for the request. For
--   information about generating a signature, go to the service's
--   developer documentation.
snsSignature :: SnsCommonParameters -> !Signature

-- | The hash algorithm that you used to create the request signature.
snsSignatureMethod :: SnsCommonParameters -> !SignatureMethod

-- | The signature version you use to sign the request. Set this to the
--   value that is recommended for your service.
snsSignatureVersion :: SnsCommonParameters -> !SignatureVersion

-- | The API version that the request is written for.
snsVersion :: SnsCommonParameters -> SnsVersion

-- | Common SNS Errors
--   
--   
--   <a>http://docs.aws.amazon.com/sns/2010-03-31/APIReference/CommonErrors.html</a>
--   
--   TODO add function to provide info about the error (content of haddock
--   comments)
data SnsCommonError

-- | The request signature does not conform to AWS standards. <i>Code
--   400</i>
ErrorIncompleteSignature :: SnsCommonError

-- | The request processing has failed because of an unknown error,
--   exception or failure.
--   
--   <i>Code 500</i>
ErrorInternalFailure :: SnsCommonError

-- | The action or operation requested is invalid. Verify that the action
--   is typed correctly.
--   
--   <i>Code 400</i>
ErrorInvalidAction :: SnsCommonError

-- | The X.509 certificate or AWS access key ID provided does not exist in
--   our records.
--   
--   <i>Code 403</i>
ErrorInvalidClientTokenId :: SnsCommonError

-- | Parameters that must not be used together were used together.
--   
--   <i>Code 400</i>
ErrorInvalidParameterCombination :: SnsCommonError

-- | An invalid or out-of-range value was supplied for the input parameter.
--   
--   <i>Code 400</i>
ErrorInvalidParameterValue :: SnsCommonError

-- | The AWS query string is malformed or does not adhere to AWS standards.
--   
--   <i>Code 400</i>
ErrorInvalidQueryParamter :: SnsCommonError

-- | The query string contains a syntax error.
--   
--   <i>Code 404</i>
ErrorMalformedQueryString :: SnsCommonError

-- | The request is missing an action or a required parameter.
--   
--   <i>Code 400</i>
ErrorMissingAction :: SnsCommonError

-- | The request must contain either a valid (registered) AWS access key ID
--   or X.509 certificate.
--   
--   <i>Code 403</i>
ErrorMissingAuthenticationToken :: SnsCommonError

-- | A required parameter for the specified action is not supplied.
--   
--   <i>Code 400</i>
ErrorMissingParameter :: SnsCommonError

-- | The AWS access key ID needs a subscription for the service.
--   
--   <i>Code 403</i>
ErrorOptInRequired :: SnsCommonError

-- | The request reached the service more than 15 minutes after the date
--   stamp on the request or more than 15 minutes after the request
--   expiration date (such as for pre-signed URLs), or the date stamp on
--   the request is more than 15 minutes in the future.
--   
--   <i>Code 400</i>
ErrorRequestExpired :: SnsCommonError

-- | The request has failed due to a temporary failure of the server.
--   
--   <i>Code 503</i>
ErrorServiceUnavailable :: SnsCommonError

-- | The request was denied due to request throttling.
--   
--   <i>Code 400</i>
ErrorThrottling :: SnsCommonError

-- | The input fails to satisfy the constraints specified by an AWS
--   service.
--   
--   <i>Code 400</i>
ErrorValidationError :: SnsCommonError
instance Typeable SnsAction
instance Typeable SnsErrorResponse
instance Typeable SnsCommonError
instance Typeable1 SnsError
instance Typeable SnsProtocol
instance Show SnsAction
instance Read SnsAction
instance Eq SnsAction
instance Ord SnsAction
instance Enum SnsAction
instance Bounded SnsAction
instance Show SnsMetadata
instance Show (SnsConfiguration qt)
instance Show SnsQuery
instance Eq SnsQuery
instance Show SnsErrorResponse
instance Eq SnsErrorResponse
instance Ord SnsErrorResponse
instance Show SnsCommonError
instance Read SnsCommonError
instance Eq SnsCommonError
instance Ord SnsCommonError
instance Enum SnsCommonError
instance Bounded SnsCommonError
instance Show a => Show (SnsError a)
instance Read a => Read (SnsError a)
instance Eq a => Eq (SnsError a)
instance Ord a => Ord (SnsError a)
instance Show SnsProtocol
instance Read SnsProtocol
instance Eq SnsProtocol
instance Ord SnsProtocol
instance Enum SnsProtocol
instance Bounded SnsProtocol
instance Arbitrary SnsProtocol
instance AwsType SnsProtocol
instance Exception SnsErrorResponse
instance Monoid SnsMetadata
instance Loggable SnsMetadata
instance Arbitrary SnsAction
instance AwsType SnsAction


-- | <i>API Version: 2013-03-31</i>
--   
--   Creates a topic to which notifications can be published. Users can
--   create at most 3000 topics. For more information, see
--   <a>http://aws.amazon.com/sns</a>. This action is idempotent, so if the
--   requester already owns a topic with the specified name, that topic's
--   ARN is returned without creating a new topic.
--   
--   
--   <a>http://docs.aws.amazon.com/sns/2010-03-31/APIReference/API_CreateTopic.html</a>
module Aws.Sns.Commands.CreateTopic
data CreateTopic
CreateTopic :: !Text -> CreateTopic

-- | The name of the topic you want to create. Topic names must be made up
--   of only uppercase and lowercase ASCII letters, numbers, underscores,
--   and hyphens, and must be between 1 and 256 characters long
createTopicName :: CreateTopic -> !Text
data CreateTopicResponse
CreateTopicResponse :: !Arn -> CreateTopicResponse

-- | The Amazon Resource Name (ARN) assigned to the created topic.
createTopicResTopicArn :: CreateTopicResponse -> !Arn
data CreateTopicErrors

-- | Indicates that the user has been denied access to the requested
--   resource.
--   
--   <i>Code 403</i>
CreateTopicAuthorizationError :: CreateTopicErrors

-- | Indicates an internal service error.
--   
--   <i>Code 500</i>
CreateTopicInternalError :: CreateTopicErrors

-- | Indicates that a request parameter does not comply with the associated
--   constraints.
--   
--   <i>Code 400</i>
CreateTopicInvalidParameter :: CreateTopicErrors

-- | Indicates that the customer already owns the maximum allowed number of
--   topics.
--   
--   <i>Code 403</i>
CreateTopicTopicLimitExceeded :: CreateTopicErrors
instance Typeable CreateTopic
instance Typeable CreateTopicResponse
instance Typeable CreateTopicErrors
instance Show CreateTopic
instance Read CreateTopic
instance Eq CreateTopic
instance Ord CreateTopic
instance Show CreateTopicResponse
instance Read CreateTopicResponse
instance Eq CreateTopicResponse
instance Ord CreateTopicResponse
instance Show CreateTopicErrors
instance Read CreateTopicErrors
instance Eq CreateTopicErrors
instance Ord CreateTopicErrors
instance Enum CreateTopicErrors
instance Bounded CreateTopicErrors
instance AsMemoryResponse CreateTopicResponse
instance Transaction CreateTopic CreateTopicResponse
instance SignQuery CreateTopic
instance ResponseConsumer r CreateTopicResponse


-- | <i>API Version: 2013-03-31</i>
--   
--   Deletes a topic and all its subscriptions. Deleting a topic might
--   prevent some messages previously sent to the topic from being
--   delivered to subscribers. This action is idempotent, so deleting a
--   topic that does not exist does not result in an error.
--   
--   
--   <a>http://docs.aws.amazon.com/sns/2010-03-31/APIReference/API_DeleteTopic.html</a>
module Aws.Sns.Commands.DeleteTopic
data DeleteTopic
DeleteTopic :: !Arn -> DeleteTopic

-- | The ARN of the topic you want to delete.
deleteTopicArn :: DeleteTopic -> !Arn
data DeleteTopicResponse
DeleteTopicResponse :: DeleteTopicResponse
data DeleteTopicErrors

-- | Indicates that the user has been denied access to the requested
--   resource.
--   
--   <i>Code 403</i>
DeleteTopicAuthorizationError :: DeleteTopicErrors

-- | Indicates an internal service error.
--   
--   <i>Code 500</i>
DeleteTopicInternalError :: DeleteTopicErrors

-- | Indicates that a request parameter does not comply with the associated
--   constraints.
--   
--   <i>Code 400</i>
DeleteTopicInvalidParameter :: DeleteTopicErrors

-- | Indicates that the requested resource does not exist.
--   
--   <i>Code 404</i>
DeleteTopicTopicNotFound :: DeleteTopicErrors
instance Typeable DeleteTopic
instance Typeable DeleteTopicResponse
instance Typeable DeleteTopicErrors
instance Show DeleteTopic
instance Read DeleteTopic
instance Eq DeleteTopic
instance Ord DeleteTopic
instance Show DeleteTopicResponse
instance Read DeleteTopicResponse
instance Eq DeleteTopicResponse
instance Ord DeleteTopicResponse
instance Show DeleteTopicErrors
instance Read DeleteTopicErrors
instance Eq DeleteTopicErrors
instance Ord DeleteTopicErrors
instance Enum DeleteTopicErrors
instance Bounded DeleteTopicErrors
instance AsMemoryResponse DeleteTopicResponse
instance Transaction DeleteTopic DeleteTopicResponse
instance SignQuery DeleteTopic
instance ResponseConsumer r DeleteTopicResponse


-- | <i>API Version: 2013-03-31</i>
--   
--   Returns a list of the requester's topics. Each call returns a limited
--   list of topics, up to 100. If there are more topics, a NextToken is
--   also returned. Use the NextToken parameter in a new ListTopics call to
--   get further results.
--   
--   
--   <a>http://docs.aws.amazon.com/sns/2010-03-31/APIReference/API_ListTopics.html</a>
module Aws.Sns.Commands.ListTopics
data ListTopicsNextToken
data ListTopics
ListTopics :: !(Maybe ListTopicsNextToken) -> ListTopics

-- | Token returned by the previous <a>ListTopics</a> request.
listTopicsNextToken :: ListTopics -> !(Maybe ListTopicsNextToken)
data ListTopicsResponse
ListTopicsResponse :: !(Maybe ListTopicsNextToken) -> ![Arn] -> ListTopicsResponse

-- | Token to pass along to the next ListTopics request. This element is
--   returned if there are additional topics to retrieve.
listTopicsResponseNextToken :: ListTopicsResponse -> !(Maybe ListTopicsNextToken)

-- | A list of topic ARNs.
listTopicsResponseTopics :: ListTopicsResponse -> ![Arn]
data ListTopicsErrors

-- | Indicates that the user has been denied access to the requested
--   resource.
--   
--   <i>Code 403</i>
ListTopicsAuthorizationError :: ListTopicsErrors

-- | Indicates an internal service error.
--   
--   <i>Code 500</i>
ListTopicsInternalError :: ListTopicsErrors

-- | Indicates that a request parameter does not comply with the associated
--   constraints.
--   
--   <i>Code 400</i>
ListTopicsInvalidParameter :: ListTopicsErrors
instance Typeable ListTopics
instance Typeable ListTopicsResponse
instance Typeable ListTopicsErrors
instance Show ListTopicsNextToken
instance Read ListTopicsNextToken
instance Eq ListTopicsNextToken
instance Ord ListTopicsNextToken
instance Monoid ListTopicsNextToken
instance IsString ListTopicsNextToken
instance Show ListTopics
instance Read ListTopics
instance Eq ListTopics
instance Ord ListTopics
instance Show ListTopicsResponse
instance Read ListTopicsResponse
instance Eq ListTopicsResponse
instance Ord ListTopicsResponse
instance Show ListTopicsErrors
instance Read ListTopicsErrors
instance Eq ListTopicsErrors
instance Ord ListTopicsErrors
instance Enum ListTopicsErrors
instance Bounded ListTopicsErrors
instance IteratedTransaction ListTopics ListTopicsResponse
instance ListResponse ListTopicsResponse Arn
instance AsMemoryResponse ListTopicsResponse
instance Transaction ListTopics ListTopicsResponse
instance SignQuery ListTopics
instance ResponseConsumer r ListTopicsResponse


-- | <i>API Version: 2013-03-31</i>
--   
--   Prepares to subscribe an endpoint by sending the endpoint a
--   confirmation message. To actually create a subscription, the endpoint
--   owner must call the ConfirmSubscription action with the token from the
--   confirmation message. Confirmation tokens are valid for three days.
--   
--   
--   <a>http://docs.aws.amazon.com/sns/2010-03-31/APIReference/API_Subscribe.html</a>
module Aws.Sns.Commands.Subscribe
data Subscribe
Subscribe :: !(Maybe SnsEndpoint) -> !SnsProtocol -> !Arn -> Subscribe

-- | The endpoint that you want to receive notifications. This must match
--   with the corresponding protocol (see <tt>SnsEndPoint</tt> for
--   details).
subscribeEndpoint :: Subscribe -> !(Maybe SnsEndpoint)

-- | The protocol you want to use.
subscribeProtocol :: Subscribe -> !SnsProtocol

-- | The ARN of the topic you want to subscribe to.
subscribeTopicArn :: Subscribe -> !Arn
data SubscribeResponse
SubscribeResponse :: !(Maybe Arn) -> SubscribeResponse

-- | The ARN of the subscription, if the service was able to create a
--   subscription immediately (without requiring endpoint owner
--   confirmation).
subscribeResSubscriptionArn :: SubscribeResponse -> !(Maybe Arn)
data SubscribeErrors

-- | Indicates that the user has been denied access to the requested
--   resource.
--   
--   <i>Code 403</i>
SubscribeAuthorizationError :: SubscribeErrors

-- | Indicates an internal service error.
--   
--   <i>Code 500</i>
SubscribeInternalError :: SubscribeErrors

-- | Indicates that a request parameter does not comply with the associated
--   constraints.
--   
--   <i>Code 400</i>
SubscribeInvalidParameter :: SubscribeErrors

-- | Indicates that the requested resource does not exist.
--   
--   <i>Code 404</i>
SubscribeNotFound :: SubscribeErrors

-- | Indicates that the customer already owns the maximum allowed number of
--   subscriptions.
--   
--   <i>Code 403</i>
SubscribeTopicLimitExceeded :: SubscribeErrors
instance Typeable Subscribe
instance Typeable SubscribeResponse
instance Typeable SubscribeErrors
instance Show Subscribe
instance Read Subscribe
instance Eq Subscribe
instance Ord Subscribe
instance Show SubscribeResponse
instance Read SubscribeResponse
instance Eq SubscribeResponse
instance Ord SubscribeResponse
instance Show SubscribeErrors
instance Read SubscribeErrors
instance Eq SubscribeErrors
instance Ord SubscribeErrors
instance Enum SubscribeErrors
instance Bounded SubscribeErrors
instance AsMemoryResponse SubscribeResponse
instance Transaction Subscribe SubscribeResponse
instance SignQuery Subscribe
instance ResponseConsumer r SubscribeResponse


-- | <i>API Version: 2013-03-31</i>
--   
--   Deletes a subscription. If the subscription requires authentication
--   for deletion, only the owner of the subscription or the topic's owner
--   can unsubscribe, and an AWS signature is required. If the Unsubscribe
--   call does not require authentication and the requester is not the
--   subscription owner, a final cancellation message is delivered to the
--   endpoint, so that the endpoint owner can easily resubscribe to the
--   topic if the Unsubscribe request was unintended.
--   
--   
--   <a>http://docs.aws.amazon.com/sns/2010-03-31/APIReference/API_Unsubscribe.html</a>
module Aws.Sns.Commands.Unsubscribe
data Unsubscribe
Unsubscribe :: !Arn -> Unsubscribe

-- | The ARN of the subscription to be deleted.
unsubscribeSubscriptionArn :: Unsubscribe -> !Arn
data UnsubscribeResponse
UnsubscribeResponse :: UnsubscribeResponse
data UnsubscribeErrors

-- | Indicates that the user has been denied access to the requested
--   resource.
--   
--   <i>Code 403</i>
UnsubscribeAuthorizationError :: UnsubscribeErrors

-- | Indicates an internal service error.
--   
--   <i>Code 500</i>
UnsubscribeInternalError :: UnsubscribeErrors

-- | Indicates that a request parameter does not comply with the associated
--   constraints.
--   
--   <i>Code 400</i>
UnsubscribeInvalidParameter :: UnsubscribeErrors

-- | Indicates that the requested resource does not exist.
--   
--   <i>Code 403</i>
UnsubscribeNotFound :: UnsubscribeErrors
instance Typeable Unsubscribe
instance Typeable UnsubscribeResponse
instance Typeable UnsubscribeErrors
instance Show Unsubscribe
instance Read Unsubscribe
instance Eq Unsubscribe
instance Ord Unsubscribe
instance Show UnsubscribeResponse
instance Read UnsubscribeResponse
instance Eq UnsubscribeResponse
instance Ord UnsubscribeResponse
instance Show UnsubscribeErrors
instance Read UnsubscribeErrors
instance Eq UnsubscribeErrors
instance Ord UnsubscribeErrors
instance Enum UnsubscribeErrors
instance Bounded UnsubscribeErrors
instance AsMemoryResponse UnsubscribeResponse
instance Transaction Unsubscribe UnsubscribeResponse
instance SignQuery Unsubscribe
instance ResponseConsumer r UnsubscribeResponse


-- | <i>API Version: 2013-03-31</i>
--   
--   Sends a message to all of a topic's subscribed endpoints. When a
--   messageId is returned, the message has been saved and Amazon SNS will
--   attempt to deliver it to the topic's subscribers shortly. The format
--   of the outgoing message to each subscribed endpoint depends on the
--   notification protocol selected.
--   
--   To use the Publish action for sending a message to a mobile endpoint,
--   such as an app on a Kindle device or mobile phone, you must specify
--   the EndpointArn. The EndpointArn is returned when making a call with
--   the CreatePlatformEndpoint action. The second example below shows a
--   request and response for publishing to a mobile endpoint.
--   
--   
--   <a>http://docs.aws.amazon.com/sns/2010-03-31/APIReference/API_Publish.html</a>
module Aws.Sns.Commands.Publish
data SnsMessage
SnsMessage :: !Text -> !(Map SnsProtocol Text) -> SnsMessage
snsMessageDefault :: SnsMessage -> !Text
snsMessageMap :: SnsMessage -> !(Map SnsProtocol Text)

-- | Unique identifier assigned to a published message.
--   
--   Length Constraint: Maximum 100 characters
newtype MessageId
MessageId :: Text -> MessageId
messageIdText :: MessageId -> Text
snsMessage :: Text -> SnsMessage

-- | The format of messages used with <a>SnsProtocolSqs</a>
--   
--   The format is described informally at
--   
--   <a>http://docs.aws.amazon.com/sns/latest/dg/SendMessageToSQS.html</a>
data SqsNotification
SqsNotification :: !MessageId -> !Arn -> !(Maybe Text) -> !Text -> !UTCTime -> !Text -> !Text -> !Text -> !Text -> SqsNotification
sqsNotificationMessageId :: SqsNotification -> !MessageId
sqsNotificationTopicArn :: SqsNotification -> !Arn
sqsNotificationSubject :: SqsNotification -> !(Maybe Text)
sqsNotificationMessage :: SqsNotification -> !Text
sqsNotificationTimestamp :: SqsNotification -> !UTCTime
sqsNotificationSignatureVersion :: SqsNotification -> !Text
sqsNotificationSignature :: SqsNotification -> !Text
sqsNotificationSigningCertURL :: SqsNotification -> !Text
sqsNotificationUnsubscribeURL :: SqsNotification -> !Text
data Publish
Publish :: !SnsMessage -> Maybe () -> !(Maybe Text) -> !(Either Arn Arn) -> Publish

-- | The message you want to send to the topic.
--   
--   If you want to send the same message to all transport protocols,
--   include the text of the message as a String value.
--   
--   If you want to send different messages for each transport protocol add
--   these to the <a>snsMessageMap</a> map.
--   
--   Constraints: Messages must be UTF-8 encoded strings at most 256 KB in
--   size (262144 bytes, not 262144 characters).
publishMessage :: Publish -> !SnsMessage

-- | Message attributes for Publish action.
publishMessageAttributes_entry_N :: Publish -> Maybe ()

-- | Optional parameter to be used as the <a>Subject</a> line when the
--   message is delivered to email endpoints. This field will also be
--   included, if present, in the standard JSON messages delivered to other
--   endpoints.
--   
--   Constraints: Subjects must be ASCII text that begins with a letter,
--   number, or punctuation mark; must not include line breaks or control
--   characters; and must be less than 100 characters long.
publishSubject :: Publish -> !(Maybe Text)

-- | Either TopicArn (left) or EndpointArn (right).
publishArn :: Publish -> !(Either Arn Arn)
data PublishResponse
PublishResponse :: !MessageId -> PublishResponse

-- | Unique identifier assigned to the published message.
publishMessageId :: PublishResponse -> !MessageId
data PublishErrors

-- | Indicates that the user has been denied access to the requested
--   resource.
--   
--   <i>Code 403</i>
PublishAuthorizationError :: PublishErrors

-- | Indicates an internal service error.
--   
--   <i>Code 500</i>
PublishInternalError :: PublishErrors

-- | Indicates that a request parameter does not comply with the associated
--   constraints.
--   
--   <i>Code 400</i>
PublishInvalidParameter :: PublishErrors

-- | Exception error indicating endpoint disabled.
--   
--   <i>Code 400</i>
PublishEndpointDisabled :: PublishErrors

-- | Indicates that a request parameter does not comply with the associated
--   constraints.
--   
--   <i>Code 400</i>
PublishInvalidParameterValue :: PublishErrors

-- | Indicates that the requested resource does not exist.
--   
--   <i>Code 404</i>
PublishNotFound :: PublishErrors

-- | Exception error indicating platform application disabled.
--   
--   <i>Code 400</i>
PublishApplicationDisabled :: PublishErrors
instance Typeable SnsMessage
instance Typeable MessageId
instance Typeable SqsNotification
instance Typeable Publish
instance Typeable PublishResponse
instance Typeable PublishErrors
instance Show SnsMessage
instance Read SnsMessage
instance Eq SnsMessage
instance Ord SnsMessage
instance Show MessageId
instance Read MessageId
instance Eq MessageId
instance Ord MessageId
instance Monoid MessageId
instance IsString MessageId
instance FromJSON MessageId
instance ToJSON MessageId
instance Show SqsNotification
instance Read SqsNotification
instance Eq SqsNotification
instance Ord SqsNotification
instance Show Publish
instance Read Publish
instance Eq Publish
instance Ord Publish
instance Show PublishResponse
instance Read PublishResponse
instance Eq PublishResponse
instance Ord PublishResponse
instance Show PublishErrors
instance Read PublishErrors
instance Eq PublishErrors
instance Ord PublishErrors
instance Enum PublishErrors
instance Bounded PublishErrors
instance AsMemoryResponse PublishResponse
instance Transaction Publish PublishResponse
instance SignQuery Publish
instance ResponseConsumer r PublishResponse
instance FromJSON SqsNotification


-- | <i>API Version: 2013-03-31</i>
--   
--   Verifies an endpoint owner's intent to receive messages by validating
--   the token sent to the endpoint by an earlier Subscribe action. If the
--   token is valid, the action creates a new subscription and returns its
--   Amazon Resource Name (ARN). This call requires an AWS signature only
--   when the AuthenticateOnUnsubscribe flag is set to <a>true</a>.
--   
--   
--   <a>http://docs.aws.amazon.com/sns/2010-03-31/APIReference/API_ConfirmSubscription.html</a>
module Aws.Sns.Commands.ConfirmSubscription
data ConfirmSubscription
ConfirmSubscription :: !Bool -> !SubscriptionConfirmationToken -> Arn -> ConfirmSubscription

-- | Disallows unauthenticated unsubscribes of the subscription. If the
--   value of this parameter is true and the request has an AWS signature,
--   then only the topic owner and the subscription owner can unsubscribe
--   the endpoint. The unsubscribe action requires AWS authentication.
confirmSubscriptionAuthenticateOnUnsubscribe :: ConfirmSubscription -> !Bool

-- | Short-lived token sent to an endpoint during the Subscribe action.
confirmSubscriptionToken :: ConfirmSubscription -> !SubscriptionConfirmationToken

-- | The ARN of the topic for which you wish to confirm a subscription.
confirmSubscriptionTopicArn :: ConfirmSubscription -> Arn
data ConfirmSubscriptionResponse
ConfirmSubscriptionResponse :: !Arn -> ConfirmSubscriptionResponse

-- | The ARN of the created subscription.
confirmSubscriptionResSubscriptionArn :: ConfirmSubscriptionResponse -> !Arn
data ConfirmSubscriptionErrors

-- | Indicates that the user has been denied access to the requested
--   resource.
--   
--   <i>Code 403</i>
ConfirmSubscriptionAuthorizationError :: ConfirmSubscriptionErrors

-- | Indicates an internal service error.
--   
--   <i>Code 500</i>
ConfirmSubscriptionInternalError :: ConfirmSubscriptionErrors

-- | Indicates that a request parameter does not comply with the associated
--   constraints.
--   
--   <i>Code 400</i>
ConfirmSubscriptionInvalidParameter :: ConfirmSubscriptionErrors

-- | Indicates that the requested resource does not exist.
--   
--   <i>Code 404</i>
ConfirmSubscriptionNotFound :: ConfirmSubscriptionErrors

-- | Indicates that the customer already owns the maximum allowed number of
--   subscriptions.
--   
--   <i>Code 403</i>
ConfirmSubscriptionSubscriptionLimitExceeded :: ConfirmSubscriptionErrors
instance Typeable SubscriptionConfirmationToken
instance Typeable ConfirmSubscription
instance Typeable ConfirmSubscriptionResponse
instance Typeable ConfirmSubscriptionErrors
instance Show SubscriptionConfirmationToken
instance Read SubscriptionConfirmationToken
instance Eq SubscriptionConfirmationToken
instance Ord SubscriptionConfirmationToken
instance Monoid SubscriptionConfirmationToken
instance IsString SubscriptionConfirmationToken
instance Show ConfirmSubscription
instance Read ConfirmSubscription
instance Eq ConfirmSubscription
instance Ord ConfirmSubscription
instance Show ConfirmSubscriptionResponse
instance Read ConfirmSubscriptionResponse
instance Eq ConfirmSubscriptionResponse
instance Ord ConfirmSubscriptionResponse
instance Show ConfirmSubscriptionErrors
instance Read ConfirmSubscriptionErrors
instance Eq ConfirmSubscriptionErrors
instance Ord ConfirmSubscriptionErrors
instance Enum ConfirmSubscriptionErrors
instance Bounded ConfirmSubscriptionErrors
instance AsMemoryResponse ConfirmSubscriptionResponse
instance Transaction ConfirmSubscription ConfirmSubscriptionResponse
instance SignQuery ConfirmSubscription
instance ResponseConsumer r ConfirmSubscriptionResponse


-- | <i>API Version: 2013-03-31</i>
--   
--   Returns a list of the subscriptions to a specific topic. Each call
--   returns a limited list of subscriptions, up to 100. If there are more
--   subscriptions, a NextToken is also returned. Use the NextToken
--   parameter in a new ListSubscriptionsByTopic call to get further
--   results.
--   
--   
--   <a>http://docs.aws.amazon.com/sns/2010-03-31/APIReference/API_ListSubscriptionsByTopic.html</a>
module Aws.Sns.Commands.ListSubscriptionsByTopic

-- | A wrapper type for the attributes of an Amazon SNS subscription.
--   
--   
--   <a>http://docs.aws.amazon.com/sns/2010-03-31/APIReference/API_Subscription.html</a>
data Subscription
Subscription :: !(Maybe SnsEndpoint) -> !(Maybe Text) -> !(Maybe SnsProtocol) -> !(Maybe Arn) -> !(Maybe Arn) -> Subscription

-- | The subscription's endpoint (format depends on the protocol).
subscriptionEndpoint :: Subscription -> !(Maybe SnsEndpoint)

-- | The subscription's owner.
subscriptionOwner :: Subscription -> !(Maybe Text)

-- | The subscription's protocol.
subscriptionProtocol :: Subscription -> !(Maybe SnsProtocol)

-- | The subscription's ARN.
subscriptionSubscriptionArn :: Subscription -> !(Maybe Arn)

-- | The ARN of the subscription's topic.
subscriptionTopicArn :: Subscription -> !(Maybe Arn)
data ListSubscriptionsByTopicNextToken
data ListSubscriptionsByTopic
ListSubscriptionsByTopic :: !(Maybe ListSubscriptionsByTopicNextToken) -> !Arn -> ListSubscriptionsByTopic

-- | Token returned by the previous <a>ListSubscriptionsByTopic</a>
--   request.
listSubscriptionsByTopicNextToken :: ListSubscriptionsByTopic -> !(Maybe ListSubscriptionsByTopicNextToken)
listSubscriptionsByTopicArn :: ListSubscriptionsByTopic -> !Arn
data ListSubscriptionsByTopicResponse
ListSubscriptionsByTopicResponse :: !(Maybe ListSubscriptionsByTopicNextToken) -> ![Subscription] -> ListSubscriptionsByTopicResponse

-- | Token to pass along to the next ListSubscriptionsByTopic request. This
--   element is returned if there are additional topics to retrieve.
listSubscriptionsByTopicResponseNextToken :: ListSubscriptionsByTopicResponse -> !(Maybe ListSubscriptionsByTopicNextToken)

-- | A list of topic ARNs.
listSubscriptionsByTopicResponseSubscriptions :: ListSubscriptionsByTopicResponse -> ![Subscription]
data ListSubscriptionsByTopicErrors

-- | Indicates that the user has been denied access to the requested
--   resource.
--   
--   <i>Code 403</i>
ListSubscriptionsByTopicAuthorizationError :: ListSubscriptionsByTopicErrors

-- | Indicates an internal service error.
--   
--   <i>Code 500</i>
ListSubscriptionsByTopicInternalError :: ListSubscriptionsByTopicErrors

-- | Indicates that a request parameter does not comply with the associated
--   constraints.
--   
--   <i>Code 400</i>
ListSubscriptionsByTopicInvalidParameter :: ListSubscriptionsByTopicErrors

-- | Indicates that the requested resource does not exist.
--   
--   <i>Code 404</i>
ListSubscriptionsByTopicNotFound :: ListSubscriptionsByTopicErrors
instance Typeable ListSubscriptionsByTopic
instance Typeable ListSubscriptionsByTopicResponse
instance Typeable ListSubscriptionsByTopicErrors
instance Show Subscription
instance Read Subscription
instance Eq Subscription
instance Ord Subscription
instance Show ListSubscriptionsByTopicNextToken
instance Read ListSubscriptionsByTopicNextToken
instance Eq ListSubscriptionsByTopicNextToken
instance Ord ListSubscriptionsByTopicNextToken
instance Monoid ListSubscriptionsByTopicNextToken
instance IsString ListSubscriptionsByTopicNextToken
instance Show ListSubscriptionsByTopic
instance Read ListSubscriptionsByTopic
instance Eq ListSubscriptionsByTopic
instance Ord ListSubscriptionsByTopic
instance Show ListSubscriptionsByTopicResponse
instance Read ListSubscriptionsByTopicResponse
instance Eq ListSubscriptionsByTopicResponse
instance Ord ListSubscriptionsByTopicResponse
instance Show ListSubscriptionsByTopicErrors
instance Read ListSubscriptionsByTopicErrors
instance Eq ListSubscriptionsByTopicErrors
instance Ord ListSubscriptionsByTopicErrors
instance Enum ListSubscriptionsByTopicErrors
instance Bounded ListSubscriptionsByTopicErrors
instance IteratedTransaction ListSubscriptionsByTopic ListSubscriptionsByTopicResponse
instance ListResponse ListSubscriptionsByTopicResponse Subscription
instance AsMemoryResponse ListSubscriptionsByTopicResponse
instance Transaction ListSubscriptionsByTopic ListSubscriptionsByTopicResponse
instance SignQuery ListSubscriptionsByTopic
instance ResponseConsumer r ListSubscriptionsByTopicResponse


-- | <i>API Version: 2013-03-31</i>
--   
--   Returns all of the properties of a subscription.
--   
--   
--   <a>http://docs.aws.amazon.com/sns/2010-03-31/api/API_GetSubscriptionAttributes.html</a>
module Aws.Sns.Commands.GetSubscriptionAttributes

-- | Subscription Attributes
--   
--   
--   <a>http://docs.aws.amazon.com/sns/2010-03-31/api/API_GetSubscriptionAttributes.html</a>
--   
--   TODO find out which of the fields in the structure are optional and
--   which are required.
data SubscriptionAttributes
SubscriptionAttributes :: !(Maybe Arn) -> !(Maybe Arn) -> !(Maybe AccountId) -> !Bool -> !(Maybe DeliveryPolicy) -> !(Maybe DeliveryPolicy) -> SubscriptionAttributes

-- | the subscription's ARN
subscriptionAttrSubscriptionArn :: SubscriptionAttributes -> !(Maybe Arn)

-- | the topic ARN that the subscription is associated with
subscriptionAttrTopicArn :: SubscriptionAttributes -> !(Maybe Arn)

-- | the AWS account ID of the subscription's owner
subscriptionAttrOwner :: SubscriptionAttributes -> !(Maybe AccountId)

-- | <a>True</a> if the subscription confirmation request was authenticated
subscriptionAttrConfirmationWasAuthenticated :: SubscriptionAttributes -> !Bool

-- | the JSON serialization of the subscription's delivery policy
subscriptionAttrDeliveryPolicy :: SubscriptionAttributes -> !(Maybe DeliveryPolicy)

-- | the JSON serialization of the effective delivery policy that takes
--   into account the topic delivery policy and account system defaults
subscriptionAttrEffectiveDeliveryPolicy :: SubscriptionAttributes -> !(Maybe DeliveryPolicy)
data GetSubscriptionAttributes
GetSubscriptionAttributes :: !Arn -> GetSubscriptionAttributes

-- | The ARN of the subscription whose properties you want to get.
getSubscriptionAttributesSubscriptionArn :: GetSubscriptionAttributes -> !Arn
data GetSubscriptionAttributesResponse
GetSubscriptionAttributesResponse :: !SubscriptionAttributes -> GetSubscriptionAttributesResponse
getSubscriptionAttributesResAttributes :: GetSubscriptionAttributesResponse -> !SubscriptionAttributes
data GetSubscriptionAttributesErrors

-- | Indicates that the user has been denied access to the requested
--   resource.
--   
--   <i>Code 403</i>
GetSubscriptionAttributesAuthorizationError :: GetSubscriptionAttributesErrors

-- | Indicates an internal service error.
--   
--   <i>Code 500</i>
GetSubscriptionAttributesInternalError :: GetSubscriptionAttributesErrors

-- | Indicates that a request parameter does not comply with the associated
--   constraints.
--   
--   <i>Code 400</i>
GetSubscriptionAttributesInvalidParameter :: GetSubscriptionAttributesErrors

-- | Indicates that the requested resource does not exist.
--   
--   <i>Code 404</i>
GetSubscriptionAttributesNotFound :: GetSubscriptionAttributesErrors
instance Typeable SubscriptionAttributes
instance Typeable GetSubscriptionAttributes
instance Typeable GetSubscriptionAttributesResponse
instance Typeable GetSubscriptionAttributesErrors
instance Show SubscriptionAttributes
instance Read SubscriptionAttributes
instance Eq SubscriptionAttributes
instance Ord SubscriptionAttributes
instance Show GetSubscriptionAttributes
instance Read GetSubscriptionAttributes
instance Eq GetSubscriptionAttributes
instance Ord GetSubscriptionAttributes
instance Show GetSubscriptionAttributesResponse
instance Read GetSubscriptionAttributesResponse
instance Eq GetSubscriptionAttributesResponse
instance Ord GetSubscriptionAttributesResponse
instance Show GetSubscriptionAttributesErrors
instance Read GetSubscriptionAttributesErrors
instance Eq GetSubscriptionAttributesErrors
instance Ord GetSubscriptionAttributesErrors
instance Enum GetSubscriptionAttributesErrors
instance Bounded GetSubscriptionAttributesErrors
instance AsMemoryResponse GetSubscriptionAttributesResponse
instance Transaction GetSubscriptionAttributes GetSubscriptionAttributesResponse
instance SignQuery GetSubscriptionAttributes
instance ResponseConsumer r GetSubscriptionAttributesResponse


-- | <i>API Version: 2013-03-31</i>
--   
--   
--   <a>http://docs.aws.amazon.com/sns/2010-03-31/APIReference/Welcome.html</a>
--   
--   The types and functions of this package are supposed to be use with
--   the machinery from the <a>aws package</a>.
--   
--   Here is a very simple example for making a single request to AWS SNS.
--   
--   <pre>
--   import Aws
--   import Aws.Core
--   import Aws.General
--   import Aws.Sns
--   import Data.IORef
--   
--   cfg &lt;- Aws.baseConfiguration
--   creds &lt;- Credentials "access-key-id" "secret-access-key" `fmap` newIORef []
--   let snsCfg = SnsConfiguration HTTPS UsWest2
--   simpleAws cfg snsCfg $ ListTopics Nothing
--   </pre>
--   
--   In order to run the example you must replace
--   <tt><a>access-key-id</a></tt> and <tt><a>secret-access-key</a></tt>
--   with the respective values for your AWS account.
module Aws.Sns
