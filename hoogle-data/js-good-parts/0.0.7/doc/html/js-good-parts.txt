-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Javascript: The Good Parts -- AST & Pretty Printer
--   
--   An AST for the "the good parts" of Javascript (as defined by Douglas
--   Crockford) and a pretty printer for that AST. Designed to be the
--   target of a code generator. Does not include a parser.
@package js-good-parts
@version 0.0.7

module Language.JavaScript.NonEmptyList
data NonEmptyList a
singleton :: a -> NonEmptyList a
(<:>) :: a -> NonEmptyList a -> NonEmptyList a
toList :: NonEmptyList a -> [a]
instance Functor NonEmptyList


-- | In Chapter 2 of "JavaScript: The Good Parts", Douglas Crockford
--   presents a concrete grammar for "the good parts" of JavaScript.
--   
--   This module provides an abstract grammar for those good parts.
--   Henceforth, we abbreviate this language to JS:TGP
--   
--   Crockford presents the grammar as a series of railroad diagrams. The
--   correspondence between the concrete grammar and the abstract grammar
--   in this module is NOT one-to-one. However, the following property does
--   hold: the pretty printing of an abstract syntax tree will be parseable
--   by the concrete grammar. i.e. For each valid program produced by the
--   concrete grammar there is a corresponding abstract syntax tree that
--   when pretty printed will produce that program (modulo whitespace).
--   
--   <i>The abstract grammar</i>
--   
--   <ul>
--   <li>removes unnecessary characters such as parentheses (normal, curly
--   and square)</li>
--   <li>represents JavaScript's string, name and number literals directly
--   in Haskell as <a>String</a>, <a>String</a> and <a>Double</a>
--   respectively.</li>
--   </ul>
--   
--   <i>Conventions for concrete syntax</i>
--   
--   <ul>
--   <li>Non-terminals appear in angle brackets e.g. &lt;Name&gt;</li>
--   <li>? means zero or one. e.g. &lt;Expr&gt;?</li>
--   <li>* means zero or more e.g. &lt;Stmt&gt;*</li>
--   <li>+ means one or more e.g. &lt;Stmt&gt;+</li>
--   <li>( ) are meta-brackets used to enclose a concrete-syntax expression
--   so that ?,* or + can be applied. e.g. (= &lt;Expr&gt;)* This means
--   zero or more repetitions of: = &lt;Expr&gt;</li>
--   </ul>
--   
--   This library was designed so that it would be impossible, save for
--   name, string literals to construct an incorrect JS:TGP program. To
--   this end some of the data structures may look like they contain
--   redundancy. For instance, consider the <a>ESDelete</a> constructor
--   which is defined
--   
--   <pre>
--   ESDelete Expr Invocation
--   </pre>
--   
--   Why not just define it as <tt>ESDelete Expr</tt> since type
--   <tt>Expr</tt> has a constructor defined as <tt>ExprInvocation Expr
--   Invocation</tt>? The reason is that this would allow incorrect
--   programs. A <a>Expr</a> is not necessarily a <a>Invocation</a>.
--   
--   <i>A note on precedence of JavaScript operators</i>
--   
--   Interestingly, the precedence of JavaScript operators is not defined
--   in the ECMAScript standard. The precedence used in this library comes
--   from the Mozilla Developer's Network pages.
--   (https:<i></i>developer.mozilla.org<i>en</i>JavaScript<i>Reference</i>Operators/Operator_Precedence)
--   
--   I have not used the precise precedence numbers from that page since in
--   this module a lower precedence means the operator binds more tightly
--   (as opposed to the page where a higher precedence does the same).
--   Also, we have need for less precedence values so they have been
--   normalised to what we are using in JS:TGP
--   
--   You will also note that we don't even consider the
--   associativity/precedence of "=", "+=", "-=" etc. In JS:TGP the notion
--   of expression statements is quite different to that of expressions. It
--   simply isn't legal to write an expression statement like
--   
--   <pre>
--   (a += 2) -= 3
--   </pre>
--   
--   or
--   
--   <pre>
--   a = (b = c) = (c = d)
--   </pre>
--   
--   although it is perfectly legal to write
--   
--   <pre>
--   a = b = c = d += 2
--   </pre>
--   
--   which if we add brackets to disambiguate is really
--   
--   <pre>
--   a = (b = (c = (d += 2)))
--   </pre>
--   
--   Interesting aspects of "the good parts":
--   
--   A JS:TGP program is a collection of statements. You'll note that there
--   is no statement to declare a function in JS:TGP. However you can
--   assign a function literal to a variable.
--   
--   e.g.
--   
--   <pre>
--   var fun = function(x) { return x + 1;}
--   </pre>
--   
--   What about recursive functions then? There is the option to give the
--   function a name which is local to the literal.
--   
--   e.g.
--   
--   <pre>
--   var factorial = function f(n) {
--                       if ( n &gt; 0 ) {
--                         return n * f(n - 1);
--                       } else {
--                         return 1;
--                       }
--                     }
--   </pre>
--   
--   <tt>f</tt> is local. It will not be in scope outside of the function
--   body.
--   
--   Abbreviations:
--   
--   <pre>
--   Stmt = Statement, Expr = Expression, Fn = Function, Decl = Declaration
--   </pre>
module Language.JavaScript.AST
data JSString
data Name
unString :: JSString -> String
unName :: Name -> String

-- | The only way you can create a Javascript string. This function needs
--   to correctly encode all special characters. See p9 of "JavaScript: The
--   Good Parts"
jsString :: String -> Either String JSString

-- | <tt>jsName</tt> is the only way you can create a Name
name :: String -> Either String Name
newtype Number
Number :: Double -> Number

-- | Concrete syntax:
--   
--   <pre>
--   var &lt;VarDecl&gt; [, &lt;VarDecl&gt;]* ;
--   </pre>
--   
--   e.g. <tt>var x = 1, y;</tt>
data VarStmt
VarStmt :: (NonEmptyList VarDecl) -> VarStmt

-- | Concrete syntax:
--   
--   <ol>
--   <li><pre>&lt;Name&gt; (= &lt;Expr&gt;)?</pre></li>
--   </ol>
--   
--   e.g.
--   
--   <ol>
--   <li><pre>x</pre></li>
--   <li><pre>x = 2 + y</pre></li>
--   </ol>
data VarDecl
VarDecl :: Name -> (Maybe Expr) -> VarDecl

-- | The many different kinds of statements
data Stmt

-- | <pre>
--   &lt;ExprStmt&gt;;
--   </pre>
StmtExpr :: ExprStmt -> Stmt

-- | <pre>
--   &lt;DisruptiveStmt&gt;
--   </pre>
StmtDisruptive :: DisruptiveStmt -> Stmt

-- | <pre>
--   &lt;TryStmt&gt;
--   </pre>
StmtTry :: TryStmt -> Stmt

-- | <pre>
--   &lt;IfStmt&gt;
--   </pre>
StmtIf :: IfStmt -> Stmt

-- | <pre>
--   (&lt;Name&gt; : ) &lt;SwitchStmt&gt;
--   </pre>
StmtSwitch :: (Maybe Name) -> SwitchStmt -> Stmt

-- | <pre>
--   (&lt;Name&gt; : ) &lt;WhileStmt&gt;
--   </pre>
StmtWhile :: (Maybe Name) -> WhileStmt -> Stmt

-- | <pre>
--   (&lt;Name&gt; : ) &lt;ForStmt&gt;
--   </pre>
StmtFor :: (Maybe Name) -> ForStmt -> Stmt

-- | <pre>
--   (&lt;Name&gt; : ) &lt;DoStmt&gt;
--   </pre>
StmtDo :: (Maybe Name) -> DoStmt -> Stmt

-- | Disruptive statements
data DisruptiveStmt

-- | <pre>
--   &lt;BreakStmt&gt;
--   </pre>
DSBreak :: BreakStmt -> DisruptiveStmt

-- | <pre>
--   syntax: &lt;ReturnStmt&gt;
--   </pre>
DSReturn :: ReturnStmt -> DisruptiveStmt

-- | <pre>
--   syntax: &lt;ThrowStmt&gt;
--   </pre>
DSThrow :: ThrowStmt -> DisruptiveStmt

-- | Concrete syntax:
--   
--   <tt>if ( &lt;Expr&gt; ) { &lt;Stmt&gt;* }</tt> -- for <a>Nothing</a>
--   
--   or
--   
--   <tt>if ( &lt;Expr&gt; ) { &lt;Stmt&gt;* } else { &lt;Stmt&gt;* }</tt>
--   -- for 'Just . Left'
--   
--   or
--   
--   <tt>if ( &lt;Expr&gt; ) { &lt;Stmt&gt;* } else &lt;IfStmt&gt;</tt> --
--   for 'Just . Right'
--   
--   e.g.
--   
--   <ol>
--   <li><pre>if (x &gt; 3) { y = 2; }</pre></li>
--   <li><pre>if (x &lt; 2) { y = 1; } else { y = 3; z = 2; }</pre></li>
--   <li><pre>if (x &gt; 0) { y = 20; } else if ( x &gt; 10) { y = 30; }
--   else { y = 10; }</pre></li>
--   </ol>
data IfStmt
IfStmt :: Expr -> [Stmt] -> (Maybe (Either [Stmt] IfStmt)) -> IfStmt

-- | Concrete syntax:
--   
--   <pre>
--   switch ( &lt;Expr&gt; ) { &lt;CaseClause&gt; }
--   </pre>
--   
--   or
--   
--   <pre>
--   switch ( &lt;Expr&gt; ) {
--    &lt;CaseAndDisruptive&gt;+
--    default : &lt;Stmt&gt;*
--   }
--   </pre>
--   
--   e.g.
--   
--   <ol>
--   <li></li>
--   </ol>
--   
--   <pre>
--   switch ( x ) {
--     case 1:
--       y = 2;
--     }
--   </pre>
--   
--   <ol>
--   <li></li>
--   </ol>
--   
--   <pre>
--   switch ( x ) {
--     case 1:
--       y = 2;
--       break;
--     case 2:
--       y = 3;
--       break;
--     default:
--       y = 4;
--   }
--   </pre>
data SwitchStmt
SwitchStmtSingleCase :: Expr -> CaseClause -> SwitchStmt

-- | default clause statements
SwitchStmt :: Expr -> (NonEmptyList CaseAndDisruptive) -> [Stmt] -> SwitchStmt

-- | A case clause followed by a disruptive statement
--   
--   Concrete syntax:
--   
--   <pre>
--   &lt;CaseClause&gt; &lt;DisruptiveStmt&gt;
--   </pre>
--   
--   e.g.
--   
--   <ol>
--   <li><tt> case 2: y = 2; break; </tt></li>
--   </ol>
data CaseAndDisruptive
CaseAndDisruptive :: CaseClause -> DisruptiveStmt -> CaseAndDisruptive

-- | Concrete syntax:
--   
--   <pre>
--   case &lt;Expr&gt; : &lt;Stmt&gt;*
--   </pre>
--   
--   e.g.
--   
--   <ol>
--   <li></li>
--   </ol>
--   
--   <pre>
--   case 2:   // zero statements following the case expression is valid.
--   </pre>
--   
--   <ol>
--   <li></li>
--   </ol>
--   
--   <pre>
--   case 2:
--     y = 1;
--   </pre>
data CaseClause
CaseClause :: Expr -> [Stmt] -> CaseClause

-- | Two style of for-statements -- C-style and In-style.
--   
--   Concrete syntax:
--   
--   <ol>
--   <li></li>
--   </ol>
--   
--   <pre>
--   for (&lt;ExprStmt&gt;? ; &lt;Expr&gt;? ; &lt;ExprStmt&gt;? ) {
--     &lt;Stmt&gt;*
--   }
--   </pre>
--   
--   <ol>
--   <li></li>
--   </ol>
--   
--   <pre>
--   for ( &lt;Name&gt; in &lt;Expr&gt; ) {
--     &lt;Stmt&gt;*
--   }
--   </pre>
--   
--   e.g.
--   
--   <ol>
--   <li><pre>for ( ; ; ) { }</pre></li>
--   <li><pre>for ( ; x &lt; 10 ;) { x += 1; }</pre></li>
--   <li></li>
--   </ol>
--   
--   <pre>
--   for (i = 0; i &lt; 10; i += 1) {
--     x += i;
--   }
--   </pre>
--   
--   <ol>
--   <li><pre>for ( i in indices ) { a[i] = 66; }</pre></li>
--   </ol>
data ForStmt
ForStmtCStyle :: (Maybe ExprStmt) -> (Maybe Expr) -> (Maybe ExprStmt) -> [Stmt] -> ForStmt
ForStmtInStyle :: Name -> Expr -> [Stmt] -> ForStmt

-- | Concrete syntax:
--   
--   <pre>
--   do { &lt;Stmt&gt;* } while ( &lt;Expr&gt; );
--   </pre>
data DoStmt
DoStmt :: [Stmt] -> Expr -> DoStmt

-- | Concrete syntax:
--   
--   <pre>
--   while ( &lt;Expr&gt;) { &lt;Stmt&gt;* }
--   </pre>
data WhileStmt
WhileStmt :: Expr -> [Stmt] -> WhileStmt

-- | Concrete syntax:
--   
--   <pre>
--   try { &lt;Stmt&gt;* } catch ( &lt;Name&gt; ) { &lt;Stmt&gt;* }
--   </pre>
data TryStmt
TryStmt :: [Stmt] -> Name -> [Stmt] -> TryStmt

-- | Concrete syntax:
--   
--   <pre>
--   throw &lt;Expr&gt;;
--   </pre>
data ThrowStmt
ThrowStmt :: Expr -> ThrowStmt

-- | Concrete syntax:
--   
--   <pre>
--   return &lt;Expr&gt;?;
--   </pre>
--   
--   e.g.
--   
--   <ol>
--   <li><pre>return;</pre></li>
--   <li><pre>return 2 + x;</pre></li>
--   </ol>
data ReturnStmt
ReturnStmt :: (Maybe Expr) -> ReturnStmt

-- | Concrete syntax:
--   
--   <pre>
--   break &lt;Name&gt;?;
--   </pre>
--   
--   e.g.
--   
--   <ol>
--   <li><pre>break;</pre></li>
--   <li><pre>break some_label;</pre></li>
--   </ol>
data BreakStmt
BreakStmt :: (Maybe Name) -> BreakStmt

-- | Concrete syntax:
--   
--   <pre>
--   &lt;Value&gt;+ &lt;RValue&gt;
--   </pre>
--   
--   or
--   
--   <pre>
--   delete &lt;Expr&gt; &lt;Refinement&gt;
--   </pre>
data ExprStmt
ESApply :: (NonEmptyList LValue) -> RValue -> ExprStmt
ESDelete :: Expr -> Refinement -> ExprStmt

-- | Concrete syntax:
--   
--   <pre>
--   &lt;Name&gt; (&lt;Invocation&gt;* &lt;Refinement&gt;)*
--   </pre>
--   
--   e.g.
--   
--   <ol>
--   <li><pre>x</pre></li>
--   <li><pre>x.field_1</pre></li>
--   <li><pre>fun().field_1</pre></li>
--   <li><pre>fun(1)(2)</pre></li>
--   <li><pre>fun(1)(2).field_1</pre></li>
--   <li><pre>x.fun_field_1(x+2).fun_field_2(y+3).field_3</pre></li>
--   </ol>
data LValue
LValue :: Name -> [([Invocation], Refinement)] -> LValue

-- | Concrete syntax:
--   
--   <pre>
--   =  &lt;Expr&gt;
--   </pre>
--   
--   or
--   
--   <pre>
--   += &lt;Expr&gt;
--   </pre>
--   
--   or
--   
--   <pre>
--   -= &lt;Expr&gt;
--   </pre>
--   
--   or
--   
--   <pre>
--   &lt;Invocation&gt;+
--   </pre>
--   
--   e.g.
--   
--   <ol>
--   <li><pre>= 2</pre></li>
--   <li><pre>+= 3</pre></li>
--   <li><pre>-= (4 + y)</pre></li>
--   <li><pre>()</pre></li>
--   <li><pre>(1)</pre></li>
--   <li><pre>(x,y,z)</pre></li>
--   </ol>
data RValue
RVAssign :: Expr -> RValue
RVAddAssign :: Expr -> RValue
RVSubAssign :: Expr -> RValue
RVInvoke :: (NonEmptyList Invocation) -> RValue
data Expr

-- | <pre>
--   &lt;Lit&gt;
--   </pre>
ExprLit :: Lit -> Expr

-- | <pre>
--   &lt;Name&gt;
--   </pre>
ExprName :: Name -> Expr

-- | <pre>
--   &lt;PrefixOperator&gt; &lt;Expr&gt;
--   </pre>
ExprPrefix :: PrefixOperator -> Expr -> Expr

-- | <pre>
--   &lt;Expr&gt; &lt;InfixOperator&gt; &lt;Expr&gt;
--   </pre>
ExprInfix :: InfixOperator -> Expr -> Expr -> Expr

-- | <pre>
--   &lt;Expr&gt; ? &lt;Expr&gt; : &lt;Expr&gt;
--   </pre>
ExprTernary :: Expr -> Expr -> Expr -> Expr

-- | <pre>
--   &lt;Expr&gt;&lt;Invocation&gt;
--   </pre>
ExprInvocation :: Expr -> Invocation -> Expr

-- | <pre>
--   &lt;Expr&gt;&lt;Refinement&gt;
--   </pre>
ExprRefinement :: Expr -> Refinement -> Expr

-- | new <tt>&lt;Expr&gt;&lt;Invocation&gt;</tt>
ExprNew :: Expr -> Invocation -> Expr

-- | delete <tt>&lt;Expr&gt;&lt;Refinement&gt;</tt>
ExprDelete :: Expr -> Refinement -> Expr
data PrefixOperator

-- | <pre>
--   typeof
--   </pre>
TypeOf :: PrefixOperator

-- | <pre>
--   +
--   </pre>
ToNumber :: PrefixOperator

-- | <pre>
--   -
--   </pre>
Negate :: PrefixOperator

-- | <pre>
--   !
--   </pre>
Not :: PrefixOperator
data InfixOperator

-- | <pre>
--   *
--   </pre>
Mul :: InfixOperator

-- | <pre>
--   /
--   </pre>
Div :: InfixOperator

-- | <pre>
--   %
--   </pre>
Mod :: InfixOperator

-- | <pre>
--   +
--   </pre>
Add :: InfixOperator

-- | <pre>
--   -
--   </pre>
Sub :: InfixOperator

-- | <pre>
--   &gt;=
--   </pre>
GTE :: InfixOperator

-- | <pre>
--   &lt;=
--   </pre>
LTE :: InfixOperator

-- | <pre>
--   &gt;
--   </pre>
GT :: InfixOperator

-- | <pre>
--   &lt;
--   </pre>
LT :: InfixOperator

-- | <pre>
--   ===
--   </pre>
Eq :: InfixOperator

-- | <pre>
--   !==
--   </pre>
NotEq :: InfixOperator

-- | <pre>
--   ||
--   </pre>
Or :: InfixOperator

-- | <pre>
--   &amp;&amp;
--   </pre>
And :: InfixOperator

-- | Concrete syntax:
--   
--   <pre>
--   &lt;Expr&gt;*
--   </pre>
--   
--   e.g.
--   
--   <ol>
--   <li><pre>()</pre></li>
--   <li><pre>(1)</pre></li>
--   <li><pre>(x,z,y)</pre></li>
--   </ol>
data Invocation
Invocation :: [Expr] -> Invocation

-- | Concrete syntax:
--   
--   <pre>
--   .&lt;Name&gt;
--   </pre>
--   
--   or
--   
--   <pre>
--   [&lt;Expr&gt;]
--   </pre>
--   
--   e.g.
--   
--   <ol>
--   <li><pre>.field_1</pre></li>
--   <li><pre>[i+1]</pre></li>
--   </ol>
data Refinement
Property :: Name -> Refinement
Subscript :: Expr -> Refinement

-- | Interestingly, the syntax diagrams presented in the book don't include
--   boolean literals. I can only assume this is an oversight as they are
--   used throughout the book.
data Lit

-- | <pre>
--   &lt;Number&gt;
--   </pre>
LitNumber :: Number -> Lit

-- | <pre>
--   &lt;true | false&gt;
--   </pre>
LitBool :: Bool -> Lit

-- | <pre>
--   &lt;String&gt;
--   </pre>
LitString :: JSString -> Lit

-- | <pre>
--   &lt;ObjectLit&gt;
--   </pre>
LitObject :: ObjectLit -> Lit

-- | <pre>
--   &lt;ArrayLit&gt;
--   </pre>
LitArray :: ArrayLit -> Lit

-- | <tt>&lt;FnLit&gt;</tt> | LitRegexp RegexpLit -- TODO: Add regexps
LitFn :: FnLit -> Lit

-- | Concrete syntax:
--   
--   <tt>{}</tt> -- no fields
--   
--   or
--   
--   <tt>{&lt;ObjectField&gt; (, &lt;ObjectField&gt; )*}</tt> -- one or
--   more fields
data ObjectLit
ObjectLit :: [ObjectField] -> ObjectLit

-- | Concrete syntax:
--   
--   <tt>&lt;Name&gt;: &lt;Expr&gt; </tt> -- for Left
--   
--   or
--   
--   <tt>&lt;String&gt;: &lt;Expr&gt; </tt> -- for Right
--   
--   e.g.
--   
--   <ol>
--   <li><pre>x: y + 3</pre></li>
--   <li><pre>"value": 3 - z</pre></li>
--   </ol>
data ObjectField
ObjectField :: (Either Name String) -> Expr -> ObjectField

-- | Concrete syntax:
--   
--   <tt>[]</tt> -- empty array
--   
--   or
--   
--   <tt>[&lt;Expr&gt; (, &lt;Expr&gt;*) ]</tt> -- non empty array
data ArrayLit
ArrayLit :: [Expr] -> ArrayLit

-- | Concrete syntax:
--   
--   <pre>
--   function &lt;Name&gt;? &lt;FnBody&gt;
--   </pre>
data FnLit
FnLit :: (Maybe Name) -> [Name] -> FnBody -> FnLit

-- | Concrete syntax:
--   
--   <pre>
--   { &lt;VarStmt&gt;+ &lt;Stmt&gt;+ }
--   </pre>
data FnBody
FnBody :: [VarStmt] -> [Stmt] -> FnBody

-- | Programs. All variable statements come first.
data Program
Program :: [VarStmt] -> [Stmt] -> Program

module Language.JavaScript.Pretty

-- | The member <tt>prettyList</tt> is only used to define the <tt>instance
--   Pretty a =&gt; Pretty [a]</tt>. In normal circumstances only the
--   <tt>pretty</tt> function is used.
class Pretty a
pretty :: Pretty a => a -> Doc
prettyList :: Pretty a => [a] -> Doc
instance Eq Associativity
instance Pretty Program
instance PrettyPrec FnBody
instance Pretty FnBody
instance PrettyPrec FnLit
instance Pretty FnLit
instance PrettyPrec ArrayLit
instance Pretty ArrayLit
instance PrettyPrec ObjectField
instance Pretty ObjectField
instance PrettyPrec ObjectLit
instance Pretty ObjectLit
instance PrettyPrec Lit
instance Pretty Lit
instance PrettyPrec Refinement
instance Pretty Refinement
instance PrettyPrec Invocation
instance Pretty Invocation
instance PrettyPrec InfixOperator
instance Pretty InfixOperator
instance PrettyPrec PrefixOperator
instance Pretty PrefixOperator
instance PrettyPrec Expr
instance Pretty Expr
instance PrettyPrec RValue
instance Pretty RValue
instance PrettyPrec LValue
instance Pretty LValue
instance PrettyPrec ExprStmt
instance Pretty ExprStmt
instance PrettyPrec BreakStmt
instance Pretty BreakStmt
instance PrettyPrec ReturnStmt
instance Pretty ReturnStmt
instance PrettyPrec ThrowStmt
instance Pretty ThrowStmt
instance PrettyPrec TryStmt
instance Pretty TryStmt
instance PrettyPrec WhileStmt
instance Pretty WhileStmt
instance PrettyPrec DoStmt
instance Pretty DoStmt
instance PrettyPrec ForStmt
instance Pretty ForStmt
instance PrettyPrec CaseClause
instance Pretty CaseClause
instance PrettyPrec CaseAndDisruptive
instance Pretty CaseAndDisruptive
instance PrettyPrec SwitchStmt
instance Pretty SwitchStmt
instance PrettyPrec IfStmt
instance Pretty IfStmt
instance PrettyPrec DisruptiveStmt
instance Pretty DisruptiveStmt
instance PrettyPrec Stmt
instance Pretty Stmt
instance PrettyPrec VarDecl
instance Pretty VarDecl
instance PrettyPrec VarStmt
instance Pretty VarStmt
instance PrettyPrec Number
instance Pretty Number
instance Pretty Name
instance Pretty JSString
