-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Communicate with HTTP service using JSON
--   
--   A library for communicating with JSON over HTTP connection. Supports
--   rich set of HTTP connectivity features provided by libcurl combined to
--   the performance and elegancy of aeson.
--   
--   All HTTP methods are supported. Instances of <a>ToJSON</a> and
--   <a>FromJSON</a> typeclasses can be transferred via this library.
--   Session cookies and other HTTP options may be passed to libcurl if
--   needed.
--   
--   This library is at its best when communicating with simple,
--   non-standardized JSON interfaces. If you are implementing JSON-RPC
--   compliant client or server, take a look at
--   <a>http://hackage.haskell.org/package/jmacro-rpc</a>.
@package curl-aeson
@version 0.0.4


-- | Functions for communicating with JSON over HTTP connection.
module Network.Curl.Aeson

-- | Shorthand for doing just a HTTP GET request and parsing the output to
--   any FromJSON instance.
curlAesonGet :: FromJSON a => URLString -> IO a

-- | Shorthand for doing just a HTTP GET request and parsing the output
--   with given parser <i>p</i>.
curlAesonGetWith :: (Value -> Parser a) -> URLString -> IO a

-- | Send single HTTP request.
--   
--   The request automatically has <tt>Content-type: application/json</tt>
--   header if you pass any data. This function is lenient on response
--   content type: everything is accepted as long as it is parseable with
--   <a>decode</a>. HTTP payload is expected to be UTF-8 encoded.
--   
--   If you need authentication, you need to pass session cookie or other
--   means of authentication tokens via <a>CurlOption</a> list.
curlAeson :: ToJSON a => (Value -> Parser b) -> String -> URLString -> [CurlOption] -> Maybe a -> IO b

-- | Single cookie of given key and value.
cookie :: String -> String -> CurlOption

-- | Useful for just giving the JSON as string when it is static anyway and
--   doesn't need to be programmatically crafted.
rawJson :: String -> Maybe Value

-- | Helper function for writing parsers for JSON objects which are not
--   needed to be parsed completely.
--   
--   In this example we are parsing JSON from
--   <a>http://json.org/example.html</a>. Note the use of the
--   <tt>OverloadedStrings</tt> language extension which enables
--   <a>Text</a> values to be written as string literals.
--   
--   <pre>
--   p (<a>Object</a> o) = <tt>pure</tt> obj<a>...</a>"glossary"<a>...</a>"title"
--   p _ = <a>mzero</a>
--   </pre>
(...) :: FromJSON b => Parser Object -> Text -> Parser b

-- | To avoid ambiguity in type checker you may pass this value instead of
--   Nothing to <a>curlAeson</a>.
noData :: Maybe Value

-- | This exception is is thrown when Curl doesn't finish cleanly or the
--   parsing of JSON response fails.
data CurlAesonException
CurlAesonException :: URLString -> CurlCode -> [CurlOption] -> String -> String -> CurlAesonException
url :: CurlAesonException -> URLString
curlCode :: CurlAesonException -> CurlCode
curlOpts :: CurlAesonException -> [CurlOption]
received :: CurlAesonException -> String
errorMsg :: CurlAesonException -> String
instance Typeable CurlAesonException
instance Show CurlAesonException
instance Exception CurlAesonException
