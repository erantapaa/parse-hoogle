-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Atlassian Connect snaplet for the Snap Framework and helper code.
--   
@package atlassian-connect-core
@version 0.7.0.1


-- | While writing Atlassian Connect applications you will often be in a
--   situation where you want to query the Host Application directly in a
--   trusted way. This may be because:
--   
--   <ul>
--   <li>You are not making this request on behalf of a user. You are
--   making it on behalf of your Addon. (Data ingestion etc.)</li>
--   <li>You cannot trust the information that the Customer has given you.
--   For example: don't trust the customer to tell you if they are an admin
--   or not. Go directly to the Host application for that.</li>
--   </ul>
--   
--   This module allows you to make HTTP requests to the host application
--   and expect JSON responses. There are convinience methods for GET, POST
--   and PUT requests which make up the majority of the requests that you
--   are going to make.
--   
--   It is important to note that these requests are still restricted by
--   the <a>scopes</a> that you have asked for in your Atlassian Connect
--   Descriptor.
--   
--   For an example of usage: look at the httpGetRequest function.
module Snap.AtlassianConnect.HostRequest

-- | As an Atlassian Connect application you will want to make requests of
--   the Host Applicaiton (JIRA / Confluence) so that you can get important
--   information. This function lets you do so by doing most of the heavy
--   lifting of having to create a JWT token and a Query String Hash. It
--   also asserts that you intended to get a JSON response. You should use
--   this method or the helper methods whenever you want to make requests
--   of the host application.
hostRequest :: FromJSON a => StdMethod -> Tenant -> ByteString -> [(ByteString, Maybe ByteString)] -> Endo Request -> Handler b Connect (Either ProductErrorResponse (Maybe a))

-- | This is a convinience method that calls <a>hostRequest</a> as a GET
--   method.
--   
--   Here is an example of it being used to make a call for user details:
--   
--   <pre>
--   jiraUserDetailsResponse &lt;- hostGetRequest myConnectTenant "/rest/api/2/user" [("username", Just "admin")] mempty
--   </pre>
--   
--   This example assumes that you are using the OverloadedStrings LANGUAGE
--   pragma and that you don't need to modify the request. You might want
--   to might want to modify the request for multiple reasons. Too add
--   proxy details for example.
hostGetRequest :: FromJSON a => Tenant -> ByteString -> [(ByteString, Maybe ByteString)] -> Endo Request -> Handler b Connect (Either ProductErrorResponse a)

-- | This is a convinience method that calls <a>hostRequest</a> as a POST
--   method and requires that the resource returns content.
hostPostRequest :: FromJSON a => Tenant -> ByteString -> [(ByteString, Maybe ByteString)] -> Endo Request -> Handler b Connect (Either ProductErrorResponse a)

-- | This is the same method as hostPostRequest except that if HTTP 204 No
--   Content is returned then you will get nothing instead of an error.
hostPostRequestExtended :: FromJSON a => Tenant -> ByteString -> [(ByteString, Maybe ByteString)] -> Endo Request -> Handler b Connect (Either ProductErrorResponse (Maybe a))

-- | This is a convinience method that calls <a>hostRequest</a> as a PUT
--   method.
hostPutRequest :: FromJSON a => Tenant -> ByteString -> [(ByteString, Maybe ByteString)] -> Endo Request -> Handler b Connect (Either ProductErrorResponse a)

-- | This is the same method as hostPutRequest except that if HTTP 204 No
--   Content is returned then you will get nothing instead of an error.
hostPutRequestExtended :: FromJSON a => Tenant -> ByteString -> [(ByteString, Maybe ByteString)] -> Endo Request -> Handler b Connect (Either ProductErrorResponse (Maybe a))

-- | HTTP standard method (as defined by RFC 2616, and PATCH which is
--   defined by RFC 5789).
data StdMethod :: *
GET :: StdMethod
POST :: StdMethod
HEAD :: StdMethod
PUT :: StdMethod
DELETE :: StdMethod
TRACE :: StdMethod
CONNECT :: StdMethod
OPTIONS :: StdMethod
PATCH :: StdMethod

-- | If you fail to properly communicate with the Host application then you
--   will get a product error response back.
data ProductErrorResponse
ProductErrorResponse :: HttpResponseCode -> Text -> ProductErrorResponse

-- | The HTTP error code.
perCode :: ProductErrorResponse -> HttpResponseCode

-- | The error message.
perMessage :: ProductErrorResponse -> Text

-- | Add a request headers.
addHeader :: (CI ByteString, ByteString) -> RequestTransformer
setPostParams :: [(ByteString, ByteString)] -> Endo Request

-- | Set request query parameters.
setQueryParams :: [(ByteString, Maybe ByteString)] -> RequestTransformer

-- | Set the request body from the specified byte string.
setBody :: ByteString -> RequestTransformer

-- | Set the request body from the specified lazy byte string.
setBodyLazy :: ByteString -> RequestTransformer

-- | Set the request body from the value which can be converted to JSON.
setJson :: ToJSON a => a -> RequestTransformer
instance Show ProductErrorResponse
instance Generic ProductErrorResponse
instance Datatype D1ProductErrorResponse
instance Constructor C1_0ProductErrorResponse
instance Selector S1_0_0ProductErrorResponse
instance Selector S1_0_1ProductErrorResponse


-- | This module provides an Snap Framework Snaplet for the Atlassian
--   Connect framework. In order to use it in your snap application you
--   just need to run initConnectSnaplet in your initialiser like so:
--   
--   <pre>
--   appConnect &lt;- nestSnaplet "connect" connect (initConnectSnaplet myPluginDescriptor)
--   </pre>
--   
--   All you need to provide us with is a descriptor that you have
--   generated using the <a>atlassian-connect-descriptor library</a>.
--   
--   It is important to note that certain configuration values can be
--   overriden with Environment Variables because they may be specific to
--   the environment that you deployed the service to:
--   
--   <ul>
--   <li>Use CONNECT_BASE_URL to override the Base Url in the Addon
--   Descriptor.</li>
--   <li>Use CONNECT_SECRET_KEY to override the Page Token Secret Key.</li>
--   </ul>
--   
--   To test that it has worked you can start your application and find
--   your descriptor at: /connect/atlassian-connect.json
--   
--   We will also automatically create a connect.cfg file for you in the
--   snaplets/connect directory. If this does not happen then delete the
--   snaplets/connect directory and restart your application. Please have a
--   look inside the connect.cfg directory as there will be plugin specific
--   setting that you will have to override. It is likely that you will
--   want to override all of those configuration options.
module Snap.AtlassianConnect

-- | Initialise the Atlassian Connect part of this application. This gives
--   you an Atlassian Connect configuration that comes with:
--   
--   <ul>
--   <li>An Atlassian Connect configuration file.</li>
--   <li>The definition of what it means to be an Atlassian Connect
--   Tenant.</li>
--   <li>Default routes for your Atlassian Connect Descriptor. (With
--   automatic configuration injection of Plugin Keys / Names)</li>
--   <li>Page Token support</li>
--   <li>Host Whitelist Support</li>
--   </ul>
--   
--   In short, it is the easy way to get up and running with Atlassian
--   Connect in your Snap applications.
initConnectSnaplet :: Plugin -> SnapletInit b Connect

-- | The Atlassian Connect Snaplet Context
data Connect
Connect :: AES -> Timeout -> Plugin -> URI -> [HostName] -> Connect

-- | The AES key that will be used for Page Token support.
connectAES :: Connect -> AES

-- | The Page Token Timeout (how long the token is valid for).
connectPageTokenTimeout :: Connect -> Timeout

-- | The Atlassian Connect Descriptor for your Add-on.
connectPlugin :: Connect -> Plugin

-- | The URL that your Add-on will report as it's base URL. Especially
--   useful if you are behind a load balancer.
connectBaseUrl :: Connect -> URI

-- | The suffixes in the hostname that should be allowed to be installed as
--   Connect Add-ons.
connectHostWhitelist :: Connect -> [HostName]

-- | If a Snap application provides Atlassian Connect then it can impliment
--   HasConnect to allow connect methods to be called easily.
class HasConnect m
getConnect :: HasConnect m => m Connect

-- | Represents a URL hostname
type HostName = Text

-- | Represents an Atlassian User Key. This is guaranteed to be unique on
--   any given tenant.
type UserKey = Text

-- | Represents an Atlassian User Email. This has no uniqueness guarantees;
--   an email does not map to a unique user.
type UserEmail = ByteString

-- | The Key of an Atlassian JIRA issue. They are usually in the format
--   <a>ProjectKey</a>-<a>IssueNumber</a>. Please note that issues can be
--   moved between projects so this is not guaranteed to remain constant.
type IssueKey = Text

-- | The ID of an Atlassian JIRA issue. This id will never change and will
--   always refer to the same issue. It is an immutable reference to a JIRA
--   issue.
type IssueId = Integer

-- | The user visible key of an Atlassian JIRA Project. Project Keys are
--   not guaranteed to remain the same forever.
type ProjectKey = Text

-- | The project id of an Atlassian JIRA Project. The same project will
--   always have the same project id. The project id is immutable for a
--   given project.
type ProjectId = Integer

-- | Represents an Atlassian JIRA Issue summary.
type IssueSummary = Text

-- | Represents the user details of an Atlassian JIRA user.
data UserDetails
UserDetails :: UserKey -> UserEmail -> UserDetails
userKey :: UserDetails -> UserKey
userEmail :: UserDetails -> UserEmail

-- | Represents simple issue details that every Atlassian JIRA issue will
--   have.
data IssueDetails
IssueDetails :: IssueKey -> IssueId -> IssueSummary -> IssueDetails
issueKey :: IssueDetails -> IssueKey
issueId :: IssueDetails -> IssueId
issueSummary :: IssueDetails -> IssueSummary

-- | A convenience method to get a Lifecycle Response from the response
--   body.
getLifecycleResponse :: Handler b a (Maybe LifecycleResponse)

-- | When an Atlassian Connect plugin is installed or uninstalled this is
--   the lifecycle response that your add-on will be sent (in JSON). Use
--   this data structure to handle lifecycle event data from the host
--   application.
data LifecycleResponse
LifecycleResponseInstalled :: Text -> ClientKey -> Text -> Maybe Text -> Maybe Text -> Maybe Text -> ConnectURI -> Maybe Text -> Maybe Text -> Maybe Text -> LifecycleResponse
lrKey :: LifecycleResponse -> Text
lrClientKey :: LifecycleResponse -> ClientKey
lrPublicKey :: LifecycleResponse -> Text
lrSharedSecret :: LifecycleResponse -> Maybe Text
lrServerVersion :: LifecycleResponse -> Maybe Text
lrPluginsVersion :: LifecycleResponse -> Maybe Text
lrBaseUrl :: LifecycleResponse -> ConnectURI
lrProductType :: LifecycleResponse -> Maybe Text
lrDescription :: LifecycleResponse -> Maybe Text
lrEventType :: LifecycleResponse -> Maybe Text

-- | Represents the 'client key' from the Atlassian Connect framework in
--   the host product.
type ClientKey = Text

-- | Represents an Atlassian Cloud tenant. Your Atlassian Connect add-on
--   can be installed into multiple Atlassian Cloud tenants.
data Tenant
Tenant :: Integer -> TenantKey -> Text -> Text -> ConnectURI -> Text -> Tenant

-- | Your identifier for this tenant.
tenantId :: Tenant -> Integer

-- | The unique identifier for this tenant accross Atlassian Connect.
key :: Tenant -> TenantKey

-- | The public key for this atlassian connect application.
publicKey :: Tenant -> Text

-- | The shared secret for this atlassian connect application. Used for JWT
--   token generation.
sharedSecret :: Tenant -> Text

-- | The base url of the Atlassian Cloud host application (product).
baseUrl :: Tenant -> ConnectURI

-- | The type of product you have connected to in the Atlassian Cloud.
--   (E.g. JIRA, Confluence)
productType :: Tenant -> Text

-- | Represents a tenant key. The unique identifier for each Atlassian
--   Connect tenant.
type TenantKey = Text

-- | When we get a tenant from Atlassian Connect we can also optionally
--   reciever the user key that made the request. This structure reflects
--   that possibility.
type TenantWithUser = (Tenant, Maybe UserKey)

-- | Page Tokens are your way of providing a token to the client's browser
--   and have them make trusted requests back to the Atlassian Connect
--   application without having to go through the host product.
data PageToken
PageToken :: TenantKey -> Maybe UserKey -> UTCTime -> Bool -> PageToken

-- | The Atlassian Cloud tenant that this token was generated for.
pageTokenHost :: PageToken -> TenantKey

-- | The potential user that this token was generated for.
pageTokenUser :: PageToken -> Maybe UserKey

-- | The time at which this token was generated.
pageTokenTimestamp :: PageToken -> UTCTime

-- | (Deprecated) This is currently unsupported. Don't use it.
pageTokenAllowInsecurePolling :: PageToken -> Bool

-- | Given a tentant, a potential user and a time generate a page token.
generateToken :: TenantWithUser -> UTCTime -> PageToken

-- | Given a tenant and a potential user generate a token for the current
--   time.
generateTokenCurrentTime :: TenantWithUser -> IO PageToken

-- | Given an AES context encrypt a page token into a bytestring.
encryptPageToken :: AES -> PageToken -> ByteString

-- | Given an AES context decrypt a page token.
decryptPageToken :: AES -> ByteString -> Either String PageToken

-- | The default timeout for a Page Token. It is likely that you will want
--   to make this longer.
defaultTimeoutSeconds :: ConnectSecond

-- | In old versions of Atlassian Connect, if you queried the application
--   root and your Accept headers wanted an "application/json" response
--   then they would return your Atlassian Connect descriptor and if the
--   Accept headers requested "text/html" then they returned your
--   applications home page. This is a convenience method to enable that
--   behaviour to continue. If you use this method in your routes then you
--   can make your home page behave in the same way. This is not required
--   for an Atlassian Connect application so feel free to just return home
--   page content on your home page and ignore this method.
homeHandler :: Handler b Connect () -> Handler b Connect ()

-- | An Atlassian Connect URI
newtype ConnectURI
CURI :: URI -> ConnectURI

-- | Get a regular URI from an Atlassian Connect URI
getURI :: ConnectURI -> URI

-- | Represents a second for Atlassian Connect
newtype ConnectSecond
CSecond :: Second -> ConnectSecond

-- | Gets the Data.Time.Units representation of this Atlassian Connect
--   second.
getSecond :: ConnectSecond -> Second
