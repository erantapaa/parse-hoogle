-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generic diff and patch
--   
@package gdiff
@version 1.1


-- | Use this library to get an efficient, optimal, type-safe <a>diff</a>
--   and <a>patch</a> function for your datatypes of choice by defining a
--   simple GADT and some class instances. The process is explained in the
--   documentation of the <a>Family</a> type class.
--   
--   The result of <a>diff</a> is an optimal <a>EditScript</a> that
--   contains the operations that need to be performed to get from the
--   <i>source</i> value to the <i>destination</i> value. The edit script
--   can be used by <a>patch</a>, inspected with <a>show</a> and used for
--   all kinds of interesting stuff <i>you</i> come up with.
--   
--   The library has been extracted from Eelco Lempsink's Master's Thesis
--   <i>Generic type-safe diff and patch for families of datatypes</i>
--   (available online: <a>http://eelco.lempsink.nl/thesis.pdf</a>). See
--   Appendix C for a large example. Note that some types and functions
--   have been renamed for the benefit of the API (e.g., <tt>diff</tt> to
--   <tt>diffL</tt>, <tt>diff1</tt> to <tt>diff</tt>, <tt>Diff</tt> to
--   <tt>EditScriptL</tt>).
module Data.Generic.Diff

-- | Calculate the difference between two values in the form of an edit
--   script.
--   
--   See the documentation for <a>Family</a> for how to make your own data
--   types work with this function.
diff :: (Type f x, Type f y) => x -> y -> EditScript f x y

-- | Apply the edit script to a value.
patch :: EditScript f x y -> x -> y

-- | Underlying implementation of <a>diff</a>, works with (heterogeneous)
--   lists of values.
diffL :: (Family f, List f txs, List f tys) => txs -> tys -> EditScriptL f txs tys

-- | Underlying implementation of <a>patch</a>, works with (heterogeneous)
--   lists of values.
patchL :: EditScriptL f txs tys -> txs -> tys
compress :: Family f => EditScriptL f txs tys -> EditScriptL f txs tys

-- | The <a>EditScriptL</a> datatype captures the result of <a>diffL</a>
--   and can be used as the input to <a>patchL</a> (and <a>compress</a>).
--   
--   The <a>diffL</a> function use a depth-first preorder traversal to
--   traverse the expression trees. The edit script it outputs contains the
--   operation that must be applied to the constructor at that point:
--   either keeping it (<a>Cpy</a>), removing it (<a>Del</a>, which does
--   not remove the complete subtree, but <i>contracts</i> the edge of the
--   removed node) or inserting a new constructor (<a>Ins</a>, which can
--   only be done if the available subtrees at that point correspond to the
--   types the constructor expects). (The <a>CpyTree</a> is only used when
--   running <a>compress</a> over an existing edit script.)
--   
--   For more information about this datatype, you're advised to look at
--   Eelco Lempsink's thesis at <a>http://eelco.lempsink.nl/thesis.pdf</a>.
data EditScriptL :: (* -> * -> *) -> * -> * -> *
Ins :: f t ts -> EditScriptL f txs (Append ts tys) -> EditScriptL f txs (Cons t tys)
Del :: f t ts -> EditScriptL f (Append ts txs) tys -> EditScriptL f (Cons t txs) tys
Cpy :: f t ts -> EditScriptL f (Append ts txs) (Append ts tys) -> EditScriptL f (Cons t txs) (Cons t tys)
CpyTree :: EditScriptL f txs tys -> EditScriptL f (Cons t txs) (Cons t tys)
End :: EditScriptL f Nil Nil

-- | Edit script type for two single values.
type EditScript f x y = EditScriptL f (Cons x Nil) (Cons y Nil)

-- | To use <a>diff</a> and <a>patch</a> on your datatypes, you must create
--   an instance of <a>Family</a>.
--   
--   There are four steps to set up everything for <a>diff</a> and
--   <a>patch</a>.
--   
--   <ol>
--   <li>Define your datatypes. (Presumably, you already have done
--   this.)</li>
--   <li>Create a family datatype, grouping your datatypes together.</li>
--   <li>Make the family datatype an instance of <a>Family</a></li>
--   <li>Create <a>Type</a> instances for each member of the family.</li>
--   </ol>
--   
--   Steps 1-3 are explained below, step 4 is explained in the
--   documentation for <a>Type</a>.
--   
--   As a running example, we create a simple family of datatypes (step 1):
--   
--   <pre>
--   data Expr  =  Min Expr Term
--   data Term  =  Parens Expr
--              |  Number Int
--   </pre>
--   
--   The second step is creating the family datatype. Each constructor in
--   the datatypes above gets a constructor in a family GADT:
--   
--   <pre>
--   data ExprTermFamily :: * -&gt; * -&gt; * where
--       Min'     ::          ExprTermFamily Expr (Cons Expr (Cons Term Nil))
--       Parens'  ::          ExprTermFamily Term (Cons Expr Nil)
--       Number'  ::          ExprTermFamily Term (Cons Int Nil)
--       Int'     ::  Int -&gt;  ExprTermFamily Int  Nil
--   </pre>
--   
--   The first type argument of the datatype must be the resulting type of
--   the constructor. The second argument captures the types of the
--   arguments the constructor expects. Note how to use <a>Cons</a> and
--   <a>Nil</a> to create type level lists.
--   
--   The <tt>Int'</tt> constructor is special, in the sense that it
--   captures the <a>Int</a> type abstractly (listing all <tt>Int'</tt>s
--   constructors would be quite impossible).
--   
--   <i>Caveat emptor</i>: polymorphic datatypes (like lists) are
--   ill-supported and require family constructors for each instance. It
--   might require another master thesis project to solve this.
--   
--   Step 3 is to create the instance for the <a>Family</a> class. For each
--   function you will have to implement four functions. It's
--   straightforward albeit a bit boring.
--   
--   <pre>
--   instance Family ExprTermFamily where
--       decEq Min'      Min'      =              Just (Refl, Refl)
--       decEq Parens'   Parens'   =              Just (Refl, Refl)
--       decEq Number'   Number'   =              Just (Refl, Refl)
--       decEq (Int' x)  (Int' y)  | x == y     = Just (Refl, Refl)
--                                 | otherwise  = Nothing
--       decEq _        _          = Nothing
--   
--       fields Min'      (Min e t)   = Just (CCons e (CCons t CNil))
--       fields Parens'   (Parens e)  = Just (CCons e CNil)
--       fields Number'   (Number i)  = Just (CCons i CNil)
--       fields (Int' _)  _           = Just CNil
--       fields _         _           = Nothing
--   
--       apply Min'      (CCons e (CCons t CNil))  = Min e t
--       apply Parens'   (CCons e CNil)            = Parens e
--       apply Number'   (CCons i CNil)            = Number i
--       apply (Int' i)  CNil                      = i
--   
--       string Min'      = "Min"
--       string Parens'   = "Parens"
--       string Number'   = "Number"
--       string (Int' i)  = show i
--   </pre>
class Family f
decEq :: Family f => f tx txs -> f ty tys -> Maybe (tx :~: ty, txs :~: tys)
fields :: Family f => f t ts -> t -> Maybe ts
apply :: Family f => f t ts -> ts -> t
string :: Family f => f t ts -> String

-- | For each type in the family, you need to create an instance of
--   <a>Type</a>, listing all the members of the family GADT which belong
--   to one type.
--   
--   This is step 4 of the four steps needed to be able to use <a>diff</a>
--   and <a>patch</a>. Steps 1-3 are explained in the documentation for
--   <a>Family</a>.
--   
--   Continuing the example from the <a>Family</a> documentation, the
--   instances for <a>Type</a> are:
--   
--   <pre>
--   instance Type ExprTermFamily Term where
--       constructors = [Concr Number', Concr Parens']
--   
--   instance Type ExprTermFamily Expr where
--       constructors = [Concr Min']
--   
--   instance Type ExprTermFamily Int where
--       constructors = [Abstr Int']
--   </pre>
class Family f => Type f t
constructors :: Type f t => [Con f t]

-- | Propositional equality. If <tt>a :~: b</tt> is inhabited by some
--   terminating value, then the type <tt>a</tt> is the same as the type
--   <tt>b</tt>. To use this equality in practice, pattern-match on the
--   <tt>a :~: b</tt> to get out the <tt>Refl</tt> constructor; in the body
--   of the pattern-match, the compiler knows that <tt>a ~ b</tt>.
--   
--   <i>Since: 4.7.0.0</i>
data (:~:) (a :: k) (b :: k) :: k -> k -> *
Refl :: (:~:) k a1 a1

-- | <a>Con</a> wraps both concrete and abstract constructors to a simple
--   type so constructors for a single type can be put together in a list,
--   see <a>Type</a> for more information and an example.
--   
--   Use <a>Concr</a> for concrete constructors (e.g., for simple algebraic
--   datatypes).
--   
--   Use <a>Abstr</a> for abstract constructors (e.g., for built-in types
--   or types with many (or infinite) constructors)
data Con :: (* -> * -> *) -> * -> *
Concr :: f t ts -> Con f t
Abstr :: (t -> f t ts) -> Con f t

-- | Datatype for type level lists, corresponding to '[]'. Use when
--   creating your <a>Family</a> instance.
data Nil
CNil :: Nil

-- | Datatype for type level lists, corresponding to '(:)'. Use when
--   creating your <a>Family</a> instance.
data Cons x xs
CCons :: x -> xs -> Cons x xs
instance [overlap ok] Eq Nat
instance [overlap ok] Show Nat
instance [overlap ok] Show (EditScriptL f txs tys)
instance [overlap ok] (Type f t, List f ts) => List f (Cons t ts)
instance [overlap ok] List f Nil
