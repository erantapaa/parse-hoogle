-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Variants of Prelude and System.IO with UTF8 text I/O operations
--   
--   If you want your Haskell code to have UTF8 text I<i>O then use
--   libraries which have UTF8 text I</i>O. In case of Prelude with this
--   package only three mechanical steps needed:
--   
--   <ul>
--   <li>In all modules import Prelude explicitly and replace every
--   occurrence of <a>Prelude</a> with <a>UTF8Prelude</a>.</li>
--   <li>Use the NoImplicitPrelude language extension.</li>
--   <li>In all modules replace every occurrence of <a>System.IO</a> with
--   <a>System.UTF8IO</a>.</li>
--   </ul>
--   
--   utf8-test tests several functions regarding UTF8 text I/O. Note:
--   utf8-test creates a file named writeFile_test.txt (5,3K) in the
--   current working directory.
--   
--   utf8-prelude is based on utf8-string:
--   <a>http://hackage.haskell.org/cgi-bin/hackage-scripts/package/utf8-string/index.html</a>
--   
--   This package will be obsolete *after* GHC 6.10:
--   <a>http://hackage.haskell.org/trac/ghc/wiki/Status/Releases</a>
@package utf8-prelude
@version 0.1.6


-- | <a>System.UTF8IO</a> defines the same entities as <a>System.IO</a> but
--   with UTF8 text I/O operations.
--   
--   <a>System.UTF8IO</a> re-exports <a>System.IO.UTF8</a> (utf8-string
--   package) and <a>System.IO</a> but hides the duplicate definitions (in
--   favor of <a>System.IO.UTF8</a>).
module System.UTF8IO

-- | Write a character to the standard output device (same as
--   <a>hPutChar</a> <a>stdout</a>).
--   
--   Note: The implementation of <a>putChar</a> is not as efficient as it
--   could be.
putChar :: Char -> IO ()

-- | Read a character from the standard input device (same as
--   <a>hGetChar</a> <a>stdin</a>).
--   
--   Note: The implementation of <a>getChar</a> is not as efficient as it
--   could be.
getChar :: IO Char

-- | Computation <a>hPutChar</a> <tt>hdl ch</tt> writes the character
--   <tt>ch</tt> to the file or channel managed by <tt>hdl</tt>. Characters
--   may be buffered if buffering is enabled for <tt>hdl</tt>.
--   
--   Note: The implementation of <a>hPutChar</a> is not as efficient as it
--   could be.
hPutChar :: Handle -> Char -> IO ()

-- | Computation <a>hGetChar</a> <tt>hdl</tt> reads a character from the
--   file or channel managed by <tt>hdl</tt>, blocking until a character is
--   available.
--   
--   Note: The implementation of <a>hGetChar</a> is not as efficient as it
--   could be.
hGetChar :: Handle -> IO Char

-- | Computation <a>hLookAhead</a> <tt>hdl</tt> returns the next character
--   from the handle without removing it from the input buffer, blocking
--   until a character is available.
--   
--   Note: <a>hLookAhead</a> is not implemented; it halts with a run-time
--   error.
hLookAhead :: Handle -> IO Char

-- | Computation <a>hPrint</a> <tt>hdl t</tt> writes the UTF8 string
--   representation of <tt>t</tt> to the file or channel managed by
--   <tt>hdl</tt> and appends a newline (same as <a>hPutStrLn</a> <tt>hdl
--   .</tt> <a>show</a> <tt>t</tt>).
--   
--   Note: <a>hPrint</a> has the same behaviour as
--   <tt>System.IO.hPrint</tt> because <a>show</a> always produces an ASCII
--   string.
hPrint :: Show a => Handle -> a -> IO ()


-- | <a>UTF8Prelude</a> defines the same entities as <a>Prelude</a> but
--   with UTF8 text I/O operations.
--   
--   Usage:
--   
--   <pre>
--   {-# LANGUAGE NoImplicitPrelude #-}
--   
--   import UTF8Prelude
--   </pre>
--   
--   or
--   
--   <pre>
--   import Prelude()
--   import UTF8Prelude
--   </pre>
--   
--   or
--   
--   <pre>
--   import qualified Prelude
--   import UTF8Prelude
--   </pre>
--   
--   <a>UTF8Prelude</a> re-exports <a>System.UTF8IO</a> but hides the
--   definitions not defined in <a>Prelude</a>.
module UTF8Prelude

-- | UTF8 encoded error messages.
error :: String -> a
