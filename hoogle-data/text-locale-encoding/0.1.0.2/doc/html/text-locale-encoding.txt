-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Encode and decode Text to/from ByteString using TextEncoding
--   
--   Encode and decode Text to/from ByteString using TextEncoding
@package text-locale-encoding
@version 0.1.0.2


-- | This module provides functions to encode and decode <a>Text</a>
--   to/from <a>ByteString</a> using <a>TextEncoding</a>
--   
--   For performance, Text's native encoding functions are used if the
--   conditions are right (LF NewlineMode and UTF encoding).
module Data.Text.Encoding.Locale

-- | Decode <a>ByteString</a> to <a>Text</a> using current locale
decodeLocale :: ByteString -> IO Text

-- | Encode <a>Text</a> to <a>ByteString</a> using current locale
encodeLocale :: Text -> IO ByteString

-- | Decode <a>ByteString</a> to <a>Text</a> using supplied
--   <a>TextEncoding</a> and <a>NewlineMode</a>
decodeLocale' :: TextEncoding -> NewlineMode -> ByteString -> IO Text

-- | Encode <a>Text</a> to <a>ByteString</a> using supplied
--   <a>TextEncoding</a> and <a>NewlineMode</a>
encodeLocale' :: TextEncoding -> NewlineMode -> Text -> IO ByteString

-- | Decode <a>ByteString</a> to <a>Text</a> using <a>Handle</a>s
--   <a>TextEncoding</a> and <a>NewlineMode</a>
decodeFromHandle :: Handle -> ByteString -> IO Text

-- | Encode <a>Text</a> to <a>ByteString</a> using <a>Handle</a>s
--   <a>TextEncoding</a> and <a>NewlineMode</a>
encodeFromHandle :: Handle -> Text -> IO ByteString


-- | This module offers much faster locale-aware I/O than
--   <a>Data.Text.IO</a> due to the usage of <a>hPutBuf</a> to write the
--   resulting <a>ByteString</a> all at once, while <a>Data.Text.IO</a>
--   writes characters one at a time, taking the <a>Handle</a> lock each
--   time. Since functions in this module take the lock just once, they can
--   safely be used from multiple threads without fear of messed up output.
--   
--   Functions in this module require at least twice as much memory as the
--   <a>Text</a> they operate on to output it. For strings more than a half
--   of available RAM in size, this may result in memory exhaustion.
--   
--   This module is intended to be imported <tt>qualified</tt>.
module Data.Text.IO.Locale

-- | Like <a>putStr</a>, but writes the <tt>Text</tt> all at once.
putStr :: Text -> IO ()

-- | Like <a>putStrLn</a>, but writes the <tt>Text</tt> all at once.
putStrLn :: Text -> IO ()

-- | Like <a>hPutStr</a>, but writes the <tt>Text</tt> all at once.
hPutStr :: Handle -> Text -> IO ()

-- | Like <a>hPutStrLn</a>, but writes the <tt>Text</tt> all at once.
hPutStrLn :: Handle -> Text -> IO ()

-- | Like <a>writeFile</a>, but writes the <tt>Text</tt> all at once.
writeFile :: FilePath -> Text -> IO ()

-- | Like <a>appendFile</a>, but writes the <tt>Text</tt> all at once.
appendFile :: FilePath -> Text -> IO ()


-- | This module provides functions to encode and decode <a>Text</a>
--   to/from <a>ByteString</a> using <a>TextEncoding</a>
--   
--   For performance, Text's native encoding functions are used if the
--   conditions are right (LF NewlineMode and UTF encoding).
module Data.Text.Lazy.Encoding.Locale

-- | Decode <a>ByteString</a> to <a>Text</a> using current locale
decodeLocale :: ByteString -> IO Text

-- | Encode <a>Text</a> to <a>ByteString</a> using current locale
encodeLocale :: Text -> IO ByteString

-- | Decode <a>ByteString</a> to <a>Text</a> using supplied
--   <a>TextEncoding</a> and <a>NewlineMode</a>
decodeLocale' :: TextEncoding -> NewlineMode -> ByteString -> IO Text

-- | Encode <a>Text</a> to <a>ByteString</a> using supplied
--   <a>TextEncoding</a> and <a>NewlineMode</a>
encodeLocale' :: TextEncoding -> NewlineMode -> Text -> IO ByteString

-- | Decode <a>ByteString</a> to <a>Text</a> using <a>Handle</a>s
--   <a>TextEncoding</a> and <a>NewlineMode</a>
decodeFromHandle :: Handle -> ByteString -> IO Text

-- | Encode <a>Text</a> to <a>ByteString</a> using <a>Handle</a>s
--   <a>TextEncoding</a> and <a>NewlineMode</a>
encodeFromHandle :: Handle -> Text -> IO ByteString
