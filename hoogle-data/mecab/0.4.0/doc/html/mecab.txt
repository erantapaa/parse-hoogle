-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Haskell binding to MeCab
--   
--   A Haskell binding to MeCab <a>http://mecab.sourceforge.net/</a>
@package mecab
@version 0.4.0

module Text.MeCab
data MeCab
data MeCabError
MeCabError :: String -> MeCabError
data Node s
Node :: s -> s -> Int -> Int -> Int -> Int -> Int -> Int -> Stat -> Bool -> Double -> Double -> Double -> Int -> Int -> Node s

-- | Surface string
nodeSurface :: Node s -> s

-- | Feature string
nodeFeature :: Node s -> s

-- | Uength of the surface form including white space before the morph
nodeRlength :: Node s -> Int

-- | Unique node id
nodeId :: Node s -> Int

-- | Right attribute id
nodeRcAttr :: Node s -> Int

-- | Left attribute id
nodeLcAttr :: Node s -> Int

-- | Unique part of speech id
nodePosid :: Node s -> Int

-- | Character type
nodeCharType :: Node s -> Int

-- | Status of this model
nodeStat :: Node s -> Stat

-- | Is this node best?
nodeIsBest :: Node s -> Bool

-- | Forward accumulative log summation
nodeAlpha :: Node s -> Double

-- | backward accumulative log summation
nodeBeta :: Node s -> Double

-- | marginal probability
nodeProb :: Node s -> Double

-- | Word cost
nodeWcost :: Node s -> Int

-- | Best accumulative cost from bos node to this node
nodeCost :: Node s -> Int
data Stat

-- | Normal node defined in the dictionary
NOR :: Stat

-- | Unknown node not defined in the dictionary
UNK :: Stat

-- | Virtual node representing a beginning of the sentence
BOS :: Stat

-- | Virtual node representing a end of the N-best enumeration
EOS :: Stat

-- | Virtual node representing a end of the N-best enumeration
EON :: Stat
class MeCabString s
toBS :: MeCabString s => s -> ByteString
fromBS :: MeCabString s => ByteString -> s

-- | Initializing MeCab by passing command-line args
new :: [String] -> IO MeCab

-- | Initializing MeCab by passing concatenated command-line args
new2 :: String -> IO MeCab

-- | Parse given string and obtain results as a string format
parse :: MeCabString s => MeCab -> s -> IO s

-- | Parse given string and obtain results as a nodes
parseToNodes :: MeCabString s => MeCab -> s -> IO [Node s]

-- | Parse given string and obtain whole N-best results as a string format
parseNBest :: MeCabString s => MeCab -> Int -> s -> IO s

-- | Parse given string and prepare obtaining N-best results
parseNBestInit :: MeCabString s => MeCab -> s -> IO ()

-- | Obtain next result as a string format
nBestNext :: MeCabString s => MeCab -> IO (Maybe s)

-- | Obtain next result as a nodes
nBestNextNodes :: MeCabString s => MeCab -> IO (Maybe [Node s])
getPartial :: MeCab -> IO Bool
setPartial :: MeCab -> Bool -> IO ()
getTheta :: MeCab -> IO Double
setTheta :: MeCab -> Double -> IO ()
getLatticeLevel :: MeCab -> IO Int
setLatticeLevel :: MeCab -> Int -> IO ()
getAllMorphs :: MeCab -> IO Int
setAllMorphs :: MeCab -> Int -> IO ()

-- | Get MeCab version
version :: IO String
instance Typeable MeCabError
instance Eq MeCab
instance Ord MeCab
instance Eq Stat
instance Read Stat
instance Show Stat
instance Eq s => Eq (Node s)
instance Read s => Read (Node s)
instance Show s => Show (Node s)
instance Eq MeCabError
instance Ord MeCabError
instance Show MeCabError
instance MeCabString Text
instance MeCabString ByteString
instance MeCabString String
instance Exception MeCabError
