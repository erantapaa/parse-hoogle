-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Reversibly allow monad transformer stacks to run in IO
--   
--   Provides MonadIOUnwrappable instances for monad transformer stacks
--   that can be run in the IO monad, with the result converted back to the
--   monadic type. This package also includes some utilities built using
--   MonadIOUnwrappable, such as a bracket implementation that works with
--   MonadIO even on stacks containing one or more ErrorT transformers
@package monadio-unwrappable
@version 0.3


-- | Contains a class and instance for MonadIO implementations that can be
--   run directly in MonadIO and | then reconstructed to the original type,
--   without changing the overall semantics.
module Control.Monad.IO.Unwrappable

-- | Represents a MonadIO where any change further up the monad stack can
--   be | represented lower down in the stack.
class MonadIO m => MonadIOUnwrappable m where type family MonadIOWrapType m :: * -> * type family MonadIOStateType m :: *
unwrapState :: MonadIOUnwrappable m => m (MonadIOStateType m)
unwrapMonadIO :: MonadIOUnwrappable m => MonadIOStateType m -> m a -> IO (MonadIOWrapType m a)
rewrapMonadIO :: MonadIOUnwrappable m => MonadIOStateType m -> MonadIOWrapType m a -> m a
instance (MonadIO m, MonadIOUnwrappable m) => MonadIOUnwrappable (StateT r m)
instance (MonadIO m, MonadIOUnwrappable m) => MonadIOUnwrappable (ReaderT r m)
instance (Error e, MonadIO m, MonadIOUnwrappable m) => MonadIOUnwrappable (ErrorT e m)
instance MonadIOUnwrappable IO

module Control.Monad.IO.MonadIOException

-- | Guarantees that an IO operation will be performed before an after
--   executing | a MonadIOUnwrappable monad. The operation will be
--   performed even if the | MonadIO contains error monads that fails, or
--   if an exception is raised.
bracketIO :: MonadIOUnwrappable m => IO a -> (a -> IO b) -> (a -> m c) -> m c
