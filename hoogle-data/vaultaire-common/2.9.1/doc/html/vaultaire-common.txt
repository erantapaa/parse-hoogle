-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Common types and instances for Vaultaire
--   
@package vaultaire-common
@version 2.9.1

module Vaultaire.Util
linkThread :: MonadIO m => IO a -> m ()
waitForever :: MonadIO m => m ()
fatal :: String -> String -> a


-- | <i>Overview</i>
--   
--   When communicating with a Vaultaire installation, you need to
--   serialize requests and deserialize responses. The bytes used over the
--   wire are all formed by making the various types involved instances of
--   class <a>WireFormat</a>.
--   
--   As it happens, these types are also the same ones used in the
--   internals of Vaultaire as it persists measurements and metadata to
--   disk.
module Vaultaire.Types
newtype Address
Address :: Word64 -> Address
unAddress :: Address -> Word64
calculateBucketNumber :: Word64 -> Address -> Word64
isAddressExtended :: Address -> Bool

-- | Number of nanoseconds since the Unix epoch, stored in a Word64.
--   
--   The Show instance displays the TimeStamp as seconds with the
--   nanosecond precision expressed as a decimal amount after the interger,
--   ie:
--   
--   <pre>
--   &gt;&gt;&gt; t &lt;- getCurrentTimeNanoseconds
--   
--   &gt;&gt;&gt; show t
--   2014-07-31T23:09:35.274387000Z
--   </pre>
--   
--   However this doesn't change the fact the underlying representation
--   counts nanoseconds since epoch:
--   
--   <pre>
--   &gt;&gt;&gt; show $ unTimeStamp t
--   1406848175274387000
--   </pre>
--   
--   There is a Read instance that is reasonably accommodating.
--   
--   <pre>
--   &gt;&gt;&gt; read "2014-07-31T13:05:04.942089001Z" ::TimeStamp
--   2014-07-31T13:05:04.942089001Z
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; read "1406811904.942089001" :: TimeStamp
--   2014-07-31T13:05:04.942089001Z
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; read "1406811904" :: TimeStamp
--   2014-07-31T13:05:04.000000000Z
--   </pre>
newtype TimeStamp
TimeStamp :: Word64 -> TimeStamp
unTimeStamp :: TimeStamp -> Word64

-- | Utility function to convert nanoseconds since Unix epoch to a
--   <a>NominalDiffTime</a>, allowing you to then use the time manipulation
--   functions in <a>Data.Time.Clock</a>
convertToDiffTime :: TimeStamp -> NominalDiffTime
convertToTimeStamp :: UTCTime -> TimeStamp

-- | Get the current system time, expressed as a <a>TimeStamp</a> (which is
--   to say, number of nanoseconds since the Unix epoch).
getCurrentTimeNanoseconds :: IO TimeStamp

-- | Origin is a ByteString representing a data origin. It must be between
--   one and eight bytes.
newtype Origin
Origin :: ByteString -> Origin
unOrigin :: Origin -> ByteString
makeOrigin :: ByteString -> Either SomeException Origin
data SourceDict

-- | Wrapped HashMap.union for SourceDicts
unionSource :: SourceDict -> SourceDict -> SourceDict

-- | Wrapped HashMap.difference for SourceDicts
diffSource :: SourceDict -> SourceDict -> SourceDict

-- | Wrapped HashMap.lookup for SourceDicts
lookupSource :: Text -> SourceDict -> Maybe Text
makeSourceDict :: HashMap Text Text -> Either String SourceDict

-- | Hashes the sourcedict using SipHash Hashes are used primarily to avoid
--   redundant updates
hashSource :: SourceDict -> Word64
data SourceDictCache
emptySourceCache :: SourceDictCache
insertSourceCache :: Word64 -> SourceDictCache -> SourceDictCache
memberSourceCache :: Word64 -> SourceDictCache -> Bool
sizeOfSourceCache :: SourceDictCache -> Int
data ContentsOperation
ContentsListRequest :: ContentsOperation
GenerateNewAddress :: ContentsOperation
UpdateSourceTag :: Address -> SourceDict -> ContentsOperation
RemoveSourceTag :: Address -> SourceDict -> ContentsOperation
data ContentsResponse
RandomAddress :: Address -> ContentsResponse
InvalidContentsOrigin :: ContentsResponse
ContentsListEntry :: Address -> SourceDict -> ContentsResponse
EndOfContentsList :: ContentsResponse
UpdateSuccess :: ContentsResponse
RemoveSuccess :: ContentsResponse
data ContentsListBypass
ContentsListBypass :: Address -> ByteString -> ContentsListBypass
data ReadRequest
SimpleReadRequest :: Address -> TimeStamp -> TimeStamp -> ReadRequest
ExtendedReadRequest :: Address -> TimeStamp -> TimeStamp -> ReadRequest
data ReadStream
InvalidReadOrigin :: ReadStream
SimpleStream :: SimpleBurst -> ReadStream
unSimpleStream :: ReadStream -> SimpleBurst
ExtendedStream :: ExtendedBurst -> ReadStream
unExtendedStream :: ReadStream -> ExtendedBurst
EndOfStream :: ReadStream
newtype SimpleBurst
SimpleBurst :: ByteString -> SimpleBurst
unSimpleBurst :: SimpleBurst -> ByteString
newtype ExtendedBurst
ExtendedBurst :: ByteString -> ExtendedBurst
unExtendedBurst :: ExtendedBurst -> ByteString

-- | SimplePoints are simply wrapped packets for Vaultaire Each consists of
--   24 bytes: An 8 byte Address An 8 byte Timestamp (nanoseconds since
--   Unix epoch) An 8 byte Payload
data SimplePoint
SimplePoint :: {-# UNPACK #-} !Address -> {-# UNPACK #-} !TimeStamp -> {-# UNPACK #-} !Word64 -> SimplePoint
simpleAddress :: SimplePoint -> {-# UNPACK #-} !Address
simpleTime :: SimplePoint -> {-# UNPACK #-} !TimeStamp
simplePayload :: SimplePoint -> {-# UNPACK #-} !Word64

-- | ExtendedPoints are simply wrapped packets for Vaultaire Each consists
--   of 16 + <a>length</a> bytes: An 8 byte Address An 8 byte Time (in
--   nanoseconds since Unix epoch) A <a>length</a> byte Payload On the wire
--   their equivalent representation takes up 24 + <a>length</a> bytes with
--   format: 8 byte Address, 8 byte Time, 8 byte Length, Payload
data ExtendedPoint
ExtendedPoint :: Address -> TimeStamp -> ByteString -> ExtendedPoint
extendedAddress :: ExtendedPoint -> Address
extendedTime :: ExtendedPoint -> TimeStamp
extendedPayload :: ExtendedPoint -> ByteString
data WriteResult
InvalidWriteOrigin :: WriteResult
OnDisk :: WriteResult
newtype PassThrough
PassThrough :: ByteString -> PassThrough
unPassThrough :: PassThrough -> ByteString

-- | This typeclass encapsulates all wire encoding/decoding, with the
--   possibility of a decode failing.
class WireFormat operation
fromWire :: WireFormat operation => ByteString -> Either SomeException operation
toWire :: WireFormat operation => operation -> ByteString
newtype DayMap
DayMap :: Map Epoch NumBuckets -> DayMap
unDayMap :: DayMap -> Map Epoch NumBuckets

-- | Response for a telemetry request, sent by the profiler to clients.
data TeleResp
TeleResp :: TimeStamp -> AgentID -> TeleMsg -> TeleResp
_timestamp :: TeleResp -> TimeStamp
_aid :: TeleResp -> AgentID
_msg :: TeleResp -> TeleMsg

-- | The actual telemetric data, reported by Vaultaire worker threads to
--   their profiler.
data TeleMsg
TeleMsg :: Origin -> TeleMsgType -> Word64 -> TeleMsg
_origin :: TeleMsg -> Origin
_type :: TeleMsg -> TeleMsgType
_payload :: TeleMsg -> Word64

-- | Telemetry types. All counts are absolute and all latencies are in
--   milliseconds.
data TeleMsgType

-- | Total number of simple points written since last message
WriterSimplePoints :: TeleMsgType

-- | Total number of extended points written since last message
WriterExtendedPoints :: TeleMsgType

-- | Total number of write requests received since last message
WriterRequest :: TeleMsgType

-- | Mean latency for one request
WriterRequestLatency :: TeleMsgType

-- | Mean Ceph latency for one request
WriterCephLatency :: TeleMsgType

-- | Total number of simple points read since last message
ReaderSimplePoints :: TeleMsgType

-- | Total number of extended points read since last message
ReaderExtendedPoints :: TeleMsgType

-- | Total number of read requests received since last message
ReaderRequest :: TeleMsgType

-- | Mean latency for one request
ReaderRequestLatency :: TeleMsgType

-- | Mean Ceph latency for one request
ReaderCephLatency :: TeleMsgType

-- | Total number of enumerate requests received since last message
ContentsEnumerate :: TeleMsgType

-- | Total number of update requests received since last message
ContentsUpdate :: TeleMsgType

-- | Mean latency for one enumerate request
ContentsEnumerateLatency :: TeleMsgType

-- | Mean latency for one update request
ContentsUpdateLatency :: TeleMsgType

-- | Mean Ceph latency for one enumerate request
ContentsEnumerateCeph :: TeleMsgType

-- | Mean Ceph latency for one update request
ContentsUpdateCeph :: TeleMsgType
data TeleMsgUOM
Points :: TeleMsgUOM
Requests :: TeleMsgUOM
Milliseconds :: TeleMsgUOM

-- | Map a telemetry message type onto its associated UOM.
msgTypeUOM :: TeleMsgType -> TeleMsgUOM

-- | ID string associated with a running daemon, so telemetry messages can
--   be associated with the processes which sent them.
data AgentID

-- | Agent IDs are a maximum of 64 bytes.
agentIDLength :: Int

-- | An agent ID has to fit in 64 characters and does not contain NUL.
agentID :: String -> Maybe AgentID
type Epoch = Word64
type NumBuckets = Word64


-- | Common program initalization for Vaultaire binaries
module Vaultaire.Program

-- | Initialize a program. Call this from your <tt>main</tt> program entry
--   point before doing anything else. Indicate the logging verbosity you
--   want, along with an identification of your program. Returns an MVar
--   which will be set to unit if one of the installed signal handlers
--   catches a signal and requests a shutdown as a result.
initializeProgram :: String -> Verbosity -> IO (MVar ())
data Verbosity
Debug :: Verbosity
Normal :: Verbosity
Quiet :: Verbosity
instance Show Verbosity
