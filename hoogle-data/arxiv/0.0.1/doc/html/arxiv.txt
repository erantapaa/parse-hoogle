-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A client for the Arxiv API
--   
--   The arXiv is a repository of electronic preprints, known as e-prints,
--   of scientific papers in the fields of mathematics, physics, astronomy,
--   computer science, quantitative biology, statistics, and quantitative
--   finance, which can be accessed online. In many fields of mathematics
--   and physics, almost all scientific papers are self-archived on the
--   arXiv.
--   
--   The arXiv features an API to ease access to e-prints. This library
--   provides a simple and easy-to-use Haskell binding for the arXiv API.
--   
--   For the full documentation of the arXiv API, please refer to
--   <a>http://arxiv.org/help/api/index</a>.
--   
--   More information on this haskell library, examples and a test suite
--   are available on <a>https://github.com/toschoo/Haskell-Libs</a>.
@package arxiv
@version 0.0.1


-- | The ArXiv API is split in two parts: Request and Response. The Request
--   part contains a simple language to define queries, a query parser and
--   some helpers to navigate through the results of a mutlipage query
--   (which, in fact, induces a new query).
--   
--   The Response part contains an API to access the fields of the result
--   based on TagSoup.
--   
--   This library does not contain functions to actually execute and manage
--   http requests. It is intended to be used with existing http libraries
--   such as http-conduit. An example how to use the ArXiv library with
--   http-conduit is included in this documentation.
module Network.Api.Arxiv

-- | The Arxiv base URL "arxiv.org"
baseUrl :: String

-- | The Arxiv API URL "export.arxiv.org/api"
apiUrl :: String

-- | The query string ("search_query=" or "id_list=")
apiQuery :: String

-- | Field data type; a field consist of a field identifier (author, title,
--   etc.) and a list of search terms.
data Field

-- | Title
Ti :: [Term] -> Field

-- | Author
Au :: [Term] -> Field

-- | Abstract
Abs :: [Term] -> Field

-- | Comment
Co :: [Term] -> Field

-- | Journal
Jr :: [Term] -> Field

-- | Category
Cat :: [Term] -> Field

-- | Report Number
Rn :: [Term] -> Field

-- | Article identifier
Id :: [Term] -> Field

-- | Any of the above
All :: [Term] -> Field

-- | Expression data type. An expression is either a field or a logical
--   connection of two expressions using the basic operators AND, OR and
--   ANDNOT.
data Expression

-- | Just a field
Exp :: Field -> Expression

-- | Logical "and"
And :: Expression -> Expression -> Expression

-- | Logical "or"
Or :: Expression -> Expression -> Expression

-- | Logical "and . not"
AndNot :: Expression -> Expression -> Expression

-- | AND operator. The symbol was chosen because 0 * 1 = 0.
(/*/) :: Expression -> Expression -> Expression

-- | OR operator. The symbol was chosen because 0 + 1 = 1.
(/+/) :: Expression -> Expression -> Expression

-- | ANDNOT operator. The symbol was chosen because 1 - 1 = 0 and 1 - 0 =
--   1.
(/-/) :: Expression -> Expression -> Expression

-- | Query data type.
--   
--   You usually want to create a query like:
--   
--   <pre>
--   let e = (Exp $ Au ["Aaronson"]) /*/ (
--             (Exp $ Ti ["quantum"]) /+/
--             (Exp $ Ti ["complexity"]))
--    in Query {
--          qExp   = Just e,
--          qIds   = ["0902.3175v2","1406.2858v1","0912.3825v1"],
--          qStart = 0,
--          qItems = 10}
--   </pre>
data Query
Query :: Maybe Expression -> [Identifier] -> Int -> Int -> Query

-- | The query expression
qExp :: Query -> Maybe Expression

-- | Id List
qIds :: Query -> [Identifier]

-- | The first item we want to see
qStart :: Query -> Int

-- | The number of items we want to see
qItems :: Query -> Int

-- | Prepares the query to fetch the next page adding "items per page" to
--   "start index".
nextPage :: Query -> Query

-- | Parses an expression from a string. Please refer to the Arxiv
--   documentation for details on query format.
--   
--   Just a minor remark here: The operators OR, AND and ANDNOT are case
--   sensitive. "andnot" would be interpreted as part of a title, for
--   instance: "ti:functional+andnot+object+oriented" is just one title;
--   "ti:functional+ANDNOT+object+oriented" would cause an error, because a
--   field identifier (ti, au, etc.) is expected after "+ANDNOT+".
--   
--   The other way round: the field content itself is not case sensitive,
--   i.e. "ti:complexity" or "au:aaronson" is the same as "ti:Complexity"
--   and "au:Aaronson" respectively. This is a feature of the very arXiv
--   API.
--   
--   You may want to refer to the comments under <a>preprocess</a> and
--   <a>exp2str</a> for some more details on our interpretation of the
--   Arxiv documentation.
parseQuery :: String -> Either String Expression

-- | This is an internal function used by <a>parseQuery</a>. It may be
--   occasionally useful for direct use: It replaces " ", "(", ")" and """
--   by "+", "%28", "%29" and "%22" respectively.
--   
--   Usually, these substitutions are performed when transforming a string
--   to an URL, which should be done by your http library anyway (e.g.
--   http-conduit). But this step is usually after parsing has been
--   performed on the input string. (Considering a work flow like:
--   parseQuery &gt;&gt;= mkQuery &gt;&gt;= parseUrl &gt;&gt;= execQuery.)
--   The parser, however, accepts only the URL-encoded characters and,
--   thus, some preprocessing may be necessary.
--   
--   The other way round, this means that you may use parentheses, spaces
--   and quotation marks instead of the URL encodings. But be careful! Do
--   not introduce two successive spaces - we do not check for whitespace!
preprocess :: String -> String

-- | Converts a string containing comma-separated identifiers into a list
--   of <a>Identifier</a>s. As stated already: No whitespace!
parseIds :: String -> [Identifier]

-- | Generates the complete query string including URL, query expression,
--   id list and item control
mkQuery :: Query -> String

-- | Create a query string from an expression. Note that we create
--   redundant parentheses, for instance "a AND b OR c" will be encoded as
--   "a+AND+%28b+OR+c%29". The rationale is that the API specification is
--   not clear on how expressions are parsed. The above expression could be
--   understood as "a AND (b OR c)" or as "(a AND b) OR c". To avoid
--   confusion, one should always use parentheses to group boolean
--   expressions - even if some of these parentheses appear to be redundant
--   under one or the other parsing strategy.
exp2str :: Expression -> String

-- | Converts the query to a string containing only the item control
items2str :: Query -> String

-- | Converts a list of <a>Identifier</a> to a string with comma-separated
--   identifiers
ids2str :: [Identifier] -> String

-- | Generates the item control of a query string according to first item
--   and results per page:
--   
--   <ul>
--   <li><a>Int</a>: Start index for this page</li>
--   <li><a>Int</a>: Number of results per page.</li>
--   </ul>
itemControl :: Int -> Int -> String

-- | Total results of the query
totalResults :: [Tag String] -> Int

-- | Start index of this page of results
startIndex :: [Tag String] -> Int

-- | Number of items per page
itemsPerPage :: [Tag String] -> Int

-- | Get the first entry in the tag soup. The function returns a tuple of
--   
--   <ul>
--   <li>The entry (if any)</li>
--   <li>The rest of the tag soup following the first entry.</li>
--   </ul>
--   
--   With getEntry, we can build a loop through all entries in the result
--   (which is actually implemented in <a>forEachEntry</a>).
getEntry :: [Tag String] -> ([Tag String], [Tag String])

-- | Loop through all entries in the result feed applying a function on
--   each one. The results are returned as list. The function is similar to
--   <a>map</a> with the arguments swapped (as in Foldable <tt>forM</tt>).
--   
--   Arguments:
--   
--   <ul>
--   <li>[<a>Tag</a> <a>String</a>]: The TagSoup through which we are
--   looping</li>
--   <li>[<a>Tag</a> <a>String</a>] -&gt; r: The function we are applying
--   per entry; the TagSoup passed in to the function represents the
--   current entry.</li>
--   </ul>
--   
--   Example:
--   
--   <pre>
--   forEachEntry soup $ \e -&gt;
--     let y = case getYear e of
--               "" -&gt; "s.a."
--               x  -&gt; x
--         a = case getAuthorNames e of
--               [] -&gt; "Anonymous"
--               as -&gt; head as ++ 
--      in a ++ " (" ++ y ++ ")"
--   </pre>
--   
--   Would retrieve the name of the first author and the year of
--   publication (like <a>Aaronson (2013)</a>) from all entries.
forEachEntry :: [Tag String] -> ([Tag String] -> r) -> [r]

-- | Variant of <a>forEachEntry</a> for monadic actions.
forEachEntryM :: Monad m => [Tag String] -> ([Tag String] -> m r) -> m [r]

-- | Variant of <a>forEachEntryM</a> for actions that do not return a
--   result.
forEachEntryM_ :: Monad m => [Tag String] -> ([Tag String] -> m ()) -> m ()

-- | Checks if the feed contains an error message, i.e.
--   
--   <ul>
--   <li>it has only one entry,</li>
--   <li>the title of this entry is "Error" and</li>
--   <li>its id field contains an error message, which is returned as
--   <a>Left</a>.</li>
--   </ul>
--   
--   Apparently, this function is not necessary, since the Arxiv site
--   returns error feeds with status code 400 (<a>bad request</a>), which
--   should be handled by your http library anyway.
checkForError :: [Tag String] -> Either String ()

-- | Checks whether the query is exhausted or not, i.e. whether all pages
--   have been fetched already. The first argument is the entire response
--   (not just a part of it).
exhausted :: [Tag String] -> Bool

-- | Gets the article identifier as it can be used in an "id_list" query,
--   i.e. without the URL. The [Tag String] argument is expected to be a
--   single entry.
getId :: [Tag String] -> String

-- | Gets the full contents of the id field (which contains an URL before
--   the article identifier). The [Tag String] argument is expected to be a
--   single entry.
getIdUrl :: [Tag String] -> String

-- | Gets the contents of the "update" field in this entry, i.e. the date
--   when the article was last updated.
getUpdated :: [Tag String] -> String

-- | Gets the contents of the "published" field in this entry, i.e. the
--   date when the article was last uploaded.
getPublished :: [Tag String] -> String

-- | Gets the year of the "published" field in this entry.
getYear :: [Tag String] -> String

-- | Gets the title of this entry.
getTitle :: [Tag String] -> String

-- | Gets the summary of this entry.
getSummary :: [Tag String] -> String

-- | Gets author''s comment (in "arxiv:comment") of this entry.
getComment :: [Tag String] -> String

-- | Gets the journal information (in "arxiv:journal_ref") of this entry.
getJournal :: [Tag String] -> String

-- | Gets the digital object identifier (in "arxiv:doi") of this entry.
getDoi :: [Tag String] -> String

-- | The Link data type
data Link
Link :: String -> String -> String -> String -> Link

-- | The hyperlink
lnkHref :: Link -> String

-- | The link type (a MIME type)
lnkType :: Link -> String

-- | The link title (e.g. "pdf" would be the link where we find the article
--   in pdf format)
lnkTitle :: Link -> String

-- | the link relation (e.g. "related" would point to the related
--   information, such as the pdf document)
lnkRel :: Link -> String

-- | Gets all links in the entry.
getLinks :: [Tag String] -> [Link]

-- | Gets only the pdf link of this entry (if any).
getPdfLink :: [Tag String] -> Maybe Link

-- | Gets the hyperlink to the pdf document of this entry (if any).
getPdf :: [Tag String] -> String

-- | Category data type
data Category
Category :: String -> String -> Category

-- | The category term (e.g. "math-ph")
catTerm :: Category -> String

-- | The category scheme
catScheme :: Category -> String

-- | Gets the categories of this entry.
getCategories :: [Tag String] -> [Category]

-- | Gets the primary category of this entry (if any).
getPrimaryCategory :: [Tag String] -> Maybe Category

-- | The Author data type
data Author
Author :: String -> String -> Author

-- | Author name
auName :: Author -> String

-- | Author Affiliation
auFil :: Author -> String

-- | Gets the authors of this entry.
getAuthors :: [Tag String] -> [Author]

-- | Gets the names of all authors of this entry.
getAuthorNames :: [Tag String] -> [String]
instance Eq Field
instance Show Field
instance Eq Expression
instance Show Expression
instance Eq Query
instance Show Query
instance Show Link
instance Eq Link
instance Show Category
instance Eq Category
instance Show Author
instance Eq Author
