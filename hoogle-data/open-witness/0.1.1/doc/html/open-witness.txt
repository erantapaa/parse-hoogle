-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | open witnesses
--   
--   Open witnesses are witnesses that can witness to any type. However,
--   they cannot be constructed, they can only be generated in the IO
--   monad. See the paper <i>Witnesses and Open Witnesses</i>
--   (<a>http://semantic.org/stuff/Open-Witnesses.pdf</a>).
@package open-witness
@version 0.1.1

module Data.OpenWitness

-- | A witness type that can witness to any type. But values cannot be
--   constructed; they can only be generated in <a>IO</a> and certain other
--   monads.
data OpenWitness s a

-- | The <tt>s</tt> type for running <a>OW</a> in <a>IO</a>.
data RealWorld

-- | An <a>OpenWitness</a> for <a>IO</a>.
type IOWitness = OpenWitness RealWorld

-- | Generate a new <a>IOWitness</a> in <a>IO</a>.
newIOWitness :: IO (IOWitness a)

-- | A runnable monad in which <a>OpenWitness</a> values can be generated.
--   The <tt>s</tt> parameter plays the same role as it does in
--   <tt>ST</tt>, preventing <a>OpenWitness</a> values from one run being
--   used in another.
data OW s a

-- | Generate a new <a>OpenWitness</a> in <a>OW</a>.
newOpenWitnessOW :: OW s (OpenWitness s a)

-- | Run an <a>OW</a> computation.
runOW :: (forall s. OW s a) -> a

-- | Run an <a>OW</a> computation in <a>IO</a>.
owToIO :: OW RealWorld a -> IO a

-- | In the absence of open witness declarations, an unsafe hack to
--   generate <a>IOWitness</a> values. This is safe if you use a different
--   string each time (and <a>hashString</a> doesn't collide), and if
--   <tt>a</tt> is a single type.
unsafeIOWitnessFromString :: String -> IOWitness a
instance Functor (OW s)
instance Monad (OW s)
instance MonadFix (OW s)
instance Eq (OpenWitness s a)
instance SimpleWitness (OpenWitness s)


-- | This is an approximate re-implementation of <a>Control.Monad.ST</a>
--   and <a>Data.STRef</a> using open witnesses.
module Data.OpenWitness.ST
type ST s = StateT (WitnessDict (OpenWitness s)) (OW s)
runST :: (forall s. ST s a) -> a
fixST :: (a -> ST s a) -> ST s a
stToOW :: ST s a -> OW s a

-- | The <tt>s</tt> type for running <a>OW</a> in <a>IO</a>.
data RealWorld
stToIO :: ST RealWorld a -> IO a
type STRef = OpenWitness
newSTRef :: a -> ST s (STRef s a)
readSTRef :: STRef s a -> ST s a
writeSTRef :: STRef s a -> a -> ST s ()
modifySTRef :: STRef s a -> (a -> a) -> ST s ()

module Data.OpenWitness.Typeable.Rep
data Rep2 p
SimpleRep2 :: IOWitness (p () ()) -> Rep2 p
matchRep2 :: Rep2 a -> Rep2 b -> Maybe (EqualType (a () ()) (b () ()))
data Rep1 p
SimpleRep1 :: IOWitness (p ()) -> Rep1 p
ApplyRep1 :: Rep2 p -> Rep a -> Rep1 (p a)
matchRep1 :: Rep1 a -> Rep1 b -> Maybe (EqualType (a ()) (b ()))
data Rep a
SimpleRep :: IOWitness a -> Rep a
ApplyRep :: Rep1 p -> Rep a -> Rep (p a)
instance Eq1 Rep
instance SimpleWitness Rep


-- | This is an approximate re-implementation of <a>Data.Typeable</a> using
--   open witnesses.
module Data.OpenWitness.Typeable

-- | types of kind <tt>*</tt> with a representation
class Typeable a
rep :: (Typeable a) => Rep a

-- | types of kind <tt>* -&gt; *</tt> with a representation
class Typeable1 t
rep1 :: (Typeable1 t) => Rep1 t

-- | types of kind <tt>* -&gt; * -&gt; *</tt> with a representation
class Typeable2 t
rep2 :: (Typeable2 t) => Rep2 t
cast :: (Typeable a, Typeable b) => a -> Maybe b
gcast :: (Typeable a, Typeable b) => c a -> Maybe (c b)

-- | represents a type of kind <tt>*</tt>
type TypeRep = AnyWitness Rep
typeOf :: (Typeable t) => t -> TypeRep

-- | represents a type of kind <tt>* -&gt; *</tt>
type TypeRep1 = AnyWitness1 Rep1
typeOf1 :: (Typeable1 t) => t a -> TypeRep1

-- | represents a type of kind <tt>* -&gt; * -&gt; *</tt>
type TypeRep2 = AnyWitness2 Rep2
typeOf2 :: (Typeable2 t) => t a b -> TypeRep2

-- | given representations of <tt>a</tt> and <tt>b</tt>, make a
--   representation of <tt>a -&gt; b</tt>
mkFunTy :: TypeRep -> TypeRep -> TypeRep

-- | given representations of <tt>a -&gt; b</tt> and <tt>a</tt>, make a
--   representation of <tt>b</tt> (otherwise not)
funResultTy :: TypeRep -> TypeRep -> Maybe TypeRep
mkAppTy :: TypeRep1 -> TypeRep -> TypeRep
mkAppTy1 :: TypeRep2 -> TypeRep -> TypeRep1
instance Typeable2 (->)
instance (Typeable2 f, Typeable a) => Typeable1 (f a)
instance (Typeable1 f, Typeable a) => Typeable (f a)


-- | This is an approximate re-implementation of <a>Data.Dynamic</a> using
--   open witnesses.
module Data.OpenWitness.Dynamic
type Dynamic = Any Rep
toDyn :: (Typeable a) => a -> Dynamic
fromDyn :: (Typeable a) => Dynamic -> a -> a
fromDynamic :: (Typeable a) => Dynamic -> Maybe a
dynApply :: Dynamic -> Dynamic -> Maybe Dynamic
dynApp :: Dynamic -> Dynamic -> Dynamic
dynTypeRep :: Dynamic -> TypeRep

module Data.OpenWitness.Exception

-- | A key to match exceptions. The type variable is the data the exception
--   carries.
type Exn = IOWitness

-- | In the absence of open witness declarations, an unsafe hack to
--   generate <a>Exn</a> exception keys. This is safe if you use a
--   different string each time (and <tt>hashString</tt> doesn't collide),
--   and if <tt>e</tt> is a single type.
unsafeExnFromString :: String -> Exn e
throw :: Exn e -> e -> a
catch :: IO a -> Exn e -> (e -> IO a) -> IO a
instance Typeable ExnException
