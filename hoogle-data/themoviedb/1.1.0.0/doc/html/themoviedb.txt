-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell API bindings for http://themoviedb.org
--   
@package themoviedb
@version 1.1.0.0


-- | Utility type for working with release dates.
module Network.API.TheMovieDB.Internal.Date

-- | A simple type wrapper around <a>Day</a> in order to parse a movie's
--   release date, which may be null or empty.
newtype Date
Date :: Maybe Day -> Date
day :: Date -> Maybe Day

-- | Aeson helper function to parse dates in TheMovieDB API.
parseDay :: Object -> Text -> Parser (Maybe Day)
(.::) :: Object -> Text -> Parser (Maybe Day)
instance Eq Date
instance Show Date
instance FromJSON Date


-- | Utility type for processing movie search results.
module Network.API.TheMovieDB.Internal.SearchResults

-- | Internal wrapper to parse a list of results from JSON.
newtype SearchResults a
SearchResults :: [a] -> SearchResults a
searchResults :: SearchResults a -> [a]
instance Eq a => Eq (SearchResults a)
instance Show a => Show (SearchResults a)
instance FromJSON a => FromJSON (SearchResults a)


-- | Simple types and synonyms, mostly to make the type signatures easier
--   to read.
module Network.API.TheMovieDB.Internal.Types

-- | Type to represent IDs used by the API.
type ItemID = Int

-- | Type for the API key issued by TheMovieDB.
type Key = Text

-- | HTTP body.
type Body = ByteString

-- | URL path.
type Path = String

-- | Possible errors returned by the API.
data Error

-- | Missing or invalid API key. Make sure you are using a valid API key
--   issued by <a>https://www.themoviedb.org/faq/api</a>.
InvalidKeyError :: Error

-- | An exception relating to HTTP was thrown while interacting with the
--   API.
HttpExceptionError :: HttpException -> Error

-- | The HTTP interaction with the API service did not result in a
--   successful response. Information about the failure is encoded in the
--   String.
ServiceError :: String -> Error

-- | Invalid or error response from the API.
ResponseParseError :: String -> (Maybe ByteString) -> Error
instance Show Error

module Network.API.TheMovieDB.Types.Genre

-- | Metadata for a genre.
data Genre
Genre :: ItemID -> Text -> Genre

-- | TheMovieDB unique ID.
genreID :: Genre -> ItemID

-- | The name of the genre.
genreName :: Genre -> Text
instance Eq Genre
instance Show Genre
instance FromJSON Genre


-- | Simple interface for fetching JSON files from the API via HTTP.
module Network.API.TheMovieDB.Internal.HTTP

-- | Build a URL and do an HTTP GET to TheMovieDB.
apiGET :: Manager -> Key -> Path -> QueryText -> IO (Either Error Body)

module Network.API.TheMovieDB.Internal.TheMovieDB

-- | Result type for operations involving TheMovieDB API.
data TheMovieDB a

-- | The type for functions that make requests to the API (or pretend to
--   make a request for testing purposes).
type RequestFunction = Path -> QueryText -> IO (Either Error Body)

-- | Helper function to preform an HTTP GET and decode the JSON result.
getAndParse :: FromJSON a => Path -> QueryText -> TheMovieDB a

-- | Create a <a>TheMovieDB</a> value representing an error.
tmdbError :: Error -> TheMovieDB a

-- | Execute requests for TheMovieDB with the given API key and produce
--   either an error or a result.
--   
--   This version creates a temporary <a>Manager</a> using
--   <a>tlsManagerSettings</a>. If you want to use an existing
--   <a>Manager</a> you should use <a>runTheMovieDBWithManager</a> instead.
runTheMovieDB :: Key -> TheMovieDB a -> IO (Either Error a)

-- | Execute requests for TheMovieDB with the given API key and produce
--   either an error or a result.
--   
--   This version allows you to provide a <a>Manager</a> value which should
--   have been created to allow TLS requests (e.g., with
--   <a>tlsManagerSettings</a>).
runTheMovieDBWithManager :: Manager -> Key -> TheMovieDB a -> IO (Either Error a)

-- | Low-level interface for executing a <a>TheMovieDB</a> using the given
--   request function.
runTheMovieDBWithRequestFunction :: RequestFunction -> TheMovieDB a -> IO (Either Error a)
instance Functor TheMovieDB
instance Applicative TheMovieDB
instance Monad TheMovieDB
instance MonadIO TheMovieDB


-- | Internal configuration information for TheMovieDB API.
module Network.API.TheMovieDB.Internal.Configuration

-- | TheMovieDB API tries to preserve bandwidth by omitting information
--   (such as full URLs for poster images) from most of the API calls.
--   Therefore in order to construct a complete URL for a movie poster
--   you'll need to use the <tt>config</tt> function to retrieve API
--   configuration information.
--   
--   A helper function is provided (<tt>moviePosterURLs</tt>) that
--   constructs a list of all poster URLs given a <tt>Movie</tt> and
--   <a>Configuration</a>.
--   
--   According to the API documentation for TheMovieDB, you should cache
--   the <a>Configuration</a> value and only request it every few days.
--   Therefore, it is an instance of the <a>Binary</a> class so it can be
--   serialized to and from a cache file on disk.
--   
--   Alternatively, the <a>FromJSON</a> and <a>ToJSON</a> instances can be
--   used to cache the <a>Configuration</a> value.
data Configuration
Configuration :: Text -> Text -> [Text] -> Configuration

-- | The base URL for images.
cfgImageBaseURL :: Configuration -> Text

-- | Base URL for secure images.
cfgImageSecBaseURL :: Configuration -> Text

-- | List of possible image sizes.
cfgPosterSizes :: Configuration -> [Text]

-- | Return a list of URLs for all possible posters posters.
posterURLs :: Configuration -> Text -> [Text]
instance Generic Configuration
instance Datatype D1Configuration
instance Constructor C1_0Configuration
instance Selector S1_0_0Configuration
instance Selector S1_0_1Configuration
instance Selector S1_0_2Configuration
instance ToJSON Configuration
instance FromJSON Configuration
instance Binary Configuration

module Network.API.TheMovieDB.Types.Episode

-- | Metadata for a TV Episode.
--   
--   <ul>
--   <li>The <a>episodeStillPath</a> field is an incomplete URL. To
--   construct a complete URL you'll need to use the <a>Configuration</a>
--   type and the <a>episodeStillURLs</a> helper function.</li>
--   </ul>
data Episode
Episode :: ItemID -> Int -> Text -> Text -> Int -> Maybe Day -> Text -> Episode

-- | TheMovieDB unique ID.
episodeID :: Episode -> ItemID

-- | Episode sequence number.
episodeNumber :: Episode -> Int

-- | Episode name.
episodeName :: Episode -> Text

-- | Short description of the episode.
episodeOverview :: Episode -> Text

-- | The season this episode belongs to.
episodeSeasonNumber :: Episode -> Int

-- | Episode air date, if it ever aired.
episodeAirDate :: Episode -> Maybe Day

-- | Incomplete URL to a still image from the episode. See the
--   <a>episodeStillURLs</a> function for more information.
episodeStillPath :: Episode -> Text

-- | Return a list of URLs for all possible episode still images.
episodeStillURLs :: Configuration -> Episode -> [Text]
instance Eq Episode
instance Show Episode
instance FromJSON Episode
instance Ord Episode

module Network.API.TheMovieDB.Types.Movie

-- | Metadata for a movie.
--   
--   <ul>
--   <li>The <a>moviePosterPath</a> field is an incomplete URL. To
--   construct a complete URL you'll need to use the <a>Configuration</a>
--   type and the <a>moviePosterURLs</a> helper function.</li>
--   </ul>
data Movie
Movie :: ItemID -> Text -> Text -> [Genre] -> Double -> Text -> Maybe Day -> Bool -> Text -> Int -> Movie

-- | TheMovieDB unique ID.
movieID :: Movie -> ItemID

-- | The name/title of the movie.
movieTitle :: Movie -> Text

-- | Short plot summary.
movieOverview :: Movie -> Text

-- | List of <a>Genre</a>s.
movieGenres :: Movie -> [Genre]

-- | Popularity ranking.
moviePopularity :: Movie -> Double

-- | Incomplete URL for poster image. See <a>moviePosterURLs</a>.
moviePosterPath :: Movie -> Text

-- | Movie release date. (Movie may not have been released yet.)
movieReleaseDate :: Movie -> Maybe Day

-- | TheMovieDB adult movie flag.
movieAdult :: Movie -> Bool

-- | IMDB.com ID.
movieIMDB :: Movie -> Text

-- | Movie length in minutes.
movieRunTime :: Movie -> Int

-- | Return a list of URLs for all possible movie posters.
moviePosterURLs :: Configuration -> Movie -> [Text]
instance Eq Movie
instance Show Movie
instance FromJSON Movie

module Network.API.TheMovieDB.Types.Season

-- | Metadata for a TV Season.
--   
--   <ul>
--   <li>The <a>seasonPosterPath</a> field is an incomplete URL. To
--   construct a complete URL you'll need to use the <a>Configuration</a>
--   type and the <a>seasonPosterURLs</a> helper function.</li>
--   </ul>
data Season
Season :: ItemID -> Int -> Maybe Day -> Int -> Text -> [Episode] -> Season

-- | TheMovieDB unique ID.
seasonID :: Season -> ItemID

-- | Season sequence number. Remember that season 0 is sometimes used to
--   hold unreleased/unaired episodes.
seasonNumber :: Season -> Int

-- | The date this season began to air, if ever.
seasonAirDate :: Season -> Maybe Day

-- | Number of episodes in this season.
seasonEpisodeCount :: Season -> Int

-- | Incomplete URL for poster image. See <a>seasonPosterURLs</a>.
seasonPosterPath :: Season -> Text

-- | List of <a>Episode</a>s.
seasonEpisodes :: Season -> [Episode]

-- | Return a list of URLs for all possible season posters.
seasonPosterURLs :: Configuration -> Season -> [Text]
instance Eq Season
instance Show Season
instance FromJSON Season
instance Ord Season

module Network.API.TheMovieDB.Types.TV

-- | Metadata for a TV series.
--   
--   <ul>
--   <li>The <a>tvPosterPath</a> field is an incomplete URL. To construct a
--   complete URL you'll need to use the <a>Configuration</a> type and the
--   <a>tvPosterURLs</a> helper function.</li>
--   </ul>
data TV
TV :: ItemID -> Text -> Text -> [Genre] -> Double -> Text -> Maybe Day -> Maybe Day -> Int -> Int -> [Season] -> TV

-- | TheMovieDB unique ID.
tvID :: TV -> ItemID

-- | The name of the TV series.
tvName :: TV -> Text

-- | Short description of the TV series.
tvOverview :: TV -> Text

-- | List of <a>Genre</a>s.
tvGenres :: TV -> [Genre]

-- | Popularity ranking.
tvPopularity :: TV -> Double

-- | Incomplete URL for poster image. See <a>tvPosterURLs</a>.
tvPosterPath :: TV -> Text

-- | Air date for first episode.
tvFirstAirDate :: TV -> Maybe Day

-- | Air date for last episode.
tvLastAirDate :: TV -> Maybe Day

-- | Number of seasons for the TV series.
tvNumberOfSeasons :: TV -> Int

-- | Total number of episodes for all seasons.
tvNumberOfEpisodes :: TV -> Int

-- | Information about each season.
--   
--   The number of elements in this list may not match
--   <a>tvNumberOfSeasons</a>. Information about special episodes and
--   unreleased episodes are usually kept in a <a>Season</a> listed as
--   season 0. Therefore, the first element in this list might not be
--   season 1.
tvSeasons :: TV -> [Season]

-- | Return a list of URLs for all possible TV posters.
tvPosterURLs :: Configuration -> TV -> [Text]
instance Eq TV
instance Show TV
instance FromJSON TV
instance Ord TV

module Network.API.TheMovieDB.Actions

-- | Search TheMovieDB using the given query string.
--   
--   The movies returned will not have all their fields completely filled
--   out, to get a complete record you'll need to follow this call up with
--   a call to <a>fetchMovie</a>.
searchMovies :: Text -> TheMovieDB [Movie]

-- | Fetch the metadata for the <a>Movie</a> with the given ID.
fetchMovie :: ItemID -> TheMovieDB Movie

-- | Search TheMovieDB for matching <a>TV</a> series.
--   
--   The <a>TV</a> values returned from this function will be partial
--   records. The only fields that will be available are <a>tvID</a>,
--   <a>tvName</a>, <a>tvPosterPath</a>, <a>tvPopularity</a>, and possibly
--   <a>tvFirstAirDate</a>.
--   
--   To get full <a>TV</a> records you need to follow this function with a
--   call to <a>fetchTV</a> using the desired <a>tvID</a> value.
searchTV :: Text -> TheMovieDB [TV]

-- | Fetch metadata for a <a>TV</a> series given its TheMovieDB ID. The
--   metadata for <a>Season</a>s listed in the TV series will not have
--   complete <tt>Episode</tt> information.
--   
--   After calling this function you should call <a>fetchTVSeason</a> to
--   fill in the <tt>Episode</tt> metadata, or just begin with
--   <a>fetchFullTVSeries</a>.
fetchTV :: ItemID -> TheMovieDB TV

-- | Fetch metadata for a <a>Season</a>, including all <tt>Episode</tt>s.
fetchTVSeason :: ItemID -> Int -> TheMovieDB Season

-- | Fetch full metadata for a <a>TV</a> series, including all seasons and
--   episodes.
--   
--   This function will make multiple HTTP requests to TheMovieDB API.
fetchFullTVSeries :: ItemID -> TheMovieDB TV

-- | Fetch the API configuration information such as base URLs for movie
--   posters. The resulting configuration value should be cached and only
--   requested every few days.
config :: TheMovieDB Configuration


-- | This library provides some data types and functions for fetching movie
--   metadata from <a>http://TheMovieDB.org</a>. To use this library start
--   by requesting an API key from <a>http://docs.themoviedb.apiary.io</a>.
--   
--   Example:
--   
--   <pre>
--   import Network.API.TheMovieDB
--   
--   main :: IO ()
--   main = do
--     -- The API key assigned to you (as a <tt>Text</tt> value).
--     let key = "your API key"
--   
--     -- The <tt>fetch</tt> function will get a <a>Movie</a> record based on its ID.
--     result &lt;- runTheMovieDB key (fetchMovie 9340)
--   
--     -- Do something with the result (or error).
--     putStrLn (show result)
--   </pre>
--   
--   This library also includes an example executable in the
--   <tt>example</tt> directory.
module Network.API.TheMovieDB

-- | Metadata for a movie.
--   
--   <ul>
--   <li>The <a>moviePosterPath</a> field is an incomplete URL. To
--   construct a complete URL you'll need to use the <a>Configuration</a>
--   type and the <a>moviePosterURLs</a> helper function.</li>
--   </ul>
data Movie
Movie :: ItemID -> Text -> Text -> [Genre] -> Double -> Text -> Maybe Day -> Bool -> Text -> Int -> Movie

-- | TheMovieDB unique ID.
movieID :: Movie -> ItemID

-- | The name/title of the movie.
movieTitle :: Movie -> Text

-- | Short plot summary.
movieOverview :: Movie -> Text

-- | List of <a>Genre</a>s.
movieGenres :: Movie -> [Genre]

-- | Popularity ranking.
moviePopularity :: Movie -> Double

-- | Incomplete URL for poster image. See <a>moviePosterURLs</a>.
moviePosterPath :: Movie -> Text

-- | Movie release date. (Movie may not have been released yet.)
movieReleaseDate :: Movie -> Maybe Day

-- | TheMovieDB adult movie flag.
movieAdult :: Movie -> Bool

-- | IMDB.com ID.
movieIMDB :: Movie -> Text

-- | Movie length in minutes.
movieRunTime :: Movie -> Int

-- | Metadata for a TV series.
--   
--   <ul>
--   <li>The <a>tvPosterPath</a> field is an incomplete URL. To construct a
--   complete URL you'll need to use the <a>Configuration</a> type and the
--   <a>tvPosterURLs</a> helper function.</li>
--   </ul>
data TV
TV :: ItemID -> Text -> Text -> [Genre] -> Double -> Text -> Maybe Day -> Maybe Day -> Int -> Int -> [Season] -> TV

-- | TheMovieDB unique ID.
tvID :: TV -> ItemID

-- | The name of the TV series.
tvName :: TV -> Text

-- | Short description of the TV series.
tvOverview :: TV -> Text

-- | List of <a>Genre</a>s.
tvGenres :: TV -> [Genre]

-- | Popularity ranking.
tvPopularity :: TV -> Double

-- | Incomplete URL for poster image. See <a>tvPosterURLs</a>.
tvPosterPath :: TV -> Text

-- | Air date for first episode.
tvFirstAirDate :: TV -> Maybe Day

-- | Air date for last episode.
tvLastAirDate :: TV -> Maybe Day

-- | Number of seasons for the TV series.
tvNumberOfSeasons :: TV -> Int

-- | Total number of episodes for all seasons.
tvNumberOfEpisodes :: TV -> Int

-- | Information about each season.
--   
--   The number of elements in this list may not match
--   <a>tvNumberOfSeasons</a>. Information about special episodes and
--   unreleased episodes are usually kept in a <a>Season</a> listed as
--   season 0. Therefore, the first element in this list might not be
--   season 1.
tvSeasons :: TV -> [Season]

-- | Metadata for a TV Season.
--   
--   <ul>
--   <li>The <a>seasonPosterPath</a> field is an incomplete URL. To
--   construct a complete URL you'll need to use the <a>Configuration</a>
--   type and the <a>seasonPosterURLs</a> helper function.</li>
--   </ul>
data Season
Season :: ItemID -> Int -> Maybe Day -> Int -> Text -> [Episode] -> Season

-- | TheMovieDB unique ID.
seasonID :: Season -> ItemID

-- | Season sequence number. Remember that season 0 is sometimes used to
--   hold unreleased/unaired episodes.
seasonNumber :: Season -> Int

-- | The date this season began to air, if ever.
seasonAirDate :: Season -> Maybe Day

-- | Number of episodes in this season.
seasonEpisodeCount :: Season -> Int

-- | Incomplete URL for poster image. See <a>seasonPosterURLs</a>.
seasonPosterPath :: Season -> Text

-- | List of <a>Episode</a>s.
seasonEpisodes :: Season -> [Episode]

-- | Metadata for a TV Episode.
--   
--   <ul>
--   <li>The <a>episodeStillPath</a> field is an incomplete URL. To
--   construct a complete URL you'll need to use the <a>Configuration</a>
--   type and the <a>episodeStillURLs</a> helper function.</li>
--   </ul>
data Episode
Episode :: ItemID -> Int -> Text -> Text -> Int -> Maybe Day -> Text -> Episode

-- | TheMovieDB unique ID.
episodeID :: Episode -> ItemID

-- | Episode sequence number.
episodeNumber :: Episode -> Int

-- | Episode name.
episodeName :: Episode -> Text

-- | Short description of the episode.
episodeOverview :: Episode -> Text

-- | The season this episode belongs to.
episodeSeasonNumber :: Episode -> Int

-- | Episode air date, if it ever aired.
episodeAirDate :: Episode -> Maybe Day

-- | Incomplete URL to a still image from the episode. See the
--   <a>episodeStillURLs</a> function for more information.
episodeStillPath :: Episode -> Text

-- | Metadata for a genre.
data Genre
Genre :: ItemID -> Text -> Genre

-- | TheMovieDB unique ID.
genreID :: Genre -> ItemID

-- | The name of the genre.
genreName :: Genre -> Text

-- | Possible errors returned by the API.
data Error

-- | Missing or invalid API key. Make sure you are using a valid API key
--   issued by <a>https://www.themoviedb.org/faq/api</a>.
InvalidKeyError :: Error

-- | An exception relating to HTTP was thrown while interacting with the
--   API.
HttpExceptionError :: HttpException -> Error

-- | The HTTP interaction with the API service did not result in a
--   successful response. Information about the failure is encoded in the
--   String.
ServiceError :: String -> Error

-- | Invalid or error response from the API.
ResponseParseError :: String -> (Maybe ByteString) -> Error

-- | Type to represent IDs used by the API.
type ItemID = Int

-- | Type for the API key issued by TheMovieDB.
type Key = Text

-- | Result type for operations involving TheMovieDB API.
data TheMovieDB a

-- | Execute requests for TheMovieDB with the given API key and produce
--   either an error or a result.
--   
--   This version creates a temporary <a>Manager</a> using
--   <a>tlsManagerSettings</a>. If you want to use an existing
--   <a>Manager</a> you should use <a>runTheMovieDBWithManager</a> instead.
runTheMovieDB :: Key -> TheMovieDB a -> IO (Either Error a)

-- | Execute requests for TheMovieDB with the given API key and produce
--   either an error or a result.
--   
--   This version allows you to provide a <a>Manager</a> value which should
--   have been created to allow TLS requests (e.g., with
--   <a>tlsManagerSettings</a>).
runTheMovieDBWithManager :: Manager -> Key -> TheMovieDB a -> IO (Either Error a)

-- | Search TheMovieDB using the given query string.
--   
--   The movies returned will not have all their fields completely filled
--   out, to get a complete record you'll need to follow this call up with
--   a call to <a>fetchMovie</a>.
searchMovies :: Text -> TheMovieDB [Movie]

-- | Fetch the metadata for the <a>Movie</a> with the given ID.
fetchMovie :: ItemID -> TheMovieDB Movie

-- | Search TheMovieDB for matching <a>TV</a> series.
--   
--   The <a>TV</a> values returned from this function will be partial
--   records. The only fields that will be available are <a>tvID</a>,
--   <a>tvName</a>, <a>tvPosterPath</a>, <a>tvPopularity</a>, and possibly
--   <a>tvFirstAirDate</a>.
--   
--   To get full <a>TV</a> records you need to follow this function with a
--   call to <a>fetchTV</a> using the desired <a>tvID</a> value.
searchTV :: Text -> TheMovieDB [TV]

-- | Fetch metadata for a <a>TV</a> series given its TheMovieDB ID. The
--   metadata for <a>Season</a>s listed in the TV series will not have
--   complete <tt>Episode</tt> information.
--   
--   After calling this function you should call <a>fetchTVSeason</a> to
--   fill in the <tt>Episode</tt> metadata, or just begin with
--   <a>fetchFullTVSeries</a>.
fetchTV :: ItemID -> TheMovieDB TV

-- | Fetch metadata for a <a>Season</a>, including all <tt>Episode</tt>s.
fetchTVSeason :: ItemID -> Int -> TheMovieDB Season

-- | Fetch full metadata for a <a>TV</a> series, including all seasons and
--   episodes.
--   
--   This function will make multiple HTTP requests to TheMovieDB API.
fetchFullTVSeries :: ItemID -> TheMovieDB TV

-- | TheMovieDB API tries to preserve bandwidth by omitting information
--   (such as full URLs for poster images) from most of the API calls.
--   Therefore in order to construct a complete URL for a movie poster
--   you'll need to use the <tt>config</tt> function to retrieve API
--   configuration information.
--   
--   A helper function is provided (<tt>moviePosterURLs</tt>) that
--   constructs a list of all poster URLs given a <tt>Movie</tt> and
--   <a>Configuration</a>.
--   
--   According to the API documentation for TheMovieDB, you should cache
--   the <a>Configuration</a> value and only request it every few days.
--   Therefore, it is an instance of the <a>Binary</a> class so it can be
--   serialized to and from a cache file on disk.
--   
--   Alternatively, the <a>FromJSON</a> and <a>ToJSON</a> instances can be
--   used to cache the <a>Configuration</a> value.
data Configuration

-- | Fetch the API configuration information such as base URLs for movie
--   posters. The resulting configuration value should be cached and only
--   requested every few days.
config :: TheMovieDB Configuration

-- | Return a list of URLs for all possible movie posters.
moviePosterURLs :: Configuration -> Movie -> [Text]

-- | Return a list of URLs for all possible TV posters.
tvPosterURLs :: Configuration -> TV -> [Text]

-- | Return a list of URLs for all possible season posters.
seasonPosterURLs :: Configuration -> Season -> [Text]

-- | Return a list of URLs for all possible episode still images.
episodeStillURLs :: Configuration -> Episode -> [Text]
