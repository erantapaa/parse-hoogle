-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A program to extract various information from BAM alignmnet files.
--   
--   A program to extract various information from BAM alignmnet files.
@package bamstats
@version 0.3


-- | Stats reads in a BAM-file as innie outie rightie leftie, with stats
--   for distances
module Bio.SamTools.Classify
data Stats a
Class :: !Int -> !a -> !a -> !a -> !a -> Stats a
total :: Stats a -> !Int
innies :: Stats a -> !a
outies :: Stats a -> !a
lefties :: Stats a -> !a
righties :: Stats a -> !a

-- | Pretty-print a <a>Stats</a> value.
display :: Insertable x => Stats x -> String
showQuants :: Stats Hist -> String
genplot :: String -> Stats Hist -> String
class Insertable x
insert :: Insertable x => Bam1 -> x -> x
disp1 :: Insertable x => Int -> x -> [String]
dispheader :: Insertable x => x -> [String]

-- | Extract info from alignments
classify :: Insertable x => x -> [Bam1] -> Stats x

-- | Update count
bump :: Stats a -> Stats a

-- | Update data structure with a single alignment
class1 :: Insertable x => Stats x -> Bam1 -> Stats x
add_innie :: Insertable x => Bam1 -> Stats x -> Stats x
add_leftie :: Insertable x => Bam1 -> Stats x -> Stats x
add_rightie :: Insertable x => Bam1 -> Stats x -> Stats x
add_outie :: Insertable x => Bam1 -> Stats x -> Stats x
isUnmapped :: Bam1 -> Bool
isBefore :: Bam1 -> Bool
firstUpstream :: Bam1 -> Bool
isOpposite :: Bam1 -> Bool
data ClassStats
CS :: !Int -> !Double -> !Double -> !Double -> !Double -> ClassStats
ccount :: ClassStats -> !Int
xsum :: ClassStats -> !Double
x2sum :: ClassStats -> !Double
x3sum :: ClassStats -> !Double
x4sum :: ClassStats -> !Double
data Statistics
S :: Double -> Double -> Double -> Double -> Double -> Statistics
ncount :: Statistics -> Double
mean :: Statistics -> Double
stdev :: Statistics -> Double
skew :: Statistics -> Double
kurt :: Statistics -> Double
mkstats :: ClassStats -> Statistics
statistics :: Stats ClassStats -> Stats Statistics
data Hist
H :: !Int -> ![(Int, Int)] -> Hist
hcount :: Hist -> !Int
buckets :: Hist -> ![(Int, Int)]
data Collect
Bams :: [Bam1] -> Collect
bams :: Collect -> [Bam1]
instance Show a => Show (Stats a)
instance Show ClassStats
instance Show Hist
instance Insertable Collect
instance Insertable Hist
instance Insertable ClassStats
