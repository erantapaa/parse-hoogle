-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Small (TH) library to declare setters for typical `record' data type fields.
--   
--   Haskell declares a getter for each <a>record</a> style data type
--   field. This library will help you declare setters (<a>setFieldName</a>
--   function for <a>fieldName</a> field).
@package setters
@version 0.1

module Control.Monad.State.Puts

-- | Puts is just an opposite to gets. Compare `x &lt;- gets field' with
--   `puts setField newValue'.
puts :: MonadState s m => (a -> s -> s) -> a -> m ()

module Data.Setters

-- | Declare setters for all fields of given `data' type. For example, for
--   
--   <pre>
--   data Record = Record {
--         ...
--         someField :: Integer,
--         ... }
--   </pre>
--   
--   one will automatically get
--   
--   <pre>
--   someField :: Record -&gt; Integer.
--   </pre>
--   
--   After calling
--   
--   <pre>
--   $(declareSetters ''Record)
--   </pre>
--   
--   one will get
--   
--   <pre>
--   setSomeField :: Integer -&gt; Record -&gt; Record.
--   </pre>
declareSetters :: Name -> Q [Dec]

-- | Similar to <a>declareSetters</a>, but add data type name to all
--   setters' names. For example, one will get <tt>setRecordSomeField</tt>
--   instead of <tt>setSomeField</tt>.
declareSetters' :: Name -> Q [Dec]
