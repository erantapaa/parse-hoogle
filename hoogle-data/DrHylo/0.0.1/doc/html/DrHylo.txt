-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A tool for deriving hylomorphisms
--   
--   DrHylo is a tool for deriving hylomorphisms from a restricted Haskell
--   syntax. It is based on the algorithm first presented in the paper
--   Deriving Structural Hylomorphisms From Recursive Definitions at
--   ICFP'96 by Hu, Iwasaki, and Takeichi. The generated code can be run
--   with Pointless Haskell
--   (<a>http://hackage.haskell.org/cgi-bin/hackage-scripts/package/pointless-haskell</a>),
--   allowing the visualization of the recursion trees of Haskell
--   functions.
@package DrHylo
@version 0.0.1

module Language.Pointfree.Syntax
data Type
One :: Type
Base :: String -> Type
Fix :: Funct -> Type
(:*:) :: Type -> Type -> Type
(:+:) :: Type -> Type -> Type
(:->) :: Type -> Type -> Type
data Funct
Id :: Funct
Const :: Type -> Funct
(:**:) :: Funct -> Funct -> Funct
(:++:) :: Funct -> Funct -> Funct
data Term
ID :: Term
(:.:) :: Term -> Term -> Term
FST :: Term
SND :: Term
(:/\:) :: Term -> Term -> Term
INL :: Term
INR :: Term
(:\/:) :: Term -> Term -> Term
AP :: Term
Curry :: Term -> Term
BANG :: Term
Macro :: String -> [Term] -> Term
Point :: String -> Term
IN :: Term
OUT :: Term
Hylo :: Type -> Term -> Term -> Term
HyloO :: Type -> Term -> Term -> Term
instance Eq Term
instance Eq Funct
instance Eq Type

module Language.Pointfree.Pretty
pf2hs :: Term -> Exp
type2hs :: Type -> Type
instance Show Funct
instance Show Type
instance Show Term

module Language.Pointfree.Parser

module Language.Pointwise.Syntax
data Term
Var :: String -> Term
Unit :: Term
Const :: String -> Term
(:&:) :: Term -> Term -> Term
Fst :: Term -> Term
Snd :: Term -> Term
Case :: Term -> Term -> Term -> Term
Match :: Term -> [(Term, Term)] -> Term
Inl :: Term -> Term
Inr :: Term -> Term
Lam :: String -> Term -> Term
(:@:) :: Term -> Term -> Term
In :: Term -> Term
Out :: Term -> Term
Fix :: Term -> Term
isPair :: Term -> Bool
pwFst :: Term -> Term
pwSnd :: Term -> Term
isInl :: Term -> Bool
isInr :: Term -> Bool
isInlr :: Term -> Bool
isIn :: Term -> Bool
free :: Term -> [String]
subst :: [(String, Term)] -> Term -> Term
step :: Term -> Term
replace :: [(String, Term)] -> Term -> Term
distr :: Term
swap :: Term
coswap :: Term
assocr :: Term
coassocr :: Term
test :: Term
instance Typeable Term
instance Eq Term
instance Show Term
instance Data Term

module Language.Pointwise.Parser
hs2pw :: Exp -> Maybe Term
hsPat2Exp :: Pat -> Exp

module Language.Pointwise.Pretty
pw2hs :: Term -> Exp
mbParen :: Exp -> Exp
mbPParen :: Pat -> Pat

module Language.Pointwise.Matching
getVar :: String -> StateT Int Maybe String
nomatch :: Term -> StateT Int Maybe Term
mygroup :: (Eq a) => (a -> a -> Bool) -> [a] -> [[a]]
