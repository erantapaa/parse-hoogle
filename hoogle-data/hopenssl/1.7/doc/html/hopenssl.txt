-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | FFI bindings to OpenSSL's EVP digest interface
--   
--   Foreign-function bindings to the OpenSSL library
--   <a>http://www.openssl.org/</a>. Currently provides access to the
--   messages digests MD5, DSS, DSS1, RIPEMD160, and several variants of
--   SHA through the EVP digest interface.
@package hopenssl
@version 1.7


-- | This module proivdes a high-level API to the message digest algorithms
--   found in OpenSSL's <tt>crypto</tt> library. Link with
--   <tt>-lcrypto</tt> when using this module.
--   
--   Here is a short example program which runs all available digests on a
--   string:
--   
--   <pre>
--   example :: (Enum a) =&gt; [a] -&gt; IO [String]
--   example input = mapM hash [minBound .. maxBound]
--     where
--     hash f = fmap (fmt f) (digest f (toWord input))
--     fmt f  = shows f . (":    \t"++) . (&gt;&gt;=toHex)
--     toWord = map (toEnum . fromEnum)
--   </pre>
--   
--   And when called, the function prints:
--   
--   <pre>
--   *Digest&gt; example "open sesame" &gt;&gt;= putStr . unlines
--   Null:
--   MD5:       54ef36ec71201fdf9d1423fd26f97f6b
--   SHA:       2ccefef64c76ac0d42ca1657457977675890c42f
--   SHA1:      5bcaff7f22ff533ca099b3408ead876c0ebba9a7
--   DSS:       5bcaff7f22ff533ca099b3408ead876c0ebba9a7
--   DSS1:      5bcaff7f22ff533ca099b3408ead876c0ebba9a7
--   RIPEMD160: bdb2bba6ec93bd566dc1181cadbc92176aa78382
--   MDC2:      112db2200ce1e9db3c2d132aea4ef7d0
--   SHA224:    1ee0f9d93a873a67fe781852d716cb3e5904e015aafaa4d1ff1a81bc
--   SHA256:    41ef4bb0b23661e66301aac36066912dac037827b4ae63a7b1165a5aa93ed4eb
--   SHA384:    ae2a5d6649035c00efe2bc1b5c97f4d5ff97fa2df06f273afa0231c425e8aff30e4cc1db5e5756e8d2245a1514ad1a2d
--   SHA512:    8470cdd3bf1ef85d5f092bce5ae5af97ce50820481bf43b2413807fec37e2785b533a65d4c7d71695b141d81ebcd4b6c4def4284e6067f0b400000001b230205
--   </pre>
module OpenSSL.Digest

-- | The message digest algorithms we support.
data MessageDigest

-- | 0 bit
Null :: MessageDigest

-- | 128 bit
MD5 :: MessageDigest

-- | 160 bit
SHA :: MessageDigest

-- | 160 bit
SHA1 :: MessageDigest

-- | other name for SHA1
DSS :: MessageDigest

-- | other name for SHA1
DSS1 :: MessageDigest

-- | 160 bit
RIPEMD160 :: MessageDigest

-- | 128 bit
MDC2 :: MessageDigest

-- | 224 bit
SHA224 :: MessageDigest

-- | 256 bit
SHA256 :: MessageDigest

-- | 384 bit
SHA384 :: MessageDigest

-- | 512 bit
SHA512 :: MessageDigest

-- | A convenience wrapper which computes the given digest over a list of
--   <a>Word8</a>. Unlike the monadic interface, this function does not
--   allow the computation to be restarted.
digest :: MessageDigest -> [Word8] -> IO [Word8]

-- | A monadic interface to the digest computation.
type Digest a = StateT DigestState IO a

-- | The internal EVP context.
newtype DigestState
DST :: (Ptr OpaqueContext) -> DigestState

-- | Run an <a>IO</a> computation with an initialized <a>DigestState</a>.
--   All resources will be freed when the computation returns.
mkDigest :: MessageDigest -> (DigestState -> IO a) -> IO a

-- | Update the internal state with a block of data. This function is just
--   a wrapper for <a>update'</a>, which creates an array in memory using
--   <a>withArray</a>.
update :: [Word8] -> Digest ()

-- | Update the internal state with a block of data from memory. This is
--   the <i>faster</i> version of <a>update</a>.
update' :: (Ptr Word8, Int) -> Digest ()

-- | Wrap up the computation, add padding, do whatever has to be done, and
--   return the final hash. The length of the result depends on the chosen
--   <a>MessageDigest</a>. Do not call more than once!
final :: Digest [Word8]

-- | The EVP context used by OpenSSL is opaque for us; we only access it
--   through a <a>Ptr</a>.
data OpaqueContext
OpaqueContext :: OpaqueContext
type Context = Ptr OpaqueContext

-- | The message digest engines are opaque for us as well.
data OpaqueMDEngine
OpaqueMDEngine :: OpaqueMDEngine
type MDEngine = Ptr OpaqueMDEngine

-- | Maximum size of all message digests supported by OpenSSL. Allocate a
--   buffer of this size for <a>digestFinal</a> if you want to stay
--   generic.
maxMDSize :: Int

-- | Create an EVP context. May be <a>nullPtr</a>.
ctxCreate :: IO Context

-- | Initialize an EVP context.
ctxInit :: Context -> IO ()

-- | Destroy an EVP context and free the allocated resources.
ctxDestroy :: Context -> IO ()

-- | Set the message digest engine for <a>digestUpdate</a> calls. Returns
--   <tt>/=0</tt> in case of an error.
digestInit :: Context -> MDEngine -> IO CInt

-- | Update the internal context with a block of input. Returns
--   <tt>/=0</tt> in case of an error.
digestUpdate :: Context -> Ptr Word8 -> CUInt -> IO CInt

-- | Wrap up the digest computation and return the final digest. Do not
--   call repeatedly on the same context! Returns <tt>/=0</tt> in case of
--   an error. The pointer to the unsigned integer may be <a>nullPtr</a>.
--   If it is not, <a>digestFinal</a> will store the length of the computed
--   digest there.
digestFinal :: Context -> Ptr Word8 -> Ptr CUInt -> IO CInt
mdDSS :: IO MDEngine
mdDSS1 :: IO MDEngine
mdMD5 :: IO MDEngine
mdNull :: IO MDEngine
mdMDC2 :: IO MDEngine
mdRIPEMD160 :: IO MDEngine
mdSHA :: IO MDEngine
mdSHA1 :: IO MDEngine
mdSHA224 :: IO MDEngine
mdSHA256 :: IO MDEngine
mdSHA384 :: IO MDEngine
mdSHA512 :: IO MDEngine

-- | Map a <a>MessageDigest</a> type into the the corresponding
--   <a>MDEngine</a>.
toMDEngine :: MessageDigest -> IO MDEngine

-- | Neat helper to print digests with: <tt> \ws :: [Word8] -&gt; ws
--   &gt;&gt;= toHex </tt>
toHex :: Word8 -> String
instance Show MessageDigest
instance Eq MessageDigest
instance Enum MessageDigest
instance Bounded MessageDigest


-- | Wrappers for <a>OpenSSL.Digest</a> that supports <a>ByteString</a>.
module OpenSSL.Digest.ByteString

-- | A convenience wrapper which computes the given digest type of a
--   <a>ByteString</a>. Unlike the monadic interface, this function does
--   not allow the computation to be restarted.
digest :: MessageDigest -> ByteString -> IO [Word8]

-- | Update the internal state with a block of data.
update :: ByteString -> Digest Int


-- | Wrappers for <a>OpenSSL.Digest</a> that supports lazy
--   <a>ByteString</a>.
module OpenSSL.Digest.ByteString.Lazy

-- | A convenience wrapper which computes the given digest type of a
--   <a>ByteString</a>. Unlike the monadic interface, this function does
--   not allow the computation to be restarted.
digest :: MessageDigest -> ByteString -> IO [Word8]

-- | Update the internal state with a block of data.
update :: ByteString -> Digest Int
