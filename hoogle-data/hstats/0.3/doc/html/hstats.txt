-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Statistical Computing in Haskell
--   
--   A library of commonly used statistical functions
@package hstats
@version 0.3

module Math.Statistics

-- | Numerically stable mean
mean :: Floating a => [a] -> a

-- | Same as <a>mean</a>
average :: Floating a => [a] -> a

-- | Harmonic mean
harmean :: Floating a => [a] -> a

-- | Geometric mean
geomean :: Floating a => [a] -> a

-- | Median
median :: (Floating a, Ord a) => [a] -> a

-- | Modes returns a sorted list of modes in descending order
modes :: Ord a => [a] -> [(Int, a)]

-- | Mode returns the mode of the list, otherwise Nothing
mode :: Ord a => [a] -> Maybe a

-- | Central moments
centralMoment :: (Floating b, Integral t) => [b] -> t -> b

-- | Range
range :: (Num a, Ord a) => [a] -> a

-- | Average deviation
avgdev :: Floating a => [a] -> a

-- | Standard deviation of sample
stddev :: Floating a => [a] -> a

-- | Standard deviation of population
stddevp :: Floating a => [a] -> a

-- | Population variance
pvar :: Floating a => [a] -> a

-- | Sample variance
--   
--   Interquartile range
--   
--   Arbitrary quantile q of an unsorted list. The quantile <i>q</i> of
--   <i>N</i> |data points is the point whose (zero-based) index in the
--   sorted |data set is closest to <i>q(N-1)</i>.
quantile :: (Fractional b, Ord b) => Double -> [b] -> b

-- | As <a>quantile</a> specialized for sorted data
quantileAsc :: (Fractional b, Ord b) => Double -> [b] -> b

-- | Calculate skew
skew :: Floating b => [b] -> b

-- | Calculates pearson skew
pearsonSkew1 :: (Ord a, Floating a) => [a] -> a
pearsonSkew2 :: (Ord a, Floating a) => [a] -> a

-- | Sample Covariance
covar :: Floating a => [a] -> [a] -> a

-- | Covariance matrix
covMatrix :: Floating a => [[a]] -> [[a]]

-- | Pearson's product-moment correlation coefficient
pearson :: Floating a => [a] -> [a] -> a

-- | Same as <a>pearson</a>
correl :: Floating a => [a] -> [a] -> a

-- | Least-squares linear regression of <i>y</i> against <i>x</i> for a
--   |collection of (<i>x</i>, <i>y</i>) data, in the form of (<i>b0</i>,
--   <i>b1</i>, <i>r</i>) |where the regression is <i>y</i> = <i>b0</i> +
--   <i>b1</i> * <i>x</i> with Pearson |coefficient <i>r</i>
linreg :: Floating b => [(b, b)] -> (b, b, b)

-- | Returns the sum of square deviations from their sample mean.
devsq :: Floating a => [a] -> a
