-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Command-Query Responsibility Segregation. Modules for the basic types.
--   
--   Haskell implementation of the CQRS architectural pattern.
@package cqrs-types
@version 0.9.0


-- | Eventable type class.
module Data.CQRS.Eventable

-- | Type class for applying events to aggregates.
class Eventable a e | a -> e
applyEvent :: Eventable a e => Maybe a -> e -> Maybe a


-- | Serialization support. This is mainly used for compatibility with
--   whatever serialization library you want to use.
module Data.CQRS.Serializable

-- | Serialization support for values of type <tt>a</tt>.
class Serializable a
serialize :: Serializable a => a -> ByteString
deserialize :: Serializable a => ByteString -> Maybe a


-- | Globally Unique IDentifiers.
module Data.CQRS.GUID

-- | A Globally Unique IDentifier.
data GUID

-- | Convert from ByteString.
fromByteString :: ByteString -> GUID

-- | Decode a GUID from base64 representation.
base64Decode :: ByteString -> Maybe GUID

-- | Base64 encode a GUID.
base64Encode :: GUID -> ByteString

-- | Decode a GUID from hex representation.
hexDecode :: ByteString -> Maybe GUID

-- | Hex encode a GUID.
hexEncode :: GUID -> ByteString

-- | Create a new random GUID.
newGUID :: IO GUID

-- | Convert to ByteString.
toByteString :: GUID -> ByteString
instance NFData GUID
instance Typeable GUID
instance Eq GUID
instance Ord GUID
instance Data GUID
instance Show GUID
instance Serializable GUID

module Data.CQRS.PersistedEvent

-- | Persisted Event.
data PersistedEvent e
PersistedEvent :: !GUID -> !e -> !Int -> PersistedEvent e

-- | GUID of the aggregate.
peAggregateGUID :: PersistedEvent e -> !GUID

-- | Event.
peEvent :: PersistedEvent e -> !e

-- | Sequence number within the aggregate.
peSequenceNumber :: PersistedEvent e -> !Int
instance NFData e_1627421907 => NFData (PersistedEvent e_1627421907)
instance Show e => Show (PersistedEvent e)
instance Eq e => Eq (PersistedEvent e)
instance Ord e => Ord (PersistedEvent e)
instance Functor PersistedEvent


-- | Event store backend. You only need to import this module if you're
--   planning on implementing a custom event store backend.
module Data.CQRS.EventStore.Backend

-- | Event stores are the backend used for reading and storing all the
--   information about recorded events.
class EventStoreBackend esb
esbStoreEvents :: EventStoreBackend esb => esb -> GUID -> Int -> [RawEvent] -> IO ()
esbRetrieveEvents :: EventStoreBackend esb => esb -> GUID -> Int -> Source (ResourceT IO) RawEvent
esbEnumerateAllEvents :: EventStoreBackend esb => esb -> Source (ResourceT IO) RawEvent
esbWriteSnapshot :: EventStoreBackend esb => esb -> GUID -> RawSnapshot -> IO ()
esbGetLatestSnapshot :: EventStoreBackend esb => esb -> GUID -> IO (Maybe RawSnapshot)
esbWithTransaction :: EventStoreBackend esb => esb -> IO a -> IO a

-- | Raw event type. The data associated with an event is not translated in
--   any way.
type RawEvent = PersistedEvent ByteString

-- | Raw snapshot.
data RawSnapshot
RawSnapshot :: Int -> ByteString -> RawSnapshot
rsVersion :: RawSnapshot -> Int
rsSnapshotData :: RawSnapshot -> ByteString
instance Eq RawSnapshot
instance Ord RawSnapshot
instance Show RawSnapshot


-- | Aggregate type class.
module Data.CQRS.Aggregate

-- | Type class for aggregates.
class Serializable a => Aggregate a
