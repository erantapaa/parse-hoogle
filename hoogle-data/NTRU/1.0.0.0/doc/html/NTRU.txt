-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | NTRU Cryptography
--   
--   A Haskell implementation of the NTRU cryptographic system, following
--   the IEEE Standard Specification for Public Key Crpytographic
--   Techniques Based on Hard Problems over Lattices (IEEE Std 1363.1-2008)
@package NTRU
@version 1.0.0.0


-- | License : New BSD
--   
--   This is an implementation of the NTRU cryptographic system, following
--   the standard set forth by the IEEE in the document entitled IEEE
--   Standard Specification for Public Key Cryptographic Techniques Based
--   on Hard Problems over Lattices (IEEE Std 1363.1-2008). It is designed
--   to be compatible with the implementation of SecurityInnovations,
--   available <a>here</a>.
module Math.NTRU

-- | Generates a random PublicKey-PrivateKey Pair
keyGen :: ParamSet -> IO ([Integer], [Integer])

-- | Encrypts a message using the given parameter set
encrypt :: ParamSet -> [Integer] -> [Integer] -> IO [Integer]

-- | <ol>
--   <li>3.3 Decrypts e using the private key f and verifies it using the
--   public key h.</li>
--   </ol>
decrypt :: ParamSet -> [Integer] -> [Integer] -> [Integer] -> Maybe [Integer]

-- | Generates the proper parameter set based on the given bit level
genParams :: String -> ParamSet

-- | The Parameter Set Record
data ParamSet
ParamSet :: Int -> Integer -> Integer -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Integer -> Int -> [Int] -> Int -> Int -> ParamSet

-- | The size of the polynomials
getN :: ParamSet -> Int

-- | The small modulus p
getP :: ParamSet -> Integer

-- | The large modulus q
getQ :: ParamSet -> Integer

-- | The number of 1's in f
getDf :: ParamSet -> Int

-- | The number of 1's in g
getDg :: ParamSet -> Int

-- | The length of the encoded message length (should probably be 1)
getLLen :: ParamSet -> Int

-- | The number of random bits prefixed to the message
getDb :: ParamSet -> Int

-- | The max number of bytes in the message
getMaxMsgLenBytes :: ParamSet -> Int

-- | The size of the resulting message before conversion to trits
getBufferLenBits :: ParamSet -> Int

-- | The size of the resulting message after conversion to trits
getBufferLenTrits :: ParamSet -> Int

-- | Minimum number of 1's, -1's and 0's in the message for decryption to
--   succeed
getDm0 :: ParamSet -> Int

-- | SHA algorithm to use. Should be either 1 or 256
getShaLvl :: ParamSet -> Int

-- | The number of 1's in the blinding polynomial
getDr :: ParamSet -> Int

-- | Used by index generator function
getC :: ParamSet -> Int

-- | Used by mask generator
getMinCallsR :: ParamSet -> Integer

-- | Used by mask generator
getMinCallsMask :: ParamSet -> Int

-- | Parameter set ID
getOID :: ParamSet -> [Int]

-- | Used to create SData
getPkLen :: ParamSet -> Int

-- | Bit level security
getBitLvl :: ParamSet -> Int
instance Show ParamSet
instance (Num a, Eq a) => Num (Poly a)


-- | NTRU cryptographic system using the EES401EP1 parameter set, for use
--   at the 112-bit security level.
module Math.NTRU.EES401EP1

-- | Generates a random PublicKey-PrivateKey pair
keyGen :: IO ([Integer], [Integer])

-- | Encrypts a message with the given public key
encrypt :: [Integer] -> [Integer] -> IO [Integer]

-- | Decrypts and verifies a cyphertext with the given keys
decrypt :: [Integer] -> [Integer] -> [Integer] -> Maybe [Integer]


-- | NTRU cryptographic system using the EES449EP1 parameter set, for use
--   at the 128-bit security level.
module Math.NTRU.EES449EP1

-- | Generates a random PublicKey-PrivateKey pair
keyGen :: IO ([Integer], [Integer])

-- | Encrypts a message with the given public key
encrypt :: [Integer] -> [Integer] -> IO [Integer]

-- | Decrypts and verifies a cyphertext with the given keys
decrypt :: [Integer] -> [Integer] -> [Integer] -> Maybe [Integer]


-- | NTRU cryptographic system using the EES677EP1 parameter set, for use
--   at the 192-bit security level.
module Math.NTRU.EES677EP1

-- | Generates a random PublicKey-PrivateKey pair
keyGen :: IO ([Integer], [Integer])

-- | Encrypts a message with the given public key
encrypt :: [Integer] -> [Integer] -> IO [Integer]

-- | Decrypts and verifies a cyphertext with the given keys
decrypt :: [Integer] -> [Integer] -> [Integer] -> Maybe [Integer]


-- | NTRU cryptographic system using the EES1087EP2 parameter set, for use
--   at the 256-bit security level.
module Math.NTRU.EES1087EP2

-- | Generates a random PublicKey-PrivateKey pair
keyGen :: IO ([Integer], [Integer])

-- | Encrypts a message with the given public key
encrypt :: [Integer] -> [Integer] -> IO [Integer]

-- | Decrypts and verifies a cyphertext with the given keys
decrypt :: [Integer] -> [Integer] -> [Integer] -> Maybe [Integer]


-- | NTRU cryptographic system using the EES541EP1 parameter set, for use
--   at the 112-bit security level.
module Math.NTRU.EES541EP1

-- | Generates a random PublicKey-PrivateKey pair
keyGen :: IO ([Integer], [Integer])

-- | Encrypts a message with the given public key
encrypt :: [Integer] -> [Integer] -> IO [Integer]

-- | Decrypts and verifies a cyphertext with the given keys
decrypt :: [Integer] -> [Integer] -> [Integer] -> Maybe [Integer]


-- | NTRU cryptographic system using the EES613EP1 parameter set, for use
--   at the 128-bit security level.
module Math.NTRU.EES613EP1

-- | Generates a random PublicKey-PrivateKey pair
keyGen :: IO ([Integer], [Integer])

-- | Encrypts a message with the given public key
encrypt :: [Integer] -> [Integer] -> IO [Integer]

-- | Decrypts and verifies a cyphertext with the given keys
decrypt :: [Integer] -> [Integer] -> [Integer] -> Maybe [Integer]


-- | NTRU cryptographic system using the EES887EP1 parameter set, for use
--   at the 192-bit security level.
module Math.NTRU.EES887EP1

-- | Generates a random PublicKey-PrivateKey pair
keyGen :: IO ([Integer], [Integer])

-- | Encrypts a message with the given public key
encrypt :: [Integer] -> [Integer] -> IO [Integer]

-- | Decrypts and verifies a cyphertext with the given keys
decrypt :: [Integer] -> [Integer] -> [Integer] -> Maybe [Integer]


-- | NTRU cryptographic system using the EES1171EP1 parameter set, for use
--   at the 256-bit security level.
module Math.NTRU.EES1171EP1

-- | Generates a random PublicKey-PrivateKey pair
keyGen :: IO ([Integer], [Integer])

-- | Encrypts a message with the given public key
encrypt :: [Integer] -> [Integer] -> IO [Integer]

-- | Decrypts and verifies a cyphertext with the given keys
decrypt :: [Integer] -> [Integer] -> [Integer] -> Maybe [Integer]


-- | NTRU cryptographic system using the EES659EP1 parameter set, for use
--   at the 112-bit security level.
module Math.NTRU.EES659EP1

-- | Generates a random PublicKey-PrivateKey pair
keyGen :: IO ([Integer], [Integer])

-- | Encrypts a message with the given public key
encrypt :: [Integer] -> [Integer] -> IO [Integer]

-- | Decrypts and verifies a cyphertext with the given keys
decrypt :: [Integer] -> [Integer] -> [Integer] -> Maybe [Integer]


-- | NTRU cryptographic system using the EES761EP1 parameter set, for use
--   at the 128-bit security level.
module Math.NTRU.EES761EP1

-- | Generates a random PublicKey-PrivateKey pair
keyGen :: IO ([Integer], [Integer])

-- | Encrypts a message with the given public key
encrypt :: [Integer] -> [Integer] -> IO [Integer]

-- | Decrypts and verifies a cyphertext with the given keys
decrypt :: [Integer] -> [Integer] -> [Integer] -> Maybe [Integer]


-- | NTRU cryptographic system using the EES1087EP1 parameter set, for use
--   at the 192-bit security level.
module Math.NTRU.EES1087EP1

-- | Generates a random PublicKey-PrivateKey pair
keyGen :: IO ([Integer], [Integer])

-- | Encrypts a message with the given public key
encrypt :: [Integer] -> [Integer] -> IO [Integer]

-- | Decrypts and verifies a cyphertext with the given keys
decrypt :: [Integer] -> [Integer] -> [Integer] -> Maybe [Integer]


-- | NTRU cryptographic system using the EES1499EP1 parameter set, for use
--   at the 256-bit security level.
module Math.NTRU.EES1499EP1

-- | Generates a random PublicKey-PrivateKey pair
keyGen :: IO ([Integer], [Integer])

-- | Encrypts a message with the given public key
encrypt :: [Integer] -> [Integer] -> IO [Integer]

-- | Decrypts and verifies a cyphertext with the given keys
decrypt :: [Integer] -> [Integer] -> [Integer] -> Maybe [Integer]
