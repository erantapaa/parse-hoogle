-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell client library for InfluxDB
--   
@package influxdb
@version 0.9.1.3

module Database.InfluxDB.Stream

-- | Effectful stream
data Stream m a

-- | Yield a value. The stream will be continued.
Yield :: a -> (m (Stream m a)) -> Stream m a

-- | The end of the stream.
Done :: Stream m a

-- | Map each element of a stream to a monadic action, evaluate these
--   actions from left to right, and collect the results as a stream.
mapM :: Monad m => (a -> m b) -> Stream m a -> m (Stream m b)

-- | Monadic left fold for <a>Stream</a>.
fold :: Monad m => (b -> a -> m b) -> b -> Stream m a -> m b

-- | Strict version of <a>fold</a>.
fold' :: Monad m => (b -> a -> m b) -> b -> Stream m a -> m b

module Database.InfluxDB.Types

-- | A series consists of name, columns and points. The columns and points
--   are expressed in a separate type <a>SeriesData</a>.
data Series
Series :: {-# UNPACK #-} !Text -> {-# UNPACK #-} !SeriesData -> Series

-- | Series name
seriesName :: Series -> {-# UNPACK #-} !Text

-- | Columns and data points in the series
seriesData :: Series -> {-# UNPACK #-} !SeriesData

-- | Convenient accessor for columns.
seriesColumns :: Series -> Vector Column

-- | Convenient accessor for points.
seriesPoints :: Series -> [Vector Value]

-- | <a>SeriesData</a> consists of columns and points.
data SeriesData
SeriesData :: Vector Column -> [Vector Value] -> SeriesData
seriesDataColumns :: SeriesData -> Vector Column
seriesDataPoints :: SeriesData -> [Vector Value]
type Column = Text

-- | An InfluxDB value represented as a Haskell value.
data Value
Int :: !Int64 -> Value
Float :: !Double -> Value
String :: !Text -> Value
Bool :: !Bool -> Value
Null :: Value

-- | User credentials.
data Credentials
Credentials :: !Text -> !Text -> Credentials
credsUser :: Credentials -> !Text
credsPassword :: Credentials -> !Text

-- | Server location.
data Server
Server :: !Text -> !Int -> !Bool -> Server

-- | Hostname or IP address
serverHost :: Server -> !Text
serverPort :: Server -> !Int

-- | SSL is enabled or not in the server side
serverSsl :: Server -> !Bool
newtype Database
Database :: Text -> Database
databaseName :: Database -> Text

-- | User
data User
User :: Text -> Bool -> User
userName :: User -> Text
userIsAdmin :: User -> Bool

-- | Administrator
newtype Admin
Admin :: Text -> Admin
adminName :: Admin -> Text
newtype Ping
Ping :: Text -> Ping
pingStatus :: Ping -> Text
type Interface = Text
data ShardSpace
ShardSpace :: Maybe Text -> Text -> Text -> Text -> Text -> Word32 -> Word32 -> ShardSpace
shardSpaceDatabase :: ShardSpace -> Maybe Text
shardSpaceName :: ShardSpace -> Text
shardSpaceRegex :: ShardSpace -> Text
shardSpaceRetentionPolicy :: ShardSpace -> Text
shardSpaceShardDuration :: ShardSpace -> Text
shardSpaceReplicationFactor :: ShardSpace -> Word32
shardSpaceSplit :: ShardSpace -> Word32

-- | Non-empty set of server locations. The active server will always be
--   used until any HTTP communications fail.
data ServerPool
serverRetryPolicy :: ServerPool -> RetryPolicy

-- | <i>Deprecated: Use serverRetryPolicy instead</i>
serverRetrySettings :: ServerPool -> RetryPolicy

-- | Create a non-empty server pool. You must specify at least one server
--   location to create a pool.
newServerPool :: Server -> [Server] -> IO (IORef ServerPool)
newServerPoolWithRetryPolicy :: RetryPolicy -> Server -> [Server] -> IO (IORef ServerPool)

-- | <i>Deprecated: Use newServerPoolWithRetryPolicy instead</i>
newServerPoolWithRetrySettings :: RetryPolicy -> Server -> [Server] -> IO (IORef ServerPool)

-- | Get a server from the pool.
activeServer :: IORef ServerPool -> IO Server

-- | Move the current server to the backup pool and pick one of the backup
--   server as the new active server. Currently the scheduler works in
--   round-robin fashion.
failover :: IORef ServerPool -> IO ()
data InfluxException
JsonDecodeError :: String -> InfluxException
SeriesDecodeError :: String -> InfluxException
jsonDecodeError :: String -> IO a
seriesDecodeError :: String -> IO a
instance FromJSON ShardSpace
instance FromJSON Ping
instance FromJSON User
instance FromJSON Admin
instance FromJSON Database
instance Typeable Value
instance Typeable SeriesData
instance Typeable Series
instance Typeable Credentials
instance Typeable Server
instance Typeable ServerPool
instance Typeable Database
instance Typeable User
instance Typeable Admin
instance Typeable Ping
instance Typeable ShardSpace
instance Typeable InfluxException
instance Eq Value
instance Show Value
instance Data Value
instance Generic Value
instance Eq SeriesData
instance Show SeriesData
instance Generic SeriesData
instance Generic Series
instance Show Credentials
instance Generic Credentials
instance Show Server
instance Generic Server
instance Generic ServerPool
instance Show Database
instance Generic Database
instance Show User
instance Generic User
instance Show Admin
instance Generic Admin
instance Show Ping
instance Generic Ping
instance Show ShardSpace
instance Generic ShardSpace
instance Show InfluxException
instance Datatype D1Value
instance Constructor C1_0Value
instance Constructor C1_1Value
instance Constructor C1_2Value
instance Constructor C1_3Value
instance Constructor C1_4Value
instance Datatype D1SeriesData
instance Constructor C1_0SeriesData
instance Selector S1_0_0SeriesData
instance Selector S1_0_1SeriesData
instance Datatype D1Series
instance Constructor C1_0Series
instance Selector S1_0_0Series
instance Selector S1_0_1Series
instance Datatype D1Credentials
instance Constructor C1_0Credentials
instance Selector S1_0_0Credentials
instance Selector S1_0_1Credentials
instance Datatype D1Server
instance Constructor C1_0Server
instance Selector S1_0_0Server
instance Selector S1_0_1Server
instance Selector S1_0_2Server
instance Datatype D1ServerPool
instance Constructor C1_0ServerPool
instance Selector S1_0_0ServerPool
instance Selector S1_0_1ServerPool
instance Selector S1_0_2ServerPool
instance Datatype D1Database
instance Constructor C1_0Database
instance Selector S1_0_0Database
instance Datatype D1User
instance Constructor C1_0User
instance Selector S1_0_0User
instance Selector S1_0_1User
instance Datatype D1Admin
instance Constructor C1_0Admin
instance Selector S1_0_0Admin
instance Datatype D1Ping
instance Constructor C1_0Ping
instance Selector S1_0_0Ping
instance Datatype D1ShardSpace
instance Constructor C1_0ShardSpace
instance Selector S1_0_0ShardSpace
instance Selector S1_0_1ShardSpace
instance Selector S1_0_2ShardSpace
instance Selector S1_0_3ShardSpace
instance Selector S1_0_4ShardSpace
instance Selector S1_0_5ShardSpace
instance Selector S1_0_6ShardSpace
instance Exception InfluxException
instance FromJSON Value
instance ToJSON Value
instance FromJSON Series
instance ToJSON Series

module Database.InfluxDB.Encode

-- | A type that can be converted to a <a>Series</a>.
class ToSeries a
toSeries :: ToSeries a => a -> Series

-- | A type that can be converted to a <a>SeriesData</a>. A typical
--   implementation is as follows.
--   
--   <pre>
--   import qualified Data.Vector as V
--   
--   data Event = Event Text EventType
--   data EventType = Login | Logout
--   
--   instance ToSeriesData Event where
--     toSeriesColumn _ = V.fromList ["user", "type"]
--     toSeriesPoints (Event user ty) = V.fromList [toValue user, toValue ty]
--   
--   instance ToValue EventType
--   </pre>
class ToSeriesData a
toSeriesColumns :: ToSeriesData a => Proxy a -> Vector Column
toSeriesPoints :: ToSeriesData a => a -> Vector Value
toSeriesData :: ToSeriesData a => a -> SeriesData

-- | A type that can be stored in InfluxDB.
class ToValue a
toValue :: ToValue a => a -> Value
instance ToValue String
instance ToValue Text
instance ToValue Text
instance ToValue Double
instance ToValue Word32
instance ToValue Word16
instance ToValue Word8
instance ToValue Int64
instance ToValue Int32
instance ToValue Int16
instance ToValue Int8
instance ToValue Int
instance ToValue a => ToValue (Maybe a)
instance ToValue Bool
instance ToValue Value

module Database.InfluxDB.Decode

-- | A type that can be converted from a <a>Series</a>.
class FromSeries a
parseSeries :: FromSeries a => Series -> Parser a

-- | Converte a value from a <a>Series</a>, failing if the types do not
--   match.
fromSeries :: FromSeries a => Series -> Either String a

-- | A type that can be converted from a <a>SeriesData</a>. A typical
--   implementation is as follows.
--   
--   <pre>
--   import Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))
--   import qualified Data.Vector as V
--   
--   data Event = Event Text EventType
--   data EventType = Login | Logout
--   
--   instance FromSeriesData Event where
--     parseSeriesData = withValues $ \values -&gt; Event
--       &lt;$&gt; values .: "user"
--       &lt;*&gt; values .: "type"
--   
--   instance FromValue EventType
--   </pre>
class FromSeriesData a
parseSeriesData :: FromSeriesData a => Vector Column -> Vector Value -> Parser a

-- | Converte a value from a <a>SeriesData</a>, failing if the types do not
--   match.
fromSeriesData :: FromSeriesData a => SeriesData -> Either String [a]

-- | Same as <tt>fromSeriesData</tt> but ignores parse errors and returns
--   only successful data.
fromSeriesData_ :: FromSeriesData a => SeriesData -> [a]

-- | Helper function to define <a>parseSeriesData</a> from
--   <a>ValueParser</a>s.
withValues :: (Vector Value -> ValueParser a) -> Vector Column -> Vector Value -> Parser a

-- | Retrieve the value associated with the given column. The result is
--   <a>empty</a> if the column is not present or the value cannot be
--   converted to the desired type.
(.:) :: FromValue a => Vector Value -> Column -> ValueParser a

-- | Retrieve the value associated with the given column. The result is
--   <a>Nothing</a> if the column is not present or the value cannot be
--   converted to the desired type.
(.:?) :: FromValue a => Vector Value -> Column -> ValueParser (Maybe a)

-- | Helper for use in combination with <a>.:?</a> to provide default
--   values for optional columns.
(.!=) :: Parser (Maybe a) -> a -> Parser a

-- | A type that can be converted from a <a>Value</a>.
class FromValue a
parseValue :: FromValue a => Value -> Parser a

-- | Converte a value from a <a>Value</a>, failing if the types do not
--   match.
fromValue :: FromValue a => Value -> Either String a
data Parser a
data ValueParser a
typeMismatch :: String -> Value -> Parser a
instance Functor Parser
instance Applicative Parser
instance Monad Parser
instance Functor ValueParser
instance Applicative ValueParser
instance Monad ValueParser
instance MonadReader ColumnIndex ValueParser
instance FromValue String
instance FromValue Text
instance FromValue Text
instance FromValue Double
instance FromValue Word32
instance FromValue Word16
instance FromValue Word8
instance FromValue Int64
instance FromValue Int32
instance FromValue Int16
instance FromValue Int8
instance FromValue Int
instance FromValue a => FromValue (Maybe a)
instance FromValue Bool
instance FromValue Value
instance FromSeriesData SeriesData
instance FromSeries SeriesData
instance FromSeries Series

module Database.InfluxDB.Http

-- | Configurations for HTTP API client.
data Config
Config :: !Credentials -> !(IORef ServerPool) -> !Manager -> Config
configCreds :: Config -> !Credentials
configServerPool :: Config -> !(IORef ServerPool)
configHttpManager :: Config -> !Manager

-- | User credentials.
data Credentials
Credentials :: !Text -> !Text -> Credentials
credsUser :: Credentials -> !Text
credsPassword :: Credentials -> !Text

-- | Default credentials.
rootCreds :: Credentials

-- | Server location.
data Server
Server :: !Text -> !Int -> !Bool -> Server

-- | Hostname or IP address
serverHost :: Server -> !Text
serverPort :: Server -> !Int

-- | SSL is enabled or not in the server side
serverSsl :: Server -> !Bool

-- | Default server location.
localServer :: Server
data TimePrecision
SecondsPrecision :: TimePrecision
MillisecondsPrecision :: TimePrecision
MicrosecondsPrecision :: TimePrecision

-- | Post a bunch of writes for (possibly multiple) series into a database.
post :: Config -> Text -> SeriesT IO a -> IO a

-- | Post a bunch of writes for (possibly multiple) series into a database
--   like <a>post</a> but with time precision.
postWithPrecision :: Config -> Text -> TimePrecision -> SeriesT IO a -> IO a

-- | Monad transformer to batch up multiple writes of series to speed up
--   insertions.
data SeriesT m a

-- | Monad transformer to batch up multiple writes of points to speed up
--   insertions.
data PointT p m a

-- | Write a single series data.
writeSeries :: (Monad m, ToSeriesData a) => Text -> a -> SeriesT m ()

-- | Write a single series data.
writeSeriesData :: Monad m => Text -> SeriesData -> SeriesT m ()

-- | Write a bunch of data for a single series. Columns for the points
--   don't need to be specified because they can be inferred from the type
--   of <tt>a</tt>.
withSeries :: (Monad m, ToSeriesData a) => Text -> PointT a m () -> SeriesT m ()

-- | Write a data into a series.
writePoints :: (Monad m, ToSeriesData a) => a -> PointT a m ()
deleteSeries :: Config -> Text -> Text -> IO ()

-- | Query a specified database.
--   
--   The query format is specified in the <a>InfluxDB Query Language</a>.
query :: FromSeries a => Config -> Text -> Text -> IO [a]

-- | Effectful stream
data Stream m a

-- | Yield a value. The stream will be continued.
Yield :: a -> (m (Stream m a)) -> Stream m a

-- | The end of the stream.
Done :: Stream m a

-- | Query a specified database like <a>query</a> but in a streaming
--   fashion.
queryChunked :: FromSeries a => Config -> Text -> Text -> (Stream IO a -> IO b) -> IO b

-- | List existing databases.
listDatabases :: Config -> IO [Database]

-- | Create a new database. Requires cluster admin privileges.
createDatabase :: Config -> Text -> IO ()

-- | Drop a database. Requires cluster admin privileges.
dropDatabase :: Config -> Text -> IO ()
data DatabaseRequest
DatabaseRequest :: [ShardSpaceRequest] -> [Text] -> DatabaseRequest
databaseRequestSpaces :: DatabaseRequest -> [ShardSpaceRequest]
databaseRequestContinuousQueries :: DatabaseRequest -> [Text]
configureDatabase :: Config -> Text -> DatabaseRequest -> IO ()
data ShardSpaceRequest
ShardSpaceRequest :: Text -> Text -> Text -> Text -> Word32 -> Word32 -> ShardSpaceRequest
shardSpaceRequestName :: ShardSpaceRequest -> Text
shardSpaceRequestRegex :: ShardSpaceRequest -> Text
shardSpaceRequestRetentionPolicy :: ShardSpaceRequest -> Text
shardSpaceRequestShardDuration :: ShardSpaceRequest -> Text
shardSpaceRequestReplicationFactor :: ShardSpaceRequest -> Word32
shardSpaceRequestSplit :: ShardSpaceRequest -> Word32

-- | List shard spaces.
listShardSpaces :: Config -> IO [ShardSpace]

-- | Create a shard space.
createShardSpace :: Config -> Text -> ShardSpaceRequest -> IO ()
dropShardSpace :: Config -> Text -> Text -> IO ()

-- | List cluster administrators.
listClusterAdmins :: Config -> IO [Admin]
authenticateClusterAdmin :: Config -> IO ()

-- | Add a new cluster administrator. Requires cluster admin privilege.
addClusterAdmin :: Config -> Text -> Text -> IO Admin

-- | Update a cluster administrator's password. Requires cluster admin
--   privilege.
updateClusterAdminPassword :: Config -> Admin -> Text -> IO ()

-- | Delete a cluster administrator. Requires cluster admin privilege.
deleteClusterAdmin :: Config -> Admin -> IO ()

-- | List database users.
listDatabaseUsers :: Config -> Text -> IO [User]
authenticateDatabaseUser :: Config -> Text -> IO ()

-- | Add an user to the database users.
addDatabaseUser :: Config -> Text -> Text -> Text -> IO ()

-- | Update password for the database user.
updateDatabaseUserPassword :: Config -> Text -> Text -> Text -> IO ()

-- | Delete an user from the database users.
deleteDatabaseUser :: Config -> Text -> Text -> IO ()

-- | Give admin privilege to the user.
grantAdminPrivilegeTo :: Config -> Text -> Text -> IO ()

-- | Remove admin privilege from the user.
revokeAdminPrivilegeFrom :: Config -> Text -> Text -> IO ()
ping :: Config -> IO Ping
isInSync :: Config -> IO Bool
instance ToJSON DatabaseRequest
instance ToJSON ShardSpaceRequest
instance Functor m => Functor (SeriesT m)
instance Applicative m => Applicative (SeriesT m)
instance Monad m => Monad (SeriesT m)
instance MonadIO m => MonadIO (SeriesT m)
instance MonadTrans SeriesT
instance Monad m => MonadWriter (DList Series) (SeriesT m)
instance Functor m => Functor (PointT p m)
instance Applicative m => Applicative (PointT p m)
instance Monad m => Monad (PointT p m)
instance MonadIO m => MonadIO (PointT p m)
instance MonadTrans (PointT p)
instance Monad m => MonadWriter (DList (Vector Value)) (PointT p m)
instance Show ShardSpaceRequest
instance Show DatabaseRequest

module Database.InfluxDB.Lens
type Lens s t a b = forall f. Functor f => (a -> f b) -> s -> f t
type Lens' s a = Lens s s a a

-- | User credentials for authentication
credentials :: Lens' Config Credentials

-- | An instance of <a>Manager</a> from <tt>http-client</tt> package
httpManager :: Lens' Config Manager

-- | User name to be used for authentication
user :: Lens' Credentials Text

-- | Password to be used for authentication
password :: Lens' Credentials Text

-- | Host name or IP address of an InfluxDB
host :: Lens' Server Text

-- | Port number to be used to connect to an InfluxDB
port :: Lens' Server Int

-- | Whether or not to enable SSL connection
ssl :: Lens' Server Bool

module Database.InfluxDB.TH
data Options
Options :: (String -> String) -> Options
fieldLabelModifier :: Options -> String -> String
defaultOptions :: Options
deriveSeriesData :: Options -> Name -> Q [Dec]
deriveToSeriesData :: Options -> Name -> Q [Dec]
deriveFromSeriesData :: Options -> Name -> Q [Dec]

-- | Strip the prefix then convert to <tt>lowerCamelCase</tt>.
stripPrefixLower :: String -> String -> String

-- | Strip the prefix then convert to <tt>snake_case</tt>.
stripPrefixSnake :: String -> String -> String

module Database.InfluxDB

-- | A series consists of name, columns and points. The columns and points
--   are expressed in a separate type <a>SeriesData</a>.
data Series
Series :: {-# UNPACK #-} !Text -> {-# UNPACK #-} !SeriesData -> Series

-- | Series name
seriesName :: Series -> {-# UNPACK #-} !Text

-- | Columns and data points in the series
seriesData :: Series -> {-# UNPACK #-} !SeriesData

-- | Convenient accessor for columns.
seriesColumns :: Series -> Vector Column

-- | Convenient accessor for points.
seriesPoints :: Series -> [Vector Value]

-- | <a>SeriesData</a> consists of columns and points.
data SeriesData
SeriesData :: Vector Column -> [Vector Value] -> SeriesData
seriesDataColumns :: SeriesData -> Vector Column
seriesDataPoints :: SeriesData -> [Vector Value]

-- | An InfluxDB value represented as a Haskell value.
data Value
Int :: !Int64 -> Value
Float :: !Double -> Value
String :: !Text -> Value
Bool :: !Bool -> Value
Null :: Value

-- | A type that can be converted to a <a>SeriesData</a>. A typical
--   implementation is as follows.
--   
--   <pre>
--   import qualified Data.Vector as V
--   
--   data Event = Event Text EventType
--   data EventType = Login | Logout
--   
--   instance ToSeriesData Event where
--     toSeriesColumn _ = V.fromList ["user", "type"]
--     toSeriesPoints (Event user ty) = V.fromList [toValue user, toValue ty]
--   
--   instance ToValue EventType
--   </pre>
class ToSeriesData a
toSeriesColumns :: ToSeriesData a => Proxy a -> Vector Column
toSeriesPoints :: ToSeriesData a => a -> Vector Value

-- | A type that can be stored in InfluxDB.
class ToValue a
toValue :: ToValue a => a -> Value

-- | A type that can be converted from a <a>Series</a>.
class FromSeries a
parseSeries :: FromSeries a => Series -> Parser a

-- | Converte a value from a <a>Series</a>, failing if the types do not
--   match.
fromSeries :: FromSeries a => Series -> Either String a

-- | A type that can be converted from a <a>SeriesData</a>. A typical
--   implementation is as follows.
--   
--   <pre>
--   import Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))
--   import qualified Data.Vector as V
--   
--   data Event = Event Text EventType
--   data EventType = Login | Logout
--   
--   instance FromSeriesData Event where
--     parseSeriesData = withValues $ \values -&gt; Event
--       &lt;$&gt; values .: "user"
--       &lt;*&gt; values .: "type"
--   
--   instance FromValue EventType
--   </pre>
class FromSeriesData a
parseSeriesData :: FromSeriesData a => Vector Column -> Vector Value -> Parser a

-- | Converte a value from a <a>SeriesData</a>, failing if the types do not
--   match.
fromSeriesData :: FromSeriesData a => SeriesData -> Either String [a]

-- | A type that can be converted from a <a>Value</a>.
class FromValue a
parseValue :: FromValue a => Value -> Parser a

-- | Converte a value from a <a>Value</a>, failing if the types do not
--   match.
fromValue :: FromValue a => Value -> Either String a

-- | Helper function to define <a>parseSeriesData</a> from
--   <a>ValueParser</a>s.
withValues :: (Vector Value -> ValueParser a) -> Vector Column -> Vector Value -> Parser a

-- | Retrieve the value associated with the given column. The result is
--   <a>empty</a> if the column is not present or the value cannot be
--   converted to the desired type.
(.:) :: FromValue a => Vector Value -> Column -> ValueParser a

-- | Retrieve the value associated with the given column. The result is
--   <a>Nothing</a> if the column is not present or the value cannot be
--   converted to the desired type.
(.:?) :: FromValue a => Vector Value -> Column -> ValueParser (Maybe a)

-- | Helper for use in combination with <a>.:?</a> to provide default
--   values for optional columns.
(.!=) :: Parser (Maybe a) -> a -> Parser a
typeMismatch :: String -> Value -> Parser a

-- | Configurations for HTTP API client.
data Config
Config :: !Credentials -> !(IORef ServerPool) -> !Manager -> Config
configCreds :: Config -> !Credentials
configServerPool :: Config -> !(IORef ServerPool)
configHttpManager :: Config -> !Manager

-- | User credentials.
data Credentials
Credentials :: !Text -> !Text -> Credentials
credsUser :: Credentials -> !Text
credsPassword :: Credentials -> !Text

-- | Default credentials.
rootCreds :: Credentials
data TimePrecision
SecondsPrecision :: TimePrecision
MillisecondsPrecision :: TimePrecision
MicrosecondsPrecision :: TimePrecision

-- | Server location.
data Server
Server :: !Text -> !Int -> !Bool -> Server

-- | Hostname or IP address
serverHost :: Server -> !Text
serverPort :: Server -> !Int

-- | SSL is enabled or not in the server side
serverSsl :: Server -> !Bool

-- | Default server location.
localServer :: Server

-- | Non-empty set of server locations. The active server will always be
--   used until any HTTP communications fail.
data ServerPool

-- | Create a non-empty server pool. You must specify at least one server
--   location to create a pool.
newServerPool :: Server -> [Server] -> IO (IORef ServerPool)
newServerPoolWithRetryPolicy :: RetryPolicy -> Server -> [Server] -> IO (IORef ServerPool)

-- | <i>Deprecated: Use newServerPoolWithRetryPolicy instead</i>
newServerPoolWithRetrySettings :: RetryPolicy -> Server -> [Server] -> IO (IORef ServerPool)
newtype Database
Database :: Text -> Database
databaseName :: Database -> Text

-- | User
data User
User :: Text -> Bool -> User
userName :: User -> Text
userIsAdmin :: User -> Bool

-- | Administrator
newtype Admin
Admin :: Text -> Admin
adminName :: Admin -> Text
newtype Ping
Ping :: Text -> Ping
pingStatus :: Ping -> Text
data ShardSpace
ShardSpace :: Maybe Text -> Text -> Text -> Text -> Text -> Word32 -> Word32 -> ShardSpace
shardSpaceDatabase :: ShardSpace -> Maybe Text
shardSpaceName :: ShardSpace -> Text
shardSpaceRegex :: ShardSpace -> Text
shardSpaceRetentionPolicy :: ShardSpace -> Text
shardSpaceShardDuration :: ShardSpace -> Text
shardSpaceReplicationFactor :: ShardSpace -> Word32
shardSpaceSplit :: ShardSpace -> Word32
data InfluxException
JsonDecodeError :: String -> InfluxException
SeriesDecodeError :: String -> InfluxException

-- | Post a bunch of writes for (possibly multiple) series into a database.
post :: Config -> Text -> SeriesT IO a -> IO a

-- | Post a bunch of writes for (possibly multiple) series into a database
--   like <a>post</a> but with time precision.
postWithPrecision :: Config -> Text -> TimePrecision -> SeriesT IO a -> IO a

-- | Monad transformer to batch up multiple writes of series to speed up
--   insertions.
data SeriesT m a

-- | Monad transformer to batch up multiple writes of points to speed up
--   insertions.
data PointT p m a

-- | Write a single series data.
writeSeries :: (Monad m, ToSeriesData a) => Text -> a -> SeriesT m ()

-- | Write a single series data.
writeSeriesData :: Monad m => Text -> SeriesData -> SeriesT m ()

-- | Write a bunch of data for a single series. Columns for the points
--   don't need to be specified because they can be inferred from the type
--   of <tt>a</tt>.
withSeries :: (Monad m, ToSeriesData a) => Text -> PointT a m () -> SeriesT m ()

-- | Write a data into a series.
writePoints :: (Monad m, ToSeriesData a) => a -> PointT a m ()
deleteSeries :: Config -> Text -> Text -> IO ()

-- | Query a specified database.
--   
--   The query format is specified in the <a>InfluxDB Query Language</a>.
query :: FromSeries a => Config -> Text -> Text -> IO [a]

-- | Effectful stream
data Stream m a

-- | Yield a value. The stream will be continued.
Yield :: a -> (m (Stream m a)) -> Stream m a

-- | The end of the stream.
Done :: Stream m a

-- | Query a specified database like <a>query</a> but in a streaming
--   fashion.
queryChunked :: FromSeries a => Config -> Text -> Text -> (Stream IO a -> IO b) -> IO b

-- | List existing databases.
listDatabases :: Config -> IO [Database]

-- | Create a new database. Requires cluster admin privileges.
createDatabase :: Config -> Text -> IO ()

-- | Drop a database. Requires cluster admin privileges.
dropDatabase :: Config -> Text -> IO ()
data DatabaseRequest
DatabaseRequest :: [ShardSpaceRequest] -> [Text] -> DatabaseRequest
databaseRequestSpaces :: DatabaseRequest -> [ShardSpaceRequest]
databaseRequestContinuousQueries :: DatabaseRequest -> [Text]
configureDatabase :: Config -> Text -> DatabaseRequest -> IO ()
data ShardSpaceRequest
ShardSpaceRequest :: Text -> Text -> Text -> Text -> Word32 -> Word32 -> ShardSpaceRequest
shardSpaceRequestName :: ShardSpaceRequest -> Text
shardSpaceRequestRegex :: ShardSpaceRequest -> Text
shardSpaceRequestRetentionPolicy :: ShardSpaceRequest -> Text
shardSpaceRequestShardDuration :: ShardSpaceRequest -> Text
shardSpaceRequestReplicationFactor :: ShardSpaceRequest -> Word32
shardSpaceRequestSplit :: ShardSpaceRequest -> Word32

-- | List shard spaces.
listShardSpaces :: Config -> IO [ShardSpace]

-- | Create a shard space.
createShardSpace :: Config -> Text -> ShardSpaceRequest -> IO ()
dropShardSpace :: Config -> Text -> Text -> IO ()

-- | List cluster administrators.
listClusterAdmins :: Config -> IO [Admin]
authenticateClusterAdmin :: Config -> IO ()

-- | Add a new cluster administrator. Requires cluster admin privilege.
addClusterAdmin :: Config -> Text -> Text -> IO Admin

-- | Update a cluster administrator's password. Requires cluster admin
--   privilege.
updateClusterAdminPassword :: Config -> Admin -> Text -> IO ()

-- | Delete a cluster administrator. Requires cluster admin privilege.
deleteClusterAdmin :: Config -> Admin -> IO ()

-- | List database users.
listDatabaseUsers :: Config -> Text -> IO [User]
authenticateDatabaseUser :: Config -> Text -> IO ()

-- | Add an user to the database users.
addDatabaseUser :: Config -> Text -> Text -> Text -> IO ()

-- | Update password for the database user.
updateDatabaseUserPassword :: Config -> Text -> Text -> Text -> IO ()

-- | Delete an user from the database users.
deleteDatabaseUser :: Config -> Text -> Text -> IO ()

-- | Give admin privilege to the user.
grantAdminPrivilegeTo :: Config -> Text -> Text -> IO ()

-- | Remove admin privilege from the user.
revokeAdminPrivilegeFrom :: Config -> Text -> Text -> IO ()
ping :: Config -> IO Ping
isInSync :: Config -> IO Bool
