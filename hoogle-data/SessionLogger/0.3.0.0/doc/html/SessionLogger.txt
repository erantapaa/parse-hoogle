-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Easy Loggingframework
--   
--   Logger is a framework for making logging, especially web request,
--   easy. It supports a special file hierachy where every request has its
--   own directory with a main log file and serveral other files worth to
--   log. In addition there is a main log file with important messages and
--   an info file for things like performance meassuring. These two files
--   are avaliable for each day separately.
@package SessionLogger
@version 0.3.0.0


-- | Example of Usage:
--   
--   <pre>
--   runIOLogger <a>Applicationname</a> $ do
--     initLogger
--     logNotice <a>Just a small notice</a>
--     logWarn <a>Something more important</a>
--     logData <a>filename</a> <a>Logfile Info</a> <a>data which is logged to file</a>
--   </pre>
module System.Log.SessionLogger
(>>>=) :: (MonadIO m, MonadReader LoggerData (Logger m), Show a) => String -> IO a -> Logger m a
(>>>>=) :: (MonadIO m, MonadReader LoggerData (Logger m), Show a) => String -> IO a -> Logger m a
data LoggerData
LoggerData :: String -> String -> [ExtraData] -> Bool -> LoggerData
ld_logId :: LoggerData -> String
ld_appName :: LoggerData -> String
ld_extraDatas :: LoggerData -> [ExtraData]
ld_nolog :: LoggerData -> Bool
type ExtraData = [String]
newtype Logger m a
Logger :: (ReaderT LoggerData m a) -> Logger m a
initLogger :: MonadIO m => Logger m ()
testLogger :: MonadIO m => Logger m a -> m a
runIOLogger :: MonadIO m => String -> Logger m a -> m a
withExtraData :: Monad m => ExtraData -> Logger m a -> Logger m a
logNotice :: MonadIO m => String -> Logger m ()
logInfo :: MonadIO m => String -> Logger m ()
logWarn :: MonadIO m => String -> Logger m ()
logError :: MonadIO m => String -> Logger m ()
logInternalInfo :: MonadIO m => String -> Logger m ()
logData :: MonadIO m => String -> String -> String -> Logger m ()
logGlobInfo :: MonadIO m => String -> Logger m ()
getLogId :: Monad m => Logger m String
generateLogId :: IO String
instance Monad m => Monad (Logger m)
instance MonadIO m => MonadIO (Logger m)
instance MonadTrans Logger
