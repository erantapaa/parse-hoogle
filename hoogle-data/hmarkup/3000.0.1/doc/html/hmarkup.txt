-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple wikitext-like markup format implementation.
--   
--   This package implements a simple extensible wikitext-like markup
--   format. Currently the only implemented output format is XHTML.
@package hmarkup
@version 3000.0.1

module Text.HMarkup.Types
newtype Doc
Doc :: [Block] -> Doc
data Block
Chunk :: String -> String -> Block
Header :: Int -> [Text] -> Block
Para :: [Text] -> Block
ItemList :: [[Text]] -> Block
data Text
Emph :: [Text] -> Text
TT :: [Text] -> Text
Ref :: URI -> [Text] -> Text
Word :: String -> Text
WhiteSpace :: Text
instance Show Text
instance Show Block
instance Show Doc


-- | Markup parsing.
module Text.HMarkup.Parse
parseMarkup :: Monad m => String -> String -> m Doc
pMarkup :: Parser Doc
pBlock :: Parser Block
pChunk :: Parser Block
anyCharToUnixNL :: Parser Char
pHeader :: Parser Block
pItemList :: Parser Block
pItem :: Parser [Text]
pPara :: Parser Block
endBlock :: Parser ()
pText :: Parser [Text]
pTextsTill :: Parser a -> Parser [Text]
pEmph :: Parser Text
pTT :: Parser Text
pRef :: Parser Text
pWord :: Parser Text
pIdent :: Parser String
pURI :: Parser URI
pToken :: Parser String
pTokenPiece :: Parser String
isSpecial :: Char -> Bool
pEsc :: Parser Char
pEntity :: Parser String
numEntity :: Parser Char
namedEntity :: Parser String
nl :: Parser ()
sp :: Parser ()
sps :: Parser ()
white :: Parser Bool
skipWhite :: Parser ()
manyTill1 :: GenParser tok st a -> GenParser tok st end -> GenParser tok st [a]
followedBy :: Monad m => m a -> m b -> m a
pDecInt :: Parser Int
pHexInt :: Parser Int
inFirstColumn :: GenParser tok st a -> GenParser tok st a


-- | Converting markup to HTML
module Text.HMarkup.XHtml
docToHtml :: Monad m => MarkupXHtmlPrefs m -> Doc -> m Html
data MarkupXHtmlPrefs m
MarkupXHtmlPrefs :: [MarkupXHtmlFormat m] -> Maybe URI -> MarkupXHtmlPrefs m
markupFormats :: MarkupXHtmlPrefs m -> [MarkupXHtmlFormat m]

-- | If set, all relative URIs will be resolved with this as a base.
markupBaseURI :: MarkupXHtmlPrefs m -> Maybe URI
data MarkupXHtmlFormat m
ChunkFormat :: String -> (MarkupXHtmlPrefs m -> String -> m Html) -> MarkupXHtmlFormat m
formatName :: MarkupXHtmlFormat m -> String
formatChunk :: MarkupXHtmlFormat m -> MarkupXHtmlPrefs m -> String -> m Html
RefFormat :: String -> (MarkupXHtmlPrefs m -> URI -> [Text] -> m Html) -> MarkupXHtmlFormat m
formatName :: MarkupXHtmlFormat m -> String
formatRef :: MarkupXHtmlFormat m -> MarkupXHtmlPrefs m -> URI -> [Text] -> m Html
standardMarkupFormats :: Monad m => [MarkupXHtmlFormat m]
defaultMarkupXHtmlPrefs :: Monad m => MarkupXHtmlPrefs m
markupURL :: Monad m => MarkupXHtmlPrefs m -> URI -> URL
markupURI :: Monad m => MarkupXHtmlPrefs m -> URI -> URI
useChunkFormat :: Monad m => MarkupXHtmlPrefs m -> String -> String -> m Html
useRefFormat :: Monad m => MarkupXHtmlPrefs m -> String -> URI -> [Text] -> m Html

module Text.HMarkup
data MarkupXHtmlPrefs m
MarkupXHtmlPrefs :: [MarkupXHtmlFormat m] -> Maybe URI -> MarkupXHtmlPrefs m
markupFormats :: MarkupXHtmlPrefs m -> [MarkupXHtmlFormat m]

-- | If set, all relative URIs will be resolved with this as a base.
markupBaseURI :: MarkupXHtmlPrefs m -> Maybe URI
data MarkupXHtmlFormat m

-- | Parse some markup and format it as HTML.
markupToHtml :: Monad m => MarkupXHtmlPrefs m -> String -> m (Either String Html)
defaultMarkupXHtmlPrefs :: Monad m => MarkupXHtmlPrefs m
standardMarkupFormats :: Monad m => [MarkupXHtmlFormat m]
