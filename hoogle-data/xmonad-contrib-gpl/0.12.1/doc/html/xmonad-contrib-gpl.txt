-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Third party extensions for xmonad
--   
@package xmonad-contrib-gpl
@version 0.12.1


-- | Functions for saving and retriving arbitary data in windows.
--   
--   This module have advantage over <a>TagWindows</a> in that it hides
--   from you implementation details and provides simple type-safe
--   interface.
module XMonad.Util.WindowState2

-- | Lift Query to StateQuery.
stateQuery :: Query a -> StateQuery s a
unstate :: StateQuery s a -> Query a

-- | Same, as "runQuery".
runStateQuery :: StateQuery s a -> Window -> X a

-- | Return the state from the internals of the monad.
get :: MonadState s m => m s

-- | Replace the state inside the monad.
put :: MonadState s m => s -> m ()

-- | Monadic state transformer.
--   
--   Maps an old state to a new state inside a state monad. The old state
--   is thrown away.
--   
--   <pre>
--   Main&gt; :t modify ((+1) :: Int -&gt; Int)
--   modify (...) :: (MonadState Int a) =&gt; a ()
--   </pre>
--   
--   This says that <tt>modify (+1)</tt> acts over any Monad that is a
--   member of the <tt>MonadState</tt> class, with an <tt>Int</tt> state.
modify :: MonadState s m => (s -> s) -> m ()
instance MonadIO (StateQuery s)
instance Monad (StateQuery s)
instance Functor (StateQuery s)
instance (Show s, Read s, Typeable s) => MonadState (Maybe s) (StateQuery s)
instance Applicative (StateQuery s)


-- | Log hook, that will be run, when focused <a>Window</a> is changed.
module XMonad.Hooks.FocusSwitch
focusSwitch :: (Maybe Window -> X ()) -> X ()
instance Typeable FocusedWindow
instance Eq FocusedWindow
instance ExtensionClass (Maybe FocusedWindow)
