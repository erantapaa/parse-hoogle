-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Chinese/Mandarin <-> English dictionary, Chinese lexer.
--   
@package cndict
@version 0.6.1

module Data.Chinese.Frequency
type SubtlexMap = Map ByteString RawEntry
data SubtlexEntry
SubtlexEntry :: !Int -> !Text -> !Int -> !Double -> SubtlexEntry
subtlexIndex :: SubtlexEntry -> !Int
subtlexWord :: SubtlexEntry -> !Text
subtlexWCount :: SubtlexEntry -> !Int
subtlexWMillion :: SubtlexEntry -> !Double
subtlex :: SubtlexMap
lookup :: Text -> SubtlexMap -> Maybe SubtlexEntry
instance Show SubtlexEntry

module Data.Chinese.Pinyin
restoreUmlaut :: Text -> Text
toToneMarks :: Text -> Text
fromToneMarks :: Text -> Text
clearToneMarks :: Text -> Text


-- | Simplified Chinese <a>-</a> English dictionary with pinyin phonetics.
module Data.Chinese.CCDict
type CCDict = IntMap CCTrieEntry

-- | Dictionary entry
data Entry
Entry :: !Text -> !Text -> [Text] -> [[Text]] -> Entry
entrySimplified :: Entry -> !Text
entryTraditional :: Entry -> !Text
entryPinyin :: Entry -> [Text]
entryDefinition :: Entry -> [[Text]]

-- | Load dictionary from file.
load :: FilePath -> IO CCDict

-- | Load dictionary from unicode text.
parse :: Text -> CCDict

-- | O(n). Lookup dictionary entry for a string of simplified chinese.
lookup :: Text -> CCDict -> Maybe Entry

-- | Embedded dictionary.
ccDict :: CCDict
data Token
KnownWord :: Entry -> Token
UnknownWord :: Text -> Token

-- | Break a string of simplified chinese down to a list of tokens.
tokenizer :: CCDict -> Text -> [Token]
toTraditional :: Text -> Text
toSimplified :: Text -> Text
instance Read Entry
instance Show Entry
instance Eq Entry
instance Ord Entry
instance Show CCTrieEntry
instance Read Token
instance Show Token
instance Eq Token
instance Ord Token
