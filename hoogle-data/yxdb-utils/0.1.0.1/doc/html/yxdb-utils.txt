-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Utilities for reading and writing Alteryx .yxdb files
--   
@package yxdb-utils
@version 0.1.0.1

module Data.Binary.C
instance Binary CDouble
instance Binary CFloat

module Codec.Compression.LZF.ByteString
compressByteString :: ByteString -> ByteString
compressByteStringFixed :: Int -> ByteString -> Maybe ByteString
compressLazyByteString :: ByteString -> ByteString
decompressByteString :: ByteString -> ByteString
decompressByteStringFixed :: Int -> ByteString -> Maybe ByteString
decompressLazyByteString :: ByteString -> ByteString

module Database.Alteryx
printRecordInfo :: RecordInfo -> IO ()

-- | Our CSVs are pipe('|')-separated and do not do quoting.
alteryxCsvSettings :: CSVSettings

-- | All CSV text should be UTF-8 encoded.
csv2bytes :: MonadThrow m => Conduit Text m ByteString
csv2records :: MonadThrow m => CSVSettings -> Conduit Text m Record
parseCSVHeader :: Parser RecordInfo
record2csv :: MonadResource m => RecordInfo -> Conduit Record m Text

-- | Stream the parsed records from a CSV file
sourceCsvRecords :: MonadResource m => FilePath -> Maybe Text -> CSVSettings -> Source m Record
getValue :: Field -> Get (Maybe FieldValue)

-- | Retrieves the bytesting representing all variable data for the current
--   record
getAllVariableData :: Get ByteString
parseFieldType :: Text -> FieldType
putValue :: Field -> Maybe FieldValue -> Put
renderFieldType :: FieldType -> Text
data DbType
WrigleyDb :: DbType
WrigleyDb_NoSpatialIndex :: DbType
data YxdbMetadata
YxdbMetadata :: Header -> RecordInfo -> BlockIndex -> YxdbMetadata
_metadataHeader :: YxdbMetadata -> Header
_metadataRecordInfo :: YxdbMetadata -> RecordInfo
_metadataBlockIndex :: YxdbMetadata -> BlockIndex
data YxdbFile
YxdbFile :: Header -> RecordInfo -> [Record] -> BlockIndex -> YxdbFile
_yxdbFileHeader :: YxdbFile -> Header
_yxdbFileMetadata :: YxdbFile -> RecordInfo
_yxdbFileRecords :: YxdbFile -> [Record]
_yxdbFileBlockIndex :: YxdbFile -> BlockIndex
data Header
Header :: Text -> Word32 -> UTCTime -> Word32 -> Word32 -> Word32 -> Word32 -> Word64 -> Word64 -> Word64 -> Word32 -> ByteString -> Header
_description :: Header -> Text
_fileId :: Header -> Word32
_creationDate :: Header -> UTCTime
_flags1 :: Header -> Word32
_flags2 :: Header -> Word32
_metaInfoLength :: Header -> Word32
_mystery :: Header -> Word32
_spatialIndexPos :: Header -> Word64
_recordBlockIndexPos :: Header -> Word64
_numRecords :: Header -> Word64
_compressionVersion :: Header -> Word32
_reservedSpace :: Header -> ByteString
newtype Record
Record :: [Maybe FieldValue] -> Record
newtype RecordInfo
RecordInfo :: [Field] -> RecordInfo
newtype Miniblock
Miniblock :: ByteString -> Miniblock
newtype Block
Block :: ByteString -> Block
newtype BlockIndex
BlockIndex :: (UArray Int Int64) -> BlockIndex
data FieldValue
FVBool :: Bool -> FieldValue
FVByte :: Int8 -> FieldValue
FVInt16 :: Int16 -> FieldValue
FVInt32 :: Int32 -> FieldValue
FVInt64 :: Int64 -> FieldValue
FVFixedDecimal :: Decimal -> FieldValue
FVFloat :: Float -> FieldValue
FVDouble :: Double -> FieldValue
FVString :: Text -> FieldValue
FVWString :: Text -> FieldValue
FVVString :: Text -> FieldValue
FVVWString :: Text -> FieldValue
FVDate :: Day -> FieldValue
FVTime :: DiffTime -> FieldValue
FVDateTime :: UTCTime -> FieldValue
FVBlob :: ByteString -> FieldValue
FVSpatialObject :: ByteString -> FieldValue
FVUnknown :: FieldValue
data FieldType
FTBool :: FieldType
FTByte :: FieldType
FTInt16 :: FieldType
FTInt32 :: FieldType
FTInt64 :: FieldType
FTFixedDecimal :: FieldType
FTFloat :: FieldType
FTDouble :: FieldType
FTString :: FieldType
FTWString :: FieldType
FTVString :: FieldType
FTVWString :: FieldType
FTDate :: FieldType
FTTime :: FieldType
FTDateTime :: FieldType
FTBlob :: FieldType
FTSpatialObject :: FieldType
FTUnknown :: FieldType
data Field
Field :: Text -> FieldType -> Maybe Int -> Maybe Int -> Field
_fieldName :: Field -> Text
_fieldType :: Field -> FieldType
_fieldSize :: Field -> Maybe Int
_fieldScale :: Field -> Maybe Int
data StreamingCSVStatistics
StreamingCSVStatistics :: Int -> Int -> [Int] -> StreamingCSVStatistics
_statisticsMetadataLength :: StreamingCSVStatistics -> Int
_statisticsNumRecords :: StreamingCSVStatistics -> Int
_statisticsBlockLengths :: StreamingCSVStatistics -> [Int]
defaultStatistics :: StreamingCSVStatistics
fieldType :: Lens' Field FieldType
fieldSize :: Lens' Field (Maybe Int)
fieldScale :: Lens' Field (Maybe Int)
fieldName :: Lens' Field Text
yxdbFileRecords :: Lens' YxdbFile [Record]
yxdbFileMetadata :: Lens' YxdbFile RecordInfo
yxdbFileHeader :: Lens' YxdbFile Header
yxdbFileBlockIndex :: Lens' YxdbFile BlockIndex
spatialIndexPos :: Lens' Header Word64
reservedSpace :: Lens' Header ByteString
recordBlockIndexPos :: Lens' Header Word64
numRecords :: Lens' Header Word64
mystery :: Lens' Header Word32
metaInfoLength :: Lens' Header Word32
flags2 :: Lens' Header Word32
flags1 :: Lens' Header Word32
fileId :: Lens' Header Word32
description :: Lens' Header Text
creationDate :: Lens' Header UTCTime
compressionVersion :: Lens' Header Word32
metadataRecordInfo :: Lens' YxdbMetadata RecordInfo
metadataHeader :: Lens' YxdbMetadata Header
metadataBlockIndex :: Lens' YxdbMetadata BlockIndex
statisticsNumRecords :: Lens' StreamingCSVStatistics Int
statisticsMetadataLength :: Lens' StreamingCSVStatistics Int
statisticsBlockLengths :: Lens' StreamingCSVStatistics [Int]
dbFileId :: DbType -> Word32

-- | Records consists of a fixed amount of data for each field, and also a
--   possibly large amoutn of variable data at the end.
getRecord :: RecordInfo -> Get Record
getValue :: Field -> Get (Maybe FieldValue)

-- | Writes a record using the provided metadata.
putRecord :: RecordInfo -> Record -> Put
putValue :: Field -> Maybe FieldValue -> Put

-- | Number of bytes taken by the fixed header
headerPageSize :: Int

-- | When writing miniblocks, how many bytes should each miniblock aim for?
miniblockThreshold :: Int
numMetadataBytesActual :: RecordInfo -> Int
numMetadataBytesHeader :: Header -> Int
numBlockBytesActual :: Block -> Int
numBlockBytesHeader :: Header -> Int
parseRecordsUntil :: RecordInfo -> Get [Record]

-- | Number of records before each block is flushed and added to the block
--   index
recordsPerBlock :: Int
startOfBlocksByteIndex :: Header -> Int
blocksToDecompressedBytes :: MonadThrow m => Conduit Block m ByteString
blocksToRecords :: MonadThrow m => RecordInfo -> Conduit Block m Record
sinkRecords :: (MonadThrow m, MonadIO m) => Handle -> RecordInfo -> Sink Record m ()
getMetadata :: FilePath -> IO YxdbMetadata
recordsToBlocks :: MonadThrow m => RecordInfo -> StatefulConduit Record m Block
sourceFileBlocks :: MonadResource m => FilePath -> YxdbMetadata -> Source m Block
sourceFileRecords :: (MonadResource m, MonadIO m) => FilePath -> Source m Record

module Database.Alteryx.CLI.Csv2Yxdb
data Settings
Settings :: Maybe Text -> FilePath -> FilePath -> CSVSettings -> Bool -> Bool -> Bool -> Settings
_settingHeader :: Settings -> Maybe Text
_settingFilename :: Settings -> FilePath
_settingOutput :: Settings -> FilePath
_settingCSV :: Settings -> CSVSettings
_settingInternal :: Settings -> Bool
_settingMetadata :: Settings -> Bool
_settingVerbose :: Settings -> Bool
settingVerbose :: Lens' Settings Bool
settingOutput :: Lens' Settings FilePath
settingMetadata :: Lens' Settings Bool
settingInternal :: Lens' Settings Bool
settingHeader :: Lens' Settings (Maybe Text)
settingFilename :: Lens' Settings FilePath
settingCSV :: Lens' Settings CSVSettings
options :: [OptDescr (Settings -> Settings)]
defaultSettings :: Settings
parseOptions :: [String] -> IO ([Settings -> Settings])
processOptions :: [Settings -> Settings] -> Settings
getSettings :: IO Settings
getRecordInfo :: StateT Settings IO (Maybe RecordInfo)
runMetadata :: StateT Settings IO ()
runCsv2Internal :: StateT Settings IO ()
getRecordSource :: StateT Settings IO (Source (ResourceT IO) Record)
runCsv2Yxdb :: StateT Settings IO ()
csv2yxdbMain :: IO ()
instance Eq Settings
instance Show Settings

module Database.Alteryx.CLI.Yxdb2Csv
data Settings
Settings :: Bool -> Bool -> Maybe Int -> Maybe Int -> Bool -> FilePath -> Settings
_settingDecompress :: Settings -> Bool
_settingMetadata :: Settings -> Bool
_settingNumBlocks :: Settings -> Maybe Int
_settingNumRecords :: Settings -> Maybe Int
_settingVerbose :: Settings -> Bool
_settingFilename :: Settings -> FilePath
settingVerbose :: Lens' Settings Bool
settingNumRecords :: Lens' Settings (Maybe Int)
settingNumBlocks :: Lens' Settings (Maybe Int)
settingMetadata :: Lens' Settings Bool
settingFilename :: Lens' Settings FilePath
settingDecompress :: Lens' Settings Bool
options :: [OptDescr (Settings -> Settings)]
defaultSettings :: Settings
parseOptions :: [String] -> IO ([Settings -> Settings])
processOptions :: [Settings -> Settings] -> Settings
getSettings :: IO Settings
printHeader :: YxdbMetadata -> StateT Settings IO ()
printBlocks :: YxdbMetadata -> StateT Settings IO ()
runMetadata :: StateT Settings IO ()
getBlockLimiter :: MonadThrow m => StateT Settings IO (Conduit Block m Block)
getRecordLimiter :: MonadThrow m => StateT Settings IO (Conduit Record m Record)
runDecompress :: StateT Settings IO ()
runYxdb2Csv :: StateT Settings IO ()
yxdb2csvMain :: IO ()
