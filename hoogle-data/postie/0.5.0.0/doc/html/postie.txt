-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | SMTP server library to receive emails from within Haskell programs.
--   
--   <a>postie</a> is a little smtp server library for receiving emails. It
--   is currently in a very early stage and not yet fully standard
--   compatible although the standard protocol is already supported.
--   
--   <ul>
--   <li>At the time of writing parameters on smtp commands can not be
--   parsed.</li>
--   <li>Handler functions need to return more detailed information to
--   cancel a transaction.</li>
--   </ul>
--   
--   <a>postie</a> supportes hooks on key commands in an smtp session like
--   
--   <ul>
--   <li>on connection open and close</li>
--   <li>on <i>MAIL FROM</i> command e.g. to intercept transaction if
--   sender is blacklisted</li>
--   <li>on <i>RCPT TO</i> command e.g. to check if recipient is existent
--   on your server</li>
--   <li>and many more</li>
--   </ul>
--   
--   To run <a>postie</a> you only need to supply a function which takes a
--   <a>Mail</a> and return <a>Accepted</a> or <a>Rejected</a>.
--   <a>mailBody</a> is a <a>pipes</a> <a>Producer</a> which streams the
--   encoded body directly to your application code. The body is not parsed
--   by <a>postie</a> since it depends on what the application wants to do
--   with the mail data. Eventually I will create a seperate package for
--   parsing mime messages with `pipes-parse` when postie becomes more
--   stable and standard compliant.
@package postie
@version 0.5.0.0

module Web.Postie.SessionID
data SessionID
mkSessionID :: IO SessionID
toByteString :: SessionID -> ByteString
instance Typeable SessionID
instance Eq SessionID
instance Ord SessionID
instance Show SessionID

module Web.Postie.Address
data Address
address :: ByteString -> ByteString -> Address
addressLocalPart :: Address -> ByteString
addressDomain :: Address -> ByteString
toByteString :: Address -> ByteString
toLazyByteString :: Address -> ByteString
parseAddress :: ByteString -> Maybe Address

-- | Address Parser. Borrowed form email-validate-2.0.1. Parser for email
--   address.
addrSpec :: Parser Address
instance Typeable Address
instance Eq Address
instance Ord Address
instance IsString Address
instance Show Address

module Web.Postie.Types

-- | Handler response indicating validity of email transaction.
data HandlerResponse

-- | Accepted, allow further processing.
Accepted :: HandlerResponse

-- | Rejected, stop transaction.
Rejected :: HandlerResponse

-- | Received email
data Mail
Mail :: SessionID -> Address -> [Address] -> Producer ByteString IO () -> Mail
mailSessionID :: Mail -> SessionID

-- | Sender
mailSender :: Mail -> Address

-- | Recipients
mailRecipients :: Mail -> [Address]

-- | Mail content
mailBody :: Mail -> Producer ByteString IO ()

-- | Application which receives Mails from postie An Application has to
--   fully consume the mailBody part of a mail, the behaviour is undefined
--   if not.
type Application = Mail -> IO HandlerResponse

module Web.Postie.Settings

-- | Settings to configure posties behaviour.
data Settings
Settings :: PortID -> Int -> Int -> Maybe HostName -> Maybe TLSSettings -> (Maybe SessionID -> SomeException -> IO ()) -> IO () -> (SessionID -> SockAddr -> IO ()) -> (SessionID -> IO ()) -> (SessionID -> IO ()) -> (SessionID -> ByteString -> IO HandlerResponse) -> (SessionID -> Address -> IO HandlerResponse) -> (SessionID -> Address -> IO HandlerResponse) -> Settings

-- | Port postie will run on.
settingsPort :: Settings -> PortID

-- | Timeout for connections in seconds
settingsTimeout :: Settings -> Int

-- | Maximal size of incoming mail data
settingsMaxDataSize :: Settings -> Int

-- | Hostname which is shown in posties greeting.
settingsHost :: Settings -> Maybe HostName

-- | TLS settings if you wish to secure connections.
settingsTLS :: Settings -> Maybe TLSSettings

-- | Exception handler (default is defaultExceptionHandler)
settingsOnException :: Settings -> Maybe SessionID -> SomeException -> IO ()

-- | Action will be performed before main processing begins.
settingsBeforeMainLoop :: Settings -> IO ()

-- | Action will be performed when connection has been opened.
settingsOnOpen :: Settings -> SessionID -> SockAddr -> IO ()

-- | Action will be performed when connection has been closed.
settingsOnClose :: Settings -> SessionID -> IO ()

-- | Action will be performend on STARTTLS command.
settingsOnStartTLS :: Settings -> SessionID -> IO ()

-- | Performed when client says hello
settingsOnHello :: Settings -> SessionID -> ByteString -> IO HandlerResponse

-- | Performed when client starts mail transaction
settingsOnMailFrom :: Settings -> SessionID -> Address -> IO HandlerResponse

-- | Performed when client adds recipient to mail transaction.
settingsOnRecipient :: Settings -> SessionID -> Address -> IO HandlerResponse

-- | Settings for TLS handling
data TLSSettings
TLSSettings :: FilePath -> FilePath -> StartTLSPolicy -> Logging -> [Version] -> [Cipher] -> TLSSettings

-- | Path to certificate file
certFile :: TLSSettings -> FilePath

-- | Path to private key file belonging to certificate
keyFile :: TLSSettings -> FilePath

-- | Connection security mode, default is DemandStartTLS
security :: TLSSettings -> StartTLSPolicy

-- | Logging for TLS
tlsLogging :: TLSSettings -> Logging

-- | Supported TLS versions
tlsAllowedVersions :: TLSSettings -> [Version]

-- | Supported ciphers
tlsCiphers :: TLSSettings -> [Cipher]

-- | Connection security policy, either via STARTTLS command or on
--   connection initiation.
data StartTLSPolicy

-- | Allows clients to use STARTTLS command
AllowStartTLS :: StartTLSPolicy

-- | Client needs to send STARTTLS command before issuing a mail
--   transaction
DemandStartTLS :: StartTLSPolicy

-- | Negotiates a TSL context on connection startup.
ConnectWithTLS :: StartTLSPolicy
settingsStartTLSPolicy :: Settings -> Maybe StartTLSPolicy
defaultExceptionHandler :: Maybe SessionID -> SomeException -> IO ()
mkServerParams :: TLSSettings -> IO ServerParams

-- | The default value for this type.
def :: Default a => a
instance Eq StartTLSPolicy
instance Show StartTLSPolicy
instance Default TLSSettings
instance Default Settings

module Web.Postie
run :: Int -> Application -> IO ()
runSettings :: Settings -> Application -> IO ()
runSettingsSocket :: Settings -> Socket -> Application -> IO ()
data UnexpectedEndOfInputException
data TooMuchDataException

-- | <a>Producer</a>s can only <a>yield</a>
type Producer b = Proxy X () () b

-- | <a>Consumer</a>s can only <a>await</a>
type Consumer a = Proxy () a () X

-- | Run a self-contained <a>Effect</a>, converting it back to the base
--   monad
runEffect :: Monad m => Effect m r -> m r

-- | <a>Pipe</a> composition, analogous to the Unix pipe operator
--   
--   <pre>
--   (<a>&gt;-&gt;</a>) :: <a>Monad</a> m =&gt; <a>Producer</a> b m r -&gt; <a>Consumer</a> b   m r -&gt; <a>Effect</a>       m r
--   (<a>&gt;-&gt;</a>) :: <a>Monad</a> m =&gt; <a>Producer</a> b m r -&gt; <a>Pipe</a>     b c m r -&gt; <a>Producer</a>   c m r
--   (<a>&gt;-&gt;</a>) :: <a>Monad</a> m =&gt; <a>Pipe</a>   a b m r -&gt; <a>Consumer</a> b   m r -&gt; <a>Consumer</a> a   m r
--   (<a>&gt;-&gt;</a>) :: <a>Monad</a> m =&gt; <a>Pipe</a>   a b m r -&gt; <a>Pipe</a>     b c m r -&gt; <a>Pipe</a>     a c m r
--   </pre>
(>->) :: Monad m => Proxy a' a () b m r -> Proxy () b c' c m r -> Proxy a' a c' c m r
