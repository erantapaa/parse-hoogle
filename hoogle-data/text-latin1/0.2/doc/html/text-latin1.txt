-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Latin-1 (including ASCII) utility functions
--   
--   This package provides various functions over the ASCII ang Latin-1
--   portions of the <a>Char</a> and <a>Word8</a> data types.
@package text-latin1
@version 0.2


-- | ASCII utility functions.
module Text.Ascii
data IsAscii
IsAscii :: IsAscii
isAscii :: Property IsAscii v => v -> Bool
type Ascii α = Checked IsAscii α

-- | Map a character to its ASCII encoding if possible, otherwise return
--   <a>Nothing</a>.
maybeAscii :: Char -> Maybe Word8

-- | Encode an ASCII character. No checks are performed.
ascii :: Char -> Word8

-- | Test if a character is an ASCII control character.
isControl :: Char -> Bool

-- | Test if a character is an ASCII printable character.
isPrintable :: Char -> Bool

-- | Test if a character is an ASCII whitespace character.
isWhiteSpace :: Char -> Bool

-- | Test if a character is the SPACE or the TAB character.
isSpaceOrTab :: Char -> Bool

-- | Test if a character is an ASCII lower-case letter.
isLower :: Char -> Bool

-- | Test if a character is an ASCII upper-case letter.
isUpper :: Char -> Bool

-- | Map lower-case ASCII letters to the corresponding upper-case letters,
--   leaving other characters as is.
toLower :: Char -> Char

-- | Map upper-case ASCII letters to the corresponding lower-case letters,
--   leaving other characters as is.
toUpper :: Char -> Char

-- | Test if a character is an ASCII letter.
isAlpha :: Char -> Bool

-- | Test if a character is either an ASCII letter or a decimal digit.
isAlphaNum :: Char -> Bool

-- | Test if a character is a decimal digit (<i>'0' ... '9'</i>).
isDecDigit :: Char -> Bool

-- | Test if a character is a non-zero decimal digit (<i>'1' ... '9'</i>).
isNzDecDigit :: Char -> Bool

-- | Map a decimal digit to the corresponding number. Return <a>Nothing</a>
--   on other inputs.
fromDecDigit :: Num a => Char -> Maybe a

-- | Map non-zero decimal digits to the corresponding numbers. Return
--   <a>Nothing</a> on other inputs.
fromNzDecDigit :: Num a => Char -> Maybe a

-- | Map decimal digits to the corresponding numbers. No checks are
--   performed.
unsafeFromDecDigit :: Num a => Char -> a

-- | Test if a character is a binary digit (<i>'0'</i> or <i>'1'</i>).
isBinDigit :: Char -> Bool

-- | Test if a character is the non-zero binary digit (<i>'1'</i>).
isNzBinDigit :: Char -> Bool

-- | Map binary digits to the corresponding numbers. Return <a>Nothing</a>
--   on other inputs.
fromBinDigit :: Num a => Char -> Maybe a

-- | Map the digit <i>'1'</i> to the number <i>1</i>. Return <a>Nothing</a>
--   on other inputs.
fromNzBinDigit :: Num a => Char -> Maybe a

-- | Map binary digits to the corresponding numbers. No checks are
--   performed.
unsafeFromBinDigit :: Num a => Char -> a

-- | Test if a character is an octal digit (<i>'0' ... '7'</i>).
isOctDigit :: Char -> Bool

-- | Test if a character is a non-zero octal digit (<i>'1' ... '7'</i>).
isNzOctDigit :: Char -> Bool

-- | Map octal digits to the corresponding numbers. Return <a>Nothing</a>
--   on other inputs.
fromOctDigit :: Num a => Char -> Maybe a

-- | Map non-zero octal digits to the corresponding numbers. Return
--   <a>Nothing</a> on other inputs.
fromNzOctDigit :: Num a => Char -> Maybe a

-- | Map octal digits to the corresponding numbers. No checks are
--   performed.
unsafeFromOctDigit :: Num a => Char -> a

-- | Test if a character is an upper-case hexadecimal digit (<i>'0' ...
--   '9'</i> or <i>'A' ... 'F'</i>).
isUpHexDigit :: Char -> Bool

-- | Test if a character is a non-zero upper-case hexadecimal digit (<i>'1'
--   ... '9'</i> or <i>'A' ... 'F'</i>).
isNzUpHexDigit :: Char -> Bool

-- | Map upper-case hexadecimal digits to the corresponding numbers. Return
--   <a>Nothing</a> on other inputs.
fromUpHexDigit :: Num a => Char -> Maybe a

-- | Map non-zero upper-case hexadecimal digits to the corresponding
--   numbers. Return <a>Nothing</a> on other inputs.
fromNzUpHexDigit :: Num a => Char -> Maybe a

-- | Map upper-case hexadecimal digits to the corresponding numbers. No
--   checks are performed.
unsafeFromUpHexDigit :: Num a => Char -> a

-- | Test if a character is a lower-case hexadecimal digit (<i>'0' ...
--   '9'</i> or <i>'a' ... 'f'</i>).
isLowHexDigit :: Char -> Bool

-- | Test if a character is a non-zero lower-case hexadecimal digit (<i>'1'
--   ... '9'</i> or <i>'a' ... 'f'</i>).
isNzLowHexDigit :: Char -> Bool

-- | Map lower-case hexadecimal digits to the corresponding numbers. Return
--   <a>Nothing</a> on other inputs.
fromLowHexDigit :: Num a => Char -> Maybe a

-- | Map non-zero lower-case hexadecimal digits to the corresponding
--   numbers. Return <a>Nothing</a> on other inputs.
fromNzLowHexDigit :: Num a => Char -> Maybe a

-- | Map lower-case hexadecimal digits to the corresponding numbers. No
--   checks are performed.
unsafeFromLowHexDigit :: Num a => Char -> a

-- | Test if a character is a hexadecimal digit (<i>'0' ... '9'</i> or
--   <i>'a' ... 'f'</i> or <i>'A' ... 'F'</i>).
isHexDigit :: Char -> Bool

-- | Test if a character is a non-zero hexadecimal digit (<i>'1' ...
--   '9'</i> or <i>'a' ... 'f'</i> or <i>'A' ... 'F'</i>).
isNzHexDigit :: Char -> Bool

-- | Map hexadecimal digits to the corresponding numbers. Return
--   <a>Nothing</a> on other inputs.
fromHexDigit :: Num a => Char -> Maybe a

-- | Map non-zero hexadecimal digits to the corresponding numbers. Return
--   <a>Nothing</a> on other inputs.
fromNzHexDigit :: Num a => Char -> Maybe a

-- | Map hexadecimal digits to the corresponding numbers. No checks are
--   performed.
unsafeFromHexDigit :: Num a => Char -> a

-- | Test if a byte is the encoding of an ASCII control character.
isControl8 :: Word8 -> Bool

-- | Test if a byte is the encoding of an ASCII printable character.
isPrintable8 :: Word8 -> Bool

-- | Test if a byte is the encoding of an ASCII whitespace character.
isWhiteSpace8 :: Word8 -> Bool

-- | Test if a byte is the encoding of the SPACE or the TAB character.
isSpaceOrTab8 :: Word8 -> Bool

-- | Test if a byte is the encoding of an ASCII lower-case letter.
isLower8 :: Word8 -> Bool

-- | Test if a byte is the encoding of an ASCII upper-case letter.
isUpper8 :: Word8 -> Bool

-- | Map the encodings of lower-case ASCII letters to the encodings of the
--   corresponding upper-case letters, leaving other bytes as is.
toLower8 :: Word8 -> Word8

-- | Map the encodings of upper-case ASCII letters to the encodings of the
--   corresponding lower-case letters, leaving other bytes as is.
toUpper8 :: Word8 -> Word8

-- | Test if a byte is the encoding of an ASCII letter.
isAlpha8 :: Word8 -> Bool

-- | Test if a byte is the encoding of either an ASCII letter or a decimal
--   digit.
isAlphaNum8 :: Word8 -> Bool

-- | Test if a byte is the encoding of a decimal digit (<i>'0' ...
--   '9'</i>).
isDecDigit8 :: Word8 -> Bool

-- | Test if a byte is the encoding of a non-zero decimal digit (<i>'1' ...
--   '9'</i>).
isNzDecDigit8 :: Word8 -> Bool

-- | Map the encoding of a decimal digit to the corresponding number.
--   Return <a>Nothing</a> on other inputs.
fromDecDigit8 :: Num a => Word8 -> Maybe a

-- | Map the encoding of a non-zero decimal digit to the corresponding
--   number. Return <a>Nothing</a> on other inputs.
fromNzDecDigit8 :: Num a => Word8 -> Maybe a

-- | Map the encoding of a decimal digit to the corresponding number. No
--   checks are performed.
unsafeFromDecDigit8 :: Num a => Word8 -> a

-- | Test if a byte is the encoding of a binary digit (<i>'0'</i> or
--   <i>'1'</i>).
isBinDigit8 :: Word8 -> Bool

-- | Test if a byte is the encoding of the non-zero binary digit
--   (<i>'1'</i>).
isNzBinDigit8 :: Word8 -> Bool

-- | Map the encoding of a binary digit to the corresponding number. Return
--   <a>Nothing</a> on other inputs.
fromBinDigit8 :: Num a => Word8 -> Maybe a

-- | Map the encoding of the digit <i>'1'</i> to the number <i>1</i>.
--   Return <a>Nothing</a> on other inputs.
fromNzBinDigit8 :: Num a => Word8 -> Maybe a

-- | Map the encoding of a binary digit to the corresponding number. No
--   checks are performed.
unsafeFromBinDigit8 :: Num a => Word8 -> a

-- | Test if a byte is the encoding of an octal digit (<i>'0' ... '7'</i>).
isOctDigit8 :: Word8 -> Bool

-- | Test if a byte is the encoding of a non-zero octal digit (<i>'1' ...
--   '7'</i>).
isNzOctDigit8 :: Word8 -> Bool

-- | Map the encoding of an octal digit to the corresponding number. Return
--   <a>Nothing</a> on other inputs.
fromOctDigit8 :: Num a => Word8 -> Maybe a

-- | Map the encoding of a non-zero octal digit to the corresponding
--   number. Return <a>Nothing</a> on other inputs.
fromNzOctDigit8 :: Num a => Word8 -> Maybe a

-- | Map the encoding of an octal digit to the corresponding number. No
--   checks are performed.
unsafeFromOctDigit8 :: Num a => Word8 -> a

-- | Test if a byte is the encoding of an upper-case hexadecimal digit
--   (<i>'0' ... '9'</i> or <i>'A' ... 'F'</i>).
isUpHexDigit8 :: Word8 -> Bool

-- | Test if a byte is the encoding of a non-zero upper-case hexadecimal
--   digit (<i>'1' ... '9'</i> or <i>'A' ... 'F'</i>).
isNzUpHexDigit8 :: Word8 -> Bool

-- | Map the encoding of an upper-case hexadecimal digit to the
--   corresponding number. Return <a>Nothing</a> on other inputs.
fromUpHexDigit8 :: Num a => Word8 -> Maybe a

-- | Map the encoding of a non-zero upper-case hexadecimal digit to the
--   corresponding number. Return <a>Nothing</a> on other inputs.
fromNzUpHexDigit8 :: Num a => Word8 -> Maybe a

-- | Map the encoding of an upper-case hexadecimal digit to the
--   corresponding number. No checks are performed.
unsafeFromUpHexDigit8 :: Num a => Word8 -> a

-- | Test if a byte is the encoding of a lower-case hexadecimal digit
--   (<i>'0' ... '9'</i> or <i>'a' ... 'f'</i>).
isLowHexDigit8 :: Word8 -> Bool

-- | Test if a byte is the encoding of a non-zero lower-case hexadecimal
--   digit (<i>'1' ... '9'</i> or <i>'a' ... 'f'</i>).
isNzLowHexDigit8 :: Word8 -> Bool

-- | Map the encoding of a lower-case hexadecimal digit to the
--   corresponding number. Return <a>Nothing</a> on other inputs.
fromLowHexDigit8 :: Num a => Word8 -> Maybe a

-- | Map the encoding of a non-zero lower-case hexadecimal digit to the
--   corresponding number. Return <a>Nothing</a> on other inputs.
fromNzLowHexDigit8 :: Num a => Word8 -> Maybe a

-- | Map the encoding of a lower-case hexadecimal digit to the
--   corresponding number. No checks are performed.
unsafeFromLowHexDigit8 :: Num a => Word8 -> a

-- | Test if a byte is the encoding of a hexadecimal digit (<i>'0' ...
--   '9'</i> or <i>'a' ... 'f'</i> or <i>'A' ... 'F'</i>).
isHexDigit8 :: Word8 -> Bool

-- | Test if a byte is the encoding of a non-zero hexadecimal digit (<i>'1'
--   ... '9'</i> or <i>'a' ... 'f'</i> or <i>'A' ... 'F'</i>).
isNzHexDigit8 :: Word8 -> Bool

-- | Map the encoding of a hexadecimal digit to the corresponding number.
--   Return <a>Nothing</a> on other inputs.
fromHexDigit8 :: Num a => Word8 -> Maybe a

-- | Map the encoding of a non-zero hexadecimal digit to the corresponding
--   number. Return <a>Nothing</a> on other inputs.
fromNzHexDigit8 :: Num a => Word8 -> Maybe a

-- | Map the encoding of a hexadecimal digit to the corresponding number.
--   No checks are performed.
unsafeFromHexDigit8 :: Num a => Word8 -> a
instance FoldCase (Ascii Text)
instance FoldCase (Ascii Text)
instance FoldCase (Ascii ByteString)
instance FoldCase (Ascii ByteString)
instance FoldCase (Ascii α) => FoldCase (Ascii [α])
instance FoldCase (Ascii Char)
instance Hashable α => Hashable (Ascii α)
instance IsString α => IsString (Ascii α)
instance Monoid α => Monoid (Ascii α)
instance Show α => Show (Ascii α)
instance Ord α => Ord (Ascii α)
instance Eq α => Eq (Ascii α)
instance Property IsAscii Text
instance Property IsAscii Text
instance Property IsAscii α => Property IsAscii [α]
instance Property IsAscii Char
instance Property IsAscii ByteString
instance Property IsAscii ByteString
instance Property IsAscii Word8


-- | Latin-1 utility functions.
module Text.Latin1
data IsLatin1
IsLatin1 :: IsLatin1
isLatin1 :: Property IsLatin1 v => v -> Bool
type Latin1 α = Checked IsLatin1 α

-- | ASCII values are Latin-1 values.
asciiIsLatin1 :: Ascii α -> Latin1 α

-- | Map a character to its Latin-1 encoding if possible, otherwise return
--   <a>Nothing</a>.
maybeLatin1 :: Char -> Maybe Word8

-- | Encode a Latin-1 character. No checks are performed.
latin1 :: Char -> Word8

-- | Test if a character is a Latin-1 control character.
isControl :: Char -> Bool

-- | Test if a character is a Latin-1 printable character.
isPrintable :: Char -> Bool

-- | Test if a character is a Latin-1 whitespace character.
isWhiteSpace :: Char -> Bool

-- | Test if a character is a Latin-1 lower-case letter.
isLower :: Char -> Bool

-- | Test if a character is a Latin-1 upper-case letter.
isUpper :: Char -> Bool

-- | Map lower-case Latin-1 letters to the corresponding upper-case
--   letters, leaving other characters as is.
toLower :: Char -> Char

-- | Map upper-case Latin-1 letters to the corresponding lower-case
--   letters, leaving other characters as is.
toUpper :: Char -> Char

-- | Test if a character is a Latin-1 letter.
isAlpha :: Char -> Bool

-- | Test if a character is either a Latin-1 letter or a decimal digit.
isAlphaNum :: Char -> Bool

-- | Test if a byte is the encoding of a Latin-1 control character.
isControl8 :: Word8 -> Bool

-- | Test if a byte is the encoding of a Latin-1 printable character.
isPrintable8 :: Word8 -> Bool

-- | Test if a byte is the encoding of a Latin-1 whitespace character.
isWhiteSpace8 :: Word8 -> Bool

-- | Test if a byte is the encoding of a Latin-1 lower-case letter.
isLower8 :: Word8 -> Bool

-- | Test if a byte is the encoding of a Latin-1 upper-case letter.
isUpper8 :: Word8 -> Bool

-- | Map the encodings of lower-case Latin-1 letters to the encodings of
--   the corresponding upper-case letters, leaving other bytes as is.
toLower8 :: Word8 -> Word8

-- | Map the encodings of upper-case Latin-1 letters to the encodings of
--   the corresponding lower-case letters, leaving other bytes as is.
toUpper8 :: Word8 -> Word8

-- | Test if a byte is the encoding of a Latin-1 letter.
isAlpha8 :: Word8 -> Bool

-- | Test if a byte is the encoding of either a Latin-1 letter or a decimal
--   digit.
isAlphaNum8 :: Word8 -> Bool
instance FoldCase (Latin1 Text)
instance FoldCase (Latin1 Text)
instance FoldCase (Latin1 α) => FoldCase (Latin1 [α])
instance FoldCase (Latin1 Char)
instance Hashable α => Hashable (Latin1 α)
instance IsString α => IsString (Latin1 α)
instance Monoid α => Monoid (Latin1 α)
instance Show α => Show (Latin1 α)
instance Ord α => Ord (Latin1 α)
instance Eq α => Eq (Latin1 α)
instance Property IsLatin1 Text
instance Property IsLatin1 Text
instance Property IsLatin1 α => Property IsLatin1 [α]
instance Property IsLatin1 Char
