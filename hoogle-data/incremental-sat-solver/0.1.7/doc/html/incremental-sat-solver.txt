-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple, Incremental SAT Solving as a Library
--   
--   This Haskell library provides an implementation of the
--   Davis-Putnam-Logemann-Loveland algorithm (cf.
--   <a>http://en.wikipedia.org/wiki/DPLL_algorithm</a>) for the boolean
--   satisfiability problem. It not only allows to solve boolean formulas
--   in one go but also to add constraints and query bindings of variables
--   incrementally.
@package incremental-sat-solver
@version 0.1.7


-- | This Haskell library provides an implementation of the
--   Davis-Putnam-Logemann-Loveland algorithm (cf.
--   <a>http://en.wikipedia.org/wiki/DPLL_algorithm</a>) for the boolean
--   satisfiability problem. It not only allows to solve boolean formulas
--   in one go but also to add constraints and query bindings of variables
--   incrementally.
--   
--   The implementation is not sophisticated at all but uses the basic DPLL
--   algorithm with unit propagation.
module Data.Boolean.SatSolver

-- | Boolean formulas are represented as values of type <tt>Boolean</tt>.
data Boolean

-- | Variables are labeled with an <tt>Int</tt>,
Var :: Int -> Boolean

-- | <tt>Yes</tt> represents <i>true</i>,
Yes :: Boolean

-- | <tt>No</tt> represents <i>false</i>,
No :: Boolean

-- | <tt>Not</tt> constructs negated formulas,
Not :: Boolean -> Boolean

-- | and finally we provide conjunction
(:&&:) :: Boolean -> Boolean -> Boolean

-- | and disjunction of boolean formulas.
(:||:) :: Boolean -> Boolean -> Boolean

-- | A <tt>SatSolver</tt> can be used to solve boolean formulas.
data SatSolver

-- | A new SAT solver without stored constraints.
newSatSolver :: SatSolver

-- | This predicate tells whether all constraints are solved.
isSolved :: SatSolver -> Bool

-- | We can lookup the binding of a variable according to the currently
--   stored constraints. If the variable is unbound, the result is
--   <tt>Nothing</tt>.
lookupVar :: Int -> SatSolver -> Maybe Bool

-- | We can assert boolean formulas to update a <tt>SatSolver</tt>. The
--   assertion may fail if the resulting constraints are unsatisfiable.
assertTrue :: MonadPlus m => Boolean -> SatSolver -> m SatSolver

-- | This function guesses a value for the given variable, if it is
--   currently unbound. As this is a non-deterministic operation, the
--   resulting solvers are returned in an instance of <tt>MonadPlus</tt>.
branchOnVar :: MonadPlus m => Int -> SatSolver -> m SatSolver

-- | We select a variable from the shortest clause hoping to produce a unit
--   clause.
selectBranchVar :: SatSolver -> Int

-- | This function guesses values for variables such that the stored
--   constraints are satisfied. The result may be non-deterministic and is,
--   hence, returned in an instance of <tt>MonadPlus</tt>.
solve :: MonadPlus m => SatSolver -> m SatSolver

-- | This predicate tells whether the stored constraints are solvable. Use
--   with care! This might be an inefficient operation. It tries to find a
--   solution using backtracking and returns <tt>True</tt> if and only if
--   that fails.
isSolvable :: SatSolver -> Bool
instance Show SatSolver
