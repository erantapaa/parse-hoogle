-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The General Transit Feed Specification format
--   
--   This module provides data types and parsers for the General Transit
--   Feed Specification, described at
--   <a>http://code.google.com/transit/spec/transit_feed_specification.html</a>.
--   
--   GTFS is used by transit agencies to provide schedules, geographic
--   information, etc. to Google Maps and other Google applications. Many
--   data sets are available online, often with few restrictions, so the
--   format is useful to third-party developers.
@package gtfs
@version 0.1


-- | Types in a GTFS feed.
module Data.GTFS.Types
data LocationType
LocStop :: LocationType
LocStation :: LocationType
data RouteType
Tram :: RouteType
Metro :: RouteType
Rail :: RouteType
Bus :: RouteType
Ferry :: RouteType
CableCar :: RouteType
Gondola :: RouteType
Funicular :: RouteType
data DirectionID
DirectionA :: DirectionID
DirectionB :: DirectionID
data OnOffType
RegularlyScheduled :: OnOffType
NotAvailable :: OnOffType
MustPhone :: OnOffType
MustAskDriver :: OnOffType
data ServiceFlag
NoService :: ServiceFlag
HasService :: ServiceFlag
data ExceptionType
NoException :: ExceptionType
ServiceAdded :: ExceptionType
ServiceRemoved :: ExceptionType
data PaymentMethod
PayOnBoard :: PaymentMethod
PayBeforeBoarding :: PaymentMethod
data TransferType
RecommendedTransfer :: TransferType
TimedTransfer :: TransferType
MinimumTransfer :: TransferType
NoTransfer :: TransferType
data Agency
Agency :: Maybe AgencyID -> String -> URL -> Timezone -> Maybe Language -> Maybe Phone -> Agency
a_agency_id :: Agency -> Maybe AgencyID
a_agency_name :: Agency -> String
a_agency_url :: Agency -> URL
a_agency_timezone :: Agency -> Timezone
a_agency_lang :: Agency -> Maybe Language
a_agency_phone :: Agency -> Maybe Phone
data Stop
Stop :: StopID -> Maybe String -> String -> Maybe String -> LatLon -> LatLon -> Maybe ZoneID -> Maybe URL -> Maybe LocationType -> Maybe StopID -> Stop
s_stop_id :: Stop -> StopID
s_stop_code :: Stop -> Maybe String
s_stop_name :: Stop -> String
s_stop_desc :: Stop -> Maybe String
s_stop_lat :: Stop -> LatLon
s_stop_lon :: Stop -> LatLon
s_zone_id :: Stop -> Maybe ZoneID
s_stop_url :: Stop -> Maybe URL
s_location_type :: Stop -> Maybe LocationType
s_parent_station :: Stop -> Maybe StopID
data Route
Route :: RouteID -> Maybe AgencyID -> String -> String -> Maybe String -> RouteType -> Maybe URL -> Maybe Color -> Maybe Color -> Route
r_route_id :: Route -> RouteID
r_agency_id :: Route -> Maybe AgencyID
r_route_short_name :: Route -> String
r_route_long_name :: Route -> String
r_route_desc :: Route -> Maybe String
r_route_type :: Route -> RouteType
r_route_url :: Route -> Maybe URL
r_route_color :: Route -> Maybe Color
r_route_text_color :: Route -> Maybe Color
data Trip
Trip :: RouteID -> ServiceID -> TripID -> Maybe String -> Maybe String -> Maybe DirectionID -> Maybe BlockID -> Maybe ShapeID -> Trip
t_route_id :: Trip -> RouteID
t_service_id :: Trip -> ServiceID
t_trip_id :: Trip -> TripID
t_trip_headsign :: Trip -> Maybe String
t_trip_short_name :: Trip -> Maybe String
t_direction_id :: Trip -> Maybe DirectionID
t_block_id :: Trip -> Maybe BlockID
t_shape_id :: Trip -> Maybe ShapeID
data StopTime
StopTime :: TripID -> Time -> Time -> StopID -> Sequence -> Maybe String -> Maybe OnOffType -> Maybe OnOffType -> Maybe Distance -> StopTime
st_trip_id :: StopTime -> TripID
st_arrival_time :: StopTime -> Time
st_departure_time :: StopTime -> Time
st_stop_id :: StopTime -> StopID
st_stop_sequence :: StopTime -> Sequence
st_stop_headsign :: StopTime -> Maybe String
st_pickup_type :: StopTime -> Maybe OnOffType
st_drop_off_type :: StopTime -> Maybe OnOffType
st_shape_dist_traveled :: StopTime -> Maybe Distance
data Calendar
Calendar :: ServiceID -> ServiceFlag -> ServiceFlag -> ServiceFlag -> ServiceFlag -> ServiceFlag -> ServiceFlag -> ServiceFlag -> Date -> Date -> Calendar
c_service_id :: Calendar -> ServiceID
c_monday :: Calendar -> ServiceFlag
c_tuesday :: Calendar -> ServiceFlag
c_wednesday :: Calendar -> ServiceFlag
c_thursday :: Calendar -> ServiceFlag
c_friday :: Calendar -> ServiceFlag
c_saturday :: Calendar -> ServiceFlag
c_sunday :: Calendar -> ServiceFlag
c_start_date :: Calendar -> Date
c_end_date :: Calendar -> Date
data CalendarDate
CalendarDate :: ServiceID -> Date -> ExceptionType -> CalendarDate
cd_service_id :: CalendarDate -> ServiceID
cd_date :: CalendarDate -> Date
cd_exception_type :: CalendarDate -> ExceptionType
data FareAttribute
FareAttribute :: FareID -> Price -> Currency -> PaymentMethod -> TransferLimit -> Maybe Seconds -> FareAttribute
fa_fare_id :: FareAttribute -> FareID
fa_price :: FareAttribute -> Price
fa_currency_type :: FareAttribute -> Currency
fa_payment_method :: FareAttribute -> PaymentMethod
fa_transfers :: FareAttribute -> TransferLimit
fa_transfer_duration :: FareAttribute -> Maybe Seconds
data FareRule
FareRule :: FareID -> Maybe RouteID -> Maybe ZoneID -> Maybe ZoneID -> Maybe ZoneID -> FareRule
fr_fare_id :: FareRule -> FareID
fr_route_id :: FareRule -> Maybe RouteID
fr_origin_id :: FareRule -> Maybe ZoneID
fr_destination_id :: FareRule -> Maybe ZoneID
fr_contains_id :: FareRule -> Maybe ZoneID
data Shape
Shape :: ShapeID -> LatLon -> LatLon -> Sequence -> Maybe Distance -> Shape
sh_shape_id :: Shape -> ShapeID
sh_shape_pt_lat :: Shape -> LatLon
sh_shape_pt_lon :: Shape -> LatLon
sh_shape_pt_sequence :: Shape -> Sequence
sh_shape_dist_traveled :: Shape -> Maybe Distance
data Frequency
Frequency :: TripID -> Time -> Time -> Seconds -> Frequency
fq_trip_id :: Frequency -> TripID
fq_start_time :: Frequency -> Time
fq_end_time :: Frequency -> Time
fq_headway_secs :: Frequency -> Seconds
data Transfer
Transfer :: StopID -> StopID -> TransferType -> Maybe Seconds -> Transfer
x_from_stop_id :: Transfer -> StopID
x_to_stop_id :: Transfer -> StopID
x_transfer_type :: Transfer -> TransferType
x_min_transfer_time :: Transfer -> Maybe Seconds
data Feed
Feed :: [Agency] -> [Stop] -> [Route] -> [Trip] -> [StopTime] -> [Calendar] -> [CalendarDate] -> [FareAttribute] -> [FareRule] -> [Shape] -> [Frequency] -> [Transfer] -> Feed
f_agency :: Feed -> [Agency]
f_stops :: Feed -> [Stop]
f_routes :: Feed -> [Route]
f_trips :: Feed -> [Trip]
f_stop_times :: Feed -> [StopTime]
f_calendar :: Feed -> [Calendar]
f_calendar_dates :: Feed -> [CalendarDate]
f_fare_attributes :: Feed -> [FareAttribute]
f_fare_rules :: Feed -> [FareRule]
f_shapes :: Feed -> [Shape]
f_frequencies :: Feed -> [Frequency]
f_transfers :: Feed -> [Transfer]

-- | Year, month, day.
data Date
Date :: Int -> Int -> Int -> Date

-- | Hour, minute, second.
--   
--   Hours over 23 are legal, representing the next day relative to the
--   start of a trip.
data Time
Time :: Int -> Int -> Int -> Time
type AgencyID = String
type BlockID = String
type FareID = String
type RouteID = String
type ServiceID = String
type ShapeID = String
type StopID = String
type TripID = String
type ZoneID = String
type URL = String
type Phone = String
type Timezone = String
type Language = String
type Currency = String
type Color = String
type Sequence = Int
type Seconds = Int
type Distance = Double
type Price = Double
type LatLon = Double
type TransferLimit = Maybe Int
instance Show Time
instance Show Date
instance Show Feed
instance Show Transfer
instance Show Frequency
instance Show Shape
instance Show FareRule
instance Show FareAttribute
instance Show CalendarDate
instance Show Calendar
instance Show StopTime
instance Show Trip
instance Show Route
instance Show Stop
instance Show Agency
instance Show TransferType
instance Enum TransferType
instance Bounded TransferType
instance Eq TransferType
instance Ord TransferType
instance Show PaymentMethod
instance Enum PaymentMethod
instance Bounded PaymentMethod
instance Eq PaymentMethod
instance Ord PaymentMethod
instance Show ExceptionType
instance Enum ExceptionType
instance Bounded ExceptionType
instance Eq ExceptionType
instance Ord ExceptionType
instance Show ServiceFlag
instance Enum ServiceFlag
instance Bounded ServiceFlag
instance Eq ServiceFlag
instance Ord ServiceFlag
instance Show OnOffType
instance Enum OnOffType
instance Bounded OnOffType
instance Eq OnOffType
instance Ord OnOffType
instance Show DirectionID
instance Enum DirectionID
instance Bounded DirectionID
instance Eq DirectionID
instance Ord DirectionID
instance Show RouteType
instance Enum RouteType
instance Bounded RouteType
instance Eq RouteType
instance Ord RouteType
instance Show LocationType
instance Enum LocationType
instance Bounded LocationType
instance Eq LocationType
instance Ord LocationType


-- | Parsing GTFS files.
--   
--   Besides these functions, this module provides many orphan instances of
--   <tt><a>Field</a></tt> and <tt><a>ParseRow</a></tt>.
module Data.GTFS.Parse

-- | Parse a single GTFS data file.
--   
--   Since some files are optional, this produces an empty list if the file
--   does not exist.
parseFile :: ParseRow a => FilePath -> IO [a]

-- | Parse an entire feed directory.
--   
--   Each individual file is read and parsed only when its field in
--   <tt><a>Feed</a></tt> is forced. The usual caveats of lazy I/O apply.
--   Parsing within a file is not lazy.
--   
--   Alternatives to this function include <tt><a>parseFile</a></tt> and
--   <tt><a>parseRow</a></tt>.
parseFeed :: FilePath -> IO Feed
instance ParseRow Transfer
instance ParseRow Frequency
instance ParseRow Shape
instance ParseRow FareRule
instance ParseRow FareAttribute
instance ParseRow CalendarDate
instance ParseRow Calendar
instance ParseRow StopTime
instance ParseRow Trip
instance ParseRow Route
instance ParseRow Stop
instance ParseRow Agency
instance Field Time
instance Field Date
instance Field TransferType
instance Field PaymentMethod
instance Field ExceptionType
instance Field ServiceFlag
instance Field OnOffType
instance Field DirectionID
instance Field RouteType
instance Field LocationType
