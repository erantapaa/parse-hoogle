-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple code hotswapping.
--   
--   A simple, high-level interface to plugins.
@package hotswap
@version 0.1.9.13

module System.Plugins.Hotswap
data Plugin a
Plugin :: FilePath -> [FilePath] -> String -> IORef a -> IORef Module -> Plugin a

-- | Path to object
pluginObject :: Plugin a -> FilePath

-- | Include paths.
pluginIncludes :: Plugin a -> [FilePath]

-- | Name of the symbol to find.
pluginDataName :: Plugin a -> String

-- | Loaded data.
pluginData :: Plugin a -> IORef a

-- | Loaded module.
pluginModule :: Plugin a -> IORef Module

-- | Create a new plugin, expecting a type. Don't use this to reload
--   plugins.
newPlugin :: FilePath -> [FilePath] -> String -> IO (Plugin a)

-- | <a>usePlugin</a> provides a simple way to use plugins of type 'Plugin
--   (a -&gt; b)', ie, only single argumented ones.
usePlugin :: Plugin (a -> b) -> a -> IO b

-- | <a>usePlugin</a> for plugins returning IO.
usePluginIO :: Plugin (a -> IO b) -> a -> IO b

-- | <a>runPlugin</a> runs an 'IO a' returning <a>Plugin</a>.
runPlugin :: Plugin (IO a) -> IO a

-- | Reload a plugin in-place.
reloadPlugin :: Plugin a -> IO ()

-- | Read the <a>pluginData</a> <a>IORef</a>.
readPlugin :: Plugin a -> IO a

-- | <a>withPlugin</a> provides a way to run a function on a plugin,
--   modifying the plugin in-place.
withPlugin :: Plugin a -> (a -> a) -> IO ()

-- | <a>withPlugin</a> for functions returning IO.
withPluginIO :: Plugin a -> (a -> IO a) -> IO ()

-- | Replace the contents of the <a>pluginData</a>.
putPlugin :: Plugin a -> a -> IO ()
