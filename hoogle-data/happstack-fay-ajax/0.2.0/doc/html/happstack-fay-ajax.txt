-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Support for using Fay with Happstack
--   
--   Fay is strict subset of Happstack which can be compiled to Javascript.
--   This library provides some utilities for client-server RPC.
--   
--   This package provides the client-side libraries. See also
--   happstack-fay.
@package happstack-fay-ajax
@version 0.2.0

module ResponseType

-- | <a>ResponseType</a> is used in lieu of <tt>GADTs</tt> as a mechanism
--   for specifying the expected return type of remote AJAX calls.
data ResponseType a
ResponseType :: ResponseType a
instance Typeable1 ResponseType
instance Data a => Data (ResponseType a)
instance Read (ResponseType a)
instance Show (ResponseType a)
instance Eq (ResponseType a)


-- | client-side half of a typed AJAX communication channel.
--   
--   To use this library, you could start by defining a type in a file that
--   can be shared between the Haskell Server and Fay client. For example:
--   
--   <pre>
--   data Command
--       = SendGuess Guess (ResponseType (Maybe Row))
--       | FetchBoard (ResponseType (Maybe Board))
--       deriving (Read, Show, Data, Typeable)
--   instance Foreign Command
--   </pre>
--   
--   The <a>ResponseType</a> argument specifies what type each command
--   should return. Using GADTs would be cleaner, but Fay does not support
--   GADTs yet.
--   
--   To execute a remote function we use the <a>call</a> function:
--   
--   <pre>
--   call <a>/ajax</a> FetchBoard $ mboard -&gt; ...
--   </pre>
--   
--   Due to the single-threaded nature of Javascript, we do not want to
--   block until the <a>call</a> returns a value, so we perform the AJAX
--   request asynchronously. The third argument to <a>call</a> is the
--   callback function to run when the response is received.
module AJAX

-- | Asynchronously call a command
--   
--   Note: if the server returns 404 or some other non-success exit code,
--   the callback function will never be run.
--   
--   This function is just a wrapper around <a>ajaxCommand</a> which uses
--   the 'ResponseType res' phantom-typed parameter for added type safety.
call :: String -> (ResponseType res -> cmd) -> (res -> Fay ()) -> Fay ()

-- | Run the AJAX command. (internal)
--   
--   You probably want to use <a>call</a> which provides additional
--   type-safety.
--   
--   Note: if the server returns 404 or some other non-success exit code,
--   the callback function will never be run.
--   
--   see also: <a>call</a>
ajaxCommand :: String -> Automatic cmd -> (Automatic res -> Fay ()) -> Fay ()
