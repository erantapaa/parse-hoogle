-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | POSIX Realtime functionality
--   
--   This package gives you access to the set of operating system services
--   standardised by POSIX 1003.1b (or the IEEE Portable Operating System
--   Interface for Computing Environments - IEEE Std. 1003.1).
--   
--   The package is not supported under Windows (except under Cygwin).
@package posix-realtime
@version 0.0.0.3


-- | POSIX 1003.1b memory locking support.
module System.Posix.Realtime.LockedMem
data LockAllFlags
[CURRENT] :: LockAllFlags
[FUTURE] :: LockAllFlags

-- | lock a region of memory
lockMemory :: Ptr Word8 -> ByteCount -> IO ()

-- | unlock a region of memory
unlockMemory :: Ptr Word8 -> ByteCount -> IO ()

-- | lock all of a prcocess's memory space
lockAllMemory :: LockAllFlags -> IO ()

-- | unlock all mapped pages of a process!
unlockAllMemory :: IO ()


-- | POSIX 1003.1b real-time data types used by multiple Haskell modules
module System.Posix.Realtime.RTDataTypes
newtype Sigval
[SivalInt] :: Int -> Sigval
data Sigevent
[Sigevent] :: Sigval -> Signal -> Int -> FunPtr (Sigval -> IO ()) -> Ptr Char -> Sigevent
[sigevVal] :: Sigevent -> Sigval
[sigevSigno] :: Sigevent -> Signal
[sigevNotify] :: Sigevent -> Int
[sigevFunction] :: Sigevent -> FunPtr (Sigval -> IO ())
[sigevAttribute] :: Sigevent -> Ptr Char
data TimeSpec
[TimeSpec] :: Int -> Int -> TimeSpec
[tvSec] :: TimeSpec -> Int
[tvNsec] :: TimeSpec -> Int
data ItimerSpec
[ItimerSpec] :: TimeSpec -> TimeSpec -> ItimerSpec

-- | Timer period
[itInterval] :: ItimerSpec -> TimeSpec

-- | Timer expiration
[itValue] :: ItimerSpec -> TimeSpec
instance Show ItimerSpec
instance Show TimeSpec
instance Show Sigevent
instance Show Sigval
instance Storable Sigval
instance Storable Sigevent
instance Storable TimeSpec
instance Storable ItimerSpec


-- | POSIX 1003.1b realtime scheduling support.
module System.Posix.Realtime.RTSched
type Pid = Int
type Policy = Int
data SchedParam
[SchedParam] :: Int -> SchedParam
[schedPriority] :: SchedParam -> Int

-- | Running thread relinquishes control of its processor
schedYield :: IO ()

-- | Returns the scheduling policy of the process specified by Pid.
schedGetScheduler :: Pid -> IO (Int)

-- | Sets the scheduling policy and scheduling parameters of the process |
--   specified by Pid to policy and the parameters specified schedParam. |
--   The value of the schedPriority member in schedParam is any integer |
--   within the inclusive priority range for the scheduling policy
--   specified | by policy.
schedSetScheduler :: Pid -> Policy -> SchedParam -> IO ()

-- | Returns the scheduling parameters of a process specified by Pid | in
--   schedParam.
schedGetParam :: Pid -> IO SchedParam

-- | Sets the scheduling parameters of the process specified by Pid to |
--   the values specified by schedParam.
schedSetParam :: Pid -> SchedParam -> IO ()

-- | Returns the appropriate minimum for the scheduling policy specified |
--   by Policy.
schedGetPriorityMin :: Policy -> IO (Int)

-- | Returns the appropriate maximum for the scheduling policy specified |
--   by Policy.
schedGetPriorityMax :: Policy -> IO (Int)

-- | Get Round Robin scheduling interval
schedRRGetInterval :: Pid -> IO (TimeSpec)
instance Storable SchedParam


-- | POSIX Realtime Timer and Clock support
module System.Posix.Realtime.RTTime
type TimerId = Int
data ClockId
[Clock_Realtime] :: ClockId
[Clock_Monotonic] :: ClockId
[Clock_Process_CPUTime_ID] :: ClockId
[Clock_Thread_CPUTime_ID] :: ClockId
data SetTimeFlag
[Timer_Abstime] :: SetTimeFlag

-- | Create a realtime timer
timerCreate :: ClockId -> Maybe Sigevent -> IO (TimerId)

-- | Delete the timer designated by "timerId".
timerDelete :: TimerId -> IO ()

-- | Set the current timer state
timerSetTime :: TimerId -> SetTimeFlag -> ItimerSpec -> IO (ItimerSpec)

-- | Get the current timer state
timerGetTime :: TimerId -> IO (ItimerSpec)

-- | Get the timer overrun count!
timerGetOverrun :: TimerId -> IO Int

-- | Get clock resolution
clockGetRes :: ClockId -> IO TimeSpec

-- | Get clock time
clockGetTime :: ClockId -> IO TimeSpec

-- | Set clock time
clockSetTime :: ClockId -> TimeSpec -> IO ()


-- | POSIX 1003.1b POSIX Asynchronous I/O
module System.Posix.Realtime.Aio
type AIOCB = ForeignPtr AIOCBStruct

-- | makeAIOCB is a helper function that builds an "aiocb" from all its
--   fields
makeAIOCB :: Fd -> Int -> Int -> FileOffset -> Ptr Word8 -> ByteCount -> Sigevent -> IO (AIOCB)

-- | Posix AIO return
aioRead :: AIOCB -> IO ()

-- | Posix AIO write
aioWrite :: AIOCB -> IO ()

-- | Posix AIO return
aioReturn :: AIOCB -> IO (ByteCount)

-- | Posix AIO error
aioError :: AIOCB -> IO (Errno)

-- | Posix AIO cancel
aioCancel :: Fd -> AIOCB -> IO ()

-- | Posix asynchronous file synchronization!
data SyncOp
[DSync] :: SyncOp
[Sync] :: SyncOp
aioFsync :: SyncOp -> AIOCB -> IO ()

-- | Posix AIO suspend
aioSuspend :: [AIOCB] -> TimeSpec -> IO ()

-- | Posix AIO lio_listio
type ListIOMode = Int
lioListIO :: ListIOMode -> [AIOCB] -> Sigevent -> IO ()


-- | POSIX 1003.1b message queue support.
module System.Posix.Realtime.MQueue
data MQAttributes
[MQAttributes] :: Int -> Int -> Int -> Int -> MQAttributes
[flags] :: MQAttributes -> Int
[maxMsgNum] :: MQAttributes -> Int
[maxMsgSize] :: MQAttributes -> Int
[curNumMsgs] :: MQAttributes -> Int

-- | Open and optionally create this message queue. See <a>Files</a> | for
--   information on how to use the <a>FileMode</a> type. | Note: After
--   referring to several mqueue implementations, it seems that the | POSIX
--   standard doesn't tightly constrain <a>Name</a>'s syntax. E.g. one
--   Linux | implementation expects that <a>Name</a> starts with a "/".
--   This is a warning | to the user. The author wasted a fair amount of
--   time on this issue and | and doesn't wish this on others ...
mqOpen :: Name -> OpenMode -> Maybe FileMode -> Maybe MQAttributes -> IO Fd

-- | Close a POSIX mqueue designated by "mqd"
mqClose :: Fd -> IO ()

-- | Unlink (destroy) an existing POSIX mqueue designated by "name"
mqUnlink :: String -> IO ()

-- | Send a message on mqueue designated by "mqd"
mqSend :: Fd -> String -> ByteCount -> Int -> IO ()

-- | Retrieve a message from mqueue designated by "mqd"
mqReceive :: Fd -> ByteCount -> Maybe Int -> IO (String, Int)

-- | Get the attributes for an existing POSIX message queue designated by |
--   "mqd"
mqGetAttributes :: Fd -> IO MQAttributes

-- | Set the attributes for an existing POSIX mqueue designated by "mqd"
--   and | retrieve old attributes
mqSetAttributes :: Fd -> MQAttributes -> IO (MQAttributes)

-- | Notify a registered process of the new-message-in-empty-queue event!
mqNotify :: Fd -> Maybe Sigevent -> IO ()
instance Show MQAttributes
instance Storable MQAttributes
