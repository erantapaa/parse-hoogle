-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Configuration management
--   
--   Configuration management
@package yaml-config
@version 0.2.0

module Data.Yaml.Config.Internal

-- | Type contains config section and path from root.
data Config
Config :: [Key] -> Object -> Config

-- | This error can be raised if config has not target path.
newtype KeyError
KeyError :: Key -> KeyError

-- | Config or field name
type Key = Text

-- | Find file in filesystem and try to load it as YAML config. May fail
--   with <tt>InvalidYaml</tt> if file not found.
--   
--   <pre>
--   &gt;&gt;&gt; config &lt;- load "example.yaml"
--   </pre>
load :: FilePath -> IO Config

-- | Show all first level config field's.
--   
--   <pre>
--   &gt;&gt;&gt; keys config
--   ["section1","section2"]
--   </pre>
keys :: Config -> [Key]

-- | Get subconfig by name. May fail with <tt>KeyError</tt> if target key
--   doesn't exist at current level.
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedStrings
--   
--   &gt;&gt;&gt; sub &lt;- subconfig "section1" config
--   </pre>
subconfig :: Failure KeyError m => Key -> Config -> m Config

-- | Get value for given key. May fail with <tt>KeyError</tt> if key
--   doesn't exist.
--   
--   <pre>
--   &gt;&gt;&gt; keys sub
--   ["field1","field2"]
--   
--   &gt;&gt;&gt; putStrLn =&lt;&lt; lookup "field1" sub
--   value1
--   </pre>
lookup :: (Failure KeyError m, FromJSON a) => Key -> Config -> m a

-- | Find value in config and return it or return default value.
--   
--   <pre>
--   &gt;&gt;&gt; lookupDefault "field3" "def" sub
--   "def"
--   </pre>
lookupDefault :: FromJSON a => Key -> a -> Config -> a

-- | Show full path from the root to target key. Levels are separated by
--   dots.
--   
--   <pre>
--   &gt;&gt;&gt; fullpath sub "field1"
--   "section1.field1"
--   </pre>
fullpath :: Config -> Key -> Key
instance Typeable KeyError
instance Show KeyError
instance Eq Config
instance Show Config
instance NFData Config
instance Exception KeyError


-- | Library for read config files in YAML format.
--   
--   example.yaml:
--   
--   <pre>
--   server:
--       port: 8080
--       logs:
--           access: /var/log/server/access.log
--           error:  /var/log/server/error.log
--   </pre>
--   
--   Usage example:
--   
--   <pre>
--   module Main where
--   import Prelude hiding (lookup)
--   import Data.Word (Word16)
--   import Data.Yaml.Config (load, subconfig, lookupDefault, lookup)
--   
--   main :: IO ()
--   main = do
--       config &lt;- load "./example.yaml"
--   
--       serverConfig &lt;- subconfig "server" config
--       let interface = lookupDefault "interface" "127.0.0.1" serverConfig
--           port :: Word16 = lookupDefault "port" 80 serverConfig
--   
--       logConfig &lt;- subconfig "logs" serverConfig
--       accessLog &lt;- lookup "access" logConfig
--       errorLog &lt;- lookup "error" logConfig
--   
--       mapM_ putStrLn [interface, (show port), errorLog, accessLog]
--   </pre>
module Data.Yaml.Config

-- | Type contains config section and path from root.
data Config

-- | Config or field name
type Key = Text

-- | This error can be raised if config has not target path.
newtype KeyError
KeyError :: Key -> KeyError

-- | Find file in filesystem and try to load it as YAML config. May fail
--   with <tt>InvalidYaml</tt> if file not found.
--   
--   <pre>
--   &gt;&gt;&gt; config &lt;- load "example.yaml"
--   </pre>
load :: FilePath -> IO Config

-- | Show all first level config field's.
--   
--   <pre>
--   &gt;&gt;&gt; keys config
--   ["section1","section2"]
--   </pre>
keys :: Config -> [Key]

-- | Get subconfig by name. May fail with <tt>KeyError</tt> if target key
--   doesn't exist at current level.
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedStrings
--   
--   &gt;&gt;&gt; sub &lt;- subconfig "section1" config
--   </pre>
subconfig :: Failure KeyError m => Key -> Config -> m Config

-- | Get value for given key. May fail with <tt>KeyError</tt> if key
--   doesn't exist.
--   
--   <pre>
--   &gt;&gt;&gt; keys sub
--   ["field1","field2"]
--   
--   &gt;&gt;&gt; putStrLn =&lt;&lt; lookup "field1" sub
--   value1
--   </pre>
lookup :: (Failure KeyError m, FromJSON a) => Key -> Config -> m a

-- | Find value in config and return it or return default value.
--   
--   <pre>
--   &gt;&gt;&gt; lookupDefault "field3" "def" sub
--   "def"
--   </pre>
lookupDefault :: FromJSON a => Key -> a -> Config -> a
