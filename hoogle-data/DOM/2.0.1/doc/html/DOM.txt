-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | DOM Level 2 bindings for the WebBits package.
--   
--   This package provides monadic smart constructors for Javascript syntax
--   representation implemented in the <a>WebBits</a> package. Most of this
--   package's code was autogenerated from IDL files available from the Web
--   Consortium. See e. g.
--   <a>http://www.w3.org/TR/DOM-Level-2-Core/idl-definitions.html</a>
--   These constructors help generate WebBits representation of Javascript
--   code that works with methods and attributes of DOM objects in typesafe
--   manner using monadic notation of Haskell.
--   
--   See documentation for the <a>Data.DOM</a> module for more information
--   and a brief usage example.
--   
--   In the package version number, the version major reflects the level of
--   DOM specification for which bindings are provided.
--   
--   In the 2.0.1 version, the WebBits dependency version number is 0.15.
--   No other changes were made.
@package DOM
@version 2.0.1


-- | Minimal glue for BrownPLT and DOM
module Data.DOM.WBTypes

-- | Cast a BrownPLT Javascript expression to the given type. Type is
--   represented by a value of the desired type (ofter <a>undefined</a>).
castExpr :: Functor x => b -> x a -> x b

-- | Extract a type from an expression.
exprType :: Expression a -> a

-- | An infix version of <a>castExpr</a> provided for convenience.
(/\) :: Functor x => x a -> b -> x b

-- | A helper function to encode a property setter. This function is mostly
--   called from converted IDL files for DOM interfaces.
setjsProperty :: Monad m => String -> Expression a -> Expression this -> m (Expression this)

module Data.DOM.Dom
data TDOMImplementation
TDOMImplementation :: TDOMImplementation
data TNode
TNode :: TNode
data TNodeList
TNodeList :: TNodeList
data TNamedNodeMap
TNamedNodeMap :: TNamedNodeMap
data TCharacterData
TCharacterData :: TCharacterData
data TAttr
TAttr :: TAttr
data TElement
TElement :: TElement
data TText
TText :: TText
data TComment
TComment :: TComment
data TCDATASection
TCDATASection :: TCDATASection
data TDocumentType
TDocumentType :: TDocumentType
data TNotation
TNotation :: TNotation
data TEntity
TEntity :: TEntity
data TEntityReference
TEntityReference :: TEntityReference
data TProcessingInstruction
TProcessingInstruction :: TProcessingInstruction
data TDocumentFragment
TDocumentFragment :: TDocumentFragment
data TDocument
TDocument :: TDocument
class CDOMImplementation a
class CNode a
class CNodeList a
class CNamedNodeMap a
class CNode a => CCharacterData a
class CNode a => CAttr a
class CNode a => CElement a
class CCharacterData a => CText a
class CCharacterData a => CComment a
class CText a => CCDATASection a
class CNode a => CDocumentType a
class CNode a => CNotation a
class CNode a => CEntity a
class CNode a => CEntityReference a
class CNode a => CProcessingInstruction a
class CNode a => CDocumentFragment a
class CNode a => CDocument a
instance CNode TDocument
instance CDocument TDocument
instance CNode TDocumentFragment
instance CDocumentFragment TDocumentFragment
instance CNode TProcessingInstruction
instance CProcessingInstruction TProcessingInstruction
instance CNode TEntityReference
instance CEntityReference TEntityReference
instance CNode TEntity
instance CEntity TEntity
instance CNode TNotation
instance CNotation TNotation
instance CNode TDocumentType
instance CDocumentType TDocumentType
instance CNode TCDATASection
instance CCharacterData TCDATASection
instance CText TCDATASection
instance CCDATASection TCDATASection
instance CNode TComment
instance CCharacterData TComment
instance CComment TComment
instance CNode TText
instance CCharacterData TText
instance CText TText
instance CNode TElement
instance CElement TElement
instance CNode TAttr
instance CAttr TAttr
instance CNode TCharacterData
instance CCharacterData TCharacterData
instance CNamedNodeMap TNamedNodeMap
instance CNodeList TNodeList
instance CNode TNode
instance CDOMImplementation TDOMImplementation

module Data.DOM.Views
data TAbstractView
TAbstractView :: TAbstractView
data TDocumentView
TDocumentView :: TDocumentView
class CAbstractView a
class CDocumentView a
instance CDocumentView TDocumentView
instance CAbstractView TAbstractView

module Data.DOM.Stylesheets
data TStyleSheet
TStyleSheet :: TStyleSheet
data TStyleSheetList
TStyleSheetList :: TStyleSheetList
data TMediaList
TMediaList :: TMediaList
data TLinkStyle
TLinkStyle :: TLinkStyle
data TDocumentStyle
TDocumentStyle :: TDocumentStyle
class CStyleSheet a
class CStyleSheetList a
class CMediaList a
class CLinkStyle a
class CDocumentStyle a
instance CDocumentStyle TDocumentStyle
instance CLinkStyle TLinkStyle
instance CMediaList TMediaList
instance CStyleSheetList TStyleSheetList
instance CStyleSheet TStyleSheet

module Data.DOM.Document
createElement :: (Monad mn, CDocument this, CElement zz) => Expression String -> Expression this -> mn (Expression zz)
createDocumentFragment :: (Monad mn, CDocument this, CDocumentFragment zz) => Expression this -> mn (Expression zz)
createTextNode :: (Monad mn, CDocument this, CText zz) => Expression String -> Expression this -> mn (Expression zz)
createComment :: (Monad mn, CDocument this, CComment zz) => Expression String -> Expression this -> mn (Expression zz)
createCDATASection :: (Monad mn, CDocument this, CCDATASection zz) => Expression String -> Expression this -> mn (Expression zz)
createProcessingInstruction :: (Monad mn, CDocument this, CProcessingInstruction zz) => Expression String -> Expression String -> Expression this -> mn (Expression zz)
createAttribute :: (Monad mn, CDocument this, CAttr zz) => Expression String -> Expression this -> mn (Expression zz)
createEntityReference :: (Monad mn, CDocument this, CEntityReference zz) => Expression String -> Expression this -> mn (Expression zz)
getElementsByTagName :: (Monad mn, CDocument this, CNodeList zz) => Expression String -> Expression this -> mn (Expression zz)
importNode :: (Monad mn, CDocument this, CNode importedNode, CNode zz) => Expression importedNode -> Expression Bool -> Expression this -> mn (Expression zz)
createElementNS :: (Monad mn, CDocument this, CElement zz) => Expression String -> Expression String -> Expression this -> mn (Expression zz)
createAttributeNS :: (Monad mn, CDocument this, CAttr zz) => Expression String -> Expression String -> Expression this -> mn (Expression zz)
getElementsByTagNameNS :: (Monad mn, CDocument this, CNodeList zz) => Expression String -> Expression String -> Expression this -> mn (Expression zz)
getElementById :: (Monad mn, CDocument this, CElement zz) => Expression String -> Expression this -> mn (Expression zz)
get'doctype :: (Monad mn, CDocument this, CDocumentType zz) => Expression this -> mn (Expression zz)
getm'doctype :: (Monad mn, CDocument this) => Expression this -> mn (Expression TDocumentType)
get'implementation :: (Monad mn, CDocument this, CDOMImplementation zz) => Expression this -> mn (Expression zz)
getm'implementation :: (Monad mn, CDocument this) => Expression this -> mn (Expression TDOMImplementation)
get'documentElement :: (Monad mn, CDocument this, CElement zz) => Expression this -> mn (Expression zz)
getm'documentElement :: (Monad mn, CDocument this) => Expression this -> mn (Expression TElement)

module Data.DOM.Attr
get'name :: (Monad mn, CAttr this) => Expression this -> mn (Expression String)
getm'name :: (Monad mn, CAttr this) => Expression this -> mn (Expression String)
get'specified :: (Monad mn, CAttr this) => Expression this -> mn (Expression Bool)
getm'specified :: (Monad mn, CAttr this) => Expression this -> mn (Expression Bool)
set'value :: (Monad mn, CAttr zz) => Expression String -> Expression zz -> mn (Expression zz)
get'value :: (Monad mn, CAttr this) => Expression this -> mn (Expression String)
getm'value :: (Monad mn, CAttr this) => Expression this -> mn (Expression String)
get'ownerElement :: (Monad mn, CAttr this, CElement zz) => Expression this -> mn (Expression zz)
getm'ownerElement :: (Monad mn, CAttr this) => Expression this -> mn (Expression TElement)

module Data.DOM.CharacterData
substringData :: (Monad mn, CCharacterData this) => Expression Double -> Expression Double -> Expression this -> mn (Expression String)
appendData :: (Monad mn, CCharacterData this) => Expression String -> Expression this -> mn (Expression ())
insertData :: (Monad mn, CCharacterData this) => Expression Double -> Expression String -> Expression this -> mn (Expression ())
deleteData :: (Monad mn, CCharacterData this) => Expression Double -> Expression Double -> Expression this -> mn (Expression ())
replaceData :: (Monad mn, CCharacterData this) => Expression Double -> Expression Double -> Expression String -> Expression this -> mn (Expression ())
set'data :: (Monad mn, CCharacterData zz) => Expression String -> Expression zz -> mn (Expression zz)
get'data :: (Monad mn, CCharacterData this) => Expression this -> mn (Expression String)
getm'data :: (Monad mn, CCharacterData this) => Expression this -> mn (Expression String)
get'length :: (Monad mn, CCharacterData this) => Expression this -> mn (Expression Double)
getm'length :: (Monad mn, CCharacterData this) => Expression this -> mn (Expression Double)

module Data.DOM.DOMImplementation
hasFeature :: (Monad mn, CDOMImplementation this) => Expression String -> Expression String -> Expression this -> mn (Expression Bool)
createDocumentType :: (Monad mn, CDOMImplementation this, CDocumentType zz) => Expression String -> Expression String -> Expression String -> Expression this -> mn (Expression zz)
createDocument :: (Monad mn, CDOMImplementation this, CDocumentType doctype, CDocument zz) => Expression String -> Expression String -> Expression doctype -> Expression this -> mn (Expression zz)

module Data.DOM.DocumentType
get'name :: (Monad mn, CDocumentType this) => Expression this -> mn (Expression String)
getm'name :: (Monad mn, CDocumentType this) => Expression this -> mn (Expression String)
get'entities :: (Monad mn, CDocumentType this, CNamedNodeMap zz) => Expression this -> mn (Expression zz)
getm'entities :: (Monad mn, CDocumentType this) => Expression this -> mn (Expression TNamedNodeMap)
get'notations :: (Monad mn, CDocumentType this, CNamedNodeMap zz) => Expression this -> mn (Expression zz)
getm'notations :: (Monad mn, CDocumentType this) => Expression this -> mn (Expression TNamedNodeMap)
get'publicId :: (Monad mn, CDocumentType this) => Expression this -> mn (Expression String)
getm'publicId :: (Monad mn, CDocumentType this) => Expression this -> mn (Expression String)
get'systemId :: (Monad mn, CDocumentType this) => Expression this -> mn (Expression String)
getm'systemId :: (Monad mn, CDocumentType this) => Expression this -> mn (Expression String)
get'internalSubset :: (Monad mn, CDocumentType this) => Expression this -> mn (Expression String)
getm'internalSubset :: (Monad mn, CDocumentType this) => Expression this -> mn (Expression String)

module Data.DOM.Element
getAttribute :: (Monad mn, CElement this) => Expression String -> Expression this -> mn (Expression String)
setAttribute :: (Monad mn, CElement this) => Expression String -> Expression String -> Expression this -> mn (Expression ())
removeAttribute :: (Monad mn, CElement this) => Expression String -> Expression this -> mn (Expression ())
getAttributeNode :: (Monad mn, CElement this, CAttr zz) => Expression String -> Expression this -> mn (Expression zz)
setAttributeNode :: (Monad mn, CElement this, CAttr newAttr, CAttr zz) => Expression newAttr -> Expression this -> mn (Expression zz)
removeAttributeNode :: (Monad mn, CElement this, CAttr oldAttr, CAttr zz) => Expression oldAttr -> Expression this -> mn (Expression zz)
getElementsByTagName :: (Monad mn, CElement this, CNodeList zz) => Expression String -> Expression this -> mn (Expression zz)
getAttributeNS :: (Monad mn, CElement this) => Expression String -> Expression String -> Expression this -> mn (Expression String)
setAttributeNS :: (Monad mn, CElement this) => Expression String -> Expression String -> Expression String -> Expression this -> mn (Expression ())
removeAttributeNS :: (Monad mn, CElement this) => Expression String -> Expression String -> Expression this -> mn (Expression ())
getAttributeNodeNS :: (Monad mn, CElement this, CAttr zz) => Expression String -> Expression String -> Expression this -> mn (Expression zz)
setAttributeNodeNS :: (Monad mn, CElement this, CAttr newAttr, CAttr zz) => Expression newAttr -> Expression this -> mn (Expression zz)
getElementsByTagNameNS :: (Monad mn, CElement this, CNodeList zz) => Expression String -> Expression String -> Expression this -> mn (Expression zz)
hasAttribute :: (Monad mn, CElement this) => Expression String -> Expression this -> mn (Expression Bool)
hasAttributeNS :: (Monad mn, CElement this) => Expression String -> Expression String -> Expression this -> mn (Expression Bool)
get'tagName :: (Monad mn, CElement this) => Expression this -> mn (Expression String)
getm'tagName :: (Monad mn, CElement this) => Expression this -> mn (Expression String)

module Data.DOM.Entity
get'publicId :: (Monad mn, CEntity this) => Expression this -> mn (Expression String)
getm'publicId :: (Monad mn, CEntity this) => Expression this -> mn (Expression String)
get'systemId :: (Monad mn, CEntity this) => Expression this -> mn (Expression String)
getm'systemId :: (Monad mn, CEntity this) => Expression this -> mn (Expression String)
get'notationName :: (Monad mn, CEntity this) => Expression this -> mn (Expression String)
getm'notationName :: (Monad mn, CEntity this) => Expression this -> mn (Expression String)

module Data.DOM.NamedNodeMap
getNamedItem :: (Monad mn, CNamedNodeMap this, CNode zz) => Expression String -> Expression this -> mn (Expression zz)
setNamedItem :: (Monad mn, CNamedNodeMap this, CNode arg, CNode zz) => Expression arg -> Expression this -> mn (Expression zz)
removeNamedItem :: (Monad mn, CNamedNodeMap this, CNode zz) => Expression String -> Expression this -> mn (Expression zz)
item :: (Monad mn, CNamedNodeMap this, CNode zz) => Expression Double -> Expression this -> mn (Expression zz)
getNamedItemNS :: (Monad mn, CNamedNodeMap this, CNode zz) => Expression String -> Expression String -> Expression this -> mn (Expression zz)
setNamedItemNS :: (Monad mn, CNamedNodeMap this, CNode arg, CNode zz) => Expression arg -> Expression this -> mn (Expression zz)
removeNamedItemNS :: (Monad mn, CNamedNodeMap this, CNode zz) => Expression String -> Expression String -> Expression this -> mn (Expression zz)
get'length :: (Monad mn, CNamedNodeMap this) => Expression this -> mn (Expression Double)
getm'length :: (Monad mn, CNamedNodeMap this) => Expression this -> mn (Expression Double)

module Data.DOM.Node
insertBefore :: (Monad mn, CNode this, CNode newChild, CNode refChild, CNode zz) => Expression newChild -> Expression refChild -> Expression this -> mn (Expression zz)
replaceChild :: (Monad mn, CNode this, CNode newChild, CNode oldChild, CNode zz) => Expression newChild -> Expression oldChild -> Expression this -> mn (Expression zz)
removeChild :: (Monad mn, CNode this, CNode oldChild, CNode zz) => Expression oldChild -> Expression this -> mn (Expression zz)
appendChild :: (Monad mn, CNode this, CNode newChild, CNode zz) => Expression newChild -> Expression this -> mn (Expression zz)
hasChildNodes :: (Monad mn, CNode this) => Expression this -> mn (Expression Bool)
cloneNode :: (Monad mn, CNode this, CNode zz) => Expression Bool -> Expression this -> mn (Expression zz)
normalize :: (Monad mn, CNode this) => Expression this -> mn (Expression ())
isSupported :: (Monad mn, CNode this) => Expression String -> Expression String -> Expression this -> mn (Expression Bool)
hasAttributes :: (Monad mn, CNode this) => Expression this -> mn (Expression Bool)
cELEMENT_NODE :: Integer
cATTRIBUTE_NODE :: Integer
cTEXT_NODE :: Integer
cCDATA_SECTION_NODE :: Integer
cENTITY_REFERENCE_NODE :: Integer
cENTITY_NODE :: Integer
cPROCESSING_INSTRUCTION_NODE :: Integer
cCOMMENT_NODE :: Integer
cDOCUMENT_NODE :: Integer
cDOCUMENT_TYPE_NODE :: Integer
cDOCUMENT_FRAGMENT_NODE :: Integer
cNOTATION_NODE :: Integer
get'nodeName :: (Monad mn, CNode this) => Expression this -> mn (Expression String)
getm'nodeName :: (Monad mn, CNode this) => Expression this -> mn (Expression String)
set'nodeValue :: (Monad mn, CNode zz) => Expression String -> Expression zz -> mn (Expression zz)
get'nodeValue :: (Monad mn, CNode this) => Expression this -> mn (Expression String)
getm'nodeValue :: (Monad mn, CNode this) => Expression this -> mn (Expression String)
get'nodeType :: (Monad mn, CNode this) => Expression this -> mn (Expression Double)
getm'nodeType :: (Monad mn, CNode this) => Expression this -> mn (Expression Double)
get'parentNode :: (Monad mn, CNode this, CNode zz) => Expression this -> mn (Expression zz)
getm'parentNode :: (Monad mn, CNode this) => Expression this -> mn (Expression TNode)
get'childNodes :: (Monad mn, CNode this, CNodeList zz) => Expression this -> mn (Expression zz)
getm'childNodes :: (Monad mn, CNode this) => Expression this -> mn (Expression TNodeList)
get'firstChild :: (Monad mn, CNode this, CNode zz) => Expression this -> mn (Expression zz)
getm'firstChild :: (Monad mn, CNode this) => Expression this -> mn (Expression TNode)
get'lastChild :: (Monad mn, CNode this, CNode zz) => Expression this -> mn (Expression zz)
getm'lastChild :: (Monad mn, CNode this) => Expression this -> mn (Expression TNode)
get'previousSibling :: (Monad mn, CNode this, CNode zz) => Expression this -> mn (Expression zz)
getm'previousSibling :: (Monad mn, CNode this) => Expression this -> mn (Expression TNode)
get'nextSibling :: (Monad mn, CNode this, CNode zz) => Expression this -> mn (Expression zz)
getm'nextSibling :: (Monad mn, CNode this) => Expression this -> mn (Expression TNode)
get'attributes :: (Monad mn, CNode this, CNamedNodeMap zz) => Expression this -> mn (Expression zz)
getm'attributes :: (Monad mn, CNode this) => Expression this -> mn (Expression TNamedNodeMap)
get'ownerDocument :: (Monad mn, CNode this, CDocument zz) => Expression this -> mn (Expression zz)
getm'ownerDocument :: (Monad mn, CNode this) => Expression this -> mn (Expression TDocument)
get'namespaceURI :: (Monad mn, CNode this) => Expression this -> mn (Expression String)
getm'namespaceURI :: (Monad mn, CNode this) => Expression this -> mn (Expression String)
set'prefix :: (Monad mn, CNode zz) => Expression String -> Expression zz -> mn (Expression zz)
get'prefix :: (Monad mn, CNode this) => Expression this -> mn (Expression String)
getm'prefix :: (Monad mn, CNode this) => Expression this -> mn (Expression String)
get'localName :: (Monad mn, CNode this) => Expression this -> mn (Expression String)
getm'localName :: (Monad mn, CNode this) => Expression this -> mn (Expression String)

module Data.DOM.NodeList
item :: (Monad mn, CNodeList this, CNode zz) => Expression Double -> Expression this -> mn (Expression zz)
get'length :: (Monad mn, CNodeList this) => Expression this -> mn (Expression Double)
getm'length :: (Monad mn, CNodeList this) => Expression this -> mn (Expression Double)

module Data.DOM.Notation
get'publicId :: (Monad mn, CNotation this) => Expression this -> mn (Expression String)
getm'publicId :: (Monad mn, CNotation this) => Expression this -> mn (Expression String)
get'systemId :: (Monad mn, CNotation this) => Expression this -> mn (Expression String)
getm'systemId :: (Monad mn, CNotation this) => Expression this -> mn (Expression String)

module Data.DOM.ProcessingInstruction
get'target :: (Monad mn, CProcessingInstruction this) => Expression this -> mn (Expression String)
getm'target :: (Monad mn, CProcessingInstruction this) => Expression this -> mn (Expression String)
set'data :: (Monad mn, CProcessingInstruction zz) => Expression String -> Expression zz -> mn (Expression zz)
get'data :: (Monad mn, CProcessingInstruction this) => Expression this -> mn (Expression String)
getm'data :: (Monad mn, CProcessingInstruction this) => Expression this -> mn (Expression String)

module Data.DOM.Text
splitText :: (Monad mn, CText this, CText zz) => Expression Double -> Expression this -> mn (Expression zz)

module Data.DOM.Events
data TEventTarget
TEventTarget :: TEventTarget
data TEventListener
TEventListener :: TEventListener
data TEvent
TEvent :: TEvent
data TDocumentEvent
TDocumentEvent :: TDocumentEvent
data TUIEvent
TUIEvent :: TUIEvent
data TMouseEvent
TMouseEvent :: TMouseEvent
data TMutationEvent
TMutationEvent :: TMutationEvent
data TKeyboardEvent
TKeyboardEvent :: TKeyboardEvent
data TKeyEvent
TKeyEvent :: TKeyEvent
class CEventTarget a
class CEventListener a
class CEvent a
class CDocumentEvent a
class CEvent a => CUIEvent a
class CUIEvent a => CMouseEvent a
class CEvent a => CMutationEvent a
class CUIEvent a => CKeyboardEvent a
class CUIEvent a => CKeyEvent a
instance CEvent TKeyEvent
instance CUIEvent TKeyEvent
instance CKeyEvent TKeyEvent
instance CEvent TKeyboardEvent
instance CUIEvent TKeyboardEvent
instance CKeyboardEvent TKeyboardEvent
instance CEvent TMutationEvent
instance CMutationEvent TMutationEvent
instance CEvent TMouseEvent
instance CUIEvent TMouseEvent
instance CMouseEvent TMouseEvent
instance CEvent TUIEvent
instance CUIEvent TUIEvent
instance CDocumentEvent TDocumentEvent
instance CEvent TEvent
instance CEventListener TEventListener
instance CEventTarget TEventTarget

module Data.DOM.DocumentEvent
createEvent :: (Monad mn, CDocumentEvent this, CEvent zz) => Expression String -> Expression this -> mn (Expression zz)

module Data.DOM.Event
stopPropagation :: (Monad mn, CEvent this) => Expression this -> mn (Expression ())
preventDefault :: (Monad mn, CEvent this) => Expression this -> mn (Expression ())
initEvent :: (Monad mn, CEvent this) => Expression String -> Expression Bool -> Expression Bool -> Expression this -> mn (Expression ())
cCAPTURING_PHASE :: Integer
cAT_TARGET :: Integer
cBUBBLING_PHASE :: Integer
get'type :: (Monad mn, CEvent this) => Expression this -> mn (Expression String)
getm'type :: (Monad mn, CEvent this) => Expression this -> mn (Expression String)
get'target :: (Monad mn, CEvent this, CEventTarget zz) => Expression this -> mn (Expression zz)
getm'target :: (Monad mn, CEvent this) => Expression this -> mn (Expression TEventTarget)
get'currentTarget :: (Monad mn, CEvent this, CEventTarget zz) => Expression this -> mn (Expression zz)
getm'currentTarget :: (Monad mn, CEvent this) => Expression this -> mn (Expression TEventTarget)
get'eventPhase :: (Monad mn, CEvent this) => Expression this -> mn (Expression Double)
getm'eventPhase :: (Monad mn, CEvent this) => Expression this -> mn (Expression Double)
get'bubbles :: (Monad mn, CEvent this) => Expression this -> mn (Expression Bool)
getm'bubbles :: (Monad mn, CEvent this) => Expression this -> mn (Expression Bool)
get'cancelable :: (Monad mn, CEvent this) => Expression this -> mn (Expression Bool)
getm'cancelable :: (Monad mn, CEvent this) => Expression this -> mn (Expression Bool)
get'timeStamp :: (Monad mn, CEvent this) => Expression this -> mn (Expression Double)
getm'timeStamp :: (Monad mn, CEvent this) => Expression this -> mn (Expression Double)

module Data.DOM.EventListener
handleEvent :: (Monad mn, CEventListener this, CEvent evt) => Expression evt -> Expression this -> mn (Expression ())

module Data.DOM.EventTarget
addEventListener :: (Monad mn, CEventTarget this, CEventListener listener) => Expression String -> Expression listener -> Expression Bool -> Expression this -> mn (Expression ())
removeEventListener :: (Monad mn, CEventTarget this, CEventListener listener) => Expression String -> Expression listener -> Expression Bool -> Expression this -> mn (Expression ())
dispatchEvent :: (Monad mn, CEventTarget this, CEvent evt) => Expression evt -> Expression this -> mn (Expression Bool)

module Data.DOM.KeyEvent
initKeyEvent :: (Monad mn, CKeyEvent this, CAbstractView viewArg) => Expression String -> Expression Bool -> Expression Bool -> Expression Bool -> Expression Bool -> Expression Bool -> Expression Bool -> Expression Double -> Expression Double -> Expression viewArg -> Expression this -> mn (Expression ())
cCHAR_UNDEFINED :: Integer
cDOM_VK_0 :: Integer
cDOM_VK_1 :: Integer
cDOM_VK_2 :: Integer
cDOM_VK_3 :: Integer
cDOM_VK_4 :: Integer
cDOM_VK_5 :: Integer
cDOM_VK_6 :: Integer
cDOM_VK_7 :: Integer
cDOM_VK_8 :: Integer
cDOM_VK_9 :: Integer
cDOM_VK_A :: Integer
cDOM_VK_ACCEPT :: Integer
cDOM_VK_ADD :: Integer
cDOM_VK_AGAIN :: Integer
cDOM_VK_ALL_CANDIDATES :: Integer
cDOM_VK_ALPHANUMERIC :: Integer
cDOM_VK_ALT :: Integer
cDOM_VK_ALT_GRAPH :: Integer
cDOM_VK_AMPERSAND :: Integer
cDOM_VK_ASTERISK :: Integer
cDOM_VK_AT :: Integer
cDOM_VK_B :: Integer
cDOM_VK_BACK_QUOTE :: Integer
cDOM_VK_BACK_SLASH :: Integer
cDOM_VK_BACK_SPACE :: Integer
cDOM_VK_BRACELEFT :: Integer
cDOM_VK_BRACERIGHT :: Integer
cDOM_VK_C :: Integer
cDOM_VK_CANCEL :: Integer
cDOM_VK_CAPS_LOCK :: Integer
cDOM_VK_CIRCUMFLEX :: Integer
cDOM_VK_CLEAR :: Integer
cDOM_VK_CLOSE_BRACKET :: Integer
cDOM_VK_CODE_INPUT :: Integer
cDOM_VK_COLON :: Integer
cDOM_VK_COMMA :: Integer
cDOM_VK_COMPOSE :: Integer
cDOM_VK_CONTROL :: Integer
cDOM_VK_CONVERT :: Integer
cDOM_VK_COPY :: Integer
cDOM_VK_CUT :: Integer
cDOM_VK_D :: Integer
cDOM_VK_DEAD_ABOVEDOT :: Integer
cDOM_VK_DEAD_ABOVERING :: Integer
cDOM_VK_DEAD_ACUTE :: Integer
cDOM_VK_DEAD_BREVE :: Integer
cDOM_VK_DEAD_CARON :: Integer
cDOM_VK_DEAD_CEDILLA :: Integer
cDOM_VK_DEAD_CIRCUMFLEX :: Integer
cDOM_VK_DEAD_DIAERESIS :: Integer
cDOM_VK_DEAD_DOUBLEACUTE :: Integer
cDOM_VK_DEAD_GRAVE :: Integer
cDOM_VK_DEAD_IOTA :: Integer
cDOM_VK_DEAD_MACRON :: Integer
cDOM_VK_DEAD_OGONEK :: Integer
cDOM_VK_DEAD_SEMIVOICED_SOUND :: Integer
cDOM_VK_DEAD_TILDE :: Integer
cDOM_VK_DEAD_VOICED_SOUND :: Integer
cDOM_VK_DECIMAL :: Integer
cDOM_VK_DELETE :: Integer
cDOM_VK_DIVIDE :: Integer
cDOM_VK_DOLLAR :: Integer
cDOM_VK_DOWN :: Integer
cDOM_VK_E :: Integer
cDOM_VK_END :: Integer
cDOM_VK_ENTER :: Integer
cDOM_VK_EQUALS :: Integer
cDOM_VK_ESCAPE :: Integer
cDOM_VK_EURO_SIGN :: Integer
cDOM_VK_EXCLAMATION_MARK :: Integer
cDOM_VK_F :: Integer
cDOM_VK_F1 :: Integer
cDOM_VK_F10 :: Integer
cDOM_VK_F11 :: Integer
cDOM_VK_F12 :: Integer
cDOM_VK_F13 :: Integer
cDOM_VK_F14 :: Integer
cDOM_VK_F15 :: Integer
cDOM_VK_F16 :: Integer
cDOM_VK_F17 :: Integer
cDOM_VK_F18 :: Integer
cDOM_VK_F19 :: Integer
cDOM_VK_F2 :: Integer
cDOM_VK_F20 :: Integer
cDOM_VK_F21 :: Integer
cDOM_VK_F22 :: Integer
cDOM_VK_F23 :: Integer
cDOM_VK_F24 :: Integer
cDOM_VK_F3 :: Integer
cDOM_VK_F4 :: Integer
cDOM_VK_F5 :: Integer
cDOM_VK_F6 :: Integer
cDOM_VK_F7 :: Integer
cDOM_VK_F8 :: Integer
cDOM_VK_F9 :: Integer
cDOM_VK_FINAL :: Integer
cDOM_VK_FIND :: Integer
cDOM_VK_FULL_WIDTH :: Integer
cDOM_VK_G :: Integer
cDOM_VK_GREATER :: Integer
cDOM_VK_H :: Integer
cDOM_VK_HALF_WIDTH :: Integer
cDOM_VK_HELP :: Integer
cDOM_VK_HIRAGANA :: Integer
cDOM_VK_HOME :: Integer
cDOM_VK_I :: Integer
cDOM_VK_INSERT :: Integer
cDOM_VK_INVERTED_EXCLAMATION_MARK :: Integer
cDOM_VK_J :: Integer
cDOM_VK_JAPANESE_HIRAGANA :: Integer
cDOM_VK_JAPANESE_KATAKANA :: Integer
cDOM_VK_JAPANESE_ROMAN :: Integer
cDOM_VK_K :: Integer
cDOM_VK_KANA :: Integer
cDOM_VK_KANJI :: Integer
cDOM_VK_KATAKANA :: Integer
cDOM_VK_KP_DOWN :: Integer
cDOM_VK_KP_LEFT :: Integer
cDOM_VK_KP_RIGHT :: Integer
cDOM_VK_KP_UP :: Integer
cDOM_VK_L :: Integer
cDOM_VK_LEFT :: Integer
cDOM_VK_LEFT_PARENTHESIS :: Integer
cDOM_VK_LESS :: Integer
cDOM_VK_M :: Integer
cDOM_VK_META :: Integer
cDOM_VK_MINUS :: Integer
cDOM_VK_MODECHANGE :: Integer
cDOM_VK_MULTIPLY :: Integer
cDOM_VK_N :: Integer
cDOM_VK_NONCONVERT :: Integer
cDOM_VK_NUM_LOCK :: Integer
cDOM_VK_NUMBER_SIGN :: Integer
cDOM_VK_NUMPAD0 :: Integer
cDOM_VK_NUMPAD1 :: Integer
cDOM_VK_NUMPAD2 :: Integer
cDOM_VK_NUMPAD3 :: Integer
cDOM_VK_NUMPAD4 :: Integer
cDOM_VK_NUMPAD5 :: Integer
cDOM_VK_NUMPAD6 :: Integer
cDOM_VK_NUMPAD7 :: Integer
cDOM_VK_NUMPAD8 :: Integer
cDOM_VK_NUMPAD9 :: Integer
cDOM_VK_O :: Integer
cDOM_VK_OPEN_BRACKET :: Integer
cDOM_VK_P :: Integer
cDOM_VK_PAGE_DOWN :: Integer
cDOM_VK_PAGE_UP :: Integer
cDOM_VK_PASTE :: Integer
cDOM_VK_PAUSE :: Integer
cDOM_VK_PERIOD :: Integer
cDOM_VK_PLUS :: Integer
cDOM_VK_PREVIOUS_CANDIDATE :: Integer
cDOM_VK_PRINTSCREEN :: Integer
cDOM_VK_PROPS :: Integer
cDOM_VK_Q :: Integer
cDOM_VK_QUOTE :: Integer
cDOM_VK_QUOTEDBL :: Integer
cDOM_VK_R :: Integer
cDOM_VK_RIGHT :: Integer
cDOM_VK_RIGHT_PARENTHESIS :: Integer
cDOM_VK_ROMAN_CHARACTERS :: Integer
cDOM_VK_S :: Integer
cDOM_VK_SCROLL_LOCK :: Integer
cDOM_VK_SEMICOLON :: Integer
cDOM_VK_SEPARATER :: Integer
cDOM_VK_SHIFT :: Integer
cDOM_VK_SLASH :: Integer
cDOM_VK_SPACE :: Integer
cDOM_VK_STOP :: Integer
cDOM_VK_SUBTRACT :: Integer
cDOM_VK_T :: Integer
cDOM_VK_TAB :: Integer
cDOM_VK_U :: Integer
cDOM_VK_UNDEFINED :: Integer
cDOM_VK_UNDERSCORE :: Integer
cDOM_VK_UNDO :: Integer
cDOM_VK_UP :: Integer
cDOM_VK_V :: Integer
cDOM_VK_W :: Integer
cDOM_VK_X :: Integer
cDOM_VK_Y :: Integer
cDOM_VK_Z :: Integer
get'ctrlKey :: (Monad mn, CKeyEvent this) => Expression this -> mn (Expression Bool)
getm'ctrlKey :: (Monad mn, CKeyEvent this) => Expression this -> mn (Expression Bool)
get'shiftKey :: (Monad mn, CKeyEvent this) => Expression this -> mn (Expression Bool)
getm'shiftKey :: (Monad mn, CKeyEvent this) => Expression this -> mn (Expression Bool)
get'altKey :: (Monad mn, CKeyEvent this) => Expression this -> mn (Expression Bool)
getm'altKey :: (Monad mn, CKeyEvent this) => Expression this -> mn (Expression Bool)
get'metaKey :: (Monad mn, CKeyEvent this) => Expression this -> mn (Expression Bool)
getm'metaKey :: (Monad mn, CKeyEvent this) => Expression this -> mn (Expression Bool)
get'keyCode :: (Monad mn, CKeyEvent this) => Expression this -> mn (Expression Double)
getm'keyCode :: (Monad mn, CKeyEvent this) => Expression this -> mn (Expression Double)
get'charCode :: (Monad mn, CKeyEvent this) => Expression this -> mn (Expression Double)
getm'charCode :: (Monad mn, CKeyEvent this) => Expression this -> mn (Expression Double)

module Data.DOM.KeyboardEvent
getModifierState :: (Monad mn, CKeyboardEvent this) => Expression String -> Expression this -> mn (Expression Bool)
initKeyboardEvent :: (Monad mn, CKeyboardEvent this, CAbstractView viewArg) => Expression String -> Expression Bool -> Expression Bool -> Expression viewArg -> Expression String -> Expression Double -> Expression String -> Expression this -> mn (Expression ())
cDOM_KEY_LOCATION_STANDARD :: Integer
cDOM_KEY_LOCATION_LEFT :: Integer
cDOM_KEY_LOCATION_RIGHT :: Integer
cDOM_KEY_LOCATION_NUMPAD :: Integer
get'keyIdentifier :: (Monad mn, CKeyboardEvent this) => Expression this -> mn (Expression String)
getm'keyIdentifier :: (Monad mn, CKeyboardEvent this) => Expression this -> mn (Expression String)
get'keyLocation :: (Monad mn, CKeyboardEvent this) => Expression this -> mn (Expression Double)
getm'keyLocation :: (Monad mn, CKeyboardEvent this) => Expression this -> mn (Expression Double)
get'ctrlKey :: (Monad mn, CKeyboardEvent this) => Expression this -> mn (Expression Bool)
getm'ctrlKey :: (Monad mn, CKeyboardEvent this) => Expression this -> mn (Expression Bool)
get'shiftKey :: (Monad mn, CKeyboardEvent this) => Expression this -> mn (Expression Bool)
getm'shiftKey :: (Monad mn, CKeyboardEvent this) => Expression this -> mn (Expression Bool)
get'altKey :: (Monad mn, CKeyboardEvent this) => Expression this -> mn (Expression Bool)
getm'altKey :: (Monad mn, CKeyboardEvent this) => Expression this -> mn (Expression Bool)
get'metaKey :: (Monad mn, CKeyboardEvent this) => Expression this -> mn (Expression Bool)
getm'metaKey :: (Monad mn, CKeyboardEvent this) => Expression this -> mn (Expression Bool)

module Data.DOM.MouseEvent
initMouseEvent :: (Monad mn, CMouseEvent this, CAbstractView viewArg, CEventTarget relatedTargetArg) => Expression String -> Expression Bool -> Expression Bool -> Expression viewArg -> Expression Double -> Expression Double -> Expression Double -> Expression Double -> Expression Double -> Expression Bool -> Expression Bool -> Expression Bool -> Expression Bool -> Expression Double -> Expression relatedTargetArg -> Expression this -> mn (Expression ())
get'screenX :: (Monad mn, CMouseEvent this) => Expression this -> mn (Expression Double)
getm'screenX :: (Monad mn, CMouseEvent this) => Expression this -> mn (Expression Double)
get'screenY :: (Monad mn, CMouseEvent this) => Expression this -> mn (Expression Double)
getm'screenY :: (Monad mn, CMouseEvent this) => Expression this -> mn (Expression Double)
get'clientX :: (Monad mn, CMouseEvent this) => Expression this -> mn (Expression Double)
getm'clientX :: (Monad mn, CMouseEvent this) => Expression this -> mn (Expression Double)
get'clientY :: (Monad mn, CMouseEvent this) => Expression this -> mn (Expression Double)
getm'clientY :: (Monad mn, CMouseEvent this) => Expression this -> mn (Expression Double)
get'ctrlKey :: (Monad mn, CMouseEvent this) => Expression this -> mn (Expression Bool)
getm'ctrlKey :: (Monad mn, CMouseEvent this) => Expression this -> mn (Expression Bool)
get'shiftKey :: (Monad mn, CMouseEvent this) => Expression this -> mn (Expression Bool)
getm'shiftKey :: (Monad mn, CMouseEvent this) => Expression this -> mn (Expression Bool)
get'altKey :: (Monad mn, CMouseEvent this) => Expression this -> mn (Expression Bool)
getm'altKey :: (Monad mn, CMouseEvent this) => Expression this -> mn (Expression Bool)
get'metaKey :: (Monad mn, CMouseEvent this) => Expression this -> mn (Expression Bool)
getm'metaKey :: (Monad mn, CMouseEvent this) => Expression this -> mn (Expression Bool)
get'button :: (Monad mn, CMouseEvent this) => Expression this -> mn (Expression Double)
getm'button :: (Monad mn, CMouseEvent this) => Expression this -> mn (Expression Double)
get'relatedTarget :: (Monad mn, CMouseEvent this, CEventTarget zz) => Expression this -> mn (Expression zz)
getm'relatedTarget :: (Monad mn, CMouseEvent this) => Expression this -> mn (Expression TEventTarget)

module Data.DOM.MutationEvent
initMutationEvent :: (Monad mn, CMutationEvent this, CNode relatedNodeArg) => Expression String -> Expression Bool -> Expression Bool -> Expression relatedNodeArg -> Expression String -> Expression String -> Expression String -> Expression Double -> Expression this -> mn (Expression ())
cMODIFICATION :: Integer
cADDITION :: Integer
cREMOVAL :: Integer
get'relatedNode :: (Monad mn, CMutationEvent this, CNode zz) => Expression this -> mn (Expression zz)
getm'relatedNode :: (Monad mn, CMutationEvent this) => Expression this -> mn (Expression TNode)
get'prevValue :: (Monad mn, CMutationEvent this) => Expression this -> mn (Expression String)
getm'prevValue :: (Monad mn, CMutationEvent this) => Expression this -> mn (Expression String)
get'newValue :: (Monad mn, CMutationEvent this) => Expression this -> mn (Expression String)
getm'newValue :: (Monad mn, CMutationEvent this) => Expression this -> mn (Expression String)
get'attrName :: (Monad mn, CMutationEvent this) => Expression this -> mn (Expression String)
getm'attrName :: (Monad mn, CMutationEvent this) => Expression this -> mn (Expression String)
get'attrChange :: (Monad mn, CMutationEvent this) => Expression this -> mn (Expression Double)
getm'attrChange :: (Monad mn, CMutationEvent this) => Expression this -> mn (Expression Double)

module Data.DOM.UIEvent
initUIEvent :: (Monad mn, CUIEvent this, CAbstractView viewArg) => Expression String -> Expression Bool -> Expression Bool -> Expression viewArg -> Expression Double -> Expression this -> mn (Expression ())
get'view :: (Monad mn, CUIEvent this, CAbstractView zz) => Expression this -> mn (Expression zz)
getm'view :: (Monad mn, CUIEvent this) => Expression this -> mn (Expression TAbstractView)
get'detail :: (Monad mn, CUIEvent this) => Expression this -> mn (Expression Double)
getm'detail :: (Monad mn, CUIEvent this) => Expression this -> mn (Expression Double)

module Data.DOM.Html2
data THTMLCollection
THTMLCollection :: THTMLCollection
data THTMLOptionsCollection
THTMLOptionsCollection :: THTMLOptionsCollection
data THTMLDocument
THTMLDocument :: THTMLDocument
data THTMLElement
THTMLElement :: THTMLElement
data THTMLHtmlElement
THTMLHtmlElement :: THTMLHtmlElement
data THTMLHeadElement
THTMLHeadElement :: THTMLHeadElement
data THTMLLinkElement
THTMLLinkElement :: THTMLLinkElement
data THTMLTitleElement
THTMLTitleElement :: THTMLTitleElement
data THTMLMetaElement
THTMLMetaElement :: THTMLMetaElement
data THTMLBaseElement
THTMLBaseElement :: THTMLBaseElement
data THTMLIsIndexElement
THTMLIsIndexElement :: THTMLIsIndexElement
data THTMLStyleElement
THTMLStyleElement :: THTMLStyleElement
data THTMLBodyElement
THTMLBodyElement :: THTMLBodyElement
data THTMLFormElement
THTMLFormElement :: THTMLFormElement
data THTMLSelectElement
THTMLSelectElement :: THTMLSelectElement
data THTMLOptGroupElement
THTMLOptGroupElement :: THTMLOptGroupElement
data THTMLOptionElement
THTMLOptionElement :: THTMLOptionElement
data THTMLInputElement
THTMLInputElement :: THTMLInputElement
data THTMLTextAreaElement
THTMLTextAreaElement :: THTMLTextAreaElement
data THTMLButtonElement
THTMLButtonElement :: THTMLButtonElement
data THTMLLabelElement
THTMLLabelElement :: THTMLLabelElement
data THTMLFieldSetElement
THTMLFieldSetElement :: THTMLFieldSetElement
data THTMLLegendElement
THTMLLegendElement :: THTMLLegendElement
data THTMLUListElement
THTMLUListElement :: THTMLUListElement
data THTMLOListElement
THTMLOListElement :: THTMLOListElement
data THTMLDListElement
THTMLDListElement :: THTMLDListElement
data THTMLDirectoryElement
THTMLDirectoryElement :: THTMLDirectoryElement
data THTMLMenuElement
THTMLMenuElement :: THTMLMenuElement
data THTMLLIElement
THTMLLIElement :: THTMLLIElement
data THTMLDivElement
THTMLDivElement :: THTMLDivElement
data THTMLParagraphElement
THTMLParagraphElement :: THTMLParagraphElement
data THTMLHeadingElement
THTMLHeadingElement :: THTMLHeadingElement
data THTMLQuoteElement
THTMLQuoteElement :: THTMLQuoteElement
data THTMLPreElement
THTMLPreElement :: THTMLPreElement
data THTMLBRElement
THTMLBRElement :: THTMLBRElement
data THTMLBaseFontElement
THTMLBaseFontElement :: THTMLBaseFontElement
data THTMLFontElement
THTMLFontElement :: THTMLFontElement
data THTMLHRElement
THTMLHRElement :: THTMLHRElement
data THTMLModElement
THTMLModElement :: THTMLModElement
data THTMLAnchorElement
THTMLAnchorElement :: THTMLAnchorElement
data THTMLImageElement
THTMLImageElement :: THTMLImageElement
data THTMLObjectElement
THTMLObjectElement :: THTMLObjectElement
data THTMLParamElement
THTMLParamElement :: THTMLParamElement
data THTMLAppletElement
THTMLAppletElement :: THTMLAppletElement
data THTMLMapElement
THTMLMapElement :: THTMLMapElement
data THTMLAreaElement
THTMLAreaElement :: THTMLAreaElement
data THTMLScriptElement
THTMLScriptElement :: THTMLScriptElement
data THTMLTableElement
THTMLTableElement :: THTMLTableElement
data THTMLTableCaptionElement
THTMLTableCaptionElement :: THTMLTableCaptionElement
data THTMLTableColElement
THTMLTableColElement :: THTMLTableColElement
data THTMLTableSectionElement
THTMLTableSectionElement :: THTMLTableSectionElement
data THTMLTableRowElement
THTMLTableRowElement :: THTMLTableRowElement
data THTMLTableCellElement
THTMLTableCellElement :: THTMLTableCellElement
data THTMLFrameSetElement
THTMLFrameSetElement :: THTMLFrameSetElement
data THTMLFrameElement
THTMLFrameElement :: THTMLFrameElement
data THTMLIFrameElement
THTMLIFrameElement :: THTMLIFrameElement
data THTMLSubElement
THTMLSubElement :: THTMLSubElement
data THTMLSupElement
THTMLSupElement :: THTMLSupElement
data THTMLSpanElement
THTMLSpanElement :: THTMLSpanElement
data THTMLBdoElement
THTMLBdoElement :: THTMLBdoElement
data THTMLIElement
THTMLIElement :: THTMLIElement
data THTMLBElement
THTMLBElement :: THTMLBElement
data THTMLUElement
THTMLUElement :: THTMLUElement
data THTMLSElement
THTMLSElement :: THTMLSElement
data THTMLStrikeElement
THTMLStrikeElement :: THTMLStrikeElement
data THTMLBigElement
THTMLBigElement :: THTMLBigElement
data THTMLSmallElement
THTMLSmallElement :: THTMLSmallElement
data THTMLEmElement
THTMLEmElement :: THTMLEmElement
data THTMLStrongElement
THTMLStrongElement :: THTMLStrongElement
data THTMLDfnElement
THTMLDfnElement :: THTMLDfnElement
data THTMLCodeElement
THTMLCodeElement :: THTMLCodeElement
data THTMLSampElement
THTMLSampElement :: THTMLSampElement
data THTMLKbdElement
THTMLKbdElement :: THTMLKbdElement
data THTMLVarElement
THTMLVarElement :: THTMLVarElement
data THTMLCiteElement
THTMLCiteElement :: THTMLCiteElement
data THTMLAcronymElement
THTMLAcronymElement :: THTMLAcronymElement
data THTMLAbbrElement
THTMLAbbrElement :: THTMLAbbrElement
data THTMLDdElement
THTMLDdElement :: THTMLDdElement
data THTMLDtElement
THTMLDtElement :: THTMLDtElement
data THTMLNoframesElement
THTMLNoframesElement :: THTMLNoframesElement
data THTMLNoscriptElement
THTMLNoscriptElement :: THTMLNoscriptElement
data THTMLAddressElement
THTMLAddressElement :: THTMLAddressElement
data THTMLCenterElement
THTMLCenterElement :: THTMLCenterElement
class CHTMLCollection a
class CHTMLOptionsCollection a
class CDocument a => CHTMLDocument a
class CElement a => CHTMLElement a
class CHTMLElement a => CHTMLHtmlElement a
class CHTMLElement a => CHTMLHeadElement a
class CHTMLElement a => CHTMLLinkElement a
class CHTMLElement a => CHTMLTitleElement a
class CHTMLElement a => CHTMLMetaElement a
class CHTMLElement a => CHTMLBaseElement a
class CHTMLElement a => CHTMLIsIndexElement a
class CHTMLElement a => CHTMLStyleElement a
class CHTMLElement a => CHTMLBodyElement a
class CHTMLElement a => CHTMLFormElement a
class CHTMLElement a => CHTMLSelectElement a
class CHTMLElement a => CHTMLOptGroupElement a
class CHTMLElement a => CHTMLOptionElement a
class CHTMLElement a => CHTMLInputElement a
class CHTMLElement a => CHTMLTextAreaElement a
class CHTMLElement a => CHTMLButtonElement a
class CHTMLElement a => CHTMLLabelElement a
class CHTMLElement a => CHTMLFieldSetElement a
class CHTMLElement a => CHTMLLegendElement a
class CHTMLElement a => CHTMLUListElement a
class CHTMLElement a => CHTMLOListElement a
class CHTMLElement a => CHTMLDListElement a
class CHTMLElement a => CHTMLDirectoryElement a
class CHTMLElement a => CHTMLMenuElement a
class CHTMLElement a => CHTMLLIElement a
class CHTMLElement a => CHTMLDivElement a
class CHTMLElement a => CHTMLParagraphElement a
class CHTMLElement a => CHTMLHeadingElement a
class CHTMLElement a => CHTMLQuoteElement a
class CHTMLElement a => CHTMLPreElement a
class CHTMLElement a => CHTMLBRElement a
class CHTMLElement a => CHTMLBaseFontElement a
class CHTMLElement a => CHTMLFontElement a
class CHTMLElement a => CHTMLHRElement a
class CHTMLElement a => CHTMLModElement a
class CHTMLElement a => CHTMLAnchorElement a
class CHTMLElement a => CHTMLImageElement a
class CHTMLElement a => CHTMLObjectElement a
class CHTMLElement a => CHTMLParamElement a
class CHTMLElement a => CHTMLAppletElement a
class CHTMLElement a => CHTMLMapElement a
class CHTMLElement a => CHTMLAreaElement a
class CHTMLElement a => CHTMLScriptElement a
class CHTMLElement a => CHTMLTableElement a
class CHTMLElement a => CHTMLTableCaptionElement a
class CHTMLElement a => CHTMLTableColElement a
class CHTMLElement a => CHTMLTableSectionElement a
class CHTMLElement a => CHTMLTableRowElement a
class CHTMLElement a => CHTMLTableCellElement a
class CHTMLElement a => CHTMLFrameSetElement a
class CHTMLElement a => CHTMLFrameElement a
class CHTMLElement a => CHTMLIFrameElement a
class CHTMLElement a => CHTMLSubElement a
class CHTMLElement a => CHTMLSupElement a
class CHTMLElement a => CHTMLSpanElement a
class CHTMLElement a => CHTMLBdoElement a
class CHTMLElement a => CHTMLIElement a
class CHTMLElement a => CHTMLBElement a
class CHTMLElement a => CHTMLUElement a
class CHTMLElement a => CHTMLSElement a
class CHTMLElement a => CHTMLStrikeElement a
class CHTMLElement a => CHTMLBigElement a
class CHTMLElement a => CHTMLSmallElement a
class CHTMLElement a => CHTMLEmElement a
class CHTMLElement a => CHTMLStrongElement a
class CHTMLElement a => CHTMLDfnElement a
class CHTMLElement a => CHTMLCodeElement a
class CHTMLElement a => CHTMLSampElement a
class CHTMLElement a => CHTMLKbdElement a
class CHTMLElement a => CHTMLVarElement a
class CHTMLElement a => CHTMLCiteElement a
class CHTMLElement a => CHTMLAcronymElement a
class CHTMLElement a => CHTMLAbbrElement a
class CHTMLElement a => CHTMLDdElement a
class CHTMLElement a => CHTMLDtElement a
class CHTMLElement a => CHTMLNoframesElement a
class CHTMLElement a => CHTMLNoscriptElement a
class CHTMLElement a => CHTMLAddressElement a
class CHTMLElement a => CHTMLCenterElement a
instance CNode THTMLCenterElement
instance CElement THTMLCenterElement
instance CHTMLElement THTMLCenterElement
instance CHTMLCenterElement THTMLCenterElement
instance CNode THTMLAddressElement
instance CElement THTMLAddressElement
instance CHTMLElement THTMLAddressElement
instance CHTMLAddressElement THTMLAddressElement
instance CNode THTMLNoscriptElement
instance CElement THTMLNoscriptElement
instance CHTMLElement THTMLNoscriptElement
instance CHTMLNoscriptElement THTMLNoscriptElement
instance CNode THTMLNoframesElement
instance CElement THTMLNoframesElement
instance CHTMLElement THTMLNoframesElement
instance CHTMLNoframesElement THTMLNoframesElement
instance CNode THTMLDtElement
instance CElement THTMLDtElement
instance CHTMLElement THTMLDtElement
instance CHTMLDtElement THTMLDtElement
instance CNode THTMLDdElement
instance CElement THTMLDdElement
instance CHTMLElement THTMLDdElement
instance CHTMLDdElement THTMLDdElement
instance CNode THTMLAbbrElement
instance CElement THTMLAbbrElement
instance CHTMLElement THTMLAbbrElement
instance CHTMLAbbrElement THTMLAbbrElement
instance CNode THTMLAcronymElement
instance CElement THTMLAcronymElement
instance CHTMLElement THTMLAcronymElement
instance CHTMLAcronymElement THTMLAcronymElement
instance CNode THTMLCiteElement
instance CElement THTMLCiteElement
instance CHTMLElement THTMLCiteElement
instance CHTMLCiteElement THTMLCiteElement
instance CNode THTMLVarElement
instance CElement THTMLVarElement
instance CHTMLElement THTMLVarElement
instance CHTMLVarElement THTMLVarElement
instance CNode THTMLKbdElement
instance CElement THTMLKbdElement
instance CHTMLElement THTMLKbdElement
instance CHTMLKbdElement THTMLKbdElement
instance CNode THTMLSampElement
instance CElement THTMLSampElement
instance CHTMLElement THTMLSampElement
instance CHTMLSampElement THTMLSampElement
instance CNode THTMLCodeElement
instance CElement THTMLCodeElement
instance CHTMLElement THTMLCodeElement
instance CHTMLCodeElement THTMLCodeElement
instance CNode THTMLDfnElement
instance CElement THTMLDfnElement
instance CHTMLElement THTMLDfnElement
instance CHTMLDfnElement THTMLDfnElement
instance CNode THTMLStrongElement
instance CElement THTMLStrongElement
instance CHTMLElement THTMLStrongElement
instance CHTMLStrongElement THTMLStrongElement
instance CNode THTMLEmElement
instance CElement THTMLEmElement
instance CHTMLElement THTMLEmElement
instance CHTMLEmElement THTMLEmElement
instance CNode THTMLSmallElement
instance CElement THTMLSmallElement
instance CHTMLElement THTMLSmallElement
instance CHTMLSmallElement THTMLSmallElement
instance CNode THTMLBigElement
instance CElement THTMLBigElement
instance CHTMLElement THTMLBigElement
instance CHTMLBigElement THTMLBigElement
instance CNode THTMLStrikeElement
instance CElement THTMLStrikeElement
instance CHTMLElement THTMLStrikeElement
instance CHTMLStrikeElement THTMLStrikeElement
instance CNode THTMLSElement
instance CElement THTMLSElement
instance CHTMLElement THTMLSElement
instance CHTMLSElement THTMLSElement
instance CNode THTMLUElement
instance CElement THTMLUElement
instance CHTMLElement THTMLUElement
instance CHTMLUElement THTMLUElement
instance CNode THTMLBElement
instance CElement THTMLBElement
instance CHTMLElement THTMLBElement
instance CHTMLBElement THTMLBElement
instance CNode THTMLIElement
instance CElement THTMLIElement
instance CHTMLElement THTMLIElement
instance CHTMLIElement THTMLIElement
instance CNode THTMLBdoElement
instance CElement THTMLBdoElement
instance CHTMLElement THTMLBdoElement
instance CHTMLBdoElement THTMLBdoElement
instance CNode THTMLSpanElement
instance CElement THTMLSpanElement
instance CHTMLElement THTMLSpanElement
instance CHTMLSpanElement THTMLSpanElement
instance CNode THTMLSupElement
instance CElement THTMLSupElement
instance CHTMLElement THTMLSupElement
instance CHTMLSupElement THTMLSupElement
instance CNode THTMLSubElement
instance CElement THTMLSubElement
instance CHTMLElement THTMLSubElement
instance CHTMLSubElement THTMLSubElement
instance CNode THTMLIFrameElement
instance CElement THTMLIFrameElement
instance CHTMLElement THTMLIFrameElement
instance CHTMLIFrameElement THTMLIFrameElement
instance CNode THTMLFrameElement
instance CElement THTMLFrameElement
instance CHTMLElement THTMLFrameElement
instance CHTMLFrameElement THTMLFrameElement
instance CNode THTMLFrameSetElement
instance CElement THTMLFrameSetElement
instance CHTMLElement THTMLFrameSetElement
instance CHTMLFrameSetElement THTMLFrameSetElement
instance CNode THTMLTableCellElement
instance CElement THTMLTableCellElement
instance CHTMLElement THTMLTableCellElement
instance CHTMLTableCellElement THTMLTableCellElement
instance CNode THTMLTableRowElement
instance CElement THTMLTableRowElement
instance CHTMLElement THTMLTableRowElement
instance CHTMLTableRowElement THTMLTableRowElement
instance CNode THTMLTableSectionElement
instance CElement THTMLTableSectionElement
instance CHTMLElement THTMLTableSectionElement
instance CHTMLTableSectionElement THTMLTableSectionElement
instance CNode THTMLTableColElement
instance CElement THTMLTableColElement
instance CHTMLElement THTMLTableColElement
instance CHTMLTableColElement THTMLTableColElement
instance CNode THTMLTableCaptionElement
instance CElement THTMLTableCaptionElement
instance CHTMLElement THTMLTableCaptionElement
instance CHTMLTableCaptionElement THTMLTableCaptionElement
instance CNode THTMLTableElement
instance CElement THTMLTableElement
instance CHTMLElement THTMLTableElement
instance CHTMLTableElement THTMLTableElement
instance CNode THTMLScriptElement
instance CElement THTMLScriptElement
instance CHTMLElement THTMLScriptElement
instance CHTMLScriptElement THTMLScriptElement
instance CNode THTMLAreaElement
instance CElement THTMLAreaElement
instance CHTMLElement THTMLAreaElement
instance CHTMLAreaElement THTMLAreaElement
instance CNode THTMLMapElement
instance CElement THTMLMapElement
instance CHTMLElement THTMLMapElement
instance CHTMLMapElement THTMLMapElement
instance CNode THTMLAppletElement
instance CElement THTMLAppletElement
instance CHTMLElement THTMLAppletElement
instance CHTMLAppletElement THTMLAppletElement
instance CNode THTMLParamElement
instance CElement THTMLParamElement
instance CHTMLElement THTMLParamElement
instance CHTMLParamElement THTMLParamElement
instance CNode THTMLObjectElement
instance CElement THTMLObjectElement
instance CHTMLElement THTMLObjectElement
instance CHTMLObjectElement THTMLObjectElement
instance CNode THTMLImageElement
instance CElement THTMLImageElement
instance CHTMLElement THTMLImageElement
instance CHTMLImageElement THTMLImageElement
instance CNode THTMLAnchorElement
instance CElement THTMLAnchorElement
instance CHTMLElement THTMLAnchorElement
instance CHTMLAnchorElement THTMLAnchorElement
instance CNode THTMLModElement
instance CElement THTMLModElement
instance CHTMLElement THTMLModElement
instance CHTMLModElement THTMLModElement
instance CNode THTMLHRElement
instance CElement THTMLHRElement
instance CHTMLElement THTMLHRElement
instance CHTMLHRElement THTMLHRElement
instance CNode THTMLFontElement
instance CElement THTMLFontElement
instance CHTMLElement THTMLFontElement
instance CHTMLFontElement THTMLFontElement
instance CNode THTMLBaseFontElement
instance CElement THTMLBaseFontElement
instance CHTMLElement THTMLBaseFontElement
instance CHTMLBaseFontElement THTMLBaseFontElement
instance CNode THTMLBRElement
instance CElement THTMLBRElement
instance CHTMLElement THTMLBRElement
instance CHTMLBRElement THTMLBRElement
instance CNode THTMLPreElement
instance CElement THTMLPreElement
instance CHTMLElement THTMLPreElement
instance CHTMLPreElement THTMLPreElement
instance CNode THTMLQuoteElement
instance CElement THTMLQuoteElement
instance CHTMLElement THTMLQuoteElement
instance CHTMLQuoteElement THTMLQuoteElement
instance CNode THTMLHeadingElement
instance CElement THTMLHeadingElement
instance CHTMLElement THTMLHeadingElement
instance CHTMLHeadingElement THTMLHeadingElement
instance CNode THTMLParagraphElement
instance CElement THTMLParagraphElement
instance CHTMLElement THTMLParagraphElement
instance CHTMLParagraphElement THTMLParagraphElement
instance CNode THTMLDivElement
instance CElement THTMLDivElement
instance CHTMLElement THTMLDivElement
instance CHTMLDivElement THTMLDivElement
instance CNode THTMLLIElement
instance CElement THTMLLIElement
instance CHTMLElement THTMLLIElement
instance CHTMLLIElement THTMLLIElement
instance CNode THTMLMenuElement
instance CElement THTMLMenuElement
instance CHTMLElement THTMLMenuElement
instance CHTMLMenuElement THTMLMenuElement
instance CNode THTMLDirectoryElement
instance CElement THTMLDirectoryElement
instance CHTMLElement THTMLDirectoryElement
instance CHTMLDirectoryElement THTMLDirectoryElement
instance CNode THTMLDListElement
instance CElement THTMLDListElement
instance CHTMLElement THTMLDListElement
instance CHTMLDListElement THTMLDListElement
instance CNode THTMLOListElement
instance CElement THTMLOListElement
instance CHTMLElement THTMLOListElement
instance CHTMLOListElement THTMLOListElement
instance CNode THTMLUListElement
instance CElement THTMLUListElement
instance CHTMLElement THTMLUListElement
instance CHTMLUListElement THTMLUListElement
instance CNode THTMLLegendElement
instance CElement THTMLLegendElement
instance CHTMLElement THTMLLegendElement
instance CHTMLLegendElement THTMLLegendElement
instance CNode THTMLFieldSetElement
instance CElement THTMLFieldSetElement
instance CHTMLElement THTMLFieldSetElement
instance CHTMLFieldSetElement THTMLFieldSetElement
instance CNode THTMLLabelElement
instance CElement THTMLLabelElement
instance CHTMLElement THTMLLabelElement
instance CHTMLLabelElement THTMLLabelElement
instance CNode THTMLButtonElement
instance CElement THTMLButtonElement
instance CHTMLElement THTMLButtonElement
instance CHTMLButtonElement THTMLButtonElement
instance CNode THTMLTextAreaElement
instance CElement THTMLTextAreaElement
instance CHTMLElement THTMLTextAreaElement
instance CHTMLTextAreaElement THTMLTextAreaElement
instance CNode THTMLInputElement
instance CElement THTMLInputElement
instance CHTMLElement THTMLInputElement
instance CHTMLInputElement THTMLInputElement
instance CNode THTMLOptionElement
instance CElement THTMLOptionElement
instance CHTMLElement THTMLOptionElement
instance CHTMLOptionElement THTMLOptionElement
instance CNode THTMLOptGroupElement
instance CElement THTMLOptGroupElement
instance CHTMLElement THTMLOptGroupElement
instance CHTMLOptGroupElement THTMLOptGroupElement
instance CNode THTMLSelectElement
instance CElement THTMLSelectElement
instance CHTMLElement THTMLSelectElement
instance CHTMLSelectElement THTMLSelectElement
instance CNode THTMLFormElement
instance CElement THTMLFormElement
instance CHTMLElement THTMLFormElement
instance CHTMLFormElement THTMLFormElement
instance CNode THTMLBodyElement
instance CElement THTMLBodyElement
instance CHTMLElement THTMLBodyElement
instance CHTMLBodyElement THTMLBodyElement
instance CNode THTMLStyleElement
instance CElement THTMLStyleElement
instance CHTMLElement THTMLStyleElement
instance CHTMLStyleElement THTMLStyleElement
instance CNode THTMLIsIndexElement
instance CElement THTMLIsIndexElement
instance CHTMLElement THTMLIsIndexElement
instance CHTMLIsIndexElement THTMLIsIndexElement
instance CNode THTMLBaseElement
instance CElement THTMLBaseElement
instance CHTMLElement THTMLBaseElement
instance CHTMLBaseElement THTMLBaseElement
instance CNode THTMLMetaElement
instance CElement THTMLMetaElement
instance CHTMLElement THTMLMetaElement
instance CHTMLMetaElement THTMLMetaElement
instance CNode THTMLTitleElement
instance CElement THTMLTitleElement
instance CHTMLElement THTMLTitleElement
instance CHTMLTitleElement THTMLTitleElement
instance CNode THTMLLinkElement
instance CElement THTMLLinkElement
instance CHTMLElement THTMLLinkElement
instance CHTMLLinkElement THTMLLinkElement
instance CNode THTMLHeadElement
instance CElement THTMLHeadElement
instance CHTMLElement THTMLHeadElement
instance CHTMLHeadElement THTMLHeadElement
instance CNode THTMLHtmlElement
instance CElement THTMLHtmlElement
instance CHTMLElement THTMLHtmlElement
instance CHTMLHtmlElement THTMLHtmlElement
instance CNode THTMLElement
instance CElement THTMLElement
instance CHTMLElement THTMLElement
instance CNode THTMLDocument
instance CDocument THTMLDocument
instance CHTMLDocument THTMLDocument
instance CHTMLOptionsCollection THTMLOptionsCollection
instance CHTMLCollection THTMLCollection

module Data.DOM.HTMLAnchorElement
blur :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression ())
focus :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression ())
set'accessKey :: (Monad mn, CHTMLAnchorElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'accessKey :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
getm'accessKey :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
set'charset :: (Monad mn, CHTMLAnchorElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'charset :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
getm'charset :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
set'coords :: (Monad mn, CHTMLAnchorElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'coords :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
getm'coords :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
set'href :: (Monad mn, CHTMLAnchorElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'href :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
getm'href :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
set'hreflang :: (Monad mn, CHTMLAnchorElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'hreflang :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
getm'hreflang :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
set'name :: (Monad mn, CHTMLAnchorElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'name :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
getm'name :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
set'rel :: (Monad mn, CHTMLAnchorElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'rel :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
getm'rel :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
set'rev :: (Monad mn, CHTMLAnchorElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'rev :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
getm'rev :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
set'shape :: (Monad mn, CHTMLAnchorElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'shape :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
getm'shape :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
set'tabIndex :: (Monad mn, CHTMLAnchorElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'tabIndex :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression Double)
getm'tabIndex :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression Double)
set'target :: (Monad mn, CHTMLAnchorElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'target :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
getm'target :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
set'type :: (Monad mn, CHTMLAnchorElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'type :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)
getm'type :: (Monad mn, CHTMLAnchorElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLAppletElement
set'align :: (Monad mn, CHTMLAppletElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'align :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression String)
getm'align :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression String)
set'alt :: (Monad mn, CHTMLAppletElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'alt :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression String)
getm'alt :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression String)
set'archive :: (Monad mn, CHTMLAppletElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'archive :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression String)
getm'archive :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression String)
set'code :: (Monad mn, CHTMLAppletElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'code :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression String)
getm'code :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression String)
set'codeBase :: (Monad mn, CHTMLAppletElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'codeBase :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression String)
getm'codeBase :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression String)
set'height :: (Monad mn, CHTMLAppletElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'height :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression String)
getm'height :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression String)
set'hspace :: (Monad mn, CHTMLAppletElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'hspace :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression Double)
getm'hspace :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression Double)
set'name :: (Monad mn, CHTMLAppletElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'name :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression String)
getm'name :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression String)
set'object :: (Monad mn, CHTMLAppletElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'object :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression String)
getm'object :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression String)
set'vspace :: (Monad mn, CHTMLAppletElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'vspace :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression Double)
getm'vspace :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression Double)
set'width :: (Monad mn, CHTMLAppletElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'width :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression String)
getm'width :: (Monad mn, CHTMLAppletElement this) => Expression this -> mn (Expression String)
mkApplet :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLAppletElement)

module Data.DOM.HTMLAreaElement
set'accessKey :: (Monad mn, CHTMLAreaElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'accessKey :: (Monad mn, CHTMLAreaElement this) => Expression this -> mn (Expression String)
getm'accessKey :: (Monad mn, CHTMLAreaElement this) => Expression this -> mn (Expression String)
set'alt :: (Monad mn, CHTMLAreaElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'alt :: (Monad mn, CHTMLAreaElement this) => Expression this -> mn (Expression String)
getm'alt :: (Monad mn, CHTMLAreaElement this) => Expression this -> mn (Expression String)
set'coords :: (Monad mn, CHTMLAreaElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'coords :: (Monad mn, CHTMLAreaElement this) => Expression this -> mn (Expression String)
getm'coords :: (Monad mn, CHTMLAreaElement this) => Expression this -> mn (Expression String)
set'href :: (Monad mn, CHTMLAreaElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'href :: (Monad mn, CHTMLAreaElement this) => Expression this -> mn (Expression String)
getm'href :: (Monad mn, CHTMLAreaElement this) => Expression this -> mn (Expression String)
set'noHref :: (Monad mn, CHTMLAreaElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'noHref :: (Monad mn, CHTMLAreaElement this) => Expression this -> mn (Expression Bool)
getm'noHref :: (Monad mn, CHTMLAreaElement this) => Expression this -> mn (Expression Bool)
set'shape :: (Monad mn, CHTMLAreaElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'shape :: (Monad mn, CHTMLAreaElement this) => Expression this -> mn (Expression String)
getm'shape :: (Monad mn, CHTMLAreaElement this) => Expression this -> mn (Expression String)
set'tabIndex :: (Monad mn, CHTMLAreaElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'tabIndex :: (Monad mn, CHTMLAreaElement this) => Expression this -> mn (Expression Double)
getm'tabIndex :: (Monad mn, CHTMLAreaElement this) => Expression this -> mn (Expression Double)
set'target :: (Monad mn, CHTMLAreaElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'target :: (Monad mn, CHTMLAreaElement this) => Expression this -> mn (Expression String)
getm'target :: (Monad mn, CHTMLAreaElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLBRElement
set'clear :: (Monad mn, CHTMLBRElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'clear :: (Monad mn, CHTMLBRElement this) => Expression this -> mn (Expression String)
getm'clear :: (Monad mn, CHTMLBRElement this) => Expression this -> mn (Expression String)
mkBr :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLBRElement)

module Data.DOM.HTMLBaseElement
set'href :: (Monad mn, CHTMLBaseElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'href :: (Monad mn, CHTMLBaseElement this) => Expression this -> mn (Expression String)
getm'href :: (Monad mn, CHTMLBaseElement this) => Expression this -> mn (Expression String)
set'target :: (Monad mn, CHTMLBaseElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'target :: (Monad mn, CHTMLBaseElement this) => Expression this -> mn (Expression String)
getm'target :: (Monad mn, CHTMLBaseElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLBaseFontElement
set'color :: (Monad mn, CHTMLBaseFontElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'color :: (Monad mn, CHTMLBaseFontElement this) => Expression this -> mn (Expression String)
getm'color :: (Monad mn, CHTMLBaseFontElement this) => Expression this -> mn (Expression String)
set'face :: (Monad mn, CHTMLBaseFontElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'face :: (Monad mn, CHTMLBaseFontElement this) => Expression this -> mn (Expression String)
getm'face :: (Monad mn, CHTMLBaseFontElement this) => Expression this -> mn (Expression String)
set'size :: (Monad mn, CHTMLBaseFontElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'size :: (Monad mn, CHTMLBaseFontElement this) => Expression this -> mn (Expression Double)
getm'size :: (Monad mn, CHTMLBaseFontElement this) => Expression this -> mn (Expression Double)

module Data.DOM.HTMLBodyElement
set'aLink :: (Monad mn, CHTMLBodyElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'aLink :: (Monad mn, CHTMLBodyElement this) => Expression this -> mn (Expression String)
getm'aLink :: (Monad mn, CHTMLBodyElement this) => Expression this -> mn (Expression String)
set'background :: (Monad mn, CHTMLBodyElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'background :: (Monad mn, CHTMLBodyElement this) => Expression this -> mn (Expression String)
getm'background :: (Monad mn, CHTMLBodyElement this) => Expression this -> mn (Expression String)
set'bgColor :: (Monad mn, CHTMLBodyElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'bgColor :: (Monad mn, CHTMLBodyElement this) => Expression this -> mn (Expression String)
getm'bgColor :: (Monad mn, CHTMLBodyElement this) => Expression this -> mn (Expression String)
set'link :: (Monad mn, CHTMLBodyElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'link :: (Monad mn, CHTMLBodyElement this) => Expression this -> mn (Expression String)
getm'link :: (Monad mn, CHTMLBodyElement this) => Expression this -> mn (Expression String)
set'text :: (Monad mn, CHTMLBodyElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'text :: (Monad mn, CHTMLBodyElement this) => Expression this -> mn (Expression String)
getm'text :: (Monad mn, CHTMLBodyElement this) => Expression this -> mn (Expression String)
set'vLink :: (Monad mn, CHTMLBodyElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'vLink :: (Monad mn, CHTMLBodyElement this) => Expression this -> mn (Expression String)
getm'vLink :: (Monad mn, CHTMLBodyElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLButtonElement
get'form :: (Monad mn, CHTMLButtonElement this, CHTMLFormElement zz) => Expression this -> mn (Expression zz)
getm'form :: (Monad mn, CHTMLButtonElement this) => Expression this -> mn (Expression THTMLFormElement)
set'accessKey :: (Monad mn, CHTMLButtonElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'accessKey :: (Monad mn, CHTMLButtonElement this) => Expression this -> mn (Expression String)
getm'accessKey :: (Monad mn, CHTMLButtonElement this) => Expression this -> mn (Expression String)
set'disabled :: (Monad mn, CHTMLButtonElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'disabled :: (Monad mn, CHTMLButtonElement this) => Expression this -> mn (Expression Bool)
getm'disabled :: (Monad mn, CHTMLButtonElement this) => Expression this -> mn (Expression Bool)
set'name :: (Monad mn, CHTMLButtonElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'name :: (Monad mn, CHTMLButtonElement this) => Expression this -> mn (Expression String)
getm'name :: (Monad mn, CHTMLButtonElement this) => Expression this -> mn (Expression String)
set'tabIndex :: (Monad mn, CHTMLButtonElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'tabIndex :: (Monad mn, CHTMLButtonElement this) => Expression this -> mn (Expression Double)
getm'tabIndex :: (Monad mn, CHTMLButtonElement this) => Expression this -> mn (Expression Double)
get'type :: (Monad mn, CHTMLButtonElement this) => Expression this -> mn (Expression String)
getm'type :: (Monad mn, CHTMLButtonElement this) => Expression this -> mn (Expression String)
set'value :: (Monad mn, CHTMLButtonElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'value :: (Monad mn, CHTMLButtonElement this) => Expression this -> mn (Expression String)
getm'value :: (Monad mn, CHTMLButtonElement this) => Expression this -> mn (Expression String)
mkButton :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLButtonElement)

module Data.DOM.HTMLCollection
item :: (Monad mn, CHTMLCollection this, CNode zz) => Expression Double -> Expression this -> mn (Expression zz)
namedItem :: (Monad mn, CHTMLCollection this, CNode zz) => Expression String -> Expression this -> mn (Expression zz)
get'length :: (Monad mn, CHTMLCollection this) => Expression this -> mn (Expression Double)
getm'length :: (Monad mn, CHTMLCollection this) => Expression this -> mn (Expression Double)

module Data.DOM.HTMLDListElement
set'compact :: (Monad mn, CHTMLDListElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'compact :: (Monad mn, CHTMLDListElement this) => Expression this -> mn (Expression Bool)
getm'compact :: (Monad mn, CHTMLDListElement this) => Expression this -> mn (Expression Bool)
mkDl :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLDListElement)

module Data.DOM.HTMLDirectoryElement
set'compact :: (Monad mn, CHTMLDirectoryElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'compact :: (Monad mn, CHTMLDirectoryElement this) => Expression this -> mn (Expression Bool)
getm'compact :: (Monad mn, CHTMLDirectoryElement this) => Expression this -> mn (Expression Bool)

module Data.DOM.HTMLDivElement
set'align :: (Monad mn, CHTMLDivElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'align :: (Monad mn, CHTMLDivElement this) => Expression this -> mn (Expression String)
getm'align :: (Monad mn, CHTMLDivElement this) => Expression this -> mn (Expression String)
mkDiv :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLDivElement)

module Data.DOM.HTMLDocument
open :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression ())
close :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression ())
write :: (Monad mn, CHTMLDocument this) => Expression String -> Expression this -> mn (Expression ())
writeln :: (Monad mn, CHTMLDocument this) => Expression String -> Expression this -> mn (Expression ())
getElementsByName :: (Monad mn, CHTMLDocument this, CNodeList zz) => Expression String -> Expression this -> mn (Expression zz)
set'title :: (Monad mn, CHTMLDocument zz) => Expression String -> Expression zz -> mn (Expression zz)
get'title :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression String)
getm'title :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression String)
get'referrer :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression String)
getm'referrer :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression String)
get'domain :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression String)
getm'domain :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression String)
get'URL :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression String)
getm'URL :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression String)
set'body :: (Monad mn, CHTMLElement val, CHTMLDocument zz) => Expression val -> Expression zz -> mn (Expression zz)
get'body :: (Monad mn, CHTMLDocument this, CHTMLElement zz) => Expression this -> mn (Expression zz)
getm'body :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression THTMLElement)
get'images :: (Monad mn, CHTMLDocument this, CHTMLCollection zz) => Expression this -> mn (Expression zz)
getm'images :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression THTMLCollection)
get'applets :: (Monad mn, CHTMLDocument this, CHTMLCollection zz) => Expression this -> mn (Expression zz)
getm'applets :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression THTMLCollection)
get'links :: (Monad mn, CHTMLDocument this, CHTMLCollection zz) => Expression this -> mn (Expression zz)
getm'links :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression THTMLCollection)
get'forms :: (Monad mn, CHTMLDocument this, CHTMLCollection zz) => Expression this -> mn (Expression zz)
getm'forms :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression THTMLCollection)
get'anchors :: (Monad mn, CHTMLDocument this, CHTMLCollection zz) => Expression this -> mn (Expression zz)
getm'anchors :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression THTMLCollection)
set'cookie :: (Monad mn, CHTMLDocument zz) => Expression String -> Expression zz -> mn (Expression zz)
get'cookie :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression String)
getm'cookie :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLElement
set'id :: (Monad mn, CHTMLElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'id :: (Monad mn, CHTMLElement this) => Expression this -> mn (Expression String)
getm'id :: (Monad mn, CHTMLElement this) => Expression this -> mn (Expression String)
set'title :: (Monad mn, CHTMLElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'title :: (Monad mn, CHTMLElement this) => Expression this -> mn (Expression String)
getm'title :: (Monad mn, CHTMLElement this) => Expression this -> mn (Expression String)
set'lang :: (Monad mn, CHTMLElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'lang :: (Monad mn, CHTMLElement this) => Expression this -> mn (Expression String)
getm'lang :: (Monad mn, CHTMLElement this) => Expression this -> mn (Expression String)
set'dir :: (Monad mn, CHTMLElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'dir :: (Monad mn, CHTMLElement this) => Expression this -> mn (Expression String)
getm'dir :: (Monad mn, CHTMLElement this) => Expression this -> mn (Expression String)
set'className :: (Monad mn, CHTMLElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'className :: (Monad mn, CHTMLElement this) => Expression this -> mn (Expression String)
getm'className :: (Monad mn, CHTMLElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLFieldSetElement
get'form :: (Monad mn, CHTMLFieldSetElement this, CHTMLFormElement zz) => Expression this -> mn (Expression zz)
getm'form :: (Monad mn, CHTMLFieldSetElement this) => Expression this -> mn (Expression THTMLFormElement)

module Data.DOM.HTMLFontElement
set'color :: (Monad mn, CHTMLFontElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'color :: (Monad mn, CHTMLFontElement this) => Expression this -> mn (Expression String)
getm'color :: (Monad mn, CHTMLFontElement this) => Expression this -> mn (Expression String)
set'face :: (Monad mn, CHTMLFontElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'face :: (Monad mn, CHTMLFontElement this) => Expression this -> mn (Expression String)
getm'face :: (Monad mn, CHTMLFontElement this) => Expression this -> mn (Expression String)
set'size :: (Monad mn, CHTMLFontElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'size :: (Monad mn, CHTMLFontElement this) => Expression this -> mn (Expression String)
getm'size :: (Monad mn, CHTMLFontElement this) => Expression this -> mn (Expression String)
mkFont :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLFontElement)

module Data.DOM.HTMLFormElement
submit :: (Monad mn, CHTMLFormElement this) => Expression this -> mn (Expression ())
reset :: (Monad mn, CHTMLFormElement this) => Expression this -> mn (Expression ())
get'elements :: (Monad mn, CHTMLFormElement this, CHTMLCollection zz) => Expression this -> mn (Expression zz)
getm'elements :: (Monad mn, CHTMLFormElement this) => Expression this -> mn (Expression THTMLCollection)
get'length :: (Monad mn, CHTMLFormElement this) => Expression this -> mn (Expression Double)
getm'length :: (Monad mn, CHTMLFormElement this) => Expression this -> mn (Expression Double)
set'name :: (Monad mn, CHTMLFormElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'name :: (Monad mn, CHTMLFormElement this) => Expression this -> mn (Expression String)
getm'name :: (Monad mn, CHTMLFormElement this) => Expression this -> mn (Expression String)
set'acceptCharset :: (Monad mn, CHTMLFormElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'acceptCharset :: (Monad mn, CHTMLFormElement this) => Expression this -> mn (Expression String)
getm'acceptCharset :: (Monad mn, CHTMLFormElement this) => Expression this -> mn (Expression String)
set'action :: (Monad mn, CHTMLFormElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'action :: (Monad mn, CHTMLFormElement this) => Expression this -> mn (Expression String)
getm'action :: (Monad mn, CHTMLFormElement this) => Expression this -> mn (Expression String)
set'enctype :: (Monad mn, CHTMLFormElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'enctype :: (Monad mn, CHTMLFormElement this) => Expression this -> mn (Expression String)
getm'enctype :: (Monad mn, CHTMLFormElement this) => Expression this -> mn (Expression String)
set'method :: (Monad mn, CHTMLFormElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'method :: (Monad mn, CHTMLFormElement this) => Expression this -> mn (Expression String)
getm'method :: (Monad mn, CHTMLFormElement this) => Expression this -> mn (Expression String)
set'target :: (Monad mn, CHTMLFormElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'target :: (Monad mn, CHTMLFormElement this) => Expression this -> mn (Expression String)
getm'target :: (Monad mn, CHTMLFormElement this) => Expression this -> mn (Expression String)
mkForm :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLFormElement)

module Data.DOM.HTMLFrameElement
set'frameBorder :: (Monad mn, CHTMLFrameElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'frameBorder :: (Monad mn, CHTMLFrameElement this) => Expression this -> mn (Expression String)
getm'frameBorder :: (Monad mn, CHTMLFrameElement this) => Expression this -> mn (Expression String)
set'longDesc :: (Monad mn, CHTMLFrameElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'longDesc :: (Monad mn, CHTMLFrameElement this) => Expression this -> mn (Expression String)
getm'longDesc :: (Monad mn, CHTMLFrameElement this) => Expression this -> mn (Expression String)
set'marginHeight :: (Monad mn, CHTMLFrameElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'marginHeight :: (Monad mn, CHTMLFrameElement this) => Expression this -> mn (Expression String)
getm'marginHeight :: (Monad mn, CHTMLFrameElement this) => Expression this -> mn (Expression String)
set'marginWidth :: (Monad mn, CHTMLFrameElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'marginWidth :: (Monad mn, CHTMLFrameElement this) => Expression this -> mn (Expression String)
getm'marginWidth :: (Monad mn, CHTMLFrameElement this) => Expression this -> mn (Expression String)
set'name :: (Monad mn, CHTMLFrameElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'name :: (Monad mn, CHTMLFrameElement this) => Expression this -> mn (Expression String)
getm'name :: (Monad mn, CHTMLFrameElement this) => Expression this -> mn (Expression String)
set'noResize :: (Monad mn, CHTMLFrameElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'noResize :: (Monad mn, CHTMLFrameElement this) => Expression this -> mn (Expression Bool)
getm'noResize :: (Monad mn, CHTMLFrameElement this) => Expression this -> mn (Expression Bool)
set'scrolling :: (Monad mn, CHTMLFrameElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'scrolling :: (Monad mn, CHTMLFrameElement this) => Expression this -> mn (Expression String)
getm'scrolling :: (Monad mn, CHTMLFrameElement this) => Expression this -> mn (Expression String)
set'src :: (Monad mn, CHTMLFrameElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'src :: (Monad mn, CHTMLFrameElement this) => Expression this -> mn (Expression String)
getm'src :: (Monad mn, CHTMLFrameElement this) => Expression this -> mn (Expression String)
get'contentDocument :: (Monad mn, CHTMLFrameElement this, CDocument zz) => Expression this -> mn (Expression zz)
getm'contentDocument :: (Monad mn, CHTMLFrameElement this) => Expression this -> mn (Expression TDocument)
mkFrame :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLFrameElement)

module Data.DOM.HTMLFrameSetElement
set'cols :: (Monad mn, CHTMLFrameSetElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'cols :: (Monad mn, CHTMLFrameSetElement this) => Expression this -> mn (Expression String)
getm'cols :: (Monad mn, CHTMLFrameSetElement this) => Expression this -> mn (Expression String)
set'rows :: (Monad mn, CHTMLFrameSetElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'rows :: (Monad mn, CHTMLFrameSetElement this) => Expression this -> mn (Expression String)
getm'rows :: (Monad mn, CHTMLFrameSetElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLHRElement
set'align :: (Monad mn, CHTMLHRElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'align :: (Monad mn, CHTMLHRElement this) => Expression this -> mn (Expression String)
getm'align :: (Monad mn, CHTMLHRElement this) => Expression this -> mn (Expression String)
set'noShade :: (Monad mn, CHTMLHRElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'noShade :: (Monad mn, CHTMLHRElement this) => Expression this -> mn (Expression Bool)
getm'noShade :: (Monad mn, CHTMLHRElement this) => Expression this -> mn (Expression Bool)
set'size :: (Monad mn, CHTMLHRElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'size :: (Monad mn, CHTMLHRElement this) => Expression this -> mn (Expression String)
getm'size :: (Monad mn, CHTMLHRElement this) => Expression this -> mn (Expression String)
set'width :: (Monad mn, CHTMLHRElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'width :: (Monad mn, CHTMLHRElement this) => Expression this -> mn (Expression String)
getm'width :: (Monad mn, CHTMLHRElement this) => Expression this -> mn (Expression String)
mkHr :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLHRElement)

module Data.DOM.HTMLHeadElement
set'profile :: (Monad mn, CHTMLHeadElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'profile :: (Monad mn, CHTMLHeadElement this) => Expression this -> mn (Expression String)
getm'profile :: (Monad mn, CHTMLHeadElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLHeadingElement
set'align :: (Monad mn, CHTMLHeadingElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'align :: (Monad mn, CHTMLHeadingElement this) => Expression this -> mn (Expression String)
getm'align :: (Monad mn, CHTMLHeadingElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLHtmlElement
set'version :: (Monad mn, CHTMLHtmlElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'version :: (Monad mn, CHTMLHtmlElement this) => Expression this -> mn (Expression String)
getm'version :: (Monad mn, CHTMLHtmlElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLIFrameElement
set'align :: (Monad mn, CHTMLIFrameElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'align :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
getm'align :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
set'frameBorder :: (Monad mn, CHTMLIFrameElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'frameBorder :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
getm'frameBorder :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
set'height :: (Monad mn, CHTMLIFrameElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'height :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
getm'height :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
set'longDesc :: (Monad mn, CHTMLIFrameElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'longDesc :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
getm'longDesc :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
set'marginHeight :: (Monad mn, CHTMLIFrameElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'marginHeight :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
getm'marginHeight :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
set'marginWidth :: (Monad mn, CHTMLIFrameElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'marginWidth :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
getm'marginWidth :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
set'name :: (Monad mn, CHTMLIFrameElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'name :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
getm'name :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
set'scrolling :: (Monad mn, CHTMLIFrameElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'scrolling :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
getm'scrolling :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
set'src :: (Monad mn, CHTMLIFrameElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'src :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
getm'src :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
set'width :: (Monad mn, CHTMLIFrameElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'width :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
getm'width :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression String)
get'contentDocument :: (Monad mn, CHTMLIFrameElement this, CDocument zz) => Expression this -> mn (Expression zz)
getm'contentDocument :: (Monad mn, CHTMLIFrameElement this) => Expression this -> mn (Expression TDocument)

module Data.DOM.HTMLImageElement
set'name :: (Monad mn, CHTMLImageElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'name :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression String)
getm'name :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression String)
set'align :: (Monad mn, CHTMLImageElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'align :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression String)
getm'align :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression String)
set'alt :: (Monad mn, CHTMLImageElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'alt :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression String)
getm'alt :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression String)
set'border :: (Monad mn, CHTMLImageElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'border :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression String)
getm'border :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression String)
set'height :: (Monad mn, CHTMLImageElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'height :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression Double)
getm'height :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression Double)
set'hspace :: (Monad mn, CHTMLImageElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'hspace :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression Double)
getm'hspace :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression Double)
set'isMap :: (Monad mn, CHTMLImageElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'isMap :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression Bool)
getm'isMap :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression Bool)
set'longDesc :: (Monad mn, CHTMLImageElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'longDesc :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression String)
getm'longDesc :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression String)
set'src :: (Monad mn, CHTMLImageElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'src :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression String)
getm'src :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression String)
set'useMap :: (Monad mn, CHTMLImageElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'useMap :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression String)
getm'useMap :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression String)
set'vspace :: (Monad mn, CHTMLImageElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'vspace :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression Double)
getm'vspace :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression Double)
set'width :: (Monad mn, CHTMLImageElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'width :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression Double)
getm'width :: (Monad mn, CHTMLImageElement this) => Expression this -> mn (Expression Double)
mkImg :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLImageElement)

module Data.DOM.HTMLInputElement
blur :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression ())
focus :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression ())
select :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression ())
click :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression ())
set'defaultValue :: (Monad mn, CHTMLInputElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'defaultValue :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
getm'defaultValue :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
set'defaultChecked :: (Monad mn, CHTMLInputElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'defaultChecked :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression Bool)
getm'defaultChecked :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression Bool)
get'form :: (Monad mn, CHTMLInputElement this, CHTMLFormElement zz) => Expression this -> mn (Expression zz)
getm'form :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression THTMLFormElement)
set'accept :: (Monad mn, CHTMLInputElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'accept :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
getm'accept :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
set'accessKey :: (Monad mn, CHTMLInputElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'accessKey :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
getm'accessKey :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
set'align :: (Monad mn, CHTMLInputElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'align :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
getm'align :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
set'alt :: (Monad mn, CHTMLInputElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'alt :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
getm'alt :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
set'checked :: (Monad mn, CHTMLInputElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'checked :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression Bool)
getm'checked :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression Bool)
set'disabled :: (Monad mn, CHTMLInputElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'disabled :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression Bool)
getm'disabled :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression Bool)
set'maxLength :: (Monad mn, CHTMLInputElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'maxLength :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression Double)
getm'maxLength :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression Double)
set'name :: (Monad mn, CHTMLInputElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'name :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
getm'name :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
set'readOnly :: (Monad mn, CHTMLInputElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'readOnly :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression Bool)
getm'readOnly :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression Bool)
set'size :: (Monad mn, CHTMLInputElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'size :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression Double)
getm'size :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression Double)
set'src :: (Monad mn, CHTMLInputElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'src :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
getm'src :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
set'tabIndex :: (Monad mn, CHTMLInputElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'tabIndex :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression Double)
getm'tabIndex :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression Double)
set'type :: (Monad mn, CHTMLInputElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'type :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
getm'type :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
set'useMap :: (Monad mn, CHTMLInputElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'useMap :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
getm'useMap :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
set'value :: (Monad mn, CHTMLInputElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'value :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
getm'value :: (Monad mn, CHTMLInputElement this) => Expression this -> mn (Expression String)
mkInput :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLInputElement)

module Data.DOM.HTMLIsIndexElement
get'form :: (Monad mn, CHTMLIsIndexElement this, CHTMLFormElement zz) => Expression this -> mn (Expression zz)
getm'form :: (Monad mn, CHTMLIsIndexElement this) => Expression this -> mn (Expression THTMLFormElement)
set'prompt :: (Monad mn, CHTMLIsIndexElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'prompt :: (Monad mn, CHTMLIsIndexElement this) => Expression this -> mn (Expression String)
getm'prompt :: (Monad mn, CHTMLIsIndexElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLLIElement
set'type :: (Monad mn, CHTMLLIElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'type :: (Monad mn, CHTMLLIElement this) => Expression this -> mn (Expression String)
getm'type :: (Monad mn, CHTMLLIElement this) => Expression this -> mn (Expression String)
set'value :: (Monad mn, CHTMLLIElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'value :: (Monad mn, CHTMLLIElement this) => Expression this -> mn (Expression Double)
getm'value :: (Monad mn, CHTMLLIElement this) => Expression this -> mn (Expression Double)
mkLi :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLLIElement)

module Data.DOM.HTMLLabelElement
get'form :: (Monad mn, CHTMLLabelElement this, CHTMLFormElement zz) => Expression this -> mn (Expression zz)
getm'form :: (Monad mn, CHTMLLabelElement this) => Expression this -> mn (Expression THTMLFormElement)
set'accessKey :: (Monad mn, CHTMLLabelElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'accessKey :: (Monad mn, CHTMLLabelElement this) => Expression this -> mn (Expression String)
getm'accessKey :: (Monad mn, CHTMLLabelElement this) => Expression this -> mn (Expression String)
set'htmlFor :: (Monad mn, CHTMLLabelElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'htmlFor :: (Monad mn, CHTMLLabelElement this) => Expression this -> mn (Expression String)
getm'htmlFor :: (Monad mn, CHTMLLabelElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLLegendElement
get'form :: (Monad mn, CHTMLLegendElement this, CHTMLFormElement zz) => Expression this -> mn (Expression zz)
getm'form :: (Monad mn, CHTMLLegendElement this) => Expression this -> mn (Expression THTMLFormElement)
set'accessKey :: (Monad mn, CHTMLLegendElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'accessKey :: (Monad mn, CHTMLLegendElement this) => Expression this -> mn (Expression String)
getm'accessKey :: (Monad mn, CHTMLLegendElement this) => Expression this -> mn (Expression String)
set'align :: (Monad mn, CHTMLLegendElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'align :: (Monad mn, CHTMLLegendElement this) => Expression this -> mn (Expression String)
getm'align :: (Monad mn, CHTMLLegendElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLLinkElement
set'disabled :: (Monad mn, CHTMLLinkElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'disabled :: (Monad mn, CHTMLLinkElement this) => Expression this -> mn (Expression Bool)
getm'disabled :: (Monad mn, CHTMLLinkElement this) => Expression this -> mn (Expression Bool)
set'charset :: (Monad mn, CHTMLLinkElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'charset :: (Monad mn, CHTMLLinkElement this) => Expression this -> mn (Expression String)
getm'charset :: (Monad mn, CHTMLLinkElement this) => Expression this -> mn (Expression String)
set'href :: (Monad mn, CHTMLLinkElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'href :: (Monad mn, CHTMLLinkElement this) => Expression this -> mn (Expression String)
getm'href :: (Monad mn, CHTMLLinkElement this) => Expression this -> mn (Expression String)
set'hreflang :: (Monad mn, CHTMLLinkElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'hreflang :: (Monad mn, CHTMLLinkElement this) => Expression this -> mn (Expression String)
getm'hreflang :: (Monad mn, CHTMLLinkElement this) => Expression this -> mn (Expression String)
set'media :: (Monad mn, CHTMLLinkElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'media :: (Monad mn, CHTMLLinkElement this) => Expression this -> mn (Expression String)
getm'media :: (Monad mn, CHTMLLinkElement this) => Expression this -> mn (Expression String)
set'rel :: (Monad mn, CHTMLLinkElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'rel :: (Monad mn, CHTMLLinkElement this) => Expression this -> mn (Expression String)
getm'rel :: (Monad mn, CHTMLLinkElement this) => Expression this -> mn (Expression String)
set'rev :: (Monad mn, CHTMLLinkElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'rev :: (Monad mn, CHTMLLinkElement this) => Expression this -> mn (Expression String)
getm'rev :: (Monad mn, CHTMLLinkElement this) => Expression this -> mn (Expression String)
set'target :: (Monad mn, CHTMLLinkElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'target :: (Monad mn, CHTMLLinkElement this) => Expression this -> mn (Expression String)
getm'target :: (Monad mn, CHTMLLinkElement this) => Expression this -> mn (Expression String)
set'type :: (Monad mn, CHTMLLinkElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'type :: (Monad mn, CHTMLLinkElement this) => Expression this -> mn (Expression String)
getm'type :: (Monad mn, CHTMLLinkElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLMapElement
get'areas :: (Monad mn, CHTMLMapElement this, CHTMLCollection zz) => Expression this -> mn (Expression zz)
getm'areas :: (Monad mn, CHTMLMapElement this) => Expression this -> mn (Expression THTMLCollection)
set'name :: (Monad mn, CHTMLMapElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'name :: (Monad mn, CHTMLMapElement this) => Expression this -> mn (Expression String)
getm'name :: (Monad mn, CHTMLMapElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLMenuElement
set'compact :: (Monad mn, CHTMLMenuElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'compact :: (Monad mn, CHTMLMenuElement this) => Expression this -> mn (Expression Bool)
getm'compact :: (Monad mn, CHTMLMenuElement this) => Expression this -> mn (Expression Bool)

module Data.DOM.HTMLMetaElement
set'content :: (Monad mn, CHTMLMetaElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'content :: (Monad mn, CHTMLMetaElement this) => Expression this -> mn (Expression String)
getm'content :: (Monad mn, CHTMLMetaElement this) => Expression this -> mn (Expression String)
set'httpEquiv :: (Monad mn, CHTMLMetaElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'httpEquiv :: (Monad mn, CHTMLMetaElement this) => Expression this -> mn (Expression String)
getm'httpEquiv :: (Monad mn, CHTMLMetaElement this) => Expression this -> mn (Expression String)
set'name :: (Monad mn, CHTMLMetaElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'name :: (Monad mn, CHTMLMetaElement this) => Expression this -> mn (Expression String)
getm'name :: (Monad mn, CHTMLMetaElement this) => Expression this -> mn (Expression String)
set'scheme :: (Monad mn, CHTMLMetaElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'scheme :: (Monad mn, CHTMLMetaElement this) => Expression this -> mn (Expression String)
getm'scheme :: (Monad mn, CHTMLMetaElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLModElement
set'cite :: (Monad mn, CHTMLModElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'cite :: (Monad mn, CHTMLModElement this) => Expression this -> mn (Expression String)
getm'cite :: (Monad mn, CHTMLModElement this) => Expression this -> mn (Expression String)
set'dateTime :: (Monad mn, CHTMLModElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'dateTime :: (Monad mn, CHTMLModElement this) => Expression this -> mn (Expression String)
getm'dateTime :: (Monad mn, CHTMLModElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLOListElement
set'compact :: (Monad mn, CHTMLOListElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'compact :: (Monad mn, CHTMLOListElement this) => Expression this -> mn (Expression Bool)
getm'compact :: (Monad mn, CHTMLOListElement this) => Expression this -> mn (Expression Bool)
set'start :: (Monad mn, CHTMLOListElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'start :: (Monad mn, CHTMLOListElement this) => Expression this -> mn (Expression Double)
getm'start :: (Monad mn, CHTMLOListElement this) => Expression this -> mn (Expression Double)
set'type :: (Monad mn, CHTMLOListElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'type :: (Monad mn, CHTMLOListElement this) => Expression this -> mn (Expression String)
getm'type :: (Monad mn, CHTMLOListElement this) => Expression this -> mn (Expression String)
mkOl :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLOListElement)

module Data.DOM.HTMLObjectElement
get'form :: (Monad mn, CHTMLObjectElement this, CHTMLFormElement zz) => Expression this -> mn (Expression zz)
getm'form :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression THTMLFormElement)
set'code :: (Monad mn, CHTMLObjectElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'code :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
getm'code :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
set'align :: (Monad mn, CHTMLObjectElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'align :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
getm'align :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
set'archive :: (Monad mn, CHTMLObjectElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'archive :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
getm'archive :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
set'border :: (Monad mn, CHTMLObjectElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'border :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
getm'border :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
set'codeBase :: (Monad mn, CHTMLObjectElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'codeBase :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
getm'codeBase :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
set'codeType :: (Monad mn, CHTMLObjectElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'codeType :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
getm'codeType :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
set'data :: (Monad mn, CHTMLObjectElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'data :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
getm'data :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
set'declare :: (Monad mn, CHTMLObjectElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'declare :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression Bool)
getm'declare :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression Bool)
set'height :: (Monad mn, CHTMLObjectElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'height :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
getm'height :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
set'hspace :: (Monad mn, CHTMLObjectElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'hspace :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression Double)
getm'hspace :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression Double)
set'name :: (Monad mn, CHTMLObjectElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'name :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
getm'name :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
set'standby :: (Monad mn, CHTMLObjectElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'standby :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
getm'standby :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
set'tabIndex :: (Monad mn, CHTMLObjectElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'tabIndex :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression Double)
getm'tabIndex :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression Double)
set'type :: (Monad mn, CHTMLObjectElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'type :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
getm'type :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
set'useMap :: (Monad mn, CHTMLObjectElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'useMap :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
getm'useMap :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
set'vspace :: (Monad mn, CHTMLObjectElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'vspace :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression Double)
getm'vspace :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression Double)
set'width :: (Monad mn, CHTMLObjectElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'width :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
getm'width :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression String)
get'contentDocument :: (Monad mn, CHTMLObjectElement this, CDocument zz) => Expression this -> mn (Expression zz)
getm'contentDocument :: (Monad mn, CHTMLObjectElement this) => Expression this -> mn (Expression TDocument)
mkObject :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLObjectElement)

module Data.DOM.HTMLOptGroupElement
set'disabled :: (Monad mn, CHTMLOptGroupElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'disabled :: (Monad mn, CHTMLOptGroupElement this) => Expression this -> mn (Expression Bool)
getm'disabled :: (Monad mn, CHTMLOptGroupElement this) => Expression this -> mn (Expression Bool)
set'label :: (Monad mn, CHTMLOptGroupElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'label :: (Monad mn, CHTMLOptGroupElement this) => Expression this -> mn (Expression String)
getm'label :: (Monad mn, CHTMLOptGroupElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLOptionElement
get'form :: (Monad mn, CHTMLOptionElement this, CHTMLFormElement zz) => Expression this -> mn (Expression zz)
getm'form :: (Monad mn, CHTMLOptionElement this) => Expression this -> mn (Expression THTMLFormElement)
set'defaultSelected :: (Monad mn, CHTMLOptionElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'defaultSelected :: (Monad mn, CHTMLOptionElement this) => Expression this -> mn (Expression Bool)
getm'defaultSelected :: (Monad mn, CHTMLOptionElement this) => Expression this -> mn (Expression Bool)
get'text :: (Monad mn, CHTMLOptionElement this) => Expression this -> mn (Expression String)
getm'text :: (Monad mn, CHTMLOptionElement this) => Expression this -> mn (Expression String)
get'index :: (Monad mn, CHTMLOptionElement this) => Expression this -> mn (Expression Double)
getm'index :: (Monad mn, CHTMLOptionElement this) => Expression this -> mn (Expression Double)
set'disabled :: (Monad mn, CHTMLOptionElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'disabled :: (Monad mn, CHTMLOptionElement this) => Expression this -> mn (Expression Bool)
getm'disabled :: (Monad mn, CHTMLOptionElement this) => Expression this -> mn (Expression Bool)
set'label :: (Monad mn, CHTMLOptionElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'label :: (Monad mn, CHTMLOptionElement this) => Expression this -> mn (Expression String)
getm'label :: (Monad mn, CHTMLOptionElement this) => Expression this -> mn (Expression String)
set'selected :: (Monad mn, CHTMLOptionElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'selected :: (Monad mn, CHTMLOptionElement this) => Expression this -> mn (Expression Bool)
getm'selected :: (Monad mn, CHTMLOptionElement this) => Expression this -> mn (Expression Bool)
set'value :: (Monad mn, CHTMLOptionElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'value :: (Monad mn, CHTMLOptionElement this) => Expression this -> mn (Expression String)
getm'value :: (Monad mn, CHTMLOptionElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLOptionsCollection
item :: (Monad mn, CHTMLOptionsCollection this, CNode zz) => Expression Double -> Expression this -> mn (Expression zz)
namedItem :: (Monad mn, CHTMLOptionsCollection this, CNode zz) => Expression String -> Expression this -> mn (Expression zz)
set'length :: (Monad mn, CHTMLOptionsCollection zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'length :: (Monad mn, CHTMLOptionsCollection this) => Expression this -> mn (Expression Double)
getm'length :: (Monad mn, CHTMLOptionsCollection this) => Expression this -> mn (Expression Double)

module Data.DOM.HTMLParagraphElement
set'align :: (Monad mn, CHTMLParagraphElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'align :: (Monad mn, CHTMLParagraphElement this) => Expression this -> mn (Expression String)
getm'align :: (Monad mn, CHTMLParagraphElement this) => Expression this -> mn (Expression String)
mkP :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLParagraphElement)

module Data.DOM.HTMLParamElement
set'name :: (Monad mn, CHTMLParamElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'name :: (Monad mn, CHTMLParamElement this) => Expression this -> mn (Expression String)
getm'name :: (Monad mn, CHTMLParamElement this) => Expression this -> mn (Expression String)
set'type :: (Monad mn, CHTMLParamElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'type :: (Monad mn, CHTMLParamElement this) => Expression this -> mn (Expression String)
getm'type :: (Monad mn, CHTMLParamElement this) => Expression this -> mn (Expression String)
set'value :: (Monad mn, CHTMLParamElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'value :: (Monad mn, CHTMLParamElement this) => Expression this -> mn (Expression String)
getm'value :: (Monad mn, CHTMLParamElement this) => Expression this -> mn (Expression String)
set'valueType :: (Monad mn, CHTMLParamElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'valueType :: (Monad mn, CHTMLParamElement this) => Expression this -> mn (Expression String)
getm'valueType :: (Monad mn, CHTMLParamElement this) => Expression this -> mn (Expression String)
mkParam :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLParamElement)

module Data.DOM.HTMLPreElement
set'width :: (Monad mn, CHTMLPreElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'width :: (Monad mn, CHTMLPreElement this) => Expression this -> mn (Expression Double)
getm'width :: (Monad mn, CHTMLPreElement this) => Expression this -> mn (Expression Double)
mkPre :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLPreElement)

module Data.DOM.HTMLQuoteElement
set'cite :: (Monad mn, CHTMLQuoteElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'cite :: (Monad mn, CHTMLQuoteElement this) => Expression this -> mn (Expression String)
getm'cite :: (Monad mn, CHTMLQuoteElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLScriptElement
set'text :: (Monad mn, CHTMLScriptElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'text :: (Monad mn, CHTMLScriptElement this) => Expression this -> mn (Expression String)
getm'text :: (Monad mn, CHTMLScriptElement this) => Expression this -> mn (Expression String)
set'htmlFor :: (Monad mn, CHTMLScriptElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'htmlFor :: (Monad mn, CHTMLScriptElement this) => Expression this -> mn (Expression String)
getm'htmlFor :: (Monad mn, CHTMLScriptElement this) => Expression this -> mn (Expression String)
set'event :: (Monad mn, CHTMLScriptElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'event :: (Monad mn, CHTMLScriptElement this) => Expression this -> mn (Expression String)
getm'event :: (Monad mn, CHTMLScriptElement this) => Expression this -> mn (Expression String)
set'charset :: (Monad mn, CHTMLScriptElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'charset :: (Monad mn, CHTMLScriptElement this) => Expression this -> mn (Expression String)
getm'charset :: (Monad mn, CHTMLScriptElement this) => Expression this -> mn (Expression String)
set'defer :: (Monad mn, CHTMLScriptElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'defer :: (Monad mn, CHTMLScriptElement this) => Expression this -> mn (Expression Bool)
getm'defer :: (Monad mn, CHTMLScriptElement this) => Expression this -> mn (Expression Bool)
set'src :: (Monad mn, CHTMLScriptElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'src :: (Monad mn, CHTMLScriptElement this) => Expression this -> mn (Expression String)
getm'src :: (Monad mn, CHTMLScriptElement this) => Expression this -> mn (Expression String)
set'type :: (Monad mn, CHTMLScriptElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'type :: (Monad mn, CHTMLScriptElement this) => Expression this -> mn (Expression String)
getm'type :: (Monad mn, CHTMLScriptElement this) => Expression this -> mn (Expression String)
mkScript :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLScriptElement)

module Data.DOM.HTMLSelectElement
add :: (Monad mn, CHTMLSelectElement this, CHTMLElement element, CHTMLElement before) => Expression element -> Expression before -> Expression this -> mn (Expression ())
remove :: (Monad mn, CHTMLSelectElement this) => Expression Double -> Expression this -> mn (Expression ())
blur :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression ())
focus :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression ())
get'type :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression String)
getm'type :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression String)
set'selectedIndex :: (Monad mn, CHTMLSelectElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'selectedIndex :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression Double)
getm'selectedIndex :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression Double)
set'value :: (Monad mn, CHTMLSelectElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'value :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression String)
getm'value :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression String)
set'length :: (Monad mn, CHTMLSelectElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'length :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression Double)
getm'length :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression Double)
get'form :: (Monad mn, CHTMLSelectElement this, CHTMLFormElement zz) => Expression this -> mn (Expression zz)
getm'form :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression THTMLFormElement)
get'options :: (Monad mn, CHTMLSelectElement this, CHTMLOptionsCollection zz) => Expression this -> mn (Expression zz)
getm'options :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression THTMLOptionsCollection)
set'disabled :: (Monad mn, CHTMLSelectElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'disabled :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression Bool)
getm'disabled :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression Bool)
set'multiple :: (Monad mn, CHTMLSelectElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'multiple :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression Bool)
getm'multiple :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression Bool)
set'name :: (Monad mn, CHTMLSelectElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'name :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression String)
getm'name :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression String)
set'size :: (Monad mn, CHTMLSelectElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'size :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression Double)
getm'size :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression Double)
set'tabIndex :: (Monad mn, CHTMLSelectElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'tabIndex :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression Double)
getm'tabIndex :: (Monad mn, CHTMLSelectElement this) => Expression this -> mn (Expression Double)

module Data.DOM.HTMLStyleElement
set'disabled :: (Monad mn, CHTMLStyleElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'disabled :: (Monad mn, CHTMLStyleElement this) => Expression this -> mn (Expression Bool)
getm'disabled :: (Monad mn, CHTMLStyleElement this) => Expression this -> mn (Expression Bool)
set'media :: (Monad mn, CHTMLStyleElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'media :: (Monad mn, CHTMLStyleElement this) => Expression this -> mn (Expression String)
getm'media :: (Monad mn, CHTMLStyleElement this) => Expression this -> mn (Expression String)
set'type :: (Monad mn, CHTMLStyleElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'type :: (Monad mn, CHTMLStyleElement this) => Expression this -> mn (Expression String)
getm'type :: (Monad mn, CHTMLStyleElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLTableCaptionElement
set'align :: (Monad mn, CHTMLTableCaptionElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'align :: (Monad mn, CHTMLTableCaptionElement this) => Expression this -> mn (Expression String)
getm'align :: (Monad mn, CHTMLTableCaptionElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLTableCellElement
get'cellIndex :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression Double)
getm'cellIndex :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression Double)
set'abbr :: (Monad mn, CHTMLTableCellElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'abbr :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
getm'abbr :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
set'align :: (Monad mn, CHTMLTableCellElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'align :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
getm'align :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
set'axis :: (Monad mn, CHTMLTableCellElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'axis :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
getm'axis :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
set'bgColor :: (Monad mn, CHTMLTableCellElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'bgColor :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
getm'bgColor :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
set'ch :: (Monad mn, CHTMLTableCellElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'ch :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
getm'ch :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
set'chOff :: (Monad mn, CHTMLTableCellElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'chOff :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
getm'chOff :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
set'colSpan :: (Monad mn, CHTMLTableCellElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'colSpan :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression Double)
getm'colSpan :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression Double)
set'headers :: (Monad mn, CHTMLTableCellElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'headers :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
getm'headers :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
set'height :: (Monad mn, CHTMLTableCellElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'height :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
getm'height :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
set'noWrap :: (Monad mn, CHTMLTableCellElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'noWrap :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression Bool)
getm'noWrap :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression Bool)
set'rowSpan :: (Monad mn, CHTMLTableCellElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'rowSpan :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression Double)
getm'rowSpan :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression Double)
set'scope :: (Monad mn, CHTMLTableCellElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'scope :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
getm'scope :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
set'vAlign :: (Monad mn, CHTMLTableCellElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'vAlign :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
getm'vAlign :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
set'width :: (Monad mn, CHTMLTableCellElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'width :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
getm'width :: (Monad mn, CHTMLTableCellElement this) => Expression this -> mn (Expression String)
mkTd :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLTableCellElement)

module Data.DOM.HTMLTableColElement
set'align :: (Monad mn, CHTMLTableColElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'align :: (Monad mn, CHTMLTableColElement this) => Expression this -> mn (Expression String)
getm'align :: (Monad mn, CHTMLTableColElement this) => Expression this -> mn (Expression String)
set'ch :: (Monad mn, CHTMLTableColElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'ch :: (Monad mn, CHTMLTableColElement this) => Expression this -> mn (Expression String)
getm'ch :: (Monad mn, CHTMLTableColElement this) => Expression this -> mn (Expression String)
set'chOff :: (Monad mn, CHTMLTableColElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'chOff :: (Monad mn, CHTMLTableColElement this) => Expression this -> mn (Expression String)
getm'chOff :: (Monad mn, CHTMLTableColElement this) => Expression this -> mn (Expression String)
set'span :: (Monad mn, CHTMLTableColElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'span :: (Monad mn, CHTMLTableColElement this) => Expression this -> mn (Expression Double)
getm'span :: (Monad mn, CHTMLTableColElement this) => Expression this -> mn (Expression Double)
set'vAlign :: (Monad mn, CHTMLTableColElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'vAlign :: (Monad mn, CHTMLTableColElement this) => Expression this -> mn (Expression String)
getm'vAlign :: (Monad mn, CHTMLTableColElement this) => Expression this -> mn (Expression String)
set'width :: (Monad mn, CHTMLTableColElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'width :: (Monad mn, CHTMLTableColElement this) => Expression this -> mn (Expression String)
getm'width :: (Monad mn, CHTMLTableColElement this) => Expression this -> mn (Expression String)
mkCol :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLTableColElement)

module Data.DOM.HTMLTableElement
createTHead :: (Monad mn, CHTMLTableElement this, CHTMLElement zz) => Expression this -> mn (Expression zz)
deleteTHead :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression ())
createTFoot :: (Monad mn, CHTMLTableElement this, CHTMLElement zz) => Expression this -> mn (Expression zz)
deleteTFoot :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression ())
createCaption :: (Monad mn, CHTMLTableElement this, CHTMLElement zz) => Expression this -> mn (Expression zz)
deleteCaption :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression ())
insertRow :: (Monad mn, CHTMLTableElement this, CHTMLElement zz) => Expression Double -> Expression this -> mn (Expression zz)
deleteRow :: (Monad mn, CHTMLTableElement this) => Expression Double -> Expression this -> mn (Expression ())
set'caption :: (Monad mn, CHTMLTableCaptionElement val, CHTMLTableElement zz) => Expression val -> Expression zz -> mn (Expression zz)
get'caption :: (Monad mn, CHTMLTableElement this, CHTMLTableCaptionElement zz) => Expression this -> mn (Expression zz)
getm'caption :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression THTMLTableCaptionElement)
set'tHead :: (Monad mn, CHTMLTableSectionElement val, CHTMLTableElement zz) => Expression val -> Expression zz -> mn (Expression zz)
get'tHead :: (Monad mn, CHTMLTableElement this, CHTMLTableSectionElement zz) => Expression this -> mn (Expression zz)
getm'tHead :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression THTMLTableSectionElement)
set'tFoot :: (Monad mn, CHTMLTableSectionElement val, CHTMLTableElement zz) => Expression val -> Expression zz -> mn (Expression zz)
get'tFoot :: (Monad mn, CHTMLTableElement this, CHTMLTableSectionElement zz) => Expression this -> mn (Expression zz)
getm'tFoot :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression THTMLTableSectionElement)
get'rows :: (Monad mn, CHTMLTableElement this, CHTMLCollection zz) => Expression this -> mn (Expression zz)
getm'rows :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression THTMLCollection)
get'tBodies :: (Monad mn, CHTMLTableElement this, CHTMLCollection zz) => Expression this -> mn (Expression zz)
getm'tBodies :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression THTMLCollection)
set'align :: (Monad mn, CHTMLTableElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'align :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression String)
getm'align :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression String)
set'bgColor :: (Monad mn, CHTMLTableElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'bgColor :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression String)
getm'bgColor :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression String)
set'border :: (Monad mn, CHTMLTableElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'border :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression String)
getm'border :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression String)
set'cellPadding :: (Monad mn, CHTMLTableElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'cellPadding :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression String)
getm'cellPadding :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression String)
set'cellSpacing :: (Monad mn, CHTMLTableElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'cellSpacing :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression String)
getm'cellSpacing :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression String)
set'frame :: (Monad mn, CHTMLTableElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'frame :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression String)
getm'frame :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression String)
set'rules :: (Monad mn, CHTMLTableElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'rules :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression String)
getm'rules :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression String)
set'summary :: (Monad mn, CHTMLTableElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'summary :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression String)
getm'summary :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression String)
set'width :: (Monad mn, CHTMLTableElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'width :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression String)
getm'width :: (Monad mn, CHTMLTableElement this) => Expression this -> mn (Expression String)
mkTable :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLTableElement)

module Data.DOM.HTMLTableRowElement
insertCell :: (Monad mn, CHTMLTableRowElement this, CHTMLElement zz) => Expression Double -> Expression this -> mn (Expression zz)
deleteCell :: (Monad mn, CHTMLTableRowElement this) => Expression Double -> Expression this -> mn (Expression ())
get'rowIndex :: (Monad mn, CHTMLTableRowElement this) => Expression this -> mn (Expression Double)
getm'rowIndex :: (Monad mn, CHTMLTableRowElement this) => Expression this -> mn (Expression Double)
get'sectionRowIndex :: (Monad mn, CHTMLTableRowElement this) => Expression this -> mn (Expression Double)
getm'sectionRowIndex :: (Monad mn, CHTMLTableRowElement this) => Expression this -> mn (Expression Double)
get'cells :: (Monad mn, CHTMLTableRowElement this, CHTMLCollection zz) => Expression this -> mn (Expression zz)
getm'cells :: (Monad mn, CHTMLTableRowElement this) => Expression this -> mn (Expression THTMLCollection)
set'align :: (Monad mn, CHTMLTableRowElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'align :: (Monad mn, CHTMLTableRowElement this) => Expression this -> mn (Expression String)
getm'align :: (Monad mn, CHTMLTableRowElement this) => Expression this -> mn (Expression String)
set'bgColor :: (Monad mn, CHTMLTableRowElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'bgColor :: (Monad mn, CHTMLTableRowElement this) => Expression this -> mn (Expression String)
getm'bgColor :: (Monad mn, CHTMLTableRowElement this) => Expression this -> mn (Expression String)
set'ch :: (Monad mn, CHTMLTableRowElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'ch :: (Monad mn, CHTMLTableRowElement this) => Expression this -> mn (Expression String)
getm'ch :: (Monad mn, CHTMLTableRowElement this) => Expression this -> mn (Expression String)
set'chOff :: (Monad mn, CHTMLTableRowElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'chOff :: (Monad mn, CHTMLTableRowElement this) => Expression this -> mn (Expression String)
getm'chOff :: (Monad mn, CHTMLTableRowElement this) => Expression this -> mn (Expression String)
set'vAlign :: (Monad mn, CHTMLTableRowElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'vAlign :: (Monad mn, CHTMLTableRowElement this) => Expression this -> mn (Expression String)
getm'vAlign :: (Monad mn, CHTMLTableRowElement this) => Expression this -> mn (Expression String)
mkTr :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLTableRowElement)

module Data.DOM.HTMLTableSectionElement
insertRow :: (Monad mn, CHTMLTableSectionElement this, CHTMLElement zz) => Expression Double -> Expression this -> mn (Expression zz)
deleteRow :: (Monad mn, CHTMLTableSectionElement this) => Expression Double -> Expression this -> mn (Expression ())
set'align :: (Monad mn, CHTMLTableSectionElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'align :: (Monad mn, CHTMLTableSectionElement this) => Expression this -> mn (Expression String)
getm'align :: (Monad mn, CHTMLTableSectionElement this) => Expression this -> mn (Expression String)
set'ch :: (Monad mn, CHTMLTableSectionElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'ch :: (Monad mn, CHTMLTableSectionElement this) => Expression this -> mn (Expression String)
getm'ch :: (Monad mn, CHTMLTableSectionElement this) => Expression this -> mn (Expression String)
set'chOff :: (Monad mn, CHTMLTableSectionElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'chOff :: (Monad mn, CHTMLTableSectionElement this) => Expression this -> mn (Expression String)
getm'chOff :: (Monad mn, CHTMLTableSectionElement this) => Expression this -> mn (Expression String)
set'vAlign :: (Monad mn, CHTMLTableSectionElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'vAlign :: (Monad mn, CHTMLTableSectionElement this) => Expression this -> mn (Expression String)
getm'vAlign :: (Monad mn, CHTMLTableSectionElement this) => Expression this -> mn (Expression String)
get'rows :: (Monad mn, CHTMLTableSectionElement this, CHTMLCollection zz) => Expression this -> mn (Expression zz)
getm'rows :: (Monad mn, CHTMLTableSectionElement this) => Expression this -> mn (Expression THTMLCollection)

module Data.DOM.HTMLTextAreaElement
blur :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression ())
focus :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression ())
select :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression ())
set'defaultValue :: (Monad mn, CHTMLTextAreaElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'defaultValue :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression String)
getm'defaultValue :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression String)
get'form :: (Monad mn, CHTMLTextAreaElement this, CHTMLFormElement zz) => Expression this -> mn (Expression zz)
getm'form :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression THTMLFormElement)
set'accessKey :: (Monad mn, CHTMLTextAreaElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'accessKey :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression String)
getm'accessKey :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression String)
set'cols :: (Monad mn, CHTMLTextAreaElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'cols :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression Double)
getm'cols :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression Double)
set'disabled :: (Monad mn, CHTMLTextAreaElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'disabled :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression Bool)
getm'disabled :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression Bool)
set'name :: (Monad mn, CHTMLTextAreaElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'name :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression String)
getm'name :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression String)
set'readOnly :: (Monad mn, CHTMLTextAreaElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'readOnly :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression Bool)
getm'readOnly :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression Bool)
set'rows :: (Monad mn, CHTMLTextAreaElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'rows :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression Double)
getm'rows :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression Double)
set'tabIndex :: (Monad mn, CHTMLTextAreaElement zz) => Expression Double -> Expression zz -> mn (Expression zz)
get'tabIndex :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression Double)
getm'tabIndex :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression Double)
get'type :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression String)
getm'type :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression String)
set'value :: (Monad mn, CHTMLTextAreaElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'value :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression String)
getm'value :: (Monad mn, CHTMLTextAreaElement this) => Expression this -> mn (Expression String)
mkTextarea :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLTextAreaElement)

module Data.DOM.HTMLTitleElement
set'text :: (Monad mn, CHTMLTitleElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'text :: (Monad mn, CHTMLTitleElement this) => Expression this -> mn (Expression String)
getm'text :: (Monad mn, CHTMLTitleElement this) => Expression this -> mn (Expression String)

module Data.DOM.HTMLUListElement
set'compact :: (Monad mn, CHTMLUListElement zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'compact :: (Monad mn, CHTMLUListElement this) => Expression this -> mn (Expression Bool)
getm'compact :: (Monad mn, CHTMLUListElement this) => Expression this -> mn (Expression Bool)
set'type :: (Monad mn, CHTMLUListElement zz) => Expression String -> Expression zz -> mn (Expression zz)
get'type :: (Monad mn, CHTMLUListElement this) => Expression this -> mn (Expression String)
getm'type :: (Monad mn, CHTMLUListElement this) => Expression this -> mn (Expression String)
mkUl :: (Monad mn, CHTMLDocument a) => Expression a -> mn (Expression THTMLUListElement)

module Data.DOM.Ranges
data TRange
TRange :: TRange
data TDocumentRange
TDocumentRange :: TDocumentRange
class CRange a
class CDocumentRange a
instance CDocumentRange TDocumentRange
instance CRange TRange

module Data.DOM.DocumentRange
createRange :: (Monad mn, CDocumentRange this, CRange zz) => Expression this -> mn (Expression zz)

module Data.DOM.Range
setStart :: (Monad mn, CRange this, CNode refNode) => Expression refNode -> Expression Double -> Expression this -> mn (Expression ())
setEnd :: (Monad mn, CRange this, CNode refNode) => Expression refNode -> Expression Double -> Expression this -> mn (Expression ())
setStartBefore :: (Monad mn, CRange this, CNode refNode) => Expression refNode -> Expression this -> mn (Expression ())
setStartAfter :: (Monad mn, CRange this, CNode refNode) => Expression refNode -> Expression this -> mn (Expression ())
setEndBefore :: (Monad mn, CRange this, CNode refNode) => Expression refNode -> Expression this -> mn (Expression ())
setEndAfter :: (Monad mn, CRange this, CNode refNode) => Expression refNode -> Expression this -> mn (Expression ())
collapse :: (Monad mn, CRange this) => Expression Bool -> Expression this -> mn (Expression ())
selectNode :: (Monad mn, CRange this, CNode refNode) => Expression refNode -> Expression this -> mn (Expression ())
selectNodeContents :: (Monad mn, CRange this, CNode refNode) => Expression refNode -> Expression this -> mn (Expression ())
compareBoundaryPoints :: (Monad mn, CRange this, CRange sourceRange) => Expression Double -> Expression sourceRange -> Expression this -> mn (Expression Double)
deleteContents :: (Monad mn, CRange this) => Expression this -> mn (Expression ())
extractContents :: (Monad mn, CRange this, CDocumentFragment zz) => Expression this -> mn (Expression zz)
cloneContents :: (Monad mn, CRange this, CDocumentFragment zz) => Expression this -> mn (Expression zz)
insertNode :: (Monad mn, CRange this, CNode newNode) => Expression newNode -> Expression this -> mn (Expression ())
surroundContents :: (Monad mn, CRange this, CNode newParent) => Expression newParent -> Expression this -> mn (Expression ())
cloneRange :: (Monad mn, CRange this, CRange zz) => Expression this -> mn (Expression zz)
toString :: (Monad mn, CRange this) => Expression this -> mn (Expression String)
detach :: (Monad mn, CRange this) => Expression this -> mn (Expression ())
cSTART_TO_START :: Integer
cSTART_TO_END :: Integer
cEND_TO_END :: Integer
cEND_TO_START :: Integer
get'startContainer :: (Monad mn, CRange this, CNode zz) => Expression this -> mn (Expression zz)
getm'startContainer :: (Monad mn, CRange this) => Expression this -> mn (Expression TNode)
get'startOffset :: (Monad mn, CRange this) => Expression this -> mn (Expression Double)
getm'startOffset :: (Monad mn, CRange this) => Expression this -> mn (Expression Double)
get'endContainer :: (Monad mn, CRange this, CNode zz) => Expression this -> mn (Expression zz)
getm'endContainer :: (Monad mn, CRange this) => Expression this -> mn (Expression TNode)
get'endOffset :: (Monad mn, CRange this) => Expression this -> mn (Expression Double)
getm'endOffset :: (Monad mn, CRange this) => Expression this -> mn (Expression Double)
get'collapsed :: (Monad mn, CRange this) => Expression this -> mn (Expression Bool)
getm'collapsed :: (Monad mn, CRange this) => Expression this -> mn (Expression Bool)
get'commonAncestorContainer :: (Monad mn, CRange this, CNode zz) => Expression this -> mn (Expression zz)
getm'commonAncestorContainer :: (Monad mn, CRange this) => Expression this -> mn (Expression TNode)

module Data.DOM.DocumentStyle
get'styleSheets :: (Monad mn, CDocumentStyle this, CStyleSheetList zz) => Expression this -> mn (Expression zz)
getm'styleSheets :: (Monad mn, CDocumentStyle this) => Expression this -> mn (Expression TStyleSheetList)

module Data.DOM.LinkStyle
get'sheet :: (Monad mn, CLinkStyle this, CStyleSheet zz) => Expression this -> mn (Expression zz)
getm'sheet :: (Monad mn, CLinkStyle this) => Expression this -> mn (Expression TStyleSheet)

module Data.DOM.MediaList
item :: (Monad mn, CMediaList this) => Expression Double -> Expression this -> mn (Expression String)
deleteMedium :: (Monad mn, CMediaList this) => Expression String -> Expression this -> mn (Expression ())
appendMedium :: (Monad mn, CMediaList this) => Expression String -> Expression this -> mn (Expression ())
set'mediaText :: (Monad mn, CMediaList zz) => Expression String -> Expression zz -> mn (Expression zz)
get'mediaText :: (Monad mn, CMediaList this) => Expression this -> mn (Expression String)
getm'mediaText :: (Monad mn, CMediaList this) => Expression this -> mn (Expression String)
get'length :: (Monad mn, CMediaList this) => Expression this -> mn (Expression Double)
getm'length :: (Monad mn, CMediaList this) => Expression this -> mn (Expression Double)

module Data.DOM.StyleSheet
get'type :: (Monad mn, CStyleSheet this) => Expression this -> mn (Expression String)
getm'type :: (Monad mn, CStyleSheet this) => Expression this -> mn (Expression String)
set'disabled :: (Monad mn, CStyleSheet zz) => Expression Bool -> Expression zz -> mn (Expression zz)
get'disabled :: (Monad mn, CStyleSheet this) => Expression this -> mn (Expression Bool)
getm'disabled :: (Monad mn, CStyleSheet this) => Expression this -> mn (Expression Bool)
get'ownerNode :: (Monad mn, CStyleSheet this, CNode zz) => Expression this -> mn (Expression zz)
getm'ownerNode :: (Monad mn, CStyleSheet this) => Expression this -> mn (Expression TNode)
get'parentStyleSheet :: (Monad mn, CStyleSheet this, CStyleSheet zz) => Expression this -> mn (Expression zz)
getm'parentStyleSheet :: (Monad mn, CStyleSheet this) => Expression this -> mn (Expression TStyleSheet)
get'href :: (Monad mn, CStyleSheet this) => Expression this -> mn (Expression String)
getm'href :: (Monad mn, CStyleSheet this) => Expression this -> mn (Expression String)
get'title :: (Monad mn, CStyleSheet this) => Expression this -> mn (Expression String)
getm'title :: (Monad mn, CStyleSheet this) => Expression this -> mn (Expression String)
get'media :: (Monad mn, CStyleSheet this, CMediaList zz) => Expression this -> mn (Expression zz)
getm'media :: (Monad mn, CStyleSheet this) => Expression this -> mn (Expression TMediaList)

module Data.DOM.StyleSheetList
item :: (Monad mn, CStyleSheetList this, CStyleSheet zz) => Expression Double -> Expression this -> mn (Expression zz)
get'length :: (Monad mn, CStyleSheetList this) => Expression this -> mn (Expression Double)
getm'length :: (Monad mn, CStyleSheetList this) => Expression this -> mn (Expression Double)

module Data.DOM.Traversal
data TNodeIterator
TNodeIterator :: TNodeIterator
data TNodeFilter
TNodeFilter :: TNodeFilter
data TTreeWalker
TTreeWalker :: TTreeWalker
data TDocumentTraversal
TDocumentTraversal :: TDocumentTraversal
class CNodeIterator a
class CNodeFilter a
class CTreeWalker a
class CDocumentTraversal a
instance CDocumentTraversal TDocumentTraversal
instance CTreeWalker TTreeWalker
instance CNodeFilter TNodeFilter
instance CNodeIterator TNodeIterator

module Data.DOM.DocumentTraversal
createNodeIterator :: (Monad mn, CDocumentTraversal this, CNode root, CNodeFilter filter, CNodeIterator zz) => Expression root -> Expression Double -> Expression filter -> Expression Bool -> Expression this -> mn (Expression zz)
createTreeWalker :: (Monad mn, CDocumentTraversal this, CNode root, CNodeFilter filter, CTreeWalker zz) => Expression root -> Expression Double -> Expression filter -> Expression Bool -> Expression this -> mn (Expression zz)

module Data.DOM.NodeFilter
acceptNode :: (Monad mn, CNodeFilter this, CNode n) => Expression n -> Expression this -> mn (Expression Double)
cFILTER_ACCEPT :: Integer
cFILTER_REJECT :: Integer
cFILTER_SKIP :: Integer
cSHOW_ALL :: Integer
cSHOW_ELEMENT :: Integer
cSHOW_ATTRIBUTE :: Integer
cSHOW_TEXT :: Integer
cSHOW_CDATA_SECTION :: Integer
cSHOW_ENTITY_REFERENCE :: Integer
cSHOW_ENTITY :: Integer
cSHOW_PROCESSING_INSTRUCTION :: Integer
cSHOW_COMMENT :: Integer
cSHOW_DOCUMENT :: Integer
cSHOW_DOCUMENT_TYPE :: Integer
cSHOW_DOCUMENT_FRAGMENT :: Integer
cSHOW_NOTATION :: Integer

module Data.DOM.NodeIterator
nextNode :: (Monad mn, CNodeIterator this, CNode zz) => Expression this -> mn (Expression zz)
previousNode :: (Monad mn, CNodeIterator this, CNode zz) => Expression this -> mn (Expression zz)
detach :: (Monad mn, CNodeIterator this) => Expression this -> mn (Expression ())
get'root :: (Monad mn, CNodeIterator this, CNode zz) => Expression this -> mn (Expression zz)
getm'root :: (Monad mn, CNodeIterator this) => Expression this -> mn (Expression TNode)
get'whatToShow :: (Monad mn, CNodeIterator this) => Expression this -> mn (Expression Double)
getm'whatToShow :: (Monad mn, CNodeIterator this) => Expression this -> mn (Expression Double)
get'filter :: (Monad mn, CNodeIterator this, CNodeFilter zz) => Expression this -> mn (Expression zz)
getm'filter :: (Monad mn, CNodeIterator this) => Expression this -> mn (Expression TNodeFilter)
get'expandEntityReferences :: (Monad mn, CNodeIterator this) => Expression this -> mn (Expression Bool)
getm'expandEntityReferences :: (Monad mn, CNodeIterator this) => Expression this -> mn (Expression Bool)

module Data.DOM.TreeWalker
parentNode :: (Monad mn, CTreeWalker this, CNode zz) => Expression this -> mn (Expression zz)
firstChild :: (Monad mn, CTreeWalker this, CNode zz) => Expression this -> mn (Expression zz)
lastChild :: (Monad mn, CTreeWalker this, CNode zz) => Expression this -> mn (Expression zz)
previousSibling :: (Monad mn, CTreeWalker this, CNode zz) => Expression this -> mn (Expression zz)
nextSibling :: (Monad mn, CTreeWalker this, CNode zz) => Expression this -> mn (Expression zz)
previousNode :: (Monad mn, CTreeWalker this, CNode zz) => Expression this -> mn (Expression zz)
nextNode :: (Monad mn, CTreeWalker this, CNode zz) => Expression this -> mn (Expression zz)
get'root :: (Monad mn, CTreeWalker this, CNode zz) => Expression this -> mn (Expression zz)
getm'root :: (Monad mn, CTreeWalker this) => Expression this -> mn (Expression TNode)
get'whatToShow :: (Monad mn, CTreeWalker this) => Expression this -> mn (Expression Double)
getm'whatToShow :: (Monad mn, CTreeWalker this) => Expression this -> mn (Expression Double)
get'filter :: (Monad mn, CTreeWalker this, CNodeFilter zz) => Expression this -> mn (Expression zz)
getm'filter :: (Monad mn, CTreeWalker this) => Expression this -> mn (Expression TNodeFilter)
get'expandEntityReferences :: (Monad mn, CTreeWalker this) => Expression this -> mn (Expression Bool)
getm'expandEntityReferences :: (Monad mn, CTreeWalker this) => Expression this -> mn (Expression Bool)
set'currentNode :: (Monad mn, CNode val, CTreeWalker zz) => Expression val -> Expression zz -> mn (Expression zz)
get'currentNode :: (Monad mn, CTreeWalker this, CNode zz) => Expression this -> mn (Expression zz)
getm'currentNode :: (Monad mn, CTreeWalker this) => Expression this -> mn (Expression TNode)

module Data.DOM.AbstractView
get'document :: (Monad mn, CAbstractView this, CDocumentView zz) => Expression this -> mn (Expression zz)
getm'document :: (Monad mn, CAbstractView this) => Expression this -> mn (Expression TDocumentView)

module Data.DOM.DocumentView
get'defaultView :: (Monad mn, CDocumentView this, CAbstractView zz) => Expression this -> mn (Expression zz)
getm'defaultView :: (Monad mn, CDocumentView this) => Expression this -> mn (Expression TAbstractView)

module Data.DOM.WindowObj
data TWindow
TWindow :: TWindow
data TDocumentWindow
TDocumentWindow :: TDocumentWindow
data TLocation
TLocation :: TLocation
data TEmbeddingElement
TEmbeddingElement :: TEmbeddingElement
data TTimerListener
TTimerListener :: TTimerListener
class CAbstractView a => CWindow a
class CDocumentView a => CDocumentWindow a
class CLocation a
class CEmbeddingElement a
class CTimerListener a
instance CTimerListener TTimerListener
instance CEmbeddingElement TEmbeddingElement
instance CLocation TLocation
instance CDocumentView TDocumentWindow
instance CDocumentWindow TDocumentWindow
instance CAbstractView TWindow
instance CWindow TWindow

module Data.DOM.Window
setTimeout :: (Monad mn, CWindow this, CTimerListener listener) => Expression listener -> Expression Double -> Expression this -> mn (Expression Double)
clearTimeout :: (Monad mn, CWindow this) => Expression Double -> Expression this -> mn (Expression ())
setInterval :: (Monad mn, CWindow this, CTimerListener listener) => Expression listener -> Expression Double -> Expression this -> mn (Expression Double)
clearInterval :: (Monad mn, CWindow this) => Expression Double -> Expression this -> mn (Expression ())
get'window :: (Monad mn, CWindow this, CWindow zz) => Expression this -> mn (Expression zz)
getm'window :: (Monad mn, CWindow this) => Expression this -> mn (Expression TWindow)
get'self :: (Monad mn, CWindow this, CWindow zz) => Expression this -> mn (Expression zz)
getm'self :: (Monad mn, CWindow this) => Expression this -> mn (Expression TWindow)
get'location :: (Monad mn, CWindow this, CLocation zz) => Expression this -> mn (Expression zz)
getm'location :: (Monad mn, CWindow this) => Expression this -> mn (Expression TLocation)
set'name :: (Monad mn, CWindow zz) => Expression String -> Expression zz -> mn (Expression zz)
get'name :: (Monad mn, CWindow this) => Expression this -> mn (Expression String)
getm'name :: (Monad mn, CWindow this) => Expression this -> mn (Expression String)
get'parent :: (Monad mn, CWindow this, CWindow zz) => Expression this -> mn (Expression zz)
getm'parent :: (Monad mn, CWindow this) => Expression this -> mn (Expression TWindow)
get'top :: (Monad mn, CWindow this, CWindow zz) => Expression this -> mn (Expression zz)
getm'top :: (Monad mn, CWindow this) => Expression this -> mn (Expression TWindow)
get'frameElement :: (Monad mn, CWindow this, CElement zz) => Expression this -> mn (Expression zz)
getm'frameElement :: (Monad mn, CWindow this) => Expression this -> mn (Expression TElement)

module Data.DOM.DocumentWindow
get'location :: (Monad mn, CDocumentWindow this, CLocation zz) => Expression this -> mn (Expression zz)
getm'location :: (Monad mn, CDocumentWindow this) => Expression this -> mn (Expression TLocation)

module Data.DOM.EmbeddingElement
get'contentDocument :: (Monad mn, CEmbeddingElement this, CDocument zz) => Expression this -> mn (Expression zz)
getm'contentDocument :: (Monad mn, CEmbeddingElement this) => Expression this -> mn (Expression TDocument)
get'contentWindow :: (Monad mn, CEmbeddingElement this, CWindow zz) => Expression this -> mn (Expression zz)
getm'contentWindow :: (Monad mn, CEmbeddingElement this) => Expression this -> mn (Expression TWindow)

module Data.DOM.Location
assign :: (Monad mn, CLocation this) => Expression String -> Expression this -> mn (Expression ())
replace :: (Monad mn, CLocation this) => Expression String -> Expression this -> mn (Expression ())
reload :: (Monad mn, CLocation this) => Expression this -> mn (Expression ())
toString :: (Monad mn, CLocation this) => Expression this -> mn (Expression String)
set'href :: (Monad mn, CLocation zz) => Expression String -> Expression zz -> mn (Expression zz)
get'href :: (Monad mn, CLocation this) => Expression this -> mn (Expression String)
getm'href :: (Monad mn, CLocation this) => Expression this -> mn (Expression String)
set'hash :: (Monad mn, CLocation zz) => Expression String -> Expression zz -> mn (Expression zz)
get'hash :: (Monad mn, CLocation this) => Expression this -> mn (Expression String)
getm'hash :: (Monad mn, CLocation this) => Expression this -> mn (Expression String)
set'host :: (Monad mn, CLocation zz) => Expression String -> Expression zz -> mn (Expression zz)
get'host :: (Monad mn, CLocation this) => Expression this -> mn (Expression String)
getm'host :: (Monad mn, CLocation this) => Expression this -> mn (Expression String)
set'hostname :: (Monad mn, CLocation zz) => Expression String -> Expression zz -> mn (Expression zz)
get'hostname :: (Monad mn, CLocation this) => Expression this -> mn (Expression String)
getm'hostname :: (Monad mn, CLocation this) => Expression this -> mn (Expression String)
set'pathname :: (Monad mn, CLocation zz) => Expression String -> Expression zz -> mn (Expression zz)
get'pathname :: (Monad mn, CLocation this) => Expression this -> mn (Expression String)
getm'pathname :: (Monad mn, CLocation this) => Expression this -> mn (Expression String)
set'port :: (Monad mn, CLocation zz) => Expression String -> Expression zz -> mn (Expression zz)
get'port :: (Monad mn, CLocation this) => Expression this -> mn (Expression String)
getm'port :: (Monad mn, CLocation this) => Expression this -> mn (Expression String)
set'protocol :: (Monad mn, CLocation zz) => Expression String -> Expression zz -> mn (Expression zz)
get'protocol :: (Monad mn, CLocation this) => Expression this -> mn (Expression String)
getm'protocol :: (Monad mn, CLocation this) => Expression this -> mn (Expression String)
set'search :: (Monad mn, CLocation zz) => Expression String -> Expression zz -> mn (Expression zz)
get'search :: (Monad mn, CLocation this) => Expression this -> mn (Expression String)
getm'search :: (Monad mn, CLocation this) => Expression this -> mn (Expression String)

module Data.DOM.XMLHTTP
data TXMLHttpRequest
TXMLHttpRequest :: TXMLHttpRequest
class CElement a => CXMLHttpRequest a
instance CNode TXMLHttpRequest
instance CElement TXMLHttpRequest
instance CXMLHttpRequest TXMLHttpRequest

module Data.DOM.XMLHttpRequest
openSync :: (Monad mn, CXMLHttpRequest this) => Expression String -> Expression String -> Expression this -> mn (Expression ())
openAsync :: (Monad mn, CXMLHttpRequest this) => Expression String -> Expression String -> Expression Bool -> Expression this -> mn (Expression ())
openUser :: (Monad mn, CXMLHttpRequest this) => Expression String -> Expression String -> Expression Bool -> Expression String -> Expression this -> mn (Expression ())
openAuth :: (Monad mn, CXMLHttpRequest this) => Expression String -> Expression String -> Expression Bool -> Expression String -> Expression String -> Expression this -> mn (Expression ())
setRequestHeader :: (Monad mn, CXMLHttpRequest this) => Expression String -> Expression String -> Expression this -> mn (Expression ())
sendString :: (Monad mn, CXMLHttpRequest this) => Expression String -> Expression this -> mn (Expression ())
sendDocument :: (Monad mn, CXMLHttpRequest this, CDocument doc) => Expression doc -> Expression this -> mn (Expression ())
abort :: (Monad mn, CXMLHttpRequest this) => Expression this -> mn (Expression ())
getAllResponseHeaders :: (Monad mn, CXMLHttpRequest this) => Expression this -> mn (Expression String)
getResponseHeader :: (Monad mn, CXMLHttpRequest this) => Expression String -> Expression this -> mn (Expression String)
get'readyState :: (Monad mn, CXMLHttpRequest this) => Expression this -> mn (Expression Double)
getm'readyState :: (Monad mn, CXMLHttpRequest this) => Expression this -> mn (Expression Double)
get'responseText :: (Monad mn, CXMLHttpRequest this) => Expression this -> mn (Expression String)
getm'responseText :: (Monad mn, CXMLHttpRequest this) => Expression this -> mn (Expression String)
get'responseXML :: (Monad mn, CXMLHttpRequest this, CDocument zz) => Expression this -> mn (Expression zz)
getm'responseXML :: (Monad mn, CXMLHttpRequest this) => Expression this -> mn (Expression TDocument)
get'status :: (Monad mn, CXMLHttpRequest this) => Expression this -> mn (Expression Double)
getm'status :: (Monad mn, CXMLHttpRequest this) => Expression this -> mn (Expression Double)
get'statusText :: (Monad mn, CXMLHttpRequest this) => Expression this -> mn (Expression String)
getm'statusText :: (Monad mn, CXMLHttpRequest this) => Expression this -> mn (Expression String)

module Data.DOM.Css
data TCSSRuleList
TCSSRuleList :: TCSSRuleList
data TCSSRule
TCSSRule :: TCSSRule
data TCSSStyleRule
TCSSStyleRule :: TCSSStyleRule
data TCSSMediaRule
TCSSMediaRule :: TCSSMediaRule
data TCSSFontFaceRule
TCSSFontFaceRule :: TCSSFontFaceRule
data TCSSPageRule
TCSSPageRule :: TCSSPageRule
data TCSSImportRule
TCSSImportRule :: TCSSImportRule
data TCSSCharsetRule
TCSSCharsetRule :: TCSSCharsetRule
data TCSSUnknownRule
TCSSUnknownRule :: TCSSUnknownRule
data TCSSStyleDeclaration
TCSSStyleDeclaration :: TCSSStyleDeclaration
data TCSSValue
TCSSValue :: TCSSValue
data TCSSPrimitiveValue
TCSSPrimitiveValue :: TCSSPrimitiveValue
data TCSSValueList
TCSSValueList :: TCSSValueList
data TRGBColor
TRGBColor :: TRGBColor
data TRect
TRect :: TRect
data TCounter
TCounter :: TCounter
data TElementCSSInlineStyle
TElementCSSInlineStyle :: TElementCSSInlineStyle
data TCSS2Properties
TCSS2Properties :: TCSS2Properties
data TCSSStyleSheet
TCSSStyleSheet :: TCSSStyleSheet
data TViewCSS
TViewCSS :: TViewCSS
data TDocumentCSS
TDocumentCSS :: TDocumentCSS
data TDOMImplementationCSS
TDOMImplementationCSS :: TDOMImplementationCSS
class CCSSRuleList a
class CCSSRule a
class CCSSRule a => CCSSStyleRule a
class CCSSRule a => CCSSMediaRule a
class CCSSRule a => CCSSFontFaceRule a
class CCSSRule a => CCSSPageRule a
class CCSSRule a => CCSSImportRule a
class CCSSRule a => CCSSCharsetRule a
class CCSSRule a => CCSSUnknownRule a
class CCSSStyleDeclaration a
class CCSSValue a
class CCSSValue a => CCSSPrimitiveValue a
class CCSSValue a => CCSSValueList a
class CRGBColor a
class CRect a
class CCounter a
class CElementCSSInlineStyle a
class CCSS2Properties a
class CStyleSheet a => CCSSStyleSheet a
class CAbstractView a => CViewCSS a
class CDocumentStyle a => CDocumentCSS a
class CDOMImplementation a => CDOMImplementationCSS a
instance CDOMImplementation TDOMImplementationCSS
instance CDOMImplementationCSS TDOMImplementationCSS
instance CDocumentStyle TDocumentCSS
instance CDocumentCSS TDocumentCSS
instance CAbstractView TViewCSS
instance CViewCSS TViewCSS
instance CStyleSheet TCSSStyleSheet
instance CCSSStyleSheet TCSSStyleSheet
instance CCSS2Properties TCSS2Properties
instance CElementCSSInlineStyle TElementCSSInlineStyle
instance CCounter TCounter
instance CRect TRect
instance CRGBColor TRGBColor
instance CCSSValue TCSSValueList
instance CCSSValueList TCSSValueList
instance CCSSValue TCSSPrimitiveValue
instance CCSSPrimitiveValue TCSSPrimitiveValue
instance CCSSValue TCSSValue
instance CCSSStyleDeclaration TCSSStyleDeclaration
instance CCSSRule TCSSUnknownRule
instance CCSSUnknownRule TCSSUnknownRule
instance CCSSRule TCSSCharsetRule
instance CCSSCharsetRule TCSSCharsetRule
instance CCSSRule TCSSImportRule
instance CCSSImportRule TCSSImportRule
instance CCSSRule TCSSPageRule
instance CCSSPageRule TCSSPageRule
instance CCSSRule TCSSFontFaceRule
instance CCSSFontFaceRule TCSSFontFaceRule
instance CCSSRule TCSSMediaRule
instance CCSSMediaRule TCSSMediaRule
instance CCSSRule TCSSStyleRule
instance CCSSStyleRule TCSSStyleRule
instance CCSSRule TCSSRule
instance CCSSRuleList TCSSRuleList

module Data.DOM.CSS2Properties
set'azimuth :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'azimuth :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'azimuth :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'background :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'background :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'background :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'backgroundAttachment :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'backgroundAttachment :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'backgroundAttachment :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'backgroundColor :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'backgroundColor :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'backgroundColor :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'backgroundImage :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'backgroundImage :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'backgroundImage :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'backgroundPosition :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'backgroundPosition :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'backgroundPosition :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'backgroundRepeat :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'backgroundRepeat :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'backgroundRepeat :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'border :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'border :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'border :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderCollapse :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderCollapse :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderCollapse :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderColor :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderColor :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderColor :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderSpacing :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderSpacing :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderSpacing :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderStyle :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderStyle :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderStyle :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderTop :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderTop :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderTop :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderRight :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderRight :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderRight :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderBottom :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderBottom :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderBottom :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderLeft :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderLeft :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderLeft :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderTopColor :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderTopColor :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderTopColor :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderRightColor :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderRightColor :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderRightColor :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderBottomColor :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderBottomColor :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderBottomColor :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderLeftColor :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderLeftColor :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderLeftColor :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderTopStyle :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderTopStyle :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderTopStyle :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderRightStyle :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderRightStyle :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderRightStyle :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderBottomStyle :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderBottomStyle :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderBottomStyle :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderLeftStyle :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderLeftStyle :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderLeftStyle :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderTopWidth :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderTopWidth :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderTopWidth :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderRightWidth :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderRightWidth :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderRightWidth :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderBottomWidth :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderBottomWidth :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderBottomWidth :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderLeftWidth :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderLeftWidth :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderLeftWidth :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'borderWidth :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'borderWidth :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'borderWidth :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'bottom :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'bottom :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'bottom :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'captionSide :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'captionSide :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'captionSide :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'clear :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'clear :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'clear :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'clip :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'clip :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'clip :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'color :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'color :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'color :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'content :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'content :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'content :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'counterIncrement :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'counterIncrement :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'counterIncrement :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'counterReset :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'counterReset :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'counterReset :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'cue :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'cue :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'cue :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'cueAfter :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'cueAfter :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'cueAfter :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'cueBefore :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'cueBefore :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'cueBefore :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'cursor :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'cursor :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'cursor :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'direction :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'direction :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'direction :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'display :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'display :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'display :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'elevation :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'elevation :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'elevation :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'emptyCells :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'emptyCells :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'emptyCells :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'cssFloat :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'cssFloat :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'cssFloat :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'font :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'font :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'font :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'fontFamily :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'fontFamily :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'fontFamily :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'fontSize :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'fontSize :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'fontSize :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'fontSizeAdjust :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'fontSizeAdjust :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'fontSizeAdjust :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'fontStretch :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'fontStretch :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'fontStretch :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'fontStyle :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'fontStyle :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'fontStyle :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'fontVariant :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'fontVariant :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'fontVariant :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'fontWeight :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'fontWeight :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'fontWeight :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'height :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'height :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'height :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'left :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'left :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'left :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'letterSpacing :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'letterSpacing :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'letterSpacing :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'lineHeight :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'lineHeight :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'lineHeight :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'listStyle :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'listStyle :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'listStyle :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'listStyleImage :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'listStyleImage :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'listStyleImage :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'listStylePosition :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'listStylePosition :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'listStylePosition :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'listStyleType :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'listStyleType :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'listStyleType :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'margin :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'margin :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'margin :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'marginTop :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'marginTop :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'marginTop :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'marginRight :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'marginRight :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'marginRight :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'marginBottom :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'marginBottom :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'marginBottom :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'marginLeft :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'marginLeft :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'marginLeft :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'markerOffset :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'markerOffset :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'markerOffset :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'marks :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'marks :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'marks :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'maxHeight :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'maxHeight :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'maxHeight :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'maxWidth :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'maxWidth :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'maxWidth :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'minHeight :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'minHeight :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'minHeight :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'minWidth :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'minWidth :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'minWidth :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'orphans :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'orphans :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'orphans :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'outline :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'outline :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'outline :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'outlineColor :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'outlineColor :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'outlineColor :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'outlineStyle :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'outlineStyle :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'outlineStyle :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'outlineWidth :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'outlineWidth :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'outlineWidth :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'overflow :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'overflow :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'overflow :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'padding :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'padding :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'padding :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'paddingTop :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'paddingTop :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'paddingTop :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'paddingRight :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'paddingRight :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'paddingRight :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'paddingBottom :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'paddingBottom :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'paddingBottom :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'paddingLeft :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'paddingLeft :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'paddingLeft :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'page :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'page :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'page :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'pageBreakAfter :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'pageBreakAfter :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'pageBreakAfter :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'pageBreakBefore :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'pageBreakBefore :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'pageBreakBefore :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'pageBreakInside :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'pageBreakInside :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'pageBreakInside :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'pause :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'pause :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'pause :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'pauseAfter :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'pauseAfter :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'pauseAfter :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'pauseBefore :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'pauseBefore :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'pauseBefore :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'pitch :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'pitch :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'pitch :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'pitchRange :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'pitchRange :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'pitchRange :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'playDuring :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'playDuring :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'playDuring :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'position :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'position :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'position :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'quotes :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'quotes :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'quotes :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'richness :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'richness :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'richness :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'right :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'right :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'right :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'size :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'size :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'size :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'speak :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'speak :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'speak :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'speakHeader :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'speakHeader :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'speakHeader :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'speakNumeral :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'speakNumeral :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'speakNumeral :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'speakPunctuation :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'speakPunctuation :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'speakPunctuation :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'speechRate :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'speechRate :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'speechRate :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'stress :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'stress :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'stress :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'tableLayout :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'tableLayout :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'tableLayout :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'textAlign :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'textAlign :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'textAlign :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'textDecoration :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'textDecoration :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'textDecoration :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'textIndent :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'textIndent :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'textIndent :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'textShadow :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'textShadow :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'textShadow :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'textTransform :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'textTransform :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'textTransform :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'top :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'top :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'top :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'unicodeBidi :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'unicodeBidi :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'unicodeBidi :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'verticalAlign :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'verticalAlign :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'verticalAlign :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'visibility :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'visibility :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'visibility :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'voiceFamily :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'voiceFamily :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'voiceFamily :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'volume :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'volume :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'volume :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'whiteSpace :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'whiteSpace :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'whiteSpace :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'widows :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'widows :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'widows :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'width :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'width :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'width :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'wordSpacing :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'wordSpacing :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'wordSpacing :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
set'zIndex :: (Monad mn, CCSS2Properties zz) => Expression String -> Expression zz -> mn (Expression zz)
get'zIndex :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)
getm'zIndex :: (Monad mn, CCSS2Properties this) => Expression this -> mn (Expression String)

module Data.DOM.CSSCharsetRule
set'encoding :: (Monad mn, CCSSCharsetRule zz) => Expression String -> Expression zz -> mn (Expression zz)
get'encoding :: (Monad mn, CCSSCharsetRule this) => Expression this -> mn (Expression String)
getm'encoding :: (Monad mn, CCSSCharsetRule this) => Expression this -> mn (Expression String)

module Data.DOM.CSSFontFaceRule
get'style :: (Monad mn, CCSSFontFaceRule this, CCSSStyleDeclaration zz) => Expression this -> mn (Expression zz)
getm'style :: (Monad mn, CCSSFontFaceRule this) => Expression this -> mn (Expression TCSSStyleDeclaration)

module Data.DOM.CSSImportRule
get'href :: (Monad mn, CCSSImportRule this) => Expression this -> mn (Expression String)
getm'href :: (Monad mn, CCSSImportRule this) => Expression this -> mn (Expression String)
get'media :: (Monad mn, CCSSImportRule this, CMediaList zz) => Expression this -> mn (Expression zz)
getm'media :: (Monad mn, CCSSImportRule this) => Expression this -> mn (Expression TMediaList)
get'styleSheet :: (Monad mn, CCSSImportRule this, CCSSStyleSheet zz) => Expression this -> mn (Expression zz)
getm'styleSheet :: (Monad mn, CCSSImportRule this) => Expression this -> mn (Expression TCSSStyleSheet)

module Data.DOM.CSSMediaRule
insertRule :: (Monad mn, CCSSMediaRule this) => Expression String -> Expression Double -> Expression this -> mn (Expression Double)
deleteRule :: (Monad mn, CCSSMediaRule this) => Expression Double -> Expression this -> mn (Expression ())
get'media :: (Monad mn, CCSSMediaRule this, CMediaList zz) => Expression this -> mn (Expression zz)
getm'media :: (Monad mn, CCSSMediaRule this) => Expression this -> mn (Expression TMediaList)
get'cssRules :: (Monad mn, CCSSMediaRule this, CCSSRuleList zz) => Expression this -> mn (Expression zz)
getm'cssRules :: (Monad mn, CCSSMediaRule this) => Expression this -> mn (Expression TCSSRuleList)

module Data.DOM.CSSPageRule
set'selectorText :: (Monad mn, CCSSPageRule zz) => Expression String -> Expression zz -> mn (Expression zz)
get'selectorText :: (Monad mn, CCSSPageRule this) => Expression this -> mn (Expression String)
getm'selectorText :: (Monad mn, CCSSPageRule this) => Expression this -> mn (Expression String)
get'style :: (Monad mn, CCSSPageRule this, CCSSStyleDeclaration zz) => Expression this -> mn (Expression zz)
getm'style :: (Monad mn, CCSSPageRule this) => Expression this -> mn (Expression TCSSStyleDeclaration)

module Data.DOM.CSSPrimitiveValue
setFloatValue :: (Monad mn, CCSSPrimitiveValue this) => Expression Double -> Expression Double -> Expression this -> mn (Expression ())
getFloatValue :: (Monad mn, CCSSPrimitiveValue this) => Expression Double -> Expression this -> mn (Expression Double)
setStringValue :: (Monad mn, CCSSPrimitiveValue this) => Expression Double -> Expression String -> Expression this -> mn (Expression ())
getStringValue :: (Monad mn, CCSSPrimitiveValue this) => Expression this -> mn (Expression String)
getCounterValue :: (Monad mn, CCSSPrimitiveValue this, CCounter zz) => Expression this -> mn (Expression zz)
getRectValue :: (Monad mn, CCSSPrimitiveValue this, CRect zz) => Expression this -> mn (Expression zz)
getRGBColorValue :: (Monad mn, CCSSPrimitiveValue this, CRGBColor zz) => Expression this -> mn (Expression zz)
cCSS_UNKNOWN :: Integer
cCSS_NUMBER :: Integer
cCSS_PERCENTAGE :: Integer
cCSS_EMS :: Integer
cCSS_EXS :: Integer
cCSS_PX :: Integer
cCSS_CM :: Integer
cCSS_MM :: Integer
cCSS_IN :: Integer
cCSS_PT :: Integer
cCSS_PC :: Integer
cCSS_DEG :: Integer
cCSS_RAD :: Integer
cCSS_GRAD :: Integer
cCSS_MS :: Integer
cCSS_S :: Integer
cCSS_HZ :: Integer
cCSS_KHZ :: Integer
cCSS_DIMENSION :: Integer
cCSS_STRING :: Integer
cCSS_URI :: Integer
cCSS_IDENT :: Integer
cCSS_ATTR :: Integer
cCSS_COUNTER :: Integer
cCSS_RECT :: Integer
cCSS_RGBCOLOR :: Integer
get'primitiveType :: (Monad mn, CCSSPrimitiveValue this) => Expression this -> mn (Expression Double)
getm'primitiveType :: (Monad mn, CCSSPrimitiveValue this) => Expression this -> mn (Expression Double)

module Data.DOM.CSSRule
cUNKNOWN_RULE :: Integer
cSTYLE_RULE :: Integer
cCHARSET_RULE :: Integer
cIMPORT_RULE :: Integer
cMEDIA_RULE :: Integer
cFONT_FACE_RULE :: Integer
cPAGE_RULE :: Integer
get'type :: (Monad mn, CCSSRule this) => Expression this -> mn (Expression Double)
getm'type :: (Monad mn, CCSSRule this) => Expression this -> mn (Expression Double)
set'cssText :: (Monad mn, CCSSRule zz) => Expression String -> Expression zz -> mn (Expression zz)
get'cssText :: (Monad mn, CCSSRule this) => Expression this -> mn (Expression String)
getm'cssText :: (Monad mn, CCSSRule this) => Expression this -> mn (Expression String)
get'parentStyleSheet :: (Monad mn, CCSSRule this, CCSSStyleSheet zz) => Expression this -> mn (Expression zz)
getm'parentStyleSheet :: (Monad mn, CCSSRule this) => Expression this -> mn (Expression TCSSStyleSheet)
get'parentRule :: (Monad mn, CCSSRule this, CCSSRule zz) => Expression this -> mn (Expression zz)
getm'parentRule :: (Monad mn, CCSSRule this) => Expression this -> mn (Expression TCSSRule)

module Data.DOM.CSSRuleList
item :: (Monad mn, CCSSRuleList this, CCSSRule zz) => Expression Double -> Expression this -> mn (Expression zz)
get'length :: (Monad mn, CCSSRuleList this) => Expression this -> mn (Expression Double)
getm'length :: (Monad mn, CCSSRuleList this) => Expression this -> mn (Expression Double)

module Data.DOM.CSSStyleDeclaration
getPropertyValue :: (Monad mn, CCSSStyleDeclaration this) => Expression String -> Expression this -> mn (Expression String)
getPropertyCSSValue :: (Monad mn, CCSSStyleDeclaration this, CCSSValue zz) => Expression String -> Expression this -> mn (Expression zz)
removeProperty :: (Monad mn, CCSSStyleDeclaration this) => Expression String -> Expression this -> mn (Expression String)
getPropertyPriority :: (Monad mn, CCSSStyleDeclaration this) => Expression String -> Expression this -> mn (Expression String)
setProperty :: (Monad mn, CCSSStyleDeclaration this) => Expression String -> Expression String -> Expression String -> Expression this -> mn (Expression ())
item :: (Monad mn, CCSSStyleDeclaration this) => Expression Double -> Expression this -> mn (Expression String)
set'cssText :: (Monad mn, CCSSStyleDeclaration zz) => Expression String -> Expression zz -> mn (Expression zz)
get'cssText :: (Monad mn, CCSSStyleDeclaration this) => Expression this -> mn (Expression String)
getm'cssText :: (Monad mn, CCSSStyleDeclaration this) => Expression this -> mn (Expression String)
get'length :: (Monad mn, CCSSStyleDeclaration this) => Expression this -> mn (Expression Double)
getm'length :: (Monad mn, CCSSStyleDeclaration this) => Expression this -> mn (Expression Double)
get'parentRule :: (Monad mn, CCSSStyleDeclaration this, CCSSRule zz) => Expression this -> mn (Expression zz)
getm'parentRule :: (Monad mn, CCSSStyleDeclaration this) => Expression this -> mn (Expression TCSSRule)

module Data.DOM.CSSStyleRule
set'selectorText :: (Monad mn, CCSSStyleRule zz) => Expression String -> Expression zz -> mn (Expression zz)
get'selectorText :: (Monad mn, CCSSStyleRule this) => Expression this -> mn (Expression String)
getm'selectorText :: (Monad mn, CCSSStyleRule this) => Expression this -> mn (Expression String)
get'style :: (Monad mn, CCSSStyleRule this, CCSSStyleDeclaration zz) => Expression this -> mn (Expression zz)
getm'style :: (Monad mn, CCSSStyleRule this) => Expression this -> mn (Expression TCSSStyleDeclaration)

module Data.DOM.CSSStyleSheet
insertRule :: (Monad mn, CCSSStyleSheet this) => Expression String -> Expression Double -> Expression this -> mn (Expression Double)
deleteRule :: (Monad mn, CCSSStyleSheet this) => Expression Double -> Expression this -> mn (Expression ())
get'ownerRule :: (Monad mn, CCSSStyleSheet this, CCSSRule zz) => Expression this -> mn (Expression zz)
getm'ownerRule :: (Monad mn, CCSSStyleSheet this) => Expression this -> mn (Expression TCSSRule)
get'cssRules :: (Monad mn, CCSSStyleSheet this, CCSSRuleList zz) => Expression this -> mn (Expression zz)
getm'cssRules :: (Monad mn, CCSSStyleSheet this) => Expression this -> mn (Expression TCSSRuleList)

module Data.DOM.CSSValue
cCSS_INHERIT :: Integer
cCSS_PRIMITIVE_VALUE :: Integer
cCSS_VALUE_LIST :: Integer
cCSS_CUSTOM :: Integer
set'cssText :: (Monad mn, CCSSValue zz) => Expression String -> Expression zz -> mn (Expression zz)
get'cssText :: (Monad mn, CCSSValue this) => Expression this -> mn (Expression String)
getm'cssText :: (Monad mn, CCSSValue this) => Expression this -> mn (Expression String)
get'cssValueType :: (Monad mn, CCSSValue this) => Expression this -> mn (Expression Double)
getm'cssValueType :: (Monad mn, CCSSValue this) => Expression this -> mn (Expression Double)

module Data.DOM.CSSValueList
item :: (Monad mn, CCSSValueList this, CCSSValue zz) => Expression Double -> Expression this -> mn (Expression zz)
get'length :: (Monad mn, CCSSValueList this) => Expression this -> mn (Expression Double)
getm'length :: (Monad mn, CCSSValueList this) => Expression this -> mn (Expression Double)

module Data.DOM.Counter
get'identifier :: (Monad mn, CCounter this) => Expression this -> mn (Expression String)
getm'identifier :: (Monad mn, CCounter this) => Expression this -> mn (Expression String)
get'listStyle :: (Monad mn, CCounter this) => Expression this -> mn (Expression String)
getm'listStyle :: (Monad mn, CCounter this) => Expression this -> mn (Expression String)
get'separator :: (Monad mn, CCounter this) => Expression this -> mn (Expression String)
getm'separator :: (Monad mn, CCounter this) => Expression this -> mn (Expression String)

module Data.DOM.DOMImplementationCSS
createCSSStyleSheet :: (Monad mn, CDOMImplementationCSS this, CCSSStyleSheet zz) => Expression String -> Expression String -> Expression this -> mn (Expression zz)

module Data.DOM.DocumentCSS
getOverrideStyle :: (Monad mn, CDocumentCSS this, CElement elt, CCSSStyleDeclaration zz) => Expression elt -> Expression String -> Expression this -> mn (Expression zz)

module Data.DOM.ElementCSSInlineStyle
get'style :: (Monad mn, CElementCSSInlineStyle this, CCSSStyleDeclaration zz) => Expression this -> mn (Expression zz)
getm'style :: (Monad mn, CElementCSSInlineStyle this) => Expression this -> mn (Expression TCSSStyleDeclaration)

module Data.DOM.RGBColor
get'red :: (Monad mn, CRGBColor this, CCSSPrimitiveValue zz) => Expression this -> mn (Expression zz)
getm'red :: (Monad mn, CRGBColor this) => Expression this -> mn (Expression TCSSPrimitiveValue)
get'green :: (Monad mn, CRGBColor this, CCSSPrimitiveValue zz) => Expression this -> mn (Expression zz)
getm'green :: (Monad mn, CRGBColor this) => Expression this -> mn (Expression TCSSPrimitiveValue)
get'blue :: (Monad mn, CRGBColor this, CCSSPrimitiveValue zz) => Expression this -> mn (Expression zz)
getm'blue :: (Monad mn, CRGBColor this) => Expression this -> mn (Expression TCSSPrimitiveValue)

module Data.DOM.Rect
get'top :: (Monad mn, CRect this, CCSSPrimitiveValue zz) => Expression this -> mn (Expression zz)
getm'top :: (Monad mn, CRect this) => Expression this -> mn (Expression TCSSPrimitiveValue)
get'right :: (Monad mn, CRect this, CCSSPrimitiveValue zz) => Expression this -> mn (Expression zz)
getm'right :: (Monad mn, CRect this) => Expression this -> mn (Expression TCSSPrimitiveValue)
get'bottom :: (Monad mn, CRect this, CCSSPrimitiveValue zz) => Expression this -> mn (Expression zz)
getm'bottom :: (Monad mn, CRect this) => Expression this -> mn (Expression TCSSPrimitiveValue)
get'left :: (Monad mn, CRect this, CCSSPrimitiveValue zz) => Expression this -> mn (Expression zz)
getm'left :: (Monad mn, CRect this) => Expression this -> mn (Expression TCSSPrimitiveValue)

module Data.DOM.ViewCSS
getComputedStyle :: (Monad mn, CViewCSS this, CElement elt, CCSSStyleDeclaration zz) => Expression elt -> Expression String -> Expression this -> mn (Expression zz)


-- | This module will most likely be imported by any Haskell program that
--   uses DOM. Other modules from Data.DOM namespace are to be imported as
--   needed, sometimes qualified because there are some name clashes in
--   attributes and methods across the DOM interfaces.
--   
--   Below is an example of Haskell code which generates Javascript to
--   display traditional <tt>Hello World</tt>. This example shows that even
--   a simplest <a>Control.Monad.Identity</a> will do. Of course, a more
--   sofisticated Monad might provide more benefits, such as assigning some
--   of expressions to Javascript variables to share and prevent repeated
--   evaluation, automatic declaration of functions, etc.
--   
--   <pre>
--   module Main where
--   import <a>BrownPLT.JavaScript</a>
--   import <a>BrownPLT.JavaScript.PrettyPrint</a>
--   import <a>Control.Monad</a>
--   import <a>Control.Monad.Identity</a>
--   import <a>Data.DOM</a>
--   import <a>Data.DOM.Dom</a>
--   import <a>Data.DOM.Node</a>
--   import <a>Data.DOM.HTMLDocument</a>
--   main = <a>putStrLn</a> <a>$</a> <a>show</a> <a>$</a> <tt>stmt</tt> <a>$</a> 
--     <a>FunctionStmt</a> undefined (<a>Id</a> undefined "main") [] 
--       (<a>ExprStmt</a> undefined <a>$</a> <tt>runIdentity</tt> q)
--   q = do
--     d &lt;- <a>htmlDocument</a>
--     t &lt;- <a>mkText</a> (<a>string</a> "Hello World") d
--     b &lt;- <a>getm'body</a> d
--     <a>addChild</a> t b
--   </pre>
--   
--   Below is Javascript generated by this example. All expressions just
--   nest where necessary, and method calls may be chained.
--   
--   <pre>
--   
--   function main()
--   {
--   window.document.body.appendChild(window.document.createTextNode("Hello World"));
--   }
--   </pre>
module Data.DOM

-- | Access the global Window object.
window :: Monad m => m (Expression TWindow)

-- | Access the current document. This indeed should be made through the
--   Window interface, but current (incomplete) specification does not
--   provide an easy way for that.
document :: Monad m => m (Expression TDocument)

-- | Same as above, using the HTMLDocument interface.
htmlDocument :: Monad m => m (Expression THTMLDocument)

-- | Access the <tt><a>BODY</a></tt> node of the current HTML document.
--   Same as 'get\'body', but with proper type of the returned value.
documentBody :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression THTMLBodyElement)

-- | Access the <tt><a>HEAD</a></tt> node of the current HTML document.
documentHead :: (Monad mn, CHTMLDocument this) => Expression this -> mn (Expression THTMLHeadElement)

-- | Obtain an inline style (<a>TCSS2Properties</a>) interface of an object
inlineStyle :: (Monad mn, CHTMLElement this) => Expression this -> mn (Expression TCSS2Properties)

-- | Obtain an inline style (<a>TCSSStyleDeclaration</a>) interface of an
--   object
inlineStyleDecl :: (Monad mn, CHTMLElement this) => Expression this -> mn (Expression TCSSStyleDeclaration)

-- | A maker function for a TEXT element.
mkText :: (Monad mn, CDocument this) => Expression String -> Expression this -> mn (Expression TText)

-- | Same as <a>appendChild</a>, but with type signature reflecting that
--   returned value is the node added.
addChild :: (Monad m, CNode c, CNode p) => Expression c -> Expression p -> m (Expression c)

-- | Create a Javascript string literal out of a string.
string :: String -> Expression String

-- | Create a Javascript numeric literal out of a numeric value.
number :: Integral n => n -> Expression Double

-- | Create a Javascript boolean literal out of a Boolean.
bool :: Bool -> Expression Bool

-- | Javascript True value
true :: Expression Bool

-- | Javascript False value
false :: Expression Bool

-- | A null-expression of type ()
unit :: Expression ()
