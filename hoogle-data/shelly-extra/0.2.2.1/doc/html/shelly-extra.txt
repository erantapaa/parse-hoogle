-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | shelly features that require extra dependencies
--   
--   Please see the shelly package. Shelly provides a single module for
--   convenient systems programming in Haskell, similar in spirit to POSIX
--   shells.
--   
--   shelly-extra is designed to be a grab bag for functionality that *
--   requires extra dependencies
--   
--   <ul>
--   <li>or is application specific and not generally applicable</li>
--   </ul>
--   
--   currently contains a background job implementation for performing
--   tasks in parallel
@package shelly-extra
@version 0.2.2.1


-- | A futures implementation that integrates with shelly
--   
--   <pre>
--   jobs 5 (\job -&gt; background job (sleep 2) &gt;&gt; background job (sleep 1))
--   </pre>
--   
--   <a>jobs</a> will wait for all concurrent jobs to finish. The argument
--   to jobs is the maximum number of concurrent tasks. Generally shell
--   scripts contain a lot of quick commands, but when you have the
--   occasional command that is noticeably long and independent of other
--   commands, you can easily run it concurrently.
module Shelly.Background

-- | Create a <a>BgJobManager</a> that has a <tt>limit</tt> on the max
--   number of background tasks. an invocation of jobs is independent of
--   any others, and not tied to the ShIO monad in any way. This blocks the
--   execution of the program until all <a>background</a> jobs are
--   finished.
jobs :: Int -> (BgJobManager -> ShIO a) -> ShIO a

-- | Run the <a>ShIO</a> task asynchronously in the background, returns the
--   `BgResult a`, a promise immediately. Run <a>getBgResult</a> to wait
--   for the result. The background task will inherit the current ShIO
--   context The <tt>BjJobManager</tt> ensures the max jobs limit must be
--   sufficient for the parent and all children.
background :: BgJobManager -> ShIO a -> ShIO (BgResult a)

-- | Returns the promised result from a backgrounded task. Blocks until the
--   task completes.
getBgResult :: BgResult a -> ShIO a

-- | Type returned by tasks run asynchronously in the background.
data BgResult a
