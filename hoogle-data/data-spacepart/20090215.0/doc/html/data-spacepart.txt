-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Deprecated. Now called "spacepart". Space partitioning data structures.
--   
--   Package <a>data-spacepart</a> is now called just <a>spacepart</a>.
--   This was due to issues with the version number used for the first
--   release of data-spacepart.
--   
--   http://hackage.haskell.org/cgi-bin/hackage-scripts/package/spacepart
--   
--   Space partition data structures. Currently only a QuadTree.
--   
--   darcs get --partial http://code.haskell.org/data-spacepart/
--   
--   TODO:
--   
--   lots.
--   
--   See README: http://code.haskell.org/data-spacepart/README
@package data-spacepart
@version 20090215.0

module Data.SpacePart.AABB

-- | A 2D axis aligned square. The boundary_corner defines the lower bound.
--   The boundary_size is the length of any edge of the square.
--   
--   The boundary is inclusive on the low extent and exclusive on the max
--   extent.
--   
--   Used to represent both the 0. 2D axis aligned minimum bounding square
--   of an element.
--   
--   <ol>
--   <li>The boundary of a quadtree element</li>
--   </ol>
data Boundary
Boundary :: Vertex2 Double -> Double -> Boundary
boundary_corner :: Boundary -> Vertex2 Double
boundary_size :: Boundary -> Double

-- | A instance of HasBoundary has an axis aligned boundign square defined
--   that entirely encloses - the space represented by the type.
class HasBoundary s
boundary_points :: HasBoundary s => s -> [Vertex2 Double]
boundary_edges :: HasBoundary s => s -> [Edge2 Double]
boundary_extents :: HasBoundary s => s -> (Vertex2 Double, Vertex2 Double)
boundary_square :: HasBoundary s => s -> Boundary

-- | Returns true if the first boundary entirely encloses the second
--   boundary. - This is expected to be reflexive.
encloses :: Boundary -> Boundary -> Bool
intersects :: Intersectable s0 s1 => s0 -> s1 -> Bool
instance [incoherent] Eq MinExtentPlanes
instance [incoherent] Show MinExtentPlanes
instance [incoherent] Eq Boundary
instance [incoherent] Show Boundary
instance [incoherent] HasBoundary Boundary
instance [incoherent] Intersectable Boundary (Vertex2 Double)
instance [incoherent] Intersectable LineSegment LineSegment
instance [incoherent] Intersectable Boundary LineSegment
instance [incoherent] Intersectable Boundary MinExtentPlanes
instance [incoherent] Intersectable Boundary Boundary

module Data.SpacePart.QuadTree

-- | A 2D binary hierarchical space subdivision of a region. All elements
--   contained in the quadtree are required to have a Boundary. This is an
--   axis aligned box with congruent sides.
--   
--   Each node of the quadtree is composed of:
--   
--   <ol>
--   <li>A list of elements who's shape can be queried for intersection
--   with the quad. These are all the elements with a boundary that are
--   fully enclosed by the boundary of this node but not fully enclosed by
--   a quadrant of this node.</li>
--   <li>The Boundary of this node.</li>
--   <li>The child nodes of this node. Each is a quadrant of this nodes
--   boundary.</li>
--   </ol>
data QuadTree e
QuadTree :: [e] -> Boundary -> (Maybe (QuadTree e), Maybe (QuadTree e), Maybe (QuadTree e), Maybe (QuadTree e)) -> QuadTree e
elements :: QuadTree e -> [e]
children :: QuadTree e -> (Maybe (QuadTree e), Maybe (QuadTree e), Maybe (QuadTree e), Maybe (QuadTree e))
data Quadrant
NPQuad :: Quadrant
PPQuad :: Quadrant
NNQuad :: Quadrant
PNQuad :: Quadrant
map_child :: (Maybe (QuadTree e) -> Maybe (QuadTree e)) -> Quadrant -> (Maybe (QuadTree e), Maybe (QuadTree e), Maybe (QuadTree e), Maybe (QuadTree e)) -> (Maybe (QuadTree e), Maybe (QuadTree e), Maybe (QuadTree e), Maybe (QuadTree e))

-- | Returns an empty QuadTree without a specific boundary. The default
--   bounds are centered around - (0,0) with a size of 2 - - TODO:
--   Alternatively an empty quadtree could have no defined bounds. The
--   bounds would then be - defined on the first insertion.
empty :: HasBoundary e => QuadTree e

-- | Returns an empty QuadTree with the given bounds. - The given bounds
--   cannot have a size of 0. This will error out on that case. - - TODO:
--   The user may find it easier for this to accept a 0 sized boundary
--   which is transparently - changed to a non-0 sized boundary on insert.
empty_with_bounds :: HasBoundary e => Boundary -> QuadTree e

-- | Inserts the given element into the quadtree. - This inserts the
--   element into a this node or a child quadrant node if the current node
--   encloses - the element. Otherwise this inserts the element into a new
--   node that is a parent of the given - node.
insert :: HasBoundary e => e -> QuadTree e -> QuadTree e

-- | Inserts the given element into either a child node of the current node
--   if one of the quadrants - encloses the element. - Otherwise the
--   element is added to the current node's list of elements.
insert_self_or_child :: HasBoundary e => e -> QuadTree e -> QuadTree e
quadrant_bounds :: QuadTree e -> [(Boundary, Quadrant)]

-- | Adds the element to quadtree via a parent node to the given quadtree.
--   The parent to add e to is then the first of the possible parents nodes
--   that enclose e.
insert_via_parent :: HasBoundary e => e -> QuadTree e -> QuadTree e

-- | parent_trees generates all possible parent trees of the given tree
--   (Without memoization) in the order suitable for a breadth first
--   search.
--   
--   Inserts the element in the child identified by the given boundary and
--   Quadrant. If there is no child at the given quadrant then a child is
--   added and the element is inserted into the new child.
insert_child :: HasBoundary e => (Boundary, Quadrant) -> e -> QuadTree e -> QuadTree e

-- | Returns all elements with boundaries that intersect the given boundary
--   - By case: - Boundary does not intersect quadtree - Boundary
--   intersects the quadtree - All elements at the level of the quadtree
--   could intersect the boundary. Test each element - for intersection. -
--   Descend into the quadrants
query :: HasBoundary e => Boundary -> QuadTree e -> [e]
instance [incoherent] Eq Quadrant
instance [incoherent] Show Quadrant
instance [incoherent] HasBoundary (QuadTree e)
