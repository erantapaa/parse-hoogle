-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Instance derivers for newtype wrappers
--   
@package newtype-deriving
@version 0.1.2


-- | This module provides Template Haskell based derivers for typical
--   newtype instances, which the <tt>GeneralizedNewtypeDeriving</tt>
--   extension refuses to handle.
--   
--   Here is what it allows you to do:
--   
--   <pre>
--   {-# LANGUAGE UndecidableInstances, TypeFamilies, FlexibleInstances,
--                TemplateHaskell, GeneralizedNewtypeDeriving,
--                MultiParamTypeClasses #-}
--   
--   import NewtypeDeriving
--   import Control.Monad.Base
--   import Control.Monad.Trans.Control
--   import Control.Monad.Trans.Class
--   import Control.Monad.Trans.Either
--   import Control.Monad.Trans.Maybe
--   import Control.Monad.Trans.State
--   import Control.Monad.Trans.Reader
--   import Control.Monad.Trans.Writer
--   
--   newtype T m a =
--     T (ReaderT Int (StateT Char (WriterT [Int] (EitherT String (MaybeT m)))) a)
--     deriving (Functor, Applicative, Monad)
--   
--   monadTransInstance ''T
--   monadTransControlInstance ''T
--   monadBaseTransformerInstance ''T
--   monadBaseControlTransformerInstance ''T
--   </pre>
module NewtypeDeriving

-- | Given a name of a newtype wrapper produce an instance of
--   <tt>Control.Monad.Trans.Class.<a>MonadTrans</a></tt>.
monadTransInstance :: Name -> Q [Dec]

-- | Given a name of a newtype wrapper produce an instance of
--   <tt>Control.Monad.Base.<a>MonadBase</a></tt>, which is specialised for
--   monad transformers.
monadBaseTransformerInstance :: Name -> Q [Dec]

-- | Given a name of a newtype wrapper produce an instance of
--   <tt>Control.Monad.Trans.Control.<a>MonadTransControl</a></tt>.
monadTransControlInstance :: Name -> Q [Dec]

-- | Given a name of a newtype wrapper produce an instance of
--   <tt>Control.Monad.Trans.Control.<a>MonadBaseControl</a></tt>, which is
--   specialised for monad transformers.
monadBaseControlTransformerInstance :: Name -> Q [Dec]
