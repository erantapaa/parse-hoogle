-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A memcached client
--   
--   A haskell memcached client. See http://memcached.org for more
--   information.
--   
--   This implements the new binary protocol, so it only works with
--   memcached version 1.3 and newer.
@package starling
@version 0.3.0


-- | Primitives for the memcached protocol.
module Network.Starling.Core
data Request

-- | Returns the operation the request will perform
requestOp :: Request -> OpCode
type Key = ByteString
type Value = ByteString

-- | Set a value in the cache.
set :: Key -> Value -> Request

-- | Add a value to cache. Fails if already present.
add :: Key -> Value -> Request

-- | Replaces a value in cahce. Fails if not present.
replace :: Key -> Value -> Request

-- | Get a value from cache
get :: Key -> Request
increment :: Key -> Word64 -> Word64 -> Request
decrement :: Key -> Word64 -> Word64 -> Request

-- | Appends the value to the value in the cache
append :: Key -> Value -> Request

-- | Prepends the value to the value in the cache
prepend :: Key -> Value -> Request

-- | Delete a cache entry
delete :: Key -> Request

-- | Quit
quit :: Request

-- | Flush the cache
flush :: Request

-- | Keepalive. Flushes responses for quiet operations.
noop :: Request

-- | Returns the server version
version :: Request

-- | Fetch statistics about the cahce. Returns a sequence of responses.
stat :: Maybe Key -> Request

-- | List SASL authenitication mechanisms, space delimeted
listAuthMechanisms :: Request

-- | Begin SASL authentication. May return the further auth required error
--   if further steps are needed.
startAuth :: AuthMechanism -> AuthData -> Request

-- | Continue SASL authentication. May return the further aut required
--   error if further steps are needed.
stepAuth :: AuthMechanism -> AuthData -> Request
type AuthMechanism = ByteString
type AuthData = ByteString

-- | Add an opaque marker to a request. This is returned unchanged in the
--   corresponding response.
addOpaque :: Opaque -> Request -> Request

-- | Add a version tag to a request. When added to a set/replace request,
--   the request will fail if the data has been modified since the CAS was
--   retrieved for the item.
addCAS :: CAS -> Request -> Request
data Response
Res :: RsMagic -> OpCode -> DataType -> ResponseStatus -> Opaque -> CAS -> ByteString -> ByteString -> ByteString -> Response
rsMagic :: Response -> RsMagic
rsOp :: Response -> OpCode
rsDataType :: Response -> DataType
rsStatus :: Response -> ResponseStatus
rsOpaque :: Response -> Opaque
rsCas :: Response -> CAS
rsExtras :: Response -> ByteString
rsKey :: Response -> ByteString
rsBody :: Response -> ByteString

-- | Pulls a reponse to an operation off of a handle. May throw a
--   <a>StarlingReadError</a>
getResponse :: Handle -> IO Response
data StarlingReadError
StarlingReadError :: StarlingReadError
class Serialize a
serialize :: Serialize a => a -> Builder
class Deserialize a
deserialize :: Deserialize a => Get a
type Opaque = Word32
data OpCode
Get :: OpCode
Set :: OpCode
Add :: OpCode
Replace :: OpCode
Delete :: OpCode
Increment :: OpCode
Decrement :: OpCode
Quit :: OpCode
Flush :: OpCode
GetQ :: OpCode
NoOp :: OpCode
Version :: OpCode
GetK :: OpCode
GetKQ :: OpCode
Append :: OpCode
Prepend :: OpCode
Stat :: OpCode
SetQ :: OpCode
AddQ :: OpCode
ReplaceQ :: OpCode
DeleteQ :: OpCode
IncrementQ :: OpCode
DecrementQ :: OpCode
QuitQ :: OpCode
FlushQ :: OpCode
AppendQ :: OpCode
PrependQ :: OpCode
ListAuthMechanisms :: OpCode
StartAuth :: OpCode
StepAuth :: OpCode
data DataType
RawData :: DataType
data CAS
nullCAS :: CAS
data ResponseStatus
NoError :: ResponseStatus
KeyNotFound :: ResponseStatus
KeyExists :: ResponseStatus
ValueTooLarge :: ResponseStatus
InvalidArguments :: ResponseStatus
ItemNotStored :: ResponseStatus
IncrDecrOnNonNumeric :: ResponseStatus
AuthRequired :: ResponseStatus
FurtherAuthRequired :: ResponseStatus
UnknownCommand :: ResponseStatus
OutOfMemory :: ResponseStatus
instance Typeable ResponseStatus
instance Typeable StarlingReadError
instance Eq OpCode
instance Ord OpCode
instance Read OpCode
instance Show OpCode
instance Eq ResponseStatus
instance Ord ResponseStatus
instance Read ResponseStatus
instance Show ResponseStatus
instance Eq DataType
instance Ord DataType
instance Read DataType
instance Show DataType
instance Eq RsMagic
instance Ord RsMagic
instance Read RsMagic
instance Show RsMagic
instance Eq RqMagic
instance Ord RqMagic
instance Read RqMagic
instance Show RqMagic
instance Show StarlingReadError
instance Eq Response
instance Ord Response
instance Read Response
instance Show Response
instance Eq CAS
instance Ord CAS
instance Read CAS
instance Show CAS
instance Eq Request
instance Ord Request
instance Read Request
instance Show Request
instance Deserialize OpCode
instance Serialize OpCode
instance Deserialize ResponseStatus
instance Exception ResponseStatus
instance Deserialize DataType
instance Serialize DataType
instance Deserialize RsMagic
instance Serialize RqMagic
instance Exception StarlingReadError
instance Deserialize ResponseHeader
instance Deserialize Response
instance Deserialize CAS
instance Serialize CAS
instance Serialize Request


-- | All of the craziness for thread-safety and asynchronous operations
--   lives here.
--   
--   The idea is that if someone comes up with a better way of managing
--   connection state they can build what they want on top of the Core
--   module.
--   
--   Operations are not entirely asynch - they block until a response is
--   returned.
--   
--   But we don't hold the connection lock while we're blocking, so other
--   threads can still put requests on the connection.
--   
--   This should work well where each thread needs one request to do it's
--   job.
--   
--   If you have a good idea for what an asynchronous API should look like
--   let me know. It shouldn't be too hard to add on to what's already
--   here.
module Network.Starling.Connection

-- | For thread safety of operations, we perform all requests on a wrapper
--   around a handle.
data Connection

-- | Create a connection. Please don't use the handle after opening a
--   connection with it.
open :: Handle -> IO Connection

-- | Shut down the connection. Non-blocking.
close :: Connection -> IO ()

-- | Place a synchronous request which only returns one reply
synchRequest :: Connection -> Request -> IO Response

-- | Place a synchronous request which may return multiple response
--   (<a>Stat</a>, pretty much)
synchRequestMulti :: Connection -> Request -> IO [Response]

-- | This function ignores anything coming back from the server.
--   Non-blocking.
ignorantRequest :: Connection -> Request -> IO ()


-- | A haskell implementation of the memcahed protocol.
--   
--   This implements the new binary protocol, so it only works with
--   memcached version 1.3 and newer.
--   
--   Example of usage, using the network package to obain a handle, and the
--   OverloadedStrings language extension:
--   
--   <pre>
--   h &lt;- connectTo "filename" $ UnixSocket "filename"
--   hSetBuffering h NoBuffering
--   con &lt;- open h
--   </pre>
--   
--   <pre>
--   set con "hello" "world"
--   get con "hello"
--   </pre>
--   
--   In the above example we connect to a unix socket in the file
--   "filename", set the key "hello" to the value "world" and then retrieve
--   the value.
--   
--   Operations are thread safe - multiple threads of execution may make
--   concurrent requests on the memcahced connection.
--   
--   Operations are blocking, but do not block other concurrent threads
--   from placing requests on the connection.
module Network.Starling

-- | Create a connection. Please don't use the handle after opening a
--   connection with it.
open :: Handle -> IO Connection

-- | Shut down the connection. Non-blocking.
close :: Connection -> IO ()

-- | For thread safety of operations, we perform all requests on a wrapper
--   around a handle.
data Connection
type Key = ByteString
type Value = ByteString

-- | An error consists of the error code returned by the server and a
--   human-readble error string returned by the server.
data StarlingError
StarlingError :: ResponseStatus -> ByteString -> StarlingError
data ResponseStatus
NoError :: ResponseStatus
KeyNotFound :: ResponseStatus
KeyExists :: ResponseStatus
ValueTooLarge :: ResponseStatus
InvalidArguments :: ResponseStatus
ItemNotStored :: ResponseStatus
IncrDecrOnNonNumeric :: ResponseStatus
AuthRequired :: ResponseStatus
FurtherAuthRequired :: ResponseStatus
UnknownCommand :: ResponseStatus
OutOfMemory :: ResponseStatus

-- | Set a value in the cache
set :: (MonadIO m, Failure StarlingError m) => Connection -> Key -> Value -> m ()

-- | Retrive a value from the cache
get :: (MonadIO m, Failure StarlingError m) => Connection -> Key -> m ByteString

-- | Delete an entry in the cache
delete :: (MonadIO m, Failure StarlingError m) => Connection -> Key -> m ()

-- | Set a vlue in the cache. Fails if a value is already defined for the
--   indicated key.
add :: (MonadIO m, Failure StarlingError m) => Connection -> Key -> Value -> m ()

-- | Set a value in the cache. Fails if a value is not already defined for
--   the indicated key.
replace :: (MonadIO m, Failure StarlingError m) => Connection -> Key -> Value -> m ()

-- | Update a value in the cache. This operation requires two round trips.
--   This operation can fail if the key is not present in the cache, or if
--   the value changes in the cache between the two calls. So watch out!
--   Even if the value exists the operation might not go through in the
--   face of concurrent access.
--   
--   Testing indicates that if we fail because we could not gaurantee
--   atomicity the failure code will be <a>KeyExists</a>.
update :: (MonadIO m, Failure StarlingError m) => Connection -> Key -> (Value -> m (Maybe Value)) -> m ()

-- | Increment a value in the cache. The first <a>Word64</a> argument is
--   the amount by which to increment and the second is the intial value to
--   use if the key does not yet have a value. The return value is the
--   updated value in the cache.
increment :: (MonadIO m, Failure StarlingError m) => Connection -> Key -> Word64 -> Word64 -> m Word64

-- | Decrement a value in the cache. The first <a>Word64</a> argument is
--   the amount by which to decrement and the second is the intial value to
--   use if the key does not yet have a value. The return value is the
--   updated value in the cache.
decrement :: (MonadIO m, Failure StarlingError m) => Connection -> Key -> Word64 -> Word64 -> m Word64

-- | Delete all entries in the cache
flush :: (MonadIO m, Failure StarlingError m) => Connection -> m ()

-- | Returns a list of stats about the server in key,value pairs
stats :: (MonadIO m, Failure StarlingError m) => Connection -> m [(ByteString, ByteString)]

-- | Returns the version of the server
version :: (MonadIO m, Failure StarlingError m) => Connection -> m ByteString

-- | List allowed SASL mechanisms. The server must support SASL
--   authentication.
listAuthMechanisms :: (MonadIO m, Failure StarlingError m) => Connection -> m [AuthMechanism]

-- | SASL authenitcation. Multi-step authentication is supported by
--   un-folding the passed-in AuthCallback. Returns <a>True</a> if
--   authentication is supported and complete. If the supplied callback
--   completes while there are still steps remaining we throw
--   FurtherAuthRequired.
auth :: (MonadIO m, Failure StarlingError m) => Connection -> AuthMechanism -> AuthData -> Maybe (AuthCallback m) -> m Bool
type AuthMechanism = ByteString
type AuthData = ByteString

-- | Some authentications require mutliple back and forths between the
--   client and the server. This type encapsulates that.
data AuthCallback m
AuthCallback :: (ByteString -> m (AuthData, Maybe (AuthCallback m))) -> AuthCallback m
instance Typeable StarlingError
instance Exception StarlingError
instance Show StarlingError
