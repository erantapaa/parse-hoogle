-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | POP3 Client Library
--   
--   pop3-client provides a Haskell library to implement a POP3 client.
--   
--   <ul>
--   <li>Simple and safe API: connection is guaranteed to be closed, no
--   need to know the POP3 protocol to use the API</li>
--   <li>Standards compliant</li>
--   <li>No dependencies (besides base, mtl and network libraries)</li>
--   </ul>
@package pop3-client
@version 0.1.4


-- | This module contains function to connect to a POP3 server and retrieve
--   messages and other information from it.
--   
--   This library is designed to be safe to use: connections are guaranteed
--   to be closed after the POP3 commands have been executed.
--   
--   Example of downloading the latest email message:
--   
--   <pre>
--   module Main where 
--   
--   import Network.POP3.Client
--   
--   main :: IO ()
--   main = do
--       let account = POP3Account "pop3.example.org" defaultPort "my_username" "my_password"
--       message &lt;- withPOP3 account $ do
--           total &lt;- getNumberOfMessages
--           getMessage total
--       putStrLn $ show message
--   </pre>
--   
--   Example using the hsemail package to parse the message headers and
--   body:
--   
--   <pre>
--   module Main where 
--   
--   import Network.POP3.Client
--   import Control.Monad.Error
--   import Text.ParserCombinators.Parsec
--   import Text.ParserCombinators.Parsec.Error
--   import qualified Text.ParserCombinators.Parsec.Rfc2822 as MP
--   
--   parseMessage s = case parse MP.message "" s of
--       Left err -&gt; throwError $ concatMap messageString (errorMessages err)
--       Right m  -&gt; return m
--   
--   main :: IO ()
--   main = do
--       -- retrieve 5 latest messages and parse them using hsemail
--       let account = POP3Account "pop3.example.org" defaultPort "my_username" "my_password"
--       messages &lt;- withPOP3 account $ do
--           total &lt;- getNumberOfMessages
--           messages &lt;- mapM getMessage $ take 5 (reverse [1..total])
--           mapM parseMessage messages
--       putStrLn $ show messages
--   </pre>
module Network.POP3.Client

-- | The POP3 action. Encapsulates the network connection handle and
--   provides error handling.
type POP3 = ErrorT String (ReaderT Connection IO)

-- | A record which contains all settings needed to connect to a POP3
--   server and to authenticate.
data POP3Account
POP3Account :: String -> Int -> String -> String -> POP3Account

-- | The hostname of the server to connect to
accHostname :: POP3Account -> String

-- | The port to connect to (use defaultPort if you want to use the default
--   POP3 port)
accPort :: POP3Account -> Int

-- | The username to login with
accUsername :: POP3Account -> String

-- | The password to login with
accPassword :: POP3Account -> String

-- | The message ID as the position in the list of messages on the server,
--   from [1..getNumberOfMessages]. Note that this type does NOT represent
--   the unique IDs (UIDL) of messages as returned by getUniqueID.
type MessageID = Integer

-- | Default POP3 port (110)
defaultPort :: Int

-- | Connects to the given host and port, executes the given POP3
--   action(s), closes the connection, and finally returns the result op
--   the (last) POP3 action.
--   
--   If an error occurs, the action is aborted and an error message is
--   returned.
--   
--   The connection is guaranteed to be closed before returning from this
--   function, even when an exception occurs during the session.
withPOP3 :: POP3Account -> POP3 a -> IO (Either String a)

-- | Returns the number of messages stored in the POP3 mailbox.
getNumberOfMessages :: POP3 Integer

-- | Returns the size of the POP3 mailbox in bytes.
getMailboxBytes :: POP3 Integer

-- | Returns the unique ID (UIDL) of a message on the server. The message
--   ID should be in the range [1..<a>getNumberOfMessages</a>].
getUniqueID :: MessageID -> POP3 String

-- | Returns the size of a message on the server in bytes. Note that this
--   may not correspond exactly to the size of the message as it is
--   downloaded, because of newline and escape values. The message ID
--   should be in the range [1..<a>getNumberOfMessages</a>].
getSize :: MessageID -> POP3 Integer

-- | Retrieves a POP3 message from the server and returns it parsed as a
--   <tt>Message</tt>. The message ID should be in the range
--   [1..<a>getNumberOfMessages</a>].
getMessage :: MessageID -> POP3 String

-- | Retrieves a the headers and the first n lines of a message from the
--   server and returns it parsed as a <tt>Message</tt>. The message ID
--   should be in the range [1..<a>getNumberOfMessages</a>].
getFirstNLines :: MessageID -> Integer -> POP3 String

-- | Retrieves a the headers of a message from the server and returns it
--   parsed as a <tt>Message</tt>. The message ID should be in the range
--   [1..<a>getNumberOfMessages</a>].
getHeaders :: MessageID -> POP3 String

-- | Marks a message as to be deleted and returns a Bool which indicates a
--   success. The message ID should be in the range
--   [1..<a>getNumberOfMessages</a>]. The message will actually be deleted
--   from the server on QUIT.
deleteMessage :: MessageID -> POP3 String
instance Eq POP3Account
instance Ord POP3Account
instance Show POP3Account
