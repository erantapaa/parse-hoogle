-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Class for reading bounded values
--   
--   Class for reading bounded values from strings.
@package read-bounded
@version 0.1.1.0

module Text.Read.Bounded

-- | Information about a bounded read.
data BoundedRead a

-- | The read failed.
NoRead :: BoundedRead a

-- | The value was successfully read exactly, and did not have to be
--   clamped to a narrower representation.
ExactRead :: a -> BoundedRead a

-- | The value was successfully read, but had to be clamped to a narrower
--   representation because its value was too wide.
ClampedRead :: a -> BoundedRead a

-- | Much like the <a>Read</a> class, but will return (possibly) clamped
--   values.
--   
--   Typical instances of this class will clamp against <a>minBound</a> and
--   <a>maxBound</a>
--   
--   This class is designed to avoid inconsistency problems such as the
--   following:
--   
--   <pre>
--   &gt;&gt;&gt; read "321" :: Word8
--   65
--   
--   &gt;&gt;&gt; read "4321" :: Word8
--   225
--   
--   &gt;&gt;&gt; read "-4" :: Word8
--   252
--   </pre>
--   
--   Using this class, the results are predictable and precise:
--   
--   <pre>
--   &gt;&gt;&gt; readBounded "321" :: BoundedRead Word8
--   ClampedRead 255
--   
--   &gt;&gt;&gt; readBounded "4321" :: BoundedRead Word8
--   ClampedRead 255
--   
--   &gt;&gt;&gt; readBounded "-4" :: BoundedRead Word8
--   ClampedRead 0
--   
--   &gt;&gt;&gt; readBounded "255" :: BoundedRead Word8
--   ExactRead 255
--   
--   &gt;&gt;&gt; readBounded "6" :: BoundedRead Word8
--   ExactRead 6
--   
--   &gt;&gt;&gt; readBounded "xxx" :: BoundedRead Word8
--   NoRead
--   </pre>
class ReadBounded a
readBounded :: ReadBounded a => String -> BoundedRead a

-- | Reads a clamped value for any integer type with the given class
--   constraints. Useful for implementing a <a>ReadBounded</a> instance or
--   avoiding one.
readBoundedInteger :: (Bounded a, Read a, Integral a) => String -> BoundedRead a
instance Show a => Show (BoundedRead a)
instance Read a => Read (BoundedRead a)
instance Eq a => Eq (BoundedRead a)
instance Ord a => Ord (BoundedRead a)
instance ReadBounded Word64
instance ReadBounded Word32
instance ReadBounded Word16
instance ReadBounded Word8
instance ReadBounded Word
instance ReadBounded Int64
instance ReadBounded Int32
instance ReadBounded Int16
instance ReadBounded Int8
instance ReadBounded Int
instance ReadBounded Integer
