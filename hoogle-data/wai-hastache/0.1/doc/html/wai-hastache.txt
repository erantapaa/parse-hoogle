-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Nice wrapper around hastache for use with WAI
--   
--   Provides smart constructors for WAI responses using Hastache for
--   rendering mustache templates.
@package wai-hastache
@version 0.1

module Network.Wai.Hastache

-- | Build a response based on a configuration and a template in a file.
hastache :: (Functor m, MonadIO m) => Status -> ResponseHeaders -> MuConfig -> FilePath -> MuContext m -> m Response

-- | Build an HTML-escaped response based on a template in a file. Defaults
--   Content-Type to text/html if you do not specify.
hastacheHTML :: (Functor m, MonadIO m) => Status -> ResponseHeaders -> FilePath -> MuContext m -> m Response

-- | Build an unescaped response based on a template in a file. Defaults
--   Content-Type to text/plain if you do not specify.
hastacheText :: (Functor m, MonadIO m) => Status -> ResponseHeaders -> FilePath -> MuContext m -> m Response

-- | Build a response based on a configuration and a template in a
--   <a>ByteString</a>.
hastacheStr :: (Functor m, MonadIO m) => Status -> ResponseHeaders -> MuConfig -> ByteString -> MuContext m -> m Response

-- | Build an HTML-escaped response based on a template in a
--   <a>ByteString</a>. Defaults Content-Type to text/html if you do not
--   specify.
hastacheStrHTML :: (Functor m, MonadIO m) => Status -> ResponseHeaders -> ByteString -> MuContext m -> m Response

-- | Build an unescaped response based on a template in a
--   <a>ByteString</a>. Defaults Content-Type to text/plain if you do not
--   specify.
hastacheStrText :: (Functor m, MonadIO m) => Status -> ResponseHeaders -> ByteString -> MuContext m -> m Response
data MuConfig :: *
MuConfig :: (ByteString -> ByteString) -> Maybe FilePath -> Maybe String -> MuConfig

-- | Escape function (<a>htmlEscape</a>, <a>emptyEscape</a> etc.)
muEscapeFunc :: MuConfig -> ByteString -> ByteString

-- | Directory for search partial templates ({{&gt; templateName}})
muTemplateFileDir :: MuConfig -> Maybe FilePath

-- | Partial template files extension
muTemplateFileExt :: MuConfig -> Maybe String

-- | Data for Hastache variable
type MuContext (m :: * -> *) = ByteString -> MuType m
data MuType (m :: * -> *) :: (* -> *) -> *
MuVariable :: a -> MuType m
MuList :: [MuContext m] -> MuType m
MuBool :: Bool -> MuType m
MuLambda :: (ByteString -> a) -> MuType m
MuLambdaM :: (ByteString -> m a) -> MuType m
MuNothing :: MuType m
