-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Saturnin  CI / Job System
--   
@package Saturnin
@version 0.1.0.2

module Saturnin.Server.Config
data ConfigServer
ConfigServer :: Maybe String -> Maybe String -> HashMap MachineDescription Hostname -> Maybe FilePath -> ConfigServer
listen_addr :: ConfigServer -> Maybe String
listen_port :: ConfigServer -> Maybe String
machines :: ConfigServer -> HashMap MachineDescription Hostname
work_dir :: ConfigServer -> Maybe FilePath
readConfig :: IO (Either ParseException ConfigServer)
type MachineDescription = String
type Hostname = String
data YBServerPersistentState
YBServerPersistentState :: JobID -> YBServerPersistentState
lastJobID :: YBServerPersistentState -> JobID
readPState :: IO (Either ParseException YBServerPersistentState)
writePState :: YBServerPersistentState -> IO ()
data JobID
JobID :: Int -> JobID
bumpJobID :: YBServerPersistentState -> YBServerPersistentState
instance Show ConfigServer
instance Generic ConfigServer
instance Show JobID
instance Read JobID
instance Generic JobID
instance Show YBServerPersistentState
instance Read YBServerPersistentState
instance Generic YBServerPersistentState
instance Datatype D1ConfigServer
instance Constructor C1_0ConfigServer
instance Selector S1_0_0ConfigServer
instance Selector S1_0_1ConfigServer
instance Selector S1_0_2ConfigServer
instance Selector S1_0_3ConfigServer
instance Datatype D1JobID
instance Constructor C1_0JobID
instance Datatype D1YBServerPersistentState
instance Constructor C1_0YBServerPersistentState
instance Selector S1_0_0YBServerPersistentState
instance Default YBServerPersistentState
instance ToJSON YBServerPersistentState
instance FromJSON YBServerPersistentState
instance ToJSON JobID
instance FromJSON JobID
instance Enum JobID
instance Default ConfigServer
instance FromJSON ConfigServer

module Saturnin.Logging
getJobLogger :: JobID -> IO DistributedJobLogger
type Logger = Text -> IO ()
type DistributedJobLogger = FilePath -> Text -> IO ()

module Saturnin.Git

-- | readFile reads FilePath from repository at GitSource
--   
--   Implemented by clone uri; checkout ref/rev and then just readFile
--   
--   Other approach could be: git archive --remote=<a>uri</a>
--   <a>tree-ish</a> <a>filepath</a> But it's not currently possible as the
--   <a>tree-ish</a> is too restricted:
--   
--   <ol>
--   <li>Clients may not use other sha1 expressions, even if the end result
--   is reachable. E.g., neither a relative commit like master^ nor a
--   literal sha1 like abcd1234 is allowed, even if the result is reachable
--   from the refs. [1]_</li>
--   </ol>
--   
--   .. [1]: man git-upload-archive
readFile :: GitSource -> FilePath -> FilePath -> IO ByteString
runCmd :: Maybe FilePath -> FilePath -> [String] -> IO (String, String)
data GitSource
GitSource :: GitURI -> GitRevOrRef -> GitSource
gsUri :: GitSource -> GitURI
gsRevOrRef :: GitSource -> GitRevOrRef
newtype GitURI
GitURI :: Text -> GitURI
uri :: GitURI -> Text
newtype GitRevOrRef
GitRevOrRef :: Text -> GitRevOrRef
revOrRef :: GitRevOrRef -> Text
instance Show GitURI
instance Read GitURI
instance Show GitRevOrRef
instance Read GitRevOrRef
instance Show GitSource
instance Read GitSource

module Saturnin.Types
type MachineDescription = String
type Hostname = String
data BuildRequest
GitBuildRequest :: String -> String -> BuildRequest
brUri :: BuildRequest -> String
brHead :: BuildRequest -> String

-- | JobRequest specifies job to be run. This is what client send to the
--   job server.
data JobRequest
TestRequest :: TestType -> GitSource -> [MachineDescription] -> JobRequest
testType :: JobRequest -> TestType
dataSource :: JobRequest -> GitSource
testMachines :: JobRequest -> [MachineDescription]
data TestType
CabalTest :: TestType
MakeCheckTest :: TestType
data GitSource
GitSource :: GitURI -> GitRevOrRef -> GitSource
gsUri :: GitSource -> GitURI
gsRevOrRef :: GitSource -> GitRevOrRef
type YBServer a = StateT YBSSharedState IO a
data YBServerState
YBServerState :: ConfigServer -> YBServerPersistentState -> MachinesRegister -> Handle -> YBServerState
ybssConfig :: YBServerState -> ConfigServer
pState :: YBServerState -> YBServerPersistentState
freeMachines :: YBServerState -> MachinesRegister
logHandle :: YBServerState -> Handle
type YBSSharedState = TVar YBServerState

-- | fst for three-tuple
fst3 :: (t, t1, t2) -> t
data TestResult
Passed :: TestResult
Failed :: TestResult
FailedSetup :: TestResult

-- | Returns any thing in Either. Be it Left or Right.
anyEither :: Either a a -> a
isPassed :: TestResult -> Bool
data JobID
JobID :: Int -> JobID
type JobRequestListenerConnectionHandler a = StateT (Socket, SockAddr) (StateT YBSSharedState IO) a
logError :: Text -> YBServer ()
logInfo :: Text -> YBServer ()
logToConnection :: Text -> JobRequestListenerConnectionHandler ()
logToConnection' :: Socket -> Text -> IO ()
instance Show TestType
instance Read TestType
instance Show JobRequest
instance Read JobRequest
instance Show YBServerState
instance Show TestResult
instance Read TestResult
instance Default YBServerState

module Saturnin.Jobs

-- | JobRequest specifies job to be run. This is what client send to the
--   job server.
data JobRequest
TestRequest :: TestType -> GitSource -> [MachineDescription] -> JobRequest
testType :: JobRequest -> TestType
dataSource :: JobRequest -> GitSource
testMachines :: JobRequest -> [MachineDescription]
data CmdResult
CmdResult :: Text -> Text -> Text -> ExitCode -> CmdResult
cmdResultOut :: CmdResult -> Text
cmdResultErr :: CmdResult -> Text
cmdResultCmd :: CmdResult -> Text
cmdResultCode :: CmdResult -> ExitCode
data JobResult
JobResult :: MachineDescription -> TestResult -> JobResult
machine :: JobResult -> MachineDescription
result :: JobResult -> TestResult

-- | Job fully describes a job to be run. This is what JobRequest is
--   translated into for internal representation. This holds data that are
--   needed to actually run the job - that is data derived from the
--   JobRequest, eg.: [Hostname] instead of [MachineDescription]
data Job
Job :: [RemoteJob] -> JobRequest -> JobID -> Job
remoteJobs :: Job -> [RemoteJob]
request :: Job -> JobRequest
jobID :: Job -> JobID

-- | RemoteJob describes a job to be run on one machine. RemoteJob is
--   always part of Job.
data RemoteJob
TestJob :: TestType -> GitSource -> MachineDescription -> Hostname -> RemoteJob
rJobTestType :: RemoteJob -> TestType
rJobDataSource :: RemoteJob -> GitSource
jobMachine :: RemoteJob -> MachineDescription
jobHost :: RemoteJob -> Hostname
mkRemoteJob :: JobRequest -> MachineDescription -> Hostname -> RemoteJob
runRemoteJob :: RemoteJobRunnerState -> IO JobResult
data RemoteJobRunnerState
RemoteJobRunnerState :: RemoteJob -> Logger -> Logger -> RemoteJobRunnerState
rJob :: RemoteJobRunnerState -> RemoteJob
rJobLogger :: RemoteJobRunnerState -> Logger
cLogger :: RemoteJobRunnerState -> Logger
instance Show RemoteJob
instance Show Job
instance Show CmdResult
instance Show JobResult

module Saturnin.Server.Connection
handleConnection :: (Socket, SockAddr) -> YBServer ()

module Saturnin.Server
runYBServer :: IO ()
