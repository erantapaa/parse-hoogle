-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An interactive renderer for plotting time-series data
--   
--   scope-cairo is a Cairo rendering backend for scope, which is a a
--   framework for plotting time-series data using zoom-cache files.
--   
--   For more information on scope and zoom-cache, see their packages:
--   
--   <a>http://hackage.haskell.org/package/scope</a>
--   
--   <a>http://hackage.haskell.org/package/zoom-cache</a>
--   
--   This package includes a Gtk/Cairo application. It's a desktop
--   application with a <i>File</i> menu; remember those? wow! This will
--   probably be split out into a separate package later, and there'll be a
--   webby javascripty version too, but for now there's this desktop app.
--   
--   To run it, simply:
--   
--   <pre>
--   $ cabal install gtk2hs-buildtools scope-cairo
--   $ scope-cairo
--   </pre>
--   
--   Then, select <i>File-&gt;Open</i> from the menubar, with your mouse:
--   there's no swiping gestures back here, baby! Four (yes, 4) demo files
--   are included in this version of the package. Choose one, and it will
--   be drawn in the window. Amazing! It should look something like what
--   you saw in the post you read about this in, but more personal because
--   now it's happening to you.
--   
--   Zoom in with the scroll wheel on your mouse. If you don't have a
--   scroll wheel, use the Up and Down arrow keys on your keyboard. If you
--   don't have up and down arrows <i>you are elite</i>!
--   
--   Pan around by dragging it. There's a scrollbar too if you're into
--   that.
--   
--   Load up another file! It will also be drawn. Zoom in and out and pan
--   around, yay! Life is gooood!
@package scope-cairo
@version 0.8.0.0

module Scope.Cairo
data ViewCairo
ViewCairo :: DrawingArea -> Adjustment -> ViewCairo
canvas :: ViewCairo -> DrawingArea
adj :: ViewCairo -> Adjustment
scopeCairoNew :: DrawingArea -> Adjustment -> Scope ViewCairo
viewCairoInit :: DrawingArea -> Adjustment -> ViewCairo
keepState :: Render t -> Render ()
instance ScopeRender Render
instance MonadCatchIO Render
