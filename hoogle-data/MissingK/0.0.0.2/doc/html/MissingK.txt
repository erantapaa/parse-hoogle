-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Useful types and definitions missing from other libraries
--   
@package MissingK
@version 0.0.0.2

module Data.ExtraVersion
data Version
Version :: Int -> Int -> VersionStatus -> Int -> Version
vMajor :: Version -> Int
vMinor :: Version -> Int
vStatus :: Version -> VersionStatus
vIter :: Version -> Int
data VersionStatus
None :: VersionStatus
Alpha :: VersionStatus
Beta :: VersionStatus
ReleaseCandidate :: VersionStatus
Final :: VersionStatus
versionToString :: Version -> String
instance Eq VersionStatus
instance Ord VersionStatus
instance Show VersionStatus
instance Enum VersionStatus
instance Read VersionStatus
instance Eq Version
instance Ord Version
instance Show Version
instance Read Version

module Language.Haskell.TH.DeriveField
deriveField :: String -> String -> String -> Name -> Q [Dec]

module Control.Exception.Extra

-- | Returns a given computation ignoring an exception
anyway :: a -> SomeException -> a
handleExceptions :: IO a -> IO a -> IO a

-- | Tries to execute all the IO computations until one succeeds
trySeq :: [IO ()] -> IO ()

-- | Handles any exception (apparently the default handle won't handle all)
handleAllExceptions :: IO () -> IO () -> IO ()
anywayG :: IO a -> GError -> IO a

module Control.Arrow.Extra
both :: (a -> b) -> (a, a) -> (b, b)
both2 :: (a -> b -> c) -> (a, a) -> (b, b) -> (c, c)

module System.Environment.SetEnv

-- | The <a>setEnv</a> function inserts or resets the environment variable
--   name in the current environment list. If the variable <tt>name</tt>
--   does not exist in the list, it is inserted with the given value. If
--   the variable does exist, the argument <tt>overwrite</tt> is tested; if
--   <tt>overwrite</tt> is <tt>False</tt>, the variable is not reset,
--   otherwise it is reset to the given value.
setEnv :: String -> String -> IO ()

module Data.List.Extra
updateAt :: Int -> a -> [a] -> [a]
deleteAt :: Int -> [a] -> [a]
elemAt :: Int -> [a] -> Maybe a
shiftLeftWith :: (a -> Bool) -> [a] -> [a]
shiftRightWith :: (a -> Bool) -> [a] -> [a]
shiftLeftAt :: Int -> [a] -> [a]
shiftRightAt :: Int -> [a] -> [a]

module Data.String.Extra

-- | Auxiliary string functions. I can't believe no module declares these
--   FIXME: Check that no existing module declares these.
trim :: String -> String

module Data.Stack
type Stack a = [a]
pop :: Stack a -> (a, Stack a)
push :: a -> Stack a -> Stack a
empty :: Stack a
