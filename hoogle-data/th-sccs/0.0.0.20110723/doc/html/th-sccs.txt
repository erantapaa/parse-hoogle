-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Binding group analysis in Template Haskell
--   
--   th-sccs exposes Template Haskell functions for computing the mutually
--   recursive binding groups for data and type synonym declarations,
--   excluding those that use type families. This includes a convenient
--   type class for gathering the type constructor names that occur within
--   a TH <tt>Info</tt>/<tt>Dec</tt>/<tt>Type</tt> value.
@package th-sccs
@version 0.0.0.20110723

module Language.Haskell.TH.SCCs

-- | Wrapper for <a>scc</a> that forgets the distinction between a single
--   acyclic SCC and a singly recursive SCC
binding_group :: Name -> Q (Set Name)

-- | Wrapper for <a>sccs</a> that forgets the distinction between a single
--   acyclic SCC and a singly recursive SCC
binding_groups :: [Name] -> Q [Set Name]

-- | Computes the SCC that includes the declaration of the given name;
--   <tt>Left</tt> is a singly acyclic declaration, <tt>Right</tt> is a
--   mutually recursive group (possibly of size one: singly recursion).
scc :: Name -> Q (Either Name (Set Name))

-- | Computes all SCCs for the given names (including those it dominates)
sccs :: [Name] -> Q [Either Name (Set Name)]

-- | Calculate the type declarations upon which this construct
--   syntactically depends. The first argument tracks the bindings
--   traversed; use <a>td_descend</a> to maintain it.
class Dependencies t
type_dependencies' :: Dependencies t => [Name] -> t -> Set Name
type_dependencies :: Dependencies t => t -> Set Name

-- | Just a bit shorter than <a>type_dependencies'</a>
td_recur :: Dependencies t => [Name] -> t -> Set Name

-- | Shorter than <a>type_dependencies'</a> and also adds the name of the
--   seconda argument to the tracked bindings
td_descend :: (Named a, Dependencies t) => [Name] -> a -> t -> Set Name

-- | This is semantically murky: it's just the name of anything that
--   "naturally" <i>defines</i> a name; error if it doesn't.
class Named t
name_of :: Named t => t -> Name

-- | Helpful for debugging generated code
printQ :: Show a => Maybe String -> Q a -> Q [Dec]
instance Dependencies Type
instance Dependencies RecordField
instance Named RecordField
instance Dependencies Con
instance Dependencies Dec
instance Dependencies Info
instance Named Pat
instance Named Con
instance Named Dec
instance Named Info
