-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Monadic interface for TokyoTyrant.
--   
--   This package provides simple monadic interface for TokyoTyrant.
@package monarch
@version 0.10.0.0


-- | Provide TokyoTyrant mock.
module Database.Monarch.Mock

-- | The Mock monad transformer to provide TokyoTyrant access.
data MockT m a

-- | Connection with TokyoTyrant
data MockDB

-- | Create mock DB
newMockDB :: IO (TVar MockDB)

-- | Run Mock with TokyoTyrant at target host and port.
runMock :: MonadIO m => MockT m a -> TVar MockDB -> m (Either Code a)


-- | Provide TokyoTyrant monadic access interface.
module Database.Monarch

-- | IO Specialized
type Monarch = MonarchT IO

-- | The Monarch monad transformer to provide TokyoTyrant access.
data MonarchT m a

-- | Connection with TokyoTyrant
data Connection

-- | Connection pool with TokyoTyrant
type ConnectionPool = Pool Connection

-- | Create a TokyoTyrant connection and run the given action. Don't use
--   the given <a>Connection</a> outside the action.
withMonarchConn :: (MonadBaseControl IO m, MonadIO m) => String -> Int -> (Connection -> m a) -> m a

-- | Create a TokyoTyrant connection pool and run the given action. Don't
--   use the given <a>ConnectionPool</a> outside the action.
withMonarchPool :: (MonadBaseControl IO m, MonadIO m) => String -> Int -> Int -> (ConnectionPool -> m a) -> m a

-- | Run action with a connection.
runMonarchConn :: (MonadBaseControl IO m, MonadIO m) => MonarchT m a -> Connection -> m (Either Code a)

-- | Run action with a unused connection from the pool.
runMonarchPool :: (MonadBaseControl IO m, MonadIO m) => MonarchT m a -> ConnectionPool -> m (Either Code a)

-- | Options for scripting extension
data ExtOption

-- | record locking
RecordLocking :: ExtOption

-- | global locking
GlobalLocking :: ExtOption

-- | Options for restore
data RestoreOption

-- | consistency checking
ConsistencyChecking :: RestoreOption

-- | Options for miscellaneous operation
data MiscOption

-- | omission of update log
NoUpdateLog :: MiscOption

-- | Error code
data Code
Success :: Code
InvalidOperation :: Code
HostNotFound :: Code
ConnectionRefused :: Code
SendError :: Code
ReceiveError :: Code
ExistingRecord :: Code
NoRecordFound :: Code
MiscellaneousError :: Code

-- | Monad Monarch interfaces
class Monad m => MonadMonarch m
put :: MonadMonarch m => ByteString -> ByteString -> m ()
multiplePut :: MonadMonarch m => [(ByteString, ByteString)] -> m ()
putKeep :: MonadMonarch m => ByteString -> ByteString -> m ()
putCat :: MonadMonarch m => ByteString -> ByteString -> m ()
putShiftLeft :: MonadMonarch m => ByteString -> ByteString -> Int -> m ()
putNoResponse :: MonadMonarch m => ByteString -> ByteString -> m ()
out :: MonadMonarch m => ByteString -> m ()
multipleOut :: MonadMonarch m => [ByteString] -> m ()
get :: MonadMonarch m => ByteString -> m (Maybe ByteString)
multipleGet :: MonadMonarch m => [ByteString] -> m [(ByteString, ByteString)]
valueSize :: MonadMonarch m => ByteString -> m (Maybe Int)
iterInit :: MonadMonarch m => m ()
iterNext :: MonadMonarch m => m (Maybe ByteString)
forwardMatchingKeys :: MonadMonarch m => ByteString -> Maybe Int -> m [ByteString]
addInt :: MonadMonarch m => ByteString -> Int -> m Int
addDouble :: MonadMonarch m => ByteString -> Double -> m Double
ext :: MonadMonarch m => ByteString -> [ExtOption] -> ByteString -> ByteString -> m ByteString
sync :: MonadMonarch m => m ()
optimize :: MonadMonarch m => ByteString -> m ()
vanish :: MonadMonarch m => m ()
copy :: MonadMonarch m => ByteString -> m ()
restore :: (MonadMonarch m, Integral a) => ByteString -> a -> [RestoreOption] -> m ()
setMaster :: (MonadMonarch m, Integral a) => ByteString -> Int -> a -> [RestoreOption] -> m ()
recordNum :: MonadMonarch m => m Int64
size :: MonadMonarch m => m Int64
status :: MonadMonarch m => m ByteString
misc :: MonadMonarch m => ByteString -> [MiscOption] -> [ByteString] -> m [ByteString]
