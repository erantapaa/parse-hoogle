-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | QuasiQuoting llvm code for llvm-general
--   
@package llvm-general-quote
@version 0.2.0.0

module LLVM.General.Quote.SSA
toSSA :: [BasicBlock] -> [BasicBlock]
typeOfConstant :: Constant -> Type
typeOfOperand :: Operand -> Type
typeOfInstruction :: Instruction -> Type

module LLVM.General.Quote.AST

-- | <a>http://llvm.org/docs/LangRef.html#modulestructure</a>
data Module
Module :: String -> Maybe DataLayout -> TargetTriple -> [Definition] -> Module
moduleName :: Module -> String

-- | a <a>DataLayout</a>, if specified, must match that of the eventual
--   code generator
moduleDataLayout :: Module -> Maybe DataLayout
moduleTargetTriple :: Module -> TargetTriple
moduleDefinitions :: Module -> [Definition]

-- | Any thing which can be at the top level of a <a>Module</a>
data Definition
GlobalDefinition :: Global -> Definition
TypeDefinition :: Name -> (Maybe Type) -> Definition
MetadataNodeDefinition :: MetadataNodeID -> [Maybe Operand] -> Definition
NamedMetadataDefinition :: String -> [MetadataNodeID] -> Definition
ModuleInlineAssembly :: String -> Definition
AntiDefinition :: String -> Definition
AntiDefinitionList :: String -> Definition

-- | <a>http://llvm.org/doxygen/classllvm_1_1GlobalValue.html</a>
data Global

-- | <a>http://llvm.org/docs/LangRef.html#global-variables</a>
GlobalVariable :: Name -> Linkage -> Visibility -> Bool -> AddrSpace -> Bool -> Bool -> Type -> Maybe Constant -> Maybe String -> Word32 -> Global
name :: Global -> Name
linkage :: Global -> Linkage
visibility :: Global -> Visibility
isThreadLocal :: Global -> Bool
addrSpace :: Global -> AddrSpace
hasUnnamedAddr :: Global -> Bool
isConstant :: Global -> Bool
_type' :: Global -> Type
initializer :: Global -> Maybe Constant
section :: Global -> Maybe String
alignmentG :: Global -> Word32

-- | <a>http://llvm.org/docs/LangRef.html#aliases</a>
GlobalAlias :: Name -> Linkage -> Visibility -> Type -> Constant -> Global
name :: Global -> Name
linkage :: Global -> Linkage
visibility :: Global -> Visibility
_type' :: Global -> Type
aliasee :: Global -> Constant

-- | <a>http://llvm.org/docs/LangRef.html#functions</a>
Function :: Linkage -> Visibility -> CallingConvention -> [ParameterAttribute] -> Type -> Name -> ([Parameter], Bool) -> [FunctionAttribute] -> Maybe String -> Word32 -> Maybe String -> [LabeledInstruction] -> Global
linkage :: Global -> Linkage
visibility :: Global -> Visibility
_callingConvention :: Global -> CallingConvention
_returnAttributes :: Global -> [ParameterAttribute]
returnType :: Global -> Type
name :: Global -> Name

-- | snd indicates varargs
parameters :: Global -> ([Parameter], Bool)
_functionAttributes :: Global -> [FunctionAttribute]
section :: Global -> Maybe String
alignment :: Global -> Word32
garbageCollectorName :: Global -> Maybe String
instructions :: Global -> [LabeledInstruction]

-- | <a>Parameter</a>s for <a>Function</a>s
data Parameter
Parameter :: Type -> Name -> [ParameterAttribute] -> Parameter
AntiParameter :: String -> Parameter
AntiParameterList :: String -> Parameter
data Direction
Up :: Direction
Down :: Direction

-- | 
--   <a>http://llvm.org/docs/LangRef.html#metadata-nodes-and-metadata-strings</a>
--   Metadata can be attached to an instruction
type InstructionMetadata = [(String, MetadataNode)]

-- | For the redoubtably complex <a>LandingPad</a> instruction
data LandingPadClause
Catch :: Constant -> LandingPadClause
Filter :: Constant -> LandingPadClause

-- | <a>http://llvm.org/docs/LangRef.html#fast-math-flags</a>
data FastMathFlags
NoFastMathFlags :: FastMathFlags
UnsafeAlgebra :: FastMathFlags
FastMathFlags :: Bool -> Bool -> Bool -> Bool -> FastMathFlags
noNaNs :: FastMathFlags -> Bool
noInfs :: FastMathFlags -> Bool
noSignedZeros :: FastMathFlags -> Bool
allowReciprocal :: FastMathFlags -> Bool

-- | non-terminator instructions:
--   <a>http://llvm.org/docs/LangRef.html#binaryops</a>
--   <a>http://llvm.org/docs/LangRef.html#bitwiseops</a>
--   <a>http://llvm.org/docs/LangRef.html#memoryops</a>
--   <a>http://llvm.org/docs/LangRef.html#otherops</a>
data Instruction
Add :: Bool -> Bool -> Operand -> Operand -> InstructionMetadata -> Instruction
nsw :: Instruction -> Bool
nuw :: Instruction -> Bool
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
FAdd :: FastMathFlags -> Operand -> Operand -> InstructionMetadata -> Instruction
fastMathFlags :: Instruction -> FastMathFlags
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
Sub :: Bool -> Bool -> Operand -> Operand -> InstructionMetadata -> Instruction
nsw :: Instruction -> Bool
nuw :: Instruction -> Bool
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
FSub :: FastMathFlags -> Operand -> Operand -> InstructionMetadata -> Instruction
fastMathFlags :: Instruction -> FastMathFlags
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
Mul :: Bool -> Bool -> Operand -> Operand -> InstructionMetadata -> Instruction
nsw :: Instruction -> Bool
nuw :: Instruction -> Bool
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
FMul :: FastMathFlags -> Operand -> Operand -> InstructionMetadata -> Instruction
fastMathFlags :: Instruction -> FastMathFlags
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
UDiv :: Bool -> Operand -> Operand -> InstructionMetadata -> Instruction
exact :: Instruction -> Bool
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
SDiv :: Bool -> Operand -> Operand -> InstructionMetadata -> Instruction
exact :: Instruction -> Bool
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
FDiv :: FastMathFlags -> Operand -> Operand -> InstructionMetadata -> Instruction
fastMathFlags :: Instruction -> FastMathFlags
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
URem :: Operand -> Operand -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
SRem :: Operand -> Operand -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
FRem :: FastMathFlags -> Operand -> Operand -> InstructionMetadata -> Instruction
fastMathFlags :: Instruction -> FastMathFlags
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
Shl :: Bool -> Bool -> Operand -> Operand -> InstructionMetadata -> Instruction
nsw :: Instruction -> Bool
nuw :: Instruction -> Bool
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
LShr :: Bool -> Operand -> Operand -> InstructionMetadata -> Instruction
exact :: Instruction -> Bool
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
AShr :: Bool -> Operand -> Operand -> InstructionMetadata -> Instruction
exact :: Instruction -> Bool
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
And :: Operand -> Operand -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
Or :: Operand -> Operand -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
Xor :: Operand -> Operand -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
Alloca :: Type -> Maybe Operand -> Word32 -> InstructionMetadata -> Instruction
allocatedType :: Instruction -> Type
numElements :: Instruction -> Maybe Operand
alignmentI :: Instruction -> Word32
metadata :: Instruction -> InstructionMetadata
Load :: Bool -> Operand -> Maybe Atomicity -> Word32 -> InstructionMetadata -> Instruction
volatile :: Instruction -> Bool
address :: Instruction -> Operand
maybeAtomicity :: Instruction -> Maybe Atomicity
alignmentI :: Instruction -> Word32
metadata :: Instruction -> InstructionMetadata
Store :: Bool -> Operand -> Operand -> Maybe Atomicity -> Word32 -> InstructionMetadata -> Instruction
volatile :: Instruction -> Bool
address :: Instruction -> Operand
value :: Instruction -> Operand
maybeAtomicity :: Instruction -> Maybe Atomicity
alignmentI :: Instruction -> Word32
metadata :: Instruction -> InstructionMetadata
GetElementPtr :: Bool -> Operand -> [Operand] -> InstructionMetadata -> Instruction
inBounds :: Instruction -> Bool
address :: Instruction -> Operand
indices :: Instruction -> [Operand]
metadata :: Instruction -> InstructionMetadata
Fence :: Atomicity -> InstructionMetadata -> Instruction
atomicity :: Instruction -> Atomicity
metadata :: Instruction -> InstructionMetadata
CmpXchg :: Bool -> Operand -> Operand -> Operand -> Atomicity -> InstructionMetadata -> Instruction
volatile :: Instruction -> Bool
address :: Instruction -> Operand
expected :: Instruction -> Operand
replacement :: Instruction -> Operand
atomicity :: Instruction -> Atomicity
metadata :: Instruction -> InstructionMetadata
AtomicRMW :: Bool -> RMWOperation -> Operand -> Operand -> Atomicity -> InstructionMetadata -> Instruction
volatile :: Instruction -> Bool
rmwOperation :: Instruction -> RMWOperation
address :: Instruction -> Operand
value :: Instruction -> Operand
atomicity :: Instruction -> Atomicity
metadata :: Instruction -> InstructionMetadata
Trunc :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
ZExt :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
SExt :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
FPToUI :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
FPToSI :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
UIToFP :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
SIToFP :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
FPTrunc :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
FPExt :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
PtrToInt :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
IntToPtr :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
BitCast :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
AddrSpaceCast :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
ICmp :: IntegerPredicate -> Operand -> Operand -> InstructionMetadata -> Instruction
iPredicate :: Instruction -> IntegerPredicate
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
FCmp :: FloatingPointPredicate -> Operand -> Operand -> InstructionMetadata -> Instruction
fpPredicate :: Instruction -> FloatingPointPredicate
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
Phi :: Type -> [(Operand, Name)] -> InstructionMetadata -> Instruction
type' :: Instruction -> Type
incomingValues :: Instruction -> [(Operand, Name)]
metadata :: Instruction -> InstructionMetadata
Call :: Bool -> CallingConvention -> [ParameterAttribute] -> CallableOperand -> [(Operand, [ParameterAttribute])] -> [FunctionAttribute] -> InstructionMetadata -> Instruction
isTailCall :: Instruction -> Bool
callingConvention :: Instruction -> CallingConvention
returnAttributes :: Instruction -> [ParameterAttribute]
function :: Instruction -> CallableOperand
arguments :: Instruction -> [(Operand, [ParameterAttribute])]
functionAttributes :: Instruction -> [FunctionAttribute]
metadata :: Instruction -> InstructionMetadata
Select :: Operand -> Operand -> Operand -> InstructionMetadata -> Instruction
condition' :: Instruction -> Operand
trueValue :: Instruction -> Operand
falseValue :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
VAArg :: Operand -> Type -> InstructionMetadata -> Instruction
argList :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
ExtractElement :: Operand -> Operand -> InstructionMetadata -> Instruction
vector :: Instruction -> Operand
index :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
InsertElement :: Operand -> Operand -> Operand -> InstructionMetadata -> Instruction
vector :: Instruction -> Operand
element :: Instruction -> Operand
index :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
ShuffleVector :: Operand -> Operand -> Constant -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
mask :: Instruction -> Constant
metadata :: Instruction -> InstructionMetadata
ExtractValue :: Operand -> [Word32] -> InstructionMetadata -> Instruction
aggregate :: Instruction -> Operand
indices' :: Instruction -> [Word32]
metadata :: Instruction -> InstructionMetadata
InsertValue :: Operand -> Operand -> [Word32] -> InstructionMetadata -> Instruction
aggregate :: Instruction -> Operand
element :: Instruction -> Operand
indices' :: Instruction -> [Word32]
metadata :: Instruction -> InstructionMetadata
LandingPad :: Type -> Operand -> Bool -> [LandingPadClause] -> InstructionMetadata -> Instruction
type' :: Instruction -> Type
personalityFunction :: Instruction -> Operand
cleanup :: Instruction -> Bool
clauses :: Instruction -> [LandingPadClause]
metadata :: Instruction -> InstructionMetadata
AntiInstruction :: String -> Instruction
Ret :: Maybe Operand -> InstructionMetadata -> Instruction
returnOperand :: Instruction -> Maybe Operand
metadata :: Instruction -> InstructionMetadata
CondBr :: Operand -> Name -> Name -> InstructionMetadata -> Instruction
condition :: Instruction -> Operand
trueDest :: Instruction -> Name
falseDest :: Instruction -> Name
metadata' :: Instruction -> InstructionMetadata
Br :: Name -> InstructionMetadata -> Instruction
dest :: Instruction -> Name
metadata' :: Instruction -> InstructionMetadata
Switch :: Operand -> Name -> [(Constant, Name)] -> InstructionMetadata -> Instruction
operand0' :: Instruction -> Operand
defaultDest :: Instruction -> Name
dests :: Instruction -> [(Constant, Name)]
metadata' :: Instruction -> InstructionMetadata
IndirectBr :: Operand -> [Name] -> InstructionMetadata -> Instruction
operand0' :: Instruction -> Operand
possibleDests :: Instruction -> [Name]
metadata' :: Instruction -> InstructionMetadata
Invoke :: CallingConvention -> [ParameterAttribute] -> CallableOperand -> [(Operand, [ParameterAttribute])] -> [FunctionAttribute] -> Name -> Name -> InstructionMetadata -> Instruction
callingConvention' :: Instruction -> CallingConvention
returnAttributes' :: Instruction -> [ParameterAttribute]
function' :: Instruction -> CallableOperand
arguments' :: Instruction -> [(Operand, [ParameterAttribute])]
functionAttributes' :: Instruction -> [FunctionAttribute]
returnDest :: Instruction -> Name
exceptionDest :: Instruction -> Name
metadata :: Instruction -> InstructionMetadata
Resume :: Operand -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
Unreachable :: InstructionMetadata -> Instruction
metadata :: Instruction -> InstructionMetadata
OperandInstruction :: Operand -> Instruction

-- | Instances of instructions may be given a name, allowing their results
--   to be referenced as <a>Operand</a>s. Sometimes instructions - e.g. a
--   call to a function returning void - don't need names.
data NamedInstruction
(:=) :: Name -> Instruction -> NamedInstruction
Do :: Instruction -> NamedInstruction
AntiInstructionList :: String -> NamedInstruction
AntiBasicBlock :: String -> NamedInstruction
AntiBasicBlockList :: String -> NamedInstruction
data LabeledInstruction
Labeled :: Name -> NamedInstruction -> LabeledInstruction
label :: LabeledInstruction -> Name
instruction :: LabeledInstruction -> NamedInstruction
ForLoop :: Name -> Type -> Name -> Direction -> Operand -> Operand -> Operand -> [LabeledInstruction] -> LabeledInstruction
label :: LabeledInstruction -> Name
iterType :: LabeledInstruction -> Type
iterName :: LabeledInstruction -> Name
direction :: LabeledInstruction -> Direction
from :: LabeledInstruction -> Operand
to :: LabeledInstruction -> Operand
step :: LabeledInstruction -> Operand
body :: LabeledInstruction -> [LabeledInstruction]
ITE :: Name -> Operand -> [LabeledInstruction] -> [LabeledInstruction] -> LabeledInstruction
label :: LabeledInstruction -> Name
cond :: LabeledInstruction -> Operand
then_body :: LabeledInstruction -> [LabeledInstruction]
else_body :: LabeledInstruction -> [LabeledInstruction]
While :: Name -> Operand -> [LabeledInstruction] -> LabeledInstruction
label :: LabeledInstruction -> Name
cond :: LabeledInstruction -> Operand
body :: LabeledInstruction -> [LabeledInstruction]

-- | A <a>MetadataNodeID</a> is a number for identifying a metadata node.
--   Note this is different from "named metadata", which are represented
--   with <a>NamedMetadataDefinition</a>.
newtype MetadataNodeID
MetadataNodeID :: Word -> MetadataNodeID

-- | <a>http://llvm.org/docs/LangRef.html#metadata</a>
data MetadataNode
MetadataNode :: [Maybe Operand] -> MetadataNode
MetadataNodeReference :: MetadataNodeID -> MetadataNode

-- | An <a>Operand</a> is roughly that which is an argument to an
--   <a>Instruction</a>
data Operand

-- | %foo
LocalReference :: Type -> Name -> Operand

-- | <a>Constant</a>s include <a>GlobalReference</a>, for @foo
ConstantOperand :: Constant -> Operand
MetadataStringOperand :: String -> Operand
MetadataNodeOperand :: MetadataNode -> Operand
AntiOperand :: String -> Operand

-- | The <a>Call</a> instruction is special: the callee can be inline
--   assembly
type CallableOperand = Either InlineAssembly Operand

-- | <a>http://llvm.org/docs/LangRef.html#constants</a>
--   
--   N.B. - <a>http://llvm.org/docs/LangRef.html#constant-expressions</a>
--   
--   Although constant expressions and instructions have many similarites,
--   there are important differences - so they're represented using
--   different types in this AST. At the cost of making it harder to move
--   an code back and forth between being constant and not, this approach
--   embeds more of the rules of what IR is legal into the Haskell types.
data Constant
Int :: Word32 -> Integer -> Constant
integerBits :: Constant -> Word32
integerValue :: Constant -> Integer
IntAntiBs :: String -> Integer -> Constant
antiIntegerBits :: Constant -> String
integerValue :: Constant -> Integer
Float :: SomeFloat -> Constant
floatValue :: Constant -> SomeFloat
Null :: Type -> Constant
constantType :: Constant -> Type
Struct :: Maybe Name -> Bool -> [Constant] -> Constant
structName :: Constant -> Maybe Name
_isPacked :: Constant -> Bool
memberValues :: Constant -> [Constant]
Array :: Type -> [Constant] -> Constant
memberType :: Constant -> Type
memberValues :: Constant -> [Constant]
Vector :: [Constant] -> Constant
memberValues :: Constant -> [Constant]
Undef :: Type -> Constant
constantType :: Constant -> Type
BlockAddress :: Name -> Name -> Constant
blockAddressFunction :: Constant -> Name
blockAddressBlock :: Constant -> Name
GlobalReference :: Type -> Name -> Constant
AntiConstant :: String -> Constant

-- | Objects of various sorts in LLVM IR are identified by address in the
--   LLVM C++ API, and may be given a string name. When printed to (resp.
--   read from) human-readable LLVM assembly, objects without string names
--   are numbered sequentially (resp. must be numbered sequentially).
--   String names may be quoted, and are quoted when printed if they would
--   otherwise be misread - e.g. when containing special characters.
--   
--   <pre>
--   7
--   </pre>
--   
--   means the seventh unnamed object, while
--   
--   <pre>
--   "7"
--   </pre>
--   
--   means the object named with the string "7".
--   
--   This libraries handling of <a>UnName</a>s during translation of the
--   AST down into C++ IR is somewhat more forgiving than the LLVM assembly
--   parser: it does not require that unnamed values be numbered
--   sequentially; however, the numbers of <a>UnName</a>s passed into C++
--   cannot be preserved in the C++ objects. If the C++ IR is printed as
--   assembly or translated into a Haskell AST, unnamed nodes will be
--   renumbered sequentially. Thus unnamed node numbers should be thought
--   of as having any scope limited to the <a>Module</a> in which they are
--   used.
data Name

-- | a string name
Name :: String -> Name

-- | a number for a nameless thing
UnName :: Word -> Name
NeedsName :: Name
AntiName :: String -> Name

-- | <a>http://llvm.org/docs/LangRef.html#type-system</a>
data Type

-- | <a>http://llvm.org/docs/LangRef.html#void-type</a>
VoidType :: Type

-- | <a>http://llvm.org/docs/LangRef.html#integer-type</a>
IntegerType :: Word32 -> Type
typeBits :: Type -> Word32

-- | <a>http://llvm.org/docs/LangRef.html#pointer-type</a>
PointerType :: Type -> AddrSpace -> Type
pointerReferent :: Type -> Type
pointerAddrSpace :: Type -> AddrSpace

-- | <a>http://llvm.org/docs/LangRef.html#floating-point-types</a>
FloatingPointType :: Word32 -> FloatingPointFormat -> Type
typeBits :: Type -> Word32
floatingPointFormat :: Type -> FloatingPointFormat

-- | <a>http://llvm.org/docs/LangRef.html#function-type</a>
FunctionType :: Type -> [Type] -> Bool -> Type
resultType :: Type -> Type
argumentTypes :: Type -> [Type]
isVarArg :: Type -> Bool

-- | <a>http://llvm.org/docs/LangRef.html#vector-type</a>
VectorType :: Word32 -> Type -> Type
nVectorElements :: Type -> Word32
elementType :: Type -> Type

-- | <a>http://llvm.org/docs/LangRef.html#structure-type</a>
StructureType :: Bool -> [Type] -> Type
isPacked :: Type -> Bool
elementTypes :: Type -> [Type]

-- | <a>http://llvm.org/docs/LangRef.html#array-type</a>
ArrayType :: Word64 -> Type -> Type
nArrayElements :: Type -> Word64
elementType :: Type -> Type

-- | <a>http://llvm.org/docs/LangRef.html#opaque-structure-types</a>
NamedTypeReference :: Name -> Type

-- | <a>http://llvm.org/docs/LangRef.html#metadata-type</a>
MetadataType :: Type
AntiType :: String -> Type

-- | <a>http://llvm.org/docs/LangRef.html#inline-assembler-expressions</a>
--   to be used through <a>CallableOperand</a> with a <a>Call</a>
--   instruction
data InlineAssembly
InlineAssembly :: Type -> String -> String -> Bool -> Bool -> Dialect -> InlineAssembly
__type' :: InlineAssembly -> Type
assembly :: InlineAssembly -> String
constraints :: InlineAssembly -> String
hasSideEffects :: InlineAssembly -> Bool
alignStack :: InlineAssembly -> Bool
dialect :: InlineAssembly -> Dialect

-- | a description of the various data layout properties which may be used
--   during optimization
data DataLayout
DataLayout :: Maybe Endianness -> Maybe Word32 -> Map AddrSpace (Word32, AlignmentInfo) -> Map (AlignType, Word32) AlignmentInfo -> Maybe (Set Word32) -> DataLayout
endianness :: DataLayout -> Maybe Endianness
stackAlignment :: DataLayout -> Maybe Word32
pointerLayouts :: DataLayout -> Map AddrSpace (Word32, AlignmentInfo)
typeLayouts :: DataLayout -> Map (AlignType, Word32) AlignmentInfo
nativeSizes :: DataLayout -> Maybe (Set Word32)
AntiDataLayout :: String -> DataLayout
data TargetTriple
NoTargetTriple :: TargetTriple
TargetTriple :: String -> TargetTriple
AntiTargetTriple :: String -> TargetTriple
data Extensions
Antiquotation :: Extensions
Loops :: Extensions
type ExtensionsInt = Word32
instance Lift Double
instance Lift Float
instance Lift Word
instance Lift Word16
instance Lift Word32
instance Lift Word64
instance Lift FastMathFlags
instance Lift TargetTriple
instance Lift Module
instance Lift Definition
instance Lift a0 => Lift (Set a0)
instance Lift AlignmentInfo
instance Lift AlignType
instance (Lift k0, Lift a0) => Lift (Map k0 a0)
instance Lift Endianness
instance Lift DataLayout
instance Lift FloatingPointFormat
instance Lift Type
instance Lift Operand
instance Lift MetadataNodeID
instance Lift MetadataNode
instance Lift Name
instance Lift MemoryOrdering
instance Lift LandingPadClause
instance Lift Atomicity
instance Lift RMWOperation
instance Lift Dialect
instance Lift InlineAssembly
instance Lift Instruction
instance Lift LabeledInstruction
instance Lift NamedInstruction
instance Lift Parameter
instance Lift Direction
instance Lift FloatingPointPredicate
instance Lift IntegerPredicate
instance Lift SomeFloat
instance Lift FunctionAttribute
instance Lift CallingConvention
instance Lift AddrSpace
instance Lift Constant
instance Lift Global
instance Lift ParameterAttribute
instance Lift Linkage
instance Lift Visibility
instance Typeable Direction
instance Typeable FastMathFlags
instance Typeable MetadataNodeID
instance Typeable Name
instance Typeable Type
instance Typeable Constant
instance Typeable LandingPadClause
instance Typeable Operand
instance Typeable MetadataNode
instance Typeable Parameter
instance Typeable InlineAssembly
instance Typeable Instruction
instance Typeable NamedInstruction
instance Typeable LabeledInstruction
instance Typeable Global
instance Typeable Definition
instance Typeable DataLayout
instance Typeable TargetTriple
instance Typeable Module
instance Eq Extensions
instance Ord Extensions
instance Enum Extensions
instance Show Extensions
instance Eq Direction
instance Read Direction
instance Show Direction
instance Data Direction
instance Eq FastMathFlags
instance Ord FastMathFlags
instance Read FastMathFlags
instance Show FastMathFlags
instance Data FastMathFlags
instance Eq MetadataNodeID
instance Ord MetadataNodeID
instance Read MetadataNodeID
instance Show MetadataNodeID
instance Data MetadataNodeID
instance Eq Name
instance Ord Name
instance Read Name
instance Show Name
instance Data Name
instance Eq Type
instance Ord Type
instance Read Type
instance Show Type
instance Data Type
instance Eq Constant
instance Ord Constant
instance Read Constant
instance Show Constant
instance Data Constant
instance Eq LandingPadClause
instance Ord LandingPadClause
instance Read LandingPadClause
instance Show LandingPadClause
instance Data LandingPadClause
instance Eq Operand
instance Ord Operand
instance Read Operand
instance Show Operand
instance Data Operand
instance Eq MetadataNode
instance Ord MetadataNode
instance Read MetadataNode
instance Show MetadataNode
instance Data MetadataNode
instance Eq Parameter
instance Read Parameter
instance Show Parameter
instance Data Parameter
instance Eq InlineAssembly
instance Read InlineAssembly
instance Show InlineAssembly
instance Data InlineAssembly
instance Eq Instruction
instance Read Instruction
instance Show Instruction
instance Data Instruction
instance Eq NamedInstruction
instance Read NamedInstruction
instance Show NamedInstruction
instance Data NamedInstruction
instance Eq LabeledInstruction
instance Read LabeledInstruction
instance Show LabeledInstruction
instance Data LabeledInstruction
instance Eq Global
instance Read Global
instance Show Global
instance Data Global
instance Eq Definition
instance Read Definition
instance Show Definition
instance Data Definition
instance Eq DataLayout
instance Ord DataLayout
instance Read DataLayout
instance Show DataLayout
instance Data DataLayout
instance Eq TargetTriple
instance Ord TargetTriple
instance Read TargetTriple
instance Show TargetTriple
instance Data TargetTriple
instance Eq Module
instance Read Module
instance Show Module
instance Data Module

module LLVM.General.Quote.Parser.Tokens
data Token
Teof :: Token
TintConst :: Integer -> Token
TfloatConst :: Rational -> Token
TstringConst :: String -> Token
Tnamed :: Visibility -> String -> Token
Tunnamed :: Visibility -> Word -> Token
TjumpLabel :: String -> Token
Tlparen :: Token
Trparen :: Token
Tlbrack :: Token
Trbrack :: Token
Tlbrace :: Token
Trbrace :: Token
Tlt :: Token
Tgt :: Token
Tcomma :: Token
Tassign :: Token
Tstar :: Token
Tminus :: Token
Tbang :: Token
Tpoints :: Token
Tx :: Token
Tzeroinitializer :: Token
Tundef :: Token
Tglobal :: Token
Tconstant :: Token
Talias :: Token
Tunwind :: Token
Tunordered :: Token
Tmonotonic :: Token
Tacquire :: Token
Trelease :: Token
Tacq_rel :: Token
Tseq_cst :: Token
Tsinglethread :: Token
Txchg :: Token
Tnand :: Token
Tmax :: Token
Tmin :: Token
Tumax :: Token
Tumin :: Token
Tcleanup :: Token
Tcatch :: Token
Tfilter :: Token
Tpersonality :: Token
Tprivate :: Token
Tinternal :: Token
Tavailable_externally :: Token
Tlinkonce :: Token
Tweak :: Token
Tcommon :: Token
Tappending :: Token
Textern_weak :: Token
Tlinkonce_odr :: Token
Tweak_odr :: Token
Texternal :: Token
Tdefault :: Token
Thidden :: Token
Tprotected :: Token
Tccc :: Token
Tfastcc :: Token
Tcoldcc :: Token
Tcc :: Token
Tatomic :: Token
Tnull :: Token
Texact :: Token
Taddrspace :: Token
Tblockaddress :: Token
Tmodule :: Token
Tasm :: Token
Ttype :: Token
Topaque :: Token
Tsideeffect :: Token
Tinteldialect :: Token
Tsection :: Token
Tgc :: Token
Ttail :: Token
Tret :: Token
Tbr :: Token
Tswitch :: Token
Tindirectbr :: Token
Tinvoke :: Token
Tresume :: Token
Tunreachable :: Token
Tadd :: Token
Tfadd :: Token
Tsub :: Token
Tfsub :: Token
Tmul :: Token
Tfmul :: Token
Tudiv :: Token
Tsdiv :: Token
Tfdiv :: Token
Turem :: Token
Tsrem :: Token
Tfrem :: Token
Tshl :: Token
Tlshr :: Token
Tashr :: Token
Tand :: Token
Tor :: Token
Txor :: Token
Talloca :: Token
Tload :: Token
Tstore :: Token
Tgetelementptr :: Token
Tfence :: Token
Tcmpxchg :: Token
Tatomicrmw :: Token
Ttrunc :: Token
Tzext :: Token
Tsext :: Token
Tfptoui :: Token
Tfptosi :: Token
Tuitofp :: Token
Tsitofp :: Token
Tfptrunc :: Token
Tfpext :: Token
Tptrtoint :: Token
Tinttoptr :: Token
Tbitcast :: Token
Taddrspacecast :: Token
Ticmp :: Token
Tfcmp :: Token
Tphi :: Token
Tcall :: Token
Tselect :: Token
Tvaarg :: Token
Textractelement :: Token
Tinsertelement :: Token
Tshufflevector :: Token
Textractvalue :: Token
Tinsertvalue :: Token
Tlandingpad :: Token
Teq :: Token
Tne :: Token
Tugt :: Token
Tuge :: Token
Tult :: Token
Tule :: Token
Tsgt :: Token
Tsge :: Token
Tslt :: Token
Tsle :: Token
Tfalse :: Token
Toeq :: Token
Togt :: Token
Toge :: Token
Tolt :: Token
Tole :: Token
Tone :: Token
Tord :: Token
Tuno :: Token
Tueq :: Token
Tune :: Token
Ttrue :: Token
Tlabel :: Token
Tvolatile :: Token
Tinbounds :: Token
Talign :: Token
Tnnan :: Token
Tninf :: Token
Tnsz :: Token
Tarcp :: Token
Tfast :: Token
Tto :: Token
Tnsw :: Token
Tnuw :: Token
Ttarget :: Token
Tdatalayout :: Token
Ttriple :: Token
Tdefine :: Token
Tdeclare :: Token
Thalf :: Token
Tfloat :: Token
Tdouble :: Token
TintegerType :: Word32 -> Token
Tvoid :: Token
Tmetadata :: Token
Tzeroext :: Token
Tsignext :: Token
Tinreg :: Token
Tbyval :: Token
Tsret :: Token
Tnoalias :: Token
Tnocapture :: Token
Tnest :: Token
Talignstack :: Token
Talwaysinline :: Token
Tinlinehint :: Token
Tnaked :: Token
Tnoimplicitfloat :: Token
Tnoinline :: Token
Tnonlazybind :: Token
Tnoredzone :: Token
Tnoreturn :: Token
Tnounwind :: Token
Toptsize :: Token
Treadnone :: Token
Treadonly :: Token
Tssp :: Token
Tsspreq :: Token
Tuwtable :: Token
Tfor :: Token
Tin :: Token
Tstep :: Token
Tdownto :: Token
Tif :: Token
Telse :: Token
Twhile :: Token
Tanti_dl :: String -> Token
Tanti_tt :: String -> Token
Tanti_def :: String -> Token
Tanti_defs :: String -> Token
Tanti_bb :: String -> Token
Tanti_bbs :: String -> Token
Tanti_instr :: String -> Token
Tanti_instrs :: String -> Token
Tanti_type :: String -> Token
Tanti_opr :: String -> Token
Tanti_const :: String -> Token
Tanti_id :: String -> Token
Tanti_gid :: String -> Token
Tanti_param :: String -> Token
Tanti_params :: String -> Token
data Visibility
Global :: Visibility
Local :: Visibility
Meta :: Visibility
data Extensions
Antiquotation :: Extensions
Loops :: Extensions
type ExtensionsInt = Word32
keywords :: [(String, Token, Maybe [Extensions])]
keywordMap :: Map String (Token, Maybe ExtensionsInt)
instance Eq Visibility
instance Ord Visibility
instance Show Visibility
instance Eq Token
instance Ord Token
instance Pretty Token
instance Show Token


module LLVM.General.Quote.Parser.Monad
data P a
runP :: P a -> PState -> Either SomeException (a, PState)
evalP :: P a -> PState -> Either SomeException a
data PState
emptyPState :: [Extensions] -> ByteString -> Pos -> PState
getInput :: P AlexInput
setInput :: AlexInput -> P ()
pushLexState :: Int -> P ()
popLexState :: P Int
getLexState :: P Int
getCurToken :: P (L Token)
setCurToken :: L Token -> P ()
useExts :: ExtensionsInt -> P Bool
antiquotationExts :: ExtensionsInt
data LexerException
LexerException :: Pos -> Doc -> LexerException
data ParserException
ParserException :: Loc -> Doc -> ParserException
quoteTok :: Doc -> Doc
failAt :: Loc -> String -> P a
lexerError :: AlexInput -> Doc -> P a
unexpectedEOF :: AlexInput -> P a
emptyCharacterLiteral :: AlexInput -> P a
illegalCharacterLiteral :: AlexInput -> P a
illegalNumericalLiteral :: AlexInput -> P a
parserError :: Loc -> Doc -> P a
unclosed :: Loc -> String -> P a
expected :: [String] -> Maybe String -> P b
expectedAt :: L Token -> [String] -> Maybe String -> P b
data AlexInput
AlexInput :: {-# UNPACK #-} !Pos -> {-# UNPACK #-} !Char -> {-# UNPACK #-} !ByteString -> {-# UNPACK #-} !Int -> AlexInput
alexPos :: AlexInput -> {-# UNPACK #-} !Pos
alexPrevChar :: AlexInput -> {-# UNPACK #-} !Char
alexInput :: AlexInput -> {-# UNPACK #-} !ByteString
alexOff :: AlexInput -> {-# UNPACK #-} !Int
alexGetChar :: AlexInput -> Maybe (Char, AlexInput)
alexGetByte :: AlexInput -> Maybe (Word8, AlexInput)
alexInputPrevChar :: AlexInput -> Char
nextChar :: P Char
peekChar :: P Char
maybePeekChar :: P (Maybe Char)
skipChar :: P ()

-- | The components of an <a>AlexPredicate</a> are the predicate state,
--   input stream before the token, length of the token, input stream after
--   the token.
type AlexPredicate = PState -> AlexInput -> Int -> AlexInput -> Bool
allowAnti :: AlexPredicate
ifExtension :: ExtensionsInt -> AlexPredicate
instance Typeable LexerException
instance Typeable ParserException
instance Show ParserException
instance Exception ParserException
instance Show LexerException
instance Exception LexerException
instance MonadError SomeException P
instance MonadState PState P
instance Monad P
instance Applicative P
instance Functor P


module LLVM.General.Quote.Parser.Lexer
lexToken :: P (L Token)
instance Functor AlexLastAcc

module LLVM.General.Quote.Parser.Parser
newtype HappyAbsSyn
HappyAbsSyn :: HappyAny -> HappyAbsSyn
type HappyAny = Any
happyIn7 :: (Type -> Constant) -> (HappyAbsSyn)
happyOut7 :: (HappyAbsSyn) -> (Type -> Constant)
happyIn8 :: (Constant) -> (HappyAbsSyn)
happyOut8 :: (HappyAbsSyn) -> (Constant)
happyIn9 :: (Type -> Maybe Constant) -> (HappyAbsSyn)
happyOut9 :: (HappyAbsSyn) -> (Type -> Maybe Constant)
happyIn10 :: (RevList Constant) -> (HappyAbsSyn)
happyOut10 :: (HappyAbsSyn) -> (RevList Constant)
happyIn11 :: (Type -> Operand) -> (HappyAbsSyn)
happyOut11 :: (HappyAbsSyn) -> (Type -> Operand)
happyIn12 :: (Maybe Operand) -> (HappyAbsSyn)
happyOut12 :: (HappyAbsSyn) -> (Maybe Operand)
happyIn13 :: (Operand) -> (HappyAbsSyn)
happyOut13 :: (HappyAbsSyn) -> (Operand)
happyIn14 :: (Bool) -> (HappyAbsSyn)
happyOut14 :: (HappyAbsSyn) -> (Bool)
happyIn15 :: (Bool) -> (HappyAbsSyn)
happyOut15 :: (HappyAbsSyn) -> (Bool)
happyIn16 :: (Bool) -> (HappyAbsSyn)
happyOut16 :: (HappyAbsSyn) -> (Bool)
happyIn17 :: (Bool) -> (HappyAbsSyn)
happyOut17 :: (HappyAbsSyn) -> (Bool)
happyIn18 :: (Bool) -> (HappyAbsSyn)
happyOut18 :: (HappyAbsSyn) -> (Bool)
happyIn19 :: (Bool) -> (HappyAbsSyn)
happyOut19 :: (HappyAbsSyn) -> (Bool)
happyIn20 :: (FastMathFlags) -> (HappyAbsSyn)
happyOut20 :: (HappyAbsSyn) -> (FastMathFlags)
happyIn21 :: (Bool) -> (HappyAbsSyn)
happyOut21 :: (HappyAbsSyn) -> (Bool)
happyIn22 :: (Word32) -> (HappyAbsSyn)
happyOut22 :: (HappyAbsSyn) -> (Word32)
happyIn23 :: (Bool) -> (HappyAbsSyn)
happyOut23 :: (HappyAbsSyn) -> (Bool)
happyIn24 :: (RevList Operand) -> (HappyAbsSyn)
happyOut24 :: (HappyAbsSyn) -> (RevList Operand)
happyIn25 :: (IntegerPredicate) -> (HappyAbsSyn)
happyOut25 :: (HappyAbsSyn) -> (IntegerPredicate)
happyIn26 :: (FloatingPointPredicate) -> (HappyAbsSyn)
happyOut26 :: (HappyAbsSyn) -> (FloatingPointPredicate)
happyIn27 :: (MemoryOrdering) -> (HappyAbsSyn)
happyOut27 :: (HappyAbsSyn) -> (MemoryOrdering)
happyIn28 :: (Atomicity) -> (HappyAbsSyn)
happyOut28 :: (HappyAbsSyn) -> (Atomicity)
happyIn29 :: (RMWOperation) -> (HappyAbsSyn)
happyOut29 :: (HappyAbsSyn) -> (RMWOperation)
happyIn30 :: (Bool) -> (HappyAbsSyn)
happyOut30 :: (HappyAbsSyn) -> (Bool)
happyIn31 :: (Bool) -> (HappyAbsSyn)
happyOut31 :: (HappyAbsSyn) -> (Bool)
happyIn32 :: (LandingPadClause) -> (HappyAbsSyn)
happyOut32 :: (HappyAbsSyn) -> (LandingPadClause)
happyIn33 :: (RevList LandingPadClause) -> (HappyAbsSyn)
happyOut33 :: (HappyAbsSyn) -> (RevList LandingPadClause)
happyIn34 :: (Type -> (Operand, Name)) -> (HappyAbsSyn)
happyOut34 :: (HappyAbsSyn) -> (Type -> (Operand, Name))
happyIn35 :: (Type -> RevList (Operand, Name)) -> (HappyAbsSyn)
happyOut35 :: (HappyAbsSyn) -> (Type -> RevList (Operand, Name))
happyIn36 :: (ParameterAttribute) -> (HappyAbsSyn)
happyOut36 :: (HappyAbsSyn) -> (ParameterAttribute)
happyIn37 :: (RevList ParameterAttribute) -> (HappyAbsSyn)
happyOut37 :: (HappyAbsSyn) -> (RevList ParameterAttribute)
happyIn38 :: ((Type, (Operand, [ParameterAttribute]))) -> (HappyAbsSyn)
happyOut38 :: (HappyAbsSyn) -> ((Type, (Operand, [ParameterAttribute])))
happyIn39 :: (RevList (Type, (Operand, [ParameterAttribute]))) -> (HappyAbsSyn)
happyOut39 :: (HappyAbsSyn) -> (RevList (Type, (Operand, [ParameterAttribute])))
happyIn40 :: (RevList (Type, (Operand, [ParameterAttribute]))) -> (HappyAbsSyn)
happyOut40 :: (HappyAbsSyn) -> (RevList (Type, (Operand, [ParameterAttribute])))
happyIn41 :: (Bool) -> (HappyAbsSyn)
happyOut41 :: (HappyAbsSyn) -> (Bool)
happyIn42 :: (Bool) -> (HappyAbsSyn)
happyOut42 :: (HappyAbsSyn) -> (Bool)
happyIn43 :: (Dialect) -> (HappyAbsSyn)
happyOut43 :: (HappyAbsSyn) -> (Dialect)
happyIn44 :: ([Type] -> CallableOperand) -> (HappyAbsSyn)
happyOut44 :: (HappyAbsSyn) -> ([Type] -> CallableOperand)
happyIn45 :: (Bool) -> (HappyAbsSyn)
happyOut45 :: (HappyAbsSyn) -> (Bool)
happyIn46 :: (Word32) -> (HappyAbsSyn)
happyOut46 :: (HappyAbsSyn) -> (Word32)
happyIn47 :: (RevList Word32) -> (HappyAbsSyn)
happyOut47 :: (HappyAbsSyn) -> (RevList Word32)
happyIn48 :: ((Constant, Name)) -> (HappyAbsSyn)
happyOut48 :: (HappyAbsSyn) -> ((Constant, Name))
happyIn49 :: (RevList (Constant, Name)) -> (HappyAbsSyn)
happyOut49 :: (HappyAbsSyn) -> (RevList (Constant, Name))
happyIn50 :: (Name) -> (HappyAbsSyn)
happyOut50 :: (HappyAbsSyn) -> (Name)
happyIn51 :: (RevList Name) -> (HappyAbsSyn)
happyOut51 :: (HappyAbsSyn) -> (RevList Name)
happyIn52 :: (MetadataNodeID) -> (HappyAbsSyn)
happyOut52 :: (HappyAbsSyn) -> (MetadataNodeID)
happyIn53 :: (RevList MetadataNodeID) -> (HappyAbsSyn)
happyOut53 :: (HappyAbsSyn) -> (RevList MetadataNodeID)
happyIn54 :: (MetadataNode) -> (HappyAbsSyn)
happyOut54 :: (HappyAbsSyn) -> (MetadataNode)
happyIn55 :: ((String, MetadataNode)) -> (HappyAbsSyn)
happyOut55 :: (HappyAbsSyn) -> ((String, MetadataNode))
happyIn56 :: (RevList (String, MetadataNode)) -> (HappyAbsSyn)
happyOut56 :: (HappyAbsSyn) -> (RevList (String, MetadataNode))
happyIn57 :: (InstructionMetadata -> Instruction) -> (HappyAbsSyn)
happyOut57 :: (HappyAbsSyn) -> (InstructionMetadata -> Instruction)
happyIn58 :: (Instruction) -> (HappyAbsSyn)
happyOut58 :: (HappyAbsSyn) -> (Instruction)
happyIn59 :: (Name) -> (HappyAbsSyn)
happyOut59 :: (HappyAbsSyn) -> (Name)
happyIn60 :: (NamedInstruction) -> (HappyAbsSyn)
happyOut60 :: (HappyAbsSyn) -> (NamedInstruction)
happyIn61 :: ([LabeledInstruction]) -> (HappyAbsSyn)
happyOut61 :: (HappyAbsSyn) -> ([LabeledInstruction])
happyIn62 :: (LabeledInstruction) -> (HappyAbsSyn)
happyOut62 :: (HappyAbsSyn) -> (LabeledInstruction)
happyIn63 :: (RevList (LabeledInstruction)) -> (HappyAbsSyn)
happyOut63 :: (HappyAbsSyn) -> (RevList (LabeledInstruction))
happyIn64 :: (Type -> Operand) -> (HappyAbsSyn)
happyOut64 :: (HappyAbsSyn) -> (Type -> Operand)
happyIn65 :: (Name) -> (HappyAbsSyn)
happyOut65 :: (HappyAbsSyn) -> (Name)
happyIn66 :: (Direction) -> (HappyAbsSyn)
happyOut66 :: (HappyAbsSyn) -> (Direction)
happyIn67 :: (Name) -> (HappyAbsSyn)
happyOut67 :: (HappyAbsSyn) -> (Name)
happyIn68 :: (AddrSpace) -> (HappyAbsSyn)
happyOut68 :: (HappyAbsSyn) -> (AddrSpace)
happyIn69 :: (Type) -> (HappyAbsSyn)
happyOut69 :: (HappyAbsSyn) -> (Type)
happyIn70 :: (Type) -> (HappyAbsSyn)
happyOut70 :: (HappyAbsSyn) -> (Type)
happyIn71 :: (Maybe Type) -> (HappyAbsSyn)
happyOut71 :: (HappyAbsSyn) -> (Maybe Type)
happyIn72 :: (RevList Type) -> (HappyAbsSyn)
happyOut72 :: (HappyAbsSyn) -> (RevList Type)
happyIn73 :: (RevList Type) -> (HappyAbsSyn)
happyOut73 :: (HappyAbsSyn) -> (RevList Type)
happyIn74 :: (([Type], Bool)) -> (HappyAbsSyn)
happyOut74 :: (HappyAbsSyn) -> (([Type], Bool))
happyIn75 :: (Linkage) -> (HappyAbsSyn)
happyOut75 :: (HappyAbsSyn) -> (Linkage)
happyIn76 :: (Visibility) -> (HappyAbsSyn)
happyOut76 :: (HappyAbsSyn) -> (Visibility)
happyIn77 :: (CallingConvention) -> (HappyAbsSyn)
happyOut77 :: (HappyAbsSyn) -> (CallingConvention)
happyIn78 :: (Parameter) -> (HappyAbsSyn)
happyOut78 :: (HappyAbsSyn) -> (Parameter)
happyIn79 :: (RevList Parameter) -> (HappyAbsSyn)
happyOut79 :: (HappyAbsSyn) -> (RevList Parameter)
happyIn80 :: (([Parameter], Bool)) -> (HappyAbsSyn)
happyOut80 :: (HappyAbsSyn) -> (([Parameter], Bool))
happyIn81 :: (Parameter) -> (HappyAbsSyn)
happyOut81 :: (HappyAbsSyn) -> (Parameter)
happyIn82 :: (RevList Parameter) -> (HappyAbsSyn)
happyOut82 :: (HappyAbsSyn) -> (RevList Parameter)
happyIn83 :: (([Parameter], Bool)) -> (HappyAbsSyn)
happyOut83 :: (HappyAbsSyn) -> (([Parameter], Bool))
happyIn84 :: (FunctionAttribute) -> (HappyAbsSyn)
happyOut84 :: (HappyAbsSyn) -> (FunctionAttribute)
happyIn85 :: (RevList FunctionAttribute) -> (HappyAbsSyn)
happyOut85 :: (HappyAbsSyn) -> (RevList FunctionAttribute)
happyIn86 :: (Maybe String) -> (HappyAbsSyn)
happyOut86 :: (HappyAbsSyn) -> (Maybe String)
happyIn87 :: (Maybe String) -> (HappyAbsSyn)
happyOut87 :: (HappyAbsSyn) -> (Maybe String)
happyIn88 :: (Bool) -> (HappyAbsSyn)
happyOut88 :: (HappyAbsSyn) -> (Bool)
happyIn89 :: (Global) -> (HappyAbsSyn)
happyOut89 :: (HappyAbsSyn) -> (Global)
happyIn90 :: (Maybe Operand) -> (HappyAbsSyn)
happyOut90 :: (HappyAbsSyn) -> (Maybe Operand)
happyIn91 :: (RevList (Maybe Operand)) -> (HappyAbsSyn)
happyOut91 :: (HappyAbsSyn) -> (RevList (Maybe Operand))
happyIn92 :: (RevList (Maybe Operand)) -> (HappyAbsSyn)
happyOut92 :: (HappyAbsSyn) -> (RevList (Maybe Operand))
happyIn93 :: (Definition) -> (HappyAbsSyn)
happyOut93 :: (HappyAbsSyn) -> (Definition)
happyIn94 :: (RevList Definition) -> (HappyAbsSyn)
happyOut94 :: (HappyAbsSyn) -> (RevList Definition)
happyIn95 :: (Maybe DataLayout) -> (HappyAbsSyn)
happyOut95 :: (HappyAbsSyn) -> (Maybe DataLayout)
happyIn96 :: (TargetTriple) -> (HappyAbsSyn)
happyOut96 :: (HappyAbsSyn) -> (TargetTriple)
happyIn97 :: (Module) -> (HappyAbsSyn)
happyOut97 :: (HappyAbsSyn) -> (Module)
happyInTok :: ((L Token)) -> (HappyAbsSyn)
happyOutTok :: (HappyAbsSyn) -> ((L Token))
happyActOffsets :: HappyAddr
happyGotoOffsets :: HappyAddr
happyDefActions :: HappyAddr
happyCheck :: HappyAddr
happyTable :: HappyAddr
happyReduceArr :: Array Int (Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn)
happy_n_terms :: Int
happy_n_nonterms :: Int
happyReduce_4 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_4 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_5 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_5 :: HappyAbsSyn -> t -> HappyAbsSyn
happyReduce_6 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_6 :: t -> HappyAbsSyn
happyReduce_7 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_7 :: t -> HappyAbsSyn
happyReduce_8 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_8 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_9 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_9 :: HappyAbsSyn -> t -> HappyAbsSyn
happyReduce_10 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_10 :: t -> HappyAbsSyn
happyReduce_11 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_11 :: t -> HappyAbsSyn
happyReduce_12 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_12 :: t -> HappyAbsSyn -> t1 -> HappyAbsSyn
happyReduce_13 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_13 :: t -> HappyAbsSyn -> t1 -> HappyAbsSyn
happyReduce_14 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_14 :: t -> HappyAbsSyn -> t1 -> HappyAbsSyn
happyReduce_15 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_15 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_16 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_16 :: t -> HappyAbsSyn
happyReduce_17 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_17 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_18 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_18 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_19 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_19 :: HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn
happyReduce_20 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_20 :: HappyAbsSyn
happyReduce_21 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_21 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_22 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_22 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_23 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_23 :: HappyAbsSyn -> t -> HappyAbsSyn -> HappyAbsSyn
happyReduce_24 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_24 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_25 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_25 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_26 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_26 :: HappyAbsSyn -> t -> HappyAbsSyn
happyReduce_27 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_27 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_28 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_28 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_29 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_29 :: HappyAbsSyn
happyReduce_30 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_30 :: HappyAbsSyn -> t -> HappyAbsSyn
happyReduce_31 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_31 :: HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn
happyReduce_32 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_32 :: HappyAbsSyn
happyReduce_33 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_33 :: t -> HappyAbsSyn
happyReduce_34 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_34 :: HappyAbsSyn
happyReduce_35 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_35 :: t -> HappyAbsSyn
happyReduce_36 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_36 :: HappyAbsSyn
happyReduce_37 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_37 :: t -> HappyAbsSyn
happyReduce_38 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_38 :: HappyAbsSyn
happyReduce_39 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_39 :: t -> HappyAbsSyn
happyReduce_40 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_40 :: HappyAbsSyn
happyReduce_41 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_41 :: t -> HappyAbsSyn
happyReduce_42 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_42 :: HappyAbsSyn
happyReduce_43 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_43 :: t -> HappyAbsSyn
happyReduce_44 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_44 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_45 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_45 :: t -> HappyAbsSyn
happyReduce_46 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_46 :: HappyAbsSyn
happyReduce_47 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_47 :: t -> HappyAbsSyn
happyReduce_48 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_48 :: HappyAbsSyn
happyReduce_49 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_49 :: HappyAbsSyn -> t -> t1 -> HappyAbsSyn
happyReduce_50 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_50 :: HappyAbsSyn
happyReduce_51 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_51 :: t -> HappyAbsSyn
happyReduce_52 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_52 :: HappyAbsSyn
happyReduce_53 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_53 :: HappyAbsSyn -> t -> HappyAbsSyn -> HappyAbsSyn
happyReduce_54 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_54 :: t -> HappyAbsSyn
happyReduce_55 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_55 :: t -> HappyAbsSyn
happyReduce_56 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_56 :: t -> HappyAbsSyn
happyReduce_57 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_57 :: t -> HappyAbsSyn
happyReduce_58 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_58 :: t -> HappyAbsSyn
happyReduce_59 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_59 :: t -> HappyAbsSyn
happyReduce_60 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_60 :: t -> HappyAbsSyn
happyReduce_61 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_61 :: t -> HappyAbsSyn
happyReduce_62 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_62 :: t -> HappyAbsSyn
happyReduce_63 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_63 :: t -> HappyAbsSyn
happyReduce_64 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_64 :: t -> HappyAbsSyn
happyReduce_65 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_65 :: t -> HappyAbsSyn
happyReduce_66 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_66 :: t -> HappyAbsSyn
happyReduce_67 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_67 :: t -> HappyAbsSyn
happyReduce_68 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_68 :: t -> HappyAbsSyn
happyReduce_69 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_69 :: t -> HappyAbsSyn
happyReduce_70 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_70 :: t -> HappyAbsSyn
happyReduce_71 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_71 :: t -> HappyAbsSyn
happyReduce_72 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_72 :: t -> HappyAbsSyn
happyReduce_73 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_73 :: t -> HappyAbsSyn
happyReduce_74 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_74 :: t -> HappyAbsSyn
happyReduce_75 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_75 :: t -> HappyAbsSyn
happyReduce_76 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_76 :: t -> HappyAbsSyn
happyReduce_77 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_77 :: t -> HappyAbsSyn
happyReduce_78 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_78 :: t -> HappyAbsSyn
happyReduce_79 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_79 :: t -> HappyAbsSyn
happyReduce_80 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_80 :: t -> HappyAbsSyn
happyReduce_81 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_81 :: t -> HappyAbsSyn
happyReduce_82 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_82 :: t -> HappyAbsSyn
happyReduce_83 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_83 :: t -> HappyAbsSyn
happyReduce_84 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_84 :: t -> HappyAbsSyn
happyReduce_85 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_85 :: t -> HappyAbsSyn
happyReduce_86 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_86 :: HappyAbsSyn -> t -> HappyAbsSyn
happyReduce_87 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_87 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_88 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_88 :: t -> HappyAbsSyn
happyReduce_89 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_89 :: t -> HappyAbsSyn
happyReduce_90 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_90 :: t -> HappyAbsSyn
happyReduce_91 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_91 :: t -> HappyAbsSyn
happyReduce_92 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_92 :: t -> HappyAbsSyn
happyReduce_93 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_93 :: t -> HappyAbsSyn
happyReduce_94 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_94 :: t -> HappyAbsSyn
happyReduce_95 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_95 :: t -> HappyAbsSyn
happyReduce_96 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_96 :: t -> HappyAbsSyn
happyReduce_97 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_97 :: t -> HappyAbsSyn
happyReduce_98 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_98 :: t -> HappyAbsSyn
happyReduce_99 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_99 :: HappyAbsSyn
happyReduce_100 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_100 :: t -> HappyAbsSyn
happyReduce_101 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_101 :: HappyAbsSyn
happyReduce_102 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_102 :: t -> HappyAbsSyn
happyReduce_103 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_103 :: HappyAbsSyn -> t -> HappyAbsSyn
happyReduce_104 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_104 :: HappyAbsSyn -> t -> HappyAbsSyn
happyReduce_105 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_105 :: HappyAbsSyn
happyReduce_106 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_106 :: HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn
happyReduce_107 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_107 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_108 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_108 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_109 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_109 :: HappyAbsSyn -> t -> HappyAbsSyn -> HappyAbsSyn
happyReduce_110 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_110 :: t -> HappyAbsSyn
happyReduce_111 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_111 :: t -> HappyAbsSyn
happyReduce_112 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_112 :: t -> HappyAbsSyn
happyReduce_113 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_113 :: t -> HappyAbsSyn
happyReduce_114 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_114 :: t -> HappyAbsSyn
happyReduce_115 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_115 :: t -> HappyAbsSyn
happyReduce_116 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_116 :: t -> HappyAbsSyn
happyReduce_117 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_117 :: t -> HappyAbsSyn
happyReduce_118 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_118 :: HappyAbsSyn
happyReduce_119 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_119 :: HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn
happyReduce_120 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_120 :: HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn
happyReduce_121 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_121 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_122 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_122 :: HappyAbsSyn -> t -> HappyAbsSyn -> HappyAbsSyn
happyReduce_123 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_123 :: HappyAbsSyn
happyReduce_124 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_124 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_125 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_125 :: HappyAbsSyn
happyReduce_126 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_126 :: t -> HappyAbsSyn
happyReduce_127 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_127 :: HappyAbsSyn
happyReduce_128 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_128 :: t -> HappyAbsSyn
happyReduce_129 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_129 :: HappyAbsSyn
happyReduce_130 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_130 :: t -> HappyAbsSyn
happyReduce_131 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_131 :: HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn
happyReduce_132 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_132 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_133 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_133 :: HappyAbsSyn
happyReduce_134 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_134 :: t -> HappyAbsSyn
happyReduce_135 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_135 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_136 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_136 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_137 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_137 :: HappyAbsSyn -> t -> HappyAbsSyn -> HappyAbsSyn
happyReduce_138 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_138 :: HappyAbsSyn -> t -> HappyAbsSyn -> HappyAbsSyn
happyReduce_139 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_139 :: HappyAbsSyn
happyReduce_140 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_140 :: HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn
happyReduce_141 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_141 :: HappyAbsSyn -> t -> HappyAbsSyn
happyReduce_142 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_142 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_143 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_143 :: HappyAbsSyn -> t -> HappyAbsSyn -> HappyAbsSyn
happyReduce_144 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_144 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_145 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_145 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_146 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_146 :: HappyAbsSyn -> t -> HappyAbsSyn -> HappyAbsSyn
happyReduce_147 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_147 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_148 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_148 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_149 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_149 :: HappyAbsSyn -> HappyAbsSyn -> t -> HappyAbsSyn
happyReduce_150 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_150 :: HappyAbsSyn
happyReduce_151 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_151 :: HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn
happyReduce_152 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_152 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_153 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_153 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_154 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_154 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_155 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_155 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_156 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_156 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_157 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_157 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_158 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_158 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_159 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_159 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_160 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_160 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_161 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_161 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_162 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_162 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_163 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_163 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_164 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_164 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_165 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_165 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_166 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_166 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_167 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_167 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_168 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_168 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_169 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_169 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_170 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_170 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_171 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_171 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_172 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_172 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_173 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_173 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_174 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_174 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_175 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_175 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_176 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_176 :: HappyAbsSyn -> t -> HappyAbsSyn
happyReduce_177 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_177 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_178 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_178 :: HappyStk HappyAbsSyn -> t -> P HappyAbsSyn
happyReduce_179 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_179 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_180 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_180 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_181 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_181 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_182 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_182 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_183 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_183 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_184 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_184 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_185 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_185 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_186 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_186 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_187 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_187 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_188 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_188 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_189 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_189 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_190 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_190 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_191 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_191 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_192 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_192 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_193 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_193 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_194 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_194 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_195 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_195 :: HappyAbsSyn -> HappyAbsSyn -> t -> HappyAbsSyn
happyReduce_196 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_196 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_197 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_197 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_198 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_198 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_199 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_199 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_200 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_200 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_201 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_201 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_202 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_202 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_203 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_203 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_204 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_204 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_205 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_205 :: t -> t1 -> HappyAbsSyn
happyReduce_206 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_206 :: HappyAbsSyn -> HappyAbsSyn -> t -> HappyAbsSyn
happyReduce_207 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_207 :: HappyAbsSyn -> t -> t1 -> HappyAbsSyn
happyReduce_208 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_208 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_209 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_209 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_210 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_210 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_211 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_211 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_212 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_212 :: HappyAbsSyn -> t -> HappyAbsSyn
happyReduce_213 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_213 :: t -> HappyAbsSyn
happyReduce_214 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_214 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_215 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_215 :: HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn
happyReduce_216 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_216 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_217 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_217 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_218 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_218 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_219 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_219 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_220 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_220 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_221 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_221 :: HappyAbsSyn -> t -> HappyAbsSyn -> HappyAbsSyn
happyReduce_222 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_222 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_223 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_223 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_224 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_224 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_225 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_225 :: HappyAbsSyn
happyReduce_226 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_226 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_227 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_227 :: HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn
happyReduce_228 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_228 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_229 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_229 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_230 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_230 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_231 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_231 :: HappyAbsSyn
happyReduce_232 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_232 :: HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn
happyReduce_233 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_233 :: HappyAbsSyn
happyReduce_234 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_234 :: HappyAbsSyn -> t -> HappyAbsSyn
happyReduce_235 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_235 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_236 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_236 :: HappyAbsSyn
happyReduce_237 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_237 :: t -> HappyAbsSyn
happyReduce_238 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_238 :: t -> HappyAbsSyn
happyReduce_239 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_239 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_240 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_240 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_241 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_241 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_242 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_242 :: HappyAbsSyn
happyReduce_243 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_243 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_244 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_244 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_245 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_245 :: t -> HappyAbsSyn
happyReduce_246 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_246 :: t -> HappyAbsSyn
happyReduce_247 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_247 :: t -> HappyAbsSyn
happyReduce_248 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_248 :: t -> HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn
happyReduce_249 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_249 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_250 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_250 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_251 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_251 :: t -> HappyAbsSyn -> t1 -> HappyAbsSyn
happyReduce_252 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_252 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_253 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_253 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_254 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_254 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_255 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_255 :: t -> HappyAbsSyn
happyReduce_256 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_256 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_257 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_257 :: t -> HappyAbsSyn
happyReduce_258 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_258 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_259 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_259 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_260 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_260 :: t -> HappyAbsSyn
happyReduce_261 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_261 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_262 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_262 :: HappyAbsSyn -> t -> HappyAbsSyn -> HappyAbsSyn
happyReduce_263 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_263 :: HappyAbsSyn
happyReduce_264 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_264 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_265 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_265 :: HappyAbsSyn
happyReduce_266 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_266 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_267 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_267 :: t -> HappyAbsSyn
happyReduce_268 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_268 :: t -> t1 -> HappyAbsSyn -> HappyAbsSyn
happyReduce_269 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_269 :: HappyAbsSyn
happyReduce_270 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_270 :: t -> HappyAbsSyn
happyReduce_271 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_271 :: t -> HappyAbsSyn
happyReduce_272 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_272 :: t -> HappyAbsSyn
happyReduce_273 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_273 :: t -> HappyAbsSyn
happyReduce_274 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_274 :: t -> HappyAbsSyn
happyReduce_275 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_275 :: t -> HappyAbsSyn
happyReduce_276 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_276 :: t -> HappyAbsSyn
happyReduce_277 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_277 :: t -> HappyAbsSyn
happyReduce_278 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_278 :: t -> HappyAbsSyn
happyReduce_279 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_279 :: t -> HappyAbsSyn
happyReduce_280 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_280 :: t -> HappyAbsSyn
happyReduce_281 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_281 :: HappyAbsSyn
happyReduce_282 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_282 :: t -> HappyAbsSyn
happyReduce_283 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_283 :: t -> HappyAbsSyn
happyReduce_284 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_284 :: t -> HappyAbsSyn
happyReduce_285 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_285 :: HappyAbsSyn
happyReduce_286 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_286 :: t -> HappyAbsSyn
happyReduce_287 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_287 :: t -> HappyAbsSyn
happyReduce_288 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_288 :: t -> HappyAbsSyn
happyReduce_289 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_289 :: HappyAbsSyn -> t -> HappyAbsSyn
happyReduce_290 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_290 :: HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn
happyReduce_291 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_291 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_292 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_292 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_293 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_293 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_294 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_294 :: HappyAbsSyn -> t -> HappyAbsSyn -> HappyAbsSyn
happyReduce_295 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_295 :: HappyAbsSyn
happyReduce_296 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_296 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_297 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_297 :: t -> HappyAbsSyn
happyReduce_298 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_298 :: t -> t1 -> HappyAbsSyn -> HappyAbsSyn
happyReduce_299 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_299 :: HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn
happyReduce_300 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_300 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_301 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_301 :: HappyAbsSyn -> t -> HappyAbsSyn -> HappyAbsSyn
happyReduce_302 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_302 :: HappyAbsSyn
happyReduce_303 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_303 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_304 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_304 :: t -> HappyAbsSyn
happyReduce_305 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_305 :: t -> t1 -> HappyAbsSyn -> HappyAbsSyn
happyReduce_306 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_306 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_307 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_307 :: t -> HappyAbsSyn
happyReduce_308 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_308 :: t -> HappyAbsSyn
happyReduce_309 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_309 :: t -> HappyAbsSyn
happyReduce_310 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_310 :: t -> HappyAbsSyn
happyReduce_311 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_311 :: t -> HappyAbsSyn
happyReduce_312 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_312 :: t -> HappyAbsSyn
happyReduce_313 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_313 :: t -> HappyAbsSyn
happyReduce_314 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_314 :: t -> HappyAbsSyn
happyReduce_315 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_315 :: t -> HappyAbsSyn
happyReduce_316 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_316 :: t -> HappyAbsSyn
happyReduce_317 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_317 :: t -> HappyAbsSyn
happyReduce_318 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_318 :: t -> HappyAbsSyn
happyReduce_319 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_319 :: t -> HappyAbsSyn
happyReduce_320 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_320 :: t -> HappyAbsSyn
happyReduce_321 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_321 :: t -> HappyAbsSyn
happyReduce_322 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_322 :: HappyAbsSyn
happyReduce_323 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_323 :: HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn
happyReduce_324 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_324 :: HappyAbsSyn
happyReduce_325 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_325 :: HappyAbsSyn -> t -> HappyAbsSyn
happyReduce_326 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_326 :: HappyAbsSyn
happyReduce_327 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_327 :: HappyAbsSyn -> t -> HappyAbsSyn
happyReduce_328 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_328 :: t -> HappyAbsSyn
happyReduce_329 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_329 :: t -> HappyAbsSyn
happyReduce_330 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_330 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_331 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_331 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_332 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_332 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_333 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_333 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_334 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_334 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_335 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_335 :: t -> HappyAbsSyn
happyReduce_336 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_336 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_337 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_337 :: HappyAbsSyn -> t -> HappyAbsSyn -> HappyAbsSyn
happyReduce_338 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_338 :: HappyAbsSyn
happyReduce_339 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_339 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_340 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_340 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_341 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_341 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_342 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_342 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_343 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_343 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_344 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_344 :: HappyAbsSyn -> t -> t1 -> HappyAbsSyn
happyReduce_345 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_345 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_346 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_346 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_347 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_347 :: HappyAbsSyn
happyReduce_348 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_348 :: HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn
happyReduce_349 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_349 :: HappyAbsSyn
happyReduce_350 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_350 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_351 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_351 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_352 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_352 :: HappyAbsSyn
happyReduce_353 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_353 :: HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn
happyReduce_354 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_354 :: HappyAbsSyn -> HappyAbsSyn
happyReduce_355 :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduction_355 :: HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn
happyNewToken :: Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyError_ :: Int# -> L Token -> P a
happyThen :: P a -> (a -> P b) -> P b
happyReturn :: a -> P a
happyThen1 :: P a -> (a -> P b) -> P b
happyReturn1 :: a -> P a
happyError' :: ((L Token)) -> P a
parseModule :: P Module
parseDefinition :: P Definition
parseGlobal :: P Global
parseInstruction :: P Instruction
happySeq :: a -> b -> b
intConstant :: Integer -> Type -> Constant
floatConstant :: Rational -> Type -> Constant
dataLayout :: String -> DataLayout
happyError :: L Token -> P a
lexer :: (L Token -> P a) -> P a
locate :: Loc -> (SrcLoc -> a) -> L a
data RevList a
RNil :: RevList a
RCons :: a -> (RevList a) -> RevList a
rnil :: RevList a
rsingleton :: a -> RevList a
rcons :: a -> RevList a -> RevList a
rev :: RevList a -> [a]
data Happy_IntList
HappyCons :: Int# -> Happy_IntList -> Happy_IntList
data HappyStk a
HappyStk :: a -> (HappyStk a) -> HappyStk a
happyParse :: Int# -> P HappyAbsSyn
happyAccept :: Int# -> t -> Int# -> t1 -> HappyStk a -> P a
happyDoAction :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
indexShortOffAddr :: HappyAddr -> Int# -> Int#
data HappyAddr
HappyA# :: Addr# -> HappyAddr
happyShift :: Int# -> Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happySpecReduce_0 :: Int# -> HappyAbsSyn -> Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happySpecReduce_1 :: Int# -> (HappyAbsSyn -> HappyAbsSyn) -> Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happySpecReduce_2 :: Int# -> (HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn) -> Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happySpecReduce_3 :: Int# -> (HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn -> HappyAbsSyn) -> Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyReduce :: Int# -> Int# -> (HappyStk HappyAbsSyn -> HappyStk HappyAbsSyn) -> Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyMonadReduce :: Int# -> Int# -> (HappyStk HappyAbsSyn -> L Token -> P HappyAbsSyn) -> Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyMonad2Reduce :: Int# -> Int# -> (HappyStk HappyAbsSyn -> L Token -> P HappyAbsSyn) -> Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyDrop :: Int# -> Happy_IntList -> Happy_IntList
happyDropStk :: Int# -> HappyStk t -> HappyStk t
happyGoto :: Int# -> Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
happyFail :: Int# -> L Token -> Int# -> Happy_IntList -> HappyStk HappyAbsSyn -> P HappyAbsSyn
notHappyAtAll :: a
happyTcHack :: Int# -> a -> a
happyDoSeq :: a -> b -> b
happyDontSeq :: a -> b -> b

module LLVM.General.Quote.Parser
parse :: [Extensions] -> P a -> ByteString -> Pos -> Either SomeException a

module LLVM.General.Quote.Base
type CodeGen = State (Int, Map Name [Operand])
class (Applicative m, Monad m) => CodeGenMonad m
newVariable :: CodeGenMonad m => m Name
exec :: CodeGenMonad m => m () -> m [BasicBlock]
class ToDefintions a
toDefinitions :: ToDefintions a => a -> [Definition]
quasiquote :: (Data a, QQExp a b) => [Extensions] -> P a -> TQuasiQuoter b
quasiquoteM :: (Data a, QQExp a b, CodeGenMonad m) => [Extensions] -> P a -> TQuasiQuoter (m b)
newtype TQuasiQuoter a
TQuasiQuoter :: QuasiQuoter -> TQuasiQuoter a
unTQuasiQuoter :: TQuasiQuoter a -> QuasiQuoter
parse :: [Extensions] -> P a -> String -> Q a
instance QQExp TargetTriple (Maybe String)
instance QQExp DataLayout DataLayout
instance QQExp Type Type
instance QQExp Name Name
instance QQExp Constant Constant
instance QQExp Operand Operand
instance QQExp MetadataNode MetadataNode
instance QQExp MetadataNodeID MetadataNodeID
instance QQExp LabeledInstruction [BasicBlock]
instance QQExp NamedInstruction [BasicBlock]
instance QQExp [LabeledInstruction] [BasicBlock]
instance QQExp Instruction Instruction
instance QQExp Instruction (Either Instruction Terminator)
instance QQExp InlineAssembly InlineAssembly
instance QQExp FastMathFlags FastMathFlags
instance QQExp LandingPadClause LandingPadClause
instance QQExp Parameter Parameter
instance QQExp [Parameter] [Parameter]
instance QQExp Global Global
instance QQExp Module Module
instance QQExp [Definition] [Definition]
instance QQExp Definition Definition
instance (QQExp a d, QQExp b e, QQExp c f) => QQExp (a, b, c) (d, e, f)
instance (QQExp a c, QQExp b d) => QQExp (a, b) (c, d)
instance (QQExp a c, QQExp b d) => QQExp (Either a b) (Either c d)
instance QQExp (Maybe (Type, Operand, Name)) (Maybe (Type, Operand, Name))
instance QQExp (Maybe Constant) (Maybe Constant)
instance QQExp (Maybe DataLayout) (Maybe DataLayout)
instance QQExp (Maybe Type) (Maybe Type)
instance QQExp (Maybe Name) (Maybe Name)
instance QQExp (Maybe Operand) (Maybe Operand)
instance QQExp [Type] [Type]
instance QQExp [Constant] [Constant]
instance QQExp [Maybe Operand] [Maybe Operand]
instance QQExp [LandingPadClause] [LandingPadClause]
instance QQExp [(Operand, Name)] [(Operand, Name)]
instance QQExp [Operand] [Operand]
instance QQExp [(Operand, [ParameterAttribute])] [(Operand, [ParameterAttribute])]
instance QQExp [Name] [Name]
instance QQExp [(Constant, Name)] [(Constant, Name)]
instance QQExp InstructionMetadata InstructionMetadata
instance QQExp [MetadataNodeID] [MetadataNodeID]
instance Lift a => QQExp a a
instance ToTargetTriple (Maybe String)
instance ToTargetTriple String
instance ToName Word
instance ToName String
instance ToName Name
instance ToConstant Double
instance ToConstant Float
instance ToConstant Word64
instance ToConstant Word32
instance ToConstant Word16
instance ToConstant Word8
instance ToDefintion a => ToDefintions [a]
instance ToDefintion Global
instance ToDefintion Definition
instance ToBasicBlockList [BasicBlock]
instance ToBasicBlockList ()
instance CodeGenMonad CodeGen

module LLVM.General.Quote.LLVM

-- | Quasiquoter for <a>Module</a>
llmod :: QuasiQuoter

-- | Quasiquoter for <a>Definition</a>
lldef :: QuasiQuoter

-- | Quasiquoter for <a>Global</a>
llg :: QuasiQuoter

-- | Quasiquoter for <a>Instruction</a>
lli :: QuasiQuoter

-- | Quasiquoter for <a>Module</a>
llmodM :: QuasiQuoter

-- | Quasiquoter for <a>Definition</a>
lldefM :: QuasiQuoter

-- | Quasiquoter for <a>Global</a>
llgM :: QuasiQuoter

-- | Quasiquoter for <a>Instruction</a>
lliM :: QuasiQuoter
