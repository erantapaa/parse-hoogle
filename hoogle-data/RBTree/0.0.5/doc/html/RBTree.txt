-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Pure haskell Red-Black-Tree implemetation
--   
--   This package implemets Red-Black tree data-structure.
@package RBTree
@version 0.0.5


-- | Pure Haskell Red-Black tree implementation
module Data.Tree.RBTree

-- | Color of a <a>Node</a>. Leaf is assumed to be Black.
data Color
Red :: Color
Black :: Color

-- | Basic RBTree Structure.
data RBTree a

-- | A Node that holds an element and has two leaves.
Node :: Color -> a -> !RBTree a -> !RBTree a -> RBTree a

-- | A Black leaf.
Leaf :: RBTree a

-- | Gen an empty Tree.
emptyRB :: RBTree a

-- | used for range query.
data Interval a
Interval :: (RealOrd a, RealOrd a) -> Interval a

-- | Interval value from -INF to +INF.
data RealOrd a

-- | positive infinity
PInfinity :: RealOrd a

-- | positive infinity
NInfinity :: RealOrd a

-- | Normal value, not need to be Ord.
RealValue :: a -> RealOrd a

-- | Insert Operator for insertOrd
(<</) :: Ord a => RBTree a -> a -> RBTree a

-- | Insert anything. |you have to provide a compare function.
insert :: (a -> a -> Ordering) -> RBTree a -> a -> RBTree a

-- | Insert 'Ord' things.
insertOrd :: Ord a => RBTree a -> a -> RBTree a

-- | Insert a bunch of 'Ord' things.
insertOrdList :: Ord a => RBTree a -> [a] -> RBTree a

-- | Delete Operator for deleteOrd
(<<\) :: Ord a => RBTree a -> a -> RBTree a

-- | If there is no relevant element in tree, tree will be returned
--   unmodified.
delete :: (a -> a -> Ordering) -> RBTree a -> a -> RBTree a

-- | Delete an 'Ord' thing. see <a>delete</a>.
deleteOrd :: Ord a => RBTree a -> a -> RBTree a

-- | Delete a sequence of elements.
deleteOrdList :: Ord a => RBTree a -> [a] -> RBTree a

-- | Search operator for searchOrd
(<<?) :: Ord a => RBTree a -> a -> Maybe a

-- | search for any thing, you should provide proper compare function.
search :: (b -> a -> Ordering) -> RBTree a -> b -> Maybe a

-- | Search for 'Ord' things. see <a>search</a>
searchOrd :: Ord a => RBTree a -> a -> Maybe a

-- | a faster <a>search</a> function implemetation. strongly recommanded.
searchFast :: (b -> a -> Ordering) -> RBTree a -> b -> Maybe a

-- | Search the Maximum value in the tree, equals to get the right-most
--   element.
searchMax :: Ord a => RBTree a -> Maybe a

-- | Search the Minimum value in the tree, equals to get the left-most
--   element.
searchMin :: Ord a => RBTree a -> Maybe a

-- | Search for a Interval.
--   
--   For example: tree has 1,3,5,7. search for 3 returns [3,3] that
--   indicates itself search for 4 returns [3,5] indicates that 4 is
--   between the element 3 and 5
--   
--   The given value be or not be an element of the tree.
searchInterval :: (b -> a -> Ordering) -> RBTree a -> b -> Interval a

-- | Search 'Ord' things, see <a>searchInterval</a>
searchIntervalOrd :: Ord a => RBTree a -> a -> Interval a

-- | Verify black-depth are all the same. Return Just 'depth' on success,
--   otherwise Nothing.
vD :: RBTree a -> Maybe Int

-- | vR : verify no 'red-red' pattern in x and x's parent
vR :: RBTree a -> Bool
instance Eq Color
instance Eq Direction
instance Show a => Show (Step a)
instance Show a => Show (RBZip a)
instance Show a => Show (Interval a)
instance Show a => Show (RealOrd a)
instance Show Direction
instance Show Color
instance Show a => Show (RBTree a)
