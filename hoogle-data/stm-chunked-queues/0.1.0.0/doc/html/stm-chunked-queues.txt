-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Chunked Communication Queues
--   
--   Thread communication queues that group items/requests that occur close
--   together in time
@package stm-chunked-queues
@version 0.1.0.0


-- | A version of <tt>Control.Concurrent.STM.TQueue</tt> that allows
--   complete draining. This makes it possible to chunk items based on a
--   timeout or a <a>settle period</a>. This is useful when items/requests
--   arriving through the queue are too granular and have to be combined,
--   while retaining responsiveness.
--   
--   Some capabilities of <tt>TQueue</tt> are missing (such as unget) due
--   to design tradeoffs.
--   
--   <i>Since: 0.1.0</i>
module Control.Concurrent.STM.TChunkedQueue

-- | <tt>TChunkedQueue</tt> is an abstract type representing a drainable
--   FIFO queue.
data TChunkedQueue a

-- | Abstract type representing a chunked queue. Acts as API for drainining
--   queues.
data ChunkedQueue a

-- | Consume a <tt>ChunkedQueue</tt> into a list
consumeQueue :: ChunkedQueue a -> [a]

-- | Build and returns a new instance of <tt>TChunkedQueue</tt>
newTChunkedQueue :: STM (TChunkedQueue a)

-- | <tt>IO</tt> version of <a>newTChunkedQueue</a>
newTChunkedQueueIO :: IO (TChunkedQueue a)

-- | Drain everything contained in the <tt>TChunkedQueue</tt>, but block if
--   it is empty. Corollary: never returns empty queue.
drainTChunkedQueue :: TChunkedQueue a -> STM (ChunkedQueue a)

-- | Drain everything contained in the <tt>TChunkedQueue</tt>. Doesn't
--   block
tryDrainTChunkedQueue :: TChunkedQueue a -> STM (ChunkedQueue a)

-- | Write a value to a <tt>TChunkedQueue</tt>
writeTChunkedQueue :: TChunkedQueue a -> a -> STM ()

-- | Write many values to a <tt>TChunkedQueue</tt>
writeManyTChunkedQueue :: TChunkedQueue a -> [a] -> STM ()

-- | Returns <tt>True</tt> if the supplied <tt>TChunkedQueue</tt> is empty.
isEmptyTChunkedQueue :: TChunkedQueue a -> STM Bool

-- | Keep draining the queue until no more items are seen for at least the
--   given timeout period. Blocks if the queue is empty to begin with, and
--   starts timing after the first value appears in the queue.
drainAndSettleTChunkedQueue :: Int -> TChunkedQueue a -> IO (ChunkedQueue a)

-- | Keep draining the queue for at least the specified time period. Blocks
--   if the queue is empty to begin with, and starts timing as soon as the
--   first value appears in the queue.
drainWithTimeoutTChunkedQueue :: Int -> TChunkedQueue a -> IO (ChunkedQueue a)
instance Typeable1 TChunkedQueue


-- | A version of <tt>Control.Concurrent.STM.TQueue</tt> where the queue is
--   closeable and allows complete draining. This makes it possible to
--   chunk items based on a timeout or a <a>settle period</a>. This is
--   useful when items/requests arriving through the queue are too granular
--   and have to be combined, while retaining responsiveness.
--   
--   Some capabilities of <tt>TQueue</tt> are missing (such as unget) due
--   to design tradeoffs.
--   
--   <i>Since: 0.1.0</i>
module Control.Concurrent.STM.TMChunkedQueue

-- | <tt>TMChunkedQueue</tt> is an abstract type representing a closeable,
--   drainable FIFO queue.
data TMChunkedQueue a

-- | Abstract type representing a chunked queue. Acts as API for drainining
--   queues.
data ChunkedQueue a

-- | Consume a <tt>ChunkedQueue</tt> into a list
consumeQueue :: ChunkedQueue a -> [a]

-- | Build and returns a new instance of <tt>TMChunkedQueue</tt>
newTMChunkedQueue :: STM (TMChunkedQueue a)

-- | <tt>IO</tt> version of <a>newTMChunkedQueue</a>
newTMChunkedQueueIO :: IO (TMChunkedQueue a)

-- | Drain everything contained in the <tt>TMChunkedQueue</tt>, but block
--   if it is empty. Corollary: never returns empty queue.
--   
--   <ul>
--   <li>Closed, Empty - <tt>Nothing</tt> * Closed, Non-Empty - <tt>Just
--   [...]</tt> * Open, Empty - <tt>Blocks</tt> * Open, Non-Empty -
--   <tt>Just [...]</tt></li>
--   </ul>
drainTMChunkedQueue :: TMChunkedQueue a -> STM (Maybe (ChunkedQueue a))

-- | Drain everything contained in the <tt>TMChunkedQueue</tt>. Doesn't
--   block.
--   
--   <ul>
--   <li>Closed, Empty - <tt>Nothing</tt> * Closed, Non-Empty - <tt>Just
--   [...]</tt> * Open, Empty - <tt>Just []</tt> * Open, Non-Empty -
--   <tt>Just [...]</tt></li>
--   </ul>
tryDrainTMChunkedQueue :: TMChunkedQueue a -> STM (Maybe (ChunkedQueue a))

-- | Write a value to a <tt>TMChunkedQueue</tt>
writeTMChunkedQueue :: TMChunkedQueue a -> a -> STM ()

-- | Write many values to a <tt>TMChunkedQueue</tt>
writeManyTMChunkedQueue :: TMChunkedQueue a -> [a] -> STM ()

-- | Closes the <tt>TMQueue</tt>, preventing any further writes.
closeTMChunkedQueue :: TMChunkedQueue a -> STM ()

-- | Returns <tt>True</tt> if the supplied <tt>TMChunkedQueue</tt> is
--   empty.
isEmptyTMChunkedQueue :: TMChunkedQueue a -> STM Bool

-- | Returns <tt>True</tt> if the supplied <tt>TMChunkedQueue</tt> has been
--   closed.
isClosedTMChunkedQueue :: TMChunkedQueue a -> STM Bool

-- | Keep draining the queue until no more items are seen for at least the
--   given timeout period. Blocks if the queue is empty to begin with, and
--   starts timing after the first value appears in the queue.
drainAndSettleTMChunkedQueue :: Int -> TMChunkedQueue a -> IO (Maybe (ChunkedQueue a))

-- | Keep draining the queue for at least the specified time period. Blocks
--   if the queue is empty to begin with, and starts timing as soon as the
--   first value appears in the queue.
drainWithTimeoutTMChunkedQueue :: Int -> TMChunkedQueue a -> IO (Maybe (ChunkedQueue a))
instance Typeable1 TMChunkedQueue
