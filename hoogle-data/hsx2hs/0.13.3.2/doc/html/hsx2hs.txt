-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | HSX (Haskell Source with XML) allows literal XML syntax in Haskell source code.
--   
@package hsx2hs
@version 0.13.3.2


-- | Functions for transforming abstract Haskell code extended with regular
--   patterns into semantically equivalent normal abstract Haskell code. In
--   other words, we transform away regular patterns.
module Language.Haskell.HSX.Transform

-- | Transform away occurences of regular patterns from an abstract Haskell
--   module, preserving semantics.
transform :: Module -> Module

-- | Transform expressions by traversing subterms. Of special interest are
--   expressions that contain patterns as subterms, i.e. <tt>let</tt>,
--   <tt>case</tt> and lambda expressions, and also list comprehensions and
--   <tt>do</tt>-expressions. All other expressions simply transform their
--   sub-expressions, if any. Of special interest are of course also any
--   xml expressions.
transformExp :: Exp -> Exp
instance [overlap ok] Functor Tr
instance [overlap ok] Monad Tr
instance [overlap ok] Applicative Tr
instance [overlap ok] Functor RN
instance [overlap ok] Monad RN
instance [overlap ok] Applicative RN
instance [overlap ok] Functor HsxM
instance [overlap ok] Monad HsxM
instance [overlap ok] Applicative HsxM


-- | this module provides a QuasiQuoter that supports the HSX syntax.
--   
--   <ul>
--   <li>- Module : Language.Haskell.HSX.Tranform</li>
--   <li>- Copyright : (c) Niklas Broberg 2004-2012</li>
--   <li>- License : BSD-style (see the file LICENSE.txt)</li>
--   <li>-</li>
--   <li>- Maintainer : Niklas Broberg, niklas.broberg@gmail.com</li>
--   <li>- Stability : experimental</li>
--   <li>- Portability : portable</li>
--   <li>-</li>
--   </ul>
--   
--   You will need to enable the QuasiQuotes extension for it to work,
--   which you can do by adding this to the top of your file:
--   
--   {-# LANGUAGE QuasiQuotes #-}
--   
--   Here is a simple example that generates an HTML fragment:
--   
--   <pre>
--   import Data.Char        (toUpper)
--   import HSX.QQ           (hsx)
--   import HSX.XMLGenerator
--   
--   html :: (XMLGenerator m) =&gt; XMLGenT m (XMLType m)
--   html = [hsx| &lt;p&gt;&lt;% map toUpper "hello, world!"  %&gt;&lt;/p&gt; |]
--   </pre>
--   
--   The syntax used by the hsx QuasiQuoter is the same as what is used by
--   <tt>trhsx</tt>. It is mostly normal XML syntax which a few key
--   differences:
--   
--   <ol>
--   <li>strings inside tags and attributes are automatically escaped --
--   you do not need to do &amp;lt;, etc.</li>
--   <li>The <a>%</a> syntax is used to embed the result of evaluating a
--   Haskell expression into the XML</li>
--   </ol>
--   
--   Values are embedde using the <tt>EmbedAsChild</tt> and
--   <tt>EmbedAsAttr</tt> classes. Additional instances can be added to
--   support application specific types.
module Language.Haskell.HSX.QQ

-- | QuasiQuoter which can be used to parse HSX syntax
hsx :: QuasiQuoter
