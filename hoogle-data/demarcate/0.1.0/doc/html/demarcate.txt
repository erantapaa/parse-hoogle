-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Demarcating transformed monad.
--   
--   This library provides <a>Demarcate</a> type constructor which makes
--   possible transformations of <tt>t m a</tt> monadic values.
@package demarcate
@version 0.1.0


-- | Internals of the <a>Demarcate</a> monad transformer.
module Control.Monad.Trans.Demarcate.Internal

-- | Demarcate functor.
data DemarcateF t m next

-- | Unlifted monadic computation.
DemarcateMonad :: (m a) -> (a -> next) -> DemarcateF t m next

-- | Transformed monadic computation.
DemarcateTrans :: (t m a) -> (a -> next) -> DemarcateF t m next

-- | Demarcate monad transformer.
newtype Demarcate t m a
Demarcate :: Free (DemarcateF t m) a -> Demarcate t m a
unDemarcate :: Demarcate t m a -> Free (DemarcateF t m) a

-- | Lift pure monadic computation into <tt>Demarcate t m a</tt>
demarcateM :: m a -> Demarcate t m a

-- | Lift transformed monadic computation into <tt>Demarcate t m a</tt>
demarcateT :: t m a -> Demarcate t m a

-- | Execute demarcated computation.
execDemarcate :: (Monad (t m), Monad m, MonadTrans t) => Demarcate t m a -> t m a

-- | Subsitute monad transformer.
hoistDemarcateT :: (forall b. t m b -> t' m b) -> Demarcate t m a -> Demarcate t' m a

-- | Substitute monad computations with demarcated.
transformDemarcateM :: (forall b. m b -> Demarcate t m b) -> Demarcate t m a -> Demarcate t m a

-- | Substitute free monad actions with demarcated monad computations.
transformDemarcateFree :: Functor f => (forall b. f (Demarcate t (Free f) b) -> Demarcate t (Free f) b) -> Demarcate t (Free f) a -> Demarcate t (Free f) a

-- | Helper function (useful with <tt>transformDemarcateFree</tt>). I
--   believe it should be somewhere in <tt>Control.Monad.Free</tt>
wrapT :: (Functor f, MonadFree f m, MonadTrans t, Monad (t m)) => f (t m a) -> t m a
instance MonadTrans (Demarcate t)
instance MonadFree (DemarcateF t m) (Demarcate t m)
instance Monad (Demarcate t m)
instance Functor (Demarcate t m)
instance Functor (DemarcateF t m)


-- | Interface for <a>Demarcate</a> monad transformer.
module Control.Monad.Trans.Demarcate

-- | Demarcate monad transformer.
data Demarcate t m a

-- | Lift pure monadic computation into <tt>Demarcate t m a</tt>
demarcateM :: m a -> Demarcate t m a

-- | Lift transformed monadic computation into <tt>Demarcate t m a</tt>
demarcateT :: t m a -> Demarcate t m a

-- | Execute demarcated computation.
execDemarcate :: (Monad (t m), Monad m, MonadTrans t) => Demarcate t m a -> t m a

-- | Helper function (useful with <tt>transformDemarcateFree</tt>). I
--   believe it should be somewhere in <tt>Control.Monad.Free</tt>
wrapT :: (Functor f, MonadFree f m, MonadTrans t, Monad (t m)) => f (t m a) -> t m a

-- | Substitute monad computations with demarcated.
transformDemarcateM :: (forall b. m b -> Demarcate t m b) -> Demarcate t m a -> Demarcate t m a

-- | Substitute free monad actions with demarcated monad computations.
transformDemarcateFree :: Functor f => (forall b. f (Demarcate t (Free f) b) -> Demarcate t (Free f) b) -> Demarcate t (Free f) a -> Demarcate t (Free f) a

-- | Subsitute monad transformer.
hoistDemarcateT :: (forall b. t m b -> t' m b) -> Demarcate t m a -> Demarcate t' m a
