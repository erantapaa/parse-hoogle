-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Real-time line plotter for protobuf-like data
--   
@package Plot-ho-matic
@version 0.5.0.5

module PlotHo

-- | add channels to this, then run it with <a>runPlotter</a>
data Plotter a

-- | fire up the the GUI
runPlotter :: Plotter () -> IO ()
data XAxisType

-- | time since the first message
XAxisTime :: XAxisType

-- | time since the first message, normalized to 0 (to reduce plot jitter)
XAxisTime0 :: XAxisType

-- | message index
XAxisCount :: XAxisType

-- | message index, normalized to 0 (to reduce plot jitter)
XAxisCount0 :: XAxisType

-- | Simplified time-series channel which passes a "send message" function
--   to a worker and forks it using <tt>forkIO</tt>. The plotter will plot
--   a time series of messages sent by the worker. The worker should pass
--   True to reset the message history, so sending True the first message
--   and False subsequent messages is a good starting place.
addHistoryChannel :: Lookup a => String -> XAxisType -> ((a -> Bool -> IO ()) -> IO ()) -> Plotter ()

-- | This is the general interface to plot whatever you want. Use this when
--   you want to give the whole time series in one go, rather than one at a
--   time such as with <a>addHistoryChannel</a>. Using types or data, you
--   must encode the signal tree with the message so that the plotter can
--   build you the nice message toggle tree.
addChannel :: String -> (a -> a -> Bool) -> (a -> [Tree (String, String, Maybe (a -> [[(Double, Double)]]))]) -> ((a -> IO ()) -> IO ()) -> Plotter ()

-- | Things which you can make a tree of labeled getters for. You should
--   derive this using GHC.Generics.
class Lookup a
instance Functor Plotter
instance Monad Plotter
instance Applicative Plotter
