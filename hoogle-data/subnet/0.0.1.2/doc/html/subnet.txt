-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | subnetting calculator
--   
@package subnet
@version 0.0.1.2


-- | Bitnary helper shit
module Network.Subnet.Binary
newtype Binary
Binary :: String -> Binary
getBinary :: Binary -> String
mkBinary :: String -> Binary
toBinary :: (Ord a, Num a) => a -> Binary
fromBinary :: Num a => Binary -> a
octet :: (Ord a, Num a) => a -> [Binary]
(.&&.) :: Binary -> Binary -> Binary
(.||.) :: Binary -> Binary -> Binary
binop :: (Num a, Ord a) => (a -> a -> a) -> Binary -> Binary -> Binary
(.+.) :: Binary -> Binary -> Binary
(.-.) :: Binary -> Binary -> Binary
addOne :: Binary -> Binary
addInt :: (Num a, Ord a) => a -> Binary -> Binary
base2 :: Num a => [a]
fixets :: Binary -> Binary
antifixets :: Binary -> Binary
modifyBinary :: (String -> String) -> Binary -> Binary
instance Ord Binary
instance Show Binary
instance Eq Binary


-- | LogIp and SubnetMask
module Network.Subnet.Ip
newtype SubnetMask
SubnetMask :: String -> SubnetMask
getSubnetMask :: SubnetMask -> String
newtype LogIp
LogIp :: String -> LogIp
getLogIp :: LogIp -> String
mkSubnetMask :: String -> SubnetMask
mkLogIp :: String -> LogIp
showIp :: [[Char]] -> [Char]
readIp :: [Char] -> [[Char]]
readLogIp :: LogIp -> Binary
readSubnetMask :: SubnetMask -> Binary
showLogIp :: Binary -> LogIp
showSubnetMask :: Binary -> SubnetMask
modifyLogIp :: (String -> String) -> LogIp -> LogIp
addOneLogIp :: LogIp -> LogIp
instance Ord SubnetMask
instance Show SubnetMask
instance Eq SubnetMask
instance Ord LogIp
instance Show LogIp
instance Eq LogIp


-- | network combinatoring
module Network.Subnet.Network
network :: LogIp -> SubnetMask -> LogIp
nextNetwork :: LogIp -> SubnetMask -> LogIp
allInSubnet :: LogIp -> SubnetMask -> [LogIp]
broadcast :: LogIp -> SubnetMask -> LogIp
hosts :: LogIp -> SubnetMask -> [LogIp]
summarize :: [LogIp] -> SubnetMask

module Network.Subnet
