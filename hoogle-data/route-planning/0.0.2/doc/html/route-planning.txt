-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A library and utilities for creating a route
--   
--   A library and utilities for creating a route
@package route-planning
@version 0.0.2

module Data.Geo.Route.Osrm
class Osrm o where osrm = let removeAdjacentDuplicates :: Eq a => [a] -> [a] removeAdjacentDuplicates [] = [] removeAdjacentDuplicates [h] = [h] removeAdjacentDuplicates (h : x : xs) = (if h == x then id else (h :)) (removeAdjacentDuplicates (x : xs)) in ("http://map.project-osrm.org/?" ++) . intercalate "&" . fmap (\ c -> let c' = c ^. coordinate in printf "loc=%0.6f,%0.6f" (fracLatitude # (c' ^. latitude)) (fracLongitude # (c' ^. longitude))) . removeAdjacentDuplicates . allCoordinates
allCoordinates :: Osrm o => o -> [Coordinate]
osrm :: Osrm o => o -> String

module Data.Geo.Route.Gpx
class Gpx x
gpx :: Gpx x => x -> String
instance Gpx DateTime

module Data.Geo.Route.Link
data Link
link :: String -> String -> String -> Link
linkHref :: Lens' Link String
linkText :: Lens' Link String
linkType :: Lens' Link String
instance Eq Link
instance Ord Link
instance Show Link
instance Gpx Link

module Data.Geo.Route.Name
data Name
class HasName t
name :: HasName t => Lens' t Name
class HasMaybeName t
mname :: HasMaybeName t => Lens' t (Maybe Name)
nameIso :: Iso' String Name
(<.>) :: HasMaybeName t => Name -> t -> t
instance Eq Name
instance Ord Name
instance Show Name
instance Gpx Name
instance IsString Name
instance HasName Name

module Data.Geo.Route.Symbol
data Symbol
class HasSymbol t
symbol :: HasSymbol t => Lens' t Symbol
class HasMaybeSymbol t
msymbol :: HasMaybeSymbol t => Lens' t (Maybe Symbol)
symbolIso :: Iso' String Symbol
(<@>) :: HasMaybeSymbol t => Symbol -> t -> t
instance Eq Symbol
instance Ord Symbol
instance Show Symbol
instance Gpx Symbol
instance IsString Symbol
instance HasSymbol Symbol

module Data.Geo.Route.Email
data Email
email :: String -> String -> Email
emailId :: Lens' Email String
emailDomain :: Lens' Email String
instance Eq Email
instance Ord Email
instance Show Email
instance Gpx Email

module Data.Geo.Route.Elevation
data Elevation
class HasElevation t
elevation :: HasElevation t => Lens' t Elevation
class HasMaybeElevation t
melevation :: HasMaybeElevation t => Lens' t (Maybe Elevation)
elevationIso :: Iso' Int Elevation
(<^>) :: HasMaybeElevation t => Elevation -> t -> t
instance Eq Elevation
instance Ord Elevation
instance Show Elevation
instance Num Elevation
instance Real Elevation
instance Enum Elevation
instance Integral Elevation
instance Gpx Elevation
instance HasElevation Elevation

module Data.Geo.Route.Distance
data Distance
class HasDistance t
distance :: HasDistance t => Lens' t Distance
class HasMaybeDistance t
maybeDistance :: HasMaybeDistance t => Lens' t (Maybe Distance)
distanceIso :: Iso' Int Distance
instance Eq Distance
instance Ord Distance
instance Show Distance
instance Num Distance
instance Real Distance
instance Enum Distance
instance Integral Distance
instance HasDistance Distance

module Data.Geo.Route.Description
data Description
class HasDescription t
description :: HasDescription t => Lens' t Description
class HasMaybeDescription t
mdescription :: HasMaybeDescription t => Lens' t (Maybe Description)
descriptionIso :: Iso' String Description
(<~>) :: HasMaybeDescription t => Description -> t -> t
instance Eq Description
instance Ord Description
instance Show Description
instance Gpx Description
instance IsString Description
instance HasDescription Description

module Data.Geo.Route.Copyright
data Copyright
copyright :: String -> Copyright
copyright' :: String -> String -> String -> Copyright
copyrightAuthor :: Lens' Copyright String
copyrightYear :: Lens' Copyright (Maybe String)
copyrightLicense :: Lens' Copyright (Maybe String)
instance Eq Copyright
instance Ord Copyright
instance Show Copyright
instance Gpx Copyright

module Data.Geo.Route.Comment
data Comment
class HasComment t
comment :: HasComment t => Lens' t Comment
class HasMaybeComment t
mcomment :: HasMaybeComment t => Lens' t (Maybe Comment)
commentIso :: Iso' String Comment
(<!>) :: HasMaybeComment t => Comment -> t -> t
instance Eq Comment
instance Ord Comment
instance Show Comment
instance Gpx Comment
instance IsString Comment
instance HasComment Comment

module Data.Geo.Route.TrackHeader
data TrackHeader
mkTrackHeader :: Maybe Name -> Maybe Comment -> Maybe Description -> TrackHeader
mkTrackHeader' :: Name -> Comment -> Description -> TrackHeader
emptyTrackHeader :: TrackHeader
class HasTrackHeader t
trackHeader :: HasTrackHeader t => Lens' t TrackHeader
(<..>) :: HasTrackHeader t => String -> t -> t
(<..^) :: (Functor f, HasTrackHeader t) => String -> f t -> f t
instance Eq TrackHeader
instance Ord TrackHeader
instance Show TrackHeader
instance Gpx TrackHeader
instance HasTrackHeader TrackHeader
instance HasMaybeDescription TrackHeader
instance HasMaybeComment TrackHeader
instance HasMaybeName TrackHeader

module Data.Geo.Route.Waypoint
data Waypoint
Waypoint :: Coordinate -> (Maybe Elevation) -> (Maybe DateTime) -> (Maybe Name) -> (Maybe Comment) -> (Maybe Description) -> (Maybe Symbol) -> Waypoint
type Waypoints = [Waypoint]
class HasWaypoint t
waypoint :: HasWaypoint t => Lens' t Waypoint
class HasWaypoints t
waypoints :: HasWaypoints t => Lens' t Waypoints
class HasMaybeDateTime t
mdateTime :: HasMaybeDateTime t => Lens' t (Maybe DateTime)
mkWaypoint :: HasCoordinate c => c -> Waypoint
gpxWaypoint :: (HasMaybeName s, HasMaybeComment s, HasMaybeSymbol s, HasMaybeElevation s, HasMaybeDescription s, HasLatitude s, HasLongitude s, HasMaybeDateTime s) => String -> s -> String
(.<.>) :: String -> Coordinate -> Waypoint
(~<.>) :: Name -> Coordinate -> Waypoint
(<%>) :: HasMaybeDateTime t => DateTime -> t -> t
(<.?>) :: Double -> Double -> Maybe Waypoint
(-.-) :: HasWaypoints t => Maybe Waypoint -> t -> t
instance Eq Waypoint
instance Ord Waypoint
instance Show Waypoint
instance Gpx Waypoint
instance HasWaypoint Waypoint
instance HasMaybeSymbol Waypoint
instance HasMaybeDescription Waypoint
instance HasMaybeComment Waypoint
instance HasMaybeName Waypoint
instance HasMaybeDateTime Waypoint
instance HasMaybeElevation Waypoint
instance HasLongitude Waypoint
instance HasLatitude Waypoint
instance HasCoordinate Waypoint

module Data.Geo.Route.Track
data Track
class HasTrack t
track :: HasTrack t => Lens' t Track
(-|) :: Waypoint -> Waypoint -> Track
(.|) :: Apply f => f Waypoint -> f Waypoint -> f Track
(--|) :: Waypoint -> Waypoint -> Track
(..|) :: Apply f => f Waypoint -> f Waypoint -> f Track
(|-|) :: Waypoint -> Track -> Track
(|.|) :: Apply f => f Waypoint -> f Track -> f Track
(|--|) :: Waypoint -> Track -> Track
(|..|) :: Apply f => f Waypoint -> f Track -> f Track
trackPoints :: Track -> [Waypoint]
instance Eq Track
instance Ord Track
instance Show Track
instance Gpx Track
instance Osrm Track
instance HasTrackHeader Track
instance HasTrack Track

module Data.Geo.Route.Author
data Author
mkAuthor :: Author
mkAuthor' :: Name -> Email -> Link -> Author
authorEmail :: Lens' Author (Maybe Email)
authorLink :: Lens' Author (Maybe Link)
instance Eq Author
instance Ord Author
instance Show Author
instance HasAuthor Author
instance Gpx Author
instance HasMaybeName Author

module Data.Geo.Route.Plan
data Plan
mkPlan :: Track -> Plan
mkPlan' :: Name -> Description -> Author -> Copyright -> Track -> Plan
instance Eq Plan
instance Ord Plan
instance Show Plan
instance HasMaybeDescription Plan
instance HasMaybeName Plan
instance Osrm Plan
instance Gpx Plan

module Data.Geo.Route
