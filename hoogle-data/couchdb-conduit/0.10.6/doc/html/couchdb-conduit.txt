-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Couch DB client library using http-conduit and aeson
--   
--   This package is a thin wrapper around http-conduit to access a Couch
--   DB Database, using the aeson package to parse and encode JSON data.
--   http-conduit, aeson, and attoparsec fit togther so well that this
--   package is mostly just a direct combination of these packages. The
--   single additional feature in this package is an attoparsec parser for
--   views, which allows constant memory processing of view returns.
@package couchdb-conduit
@version 0.10.6


-- | Low-level method and tools of accessing CouchDB.
module Database.CouchDB.Conduit.LowLevel

-- | CouchDB response
type CouchResponse m = Response (ResumableSource m ByteString)

-- | The most general method of accessing CouchDB. This is a very thin
--   wrapper around <a>http</a>. Most of the time you should use one of the
--   other access functions, but this function is needed for example to
--   write and read attachments that are not in JSON format.
couch :: MonadCouch m => Method -> Path -> RequestHeaders -> Query -> RequestBody m -> (CouchResponse m -> m (CouchResponse m)) -> m (CouchResponse m)

-- | More generalized version of <a>couch</a>. Instead <a>Path</a> it takes
--   function what takes prefix and returns a path.
couch' :: MonadCouch m => Method -> (Path -> Path) -> RequestHeaders -> Query -> RequestBody m -> (CouchResponse m -> m (CouchResponse m)) -> m (CouchResponse m)

-- | Protect <a>Response</a> from bad status codes. If status code in list
--   of status codes - just return response. Otherwise - throw
--   <a>CouchError</a>.
--   
--   Instead <a>checkStatus</a>, <a>protect</a> parses CouchDB response
--   body JSON and extract "reason" message.
--   
--   To protect from typical errors use <a>protect'</a>.
protect :: MonadCouch m => [Int] -> (CouchResponse m -> m (CouchResponse m)) -> CouchResponse m -> m (CouchResponse m)

-- | Protect from typical status codes. It's equivalent of
--   
--   <pre>
--   protect [200, 201, 202, 304] return
--   </pre>
--   
--   See <a>protect</a> for details.
protect' :: MonadCouch m => CouchResponse m -> m (CouchResponse m)


-- | CouchDB database methods.
--   
--   <pre>
--   runCouch def {couchDB="my_db"} $ couchPutDb
--   runCouch def {couchDB="my_new_db"} $ couchPutDb
--   </pre>
module Database.CouchDB.Conduit.DB

-- | Create CouchDB database.
couchPutDB :: MonadCouch m => Path -> m ()

-- | "Don't care" version of couchPutDb. Create CouchDB database only in
--   its absence. For this it handles <tt>412</tt> responses.
couchPutDB_ :: MonadCouch m => Path -> m ()

-- | Delete a database.
couchDeleteDB :: MonadCouch m => Path -> m ()

-- | Maintain DB security.
couchSecureDB :: MonadCouch m => Path -> [ByteString] -> [ByteString] -> [ByteString] -> [ByteString] -> m ()

-- | Database replication.
--   
--   See <a>http://guide.couchdb.org/editions/1/en/api.html#replication</a>
--   for details.
couchReplicateDB :: MonadCouch m => ByteString -> ByteString -> Bool -> Bool -> Bool -> m ()


-- | Higher-level functions to interact with CouchDB views.
--   
--   To automate creation of CouchDB Query Options see
--   <a>Database.CouchDB.Conduit.View.Query</a>
--   
--   To manipulate views in design documents see
--   <a>Database.CouchDB.Conduit.Design</a>
module Database.CouchDB.Conduit.View

-- | Run CouchDB view in manner like <a>http</a>.
--   
--   <pre>
--   runCouch def $ do
--   
--       -- Print all upon receipt.
--       src &lt;- couchView "mydb" "mydesign" "myview" [] 
--       src $$ CL.mapM_ (liftIO . print)
--   
--       -- ... Or extract row value and consume
--       src' &lt;- couchView "mydb" "mydesign" "myview" [] 
--       res &lt;- src' $= rowValue $$ CL.consume
--   </pre>
couchView :: MonadCouch m => Path -> Path -> Path -> Query -> m (Source m Object)

-- | Brain-free version of <a>couchView</a>. Takes <a>Sink</a> to consume
--   response.
--   
--   <pre>
--   runCouch def $ do
--   
--       -- Print all upon receipt.
--       couchView' "mydb" "mydesign" "myview" [] $ CL.mapM_ (liftIO . print)
--   
--       -- ... Or extract row value and consume
--       res &lt;- couchView' "mydb" "mydesign" "myview" [] $ 
--                          rowValue =$ CL.consume
--   </pre>
couchView_ :: MonadCouch m => Path -> Path -> Path -> Query -> Sink Object m a -> m a

-- | Run CouchDB view in manner like <a>http</a> using <tt>POST</tt> (since
--   CouchDB 0.9). It's convenient in case that <tt>keys</tt> paremeter too
--   big for <tt>GET</tt> query string. Other query parameters used as
--   usual.
--   
--   <pre>
--   runCouch def $ do
--       src &lt;- couchViewPost "mydb" "mydesign" "myview" 
--               (mkQuery [QPGroup])
--               ["key1", "key2", "key3"] 
--       src $$ CL.mapM_ (liftIO . print)
--   </pre>
couchViewPost :: (MonadCouch m, ToJSON a) => Path -> Path -> Path -> Query -> a -> m (Source m Object)

-- | Brain-free version of <a>couchViewPost</a>. Takes <a>Sink</a> to
--   consume response.
couchViewPost_ :: (MonadCouch m, ToJSON a) => Path -> Path -> Path -> Query -> a -> Sink Object m a -> m a

-- | Conduit for extract "value" field from CouchDB view row.
rowValue :: Monad m => Conduit Object m Value

-- | Conduit for extract "doc" field from CouchDB view row. Use only with
--   <tt>include_docs=true</tt> query parameter.
rowDoc :: Monad m => Conduit Object m Value

-- | Extract field from view row
rowField :: Monad m => Text -> Conduit Object m Value


-- | CouchDB View Query options.
--   
--   For details see
--   <a>http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options</a>.
--   Note, because all options must be a proper URL encoded JSON,
--   construction of complex parameters can be very tedious. To simplify
--   this, use <a>mkQuery</a>.
module Database.CouchDB.Conduit.View.Query

-- | CouchDB Query options primitives.
data CouchQP

-- | Complex view query parameter.
--   
--   <pre>
--   couchQP [QPComplex "param" (["a", "b"] :: [String])]
--   [("param", Just "[\"a\",\"b\"]")]
--   ...?param=["a","b"]
--   
--   couchQP [QPComplex "key" (("a", 1) :: (String, Int))]
--   [("key", Just "[\"a\",0]")]
--   ...?param=["a",0]
--   </pre>
--   
--   It't just convert lazy <a>ByteString</a> from <a>encode</a> to strict
--   <a>ByteString</a>. For more efficient use specific functions.
QPComplex :: ByteString -> a -> CouchQP

-- | Quoted <a>ByteString</a> query parameter.
--   
--   <pre>
--   ...?param="value" 
--   </pre>
QPBS :: ByteString -> ByteString -> CouchQP

-- | <a>Int</a> query parameter.
--   
--   <pre>
--   ...?param=100 
--   </pre>
QPInt :: ByteString -> Int -> CouchQP

-- | <a>Bool</a> query parameter.
--   
--   <pre>
--   ...?param=true
--   </pre>
QPBool :: ByteString -> Bool -> CouchQP

-- | Reverse rows output.
--   
--   <pre>
--   ...?descending=true 
--   </pre>
QPDescending :: CouchQP

-- | Limit rows. Use <tt>Zero (0)</tt> to omit.
--   
--   <pre>
--   ...?limit=5 
--   </pre>
QPLimit :: Int -> CouchQP

-- | Skip rows. Use <tt>Zero (0)</tt> to omit.
--   
--   <pre>
--   ...?skip=10
--   </pre>
QPSkip :: Int -> CouchQP

-- | Stale view. On <tt>True</tt> sets <tt>stale</tt> parameter to
--   <tt>ok</tt>, else sets it to <tt>update_after</tt>.
--   
--   <pre>
--   ...?stale=ok
--   ...?stale=update_after
--   </pre>
QPStale :: Bool -> CouchQP

-- | <tt>key</tt> query parameter.
--   
--   <pre>
--   ...?key=...
--   </pre>
QPKey :: a -> CouchQP

-- | Row key to start with. Becomes <tt>endkey</tt> if <tt>descending</tt>
--   turned on. See <tt>couchQuery</tt>.
--   
--   <pre>
--   ...?startkey=...
--   ...?descending=true?endkey=...
--   </pre>
QPStartKey :: a -> CouchQP

-- | Row key to start with. Becomes <tt>startkey</tt> if
--   <tt>descending</tt> turned on. See <tt>couchQuery</tt>.
--   
--   <pre>
--   ...?endkey=...
--   ...?descending=true?startkey=...
--   </pre>
QPEndKey :: a -> CouchQP

-- | Row key to start with. Use only with <tt>couchView</tt> and
--   <tt>couchView_</tt>. For large sets of <tt>keys</tt> use
--   <tt>couchViewPost</tt> and <tt>couchViewPost_</tt>
--   
--   <pre>
--   ...?keys=...
--   </pre>
QPKeys :: a -> CouchQP

-- | Turn on grouping.
--   
--   <pre>
--   ...?group=true
--   </pre>
QPGroup :: CouchQP

-- | Set grouping level. Use <tt>Zero (0)</tt> to omit.
--   
--   <pre>
--   ...?group_level=2
--   </pre>
QPGroupLevel :: Int -> CouchQP

-- | Control reduce.
--   
--   <pre>
--   ...?reduce=true
--   ...?reduce=false
--   </pre>
QPReduce :: Bool -> CouchQP

-- | Turn on inclusion docs in view results.
--   
--   <pre>
--   ...?include_docs=true
--   </pre>
QPIncludeDocs :: CouchQP

-- | Turn off inclusion <tt>endkey</tt> in view results.
--   
--   <pre>
--   ...?inclusive_end=false
--   </pre>
QPInclusiveEnd :: CouchQP

-- | Response includes an update_seq value indicating which sequence id of
--   the database the view reflects
--   
--   <pre>
--   ...?update_seq=true
--   </pre>
QPUpdateSeq :: CouchQP

-- | Document id to start with.
--   
--   <pre>
--   ...?startkey_docid=...
--   </pre>
QPStartKeyDocId :: Path -> CouchQP

-- | Document id to end with.
--   
--   <pre>
--   ...?endkey_docid=...
--   </pre>
QPEndKeyDocId :: Path -> CouchQP

-- | Make CouchDB query options.
mkQuery :: [CouchQP] -> Query

-- | Returns empty <a>HashMap</a>. Aeson will convert this to <tt>{}</tt>
--   (JSON unit). This useful for <tt>startkey</tt> and <tt>endkey</tt>.
--   
--   <pre>
--   couchQuery [QPStartKey (1, 0), QPEndKey (1, {})]
--   </pre>
qpUnit :: HashMap ByteString Bool

-- | Simply return <a>Null</a>.
qpNull :: Value


-- | High-level API for CouchDB design documents. These methods are very
--   convenient for bootstrapping and testing.
module Database.CouchDB.Conduit.Design

-- | Put view to design document. If design document does not exist, it
--   will be created.
couchPutView :: MonadCouch m => Path -> Path -> Path -> ByteString -> Maybe ByteString -> m ()


-- | Explicit methods for CouchDB documents. Documents represents in "good
--   old" aeson manner through <a>ToJSON</a> and <a>FromJSON</a>.
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings, ScopedTypeVariables #-}
--   
--   import Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))
--   import Control.Monad.IO.Class (liftIO)
--   import Data.Aeson
--   import Database.CouchDB.Conduit
--   import Database.CouchDB.Conduit.Explicit
--   
--   -- | Our doc with instances
--   data D = D { f1 :: Int, f2 :: String } deriving (Show)
--   
--   instance FromJSON D where
--      parseJSON (Object v) = D &lt;$&gt; v .: "f1" &lt;*&gt; v .: "f2"
--      parseJSON _          = mzero
--   
--   instance ToJSON D where
--      toJSON (D f1 f2) = object ["f1" .= f1, "f2" .= f2]
--   
--   runCouch def $ do
--      -- Put new doc and update it
--      rev1 &lt;- couchPut "mydb" "my-doc1" "" [] $ D 123 "str"         
--      rev2 &lt;- couchPut "mydb" "my-doc1" rev1 [] $ D 1234 "another"
--   
--      -- get it and print
--      (rev3, d1 :: D) &lt;- couchGet "mydb" "my-doc1" [] 
--      liftIO $ print d1
--   
--      -- update it in brute-force manner    
--      couchPut' "mydb" "my-doc1" [] $ D 12345 "third"    -- notice - no rev
--      
--      -- get revision and delete
--      rev3 &lt;- couchRev "mydb" "my-doc1"
--      couchDelete "mydb" "my-doc1" rev3
--   </pre>
--   
--   For details of types see <a>Data.Aeson</a>. To work with documents in
--   generic manner, look at <a>Database.CouchDB.Conduit.Generic</a>.
module Database.CouchDB.Conduit.Explicit

-- | Load a single <a>ToJSON</a> object with <a>Revision</a> from couch DB.
couchGet :: (MonadCouch m, FromJSON a) => Path -> Path -> Query -> m (Revision, a)

-- | Put an <a>FromJSON</a> object in Couch DB with revision, returning the
--   new <a>Revision</a>.
couchPut :: (MonadCouch m, ToJSON a) => Path -> Path -> Revision -> Query -> a -> m Revision

-- | "Don't care" version of <a>couchPut</a>. Creates document only in its
--   absence.
couchPut_ :: (MonadCouch m, ToJSON a) => Path -> Path -> Query -> a -> m Revision

-- | Brute force version of <a>couchPut</a>. Creates a document regardless
--   of presence.
couchPut' :: (MonadCouch m, ToJSON a) => Path -> Path -> Query -> a -> m Revision

-- | Convert CouchDB view row or row value from
--   <a>Database.CouchDB.Conduit.View</a> to concrete <a>FromJSON</a> type.
--   
--   <pre>
--   res &lt;- couchView "mydesign" "myview" [] $ rowValue =$= toType =$ consume
--   </pre>
toType :: (MonadResource m, FromJSON a) => Conduit Value m a


-- | Generic methods for CouchDB documents. Unlike explicit, generic
--   methods uses <a>Data.Generics</a>.
--   
--   <pre>
--   {-# LANGUAGE DeriveDataTypeable #-}
--   {-# LANGUAGE OverloadedStrings, ScopedTypeVariables #-}
--   
--   import Control.Monad.IO.Class (liftIO)
--   import Data.Generic (Data, Typeable)
--   import Database.CouchDB.Conduit
--   import Database.CouchDB.Conduit.Generic
--   
--   -- | Our doc with instances
--   data D = D { f1 :: Int, f2 :: String } deriving (Show, Data, Typeable)
--   
--   runCouch def $ do
--      -- Put new doc and update it
--      rev1 &lt;- couchPut "mydb" "my-doc1" "" [] $ D 123 "str"         
--      rev2 &lt;- couchPut "mydb" "my-doc1" rev1 [] $ D 1234 "another"
--   
--      -- get it and print
--      (rev3, d1 :: D) &lt;- couchGet "mydb" "my-doc1" [] 
--      liftIO $ print d1
--   
--      -- update it in brute-force manner    
--      couchPut' "mydb" "my-doc1" [] $ D 12345 "third"    -- notice - no rev
--      
--      -- get revision and delete
--      rev3 &lt;- couchRev "mydb" "my-doc1"
--      couchDelete "mydb" "my-doc1" rev3
--   </pre>
--   
--   The main advantage of this approach in the absence of tonns of
--   boilerplate code. The main disadvantage is inability to influence the
--   process of translation to and from JSON.
--   
--   For details of types see <a>Data.Aeson.Generic</a>. To work with
--   documents in explicit manner, look at
--   <a>Database.CouchDB.Conduit.Explicit</a>.
module Database.CouchDB.Conduit.Generic

-- | Load a single object from couch DB.
couchGet :: (MonadCouch m, Data a) => Path -> Path -> Query -> m (Revision, a)

-- | Put an object in Couch DB with revision, returning the new Revision.
couchPut :: (MonadCouch m, Data a) => Path -> Path -> Revision -> Query -> a -> m Revision

-- | "Don't care" version of <a>couchPut</a>. Creates document only in its
--   absence.
couchPut_ :: (MonadCouch m, Data a) => Path -> Path -> Query -> a -> m Revision

-- | Brute force version of <a>couchPut</a>. Creates a document regardless
--   of presence.
couchPut' :: (MonadCouch m, Data a) => Path -> Path -> Query -> a -> m Revision

-- | Convert CouchDB view row or row value from <a>View</a> to concrete
--   type.
--   
--   <pre>
--   res &lt;- couchView "mydesign" "myview" [] $ rowValue =$= toType =$ consume
--   </pre>
toType :: (MonadResource m, Data a) => Conduit Value m a


-- | Implicit methods for CouchDB documents.
--   
--   All implicit methods needs parser or encoder.
module Database.CouchDB.Conduit.Implicit

-- | Load CouchDB document and parse it with given parser.
--   
--   <pre>
--   (rev, rawJson) &lt;- couchGet Success "mydb" mydoc []
--   </pre>
couchGet :: MonadCouch m => (Value -> Result a) -> Path -> Path -> Query -> m (Revision, a)

-- | Put document, with given encoder
couchPut :: MonadCouch m => (a -> ByteString) -> Path -> Path -> Revision -> Query -> a -> m Revision

-- | "Don't care" version of <a>couchPut</a>. Creates document only in its
--   absence.
couchPut_ :: MonadCouch m => (a -> ByteString) -> Path -> Path -> Query -> a -> m Revision

-- | Brute force version of <a>couchPut</a>. Creates a document regardless
--   of presence.
couchPut' :: MonadCouch m => (a -> ByteString) -> Path -> Path -> Query -> a -> m Revision


-- | CouchDB document attachments.
--   
--   <i>Note about attachment paths:</i> Attachments may have embedded
--   <tt>/</tt> characters that are sent unescaped to CouchDB. You can use
--   this to provide a subtree of attachments under a document. A DocID
--   must have any <tt>/</tt> escaped as <tt>%2F</tt>. So if you have
--   document <tt>a/b/c</tt> with an attachment <tt>d/e/f.txt</tt>, you
--   would be able to access it at
--   <tt>http://couchdb/db/a%2fb%2fc/d/e/f.txt</tt>.
--   
--   <tt>couchdb-conduit</tt> automaticaly normalizes attachment paths.
module Database.CouchDB.Conduit.Attachment

-- | Get document attachment and <tt>Content-Type</tt>.
couchGetAttach :: MonadCouch m => Path -> Path -> ByteString -> m (ResumableSource m ByteString, ByteString)

-- | Put or update document attachment
couchPutAttach :: MonadCouch m => Path -> Path -> ByteString -> Revision -> ByteString -> RequestBody m -> m Revision

-- | Delete document attachment
couchDeleteAttach :: MonadCouch m => Path -> Path -> ByteString -> Revision -> m Revision


-- | CouchDB
--   
--   To work with concrete objects, use the following modules:
--   
--   <ul>
--   <li><a>Database.CouchDB.Conduit.DB</a> Database</li>
--   <li><a>Database.CouchDB.Conduit.View</a> Views</li>
--   <li><a>Database.CouchDB.Conduit.LowLevel</a> Low-level methods</li>
--   </ul>
--   
--   For complete documentation about The Couch DB HTTP API see
--   <a>http://wiki.apache.org/couchdb/Complete_HTTP_API_Reference</a>
module Database.CouchDB.Conduit

-- | Represents a path or path fragment.
--   
--   As a rule, full path to document in CouchDB is just URL path. But
--   there is one subtlety. For example, document ids <i>can</i> contain
--   slashes. But, to work with such objects, path fragments must be
--   escaped.
--   
--   <pre>
--   database/doc%2Fname
--   </pre>
--   
--   But, fo non-document items such as views, attachments e.t.c., slashes
--   between path fragments <i>must not</i> be escaped. While slashes in
--   path fragments <i>must</i> be escaped.
--   
--   <pre>
--   database/_design/my%2Fdesign/_view/my%2Fview
--   </pre>
--   
--   Except low-level functions, <tt>couchdb-conduit</tt> escapes all
--   segments in paths.
type Path = ByteString

-- | Represents a revision of a CouchDB Document.
type Revision = ByteString

-- | Make correct path and escape fragments. Filter empty fragments.
--   
--   <pre>
--   mkPath ["db", "", "doc/with/slashes"]
--   /db/doc%2Fwith%2Fslashes
--   </pre>
mkPath :: [Path] -> Path

-- | Represents a single connection to CouchDB server. The constructor for
--   this data type is not exposed. Instead, you should use either the
--   <a>def</a> method to retrieve a default instance.
data CouchConnection

-- | The default value for this type.
def :: Default a => a

-- | Hostname. Default value is "localhost"
couchHost :: CouchConnection -> ByteString

-- | Port. 5984 by default.
couchPort :: CouchConnection -> Int

-- | CouchDB login. By default is <a>empty</a>.
couchLogin :: CouchConnection -> ByteString

-- | CouchDB password. By default is <a>empty</a>.
couchPass :: CouchConnection -> ByteString

-- | CouchDB database prefix. It will prepended to first fragment of
--   request path. Must be fully valid DB name fragment.
couchPrefix :: CouchConnection -> ByteString

-- | A monad which allows access to the connection.
--   
--   All functions to access CouchDB require a <a>MonadCouch</a> instance
--   to access the connection information. <a>ReaderT</a> is an instance of
--   <a>MonadCouch</a>, and <i>runCouch</i> runs a sequence of database
--   actions using <a>ReaderT</a> and <a>ResourceT</a>.
--   
--   If your db code is part of a larger monad, it makes sense to just make
--   the larger monad an instance of <a>MonadCouch</a> and skip the
--   intermediate ReaderT, since then performance is improved by
--   eliminating one monad from the final transformer stack.
class (MonadResource m, MonadBaseControl IO m) => MonadCouch m
couchConnection :: MonadCouch m => m (Manager, CouchConnection)

-- | A CouchDB Error.
data CouchError

-- | Error comes from http.
CouchHttpError :: Int -> ByteString -> CouchError

-- | Non-http errors include things like errors parsing the response.
CouchInternalError :: ByteString -> CouchError

-- | <i>Is not an error actually</i>. It is thrown when CouchDB returns
--   <tt>304 - Not Modified</tt> response to the request. See
--   <a>http://wiki.apache.org/couchdb/HTTP_Document_API</a>
NotModified :: CouchError

-- | Connect to a CouchDB server, run a sequence of CouchDB actions, and
--   then close the connection.. This function is a combination of
--   <a>withManager</a>, <a>withCouchConnection</a>, <a>runReaderT</a> and
--   <a>runResourceT</a>.
--   
--   If you create your own instance of <a>MonadCouch</a> or use connection
--   pool, use <a>withCouchConnection</a>.
runCouch :: MonadResourceBase m => CouchConnection -> ReaderT (Manager, CouchConnection) (ResourceT m) a -> m a

-- | Run a sequence of CouchDB actions with provided <a>Manager</a> and
--   <a>CouchConnection</a>.
--   
--   <pre>
--   withCouchConnection manager def {couchDB = "db"} . runReaderT . 
--            runResourceT . lift $ do
--      ... -- actions
--   </pre>
withCouchConnection :: (MonadResource m, MonadBaseControl IO m) => Manager -> CouchConnection -> ((Manager, CouchConnection) -> m a) -> m a

-- | Get Revision of a document.
couchRev :: MonadCouch m => Path -> Path -> m Revision

-- | Brain-free version of <a>couchRev</a>. If document absent, just return
--   empty ByteString.
couchRev' :: MonadCouch m => Path -> Path -> m Revision

-- | Delete the given revision of the object.
couchDelete :: MonadCouch m => Path -> Path -> Revision -> m ()
