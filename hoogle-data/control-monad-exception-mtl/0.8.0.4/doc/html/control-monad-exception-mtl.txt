-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | MTL instances for the EMT exceptions monad transformer
--   
--   MTL instances for the EMT exceptions monad transformer
--   
--   /This package is only applicable for the now-deprecated mtl v1. Since
--   mtl v2 is compatible with the transformers package, users of mtl2
--   should simply use the control-monad-exception package.
@package control-monad-exception-mtl
@version 0.8.0.4


-- | <a>EMT</a> liftings for the classes in the Monad Transformer Library
module Control.Monad.Exception.MTL

-- | The catch primitive
catch :: (Exception e, Monad m) => EMT (Caught e l) m a -> (e -> EMT l m a) -> EMT l m a
instance (Monoid w, MonadCatch e m m') => MonadCatch e (RWST r w s m) (RWST r w s m')
instance MonadCatch e m m' => MonadCatch e (StateT s m) (StateT s m')
instance (Monoid w, MonadCatch e m m') => MonadCatch e (WriterT w m) (WriterT w m')
instance MonadCatch e m m' => MonadCatch e (ReaderT r m) (ReaderT r m')
instance MonadCatch e m m' => MonadCatch e (ListT m) (ListT m')
instance (Error e, Monad m) => MonadCatch e (ErrorT e m) (ErrorT e m)
instance Error e => MonadCatch e (Either e) (Either e)
instance (Monoid w, MonadRWS r w s m) => MonadRWS r w s (EMT l m)
instance (Monoid w, MonadWriter w m) => MonadWriter w (EMT l m)
instance MonadState s m => MonadState s (EMT l m)
instance MonadReader r m => MonadReader r (EMT l m)
instance MonadCont m => MonadCont (EMT l m)
instance (Throws SomeException l, MonadIO m) => MonadIO (EMT l m)
instance MonadTrans (EMT l)
