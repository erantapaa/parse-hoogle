-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | AST and parser for the ZeroC Slice language (Specification language for ICE)
--   
--   AST and parser for the ZeroC Slice language (Specification language
--   for ICE)
@package language-slice
@version 0.3.0.0

module Language.Slice.Syntax.AST
data IncludeDelimiters
AngleBrackets :: IncludeDelimiters
Quotes :: IncludeDelimiters
newtype Ident
Ident :: String -> Ident
data NsQualIdent
NsQualIdent :: String -> [String] -> NsQualIdent
name :: NsQualIdent -> String
ns :: NsQualIdent -> [String]
data SliceType
STVoid :: SliceType
STBool :: SliceType
STByte :: SliceType
STShort :: SliceType
STInt :: SliceType
STLong :: SliceType
STFloat :: SliceType
STDouble :: SliceType
STString :: SliceType
STUserDefined :: NsQualIdent -> SliceType
STUserDefinedPrx :: NsQualIdent -> SliceType
data SliceVal
SliceBool :: Bool -> SliceVal
SliceStr :: String -> SliceVal
SliceInteger :: Integer -> SliceVal
SliceDouble :: Double -> SliceVal
SliceIdentifier :: NsQualIdent -> SliceVal
data SliceDecl
ModuleDecl :: Ident -> [SliceDecl] -> SliceDecl
IncludeDecl :: IncludeDelimiters -> String -> SliceDecl
EnumDecl :: Ident -> [Ident] -> SliceDecl
StructDecl :: Ident -> [FieldDecl] -> SliceDecl
ClassDecl :: Ident -> (Maybe NsQualIdent) -> [MethodOrFieldDecl] -> SliceDecl
InterfaceDecl :: Ident -> [NsQualIdent] -> [MethodDecl] -> SliceDecl
InterfaceFDecl :: NsQualIdent -> SliceDecl
SequenceDecl :: SliceType -> Ident -> SliceDecl
DictionaryDecl :: SliceType -> SliceType -> Ident -> SliceDecl
ExceptionDecl :: Ident -> [NsQualIdent] -> [FieldDecl] -> SliceDecl
ConstDecl :: SliceType -> Ident -> SliceVal -> SliceDecl
data Annotation
Idempotent :: Annotation
data FieldDecl
FieldDecl :: SliceType -> Ident -> (Maybe SliceVal) -> FieldDecl
data MethodDecl
MethodDecl :: SliceType -> Ident -> [FieldDecl] -> [NsQualIdent] -> (Maybe Annotation) -> MethodDecl
data MethodOrFieldDecl
MDecl :: MethodDecl -> MethodOrFieldDecl
FDecl :: FieldDecl -> MethodOrFieldDecl
instance Show IncludeDelimiters
instance Read IncludeDelimiters
instance Eq IncludeDelimiters
instance Show Ident
instance Read Ident
instance Eq Ident
instance Show NsQualIdent
instance Read NsQualIdent
instance Eq NsQualIdent
instance Show SliceType
instance Read SliceType
instance Eq SliceType
instance Show SliceVal
instance Read SliceVal
instance Eq SliceVal
instance Show Annotation
instance Read Annotation
instance Eq Annotation
instance Show FieldDecl
instance Read FieldDecl
instance Eq FieldDecl
instance Show MethodDecl
instance Read MethodDecl
instance Eq MethodDecl
instance Show MethodOrFieldDecl
instance Read MethodOrFieldDecl
instance Eq MethodOrFieldDecl
instance Show SliceDecl
instance Read SliceDecl
instance Eq SliceDecl

module Language.Slice.Syntax.Parser
parse :: Parser a -> SourceName -> ByteString -> Either SyntaxError a
parseFile :: String -> IO (Either SyntaxError [SliceDecl])
parseIdent :: Parser Ident
parseNsQualIdent :: Parser NsQualIdent
parseMethod :: Parser MethodDecl
parseField :: Parser FieldDecl
parseType :: Parser SliceType
parseSemTermField :: Parser FieldDecl
parseConst :: Parser SliceDecl
parseIfDef :: Parser [SliceDecl]
parseSlice :: Parser SliceDecl
parseSlices :: Parser [SliceDecl]
data SyntaxError
SyntaxError :: String -> SourcePos -> [Message] -> SyntaxError
ctxt :: SyntaxError -> String
pos :: SyntaxError -> SourcePos
msgs :: SyntaxError -> [Message]
instance Eq SyntaxError
instance Show SyntaxError
