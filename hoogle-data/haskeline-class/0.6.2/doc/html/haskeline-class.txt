-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Class interface for working with Haskeline
--   
--   Haskeline provides all of its functionality within the scope of a
--   monad transformer. This module adds two pieces to this:
--   
--   <ul>
--   <li>Introduced here is a type-class which defines the operations
--   supported by the Haskeline monad transformer - MonadHaskeline</li>
--   <li>A newtype wrapper around Haskeline's InputT, called HaskelineT.
--   Sadly, InputT defines ints own instance of the mtl MonadState, which
--   is no good for folks wanting to use InputT in an existing monad
--   transformer stack.</li>
--   </ul>
--   
--   HaskelineT also has an instance of MonadState, but it merely lifts the
--   functions further in the transformer stack.
--   
--   Large portions of the Haskeline functionality are re-exported here for
--   convinience.
--   
--   Note on build-dependencies: If you've succesfully built this with any
--   packages other than the ones noted, please let me know.
@package haskeline-class
@version 0.6.2


-- | Haskeline provides all of its functionality within the scope of a
--   monad transformer. This module adds two pieces to this:
--   
--   <ul>
--   <li>Introduced here is a type-class which defines the operations
--   supported by the Haskeline monad transformer - MonadHaskeline</li>
--   <li>A newtype wrapper around Haskeline's InputT, called HaskelineT.
--   Sadly, InputT defines ints own instance of the mtl MonadState, which
--   is no good for folks wanting to use InputT in an existing monad
--   transformer stack.</li>
--   </ul>
--   
--   HaskelineT also has an instance of MonadState, but it merely lifts the
--   functions further in the transformer stack.
--   
--   Large portions of the Haskeline functionality are re-exported here for
--   convinience.
module System.Console.Haskeline.Class
data HaskelineT m a

-- | Run a line-reading application, reading user <tt>Prefs</tt> from
--   <tt>~/.haskeline</tt>
runHaskelineT :: MonadException m => Settings m -> HaskelineT m a -> m a
runHaskelineTWithPrefs :: MonadException m => Prefs -> Settings m -> HaskelineT m a -> m a
class MonadException m => MonadHaskeline m
getInputLine :: MonadHaskeline m => String -> m (Maybe String)
getInputChar :: MonadHaskeline m => String -> m (Maybe Char)
outputStr :: MonadHaskeline m => String -> m ()
outputStrLn :: MonadHaskeline m => String -> m ()

-- | Application-specific customizations to the user interface.
data Settings m :: (* -> *) :: (* -> *) -> *
Settings :: CompletionFunc m -> Maybe FilePath -> Bool -> Settings

-- | Custom tab completion.
complete :: Settings -> CompletionFunc m

-- | Where to read/write the history at the start and end of each line
--   input session.
historyFile :: Settings -> Maybe FilePath

-- | If <a>True</a>, each nonblank line returned by <tt>getInputLine</tt>
--   will be automatically added to the history.
autoAddHistory :: Settings -> Bool

-- | A useful default. In particular:
--   
--   <pre>
--   defaultSettings = Settings {
--             complete = completeFilename,
--             historyFile = Nothing,
--             autoAddHistory = True
--             }
--   </pre>
defaultSettings :: MonadIO m => Settings m

-- | Because <a>complete</a> is the only field of <a>Settings</a> depending
--   on <tt>m</tt>, the expression <tt>defaultSettings {completionFunc =
--   f}</tt> leads to a type error from being too general. This function
--   works around that issue, and may become unnecessary if another field
--   depending on <tt>m</tt> is added.
setComplete :: CompletionFunc m -> Settings m -> Settings m

-- | <a>Prefs</a> allow the user to customize the terminal-style
--   line-editing interface. They are read by default from
--   <tt>~/.haskeline</tt>; to override that behavior, use <a>readPrefs</a>
--   and <tt>runInputTWithPrefs</tt>.
--   
--   Each line of a <tt>.haskeline</tt> file defines one field of the
--   <a>Prefs</a> datatype; field names are case-insensitive and
--   unparseable lines are ignored. For example:
--   
--   <pre>
--   editMode: Vi
--   completionType: MenuCompletion
--   maxhistorysize: Just 40
--   </pre>
data Prefs :: *

-- | Read <a>Prefs</a> from a given file. If there is an error reading the
--   file, the <a>defaultPrefs</a> will be returned.
readPrefs :: FilePath -> IO Prefs

-- | The default preferences which may be overwritten in the
--   <tt>.haskeline</tt> file.
defaultPrefs :: Prefs
data Interrupt :: *
Interrupt :: Interrupt

-- | Catch and handle an exception of type <a>Interrupt</a>.
handleInterrupt :: MonadException m => m a -> m a -> m a
instance Monad m => Monad (HaskelineT m)
instance Monad m => Functor (HaskelineT m)
instance Monad m => Applicative (HaskelineT m)
instance MonadIO m => MonadIO (HaskelineT m)
instance MonadException m => MonadException (HaskelineT m)
instance MonadTrans HaskelineT
instance MonadException m => MonadHaskeline (HaskelineT m)
instance MonadHaskeline m => MonadHaskeline (StateT s m)
instance MonadState s m => MonadState s (HaskelineT m)
instance MonadException m => MonadHaskeline (InputT m)
