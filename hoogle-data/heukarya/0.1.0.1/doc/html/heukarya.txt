-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A genetic programming based on tree structure.
--   
--   It based on Data.Dynamic and tree container, so that Gene can
--   represent both haskell functions and syntax trees by type
--   connstructors. since it also supports higher order functions by
--   multiple way type parsing, there's no need to have any variable in
--   Gene's Tree structure.
@package heukarya
@version 0.1.0.1


-- | Operation and interface for Genes
module AI.Heukarya.Gene

-- | generate a tree structured Eukarya.
genEukarya :: (RandomGen g, HeukaryaGene d) => g -> Int -> Text -> [d] -> Tree d

-- | crossover two Eukarya
crossEukarya :: (RandomGen g, HeukaryaGene d) => g -> Int -> (Tree d, Tree d) -> (Tree d, Tree d)

-- | mutate Eukarya
mutateEukarya :: (RandomGen g, HeukaryaGene d) => g -> Int -> [d] -> Tree d -> Tree d

-- | Gene's interface use <a>Text</a> to represent types
class (NFData d, Show d) => HeukaryaGene d where equalType c a b = (instanceOf c) a b && (instanceOf c) b a directType c a b = (instanceOf c) a b || (instanceOf c) b a generalizeType c a b = if (instanceOf c) a b then Just a else if (instanceOf c) b a then Just b else Nothing
evalTreeGene :: HeukaryaGene d => Tree d -> d
geneTypeRep :: HeukaryaGene d => d -> Text
geneHTypes :: HeukaryaGene d => d -> [([Text], Text)]
outputHTreeType :: HeukaryaGene d => Tree d -> Text
instanceOf :: HeukaryaGene d => d -> Text -> Text -> Bool
equalType :: HeukaryaGene d => d -> Text -> Text -> Bool
directType :: HeukaryaGene d => d -> Text -> Text -> Bool
generalizeType :: HeukaryaGene d => d -> Text -> Text -> Maybe Text


-- | a sort of Eukarya,Jungle, operating
module AI.Heukarya.Jungle

-- | evaluate a Jungle
evalJungle :: HeukaryaGene a => Seq (Tree a) -> Seq a

-- | generate a Jungle
genJungle :: (Eq len, Num len, RandomGen g, HeukaryaGene d) => g -> Int -> [d] -> Text -> len -> Seq (Tree d)

-- | crossover the Eukaryas in Jungle
crossJungle :: (RandomGen g, HeukaryaGene d) => g -> Int -> Seq (Tree d) -> Double -> Seq (Tree d)

-- | mutating the Eukarya in Jungle
mutateJungle :: (RandomGen g, HeukaryaGene d) => g -> Int -> [d] -> Seq (Tree d) -> Double -> Seq (Tree d)

-- | choose better Eukarya, one to one competition
choiceJungle :: (Ord n, RandomGen g) => g -> Seq n -> Seq a -> Double -> Seq a


-- | control center for external using
module AI.Heukarya.Center

-- | configuration of ecosystem
data EcoConfig
EcoConfig :: Int -> Int -> Double -> Double -> Double -> Text -> EcoConfig

-- | the number of Heukarya contained in EcoSystem
num :: EcoConfig -> Int

-- | depth of Heukaryas' tree structure
depth :: EcoConfig -> Int

-- | probability of Eukarya who has bigger fitness win the game
maxWinProb :: EcoConfig -> Double

-- | probability of mutating
mutateProb :: EcoConfig -> Double

-- | probability of pairing crossover
crossProb :: EcoConfig -> Double

-- | Heukaryas' root's type, represented by Text
outType :: EcoConfig -> Text

-- | storing the data which are not writable to file
data EcoUnWritable g d
EcoUnWritable :: g -> [d] -> EcoUnWritable g d

-- | Random Generator
rndGen :: EcoUnWritable g d -> g

-- | genes for constructing Heukarya
genes :: EcoUnWritable g d -> [d]

-- | EcoSystem consists of ecosystem's configuration and Jungle. `Tree rep`
--   is sometimes used for repsentation of Heukarya by `Tree String`
data EcoSystem g d rep
EcoSystem :: EcoUnWritable g d -> EcoConfig -> Seq (Tree rep) -> EcoSystem g d rep
ecoUnW :: EcoSystem g d rep -> EcoUnWritable g d
ecoConfig :: EcoSystem g d rep -> EcoConfig
ecoJungle :: EcoSystem g d rep -> Seq (Tree rep)

-- | initial a EcoSystem
initGeneration :: (RandomGen g, HeukaryaGene rep) => EcoUnWritable g rep -> EcoConfig -> EcoSystem g rep rep

-- | evolve a EcoSystem one step Parameters: EcoSystem , fitness function
nextGeneration :: (Ord n, RandomGen g, HeukaryaGene rep) => EcoSystem g rep rep -> Seq n -> EcoSystem g rep rep

-- | evolving until condiction suffered or max number of Generations hitted
--   Parameters : max number of generations, EcoSystem, stop evolving's
--   Condiction , fitness function, generation counter(placed by zero when
--   used)
evolveGeneration :: (Ord a, Ord n, RandomGen g, HeukaryaGene rep) => a -> EcoSystem g rep rep -> (Seq (Tree rep) -> Bool) -> (Tree rep -> n) -> a -> EcoSystem g rep rep

-- | evolving until condiction suffered or max number of Generations hitted
--   save checkpoint per period Parameters : max number of generations,
--   checkpoint's file path, save checkpoint per x generations, EcoSystem,
--   stop evolving's Condiction , fitness function, generation
--   counter(placed by zero when used)
evolveCheckGeneration :: (Integral a, Ord n, RandomGen g, HeukaryaGene rep) => a -> FilePath -> a -> EcoSystem g rep rep -> (Seq (Tree rep) -> Bool) -> (Tree rep -> n) -> a -> IO (EcoSystem g rep rep)

-- | read a EcoSystem from file and addon UnWritable data Parameters :
--   filepath for reading, UnWritable data
readEcoSystem :: Show rep => FilePath -> EcoUnWritable g rep -> IO (EcoSystem g rep rep)

-- | write a EcoSystem into file without UnWritable data Parameters :
--   filepath for saving, EcoSystem saved
writeEcoSystem :: Show a => FilePath -> EcoSystem t t1 a -> IO ()
defaultEcoConfig :: EcoConfig
instance Show EcoConfig
instance Read EcoConfig


-- | a implement of <a>Gene</a>
module AI.Heukarya.Gene.Dynamic

-- | Transform a syntax tree to a expression
evalTreeGene :: HeukaryaGene d => Tree d -> d

-- | Get Gene's Type representation
geneTypeRep :: HeukaryaGene d => d -> Text

-- | Get every possible input type and output type
--   
--   <pre>
--   &gt;&gt;&gt; geneHTypes $ toDyn "(+)" ((+)::Int -&gt; Int -&gt; Int)
--   [([],"Int -&gt; Int -&gt; Int"),(["Int"],"Int -&gt; Int"),(["Int","Int"],"Int")]
--   </pre>
geneHTypes :: HeukaryaGene d => d -> [([Text], Text)]

-- | get tree's actual output type.
outputHTreeType :: HeukaryaGene d => Tree d -> Text
toDyn :: Typeable a => Text -> a -> Dynamic
fromDyn :: Typeable a => Dynamic -> a -> a
fromDynamic :: Typeable a => Dynamic -> Maybe a
dynApp :: Dynamic -> Dynamic -> Dynamic
dynApply :: Dynamic -> Dynamic -> Maybe Dynamic
dynTypeRep :: Dynamic -> TypeRep
instance NFData Dynamic
instance Ord Dynamic
instance Eq Dynamic
instance Show Dynamic
instance HeukaryaGene Dynamic


-- | a List of Dynamics for operating Double value
module AI.Heukarya.Gene.Dynamic.Double

-- | a List of Dynamics for operating Double value
doubleGeneList :: [Dynamic]
