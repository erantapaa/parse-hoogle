-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Lazy bit strings
--   
--   Lazy bit strings, built on the top of bytestrings.
@package bitstring
@version 0.0.0


-- | Big-endian bitstrings. In this context, "big-endian" means that the
--   bits in the bytes are in the opposite order than what would be
--   logical. If you ask me, this is just plain stupid, but some people
--   apparently still use it...
module Data.BitString.BigEndian
data BitString
empty :: BitString

-- | Create a <a>BitString</a> from a strict <a>ByteString</a>
bitString :: ByteString -> BitString

-- | Create a <a>BitString</a> from a lazy <a>ByteString</a>
bitStringLazy :: ByteString -> BitString

-- | Create a <a>BitString</a> from a portion of a <a>ByteString</a>.
--   Warning! No boundary checks are performed!
unsafeBitString' :: Int64 -> Int64 -> ByteString -> BitString
take :: Int64 -> BitString -> BitString
drop :: Int64 -> BitString -> BitString
splitAt :: Int64 -> BitString -> (BitString, BitString)
append :: BitString -> BitString -> BitString
concat :: [BitString] -> BitString
toList :: BitString -> [Bool]
fromList :: [Bool] -> BitString
to01List :: BitString -> [Word8]
from01List :: [Word8] -> BitString
null :: BitString -> Bool
length :: BitString -> Int64
foldl' :: (a -> Bool -> a) -> a -> BitString -> a
findSubstring :: BitString -> BitString -> Maybe Int64
realizeBitStringLazy :: BitString -> ByteString
realizeBitStringStrict :: BitString -> ByteString
realizeBitString' :: BitString -> [ByteString]
instance Eq BitString
instance Show BitString
instance Eq BitChunk
instance Show BitChunk


-- | Lazy bitstrings, somewhat similar to lazy bytestrings. This module is
--   intended to be imported qualified.
module Data.BitString
data BitString
empty :: BitString

-- | Create a <a>BitString</a> from a strict <a>ByteString</a>
bitString :: ByteString -> BitString

-- | Create a <a>BitString</a> from a lazy <a>ByteString</a>
bitStringLazy :: ByteString -> BitString

-- | Create a <a>BitString</a> from a portion of a <a>ByteString</a>.
--   Warning! No boundary checks are performed!
unsafeBitString' :: Int64 -> Int64 -> ByteString -> BitString
take :: Int64 -> BitString -> BitString
drop :: Int64 -> BitString -> BitString
splitAt :: Int64 -> BitString -> (BitString, BitString)
append :: BitString -> BitString -> BitString
concat :: [BitString] -> BitString
toList :: BitString -> [Bool]
fromList :: [Bool] -> BitString
to01List :: BitString -> [Word8]
from01List :: [Word8] -> BitString
null :: BitString -> Bool
length :: BitString -> Int64
foldl' :: (a -> Bool -> a) -> a -> BitString -> a
findSubstring :: BitString -> BitString -> Maybe Int64
realizeBitStringLazy :: BitString -> ByteString
realizeBitStringStrict :: BitString -> ByteString
realizeBitString' :: BitString -> [ByteString]
instance Eq BitString
instance Show BitString
instance Eq BitChunk
instance Show BitChunk
