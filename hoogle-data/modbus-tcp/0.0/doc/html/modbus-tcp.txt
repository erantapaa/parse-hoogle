-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Communicate with Modbus devices over TCP
--   
--   Implements the Modbus TPC/IP protocol.
@package modbus-tcp
@version 0.0


-- | An implementation of the Modbus TPC/IP protocol.
--   
--   This implementation is based on the <tt>MODBUS Application Protocol
--   Specification V1.1b</tt>
--   (<a>http://www.modbus.org/docs/Modbus_Application_Protocol_V1_1b.pdf</a>).
module System.Modbus.TCP

-- | MODBUS TCP/IP Application Data Unit
--   
--   See: MODBUS Application Protocol Specification V1.1b, section 4.1
data TCP_ADU
TCP_ADU :: Header -> FunctionCode -> ByteString -> TCP_ADU
aduHeader :: TCP_ADU -> Header
aduFunction :: TCP_ADU -> FunctionCode
aduData :: TCP_ADU -> ByteString

-- | MODBUS Application Protocol Header
--   
--   See: MODBUS Application Protocol Specification V1.1b, section 4.1
data Header
Header :: TransactionId -> ProtocolId -> Word16 -> UnitId -> Header
hdrTransactionId :: Header -> TransactionId
hdrProtocolId :: Header -> ProtocolId
hdrLength :: Header -> Word16
hdrUnitId :: Header -> UnitId

-- | The function code field of a MODBUS data unit is coded in one byte.
--   Valid codes are in the range of 1 ... 255 decimal (the range 128 - 255
--   is reserved and used for exception responses). When a message is sent
--   from a Client to a Server device the function code field tells the
--   server what kind of action to perform. Function code 0 is not valid.
--   
--   Sub-function codes are added to some function codes to define multiple
--   actions.
--   
--   See: MODBUS Application Protocol Specification V1.1b, sections 4.1 and
--   5
data FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 6.1
ReadCoils :: FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 6.2
ReadDiscreteInputs :: FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 6.3
ReadHoldingRegisters :: FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 6.4
ReadInputRegisters :: FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 6.5
WriteSingleCoil :: FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 6.6
WriteSingleRegister :: FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 6.7
ReadExceptionStatus :: FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 6.8
Diagnostics :: FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 6.9
GetCommEventCounter :: FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 6.10
GetCommEventLog :: FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 6.11
WriteMultipleCoils :: FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 6.12
WriteMultipleRegisters :: FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 6.13
ReportSlaveID :: FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 6.14
ReadFileRecord :: FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 6.15
WriteFileRecord :: FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 6.16
MaskWriteRegister :: FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 6.17
ReadWriteMultipleRegisters :: FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 6.18
ReadFIFOQueue :: FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 6.19
EncapsulatedInterfaceTransport :: FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 5
UserDefinedCode :: Word8 -> FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 5
ReservedCode :: Word8 -> FunctionCode
OtherCode :: Word8 -> FunctionCode
ExceptionCode :: FunctionCode -> FunctionCode

-- | See: MODBUS Application Protocol Specification V1.1b, section 7
data MB_Exception

-- | The function code received in the query is not an allowable action for
--   the server (or slave). This may be because the function code is only
--   applicable to newer devices, and was not implemented in the unit
--   selected. It could also indicate that the server (or slave) is in the
--   wrong state to process a request of this type, for example because it
--   is unconfigured and is being asked to return register values.
IllegalFunction :: MB_Exception

-- | The data address received in the query is not an allowable address for
--   the server (or slave). More specifically, the combination of reference
--   number and transfer length is invalid. For a controller with 100
--   registers, the PDU addresses the first register as 0, and the last one
--   as 99. If a request is submitted with a starting register address of
--   96 and a quantity of registers of 4, then this request will
--   successfully operate (address-wise at least) on registers 96, 97, 98,
--   99. If a request is submitted with a starting register address of 96
--   and a quantity of registers of 5, then this request will fail with
--   Exception Code 0x02 "Illegal Data Address" since it attempts to
--   operate on registers 96, 97, 98, 99 and 100, and there is no register
--   with address 100.
IllegalDataAddress :: MB_Exception

-- | A value contained in the query data field is not an allowable value
--   for server (or slave). This indicates a fault in the structure of the
--   remainder of a complex request, such as that the implied length is
--   incorrect. It specifically does NOT mean that a data item submitted
--   for storage in a register has a value outside the expectation of the
--   application program, since the MODBUS protocol is unaware of the
--   significance of any particular value of any particular register.
IllegalDataValue :: MB_Exception

-- | An unrecoverable error occurred while the server (or slave) was
--   attempting to perform the requested action.
SlaveDeviceFailure :: MB_Exception

-- | Specialized use in conjunction with programming commands. The server
--   (or slave) has accepted the request and is processing it, but a long
--   duration of time will be required to do so. This response is returned
--   to prevent a timeout error from occurring in the client (or master).
--   The client (or master) can next issue a Poll Program Complete message
--   to determine if processing is completed.
Acknowledge :: MB_Exception

-- | Specialized use in conjunction with programming commands. The server
--   (or slave) is engaged in processing a longâ€“duration program command.
--   The client (or master) should retransmit the message later when the
--   server (or slave) is free.
SlaveDeviceBusy :: MB_Exception

-- | Specialized use in conjunction with function codes
--   <a>ReadFileRecord</a> and <a>WriteFileRecord</a> and reference type 6,
--   to indicate that the extended file area failed to pass a consistency
--   check.
MemoryParityError :: MB_Exception

-- | Specialized use in conjunction with gateways, indicates that the
--   gateway was unable to allocate an internal communication path from the
--   input port to the output port for processing the request. Usually
--   means that the gateway is misconfigured or overloaded.
GatewayPathUnavailable :: MB_Exception

-- | Specialized use in conjunction with gateways, indicates that no
--   response was obtained from the target device. Usually means that the
--   device is not present on the network.
GatewayTargetDeviceFailedToRespond :: MB_Exception
data Exception
ExceptionResponse :: FunctionCode -> MB_Exception -> Exception
DecodeException :: String -> Exception
OtherException :: String -> Exception
type TransactionId = Word16
type ProtocolId = Word16
type UnitId = Word8

-- | Sends a raw MODBUS command.
command :: TransactionId -> ProtocolId -> UnitId -> FunctionCode -> ByteString -> Socket -> IO (Either Exception TCP_ADU)
readCoils :: TransactionId -> ProtocolId -> UnitId -> Word16 -> Word16 -> Socket -> IO (Either Exception [Word8])
readDiscreteInputs :: TransactionId -> ProtocolId -> UnitId -> Word16 -> Word16 -> Socket -> IO (Either Exception [Word8])
readHoldingRegisters :: TransactionId -> ProtocolId -> UnitId -> Word16 -> Word16 -> Socket -> IO (Either Exception [Word16])
readInputRegisters :: TransactionId -> ProtocolId -> UnitId -> Word16 -> Word16 -> Socket -> IO (Either Exception [Word16])
writeSingleCoil :: TransactionId -> ProtocolId -> UnitId -> Word16 -> Bool -> Socket -> IO (Either Exception ())
writeSingleRegister :: TransactionId -> ProtocolId -> UnitId -> Word16 -> Word16 -> Socket -> IO (Either Exception ())
writeMultipleRegisters :: TransactionId -> ProtocolId -> UnitId -> Word16 -> [Word16] -> Socket -> IO (Either Exception Word16)
instance Show Header
instance Show FunctionCode
instance Show TCP_ADU
instance Show MB_Exception
instance Show Exception
instance Serialize MB_Exception
instance Serialize FunctionCode
instance Serialize Header
instance Serialize TCP_ADU
