-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A general library for sending/receiving push notif. through dif. services.
--   
--   This library offers an API for sending/receiving notifications, and
--   handling the registration of devices on the server.
--   
--   It provides a general abstraction which can be used to communicate
--   through different services as APNS, GCM, MPNS.
--   
--   For more information and test examples:
--   <a>http://gsoc2013cwithmobiledevices.blogspot.com.ar/</a>
--   
--   GitHub repository:
--   <a>https://github.com/MarcosPividori/GSoC-Communicating-with-mobile-devices</a>
@package push-notify-general
@version 0.1.0.0

module Network.PushNotify.General

-- | <a>startPushService</a> starts the PushService creating a PushManager.
startPushService :: PushServiceConfig -> IO PushManager

-- | <a>closePushService</a> stops the Push service.
closePushService :: PushManager -> IO ()

-- | <a>sendPush</a> sends messages to the appropiate Push Servers.
sendPush :: PushManager -> PushNotification -> HashSet Device -> IO PushResult

-- | <a>withPushManager</a> creates a new manager, uses it in the provided
--   function, and then releases it.
withPushManager :: PushServiceConfig -> (PushManager -> IO a) -> IO a

-- | Main manager for the Push Service.
--   
--   This <a>PushManager</a> will be used to send notifications and also
--   can be added as a subsite to a Yesod app in order to receive
--   registrations and messages from devices as HTTP POST requests.
data PushManager

-- | Unique identifier of an app/device.
data Device

-- | An Android app.
GCM :: RegId -> Device

-- | An iOS app.
APNS :: DeviceToken -> Device

-- | A WPhone app.
MPNS :: DeviceURI -> Device

-- | Main settings for the Push Service.
data PushServiceConfig
PushServiceConfig :: PushConfig -> (Device -> Value -> IO ()) -> (Device -> Value -> IO RegisterResult) -> (Device -> IO ()) -> ((Device, Device) -> IO ()) -> PushServiceConfig

-- | Main configuration.
pushConfig :: PushServiceConfig -> PushConfig

-- | The callback function to be called when receiving messages from
--   devices (This means through the CCS connection or as POST requests to
--   the Yesod subsite).
newMessageCallback :: PushServiceConfig -> Device -> Value -> IO ()

-- | The callback function to be called when a new device try to register
--   on server.
newDeviceCallback :: PushServiceConfig -> Device -> Value -> IO RegisterResult

-- | The callback function to be called when a device unregisters.
unRegisteredCallback :: PushServiceConfig -> Device -> IO ()

-- | The callback function to be called when a device's identifier changes.
newIdCallback :: PushServiceConfig -> (Device, Device) -> IO ()

-- | <a>RegisterResult</a> represents the result of a device attempting to
--   register
data RegisterResult
SuccessfulReg :: RegisterResult
ErrorReg :: Text -> RegisterResult

-- | Main settings for the different Push Services. <tt>Nothing</tt> means
--   the service won't be used.
data PushConfig
PushConfig :: Maybe GCMConfig -> Maybe APNSConfig -> Maybe MPNSConfig -> PushConfig
gcmConfig :: PushConfig -> Maybe GCMConfig
apnsConfig :: PushConfig -> Maybe APNSConfig
mpnsConfig :: PushConfig -> Maybe MPNSConfig

-- | Settings for GCM service.
data GCMConfig
Http :: GCMHttpConfig -> GCMConfig
Ccs :: GCMCcsConfig -> GCMConfig

-- | General notification to be sent.
data PushNotification
PushNotification :: Maybe APNSmessage -> Maybe GCMmessage -> Maybe MPNSmessage -> PushNotification
apnsNotif :: PushNotification -> Maybe APNSmessage
gcmNotif :: PushNotification -> Maybe GCMmessage
mpnsNotif :: PushNotification -> Maybe MPNSmessage

-- | <a>generalNotif</a> builds a general notification from JSON data.
--   
--   If data length exceeds 256 bytes (max payload limit for APNS) it will
--   fails.
--   
--   For MPNS, data will be XML-labeled as "jsonData".
generalNotif :: Object -> IO PushNotification

-- | PushResult represents a general result after communicating with a Push
--   Server.
data PushResult
PushResult :: HashSet Device -> HashMap Device (Either Text SomeException) -> HashSet Device -> HashSet Device -> HashMap Device Device -> PushResult

-- | Notifications that were successfully sent.
successful :: PushResult -> HashSet Device

-- | Notifications that were not successfully sent.
failed :: PushResult -> HashMap Device (Either Text SomeException)

-- | Failed notifications that you need to resend, because servers were not
--   available or there was a problem with the connection.
toResend :: PushResult -> HashSet Device

-- | Set of unregistered devices.
unRegistered :: PushResult -> HashSet Device

-- | Map of devices which have changed their identifiers. (old -&gt; new)
newIds :: PushResult -> HashMap Device Device
