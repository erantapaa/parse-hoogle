-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Create values which expire after a period of time.
--   
--   expiring-mvar provides the type ExpiringMVar. ExpiringMVar is a
--   container for a single value. When creating an ExpiringMVar, a thread
--   is spawned which deletes the value held in the ExpiringMVar after a
--   given period of time. The timer can be reset, cancelled, or restarted
--   with a new time amount.
@package expiring-mvar
@version 0.1

module Control.Concurrent.MVar.Expiring

-- | An ExpiringMVar contains a value that will be thrown out after a given
--   period of time. The timer can be reset before the value expires.
data ExpiringMVar a

-- | Create a new value that is set to be thrown away after a minimum
--   period of time. Each call to newExpiringMVar spawns a thread that runs
--   until the value expires.
newExpiringMVar :: a -> Int -> IO (ExpiringMVar a)

-- | If the value has not yet expired, you are able to retrieve it. Reading
--   the value does not expire it. In other words, readExpiringMVar behaves
--   like readMVar.
readExpiringMVar :: ExpiringMVar a -> IO (Maybe a)

-- | If the value has not yet expired, reset the timer. If the value
--   expired, no timer is created.
resetExpiringMVarTimer :: ExpiringMVar a -> IO (ExpiringMVar a)

-- | Determine whether an MVar has expired.
isExpiredMVar :: ExpiringMVar a -> IO Bool

-- | If you decide that a value should never expire, you can cancel the
--   timer.
cancelExpiration :: ExpiringMVar a -> IO ()

-- | If the value hasn't yet expired, change the timer and reset it.
changeExpiration :: Int -> ExpiringMVar a -> IO (ExpiringMVar a)

-- | For a collection of ExpiringMVars, filter out the ones that have
--   expired, and put the remaining ExpiringMVars in a new collection.
removeExpiredMVars :: (Monoid (f (ExpiringMVar a)), Alternative f, Traversable t) => t (ExpiringMVar a) -> IO (f (ExpiringMVar a))
