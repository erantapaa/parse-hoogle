-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Functional concurrency with unamb using a custom scheduler.
--   
--   Functional concurrency with unamb using a custom scheduler, which
--   makes it practical to use in dense situations (eg. infinite folds on
--   unamb).
@package unamb-custom
@version 0.13


-- | Functional concurrency with unambiguous choice. The primary export of
--   this module is the <tt>unamb</tt> function, which has the following
--   semantics:
--   
--   <pre>
--   unamb x   _|_ = x
--   unamb _|_ x   = x
--   unamb x   x   = x
--   </pre>
--   
--   This function is only well-defined when the arguments are constrained
--   to be either equal or <tt>_|_</tt>. Using it in other capacities will
--   break purity.
--   
--   In particular, it is always safe to use on the <tt>()</tt> type.
--   
--   This is a reimplementation of the <tt>unamb</tt> package by Conal
--   Elliott. This package implements a custom thread scheduler, whose
--   purpose is to make feasabile "dense" uses of <tt>unamb</tt> such as:
--   
--   <pre>
--   foldr1 unamb [ if x == 100 then 100 else undefined | x &lt;- [0..] ] 
--   </pre>
module UnambCustom.Unamb

-- | Race two actions against each other, returning the value of the first
--   one to finish.
race :: IO a -> IO a -> IO a

-- | Unambiguous choice. Calling <tt>unamb x y</tt> has a proof obligation
--   that if <tt>x /= _|_</tt> and <tt>y /= _|_</tt> then <tt>x = y</tt>.
--   If this is satisfied, returns the more defined of the two.
--   
--   <tt>unamb</tt> will treat any exception raised as <tt>_|_</tt>.
unamb :: a -> a -> a

-- | Kill all active threads managed by the custom scheduler. Useful for
--   debugging in interactive sessions, but not recommended otherwise (it
--   will cause all running <tt>unamb</tt>s to block forever).
rebootScheduler :: IO ()
