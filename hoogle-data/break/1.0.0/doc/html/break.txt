-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Break from a loop
--   
@package break
@version 1.0.0


-- | Example usage:
--   
--   <pre>
--   import Control.Break
--   import Control.Monad.State
--   import Prelude hiding (break)
--   
--   example :: State Int ()
--   example = loop (do
--       n &lt;- lift get                -- Inside a `loop`, wrap commands in `lift`
--       if n &lt; 10
--           then lift (put (n + 1))  -- You keep looping by default
--           else break () )          -- Use `break` to exit from the `loop`
--   </pre>
--   
--   The <a>loop</a> command runs the given command repeatedly until the
--   command breaks from the <a>loop</a> using <a>break</a>:
--   
--   <pre>
--   &gt;&gt;&gt; execState example 0
--   10
--   </pre>
--   
--   For some effects (like <a>State</a>), you can omit <a>lift</a>:
--   
--   <pre>
--   example :: State Int ()
--   example = loop (do
--       n &lt;- get
--       if n &lt; 10
--           then put (n + 1)
--           else break () )
--   </pre>
--   
--   The <a>loop</a> will return whatever value you supply to <a>break</a>:
--   
--   <pre>
--   example :: State Int Bool
--   example = loop (do
--       n &lt;- get
--       if n &lt; 10
--           then put (n + 1)
--           else break True )
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runState example 0
--   (True,10)
--   </pre>
module Control.Break

-- | For the most common use cases you will:
--   
--   <ul>
--   <li>build <a>Break</a> commands using <a>lift</a> or
--   <a>break</a><ul><li>combine <a>Break</a> commands using <tt>do</tt>
--   notation</li><li>consume <a>Break</a> commands using
--   <a>loop</a></li></ul>The meaning of the type
--   parameters:<ul><li><tt>r</tt>: the argument type of <a>break</a> and
--   the return type of the <a>loop</a></li><li><tt>m</tt>: the base
--   <a>Monad</a> that you are running in a <a>loop</a></li><li><tt>a</tt>:
--   the return type of a <a>Break</a> command (not the same as the return
--   value of the <a>loop</a>)</li></ul></li>
--   </ul>
data Break r m a

-- | <tt>(loop m)</tt> runs the action <tt>'m'</tt> repeatedly until you
--   <a>break</a> from the <a>loop</a>
loop :: Monad m => Break r m () -> m r

-- | <a>break</a> from a <a>loop</a>
--   
--   The argument you supply to <a>break</a> is the return value of the
--   <a>loop</a>
break :: Monad m => r -> Break r m a

-- | Lift a computation from the argument monad to the constructed monad.
lift :: MonadTrans t => forall (m :: * -> *) a. Monad m => m a -> t m a
instance Functor m => Functor (Break r m)
instance (Monad m, Functor m) => Applicative (Break r m)
instance Monad m => Monad (Break r m)
instance MonadTrans (Break r)
instance MonadIO m => MonadIO (Break r m)
instance MonadCont m => MonadCont (Break r m)
instance MonadState s m => MonadState s (Break r m)
instance MonadWriter w m => MonadWriter w (Break r m)
