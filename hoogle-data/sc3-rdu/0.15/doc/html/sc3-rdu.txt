-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell bindings to sc3-rdu (sc3 rd ugens)
--   
@package sc3-rdu
@version 0.15


-- | RDU UGen definitions.
module Sound.SC3.UGen.External.RDU
std_I :: Int -> String -> Double -> I

-- | Input meta-data, <tt>(min,max,warp,step,units)</tt>.
type I_Meta = (Double, Double, String, Double, String)

-- | In cases where inputs have clear meta-data this should be stored at
--   hsc3-db, but it isn't.
std_I' :: Int -> String -> Double -> I_Meta -> I
osc_U :: String -> [Rate] -> Rate -> [I] -> Int -> String -> Bool -> U
dustR_dsc :: U
u_nc_input :: U -> U
expRandN_dsc :: U

-- | Copies spectral frame (ie. PV_Copy with two outputs).
pv_Split :: UGen -> UGen -> UGen

-- | Variant that unpacks the output <i>mce</i> node.
pv_Split' :: UGen -> UGen -> (UGen, UGen)

-- | A <a>pv_Split</a> variant, like <tt>ffta</tt>, that allocates a
--   <a>localBuf</a> by tracing the input graph to locate the parent
--   <tt>FFT</tt> or <tt>PV_Split</tt> node.
pv_Splita :: ID i => i -> UGen -> UGen

-- | Variant that unpacks the output <i>mce</i> node.
pv_splita :: ID i => i -> UGen -> (UGen, UGen)
randN_dsc :: U
rDelayMap_dsc :: U

-- | Network of delay line operations.
rDelayMap :: UGen -> UGen -> UGen -> UGen -> UGen
rDelaySet_dsc :: U
rDelaySet :: UGen -> UGen -> UGen
rDelaySetB_dsc :: U
rDelaySetB :: UGen -> UGen -> UGen -> UGen
rdl_dsc :: U
rdl :: Int -> UGen -> UGen
rFreezer_dsc :: U
rFreezer :: UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen
rShufflerB :: UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen -> UGen
rShufflerB_dsc :: U
data RShufflerB a
RShufflerB :: a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> RShufflerB a
bufnum :: RShufflerB a -> a
readLocationMinima :: RShufflerB a -> a
readLocationMaxima :: RShufflerB a -> a
readIncrementMinima :: RShufflerB a -> a
readIncrementMaxima :: RShufflerB a -> a
durationMinima :: RShufflerB a -> a
durationMaxima :: RShufflerB a -> a
envelopeAmplitudeMinima :: RShufflerB a -> a
envelopeAmplitudeMaxima :: RShufflerB a -> a
envelopeShapeMinima :: RShufflerB a -> a
envelopeShapeMaxima :: RShufflerB a -> a
envelopeSkewMinima :: RShufflerB a -> a
envelopeSkewMaxima :: RShufflerB a -> a
stereoLocationMinima :: RShufflerB a -> a
stereoLocationMaxima :: RShufflerB a -> a
interOffsetTimeMinima :: RShufflerB a -> a
interOffsetTimeMaxima :: RShufflerB a -> a
ftableReadLocationIncrement :: RShufflerB a -> a
readIncrementQuanta :: RShufflerB a -> a
interOffsetTimeQuanta :: RShufflerB a -> a
rShufflerB_r :: RShufflerB UGen -> UGen
rShufflerL_dsc :: U
rShufflerL :: UGen -> UGen -> UGen -> UGen
rTraceRd_dsc :: U
rTraceRd :: Rate -> UGen -> UGen -> UGen -> UGen -> UGen
rPlayTrace_dsc :: U
rPlayTrace :: Rate -> UGen -> UGen -> UGen -> UGen -> UGen

-- | The number of outputs is the length of the inputs array.
tScramble_dsc :: U
dustR :: ID z => z -> Rate -> UGen -> UGen -> UGen
expRandN :: ID z => Int -> z -> UGen -> UGen -> UGen
iRandN :: ID z => Int -> z -> UGen -> UGen -> UGen
linRandN :: ID z => Int -> z -> UGen -> UGen -> UGen -> UGen
randN :: ID z => Int -> z -> UGen -> UGen -> UGen
tScramble :: ID z => z -> Rate -> UGen -> UGen -> UGen
dustRM :: UId m => Rate -> UGen -> UGen -> m UGen
expRandNM :: UId m => Int -> UGen -> UGen -> m UGen
iRandNM :: UId m => Int -> UGen -> UGen -> m UGen
linRandNM :: UId m => Int -> UGen -> UGen -> UGen -> m UGen
randNM :: UId m => Int -> UGen -> UGen -> m UGen
tScrambleM :: UId m => Rate -> UGen -> UGen -> m UGen
