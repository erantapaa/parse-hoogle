-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple web application server
--   
--   A simple web application server using iteratees.
@package hyena
@version 0.1.0.1


-- | Defines the interface implemented by all web applications.
--   
--   Example application:
--   
--   <pre>
--   {-# LANGUAGE Rank2Types, ImpredicativeTypes #-}
--   module Main where
--   </pre>
--   
--   <pre>
--   import qualified Data.ByteString as S
--   import qualified Data.ByteString.Char8 as C (pack, unpack)
--   import Hyena.Server
--   import Network.Wai (Application, Enumerator, pathInfo)
--   import System.Directory (getCurrentDirectory)
--   import System.FilePath ((&lt;/&gt;), makeRelative)
--   import System.IO
--   </pre>
--   
--   <pre>
--   sendFile :: FilePath -&gt; IO Enumerator
--   sendFile path = do
--     h &lt;- openBinaryFile path ReadMode
--     let yieldBlock f z = do
--                block &lt;- S.hGetNonBlocking h 1024
--                if S.null block then hClose h &gt;&gt; return z
--                  else do
--                    z' &lt;- f z block
--                    case z' of
--                      Left z''  -&gt; hClose h &gt;&gt; return z''
--                      Right z'' -&gt; yieldBlock f z''
--     return yieldBlock
--   </pre>
--   
--   <pre>
--   fileServer :: Application
--   fileServer environ = do
--     cwd &lt;- getCurrentDirectory
--     let path = (cwd &lt;/&gt; makeRelative "/" (C.unpack $ pathInfo environ))
--     size &lt;- getFileSize path
--     -- Here you should add security checks, etc.
--     let contentType = (C.pack "Content-Type",
--                        C.pack "text/plain")
--         contentLength = (C.pack "Content-Length",
--                          C.pack (show size))
--     enumerator &lt;- sendFile path
--     return (200, C.pack "OK", [contentType,contentLength], enumerator)
--   </pre>
--   
--   <pre>
--   getFileSize :: String -&gt; IO Integer
--   getFileSize fn = withFile fn ReadMode hFileSize
--   </pre>
--   
--   <pre>
--   main :: IO ()
--   main = serve fileServer
--   </pre>
module Network.Wai

-- | An application takes an environment and returns a HTTP status code, a
--   sequence of headers and an <a>Enumerator</a> containing the response
--   body.
type Application = Environment -> IO (Int, ByteString, Headers, Enumerator)

-- | A left-fold enumerator.
type Enumerator = forall a. (a -> ByteString -> IO (Either a a)) -> a -> IO a

-- | An environment providing information regarding the request.
data Environment
Environment :: Method -> ByteString -> ByteString -> Maybe (ByteString) -> (Int, Int) -> Headers -> Enumerator -> (String -> IO ()) -> Environment

-- | The HTTP request method, such as "GET" or "POST".
requestMethod :: Environment -> Method

-- | The initial portion of the request URL's "path" that corresponds to
--   the application, so that the application knows its virtual "location".
--   This may be an empty string, if the application corresponds to the
--   "root" of the server.
scriptName :: Environment -> ByteString

-- | The remainder of the request URL's "path", designating the virtual
--   "location" of the request's target within the application. This may be
--   an empty string, if the request URL targets the application root and
--   does not have a trailing slash.
pathInfo :: Environment -> ByteString

-- | The portion of the request URL that follows the <tt>"?"</tt>, if any.
--   May be empty or absent.
queryString :: Environment -> Maybe (ByteString)

-- | The version of the protocol the client used to send the request.
--   Typically this will be <tt>(1, 0)</tt> or <tt>(1, 1)</tt> and may be
--   used by the application to determine how to treat any HTTP request
--   headers.
requestProtocol :: Environment -> (Int, Int)

-- | The client-supplied HTTP request headers.
headers :: Environment -> Headers

-- | An <a>Enumerator</a> from which the HTTP body can be read.
input :: Environment -> Enumerator

-- | A function with which error output can be written, for the purpose of
--   recording program or other errors in a standardized and possibly
--   centralized location. This function will not add a trailing newline to
--   the string.
errors :: Environment -> String -> IO ()

-- | The HTTP request headers.
type Headers = [(ByteString, ByteString)]

-- | The HTTP request method.
data Method
Options :: Method
Get :: Method
Head :: Method
Post :: Method
Put :: Method
Delete :: Method
Trace :: Method
Connect :: Method
instance Eq Method
instance Show Method


-- | This module specifies the server configuration.
module Hyena.Config

-- | The server configuration.
data Config
Config :: String -> Bool -> Bool -> Handle -> Int -> Config

-- | Address (hostname or IP) to bind to when listening for connections.
address :: Config -> String

-- | Run in the background.
daemonize :: Config -> Bool

-- | Print lots of debug information.
debug :: Config -> Bool

-- | Where to dump log messages in daemon mode.
logHandle :: Config -> Handle

-- | Port to bind to when listening for connections.
port :: Config -> Int

-- | Reads the server options from the command line. Settings from
--   <a>defaultConfig</a> is used for unspecified options. Creates missing
--   directories as needed for the log file referred to by the
--   <tt>--log</tt> flag when in <a>daemonize</a>d mode.
configFromFlags :: IO Config

-- | A set of default options most users should use. Creates missing
--   directories as needed for the default log file when in
--   <a>daemonize</a>d mode.
defaultConfig :: IO Config
instance Show Flags
instance Show a => Show (Flag a)
instance Show Config
instance Monoid Flags
instance Monoid (Flag a)
instance Functor Flag


-- | Core module of the server. Receives HTTP requests, runs the
--   application and sends responses.
module Hyena.Server

-- | Forward requests to the given <a>Application</a> forever. Read server
--   configuration from command line flags.
serve :: Application -> IO ()

-- | Forward requests to the given <a>Application</a> forever. Use supplied
--   server configuration.
serveWithConfig :: Config -> Application -> IO ()
instance Monad Server
instance MonadIO Server
instance MonadReader ServerConfig Server
