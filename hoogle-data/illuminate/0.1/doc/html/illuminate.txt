-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A fast syntax highlighting library built with alex.
--   
--   illuminate is a source-code syntax highlighting library and a
--   command-line highlighting tool. It can produce output in HTML, XHTML,
--   LaTeX, or ANSI. It is smaller, less memory-hungry, and much faster
--   than highlighting-kate.
@package illuminate
@version 0.1

module Text.Highlighting.Illuminate.Types
type Token = (TokenType, String)
type Tokens = Seq Token
data TokenType
Whitespace :: TokenType
Keyword :: TokenType
Symbol :: TokenType
String :: TokenType
Char :: TokenType
Number :: TokenType
Regex :: TokenType
Type :: TokenType
Label :: TokenType
Preproc :: TokenType
Function :: TokenType
Variable :: TokenType
VarId :: TokenType
ConId :: TokenType
CBracket :: TokenType
Comment :: TokenType
Selector :: TokenType
Property :: TokenType
Tag :: TokenType
Entity :: TokenType
Math :: TokenType
NewFile :: TokenType
OldFile :: TokenType
Alert :: TokenType
Plain :: TokenType
EOF :: TokenType
type Scanner = String -> Either String Tokens
data Lexer
Lexer :: String -> [String] -> [GlobPattern] -> Scanner -> Lexer
name :: Lexer -> String
aliases :: Lexer -> [String]
filenames :: Lexer -> [GlobPattern]
scan :: Lexer -> Scanner
instance Eq TokenType
instance Show TokenType

module Text.Highlighting.Illuminate.BibTeX
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.C
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.Cabal
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.CPlusPlus
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.CSharp
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.CSS
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.D
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.Diff
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.Haskell
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.Alex
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.Java
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.Javascript
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.HTML
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.LiterateHaskell
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.Python
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.Ruby
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.RHTML
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.Sh
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.TeX
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.XML
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.RXML
lexer :: Lexer
instance Eq AlexPosn
instance Show AlexPosn
instance Monad Alex

module Text.Highlighting.Illuminate.Format
data Options
Options :: Style -> Bool -> Int -> Bool -> Options

-- | Highlighting style
optStyle :: Options -> Style

-- | Number lines?
optNumberLines :: Options -> Bool

-- | Number of first line
optStartNumber :: Options -> Int

-- | Add anchor with number as ID to each line
optAnchors :: Options -> Bool
defaultOptions :: Options

-- | A Style is a generic instruction for formatting a token of the given
--   type. The same style can be used for various output formats (HTML,
--   ANSI, LaTeX...).
type Style = TokenType -> [Styling]
data Styling
Bold :: Styling
Italic :: Styling
Underline :: Styling
Fixed :: Styling
Foreground :: Color -> Styling
Background :: Color -> Styling
data Color
Aqua :: Color
Black :: Color
Blue :: Color
Fuchsia :: Color
Gray :: Color
Green :: Color
Lime :: Color
Maroon :: Color
Navy :: Color
Olive :: Color
Purple :: Color
Red :: Color
Silver :: Color
Teal :: Color
White :: Color
Yellow :: Color

-- | Second argument is a fallback color
Hex :: Integer -> Color -> Color

-- | A colorful style.
colorful :: Style

-- | A style based on hscolour.
hscolour :: Style

-- | A black and white style.
monochrome :: Style

-- | Highlight tokens using ANSI control sequences.
toANSI :: Options -> Tokens -> String

-- | Highlight as LaTeX. Use with
--   
--   <pre>
--   \usepackage{fancyvrb}
--   \usepackage[usenames,dvipsnames]{color}
--   </pre>
toLaTeX :: Options -> Tokens -> String

-- | Highlight as XHTML with CSS classes.
toXHtmlCSS :: Options -> Tokens -> Html

-- | Highlight as XHTML with inline styles.
toXHtmlInline :: Options -> Tokens -> Html

-- | CSS snippet appropriate for the specificed options.
cssFor :: Options -> String

-- | Highlight as HTML with CSS classes.
toHtmlCSS :: Options -> Tokens -> Html

-- | Highlight as HTML with inline styles.
toHtmlInline :: Options -> Tokens -> Html
instance Eq Color
instance Show Color
instance Read Color
instance Eq Styling
instance Show Styling
instance Read Styling

module Text.Highlighting.Illuminate

-- | Tokenize a string, returning either an error or a sequence of tokens.
--   If the first argument is <tt>Just</tt> a lexer, use the lexer to
--   tokenize. If <tt>Nothing</tt>, return a single <tt>Plain</tt> token
--   with the whole source. <a>tokenize</a> is designed to be used with
--   <a>lexerByName</a> or <a>lexerByFilename</a>: for example,
--   
--   <pre>
--   tokenize (lexerByName "Haskell") input
--   </pre>
tokenize :: Maybe Lexer -> String -> Either String Tokens
data Lexer
Lexer :: String -> [String] -> [GlobPattern] -> Scanner -> Lexer
name :: Lexer -> String
aliases :: Lexer -> [String]
filenames :: Lexer -> [GlobPattern]
scan :: Lexer -> Scanner
lexers :: [Lexer]

-- | Matches a lexer by name or alias (case-insensitive).
lexerByName :: String -> Maybe Lexer

-- | Matches a lexer by the filename of the source file.
lexerByFilename :: String -> Maybe Lexer
