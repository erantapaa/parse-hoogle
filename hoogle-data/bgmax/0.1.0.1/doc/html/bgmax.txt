-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Parse BgMax-files
--   
@package bgmax
@version 0.1.0.1


-- | This module contain data definitions for the different types of
--   <a>Posts</a> or "Transaction Codes" that may occur in a BgMax file, as
--   well as auxiliary data types.
--   
--   The datatypes should map in a straightforward way to the documentation
--   from <a>Bankgirocentralen</a>.
module Finance.BgMax.TK

-- | Testmark
data TestMark

-- | Test file
T :: TestMark

-- | Production file
P :: TestMark

-- | BankGirot currently only supports EUR and SEK
data Currency
EUR :: Currency
SEK :: Currency

-- | Reference. The references correspond to the reference codes defined in
--   <a>the BgMax documentation</a>.
data Reference

-- | No reference.
Ref0 :: Reference

-- | No reference.
Ref1 :: Reference

-- | Reference is correct OCR-no.
Ref2 :: Integer -> Reference

-- | One or more references.
Ref3 :: ByteString -> Reference

-- | One reference.
Ref4 :: ByteString -> Reference

-- | Incorrect reference.
Ref5 :: ByteString -> Reference

-- | Reserved for future use.
Ref :: Int -> ByteString -> Reference

-- | Deposit type. Deposit type according to bank agreement.
data DepositType
K :: DepositType
D :: DepositType
S :: DepositType

-- | Transaction type reused in TK 20,21,22,23.
data Transaction
Transaction :: Integer -> Reference -> Integer -> Int -> Integer -> Int -> Transaction
senderBG :: Transaction -> Integer
reference :: Transaction -> Reference
ammount :: Transaction -> Integer

-- | See the BGC documentation for the meaning of payment channel code.
paymentChannel :: Transaction -> Int
bcgNo :: Transaction -> Integer

-- | See the BGC documentation for the meaning of the image mark.
imageMark :: Transaction -> Int

-- | Start post.
data TK01_t
TK01_t :: ByteString -> Int -> LocalTime -> TestMark -> TK01_t
layoutName :: TK01_t -> ByteString
layoutVersion :: TK01_t -> Int
timeStamp :: TK01_t -> LocalTime
testMark :: TK01_t -> TestMark

-- | Opening post.
data TK05_t
TK05_t :: Integer -> Maybe Integer -> Currency -> TK05_t
recipientBG :: TK05_t -> Integer
recipientPG :: TK05_t -> Maybe Integer
currency :: TK05_t -> Currency

-- | Payment post.
data TK20_t
TK20_t :: Transaction -> TK20_t
payment :: TK20_t -> Transaction

-- | Deduction post.
data TK21_t
TK21_t :: Transaction -> Int -> TK21_t
deduction :: TK21_t -> Transaction

-- | See the BGC documentation for the meaning of the deduction code.
deductionCode :: TK21_t -> Int

-- | Extra reference post.
data TK22_t
TK22_t :: Transaction -> TK22_t
positiveReference :: TK22_t -> Transaction

-- | Extra reference post (negative ammount).
data TK23_t
TK23_t :: Transaction -> TK23_t
negativeReference :: TK23_t -> Transaction

-- | Information post.
data TK25_t
TK25_t :: ByteString -> TK25_t
information :: TK25_t -> ByteString

-- | Name post.
data TK26_t
TK26_t :: ByteString -> ByteString -> TK26_t
name :: TK26_t -> ByteString
extraName :: TK26_t -> ByteString

-- | Address 1 post.
data TK27_t
TK27_t :: ByteString -> ByteString -> TK27_t
address :: TK27_t -> ByteString
zipCode :: TK27_t -> ByteString

-- | Address 2 post.
data TK28_t
TK28_t :: ByteString -> ByteString -> ByteString -> TK28_t
city :: TK28_t -> ByteString
country :: TK28_t -> ByteString
countryCode :: TK28_t -> ByteString

-- | Organisation-number post.
data TK29_t
TK29_t :: Integer -> TK29_t
orgNo :: TK29_t -> Integer

-- | Deposit post.
data TK15_t
TK15_t :: Integer -> Day -> Int -> Integer -> Currency -> Int -> Maybe DepositType -> TK15_t
recipientAccount :: TK15_t -> Integer
paymentDate :: TK15_t -> Day
depositNo :: TK15_t -> Int
depositAmmount :: TK15_t -> Integer
depositCurrency :: TK15_t -> Currency
paymentDeductionCount :: TK15_t -> Int
depositType :: TK15_t -> Maybe DepositType

-- | End post
data TK70_t
TK70_t :: Int -> Int -> Int -> Int -> TK70_t
paymentsCount :: TK70_t -> Int
deductionsCount :: TK70_t -> Int
extraReferenceCount :: TK70_t -> Int
depositCount :: TK70_t -> Int

-- | Sum type for posts.
data Post
TK01 :: TK01_t -> Post
TK05 :: TK05_t -> Post
TK20 :: TK20_t -> Post
TK21 :: TK21_t -> Post
TK22 :: TK22_t -> Post
TK23 :: TK23_t -> Post
TK25 :: TK25_t -> Post
TK26 :: TK26_t -> Post
TK27 :: TK27_t -> Post
TK28 :: TK28_t -> Post
TK29 :: TK29_t -> Post
TK15 :: TK15_t -> Post
TK70 :: TK70_t -> Post

-- | The BGC documentation states that implementations should ignore posts
--   they don't understand, they will be instead be recorded using this
--   constructor.
TK :: Int -> Post
instance Show TestMark
instance Show Currency
instance Show Reference
instance Show DepositType
instance Show Transaction
instance Show TK01_t
instance Show TK05_t
instance Show TK20_t
instance Show TK21_t
instance Show TK22_t
instance Show TK23_t
instance Show TK25_t
instance Show TK26_t
instance Show TK27_t
instance Show TK28_t
instance Show TK29_t
instance Show TK15_t
instance Show TK70_t
instance Show Post


-- | This module contains a Parser for the <a>BgMax</a> format.
--   
--   The parser tries to be forgiving with input it doesn't understand.
module Finance.BgMax.Parser

-- | Parser for BgMax posts.
parseBgMax :: Parser [Post]
instance N Integer
instance N Int
