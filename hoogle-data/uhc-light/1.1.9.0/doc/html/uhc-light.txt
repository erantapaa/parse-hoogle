-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Part of UHC packaged as cabal/hackage installable library
--   
@package uhc-light
@version 1.1.9.0

module UHC.Light.Compiler.EHC.Main.Utils
type FileSuffMp = [(FileSuffix, FileSuffInitState, Bool)]
emptyFileSuffMp :: FileSuffMp

-- | Allowed suffixes, order is significant.
mkFileSuffMpHs :: EHCOpts -> FileSuffMp
fileSuffMpHsNoSuff :: FileSuffMp
data ImmediateQuitOption
ImmediateQuitOption_Help :: ImmediateQuitOption
ImmediateQuitOption_Version :: ImmediateQuitOption
ImmediateQuitOption_Meta_Variant :: ImmediateQuitOption
ImmediateQuitOption_Meta_Targets :: ImmediateQuitOption
ImmediateQuitOption_Meta_TargetDefault :: ImmediateQuitOption
ImmediateQuitOption_Meta_Optimizations :: ImmediateQuitOption
ImmediateQuitOption_Meta_Pkgdir_System :: ImmediateQuitOption
ImmediateQuitOption_Meta_Pkgdir_User :: ImmediateQuitOption
ImmediateQuitOption_VersionDotted :: ImmediateQuitOption
ImmediateQuitOption_VersionAsNumber :: ImmediateQuitOption

-- | The options to use.
data EHCOpts
EHCOpts :: (forall a. String -> a -> a) -> String -> Bool -> Bool -> Bool -> Bool -> Bool -> Maybe ImmediateQuitOption -> Bool -> CompilePoint -> Bool -> Bool -> MaybeOk Target -> MaybeOk TargetFlavor -> Bool -> OptimizationLevel -> OptimizationScope -> OptimizeS -> OptimizeOptionMp -> Bool -> [CoreOpt] -> Bool -> Bool -> Bool -> Bool -> FileLocPath -> Verbosity -> EHBuiltinNames -> EHCEnvironment -> Bool -> Int -> Bool -> Int -> Bool -> Bool -> Bool -> LinkingStyle -> Bool -> Bool -> Bool -> Bool -> FileLocPath -> StringPath -> PackageDatabase -> FPath -> String -> String -> Maybe FPath -> Bool -> Bool -> [PackageSearchFilter] -> Maybe String -> Bool -> Maybe PkgOption -> Maybe String -> Maybe String -> CmdLineOpts -> Bool -> Bool -> Map PgmExec FilePath -> Map FilePath [ExecOpt] -> EHCOpts
ehcOptTrace :: EHCOpts -> forall a. String -> a -> a
ehcOptAspects :: EHCOpts -> String
ehcOptShowHS :: EHCOpts -> Bool
ehcOptShowEH :: EHCOpts -> Bool
ehcOptPriv :: EHCOpts -> Bool
ehcOptHsChecksInEH :: EHCOpts -> Bool
ehcOptShowTopTyPP :: EHCOpts -> Bool
ehcOptImmQuit :: EHCOpts -> Maybe ImmediateQuitOption
ehcOptDebug :: EHCOpts -> Bool
ehcStopAtPoint :: EHCOpts -> CompilePoint
ehcOptPolyKinds :: EHCOpts -> Bool
ehcOptExtensibleRecords :: EHCOpts -> Bool
ehcOptMbTarget :: EHCOpts -> MaybeOk Target
ehcOptMbTargetFlavor :: EHCOpts -> MaybeOk TargetFlavor
ehcOptBangPatterns :: EHCOpts -> Bool
ehcOptOptimizationLevel :: EHCOpts -> OptimizationLevel
ehcOptOptimizationScope :: EHCOpts -> OptimizationScope
ehcOptOptimizations :: EHCOpts -> OptimizeS
ehcOptOptimizeOptionMp :: EHCOpts -> OptimizeOptionMp
ehcOptDumpCoreStages :: EHCOpts -> Bool
ehcOptCoreOpts :: EHCOpts -> [CoreOpt]
ehcOptGenTrampoline_ :: EHCOpts -> Bool
ehcOptGenTrace :: EHCOpts -> Bool
ehcOptEmitHS :: EHCOpts -> Bool
ehcOptEmitEH :: EHCOpts -> Bool
ehcOptImportFileLocPath :: EHCOpts -> FileLocPath
ehcOptVerbosity :: EHCOpts -> Verbosity
ehcOptBuiltinNames :: EHCOpts -> EHBuiltinNames
ehcOptEnvironment :: EHCOpts -> EHCEnvironment
ehcCfgInstFldHaveSelf :: EHCOpts -> Bool
ehcOptPrfCutOffAt :: EHCOpts -> Int
ehcCfgClassViaRec :: EHCOpts -> Bool
ehcOptTyBetaRedCutOffAt :: EHCOpts -> Int
ehcDebugStopAtCoreError :: EHCOpts -> Bool
ehcOptCheckRecompile :: EHCOpts -> Bool
ehcDebugStopAtHIError :: EHCOpts -> Bool
ehcOptLinkingStyle :: EHCOpts -> LinkingStyle
ehcOptGenGenerics :: EHCOpts -> Bool
ehcOptFusion :: EHCOpts -> Bool
ehcOptAltDriver :: EHCOpts -> Bool
ehcOptHiValidityCheck :: EHCOpts -> Bool
ehcOptLibFileLocPath :: EHCOpts -> FileLocPath
ehcOptPkgdirLocPath :: EHCOpts -> StringPath
ehcOptPkgDb :: EHCOpts -> PackageDatabase
ehcProgName :: EHCOpts -> FPath
ehcCurDir :: EHCOpts -> String
ehcOptUserDir :: EHCOpts -> String
ehcOptMbOutputFile :: EHCOpts -> Maybe FPath
ehcOptCPP :: EHCOpts -> Bool
ehcOptUseAssumePrelude :: EHCOpts -> Bool
ehcOptPackageSearchFilter :: EHCOpts -> [PackageSearchFilter]
ehcOptOutputDir :: EHCOpts -> Maybe String
ehcOptKeepIntermediateFiles :: EHCOpts -> Bool
ehcOptPkgOpt :: EHCOpts -> Maybe PkgOption
ehcOptCfgInstallRoot :: EHCOpts -> Maybe String
ehcOptCfgInstallVariant :: EHCOpts -> Maybe String
ehcOptCmdLineOpts :: EHCOpts -> CmdLineOpts
ehcOptCmdLineOptsDoneViaPragma :: EHCOpts -> Bool
ehcOptOverloadedStrings :: EHCOpts -> Bool
ehcOptPgmExecMp :: EHCOpts -> Map PgmExec FilePath
ehcOptExecOptsMp :: EHCOpts -> Map FilePath [ExecOpt]
emptyEHCOpts :: EHCOpts

-- | Either fromJust with a possible panic, or with a default value (when
--   debugging)
ehcOptFromJust :: EHCOpts -> String -> a -> Maybe a -> a
data InOrOutputFor
OutputFor_Module :: InOrOutputFor
OutputFor_Pkg :: InOrOutputFor
InputFrom_Loc :: FileLoc -> InOrOutputFor

-- | Core options
data CoreOpt
CoreOpt_NONE :: CoreOpt
CoreOpt_Dump :: CoreOpt
CoreOpt_DumpBinary :: CoreOpt
CoreOpt_DumpAlsoNonParseable :: CoreOpt
CoreOpt_Run :: CoreOpt
CoreOpt_RunDump :: CoreOpt
CoreOpt_RunDumpVerbose :: CoreOpt
CoreOpt_RunTrace :: CoreOpt
CoreOpt_RunTraceExtensive :: CoreOpt
CoreOpt_RunPPNames :: CoreOpt
CoreOpt_RunPPVerbose :: CoreOpt
ehcOptTarget :: EHCOpts -> Target
ehcOptTargetFlavor :: EHCOpts -> TargetFlavor

-- | Generate system F (20120421 AD: very much under construction)
ehcOptCoreSysF :: EHCOpts -> Bool

-- | Typecheck system F (20120421 AD: very much under construction)
ehcOptCoreSysFCheck :: EHCOpts -> Bool

-- | Typecheck system F (20120421 AD: very much under construction)
ehcOptCoreSysFGen :: EHCOpts -> Bool

-- | Typecheck system F (20120421 AD: very much under construction)
ehcOptCoreSysFCheckOnlyVal :: EHCOpts -> Bool
ehcOptEmitExecBytecode :: EHCOpts -> Bool
ehcOptEmitBytecode :: EHCOpts -> Bool

-- | Check Cmm
ehcOptCmmCheck :: EHCOpts -> Bool

-- | Via Core -&gt; Grin -&gt; CMM -&gt; JS ?
ehcOptIsViaGrinCmmJavaScript :: EHCOpts -> Bool

-- | Via Core -&gt; JS ?
ehcOptIsViaCoreJavaScript :: EHCOpts -> Bool
ehcOptIsViaCmm :: EHCOpts -> Bool
ehcOptIsViaGrin :: EHCOpts -> Bool
ehcOptBuiltin :: EHCOpts -> (EHBuiltinNames -> x) -> x
ehcOptBuiltin2 :: EHCOpts -> (EHBuiltinNames -> Int -> HsName) -> Int -> HsName

-- | Do linking into executable?
ehcOptDoExecLinking :: EHCOpts -> Bool

-- | Build pkg options, all (except obligatory name) wrapped in Maybe/[]
--   because of possible absence. 20140829 AD: will be used to construct
--   config file
data PkgOption
PkgOption :: PkgName -> [String] -> [PkgName] -> PkgOption

-- | build a package with name
pkgoptName :: PkgOption -> PkgName

-- | 20140829 AD not yet used: exposed modules
pkgoptExposedModules :: PkgOption -> [String]

-- | 20140829 AD not yet used: depends on pkgs
pkgoptBuildDepends :: PkgOption -> [PkgName]
emptyPkgOption :: PkgOption

-- | Pgm (internal program used) options, in particular alternate internal
--   shell commands
data PgmExec
PgmExec_CPP :: PgmExec
PgmExec_C :: PgmExec
PgmExec_Linker :: PgmExec

-- | Wrapper around options, adding semantics for adapting cmd specific
--   behavior
data ExecOpt

-- | plain option
ExecOpt_Plain :: String -> ExecOpt

-- | output file
ExecOpt_Output :: (String -> String) -> ExecOpt
execOptsPlain :: [ExecOpt] -> [String]
optOptsIsYes :: Eq opt => Maybe [opt] -> opt -> Bool
showStr2stMp :: Map String opt -> String

-- | The default EHC options.
defaultEHCOpts :: EHCOpts

-- | Commandline opts for ehc/uhc (EHC)
ehcCmdLineOpts :: GetOptCmdLineOpts

-- | Commandline opts for ehcr/uhcr (EHCRun)
ehcrunCmdLineOpts :: GetOptCmdLineOpts

-- | The description for GetOpt
type GetOptCmdLineOpts = [OptDescr (EHCOpts -> EHCOpts)]

-- | Apply the cmdline opts description for <tt>EHC</tt> to a EHCOpts,
--   returning Nothing when there were no options
ehcCmdLineOptsApply :: [EHCOpts -> EHCOpts] -> [String] -> EHCOpts -> (Maybe EHCOpts, [String], [String])

-- | Apply the cmdline opts description for <tt>EHCRun</tt> to a EHCOpts,
--   returning Nothing when there were no options
ehcrunCmdLineOptsApply :: [String] -> EHCOpts -> (Maybe EHCOpts, [String], [String])
data FIOpts
FIOpts :: !Bool -> !Bool -> !Bool -> !Bool -> !FIMode -> !UID -> ![TyVarCateg] -> ![HsName] -> ![HsName] -> !TyVarIdS -> !Bool -> !Bool -> !Bool -> !FIOBind -> !FIOBind -> Maybe (Ty -> Ty -> Err) -> FIOpts
fioLeaveRInst :: FIOpts -> !Bool
fioBindRFirst :: FIOpts -> !Bool
fioBindLFirst :: FIOpts -> !Bool
fioBindLBeforeR :: FIOpts -> !Bool
fioMode :: FIOpts -> !FIMode
fioUniq :: FIOpts -> !UID
fioBindCategs :: FIOpts -> ![TyVarCateg]
fioNoRLabElimFor :: FIOpts -> ![HsName]
fioNoLLabElimFor :: FIOpts -> ![HsName]
fioDontBind :: FIOpts -> !TyVarIdS
fioExpandEqTyVar :: FIOpts -> !Bool
fioPredAsTy :: FIOpts -> !Bool
fioAllowRPredElim :: FIOpts -> !Bool
fioBindLVars :: FIOpts -> !FIOBind
fioBindRVars :: FIOpts -> !FIOBind
fiMbMkErrClash :: FIOpts -> Maybe (Ty -> Ty -> Err)
strongFIOpts :: FIOpts
instLFIOpts :: FIOpts
instLRFIOpts :: FIOpts
unifyFIOpts :: FIOpts
instFIOpts :: FIOpts
fioSwapPolarity :: Polarity -> FIOpts -> FIOpts
fioSwapOpts :: FIOpts -> FIOpts
fioMkStrong :: FIOpts -> FIOpts
fioMkWeak :: FIOpts -> FIOpts
fioMkUnify :: FIOpts -> FIOpts
fioIsSubsume :: FIOpts -> Bool
weakFIOpts :: FIOpts

-- | individual optimizations, unit of turning off/on. (Assumption) Names
--   of alternatives must start with Optimize_
data Optimize
Optimize_GrinLocal :: Optimize
Optimize_StrictnessAnalysis :: Optimize
data OptimizationLevel
OptimizationLevel_Off :: OptimizationLevel
OptimizationLevel_Normal :: OptimizationLevel
OptimizationLevel_Much :: OptimizationLevel
OptimizationLevel_Full :: OptimizationLevel
mkDirFileLoc :: String -> FileLoc
type StringPath = [String]
type FileLocPath = [FileLoc]
data FileLocKind
FileLocKind_Dir :: FileLocKind
FileLocKind_Pkg :: PkgKey -> String -> FileLocKind
FileLocKind_PkgDb :: FileLocKind
data FileLoc
FileLoc :: FileLocKind -> String -> FileLoc
filelocKind :: FileLoc -> FileLocKind
filelocDir :: FileLoc -> String
emptyFileLoc :: FileLoc
fileLocPkgDb :: FileLoc
mkPkgFileLoc :: PkgKey -> String -> FileLoc
filelocIsPkg :: FileLoc -> Bool
type FileSearchLoc = FileLoc
type PkgKey = (PkgKey1, PkgKey2)
type PkgKey1 = PkgName
type PkgKey2 = Maybe Version
showPkgKey :: PkgKey -> String

-- | Description of hiding/exposing pkgs, determining the used packages for
--   looking up modules.
data PackageSearchFilter
PackageSearchFilter_HideAll :: PackageSearchFilter
PackageSearchFilter_HidePkg :: [PkgKey] -> PackageSearchFilter
PackageSearchFilter_ExposePkg :: [PkgKey] -> PackageSearchFilter
pkgSearchFilter :: (x -> Maybe PkgKey) -> ([PkgKey] -> PackageSearchFilter) -> [x] -> [PackageSearchFilter]
type PackageCfgKeyVals = Map String String

-- | Per package info
data PackageInfo
PackageInfo :: !FileLoc -> !Int -> !HsNameS -> !(Set PkgKey) -> !Bool -> PackageInfo

-- | directory location
pkginfoLoc :: PackageInfo -> !FileLoc

-- | for multiple packages the relative order , pkginfoKeyVals ::
--   PackageCfgKeyVals -- key/value pairs of pkg config info
pkginfoOrder :: PackageInfo -> !Int

-- | exposed modules
pkginfoExposedModules :: PackageInfo -> !HsNameS

-- | pkgs dependend on
pkginfoBuildDepends :: PackageInfo -> !(Set PkgKey)

-- | pkg is exposed?
pkginfoIsExposed :: PackageInfo -> !Bool

-- | content of a package (keys are name, then version)
type PackageMp = Map PkgKey1 (Map PkgKey2 [PackageInfo])

-- | reverse map from module name to package key
type Module2PackageMp = Map HsName [PkgKey]

-- | A package database contains an actual package map, plus a function
--   that maps modules to associated package maps. The latter is computed
--   by "freezing" the package database using "pkgDbFreeze".
data PackageDatabase
PackageDatabase :: PackageMp -> Module2PackageMp -> PackageDatabase
pkgDbPkgMp :: PackageDatabase -> PackageMp
pkgDbMod2PkgMp :: PackageDatabase -> Module2PackageMp
emptyPackageMp :: PackageMp
emptyPackageDatabase :: PackageDatabase
mkInternalPkgFileBase :: PkgKey -> String -> Target -> TargetFlavor -> FilePath
ehcOptWholeProgHPTAnalysis :: EHCOpts -> Bool

-- | optimizes a particular option
ehcOptOptimizes :: Optimize -> EHCOpts -> Bool

-- | Adapt options for extracting final ty
fioMkFinal :: FIOpts -> FIOpts
data FIOBind
FIOBindYes :: FIOBind
FIOBindNoBut :: TyVarIdS -> FIOBind
fioBindIsYes :: FIOBind -> Bool
fioBindNoSet :: FIOBind -> TyVarIdS
predFIOpts :: FIOpts
implFIOpts :: FIOpts
ehcOptWholeProgOptimizationScope :: EHCOpts -> Bool
ehcOptEarlyModMerge :: EHCOpts -> Bool
optsDiscrRecompileRepr :: EHCOpts -> String

-- | possibly adapt with pragmas
ehcOptUpdateWithPragmas :: Set Pragma -> EHCOpts -> (EHCOpts, Bool)

-- | Handle a commandline option directly
handleImmQuitOption :: GetOptCmdLineOpts -> [String] -> ImmediateQuitOption -> EHCOpts -> IO ()


-- | Base Public API (provisional, to be refactored)
module UHC.Light.Compiler.Base.API

-- | The options to use.
data EHCOpts
EHCOpts :: (forall a. String -> a -> a) -> String -> Bool -> Bool -> Bool -> Bool -> Bool -> Maybe ImmediateQuitOption -> Bool -> CompilePoint -> Bool -> Bool -> MaybeOk Target -> MaybeOk TargetFlavor -> Bool -> OptimizationLevel -> OptimizationScope -> OptimizeS -> OptimizeOptionMp -> Bool -> [CoreOpt] -> Bool -> Bool -> Bool -> Bool -> FileLocPath -> Verbosity -> EHBuiltinNames -> EHCEnvironment -> Bool -> Int -> Bool -> Int -> Bool -> Bool -> Bool -> LinkingStyle -> Bool -> Bool -> Bool -> Bool -> FileLocPath -> StringPath -> PackageDatabase -> FPath -> String -> String -> Maybe FPath -> Bool -> Bool -> [PackageSearchFilter] -> Maybe String -> Bool -> Maybe PkgOption -> Maybe String -> Maybe String -> CmdLineOpts -> Bool -> Bool -> Map PgmExec FilePath -> Map FilePath [ExecOpt] -> EHCOpts
ehcOptTrace :: EHCOpts -> forall a. String -> a -> a
ehcOptAspects :: EHCOpts -> String
ehcOptShowHS :: EHCOpts -> Bool
ehcOptShowEH :: EHCOpts -> Bool
ehcOptPriv :: EHCOpts -> Bool
ehcOptHsChecksInEH :: EHCOpts -> Bool
ehcOptShowTopTyPP :: EHCOpts -> Bool
ehcOptImmQuit :: EHCOpts -> Maybe ImmediateQuitOption
ehcOptDebug :: EHCOpts -> Bool
ehcStopAtPoint :: EHCOpts -> CompilePoint
ehcOptPolyKinds :: EHCOpts -> Bool
ehcOptExtensibleRecords :: EHCOpts -> Bool
ehcOptMbTarget :: EHCOpts -> MaybeOk Target
ehcOptMbTargetFlavor :: EHCOpts -> MaybeOk TargetFlavor
ehcOptBangPatterns :: EHCOpts -> Bool
ehcOptOptimizationLevel :: EHCOpts -> OptimizationLevel
ehcOptOptimizationScope :: EHCOpts -> OptimizationScope
ehcOptOptimizations :: EHCOpts -> OptimizeS
ehcOptOptimizeOptionMp :: EHCOpts -> OptimizeOptionMp
ehcOptDumpCoreStages :: EHCOpts -> Bool
ehcOptCoreOpts :: EHCOpts -> [CoreOpt]
ehcOptGenTrampoline_ :: EHCOpts -> Bool
ehcOptGenTrace :: EHCOpts -> Bool
ehcOptEmitHS :: EHCOpts -> Bool
ehcOptEmitEH :: EHCOpts -> Bool
ehcOptImportFileLocPath :: EHCOpts -> FileLocPath
ehcOptVerbosity :: EHCOpts -> Verbosity
ehcOptBuiltinNames :: EHCOpts -> EHBuiltinNames
ehcOptEnvironment :: EHCOpts -> EHCEnvironment
ehcCfgInstFldHaveSelf :: EHCOpts -> Bool
ehcOptPrfCutOffAt :: EHCOpts -> Int
ehcCfgClassViaRec :: EHCOpts -> Bool
ehcOptTyBetaRedCutOffAt :: EHCOpts -> Int
ehcDebugStopAtCoreError :: EHCOpts -> Bool
ehcOptCheckRecompile :: EHCOpts -> Bool
ehcDebugStopAtHIError :: EHCOpts -> Bool
ehcOptLinkingStyle :: EHCOpts -> LinkingStyle
ehcOptGenGenerics :: EHCOpts -> Bool
ehcOptFusion :: EHCOpts -> Bool
ehcOptAltDriver :: EHCOpts -> Bool
ehcOptHiValidityCheck :: EHCOpts -> Bool
ehcOptLibFileLocPath :: EHCOpts -> FileLocPath
ehcOptPkgdirLocPath :: EHCOpts -> StringPath
ehcOptPkgDb :: EHCOpts -> PackageDatabase
ehcProgName :: EHCOpts -> FPath
ehcCurDir :: EHCOpts -> String
ehcOptUserDir :: EHCOpts -> String
ehcOptMbOutputFile :: EHCOpts -> Maybe FPath
ehcOptCPP :: EHCOpts -> Bool
ehcOptUseAssumePrelude :: EHCOpts -> Bool
ehcOptPackageSearchFilter :: EHCOpts -> [PackageSearchFilter]
ehcOptOutputDir :: EHCOpts -> Maybe String
ehcOptKeepIntermediateFiles :: EHCOpts -> Bool
ehcOptPkgOpt :: EHCOpts -> Maybe PkgOption
ehcOptCfgInstallRoot :: EHCOpts -> Maybe String
ehcOptCfgInstallVariant :: EHCOpts -> Maybe String
ehcOptCmdLineOpts :: EHCOpts -> CmdLineOpts
ehcOptCmdLineOptsDoneViaPragma :: EHCOpts -> Bool
ehcOptOverloadedStrings :: EHCOpts -> Bool
ehcOptPgmExecMp :: EHCOpts -> Map PgmExec FilePath
ehcOptExecOptsMp :: EHCOpts -> Map FilePath [ExecOpt]

-- | The default EHC options.
defaultEHCOpts :: EHCOpts

-- | Creates a new Core name. All names generated with this function live
--   in the "Core API" namespace and will not collide with names in other
--   namespaces. Names in the "Core API" namespace cannot be called from
--   Haskell code.
--   
--   Use this function to create names used only inside Core code generated
--   by your own Compiler, e.g. module-scoped or local functions.
mkUniqueHsName :: String -> [String] -> String -> HsName

-- | Adds an additional prefix to a <a>HsName</a>. This can be used to
--   derive a new unique name from an existing name.
addHsNamePrefix :: String -> HsName -> HsName

-- | Creates a new Core name. The generated name lives in the default
--   namespace, hence may clash with Haskell-defined names.
mkHsName :: [String] -> String -> HsName

-- | Creates a new Core name. The generated name lives in the default
--   namespace, hence may clash with Haskell-defined names.
mkHsName1 :: String -> HsName
data CTag

-- | Haskell name representation, exports of constructors only intented for
--   internal use
data HsName
class HSNM a
mkHNm :: HSNM a => a -> HsName

-- | All possible targets, even though they may not be configured (done in
--   supportedTargetMp)
data Target
Target_None :: Target
Target_None_Core_AsIs :: Target
Target_None_Core_CoreRun :: Target
Target_None_TyCore_None :: Target
Target_Interpreter_Core_Jazy :: Target
Target_Interpreter_Core_JavaScript :: Target
Target_Interpreter_GrinCmm_JavaScript :: Target
Target_FullProgAnal_Grin_C :: Target
Target_FullProgAnal_Grin_LLVM :: Target
Target_FullProgAnal_Grin_JVM :: Target
Target_Interpreter_Grin_C :: Target
Target_FullProgAnal_Grin_CLR :: Target

-- | Scope of optimizations, increasingly more global
data OptimizationScope
OptimizationScope_PerModule :: OptimizationScope
OptimizationScope_WholeCore :: OptimizationScope
data Err
data MaybeOk a
JustOk :: a -> MaybeOk a
NotOk :: String -> MaybeOk a
data Verbosity
VerboseQuiet :: Verbosity
VerboseMinimal :: Verbosity
VerboseNormal :: Verbosity
VerboseALot :: Verbosity
VerboseDebug :: Verbosity
hsnEhcRunMain :: HsName
hsnMain :: HsName


-- | Core Public API (provisional)
--   
--   Intended for constructing basic Core Programs. Use the binary
--   serialization from <a>Binary</a> to produce a core file, which can be
--   compiled by UHC. You will need to install the full UHC Compiler Suite
--   in addition to uhc-light for this. See
--   <a>https://github.com/UU-ComputerScience/uhc</a> for more details.
--   
--   A small example program can be found at
--   <a>https://github.com/UU-ComputerScience/uhc/tree/master/EHC/demo/CoreApi/</a>
--   . In general, it is also a good idea to see what kind of Core UHC
--   generates for Haskell files. To do this, call UHC with the option
--   <tt>--coreopt=dump</tt>. This will produce an additional XXX.tcr file
--   which you can read in any text editor. It may also be a good idea to
--   add the <tt>NoGenericDeriving</tt> pragma to your haskell files, as
--   this will make the produced Core code much smaller.
--   
--   Restrictions:
--   
--   <ul>
--   <li>Extendable data types are not supported</li>
--   <li>Generated code is not (type-)checked, might cause runtime
--   crashes</li>
--   <li>Core parsing/Pretty printing is incomplete and might be partially
--   broken. The pretty printing should work good enough for dumping
--   generated core code as debug output.</li>
--   <li>Calling Haskell functions which use the haskell class system is
--   not (yet?) supported.</li>
--   <li>Avoiding name clashes is the responsibility of the user. The
--   behaviour if duplicate names exists is undefined.</li>
--   </ul>
--   
--   TODO:
--   
--   <ul>
--   <li>Should we add PatRest_Var? Does it actually work? (The HS frontend
--   doesn't seem to use it?)</li>
--   <li>Float, Double literals</li>
--   </ul>
module UHC.Light.Compiler.Core.API
data CModule
data CImport
data CExport
data CDeclMeta
data CDataCon
data CExpr
data CBind
data CAlt
data CPat
data CPatFld

-- | Creates the unit expresssion.
mkUnit :: EHCOpts -> CExpr

-- | Creates an <a>Int</a> constant.
mkInt :: EHCOpts -> Int -> CExpr

-- | Creates a Core <a>Integer</a> constant.
mkInteger :: EHCOpts -> Integer -> CExpr

-- | Creates a char constant.
mkChar :: Char -> CExpr

-- | Creates a string expression. The expression represents a packed
--   String, which can be passed to Haskell generated Core functions.
mkString :: EHCOpts -> String -> CExpr

-- | Generates an error expression, failing with the given string when
--   evaluated. (<a>error</a> in haskell)
mkError :: EHCOpts -> String -> CExpr

-- | Generates an undefined expression, failing when evaluated.
--   (<a>undefined</a> in haskell)
mkUndefined :: EHCOpts -> CExpr

-- | Creates a variable expression.
mkVar :: HsName -> CExpr

-- | Creates a (non-recursive) let binding.
mkLet1Plain :: HsName -> CExpr -> CExpr -> CExpr

-- | Creates a let binding, which is strict in the bound expression.
mkLet1Strict :: HsName -> CExpr -> CExpr -> CExpr

-- | Creates a let binding, where the bindings may be mutually recursive.
mkLetRec :: [CBind] -> CExpr -> CExpr
mkLam :: [HsName] -> CExpr -> CExpr

-- | Applies the first expression to all given arguments.
mkApp :: CExpr -> [CExpr] -> CExpr
mkBind1 :: HsName -> CExpr -> CBind
mkBind1Nm1 :: HsName -> CBind

-- | Creates a constructor tag.
mkCTag :: HsName -> HsName -> Int -> Int -> CTag

-- | Destruct a <a>CTag</a>.
destructCTag :: a -> (HsName -> HsName -> Int -> Int -> a) -> CTag -> a

-- | <a>CTag</a> for unit values ('()' in haskell).
ctagUnit :: CTag

-- | <a>CTag</a> of tuple/records.
ctagTup :: CTag
ctagTrue :: EHCOpts -> CTag
ctagFalse :: EHCOpts -> CTag
ctagCons :: EHCOpts -> CTag
ctagNil :: EHCOpts -> CTag

-- | A Case expression. The alternatives must be exhaustive, they must
--   cover all possible constructors.
mkCase :: CExpr -> [CAlt] -> CExpr

-- | Creates an alternative of a case statement.
mkAlt :: CPat -> CExpr -> CAlt

-- | Matches the case scrutinee with the given constructor tag.
mkPatCon :: CTag -> CPatRest -> [CPatFld] -> CPat

-- | The whole case scrutinee has already been matched on. There is nothing
--   left. (If there is still something left, runtime behaviour is
--   undefined)
mkPatRestEmpty :: CPatRest

-- | TODO ??? pat field
mkPatFldBind :: (HsName, CExpr) -> CBind -> CPatFld

-- | Creates a new tuple/record with the given values. Has to be fully
--   applied, partial application is not allowed.
mkTagTup :: CTag -> [CExpr] -> CExpr

-- | Creates a module.
mkModule :: HsName -> [CExport] -> [CImport] -> [CDeclMeta] -> CExpr -> CModule

-- | Creates an import.
mkImport :: HsName -> CImport

-- | Create a plain export. Exported names are unqualified, implicitly
--   qualified by module name.
mkExport :: HsName -> CExport

-- | Create an export for data. Exported names are unqualified, implicitly
--   qualified by module name. Constructor name exports may not overlap
--   with plain exported names.
mkExportData :: HsName -> Maybe [HsName] -> CExport

-- | Creates the metadata for one datatype.
mkMetaData :: HsName -> [CDataCon] -> CDeclMeta

-- | Creates the metadata for one constructor.
mkMetaDataCon :: HsName -> Int -> Int -> CDataCon
mkMetaDataConFromCTag :: CTag -> Maybe CDataCon

-- | Creates the main entry point, calling the given function when run. The
--   given function to call has to be in scope (either define it in the
--   same module, or import it). In addition, the module <a>UHC.Run</a> has
--   to be imported!
mkMain :: HsName -> CExpr

-- | Parses an expression. The parser is not complete and may fail for
--   complicated core code. For small fragments it should work.
parseExpr :: EHCOpts -> String -> Either [String] CExpr
printModule :: EHCOpts -> CModule -> PP_Doc


-- | CoreRun Public API
--   
--   Intended for constructing basic CoreRun Programs.
--   
--   CoreRun is a simplified Core intended to be used for direct
--   interpretation/execution. For semantics, see TBD
module UHC.Light.Compiler.CoreRun.API
data Mod
data Exp
type MbExp = Maybe (Exp)
data SExp
data Alt

-- | Bind, just an Exp, addressing is left implicit
type Bind = Exp

-- | Identifier references for use during running CoreRun
data RRef
data Import
data Meta
data DataCon

-- | Fast access sequence
type CRArray x = Vector x

-- | <a>RRef</a> to local or outside scoped, using absolute level and
--   offset (this is to be converted to a level difference + offset
--   encoding for running, see <a>mkLocDifRef</a>)
mkLocLevRef :: Int -> Int -> RRef

-- | <a>RRef</a> to local or outside scoped, using level difference (to a
--   current) and offset
mkLocDifRef :: Int -> Int -> RRef

-- | <a>RRef</a> to global from module, using module nr and offset (will
--   become obsolete, replaced by either Imp or Mod Ref
mkGlobRef :: Int -> Int -> RRef

-- | <a>RRef</a> to global from module, using module nr and offset
mkImpRef :: Int -> Int -> RRef

-- | <a>RRef</a> to global from current module, using offset
mkModRef :: Int -> RRef

-- | Lift <a>SExp</a> into <a>Exp</a>
mkExp :: SExp -> Exp

-- | Var ref as <a>Exp</a>
mkVar :: RRef -> Exp

-- | Var ref as <a>SExp</a>
mkVar' :: RRef -> SExp

-- | Int constant as <a>Exp</a>
mkInt :: Int -> Exp

-- | Int constant as <a>SExp</a>
mkInt' :: Int -> SExp

-- | Char constant as <a>Exp</a>
mkChar :: Char -> Exp

-- | Char constant as <a>SExp</a>
mkChar' :: Char -> SExp

-- | Integer constant as <a>Exp</a>
mkInteger :: Integer -> Exp

-- | Integer constant as <a>SExp</a>
mkInteger' :: Integer -> SExp

-- | String constant as <a>Exp</a>
mkString :: String -> Exp

-- | String constant as <a>SExp</a>
mkString' :: String -> SExp

-- | Debug info as <a>Exp</a>
mkDbg :: String -> Exp

-- | Debug info as <a>SExp</a>, will make an interpreter stop with
--   displaying the message
mkDbg' :: String -> SExp

-- | Application
mkApp :: Exp -> [SExp] -> Exp

-- | Application
mkApp' :: Exp -> CRArray SExp -> Exp

-- | Tuple, Node
mkTup :: Int -> [SExp] -> Exp

-- | Tuple, Node
mkTup' :: Int -> CRArray SExp -> Exp

-- | Force evaluation
mkEval :: Exp -> Exp

-- | Set tail call context
mkTail :: Exp -> Exp

-- | Case
mkCase :: SExp -> [Exp] -> Exp

-- | Lambda
mkLam :: Int -> Int -> Exp -> Exp

-- | Lambda
mkLam' :: Maybe HsName -> Int -> Int -> Exp -> Exp

-- | Let
mkLet :: Int -> [Exp] -> Exp -> Exp

-- | Let
mkLet' :: Int -> CRArray Exp -> Exp -> Exp

-- | FFI
mkFFI :: String -> [SExp] -> Exp

-- | FFI
mkFFI' :: String -> CRArray SExp -> Exp

-- | Meta: datatype constructor info
mkMetaDataCon :: HsName -> Int -> DataCon

-- | Meta: datatype constructor info
mkMetaDataType :: HsName -> [DataCon] -> Meta

-- | Module
mkMod :: HsName -> Int -> Int -> [Bind] -> Exp -> Mod

-- | Module
mkMod' :: HsName -> Int -> Int -> CRArray Bind -> Exp -> Mod

-- | Module, with meta info
mkModWithMetas :: HsName -> Int -> Int -> [Meta] -> CRArray Bind -> Exp -> Mod

-- | Module, with imports, with meta info
mkModWithImportsMetas :: HsName -> Int -> Int -> [Import] -> [Meta] -> CRArray Bind -> Maybe Exp -> Mod

-- | Meta: datatype constructor info
mkImport :: HsName -> Import

-- | Convert to RRef_Loc to RRef_LDf, i.e. absolute level to relative (to
--   current) level
rrefToDif :: Int -> RRef -> RRef

-- | Parses a module. TBD: integration with other parser utils from EHC
--   driver...
parseModFromString :: String -> Either [String] Mod

-- | Run CoreRun in IO TBD: fix dependence on whole program linked
runCoreRunIO :: EHCOpts -> Mod -> IO (Either Err RVal)

-- | Pretty print <a>Mod</a>
printModule :: EHCOpts -> Mod -> PP_Doc


-- | CoreRun Internal API
--   
--   Intended for implementing stuff that has to know about internals (i.e.
--   class instances).
--   
--   See CoreRun.API.
--   
--   To do (currently sorely missing): proper/enough primitives, and doc
--   for them.
module UHC.Light.Compiler.CoreRun.API.Internal
data AGItf
AGItf_AGItf :: !(Mod) -> AGItf
module_AGItf_AGItf :: AGItf -> !(Mod)
data Mod
Mod_Mod :: !(Ref2Nm) -> !(HsName) -> !(Int) -> !(Int) -> !(ImportL) -> !(MetaL) -> !((CRArray Bind)) -> !(MbExp) -> Mod
ref2nm_Mod_Mod :: Mod -> !(Ref2Nm)
moduleNm_Mod_Mod :: Mod -> !(HsName)
moduleNr_Mod_Mod :: Mod -> !(Int)
stkDepth_Mod_Mod :: Mod -> !(Int)
imports_Mod_Mod :: Mod -> !(ImportL)
metas_Mod_Mod :: Mod -> !(MetaL)
binds_Mod_Mod :: Mod -> !((CRArray Bind))
mbbody_Mod_Mod :: Mod -> !(MbExp)
data Exp
Exp_SExp :: !(SExp) -> Exp
sexpr_Exp_SExp :: Exp -> !(SExp)
Exp_Tup :: !(Int) -> !((CRArray SExp)) -> Exp
tag_Exp_Tup :: Exp -> !(Int)
args_Exp_Tup :: Exp -> !((CRArray SExp))
Exp_Let :: !(Int) -> !(Ref2Nm) -> !((CRArray Bind)) -> !(Exp) -> Exp
firstOff_Exp_Let :: Exp -> !(Int)
ref2nm_Exp_Let :: Exp -> !(Ref2Nm)
binds_Exp_Let :: Exp -> !((CRArray Bind))
body_Exp_Let :: Exp -> !(Exp)
Exp_App :: !(Exp) -> !((CRArray SExp)) -> Exp
func_Exp_App :: Exp -> !(Exp)
args_Exp_App :: Exp -> !((CRArray SExp))
Exp_Lam :: !((Maybe HsName)) -> !(Int) -> !(Int) -> !(Ref2Nm) -> !(Exp) -> Exp
mbNm_Exp_Lam :: Exp -> !((Maybe HsName))
nrArgs_Exp_Lam :: Exp -> !(Int)
stkDepth_Exp_Lam :: Exp -> !(Int)
ref2nm_Exp_Lam :: Exp -> !(Ref2Nm)
body_Exp_Lam :: Exp -> !(Exp)
Exp_Force :: !(Exp) -> Exp
expr_Exp_Force :: Exp -> !(Exp)
Exp_Tail :: !(Exp) -> Exp
expr_Exp_Tail :: Exp -> !(Exp)
Exp_Case :: !(SExp) -> !((CRArray Alt)) -> Exp
expr_Exp_Case :: Exp -> !(SExp)
alts_Exp_Case :: Exp -> !((CRArray Alt))
Exp_FFI :: !(RunPrim) -> !((CRArray SExp)) -> Exp
prim_Exp_FFI :: Exp -> !(RunPrim)
args_Exp_FFI :: Exp -> !((CRArray SExp))
data SExp
SExp_Var :: !(RRef) -> SExp
ref_SExp_Var :: SExp -> !(RRef)
SExp_Int :: !(Int) -> SExp
int_SExp_Int :: SExp -> !(Int)
SExp_Char :: !(Char) -> SExp
char_SExp_Char :: SExp -> !(Char)
SExp_String :: !(String) -> SExp
str_SExp_String :: SExp -> !(String)
SExp_Integer :: !(Integer) -> SExp
integer_SExp_Integer :: SExp -> !(Integer)
SExp_Dbg :: !(String) -> SExp
msg_SExp_Dbg :: SExp -> !(String)
data Alt
Alt_Alt :: !(Ref2Nm) -> !(Exp) -> Alt
ref2nm_Alt_Alt :: Alt -> !(Ref2Nm)
expr_Alt_Alt :: Alt -> !(Exp)
data Pat
Pat_Con :: !(Int) -> Pat
tag_Pat_Con :: Pat -> !(Int)
data DataCon
DataCon_Con :: !(HsName) -> !(Int) -> DataCon
conNm_DataCon_Con :: DataCon -> !(HsName)
tagNr_DataCon_Con :: DataCon -> !(Int)
data Import
Import_Import :: !(HsName) -> Import
nm_Import_Import :: Import -> !(HsName)
data Meta
Meta_Data :: !(HsName) -> !(DataConL) -> Meta
tyNm_Meta_Data :: Meta -> !(HsName)
dataCons_Meta_Data :: Meta -> !(DataConL)

-- | Identifier references for use during running CoreRun
data RRef

-- | global reference to module and its entry, will become obsolete, to be
--   replaced by <a>RRef_Mod</a> and <a>RRef_Glb</a>
RRef_Glb :: !Int -> !Int -> RRef

-- | module
rrefMod :: RRef -> !Int

-- | entry inside module
rrefEntry :: RRef -> !Int

-- | entry of current module reference
RRef_Mod :: !Int -> RRef

-- | entry inside module
rrefEntry :: RRef -> !Int

-- | exported entry of module reference, only used internally to be later
--   resolved to a <a>RRef_Imp</a>
RRef_Exp :: !HsName -> !Int -> RRef

-- | module name, to be looked up in a module specific import list for an
--   index
rrefModNm :: RRef -> !HsName

-- | entry inside module
rrefEntry :: RRef -> !Int

-- | imported entry of module reference
RRef_Imp :: !Int -> !Int -> RRef

-- | module
rrefMod :: RRef -> !Int

-- | entry inside module
rrefEntry :: RRef -> !Int

-- | local reference to on stack value, not interpreted during running, if
--   used must be converted with <a>rrefToDif</a> before running; may
--   become obsolete.
RRef_Loc :: !Int -> !Int -> RRef

-- | level when used statically
rrefLev :: RRef -> !Int

-- | entry inside module
rrefEntry :: RRef -> !Int

-- | local reference to on stack value, but measured relative to level of
--   from where is referenced, used at runtime
RRef_LDf :: !Int -> !Int -> RRef

-- | offset/difference in levels when used at runtime
rrefLevDiff :: RRef -> !Int

-- | entry inside module
rrefEntry :: RRef -> !Int

-- | tag of memory/constructor node referred to by other ref
RRef_Tag :: !RRef -> RRef

-- | of what this is the tag
rrefRef :: RRef -> !RRef

-- | fld of memory/constructor node referred to by other ref
RRef_Fld :: !RRef -> !Int -> RRef

-- | of what this is the tag
rrefRef :: RRef -> !RRef

-- | entry inside module
rrefEntry :: RRef -> !Int

-- | debug variant, holding original name
RRef_Dbg :: !HsName -> RRef
rrefNm :: RRef -> !HsName

-- | Wrapper (rename) around vector<a>-</a>list conversion
crarrayFromList :: [x] -> CRArray x

-- | Wrapper (rename) around vector<a>-</a>list conversion
crarrayToList :: CRArray x -> [x]

module UHC.Light.Compiler.EHC.Main.Compile
compileN_Alternate :: EHCCompileRunner m => [FPath] -> [HsName] -> EHCompilePhaseT m ()
compileN :: EHCCompileRunner m => EHCOpts -> FileSuffMp -> FileLocPath -> [FPath] -> [HsName] -> EHCompilePhaseT m ()
import1 :: EHCCompileRunner m => EHCOpts -> FileSuffMp -> FileLocPath -> EHCompileUnitState -> Maybe FPath -> Maybe PrevSearchInfo -> HsName -> EHCompilePhaseT m (HsName, Maybe PrevSearchInfo)

module UHC.Light.Compiler.EHC.Main
mainEHC :: EHCOpts -> IO ()

module UHC.Light.Compiler.API
