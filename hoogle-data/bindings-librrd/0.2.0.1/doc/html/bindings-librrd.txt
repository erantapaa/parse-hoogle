-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Low level bindings to RRDtool
--   
--   RRDtool is a high performance data logging and graphing system for
--   time series data. This package provides low-level bindings to librrd,
--   which contains most of the functionality in RRDtool.
@package bindings-librrd
@version 0.2.0.1


-- | <a>http://oss.oetiker.ch/rrdtool/doc/librrd.en.html</a>
--   
--   <a>http://oss.oetiker.ch/rrdtool/doc/rrdcached.en.html</a>
module Bindings.Librrd.Client
c'RRDCACHED_DEFAULT_ADDRESS :: CString
c'RRDCACHED_DEFAULT_PORT :: CString
c'ENV_RRDCACHED_ADDRESS :: CString
c'rrdc_connect :: CString -> IO CInt
c'rrdc_is_connected :: CString -> IO CInt
c'rrdc_disconnect :: IO CInt
p'rrdc_connect :: FunPtr (CString -> IO CInt)
p'rrdc_is_connected :: FunPtr (CString -> IO CInt)
p'rrdc_disconnect :: FunPtr (IO CInt)
c'rrdc_update :: CString -> CInt -> Ptr CString -> IO CInt
c'rrdc_flush :: CString -> IO CInt
p'rrdc_update :: FunPtr (CString -> CInt -> Ptr CString -> IO CInt)
p'rrdc_flush :: FunPtr (CString -> IO CInt)
c'RRDC_STATS_TYPE_GAUGE :: Num a => a
c'RRDC_STATS_TYPE_COUNTER :: Num a => a
data C'rrdc_stats_s
C'rrdc_stats_s :: CString -> Word16 -> Word64 -> CDouble -> Ptr C'rrdc_stats_s -> C'rrdc_stats_s
c'rrdc_stats_s'name :: C'rrdc_stats_s -> CString
c'rrdc_stats_s'type :: C'rrdc_stats_s -> Word16
c'rrdc_stats_s'value'counter :: C'rrdc_stats_s -> Word64
c'rrdc_stats_s'value'gauge :: C'rrdc_stats_s -> CDouble
c'rrdc_stats_s'next :: C'rrdc_stats_s -> Ptr C'rrdc_stats_s
type C'rrdc_stats_t = C'rrdc_stats_s
c'rrdc_stats_get :: Ptr (Ptr C'rrdc_stats_t) -> IO CInt
c'rrdc_stats_free :: Ptr C'rrdc_stats_t -> IO ()
p'rrdc_stats_get :: FunPtr (Ptr (Ptr C'rrdc_stats_t) -> IO CInt)
p'rrdc_stats_free :: FunPtr (Ptr C'rrdc_stats_t -> IO ())
p'rrdc_stats_s'name :: Ptr (C'rrdc_stats_s) -> Ptr (CString)
p'rrdc_stats_s'type :: Ptr (C'rrdc_stats_s) -> Ptr (Word16)
p'rrdc_stats_s'value'counter :: Ptr (C'rrdc_stats_s) -> Ptr (Word64)
p'rrdc_stats_s'value'gauge :: Ptr (C'rrdc_stats_s) -> Ptr (CDouble)
p'rrdc_stats_s'next :: Ptr (C'rrdc_stats_s) -> Ptr (Ptr C'rrdc_stats_s)
u'rrdc_stats_s'value'counter :: C'rrdc_stats_s -> Word64 -> IO C'rrdc_stats_s
u'rrdc_stats_s'value'gauge :: C'rrdc_stats_s -> CDouble -> IO C'rrdc_stats_s
instance Eq C'rrdc_stats_s
instance Show C'rrdc_stats_s
instance Storable C'rrdc_stats_s


-- | This module temporarily exists here, only because bindings-posix
--   currently doesn't have struct tm.
module Bindings.Posix.Time
data C'tm
C'tm :: CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> C'tm
c'tm'tm_sec :: C'tm -> CInt
c'tm'tm_min :: C'tm -> CInt
c'tm'tm_hour :: C'tm -> CInt
c'tm'tm_mday :: C'tm -> CInt
c'tm'tm_mon :: C'tm -> CInt
c'tm'tm_year :: C'tm -> CInt
c'tm'tm_wday :: C'tm -> CInt
c'tm'tm_yday :: C'tm -> CInt
c'tm'tm_isdst :: C'tm -> CInt
c'CLOCKS_PER_SEC :: Num a => a
c'clock :: IO CClock
c'difftime :: CTime -> CTime -> IO CDouble
p'clock :: FunPtr (IO CClock)
c'gmtime :: Ptr CTime -> IO (Ptr C'tm)
c'localtime :: Ptr CTime -> IO (Ptr C'tm)
p'difftime :: FunPtr (CTime -> CTime -> IO CDouble)
c'mktime :: Ptr C'tm -> IO CTime
p'gmtime :: FunPtr (Ptr CTime -> IO (Ptr C'tm))
p'localtime :: FunPtr (Ptr CTime -> IO (Ptr C'tm))
c'strftime :: CString -> CSize -> CString -> Ptr C'tm -> IO CSize
c'time :: Ptr CTime -> IO CTime
p'mktime :: FunPtr (Ptr C'tm -> IO CTime)
p'strftime :: FunPtr (CString -> CSize -> CString -> Ptr C'tm -> IO CSize)
p'tm'tm_sec :: Ptr (C'tm) -> Ptr (CInt)
p'time :: FunPtr (Ptr CTime -> IO CTime)
p'tm'tm_min :: Ptr (C'tm) -> Ptr (CInt)
p'tm'tm_hour :: Ptr (C'tm) -> Ptr (CInt)
p'tm'tm_mday :: Ptr (C'tm) -> Ptr (CInt)
p'tm'tm_mon :: Ptr (C'tm) -> Ptr (CInt)
p'tm'tm_year :: Ptr (C'tm) -> Ptr (CInt)
p'tm'tm_wday :: Ptr (C'tm) -> Ptr (CInt)
p'tm'tm_yday :: Ptr (C'tm) -> Ptr (CInt)
p'tm'tm_isdst :: Ptr (C'tm) -> Ptr (CInt)
instance Eq C'tm
instance Show C'tm
instance Storable C'tm


-- | <a>http://oss.oetiker.ch/rrdtool/doc/librrd.en.html</a>
module Bindings.Librrd
c'DNAN :: IO CDouble
c'DINF :: IO CDouble
c'rrd_set_to_DNAN :: IO CDouble
c'rrd_set_to_DINF :: IO CDouble
p'rrd_set_to_DNAN :: FunPtr (IO CDouble)
p'rrd_set_to_DINF :: FunPtr (IO CDouble)
type C'rrd_value_t = CDouble
data C'rrd_file_t
C'rrd_file_t :: COff -> COff -> COff -> Ptr () -> C'rrd_file_t
c'rrd_file_t'header_len :: C'rrd_file_t -> COff
c'rrd_file_t'file_len :: C'rrd_file_t -> COff
c'rrd_file_t'pos :: C'rrd_file_t -> COff
c'rrd_file_t'pvt :: C'rrd_file_t -> Ptr ()
p'rrd_file_t'header_len :: Ptr (C'rrd_file_t) -> Ptr (COff)
p'rrd_file_t'file_len :: Ptr (C'rrd_file_t) -> Ptr (COff)
data C'rrd_simple_file_t
C'rrd_simple_file_t :: CInt -> C'rrd_simple_file_t
c'rrd_simple_file_t'fd :: C'rrd_simple_file_t -> CInt
p'rrd_file_t'pos :: Ptr (C'rrd_file_t) -> Ptr (COff)
p'rrd_file_t'pvt :: Ptr (C'rrd_file_t) -> Ptr (Ptr ())
p'rrd_simple_file_t'fd :: Ptr (C'rrd_simple_file_t) -> Ptr (CInt)
data C'rrd_blob_t
C'rrd_blob_t :: CULong -> Ptr CUChar -> C'rrd_blob_t
c'rrd_blob_t'size :: C'rrd_blob_t -> CULong
c'rrd_blob_t'ptr :: C'rrd_blob_t -> Ptr CUChar
type C'rrd_info_type_t = CUInt
c'RD_I_VAL :: Num a => a
c'RD_I_CNT :: Num a => a
p'rrd_blob_t'size :: Ptr (C'rrd_blob_t) -> Ptr (CULong)
c'RD_I_STR :: Num a => a
c'RD_I_INT :: Num a => a
p'rrd_blob_t'ptr :: Ptr (C'rrd_blob_t) -> Ptr (Ptr CUChar)
c'RD_I_BLO :: Num a => a
data C'rrd_infoval
C'rrd_infoval :: CULong -> C'rrd_value_t -> CString -> CInt -> C'rrd_blob_t -> C'rrd_infoval
c'rrd_infoval'u_cnt :: C'rrd_infoval -> CULong
c'rrd_infoval'u_val :: C'rrd_infoval -> C'rrd_value_t
c'rrd_infoval'u_str :: C'rrd_infoval -> CString
c'rrd_infoval'u_int :: C'rrd_infoval -> CInt
c'rrd_infoval'u_blo :: C'rrd_infoval -> C'rrd_blob_t
type C'rrd_infoval_t = C'rrd_infoval
p'rrd_infoval'u_cnt :: Ptr (C'rrd_infoval) -> Ptr (CULong)
data C'rrd_info_t
C'rrd_info_t :: CString -> C'rrd_info_type_t -> C'rrd_infoval_t -> Ptr C'rrd_info_t -> C'rrd_info_t
c'rrd_info_t'key :: C'rrd_info_t -> CString
c'rrd_info_t'type :: C'rrd_info_t -> C'rrd_info_type_t
c'rrd_info_t'value :: C'rrd_info_t -> C'rrd_infoval_t
c'rrd_info_t'next :: C'rrd_info_t -> Ptr C'rrd_info_t
p'rrd_infoval'u_val :: Ptr (C'rrd_infoval) -> Ptr (C'rrd_value_t)

-- | The correct type for this callback should be <tt><a>Ptr</a> a -&gt;
--   <a>CSize</a> -&gt; <a>Ptr</a> b -&gt; <a>IO</a> <a>CSize</a></tt> but
--   that's impossible because of bindings-DSL restriction.
p'rrd_infoval'u_str :: Ptr (C'rrd_infoval) -> Ptr (CString)
p'rrd_infoval'u_int :: Ptr (C'rrd_infoval) -> Ptr (CInt)
type C'rrd_output_callback_t = FunPtr (Ptr () -> CSize -> Ptr () -> IO CSize)
p'rrd_info_t'key :: Ptr (C'rrd_info_t) -> Ptr (CString)
mk'rrd_output_callback_t :: (Ptr () -> CSize -> Ptr () -> IO CSize) -> IO C'rrd_output_callback_t
p'rrd_infoval'u_blo :: Ptr (C'rrd_infoval) -> Ptr (C'rrd_blob_t)
p'rrd_info_t'type :: Ptr (C'rrd_info_t) -> Ptr (C'rrd_info_type_t)
u'rrd_infoval'u_cnt :: C'rrd_infoval -> CULong -> IO C'rrd_infoval
c'rrd_create :: CInt -> Ptr CString -> IO CInt
mK'rrd_output_callback_t :: C'rrd_output_callback_t -> (Ptr () -> CSize -> Ptr () -> IO CSize)
c'rrd_info :: CInt -> Ptr CString -> IO (Ptr C'rrd_info_t)
p'rrd_info_t'value :: Ptr (C'rrd_info_t) -> Ptr (C'rrd_infoval_t)
p'rrd_create :: FunPtr (CInt -> Ptr CString -> IO CInt)
c'rrd_info_push :: Ptr C'rrd_info_t -> CString -> C'rrd_info_type_t -> Ptr C'rrd_infoval_t -> IO (Ptr C'rrd_info_t)
c'rrd_info_print :: Ptr C'rrd_info_t -> IO ()
p'rrd_info :: FunPtr (CInt -> Ptr CString -> IO (Ptr C'rrd_info_t))
p'rrd_info_t'next :: Ptr (C'rrd_info_t) -> Ptr (Ptr C'rrd_info_t)
c'rrd_info_free :: Ptr C'rrd_info_t -> IO ()
c'rrd_update :: CInt -> Ptr CString -> IO CInt
p'rrd_info_print :: FunPtr (Ptr C'rrd_info_t -> IO ())
p'rrd_info_free :: FunPtr (Ptr C'rrd_info_t -> IO ())
c'rrd_update_v :: CInt -> Ptr CString -> IO (Ptr C'rrd_info_t)
p'rrd_update :: FunPtr (CInt -> Ptr CString -> IO CInt)
c'rrd_graph :: CInt -> Ptr CString -> Ptr (Ptr CString) -> Ptr CInt -> Ptr CInt -> Ptr CFile -> Ptr CDouble -> Ptr CDouble -> IO CInt
c'rrd_graph_v :: CInt -> Ptr CString -> IO (Ptr C'rrd_info_t)
p'rrd_update_v :: FunPtr (CInt -> Ptr CString -> IO (Ptr C'rrd_info_t))
p'rrd_graph :: FunPtr (CInt -> Ptr CString -> Ptr (Ptr CString) -> Ptr CInt -> Ptr CInt -> Ptr CFile -> Ptr CDouble -> Ptr CDouble -> IO CInt)
c'rrd_fetch :: CInt -> Ptr CString -> Ptr CTime -> Ptr CTime -> Ptr CULong -> Ptr CULong -> Ptr (Ptr CString) -> Ptr (Ptr C'rrd_value_t) -> IO CInt
c'rrd_restore :: CInt -> Ptr CString -> IO CInt
p'rrd_graph_v :: FunPtr (CInt -> Ptr CString -> IO (Ptr C'rrd_info_t))
u'rrd_infoval'u_val :: C'rrd_infoval -> C'rrd_value_t -> IO C'rrd_infoval
c'rrd_dump :: CInt -> Ptr CString -> IO CInt
p'rrd_fetch :: FunPtr (CInt -> Ptr CString -> Ptr CTime -> Ptr CTime -> Ptr CULong -> Ptr CULong -> Ptr (Ptr CString) -> Ptr (Ptr C'rrd_value_t) -> IO CInt)
c'rrd_tune :: CInt -> Ptr CString -> IO CInt
p'rrd_restore :: FunPtr (CInt -> Ptr CString -> IO CInt)
c'rrd_last :: CInt -> Ptr CString -> IO CTime
p'rrd_dump :: FunPtr (CInt -> Ptr CString -> IO CInt)
p'rrd_tune :: FunPtr (CInt -> Ptr CString -> IO CInt)
c'rrd_lastupdate :: CInt -> Ptr CString -> Ptr CTime -> Ptr CULong -> Ptr (Ptr CString) -> Ptr (Ptr CString) -> IO CInt
c'rrd_first :: CInt -> Ptr CString -> IO CTime
p'rrd_last :: FunPtr (CInt -> Ptr CString -> IO CTime)
c'rrd_resize :: CInt -> Ptr CString -> IO CInt
p'rrd_lastupdate :: FunPtr (CInt -> Ptr CString -> Ptr CTime -> Ptr CULong -> Ptr (Ptr CString) -> Ptr (Ptr CString) -> IO CInt)
c'rrd_strversion :: IO CString
p'rrd_first :: FunPtr (CInt -> Ptr CString -> IO CTime)
c'rrd_version :: IO CDouble
p'rrd_resize :: FunPtr (CInt -> Ptr CString -> IO CInt)
p'rrd_strversion :: FunPtr (IO CString)
c'rrd_xport :: CInt -> Ptr CString -> Ptr CInt -> Ptr CTime -> Ptr CTime -> Ptr CULong -> Ptr CULong -> Ptr (Ptr CString) -> Ptr (Ptr C'rrd_value_t) -> IO CInt
p'rrd_version :: FunPtr (IO CDouble)
c'rrd_flushcached :: CInt -> Ptr CString -> IO CInt
c'rrd_freemem :: Ptr a -> IO ()
p'rrd_xport :: FunPtr (CInt -> Ptr CString -> Ptr CInt -> Ptr CTime -> Ptr CTime -> Ptr CULong -> Ptr CULong -> Ptr (Ptr CString) -> Ptr (Ptr C'rrd_value_t) -> IO CInt)
u'rrd_infoval'u_str :: C'rrd_infoval -> CString -> IO C'rrd_infoval
p'rrd_flushcached :: FunPtr (CInt -> Ptr CString -> IO CInt)
p'rrd_freemem :: FunPtr (Ptr a -> IO ())
c'rrd_create_r :: CString -> CULong -> CTime -> CInt -> Ptr CString -> IO CInt
p'rrd_create_r :: FunPtr (CString -> CULong -> CTime -> CInt -> Ptr CString -> IO CInt)
c'rrd_info_r :: CString -> IO (Ptr C'rrd_info_t)
c'rrd_update_r :: CString -> CString -> CInt -> Ptr CString -> IO CInt
p'rrd_info_r :: FunPtr (CString -> IO (Ptr C'rrd_info_t))
c'rrd_fetch_r :: CString -> CString -> Ptr CTime -> Ptr CTime -> Ptr CULong -> Ptr CULong -> Ptr (Ptr CString) -> Ptr (Ptr C'rrd_value_t) -> IO CInt
c'rrd_dump_r :: CString -> CString -> IO CInt
p'rrd_update_r :: FunPtr (CString -> CString -> CInt -> Ptr CString -> IO CInt)
c'rrd_last_r :: CString -> IO CTime
p'rrd_fetch_r :: FunPtr (CString -> CString -> Ptr CTime -> Ptr CTime -> Ptr CULong -> Ptr CULong -> Ptr (Ptr CString) -> Ptr (Ptr C'rrd_value_t) -> IO CInt)
p'rrd_dump_r :: FunPtr (CString -> CString -> IO CInt)
c'rrd_lastupdate_r :: CString -> Ptr CTime -> Ptr CULong -> Ptr (Ptr CString) -> Ptr (Ptr CString) -> IO CInt
u'rrd_infoval'u_int :: C'rrd_infoval -> CInt -> IO C'rrd_infoval
c'rrd_first_r :: CString -> CInt -> IO CTime
p'rrd_last_r :: FunPtr (CString -> IO CTime)
p'rrd_lastupdate_r :: FunPtr (CString -> Ptr CTime -> Ptr CULong -> Ptr (Ptr CString) -> Ptr (Ptr CString) -> IO CInt)
p'rrd_first_r :: FunPtr (CString -> CInt -> IO CTime)
c'rrd_dump_cb_r :: CString -> CInt -> C'rrd_output_callback_t -> Ptr b -> IO CInt
p'rrd_dump_cb_r :: FunPtr (CString -> CInt -> C'rrd_output_callback_t -> Ptr b -> IO CInt)
type C'rrd_timetype_t = CUInt
c'ABSOLUTE_TIME :: Num a => a
c'RELATIVE_TO_START_TIME :: Num a => a
c'RELATIVE_TO_END_TIME :: Num a => a
c'TIME_OK :: Ptr a
u'rrd_infoval'u_blo :: C'rrd_infoval -> C'rrd_blob_t -> IO C'rrd_infoval
data C'rrd_time_value
C'rrd_time_value :: C'rrd_timetype_t -> CLong -> C'tm -> C'rrd_time_value
c'rrd_time_value'type :: C'rrd_time_value -> C'rrd_timetype_t
c'rrd_time_value'offset :: C'rrd_time_value -> CLong
c'rrd_time_value'tm :: C'rrd_time_value -> C'tm
type C'rrd_time_value_t = C'rrd_time_value
c'rrd_parsetime :: CString -> Ptr C'rrd_time_value_t -> IO CString
p'rrd_parsetime :: FunPtr (CString -> Ptr C'rrd_time_value_t -> IO CString)
p'rrd_time_value'type :: Ptr (C'rrd_time_value) -> Ptr (C'rrd_timetype_t)
p'rrd_time_value'offset :: Ptr (C'rrd_time_value) -> Ptr (CLong)
data C'rrd_context
C'rrd_context :: [CChar] -> [CChar] -> C'rrd_context
c'rrd_context'lib_errstr :: C'rrd_context -> [CChar]
c'rrd_context'rrd_error :: C'rrd_context -> [CChar]
type C'rrd_context_t = C'rrd_context
p'rrd_time_value'tm :: Ptr (C'rrd_time_value) -> Ptr (C'tm)
c'rrd_get_context :: IO (Ptr C'rrd_context_t)
p'rrd_context'lib_errstr :: Ptr (C'rrd_context) -> Ptr (CChar)
p'rrd_get_context :: FunPtr (IO (Ptr C'rrd_context_t))
c'rrd_proc_start_end :: Ptr C'rrd_time_value_t -> Ptr C'rrd_time_value_t -> Ptr CTime -> Ptr CTime -> IO CInt
p'rrd_context'rrd_error :: Ptr (C'rrd_context) -> Ptr (CChar)
p'rrd_proc_start_end :: FunPtr (Ptr C'rrd_time_value_t -> Ptr C'rrd_time_value_t -> Ptr CTime -> Ptr CTime -> IO CInt)
c'rrd_clear_error :: IO ()
c'rrd_test_error :: IO CInt
c'rrd_get_error :: IO CString
p'rrd_clear_error :: FunPtr (IO ())
p'rrd_test_error :: FunPtr (IO CInt)
p'rrd_get_error :: FunPtr (IO CString)
c'rrd_strerror :: CInt -> IO CString
p'rrd_strerror :: FunPtr (CInt -> IO CString)
c'rrd_new_context :: IO (Ptr C'rrd_context_t)
c'rrd_free_context :: Ptr C'rrd_context_t -> IO ()
p'rrd_new_context :: FunPtr (IO (Ptr C'rrd_context_t))
p'rrd_free_context :: FunPtr (Ptr C'rrd_context_t -> IO ())
c'rrd_random :: IO CLong
c'rrd_add_ptr :: Ptr (Ptr (Ptr a)) -> Ptr CSize -> Ptr a -> IO CInt
p'rrd_random :: FunPtr (IO CLong)
c'rrd_add_strdup :: Ptr (Ptr CString) -> Ptr CSize -> CString -> IO CInt
c'rrd_free_ptrs :: Ptr (Ptr (Ptr a)) -> CSize -> IO ()
p'rrd_add_ptr :: FunPtr (Ptr (Ptr (Ptr a)) -> Ptr CSize -> Ptr a -> IO CInt)
c'rrd_mkdir_p :: CString -> CMode -> IO CInt
p'rrd_add_strdup :: FunPtr (Ptr (Ptr CString) -> Ptr CSize -> CString -> IO CInt)
p'rrd_free_ptrs :: FunPtr (Ptr (Ptr (Ptr a)) -> CSize -> IO ())
p'rrd_mkdir_p :: FunPtr (CString -> CMode -> IO CInt)
instance Eq C'rrd_file_t
instance Show C'rrd_file_t
instance Eq C'rrd_simple_file_t
instance Show C'rrd_simple_file_t
instance Eq C'rrd_blob_t
instance Show C'rrd_blob_t
instance Eq C'rrd_infoval
instance Show C'rrd_infoval
instance Eq C'rrd_info_t
instance Show C'rrd_info_t
instance Eq C'rrd_time_value
instance Show C'rrd_time_value
instance Eq C'rrd_context
instance Show C'rrd_context
instance Storable C'rrd_context
instance Storable C'rrd_time_value
instance Storable C'rrd_info_t
instance Storable C'rrd_infoval
instance Storable C'rrd_blob_t
instance Storable C'rrd_simple_file_t
instance Storable C'rrd_file_t
