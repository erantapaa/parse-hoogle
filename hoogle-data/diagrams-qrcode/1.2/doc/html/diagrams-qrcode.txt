-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Draw QR codes to SVG, PNG, PDF or PS files.
--   
--   This library is able to draw diagrams of QR codes using the
--   <tt>diagrams</tt> library. In order to create the QR code itself, you
--   may use either the <tt>haskell-qrencode</tt> library or
--   <tt>qrcode</tt> library, both are supported. In order to draw and save
--   the diagram to a file, we suggest using either the
--   <tt>diagrams-svg</tt> library (pure Haskell, fast, SVG output only) or
--   the <tt>diagrams-cairo</tt> library (requires Cairo, supports many
--   different output targets, including SVG, PNG, PDF, PS and directly
--   onto a GUI).
--   
--   For an example of how this library may be used, please see the
--   examples on the source code.
@package diagrams-qrcode
@version 1.2

module Diagrams.QRCode

-- | Convert a QR code represented as a list of bounded values into a
--   <tt>Path</tt>. <a>minBound</a> values are considered to be "off",
--   while every other value is considered to be "on".
pathList :: (Bounded a, Eq a, Integral ix) => [((ix, ix), a)] -> Path R2

-- | Same as <a>pathList</a>, but from a matrix represented as a list of
--   lists.
pathMatrix :: (Bounded a, Eq a) => [[a]] -> Path R2

-- | Same as <a>pathList</a>, but from an array.
pathArray :: (Bounded a, Eq a, Integral ix, Ix ix) => Array (ix, ix) a -> Path R2

-- | Stroke using default QR code colors (black on white) and with the
--   "quiet" region.
stroke :: (Backend b R2, Renderable (Path R2) b) => Path R2 -> Diagram b R2
