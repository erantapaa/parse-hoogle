-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | pcre-light extra functionality
--   
--   pcre-light utility functions for more user friendly usage. Instead of
--   adding execution and compile options to the matching and compiling
--   functions, the options are added to the regular expression to be
--   compiled or run. Furthermore support for different matching return
--   types (using typeclass <a>MatchResult</a>) and different regular
--   expression types (compiled or uncompiled using typeclass
--   <a>RegexLike</a>) are supported. See module documentation for
--   examples.
@package pcre-light-extra
@version 0.0.0


-- | pcre-light utility functions for more user friendly usage. Instead of
--   adding execution and compile options to the matching and compiling
--   functions, the options are added to the regular expression to be
--   compiled or run. Furthermore support for different matching return
--   types (using typeclass <a>MatchResult</a>) and different regular
--   expression types (compiled or uncompiled using typeclass
--   <a>RegexLike</a>) are supported.
--   
--   examples using GHC's -XOverloadedStrings flag:
--   
--   simple matching with uncompiled pattern <a>abc</a> of type ByteString:
--   
--   <pre>
--   &gt;&gt;&gt; ("abc" =~ ("abc" :: ByteString)) :: Bool
--   True
--   </pre>
--   
--   case insensitive matching with uncompiled pattern of type ByteString:
--   
--   <pre>
--   &gt;&gt;&gt; ("AbCasf" =~ caseSensitive False "abc") :: Bool
--   True
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; ("AbCasf" =~ caseSensitive False "abc") :: Maybe [ByteString]
--   Just ["AbC"]
--   </pre>
module Text.Regex.PCRE.Light.Extra

-- | Uncompiled regular expression with compile and execution options.
--   Compiles to RegexExecPattern preserving execution options.
data RegexPattern
Regex :: [PCREOption] -> [PCREExecOption] -> ByteString -> RegexPattern

-- | Compiled regular expression with execution results.
data RegexExecPattern
RegexExec :: [PCREExecOption] -> Regex -> RegexExecPattern

-- | Typeclass defining automatic conversion of PCRE matching results to
--   user defined type. Used in typeclass <a>RegexLike</a> and function
--   (<a>=~</a>).
class MatchResult x
convert :: MatchResult x => Maybe [ByteString] -> x

-- | RegexLike types can be compiled to regular epxression or directly used
--   as regular expression.
class RegexLike rl where { type family RegexType rl; }
compile :: RegexLike rl => rl -> Either String (RegexType rl)
match :: (RegexLike rl, MatchResult res) => rl -> ByteString -> res

-- | matches a ByteString with a regular expression.
(=~) :: (RegexLike regex, MatchResult ret) => ByteString -> regex -> ret

-- | create regular expression with compile and execution options.
cfg :: [PCREOption] -> [PCREExecOption] -> ByteString -> RegexPattern

-- | Add execution options to compiled regular expression of pcre-light's
--   compiled regular expression type <a>Regex</a>
withExecOpts :: [PCREExecOption] -> Regex -> RegexExecPattern

-- | Create case sensitive (first parameter is <a>True</a>) or case
--   insensitive regular expression from pattern.
caseSensitive :: Bool -> ByteString -> RegexPattern
instance RegexLike RegexPattern
instance RegexLike RegexExecPattern
instance RegexLike ByteString
instance RegexLike Regex
instance MatchResult Bool
instance MatchResult (Maybe [ByteString])
