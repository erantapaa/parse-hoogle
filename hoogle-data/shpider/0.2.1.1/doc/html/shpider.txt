-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Web automation library in Haskell.
--   
--   Shpider is a web automation library for Haskell. It allows you to
--   quickly write crawlers, and for simple cases ( like following links )
--   even without reading the page source.
--   
--   It has useful features such as turning relative links from a page into
--   absolute links, options to authorize transactions only on a given
--   domain, and the option to only download html documents.
--   
--   It also provides a nice syntax for filling out forms.
--   
--   An example:
--   
--   <pre>
--   runShpider $ do
--        download "http://apage.com"
--        theForm : _ &lt;- getFormsByAction "http://anotherpage.com"
--        sendForm $ fillOutForm theForm $ pairs $ do
--              "occupation" =: "unemployed Haskell programmer"
--              "location" =: "mother's house"
--   </pre>
@package shpider
@version 0.2.1.1


-- | This module provides a nice syntax for defining a list of pairs.
module Network.Shpider.Pairs

-- | The abstract type describing the monadic state of a list of pairs.
type PairsWriter a b = State [(a, b)]

-- | Make a list of pairs of pairs like
--   
--   <pre>
--   pairs $ do $ 3 =: ( " is my favourite number or " , 5 )
--                10 =: ( " pints have I drunk or was it " , 11 )
--   </pre>
(=:) :: a -> b -> PairsWriter a b ()

-- | Take a monadic PairsWriter and return a list of pairs.
pairs :: PairsWriter a b c -> [(a, b)]

module Network.Shpider.Code

-- | Converts a <a>CurlCode</a> to a <a>ShpiderCode</a>.
ccToSh :: CurlCode -> ShpiderCode

-- | ShpiderCode describes the various contingencies which may occur during
--   a shpider transaction.
data ShpiderCode
Ok :: ShpiderCode
InvalidURL :: ShpiderCode
HttpError :: ShpiderCode
OffSite :: ShpiderCode
WrongData :: ShpiderCode
NoHost :: ShpiderCode
UnsupportedProtocol :: ShpiderCode
TimeOut :: ShpiderCode
UnsupportedCurlStatus :: CurlCode -> ShpiderCode
instance Show ShpiderCode
instance Eq ShpiderCode

module Network.Shpider.Forms

-- | Plain old form: Method, action and inputs.
data Form
Form :: Method -> String -> Map String String -> Form
method :: Form -> Method
action :: Form -> String
inputs :: Form -> Map String String

-- | Either GET or POST.
data Method
GET :: Method
POST :: Method

-- | Gets all forms from a list of tags.
gatherForms :: [Tag String] -> [Form]

-- | Takes a form and fills out the inputs with the given [ ( String ,
--   String ) ]. It is convienent to use the <a>pairs</a> syntax here.
--   
--   <pre>
--   f : _ &lt;- <tt>getFormsByAction</tt> "http://whatever.com"
--   <tt>sendForm</tt> $ <a>fillOutForm</a> f $ <a>pairs</a> $ do
--      "author" =: "Johnny"
--      "message" =: "Nice syntax dewd."
--   </pre>
fillOutForm :: Form -> [(String, String)] -> Form

-- | The <a>TagParser</a> which parses all forms.
allForms :: TagParser String [Form]
toForm :: WholeTag String -> Maybe Form

-- | The first argument is the action attribute of the form, the second is
--   the method attribute, and the third are the inputs.
mkForm :: String -> Method -> [(String, String)] -> Form
instance Show Method
instance Show Form

module Network.Shpider.Links

-- | Links have an address, corresponding to the href attribute, and some
--   inner tex.
data Link
Link :: String -> String -> Link
linkAddress :: Link -> String
linkText :: Link -> String

-- | Parse all links from a list of tags.
gatherLinks :: [Tag String] -> [Link]

-- | The parser responsible for getting all the links.
allLinks :: TagParser String [Link]
instance Show Link
instance Eq Link


-- | This module describes the state of shpider computations, and provides
--   a monad transformer over it.
module Network.Shpider.State

-- | The shpider state holds all the options for shpider transactions, the
--   current page and all the <a>CurlOption</a>s used when calling curl.
data ShpiderState
SS :: Bool -> String -> Bool -> [CurlOption] -> Page -> Maybe [String] -> Maybe Int -> Maybe UTCTime -> ShpiderState
htmlOnlyDownloads :: ShpiderState -> Bool
startPage :: ShpiderState -> String
dontLeaveDomain :: ShpiderState -> Bool
curlOpts :: ShpiderState -> [CurlOption]
currentPage :: ShpiderState -> Page
visited :: ShpiderState -> Maybe [String]

-- | Whether to wait at least N micro-seconds between downloads or form
--   submissions. Defaults to <a>Nothing</a>.
downloadThrottle :: ShpiderState -> Maybe Int
lastDownloadTime :: ShpiderState -> Maybe UTCTime

-- | The Page datatype. Holds <a>Link</a>s, <a>Form</a>s, the parsed [
--   <a>Tag</a> ], the page source, and the page's absolute URL.
data Page
Page :: [Link] -> [Form] -> [Tag String] -> String -> String -> Page
links :: Page -> [Link]
forms :: Page -> [Form]
tags :: Page -> [Tag String]
source :: Page -> String
addr :: Page -> String

-- | The type of Shpider computations. A state transformer over
--   <a>ShpiderState</a> and <a>IO</a>.
type Shpider = StateT ShpiderState IO

-- | An empty page, containing no information.
emptyPage :: Page

-- | Run a Shpider computation, returning the result.
runShpider :: Shpider a -> IO a

-- | Run a Shpider computation, returning the result with the state.
runShpiderSt :: Shpider a -> IO (a, ShpiderState)
instance Show Page
instance Show ShpiderState

module Network.Shpider.URL

-- | is the second url on the same domain as the first? Note: this will
--   return False if either URL is invalid.
isSameDomain :: String -> String -> Bool

-- | Assumes the given URL is relative to <a>currentPage</a>.
mkAbsoluteUrl :: String -> Shpider (Maybe String)

-- | True if the url is absolute
isAbsoluteUrl :: String -> Bool

-- | is the given string of form "mailto:person.com"?
isMailto :: String -> Bool

-- | is the url a http url?
isHttp :: String -> Bool

-- | Get the protocol and domain from a URL eg
--   
--   <pre>
--   getDomain "widdle://owqueer.co.uk/strangeanticsofsailors/jimmy"
--   -- "widdle://owqueer.co.uk"
--   </pre>
getDomain :: String -> String

-- | Get the whole url up to and including the current folder of the
--   present document.
--   
--   <pre>
--   
--   getFolder "widdle://owqueer.co.uk/strangeanticsofsailors/jimmy"
--   -- "widdle://owqueer.co.uk/strangeanticsofsailors/"
--   </pre>
getFolder :: String -> String


-- | This module provides all the settable options in shpider.
module Network.Shpider.Options

-- | Setting this to <a>True</a> will forbid you to <tt>download</tt> and
--   <tt>sendForm</tt> to any site which isn't on the domain shared by the
--   url given in <a>setStartPage</a>.
stayOnDomain :: Bool -> Shpider ()

-- | Set the CurlTimeout option. Requests will TimeOut after this number of
--   seconds.
setTimeOut :: Long -> Shpider ()

-- | Set the start page of your shpidering antics. The start page must be
--   an absolute URL, if not, this will raise an error.
setStartPage :: String -> Shpider ()

-- | Return the starting URL, as set by <a>setStartPage</a>
getStartPage :: Shpider String

-- | If onlyDownloadHtml is True, then during <tt>download</tt>, shpider
--   will make a HEAD request to see if the content type is text/html or
--   application/xhtml+xml, and only if it is, then it will make a GET
--   request.
onlyDownloadHtml :: Bool -> Shpider ()

-- | Set the given page as the <a>currentPage</a>.
setCurrentPage :: Page -> Shpider ()

-- | Return the current page
getCurrentPage :: Shpider Page

-- | When keepTrack is set, shpider will remember the pages which have been
--   <a>visited</a>.
keepTrack :: Shpider ()

-- | Add CURL options to Shpider
addCurlOpts :: [CurlOption] -> Shpider ()

-- | Set Shpider's CURL options from scratch
setCurlOpts :: [CurlOption] -> Shpider ()

-- | Set download throttling, so that subsequent calls to <tt>download</tt>
--   or <tt>sendForm</tt> block, making sure at least N micro-seconds pass.
--   Passing a <a>Nothing</a> would disable any throttling.
setThrottle :: Maybe Int -> Shpider ()


-- | This module exposes the main functionality of shpider It allows you to
--   quickly write crawlers, and for simple cases even without reading the
--   page source eg.
--   
--   <pre>
--   <a>runShpider</a> $ do
--      <a>download</a> "http://hackage.haskell.org/packages/archive/pkg-list.html"
--      l : _ &lt;- <a>getLinksByText</a> "shpider"
--      <a>download</a> $ linkAddress l
--   </pre>
module Network.Shpider

-- | Fetch whatever is at this address, and attempt to parse the content
--   into a Page. Return the status code with the parsed content.
download :: String -> Shpider (ShpiderCode, Page)

-- | Send a form to the URL specified in its action attribute
sendForm :: Form -> Shpider (ShpiderCode, Page)

-- | Get all links which match this text.
getLinksByText :: String -> Shpider [Link]

-- | Get all links whose text matches this regex.
getLinksByTextRegex :: String -> Shpider [Link]

-- | Get all links whose address matches this regex.
getLinksByAddressRegex :: String -> Shpider [Link]

-- | Get all forms whose action matches the given action
getFormsByAction :: String -> Shpider [Form]
getFormsHasAction :: (String -> Bool) -> Shpider [Form]

-- | Return the links on the current page.
currentLinks :: Shpider [Link]

-- | Return the forms on the current page.
currentForms :: Shpider [Form]

-- | Parse a given URL and source html into the <a>Page</a> datatype. This
--   will set the current page.
parsePage :: String -> String -> Shpider Page

-- | If <a>stayOnDomain</a> has been set to true, then isAuthorizedDomain
--   returns <a>True</a> if the given URL is on the domain and false
--   otherwise. If <a>stayOnDomain</a> has not been set to True, then it
--   returns <a>True</a>.
isAuthorizedDomain :: String -> Shpider Bool

-- | withAuthorizedDomain will execute the function if the url given is an
--   authorized domain. See <a>isAuthorizedDomain</a>.
withAuthorizedDomain :: String -> Shpider (ShpiderCode, Page) -> Shpider (ShpiderCode, Page)

-- | if <a>keepTrack</a> has been set, then haveVisited will return
--   <a>True</a> if the given URL has been visited.
haveVisited :: String -> Shpider Bool
