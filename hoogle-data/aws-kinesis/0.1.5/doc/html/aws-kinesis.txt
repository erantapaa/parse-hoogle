-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bindings for Amazon Kinesis
--   
@package aws-kinesis
@version 0.1.5


-- | <i>API Version: 2013-12-02</i>
--   
--   The Amazon Kinesis Service API Reference API contains several data
--   types that various actions use.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/2013-12-02/APIReference/API_Types.html</a>
module Aws.Kinesis.Types

-- | Stream Name
--   
--   The stream name is scoped to the AWS account used by the application
--   that creates the stream. It is also scoped by region. That is, two
--   streams in two different AWS accounts can have the same name, and two
--   streams in the same AWS account, but in two different regions, can
--   have the same name.
--   
--   Length constraints: Minimum length of 1. Maximum length of 128.
--   
--   Error responses from AWS Kinesis indicate that stream names must match
--   the following regular expressions:
--   
--   <pre>
--   [a-zA-Z0-9_.-]+
--   </pre>
data StreamName

-- | Smart Constructor for <a>StreamName</a> that enforces size
--   constraints.
--   
--   For static construction you may also use the <a>IsString</a> instance
--   that throws an <a>error</a> on invalid stream names.
streamName :: Text -> Either Text StreamName
streamNameText :: StreamName -> Text

-- | Identifier for a shard as returned by PutRecord.
--   
--   Length constraints: Minimum length of 1. Maximum length of 128.
data ShardId

-- | Opaque sequence number as returned by PutRecord.
data SequenceNumber

-- | An 128 bit interger that identifies the partition. The default is the
--   MD5 hash of the partition key.
--   
--   FIXME the specification is rather vague about the precise encoding of
--   this value. The default is to compute it as an MD5 hash of the
--   partition key. The API reference describes it as an Int128. However,
--   it is not clear how the result of the hash function is encoded
--   (big-endian or small endian, word size?) and how it is serialized to
--   text, which is the type in the JSON serialization.
--   
--   
--   <a>http://javadox.com/com.amazonaws/aws-java-sdk/1.7.1/com/amazonaws/services/kinesis/model/PutRecordRequest.html</a>
--   seems to indicate that the value is actually unsigned.
data PartitionHash

-- | Smart Constructor for <a>PartitionHash</a> that enforces size
--   constraints.
partitionHash :: Integer -> Either Text PartitionHash
partitionHashInteger :: PartitionHash -> Integer

-- | PartitionKey
--   
--   Identifies which shard in the stream the data record is assigned to.
--   
--   Partition keys are Unicode strings with a maximum length limit of 256
--   bytes. Amazon Kinesis uses the partition key as input to a hash
--   function that maps the partition key and associated data to a specific
--   shard. Specifically, an MD5 hash function is used to map partition
--   keys to 128-bit integer values and to map associated data records to
--   shards. As a result of this hashing mechanism, all data records with
--   the same partition key will map to the same shard within the stream.
--   
--   Length constraints: Minimum length of 1. Maximum length of 256.
data PartitionKey
partitionKey :: Text -> Either Text PartitionKey
partitionKeyText :: PartitionKey -> Text

-- | Iterator for records within a shard.
--   
--   Length constraints: Minimum length of 1. Maximum length of 512.
data ShardIterator

-- | ShardIteratorType
--   
--   Determines how the shard iterator is used to start reading data
--   records from the shard.
data ShardIteratorType

-- | Start reading exactly from the position denoted by a specific sequence
--   number.
AtSequenceNumber :: ShardIteratorType

-- | Start reading right after the position denoted by a specific sequence
--   number.
AfterSequenceNumber :: ShardIteratorType

-- | Start reading at the last untrimmed record in the shard in the system,
--   which is the oldest data record in the shard.
TrimHorizon :: ShardIteratorType

-- | Start reading just after the most recent record in the shard, so that
--   you always read the most recent data in the shard.
Latest :: ShardIteratorType

-- | Record
--   
--   The unit of data of the Amazon Kinesis stream, which is composed of a
--   sequence number, a partition key, and a data blob.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/2013-12-02/APIReference/API_Record.html</a>
data Record
Record :: !ByteString -> !PartitionKey -> !SequenceNumber -> Record

-- | The data blob. The data in the blob is both opaque and immutable to
--   the Amazon Kinesis service, which does not inspect, interpret, or
--   change the data in the blob in any way. The maximum size of the data
--   blob (the payload after Base64-decoding) is 50 kilobytes (KB)
--   
--   Length constraints: Minimum length of 0. Maximum length of 51200.
--   
--   Note that the size constraint is not currently enforced in the code.
recordData :: Record -> !ByteString

-- | Identifies which shard in the stream the data record is assigned to.
recordPartitionKey :: Record -> !PartitionKey

-- | The unique identifier for the record in the Amazon Kinesis stream.
recordSequenceNumber :: Record -> !SequenceNumber
data StreamDescription
StreamDescription :: !Bool -> ![Shard] -> !Arn -> !StreamName -> !StreamStatus -> StreamDescription

-- | If set to true there are more shards in the stream available to
--   describe.
streamDescriptionHasMoreShards :: StreamDescription -> !Bool

-- | The shards that comprise the stream.
streamDescriptionShards :: StreamDescription -> ![Shard]

-- | The Amazon Resource Name (ARN) for the stream being described.
streamDescriptionStreamARN :: StreamDescription -> !Arn

-- | The name of the stream being described.
streamDescriptionStreamName :: StreamDescription -> !StreamName

-- | The current status of the stream being described.
streamDescriptionStreamStatus :: StreamDescription -> !StreamStatus

-- | Stream Status
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/2013-12-02/APIReference/API_StreamDescription.html</a>
data StreamStatus

-- | The stream is being created. Upon receiving a CreateStream request,
--   Amazon Kinesis immediately returns and sets StreamStatus to CREATING.
StreamStatusCreating :: StreamStatus

-- | The stream is being deleted. After a DeleteStream request, the
--   specified stream is in the DELETING state until Amazon Kinesis
--   completes the deletion.
StreamStatusDeleting :: StreamStatus

-- | The stream exists and is ready for read and write operations or
--   deletion. You should perform read and write operations only on an
--   ACTIVE stream.
StreamStatusActive :: StreamStatus

-- | Shards in the stream are being merged or split. Read and write
--   operations continue to work while the stream is in the UPDATING state.
StreamStatusUpdating :: StreamStatus

-- | Shard
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/2013-12-02/APIReference/API_Shard.html</a>
data Shard
Shard :: !(Maybe ShardId) -> !(PartitionHash, PartitionHash) -> !(Maybe ShardId) -> !(SequenceNumber, Maybe SequenceNumber) -> ShardId -> Shard

-- | The shard Id of the shard adjacent to the shard's parent.
shardAdjacentParentShardId :: Shard -> !(Maybe ShardId)

-- | The (inclusive) range of possible hash key values for the shard, which
--   is a set of ordered contiguous positive integers.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/2013-12-02/APIReference/API_HashKeyRange.html</a>
shardHashKeyRange :: Shard -> !(PartitionHash, PartitionHash)

-- | The shard Id of the shard's parent.
shardParentShardId :: Shard -> !(Maybe ShardId)

-- | The (inclusive) range of possible sequence numbers for the shard.
--   
--   Shards that are in the OPEN state have an ending sequence number of
--   <a>Nothing</a>.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/2013-12-02/APIReference/API_SequenceNumberRange.html</a>
shardSequenceNumberRange :: Shard -> !(SequenceNumber, Maybe SequenceNumber)

-- | The unique identifier of the shard within the Amazon Kinesis stream.
shardShardId :: Shard -> ShardId
instance Typeable StreamName
instance Typeable ShardId
instance Typeable SequenceNumber
instance Typeable PartitionHash
instance Typeable PartitionKey
instance Typeable ShardIterator
instance Typeable ShardIteratorType
instance Typeable Record
instance Typeable StreamStatus
instance Typeable Shard
instance Typeable StreamDescription
instance Show StreamName
instance Read StreamName
instance Eq StreamName
instance Ord StreamName
instance Generic StreamName
instance Show ShardId
instance Read ShardId
instance Eq ShardId
instance Ord ShardId
instance Generic ShardId
instance Show SequenceNumber
instance Read SequenceNumber
instance Eq SequenceNumber
instance Ord SequenceNumber
instance Generic SequenceNumber
instance Show PartitionHash
instance Read PartitionHash
instance Eq PartitionHash
instance Ord PartitionHash
instance Generic PartitionHash
instance Show PartitionKey
instance Read PartitionKey
instance Eq PartitionKey
instance Ord PartitionKey
instance IsString PartitionKey
instance Generic PartitionKey
instance Show ShardIterator
instance Read ShardIterator
instance Eq ShardIterator
instance Ord ShardIterator
instance Generic ShardIterator
instance Show ShardIteratorType
instance Read ShardIteratorType
instance Eq ShardIteratorType
instance Ord ShardIteratorType
instance Enum ShardIteratorType
instance Bounded ShardIteratorType
instance Generic ShardIteratorType
instance Show Record
instance Read Record
instance Eq Record
instance Ord Record
instance Generic Record
instance Show StreamStatus
instance Read StreamStatus
instance Eq StreamStatus
instance Ord StreamStatus
instance Enum StreamStatus
instance Bounded StreamStatus
instance Generic StreamStatus
instance Show Shard
instance Read Shard
instance Eq Shard
instance Ord Shard
instance Generic Shard
instance Show StreamDescription
instance Read StreamDescription
instance Eq StreamDescription
instance Ord StreamDescription
instance Generic StreamDescription
instance Datatype D1StreamName
instance Constructor C1_0StreamName
instance Selector S1_0_0StreamName
instance Datatype D1ShardId
instance Constructor C1_0ShardId
instance Selector S1_0_0ShardId
instance Datatype D1SequenceNumber
instance Constructor C1_0SequenceNumber
instance Selector S1_0_0SequenceNumber
instance Datatype D1PartitionHash
instance Constructor C1_0PartitionHash
instance Selector S1_0_0PartitionHash
instance Datatype D1PartitionKey
instance Constructor C1_0PartitionKey
instance Selector S1_0_0PartitionKey
instance Datatype D1ShardIterator
instance Constructor C1_0ShardIterator
instance Selector S1_0_0ShardIterator
instance Datatype D1ShardIteratorType
instance Constructor C1_0ShardIteratorType
instance Constructor C1_1ShardIteratorType
instance Constructor C1_2ShardIteratorType
instance Constructor C1_3ShardIteratorType
instance Datatype D1Record
instance Constructor C1_0Record
instance Selector S1_0_0Record
instance Selector S1_0_1Record
instance Selector S1_0_2Record
instance Datatype D1StreamStatus
instance Constructor C1_0StreamStatus
instance Constructor C1_1StreamStatus
instance Constructor C1_2StreamStatus
instance Constructor C1_3StreamStatus
instance Datatype D1Shard
instance Constructor C1_0Shard
instance Selector S1_0_0Shard
instance Selector S1_0_1Shard
instance Selector S1_0_2Shard
instance Selector S1_0_3Shard
instance Selector S1_0_4Shard
instance Datatype D1StreamDescription
instance Constructor C1_0StreamDescription
instance Selector S1_0_0StreamDescription
instance Selector S1_0_1StreamDescription
instance Selector S1_0_2StreamDescription
instance Selector S1_0_3StreamDescription
instance Selector S1_0_4StreamDescription
instance Arbitrary Shard
instance FromJSON Shard
instance ToJSON Shard
instance NFData Shard
instance Arbitrary StreamStatus
instance FromJSON StreamStatus
instance ToJSON StreamStatus
instance NFData StreamStatus
instance Arbitrary StreamDescription
instance FromJSON StreamDescription
instance ToJSON StreamDescription
instance NFData StreamDescription
instance Arbitrary Record
instance FromJSON Record
instance ToJSON Record
instance NFData Record
instance Arbitrary ShardIteratorType
instance FromJSON ShardIteratorType
instance ToJSON ShardIteratorType
instance NFData ShardIteratorType
instance Arbitrary ShardIterator
instance FromJSON ShardIterator
instance ToJSON ShardIterator
instance NFData ShardIterator
instance Arbitrary PartitionKey
instance FromJSON PartitionKey
instance ToJSON PartitionKey
instance NFData PartitionKey
instance Arbitrary PartitionHash
instance FromJSON PartitionHash
instance ToJSON PartitionHash
instance NFData PartitionHash
instance Arbitrary SequenceNumber
instance FromJSON SequenceNumber
instance ToJSON SequenceNumber
instance NFData SequenceNumber
instance Arbitrary ShardId
instance FromJSON ShardId
instance ToJSON ShardId
instance NFData ShardId
instance Arbitrary StreamName
instance FromJSON StreamName
instance ToJSON StreamName
instance IsString StreamName
instance NFData StreamName


-- | <i>API Version: 2013-12-02</i>
--   
--   <a>http://docs.aws.amazon.com/kinesis/2013-12-02/APIReference</a>
module Aws.Kinesis.Core
data KinesisVersion
KinesisVersion_2013_12_02 :: KinesisVersion
data KinesisConfiguration qt
KinesisConfiguration :: Region -> Protocol -> KinesisConfiguration qt
kinesisConfRegion :: KinesisConfiguration qt -> Region
kinesisConfProtocol :: KinesisConfiguration qt -> Protocol
defaultKinesisConfiguration :: Region -> KinesisConfiguration qt
data KinesisMetadata
KinesisMetadata :: Maybe Text -> Maybe Text -> KinesisMetadata
kinesisMAmzId2 :: KinesisMetadata -> Maybe Text
kinesisMRequestId :: KinesisMetadata -> Maybe Text

-- | All Kinesis exceptions have HTTP status code 400 and include a JSON
--   body with an exception type property and a short message.
data KinesisErrorResponse
KinesisErrorResponse :: !Text -> !Text -> KinesisErrorResponse
kinesisErrorCode :: KinesisErrorResponse -> !Text
kinesisErrorMessage :: KinesisErrorResponse -> !Text
KinesisResponseJsonError :: Text -> KinesisErrorResponse
KinesisOtherError :: !Status -> !Text -> KinesisErrorResponse
kinesisOtherErrorStatus :: KinesisErrorResponse -> !Status
kinesisOtherErrorMessage :: KinesisErrorResponse -> !Text
data KinesisAction
KinesisCreateStream :: KinesisAction
KinesisDeleteStream :: KinesisAction
KinesisDescribeStream :: KinesisAction
KinesisGetRecords :: KinesisAction
KinesisGetShardIterator :: KinesisAction
KinesisListStreams :: KinesisAction
KinesisMergeShards :: KinesisAction
KinesisPutRecord :: KinesisAction
KinesisPutRecords :: KinesisAction
KinesisSplitShard :: KinesisAction
kinesisActionToText :: IsString a => KinesisAction -> a
parseKinesisAction :: CharParsing m => m KinesisAction

-- | Kinesis Endpoints as specified in AWS General API version 0.1
--   
--   <a>http://docs.aws.amazon.com/general/1.0/gr/rande.html#ak_region</a>
kinesisServiceEndpoint :: Region -> ByteString
data KinesisQuery
KinesisQuery :: !KinesisAction -> !(Maybe ByteString) -> KinesisQuery
kinesisQueryAction :: KinesisQuery -> !KinesisAction
kinesisQueryBody :: KinesisQuery -> !(Maybe ByteString)

-- | Creates a signed query.
--   
--   Uses AWS Signature V4. All requests are POST requests with the
--   signature placed in an HTTP header
kinesisSignQuery :: KinesisQuery -> KinesisConfiguration qt -> SignatureData -> SignedQuery
kinesisResponseConsumer :: FromJSON a => IORef KinesisMetadata -> HTTPResponseConsumer a

-- | Create a complete <a>HTTPResponseConsumer</a> for response types with
--   an FromJSON instance
jsonResponseConsumer :: FromJSON a => HTTPResponseConsumer a

-- | TODO integrate typed errors
data KinesisError a
KinesisErrorCommon :: KinesisCommonError -> KinesisError a
KinesisErrorCommand :: a -> KinesisError a

-- | Common Kinesis Parameters
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/2013-12-02/APIReference/CommonParameters.html</a>
--   
--   The user of this API hardy needs to deal with the data type directly.
--   
--   This API supports only signature version 4 with signature method
--   <tt>AWS4-HMAC-SHA256</tt>.
--   
--   /This is not currently used for computing the requests, but serves as
--   documentation and reference for the implementation of yet missing
--   features./
data KinesisCommonParameters
KinesisCommonParameters :: !KinesisAction -> !(Maybe ()) -> !ByteString -> !UTCTime -> !UTCTime -> () -> !Signature -> !SignatureMethod -> !SignatureVersion -> KinesisVersion -> KinesisCommonParameters

-- | The action to be performed.
kinesisAction :: KinesisCommonParameters -> !KinesisAction

-- | The parameters that are required to authenticate a Conditional
--   request. Contains:
--   
--   <ul>
--   <li>AWSAccessKeyID</li>
--   <li>SignatureVersion</li>
--   <li>Timestamp</li>
--   <li>Signature</li>
--   </ul>
kinesisAuthParams :: KinesisCommonParameters -> !(Maybe ())

-- | The access key ID that corresponds to the secret access key that you
--   used to sign the request.
kinesisAWSAccessKeyId :: KinesisCommonParameters -> !ByteString

-- | The date and time when the request signature expires. Precisely one of
--   snsExpires or snsTimestamp must be present.
--   
--   format: <tt>YYYY-MM-DDThh:mm:ssZ</tt> (ISO 8601)
kinesisExpires :: KinesisCommonParameters -> !UTCTime

-- | The date and time of the request. Precisely one of snsExpires or
--   snsTimestamp must be present.
--   
--   format: <tt>YYYY-MM-DDThh:mm:ssZ</tt> (ISO 8601)
kinesisTimestamp :: KinesisCommonParameters -> !UTCTime

-- | TODO
--   
--   The temporary security token that was obtained through a call to AWS
--   Security Token Service. For a list of services that support AWS
--   Security Token Service, go to Using Temporary Security Credentials to
--   Access AWS in Using Temporary Security Credentials.
kinesisSecurityToken :: KinesisCommonParameters -> ()

-- | The digital signature that you created for the request. For
--   information about generating a signature, go to the service's
--   developer documentation.
kinesisSignature :: KinesisCommonParameters -> !Signature

-- | The hash algorithm that you used to create the request signature.
--   
--   Valid Values: <tt>HmacSHA256</tt> | <tt>HmacSHA1</tt>
kinesisSignatureMethod :: KinesisCommonParameters -> !SignatureMethod

-- | The signature version you use to sign the request. Set this to the
--   value that is recommended for your service.
kinesisSignatureVersion :: KinesisCommonParameters -> !SignatureVersion

-- | The API version that the request is written for.
kinesisVersion :: KinesisCommonParameters -> KinesisVersion

-- | Common Kinesis Errors
--   
--   
--   <a>http://docs.aws.amazon.com/sns/2010-03-31/APIReference/CommonErrors.html</a>
--   
--   TODO add function to provide info about the error (content of haddock
--   comments)
data KinesisCommonError

-- | The request signature does not conform to AWS standards.
--   
--   <i>Code 400</i>
ErrorIncompleteSignature :: KinesisCommonError

-- | The request processing has failed because of an unknown error,
--   exception or failure.
--   
--   <i>Code 500</i>
ErrorInternalFailure :: KinesisCommonError

-- | The action or operation requested is invalid. Verify that the action
--   is typed correctly.
--   
--   <i>Code 400</i>
ErrorInvalidAction :: KinesisCommonError

-- | The X.509 certificate or AWS access key ID provided does not exist in
--   our records.
--   
--   <i>Code 403</i>
ErrorInvalidClientTokenId :: KinesisCommonError

-- | Parameters that must not be used together were used together.
--   
--   <i>Code 400</i>
ErrorInvalidParameterCombination :: KinesisCommonError

-- | An invalid or out-of-range value was supplied for the input parameter.
--   
--   <i>Code 400</i>
ErrorInvalidParameterValue :: KinesisCommonError

-- | The AWS query string is malformed or does not adhere to AWS standards.
--   
--   <i>Code 400</i>
ErrorInvalidQueryParamter :: KinesisCommonError

-- | The query string contains a syntax error.
--   
--   <i>Code 404</i>
ErrorMalformedQueryString :: KinesisCommonError

-- | The request is missing an action or a required parameter.
--   
--   <i>Code 400</i>
ErrorMissingAction :: KinesisCommonError

-- | The request must contain either a valid (registered) AWS access key ID
--   or X.509 certificate.
--   
--   <i>Code 403</i>
ErrorMissingAuthenticationToken :: KinesisCommonError

-- | A required parameter for the specified action is not supplied.
--   
--   <i>Code 400</i>
ErrorMissingParameter :: KinesisCommonError

-- | The AWS access key ID needs a subscription for the service.
--   
--   <i>Code 403</i>
ErrorOptInRequired :: KinesisCommonError

-- | The request reached the service more than 15 minutes after the date
--   stamp on the request or more than 15 minutes after the request
--   expiration date (such as for pre-signed URLs), or the date stamp on
--   the request is more than 15 minutes in the future.
--   
--   <i>Code 400</i>
ErrorRequestExpired :: KinesisCommonError

-- | The request has failed due to a temporary failure of the server.
--   
--   <i>Code 503</i>
ErrorServiceUnavailable :: KinesisCommonError

-- | The request was denied due to request throttling.
--   
--   <i>Code 400</i>
ErrorThrottling :: KinesisCommonError

-- | The input fails to satisfy the constraints specified by an AWS
--   service.
--   
--   <i>Code 400</i>
ErrorValidationError :: KinesisCommonError
instance Typeable KinesisVersion
instance Typeable KinesisAction
instance Typeable KinesisConfiguration
instance Typeable KinesisQuery
instance Typeable KinesisErrorResponse
instance Typeable KinesisCommonError
instance Typeable KinesisError
instance Typeable KinesisCommonParameters
instance Generic Status
instance Show KinesisVersion
instance Read KinesisVersion
instance Eq KinesisVersion
instance Ord KinesisVersion
instance Generic KinesisVersion
instance Show KinesisAction
instance Read KinesisAction
instance Eq KinesisAction
instance Ord KinesisAction
instance Enum KinesisAction
instance Bounded KinesisAction
instance Generic KinesisAction
instance Show KinesisMetadata
instance Generic KinesisMetadata
instance Show (KinesisConfiguration qt)
instance Show KinesisQuery
instance Eq KinesisQuery
instance Generic KinesisQuery
instance Show KinesisErrorResponse
instance Eq KinesisErrorResponse
instance Ord KinesisErrorResponse
instance Generic KinesisErrorResponse
instance Show KinesisCommonError
instance Read KinesisCommonError
instance Eq KinesisCommonError
instance Ord KinesisCommonError
instance Enum KinesisCommonError
instance Bounded KinesisCommonError
instance Generic KinesisCommonError
instance Show a => Show (KinesisError a)
instance Read a => Read (KinesisError a)
instance Eq a => Eq (KinesisError a)
instance Ord a => Ord (KinesisError a)
instance Generic (KinesisError a)
instance Show KinesisCommonParameters
instance Eq KinesisCommonParameters
instance Read KinesisCommonParameters
instance Ord KinesisCommonParameters
instance Generic KinesisCommonParameters
instance Datatype D1KinesisVersion
instance Constructor C1_0KinesisVersion
instance Datatype D1KinesisAction
instance Constructor C1_0KinesisAction
instance Constructor C1_1KinesisAction
instance Constructor C1_2KinesisAction
instance Constructor C1_3KinesisAction
instance Constructor C1_4KinesisAction
instance Constructor C1_5KinesisAction
instance Constructor C1_6KinesisAction
instance Constructor C1_7KinesisAction
instance Constructor C1_8KinesisAction
instance Constructor C1_9KinesisAction
instance Datatype D1KinesisMetadata
instance Constructor C1_0KinesisMetadata
instance Selector S1_0_0KinesisMetadata
instance Selector S1_0_1KinesisMetadata
instance Datatype D1KinesisQuery
instance Constructor C1_0KinesisQuery
instance Selector S1_0_0KinesisQuery
instance Selector S1_0_1KinesisQuery
instance Datatype D1KinesisErrorResponse
instance Constructor C1_0KinesisErrorResponse
instance Constructor C1_1KinesisErrorResponse
instance Constructor C1_2KinesisErrorResponse
instance Selector S1_0_0KinesisErrorResponse
instance Selector S1_0_1KinesisErrorResponse
instance Selector S1_2_0KinesisErrorResponse
instance Selector S1_2_1KinesisErrorResponse
instance Datatype D1KinesisCommonError
instance Constructor C1_0KinesisCommonError
instance Constructor C1_1KinesisCommonError
instance Constructor C1_2KinesisCommonError
instance Constructor C1_3KinesisCommonError
instance Constructor C1_4KinesisCommonError
instance Constructor C1_5KinesisCommonError
instance Constructor C1_6KinesisCommonError
instance Constructor C1_7KinesisCommonError
instance Constructor C1_8KinesisCommonError
instance Constructor C1_9KinesisCommonError
instance Constructor C1_10KinesisCommonError
instance Constructor C1_11KinesisCommonError
instance Constructor C1_12KinesisCommonError
instance Constructor C1_13KinesisCommonError
instance Constructor C1_14KinesisCommonError
instance Constructor C1_15KinesisCommonError
instance Datatype D1KinesisError
instance Constructor C1_0KinesisError
instance Constructor C1_1KinesisError
instance Datatype D1KinesisCommonParameters
instance Constructor C1_0KinesisCommonParameters
instance Selector S1_0_0KinesisCommonParameters
instance Selector S1_0_1KinesisCommonParameters
instance Selector S1_0_2KinesisCommonParameters
instance Selector S1_0_3KinesisCommonParameters
instance Selector S1_0_4KinesisCommonParameters
instance Selector S1_0_5KinesisCommonParameters
instance Selector S1_0_6KinesisCommonParameters
instance Selector S1_0_7KinesisCommonParameters
instance Selector S1_0_8KinesisCommonParameters
instance Selector S1_0_9KinesisCommonParameters
instance Datatype D1Status
instance Constructor C1_0Status
instance Selector S1_0_0Status
instance Selector S1_0_1Status
instance NFData KinesisCommonParameters
instance NFData KinesisCommonError
instance FromJSON KinesisErrorResponse
instance NFData KinesisErrorResponse
instance Exception KinesisErrorResponse
instance NFData a => NFData (KinesisError a)
instance NFData KinesisQuery
instance Monoid KinesisMetadata
instance Loggable KinesisMetadata
instance NFData KinesisMetadata
instance Arbitrary KinesisAction
instance AwsType KinesisAction
instance NFData KinesisAction
instance NFData KinesisVersion
instance NFData Status


-- | <i>API Version: 2013-12-02</i>
--   
--   This operation adds a new Amazon Kinesis stream to your AWS account. A
--   stream captures and transports data records that are continuously
--   emitted from different data sources or producers. Scale-out within an
--   Amazon Kinesis stream is explicitly supported by means of shards,
--   which are uniquely identified groups of data records in an Amazon
--   Kinesis stream.
--   
--   You specify and control the number of shards that a stream is composed
--   of. Each open shard can support up to 5 read transactions per second,
--   up to a maximum total of 2 MB of data read per second. Each shard can
--   support up to 1000 write transactions per second, up to a maximum
--   total of 1 MB data written per second. You can add shards to a stream
--   if the amount of data input increases and you can remove shards if the
--   amount of data input decreases.
--   
--   The stream name identifies the stream. The name is scoped to the AWS
--   account used by the application. It is also scoped by region. That is,
--   two streams in two different accounts can have the same name, and two
--   streams in the same account, but in two different regions, can have
--   the same name.
--   
--   CreateStream is an asynchronous operation. Upon receiving a
--   CreateStream request, Amazon Kinesis immediately returns and sets the
--   stream status to CREATING. After the stream is created, Amazon Kinesis
--   sets the stream status to ACTIVE. You should perform read and write
--   operations only on an ACTIVE stream.
--   
--   You receive a LimitExceededException when making a CreateStream
--   request if you try to do one of the following:
--   
--   Have more than five streams in the CREATING state at any point in
--   time. Create more shards than are authorized for your account. Note:
--   The default limit for an AWS account is 10 shards per stream. If you
--   need to create a stream with more than 10 shards, contact AWS Support
--   to increase the limit on your account.
--   
--   You can use the DescribeStream operation to check the stream status,
--   which is returned in StreamStatus.
--   
--   CreateStream has a limit of 5 transactions per second per account.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/2013-12-02/APIReference/API_CreateStream.html</a>
module Aws.Kinesis.Commands.CreateStream
data CreateStream
CreateStream :: !Int -> !StreamName -> CreateStream

-- | The number of shards that the stream will use. The throughput of the
--   stream is a function of the number of shards; more shards are required
--   for greater provisioned throughput.
--   
--   Note: The default limit for an AWS account is 10 shards per stream. If
--   you need to create a stream with more than 10 shards, contact AWS
--   Support to increase the limit on your account.
--   
--   Note that this limit is not checked by the code.
createStreamShardCound :: CreateStream -> !Int

-- | A name to identify the stream.
createStreamStreamName :: CreateStream -> !StreamName
data CreateStreamResponse
CreateStreamResponse :: CreateStreamResponse
data CreateStreamExceptions

-- | <i>Code 400</i>
CreateStreamInvalidArgumentException :: CreateStreamExceptions

-- | <i>Code 400</i>
CreateStreamLimitExceededException :: CreateStreamExceptions

-- | <i>Code 400</i>
CreateStreamResourceInUseException :: CreateStreamExceptions
instance Typeable CreateStream
instance Typeable CreateStreamResponse
instance Typeable CreateStreamExceptions
instance Show CreateStream
instance Read CreateStream
instance Eq CreateStream
instance Ord CreateStream
instance Generic CreateStream
instance Show CreateStreamResponse
instance Read CreateStreamResponse
instance Eq CreateStreamResponse
instance Ord CreateStreamResponse
instance Generic CreateStreamResponse
instance Show CreateStreamExceptions
instance Read CreateStreamExceptions
instance Eq CreateStreamExceptions
instance Ord CreateStreamExceptions
instance Enum CreateStreamExceptions
instance Bounded CreateStreamExceptions
instance Generic CreateStreamExceptions
instance Datatype D1CreateStream
instance Constructor C1_0CreateStream
instance Selector S1_0_0CreateStream
instance Selector S1_0_1CreateStream
instance Datatype D1CreateStreamResponse
instance Constructor C1_0CreateStreamResponse
instance Datatype D1CreateStreamExceptions
instance Constructor C1_0CreateStreamExceptions
instance Constructor C1_1CreateStreamExceptions
instance Constructor C1_2CreateStreamExceptions
instance NFData CreateStreamExceptions
instance AsMemoryResponse CreateStreamResponse
instance Transaction CreateStream CreateStreamResponse
instance SignQuery CreateStream
instance FromJSON CreateStreamResponse
instance ResponseConsumer r CreateStreamResponse
instance NFData CreateStreamResponse
instance ToJSON CreateStream
instance NFData CreateStream


-- | <i>API Version: 2013-12-02</i>
--   
--   This operation deletes a stream and all of its shards and data. You
--   must shut down any applications that are operating on the stream
--   before you delete the stream. If an application attempts to operate on
--   a deleted stream, it will receive the exception
--   ResourceNotFoundException.
--   
--   If the stream is in the ACTIVE state, you can delete it. After a
--   DeleteStream request, the specified stream is in the DELETING state
--   until Amazon Kinesis completes the deletion.
--   
--   Note: Amazon Kinesis might continue to accept data read and write
--   operations, such as PutRecord and GetRecords, on a stream in the
--   DELETING state until the stream deletion is complete.
--   
--   When you delete a stream, any shards in that stream are also deleted.
--   
--   You can use the DescribeStream operation to check the state of the
--   stream, which is returned in StreamStatus.
--   
--   DeleteStream has a limit of 5 transactions per second per account.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/2013-12-02/APIReference/API_DeleteStream.html</a>
module Aws.Kinesis.Commands.DeleteStream
data DeleteStream
DeleteStream :: !StreamName -> DeleteStream

-- | The name of the stream to delete.
deleteStreamStreamName :: DeleteStream -> !StreamName
data DeleteStreamResponse
DeleteStreamResponse :: DeleteStreamResponse
data DeleteStreamExceptions

-- | <i>Code 400</i>
DeleteStreamLimitExceededException :: DeleteStreamExceptions

-- | <i>Code 400</i>
DeleteStreamResourceNotFoundException :: DeleteStreamExceptions
instance Typeable DeleteStream
instance Typeable DeleteStreamResponse
instance Typeable DeleteStreamExceptions
instance Show DeleteStream
instance Read DeleteStream
instance Eq DeleteStream
instance Ord DeleteStream
instance Generic DeleteStream
instance Show DeleteStreamResponse
instance Read DeleteStreamResponse
instance Eq DeleteStreamResponse
instance Ord DeleteStreamResponse
instance Generic DeleteStreamResponse
instance Show DeleteStreamExceptions
instance Read DeleteStreamExceptions
instance Eq DeleteStreamExceptions
instance Ord DeleteStreamExceptions
instance Enum DeleteStreamExceptions
instance Bounded DeleteStreamExceptions
instance Generic DeleteStreamExceptions
instance Datatype D1DeleteStream
instance Constructor C1_0DeleteStream
instance Selector S1_0_0DeleteStream
instance Datatype D1DeleteStreamResponse
instance Constructor C1_0DeleteStreamResponse
instance Datatype D1DeleteStreamExceptions
instance Constructor C1_0DeleteStreamExceptions
instance Constructor C1_1DeleteStreamExceptions
instance NFData DeleteStreamExceptions
instance AsMemoryResponse DeleteStreamResponse
instance Transaction DeleteStream DeleteStreamResponse
instance SignQuery DeleteStream
instance ResponseConsumer r DeleteStreamResponse
instance FromJSON DeleteStreamResponse
instance NFData DeleteStreamResponse
instance ToJSON DeleteStream
instance NFData DeleteStream


-- | <i>API Version: 2013-03-31</i>
--   
--   This operation returns the following information about the stream: the
--   current status of the stream, the stream Amazon Resource Name (ARN),
--   and an array of shard objects that comprise the stream. For each shard
--   object there is information about the hash key and sequence number
--   ranges that the shard spans, and the IDs of any earlier shards that
--   played in a role in a MergeShards or SplitShard operation that created
--   the shard. A sequence number is the identifier associated with every
--   record ingested in the Amazon Kinesis stream. The sequence number is
--   assigned by the Amazon Kinesis service when a record is put into the
--   stream.
--   
--   You can limit the number of returned shards using the Limit parameter.
--   The number of shards in a stream may be too large to return from a
--   single call to DescribeStream. You can detect this by using the
--   HasMoreShards flag in the returned output. HasMoreShards is set to
--   true when there is more data available.
--   
--   If there are more shards available, you can request more shards by
--   using the shard ID of the last shard returned by the DescribeStream
--   request, in the ExclusiveStartShardId parameter in a subsequent
--   request to DescribeStream. DescribeStream is a paginated operation.
--   
--   DescribeStream has a limit of 10 transactions per second per account.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/2013-12-02/APIReference/API_DescribeStream.html</a>
module Aws.Kinesis.Commands.DescribeStream
data DescribeStream
DescribeStream :: !(Maybe ShardId) -> !(Maybe Int) -> !StreamName -> DescribeStream

-- | The shard ID of the shard to start with for the stream description.
describeStreamExclusiveStartShardId :: DescribeStream -> !(Maybe ShardId)

-- | The maximum number of shards to return.
describeStreamLimit :: DescribeStream -> !(Maybe Int)

-- | The name of the stream to describe.
describeStreamStreamName :: DescribeStream -> !StreamName
data DescribeStreamResponse
DescribeStreamResponse :: !StreamDescription -> DescribeStreamResponse

-- | Contains the current status of the stream, the stream ARN, an array of
--   shard objects that comprise the stream, and states whether there are
--   more shards available.
describeStreamResStreamDescription :: DescribeStreamResponse -> !StreamDescription
data DescribeStreamExceptions

-- | <i>Code 400</i>
DescribeStreamLimitExceededException :: DescribeStreamExceptions

-- | <i>Code 400</i>
DescribeStreamResourceNotFoundException :: DescribeStreamExceptions
instance Typeable DescribeStream
instance Typeable DescribeStreamResponse
instance Typeable DescribeStreamExceptions
instance Show DescribeStream
instance Read DescribeStream
instance Eq DescribeStream
instance Ord DescribeStream
instance Generic DescribeStream
instance Show DescribeStreamResponse
instance Read DescribeStreamResponse
instance Eq DescribeStreamResponse
instance Ord DescribeStreamResponse
instance Generic DescribeStreamResponse
instance Show DescribeStreamExceptions
instance Read DescribeStreamExceptions
instance Eq DescribeStreamExceptions
instance Ord DescribeStreamExceptions
instance Enum DescribeStreamExceptions
instance Bounded DescribeStreamExceptions
instance Generic DescribeStreamExceptions
instance Datatype D1DescribeStream
instance Constructor C1_0DescribeStream
instance Selector S1_0_0DescribeStream
instance Selector S1_0_1DescribeStream
instance Selector S1_0_2DescribeStream
instance Datatype D1DescribeStreamResponse
instance Constructor C1_0DescribeStreamResponse
instance Selector S1_0_0DescribeStreamResponse
instance Datatype D1DescribeStreamExceptions
instance Constructor C1_0DescribeStreamExceptions
instance Constructor C1_1DescribeStreamExceptions
instance NFData DescribeStreamExceptions
instance IteratedTransaction DescribeStream DescribeStreamResponse
instance ListResponse DescribeStreamResponse Shard
instance AsMemoryResponse DescribeStreamResponse
instance Transaction DescribeStream DescribeStreamResponse
instance SignQuery DescribeStream
instance FromJSON DescribeStreamResponse
instance ResponseConsumer r DescribeStreamResponse
instance NFData DescribeStreamResponse
instance ToJSON DescribeStream
instance NFData DescribeStream


-- | <i>API Version: 2013-12-02</i>
--   
--   This operation returns one or more data records from a shard. A
--   GetRecords operation request can retrieve up to 10 MB of data.
--   
--   You specify a shard iterator for the shard that you want to read data
--   from in the ShardIterator parameter. The shard iterator specifies the
--   position in the shard from which you want to start reading data
--   records sequentially. A shard iterator specifies this position using
--   the sequence number of a data record in the shard. For more
--   information about the shard iterator, see GetShardIterator.
--   
--   GetRecords may return a partial result if the response size limit is
--   exceeded. You will get an error, but not a partial result if the
--   shard's provisioned throughput is exceeded, the shard iterator has
--   expired, or an internal processing failure has occurred. Clients can
--   request a smaller amount of data by specifying a maximum number of
--   returned records using the Limit parameter. The Limit parameter can be
--   set to an integer value of up to 10,000. If you set the value to an
--   integer greater than 10,000, you will receive
--   InvalidArgumentException.
--   
--   A new shard iterator is returned by every GetRecords request in
--   NextShardIterator, which you use in the ShardIterator parameter of the
--   next GetRecords request. When you repeatedly read from an Amazon
--   Kinesis stream use a GetShardIterator request to get the first shard
--   iterator to use in your first GetRecords request and then use the
--   shard iterator returned in NextShardIterator for subsequent reads.
--   
--   GetRecords can return null for the NextShardIterator to reflect that
--   the shard has been closed and that the requested shard iterator would
--   never have returned more data.
--   
--   If no items can be processed because of insufficient provisioned
--   throughput on the shard involved in the request, GetRecords throws
--   ProvisionedThroughputExceededException.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/2013-12-02/APIReference/API_GetRecords.html</a>
module Aws.Kinesis.Commands.GetRecords
data GetRecords
GetRecords :: !(Maybe Int) -> !ShardIterator -> GetRecords

-- | The maximum number of records to return, which can be set to a value
--   of up to 10,000.
getRecordsLimit :: GetRecords -> !(Maybe Int)

-- | The position in the shard from which you want to start sequentially
--   reading data records.
getRecordsShardIterator :: GetRecords -> !ShardIterator
data GetRecordsResponse
GetRecordsResponse :: !(Maybe ShardIterator) -> ![Record] -> GetRecordsResponse

-- | The next position in the shard from which to start sequentially
--   reading data records. If set to null, the shard has been closed and
--   the requested iterator will not return any more data.
getRecordsResNextShardIterator :: GetRecordsResponse -> !(Maybe ShardIterator)

-- | List of Records
getRecordsResRecords :: GetRecordsResponse -> ![Record]
data GetRecordsExceptions

-- | <i>Code 400</i>
GetRecordsExpiredIteratorException :: GetRecordsExceptions

-- | <i>Code 400</i>
GetRecordsInvalidArgumentException :: GetRecordsExceptions

-- | <i>Code 400</i>
GetRecordsProvisionedThroughputExceededException :: GetRecordsExceptions

-- | <i>Code 400</i>
GetRecordsResourceNotFoundException :: GetRecordsExceptions
instance Typeable GetRecords
instance Typeable GetRecordsResponse
instance Typeable GetRecordsExceptions
instance Show GetRecords
instance Read GetRecords
instance Eq GetRecords
instance Ord GetRecords
instance Generic GetRecords
instance Show GetRecordsResponse
instance Read GetRecordsResponse
instance Eq GetRecordsResponse
instance Ord GetRecordsResponse
instance Generic GetRecordsResponse
instance Show GetRecordsExceptions
instance Read GetRecordsExceptions
instance Eq GetRecordsExceptions
instance Ord GetRecordsExceptions
instance Enum GetRecordsExceptions
instance Bounded GetRecordsExceptions
instance Generic GetRecordsExceptions
instance Datatype D1GetRecords
instance Constructor C1_0GetRecords
instance Selector S1_0_0GetRecords
instance Selector S1_0_1GetRecords
instance Datatype D1GetRecordsResponse
instance Constructor C1_0GetRecordsResponse
instance Selector S1_0_0GetRecordsResponse
instance Selector S1_0_1GetRecordsResponse
instance Datatype D1GetRecordsExceptions
instance Constructor C1_0GetRecordsExceptions
instance Constructor C1_1GetRecordsExceptions
instance Constructor C1_2GetRecordsExceptions
instance Constructor C1_3GetRecordsExceptions
instance NFData GetRecordsExceptions
instance IteratedTransaction GetRecords GetRecordsResponse
instance ListResponse GetRecordsResponse Record
instance AsMemoryResponse GetRecordsResponse
instance Transaction GetRecords GetRecordsResponse
instance SignQuery GetRecords
instance ResponseConsumer r GetRecordsResponse
instance FromJSON GetRecordsResponse
instance NFData GetRecordsResponse
instance ToJSON GetRecords
instance NFData GetRecords


-- | <i>API Version: 2013-12-02</i>
--   
--   This operation returns a shard iterator in ShardIterator. The shard
--   iterator specifies the position in the shard from which you want to
--   start reading data records sequentially. A shard iterator specifies
--   this position using the sequence number of a data record in a shard. A
--   sequence number is the identifier associated with every record
--   ingested in the Amazon Kinesis stream. The sequence number is assigned
--   by the Amazon Kinesis service when a record is put into the stream.
--   
--   You must specify the shard iterator type in the GetShardIterator
--   request. For example, you can set the ShardIteratorType parameter to
--   read exactly from the position denoted by a specific sequence number
--   by using the AT_SEQUENCE_NUMBER shard iterator type, or right after
--   the sequence number by using the AFTER_SEQUENCE_NUMBER shard iterator
--   type, using sequence numbers returned by earlier PutRecord, GetRecords
--   or DescribeStream requests. You can specify the shard iterator type
--   TRIM_HORIZON in the request to cause ShardIterator to point to the
--   last untrimmed record in the shard in the system, which is the oldest
--   data record in the shard. Or you can point to just after the most
--   recent record in the shard, by using the shard iterator type LATEST,
--   so that you always read the most recent data in the shard.
--   
--   Note: Each shard iterator expires five minutes after it is returned to
--   the requester.
--   
--   When you repeatedly read from an Amazon Kinesis stream use a
--   GetShardIterator request to get the first shard iterator to to use in
--   your first GetRecords request and then use the shard iterator returned
--   by the GetRecords request in NextShardIterator for subsequent reads. A
--   new shard iterator is returned by every GetRecords request in
--   NextShardIterator, which you use in the ShardIterator parameter of the
--   next GetRecords request.
--   
--   If a GetShardIterator request is made too often, you will receive a
--   ProvisionedThroughputExceededException. For more information about
--   throughput limits, see the Amazon Kinesis Developer Guide.
--   
--   GetShardIterator can return null for its ShardIterator to indicate
--   that the shard has been closed and that the requested iterator will
--   return no more data. A shard can be closed by a SplitShard or
--   MergeShards operation.
--   
--   GetShardIterator has a limit of 5 transactions per second per account
--   per open shard.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/2013-12-02/APIReference/API_GetShardIterator.html</a>
module Aws.Kinesis.Commands.GetShardIterator
data GetShardIterator
GetShardIterator :: !ShardId -> !ShardIteratorType -> !(Maybe SequenceNumber) -> !StreamName -> GetShardIterator

-- | The shard ID of the shard to get the iterator for.
getShardIteratorShardId :: GetShardIterator -> !ShardId

-- | Determines how the shard iterator is used to start reading data
--   records from the shard.
getShardIteratorShardIteratorType :: GetShardIterator -> !ShardIteratorType

-- | The sequence number of the data record in the shard from which to
--   start reading from.
getShardIteratorStartingSequenceNumber :: GetShardIterator -> !(Maybe SequenceNumber)

-- | The name of the stream.
getShardIteratorStreamName :: GetShardIterator -> !StreamName
data GetShardIteratorResponse
GetShardIteratorResponse :: !ShardIterator -> GetShardIteratorResponse

-- | The position in the shard from which to start reading data records
--   sequentially. A shard iterator specifies this position using the
--   sequence number of a data record in a shard.
getShardIteratorResShardIterator :: GetShardIteratorResponse -> !ShardIterator
data GetShardIteratorExceptions

-- | <i>Code 400</i>
GetShardIteratorInvalidArgumentException :: GetShardIteratorExceptions

-- | <i>Code 400</i>
GetShardIteratorProvisionedThroughputExceededException :: GetShardIteratorExceptions

-- | <i>Code 400</i>
GetShardIteratorResourceNotFoundException :: GetShardIteratorExceptions
instance Typeable GetShardIterator
instance Typeable GetShardIteratorResponse
instance Typeable GetShardIteratorExceptions
instance Show GetShardIterator
instance Read GetShardIterator
instance Eq GetShardIterator
instance Ord GetShardIterator
instance Generic GetShardIterator
instance Show GetShardIteratorResponse
instance Read GetShardIteratorResponse
instance Eq GetShardIteratorResponse
instance Ord GetShardIteratorResponse
instance Generic GetShardIteratorResponse
instance Show GetShardIteratorExceptions
instance Read GetShardIteratorExceptions
instance Eq GetShardIteratorExceptions
instance Ord GetShardIteratorExceptions
instance Enum GetShardIteratorExceptions
instance Bounded GetShardIteratorExceptions
instance Generic GetShardIteratorExceptions
instance Datatype D1GetShardIterator
instance Constructor C1_0GetShardIterator
instance Selector S1_0_0GetShardIterator
instance Selector S1_0_1GetShardIterator
instance Selector S1_0_2GetShardIterator
instance Selector S1_0_3GetShardIterator
instance Datatype D1GetShardIteratorResponse
instance Constructor C1_0GetShardIteratorResponse
instance Selector S1_0_0GetShardIteratorResponse
instance Datatype D1GetShardIteratorExceptions
instance Constructor C1_0GetShardIteratorExceptions
instance Constructor C1_1GetShardIteratorExceptions
instance Constructor C1_2GetShardIteratorExceptions
instance NFData GetShardIteratorExceptions
instance AsMemoryResponse GetShardIteratorResponse
instance Transaction GetShardIterator GetShardIteratorResponse
instance SignQuery GetShardIterator
instance ResponseConsumer r GetShardIteratorResponse
instance FromJSON GetShardIteratorResponse
instance NFData GetShardIteratorResponse
instance ToJSON GetShardIterator
instance NFData GetShardIterator


-- | <i>API Version: 2013-12-02</i>
--   
--   This operation returns an array of the names of all the streams that
--   are associated with the AWS account making the ListStreams request. A
--   given AWS account can have many streams active at one time.
--   
--   The number of streams may be too large to return from a single call to
--   ListStreams. You can limit the number of returned streams using the
--   Limit parameter. If you do not specify a value for the Limit
--   parameter, Amazon Kinesis uses the default limit, which is currently
--   10.
--   
--   You can detect if there are more streams available to list by using
--   the HasMoreStreams flag from the returned output. If there are more
--   streams available, you can request more streams by using the name of
--   the last stream returned by the ListStreams request in the
--   ExclusiveStartStreamName parameter in a subsequent request to
--   ListStreams. The group of stream names returned by the subsequent
--   request is then added to the list. You can continue this process until
--   all the stream names have been collected in the list.
--   
--   ListStreams has a limit of 5 transactions per second per account.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/2013-12-02/APIReference/API_ListStreams.html</a>
module Aws.Kinesis.Commands.ListStreams
data ListStreams
ListStreams :: !(Maybe StreamName) -> !(Maybe Int) -> ListStreams

-- | The name of the stream to start the list with.
listStreamsExclusiveStartStreamName :: ListStreams -> !(Maybe StreamName)

-- | The maximum number of streams to list.
listStreamsLimit :: ListStreams -> !(Maybe Int)
data ListStreamsResponse
ListStreamsResponse :: !Bool -> ![StreamName] -> ListStreamsResponse

-- | If set to true, there are more streams available to list.
listStreamsResHasMoreStreams :: ListStreamsResponse -> !Bool

-- | The names of the streams that are associated with the AWS account
--   making the ListStreams request.
listStreamsResStreamNames :: ListStreamsResponse -> ![StreamName]
data ListStreamsExceptions

-- | <i>Code 400</i>
ListStreamsLimitExceededException :: ListStreamsExceptions
instance Typeable ListStreams
instance Typeable ListStreamsResponse
instance Typeable ListStreamsExceptions
instance Show ListStreams
instance Read ListStreams
instance Eq ListStreams
instance Ord ListStreams
instance Generic ListStreams
instance Show ListStreamsResponse
instance Read ListStreamsResponse
instance Eq ListStreamsResponse
instance Ord ListStreamsResponse
instance Generic ListStreamsResponse
instance Show ListStreamsExceptions
instance Read ListStreamsExceptions
instance Eq ListStreamsExceptions
instance Ord ListStreamsExceptions
instance Enum ListStreamsExceptions
instance Bounded ListStreamsExceptions
instance Generic ListStreamsExceptions
instance Datatype D1ListStreams
instance Constructor C1_0ListStreams
instance Selector S1_0_0ListStreams
instance Selector S1_0_1ListStreams
instance Datatype D1ListStreamsResponse
instance Constructor C1_0ListStreamsResponse
instance Selector S1_0_0ListStreamsResponse
instance Selector S1_0_1ListStreamsResponse
instance Datatype D1ListStreamsExceptions
instance Constructor C1_0ListStreamsExceptions
instance NFData ListStreamsExceptions
instance IteratedTransaction ListStreams ListStreamsResponse
instance ListResponse ListStreamsResponse StreamName
instance AsMemoryResponse ListStreamsResponse
instance Transaction ListStreams ListStreamsResponse
instance SignQuery ListStreams
instance ResponseConsumer r ListStreamsResponse
instance FromJSON ListStreamsResponse
instance NFData ListStreamsResponse
instance ToJSON ListStreams
instance NFData ListStreams


-- | <i>API Version: 2013-12-02</i>
--   
--   This operation merges two adjacent shards in a stream and combines
--   them into a single shard to reduce the stream's capacity to ingest and
--   transport data. Two shards are considered adjacent if the union of the
--   hash key ranges for the two shards form a contiguous set with no gaps.
--   For example, if you have two shards, one with a hash key range of
--   276...381 and the other with a hash key range of 382...454, then you
--   could merge these two shards into a single shard that would have a
--   hash key range of 276...454. After the merge, the single child shard
--   receives data for all hash key values covered by the two parent
--   shards.
--   
--   MergeShards is called when there is a need to reduce the overall
--   capacity of a stream because of excess capacity that is not being
--   used. The operation requires that you specify the shard to be merged
--   and the adjacent shard for a given stream. For more information about
--   merging shards, see the Amazon Kinesis Developer Guide.
--   
--   If the stream is in the ACTIVE state, you can call MergeShards. If a
--   stream is in CREATING or UPDATING or DELETING states, then Amazon
--   Kinesis returns a ResourceInUseException. If the specified stream does
--   not exist, Amazon Kinesis returns a ResourceNotFoundException.
--   
--   You can use the DescribeStream operation to check the state of the
--   stream, which is returned in StreamStatus.
--   
--   MergeShards is an asynchronous operation. Upon receiving a MergeShards
--   request, Amazon Kinesis immediately returns a response and sets the
--   StreamStatus to UPDATING. After the operation is completed, Amazon
--   Kinesis sets the StreamStatus to ACTIVE. Read and write operations
--   continue to work while the stream is in the UPDATING state.
--   
--   You use the DescribeStream operation to determine the shard IDs that
--   are specified in the MergeShards request.
--   
--   If you try to operate on too many streams in parallel using
--   CreateStream, DeleteStream, MergeShards or SplitShard, you will
--   receive a LimitExceededException.
--   
--   MergeShards has limit of 5 transactions per second per account.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/2013-12-02/APIReference/API_MergeShards.html</a>
module Aws.Kinesis.Commands.MergeShards
data MergeShards
MergeShards :: !ShardId -> !ShardId -> !StreamName -> MergeShards

-- | The shard ID of the adjacent shard for the merge.
mergeShardsAdjacentShardToMerge :: MergeShards -> !ShardId

-- | The shard ID of the shard to combine with the adjacent shard for the
--   merge.
mergeShardsShardToMerge :: MergeShards -> !ShardId

-- | The name of the stream for the merge.
mergeShardsStreamName :: MergeShards -> !StreamName
data MergeShardsResponse
MergeShardsResponse :: MergeShardsResponse
data MergeShardsExceptions

-- | <i>Code 400</i>
MergeShardsInvalidArgumentException :: MergeShardsExceptions

-- | <i>Code 400</i>
MergeShardsLimitExceededException :: MergeShardsExceptions

-- | <i>Code 400</i>
MergeShardsResourceInUseException :: MergeShardsExceptions

-- | <i>Code 400</i>
MergeShardsResourceNotFoundException :: MergeShardsExceptions
instance Typeable MergeShards
instance Typeable MergeShardsResponse
instance Typeable MergeShardsExceptions
instance Show MergeShards
instance Read MergeShards
instance Eq MergeShards
instance Ord MergeShards
instance Generic MergeShards
instance Show MergeShardsResponse
instance Read MergeShardsResponse
instance Eq MergeShardsResponse
instance Ord MergeShardsResponse
instance Generic MergeShardsResponse
instance Show MergeShardsExceptions
instance Read MergeShardsExceptions
instance Eq MergeShardsExceptions
instance Ord MergeShardsExceptions
instance Enum MergeShardsExceptions
instance Bounded MergeShardsExceptions
instance Generic MergeShardsExceptions
instance Datatype D1MergeShards
instance Constructor C1_0MergeShards
instance Selector S1_0_0MergeShards
instance Selector S1_0_1MergeShards
instance Selector S1_0_2MergeShards
instance Datatype D1MergeShardsResponse
instance Constructor C1_0MergeShardsResponse
instance Datatype D1MergeShardsExceptions
instance Constructor C1_0MergeShardsExceptions
instance Constructor C1_1MergeShardsExceptions
instance Constructor C1_2MergeShardsExceptions
instance Constructor C1_3MergeShardsExceptions
instance NFData MergeShardsExceptions
instance AsMemoryResponse MergeShardsResponse
instance Transaction MergeShards MergeShardsResponse
instance SignQuery MergeShards
instance FromJSON MergeShardsResponse
instance ResponseConsumer r MergeShardsResponse
instance NFData MergeShardsResponse
instance ToJSON MergeShards
instance NFData MergeShards


-- | <i>API Version: 2013-12-02</i>
--   
--   This operation puts a data record into an Amazon Kinesis stream from a
--   producer. This operation must be called to send data from the producer
--   into the Amazon Kinesis stream for real-time ingestion and subsequent
--   processing. The PutRecord operation requires the name of the stream
--   that captures, stores, and transports the data; a partition key; and
--   the data blob itself. The data blob could be a segment from a log
--   file, geographic/location data, website clickstream data, or any other
--   data type.
--   
--   The partition key is used to distribute data across shards. Amazon
--   Kinesis segregates the data records that belong to a data stream into
--   multiple shards, using the partition key associated with each data
--   record to determine which shard a given data record belongs to.
--   
--   Partition keys are Unicode strings, with a maximum length limit of 256
--   bytes. An MD5 hash function is used to map partition keys to 128-bit
--   integer values and to map associated data records to shards using the
--   hash key ranges of the shards. You can override hashing the partition
--   key to determine the shard by explicitly specifying a hash value using
--   the ExplicitHashKey parameter. For more information, see the Amazon
--   Kinesis Developer Guide.
--   
--   PutRecord returns the shard ID of where the data record was placed and
--   the sequence number that was assigned to the data record.
--   
--   Sequence numbers generally increase over time. To guarantee strictly
--   increasing ordering, use the SequenceNumberForOrdering parameter. For
--   more information, see the Amazon Kinesis Developer Guide.
--   
--   If a PutRecord request cannot be processed because of insufficient
--   provisioned throughput on the shard involved in the request, PutRecord
--   throws ProvisionedThroughputExceededException.
--   
--   Data records are accessible for only 24 hours from the time that they
--   are added to an Amazon Kinesis stream.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/2013-12-02/APIReference/API_PutRecord.html</a>
module Aws.Kinesis.Commands.PutRecord
data PutRecord
PutRecord :: !ByteString -> !(Maybe PartitionHash) -> !PartitionKey -> !(Maybe SequenceNumber) -> !StreamName -> PutRecord

-- | The data blob to put into the record. The maximum size of the data
--   blob is 50 kilobytes (KB)
putRecordData :: PutRecord -> !ByteString

-- | The hash value used to explicitly determine the shard the data record
--   is assigned to by overriding the partition key hash.
--   
--   FIXME the specification is rather vague about the precise encoding of
--   this value. The default is to compute it as an MD5 hash of the
--   partition key. The API reference describes it as an Int128. However,
--   it is not clear how the result of the hash function is encoded
--   (big-endian or small endian, word size?) and how it is serialized to
--   text, which is the type in the JSON serialization.
putRecordExplicitHashKey :: PutRecord -> !(Maybe PartitionHash)

-- | Determines which shard in the stream the data record is assigned to.
putRecordPartitionKey :: PutRecord -> !PartitionKey

-- | Guarantees strictly increasing sequence numbers, for puts from the
--   same client and to the same partition key. Usage: set the
--   SequenceNumberForOrdering of record n to the sequence number of record
--   n-1 (as returned in the PutRecordResult when putting record n-1). If
--   this parameter is not set, records will be coarsely ordered based on
--   arrival time.
putRecordSequenceNumberForOrdering :: PutRecord -> !(Maybe SequenceNumber)

-- | The name of the stream to put the data record into.
putRecordStreamName :: PutRecord -> !StreamName
data PutRecordResponse
PutRecordResponse :: !SequenceNumber -> !ShardId -> PutRecordResponse

-- | The sequence number identifier that was assigned to the put data
--   record. The sequence number for the record is unique across all
--   records in the stream. A sequence number is the identifier associated
--   with every record put into the stream.
putRecordResSequenceNumber :: PutRecordResponse -> !SequenceNumber

-- | The shard ID of the shard where the data record was placed.
putRecordResShardId :: PutRecordResponse -> !ShardId
data PutRecordExceptions

-- | <i>Code 400</i>
PutRecordInvalidArgumentException :: PutRecordExceptions

-- | <i>Code 400</i>
PutRecordProvisionedThroughputExceededException :: PutRecordExceptions

-- | <i>Code 400</i>
PutRecordResourceNotFoundException :: PutRecordExceptions
instance Typeable PutRecord
instance Typeable PutRecordResponse
instance Typeable PutRecordExceptions
instance Show PutRecord
instance Read PutRecord
instance Eq PutRecord
instance Ord PutRecord
instance Generic PutRecord
instance Show PutRecordResponse
instance Read PutRecordResponse
instance Eq PutRecordResponse
instance Ord PutRecordResponse
instance Generic PutRecordResponse
instance Show PutRecordExceptions
instance Read PutRecordExceptions
instance Eq PutRecordExceptions
instance Ord PutRecordExceptions
instance Enum PutRecordExceptions
instance Bounded PutRecordExceptions
instance Generic PutRecordExceptions
instance Datatype D1PutRecord
instance Constructor C1_0PutRecord
instance Selector S1_0_0PutRecord
instance Selector S1_0_1PutRecord
instance Selector S1_0_2PutRecord
instance Selector S1_0_3PutRecord
instance Selector S1_0_4PutRecord
instance Datatype D1PutRecordResponse
instance Constructor C1_0PutRecordResponse
instance Selector S1_0_0PutRecordResponse
instance Selector S1_0_1PutRecordResponse
instance Datatype D1PutRecordExceptions
instance Constructor C1_0PutRecordExceptions
instance Constructor C1_1PutRecordExceptions
instance Constructor C1_2PutRecordExceptions
instance NFData PutRecordExceptions
instance AsMemoryResponse PutRecordResponse
instance Transaction PutRecord PutRecordResponse
instance SignQuery PutRecord
instance ResponseConsumer r PutRecordResponse
instance FromJSON PutRecordResponse
instance NFData PutRecordResponse
instance ToJSON PutRecord
instance NFData PutRecord


-- | <i>API Version: 2013-12-02</i>
--   
--   Puts (writes) multiple data records from a producer into an Amazon
--   Kinesis stream in a single call (also referred to as a PutRecords
--   request). Use this operation to send data from a data producer into
--   the Amazon Kinesis stream for real-time ingestion and processing. Each
--   shard can support up to 1000 records written per second, up to a
--   maximum total of 1 MB data written per second.
--   
--   You must specify the name of the stream that captures, stores, and
--   transports the data; and an array of request Records, with each record
--   in the array requiring a partition key and data blob.
--   
--   The data blob can be any type of data; for example, a segment from a
--   log file, geographic/location data, website clickstream data, and so
--   on.
--   
--   The partition key is used by Amazon Kinesis as input to a hash
--   function that maps the partition key and associated data to a specific
--   shard. An MD5 hash function is used to map partition keys to 128-bit
--   integer values and to map associated data records to shards. As a
--   result of this hashing mechanism, all data records with the same
--   partition key map to the same shard within the stream. For more
--   information, see Partition Key in the Amazon Kinesis Developer Guide.
--   
--   Each record in the Records array may include an optional parameter,
--   ExplicitHashKey, which overrides the partition key to shard mapping.
--   This parameter allows a data producer to determine explicitly the
--   shard where the record is stored. For more information, see Adding
--   Multiple Records with PutRecords in the Amazon Kinesis Developer
--   Guide.
--   
--   The PutRecords response includes an array of response Records. Each
--   record in the response array directly correlates with a record in the
--   request array using natural ordering, from the top to the bottom of
--   the request and response. The response Records array always includes
--   the same number of records as the request array.
--   
--   The response Records array includes both successfully and
--   unsuccessfully processed records. Amazon Kinesis attempts to process
--   all records in each PutRecords request. A single record failure does
--   not stop the processing of subsequent records.
--   
--   A successfully-processed record includes ShardId and SequenceNumber
--   values. The ShardId parameter identifies the shard in the stream where
--   the record is stored. The SequenceNumber parameter is an identifier
--   assigned to the put record, unique to all records in the stream.
--   
--   An unsuccessfully-processed record includes ErrorCode and ErrorMessage
--   values. ErrorCode reflects the type of error and can be one of the
--   following values: ProvisionedThroughputExceededException or
--   InternalFailure. ErrorMessage provides more detailed information about
--   the ProvisionedThroughputExceededException exception including the
--   account ID, stream name, and shard ID of the record that was
--   throttled.
--   
--   Data records are accessible for only 24 hours from the time that they
--   are added to an Amazon Kinesis stream.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecords.html</a>
module Aws.Kinesis.Commands.PutRecords

-- | The body of the <a>PutRecords</a> request.
data PutRecords
PutRecords :: ![PutRecordsRequestEntry] -> !StreamName -> PutRecords

-- | The records associated with the request. Minimum of 1 item, maximum
--   500.
putRecordsRecords :: PutRecords -> ![PutRecordsRequestEntry]

-- | The stream name associated with the request.
putRecordsStreamName :: PutRecords -> !StreamName

-- | Represents a single record in a <a>PutRecords</a> request.
data PutRecordsRequestEntry
PutRecordsRequestEntry :: !ByteString -> !(Maybe PartitionHash) -> !PartitionKey -> PutRecordsRequestEntry

-- | The data blob to be put into the record. The maximum size of the data
--   blob is 50 kilobytes.
putRecordsRequestEntryData :: PutRecordsRequestEntry -> !ByteString

-- | The hash value used to determine explicitly the shard that the data
--   record is assigned to by overriding the partition key hash.
putRecordsRequestEntryExplicitHashKey :: PutRecordsRequestEntry -> !(Maybe PartitionHash)

-- | Determines which shard in the stream the data record is assigned to.
--   All data records with the same partition key map to the same shard.
putRecordsRequestEntryPartitionKey :: PutRecordsRequestEntry -> !PartitionKey
data PutRecordsResponse
PutRecordsResponse :: !Int -> ![PutRecordsResponseRecord] -> PutRecordsResponse

-- | The number of unsuccessfully processed records in a <a>PutRecords</a>
--   request.
putRecordsResponseFailedRecordCount :: PutRecordsResponse -> !Int

-- | An array of successfully and unsuccessfully processed records,
--   correlated with the request by natural ordering.
putRecordsResponseRecords :: PutRecordsResponse -> ![PutRecordsResponseRecord]

-- | Represents the result for a single record in a
--   <a>PutRecordsResponse</a>.
data PutRecordsResponseRecord
PutRecordsResponseRecord :: !(Maybe Text) -> !(Maybe Text) -> !(Maybe SequenceNumber) -> !(Maybe ShardId) -> PutRecordsResponseRecord

-- | If the request did not succeed, an error code will be provided.
putRecordsResponseRecordErrorCode :: PutRecordsResponseRecord -> !(Maybe Text)

-- | If the request did not succeed, an error message will be provided.
putRecordsResponseRecordErrorMessage :: PutRecordsResponseRecord -> !(Maybe Text)

-- | The sequence number assigned to the (sucessfully processed) record.
putRecordsResponseRecordSequenceNumber :: PutRecordsResponseRecord -> !(Maybe SequenceNumber)

-- | The shard ID assigned to the (successfully processed) record.
putRecordsResponseRecordShardId :: PutRecordsResponseRecord -> !(Maybe ShardId)
instance Typeable PutRecordsRequestEntry
instance Typeable PutRecords
instance Typeable PutRecordsResponseRecord
instance Typeable PutRecordsResponse
instance Show PutRecordsRequestEntry
instance Read PutRecordsRequestEntry
instance Eq PutRecordsRequestEntry
instance Ord PutRecordsRequestEntry
instance Generic PutRecordsRequestEntry
instance Show PutRecords
instance Read PutRecords
instance Eq PutRecords
instance Ord PutRecords
instance Generic PutRecords
instance Show PutRecordsResponseRecord
instance Read PutRecordsResponseRecord
instance Eq PutRecordsResponseRecord
instance Ord PutRecordsResponseRecord
instance Generic PutRecordsResponseRecord
instance Show PutRecordsResponse
instance Read PutRecordsResponse
instance Eq PutRecordsResponse
instance Ord PutRecordsResponse
instance Generic PutRecordsResponse
instance Datatype D1PutRecordsRequestEntry
instance Constructor C1_0PutRecordsRequestEntry
instance Selector S1_0_0PutRecordsRequestEntry
instance Selector S1_0_1PutRecordsRequestEntry
instance Selector S1_0_2PutRecordsRequestEntry
instance Datatype D1PutRecords
instance Constructor C1_0PutRecords
instance Selector S1_0_0PutRecords
instance Selector S1_0_1PutRecords
instance Datatype D1PutRecordsResponseRecord
instance Constructor C1_0PutRecordsResponseRecord
instance Selector S1_0_0PutRecordsResponseRecord
instance Selector S1_0_1PutRecordsResponseRecord
instance Selector S1_0_2PutRecordsResponseRecord
instance Selector S1_0_3PutRecordsResponseRecord
instance Datatype D1PutRecordsResponse
instance Constructor C1_0PutRecordsResponse
instance Selector S1_0_0PutRecordsResponse
instance Selector S1_0_1PutRecordsResponse
instance SignQuery PutRecords
instance AsMemoryResponse PutRecordsResponse
instance ResponseConsumer r PutRecordsResponse
instance Transaction PutRecords PutRecordsResponse
instance FromJSON PutRecordsResponse
instance FromJSON PutRecordsResponseRecord
instance ToJSON PutRecords
instance ToJSON PutRecordsRequestEntry
instance NFData PutRecordsResponse
instance NFData PutRecordsResponseRecord
instance NFData PutRecords
instance NFData PutRecordsRequestEntry


-- | <i>API Version: 2013-03-31</i> This operation splits a shard into two
--   new shards in the stream, to increase the stream's capacity to ingest
--   and transport data. SplitShard is called when there is a need to
--   increase the overall capacity of stream because of an expected
--   increase in the volume of data records being ingested.
--   
--   SplitShard can also be used when a given shard appears to be
--   approaching its maximum utilization, for example, when the set of
--   producers sending data into the specific shard are suddenly sending
--   more than previously anticipated. You can also call the SplitShard
--   operation to increase stream capacity, so that more Amazon Kinesis
--   applications can simultaneously read data from the stream for
--   real-time processing.
--   
--   The SplitShard operation requires that you specify the shard to be
--   split and the new hash key, which is the position in the shard where
--   the shard gets split in two. In many cases, the new hash key might
--   simply be the average of the beginning and ending hash key, but it can
--   be any hash key value in the range being mapped into the shard. For
--   more information about splitting shards, see the Amazon Kinesis
--   Developer Guide.
--   
--   You can use the DescribeStream operation to determine the shard ID and
--   hash key values for the ShardToSplit and NewStartingHashKey parameters
--   that are specified in the SplitShard request.
--   
--   SplitShard is an asynchronous operation. Upon receiving a SplitShard
--   request, Amazon Kinesis immediately returns a response and sets the
--   stream status to UPDATING. After the operation is completed, Amazon
--   Kinesis sets the stream status to ACTIVE. Read and write operations
--   continue to work while the stream is in the UPDATING state.
--   
--   You can use DescribeStream to check the status of the stream, which is
--   returned in StreamStatus. If the stream is in the ACTIVE state, you
--   can call SplitShard. If a stream is in CREATING or UPDATING or
--   DELETING states, then Amazon Kinesis returns a ResourceInUseException.
--   
--   If the specified stream does not exist, Amazon Kinesis returns a
--   ResourceNotFoundException. If you try to create more shards than are
--   authorized for your account, you receive a LimitExceededException.
--   
--   Note: The default limit for an AWS account is 10 shards per stream. If
--   you need to create a stream with more than 10 shards, contact AWS
--   Support to increase the limit on your account.
--   
--   If you try to operate on too many streams in parallel using
--   CreateStream, DeleteStream, MergeShards or SplitShard, you will
--   receive a LimitExceededException.
--   
--   SplitShard has limit of 5 transactions per second per account.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/2013-12-02/APIReference/API_SplitShard.html</a>
module Aws.Kinesis.Commands.SplitShard
data SplitShard
SplitShard :: !PartitionHash -> !ShardId -> !StreamName -> SplitShard

-- | A hash key value for the starting hash key of one of the child shards
--   created by the split. The hash key range for a given shard constitutes
--   a set of ordered contiguous positive integers. The value for
--   NewStartingHashKey must be in the range of hash keys being mapped into
--   the shard. The NewStartingHashKey hash key value and all higher hash
--   key values in hash key range are distributed to one of the child
--   shards. All the lower hash key values in the range are distributed to
--   the other child shard.
splitShardNewStartingHashKey :: SplitShard -> !PartitionHash

-- | The shard ID of the shard to split.
splitShardShardToSplit :: SplitShard -> !ShardId

-- | The name of the stream for the shard split.
splitShardStreamName :: SplitShard -> !StreamName
data SplitShardResponse
SplitShardResponse :: SplitShardResponse
data SplitShardExceptions

-- | <i>Code 400</i>
SplitShardInvalidArgumentException :: SplitShardExceptions

-- | <i>Code 400</i>
SplitShardLimitExceededException :: SplitShardExceptions

-- | <i>Code 400</i>
SplitShardResourceInUseException :: SplitShardExceptions

-- | <i>Code 400</i>
SplitShardResourceNotFoundException :: SplitShardExceptions
instance Typeable SplitShard
instance Typeable SplitShardResponse
instance Typeable SplitShardExceptions
instance Show SplitShard
instance Read SplitShard
instance Eq SplitShard
instance Ord SplitShard
instance Generic SplitShard
instance Show SplitShardResponse
instance Read SplitShardResponse
instance Eq SplitShardResponse
instance Ord SplitShardResponse
instance Generic SplitShardResponse
instance Show SplitShardExceptions
instance Read SplitShardExceptions
instance Eq SplitShardExceptions
instance Ord SplitShardExceptions
instance Enum SplitShardExceptions
instance Bounded SplitShardExceptions
instance Generic SplitShardExceptions
instance Datatype D1SplitShard
instance Constructor C1_0SplitShard
instance Selector S1_0_0SplitShard
instance Selector S1_0_1SplitShard
instance Selector S1_0_2SplitShard
instance Datatype D1SplitShardResponse
instance Constructor C1_0SplitShardResponse
instance Datatype D1SplitShardExceptions
instance Constructor C1_0SplitShardExceptions
instance Constructor C1_1SplitShardExceptions
instance Constructor C1_2SplitShardExceptions
instance Constructor C1_3SplitShardExceptions
instance NFData SplitShardExceptions
instance AsMemoryResponse SplitShardResponse
instance Transaction SplitShard SplitShardResponse
instance SignQuery SplitShard
instance FromJSON SplitShardResponse
instance ResponseConsumer r SplitShardResponse
instance NFData SplitShardResponse
instance ToJSON SplitShard
instance NFData SplitShard


-- | <i>API Version: 2013-12-02</i>
--   
--   <a>http://docs.aws.amazon.com/kinesis/2013-12-02/APIReference</a>
--   
--   The types and functions of this package are supposed to be use with
--   the machinery from the <a>aws package</a>.
--   
--   Here is a very simple example for making a single request to AWS
--   Kinesis.
--   
--   <pre>
--   import Aws
--   import Aws.Core
--   import Aws.General
--   import Aws.Kinesis
--   import Data.IORef
--   
--   cfg &lt;- Aws.baseConfiguration
--   creds &lt;- Credentials "access-key-id" "secret-access-key" `fmap` newIORef []
--   let kinesisCfg = KinesisConfiguration UsWest2
--   simpleAws cfg kinesisCfg $ ListStreams Nothing Nothing
--   </pre>
--   
--   In order to run the example you must replace <tt>"access-key-id"</tt>
--   and <tt>"secret-access-key"</tt> with the respective values for your
--   AWS account.
module Aws.Kinesis
