-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | This module is for unsupervised, supervised, and semi-supervised
--   classification tasks. It is in desperate need of documentation and
--   refactoring.
@package HLearn-classification
@version 1.0.1.3

module HLearn.Models.Classifiers.Centroid
data Centroid vector
Centroid :: Ring vector -> vector -> Centroid vector
c_numdp :: Centroid vector -> Ring vector
vector :: Centroid vector -> vector
instance (Ord (Ring vector), Ord vector) => Ord (Centroid vector)
instance (Eq (Ring vector), Eq vector) => Eq (Centroid vector)
instance (Read (Ring vector), Read vector) => Read (Centroid vector)
instance (Show (Ring vector), Show vector) => Show (Centroid vector)
instance (HasRing vector, Monoid vector) => HomTrainer (Centroid vector)
instance HasRing vector => NumDP (Centroid vector)
instance (MetricSpace vector, VectorSpace vector) => MetricSpace (Centroid vector)
instance HasRing vector => HasRing (Centroid vector)
instance (HasRing vector, Monoid vector) => Monoid (Centroid vector)

module HLearn.Models.Classifiers.Common
indicator :: Num a => Bool -> a
bool2num :: Num a => Bool -> a
num2bool :: (Ord a, Num a) => a -> Bool
class Labeled dp where type family Label dp type family Attributes dp
getLabel :: Labeled dp => dp -> Label dp
getAttributes :: Labeled dp => dp -> Attributes dp
class Labeled (Datapoint model) => ProbabilityClassifier model where type family ResultDistribution model
probabilityClassify :: ProbabilityClassifier model => model -> Attributes (Datapoint model) -> ResultDistribution model
class MarginClassifier model
margin :: MarginClassifier model => model -> Attributes (Datapoint model) -> (Ring model, Label (Datapoint model))
class Labeled (Datapoint model) => Classifier model
classify :: Classifier model => model -> Attributes (Datapoint model) -> Label (Datapoint model)

-- | this is a default instance that any instance of Classifier should
--   satisfy if it is also an instance of ProbabilityClassifier instance (
--   Label (Datapoint model) ~ Datapoint (ResultDistribution model) , Mean
--   (ResultDistribution model) , ProbabilityClassifier model ) =&gt;
--   Classifier model where classify model dp = mean $ probabilityClassify
--   model dp
--   
--   Regression is classification where the class labels are (isomorphic
--   to) real numbers. The constraints could probably be better specified,
--   but they're close enough for now.
class (Classifier model, Ring model ~ Label (Datapoint model)) => Regression model
instance (Classifier model, Ring model ~ Label (Datapoint model)) => Regression model
instance Labeled (label, attr)


-- | Bayesian classification is one of the standard algorithms in machine
--   learning. Typically, we make the naive bayes assumption of assuming
--   that none of our attributes are correlated. The Bayes data type,
--   however, is capable of both naive and non-naive assumptions.
module HLearn.Models.Classifiers.Bayes
data Bayes label dist
instance Read dist => Read (Bayes label dist)
instance Show dist => Show (Bayes label dist)
instance Eq dist => Eq (Bayes label dist)
instance Ord dist => Ord (Bayes label dist)
instance Monoid dist => Monoid (Bayes label dist)
instance Abelian dist => Abelian (Bayes label dist)
instance Group dist => Group (Bayes label dist)
instance (ProbabilityClassifier (Bayes labelLens dist), Label (Datapoint (Bayes labelLens dist)) ~ Datapoint (Margin labelLens dist), Mean (Margin labelLens dist)) => Classifier (Bayes labelLens dist)
instance (Margin labelLens dist ~ Categorical label prob, Ord label, Ord prob, Fractional prob, label ~ Label (Datapoint dist), prob ~ Probability (MarginalizeOut labelLens dist), Labeled (Datapoint dist), Datapoint (MarginalizeOut labelLens dist) ~ Attributes (Datapoint dist), PDF (MarginalizeOut labelLens dist), PDF (Margin labelLens dist), Marginalize labelLens dist) => ProbabilityClassifier (Bayes labelLens dist)
instance Probabilistic (Bayes labelLens dist)
instance (Monoid dist, HomTrainer dist) => HomTrainer (Bayes label dist)

module HLearn.Models.Classifiers.NearestNeighbor
newtype NaiveNN container label dp
NaiveNN :: container (label, dp) -> NaiveNN container label dp
getcontainer :: NaiveNN container label dp -> container (label, dp)
neighborList :: (Foldable container, MetricSpace dp, Ord (Ring dp)) => dp -> NaiveNN container label dp -> [(label, dp)]
instance Show (container (label, dp)) => Show (NaiveNN container label dp)
instance (Ord label, label ~ Label (label, dp), Foldable container, MetricSpace dp, Ord (Ring dp)) => ProbabilityClassifier (NaiveNN container label dp)
instance Probabilistic (NaiveNN container label dp)
instance (Applicative container, Monoid (container (label, dp))) => HomTrainer (NaiveNN container label dp)
instance Monoid (container (label, dp)) => Monoid (NaiveNN container label dp)

module HLearn.Models.Classifiers.Perceptron
data Perceptron label dp
Perceptron :: Map label (Centroid dp) -> Perceptron label dp
centroids :: Perceptron label dp -> Map label (Centroid dp)
instance (Show (Centroid dp), Show label) => Show (Perceptron label dp)
instance (Ord label, Ord (Ring dp), MetricSpace (Centroid dp), Monoid dp, HasRing dp) => ProbabilityClassifier (Perceptron label dp)
instance HasRing dp => Probabilistic (Perceptron label dp)
instance (Monoid dp, HasRing dp, Ord label) => HomTrainer (Perceptron label dp)
instance (Ord label, Monoid (Centroid dp)) => Monoid (Perceptron label dp)

module HLearn.Models.Classifiers.Experimental.Boosting.FiniteBoost
class FiniteBoostParams p where type family BaseModel p
getModelL :: FiniteBoostParams p => p -> [BaseModel p]
numModels :: FiniteBoostParams p => p -> Int
newtype FiniteBoost params
FiniteBoost :: Vector (Ring (BaseModel params)) -> FiniteBoost params
weights :: FiniteBoost params -> Vector (Ring (BaseModel params))
instance (ProbabilityClassifier (BaseModel params), Ring (BaseModel params) ~ Ring (ResultDistribution (FiniteBoost params)), Module (ResultDistribution (FiniteBoost params)), FiniteBoostParams params) => ProbabilityClassifier (FiniteBoost params)
instance (ProbabilityClassifier (BaseModel params), HomTrainer (BaseModel params), FiniteBoostParams params, HasRing (BaseModel params), Ring (BaseModel params) ~ Probability (ResultDistribution (BaseModel params)), Datapoint (ResultDistribution (BaseModel params)) ~ Label (Datapoint (BaseModel params)), PDF (ResultDistribution (BaseModel params))) => HomTrainer (FiniteBoost params)
instance (FiniteBoostParams params, HasRing (BaseModel params)) => Group (FiniteBoost params)
instance (FiniteBoostParams params, HasRing (BaseModel params)) => HasRing (FiniteBoost params)
instance (FiniteBoostParams params, HasRing (BaseModel params)) => Monoid (FiniteBoost params)

module HLearn.Models.Classifiers.Experimental.Boosting.MonoidBoost
data MonoidBoost (k :: Nat) basemodel
MonoidBoost :: Seq (Datapoint basemodel) -> Seq basemodel -> Seq (Ring basemodel) -> Int -> MonoidBoost basemodel
dataL :: MonoidBoost basemodel -> Seq (Datapoint basemodel)
modelL :: MonoidBoost basemodel -> Seq basemodel
weightL :: MonoidBoost basemodel -> Seq (Ring basemodel)
boost_numdp :: MonoidBoost basemodel -> Int
testassociativity :: IO ()
leave :: Int -> Seq a -> Seq a
instance (Ord (Datapoint basemodel), Ord (Ring basemodel), Ord basemodel) => Ord (MonoidBoost k basemodel)
instance (Eq (Datapoint basemodel), Eq (Ring basemodel), Eq basemodel) => Eq (MonoidBoost k basemodel)
instance (Show (Datapoint basemodel), Show (Ring basemodel), Show basemodel) => Show (MonoidBoost k basemodel)
instance (Read (Datapoint basemodel), Read (Ring basemodel), Read basemodel) => Read (MonoidBoost k basemodel)
instance (PlottableDistribution basemodel, Fractional (Probability basemodel)) => PlottableDistribution (MonoidBoost k basemodel)
instance (PDF basemodel, Fractional (Probability basemodel)) => PDF (MonoidBoost k basemodel)
instance (ProbabilityClassifier basemodel, Monoid (ResultDistribution basemodel)) => ProbabilityClassifier (MonoidBoost k basemodel)
instance Probabilistic (MonoidBoost k basemodel)
instance (SingI Nat k, HomTrainer basemodel) => HomTrainer (MonoidBoost k basemodel)
instance (HomTrainer basemodel, SingI Nat k) => Monoid (MonoidBoost k basemodel)
instance (HomTrainer basemodel, Arbitrary (Datapoint basemodel), SingI Nat k) => Arbitrary (MonoidBoost k basemodel)

module HLearn.Evaluation.CrossValidation

-- | This is the standard cross-validation technique for use with the
--   HomTrainer type class. It is asymptotically faster than standard
--   k-fold cross-validation (implemented with lame_crossvalidation), yet
--   is guaranteed to get the exact same answer.
crossvalidation :: (HomTrainer model, Monoid ret, Monoid (container (Datapoint model)), Partitionable container, PartitionableConstraint container (Datapoint model), Foldable container, Functor container) => container (Datapoint model) -> (model -> container (Datapoint model) -> ret) -> Int -> ret
type LossFunction model = model -> [Datapoint model] -> Double
leaveOneOut :: [dp] -> [[dp]]
folds :: Int -> [dp] -> [[dp]]
errorRate :: (Classifier model, Labeled (Datapoint model), Eq (Label (Datapoint model))) => LossFunction model
crossValidate :: (HomTrainer model, Eq (Datapoint model)) => [[Datapoint model]] -> LossFunction model -> Normal Double
crossValidate_monoid :: (HomTrainer model, Eq (Datapoint model)) => [[Datapoint model]] -> LossFunction model -> Normal Double
crossValidate_group :: (HomTrainer model, Group model) => [[Datapoint model]] -> LossFunction model -> Normal Double
listAllBut2 :: Monoid a => [a] -> [a]
listAllBut :: Monoid a => [a] -> [a]
genTestList :: Monoid a => [a] -> [(a, a)]

module HLearn.Evaluation.RSquared
rsquared :: (Floating (Ring model), NumDP model, Regression model) => model -> [Datapoint model] -> Ring model

module HLearn.Models.Regression.PowerLaw
data PowerLaw ring
PowerLaw :: !ring -> !ring -> !ring -> !ring -> !ring -> PowerLaw ring
n :: PowerLaw ring -> !ring
lnxlny :: PowerLaw ring -> !ring
lnx :: PowerLaw ring -> !ring
lnx2 :: PowerLaw ring -> !ring
lny :: PowerLaw ring -> !ring
data Coord ring
Coord :: ring -> ring -> Coord ring
x :: Coord ring -> ring
y :: Coord ring -> ring
dataset1 :: [Coord Double]
model1 :: PowerLaw Double
result1 :: Double
dataset2 :: [Coord Double]
model2 :: PowerLaw Double
result2 :: Double
instance Read ring => Read (PowerLaw ring)
instance Show ring => Show (PowerLaw ring)
instance Eq ring => Eq (PowerLaw ring)
instance Ord ring => Ord (PowerLaw ring)
instance Floating ring => Classifier (PowerLaw ring)
instance Floating ring => HomTrainer (PowerLaw ring)
instance Num ring => NumDP (PowerLaw ring)
instance Labeled (Coord ring)
instance Num ring => Module (PowerLaw ring)
instance Num ring => HasRing (PowerLaw ring)
instance Num ring => Group (PowerLaw ring)
instance Num ring => Abelian (PowerLaw ring)
instance Num ring => Monoid (PowerLaw ring)
instance NFData ring => NFData (PowerLaw ring)


-- | This file exports the most commonly used modules within
--   HLearn-classifiers. Most likely this is the only file you will have to
--   import.
module HLearn.Models.Classifiers
