-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A high level file watcher DSL
--   
--   Twitch is a monadic DSL and library for file watching. It conveniently
--   utilizes 'do' notation in the style of Shake and clay to expose the
--   functionality of the fsnotify cross-platform file system watcher.
--   
--   Here is an example that converts Markdown files to HTML and reloads
--   Safari whenever the input files change.
--   
--   <pre>
--   import Twitch
--   import Filesystem.Path.CurrentOS
--   
--   main = defaultMain $ do
--   "*.md"   |&gt; \filePath -&gt; system $ "pandoc -t html " ++ encodeString filePath
--   "*.html" |&gt; \_ -&gt; system $ "osascript refreshSafari.AppleScript"
--   </pre>
@package twitch
@version 0.1.6.1

module Twitch.InternalRule

-- | The actions that are run when file events are triggered
type Action = FilePath -> UTCTime -> IO ()

-- | The test function to determine if a event <a>Action</a> should get
--   fired
type FileTest = FilePath -> UTCTime -> Bool
data InternalRule
InternalRule :: String -> FileTest -> Action -> Action -> Action -> InternalRule

-- | A name for debugging mostly
name :: InternalRule -> String

-- | The test to determine if the rule actions should fire
fileTest :: InternalRule -> FileTest

-- | The action to run on Modify events
modify :: InternalRule -> Action

-- | The action to run on Add events
add :: InternalRule -> Action

-- | The action to run on Delete events
delete :: InternalRule -> Action
toInternalRule :: FilePath -> Rule -> Either RuleIssue InternalRule

-- | Configuration to run the file watcher
data Config
Config :: (Issue -> IO ()) -> [FilePath] -> WatchConfig -> Config

-- | A logger for the issues
logger :: Config -> Issue -> IO ()

-- | The directories to watch
dirs :: Config -> [FilePath]

-- | config for the file watcher
watchConfig :: Config -> WatchConfig

-- | A sum type for the various issues that can be logged
data Issue

-- | logged every time an event is fired
IEvent :: Event -> Issue

-- | logged every time an rule is fired
IRuleFired :: Event -> InternalRule -> Issue

-- | Retrieve the filePath of an Event
filePath :: Event -> FilePath

-- | Retrieve the time of an Event
time :: Event -> UTCTime

-- | Run the Rule action associated with the an event
fireRule :: Event -> InternalRule -> IO ()

-- | Test to see if the rule should fire and fire it
testAndFireRule :: Config -> Event -> InternalRule -> IO ()

-- | Start watching a directory, and run the rules on it.
setupRuleForDir :: Config -> WatchManager -> [InternalRule] -> FilePath -> IO ()

-- | Setup all of the directory watches using the rules
setupRules :: Config -> [InternalRule] -> IO WatchManager
instance Show Issue
instance Default Config
instance Show Config
instance Show InternalRule
instance Default InternalRule


-- | Twitch is a monadic DSL and library for file watching. It conveniently
--   utilizes 'do' notation in the style of <a>Shake</a> and <a>clay</a> to
--   expose the functionality of the <a>fsnotify</a> cross-platform file
--   system watcher.
--   
--   Here is an example that converts Markdown files to HTML and reloads
--   Safari whenever the input files change.
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings #-}
--   import Twitch 
--   import Filesystem.Path.CurrentOS
--   
--   main = defaultMain $ do
--     "*.md"   |&gt; \filePath -&gt; system $ "pandoc -t html " ++ encodeString filePath 
--     "*.html" |&gt; \_ -&gt; system $ "osascript refreshSafari.AppleScript"
--   </pre>
--   
--   Rules are specified in the <a>Dep</a> (for Dependency) monad. The
--   library takes advantage of the OverloadedStrings extension to create a
--   <a>Dep</a> value from a glob pattern.
--   
--   After creating a <a>Dep</a> value using a glob, event callbacks are
--   added using prefix or infix API.
--   
--   There are three types of events: 'add', 'modify' and 'delete'. In many
--   cases, the 'add' and 'modify' responses are the same, so an 'add and
--   modify' API is provided
--   
--   In the example above, an 'add and modify' callback was added to both
--   the "*.md" and "*.html" globs using the <a>|&gt;</a> operator.
--   
--   Although this is the common case, differing callbacks can be added
--   with <a>|+</a> (or <a>add</a>) and <a>|%</a> (or <a>modify</a>)
--   functions. Finally, delete callbacks are added with <a>|-</a> (of
--   <a>delete</a>).
--   
--   Here is a more complex usage example, handling all three events
--   separately.
--   
--   <pre>
--   handleHaskellFiles :: Dep 
--   handleHaskellFiles = "src/**/*.hs" |+ addToCabalFile |% reloadFile |- removeFromCabalFile
--   </pre>
--   
--   The glob above is also more complicated and incorporates a recursive
--   wildcard. For complete documentation on the glob syntax, consult the
--   <a>Glob</a> library's documentation.
--   
--   Since a command pattern is calling system commands with a file path, a
--   useful addition to twitch is the <a>file-command-qq</a> quasiquoter.
--   
--   Here is a slightly more complicated version the example from earlier,
--   using the FileCommand quasiquoter.
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings #-}
--   {-# LANGUAGE QuasiQuotes #-}
--   import Twitch 
--   import FileCommand
--   
--   main = defaultMain $ do
--     "*.md"    |&gt; [s|pandoc -t html -o$directory$basename-test.html $path|]
--     "*.html"  |&gt; [s|osascript refreshSafari.AppleScript|]
--   </pre>
module Twitch

-- | This is the key type of the package, it is where rules are
--   accumulated.
type Dep = DepM ()

-- | Simplest way to create a file watcher app. Set your main equal to
--   defaultMain and you are good to go. See the module documentation for
--   examples.
--   
--   The command line is parsed to make <a>Options</a> value. For more
--   information on the arguments that can be passed see the doc for
--   <a>Options</a> and the run the executable made with defaultMain with
--   the --help argument.
defaultMain :: Dep -> IO ()

-- | Add a 'add' callback ex.
--   
--   <pre>
--   "*.png" |+ addToManifest
--   </pre>
(|+) :: Dep -> (FilePath -> IO a) -> Dep

-- | Add a 'modify' callback ex.
--   
--   <pre>
--   "*.c" |% [s|gcc -o$directory$basename.o $path|]
--   </pre>
(|%) :: Dep -> (FilePath -> IO a) -> Dep

-- | Add a 'delete' callback ex.
--   
--   <pre>
--   "*.c" |- [s|gcc -o$directory$basename.o $path|]
--   </pre>
(|-) :: Dep -> (FilePath -> IO a) -> Dep

-- | Add the same callback for the 'add' and the 'modify' events. ex.
--   
--   <pre>
--   "*.md" |&gt; [s|pandoc -t html $path|]
--   </pre>
--   
--   Defined as: x <a>|&gt;</a> f = x <a>|+</a> f <a>|%</a> f
(|>) :: Dep -> (FilePath -> IO a) -> Dep

-- | Set the name of a rule. Useful for debugging when logging is enabled.
--   Rules names default to the glob pattern. ex.
--   
--   <pre>
--   "*.md" |&gt; [s|pandoc -t html $path|] |# "markdown to html"
--   </pre>
(|#) :: Dep -> String -> Dep

-- | Add a 'add' callback ex.
--   
--   <pre>
--   add addToManifest "*.png"
--   </pre>
add :: (FilePath -> IO a) -> Dep -> Dep

-- | Add a 'modify' callback ex.
--   
--   <pre>
--   mod [s|gcc -o$directory$basename.o $path|] "*.c"
--   </pre>
modify :: (FilePath -> IO a) -> Dep -> Dep

-- | Add a 'delete' callback ex.
--   
--   <pre>
--   delete [s|gcc -o$directory$basename.o $path|] "*.c"
--   </pre>
delete :: (FilePath -> IO a) -> Dep -> Dep

-- | Add the same callback for the 'add' and the 'modify' events. ex.
--   
--   <pre>
--   addModify [s|pandoc -t html $path|] "*.md" 
--   </pre>
addModify :: (FilePath -> IO a) -> Dep -> Dep

-- | Set the name of a rule. Useful for debugging when logging is enabled.
--   Rules names default to the glob pattern. ex.
--   
--   <pre>
--   name "markdown to html" $ addModify [s|pandoc -t html $path|] "*.md"
--   </pre>
name :: String -> Dep -> Dep
data DebounceType
DebounceDefault :: DebounceType
Debounce :: DebounceType
NoDebounce :: DebounceType
data LoggerType
LogToStdout :: LoggerType
LogToFile :: LoggerType
NoLogger :: LoggerType
data Options
Options :: LoggerType -> Maybe FilePath -> [FilePath] -> Bool -> DebounceType -> Double -> Int -> Bool -> Maybe FilePath -> Options

-- | A main file that uses manually supplied options instead of parsing the
--   passed in arguments.
defaultMainWithOptions :: Options -> Dep -> IO ()

-- | A sum type for the various issues that can be logged
data Issue

-- | logged every time an event is fired
IEvent :: Event -> Issue

-- | logged every time an rule is fired
IRuleFired :: Event -> InternalRule -> Issue
data InternalRule

-- | The pattern entity holds a name and pattern that is compiled when the
--   rules are evaluated
data Rule
data RuleIssue

-- | Configuration to run the file watcher
data Config
Config :: (Issue -> IO ()) -> [FilePath] -> WatchConfig -> Config

-- | A logger for the issues
logger :: Config -> Issue -> IO ()

-- | The directories to watch
dirs :: Config -> [FilePath]

-- | config for the file watcher
watchConfig :: Config -> WatchConfig
run :: Dep -> IO WatchManager
runWithConfig :: FilePath -> Config -> Dep -> IO WatchManager

-- | A polymorphic <a>Dep</a>. Exported for completeness, ignore.
data DepM a
