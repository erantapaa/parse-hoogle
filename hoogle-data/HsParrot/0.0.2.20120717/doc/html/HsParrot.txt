-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell integration with Parrot virtual machine
--   
--   Haskell integration with Parrot virtual machine
@package HsParrot
@version 0.0.2.20120717


-- | Parrot PIR syntax tree.
--   
--   <pre>
--   All that is gold does not glitter,
--   Not all those who wander are lost;
--   The old that is strong does not wither,
--   Deep roots are not reached by the frost.
--   </pre>
module Language.PIR

-- | PIR code consists of declarations.
type PIR = [Decl]
data Decl

-- | Subroutine declaration
DeclSub :: !SubName -> ![SubFlag] -> ![Stmt] -> Decl
dsName :: Decl -> !SubName
dsFlags :: Decl -> ![SubFlag]
dsBody :: Decl -> ![Stmt]

-- | Namespace declaration
DeclNS :: !PkgName -> ![Decl] -> Decl
dnPackage :: Decl -> !PkgName
dnBody :: Decl -> ![Decl]

-- | <tt>.include</tt> directive
DeclInc :: !FilePath -> Decl
diFile :: Decl -> !FilePath

-- | <tt>HLL</tt> directive
DeclHLL :: !String -> !String -> Decl
dhLang :: Decl -> !String
dhGroup :: Decl -> !String
data Stmt

-- | Comment
StmtComment :: !String -> Stmt

-- | <tt>#line</tt> directive
StmtLine :: !FilePath -> !Int -> Stmt

-- | Lexical Pad
StmtPad :: ![(VarName, Expression)] -> ![Stmt] -> Stmt

-- | Backdoor into raw <tt>Doc</tt>
StmtRaw :: !Doc -> Stmt

-- | Generic instructions
StmtIns :: !Ins -> Stmt

-- | Inner subroutine
StmtSub :: !SubName -> ![Stmt] -> Stmt
data Ins

-- | <tt>.local</tt> directive
InsLocal :: !RegType -> !VarName -> Ins

-- | <tt>new</tt> opcode
InsNew :: !LValue -> !ObjType -> Ins

-- | <tt>set</tt> opcode
InsBind :: !LValue -> !Expression -> Ins

-- | <tt>assign</tt> opcode
InsAssign :: !LValue -> !Expression -> Ins

-- | Other opcodes
InsPrim :: !Maybe LValue -> !PrimName -> ![Expression] -> Ins

-- | Function call
InsFun :: ![Sig] -> !Expression -> ![Expression] -> Ins

-- | Tail call
InsTailFun :: !Expression -> ![Expression] -> Ins

-- | Label
InsLabel :: !LabelName -> Ins

-- | Comment
InsComment :: !String -> !Maybe Ins -> Ins

-- | Generic expressions
InsExp :: !Expression -> Ins

-- | Constant
InsConst :: !LValue -> !ObjType -> !Expression -> Ins
data Expression

-- | Variables
ExpLV :: !LValue -> Expression

-- | Literals
ExpLit :: !Literal -> Expression
data LValue

-- | A variable declared by <tt>.local</tt>
VAR :: !VarName -> LValue

-- | PMC register <i>n</i>
PMC :: !Int -> LValue

-- | String register <i>n</i>
STR :: !Int -> LValue

-- | Integer register <i>n</i>
INT :: !Int -> LValue

-- | Number register <i>n</i>
NUM :: !Int -> LValue
KEYED :: !LValue -> !Expression -> LValue
data Literal

-- | A literal string
LitStr :: !String -> Literal

-- | A literal integer
LitInt :: !Integer -> Literal

-- | A literal number
LitNum :: !Double -> Literal

-- | Tags a PIR subroutine definition with <tt>@MAIN</tt>, <tt>@LOAD</tt>,
--   <tt>@ANON</tt>, <tt>@METHOD</tt>, or <tt>@MULTI</tt>.
data SubFlag
SubMAIN :: SubFlag
SubLOAD :: SubFlag
SubANON :: SubFlag
SubMETHOD :: SubFlag
SubMULTI :: ![ObjType] -> SubFlag
SubOUTER :: !SubName -> SubFlag
data RegType

-- | <tt>I</tt> (Integer) register
RegInt :: RegType

-- | <tt>N</tt> (Number) register
RegNum :: RegType

-- | <tt>S</tt> (String) register
RegStr :: RegType

-- | <tt>P</tt> (PMC) register
RegPMC :: RegType

-- | A PMC type, which, for example, can be given as an argument to the
--   <tt>new</tt> opcode (e.g. <tt>new .PerlScalar</tt>).
data ObjType
PerlScalar :: ObjType
PerlArray :: ObjType
PerlHash :: ObjType
PerlInt :: ObjType
PerlPair :: ObjType
PerlRef :: ObjType
PerlEnv :: ObjType
Sub :: ObjType
Closure :: ObjType
Continuation :: ObjType
BareType :: String -> ObjType
type LabelName = String
type SubName = String
type VarName = String
type PrimName = String
type PkgName = String
type CallConv = String
emitStmts :: [Stmt] -> Doc
curPad :: Int
emitRets :: [Sig] -> Doc
emitFun :: (Emit b, Emit c) => CallConv -> b -> [c] -> [Sig] -> Doc
emitArgs :: Emit a => [a] -> Doc
emitFunName :: Emit b => CallConv -> String -> [b] -> [Sig] -> Doc
noArgs :: [Expression]
expKeyed :: LValue -> Expression -> Expression
quoted :: String -> String

-- | <tt>.include</tt> directive.
include :: PkgName -> Decl

-- | <tt>.HLL</tt> directive.
hll :: String -> String -> Decl

-- | Short for <a>InsBind</a> (binding).
(<:=) :: LValue -> Expression -> Ins

-- | Short for <a>InsAssign</a>.
(<==) :: LValue -> Expression -> Ins

-- | Calls an opcode which returns a value.
(<--) :: LValue -> PrimName -> [Expression] -> Ins

-- | Calls an opcode, ignoring any return values.
(.-) :: PrimName -> [Expression] -> Ins

-- | Calls an user-defined sub which returns a list of values.
(<-&) :: [Sig] -> Expression -> [Expression] -> Ins

-- | Calls an user-defined sub, ignoring any return values.
(.&) :: Expression -> [Expression] -> Ins

-- | Literal zero
lit0 :: Expression

-- | <tt>$P0</tt> register
nullPMC :: RegClass a => a

-- | <tt>$P1</tt> register
funPMC :: RegClass a => a

-- | <tt>$P2</tt> register
rv :: RegClass a => a

-- | <tt>$P10</tt> register
arg0 :: RegClass a => a

-- | <tt>$P11</tt> register
arg1 :: RegClass a => a

-- | <tt>$P12</tt> register
arg2 :: RegClass a => a

-- | <tt>$P13</tt> register
arg3 :: RegClass a => a

-- | <tt>$P8</tt> register
tempPMC :: RegClass a => a

-- | <tt>$P9</tt> register
tempPMC2 :: RegClass a => a

-- | <tt>$S8</tt> register
tempSTR :: RegClass a => a

-- | <tt>$S9</tt> register
tempSTR2 :: RegClass a => a

-- | <tt>$S10</tt> register
tempSTR3 :: RegClass a => a

-- | <tt>$I8</tt> register
tempINT :: RegClass a => a

-- | <tt>$I9</tt> register
tempINT2 :: RegClass a => a

-- | <tt>$I10</tt> register
tempINT3 :: RegClass a => a

-- | <tt>$I11</tt> register
tempINT4 :: RegClass a => a

-- | <tt>$N8</tt> register
tempNUM :: RegClass a => a

-- | <tt>$N9</tt> register
tempNUM2 :: RegClass a => a
class RegClass y
reg :: RegClass y => LValue -> y
class LiteralClass x
lit :: LiteralClass x => x -> Expression

-- | Subroutine declaration.
sub :: SubName -> [Sig] -> [Ins] -> Decl
sigList :: [Sig] -> [Expression]
data Sig
MkSig :: [ArgFlag] -> Expression -> Sig
sigFlags :: Sig -> [ArgFlag]
sigIdent :: Sig -> Expression
data ArgFlag
MkArgFlatten :: ArgFlag
MkArgSlurpyArray :: ArgFlag
MkArgMaybeFlatten :: ArgFlag
MkArgOptional :: ArgFlag
argVal :: ArgFlag -> Int
maybeFlatten :: Doc

-- | Marks a parameter as slurpy.
slurpy :: Expression -> Sig

-- | Returns from a sub.
(-->) :: Decl -> [Expression] -> Decl
retSigList :: [Expression] -> [Expression]

-- | In the case a Perl 6 builtin corresponds exactly to a PIR opcode, you
--   can use <a>vop1</a> to create an appropriate wrapper for an opcode
--   expecting <i>one</i> argument.
vop1 :: SubName -> PrimName -> Decl

-- | In the case a Perl 6 builtin corresponds exactly to a PIR opcode, you
--   can use <a>vop2</a> to create an appropriate wrapper for an opcode
--   expecting <i>two</i> arguments.
vop2 :: SubName -> PrimName -> Decl

-- | Creates a sub which accepts a thing which allows keyed access (for
--   example aggregates) and an index.
vop2keyed :: SubName -> LValue -> Decl

-- | Generic wrapper for unary opcodes.
vop1x :: SubName -> PrimName -> (forall a. RegClass a => a) -> (forall b. RegClass b => b) -> Decl

-- | Generic wrapper for coercion/context forcing (used by
--   <tt>&amp;prefix:&lt;+&gt;</tt>, <tt>&amp;prefix:&lt;~&gt;</tt>, etc.)
vop1coerce :: SubName -> (forall a. RegClass a => a) -> Decl

-- | Generic wrapper for two-ary opcodes.
vop2x :: SubName -> PrimName -> (forall a. RegClass a => a) -> (forall b. RegClass b => b) -> (forall c. RegClass c => c) -> Decl

-- | Wrapper for an opcode which accepts and returns an <tt>I</tt>
--   register.
vop1ii :: SubName -> PrimName -> Decl

-- | Wrapper for an opcode which accepts and returns a <tt>N</tt> register.
vop1nn :: SubName -> PrimName -> Decl

-- | Wrapper for an opcode which accepts and returns a <tt>S</tt> register.
vop1ss :: SubName -> PrimName -> Decl

-- | Wrapper for an opcode which returns a <tt>S</tt> register and accepts
--   a <tt>I</tt> register.
vop1si :: SubName -> PrimName -> Decl

-- | Wrapper for an opcode which returns a <tt>I</tt> register and accepts
--   a <tt>S</tt> register.
vop1is :: SubName -> PrimName -> Decl

-- | Wrapper for an opcode which returns a <tt>I</tt> register and accepts
--   a <tt>P</tt> register.
vop1ip :: SubName -> PrimName -> Decl

-- | Wrapper for an opcode which accepts and returns <tt>I</tt> registers.
vop2iii :: SubName -> PrimName -> Decl

-- | Wrapper for an opcode which accepts and returns <tt>N</tt> registers.
vop2nnn :: SubName -> PrimName -> Decl

-- | Wrapper for an opcode which accepts two <tt>S</tt> registers and
--   returns a native integer (<tt>I</tt> register).
vop2iss :: SubName -> PrimName -> Decl
bare :: VarName -> Expression
collectCC :: [Ins]
callThunkCC :: Expression -> [Ins]

-- | Creates appropriate <tt>&amp;statement_control:foo</tt> subroutines.
stmtControlLoop :: VarName -> PrimName -> Decl

-- | Creates appropriate <tt>&amp;statement_control:foo</tt> subroutines.
stmtControlCond :: VarName -> PrimName -> Decl

-- | Creates appropriate <tt>&amp;infix:foo</tt> subs for logical operators
--   (<tt>||</tt>, <tt>&amp;&amp;</tt>, etc.).
op2Logical :: VarName -> PrimName -> Decl

-- | Escapes characters which have a special meaning in PIR.
escaped :: String -> String

-- | The Prelude, defining primitives like <tt>&amp;say</tt>,
--   <tt>&amp;infix:+</tt>, etc.
preludePIR :: Doc
class Show x => Emit x
emit :: Emit x => x -> Doc
nested :: Emit x => x -> Doc
eqSep :: (Emit a, Emit b, Emit c) => a -> b -> [c] -> Doc
commaSep :: Emit x => [x] -> Doc
instance [overlap ok] Typeable Literal
instance [overlap ok] Typeable RegType
instance [overlap ok] Typeable ObjType
instance [overlap ok] Typeable SubFlag
instance [overlap ok] Typeable LValue
instance [overlap ok] Typeable Expression
instance [overlap ok] Typeable ArgFlag
instance [overlap ok] Typeable Sig
instance [overlap ok] Typeable Ins
instance [overlap ok] Typeable Stmt
instance [overlap ok] Typeable Decl
instance [overlap ok] Show Literal
instance [overlap ok] Eq Literal
instance [overlap ok] Show RegType
instance [overlap ok] Eq RegType
instance [overlap ok] Show ObjType
instance [overlap ok] Eq ObjType
instance [overlap ok] Show SubFlag
instance [overlap ok] Eq SubFlag
instance [overlap ok] Show LValue
instance [overlap ok] Eq LValue
instance [overlap ok] Show Expression
instance [overlap ok] Eq Expression
instance [overlap ok] Show ArgFlag
instance [overlap ok] Eq ArgFlag
instance [overlap ok] Show Sig
instance [overlap ok] Eq Sig
instance [overlap ok] Show Ins
instance [overlap ok] Eq Ins
instance [overlap ok] Show Stmt
instance [overlap ok] Eq Stmt
instance [overlap ok] Show Decl
instance [overlap ok] Eq Decl
instance [overlap ok] YAML ArgFlag
instance [overlap ok] YAML Sig
instance [overlap ok] YAML ObjType
instance [overlap ok] YAML RegType
instance [overlap ok] YAML SubFlag
instance [overlap ok] YAML Literal
instance [overlap ok] YAML LValue
instance [overlap ok] YAML Expression
instance [overlap ok] YAML Ins
instance [overlap ok] YAML Stmt
instance [overlap ok] YAML Decl
instance [overlap ok] Typeable Doc
instance [overlap ok] YAML Doc
instance [overlap ok] Emit [ArgFlag]
instance [overlap ok] LiteralClass Double
instance [overlap ok] LiteralClass Bool
instance [overlap ok] LiteralClass Int
instance [overlap ok] LiteralClass String
instance [overlap ok] LiteralClass Doc
instance [overlap ok] LiteralClass ObjType
instance [overlap ok] LiteralClass [ArgFlag]
instance [overlap ok] LiteralClass [[ArgFlag]]
instance [overlap ok] RegClass Sig
instance [overlap ok] RegClass Expression
instance [overlap ok] RegClass LValue
instance [overlap ok] Emit Literal
instance [overlap ok] Emit LValue
instance [overlap ok] Emit Expression
instance [overlap ok] Emit ObjType
instance [overlap ok] Emit Ins
instance [overlap ok] Emit RegType
instance [overlap ok] Emit Stmt
instance [overlap ok] Emit SubFlag
instance [overlap ok] Emit Decl
