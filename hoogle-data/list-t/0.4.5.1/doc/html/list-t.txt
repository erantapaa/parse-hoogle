-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | ListT done right
--   
@package list-t
@version 0.4.5.1

module ListT

-- | A proper implementation of the list monad-transformer. Useful for
--   streaming of monadic data structures.
--   
--   Since it has instances of <a>MonadPlus</a> and <a>Alternative</a>, you
--   can use general utilities packages like <a>"monadplus"</a> with it.
data ListT m a

-- | A monad transformer capable of deconstructing like a list.
class MonadTrans t => MonadTransUncons t
uncons :: (MonadTransUncons t, Monad m) => t m a -> m (Maybe (a, t m a))

-- | A monad capable of constructing like a list.
class MonadPlus m => MonadCons m
cons :: MonadCons m => a -> m a -> m a

-- | Execute, getting the head. Returns nothing if it's empty.
head :: (Monad m, MonadTransUncons t) => t m a -> m (Maybe a)

-- | Execute, getting the tail. Returns nothing if it's empty.
tail :: (Monad m, MonadTransUncons t) => t m a -> m (Maybe (t m a))

-- | Execute, checking whether it's empty.
null :: (Monad m, MonadTransUncons t) => t m a -> m Bool

-- | Execute, applying a left fold.
fold :: (Monad m, MonadTransUncons t) => (r -> a -> m r) -> r -> t m a -> m r

-- | A version of <a>fold</a>, which allows early termination.
foldMaybe :: (Monad m, MonadTransUncons t) => (r -> a -> m (Maybe r)) -> r -> t m a -> m r

-- | Execute, folding to a list.
toList :: (Monad m, MonadTransUncons t) => t m a -> m [a]

-- | Execute, folding to a list in a reverse order. Performs more
--   efficiently than <a>toList</a>.
toReverseList :: (Monad m, MonadTransUncons t) => t m a -> m [a]

-- | Execute, traversing the stream with a side effect in the inner monad.
traverse_ :: (Monad m, MonadTransUncons t) => (a -> m ()) -> t m a -> m ()

-- | Execute, consuming a list of the specified length and returning the
--   remainder stream.
splitAt :: (Monad m, MonadTransUncons t, MonadPlus (t m)) => Int -> t m a -> m ([a], t m a)

-- | Construct from any foldable.
fromFoldable :: (MonadCons m, Foldable f) => f a -> m a

-- | Construct from an MVar, interpreting a value of Nothing as an end.
fromMVar :: (MonadCons m, MonadIO m) => MVar (Maybe a) -> m a

-- | Construct by unfolding a pure data structure.
unfold :: MonadCons m => (b -> Maybe (a, b)) -> b -> m a

-- | Produce an infinite stream.
repeat :: MonadCons m => a -> m a

-- | A function, which updates the contents of a list transformer.
--   
--   Since it's merely just a function, you can run it by passing a list
--   transformer as an argument.
type Transformation m a b = forall t. (Monad m, MonadCons (t m), MonadTransUncons t) => t m a -> t m b

-- | A transformation, which traverses the stream with an action in the
--   inner monad.
traverse :: (a -> m b) -> Transformation m a b

-- | A transformation, reproducing the behaviour of
--   <tt>Data.List.<a>take</a></tt>.
take :: Int -> Transformation m a a

-- | A transformation, reproducing the behaviour of
--   <tt>Data.List.<a>drop</a></tt>.
drop :: Int -> Transformation m a a

-- | A transformation, which slices a list into chunks of the specified
--   length.
slice :: Positive Int -> Transformation m a [a]

-- | A newtype wrapper around a number, which ensures that it is greater
--   than zero.
data Positive n

-- | A smart constructor for positive numbers.
positive :: (Ord n, Num n) => n -> Maybe (Positive n)
instance Typeable Positive
instance Show n => Show (Positive n)
instance Read n => Read (Positive n)
instance Eq n => Eq (Positive n)
instance Ord n => Ord (Positive n)
instance Data n => Data (Positive n)
instance Generic (Positive n)
instance Datatype D1Positive
instance Constructor C1_0Positive
instance MonadCons m => MonadCons (ReaderT e m)
instance Monad m => MonadCons (ListT m)
instance MonadCons []
instance MonadTransUncons ListT
instance MonadError e m => MonadError e (ListT m)
instance MonadBaseControl b m => MonadBaseControl b (ListT m)
instance MonadBase b m => MonadBase b (ListT m)
instance MMonad ListT
instance MFunctor ListT
instance MonadIO m => MonadIO (ListT m)
instance MonadTrans ListT
instance Monad m => MonadPlus (ListT m)
instance Monad m => Monad (ListT m)
instance (Monad m, Functor m) => Alternative (ListT m)
instance (Monad m, Functor m) => Applicative (ListT m)
instance Functor m => Functor (ListT m)
instance Monad m => Monoid (ListT m a)
