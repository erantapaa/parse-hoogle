-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | plaimi's prelude
--   
@package plailude
@version 0.6.0


module Plailude

-- | Query the terminal for STDIN. If there is any, do lhs -- if not, do
--   rhs.
(~+~) :: IO a -> IO a -> IO a

-- | Send both components of the input through the argument arrow.
both :: Arrow a => a b c -> a (b, b) (c, c)

-- | <a>retreat</a> the value a of a <a>MonadError</a> m further into the
--   <a>MonadError</a> burrito by injecting it into yet another
--   <a>MonadError</a> n, giving us m (n a). If there's an error, it is
--   rethrown inside n.
erretreat :: (MonadError e m, MonadError e n) => m a -> m (n a)

-- | Retreat the value a of a <a>Monad</a> m further into the <a>Monad</a>
--   burrito by injecting it into yet another <a>Monad</a> n, giving us m
--   (n a).
retreat :: (Monad m, Monad n) => m a -> m (n a)

-- | If <a>True</a> then the first value, else the second.
if' :: Bool -> a -> a -> a

-- | If <a>True</a> then the first value, else the second.
fi :: a -> a -> Bool -> a

-- | Compose two functions where the second function takes two values and
--   delivers its result as a single value to the first function.
--   
--   This is equivalent to: (f .: g) x y = f (g x y).
(.:) :: (c -> d) -> (a -> b -> c) -> a -> b -> d

-- | Compose two functions where the second function takes three values and
--   delivers its result as a single value to the first function.
--   
--   This is equivalent to: (f .:. g) x y z = f (g x y z).
(.:.) :: (d -> e) -> (a -> b -> c -> d) -> a -> b -> c -> e

-- | Safe indexing of lists.
(!?) :: [a] -> Int -> Maybe a

-- | <a>showL8</a> converts a showable value to a <a>ByteString</a> using
--   <a>show</a>.
showL8 :: Show a => a -> ByteString

-- | A <a>Hour</a> type, for type safety of time units.
newtype Hour a

-- | Make an <a>Hour</a>, an <a>Int</a> deriving <a>TimeUnit</a>.
MkHour :: Int -> Hour a

-- | A <a>Minute</a> type, for type safety of time units.
newtype Minute a

-- | Make a <a>Minute</a>, an <a>Int</a> deriving <a>TimeUnit</a>.
MkMinute :: Int -> Minute a

-- | A <a>Second</a> type, for type safety of time units.
newtype Second a

-- | Make a <a>Second</a>, an <a>Int</a> deriving <a>TimeUnit</a>.
MkSecond :: Int -> Second a

-- | A <a>Year</a> type, for type safety of time units.
newtype Year a

-- | Make a <a>Year</a>, an <a>Integer</a> deriving <a>TimeUnit</a>.
MkYear :: Integer -> Year a

-- | A <a>Month</a> type, for type safety of time units.
newtype Month a

-- | Make a <a>Month</a>, an <a>Int</a> deriving <a>TimeUnit</a>.
MkMonth :: Int -> Month a

-- | A <a>Day</a> type, for type safety of time units.
newtype Day a

-- | Make a <a>Day</a>, an <a>Int</a> deriving <a>TimeUnit</a>.
MkDay :: Int -> Day a

-- | <a>TimeUnit</a>s are units of time with a value that's an instance of
--   <a>Num</a>. The class is used to get type safety of time units, and a
--   function for getting "out" the value (analogues to <tt>fromJust</tt>
--   for <a>Maybe</a>) for every type of <a>Num</a>, for free.
class TimeUnit t
timeVal :: (TimeUnit t, Num n) => t -> n

-- | asSeconds take some <tt>TimeUnit</tt>s and convert them to
--   <a>Second</a>s.
asSeconds :: Hour h -> Minute m -> Second s -> Second t

-- | fromGregorian is a wrapper for Data.Time.Calendar.fromGregorian, which
--   lets us pass our <a>Year</a> - <a>Month</a> - <a>Day</a> structures.
--   It calls Data.Time.Calendar.fromGregorian with the appropriate types,
--   and returns a Data.Time.Calendar.Day.
fromGregorian :: Year y -> Month mo -> Day d -> Day
