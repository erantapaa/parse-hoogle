-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A library for communicating with RTorrent over its XML-RPC interface.
--   
@package rtorrent-rpc
@version 0.2.2.0


module Network.RTorrent.Chunk

-- | Convert a string representing bits to a list of booleans.
convertChunks :: String -> Maybe [Bool]

-- | Convert a string representing bits to a list of booleans and pads it
--   to the correct length.
convertChunksPad :: Int -> String -> Maybe [Bool]


module Network.RTorrent.Priority
data TorrentPriority
TorrentPriorityOff :: TorrentPriority
TorrentPriorityLow :: TorrentPriority
TorrentPriorityNormal :: TorrentPriority
TorrentPriorityHigh :: TorrentPriority
data FilePriority
FilePriorityOff :: FilePriority
FilePriorityNormal :: FilePriority
FilePriorityHigh :: FilePriority
instance Show TorrentPriority
instance Eq TorrentPriority
instance Ord TorrentPriority
instance Show FilePriority
instance Eq FilePriority
instance Ord FilePriority
instance XmlRpcType FilePriority
instance Enum FilePriority
instance NFData FilePriority
instance XmlRpcType TorrentPriority
instance Enum TorrentPriority
instance NFData TorrentPriority


module Network.RTorrent.Command.Internals

-- | A strict 2-tuple for easy combining of commands.
data (:*:) a b
(:*:) :: !a -> !b -> (:*:) a b

-- | A typeclass for commands that can be send to RTorrent.
class Command a where type family Ret a levels _ = 1
commandCall :: Command a => a -> RTMethodCall
commandValue :: (Command a, Applicative m, Monad m) => a -> Value -> m (Ret a)
levels :: Command a => a -> Int

-- | Existential wrapper for any command.
--   
--   <tt>Command</tt>s wrapped in <tt>AnyCommand</tt> won't parse their
--   results.
--   
--   <tt>AnyCommand</tt> can be used when you want to call multiple
--   commands but don't care about their return values.
data AnyCommand
AnyCommand :: a -> AnyCommand

-- | A newtype wrapper for method calls.
--   
--   You shouldn't directly use the constructor if you don't know what you
--   are doing.
newtype RTMethodCall
RTMethodCall :: Value -> RTMethodCall
runRTMethodCall :: RTMethodCall -> Value

-- | Make a command that should be used when defining <a>commandCall</a>.
mkRTMethodCall :: String -> [Value] -> RTMethodCall

-- | Parse a value wrapped in two singleton arrays.
parseSingle :: (Monad m, XmlRpcType a) => Value -> m a
getArray :: Monad m => Value -> m [Value]
getArray' :: Value -> [Value]

-- | Extract a value from a singleton array.
single :: Monad m => Value -> m Value
decodeUtf8 :: String -> String
instance Show RTMethodCall
instance Command a => Command [a]
instance Command AnyCommand
instance (Command a, Command b) => Command (a :*: b)
instance (Show a, Show b) => Show (a :*: b)
instance (NFData a, NFData b) => NFData (a :*: b)


module Network.RTorrent.Command

-- | A strict 2-tuple for easy combining of commands.
data (:*:) a b
(:*:) :: !a -> !b -> (:*:) a b

-- | A typeclass for commands that can be send to RTorrent.
class Command a where type family Ret a levels _ = 1

-- | Existential wrapper for any command.
--   
--   <tt>Command</tt>s wrapped in <tt>AnyCommand</tt> won't parse their
--   results.
--   
--   <tt>AnyCommand</tt> can be used when you want to call multiple
--   commands but don't care about their return values.
data AnyCommand
AnyCommand :: a -> AnyCommand


module Network.RTorrent.Action.Internals

-- | A type for actions that can act on different things like torrents and
--   files.
--   
--   <tt>a</tt> is the return type.
data Action i a
Action :: [(String, [Param])] -> (forall m. (Monad m, Applicative m) => Value -> m a) -> i -> Action i a

-- | A simple action that can be used when constructing new ones.
--   
--   Watch out for using <tt>Bool</tt> as <tt>a</tt> since using it with
--   this function will probably result in an error, since RTorrent
--   actually returns 0 or 1 instead of a bool. One workaround is to get an
--   <tt>Int</tt> and use <tt>Bool</tt>'s <tt>Enum</tt> instance.
simpleAction :: XmlRpcType a => String -> [Param] -> i -> Action i a

-- | An action that does nothing but return the value.
pureAction :: a -> i -> Action i a

-- | Sequence multiple actions, for example with <tt>f = []</tt>.
sequenceActions :: Traversable f => f (i -> Action i a) -> i -> Action i (f a)

-- | Combine two actions to get a new one.
(<+>) :: (i -> Action i a) -> (i -> Action i b) -> i -> Action i (a :*: b)

-- | Parameters for actions.
data Param
PString :: String -> Param
PInt :: Int -> Param
PTorrentPriority :: TorrentPriority -> Param
PFilePriority :: FilePriority -> Param

-- | Wrapper to get monoid and applicative instances.
newtype ActionB i a
ActionB :: (i -> Action i a) -> ActionB i a
runActionB :: ActionB i a -> i -> Action i a
data AllAction i a
AllAction :: i -> String -> (i -> Action i a) -> AllAction i a
allToMulti :: AllAction i a -> j -> Action j [a]
instance Command (AllAction i a)
instance XmlRpcType Param
instance Show Param
instance XmlRpcType i => Command (Action i a)
instance Monoid a => Monoid (ActionB i a)
instance Applicative (ActionB i)
instance Functor (ActionB i)
instance Functor (Action i)


-- | For more info on actions, see <a>Network.RTorrent.Action</a>.
module Network.RTorrent.Torrent
data TorrentInfo
TorrentInfo :: TorrentId -> String -> !Bool -> !Int -> !Int -> !Int -> !Int -> String -> String -> !TorrentPriority -> TorrentInfo
torrentId :: TorrentInfo -> TorrentId
torrentName :: TorrentInfo -> String
torrentOpen :: TorrentInfo -> !Bool
torrentDownRate :: TorrentInfo -> !Int
torrentUpRate :: TorrentInfo -> !Int
torrentSize :: TorrentInfo -> !Int
torrentBytesLeft :: TorrentInfo -> !Int
torrentPath :: TorrentInfo -> String
torrentDir :: TorrentInfo -> String
torrentTorrentPriority :: TorrentInfo -> !TorrentPriority

-- | A newtype wrapper for torrent identifiers.
newtype TorrentId
TorrentId :: String -> TorrentId
type TorrentAction = Action TorrentId

-- | Start downloading a torrent.
start :: TorrentId -> TorrentAction Int

-- | Close a torrent.
close :: TorrentId -> TorrentAction Int

-- | Stop a torrent.
stop :: TorrentId -> TorrentAction Int
closeStop :: TorrentId -> TorrentAction Int

-- | Erase a torrent.
erase :: TorrentId -> TorrentAction Int

-- | Initiate a hash check for a torrent.
checkHash :: TorrentId -> TorrentAction Int

-- | Get a TorrentInfo for a torrent.
getTorrent :: TorrentId -> TorrentAction TorrentInfo

-- | A command for getting torrent info for all torrents.
getTorrents :: AllAction TorrentId TorrentInfo

-- | Execute a command on all torrents. For example the command
--   
--   <pre>
--   allTorrents (setTorrentPriority TorrentPriorityNormal)
--   </pre>
--   
--   will set the priority of all torrents to normal.
allTorrents :: (TorrentId -> TorrentAction a) -> AllAction TorrentId a

-- | Set the download priority of a torrent.
setTorrentPriority :: TorrentPriority -> TorrentId -> TorrentAction Int
getTorrentPriority :: TorrentId -> TorrentAction TorrentPriority
getTorrentId :: TorrentId -> TorrentAction TorrentId
getTorrentOpen :: TorrentId -> TorrentAction Bool
getTorrentUpRate :: TorrentId -> TorrentAction Int
getTorrentDownRate :: TorrentId -> TorrentAction Int
getTorrentSizeBytes :: TorrentId -> TorrentAction Int
getTorrentLeftBytes :: TorrentId -> TorrentAction Int
getTorrentName :: TorrentId -> TorrentAction String

-- | Get the absolute path to the torrent's directory or file.
getTorrentPath :: TorrentId -> TorrentAction String

-- | Get the absolute path to the directory in which the torrent's
--   directory or file resides.
getTorrentDir :: TorrentId -> TorrentAction String
setTorrentDir :: String -> TorrentId -> TorrentAction Int

-- | Get the ratio (which is multiplied by a thousand)
getTorrentRatio :: TorrentId -> TorrentAction Int
getTorrentFileCount :: TorrentId -> TorrentAction Int

-- | A total number of chunks.
getTorrentSizeChunks :: TorrentId -> TorrentAction Int

-- | Get a list that shows which chunks of the torrent are recorded as
--   completed. Will return <a>Nothing</a> in the case that the torrent is
--   closed.
getTorrentChunks :: TorrentId -> TorrentAction (Maybe [Bool])

-- | Get the size of a chunk.
getTorrentChunkSize :: TorrentId -> TorrentAction Int
instance Show TorrentId
instance Show TorrentInfo
instance NFData TorrentInfo
instance XmlRpcType TorrentId
instance NFData TorrentId


-- | For more info on actions, see <a>Network.RTorrent.Action</a>.
module Network.RTorrent.File
data FileId
FileId :: !TorrentId -> !Int -> FileId
data FileInfo
FileInfo :: String -> !Int -> !Int -> !Int -> !FilePriority -> !Int -> FileId -> FileInfo
filePath :: FileInfo -> String
fileSizeBytes :: FileInfo -> !Int
fileSizeChunks :: FileInfo -> !Int
fileCompletedChunks :: FileInfo -> !Int
filePriority :: FileInfo -> !FilePriority
fileOffset :: FileInfo -> !Int
fileId :: FileInfo -> FileId
type FileAction = Action FileId

-- | Get a file except for <tt>FileId</tt>. The <tt>FileId</tt> can be got
--   by running <tt>allFiles</tt>.
getFilePartial :: FileId -> FileAction (FileId -> FileInfo)
getTorrentFiles :: TorrentId -> TorrentAction [FileInfo]

-- | Run the file action on all files that a torrent has.
allFiles :: (FileId -> FileAction a) -> TorrentId -> TorrentAction [FileId :*: a]

-- | Get the file name relative to the torrent base directory.
getFilePath :: FileId -> FileAction String

-- | Get the absolute path.
getFileAbsolutePath :: FileId -> FileAction String
getFileSizeBytes :: FileId -> FileAction Int
getFileSizeChunks :: FileId -> FileAction Int
getFileCompletedChunks :: FileId -> FileAction Int
getFilePriority :: FileId -> FileAction FilePriority
setFilePriority :: FilePriority -> FileId -> FileAction Int

-- | Get the offset of a file in a torrent, when chunks are interpreted as
--   continuous data.
getFileOffset :: FileId -> FileAction Int
instance Show FileId
instance Show FileInfo
instance NFData FileInfo
instance NFData FileId
instance XmlRpcType FileId


-- | For more info on actions, see <a>Network.RTorrent.Action</a>.
module Network.RTorrent.Peer
data PeerId
PeerId :: !TorrentId -> !String -> PeerId
data PeerInfo
PeerInfo :: String -> String -> !Int -> !Int -> !Int -> !Int -> !Bool -> !Int -> !Int -> PeerId -> PeerInfo
peerClientVersion :: PeerInfo -> String
peerIp :: PeerInfo -> String
peerUpRate :: PeerInfo -> !Int
peerDownRate :: PeerInfo -> !Int
peerUpTotal :: PeerInfo -> !Int
peerDownTotal :: PeerInfo -> !Int
peerEncrypted :: PeerInfo -> !Bool
peerCompletedPercent :: PeerInfo -> !Int
peerPort :: PeerInfo -> !Int
peerId :: PeerInfo -> PeerId
type PeerAction = Action PeerId

-- | Get a partial peer. <tt>PeerId</tt> can be gotten by running
--   <tt>allPeers</tt>.
getPeerPartial :: PeerId -> PeerAction (PeerId -> PeerInfo)

-- | Run the peer action on all peers that a torrent has.
allPeers :: (PeerId -> PeerAction a) -> TorrentId -> TorrentAction [PeerId :*: a]
getTorrentPeers :: TorrentId -> TorrentAction [PeerInfo]
banPeer :: PeerId -> PeerAction Int
disconnectPeer :: PeerId -> PeerAction Int
getPeerHash :: PeerId -> PeerAction String
getPeerIp :: PeerId -> PeerAction String
getPeerClientVersion :: PeerId -> PeerAction String
getPeerUpRate :: PeerId -> PeerAction Int
getPeerDownRate :: PeerId -> PeerAction Int
getPeerUpTotal :: PeerId -> PeerAction Int
getPeerDownTotal :: PeerId -> PeerAction Int
getPeerEncrypted :: PeerId -> PeerAction Bool
getPeerCompletedPercent :: PeerId -> PeerAction Int
getPeerPort :: PeerId -> PeerAction Int
instance Show PeerId
instance Show PeerInfo
instance NFData PeerInfo
instance NFData PeerId
instance XmlRpcType PeerId


-- | For more info on actions, see <a>Network.RTorrent.Action</a>.
module Network.RTorrent.Tracker
data TrackerId
TrackerId :: !TorrentId -> !Int -> TrackerId
data TrackerType
TrackerHTTP :: TrackerType
TrackerUDP :: TrackerType
TrackerDHT :: TrackerType
data TrackerInfo
TrackerInfo :: String -> !TrackerType -> !Bool -> !Bool -> TrackerId -> TrackerInfo
trackerUrl :: TrackerInfo -> String
trackerType :: TrackerInfo -> !TrackerType
trackerEnabled :: TrackerInfo -> !Bool
trackerOpen :: TrackerInfo -> !Bool
trackerId :: TrackerInfo -> TrackerId
type TrackerAction = Action TrackerId

-- | Get a tracker except for <tt>TrackerId</tt>. The <tt>TrackerId</tt>
--   can be got by running <tt>allTrackers</tt>.
getTrackerPartial :: TrackerId -> TrackerAction (TrackerId -> TrackerInfo)
getTorrentTrackers :: TorrentId -> TorrentAction [TrackerInfo]

-- | Run the tracker action on all trackers that a torrent has.
allTrackers :: (TrackerId -> TrackerAction a) -> TorrentId -> TorrentAction [TrackerId :*: a]
getTrackerUrl :: TrackerId -> TrackerAction String
getTrackerEnabled :: TrackerId -> TrackerAction Bool
setTrackerEnabled :: Bool -> TrackerId -> TrackerAction Int
getTrackerType :: TrackerId -> TrackerAction TrackerType
getTrackerOpen :: TrackerId -> TrackerAction Bool
instance Show TrackerId
instance Show TrackerType
instance Eq TrackerType
instance Show TrackerInfo
instance NFData TrackerInfo
instance NFData TrackerId
instance NFData TrackerType
instance XmlRpcType TrackerType
instance Enum TrackerType
instance XmlRpcType TrackerId


-- | <tt>Action</tt> is a command acting on various kinds of objects:
--   
--   <ul>
--   <li>torrents (<a>TorrentAction</a>)</li>
--   <li>files (<a>FileAction</a>)</li>
--   <li>peers (<a>PeerAction</a>)</li>
--   <li>trackers (<a>TrackerAction</a>).</li>
--   </ul>
--   
--   They all have the property that they can be executed on a single
--   object or on a group of objects.
--   
--   For example,
--   
--   <pre>
--   callRTorrent "localhost" 5000 $ some_action (some_id :: SomeId)
--   </pre>
--   
--   is a valid thing to write when <tt>some</tt> is one of the previous
--   objects.
--   
--   To call an action on all torrents, you can use <a>allTorrents</a>, so
--   that
--   
--   <pre>
--   callRTorrent "localhost" 5000 $ allTorrents getTorrentId
--   </pre>
--   
--   will return a list of torrent ids.
--   
--   To call a action on other types of objects, you can use
--   <a>allPeers</a>, <a>allFiles</a>, or <a>allTrackers</a>, which will
--   act on all peers, files, or trackers that are associated to a torrent.
--   They will also return ids for each object. Then for example
--   
--   <pre>
--   allFiles getFileSizeBytes :: TorrentId -&gt; TorrentAction [FileId :*: Int]
--   </pre>
--   
--   is an action that will return a list of ids and file sizes when run on
--   a torrent. These can further be used with <a>allTorrents</a>.
--   
--   To combine actions, you can use <a>&lt;+&gt;</a> and
--   <a>sequenceActions</a> which correspond to <tt>:*:</tt> and
--   <tt>[]</tt> for commands.
--   
--   In order to write new actions, <a>simpleAction</a> can be used.
module Network.RTorrent.Action

-- | A type for actions that can act on different things like torrents and
--   files.
--   
--   <tt>a</tt> is the return type.
data Action i a

-- | A simple action that can be used when constructing new ones.
--   
--   Watch out for using <tt>Bool</tt> as <tt>a</tt> since using it with
--   this function will probably result in an error, since RTorrent
--   actually returns 0 or 1 instead of a bool. One workaround is to get an
--   <tt>Int</tt> and use <tt>Bool</tt>'s <tt>Enum</tt> instance.
simpleAction :: XmlRpcType a => String -> [Param] -> i -> Action i a

-- | An action that does nothing but return the value.
pureAction :: a -> i -> Action i a

-- | Sequence multiple actions, for example with <tt>f = []</tt>.
sequenceActions :: Traversable f => f (i -> Action i a) -> i -> Action i (f a)

-- | Combine two actions to get a new one.
(<+>) :: (i -> Action i a) -> (i -> Action i b) -> i -> Action i (a :*: b)

-- | Parameters for actions.
data Param
PString :: String -> Param
PInt :: Int -> Param
PTorrentPriority :: TorrentPriority -> Param
PFilePriority :: FilePriority -> Param

-- | Wrapper to get monoid and applicative instances.
newtype ActionB i a
ActionB :: (i -> Action i a) -> ActionB i a
runActionB :: ActionB i a -> i -> Action i a


-- | A module for defined commands.
--   
--   To combine multiple commands, use <a>:*:</a>, or store them in a list,
--   as both of these types have <a>Command</a> instances.
module Network.RTorrent.CommandList

-- | Execute a command with a result type <tt>t</tt>.
data Global t

-- | Get the current up rate, in bytes per second.
getUpRate :: Global Int

-- | Get the current down rate, in bytes per second.
getDownRate :: Global Int

-- | Get the default download directory.
getDirectory :: Global String

-- | Get the process id.
getPid :: Global Int

-- | Get the maximum upload rate, in bytes per second.
--   
--   <tt>0</tt> means no limit.
getUploadRate :: Global Int

-- | Get the maximum download rate, in bytes per second.
--   
--   <tt>0</tt> means no limit.
getDownloadRate :: Global Int

-- | Set the maximum upload rate, in bytes per second.
setUploadRate :: Int -> Global Int

-- | Set the maximum download rate, in bytes per second.
setDownloadRate :: Int -> Global Int

-- | Load a torrent file.
loadTorrent :: String -> Global Int

-- | Load a torrent file.
loadTorrentRaw :: ByteString -> Global Int

-- | Load a torrent file and start downloading it.
loadStartTorrent :: String -> Global Int

-- | Load a torrent file and start downloading it.
loadStartTorrentRaw :: ByteString -> Global Int

-- | Run a command with no arguments.
commandSimple :: XmlRpcType a => String -> Global a

-- | Run a command with the given arguments.
commandArgs :: XmlRpcType a => String -> [Value] -> Global a

-- | Run a command with the <tt>Int</tt> given as an argument.
commandInt :: XmlRpcType a => String -> Int -> Global a

-- | Run a command with the <tt>String</tt> given as an argument.
commandString :: XmlRpcType a => String -> String -> Global a

-- | Combine two actions to get a new one.
(<+>) :: (i -> Action i a) -> (i -> Action i b) -> i -> Action i (a :*: b)

-- | Sequence multiple actions, for example with <tt>f = []</tt>.
sequenceActions :: Traversable f => f (i -> Action i a) -> i -> Action i (f a)

-- | A strict 2-tuple for easy combining of commands.
data (:*:) a b
(:*:) :: !a -> !b -> (:*:) a b

-- | Existential wrapper for any command.
--   
--   <tt>Command</tt>s wrapped in <tt>AnyCommand</tt> won't parse their
--   results.
--   
--   <tt>AnyCommand</tt> can be used when you want to call multiple
--   commands but don't care about their return values.
data AnyCommand
AnyCommand :: a -> AnyCommand

-- | A typeclass for commands that can be send to RTorrent.
class Command a where type family Ret a levels _ = 1
instance Functor Global
instance Command (Global a)


-- | This package can be used for communicating with RTorrent over its
--   XML-RPC interface.
--   
--   For example, you can request torrent info and bandwidth usage:
--   
--   <pre>
--   result &lt;- callRTorrent "localhost" 5000 $ 
--       <a>getTorrents</a> <a>:*:</a> <a>getUpRate</a> <a>:*:</a> <a>getDownRate</a>
--   case result of 
--     Right (torrentInfo :*: uploadRate :*: downloadRate) -&gt; ...
--   </pre>
--   
--   where
--   
--   <pre>
--   &gt;&gt;&gt; :t torrentInfo
--   [TorrentInfo]
--   
--   &gt;&gt;&gt; :t uploadRate
--   Int
--   </pre>
--   
--   This requires you to have set <tt>scgi_port = localhost:5000</tt> in
--   your <tt>.rtorrent.rc</tt>.
--   
--   Note that <a>:*:</a> is both a data constructor and a type
--   constructor, and therefore:
--   
--   <pre>
--   &gt;&gt;&gt; :t True :*: False
--   Bool :*: Bool
--   </pre>
--   
--   However, using <tt>:*:</tt> in types needs the <tt>TypeOperators</tt>
--   extension to work.
--   
--   As a more complete example, the following code finds all files that
--   are over 100 megabytes, prints them along with the torrent they belong
--   to and sets their priorities to high.
--   
--   <pre>
--   {-# LANGUAGE TypeOperators #-}
--   
--   import Control.Monad
--   import Network.RTorrent
--   
--   -- This is an action, and they can be combined with (<a>&lt;+&gt;</a>).
--   torrentInfo :: <a>TorrentId</a>
--                   -&gt; <a>TorrentAction</a> (String :*: [FileId :*: String :*: Int])
--   torrentInfo = <a>getTorrentName</a> 
--                  <a>&lt;+&gt;</a> <a>allFiles</a> (<a>getFilePath</a> <a>&lt;+&gt;</a> <a>getFileSizeBytes</a>)
--   
--       -- <a>allFiles</a> takes a file action (<a>FileId</a> -&gt; <a>FileAction</a> a)
--       -- and returns a torrent action: TorrentId -&gt; <a>TorrentAction</a> [FileId :*: a].
--       -- Note that it automatically adds <a>FileId</a>s to all elements.
--   
--   main :: IO ()
--   main = do
--       Right torrents &lt;- callRTorrent "localhost" 5000 $
--                           <a>allTorrents</a> torrentInfo
--       let largeFiles = 
--                   filter (\(_ :*: _ :*: _ :*: size) -&gt; size &gt; 10^8)
--                   . concatMap (\(tName :*: fileList) -&gt; 
--                                   map ((:*:) tName) fileList) 
--                                -- Move the torrent name into the list
--                   $ torrents
--   
--       putStrLn "Large files:"
--       forM_ largeFiles $ \(torrent :*: _ :*: fPath :*: _) -&gt;
--           putStrLn $ "\t" ++ torrent ++ ": " ++ fPath
--   
--       -- There is instance (<a>Command</a> cmdA, <a>Command</a> cmdB) =&gt; <a>Command</a> (cmdA :*: cmdB)
--       -- The return value for the command cmdA is <a>Ret</a> cmdA, which is an associated type
--       -- in the Command type class.
--       -- The return value for the command cmdA :*: cmdB is Ret cmdA :*: Ret cmdB.
--                        
--       let cmd :: String :*: FileId :*: String :*: Int 
--                   -&gt; FileAction FilePriority :*: FileAction Int
--           cmd (_ :*: fid :*: _ :*: _) = 
--               <a>getFilePriority</a> fid :*: <a>setFilePriority</a> <a>FilePriorityHigh</a> fid
--   
--               -- Get the old priority and set the new one to high.
--               -- setFilePriority returns a not-so-useful Int.
--   
--       -- There is also an instance Command a =&gt; Command [a],
--       -- and the return value for [a] is [Ret a].
--       
--       Right ret &lt;- callRTorrent "localhost" 5000 $ map cmd largeFiles
--   
--       putStrLn "Old priorities:"
--       forM_ ret $ \(oldPriority :*: _) -&gt; do
--           putStrLn $ "\t" ++ show oldPriority
--   </pre>
module Network.RTorrent.RPC

-- | Call RTorrent with a command. Only one connection is opened even when
--   combining commands for example by using <a>:*:</a> or lists.
callRTorrent :: Command a => HostName -> Int -> a -> IO (Either String (Ret a))


-- | A module that re-exports <a>Network.RTorrent.RPC</a> for convenience.
module Network.RTorrent
