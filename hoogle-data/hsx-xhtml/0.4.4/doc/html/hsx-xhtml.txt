-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | XHTML utilities to use together with HSX.
--   
--   XHTML utilities to use together with HSX.
@package hsx-xhtml
@version 0.4.4

module HSX.XHTML
class (XMLGenerator m, EmbedAsChild m t, EmbedAsAttr m (Attr String t)) => StringType m t
class (XMLGenerator m, EmbedAsAttr m (Attr String t)) => IntType m t
class (XMLGenerator m, EmbedAsAttr m (Attr String t)) => BoolType m t
class (XMLGenerator m, EmbedAsAttr m (Attr String t)) => ShapeType m t
class (XMLGenerator m, EmbedAsAttr m (Attr String t)) => DirType m t
class (XMLGenerator m, EmbedAsChild m t) => LegendType m t
class (XMLGenerator m, EmbedAsAttr m t) => InputType m t
class (XMLGenerator m, EmbedAsAttr m t) => CheckedType m t
class (XMLGenerator m, EmbedAsAttr m t) => HTTPEquivType m t
class (XMLGenerator m, EmbedAsAttr m t) => MetaNameType m t
class (XMLGenerator m, EmbedAsChild m t, EmbedAsAttr m t) => ScriptType m t
class (XMLGenerator m, EmbedAsChild m t, EmbedAsAttr m t) => OptionType m t
class (XMLGenerator m, EmbedAsChild m t) => CaptionType m t
page :: (StringType m title, EmbedAsAttr m a, EmbedAsChild m body) => title -> [a] -> body -> GenXML m
anchor :: (StringType m s, EmbedAsChild m c) => s -> c -> GenXML m
link :: (StringType m s, EmbedAsChild m c) => s -> c -> GenXML m
acronym :: (StringType m s1, StringType m s2) => s1 -> s2 -> GenXML m
abbr :: (StringType m s1, StringType m s2) => s1 -> s2 -> GenXML m
address :: (XMLGenerator m, EmbedAsChild m l) => [l] -> GenXML m
area :: (StringType m alt, StringType m url, ShapeType m sh) => alt -> sh -> url -> GenXML m
bdo :: (EmbedAsChild m a, DirType m d) => d -> a -> GenXML m
base :: (StringType m s) => s -> GenXML m
q :: (EmbedAsChild m a) => a -> GenXML m
blockquote :: (EmbedAsChild m a) => a -> GenXML m
br :: (XMLGenerator m) => GenXML m
button :: (EmbedAsChild m a) => a -> GenXML m
ins :: (StringType m s) => s -> GenXML m
del :: (StringType m s) => s -> GenXML m
span :: (EmbedAsChild m a) => a -> GenXML m
p :: (EmbedAsChild m a) => a -> GenXML m
div :: (EmbedAsChild m a) => a -> GenXML m
dl :: (EmbedAsChild m a, EmbedAsChild m b) => [(a, [b])] -> GenXML m
fieldset :: (LegendType m l, EmbedAsChild m a) => l -> a -> GenXML m
form :: (StringType m s, EmbedAsChild m a) => s -> a -> GenXML m
head :: (StringType m s, EmbedAsChild m a) => s -> a -> GenXML m
h :: (EmbedAsChild m a) => Int -> a -> GenXML m
h2 :: (EmbedAsChild m a) => a -> GenXML m
h3 :: (EmbedAsChild m a) => a -> GenXML m
h4 :: (EmbedAsChild m a) => a -> GenXML m
h5 :: (EmbedAsChild m a) => a -> GenXML m
h6 :: (EmbedAsChild m a) => a -> GenXML m
h1 :: (EmbedAsChild m a) => a -> GenXML m
hr :: (XMLGenerator m) => GenXML m
img :: (StringType m alt, StringType m url) => alt -> url -> GenXML m
imgmap :: (StringType m alt, StringType m url, StringType m map, StringType m aalt, StringType m aurl, ShapeType m sh) => alt -> url -> (map, [(aalt, sh, aurl)]) -> GenXMLList m
label :: (StringType m s, EmbedAsChild m a) => s -> a -> GenXML m
input :: (InputType m i, StringType m s) => i -> s -> GenXML m
data Input c s
Checkbox :: c -> Input c s
File :: Input c s
Image :: s -> s -> Input c s
Hidden :: Input c s
Button :: s -> Input c s
Password :: Input c s
Text :: Input c s
Radio :: c -> Input c s
Submit :: s -> Input c s
Reset :: s -> Input c s
type CInput c = Input c String
type SInput s = Input Checked s
data Checked
Checked :: Checked
Unchecked :: Checked
resetButton :: (StringType m n, StringType m v) => n -> v -> GenXML m
submitButton :: (StringType m n, StringType m v) => n -> v -> GenXML m
checkbox :: (CheckedType m c, StringType m s1, StringType m s2) => c -> s1 -> s2 -> GenXMLList m
data HTTPEquiv
ContentType :: HTTPEquiv
Expires :: HTTPEquiv
Refresh :: HTTPEquiv
SetCookie :: HTTPEquiv
data MetaName
Author :: MetaName
Description :: MetaName
Keywords :: MetaName
Generator :: MetaName
Revised :: MetaName
Others :: String -> MetaName
httpEquiv :: (HTTPEquivType m h, StringType m s) => h -> s -> GenXML m
meta :: (MetaNameType m mn, StringType m s) => mn -> s -> GenXML m
object :: (EmbedAsChild m a, StringType m s1, StringType m s2) => [(s1, s2)] -> a -> GenXML m
param :: (StringType m s1, StringType m s2) => s1 -> s2 -> GenXML m
orderedList :: (EmbedAsChild m a) => [a] -> GenXML m
ul :: (EmbedAsChild m a) => [a] -> GenXML m
unorderedList :: (EmbedAsChild m a) => [a] -> GenXML m
ol :: (EmbedAsChild m a) => [a] -> GenXML m
listItem :: (EmbedAsChild m a) => a -> GenXML m
pre :: (EmbedAsChild m a) => a -> GenXML m
script :: (ScriptType m s, EmbedAsChild m a) => s -> a -> GenXMLList m
data JavaScript s
JavaScript :: s -> JavaScript s
data Option s
Selected :: s -> s -> Option s
Unselected :: s -> s -> Option s
mkOption :: (StringType m s) => s -> s -> Bool -> Option s
select' :: (OptionType m o) => [GenAttributeList m] -> [o] -> GenXML m
select :: (OptionType m o) => [o] -> GenXML m
multiSelect :: (OptionType m o) => [o] -> GenXML m
sizedSelect :: (IntType m i, OptionType m o) => i -> [o] -> GenXML m
sizedMultiSelect :: (IntType m i, OptionType m o) => i -> [o] -> GenXML m
option :: (OptionType m o) => o -> GenXML m
type OptGroup s o = (s, [o])
groupSelect :: (StringType m s, OptionType m o) => [OptGroup s o] -> GenXML m
optgroup :: (StringType m s, OptionType m o) => s -> [o] -> GenXML m
sup :: (EmbedAsChild m a) => a -> GenXML m
sub :: (EmbedAsChild m a) => a -> GenXML m
data Caption a
Caption :: a -> Caption a
NoCaption :: Caption a
capt :: a -> Caption a
noCapt :: Caption a
caption :: (EmbedAsChild m c) => c -> GenXML m
colgroup :: (EmbedAsAttr m a, IntType m i) => i -> [[a]] -> GenXML m
col :: (EmbedAsAttr m a) => [a] -> GenXML m
table :: (CaptionType m cap, EmbedAsChild m c) => cap -> [[c]] -> GenXML m
tableRow :: (EmbedAsChild m a) => [a] -> GenXML m
tableCell :: (EmbedAsChild m a) => a -> GenXML m
headFootTable :: (EmbedAsChild m h, EmbedAsChild m b, EmbedAsChild m f) => h -> [[b]] -> f -> GenXML m
instance [overlap ok] (XMLGenerator m, EmbedAsChild m c) => CaptionType m (Caption c)
instance [overlap ok] (EmbedAsChild m c) => EmbedAsChild m (Caption c)
instance [overlap ok] (StringType m s) => OptionType m (Option s)
instance [overlap ok] (StringType m s) => EmbedAsChild m (Option s)
instance [overlap ok] (StringType m s) => EmbedAsAttr m (Option s)
instance [overlap ok] (XMLGenerator m, EmbedAsChild m s) => ScriptType m (JavaScript s)
instance [overlap ok] (EmbedAsChild m s) => EmbedAsChild m (JavaScript s)
instance [overlap ok] (XMLGenerator m) => EmbedAsAttr m (JavaScript s)
instance [overlap ok] (XMLGenerator m) => MetaNameType m MetaName
instance [overlap ok] (XMLGenerator m) => EmbedAsAttr m MetaName
instance [overlap ok] (XMLGenerator m) => HTTPEquivType m HTTPEquiv
instance [overlap ok] (XMLGenerator m) => EmbedAsAttr m HTTPEquiv
instance [overlap ok] (XMLGenerator m, CheckedType m c, StringType m s) => InputType m (Input c s)
instance [overlap ok] (XMLGenerator m, CheckedType m c, StringType m s) => EmbedAsAttr m (Input c s)
instance [overlap ok] (XMLGenerator m) => CheckedType m Checked
instance [overlap ok] (XMLGenerator m) => EmbedAsAttr m Checked
instance [overlap ok] (XMLGenerator m) => BoolType m Bool
instance [overlap ok] (XMLGenerator m) => IntType m Int
instance [overlap ok] (XMLGenerator m) => StringType m String

module HSX.Layout
data Layout m
Above :: (Layout m) -> (Layout m) -> Layout m
Beside :: (Layout m) -> (Layout m) -> Layout m
Item :: (GenChildList m) -> Layout m
class IsLayout m a
toLayout :: (IsLayout m a) => a -> Layout m
above :: (IsLayout m a, IsLayout m b) => a -> b -> Layout m
beside :: (IsLayout m a, IsLayout m b) => a -> b -> Layout m
(^^) :: (IsLayout m a, IsLayout m b) => a -> b -> Layout m
(<>) :: (IsLayout m a, IsLayout m b) => a -> b -> Layout m
instance [overlap ok] (XMLGenerator m) => EmbedAsChild m (Layout m)
instance [overlap ok] (EmbedAsChild m c) => IsLayout m c
instance [overlap ok] IsLayout m (Layout m)
