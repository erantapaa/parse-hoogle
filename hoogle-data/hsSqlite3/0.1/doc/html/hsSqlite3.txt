-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Sqlite3 bindings
--   
--   Bindings for Sqlite3
@package hsSqlite3
@version 0.1

module Database.Sqlite3.Middle
type Db a = (DbError e, MonadError e m, MonadDb m) => m a
class DbError e
makeErr :: (DbError e) => CInt -> e
castErr :: (DbError e) => e -> Maybe CInt
class (MonadIO m) => MonadDb m
getDb :: (MonadDb m) => m (Ptr C'sqlite3)
putDb :: (MonadDb m) => Ptr C'sqlite3 -> m ()
cleanDb :: (MonadDb m) => m ()
isDbReady :: (MonadDb m) => m Bool
getSt :: (MonadDb m) => m (Ptr C'sqlite3_stmt)
putSt :: (MonadDb m) => Ptr C'sqlite3_stmt -> m ()
cleanSt :: (MonadDb m) => m ()
isStReady :: (MonadDb m) => m Bool
open :: String -> Db ()
close :: Db ()
prepare :: String -> Db ()
finalize :: Db ()
reset :: Db ()
step :: Db Bool
bindInt :: Int -> Int -> Db ()
bindDouble :: Int -> Double -> Db ()
bindText :: Int -> String -> Db ()
columnBytes :: Int -> Db Int
columnCount :: Db Int
columnInt :: Int -> Db Int
columnType :: Int -> Db Int
columnDouble :: Int -> Db Double
columnBlob :: Int -> Db ByteString
newCString :: String -> IO CString
err :: CInt -> Db ()

module Database.Sqlite3
sql :: String -> Db ()
bind :: (BindStack a) => String -> [Stack a] -> Db ()
runSimpleDb :: SimpleDb a -> IO a
data Stack a
Nil :: Stack ()
(:.) :: Stack a -> b -> Stack (Stack a, b)
type Nil = Stack ()
type :. a b = Stack (a, b)
class Cell a
bindT :: (Cell a) => Int -> a -> Db ()
columnT :: (Cell a) => Int -> Db a
idT :: (Cell a) => a -> Int
instance Cell Double
instance Cell Int
instance MonadDb (StateT SimpleState (ErrorT (Either CInt String) IO))
instance DbError (Either CInt a)
instance Error (Either CInt String)
instance BindStack ()
instance (BindStack a, Cell b) => BindStack (Stack a, b)
instance (ColumnStack a, Cell b) => ColumnStack (Stack a, b)
instance ColumnStack ()
instance (TypesStack a, Cell b) => TypesStack (Stack a, b)
instance TypesStack ()
instance (Length a) => Length (Stack a, b)
instance Show (Stack ())
instance Length ()
instance (Show a, Show b) => Show (Stack (a, b))
