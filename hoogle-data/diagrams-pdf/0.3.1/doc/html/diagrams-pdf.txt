-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | PDF backend for diagrams drawing EDSL
--   
--   This package provides a modular backend for rendering diagrams created
--   with the diagrams EDSL to PDF files. It uses <tt>HPDF</tt> making it
--   suitable for use on any platform.
--   
--   It is a very preliminary version where only the diagrams Logo
--   generation has been tested.
--   
--   The package provides the following modules:
--   
--   <ul>
--   <li><a>Diagrams.Backend.Pdf.CmdLine</a> - if you're just getting
--   started with diagrams, begin here.</li>
--   <li><a>Diagrams.Backend.Pdf</a> - look at this next. The general API
--   for the HPDF backend.</li>
--   </ul>
--   
--   Additional documentation can be found in the README file distributed
--   with the source tarball
@package diagrams-pdf
@version 0.3.1


-- | A Pdf rendering backend for diagrams.
--   
--   To build diagrams for Pdf rendering use the <tt>Pdf</tt> type in the
--   diagram type construction
--   
--   <pre>
--   d :: Diagram Pdf R2
--   d = ...
--   </pre>
--   
--   and render giving the <tt>Pdf</tt> token
--   
--   <pre>
--   renderDia Pdf (PdfOptions (Width 400)) d
--   </pre>
--   
--   This IO action will write the specified file.
--   
--   <i> Specific HPDF primitives </i>
--   
--   For details about the use of the HPDF specific primitives, the file
--   test.hs in this package can be used. You'll have to unpack the archive
--   for this package.
module Diagrams.Backend.Pdf

-- | This data declaration is simply used as a token to distinguish this
--   rendering engine.
data Pdf
Pdf :: Pdf

-- | Backend-specific rendering options.
sizeFromSpec :: SizeSpec2D -> (Double, Double)

-- | Style for a label. It is not considered as an attribute but as a
--   different primitive because internaly it is a complex text which can
--   support several styles in the same paragraph. Label is just a
--   convenience wrapper when the full features are not needed
data LabelStyle
LabelStyle :: FontName -> LabelSize -> Justification -> TextOrigin -> (Colour Double) -> LabelStyle
data TextOrigin
Center :: TextOrigin
LeftSide :: TextOrigin
RightSide :: TextOrigin
TopSide :: TextOrigin
BottomSide :: TextOrigin
TopLeftCorner :: TextOrigin
TopRightCorner :: TextOrigin
BottomLeftCorner :: TextOrigin
BottomRightCorner :: TextOrigin
type LabelSize = Int

-- | Typeset a text with a given style in a suggested box. The function is
--   returning a diagram for the text and a diagram for the bounding box
--   which may be smaller than the suggested size : smaller width when the
--   algorithm has done some line justification. The text may also be
--   bigger than the suggested width in case of overflow (similar to the
--   way TeX is doing thing. There are settings in HPDF to control the
--   elegance of the line cuts but those settings are not accessible from
--   this simple API). The text will not be longer than the suggested
--   height. In that case the additional text is not displayed except
--   perhaps partially the last line since no clipping is done.
pdfLabelWithSuggestedSize :: (Renderable PdfTextBox Pdf, Renderable (Path R2) Pdf) => LabelStyle -> String -> Double -> Double -> (Diagram Pdf R2, Diagram Pdf R2)

-- | Similar to the <tt>pdfLabelWithSuggestedSize</tt> but supporting the
--   full features of HPDF
pdfTextWithSuggestedSize :: (ParagraphStyle ps s, Style s, Renderable PdfTextBox Pdf, Renderable (Path R2) Pdf) => TextOrigin -> Double -> Double -> ps -> s -> TM ps s () -> (Diagram Pdf R2, Diagram Pdf R2)

-- | Similar to the <tt>pdfLabelWithSuggestedSize</tt> but here the size is
--   forced and even if the bounding box of the text is smaller it will not
--   be taken into account for the diagram envelope.
pdfLabelWithSize :: (Renderable PdfTextBox Pdf, Renderable (Path R2) Pdf) => LabelStyle -> String -> Double -> Double -> Diagram Pdf R2

-- | Similar to <tt>pdfTextWithSuggestedSize</tt> but the size if forced
--   and not just suggested
pdfTextWithSize :: (ParagraphStyle ps s, Style s, Renderable PdfTextBox Pdf, Renderable (Path R2) Pdf) => TextOrigin -> Double -> Double -> ps -> s -> TM ps s () -> Diagram Pdf R2

-- | Create an image diagram
pdfImage :: (Monad m, PDFGlobals m) => PDFReference PDFJpeg -> m (Diagram Pdf R2)

-- | Create an URL diagram
pdfURL :: String -> Double -> Double -> Diagram Pdf R2

-- | Define Axial shading for a diagram
pdfAxialShading :: HasStyle a => P2 -> P2 -> Colour Double -> Colour Double -> a -> a

-- | Define Radial shading for a diagram
pdfRadialShading :: HasStyle a => P2 -> Double -> P2 -> Double -> Colour Double -> Colour Double -> a -> a
instance Monad DrawS
instance MonadState StateStack DrawS
instance Show (Options Pdf R2)
instance Transformable TransSh
instance Renderable PdfURL Pdf
instance Renderable PdfImage Pdf
instance Renderable PdfTextBox Pdf
instance Renderable Text Pdf
instance Renderable (Path R2) Pdf
instance Renderable (Trail R2) Pdf
instance Renderable (Segment Closed R2) Pdf
instance Monoid (Render Pdf R2)
instance Backend Pdf R2
instance Typeable Pdf
instance Eq Pdf
instance Ord Pdf
instance Read Pdf
instance Show Pdf
instance Eq FillingMode
instance Show FillingMode


-- | Convenient creation of command-line-driven executables for rendering
--   diagrams using the Pdf backend.
--   
--   <ul>
--   <li><a>defaultMain</a> creates an executable which can render a single
--   diagram at various options.</li>
--   </ul>
module Diagrams.Backend.Pdf.CmdLine

-- | This is the simplest way to render diagrams, and is intended to be
--   used like so:
--   
--   <pre>
--   ... other definitions ...
--   myDiagram = ...
--   
--   main = defaultMain myDiagram
--   </pre>
--   
--   Compiling a source file like the above example will result in an
--   executable which takes command-line options for setting the size,
--   output file, and so on, and renders <tt>myDiagram</tt> with the
--   specified options.
--   
--   Pass <tt>--help</tt> to the generated executable to see all available
--   options. Currently it looks something like
--   
--   <pre>
--    Command-line diagram generation.
--   
--   Foo [OPTIONS]
--   
--   Common flags:
--      -w --width=INT    Desired width of the output image (default 400)
--      -h --height=INT   Desired height of the output image (default 400)
--      -o --output=FILE  Output file
--      -c --compressed   Compressed PDF file
--      -? --help         Display help message
--      -V --version      Print version information
--   </pre>
--   
--   For example, a couple common scenarios include
--   
--   <pre>
--    $ ghc --make MyDiagram
--   
--   # output image.eps with a width of 400pt (and auto-determined height)
--    $ ./MyDiagram --compressed -o image.pdf -w 400
--   </pre>
defaultMain :: Diagram Pdf R2 -> IO ()

-- | Generate a multipage PDF document from several diagrams. Each diagram
--   is scaled to the page size
multipleMain :: [Diagram Pdf R2] -> IO ()

-- | This data declaration is simply used as a token to distinguish this
--   rendering engine.
data Pdf
instance Typeable DiagramOpts
instance Show DiagramOpts
instance Data DiagramOpts
