-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell PCRE binding
--   
--   A binding to Perl's advanced regular expression library, PCRE, for
--   Haskell programs; this library is used by the Pugs
--   interpreter/compiler.
@package pugs-hsregex
@version 1.0

module RRegex.PCRE

-- | A compiled regular expression
data Regex

-- | Compiles a regular expression
compile :: String -> Int -> IO (Either (Int, String) Regex)

-- | Matches a regular expression against a string
execute :: Regex -> String -> Int -> IO (Maybe (Array Int (Int, Int)))

-- | execute match and extract substrings rather than just offsets
executeExtract :: Regex -> String -> Int -> IO (Maybe (String, String, Array Int String))
pcreCaseless :: Int
pcreMultiline :: Int
pcreDotall :: Int
pcreExtended :: Int
pcreAnchored :: Int
pcreDollarEndonly :: Int
pcreExtra :: Int
pcreNotbol :: Int
pcreNoteol :: Int
pcreUngreedy :: Int
pcreNotempty :: Int
pcreUtf8 :: Int
numSubs :: Regex -> IO Int

-- | return version of pcre used or Nothing if pcre is not available.
getVersion :: Maybe String
instance Typeable PCRE
instance Show Regex
instance Eq Regex
instance Ord Regex
instance Data Regex
instance Data PCRE
instance Typeable Regex


-- | basic usage:
--   
--   string =~ 'regular expression' returns different things depending on
--   context
--   
--   type - what it evaluates to --------------------------- Int - number
--   of times the regular expression matches String - matching portion of
--   string (String,String,String) - (text before match, matching text,
--   text after match) [Either String String] - list of matching and
--   nonmatching strings, if concated, the original string results. Left =
--   notmatching, Right = matching. Bool - whether the string matches () -
--   always returns () (useful in monad context, see below) [String] - list
--   of matches Array Int String - list of substring matches for first
--   match (String, Array Int String) - full matching text and substring
--   matches [(String, Array Int String)] - all matches, full match plus
--   substrings [Array Int String] - all substrings from all matches
--   
--   also, there is the monadic version (=~~) which always behaves exactly
--   the same as (=~) except when the match fails, instead of returning a
--   default value, the monad fails.
--   
--   regular expressions:
--   
--   these may be strings, which are interpreted as regular expressions, or
--   Regex's from the Text.Regex module. or any other instance of the
--   RegexLike class.
--   
--   when using strings, you may prefix the regex by <a>(?flags)</a> where
--   flags is one of <tt>i</tt> for a case insensitive match and <tt>m</tt>
--   means a multi-line match. other flags may be available depending on
--   your implementation
--   
--   advanced features:
--   
--   not just strings can be matched, but rather lists of anything a
--   matcher is defined for. RegexLikeImp data class can be used for
--   in-place code generated by template haskell for compile-time checked
--   regular expresions
module RRegex.Syntax

-- | instances of this class may be used as regular expressions with this
--   syntax.
class RegexLike r a | r -> a
matchTest :: (RegexLike r a) => r -> [a] -> Bool
matchCount :: (RegexLike r a) => r -> [a] -> Int
matchAll :: (RegexLike r a) => r -> [a] -> [(Array Int (Int, Int))]
matchOnce :: (RegexLike r a) => r -> [a] -> Bool -> Maybe (Array Int (Int, Int))
matchShow :: (RegexLike r a) => r -> String
class RegexContext x a
(=~) :: (RegexContext x a, RegexLike r x) => [x] -> r -> a
(=~~) :: (RegexContext x a, Monad m, RegexLike r x) => [x] -> r -> m a

-- | check if regular expression does not match
(!~~) :: (RegexLike r x) => [x] -> r -> Bool
data MatchResult a
MR :: [a] -> [a] -> [a] -> [[a]] -> Array Int [a] -> MatchResult a
mrBefore :: MatchResult a -> [a]
mrMatch :: MatchResult a -> [a]
mrAfter :: MatchResult a -> [a]
mrSubList :: MatchResult a -> [[a]]
mrSubs :: MatchResult a -> Array Int [a]
instance RegexLike String Char
instance RegexContext x (Array Int [x])
instance RegexContext x [Array Int ([x], (Int, Int))]
instance RegexContext x [Array Int [x]]
instance RegexContext x [[x]]
instance RegexContext x ()
instance RegexContext x Bool
instance RegexContext x [x]
instance RegexContext x (MatchResult x)
instance RegexContext x ([x], [x], [x], Array Int [x])
instance RegexContext x ([x], [x], [x])
instance RegexContext x Int
instance RegexLike Regex Char


-- | Regular expressions, based on PCRE.
--   
--   <pre>
--   A king he was on carven throne
--   In many-pillared halls of stone
--   With golden roof and silver floor,
--   And runes of power upon the door...
--   </pre>
module RRegex

-- | A compiled regular expression
data Regex

-- | Makes a regular expression with the default options (multi-line,
--   case-sensitive). The syntax of regular expressions is otherwise that
--   of <tt>egrep</tt> (i.e. POSIX "extended" regular expressions). Note:
--   this is arguably the incorrect default. single line is the default
--   everywhere else.
mkRegex :: String -> Regex

-- | Makes a regular expression, where the multi-line and case-sensitve
--   options can be changed from the default settings.
mkRegexWithOpts :: String -> Bool -> Bool -> Regex

-- | Makes a regular expression with PCRE flags
mkRegexWithPCRE :: String -> [Int] -> Regex

-- | Match a regular expression against a string
matchRegex :: Regex -> String -> Maybe [String]

-- | Match a regular expression against a string, returning more
--   information about the match.
matchRegexAll :: Regex -> String -> Maybe (String, String, String, [String])
matchRegexWithPCRE :: Regex -> String -> Int -> IO (Maybe (Array Int (Int, Int)))
numSubs :: Regex -> IO Int
pcreCaseless :: Int
pcreMultiline :: Int
pcreDotall :: Int
pcreExtended :: Int
pcreAnchored :: Int
pcreDollarEndonly :: Int
pcreExtra :: Int
pcreNotbol :: Int
pcreNoteol :: Int
pcreUngreedy :: Int
pcreNotempty :: Int
pcreUtf8 :: Int
