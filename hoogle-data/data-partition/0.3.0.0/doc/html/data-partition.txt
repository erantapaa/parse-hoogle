-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A pure disjoint set (union find) data structure
--   
@package data-partition
@version 0.3.0.0


-- | Disjoint set data structure -- <tt>Partition a</tt> maintains a
--   collection of disjoint sets of type <tt>a</tt>, with the ability to
--   find which set a particular item belongs to and the ability to merge
--   any two such sets into one.
module Data.Partition

-- | A Partition of <tt>a</tt>: represents a collection of disjoint sets of
--   <tt>a</tt> whose union includes every element of <tt>a</tt>.
--   Semantics: <tt>[[Partition a]] = P(P(a))</tt> where <tt>P</tt> is the
--   power set operation.
data Partition a

-- | A partition in which every element of <tt>a</tt> is in its own set.
--   Semantics: <tt>[[discrete]] = { { x } | x in a }</tt>
discrete :: Partition a

-- | Synonym for <tt>discrete</tt>.
empty :: Partition a

-- | Takes a list of (not necessarily disjoint) sets and constructs a
--   partition that associates all elements shared in <i>any</i> of the
--   sets.
--   
--   <i>O</i> (<i>n</i> <i>k</i> log <i>n</i>), where <i>k</i> is the
--   maximum set-size and <i>n</i> = <i>l</i> <i>k</i> is the total number
--   of non-discrete elements.
fromSets :: Ord a => [Set a] -> Partition a

-- | Takes a list of disjoint sets and constructs a partition containing
--   those sets, with every remaining element being given its own set. The
--   precondition is not checked.
--   
--   <i>O</i> (<i>n</i> log <i>n</i>), where <i>n</i> is the total number
--   of elements in the given sets.
fromDisjointSets :: Ord a => [Set a] -> Partition a

-- | Returns a list of all nontrivial sets (sets with more than one
--   element) in the partition.
nontrivialSets :: Partition a -> [Set a]

-- | <tt>joinElems x y</tt> merges the two sets containing <tt>x</tt> and
--   <tt>y</tt> into a single set. Semantics: <tt>[[joinElems x y p]] = (p
--   `minus` find x `minus` find y) `union` { find x `union` find y }</tt>.
--   
--   <i>O</i> (max(<i>k</i> log <i>n</i>, <i>k</i> log <i>k</i>)), where
--   <i>k</i> is the size of nontrivial subsets and <i>n</i> is the total
--   number of elements in such sets.
joinElems :: Ord a => a -> a -> Partition a -> Partition a

-- | <tt>find p x</tt> finds the set that the element <tt>x</tt> is
--   associated with. Semantics: <tt>[[find p x]] = the unique s in p such
--   that x in s</tt>.
find :: Ord a => Partition a -> a -> Set a

-- | <tt>rep p x</tt> finds the minimum element in the set containing
--   <tt>x</tt>.
rep :: Ord a => Partition a -> a -> a
instance Eq a => Eq (Partition a)
instance Ord a => Ord (Partition a)
instance Show a => Show (Partition a)
