-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The Haskell Stream Processor command line utility
--   
--   The Haskell Stream Processor is a command line utility to process
--   streams using Haskell code. It is intended to be used in a UNIX
--   pipeline. It offers a configuration system to personalize imported
--   modules and a way to represent values on the console.
@package hsprocess
@version 0.3

module System.Console.HSProcess.Representable

-- | A Row is something that can be expressed as a line. The output of
--   repr' should be formatted such that it can be read and processed from
--   the command line.
--   
--   For example:
--   
--   <pre>
--   &gt;&gt;&gt; IO.putStrLn $ show [1,2,3,4]
--   [1,2,3,4]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; Data.ByteString.Lazy.Char8.putStrLn $ repr' [1,2,3,4]
--   1 2 3 4
--   </pre>
class Show a => Row a where repr' = pack . show
repr' :: Row a => a -> ByteString

-- | A type that instantiate Rows is a type that can be represented as a
--   list of rows, where typically a row is a line.
--   
--   For example:
--   
--   <pre>
--   &gt;&gt;&gt; mapM_ Data.ByteString.Lazy.Char8.putStrLn $ repr [1,2,3,4]
--   1
--   2
--   3
--   4
--   </pre>
class Show a => Rows a where repr = (: []) . pack . show
repr :: Rows a => a -> [ByteString]
printRows :: Rows a => Bool -> a -> IO ()
printRow :: Row a => Bool -> a -> IO ()
instance (Row a, Row b, Row c) => Row (a, b, c)
instance (Row a, Row b) => Row (a, b)
instance Row a => Row (Maybe a)
instance Row ByteString
instance (Row a, Row b) => Row (Map a b)
instance ListAsRow a => Row (Set a)
instance ListAsRow a => Row [a]
instance (Row a, Row b) => ListAsRow (a, b)
instance ListAsRow ByteString
instance ListAsRow Char
instance ListAsRow a => ListAsRow [a]
instance ListAsRow ()
instance ListAsRow Integer
instance ListAsRow Int
instance ListAsRow Float
instance ListAsRow Bool
instance Row Char
instance Row ()
instance Row Integer
instance Row Int
instance Row Double
instance Row Float
instance Row Bool
instance (Row a, Row b) => ListAsRows (Map a b)
instance (ListAsRow a, ListAsRows a) => ListAsRows (Set a)
instance ListAsRows a => Rows [a]
instance ListAsRows Char
instance (Row a, Row b, Row c) => ListAsRows (a, b, c)
instance (Row a, Row b) => ListAsRows (a, b)
instance (ListAsRow a, ListAsRows a) => ListAsRows [a]
instance ListAsRows ()
instance Row a => ListAsRows (Maybe a)
instance ListAsRows Integer
instance ListAsRows Int
instance ListAsRows Float
instance ListAsRows Double
instance ListAsRows Bool
instance ListAsRows ByteString
instance ListAsRows a => Rows (Set a)
instance (Row a, Row b) => Rows (Map a b)
instance (Row a, Row b) => Rows (a, b)
instance Rows a => Rows (Maybe a)
instance Rows ByteString
instance Rows Char
instance Rows ()
instance Rows Integer
instance Rows Int
instance Rows Float
instance Rows Double
instance Rows Bool
