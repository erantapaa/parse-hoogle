-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | cwmwl udp message queue
--   
--   CMQ is a lightweight message queue using the UDP protocol as transport
--   protocol. It trades guarantees, consistency mechanisms, (shared) state
--   and transactions for robustness, scalability and performance. CMQ
--   fares especially well in modern Layer 2 switches in data center
--   networks, as well as in the presence of errors. This library provides
--   CMQ version = 0.0.12
@package CMQ
@version 0.0.12


-- | CMQ, a UDP-based inherently asynchronous message queue to orchestrate
--   messages, events and processes in the cloud. It trades guarantees,
--   consistency mechanisms, (shared) state and transactions for
--   robustness, scalability and performance. CMQ fares especially well in
--   modern Layer 2 switches in data center networks, as well as in the
--   presence of errors. A <tt>Message</tt> is pushed to the queue together
--   with a queue identifier (<a>Cmq</a>) and a <a>KEY</a> that specifies
--   the recipient. Messages can be pushed in logarithmic time and the next
--   message can be retrieved in constant time.
--   
--   This implementation is based on
--   
--   <ul>
--   <li>J. Fritsch, C. Walker, <i>CMQ - A lightweight, asynchronous
--   high-performance messaging queue for the cloud (2012)</i>.</li>
--   </ul>
module System.CMQ

-- | General purpose finite queue.
data Cmq a

-- | The abstract data type to express an IPv4 address. To create this, use
--   <a>toIPv4</a>. Or use <a>read</a> <tt>"192.0.2.1"</tt> :: <a>IPv4</a>,
--   for example. Also, <tt>"192.0.2.1"</tt> can be used as literal with
--   OverloadedStrings.
--   
--   <pre>
--   &gt;&gt;&gt; read "192.0.2.1" :: IPv4
--   192.0.2.1
--   </pre>
data IPv4 :: *
type KEY = (IPv4, Integer)

-- | Builds and returns a new instance of Cmq.
--   
--   <pre>
--   (token) &lt;- newRq soc 512 200
--   </pre>
newRq :: Serialize a => Socket -> Int -> Rational -> IO (Cmq a)

-- | <i>O(log n)</i>. Push a message to the queue.
--   
--   <pre>
--   cwPush soc ("192.168.35.69", 0) ("ping" :: String) token 
--   </pre>
cwPush :: Serialize a => Socket -> KEY -> a -> Cmq a -> IO ()

-- | <i>O(1)</i>. A message is popped of CMQ. The next value is read from
--   the queue. Use for example
--   
--   <pre>
--   msg &lt;- cwPop token :: IO (Maybe String)
--   </pre>
--   
--   or with ScopedTypeVariables
--   
--   <pre>
--   (msg :: Maybe String) &lt;- cwPop token
--   </pre>
cwPop :: Cmq a -> IO (Maybe a)
