-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The xml parser for aws-sdk package
--   
--   This package provides the unordered xml parser for aws-sdk package.
@package aws-sdk-xml-unordered
@version 0.3.1

module Cloud.AWS.Lib.Parser.Unordered
data XmlElement
type ElementPath = Tree ElementName
data ElementName

-- | infix version of <a>Node</a>
(.=) :: ElementName -> [ElementPath] -> ElementPath
(.-) :: ElementName -> ElementPath -> ElementPath
tag :: ToText a => a -> ElementName
end :: ElementName -> ElementPath
anytag :: ElementName
data ParseError
ParseError :: Text -> ParseError
parseErrorMessage :: ParseError -> Text

-- | top-level xml element consumer. e.g.,
elementConsumer :: MonadThrow m => Consumer Event m XmlElement

-- | map from <a>Event</a> to <a>XmlElement</a>.
elementConduit :: MonadThrow m => ElementPath -> Conduit Event m XmlElement
convert :: MonadThrow m => (XmlElement -> m a) -> ConduitM XmlElement o m a

-- | if conversion is success, it consume an element. otherwise, it does
--   not consume any elements.
tryConvert :: MonadBaseControl IO m => (XmlElement -> m a) -> ConduitM XmlElement o m (Maybe a)
convertMany :: MonadBaseControl IO m => (XmlElement -> m a) -> ConduitM XmlElement o m [a]
convertConduit :: MonadBaseControl IO m => (XmlElement -> m a) -> Conduit XmlElement m a
content :: (MonadThrow m, FromText t) => XmlElement -> m t

-- | the operator like aeson's (.:).
(.<) :: (MonadThrow m, FromText a) => XmlElement -> Text -> m a

-- | This function throws error if the result of <a>elementM</a> is
--   Nothing.
element :: MonadThrow m => Text -> (XmlElement -> m a) -> XmlElement -> m a

-- | 'elementM conv name el' return Nothing if <tt>el</tt> doesn't have any
--   elements named <a>name</a>. otherwise, return 'Just a'.
elementM :: MonadThrow m => Text -> (XmlElement -> m a) -> XmlElement -> m (Maybe a)
elements :: MonadThrow m => Text -> Text -> (XmlElement -> m a) -> XmlElement -> m [a]
