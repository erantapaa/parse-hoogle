-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Haskell port of the C/PHP strtok function
--   
--   This package provides a Haskell version of the strtok function from
--   C/PHP. Successive calls of this function return tokens (delimited by
--   given delimiting characters) from a string (or a list), one by one.
@package acme-strtok
@version 0.1.0.3


-- | This module provides the function <tt>strTok</tt>, a variant of the
--   <tt>strtok</tt> function in C and PHP. This function can be used to
--   tokenise a string (or, more generally, a list) with successive calls
--   of the <tt>strtok</tt> function. Since <tt>strTok</tt> is a stateful
--   function (it produces different results when called with the same
--   parameter multiple times), computations using <tt>strTok</tt> must
--   take place in the <tt>StrTok</tt> monad or the <tt>StrTokT</tt> monad
--   transformer.
module Acme.StrTok

-- | The <tt>StrTokT</tt> monad, parametrised with:
--   
--   <ul>
--   <li><tt>s</tt> - The type of list elements (e.g. <tt>Char</tt> if the
--   input to <tt>strTok</tt> is a <tt>String</tt>).</li>
--   <li><tt>m</tt> - The inner monad.</li>
--   </ul>
data StrTokT s m a

-- | Executes a <tt>strTok</tt> computation in the state transformer monad
--   <tt>StrTokT</tt>.
runStrTokT :: Functor m => StrTokT s m a -> m a

-- | The <tt>StrTok</tt> monad.
type StrTok s = StrTokT s Identity

-- | Executes a <tt>strTok</tt> computation in the state monad
--   <tt>StrTok</tt>.
runStrTok :: StrTok s a -> a

-- | A Haskell variant of the <tt>strtok</tt> function from C and PHP. This
--   function splits a string into tokens which are delimited by a given
--   set of characters. A call with <tt>Just s</tt> and the delimiting
--   characters <tt>ds</tt> will yield the first token in <tt>s</tt> that
--   is delimited by characters from <tt>ds</tt>. Every subsequent call of
--   <tt>strTok</tt> with <tt>Nothing</tt> will yield the next token. If
--   the string contains no more tokens, an empty list is returned.
--   
--   <tt>strTok</tt> returns a stateful computation of type <tt>StrTokT a m
--   [a]</tt> (or <tt>StrTok a [a]</tt>). Several invocations of
--   <tt>strTok</tt> and computations with the results can be chained in
--   the <tt>StrTokT</tt> (resp. <tt>StrTok</tt>) monad and then executed
--   with <tt>runStrTokT</tt> (resp. <tt>runStrTok</tt>).
--   
--   Example:
--   
--   <pre>
--   runStrTokT $
--         do a &lt;- strTok (Just "- This, a sample string.") " ,.-"
--            b &lt;- strTok Nothing " ,.-"
--            c &lt;- strTok Nothing ",.-"
--            return (a, b, c)
--   </pre>
--   
--   evaluates to
--   
--   <pre>
--   ("This","a"," sample string")
--   </pre>
strTok :: (Eq a, Monad m) => Maybe [a] -> [a] -> StrTokT a m [a]
instance Functor m => Functor (StrTokT s m)
instance (Monad m, Functor m) => Applicative (StrTokT s m)
instance (Functor m, MonadPlus m) => Alternative (StrTokT s m)
instance Monad m => Monad (StrTokT s m)
instance MonadPlus m => MonadPlus (StrTokT s m)
instance MonadFix m => MonadFix (StrTokT s m)
instance MonadTrans (StrTokT s)
instance MonadIO m => MonadIO (StrTokT s m)
