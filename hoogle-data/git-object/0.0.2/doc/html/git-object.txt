-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Git object and its parser
--   
--   This package provides data types for Git objects, enumerator-based
--   parser of Git object files and manipulation functions.
@package git-object
@version 0.0.2


-- | Types for Git objects and a parser of Git object files.
module Data.Git

-- | Parsing a Git file to <a>GitObject</a>. This parser based on
--   attoparsec-enumerator.
parseGitObject :: FilePath -> IO GitObject
data GitType
GtBlob :: GitType
GtTree :: GitType
GtCommit :: GitType
GtTag :: GitType
type Size = Int
data GitObject
GoBlob :: Size -> Blob -> GitObject
GoTree :: Size -> [GitTreeEntry] -> GitObject
GoCommit :: Size -> GitCommit -> GitObject
GoTag :: Size -> GitTag -> GitObject
type Blob = ByteString
data GitTreeEntry
GitTreeEntry :: FileType -> FilePath -> SHA1 -> GitTreeEntry
fileType :: GitTreeEntry -> FileType
fileName :: GitTreeEntry -> FilePath
fileRef :: GitTreeEntry -> SHA1
data FileType
RegularFile :: FileMode -> FileType
Directory :: FileType
SymbolicLink :: FileType
GitLink :: FileType
data GitCommit
GitCommit :: SHA1 -> [SHA1] -> ByteString -> ByteString -> ByteString -> GitCommit
commitRef :: GitCommit -> SHA1
commitParents :: GitCommit -> [SHA1]
commitAuthor :: GitCommit -> ByteString
committer :: GitCommit -> ByteString
commitLog :: GitCommit -> ByteString
data GitTag
GitTag :: SHA1 -> ByteString -> ByteString -> ByteString -> ByteString -> GitTag
tagRef :: GitTag -> SHA1
tagType :: GitTag -> ByteString
tagName :: GitTag -> ByteString
tagger :: GitTag -> ByteString
tagLog :: GitTag -> ByteString
newtype SHA1
SHA1 :: String -> SHA1


-- | Manipulating <a>GitObject</a>.
module System.Git

-- | Getting <a>GitObject</a> of 'GoBlob'/'GoTree' corresponding to
--   <a>GitPath</a>.
gitPathToGitObject :: GitPath -> IO (Either SomeException GitObject)
data GitError
GitDirNotExist :: GitError
GitEntryNotExist :: GitError

-- | Type for the path to Git repository directories.
type GitDir = FilePath

-- | Type for the absolute path from the project root.
type GitPath = FilePath

-- | Finding <a>GitDir</a> by tracking from the current directory to the
--   root of the file system.
findGitDir :: IO GitDir

-- | Getting <a>SHA1</a> of the project root.
rootSha1 :: GitDir -> IO SHA1

-- | Getting <a>GitObject</a> of <a>GoBlob</a> corresponding to the project
--   root.
rootCommitObj :: GitDir -> IO GitObject

-- | Getting <a>SHA1</a> corresponding to <a>GitPath</a>.
gitPathToSha1 :: GitPath -> GitDir -> IO SHA1

-- | Getting <a>GitObject</a> of 'GoBlob'/'GoTree' corresponding to
--   <a>GitPath</a>.
gitPathToObj :: GitPath -> GitDir -> IO GitObject

-- | Getting <a>FilePath</a> to the Git object file according to
--   <a>SHA1</a>.
sha1ToObjFile :: SHA1 -> GitDir -> FilePath

-- | Getting <a>GitObject</a> according to <a>SHA1</a>.
sha1ToObj :: SHA1 -> GitDir -> IO GitObject
instance Typeable GitError
instance Show GitError
instance Exception GitError
