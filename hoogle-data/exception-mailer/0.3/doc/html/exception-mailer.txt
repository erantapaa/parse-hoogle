-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Catch all runtime exceptions and send an email
--   
--   This module is designed to be used in production code when no runtime
--   exceptions are expected. This module will catch any unexpected runtime
--   exception and send a notification email
@package exception-mailer
@version 0.3


-- | Module to catch uncaught exceptions and send a notification email
module System.ExceptionMailer

-- | String tag used for logging to <a>System.Log.Logger</a>
exceptionMailerTag :: String

-- | Setup the global exception notifier. This will catch any otherwise
--   uncaught exceptions and send an email to the given address.
--   
--   For example,
--   
--   <pre>
--   setupExceptionMailer (mkAddress "My Program" "noreply@example.com")
--                          (mkAddress "Sysadmin" "sysadmin@example.com")
--   </pre>
setupExceptionMailer :: Address -> Address -> Maybe String -> String -> IO ()

-- | Convenience version of <a>setupExceptionMailer</a> that just accepts
--   the email addresses
setupExceptionMailer' :: String -> String -> Maybe String -> String -> IO ()

-- | Setup the global exception notifier. Like <a>setupExceptionMailer</a>
--   but allows a custom action after the email is send
setupExceptionMailer_adv :: Address -> Address -> Maybe String -> String -> (SomeException -> IO ()) -> IO ()

-- | Helper function to convert a name and email address into a proper
--   <a>Address</a>
mkAddress :: String -> String -> Address

-- | Send an error email. Exported so that it may be re-used from your own
--   exception handling routines
mailError :: Address -> Address -> Maybe String -> String -> IO ()
data Address :: *
