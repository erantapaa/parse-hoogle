-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A JSON REST API
--   
@package hairy
@version 0.1.3

module Hairy.Models
data Task
Task :: !Text -> !UTCTime -> Task
taskContent :: Task -> !Text
taskCreated :: Task -> !UTCTime
type TaskId = Key Task
migrateAll :: Migration
instance Show (Key Task)
instance Read (Key Task)
instance Eq (Key Task)
instance Ord (Key Task)
instance PathPiece (Key Task)
instance PersistField (Key Task)
instance PersistFieldSql (Key Task)
instance ToJSON (Key Task)
instance FromJSON (Key Task)
instance FromJSON (Entity Task)
instance ToJSON (Entity Task)
instance FromJSON Task
instance ToJSON Task
instance ToBackendKey SqlBackend Task
instance PersistEntity Task
instance PersistFieldSql Task
instance PersistField Task

module Hairy
main :: IO ()
getConfig :: IO Config
data Config
Config :: Environment -> ConnectionPool -> Config
environment :: Config -> Environment
pool :: Config -> ConnectionPool
getEnvironment :: IO Environment
data Environment
Development :: Environment
Production :: Environment
Test :: Environment
getPool :: Environment -> IO ConnectionPool
getConnectionString :: Environment -> IO ConnectionString
getDefaultConnectionString :: Environment -> ConnectionString
createConnectionString :: [(Text, Text)] -> ConnectionString
getConnectionSize :: Environment -> Int
runApplication :: Config -> IO ()
newtype ConfigM a
ConfigM :: ReaderT Config IO a -> ConfigM a
runConfigM :: ConfigM a -> ReaderT Config IO a
getOptions :: Environment -> IO Options
getSettings :: Environment -> IO Settings
getPort :: IO (Maybe Int)
type Error = Text
application :: ScottyT Error ConfigM ()
runDB :: (MonadTrans t, MonadIO (t ConfigM)) => SqlPersistT IO a -> t ConfigM a
loggingM :: Environment -> Middleware
type Action = ActionT Error ConfigM ()
defaultH :: Environment -> Error -> Action
getTasksA :: Action
postTasksA :: Action
getTaskA :: Action
putTaskA :: Action
deleteTaskA :: Action
toKey :: ToBackendKey SqlBackend a => Integer -> Key a
notFoundA :: Action
instance Eq Environment
instance Read Environment
instance Show Environment
instance Applicative ConfigM
instance Functor ConfigM
instance Monad ConfigM
instance MonadIO ConfigM
instance MonadReader Config ConfigM
