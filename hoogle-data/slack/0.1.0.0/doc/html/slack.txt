-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell API for interacting with Slack
--   
--   Visit https:/<i>api.slack.com</i>web in order to get your API token
@package slack
@version 0.1.0.0

module Network.Slack.User

-- | A Slack User
data User
User :: String -> String -> User
userId :: User -> String
userName :: User -> String

-- | Gets the list of users associated with the Slack team
users :: Slack [User]

-- | Converts a user ID to a user object, signaling an error if there's no
--   such user ID
userFromId :: String -> Slack User

-- | Converts a user name to a user object, signaling an error if there's
--   no such user name
userFromName :: String -> Slack User

module Network.Slack.Channel

-- | A more useable version of ChannelRaw
data Channel
Channel :: String -> String -> [User] -> Channel
channelId :: Channel -> String
channelName :: Channel -> String
channelMembers :: Channel -> [User]

-- | List of all channels associated with the team
channels :: Slack [Channel]

-- | Retrieves the Channel with the corresponding name
channelFromName :: String -> Slack Channel
instance Show ChannelRaw
instance Generic ChannelRaw
instance Show Channel
instance Datatype D1ChannelRaw
instance Constructor C1_0ChannelRaw
instance Selector S1_0_0ChannelRaw
instance Selector S1_0_1ChannelRaw
instance Selector S1_0_2ChannelRaw
instance SlackResponseName [ChannelRaw]
instance FromJSON ChannelRaw

module Network.Slack.Message

-- | A nicer version of MessageRaw, with the user id converted to a User
data Message
Message :: String -> Maybe User -> String -> TimeStamp -> Message
messageType :: Message -> String
messageUser :: Message -> Maybe User
messageText :: Message -> String
messageTimeStamp :: Message -> TimeStamp

-- | A message sent on a channel. Message can also mean things like user
--   joined or a message was edited TODO: Make this into a sum type of
--   different message types, instead of using Maybe
data MessageRaw
MessageRaw :: String -> Maybe String -> String -> TimeStamp -> MessageRaw
_messageType :: MessageRaw -> String
_messageUser :: MessageRaw -> Maybe String
_messageText :: MessageRaw -> String
_messageTs :: MessageRaw -> TimeStamp

-- | Converts a MessageRaw into a Message
convertRawMessage :: MessageRaw -> Slack Message

-- | Fixed point number with 12 decimal places of precision
newtype TimeStamp
TimeStamp :: UTCTime -> TimeStamp
utcTime :: TimeStamp -> UTCTime

-- | Converts a TimeStamp to the timestamp format the Slack API expects
timeStampToString :: TimeStamp -> String

-- | List of the past n messages in the given channel n must be no greater
--   than 1000
channelHistory :: Int -> Channel -> Slack [Message]

-- | Gets the n messages occuring before the given time
channelHistoryBefore :: Int -> TimeStamp -> Channel -> Slack [Message]

-- | Retrieves the entire channel history
channelHistoryAll :: Channel -> Slack [Message]

-- | Retrieves a list of the most recent messages within the last n seconds
channelHistoryRecent :: Int -> Channel -> Slack [Message]

-- | Retrieves the messages by the given user
messagesByUser :: User -> [Message] -> [Message]

-- | Posts a message as the given user to the given channel. Returns the
--   timestamp of the message, if successful
postMessage :: String -> String -> Channel -> Slack TimeStamp
instance Show TimeStamp
instance Eq TimeStamp
instance Ord TimeStamp
instance Show MessageRaw
instance Generic MessageRaw
instance Show Message
instance Eq Message
instance Datatype D1MessageRaw
instance Constructor C1_0MessageRaw
instance Selector S1_0_0MessageRaw
instance Selector S1_0_1MessageRaw
instance Selector S1_0_2MessageRaw
instance Selector S1_0_3MessageRaw
instance SlackResponseName [MessageRaw]
instance FromJSON MessageRaw
instance SlackResponseName TimeStamp
instance FromJSON TimeStamp

module Network.Slack

-- | The Slack monad. It executes commands with the context of possible
--   failure (malformed requests, Slack is down, etc...), and some internal
--   state
newtype Slack a
Slack :: EitherT SlackError (StateT SlackState IO) a -> Slack a
runSlackInternal :: Slack a -> EitherT SlackError (StateT SlackState IO) a

-- | Given an API token and a Slack command, it executes the command in the
--   IO monad
runSlack :: Token -> Slack a -> IO (Either SlackError a)
