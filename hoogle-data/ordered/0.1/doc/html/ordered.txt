-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A definition of Posets.
--   
--   A library defining the notion of Poset.
@package ordered
@version 0.1


-- | Partially ordered data types. The standard <a>Ord</a> class is for
--   total orders and therefore not suitable for floating point. However,
--   we can still define meaningful <a>max</a> and <tt>sort</tt> functions
--   for these types.
--   
--   We define a <a>PosetOrd</a> class which extends <a>Ord</a> by adding a
--   <a>NComp</a> constructor representing that two elements are
--   incomparable.
module Data.Poset

-- | Class for partially ordered data types. Instances should satisfy the
--   following laws for all values a, b and c:
--   
--   <ul>
--   <li><tt>a <a>leq</a> a</tt>.</li>
--   <li><tt>a <a>leq</a> b</tt> and <tt>b <a>leq</a> a</tt> implies <tt>a
--   == b</tt>.</li>
--   <li><tt>a <a>leq</a> b</tt> and <tt>b <a>leq</a> c</tt> implies <tt>a
--   <a>leq</a> c</tt>.</li>
--   </ul>
--   
--   But note that the floating point instances don't satisfy the first
--   rule.
--   
--   Minimal definition: posetCmp or leq.
class Eq a => Poset a
posetCmp :: Poset a => a -> a -> PosetOrd
(<==>) :: Poset a => a -> a -> Bool
(</=>) :: Poset a => a -> a -> Bool
leq :: Poset a => a -> a -> Bool
geq :: Poset a => a -> a -> Bool
lt :: Poset a => a -> a -> Bool
gt :: Poset a => a -> a -> Bool

-- | Are two elements of the underlying comparabale or not; if they are,
--   then Ordering tell the relation between them.
data PosetOrd
Comp :: Ordering -> PosetOrd
NComp :: PosetOrd

-- | Apply a function to values before comparing.
comparing :: Poset b => (a -> b) -> a -> a -> PosetOrd
instance Poset a => Poset [a]
instance Poset a => Poset (Maybe a)
