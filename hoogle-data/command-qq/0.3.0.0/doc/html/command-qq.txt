-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Quasiquoters for external commands
--   
--   Features:
--   
--   <ul>
--   <li>Quasiquotation syntax for external interpreters</li>
--   </ul>
--   
--   <pre>
--   &gt;&gt;&gt; [sh_| echo hello world! |]
--   hello world!
--   </pre>
--   
--   <ul>
--   <li>Custom quasiquoters</li>
--   </ul>
--   
--   <pre>
--   ghci = quoter $ callCommand "ghc" ["-ignore-dot-ghci", "-e"]
--   </pre>
--   
--   Then you can use <tt>ghci</tt> in ghci!
--   
--   <pre>
--   &gt;&gt;&gt; [ghci| putStrLn "hello world!" |] :: IO ()
--   hello world!
--   </pre>
--   
--   For more examples, see <a>System.Command.QQ.Predef</a>
--   
--   <ul>
--   <li>Haskell values embedding</li>
--   </ul>
--   
--   See README.md for an example
--   
--   <ul>
--   <li>DSLs</li>
--   </ul>
--   
--   See <tt>examples/CommandT.hs</tt>
@package command-qq
@version 0.3.0.0


-- | Evalute passed arguments with external interpreter
module System.Command.QQ.Eval

-- | Different interesting return types for quasiquoters
--   
--   Instances here mostly resemble the types of things in
--   <a>System.Process</a>
class Eval r
eval :: Eval r => String -> [String] -> r
instance (i ~ Text, o ~ (ExitCode, Text, Text)) => Eval (i -> IO o)
instance (s ~ ExitCode, o ~ Text, e ~ Text) => Eval (IO (s, o, e))
instance Eval (IO String)
instance Eval (IO Text)
instance Eval (IO ExitCode)
instance Eval (IO ())


-- | Haskell values embedding
module System.Command.QQ.Embed

-- | Embed haskell values into external commands
--   
--   I recommend using <tt>-XExtendedDefaultRules</tt> for modules where
--   you want to embed values, it would save for annoying type annotations
--   for numeric literals
--   
--   <pre>
--   embed . embed = embed
--   </pre>
class Embed a where embed = show
embed :: Embed a => a -> String
instance Embed Text
instance Embed Text
instance Embed String
instance Embed Char
instance a ~ Integer => Embed (Ratio a)
instance Embed CDouble
instance Embed CFloat
instance Embed CULLong
instance Embed CLLong
instance Embed CSize
instance Embed CULong
instance Embed CLong
instance Embed CUInt
instance Embed CInt
instance Embed CUShort
instance Embed CShort
instance Embed CUChar
instance Embed CSChar
instance Embed CChar
instance Embed Double
instance Embed Float
instance Embed Word64
instance Embed Word32
instance Embed Word16
instance Embed Word8
instance Embed Word
instance Embed Int64
instance Embed Int32
instance Embed Int16
instance Embed Int8
instance Embed Int
instance Embed Integer


-- | Quasiquoters for external commands
module System.Command.QQ

-- | Simple quasiquoter for the default shell
--   
--   <a>sh</a> analog that always constructs an action of type <tt>IO
--   ()</tt> and so can always be used without type annotations
--   
--   <pre>
--   &gt;&gt;&gt; [sh_|echo "hello, world!"|]
--   hello, world!
--   </pre>
sh_ :: QuasiQuoter

-- | Quasiquoter for the default shell
--   
--   Constructs polymorphic action of type <tt>Eval a =&gt; a</tt> from
--   passed string.
--   
--   Uses <tt>SHELL</tt> environment variable as path to shell executable
--   or <tt>/bin/sh</tt> if it is unset.
--   
--   <pre>
--   &gt;&gt;&gt; [sh|echo "hello, world!"|] :: IO ExitCode
--   ExitSuccess
--   
--   &gt;&gt;&gt; [sh|echo "hello, world!"|] :: IO Text
--   "hello, world!\n"
--   </pre>
--   
--   Haskell values can be embedded with Ruby-like syntax:
--   
--   <pre>
--   &gt;&gt;&gt; let apples = 7
--   
--   &gt;&gt;&gt; [sh|echo "#{apples} apples!"|] :: IO Text
--   "7 apples!\n"
--   </pre>
sh :: QuasiQuoter

-- | Shell's quasiquoter constructor
--   
--   "Shell" here means executable that has the following API:
--   
--   <pre>
--   &lt;SHELL&gt; -c &lt;COMMAND&gt;
--   </pre>
--   
--   <i>e.g.</i> <tt>sh</tt>, <tt>bash</tt>, <tt>zsh</tt>, <tt>ksh</tt>,
--   <tt>tcsh</tt>, <tt>python</tt>, etc
shell :: FilePath -> QuasiQuoter

-- | Interpreter's quasiquoter constructor
--   
--   "Interpreter" here means executable that has the following API:
--   
--   <pre>
--   &lt;INTERPRETER&gt; -e &lt;COMMAND&gt;
--   </pre>
--   
--   <i>e.g.</i> <tt>perl</tt>, <tt>ruby</tt>, <tt>ghc</tt>, etc
interpreter :: FilePath -> QuasiQuoter

-- | Construct quasiquoter from function taking the string and producing
--   Haskell expression.
--   
--   Other kinds of quasiquoters (patterns, types or declarations
--   quasiquoters) will fail at compile time
quoter :: (String -> Q Exp) -> QuasiQuoter

-- | Construct Haskell expression for external command call
callCommand :: FilePath -> [String] -> String -> Q Exp

-- | Construct Haskell expression from the string, substituting variables
--   for their values. Variable expansion uses a ruby-like syntax
substituteVars :: String -> Q Exp


-- | Some predefined quasiquoters
module System.Command.QQ.Predef

-- | <tt>bash</tt> shell
bash :: QuasiQuoter

-- | <tt>zsh</tt> shell
zsh :: QuasiQuoter

-- | <tt>awk</tt> interpreter
awk :: QuasiQuoter

-- | <tt>ghci</tt> interpreter
ghci :: QuasiQuoter

-- | <tt>perl</tt> interpreter
perl :: QuasiQuoter

-- | <tt>ruby</tt> interpreter
ruby :: QuasiQuoter

-- | <tt>python</tt> interpreter
python :: QuasiQuoter

-- | <tt>python2</tt> interpreter
python2 :: QuasiQuoter

-- | <tt>python3</tt> interpreter
python3 :: QuasiQuoter
