-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Musical instruments, parts and playing techniques.
--   
@package music-parts
@version 1.9.0

module Music.Parts.Internal.Data
type SoundId = String
data InstrumentDef
InstrumentDef :: SoundId -> [Int] -> [Int] -> Maybe Int -> Double -> [Clef] -> [Clef] -> Interval -> Maybe (Ambitus Pitch) -> Maybe (Ambitus Pitch) -> Maybe String -> Maybe String -> Maybe String -> InstrumentDef
_soundId :: InstrumentDef -> SoundId
_generalMidiProgram :: InstrumentDef -> [Int]
_generalMidiPercussionNote :: InstrumentDef -> [Int]
_defaultMidiChannel :: InstrumentDef -> Maybe Int
_scoreOrder :: InstrumentDef -> Double
_allowedClefs :: InstrumentDef -> [Clef]
_standardClef :: InstrumentDef -> [Clef]
_transposition :: InstrumentDef -> Interval
_playableRange :: InstrumentDef -> Maybe (Ambitus Pitch)
_comfortableRange :: InstrumentDef -> Maybe (Ambitus Pitch)
_longName :: InstrumentDef -> Maybe String
_shortName :: InstrumentDef -> Maybe String
_sibeliusName :: InstrumentDef -> Maybe String
getInstrumentDefById :: String -> Maybe InstrumentDef
getInstrumentDefByGeneralMidiProgram :: Int -> Maybe InstrumentDef
getInstrumentDefByGeneralMidiPercussionNote :: Int -> Maybe InstrumentDef
instance Show InstrumentTopCategory
instance Show InstrumentDef
instance FromRecord InstrumentDef
instance FromField [Clef]
instance FromField Clef
instance FromField (Maybe (Ambitus Pitch))
instance FromField Pitch
instance FromField [Int]
instance Num Clef

module Data.Semigroup.Option.Instances
instance Real a => Real (First a)
instance Integral a => Integral (First a)
instance Num a => Num (First a)
instance Enum a => Enum (Option a)
instance Real a => Real (Option a)
instance Integral a => Integral (Option a)
instance Num a => Num (Option a)


-- | A type to represent (flat) subdivisions of a part.
module Music.Parts.Division

-- | A division represents a subset of a finite group of performers.
--   
--   For example a group may be divided into three equal divisions,
--   designated <tt>(0, 3)</tt>, <tt>(1, 3)</tt> and <tt>(2, 3)</tt>
--   respectively.
data Division

-- | Create a division out of a ratio. Dual of getDivision.
division :: Int -> Int -> Division
getDivision :: Division -> (Int, Int)

-- | Get all possible divisions for a given divisor in ascending order.
divisions :: Int -> [Division]

-- | Show division in ordinary numerals.
showDivision :: Division -> String

-- | Show division in roman numerals.
showDivisionR :: Division -> String
instance Eq Division
instance Ord Division
instance Default Division
instance Show Division


-- | A type to represent (recursive) subdivisions of a part.
module Music.Parts.Subpart

-- | A subpart is a potentially infinite sequence of divisions, each
--   typically designated using a new index type, i.e. <tt>I.1.2</tt>.
--   
--   The empty subpart (also known as <a>mempty</a>) represents all the
--   players of the group, or in the context of <tt>Part</tt>, all players
--   of the given instrument.
newtype Subpart
Subpart :: [Division] -> Subpart
containsSubpart :: Subpart -> Subpart -> Bool
properlyContainsSubpart :: Subpart -> Subpart -> Bool
isSubpartOf :: Subpart -> Subpart -> Bool
isProperSubpartOf :: Subpart -> Subpart -> Bool
instance Eq Subpart
instance Ord Subpart
instance Default Subpart
instance Semigroup Subpart
instance Monoid Subpart
instance Show Subpart


-- | Representation of solo vs. tutti.
module Music.Parts.Solo
data Solo
Solo :: Solo
Tutti :: Solo
instance Eq Solo
instance Show Solo
instance Ord Solo
instance Enum Solo
instance Default Solo


-- | Representation of musical instruments.
--   
--   The <a>Instrument</a> type represent any instrument in the MusicXML
--   Standard Sounds 3.0 set, with some extensions. See
--   <a>http://www.musicxml.com/for-developers/standard-sounds</a>.
module Music.Parts.Instrument

-- | An <a>Instrument</a> represents the set of all instruments of a given
--   type.
data Instrument

-- | Full instrument name.
fullName :: Instrument -> Maybe String

-- | Instrument name abbrevation.
shortName :: Instrument -> Maybe String

-- | Create an instrument from a MIDI program number. Given number should
--   be in the range 0 - 127.
fromMidiProgram :: Int -> Instrument

-- | Convert an instrument to a MIDI program number. If the given
--   instrument is not representable as a MIDI program, return
--   <tt>Nothing</tt>.
toMidiProgram :: Instrument -> Maybe Int

-- | Create an instrument from a MusicXML Standard Sound ID.
fromMusicXmlSoundId :: String -> Instrument

-- | Convert an instrument to a MusicXML Standard Sound ID. If the given
--   instrument is not in the MusicXMl standard, return <tt>Nothing</tt>.
toMusicXmlSoundId :: Instrument -> Maybe String

-- | Transposition interval.
transposition :: Instrument -> Interval

-- | A string representing transposition such as <a>Bb</a> or <a>F</a>.
transpositionString :: Instrument -> String

-- | Standard clef used for this instrument.
standardClef :: Instrument -> Maybe Clef

-- | Clefs allowed for this instrument.
allowedClefs :: Instrument -> Set Clef

-- | Playable range for this instrument.
playableRange :: Instrument -> Ambitus Pitch

-- | Comfortable range for this instrument.
comfortableRange :: Instrument -> Ambitus Pitch
gmClef :: Int -> Int
gmMidiChannel :: Int -> Int
gmScoreOrder :: Int -> Double
instance ToJSON Instrument
instance Default Instrument
instance Ord Instrument
instance Eq Instrument
instance Enum Instrument
instance Show Instrument

module Music.Parts.Instrument.Strings
data StringInstrument
stringInstrument :: Prism' Instrument StringInstrument
type StringTuning = [Pitch]
standardTuning :: StringInstrument -> StringTuning
allowedTunings :: StringInstrument -> Set StringTuning
isAllowedTuning :: StringInstrument -> StringTuning -> Bool
isStandardTuning :: StringInstrument -> StringTuning -> Bool
isNonStandardTuning :: StringInstrument -> StringTuning -> Bool
type HarmonicPosition = Integer
naturalHarmonicPositions :: StringInstrument -> Set HarmonicPosition

module Music.Parts.Instrument.Woodwind
data WoodwindInstrument
woodwindInstrument :: Prism' Instrument WoodwindInstrument
type GlissandoRange = Ambitus Pitch
type Glissando = Ambitus Pitch
allowedGlissandi :: Set GlissandoRange
effectiveGlissandi :: Set GlissandoRange
isAllowedGlissando :: WoodwindInstrument -> Glissando -> Bool

module Music.Parts.Instrument.Brass
data BrassInstrument
brassInstrument :: Prism' Instrument BrassInstrument

module Music.Parts.Instrument.Percussion
data PercussionInstrument
percussionInstrument :: Prism' Instrument PercussionInstrument

module Music.Parts.Instrument.Keyboard
data KeyboardInstrument
keyboardInstrument :: Prism' Instrument KeyboardInstrument


-- | Vocal part "instruments". Of course voices are not instruments, but
--   for the sake of consistency.
module Music.Parts.Instrument.Vocal
data VocalInstrument
vocalInstrument :: Prism' Instrument VocalInstrument


-- | Basic part representation.
module Music.Parts.Basic
data BasicPart
instance Typeable BasicPart
instance Eq BasicPart
instance Ord BasicPart
instance Num BasicPart
instance Integral BasicPart
instance Real BasicPart
instance Enum BasicPart
instance Semigroup BasicPart
instance Monoid BasicPart
instance Show BasicPart
instance Default BasicPart


-- | Representation of musical instruments, parts and playing techniques.
module Music.Parts

-- | A part is a subdivided group of instruments of a given type.
data Part
Part :: Solo -> Instrument -> Subpart -> Part
_solo :: Lens' Part Solo
_subpart :: Lens' Part Subpart
_instrument :: Lens' Part Instrument

-- | Divide a part into <tt>n</tt> subparts.
divide :: Int -> Part -> [Part]

-- | <tt>a `containsPart` b</tt> holds if the set of players represented by
--   a is an improper subset of the set of players represented by b.
containsPart :: Part -> Part -> Bool
smallestPart :: Part -> Part -> Part
smallestSubpart :: Subpart -> Subpart -> Subpart
largestPart :: Part -> Part -> Part
largestSubpart :: Subpart -> Subpart -> Subpart

-- | Returns <a>True</a> iff x and y are completely distinct, i.e. neither
--   contains the other.
--   
--   <pre>
--   &gt;&gt;&gt; violins `distinctFrom` trumpets
--   True
--   
--   &gt;&gt;&gt; violins `distinctFrom` violins
--   False
--   
--   &gt;&gt;&gt; violins `distinctFrom` violins1
--   False
--   
--   &gt;&gt;&gt; violins1 `distinctFrom` violins
--   False
--   
--   &gt;&gt;&gt; violins1 `distinctFrom` violins2
--   True
--   </pre>
distinctFrom :: Part -> Part -> Bool

-- | Returns <a>True</a> iff all given parts are distinct (as per
--   <a>distinctFrom</a>).
allDistinct :: [Part] -> Bool
solo :: Instrument -> Part
tutti :: Instrument -> Part
piccoloFlute :: Instrument
flute :: Instrument
altoFlute :: Instrument
bassFlute :: Instrument
oboe :: Instrument
corAnglais :: Instrument
heckelphone :: Instrument
ebClarinet :: Instrument
clarinet :: Instrument
aClarinet :: Instrument
bassClarinet :: Instrument
sopranoSax :: Instrument
altoSax :: Instrument
tenorSax :: Instrument
baritoneSax :: Instrument
bassoon :: Instrument
contraBassoon :: Instrument
horn :: Instrument
piccoloTrumpet :: Instrument
trumpet :: Instrument
bassTrumpet :: Instrument
altoTrombone :: Instrument
tenorTrombone :: Instrument
trombone :: Instrument
bassTrombone :: Instrument
tuba :: Instrument
timpani :: Instrument
piano :: Instrument
celesta :: Instrument
glockenspiel :: Instrument
vibraphone :: Instrument
marimba :: Instrument
xylophone :: Instrument
xylorimba :: Instrument
tubularBells :: Instrument
dulcimer :: Instrument
accordion :: Instrument
harmonica :: Instrument
violin :: Instrument
viola :: Instrument
cello :: Instrument
doubleBass :: Instrument
piccoloFlutes :: Part
flutes :: Part
oboes :: Part
clarinets :: Part
bassoons :: Part
flutes1 :: Part
flutes2 :: Part
oboes1 :: Part
oboes2 :: Part
clarinets1 :: Part
clarinets2 :: Part
horns :: Part
highHorns :: [Part]
lowHorns :: [Part]
trumpets :: Part
trombones :: Part
trumpets1 :: Part
trumpets2 :: Part
trombones1 :: Part
trombones2 :: Part
tubas :: Part
violins :: Part
violins1 :: Part
violins2 :: Part
violas :: Part
cellos :: Part
doubleBasses :: Part
harp :: Part
defaultClef :: Part -> Int
defaultMidiProgram :: Part -> Int
defaultMidiChannel :: Part -> Int
defaultMidiNote :: Part -> Int
instance Eq Part
instance Ord Part
instance Default Part
instance Semigroup Part
instance Monoid Part
instance Enum Part
instance Show Part


-- | Provides basic voice types. Useful for vocal music but also for
--   abstract voice leading problems etc.
module Music.Parts.Voices
