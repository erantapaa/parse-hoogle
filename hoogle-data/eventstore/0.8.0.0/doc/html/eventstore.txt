-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | EventStore TCP Client
--   
@package eventstore
@version 0.8.0.0


module Database.EventStore.Logging

-- | Logging main data structure.
data Log
Error :: ErrorMessage -> Log
Info :: InfoMessage -> Log

-- | Classifies error-like log messages.
data ErrorMessage

-- | Indicates max attempt value.
MaxAttemptConnectionReached :: Int -> ErrorMessage
WrongPackageFraming :: ErrorMessage

-- | Indicates parsing error message.
PackageParsingError :: String -> ErrorMessage

-- | Classifies info-like log messages.
data InfoMessage

-- | Indicates current attempt.
Connecting :: Int -> InfoMessage

-- | Indicates connection <a>UUID</a>.
ConnectionClosed :: UUID -> InfoMessage

-- | Indicates connection <a>UUID</a>.
Connected :: UUID -> InfoMessage

-- | Indicates connection <a>UUID</a>
Disconnected :: UUID -> InfoMessage
instance Show ErrorMessage
instance Show InfoMessage
instance Show Log


module Database.EventStore

-- | Contains event information like its type and data. Only used for write
--   queries.
data Event

-- | Holds event data.
data EventData
createEvent :: Text -> Maybe UUID -> EventData -> Event

-- | Creates a event using JSON format
withJson :: Value -> EventData

-- | Create a event with metadata using JSON format
withJsonAndMetadata :: Value -> Value -> EventData

-- | Represents a connection to a single EventStore node.
data Connection
data ConnectionException

-- | HostName Port MaxAttempt's value
MaxAttempt :: HostName -> Int -> Int -> ConnectionException

-- | Holds login and password information.
data Credentials

-- | Global <tt>Connection</tt> settings
data Settings
Settings :: NominalDiffTime -> NominalDiffTime -> Bool -> Maybe Credentials -> Retry -> Int -> Maybe (Log -> IO ()) -> Settings
s_heartbeatInterval :: Settings -> NominalDiffTime
s_heartbeatTimeout :: Settings -> NominalDiffTime
s_requireMaster :: Settings -> Bool
s_credentials :: Settings -> Maybe Credentials
s_retry :: Settings -> Retry

-- | In seconds
s_reconnect_delay_secs :: Settings -> Int
s_logger :: Settings -> Maybe (Log -> IO ())

-- | Represents reconnection strategy.
data Retry

-- | Indicates how many times we should try to reconnect to the server. A
--   value less than or equal to 0 means no retry.
atMost :: Int -> Retry

-- | Indicates we should try to reconnect to the server until the end of
--   the Universe.
keepRetrying :: Retry
credentials :: ByteString -> ByteString -> Credentials

-- | Default global settings.
defaultSettings :: Settings

-- | Creates a new <a>Connection</a> to a single node. It maintains a full
--   duplex connection to the EventStore. An EventStore <a>Connection</a>
--   operates quite differently than say a SQL connection. Normally when
--   you use a SQL connection you want to keep the connection open for a
--   much longer of time than when you use a SQL connection.
--   
--   Another difference is that with the EventStore <a>Connection</a> all
--   operation are handled in a full async manner (even if you call the
--   synchronous behaviors). Many threads can use an EvenStore
--   <a>Connection</a> at the same time or a single thread can make many
--   asynchronous requests. To get the most performance out of the
--   connection it is generally recommend to use it in this way.
connect :: Settings -> String -> Int -> IO Connection

-- | Asynchronously closes the <a>Connection</a>.
shutdown :: Connection -> IO ()

-- | Represents stream metadata as a series of properties for system data
--   and a <a>StreamMetadata</a> object for user metadata.
data StreamMetadataResult
StreamMetadataResult :: !Text -> !Int32 -> !StreamMetadata -> StreamMetadataResult

-- | The name of the stream.
streamMetaResultStream :: StreamMetadataResult -> !Text

-- | The version of the metadata format.
streamMetaResultVersion :: StreamMetadataResult -> !Int32

-- | A <a>StreamMetadata</a> containing user-specified metadata.
streamMetaResultData :: StreamMetadataResult -> !StreamMetadata

-- | When the stream is either not found or 'no stream'.
NotFoundStreamMetadataResult :: !Text -> StreamMetadataResult

-- | The name of the stream.
streamMetaResultStream :: StreamMetadataResult -> !Text

-- | When the stream is soft-deleted.
DeletedStreamMetadataResult :: !Text -> StreamMetadataResult

-- | The name of the stream.
streamMetaResultStream :: StreamMetadataResult -> !Text

-- | Reads a single event from given stream.
readEvent :: Connection -> Text -> Int32 -> Bool -> IO (Async ReadResult)

-- | Reads events from the $all stream backward
readAllEventsBackward :: Connection -> Position -> Int32 -> Bool -> IO (Async AllEventsSlice)

-- | Reads events from the $all stream forward.
readAllEventsForward :: Connection -> Position -> Int32 -> Bool -> IO (Async AllEventsSlice)

-- | Reads events from a given stream backward.
readStreamEventsBackward :: Connection -> Text -> Int32 -> Int32 -> Bool -> IO (Async StreamEventsSlice)

-- | Reads events from a given stream forward.
readStreamEventsForward :: Connection -> Text -> Int32 -> Int32 -> Bool -> IO (Async StreamEventsSlice)

-- | Asynchronously gets the metadata of a stream.
getStreamMetadata :: Connection -> Text -> IO (Async StreamMetadataResult)

-- | Represents an access control list for a stream.
data StreamACL
StreamACL :: ![Text] -> ![Text] -> ![Text] -> ![Text] -> ![Text] -> StreamACL

-- | Roles and users permitted to read the stream.
streamACLReadRoles :: StreamACL -> ![Text]

-- | Roles and users permitted to write to the stream.
streamACLWriteRoles :: StreamACL -> ![Text]

-- | Roles and users permitted to delete to the stream.
streamACLDeleteRoles :: StreamACL -> ![Text]

-- | Roles and users permitted to read stream metadata.
streamACLMetaReadRoles :: StreamACL -> ![Text]

-- | Roles and users permitted to write stream metadata.
streamACLMetaWriteRoles :: StreamACL -> ![Text]

-- | Represents stream metadata with strongly typed properties for system
--   values and a dictionary-like interface for custom values.
data StreamMetadata
StreamMetadata :: !(Maybe Int32) -> !(Maybe TimeSpan) -> !(Maybe Int32) -> !(Maybe TimeSpan) -> !StreamACL -> !Object -> StreamMetadata

-- | The maximum number of events allowed in the stream.
streamMetadataMaxCount :: StreamMetadata -> !(Maybe Int32)

-- | The maximum age of events allowed in the stream.
streamMetadataMaxAge :: StreamMetadata -> !(Maybe TimeSpan)

-- | The event number from which previous events can be scavenged. This is
--   used to implement soft-deletion of streams.
streamMetadataTruncateBefore :: StreamMetadata -> !(Maybe Int32)

-- | The amount of time for which the stream head is cachable.
streamMetadataCacheControl :: StreamMetadata -> !(Maybe TimeSpan)

-- | The access control list for the stream.
streamMetadataACL :: StreamMetadata -> !StreamACL

-- | An enumerable of key-value pairs of keys to JSON text for
--   user-provider metadata.
streamMetadataCustom :: StreamMetadata -> !Object

-- | Gets a custom property value from metadata.
streamMetadataGetCustomPropertyValue :: StreamMetadata -> Text -> Maybe Value

-- | Get a custom property value from metadata.
streamMetadataGetCustomProperty :: FromJSON a => StreamMetadata -> Text -> Maybe a

-- | <a>StreamACL</a> with no role or users whatsoever.
emptyStreamACL :: StreamACL

-- | <a>StreamMetadata</a> with everything set to <a>Nothing</a>, using
--   <a>emptyStreamACL</a> and an empty <a>Object</a>.
emptyStreamMetadata :: StreamMetadata

-- | Deletes given stream.
deleteStream :: Connection -> Text -> ExpectedVersion -> Maybe Bool -> IO (Async DeleteResult)

-- | Sends a single <a>Event</a> to given stream.
sendEvent :: Connection -> Text -> ExpectedVersion -> Event -> IO (Async WriteResult)

-- | Sends a list of <a>Event</a> to given stream.
sendEvents :: Connection -> Text -> ExpectedVersion -> [Event] -> IO (Async WriteResult)

-- | Asynchronously sets the metadata for a stream.
setStreamMetadata :: Connection -> Text -> ExpectedVersion -> StreamMetadata -> IO (Async WriteResult)
type Builder a = Endo a
type StreamACLBuilder = Builder StreamACL

-- | Builds a <a>StreamACL</a> from a <a>StreamACLBuilder</a>.
buildStreamACL :: StreamACLBuilder -> StreamACL

-- | Modifies a <a>StreamACL</a> using a <a>StreamACLBuilder</a>.
modifyStreamACL :: StreamACLBuilder -> StreamACL -> StreamACL

-- | Sets role names with read permission for the stream.
setReadRoles :: [Text] -> StreamACLBuilder

-- | Sets a single role name with read permission for the stream.
setReadRole :: Text -> StreamACLBuilder

-- | Sets role names with write permission for the stream.
setWriteRoles :: [Text] -> StreamACLBuilder

-- | Sets a single role name with write permission for the stream.
setWriteRole :: Text -> StreamACLBuilder

-- | Sets role names with delete permission for the stream.
setDeleteRoles :: [Text] -> StreamACLBuilder

-- | Sets a single role name with delete permission for the stream.
setDeleteRole :: Text -> StreamACLBuilder

-- | Sets role names with metadata read permission for the stream.
setMetaReadRoles :: [Text] -> StreamACLBuilder

-- | Sets a single role name with metadata read permission for the stream.
setMetaReadRole :: Text -> StreamACLBuilder

-- | Sets role names with metadata write permission for the stream.
setMetaWriteRoles :: [Text] -> StreamACLBuilder

-- | Sets a single role name with metadata write permission for the stream.
setMetaWriteRole :: Text -> StreamACLBuilder
type StreamMetadataBuilder = Builder StreamMetadata

-- | Builds a <a>StreamMetadata</a> from a <a>StreamMetadataBuilder</a>.
buildStreamMetadata :: StreamMetadataBuilder -> StreamMetadata

-- | Modifies a <a>StreamMetadata</a> using a <a>StreamMetadataBuilder</a>
modifyStreamMetadata :: StreamMetadataBuilder -> StreamMetadata -> StreamMetadata

-- | Sets the maximum number of events allowed in the stream.
setMaxCount :: Int32 -> StreamMetadataBuilder

-- | Sets the maximum age of events allowed in the stream.
setMaxAge :: TimeSpan -> StreamMetadataBuilder

-- | Sets the event number from which previous events can be scavenged.
setTruncateBefore :: Int32 -> StreamMetadataBuilder

-- | Sets the amount of time for which the stream head is cachable.
setCacheControl :: TimeSpan -> StreamMetadataBuilder
setACL :: StreamACL -> StreamMetadataBuilder
modifyACL :: StreamACLBuilder -> StreamMetadataBuilder

-- | Sets a custom metadata property.
setCustomProperty :: ToJSON a => Text -> a -> StreamMetadataBuilder

-- | .NET TimeSpan: TimeSpan represents a duration of time. A TimeSpan can
--   be negative or positive. Sorry
data TimeSpan
timeSpanTicks :: Int64 -> TimeSpan
timeSpanHoursMinsSecs :: Int64 -> Int64 -> Int64 -> TimeSpan
timeSpanDaysHoursMinsSecs :: Int64 -> Int64 -> Int64 -> Int64 -> TimeSpan
timeSpanDaysHoursMinsSecsMillis :: Int64 -> Int64 -> Int64 -> Int64 -> Int64 -> TimeSpan
timeSpanGetTicks :: TimeSpan -> Int64
timeSpanGetDays :: TimeSpan -> Int64
timeSpanGetHours :: TimeSpan -> Int64
timeSpanGetMinutes :: TimeSpan -> Int64
timeSpanGetSeconds :: TimeSpan -> Int64
timeSpanGetMillis :: TimeSpan -> Int64
timeSpanFromSeconds :: Double -> TimeSpan
timeSpanFromMinutes :: Double -> TimeSpan
timeSpanFromHours :: Double -> TimeSpan
timeSpanFromDays :: Double -> TimeSpan
timeSpanTotalMillis :: TimeSpan -> Int64

-- | Represents a multi-request transaction with the EventStore.
data Transaction

-- | Starts a transaction on given stream.
transactionStart :: Connection -> Text -> ExpectedVersion -> IO (Async Transaction)

-- | Asynchronously commits this transaction.
transactionCommit :: Transaction -> IO (Async WriteResult)

-- | Rollback this transaction.
transactionRollback :: Transaction -> IO ()

-- | Asynchronously writes to a transaction in the EventStore.
transactionSendEvents :: Transaction -> [Event] -> IO (Async ())

-- | Represents the reason subscription drop happened.
data DropReason
D_Unsubscribed :: DropReason
D_AccessDenied :: DropReason
D_NotFound :: DropReason
D_PersistentSubscriptionDeleted :: DropReason

-- | Represents a subscription that is directly identifiable.
--   <a>Regular</a> and <a>Persistent</a> fit that description while
--   <a>Catchup</a> doesn't. Because <a>Catchup</a> reads all events from a
--   particular checkpoint and when it's finished, it issues a subscription
--   request.
class Identifiable a

-- | Represents a subscription to a stream.
data Subscription a

-- | Value's type returned when calling <a>subNextEvent</a>

-- | Represents a subscription to a single stream or $all stream in the
--   EventStore.
data Regular

-- | Represents catch-up subscription.
data Catchup

-- | Represents a persistent subscription.
data Persistent

-- | Subcribes to given stream.
subscribe :: Connection -> Text -> Bool -> IO (Async (Subscription Regular))

-- | Subcribes to $all stream.
subscribeToAll :: Connection -> Bool -> IO (Async (Subscription Regular))

-- | Awaits for the next event.
subNextEvent :: Subscription a -> (IO (NextEvent a))

-- | Gets the ID of the subscription.
subId :: Identifiable a => Subscription a -> UUID

-- | The name of the stream to which the subscription is subscribed.
subStreamId :: Subscription a -> Text

-- | True if this subscription is to $all stream.
subIsSubscribedToAll :: Subscription a -> Bool

-- | Determines whether or not any link events encontered in the stream
--   will be resolved.
subResolveLinkTos :: Subscription Regular -> Bool

-- | The last commit position seen on the subscription (if this a
--   subscription to $all stream).
subLastCommitPos :: Identifiable a => Subscription a -> Int64

-- | The last event number seen on the subscription (if this is a
--   subscription to a single stream).
subLastEventNumber :: Identifiable a => Subscription a -> Maybe Int32

-- | Asynchronously unsubscribe from the the stream.
subUnsubscribe :: Subscription a -> (IO ())

-- | Errors that could arise during a catch-up subscription. <a>Text</a>
--   value represents the stream name.
data CatchupError
CatchupStreamDeleted :: Text -> CatchupError
CatchupUnexpectedStreamStatus :: Text -> ReadStreamResult -> CatchupError
CatchupSubscriptionDropReason :: Text -> DropReason -> CatchupError

-- | Subscribes to given stream. If last checkpoint is defined, this will
--   <a>readStreamEventsForward</a> from that event number, otherwise from
--   the beginning. Once last stream event reached up, a subscription
--   request will be sent using <a>subscribe</a>.
subscribeFrom :: Connection -> Text -> Bool -> Maybe Int32 -> Maybe Int32 -> IO (Subscription Catchup)

-- | Same as <a>subscribeFrom</a> but applied to $all stream.
subscribeToAllFrom :: Connection -> Bool -> Maybe Position -> Maybe Int32 -> IO (Subscription Catchup)

-- | Waits until <a>Catchup</a> subscription catch-up its stream.
waitTillCatchup :: Subscription Catchup -> IO ()

-- | Non blocking version of <a>waitTillCatchup</a>.
hasCaughtUp :: Subscription Catchup -> IO Bool
data PersistentSubscriptionSettings
PersistentSubscriptionSettings :: !Bool -> !Int32 -> !Bool -> !TimeSpan -> !Int32 -> !Int32 -> !Int32 -> !Int32 -> !TimeSpan -> !Int32 -> !Int32 -> !Int32 -> !SystemConsumerStrategy -> PersistentSubscriptionSettings

-- | Whether or not the persistent subscription should resolve linkTo
--   events to their linked events.
psSettingsResolveLinkTos :: PersistentSubscriptionSettings -> !Bool

-- | Where the subscription should start from (position).
psSettingsStartFrom :: PersistentSubscriptionSettings -> !Int32

-- | Whether or not in depth latency statistics should be tracked on this
--   subscription.
psSettingsExtraStats :: PersistentSubscriptionSettings -> !Bool

-- | The amount of time after which a message should be considered to be
--   timeout and retried.
psSettingsMsgTimeout :: PersistentSubscriptionSettings -> !TimeSpan

-- | The maximum number of retries (due to timeout) before a message get
--   considered to be parked.
psSettingsMaxRetryCount :: PersistentSubscriptionSettings -> !Int32

-- | The size of the buffer listening to live messages as they happen.
psSettingsLiveBufSize :: PersistentSubscriptionSettings -> !Int32

-- | The number of events read at a time when paging in history.
psSettingsReadBatchSize :: PersistentSubscriptionSettings -> !Int32

-- | The number of events to cache when paging through history.
psSettingsHistoryBufSize :: PersistentSubscriptionSettings -> !Int32

-- | The amount of time to try checkpoint after.
psSettingsCheckPointAfter :: PersistentSubscriptionSettings -> !TimeSpan

-- | The minimum number of messages to checkpoint.
psSettingsMinCheckPointCount :: PersistentSubscriptionSettings -> !Int32

-- | The maximum number of message to checkpoint. If this number is
--   reached, a checkpoint will be forced.
psSettingsMaxCheckPointCount :: PersistentSubscriptionSettings -> !Int32

-- | The maximum number of subscribers allowed.
psSettingsMaxSubsCount :: PersistentSubscriptionSettings -> !Int32

-- | The strategy to use for distributing events to client consumers.
psSettingsNamedConsumerStrategy :: PersistentSubscriptionSettings -> !SystemConsumerStrategy

-- | System supported consumer strategies for use with persistent
--   subscriptions.
data SystemConsumerStrategy

-- | Distributes events to a single client until it is full. Then round
--   robin to the next client.
DispatchToSingle :: SystemConsumerStrategy

-- | Distribute events to each client in a round robin fashion.
RoundRobin :: SystemConsumerStrategy
data NakAction
NA_Unknown :: NakAction
NA_Park :: NakAction
NA_Retry :: NakAction
NA_Skip :: NakAction
NA_Stop :: NakAction

-- | Acknowledges those event ids have been successfully processed.
notifyEventsProcessed :: Subscription Persistent -> [UUID] -> IO ()

-- | Acknowledges those event ids have failed to be processed successfully.
notifyEventsFailed :: Subscription Persistent -> NakAction -> Maybe Text -> [UUID] -> IO ()

-- | System default persistent subscription settings.
defaultPersistentSubscriptionSettings :: PersistentSubscriptionSettings

-- | Asynchronously create a persistent subscription group on a stream.
createPersistentSubscription :: Connection -> Text -> Text -> PersistentSubscriptionSettings -> IO (Async ())

-- | Asynchronously update a persistent subscription group on a stream.
updatePersistentSubscription :: Connection -> Text -> Text -> PersistentSubscriptionSettings -> IO (Async ())

-- | Asynchronously delete a persistent subscription group on a stream.
deletePersistentSubscription :: Connection -> Text -> Text -> IO (Async ())

-- | Asynchronously connect to a persistent subscription given a group on a
--   stream.
connectToPersistentSubscription :: Connection -> Text -> Text -> Int32 -> IO (Async (Subscription Persistent))

-- | The result of a read operation from the $all stream.
data AllEventsSlice
AllEventsSlice :: !ReadAllResult -> !Position -> !Position -> !Bool -> ![ResolvedEvent] -> !ReadDirection -> AllEventsSlice

-- | Representing the status of the read attempt.
allEventsSliceResult :: AllEventsSlice -> !ReadAllResult

-- | Representing the position where the next slice should be read from.
allEventsSliceFrom :: AllEventsSlice -> !Position

-- | Representing the position where the next slice should be read from.
allEventsSliceNext :: AllEventsSlice -> !Position

-- | Representing whether or not this is the end of the $all stream.
allEventsSliceIsEOS :: AllEventsSlice -> !Bool

-- | The events read.
allEventsSliceEvents :: AllEventsSlice -> ![ResolvedEvent]

-- | The direction of read request.
allEventsSliceDirection :: AllEventsSlice -> !ReadDirection

-- | Returned after deleting a stream. <a>Position</a> of the write.
newtype DeleteResult
DeleteResult :: Position -> DeleteResult
deleteStreamPosition :: DeleteResult -> Position

-- | Returned after writing to a stream.
data WriteResult
WriteResult :: !Int32 -> !Position -> WriteResult

-- | Next expected version of the stream.
writeNextExpectedVersion :: WriteResult -> !Int32

-- | <a>Position</a> of the write.
writePosition :: WriteResult -> !Position

-- | Result of a single event read operation to the EventStore.
data ReadResult
ReadResult :: !ReadEventResult -> !Text -> !Int32 -> !(Maybe ResolvedEvent) -> ReadResult

-- | Attempt status
readResultStatus :: ReadResult -> !ReadEventResult

-- | Stream name
readResultStreamId :: ReadResult -> !Text

-- | Event number
readResultEventNumber :: ReadResult -> !Int32
readResultResolvedEvent :: ReadResult -> !(Maybe ResolvedEvent)

-- | Represents a previously written event.
data RecordedEvent
RecordedEvent :: !Text -> !UUID -> !Int32 -> !Text -> !ByteString -> !(Maybe ByteString) -> !Bool -> !(Maybe UTCTime) -> RecordedEvent

-- | The event stream that this event belongs to.
recordedEventStreamId :: RecordedEvent -> !Text

-- | Unique identifier representing this event.
recordedEventId :: RecordedEvent -> !UUID

-- | Number of this event in the stream.
recordedEventNumber :: RecordedEvent -> !Int32

-- | Type of this event.
recordedEventType :: RecordedEvent -> !Text

-- | Representing the data of this event.
recordedEventData :: RecordedEvent -> !ByteString

-- | Representing the metadada associated with this event.
recordedEventMetadata :: RecordedEvent -> !(Maybe ByteString)

-- | Indicates whether the content is internally marked as json.
recordedEventIsJson :: RecordedEvent -> !Bool

-- | Representing when this event was created in the system.
recordedEventCreated :: RecordedEvent -> !(Maybe UTCTime)

-- | Represents the result of a single read operation to the EventStore.
data StreamEventsSlice
StreamEventsSlice :: !ReadStreamResult -> !Text -> !Int32 -> !Int32 -> !Int32 -> !Bool -> ![ResolvedEvent] -> !ReadDirection -> StreamEventsSlice

-- | Representing the status of the read attempt.
streamEventsSliceResult :: StreamEventsSlice -> !ReadStreamResult

-- | The name of the stream read.
streamEventsSliceStreamId :: StreamEventsSlice -> !Text

-- | The starting point (represented as a sequence number) of the read
--   operation.
streamEventsSliceStart :: StreamEventsSlice -> !Int32

-- | The next event number that can be read.
streamEventsSliceNext :: StreamEventsSlice -> !Int32

-- | The last event number in the stream.
streamEventsSliceLast :: StreamEventsSlice -> !Int32

-- | Representing whether or not this is the end of the stream.
streamEventsSliceIsEOS :: StreamEventsSlice -> !Bool

-- | The events read represented as <a>ResolvedEvent</a>
streamEventsSliceEvents :: StreamEventsSlice -> ![ResolvedEvent]

-- | The direction of the read request.
streamEventsSliceDirection :: StreamEventsSlice -> !ReadDirection

-- | A structure referring to a potential logical record position in the
--   EventStore transaction file.
data Position
Position :: !Int64 -> !Int64 -> Position

-- | Commit position of the record
positionCommit :: Position -> !Int64

-- | Prepare position of the record
positionPrepare :: Position -> !Int64

-- | Represents the direction of read operation (both from $all an usual
--   streams).
data ReadDirection

-- | From beginning to end
Forward :: ReadDirection

-- | From end to beginning
Backward :: ReadDirection

-- | Enumeration detailing the possible outcomes of reading a slice of $all
--   stream.
data ReadAllResult
RA_SUCCESS :: ReadAllResult
RA_NOT_MODIFIED :: ReadAllResult
RA_ERROR :: ReadAllResult
RA_ACCESS_DENIED :: ReadAllResult

-- | Enumeration representing the status of a single event read operation.
data ReadEventResult
RE_SUCCESS :: ReadEventResult
RE_NOT_FOUND :: ReadEventResult
RE_NO_STREAM :: ReadEventResult
RE_STREAM_DELETED :: ReadEventResult
RE_ERROR :: ReadEventResult
RE_ACCESS_DENIED :: ReadEventResult

-- | A structure representing a single event or an resolved link event.
data ResolvedEvent
ResolvedEvent :: !(Maybe RecordedEvent) -> !(Maybe RecordedEvent) -> ResolvedEvent

-- | The event, or the resolved link event if this <a>ResolvedEvent</a> is
--   a link event.
resolvedEventRecord :: ResolvedEvent -> !(Maybe RecordedEvent)

-- | The link event if this <a>ResolvedEvent</a> is a link event.
resolvedEventLink :: ResolvedEvent -> !(Maybe RecordedEvent)

-- | Enumeration detailing the possible outcomes of reading a slice of a
--   stream
data ReadStreamResult
RS_SUCCESS :: ReadStreamResult
RS_NO_STREAM :: ReadStreamResult
RS_STREAM_DELETED :: ReadStreamResult
RS_NOT_MODIFIED :: ReadStreamResult
RS_ERROR :: ReadStreamResult
RS_ACCESS_DENIED :: ReadStreamResult
data OperationException

-- | Stream and Expected Version
WrongExpectedVersion :: Text -> ExpectedVersion -> OperationException

-- | Stream
StreamDeleted :: Text -> OperationException
InvalidTransaction :: OperationException

-- | Stream
AccessDenied :: Text -> OperationException

-- | Expected, Found
InvalidServerResponse :: Word8 -> Word8 -> OperationException
ProtobufDecodingError :: String -> OperationException

-- | Reason
ServerError :: (Maybe Text) -> OperationException
InvalidOperation :: Text -> OperationException

-- | Indicates whether this <a>ResolvedEvent</a> is a resolved link event.
eventResolved :: ResolvedEvent -> Bool

-- | Returns the event that was read or which triggered the subscription.
--   
--   If this <a>ResolvedEvent</a> represents a link event, the link will be
--   the original event, otherwise it will be the event.
resolvedEventOriginal :: ResolvedEvent -> Maybe RecordedEvent

-- | The stream name of the original event.
resolvedEventOriginalStreamId :: ResolvedEvent -> Maybe Text

-- | The ID of the original event.
resolvedEventOriginalId :: ResolvedEvent -> Maybe UUID

-- | Representing the start of the transaction file.
positionStart :: Position

-- | Representing the end of the transaction file.
positionEnd :: Position

-- | Constants used for expected version control.
--   
--   The use of expected version can be a bit tricky especially when
--   discussing idempotency assurances given by the EventStore.
--   
--   The EventStore will assure idempotency for all operations using any
--   value in <a>ExpectedVersion</a> except for <a>anyStream</a>. When
--   using <a>anyStream</a> the EventStore will do its best to assure
--   idempotency but will not guarantee idempotency.
data ExpectedVersion

-- | This write should not conflict with anything and should always
--   succeed.
anyStream :: ExpectedVersion

-- | The stream being written to should not yet exist. If it does exist
--   treat that as a concurrency problem.
noStream :: ExpectedVersion

-- | The stream should exist and should be empty. If it does not exist or
--   is not empty, treat that as a concurrency problem.
emptyStream :: ExpectedVersion

-- | States that the last event written to the stream should have a
--   sequence number matching your expected value.
exactStream :: Int32 -> ExpectedVersion

-- | An infix synonym for <a>mappend</a>.
--   
--   <i>Since: 4.5.0.0</i>
(<>) :: Monoid m => m -> m -> m
