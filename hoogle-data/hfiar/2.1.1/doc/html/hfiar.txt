-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Four in a Row in Haskell!!
--   
--   The classical game, implemented with wxHaskell
@package hfiar
@version 2.1.1


-- | This module defines the HFiaR monad and all the actions you can
--   perform in it
module HFiaR

-- | Generic HFiaRT type
data HFiaRT m a

-- | Starts a game, run the <i>HFiaRT</i> actions and returns the game
--   wrapped up in the <i>m</i> monad
play :: Monad m => HFiaRT m a -> m Game

-- | Starts a game, run the <i>HFiaRT</i> actions and returns the result of
--   the last one wrapped up in the <i>m</i> monad
eval :: Monad m => HFiaRT m a -> m a

-- | Basic HFiaR type - ready to <i>just</i> play HFiaR actions
type HFiaR = HFiaRT IO

-- | Starts a game, run the <i>HFiaRT</i> actions and returns the game
justPlay :: HFiaR a -> IO Game

-- | Starts a game, run the <i>HFiaRT</i> actions and returns the result of
--   the last one
justEval :: HFiaR a -> IO a

-- | Game description
data Game
OnCourse :: Player -> [[Tile]] -> Game
gamePlayer :: Game -> Player
gameBoard :: Game -> [[Tile]]
Ended :: HFiaRResult -> [[Tile]] -> Game
gameResult :: Game -> HFiaRResult
gameBoard :: Game -> [[Tile]]

-- | Posible players (each one with his tile colour)
data Player
Pl :: Tile -> Player
tiles :: Player -> Tile

-- | Posible tiles (just green or red ones)
data Tile
Red :: Tile
Green :: Tile

-- | Posible errors in the HFiaR Monad
data HFiaRError
GameEnded :: HFiaRError
GameNotEnded :: HFiaRError
InvalidColumn :: HFiaRError
FullColumn :: HFiaRError

-- | Posible results for the game
data HFiaRResult
Tie :: HFiaRResult
WonBy :: Player -> HFiaRResult

-- | Drop a tile in a column
dropIn :: Monad m => Int -> HFiaRT m (Either HFiaRError ())

-- | Try (i.e. without actually doing it, returns the result of) dropping a
--   tile in a column
tryDropIn :: Monad m => [Int] -> HFiaRT m (Either HFiaRError Game)

-- | Player who's supposed to play the next tile
player :: Monad m => HFiaRT m (Either HFiaRError Player)

-- | Current board distribution
board :: Monad m => HFiaRT m [[Tile]]

-- | If the game ended, returns the result of it
result :: Monad m => HFiaRT m (Either HFiaRError HFiaRResult)
instance Monad m => Monad (HFiaRT m)
instance MonadIO m => MonadIO (HFiaRT m)
instance MonadTrans HFiaRT
instance Eq Game
instance Show Game
instance Eq HFiaRResult
instance Show HFiaRResult
instance Eq Player
instance Eq Tile
instance Show Tile
instance Eq HFiaRError
instance Monad m => MonadState Game (HFiaRT m)
instance Show Player
instance Show HFiaRError
