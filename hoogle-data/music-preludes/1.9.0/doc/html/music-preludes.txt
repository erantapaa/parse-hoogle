-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Some useful preludes for the Music Suite.
--   
@package music-preludes
@version 1.9.0


-- | Provides miscellaneous instances.
module Music.Prelude.Instances
instance Typeable Part
instance HasMusicXmlInstrument Part
instance HasMusicXmlInstrument BasicPart
instance HasLilypondInstrument Part
instance HasLilypondInstrument BasicPart
instance HasMidiProgram Part
instance HasMidiProgram BasicPart
instance HasBackendNote Lilypond Pitch
instance HasBackendNote MusicXml Pitch
instance HasBackendNote SuperCollider Pitch
instance HasBackendNote SuperCollider Semitones
instance HasBackendNote Midi Pitch
instance HasBackendNote Midi Semitones
instance Tiable Pitch
instance (Transformable a, a ~ Pitch a) => HasPitches Hertz a
instance (Transformable a, a ~ Pitch a) => HasPitch Hertz a
instance Transformable Hertz
instance (Transformable a, a ~ Pitch a) => HasPitches Pitch a
instance (Transformable a, a ~ Pitch a) => HasPitch Pitch a
instance Transformable Pitch
instance (Transformable a, a ~ Part a) => HasParts BasicPart a
instance (Transformable a, a ~ Part a) => HasPart BasicPart a
instance Transformable BasicPart
instance (Transformable a, a ~ Part a) => HasParts Part a
instance (Transformable a, a ~ Part a) => HasPart Part a
instance Transformable Part


-- | A basic music representation.
module Music.Prelude.Basic
type BasicNote = PartT BasicPart (TextT (TieT (SlideT (TremoloT (HarmonicT (ArticulationT Articulation (DynamicT Dynamics [Behavior Pitch])))))))
asScore :: Score BasicNote -> Score BasicNote
asVoice :: Voice BasicNote -> Voice BasicNote
asTrack :: Track BasicNote -> Track BasicNote
asBasicNote :: BasicNote -> BasicNote
open :: Score BasicNote -> IO ()
play :: t
openAndPlay :: Score BasicNote -> IO b


-- | Standard music representation.
module Music.Prelude.Standard
type StandardNote = PartT Part (ColorT (TextT (TremoloT (HarmonicT (SlideT (ArticulationT Articulation (DynamicT Dynamics [TieT Pitch])))))))
asScore :: Score StandardNote -> Score StandardNote
asVoice :: Voice StandardNote -> Voice StandardNote
asTrack :: Track StandardNote -> Track StandardNote
asNote :: StandardNote -> StandardNote
open :: Score StandardNote -> IO ()
play :: t
openAndPlay :: Score StandardNote -> IO b


-- | Provides framework for building simple command-line converter programs
--   such as <tt>music2midi</tt>, <tt>music2pdf</tt> etc.
module Music.Prelude.CmdLine

-- | Generates a basic converter program such as <tt>music2ly</tt>,
--   <tt>music2musicxml</tt> etc.
converterMain :: String -> String -> IO ()

-- | Generates a basic converter program that invokes <tt>lilypond</tt> to
--   generate music notation. Used for <tt>music2pdf</tt> etc.
lilypondConverterMain :: String -> IO ()

-- | Translate an input file using the given paramters.
translateFile :: String -> String -> Maybe String -> Maybe FilePath -> Maybe FilePath -> IO ()

-- | Translate an input file and invoke Lilypond on the resulting output
--   file.
translateFileAndRunLilypond :: String -> Maybe String -> Maybe FilePath -> IO ()

-- | Current Music Suite version.
version :: Version

-- | Current Music Suite version as a string.
versionString :: String
instance Show ConverterOptions
instance Show LilypondConverterOptions


-- | The Music Suite comes with many standard preludes.
--   
--   This module reexports <a>Music.Prelude.Standard</a> for convenience.
module Music.Prelude
