-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | API for write snmp client.
--   
@package snmp
@version 0.2.0.0

module Network.Protocol.Snmp

-- | Snmp data types
data Value
OI :: OID -> Value
Zero :: Value
Integer :: Int32 -> Value
String :: ByteString -> Value
IpAddress :: Word8 -> Word8 -> Word8 -> Word8 -> Value
Counter32 :: Word32 -> Value
Gauge32 :: Word32 -> Value
TimeTicks :: Word32 -> Value
Opaque :: ByteString -> Value
Counter64 :: Word64 -> Value
ZeroDotZero :: Value
NoSuchInstance :: Value
NoSuchObject :: Value
EndOfMibView :: Value

-- | Standard ASN.1 Object ID (OID)
type OID = [Integer]
type OIDS = [OID]

-- | Phantom type for version 2 (Header V2, PDU V2)
data V2

-- | Phantom type for version 3 (Header V3, PDU V3)
data V3

-- | Snmp version tag
data Version
Version1 :: Version
Version2 :: Version
Version3 :: Version

-- | Top level type, which describe snmp packet
data Packet

-- | Snmp header without version tag
data Header a

-- | (snmp2 only) Community for 2(1) version
newtype Community
Community :: ByteString -> Community

-- | (snmp3 only) Message Identifier (like RequestId in PDU)
newtype ID
ID :: Int32 -> ID

-- | (snmp3 only) Message max size must be &gt; 484
newtype MaxSize
MaxSize :: Integer -> MaxSize

-- | (snmp3 only) rfc3412, message flag
data Flag
Flag :: Reportable -> PrivAuth -> Flag

-- | (snmp3 only) rfc3412, security model
data SecurityModel
UserBasedSecurityModel :: SecurityModel

-- | (snmp3 only) rfc3412, security parameter
data SecurityParameter
SecurityParameter :: ByteString -> Int32 -> Int32 -> ByteString -> ByteString -> ByteString -> SecurityParameter
authoritiveEngineId :: SecurityParameter -> ByteString
authoritiveEngineBoots :: SecurityParameter -> Int32
authoritiveEngineTime :: SecurityParameter -> Int32
userName :: SecurityParameter -> ByteString
authenticationParameters :: SecurityParameter -> ByteString
privacyParameters :: SecurityParameter -> ByteString

-- | (snmp3 only) rfc3412, as PrivAuth
type Reportable = Bool

-- | (snmp3 only) rfc3412, type for create message flag
data PrivAuth
NoAuthNoPriv :: PrivAuth
AuthNoPriv :: PrivAuth
AuthPriv :: PrivAuth
type EngineBootId = Int32
type PrivacyParameter = ByteString
type EngineTime = Int32
type EngineId = ByteString

-- | Snmp body
data PDU a
CryptedPDU :: ByteString -> PDU V3

-- | requests
data Request
GetRequest :: RequestId -> ErrorStatus -> ErrorIndex -> Request
rid :: Request -> RequestId
es :: Request -> ErrorStatus
ei :: Request -> ErrorIndex
GetNextRequest :: RequestId -> ErrorStatus -> ErrorIndex -> Request
rid :: Request -> RequestId
es :: Request -> ErrorStatus
ei :: Request -> ErrorIndex
GetResponse :: RequestId -> ErrorStatus -> ErrorIndex -> Request
rid :: Request -> RequestId
es :: Request -> ErrorStatus
ei :: Request -> ErrorIndex
SetRequest :: RequestId -> ErrorStatus -> ErrorIndex -> Request
rid :: Request -> RequestId
es :: Request -> ErrorStatus
ei :: Request -> ErrorIndex
GetBulk :: RequestId -> ErrorStatus -> ErrorIndex -> Request
rid :: Request -> RequestId
es :: Request -> ErrorStatus
ei :: Request -> ErrorIndex
Inform :: RequestId -> ErrorStatus -> ErrorIndex -> Request
rid :: Request -> RequestId
es :: Request -> ErrorStatus
ei :: Request -> ErrorIndex
V2Trap :: RequestId -> ErrorStatus -> ErrorIndex -> Request
rid :: Request -> RequestId
es :: Request -> ErrorStatus
ei :: Request -> ErrorIndex
Report :: RequestId -> ErrorStatus -> ErrorIndex -> Request
rid :: Request -> RequestId
es :: Request -> ErrorStatus
ei :: Request -> ErrorIndex

-- | Request id
type RequestId = Int32

-- | Error status
type ErrorStatus = Integer

-- | Error index
type ErrorIndex = Integer

-- | Variable bindings
newtype Suite
Suite :: [Coupla] -> Suite

-- | Coupla oid -&gt; value
data Coupla
Coupla :: OID -> Value -> Coupla
oid :: Coupla -> OID
value :: Coupla -> Value

-- | (snmp3 only) rfc3412, types for ScopedPDU
newtype ContextEngineID
ContextEngineID :: ByteString -> ContextEngineID
newtype ContextName
ContextName :: ByteString -> ContextName

-- | some universal getters, setters
class HasItem a
getHeader :: HasItem a => Packet -> Header a
setHeader :: HasItem a => Header a -> Packet -> Packet
getPDU :: HasItem a => Packet -> PDU a
setPDU :: HasItem a => PDU a -> Packet -> Packet

-- | (snmp2 only) getters, setters for work with Header V2
class HasV2 a
getCommunity :: HasV2 a => Header a -> Community
setCommunity :: HasV2 a => Community -> Header a -> Header a

-- | (snmp3 only) getters, setters for work with Header V3 and PDU V3.
class HasV3 a
getID :: HasV3 a => Header a -> ID
getMaxSize :: HasV3 a => Header a -> MaxSize
getFlag :: HasV3 a => Header a -> Flag
getSecurityModel :: HasV3 a => Header a -> SecurityModel
getSecurityParameter :: HasV3 a => Header a -> SecurityParameter
getAuthoritiveEngineId :: HasV3 a => Header a -> ByteString
getAuthoritiveEngineBoots :: HasV3 a => Header a -> Int32
getAuthoritiveEngineTime :: HasV3 a => Header a -> Int32
getUserName :: HasV3 a => Header a -> ByteString
getAuthenticationParameters :: HasV3 a => Header a -> ByteString
getPrivacyParameters :: HasV3 a => Header a -> ByteString
getContextEngineID :: HasV3 a => PDU a -> ContextEngineID
getContextName :: HasV3 a => PDU a -> ContextName
setID :: HasV3 a => ID -> Header a -> Header a
setMaxSize :: HasV3 a => MaxSize -> Header a -> Header a
setFlag :: HasV3 a => Flag -> Header a -> Header a
setSecurityModel :: HasV3 a => SecurityModel -> Header a -> Header a
setSecurityParameter :: HasV3 a => SecurityParameter -> Header a -> Header a
setAuthoritiveEngineId :: HasV3 a => ByteString -> Header a -> Header a
setAuthoritiveEngineBoots :: HasV3 a => Int32 -> Header a -> Header a
setAuthoritiveEngineTime :: HasV3 a => Int32 -> Header a -> Header a
setUserName :: HasV3 a => ByteString -> Header a -> Header a
setAuthenticationParameters :: HasV3 a => ByteString -> Header a -> Header a
setPrivacyParameters :: HasV3 a => ByteString -> Header a -> Header a
setContextEngineID :: HasV3 a => ContextEngineID -> PDU a -> PDU a
setContextName :: HasV3 a => ContextName -> PDU a -> PDU a

-- | initial new object, like mempty for monoid
class Construct a
initial :: Construct a => a
getVersion :: Packet -> Version
getRequest :: Packet -> Request
setRequest :: Request -> Packet -> Packet
getRid :: Packet -> RequestId
setRid :: RequestId -> Packet -> Packet
getSuite :: Packet -> Suite
setSuite :: Suite -> Packet -> Packet
getErrorStatus :: Packet -> ErrorStatus
setErrorStatus :: ErrorStatus -> Packet -> Packet
setCommunityP :: Community -> Packet -> Packet
setIDP :: ID -> Packet -> Packet
setMaxSizeP :: MaxSize -> Packet -> Packet
setUserNameP :: ByteString -> Packet -> Packet
getAuthenticationParametersP :: Packet -> ByteString
setAuthenticationParametersP :: ByteString -> Packet -> Packet
setReportableP :: Reportable -> Packet -> Packet
setPrivAuthP :: PrivAuth -> Packet -> Packet
getEngineIdP :: Packet -> EngineId
setEngineIdP :: EngineId -> Packet -> Packet
getEngineBootsP :: Packet -> EngineBootId
setEngineBootsP :: EngineBootId -> Packet -> Packet
getEngineTimeP :: Packet -> Int32
setEngineTimeP :: Int32 -> Packet -> Packet
getPrivParametersP :: Packet -> ByteString
setPrivParametersP :: ByteString -> Packet -> Packet

-- | create auth key from password and context engine id
passwordToKey :: AuthType -> Password -> EngineId -> Key

-- | (only V3) sign Packet
signPacket :: AuthType -> Key -> Packet -> Packet
data AuthType
MD5 :: AuthType
SHA :: AuthType
data PrivType
DES :: PrivType
AES :: PrivType
type Password = ByteString
type Key = ByteString
cleanPass :: ByteString
type Salt = ByteString
type Raw = ByteString
type Encrypted = ByteString
type Rand32 = Int32
type Rand64 = Int64
desEncrypt :: Key -> EngineBootId -> Rand32 -> Raw -> (Encrypted, Salt)
desDecrypt :: Key -> Salt -> Encrypted -> Raw
aesEncrypt :: Key -> EngineBootId -> EngineTime -> Rand64 -> Raw -> (Encrypted, Salt)
aesDecrypt :: Key -> Salt -> EngineBootId -> EngineTime -> Encrypted -> Raw
toSalt :: Int32 -> Int32 -> ByteString

-- | some exception
data ClientException
TimeoutException :: ClientException
ServerException :: Integer -> ClientException
instance Typeable ClientException
instance Eq (PDU a)
instance Show (PDU a)
instance Eq (Header a)
instance Show (Header a)
instance Eq Packet
instance Show Packet
instance Eq Version
instance Show Version
instance Show Value
instance Eq Value
instance Show Request
instance Eq Request
instance Eq Coupla
instance Eq Suite
instance Monoid Suite
instance Show Community
instance Eq Community
instance Show ID
instance Eq ID
instance Show MaxSize
instance Eq MaxSize
instance Show PrivAuth
instance Eq PrivAuth
instance Show Flag
instance Eq Flag
instance Show SecurityModel
instance Eq SecurityModel
instance Eq SecurityParameter
instance Show ContextEngineID
instance Eq ContextEngineID
instance Show ContextName
instance Eq ContextName
instance Eq ClientException
instance Show PrivType
instance Eq PrivType
instance Show AuthType
instance Eq AuthType
instance Exception ClientException
instance Show ClientException
instance ASN1Object Suite
instance Show Suite
instance Show Coupla
instance Binary Packet
instance Binary (PDU V3)
instance ASN1Object SecurityParameter
instance ASN1Object SecurityModel
instance ASN1Object Flag
instance ASN1Object MaxSize
instance ASN1Object ID
instance Show SecurityParameter
instance ASN1Object Community
instance ASN1Object Value
instance ASN1Object Packet
instance ASN1Object Version
instance ASN1Object (PDU V3)
instance ASN1Object (PDU V2)
instance ASN1Object (Header V3)
instance ASN1Object (Header V2)
instance HasV3 V3
instance HasV2 V2
instance HasItem V3
instance HasItem V2
instance Construct Request
instance Construct Suite
instance Construct SecurityParameter
instance Construct (PDU V2)
instance Construct (PDU V3)
instance Construct (Header V2)
instance Construct (Header V3)
instance Construct (Version -> Packet)

module Network.Snmp.Client
data Client
type Port = String
type Hostname = String
type Login = ByteString
type Password = ByteString

-- | Snmp version tag
data Version
Version1 :: Version
Version2 :: Version
Version3 :: Version

-- | (snmp2 only) Community for 2(1) version
newtype Community
Community :: ByteString -> Community
data Config
ConfigV2 :: Hostname -> Port -> Int -> Community -> Config
hostname :: Config -> Hostname
port :: Config -> Port
timeout :: Config -> Int
community :: Config -> Community
ConfigV3 :: Hostname -> Port -> Int -> Login -> Password -> Password -> PrivAuth -> ByteString -> AuthType -> PrivType -> Config
hostname :: Config -> Hostname
port :: Config -> Port
timeout :: Config -> Int
sequrityName :: Config -> Login
authPass :: Config -> Password
privPass :: Config -> Password
sequrityLevel :: Config -> PrivAuth
context :: Config -> ByteString
authType :: Config -> AuthType
privType :: Config -> PrivType

-- | Coupla oid -&gt; value
data Coupla
Coupla :: OID -> Value -> Coupla
oid :: Coupla -> OID
value :: Coupla -> Value

-- | Variable bindings
newtype Suite
Suite :: [Coupla] -> Suite

-- | (snmp3 only) rfc3412, type for create message flag
data PrivAuth
NoAuthNoPriv :: PrivAuth
AuthNoPriv :: PrivAuth
AuthPriv :: PrivAuth
data AuthType
MD5 :: AuthType
SHA :: AuthType

-- | Snmp data types
data Value
OI :: OID -> Value
Zero :: Value
Integer :: Int32 -> Value
String :: ByteString -> Value
IpAddress :: Word8 -> Word8 -> Word8 -> Word8 -> Value
Counter32 :: Word32 -> Value
Gauge32 :: Word32 -> Value
TimeTicks :: Word32 -> Value
Opaque :: ByteString -> Value
Counter64 :: Word64 -> Value
ZeroDotZero :: Value
client :: Config -> IO Client
get :: Client -> OIDS -> IO Suite
bulkget :: Client -> OIDS -> IO Suite
getnext :: Client -> OIDS -> IO Suite
walk :: Client -> OIDS -> IO Suite
bulkwalk :: Client -> OIDS -> IO Suite
set :: Client -> Suite -> IO Suite
close :: Client -> IO ()
oidFromBS :: ByteString -> [Integer]

module Network.Snmp.Example
