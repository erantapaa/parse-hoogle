-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Wai middleware for request throttling
--   
@package wai-throttler
@version 0.1.0.5


-- | Wai middleware for request throttling.
--   
--   Basic idea: on every (matching) request a counter is incremented. If
--   it exceeds given limit, request is blocked and error response is sent
--   to client. Request counter resets after defined period of time.
--   
--   The <a>throttle</a> function limits request to the underlying
--   application. If you wish to limit only parts of your requests you need
--   to do the routing yourself. For convenience, <a>throttlePath</a>
--   function is provided which applies throttling only for requests with
--   matching URL path.
module Network.Wai.Middleware.Throttler

-- | Cache type class. Throttle cache is used to store request counts. Can
--   store multiple counts via different keys. E.g. keys can be client IP
--   addresses or user logins.
class ThrottleCache cache
cacheCount :: ThrottleCache cache => cache -> ByteString -> IO Int

-- | Create in-memory throttle cache.
--   
--   Normally throttle cache does not need to know what the limit is. But
--   this one uses some trickery to prevent unnecessary calls to slow
--   getCurrentTime function.
newMemoryThrottleCache :: Int -> NominalDiffTime -> IO MemoryThrottleCache

-- | Wai middleware that cuts requests if request rate is higher than
--   defined level. Responds with 429 if limit exceeded
throttle :: ThrottleCache cache => cache -> Int -> (Request -> Maybe ByteString) -> Middleware

-- | Apply throttling to requests with matching URL path
throttlePath :: ThrottleCache cache => ByteString -> cache -> Int -> (Request -> Maybe ByteString) -> Middleware
instance ThrottleCache MemoryThrottleCache
