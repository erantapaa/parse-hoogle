-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | create slide for presentation.
--   
@package takahashi
@version 0.2.2.0

module Control.Monad.Takahashi.HtmlBuilder.Style
data FloatOption
FloatLeft :: FloatOption
ClearBoth :: FloatOption
data TextAlign
AlignLeft :: TextAlign
AlignCenter :: TextAlign
AlignRight :: TextAlign
data VerticalAlign
AlignTop :: VerticalAlign
AlignMiddle :: VerticalAlign
AlignBottom :: VerticalAlign
data Display
Table :: Display
TableCell :: Display
Block :: Display
None :: Display
InlineTable :: Display
InlineBlock :: Display
data Len
Per :: Int -> Len
Px :: Int -> Len
data Color
Color :: Integer -> Integer -> Integer -> Color
data BorderStyle
BorderNone :: BorderStyle
BorderSolid :: BorderStyle
BorderDouble :: BorderStyle
data BoxSizing
ContentsBox :: BoxSizing
BorderBox :: BoxSizing
data FontFamily
FontName :: String -> FontFamily
Monospace :: FontFamily
Selif :: FontFamily
SansSelif :: FontFamily
data WhiteSpace
Normal :: WhiteSpace
Pre :: WhiteSpace
data Style
Style :: Size -> Maybe FloatOption -> Maybe Display -> Maybe Color -> Margin -> Border -> Font -> Align -> Style
_size :: Style -> Size
_float :: Style -> Maybe FloatOption
_display :: Style -> Maybe Display
_backGround :: Style -> Maybe Color
_margin :: Style -> Margin
_border :: Style -> Border
_font :: Style -> Font
_align :: Style -> Align
size :: Lens' Style Size
float :: Lens' Style (Maybe FloatOption)
display :: Lens' Style (Maybe Display)
font :: Lens' Style Font
backGround :: Lens' Style (Maybe Color)
align :: Lens' Style Align
border :: Lens' Style Border
data Size
Size :: Maybe Len -> Maybe Len -> Size
_height :: Size -> Maybe Len
_width :: Size -> Maybe Len
height :: Lens' Size (Maybe Len)
width :: Lens' Size (Maybe Len)
data Align
Align :: Maybe TextAlign -> Maybe VerticalAlign -> Align
_textAlign :: Align -> Maybe TextAlign
_verticalAlign :: Align -> Maybe VerticalAlign
textAlign :: Lens' Align (Maybe TextAlign)
verticalAlign :: Lens' Align (Maybe VerticalAlign)
data Font
Font :: Maybe Color -> Maybe Int -> Maybe [FontFamily] -> Maybe WhiteSpace -> Font
_foreColor :: Font -> Maybe Color
_fontSize :: Font -> Maybe Int
_fontFamily :: Font -> Maybe [FontFamily]
_whiteSpace :: Font -> Maybe WhiteSpace
foreColor :: Lens' Font (Maybe Color)
fontSize :: Lens' Font (Maybe Int)
fontFamily :: Lens' Font (Maybe [FontFamily])
whiteSpace :: Lens' Font (Maybe WhiteSpace)
data Margin
Margin :: Maybe Len -> Maybe Len -> Maybe Len -> Maybe Len -> Maybe Len -> Maybe Len -> Maybe Len -> Maybe Len -> Margin
_paddingTop :: Margin -> Maybe Len
_paddingLeft :: Margin -> Maybe Len
_paddingBottom :: Margin -> Maybe Len
_paddingRight :: Margin -> Maybe Len
_marginTop :: Margin -> Maybe Len
_marginLeft :: Margin -> Maybe Len
_marginBottom :: Margin -> Maybe Len
_marginRight :: Margin -> Maybe Len
margin :: Lens' Style Margin
paddingTop :: Lens' Margin (Maybe Len)
paddingLeft :: Lens' Margin (Maybe Len)
paddingRight :: Lens' Margin (Maybe Len)
paddingBottom :: Lens' Margin (Maybe Len)
marginTop :: Lens' Margin (Maybe Len)
marginLeft :: Lens' Margin (Maybe Len)
marginRight :: Lens' Margin (Maybe Len)
marginBottom :: Lens' Margin (Maybe Len)
data Border
Border :: Maybe Color -> Maybe Int -> Maybe BorderStyle -> Maybe BoxSizing -> Border
_borderColor :: Border -> Maybe Color
_borderWidth :: Border -> Maybe Int
_borderStyle :: Border -> Maybe BorderStyle
_boxSizing :: Border -> Maybe BoxSizing
borderColor :: Lens' Border (Maybe Color)
borderWidth :: Lens' Border (Maybe Int)
borderStyle :: Lens' Border (Maybe BorderStyle)
boxSizing :: Lens' Border (Maybe BoxSizing)
defaultStyle :: Style
type MakeStyle a = State Style a
runMakeStyle :: Style -> MakeStyle a -> (a, Style)
execMakeStyle :: Style -> MakeStyle a -> Style
showStyle :: Style -> String
makeStyle :: MakeStyle a -> String
normalizeColor :: Color -> Color
showColor :: Color -> String
instance Show FloatOption
instance Read FloatOption
instance Eq FloatOption
instance Ord FloatOption
instance Show TextAlign
instance Read TextAlign
instance Eq TextAlign
instance Ord TextAlign
instance Show VerticalAlign
instance Read VerticalAlign
instance Eq VerticalAlign
instance Ord VerticalAlign
instance Show Display
instance Read Display
instance Eq Display
instance Ord Display
instance Show Len
instance Read Len
instance Eq Len
instance Ord Len
instance Show Color
instance Read Color
instance Eq Color
instance Ord Color
instance Show BorderStyle
instance Read BorderStyle
instance Eq BorderStyle
instance Ord BorderStyle
instance Show BoxSizing
instance Read BoxSizing
instance Eq BoxSizing
instance Ord BoxSizing
instance Show FontFamily
instance Read FontFamily
instance Eq FontFamily
instance Ord FontFamily
instance Show WhiteSpace
instance Read WhiteSpace
instance Eq WhiteSpace
instance Ord WhiteSpace
instance Show Margin
instance Read Margin
instance Eq Margin
instance Ord Margin
instance Show Size
instance Read Size
instance Eq Size
instance Ord Size
instance Show Align
instance Read Align
instance Eq Align
instance Ord Align
instance Show Font
instance Read Font
instance Eq Font
instance Ord Font
instance Show Border
instance Read Border
instance Eq Border
instance Ord Border
instance Show Style
instance Read Style
instance Eq Style
instance Ord Style

module Control.Monad.Takahashi.HtmlBuilder.Html
data Html
H1 :: String -> Html -> Html
H2 :: String -> Html -> Html
H3 :: String -> Html -> Html
Li :: [String] -> Html -> Html
P :: String -> Html -> Html
TT :: String -> Html -> Html
Img :: String -> Style -> Html -> Html
Div :: (Maybe String) -> (Maybe String) -> (Maybe Style) -> Html -> Html -> Html
Emp :: Html
showHtml :: Html -> String
showDiv :: Html -> String
instance Show Html
instance Read Html
instance Eq Html
instance Ord Html
instance Monoid Html

module Control.Monad.Takahashi.HtmlBuilder.Monad
data DrawType
SimpleDraw :: DrawType
HStretch :: DrawType
WStretch :: DrawType
Stretch :: DrawType
data DivInfo o
DivInfo :: Int -> MakeStyle () -> HtmlBuilder o () -> DivInfo o
divRatio :: DivInfo o -> Int
divMakeStyle :: DivInfo o -> MakeStyle ()
divData :: DivInfo o -> HtmlBuilder o ()
divInfo :: DivInfo o
data HtmlBuilderBase o a
GetHtmlOption :: HtmlBuilderBase o o
PutHtmlOption :: o -> HtmlBuilderBase o ()
WriteHeader1 :: String -> HtmlBuilderBase o ()
WriteHeader2 :: String -> HtmlBuilderBase o ()
WriteHeader3 :: String -> HtmlBuilderBase o ()
WriteParagraph :: String -> HtmlBuilderBase o ()
WriteList :: [String] -> HtmlBuilderBase o ()
DrawPicture :: DrawType -> String -> HtmlBuilderBase o ()
VerticalDiv :: [DivInfo o] -> HtmlBuilderBase o ()
HorizonDiv :: [DivInfo o] -> HtmlBuilderBase o ()
WriteHtml :: Html -> HtmlBuilderBase o ()
type HtmlBuilder o = Skeleton (HtmlBuilderBase o)
divInfo2Tuple :: DivInfo o -> (Int, (MakeStyle (), HtmlBuilder o ()))
tuple2DivInfo :: (Int, (MakeStyle (), HtmlBuilder o ())) -> DivInfo o
getHtmlOption :: HtmlBuilder o o
putHtmlOption :: o -> HtmlBuilder o ()
writeHeader1 :: String -> HtmlBuilder o ()
writeHeader2 :: String -> HtmlBuilder o ()
writeHeader3 :: String -> HtmlBuilder o ()
writeParagraph :: String -> HtmlBuilder o ()
writeList :: [String] -> HtmlBuilder o ()
drawPicture :: DrawType -> String -> HtmlBuilder o ()
verticalDiv :: [DivInfo o] -> HtmlBuilder o ()
horizonDiv :: [DivInfo o] -> HtmlBuilder o ()
writeHtml :: Html -> HtmlBuilder o ()
instance Show DrawType
instance Read DrawType
instance Eq DrawType
instance Ord DrawType
instance MonadState x (HtmlBuilder x)

module Control.Monad.Takahashi.Util
stateSandbox :: MonadState s m => m a -> m a
sub :: Eq a => [a] -> [a] -> [a] -> [a]
interpret :: Monad m => (forall a. instr a -> m a) -> Skeleton instr b -> m b

module Control.Monad.Takahashi.HtmlBuilder
type HBuilder a = HtmlBuilder Style a
type HBuilderRWS a = RWS () Html Style a
data DivDirection
buildHtml :: HBuilder a -> HBuilderRWS a
makeDivs :: DivDirection -> [DivInfo Style] -> HBuilderRWS ()
runBuildHtml :: HBuilder a -> Html
normalizeDivInfo :: [DivInfo o] -> [DivInfo o]
instance Show DivDirection
instance Read DivDirection
instance Eq DivDirection
instance Ord DivDirection

module Control.Monad.Takahashi.Monad
data TakahashiBase a
GetSlideOption :: TakahashiBase SlideOption
PutSlideOption :: SlideOption -> TakahashiBase ()
Slide :: HtmlBuilder Style () -> TakahashiBase ()
type Taka = Skeleton TakahashiBase
getSlideOption :: Taka SlideOption
putSlideOption :: SlideOption -> Taka ()
slide :: HtmlBuilder Style () -> Taka ()
data BlockOption
BlockOption :: Maybe Color -> Maybe Color -> Maybe Color -> Maybe BorderStyle -> Maybe Int -> BlockOption
_fontColor :: BlockOption -> Maybe Color
_bgColor :: BlockOption -> Maybe Color
_frameColor :: BlockOption -> Maybe Color
_frameStyle :: BlockOption -> Maybe BorderStyle
_blockFontSize :: BlockOption -> Maybe Int
data SlideOption
SlideOption :: String -> Maybe Int -> BlockOption -> BlockOption -> BlockOption -> BlockOption -> BlockOption -> SlideOption
_slideTitle :: SlideOption -> String
_slideFontSize :: SlideOption -> Maybe Int
_titleOption :: SlideOption -> BlockOption
_contentsOption :: SlideOption -> BlockOption
_contentsOption2 :: SlideOption -> BlockOption
_annotationOption :: SlideOption -> BlockOption
_codeOption :: SlideOption -> BlockOption
frameStyle :: Lens' BlockOption (Maybe BorderStyle)
frameColor :: Lens' BlockOption (Maybe Color)
fontColor :: Lens' BlockOption (Maybe Color)
blockFontSize :: Lens' BlockOption (Maybe Int)
bgColor :: Lens' BlockOption (Maybe Color)
titleOption :: Lens' SlideOption BlockOption
slideTitle :: Lens' SlideOption String
slideFontSize :: Lens' SlideOption (Maybe Int)
contentsOption2 :: Lens' SlideOption BlockOption
contentsOption :: Lens' SlideOption BlockOption
codeOption :: Lens' SlideOption BlockOption
annotationOption :: Lens' SlideOption BlockOption
defaultSlideOption :: SlideOption
instance Show BlockOption
instance Read BlockOption
instance Eq BlockOption
instance Ord BlockOption
instance Show SlideOption
instance Read SlideOption
instance Eq SlideOption
instance Ord SlideOption
instance MonadState SlideOption Taka

module Control.Monad.Takahashi.Slide
data BlockOption
BlockOption :: Maybe Color -> Maybe Color -> Maybe Color -> Maybe BorderStyle -> Maybe Int -> BlockOption
_fontColor :: BlockOption -> Maybe Color
_bgColor :: BlockOption -> Maybe Color
_frameColor :: BlockOption -> Maybe Color
_frameStyle :: BlockOption -> Maybe BorderStyle
_blockFontSize :: BlockOption -> Maybe Int
fontColor :: Lens' BlockOption (Maybe Color)
bgColor :: Lens' BlockOption (Maybe Color)
frameColor :: Lens' BlockOption (Maybe Color)
frameStyle :: Lens' BlockOption (Maybe BorderStyle)
data SlideOption
SlideOption :: String -> Maybe Int -> BlockOption -> BlockOption -> BlockOption -> BlockOption -> BlockOption -> SlideOption
_slideTitle :: SlideOption -> String
_slideFontSize :: SlideOption -> Maybe Int
_titleOption :: SlideOption -> BlockOption
_contentsOption :: SlideOption -> BlockOption
_contentsOption2 :: SlideOption -> BlockOption
_annotationOption :: SlideOption -> BlockOption
_codeOption :: SlideOption -> BlockOption
slideTitle :: Lens' SlideOption String
slideFontSize :: Lens' SlideOption (Maybe Int)
titleOption :: Lens' SlideOption BlockOption
codeOption :: Lens' SlideOption BlockOption
contentsOption :: Lens' SlideOption BlockOption
contentsOption2 :: Lens' SlideOption BlockOption
annotationOption :: Lens' SlideOption BlockOption
blockFontSize :: Lens' BlockOption (Maybe Int)
defaultSlideOption :: SlideOption
type Taka = Skeleton TakahashiBase
buildTakahashi :: Taka a -> TakahashiRWS a
writeSlideWithTemplate :: String -> String -> Taka a -> IO ()
writeSlide :: String -> Taka a -> IO ()
runTakahashi :: Taka a -> Html
showTakahashi :: Taka a -> String
makeSlideWithTemplate :: String -> Taka a -> IO String
makeSlide :: Taka a -> IO String

module Control.Monad.Takahashi.API
newtype Contents
Contents :: (SlideOption -> HBuilder ()) -> Contents
extructHBuilder :: Contents -> SlideOption -> HBuilder ()
bindPage :: Contents -> Taka ()
takaCont :: String -> Contents
listCont :: [String] -> Contents
parCont :: String -> Contents
takaCont2 :: String -> Contents
listCont2 :: [String] -> Contents
parCont2 :: String -> Contents
imgCont :: DrawType -> String -> Contents
codeCont :: String -> Contents
horizonCont :: [Contents] -> Contents
verticalCont :: [Contents] -> Contents
annotationCont :: Contents -> String -> Contents
twinTopCont :: Contents -> Contents -> Contents
twinBottomCont :: Contents -> Contents -> Contents
twinLeftCont :: Contents -> Contents -> Contents
twinRightCont :: Contents -> Contents -> Contents
titleCont :: String -> String -> Contents
title :: String -> String -> Taka ()
taka :: String -> Taka ()
list :: [String] -> Taka ()
par :: String -> Taka ()
taka2 :: String -> Taka ()
list2 :: [String] -> Taka ()
par2 :: String -> Taka ()
horizon :: [Contents] -> Taka ()
vertical :: [Contents] -> Taka ()
annotation :: Contents -> String -> Taka ()
img :: DrawType -> String -> Taka ()
code :: String -> String -> Taka ()
code2 :: String -> String -> Taka ()
twinTop :: Contents -> Contents -> Taka ()
twinBottom :: Contents -> Contents -> Taka ()
twinLeft :: Contents -> Contents -> Taka ()
twinRight :: Contents -> Contents -> Taka ()

module Control.Monad.Takahashi
