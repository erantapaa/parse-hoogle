-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple library for network (HTTP REST-like) YAML RPC
--   
--   This library aimed to organize remote procedure call (RPC) over HTTP
--   protocol, using YAML as data serialization format.
@package yaml-rpc
@version 1.0.3

module Network.YAML.Caller

-- | This class will be extended in future.
class Connection c
connectUri :: Connection c => c -> String

-- | Call remote method
call :: (ToJSON args, Connection srv, FromJSON result, MonadIO m) => srv -> Text -> args -> m result
instance Connection String

module Network.YAML.API

-- | Data type description for API
data Type

-- | Like (); YAML notation for it is Void.
TVoid :: Type
TString :: Type
TText :: Type
TInteger :: Type
TDouble :: Type

-- | <tt>Maybe Type</tt>. YAML notation is <tt>Maybe Type</tt>.
TMaybe :: Type -> Type

-- | <tt>[Type]</tt>. YAML notation is <tt>List Type</tt>.
TList :: Type -> Type

-- | User-defined record type
TUser :: (Map Text Type) -> Type

-- | Any Haskell type
THaskell :: Text -> Type

-- | API method description
data Method
Method :: [Type] -> Type -> Method

-- | Types of method arguments
methodArgs :: Method -> [Type]

-- | Method return value type
methodReturnType :: Method -> Type

-- | API description
data API
API :: Text -> Map Text Type -> Map Text Method -> API

-- | API service identification
apiUri :: API -> Text

-- | Exposed data types
apiTypes :: API -> Map Text Type

-- | Exposed methods
apiMethods :: API -> Map Text Method

-- | Read API definition from file. Returned expression is of type API.
readAPI :: FilePath -> ExpQ
instance ToJSON API
instance ToJSON Method
instance ToJSON Type
instance FromJSON API
instance FromJSON Method
instance FromJSON Type
instance Lift API
instance Eq API
instance Show API
instance Lift Method
instance Eq Method
instance Show Method
instance Lift Type
instance Eq Type
instance Show Type
instance Lift Text
instance (Lift a, Lift b) => Lift (Map a b)

module Network.YAML.TH.Server

-- | Generate API description. Returned expression is of API type.
makeAPI :: Text -> [Name] -> [Name] -> ExpQ

-- | Write API description to file.
writeAPI :: FilePath -> Text -> [Name] -> [Name] -> Q [Dec]

module Network.YAML.TH.Client

-- | Generate data types and wrapper methods declarations from API
--   description
generateAPI :: API -> Q [Dec]

-- | Generate data types and wrapper methods declarations from API
--   description, read from file
useAPI :: FilePath -> Q [Dec]

module Network.YAML.TH.Dispatcher
type ValueFn m = Value -> m Value

-- | Only functions of this class can be exposed
class ToValueFn m f
toValueFn :: ToValueFn m f => f -> ValueFn m

-- | Dispatcher function gets method name and returns corresponding
--   function, or Nothing if there is no such method.
type Dispatcher m = Text -> Maybe (ValueFn m)

-- | Generate dispatcher function. This will generate function called
--   <tt>dispatcher</tt>.
generateDispatcherT :: Name -> API -> Q [Dec]
generateDispatcher :: API -> Q [Dec]
instance (Monad m, FromJSON x, ToValueFn m f) => ToValueFn m (x -> f)
instance (ToJSON y, MonadIO m) => ToValueFn m (m y)

module Network.YAML
