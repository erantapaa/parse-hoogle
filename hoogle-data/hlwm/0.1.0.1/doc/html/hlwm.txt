-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bindings to the herbstluftwm window manager
--   
@package hlwm
@version 0.1.0.1


-- | Internal herbluftwm IPC implementation
--   
--   This is an internal module. Use only with extreme caution.
--   
--   <h2>On event handling</h2>
--   
--   There is a single function <a>recvEvent</a>, that returns all events
--   received by herbstluftwm in order. The high-level functions
--   <a>sendCommand</a> and <a>nextHook</a> work by calling
--   <a>recvEvent</a> until they get the event they expected and discarding
--   all other events received in the meantime. This means that it is not
--   possible to call <a>nextHook</a> and <a>sendCommand</a> concurrently
--   in different threads. Also, when calling <a>asyncSendCommand</a> and
--   then <a>nextHook</a>, the output of the command will likely be thrown
--   away.
--   
--   See <a>HLWM.IPC</a> for an interface that allows concurrent calling of
--   <a>nextHook</a> and <a>sendCommand</a>.
module HLWM.IPC.Internal

-- | Opaque type representing the connection to the herbstluftwm server
--   
--   See <a>connect</a> and <a>disconnect</a>.
data HerbstConnection
HerbstConnection :: Display -> Atom -> Atom -> Atom -> Window -> Window -> Window -> HerbstConnection
display :: HerbstConnection -> Display
atomArgs :: HerbstConnection -> Atom
atomOutput :: HerbstConnection -> Atom
atomStatus :: HerbstConnection -> Atom
root :: HerbstConnection -> Window
hooksWin :: HerbstConnection -> Window
clientWin :: HerbstConnection -> Window

-- | Connect to the herbstluftwm server.
--   
--   Be sure to call <a>disconnect</a> if you don't need the connection
--   anymore, to free any allocated resources. When in doubt, call
--   <a>withConnection</a>.
connect :: IO (Maybe HerbstConnection)

-- | Close connection to the herbstluftwm server.
--   
--   After calling this function, the <a>HerbstConnection</a> is no longer
--   valid and must not be used anymore.
disconnect :: HerbstConnection -> IO ()

-- | Execute an action with a newly established <a>HerbstConnection</a>.
--   
--   Connects to the herbstluftwm server, passes the connection on to the
--   supplied action and closes the connection again after the action has
--   finished.
withConnection :: (HerbstConnection -> IO a) -> IO (Maybe a)

-- | Execute a command in the herbstluftwm server.
--   
--   Send a command consisting of a list of Strings to the server and wait
--   for the response. Herbstluftwm interprets this list as a command
--   followed by a number of arguments. Returns a tuple of the exit status
--   and output of the called command.
--   
--   <b>Warning:</b> This discards any events received from the server that
--   are not the response to the command. In particular, any hook events
--   received while waiting for the response will be thrown away.
sendCommand :: HerbstConnection -> [String] -> IO (Int, String)

-- | Wait for a hook event from the server and return it.
--   
--   A hook is just an arbitrary list of strings generated by herbstluftwm
--   or its clients.
--   
--   <b>Warning:</b> This discards any events received from the server that
--   are not hook events. In particular, any responses to commands called
--   by <a>asyncSendCommand</a> received while waiting for the hook will be
--   thrown away.
nextHook :: HerbstConnection -> IO [String]

-- | Wait for the next HerbstEvent in the queue and return it.
recvEvent :: HerbstConnection -> IO HerbstEvent

-- | Read a HerbstEvent, if one is pending
tryRecvEvent :: HerbstConnection -> IO (Maybe HerbstEvent)

-- | The type of events generated by herbstluftwm.
data HerbstEvent
HookEvent :: [String] -> HerbstEvent
StatusEvent :: Int -> HerbstEvent
OutputEvent :: String -> HerbstEvent

-- | Send a command to the server, but don't wait for the response.
--   
--   Like <a>sendCommand</a>, but it's the callers responsibility to
--   manually receive the output of the command with <a>recvEvent</a>.
--   
--   Note, that it is not possible to relate asynchronous command calls
--   with responses returned by <a>recvEvent</a>, apart from the order in
--   which they are received.
asyncSendCommand :: HerbstConnection -> [String] -> IO ()


-- | An IPC client implementation for the <a>herbstluftwm</a> window
--   manager.
--   
--   See <a>herbstluftwm(1)</a> and <a>herbstclient(1)</a> for what this is
--   all about.
--   
--   <h2>Examples</h2>
--   
--   Sending a command to herbstluftwm:
--   
--   <pre>
--   &gt;&gt;&gt; withConnection (\con -&gt; sendCommand con ["echo", "foo"])
--   Just (0,"foo\n")
--   </pre>
--   
--   Printing 2 hooks:
--   
--   <pre>
--   &gt;&gt;&gt; withConnection (\con -&gt; replicateM_ 2 $ unwords &lt;$&gt; nextHook con &gt;&gt;= putStrLn)
--   focus_changed 0x340004c IPC.hs - emacs
--   focus_changed 0x3200073 ROXTerm
--   Just ()
--   </pre>
--   
--   Although <a>sendCommand</a> is synchronous, you can use it with forkIO
--   or the <a>async</a> library:
--   
--   <pre>
--   withConnection $ \con -&gt; do
--     var &lt;- newEmptyMVar
--     forkIO $ sendCommand con ["echo","foo"] &gt;&gt;= putMVar var
--     -- do some stuff ...
--     -- finally read output
--     output &lt;- takeMVar var
--   </pre>
module HLWM.IPC

-- | Opaque type representing the connection to the herbstluftwm server
--   
--   See <a>connect</a> and <a>disconnect</a>.
data HerbstConnection

-- | Connect to the herbstluftwm server.
--   
--   Be sure to call <a>disconnect</a> if you don't need the connection
--   anymore, to free any allocated resources. When in doubt, call
--   <a>withConnection</a>.
--   
--   Note that there must not be more than one connection open at any time!
connect :: IO (Maybe HerbstConnection)

-- | Close connection to the herbstluftwm server.
--   
--   After calling this function, the <a>HerbstConnection</a> is no longer
--   valid and must not be used anymore.
disconnect :: HerbstConnection -> IO ()

-- | Execute an action with a newly established <a>HerbstConnection</a>.
--   
--   Connects to the herbstluftwm server, passes the connection on to the
--   supplied action and closes the connection again after the action has
--   finished.
withConnection :: (HerbstConnection -> IO a) -> IO (Maybe a)

-- | Execute a command in the herbstluftwm server.
--   
--   Send a command consisting of a list of Strings to the server and wait
--   for the response. Herbstluftwm interprets this list as a command
--   followed by a number of arguments. Returns a tuple of the exit status
--   and output of the called command.
sendCommand :: HerbstConnection -> [String] -> IO (Int, String)

-- | Wait for a hook event from the server and return it.
--   
--   A hook is just an arbitrary list of strings generated by herbstluftwm
--   or its clients.
nextHook :: HerbstConnection -> IO [String]
