-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generate scaffold for cabal project
--   
@package hi
@version 1.2.0.0

module Hi.Config

-- | Parse config file
parseConfig :: String -> [(String, String)]

module Hi.CommandLineOption
data CommandLineOption
CommandLineOption :: String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> String -> Maybe String -> Bool -> Maybe String -> CommandLineOption
packageName :: CommandLineOption -> String
moduleName :: CommandLineOption -> Maybe String
directoryName :: CommandLineOption -> Maybe String
author :: CommandLineOption -> Maybe String
email :: CommandLineOption -> Maybe String
repository :: CommandLineOption -> String
configFilePath :: CommandLineOption -> Maybe String
initializeGitRepository :: CommandLineOption -> Bool
afterCommand :: CommandLineOption -> Maybe String
commandLineOption :: Parser CommandLineOption
defaultRepo :: String
instance Eq CommandLineOption
instance Ord CommandLineOption
instance Show CommandLineOption

module Hi.Types
data Option
Option :: String -> String -> String -> String -> String -> String -> TemplateSource -> [String] -> Option
moduleName :: Option -> String
packageName :: Option -> String
directoryName :: Option -> String
author :: Option -> String
email :: Option -> String
year :: Option -> String
templateSource :: Option -> TemplateSource
afterCommands :: Option -> [String]
data File
TemplateFile :: FilePath -> ByteString -> File
getFilePath :: File -> FilePath
getFileContents :: File -> ByteString
RegularFile :: FilePath -> ByteString -> File
getFilePath :: File -> FilePath
getFileContents :: File -> ByteString
type Files = [File]
data TemplateSource
FromRepo :: String -> TemplateSource
instance Eq File
instance Ord File
instance Show File
instance Eq TemplateSource
instance Ord TemplateSource
instance Show TemplateSource
instance Eq Option
instance Ord Option
instance Show Option

module Hi.Git

-- | Clone given repository to current directory
clone :: String -> IO ()

-- | Return given config value
config :: String -> IO (Maybe String)

-- | Return file list by `git ls-files`
lsFiles :: IO [String]
expandUrl :: String -> String

module Hi.Option
buildOption :: CommandLineOption -> IO Option

module Hi.Directory

-- | Run callback in a temporary directory.
inTemporaryDirectory :: String -> IO a -> IO a

-- | Run callback in given directory.
inDirectory :: FilePath -> IO a -> IO a

module Hi.Template

-- | Determine if a given filepath is a template file based on its
--   extension &gt;&gt;&gt; isTemplate "Example.hs.template" True
--   &gt;&gt;&gt; isTemplate "NotATemplate.hs" False
isTemplate :: FilePath -> Bool

-- | Read templates in given <a>TemplateSource</a>
readTemplates :: TemplateSource -> IO Files

-- | Remove ".template" from <a>FilePath</a>
untemplate :: FilePath -> FilePath

module Hi.FilePath

-- | Convert given path to the destination path, with given options.
rewritePath :: String -> String -> FilePath -> FilePath

module Hi

-- | Run <tt>hi</tt>.
run :: Option -> IO ()

-- | Process given <a>Files</a> and return result. it does
--   
--   <ol>
--   <li>Rewrite path</li>
--   <li>Substitute arguments</li>
--   <li>Drop regular files if template file with same name exists</li>
--   </ol>
process :: Option -> Files -> Files

module Hi.Cli
run :: [String] -> IO ()
