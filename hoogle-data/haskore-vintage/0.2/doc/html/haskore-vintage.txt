-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The February 2000 version of Haskore.
--   
--   The February 2000 version of Haskore.
@package haskore-vintage
@version 0.2

module Haskore.MidiFile
data MidiFile
MidiFile :: MFType -> Division -> [Track] -> MidiFile
data Division
Ticks :: Int -> Division
SMPTE :: Int -> Int -> Division
type Track = [MEvent]
type MFType = Int
data MEvent
MidiEvent :: ElapsedTime -> MidiEvent -> MEvent
MetaEvent :: ElapsedTime -> MetaEvent -> MEvent
NoEvent :: MEvent
type ElapsedTime = Int
type MPitch = Int
type Velocity = Int
type ControlNum = Int
type PBRange = Int
type ProgNum = Int
type Pressure = Int
type MidiChannel = Int
type ControlVal = Int
data MidiEvent
NoteOff :: MidiChannel -> MPitch -> Velocity -> MidiEvent
NoteOn :: MidiChannel -> MPitch -> Velocity -> MidiEvent
PolyAfter :: MidiChannel -> MPitch -> Pressure -> MidiEvent
ProgChange :: MidiChannel -> ProgNum -> MidiEvent
Control :: MidiChannel -> ControlNum -> ControlVal -> MidiEvent
PitchBend :: MidiChannel -> PBRange -> MidiEvent
MonoAfter :: MidiChannel -> Pressure -> MidiEvent
type MTempo = Int
type SMPTEHours = Int
type SMPTEMins = Int
type SMPTESecs = Int
type SMPTEFrames = Int
type SMPTEBits = Int
data MetaEvent
SequenceNum :: Int -> MetaEvent
TextEvent :: String -> MetaEvent
Copyright :: String -> MetaEvent
TrackName :: String -> MetaEvent
InstrName :: String -> MetaEvent
Lyric :: String -> MetaEvent
Marker :: String -> MetaEvent
CuePoint :: String -> MetaEvent
MIDIPrefix :: MidiChannel -> MetaEvent
EndOfTrack :: MetaEvent
SetTempo :: MTempo -> MetaEvent
SMPTEOffset :: SMPTEHours -> SMPTEMins -> SMPTESecs -> SMPTEFrames -> SMPTEBits -> MetaEvent
TimeSig :: Int -> Int -> Int -> Int -> MetaEvent
KeySig :: KeyName -> Mode -> MetaEvent
SequencerSpecific :: [Int] -> MetaEvent
Unknown :: String -> MetaEvent
data KeyName
KeyCf :: KeyName
KeyGf :: KeyName
KeyDf :: KeyName
KeyAf :: KeyName
KeyEf :: KeyName
KeyBf :: KeyName
KeyF :: KeyName
KeyC :: KeyName
KeyG :: KeyName
KeyD :: KeyName
KeyA :: KeyName
KeyE :: KeyName
KeyB :: KeyName
KeyFs :: KeyName
KeyCs :: KeyName
data Mode
Major :: Mode
Minor :: Mode
defST :: Int
defDurT :: Float
instance Show Division
instance Eq Division
instance Show MidiEvent
instance Eq MidiEvent
instance Eq KeyName
instance Ord KeyName
instance Ix KeyName
instance Enum KeyName
instance Show KeyName
instance Show Mode
instance Eq Mode
instance Show MetaEvent
instance Eq MetaEvent
instance Show MEvent
instance Eq MEvent
instance Show MidiFile
instance Eq MidiFile

module Haskore.GeneralMidi
type GenMidiName = String
type GenMidiTable = [(GenMidiName, Int)]
genMidiMap :: GenMidiTable

module Haskore.Bitops
bshiftl :: Int -> Int -> Int
bshiftr :: Int -> Int -> Int
toBase :: Int -> Int -> [Int]
toBytes :: Int -> [Int]
toHex :: Int -> [Int]
toOctal :: Int -> [Int]
toBits :: Int -> [Int]
someBytes :: Int -> Int -> [Int]
fromBase :: Int -> [Int] -> Int
fromBytes :: [Int] -> Int
fromHex :: [Int] -> Int
fromOctal :: [Int] -> Int
fromBits :: [Int] -> Int
bTrunc :: Int -> Int -> Int
bSplitAt :: Int -> Int -> (Int, Int)

module Haskore.LoadMidi
loadMidiFile :: String -> IO MidiFile
showMidiFile :: String -> IO ()
instance Eq Chunk
instance Show MidiFileEvent
instance Show WhichMidiEvent
instance MonadPlus (Parser s w c sz)
instance Monad (Parser s w c sz)

module Haskore.OutputMidi
outputMidiFile :: String -> MidiFile -> IO ()
midiFileToString :: MidiFile -> String

module Haskore.Basics
type Pitch = (PitchClass, Octave)
data PitchClass
Cf :: PitchClass
C :: PitchClass
Cs :: PitchClass
Df :: PitchClass
D :: PitchClass
Ds :: PitchClass
Ef :: PitchClass
E :: PitchClass
Es :: PitchClass
Ff :: PitchClass
F :: PitchClass
Fs :: PitchClass
Gf :: PitchClass
G :: PitchClass
Gs :: PitchClass
Af :: PitchClass
A :: PitchClass
As :: PitchClass
Bf :: PitchClass
B :: PitchClass
Bs :: PitchClass
type Octave = Int
data Music
Note :: Pitch -> Dur -> [NoteAttribute] -> Music
Rest :: Dur -> Music
(:+:) :: Music -> Music -> Music
(:=:) :: Music -> Music -> Music
Tempo :: (Ratio Int) -> Music -> Music
Trans :: Int -> Music -> Music
Instr :: IName -> Music -> Music
Player :: PName -> Music -> Music
Phrase :: [PhraseAttribute] -> Music -> Music
type Dur = Ratio Int
type IName = String
type PName = String
rtof :: Ratio Int -> Float
float :: Int -> Float
type AbsPitch = Int
absPitch :: Pitch -> AbsPitch
pitch :: AbsPitch -> Pitch
pitchClass :: PitchClass -> Int
trans :: Int -> Pitch -> Pitch
cf :: Octave -> Dur -> [NoteAttribute] -> Music
bs :: Octave -> Dur -> [NoteAttribute] -> Music
b :: Octave -> Dur -> [NoteAttribute] -> Music
bf :: Octave -> Dur -> [NoteAttribute] -> Music
as :: Octave -> Dur -> [NoteAttribute] -> Music
a :: Octave -> Dur -> [NoteAttribute] -> Music
af :: Octave -> Dur -> [NoteAttribute] -> Music
gs :: Octave -> Dur -> [NoteAttribute] -> Music
g :: Octave -> Dur -> [NoteAttribute] -> Music
gf :: Octave -> Dur -> [NoteAttribute] -> Music
fs :: Octave -> Dur -> [NoteAttribute] -> Music
f :: Octave -> Dur -> [NoteAttribute] -> Music
ff :: Octave -> Dur -> [NoteAttribute] -> Music
es :: Octave -> Dur -> [NoteAttribute] -> Music
e :: Octave -> Dur -> [NoteAttribute] -> Music
ef :: Octave -> Dur -> [NoteAttribute] -> Music
ds :: Octave -> Dur -> [NoteAttribute] -> Music
d :: Octave -> Dur -> [NoteAttribute] -> Music
df :: Octave -> Dur -> [NoteAttribute] -> Music
cs :: Octave -> Dur -> [NoteAttribute] -> Music
c :: Octave -> Dur -> [NoteAttribute] -> Music
bn :: Dur
sfn :: Dur
tn :: Dur
sn :: Dur
en :: Dur
qn :: Dur
hn :: Dur
wn :: Dur
dwn :: Dur
dtn :: Dur
dsn :: Dur
den :: Dur
dqn :: Dur
dhn :: Dur
ddhn :: Dur
dden :: Dur
ddqn :: Dur
bnr :: Music
tnr :: Music
snr :: Music
enr :: Music
qnr :: Music
hnr :: Music
wnr :: Music
dwnr :: Music
dtnr :: Music
dsnr :: Music
denr :: Music
dqnr :: Music
dhnr :: Music
ddhnr :: Music
ddenr :: Music
ddqnr :: Music
sfnr :: Music
line :: [Music] -> Music
chord :: [Music] -> Music
cMaj :: [Music]
cMajArp :: Music
cMajChd :: Music
delay :: Dur -> Music -> Music
repeatM :: Music -> Music
lineToList :: Music -> [Music]
retro :: Music -> Music
invertRetro :: Music -> Music
retroInvert :: Music -> Music
invert :: Music -> Music
pr1 :: Pitch -> Music
pr2 :: Pitch -> Music
mkLn :: Int -> Pitch -> Dur -> Music
pr12 :: Music
(=:=) :: Dur -> Dur -> Music -> Music
dur :: Music -> Dur
revM :: Music -> Music
cut :: Dur -> Music -> Music
(/=:) :: Music -> Music -> Music
trill :: Int -> Dur -> Music -> Music
trill' :: Int -> Dur -> Music -> Music
trilln :: Int -> Int -> Music -> Music
trilln' :: Int -> Int -> Music -> Music
roll :: Dur -> Music -> Music
rolln :: Int -> Music -> Music
data PercussionSound
AcousticBassDrum :: PercussionSound
BassDrum1 :: PercussionSound
SideStick :: PercussionSound
AcousticSnare :: PercussionSound
HandClap :: PercussionSound
ElectricSnare :: PercussionSound
LowFloorTom :: PercussionSound
ClosedHiHat :: PercussionSound
HighFloorTom :: PercussionSound
PedalHiHat :: PercussionSound
LowTom :: PercussionSound
OpenHiHat :: PercussionSound
LowMidTom :: PercussionSound
HiMidTom :: PercussionSound
CrashCymbal1 :: PercussionSound
HighTom :: PercussionSound
RideCymbal1 :: PercussionSound
ChineseCymbal :: PercussionSound
RideBell :: PercussionSound
Tambourine :: PercussionSound
SplashCymbal :: PercussionSound
Cowbell :: PercussionSound
CrashCymbal2 :: PercussionSound
Vibraslap :: PercussionSound
RideCymbal2 :: PercussionSound
HiBongo :: PercussionSound
LowBongo :: PercussionSound
MuteHiConga :: PercussionSound
OpenHiConga :: PercussionSound
LowConga :: PercussionSound
HighTimbale :: PercussionSound
LowTimbale :: PercussionSound
HighAgogo :: PercussionSound
LowAgogo :: PercussionSound
Cabasa :: PercussionSound
Maracas :: PercussionSound
ShortWhistle :: PercussionSound
LongWhistle :: PercussionSound
ShortGuiro :: PercussionSound
LongGuiro :: PercussionSound
Claves :: PercussionSound
HiWoodBlock :: PercussionSound
LowWoodBlock :: PercussionSound
MuteCuica :: PercussionSound
OpenCuica :: PercussionSound
MuteTriangle :: PercussionSound
OpenTriangle :: PercussionSound
perc :: PercussionSound -> Dur -> [NoteAttribute] -> Music
funkGroove :: Music
data NoteAttribute
Volume :: Float -> NoteAttribute
Fingering :: Int -> NoteAttribute
Dynamics :: String -> NoteAttribute
PFields :: [Float] -> NoteAttribute
data PhraseAttribute
Dyn :: Dynamic -> PhraseAttribute
Art :: Articulation -> PhraseAttribute
Orn :: Ornament -> PhraseAttribute
data Dynamic
Accent :: Float -> Dynamic
Crescendo :: Float -> Dynamic
Diminuendo :: Float -> Dynamic
PPP :: Dynamic
PP :: Dynamic
P :: Dynamic
MP :: Dynamic
SF :: Dynamic
MF :: Dynamic
NF :: Dynamic
FF :: Dynamic
FFF :: Dynamic
Loudness :: Float -> Dynamic
Ritardando :: Float -> Dynamic
Accelerando :: Float -> Dynamic
data Articulation
Staccato :: Float -> Articulation
Legato :: Float -> Articulation
Slurred :: Float -> Articulation
Tenuto :: Articulation
Marcato :: Articulation
Pedal :: Articulation
Fermata :: Articulation
FermataDown :: Articulation
Breath :: Articulation
DownBow :: Articulation
UpBow :: Articulation
Harmonic :: Articulation
Pizzicato :: Articulation
LeftPizz :: Articulation
BartokPizz :: Articulation
Swell :: Articulation
Wedge :: Articulation
Thumb :: Articulation
Stopped :: Articulation
data Ornament
Trill :: Ornament
Mordent :: Ornament
InvMordent :: Ornament
DoubleMordent :: Ornament
Turn :: Ornament
TrilledTurn :: Ornament
ShortTrill :: Ornament
Arpeggio :: Ornament
ArpeggioUp :: Ornament
ArpeggioDown :: Ornament
Instruction :: String -> Ornament
Head :: NoteHead -> Ornament
data NoteHead
DiamondHead :: NoteHead
SquareHead :: NoteHead
XHead :: NoteHead
TriangleHead :: NoteHead
TremoloHead :: NoteHead
SlashHead :: NoteHead
ArtHarmonic :: NoteHead
NoHead :: NoteHead
legato :: Articulation
staccato :: Articulation
accent :: Dynamic
bigAccent :: Dynamic
instance Eq PitchClass
instance Ord PitchClass
instance Ix PitchClass
instance Show PitchClass
instance Read PitchClass
instance Show PercussionSound
instance Eq PercussionSound
instance Ord PercussionSound
instance Ix PercussionSound
instance Enum PercussionSound
instance Eq NoteAttribute
instance Show NoteAttribute
instance Eq Dynamic
instance Show Dynamic
instance Eq Articulation
instance Show Articulation
instance Eq NoteHead
instance Show NoteHead
instance Eq Ornament
instance Show Ornament
instance Eq PhraseAttribute
instance Show PhraseAttribute
instance Show Music
instance Eq Music

module Haskore.Performance
type Performance = [Event]
data Event
Event :: Time -> IName -> AbsPitch -> DurT -> Volume -> [Float] -> Event
eTime :: Event -> Time
eInst :: Event -> IName
ePitch :: Event -> AbsPitch
eDur :: Event -> DurT
eVol :: Event -> Volume
pFields :: Event -> [Float]
type Time = Float
type DurT = Float
type Volume = Float
perform :: PMap -> Context -> Music -> Performance
type PMap = PName -> Player
data Context
Context :: Time -> Player -> IName -> DurT -> Key -> Volume -> Context
cTime :: Context -> Time
cPlayer :: Context -> Player
cInst :: Context -> IName
cDur :: Context -> DurT
cKey :: Context -> Key
cVol :: Context -> Volume
type Key = AbsPitch
perf :: PMap -> Context -> Music -> (Performance, DurT)
metro :: Float -> Dur -> DurT
merge :: Performance -> Performance -> Performance
data Player
MkPlayer :: PName -> NoteFun -> PhraseFun -> NotateFun -> Player
pName :: Player -> PName
playNote :: Player -> NoteFun
interpPhrase :: Player -> PhraseFun
notatePlayer :: Player -> NotateFun
type NoteFun = Context -> Pitch -> Dur -> [NoteAttribute] -> Performance
type PhraseFun = PMap -> Context -> [PhraseAttribute] -> Music -> (Performance, DurT)
type NotateFun = ()
defPlayer :: Player
defPlayNote :: (Context -> NoteAttribute -> Event -> Event) -> NoteFun
defNasHandler :: Context -> NoteAttribute -> Event -> Event
defInterpPhrase :: (PhraseAttribute -> Performance -> Performance) -> PhraseFun
defPasHandler :: PhraseAttribute -> Performance -> Performance
defNotatePlayer :: () -> NotateFun
fancyPlayer :: Player
fancyInterpPhrase :: PhraseFun
instance Eq Event
instance Ord Event
instance Show Event
instance Show Player
instance Show Context
instance Show (a -> b)

module Haskore.ToMidi
performToMidi :: Performance -> UserPatchMap -> MidiFile
type UserPatchMap = [(IName, GenMidiName, MidiChannel)]

module Haskore.ReadMidi
readMidi :: MidiFile -> (Music, Context, UserPatchMap)

module Haskore.Midi

module Haskore.Test
mToMF :: PMap -> Context -> UserPatchMap -> String -> Music -> IO ()
defUpm :: UserPatchMap
defPMap :: String -> Player
defCon :: Context
testPerf :: Music -> Performance
testPerfDur :: Music -> (Performance, DurT)
testMidi :: Music -> MidiFile
test :: Music -> IO ()
makeMidi :: (Music, Context, UserPatchMap) -> MidiFile
gmUpm :: UserPatchMap
gmTest :: Int -> IO ()

module Haskore
