-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A quasiquoter for PCRE regexes.
--   
--   A quasiquoter for Text.Regex.PCRE regexes. This makes use of a new GHC
--   extension known as QuasiQuotes. QuasiQuotes do not appear in ghc until
--   6.9, BUT there is a patch for ghc-6.8.3 which adds quasiquote
--   functionality. A patched version of ghc-6.8.3, made possible by
--   audreyt's patch, is at
--   <a>http://code.haskell.org/~morrow/quasiquotes/ghc-6.8.3_QQ-0.2.tar.bz2</a>.
--   An example of the use of <tt>regexqq</tt> is located at
--   <a>http://code.haskell.org/~morrow/quasiquotes/regexqq.txt</a>.
--   Haddock docs are at
--   <a>http://code.haskell.org/~morrow/quasiquotes/regexqq/docs/</a>.
@package regexqq
@version 0.6


-- | A quasiquoter for Text.Regex.PCRE regexes. This makes use of a new GHC
--   extension known as QuasiQuotes. See the README for the temporary
--   location of the docs for Language.Haskell.TH.Quote. See the EXAMPLES
--   file for examples.
--   
--   <pre>
--   ghci&gt; [$rx|([aeiou]).*(er|ing|tion)([\.,\?]*)$|] "helloing.!?!?!"
--   Just ["elloing.!?!?!","e","ing",".!?!?!"]
--   </pre>
module Text.Regex.PCRE.QQ

-- | <pre>
--   ghci&gt; maybe [] tail $ [$rx|^([+-])?([0-9]+)\.([0-9]+)|] (show $ negate pi)
--   ["-","3","141592653589793"]
--   </pre>
rx :: QuasiQuoter

-- | Transform a string rep of a regex to an ExpQ. The resulting ExpQ, when
--   spliced, results in a function of type <tt>String -&gt; Maybe
--   [String]</tt>, where the input is the String to match on. The result
--   is Nothing on error, and Just a list of results on success. Note: I'm
--   packing/unpacking/... the ByteString unnecessarily for convenience in
--   testing out the first go at this. This will be dealt with in the
--   future.
regexToExpQ :: String -> ExpQ

-- | Transform a string (presumably) containing a regex to a PatQ. NOTE:
--   Given a regex, a pattern is constructed which matches a literal string
--   containing the verbatim regex. It does this because I couldn't think
--   of anything better for it to do off the cuff. This needs thought.
regexToPatQ :: String -> PatQ
