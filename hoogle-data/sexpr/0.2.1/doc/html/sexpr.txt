-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | S-expression printer and parser
--   
--   Parser and printer for S-expressions, including Ron Rivest's Canonical
--   S-expressions. These are used in SDSI and SPKI, and are generally
--   useful for cryptographic operations over structured data.
@package sexpr
@version 0.2.1


-- | A Sexpr is an S-expressionin the style of Rivest's Canonical
--   S-expressions. Atoms may be of any type, but String and ByteString
--   have special support. Rivest's implementation of S-expressions is
--   unusual in supporting MIME type hints for each atom. See
--   http:<i></i>people.csail.mit.edu<i>rivest</i>Sexp.txt
module Codec.Sexpr.Internal
data Sexpr s

-- | A predicate for identifying atoms, whether or not they have explicit
--   hints.
isAtom :: Sexpr a -> Bool

-- | A predicate for recognizing lists.
isList :: Sexpr a -> Bool

-- | Construct an atom.
atom :: a -> Sexpr a

-- | Construct a list.
list :: [Sexpr a] -> Sexpr a

-- | Extract the content of an atom, discarding any MIME type hint.
unAtom :: Sexpr s -> s

-- | Extract the sub-S-expressions of a List. If all you intend to do is
--   traverse or map over that list, the Functor instance of S-expressions
--   may work just fine.
unList :: Sexpr s -> [Sexpr s]

-- | Construct an atom with a MIME type hint. <tt><a>hintedAtom</a>
--   <a>defaultHint</a> == <a>atom</a></tt>
hintedAtom :: String -> a -> Sexpr a

-- | Extract the hint of an atom. Lists do not have hints, but all atoms
--   have hints.
hint :: Sexpr a -> Maybe String

-- | Any atom whose hint is not specified is assumed to be <a>text/plain;
--   charset=iso-8859-1</a>. This is that default value.
defaultHint :: String

-- | Tokens may internally contain any of the characters legitimate to
--   begin tokens, or any numeral.
isTokenChar :: Char -> Bool

-- | Tokens may begin with any alphabetic character or the characters in
--   <tt><a>-./_:*+=</a></tt> ;
isInitialTokenChar :: Char -> Bool

-- | Only token characters and spaces don't need to be escaped when shown
--   in the <a>quoted</a> syntax.
isQuoteableChar :: Char -> Bool

-- | <tt>fold f s</tt> applies f to each sub-S-expression of s, from each
--   leaf to the root. <tt>f</tt> need not preserve the shape of
--   <tt>s</tt>, in contrast to the shape-preserving <tt>Traversable</tt>
--   instance.
fold :: (Sexpr t -> Sexpr t) -> Sexpr t -> Sexpr t
instance Arbitrary a => Arbitrary (Sexpr a)
instance Traversable Sexpr
instance Foldable Sexpr
instance Functor Sexpr
instance Eq s => Eq (Sexpr s)


-- | All present parsers work on Strings, one character at a time. The
--   canonical encoding is clearly susceptible to efficient parsing as a
--   Lazy ByteString.
--   
--   This package also includes the Read instance for Sexprs.
--   
--   From Rivest's documentation:
--   
--   <pre>
--   &lt;sexpr&gt;    	:: &lt;string&gt; | &lt;list&gt;
--   &lt;string&gt;   	:: &lt;display&gt;? &lt;simple-string&gt; ;
--   &lt;simple-string&gt;	:: &lt;raw&gt; | &lt;token&gt; | &lt;base-64&gt; | &lt;hexadecimal&gt; | 
--   		           &lt;quoted-string&gt; ;
--   &lt;display&gt;  	:: "[" &lt;simple-string&gt; "]" ;
--   &lt;raw&gt;      	:: &lt;decimal&gt; ":" &lt;bytes&gt; ;
--   &lt;decimal&gt;  	:: &lt;decimal-digit&gt;+ ;
--   		-- decimal numbers should have no unnecessary leading zeros
--   &lt;bytes&gt; 	-- any string of bytes, of the indicated length
--   &lt;token&gt;    	:: &lt;tokenchar&gt;+ ;
--   &lt;base-64&gt;  	:: &lt;decimal&gt;? "|" ( &lt;base-64-char&gt; | &lt;whitespace&gt; )* "|" ;
--   &lt;hexadecimal&gt;      :: "#" ( &lt;hex-digit&gt; | &lt;white-space&gt; )* "#" ;
--   &lt;quoted-string&gt;    :: &lt;decimal&gt;? &lt;quoted-string-body&gt;  
--   &lt;quoted-string-body&gt; :: "\"" &lt;bytes&gt; "\""
--   &lt;list&gt;     	:: "(" ( &lt;sexp&gt; | &lt;whitespace&gt; )* ")" ;
--   &lt;whitespace&gt; 	:: &lt;whitespace-char&gt;* ;
--   &lt;token-char&gt;  	:: &lt;alpha&gt; | &lt;decimal-digit&gt; | &lt;simple-punc&gt; ;
--   &lt;alpha&gt;       	:: &lt;upper-case&gt; | &lt;lower-case&gt; | &lt;digit&gt; ;
--   &lt;lower-case&gt;  	:: "a" | ... | "z" ;
--   &lt;upper-case&gt;  	:: "A" | ... | "Z" ;
--   &lt;decimal-digit&gt;    :: "0" | ... | "9" ;
--   &lt;hex-digit&gt;        :: &lt;decimal-digit&gt; | "A" | ... | "F" | "a" | ... | "f" ;
--   &lt;simple-punc&gt; 	:: "-" | "." | "/" | "_" | ":" | "*" | "+" | "=" ;
--   &lt;whitespace-char&gt;  :: " " | "\t" | "\r" | "\n" ;
--   &lt;base-64-char&gt; 	:: &lt;alpha&gt; | &lt;decimal-digit&gt; | "+" | "/" | "=" ;
--   &lt;null&gt;        	:: "" ;
--   </pre>
module Codec.Sexpr.Parser

-- | Read a <tt><a>Sexpr</a> <a>String</a></tt> in any encoding: Canonical,
--   Basic, or Advanced.
readSexprString :: String -> Sexpr String

-- | Read a <tt><a>Sexpr</a> <a>String</a></tt> in canonical encoding.
readCanonicalSexprString :: String -> Sexpr String

-- | Read a <tt><a>Sexpr</a> a</tt> using the <a>Read</a> instance for
--   <tt>a</tt>. The Sexpr may be in any encoding: Canonical, Basic, or
--   Advanced.
readSexpr :: Read a => String -> Sexpr a

-- | Parser for <tt><a>Sexpr</a> <a>String</a></tt>s suitable for embedding
--   in other <tt>ReadP</tt> parsers.
sexpr :: Bool -> ReadP (Sexpr String)

-- | For some applications it is wise to accept only very carefully
--   specified input. This is useful when you know you are receiving
--   exactly a Canonical S-Expression. It will read only a Canonical
--   S-expression (and optional terminating NUL), but not the Basic or
--   Advanced encodings.
canonicalSexpr :: ReadP (Sexpr String)
advancedSexpr :: ReadP (Sexpr String)
internalSexpr :: Bool -> ReadP (Sexpr String)
basicTransport :: Bool -> ReadP (Sexpr String)
b64char :: ReadP Char
b64char' :: ReadP Char
hexchar :: ReadP Char
hexchar' :: ReadP Char
listR :: Bool -> ReadP (Sexpr String)
atomR :: Bool -> ReadP (Sexpr String)
simpleString :: Bool -> ReadP String
quotedString :: ReadP String
hexAtom :: ReadP String
hexDecode :: String -> String
b64Atom :: ReadP String
token :: ReadP String
raw :: ReadP String
decimal :: ReadP Int
instance Read s => Read (Sexpr s)


-- | Export S-expressions in any of the three ordinary forms:
--   
--   <ul>
--   <li>Canonical, where a different string implies a different
--   meaning</li>
--   <li>Basic, suitable for transport over 7-bit and awkward media</li>
--   <li>Advanced, a human-readable pretty-printed encoding.</li>
--   </ul>
--   
--   The <tt>-&gt; <a>String</a></tt> functions are probably what you want
--   unless you know you want something else.
--   
--   The <a>Show</a> instance for Sexpr is provided here, using
--   advancedString and the underlying Show instance. Overlapping instances
--   are used to provide a nice show for <tt><a>Sexpr</a>
--   <a>String</a></tt>.
module Codec.Sexpr.Printer
raw :: String -> String -> String
canonicalString :: Sexpr String -> String
canonical :: Sexpr String -> ShowS
putRaw :: String -> Put
putRawBS :: ByteString -> Put
putChar' :: Char -> Put
putCanonical :: Sexpr String -> Put
putCanonicalBS :: Sexpr ByteString -> Put
putCanonicalHelper :: (a -> Put) -> Sexpr a -> Put
basicString :: Sexpr String -> String
basic :: Sexpr String -> Doc
advancedString :: Sexpr String -> String
format :: String -> Doc
canToken :: String -> Bool
canQuote :: String -> Bool
canHex :: String -> Bool
hex :: String -> Doc
hexEncode :: Char -> String
quote :: Show a => a -> Doc
base64 :: String -> Doc
advanced :: Sexpr String -> Doc
instance [overlap ok] Show s => Show (Sexpr s)
instance [overlap ok] Show (Sexpr String)


-- | A Sexpr is an S-expressionin the style of Rivest's Canonical
--   S-expressions. Atoms may be of any type, but String and ByteString
--   have special support. Rivest's implementation of S-expressions is
--   unusual in supporting MIME type hints for each atom. See
--   http:<i></i>people.csail.mit.edu<i>rivest</i>Sexp.txt
module Codec.Sexpr
data Sexpr s

-- | A predicate for identifying atoms, whether or not they have explicit
--   hints.
isAtom :: Sexpr a -> Bool

-- | A predicate for recognizing lists.
isList :: Sexpr a -> Bool

-- | Construct an atom.
atom :: a -> Sexpr a

-- | Construct a list.
list :: [Sexpr a] -> Sexpr a

-- | Extract the content of an atom, discarding any MIME type hint.
unAtom :: Sexpr s -> s

-- | Extract the sub-S-expressions of a List. If all you intend to do is
--   traverse or map over that list, the Functor instance of S-expressions
--   may work just fine.
unList :: Sexpr s -> [Sexpr s]

-- | Construct an atom with a MIME type hint. <tt><a>hintedAtom</a>
--   <a>defaultHint</a> == <a>atom</a></tt>
hintedAtom :: String -> a -> Sexpr a

-- | Extract the hint of an atom. Lists do not have hints, but all atoms
--   have hints.
hint :: Sexpr a -> Maybe String

-- | Any atom whose hint is not specified is assumed to be <a>text/plain;
--   charset=iso-8859-1</a>. This is that default value.
defaultHint :: String

-- | Tokens may internally contain any of the characters legitimate to
--   begin tokens, or any numeral.
isTokenChar :: Char -> Bool

-- | Tokens may begin with any alphabetic character or the characters in
--   <tt><a>-./_:*+=</a></tt> ;
isInitialTokenChar :: Char -> Bool

-- | Only token characters and spaces don't need to be escaped when shown
--   in the <a>quoted</a> syntax.
isQuoteableChar :: Char -> Bool

-- | <tt>fold f s</tt> applies f to each sub-S-expression of s, from each
--   leaf to the root. <tt>f</tt> need not preserve the shape of
--   <tt>s</tt>, in contrast to the shape-preserving <tt>Traversable</tt>
--   instance.
fold :: (Sexpr t -> Sexpr t) -> Sexpr t -> Sexpr t
canonicalString :: Sexpr String -> String
basicString :: Sexpr String -> String
advancedString :: Sexpr String -> String
canonical :: Sexpr String -> ShowS
basic :: Sexpr String -> Doc
advanced :: Sexpr String -> Doc
putCanonical :: Sexpr String -> Put
putCanonicalBS :: Sexpr ByteString -> Put

-- | Read a <tt><a>Sexpr</a> a</tt> using the <a>Read</a> instance for
--   <tt>a</tt>. The Sexpr may be in any encoding: Canonical, Basic, or
--   Advanced.
readSexpr :: Read a => String -> Sexpr a

-- | Read a <tt><a>Sexpr</a> <a>String</a></tt> in any encoding: Canonical,
--   Basic, or Advanced.
readSexprString :: String -> Sexpr String

-- | Read a <tt><a>Sexpr</a> <a>String</a></tt> in canonical encoding.
readCanonicalSexprString :: String -> Sexpr String
advancedSexpr :: ReadP (Sexpr String)

-- | For some applications it is wise to accept only very carefully
--   specified input. This is useful when you know you are receiving
--   exactly a Canonical S-Expression. It will read only a Canonical
--   S-expression (and optional terminating NUL), but not the Basic or
--   Advanced encodings.
canonicalSexpr :: ReadP (Sexpr String)
