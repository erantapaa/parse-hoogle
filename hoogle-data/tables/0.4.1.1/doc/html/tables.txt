-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | In-memory storage with multiple keys using lenses and traversals
--   
--   In-memory storage with multiple keys using lenses and traversals
--   
--   For a quick tour, see <a>https://github.com/ekmett/tables#examples</a>
@package tables
@version 0.4.1.1


-- | This module provides tables with multiple indices that support a
--   simple API based on the lenses and traversals from the <tt>lens</tt>
--   package.
module Data.Table

-- | Every <a>Table</a> has a <a>Primary</a> <tt>key</tt> and may have
--   <a>Candidate</a>, <a>Supplemental</a> or <a>Inverted</a> keys, plus
--   their variants.
data Table t
EmptyTable :: Table t
Table :: Tab t (AnIndex t) -> Table t

-- | This class describes how to index a user-defined data type.
class Ord (PKT t) => Tabular (t :: *) where type family PKT t data family Tab t (m :: * -> * -> *) data family Key (k :: *) t :: * -> * autoTab _ = Nothing
fetch :: Tabular t => Key k t a -> t -> a
primary :: Tabular t => Key Primary t (PKT t)
primarily :: Tabular t => Key Primary t a -> (a ~ PKT t => r) -> r
mkTab :: (Tabular t, Applicative h) => (forall k a. IsKeyType k a => Key k t a -> h (i k a)) -> h (Tab t i)
ixTab :: Tabular t => Tab t i -> Key k t a -> i k a
forTab :: (Tabular t, Applicative h) => Tab t i -> (forall k a. IsKeyType k a => Key k t a -> i k a -> h (j k a)) -> h (Tab t j)
autoTab :: Tabular t => t -> Maybe (Tab t (AnIndex t) -> t)

-- | Generate a Tabular instance for a data type. Currently, this only
--   works for types which have no type variables, and won't generate
--   autoTab.
--   
--   <pre>
--   data Foo = Foo { fooId :: Int, fooBar :: String, fooBaz :: Double }
--   
--   makeTabular 'fooId [(''Candidate, 'fooBaz), (''Supplemental, 'fooBar)]
--   </pre>
makeTabular :: Name -> [(Name, Name)] -> Q [Dec]

-- | Construct an empty relation
empty :: Table t

-- | Construct a relation with a single row
singleton :: Tabular t => t -> Table t

-- | Convert a list to and from a <a>Table</a>.
--   
--   The real isomorphism laws hold if the original list makes no use of
--   the auto-increment functionality of the table, has no duplicates and
--   is sorted according to the primary key.
--   
--   However,
--   
--   <pre>
--   <a>from</a> <a>table</a> <a>.</a> <a>table</a> â‰¡ <a>id</a>
--   </pre>
--   
--   always holds.
table :: Tabular t => Iso' [t] (Table t)

-- | Build up a table from a list
fromList :: Tabular t => [t] -> Table t

-- | Build up a table from a list, without checking for collisions
unsafeFromList :: Tabular t => [t] -> Table t

-- | Left-biased union of the two tables
--   
--   This is a synonym for <a>mappend</a>
union :: Table t -> Table t -> Table t

-- | Return the elements of the first table that do not share a key with an
--   element of the second table
difference :: (Tabular t1, Tabular t2, PKT t1 ~ PKT t2) => Table t1 -> Table t2 -> Table t1

-- | Return the elements of the first table that share a key with an
--   element of the second table
intersection :: (Tabular t1, Tabular t2, PKT t1 ~ PKT t2) => Table t1 -> Table t2 -> Table t1

-- | Check to see if the relation is empty
null :: Table t -> Bool

-- | Retrieve a row count.
count :: Table t -> Int
class With q t | q -> t where deleteWith p cmp a t = set (with p cmp a) empty t
with :: (With q t, Ord a) => q a -> (forall x. Ord x => x -> x -> Bool) -> a -> Lens' (Table t) (Table t)
deleteWith :: (With q t, Ord a) => q a -> (forall x. Ord x => x -> x -> Bool) -> a -> Table t -> Table t

-- | Search inverted indices
class Withal q s t | q -> s t where deleteWithAny p as t = set (withAny p as) empty t deleteWithAll p as t = set (withAll p as) empty t
withAny :: Withal q s t => q -> s -> Lens' (Table t) (Table t)
withAll :: Withal q s t => q -> s -> Lens' (Table t) (Table t)
deleteWithAny :: Withal q s t => q -> s -> Table t -> Table t
deleteWithAll :: Withal q s t => q -> s -> Table t -> Table t
class Group f q t i | q -> t i
group :: (Group f q t i, Ord i) => q -> IndexedLensLike' i f (Table t) (Table t)

-- | Insert a row into a relation, removing collisions.
insert :: Tabular t => t -> Table t -> Table t

-- | Insert a row into a relation, removing collisions.
insert' :: Tabular t => t -> Table t -> (t, Table t)

-- | Insert a row into a relation, ignoring collisions.
unsafeInsert :: Tabular t => t -> Table t -> Table t

-- | Delete this row from the database. This will remove any row that
--   collides with the specified row on any primary or candidate key.
delete :: t -> Table t -> Table t

-- | Traverse all of the rows in a table, potentially changing table types
--   completely.
rows :: (Tabular t, PKT s ~ PKT t) => IndexedTraversal (PKT s) (Table s) (Table t) s t

-- | The key type for the canonical, unique identifier attached to every
--   row. There should only be one <a>Primary</a> key.
data Primary

-- | A key type for values unique to each row, but that are not
--   <a>Primary</a>.
data Candidate

-- | <a>CandidateInt</a> keys are like <a>Candidate</a> keys but are backed
--   by an <a>IntMap</a> rather than a <a>Map</a>. This makes them more
--   performant, but values at <a>CandidateInt</a> keys may only be
--   <a>Int</a>s.
data CandidateInt

-- | <a>CandidateHash</a> keys are like <a>Candidate</a> keys but are
--   backed by a <a>HashMap</a> rather than a <a>Map</a>. This makes them
--   more performant on <tt>(<a>==</a>)</tt> and <tt>(<a>/=</a>)</tt>
--   lookups, but values at <a>CandidateHash</a> keys must be instances of
--   <a>Hashable</a> and <a>Eq</a>.
data CandidateHash

-- | A key type for supplemental data attached to each row that we still
--   may want to index by. Values need not be unique.
data Supplemental

-- | <a>SupplementalInt</a> keys are like <a>Supplemental</a> keys but are
--   backed by an <a>IntMap</a> rather than a <a>Map</a>. This makes them
--   more performant, but values at <a>SupplementalInt</a> keys may only be
--   <a>Int</a>s.
data SupplementalInt

-- | <a>SupplementalHash</a> keys are like <a>Supplemental</a> keys but are
--   backed by a <a>HashMap</a> rather than a <a>Map</a>. This makes them
--   more performant on <tt>(<a>==</a>)</tt> and <tt>(<a>/=</a>)</tt>
--   lookups, but values at <a>SupplementalHash</a> keys must be instances
--   of <a>Hashable</a> and <a>Eq</a>.
data SupplementalHash

-- | A key type for inverse keys.
data Inverted
data InvertedInt
data InvertedHash
data Auto a
Auto :: !Int -> a -> Auto a
autoKey :: Lens' (Auto a) Int

-- | Generate a row with an auto-incremented key
auto :: a -> Auto a

-- | This lets you define <a>autoKey</a> to increment to 1 greater than the
--   existing maximum key in a table.
--   
--   In order to support this you need a numeric primary key, and the
--   ability to update the primary key in a record, indicated by a lens to
--   the field.
--   
--   To enable auto-increment for a table with primary key
--   <tt>primaryKeyField</tt>, set:
--   
--   <pre>
--   <a>autoTab</a> = <a>autoIncrement</a> primaryKeyField
--   </pre>
autoIncrement :: (Tabular t, Num (PKT t)) => ALens' t (PKT t) -> t -> Maybe (Tab t (AnIndex t) -> t)
class IsKeyType k a
keyType :: IsKeyType k a => Key k t a -> KeyType k a

-- | Value-level key types
data KeyType t a
Primary :: KeyType Primary a
Candidate :: KeyType Candidate a
CandidateInt :: KeyType CandidateInt Int
CandidateHash :: KeyType CandidateHash a
Supplemental :: KeyType Supplemental a
SupplementalInt :: KeyType SupplementalInt Int
SupplementalHash :: KeyType SupplementalHash a
Inverted :: KeyType Inverted (Set a)
InvertedInt :: KeyType InvertedInt IntSet
InvertedHash :: KeyType InvertedHash (HashSet a)

-- | This is used to store a single index.
data AnIndex t k a
PrimaryMap :: Map (PKT t) t -> AnIndex t Primary a
CandidateIntMap :: IntMap t -> AnIndex t CandidateInt Int
CandidateHashMap :: HashMap a t -> AnIndex t CandidateHash a
CandidateMap :: Map a t -> AnIndex t Candidate a
InvertedIntMap :: IntMap [t] -> AnIndex t InvertedInt IntSet
InvertedHashMap :: HashMap a [t] -> AnIndex t InvertedHash (HashSet a)
InvertedMap :: Map a [t] -> AnIndex t Inverted (Set a)
SupplementalIntMap :: IntMap [t] -> AnIndex t SupplementalInt Int
SupplementalHashMap :: HashMap a [t] -> AnIndex t SupplementalHash a
SupplementalMap :: Map a [t] -> AnIndex t Supplemental a
instance Typeable Table
instance Typeable Auto
instance Typeable Value
instance Eq a => Eq (Auto a)
instance Ord a => Ord (Auto a)
instance Show a => Show (Auto a)
instance Read a => Read (Auto a)
instance Functor Auto
instance Foldable Auto
instance Traversable Auto
instance Data a => Data (Auto a)
instance Eq a => Eq (Value a)
instance Ord a => Ord (Value a)
instance Show a => Show (Value a)
instance Read a => Read (Value a)
instance Functor Value
instance Foldable Value
instance Traversable Value
instance Data a => Data (Value a)
instance (NFData t, NFData a, NFData (PKT t)) => NFData (AnIndex t InvertedHash (HashSet a))
instance (NFData t, NFData a, NFData (PKT t)) => NFData (AnIndex t Inverted (Set a))
instance (NFData t, NFData (PKT t)) => NFData (AnIndex t InvertedInt IntSet)
instance (NFData t, NFData a, NFData (PKT t)) => NFData (AnIndex t CandidateHash a)
instance (NFData t, NFData (PKT t)) => NFData (AnIndex t CandidateInt Int)
instance (NFData t, NFData a, NFData (PKT t)) => NFData (AnIndex t Candidate a)
instance (NFData t, NFData a, NFData (PKT t)) => NFData (AnIndex t SupplementalHash a)
instance (NFData t, NFData (PKT t)) => NFData (AnIndex t SupplementalInt Int)
instance (NFData t, NFData a, NFData (PKT t)) => NFData (AnIndex t Supplemental a)
instance (NFData t, NFData a, NFData (PKT t)) => NFData (AnIndex t Primary a)
instance (Tabular a, NFData a, NFData (Tab a (AnIndex a))) => NFData (Table a)
instance Ord a => Tabular (Value a)
instance ComonadApply Value
instance Comonad Value
instance MonadFix Value
instance Monad Value
instance Applicative Value
instance Wrapped (Value a)
instance Ixed (Value a)
instance Each (Value a) (Value b) a b
instance Field1 (Value a) (Value b) a b
instance Ord a => Tabular (Identity a)
instance Ord k => Tabular (k, v)
instance Tabular (Auto a)
instance SafeCopy a => SafeCopy (Auto a)
instance Serialize a => Serialize (Auto a)
instance Binary a => Binary (Auto a)
instance Comonad Auto
instance TraversableWithIndex Int Auto
instance FoldableWithIndex Int Auto
instance FunctorWithIndex Int Auto
instance (a ~ Int, b ~ Int) => Each (Auto a) (Auto b) a b
instance Field2 (Auto a) (Auto b) a b
instance Field1 (Auto a) (Auto a) Int Int
instance (t ~ HashSet, Eq a, Hashable a) => IsKeyType InvertedHash (t a)
instance IsKeyType InvertedInt IntSet
instance (t ~ Set, Ord a) => IsKeyType Inverted (t a)
instance (Eq a, Hashable a) => IsKeyType SupplementalHash a
instance a ~ Int => IsKeyType SupplementalInt a
instance Ord a => IsKeyType Supplemental a
instance (Eq a, Hashable a) => IsKeyType CandidateHash a
instance a ~ Int => IsKeyType CandidateInt a
instance Ord a => IsKeyType Candidate a
instance Ord a => IsKeyType Primary a
instance With (Key SupplementalHash t) t
instance With (Key SupplementalInt t) t
instance With (Key Supplemental t) t
instance With (Key CandidateHash t) t
instance With (Key CandidateInt t) t
instance With (Key Candidate t) t
instance With (Key Primary t) t
instance With ((->) t) t
instance (Eq a, Hashable a) => Withal (Key InvertedHash t (HashSet a)) [a] t
instance Withal (Key InvertedInt t IntSet) [Int] t
instance Ord a => Withal (Key Inverted t (Set a)) [a] t
instance Ord a => Withal (t -> [a]) [a] t
instance (Applicative f, Contravariant f) => Group f (Key InvertedHash t (HashSet a)) t a
instance (Applicative f, Contravariant f, a ~ Int) => Group f (Key InvertedInt t IntSet) t a
instance (Applicative f, Contravariant f) => Group f (Key Inverted t (Set a)) t a
instance Applicative f => Group f (Key SupplementalHash t a) t a
instance (Applicative f, a ~ Int) => Group f (Key SupplementalInt t a) t a
instance Applicative f => Group f (Key Supplemental t a) t a
instance Applicative f => Group f (Key CandidateHash t a) t a
instance (Applicative f, a ~ Int) => Group f (Key CandidateInt t a) t a
instance Applicative f => Group f (Key Candidate t a) t a
instance Applicative f => Group f (Key Primary t a) t a
instance Applicative f => Group f (t -> a) t a
instance (Tabular b, PKT a ~ PKT b) => Each (Table a) (Table b) a b
instance Tabular t => At (Table t)
instance Ixed (Table t)
instance Foldable Table
instance (Tabular t, Read t) => Read (Table t)
instance Show t => Show (Table t)
instance Ord t => Ord (Table t)
instance Eq t => Eq (Table t)
instance Monoid (Table t)
instance (Typeable t, Tabular t, SafeCopy t) => SafeCopy (Table t)
instance (Tabular t, Serialize t) => Serialize (Table t)
instance (Tabular t, Binary t) => Binary (Table t)
instance (Tabular t, Data t) => Data (Table t)
