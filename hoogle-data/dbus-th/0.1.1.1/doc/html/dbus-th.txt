-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | TemplateHaskell generator of DBus bindings
--   
@package dbus-th
@version 0.1.1.1

module DBus.TH

-- | An active client session to a message bus. Clients may send or receive
--   method calls, and listen for or emit signals.
data Client :: *

-- | Bus names are used to identify particular clients on the message bus.
--   A bus name may be either <i>unique</i> or <i>well-known</i>, where
--   unique names start with a colon. Bus names consist of alphanumeric
--   characters separated by periods.
--   
--   See
--   <a>http://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol-names-bus</a>
--   for details.
data BusName :: *

-- | Object paths are special strings, used to identify a particular object
--   exported from a D-Bus application.
--   
--   Object paths must begin with a slash, and consist of alphanumeric
--   characters separated by slashes.
--   
--   See
--   <a>http://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol-marshaling-object-path</a>
--   for details.
data ObjectPath :: *

-- | Interfaces are used to group a set of methods and signals within an
--   exported object. Interface names consist of alphanumeric characters
--   separated by periods.
--   
--   See
--   <a>http://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol-names-interface</a>
--   for details.
data InterfaceName :: *

-- | Member names are used to identify a single method or signal within an
--   interface. Method names consist of alphanumeric characters.
--   
--   See
--   <a>http://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol-names-member</a>
--   for details.
data MemberName :: *

-- | Variants may contain any other built-in D-Bus value. Besides
--   representing native <tt>VARIANT</tt> values, they allow type-safe
--   storage and inspection of D-Bus collections.
data Variant :: *

-- | Connect to the bus specified in the environment variable
--   <tt>DBUS_SESSION_BUS_ADDRESS</tt>, which must be set.
--   
--   Throws a <a>ClientError</a> if <tt>DBUS_SESSION_BUS_ADDRESS</tt> is
--   unset, contains an invalid address, or if connecting to the bus
--   failed.
connectSession :: IO Client

-- | Connect to the bus specified in the environment variable
--   <tt>DBUS_SYSTEM_BUS_ADDRESS</tt>, or to
--   <tt>unix:path=/var/run/dbus/system_bus_socket</tt> if
--   <tt>DBUS_SYSTEM_BUS_ADDRESS</tt> is not set.
--   
--   Throws a <a>ClientError</a> if <tt>DBUS_SYSTEM_BUS_ADDRESS</tt>
--   contains an invalid address, or if connecting to the bus failed.
connectSystem :: IO Client

-- | Function signature
data Signature
Return :: Name -> Signature
(:->) :: Name -> Signature -> Signature

-- | Function with DBus name and Haskell name
data Function
Function :: String -> String -> Signature -> Function

-- | Function name to use in Haskell
fnName :: Function -> String

-- | Function name to use in DBus
fnDBusName :: Function -> String

-- | Function signature
fnSignature :: Function -> Signature

-- | Create a Function from it's name and Signature. Sets fnDBusName ==
--   fnName.
(=::) :: String -> Signature -> Function

-- | Set specific Haskell name for Function.
as :: Function -> String -> Function

-- | Generate bindings for methods in specific DBus interface. If second
--   argument is (Just prefix), then prefix will be added to the beginning
--   of all DBus names and removed from all Haskell names.
interface :: String -> String -> String -> Maybe String -> [Function] -> Q [Dec]
instance Typeable Signature
instance Typeable Function
instance Eq Signature
instance Show Signature
instance Data Signature
instance Eq Function
instance Show Function
instance Data Function
