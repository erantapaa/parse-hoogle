-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A haskell wrapper for the Zulip API.
--   
@package hzulip
@version 1.1.1.1

module Web.HZulip.Types

-- | The Monad in which Zulip API actions happen in. This is a
--   <a>ReaderT</a> alias, so it's also a instance of <tt>MonadTrans</tt>,
--   <tt>MonadIO</tt> etc.
type ZulipM = ReaderT ZulipOptions IO

-- | Represents a Zulip API client
data ZulipOptions
ZulipOptions :: String -> String -> String -> Manager -> ZulipOptions
clientEmail :: ZulipOptions -> String
clientApiKey :: ZulipOptions -> String
clientBaseUrl :: ZulipOptions -> String
clientManager :: ZulipOptions -> Manager

-- | The internal response representation for top-down parsing of Zulip API
--   JSON responses
data Response
Response :: ResponseResult -> String -> Maybe Int -> Maybe String -> Maybe Int -> Maybe [Event] -> Response
responseResult :: Response -> ResponseResult
responseMsg :: Response -> String
responseMessageId :: Response -> Maybe Int
responseQueueId :: Response -> Maybe String
responseLastEventId :: Response -> Maybe Int
responseEvents :: Response -> Maybe [Event]

-- | Represnts a response result, this is just so result Strings aren't
--   modeled in memory
data ResponseResult
ResponseError :: ResponseResult
ResponseSuccess :: ResponseResult

-- | Represents zulip events
data Event
Event :: String -> Int -> Maybe Message -> Event
eventType :: Event -> String
eventId :: Event -> Int
eventMessage :: Event -> Maybe Message

-- | Represents a Zulip Message
data Message
Message :: Int -> String -> String -> String -> Int -> Either String [User] -> User -> String -> Int -> String -> [String] -> String -> Message
messageId :: Message -> Int
messageType :: Message -> String
messageContent :: Message -> String
messageAvatarUrl :: Message -> String
messageTimestamp :: Message -> Int
messageDisplayRecipient :: Message -> Either String [User]
messageSender :: Message -> User
messageGravatarHash :: Message -> String
messageRecipientId :: Message -> Int
messageClient :: Message -> String
messageSubjectLinks :: Message -> [String]
messageSubject :: Message -> String

-- | Represents a zulip user account - for both <tt>display_recipient</tt>
--   and <tt>message_sender</tt> representations
data User
User :: Int -> String -> String -> String -> String -> User
userId :: User -> Int
userFullName :: User -> String
userEmail :: User -> String
userDomain :: User -> String
userShortName :: User -> String

-- | Represents some event queue
data Queue
Queue :: String -> Int -> Queue
queueId :: Queue -> String
lastEventId :: Queue -> Int

-- | The root type for Event callbacks
type EventCallback = Event -> ZulipM ()

-- | Type for message callbacks
type MessageCallback = Message -> ZulipM ()
parseDisplayRecipient :: Value -> Parser (Either String [User])
instance Eq ResponseResult
instance Show ResponseResult
instance Ord ResponseResult
instance Eq User
instance Ord User
instance Show User
instance Eq Message
instance Ord Message
instance Show Message
instance Eq Event
instance Ord Event
instance Show Event
instance Eq Response
instance Ord Response
instance Show Response
instance Eq Queue
instance Ord Queue
instance Show Queue
instance FromJSON User
instance FromJSON Message
instance FromJSON Event
instance FromJSON ResponseResult
instance FromJSON Response
instance Show ZulipOptions


-- | A Wrapper library for the Zulip API. Works on top of a
--   <tt>ReaderT</tt> monad transformer, holding a <a>ZulipOptions</a>
--   object, which should hold the state and configuration for the API
--   client.
--   
--   Using the library is made easier through a set of helper functions.
--   This design is more concise and than passing around configuration
--   variables; one could easily bypass it with the use of <a>runZulip</a>,
--   though that isn't recommended.
--   
--   Examples are available at the github repository for this project at:
--   <a>https://github.com/yamadapc/hzulip</a>
module Web.HZulip

-- | Represents zulip events
data Event
Event :: String -> Int -> Maybe Message -> Event
eventType :: Event -> String
eventId :: Event -> Int
eventMessage :: Event -> Maybe Message

-- | Represents a Zulip Message
data Message
Message :: Int -> String -> String -> String -> Int -> Either String [User] -> User -> String -> Int -> String -> [String] -> String -> Message
messageId :: Message -> Int
messageType :: Message -> String
messageContent :: Message -> String
messageAvatarUrl :: Message -> String
messageTimestamp :: Message -> Int
messageDisplayRecipient :: Message -> Either String [User]
messageSender :: Message -> User
messageGravatarHash :: Message -> String
messageRecipientId :: Message -> Int
messageClient :: Message -> String
messageSubjectLinks :: Message -> [String]
messageSubject :: Message -> String

-- | Represents some event queue
data Queue
Queue :: String -> Int -> Queue
queueId :: Queue -> String
lastEventId :: Queue -> Int

-- | Represents a zulip user account - for both <tt>display_recipient</tt>
--   and <tt>message_sender</tt> representations
data User
User :: Int -> String -> String -> String -> String -> User
userId :: User -> Int
userFullName :: User -> String
userEmail :: User -> String
userDomain :: User -> String
userShortName :: User -> String

-- | Represents a Zulip API client
data ZulipOptions
ZulipOptions :: String -> String -> String -> Manager -> ZulipOptions
clientEmail :: ZulipOptions -> String
clientApiKey :: ZulipOptions -> String
clientBaseUrl :: ZulipOptions -> String
clientManager :: ZulipOptions -> Manager

-- | The Monad in which Zulip API actions happen in. This is a
--   <a>ReaderT</a> alias, so it's also a instance of <tt>MonadTrans</tt>,
--   <tt>MonadIO</tt> etc.
type ZulipM = ReaderT ZulipOptions IO

-- | The root type for Event callbacks
type EventCallback = Event -> ZulipM ()

-- | Type for message callbacks
type MessageCallback = Message -> ZulipM ()

-- | Add new Stream subscriptions to the client.
addSubscriptions :: [String] -> ZulipM ()

-- | Subscribes the client to all available streams and returns all the
--   stream names
addAllSubscriptions :: ZulipM [String]

-- | The default zulip API URL
defaultBaseUrl :: String

-- | The list of all avaiable event types
eventTypes :: [String]

-- | Fetches new set of events from a <a>Queue</a>.
getEvents :: Queue -> Bool -> ZulipM (Queue, [Event])

-- | Get a list of all the public streams
getStreams :: ZulipM [String]

-- | Get all the user emails subscribed to a stream
getStreamSubscribers :: String -> ZulipM [String]

-- | Get a list of the streams the client is currently subscribed to.
getSubscriptions :: ZulipM [String]

-- | Registers an event callback for specified events and keeps executing
--   it over events as they come in
onNewEvent :: [String] -> EventCallback -> ZulipM ()

-- | Registers a callback to be executed whenever a message comes in. Will
--   loop forever
onNewMessage :: MessageCallback -> ZulipM ()

-- | This registers a new event queue with the zulip API. It's a lower
--   level function, which shouldn't be used unless you know what you're
--   doing. It takes a list of names of the events you want to listen for
--   and whether you'd like for the content to be rendered in HTML format
--   (if you set the last parameter to <a>False</a> it will be kept as
--   typed, in markdown format)
registerQueue :: [String] -> Bool -> ZulipM Queue

-- | Remove one or more Stream subscriptions from the client
removeSubscriptions :: [String] -> ZulipM ()

-- | Helper to run Actions in the Zulip Monad
runZulip :: ZulipM a -> ZulipOptions -> IO a

-- | This wraps `POST <a>https://api.zulip.com/v1/messages`</a> with a
--   nicer root API. Simpler helpers for each specific case of this
--   somewhat overloaded endpoint will also be provided in the future.
--   
--   It takes the message <tt>mtype</tt>, <tt>mrecipients</tt>,
--   <tt>msubject</tt> and <tt>mcontent</tt> and returns the created
--   message's <a>id</a> in the <a>ZulipM</a> monad.
sendMessage :: String -> [String] -> String -> String -> ZulipM Int

-- | Helper for sending private messages. Takes the list of recipients and
--   the message's content.
sendPrivateMessage :: [String] -> String -> ZulipM Int

-- | Helper for sending stream messages. Takes the stream name, the subject
--   and the message.
sendStreamMessage :: String -> String -> String -> ZulipM Int

-- | A sink representation of the zulip messaging API, takes a tuple with
--   the arguments for <a>sendMessage</a> and sends it
sinkZulipMessages :: Sink (String, [String], String, String) ZulipM ()

-- | Creates a conduit <a>Source</a> of zulip events
sourceZulipEvents :: Int -> [String] -> Source ZulipM Event

-- | Creates a conduit <a>Source</a> of zulip messages
sourceZulipMessages :: Int -> Source ZulipM Message

-- | Flipped version of <a>runZulip</a>
withZulip :: ZulipOptions -> ZulipM a -> IO a

-- | Helper for creating a minimal <a>ZulipOptions</a> object and running
--   an action in the <a>ZulipM</a> monad
withZulipCreds :: String -> String -> ZulipM a -> IO a

-- | Helper for creating a <a>ZulipOptions</a> object with the
--   <tt>baseUrl</tt> set to <a>defaultBaseUrl</a>
zulipOptions :: String -> String -> IO ZulipOptions

-- | Lift a computation from the argument monad to the constructed monad.
lift :: MonadTrans t => forall (m :: * -> *) a. Monad m => m a -> t m a

-- | Fetch the value of the environment.
ask :: Monad m => ReaderT r m r
