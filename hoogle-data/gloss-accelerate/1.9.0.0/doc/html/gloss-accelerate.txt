-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Extras to interface Gloss and Accelerate
--   
@package gloss-accelerate
@version 1.9.0.0

module Graphics.Gloss.Accelerate.Data.Point

-- | An abstract point value on the xy-plane.
type Point = XY Float

-- | Make a custom point
makePoint :: Exp Float -> Exp Float -> Exp Point

-- | Take the components of a point
xyOfPoint :: Exp Point -> (Exp Float, Exp Float)

-- | Convert a two-dimensional index into a point centered in a plane of
--   the given width and height.
pointOfIndex :: Int -> Int -> Exp DIM2 -> Exp Point

-- | Test whether a point lies within a rectangular box that is oriented on
--   the x-y plane. The points P1-P2 are opposing points of the box, but
--   need not be in a particular order.
--   
--   <pre>
--   P2 +-------+
--      |       |
--      | + P0  |
--      |       |
--      +-------+ P1
--   </pre>
pointInBox :: Exp Point -> Exp Point -> Exp Point -> Exp Bool
instance Typeable XY
instance Show a => Show (XY a)
instance Eq a => Eq (XY a)
instance Elt a => Unlift Exp (XY (Exp a))
instance (Lift Exp a, Elt (Plain a)) => Lift Exp (XY a)
instance IsTuple (XY a)
instance Elt a => Elt (XY a)
instance Num a => Num (XY a)

module Graphics.Gloss.Accelerate.Data.Picture

-- | Use an Accelerate array of RGBA data as a bitmap image. If the image
--   is generated programatically every frame, then the second parameter
--   should be <a>False</a>. If you have loaded it from static data then
--   use <a>True</a>.
bitmapOfArray :: Array DIM2 Word32 -> Bool -> Picture


-- | Colours without an alpha component
module Graphics.Gloss.Accelerate.Data.Color.RGB

-- | An abstract color value.
--   
--   We keep the type abstract so we can be sure that the components are in
--   the required range. To make a custom color use <a>makeColor</a>.
type Color = RGB Float

-- | Same as <a>RGBA</a>, but colours don't have an alpha component. All
--   components like in the range [0..1).
--   
--   We need to parameterise by a type so that we can have both Exp (RGB a)
--   and RGB (Exp a).
data RGB a
RGB :: a -> a -> a -> RGB a

-- | Make a custom color. All components are clamped to the range [0..1].
makeColor :: Exp Float -> Exp Float -> Exp Float -> Exp Color

-- | Make a custom color from 8-bit values.
makeColor8 :: Exp Word8 -> Exp Word8 -> Exp Word8 -> Exp Color

-- | Make a custom color. You promise that all components are clamped to
--   the range [0..1]
rawColor :: Exp Float -> Exp Float -> Exp Float -> Exp Color

-- | Take the RGB components of a color.
rgbOfColor :: Exp Color -> (Exp Float, Exp Float, Exp Float)

-- | Convert a color into a packed RGBA value.
packRGBA :: Exp Color -> Exp Word32

-- | Convert a colour into a packed BGRA value.
--   
--   This is necessary as OpenGL reads pixel data as ABGR, rather than
--   RGBA.
packABGR :: Exp Color -> Exp Word32

-- | Clamp components of a color into the required range.
clampColor :: Exp Color -> Exp Color

-- | Mix two colors with the given ratios.
mixColors :: Exp Float -> Exp Float -> Exp Color -> Exp Color -> Exp Color

-- | Add RGB components of a color component-wise, then normalise them to
--   the highest resulting one. The alpha components are averaged.
addColors :: Exp Color -> Exp Color -> Exp Color

-- | Make a dimmer version of a color, scaling towards black.
dim :: Exp Color -> Exp Color

-- | Make a brighter version of a color, scaling towards white.
brighten :: Exp Color -> Exp Color

-- | Lighten a color, adding white.
lighten :: Exp Color -> Exp Color

-- | Darken a color, adding black.
darken :: Exp Color -> Exp Color

-- | A greyness of a given magnitude.
greyN :: Exp Float -> Exp Color
black :: Exp Color
white :: Exp Color
red :: Exp Color
green :: Exp Color
blue :: Exp Color
yellow :: Exp Color
cyan :: Exp Color
magenta :: Exp Color
rose :: Exp Color
violet :: Exp Color
azure :: Exp Color
aquamarine :: Exp Color
chartreuse :: Exp Color
orange :: Exp Color
instance Typeable RGB
instance Show a => Show (RGB a)
instance Eq a => Eq (RGB a)
instance Elt a => Unlift Exp (RGB (Exp a))
instance (Lift Exp a, Elt (Plain a)) => Lift Exp (RGB a)
instance IsTuple (RGB a)
instance Elt a => Elt (RGB a)
instance (Elt a, IsNum a) => Num (Exp (RGB a))
instance Num a => Num (RGB a)


-- | Predefined and custom colors. Essentially equivalent to the
--   <a>Graphics.Gloss.Data.Color</a>, but lifted to Accelerate types.
module Graphics.Gloss.Accelerate.Data.Color.RGBA

-- | An abstract color value.
--   
--   We keep the type abstract so we can be sure that the components are in
--   the required range. To make a custom color use <a>makeColor</a>.
type Color = RGBA Float

-- | An RGBA colour value to hold the color components. All components lie
--   in the range [0..1).
--   
--   We need to parameterise by a type so that we can have both Exp (RGBA
--   a) and RGBA (Exp a).
data RGBA a
RGBA :: a -> a -> a -> a -> RGBA a

-- | Make a custom color. All components are clamped to the range [0..1].
makeColor :: Exp Float -> Exp Float -> Exp Float -> Exp Float -> Exp Color

-- | Make a custom color from 8-bit values.
makeColor8 :: Exp Word8 -> Exp Word8 -> Exp Word8 -> Exp Word8 -> Exp Color

-- | Make a custom color. You promise that all components are clamped to
--   the range [0..1]
rawColor :: Exp Float -> Exp Float -> Exp Float -> Exp Float -> Exp Color

-- | Take the RGBA components of a color.
rgbaOfColor :: Exp Color -> (Exp Float, Exp Float, Exp Float, Exp Float)

-- | Convert a color into a packed RGBA value.
packRGBA :: Exp Color -> Exp Word32

-- | Convert a colour into a packed BGRA value.
--   
--   This is necessary as OpenGL reads pixel data as ABGR, rather than
--   RGBA.
packABGR :: Exp Color -> Exp Word32

-- | Clamp components of a color into the required range.
clampColor :: Exp Color -> Exp Color

-- | Mix two colors with the given ratios.
mixColors :: Exp Float -> Exp Float -> Exp Color -> Exp Color -> Exp Color

-- | Add RGB components of a color component-wise, then normalise them to
--   the highest resulting one. The alpha components are averaged.
addColors :: Exp Color -> Exp Color -> Exp Color

-- | Make a dimmer version of a color, scaling towards black.
dim :: Exp Color -> Exp Color

-- | Make a brighter version of a color, scaling towards white.
brighten :: Exp Color -> Exp Color

-- | Lighten a color, adding white.
lighten :: Exp Color -> Exp Color

-- | Darken a color, adding black.
darken :: Exp Color -> Exp Color

-- | Make a colour completely opaque.
opaque :: Exp Color -> Exp Color

-- | A greyness of a given magnitude.
greyN :: Exp Float -> Exp Color
black :: Exp Color
white :: Exp Color
red :: Exp Color
green :: Exp Color
blue :: Exp Color
yellow :: Exp Color
cyan :: Exp Color
magenta :: Exp Color
rose :: Exp Color
violet :: Exp Color
azure :: Exp Color
aquamarine :: Exp Color
chartreuse :: Exp Color
orange :: Exp Color
instance Typeable RGBA
instance Show a => Show (RGBA a)
instance Eq a => Eq (RGBA a)
instance Elt a => Unlift Exp (RGBA (Exp a))
instance (Lift Exp a, Elt (Plain a)) => Lift Exp (RGBA a)
instance IsTuple (RGBA a)
instance Elt a => Elt (RGBA a)
instance (Elt a, IsNum a) => Num (Exp (RGBA a))
instance Num a => Num (RGBA a)


-- | Predefined and custom colors. Essentially equivalent to the
--   <a>Graphics.Gloss.Data.Color</a>, but lifted to Accelerate types.
module Graphics.Gloss.Accelerate.Data.Color
