-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | HTTP server library
--   
--   A simple but practical HTTP server library.
@package webserver
@version 0.7.1.1

module Network.Web.Server.Range
skipAndSize :: String -> Integer -> Maybe (Integer, Integer)

module Network.Web.Server.Lang
parseLang :: String -> [String]

module Network.Web.Date
parseDate :: ByteString -> Maybe UTCTime
utcToDate :: UTCTime -> HttpDate
type HttpDate = ByteString


-- | Parser for URI
module Network.Web.URI

-- | Abstract data type for URI
data URI
uriScheme :: URI -> ByteString
uriAuthority :: URI -> Maybe URIAuth
uriPath :: URI -> ByteString
uriQuery :: URI -> ByteString
uriFragment :: URI -> ByteString

-- | Abstract data type for URI Authority
data URIAuth
uriUserInfo :: URIAuth -> ByteString
uriRegName :: URIAuth -> ByteString
uriPort :: URIAuth -> ByteString

-- | Parsing URI.
parseURI :: ByteString -> Maybe URI

-- | Getting a hostname from <a>URI</a>.
uriHostName :: URI -> ByteString

-- | Getting a port number from <a>URI</a>.
uriPortNumber :: URI -> ByteString

-- | Making a URL string from <a>URI</a>.
toURL :: URI -> ByteString

-- | Making a URL string from <a>URI</a> without port.
toURLwoPort :: URI -> ByteString

-- | Making a URL string from <a>URI</a> without port and parameters.
toURLPath :: URI -> ByteString

-- | Checking whether or not URI starts with "http:<i></i>".
isAbsoluteURI :: ByteString -> Bool

-- | Decoding the %XX encoding.
unEscapeString :: String -> String

-- | Decoding the %XX encoding.
unEscapeByteString :: ByteString -> ByteString
instance Show URIAuth
instance Show URI


-- | Parameters of HTTP.
module Network.Web.Params

-- | Methods of HTTP.
data Method
GET :: Method
HEAD :: Method
POST :: Method
PUT :: Method
DELETE :: Method
TRACE :: Method
CONNECT :: Method
UnknownMethod :: Method
toMethod :: ByteString -> Method

-- | Versions of HTTP.
data Version
HTTP10 :: Version
HTTP11 :: Version
toVersion :: ByteString -> Version
fromVersion :: Version -> ByteString

-- | Status of HTTP.
data Status
Continue :: Status
SwitchingProtocols :: Status
OK :: Status
Created :: Status
Accepted :: Status
NonAuthoritativeInformation :: Status
NoContent :: Status
ResetContent :: Status
PartialContent :: Integer -> Integer -> Status
MultipleChoices :: Status
MovedPermanently :: Status
Found :: Status
SeeOther :: Status
NotModified :: Status
UseProxy :: Status
TemporaryRedirect :: Status
BadRequest :: Status
Unauthorized :: Status
PaymentRequired :: Status
Forbidden :: Status
NotFound :: Status
MethodNotAllowed :: Status
NotAcceptable :: Status
ProxyAuthenticationRequired :: Status
RequestTimeout :: Status
Conflict :: Status
Gone :: Status
LengthRequired :: Status
PreconditionFailed :: Status
RequestEntityTooLarge :: Status
RequestURITooLarge :: Status
UnsupportedMediaType :: Status
RequestedRangeNotSatisfiable :: Status
ExpectationFailed :: Status
InternalServerError :: Status
NotImplemented :: Status
BadGateway :: Status
ServiceUnavailable :: Status
GatewayTimeout :: Status
HTTPVersionNotSupported :: Status

-- | Converting numeric status to <a>Status</a>.
toStatus :: ByteString -> Maybe Status
fromStatus :: Status -> ByteString

-- | Returning <a>True</a> for 4xx and 5xx.
badStatus :: Status -> Bool

-- | The type for persist connection or not
data Persist
Close :: Persist
Keep :: Persist
PerUnknown :: Persist
toPersist :: ByteString -> Persist
fromPersist :: Persist -> ByteString

-- | Exceptions for Web server
data ServerException
TimeOut :: ServerException
TerminatedByClient :: ServerException

-- | Field key of HTTP header.
data FieldKey
FkAccept :: FieldKey
FkAcceptLanguage :: FieldKey
FkCacheControl :: FieldKey
FkConnection :: FieldKey
FkContentLength :: FieldKey
FkContentRange :: FieldKey
FkContentType :: FieldKey
FkCookie :: FieldKey
FkDate :: FieldKey
FkHost :: FieldKey
FkIfModifiedSince :: FieldKey
FkIfRange :: FieldKey
FkIfUnmodifiedSince :: FieldKey
FkLastModified :: FieldKey
FkLocation :: FieldKey
FkRange :: FieldKey
FkServer :: FieldKey
FkSetCookie2 :: FieldKey
FkStatus :: FieldKey
FkTransferEncoding :: FieldKey

-- | sent by client
FkAcceptEncoding :: FieldKey

-- | returned by server
FkContentEncoding :: FieldKey
FkOther :: ByteString -> FieldKey

-- | Field value of HTTP header.
type FieldValue = ByteString

-- | Converting field key to <a>FieldKey</a>.
toFieldKey :: ByteString -> FieldKey

-- | Converting <a>FieldKey</a> to field key.
fromFieldKey :: FieldKey -> ByteString

-- | The type for Content-Type.
type CT = ByteString

-- | The value for text/html.
textHtml :: CT

-- | Selecting a value of Content-Type from a file suffix.
selectContentType :: String -> CT
instance Typeable ServerException
instance Show Method
instance Eq Method
instance Enum Method
instance Bounded Method
instance Eq Version
instance Show Version
instance Show Status
instance Eq FieldKey
instance Show FieldKey
instance Ord FieldKey
instance Eq Persist
instance Show Persist
instance Eq ServerException
instance Ord ServerException
instance Show ServerException
instance Exception ServerException


-- | HTTP library for HTTP server.
module Network.Web.HTTP

-- | Receiving HTTP request from <a>Handle</a>. If request is broken,
--   <a>Nothing</a> is returned.
receive :: Handle -> IO (Maybe Request)

-- | Sending HTTP response to <a>Handle</a>. If <a>Keep</a> is specified,
--   the HTTP connection will be kept. If <a>Close</a> is specified, the
--   connection will be closed. <a>Version</a> should be copied from
--   <a>Request</a>.
respond :: Handle -> Version -> Persist -> Response -> IO ()

-- | Abstract data type of HTTP request.
data Request

-- | Request method
reqMethod :: Request -> Method

-- | URI parsed from absolute URL or relative URL with the Host: field
reqURI :: Request -> URI

-- | HTTP version
reqVersion :: Request -> Version

-- | Key-values of request header
reqFields :: Request -> Fields

-- | Entity body if exists
reqBody :: Request -> Maybe ByteString

-- | Length of entity body from Content-Length:
reqLength :: Request -> Integer

-- | Abstract data type of HTTP response.
data Response

-- | Response status
rspStatus :: Response -> Status
rspFields :: Response -> Fields
rspBody :: Response -> Maybe ByteString
rspLength :: Response -> Maybe Integer
rspLogMsg :: Response -> String

-- | A function to make <a>Response</a>.
makeResponse :: Status -> [(FieldKey, FieldValue)] -> Response

-- | A function to make <a>Response</a>.
makeResponse2 :: Status -> Maybe ByteString -> Maybe Integer -> [(FieldKey, FieldValue)] -> Response

-- | A function to make <a>Response</a>.
makeResponse3 :: Status -> Maybe ByteString -> Maybe Integer -> Fields -> Response

-- | A class to abstract <a>Request</a> and <a>Response</a>.
class Comm a

-- | Abstract data type for Key-values of HTTP header.
data Fields

-- | Looking up the HTTP field value.
lookupField :: Comm a => FieldKey -> a -> Maybe FieldValue

-- | Looking up the HTTP field value.
lookupField' :: FieldKey -> Fields -> Maybe FieldValue

-- | Inserting the HTTP field.
insertField :: Comm a => FieldKey -> FieldValue -> a -> a

-- | Inserting the HTTP field.
insertField' :: FieldKey -> FieldValue -> Fields -> Fields

-- | Parsing HTTP header from <a>Handle</a>. This function is useful to
--   parse CGI output.
receiveFields :: Handle -> IO Fields
fromFields :: Fields -> [(FieldKey, FieldValue)]
instance Show Fields
instance Show Request
instance Comm Response
instance Comm Request


-- | HTTP server library.
module Network.Web.Server

-- | A function to run an <a>WebServer</a>. <a>Handle</a> should be mode by
--   converting an accepted socket. Keep-alive / termination of HTTP 1.0
--   and HTTP 1.1 is correctly handled. So, <a>WebServer</a> need not to
--   handle the Connection: header in response. The Date: header is
--   automatically added in response.
connection :: Handle -> WebServer -> WebConfig -> IO ()

-- | The type for HTTP server.
type WebServer = Maybe Request -> IO Response

-- | The configuration for <a>connection</a>.
data WebConfig
WebConfig :: (String -> IO ()) -> (String -> IO ()) -> (String -> IO ()) -> (String -> IO ()) -> Int -> WebConfig

-- | A hook to be called when an HTTP connection is closed.
closedHook :: WebConfig -> String -> IO ()

-- | A hook to be called when access succeeds.
accessHook :: WebConfig -> String -> IO ()

-- | A hook to be called when an access error occurs.
errorHook :: WebConfig -> String -> IO ()

-- | A hook to be called when a fatal error occurs.
fatalErrorHook :: WebConfig -> String -> IO ()

-- | A time to unblock receiving an HTTP request in seconds.
connectionTimer :: WebConfig -> Int

module Network.Web.Server.Params

-- | The configuration for the basic web server.
data BasicConfig
BasicConfig :: (Request -> IO Path) -> (FilePath -> Maybe (Integer, Integer) -> IO ByteString) -> (FilePath -> IO (Maybe (Integer, UTCTime))) -> ByteString -> TCPInfo -> BasicConfig

-- | A mapper from <tt>URI</tt> to <a>Path</a>.
mapper :: BasicConfig -> Request -> IO Path

-- | Resource obtaining function. The second argument is (offset of the
--   resource, and length from the offset).
obtain :: BasicConfig -> FilePath -> Maybe (Integer, Integer) -> IO ByteString

-- | A function to return the size of the resource and its modification
--   time if exists.
info :: BasicConfig -> FilePath -> IO (Maybe (Integer, UTCTime))

-- | A server name specified the Server: field.
serverName :: BasicConfig -> ByteString

-- | <a>TCPInfo</a> for passing CGI. (See c10k library.)
tcpInfo :: BasicConfig -> TCPInfo

-- | Default <a>BasicConfig</a>, with <a>obtain</a>, <a>info</a>, and
--   <a>serverName</a> filled in. It is necessary to override the
--   <a>mapper</a> and <a>tcpInfo</a> fields
defaultConfig :: BasicConfig

-- | Control information of how to handle <tt>URI</tt>.
data Path

-- | <tt>URI</tt> cannot be converted into any resources.
None :: Path

-- | <tt>URI</tt> is converted into a resource (typically a file).
File :: FilePath -> Path

-- | <tt>URI</tt> is converted into CGI.
PathCGI :: CGI -> Path

-- | <tt>URI</tt> is converted into a handler callback
Handler :: (IO Response) -> Path

-- | Internal information of CGI converted from <tt>URI</tt>.
data CGI
CGI :: FilePath -> String -> String -> String -> CGI

-- | A program path to be executed.
progPath :: CGI -> FilePath

-- | A script name.
scriptName :: CGI -> String

-- | A path information.
pathInfo :: CGI -> String

-- | A query string.
queryString :: CGI -> String

-- | Get the size and modification time of a file, if possible.
defaultInfo :: FilePath -> IO (Maybe (Integer, UTCTime))

-- | Obtain a data slice from a file as a lazy bytestring.
defaultObtain :: FilePath -> Maybe (Integer, Integer) -> IO ByteString
instance Eq CGI
instance Show CGI
instance Show Path
instance Eq Path

module Network.Web.Server.CGI
tryGetCGI :: BasicConfig -> Request -> CGI -> IO (Maybe Response)


-- | Creating basic <a>WebServer</a>. Created <a>WebServer</a> can handle
--   GET / HEAD / POST; OK, Not Found, Not Modified, Moved Permanently,
--   etc; partial getting; language negotication; CGI, chunked data for CGI
--   output;
module Network.Web.Server.Basic

-- | Run an HTTP server, using a default BasicConfig. If you need to
--   perform IO in the site mapping function (e.g. to check for the
--   existence of files), use <a>serveHTTPMapIO</a>,
serveHTTP :: Maybe FilePath -> Int -> ByteString -> (Request -> Path) -> IO ()

-- | Run an HTTP server, using a default BasicConfig. Can perform IO in the
--   site mapping function.
serveHTTPMapIO :: Maybe FilePath -> Int -> ByteString -> (Request -> IO Path) -> IO ()

-- | Creating <a>WebServer</a> with <a>BasicConfig</a>. The created
--   <a>WebServer</a> can handle GET / HEAD / POST; OK, Not Found, Not
--   Modified, Moved Permanently, etc; partial getting; language
--   negotication; CGI, chunked data for CGI output; If
--   http://example.com/path does not exist but http://example.com/path/
--   exists, the created <a>WebServer</a> redirects it.
--   http://example.com/path/ is mapped to /somewhere/path/ by
--   <a>mapper</a> and index.html and index.html.en automatically added and
--   try to read by <a>obtain</a>. If Accept-Language is <a>xx</a> and
--   <a>yy</a> in order, index.html.xx, index.html.yy, index.html and
--   index.html.en are tried. The created <a>WebServer</a> does not
--   dynamically make index.html for a directory even if index.html does
--   not exist for security reasons.
basicServer :: BasicConfig -> WebServer
