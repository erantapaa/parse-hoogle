-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Crypto Pseudo Random Number Generator using AES in counter mode.
--   
@package cprng-aes
@version 0.6.1


-- | this CPRNG is an AES based counter system.
--   
--   the internal size of fields are: 16 bytes IV, 16 bytes counter, 32
--   bytes key
--   
--   each block are generated the following way: aes (IV <a>xor</a>
--   counter) -&gt; 16 bytes output
module Crypto.Random.AESCtr

-- | AES Counter mode Pseudo random generator.
--   
--   Provide a very good Cryptographic pseudo random generator that create
--   pseudo random output based an AES cipher used in counter mode,
--   initialized from random key, random IV and random nonce.
--   
--   This CPRG uses 64 bytes of pure entropy to create its random state.
--   
--   By default, this generator will automatically reseed after generating
--   1 megabyte of data.
data AESRNG

-- | make an AES RNG from an EntropyPool.
--   
--   use <a>makeSystem</a> to not have to deal with the entropy pool.
make :: EntropyPool -> AESRNG

-- | Initialize a new AES RNG using the system entropy. {--}
makeSystem :: IO AESRNG
instance CPRG AESRNG
instance Show AESRNG
