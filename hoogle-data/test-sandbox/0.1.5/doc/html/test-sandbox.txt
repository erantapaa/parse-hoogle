-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Sandbox for system tests
--   
@package test-sandbox
@version 0.1.5

module Test.Sandbox.Process
data ProcessInfo
ProcessInfo :: ProcessID -> String -> ProcessID -> ProcessGroupID -> ProcessInfo
piPid :: ProcessInfo -> ProcessID
piStat :: ProcessInfo -> String
piPpid :: ProcessInfo -> ProcessID
piPgid :: ProcessInfo -> ProcessGroupID
getProcessInfo :: String -> Maybe ProcessInfo
getProcessInfos :: IO [ProcessInfo]
getProcessGroupIDs :: IO [ProcessGroupID]
getProcessIDs :: [ProcessGroupID] -> IO [ProcessID]
cleanUpProcessGroupIDs :: [ProcessGroupID] -> IO ()
instance Show ProcessInfo
instance Eq ProcessInfo
instance Read ProcessInfo

module Test.Sandbox.Internals
type ExceptT' = ExceptT
runExceptT' :: ExceptT e m a -> m (Either e a)
type Port = Int
type SandboxStateRef = IORef SandboxState
newtype Sandbox a
Sandbox :: ExceptT' String (ReaderT SandboxStateRef IO) a -> Sandbox a
runSB :: Sandbox a -> ExceptT' String (ReaderT SandboxStateRef IO) a
newtype StMSandbox a
StMSandbox :: StM (ExceptT' String (ReaderT SandboxStateRef IO)) a -> StMSandbox a
runStMSandbox :: StMSandbox a -> StM (ExceptT' String (ReaderT SandboxStateRef IO)) a
runSandbox :: Sandbox a -> SandboxStateRef -> IO (Either String a)
errorHandler :: String -> IO a
runSandbox' :: SandboxStateRef -> Sandbox a -> IO a
data SandboxState
SandboxState :: String -> FilePath -> Map String SandboxedProcess -> [String] -> Map String Port -> [Port] -> Map String FilePath -> Map String ByteString -> SandboxState
ssName :: SandboxState -> String
ssDataDir :: SandboxState -> FilePath
ssProcesses :: SandboxState -> Map String SandboxedProcess
ssProcessOrder :: SandboxState -> [String]
ssAllocatedPorts :: SandboxState -> Map String Port
ssAvailablePorts :: SandboxState -> [Port]
ssFiles :: SandboxState -> Map String FilePath
ssVariables :: SandboxState -> Map String ByteString
data SandboxedProcess
SandboxedProcess :: String -> FilePath -> [String] -> Maybe Int -> Maybe Capture -> Maybe SandboxedProcessInstance -> Maybe ProcessID -> Maybe ProcessGroupID -> [Handle] -> Maybe [(String, String)] -> Maybe FilePath -> SandboxedProcess
spName :: SandboxedProcess -> String
spBinary :: SandboxedProcess -> FilePath
spArgs :: SandboxedProcess -> [String]
spWait :: SandboxedProcess -> Maybe Int
spCapture :: SandboxedProcess -> Maybe Capture
spInstance :: SandboxedProcess -> Maybe SandboxedProcessInstance
spPid :: SandboxedProcess -> Maybe ProcessID
spPGid :: SandboxedProcess -> Maybe ProcessGroupID
spHandles :: SandboxedProcess -> [Handle]
spEnvs :: SandboxedProcess -> Maybe [(String, String)]
spCwd :: SandboxedProcess -> Maybe FilePath
data Capture
CaptureStdout :: Capture
CaptureStderr :: Capture
CaptureBoth :: Capture
CaptureStdoutWithFile :: FilePath -> Capture
CaptureStderrWithFile :: FilePath -> Capture
CaptureBothWithFile :: FilePath -> FilePath -> Capture
data SandboxedProcessInstance
RunningInstance :: ProcessHandle -> Handle -> (Maybe Handle) -> [Handle] -> SandboxedProcessInstance
StoppedInstance :: ExitCode -> (Maybe String) -> SandboxedProcessInstance
get :: Sandbox SandboxState
put :: SandboxState -> Sandbox SandboxState
pretty :: SandboxState -> String
header :: SandboxState -> String
footer :: String
newSandboxState :: String -> FilePath -> IO SandboxStateRef
registerProcess :: String -> FilePath -> [String] -> Maybe Int -> Maybe Capture -> Maybe [(String, String)] -> Maybe FilePath -> Sandbox SandboxedProcess
isValidProcessName :: String -> Bool
getProcess :: String -> Sandbox SandboxedProcess
updateProcess :: SandboxedProcess -> Sandbox SandboxedProcess
secondInÂµs :: Int
setFile' :: String -> String -> SandboxState -> IO (FilePath, SandboxState)
bufferSize :: Int
hReadWithTimeout :: Handle -> Int -> Sandbox ByteString
sendToPort :: String -> String -> Int -> Sandbox String
getNewPort :: String -> Sandbox Port
isBindable' :: Port -> IO Bool
isBindable :: Port -> IO Bool
startProcess :: SandboxedProcess -> Sandbox SandboxedProcess
formatCommandLine :: String -> [String] -> String
stopProcess :: SandboxedProcess -> Sandbox SandboxedProcess
getAvailablePids :: Sandbox [ProcessID]
cleanUpProcesses :: Sandbox ()
hSignalProcess :: Signal -> ProcessHandle -> IO ()
killProcess :: ProcessHandle -> IO ()
hGetProcessID :: ProcessHandle -> IO ProcessID
interactWithProcess :: SandboxedProcess -> String -> Int -> Sandbox String
getProcessInputHandle :: SandboxedProcess -> Sandbox Handle
getProcessCapturedOutputHandle :: SandboxedProcess -> Sandbox Handle
getProcessBinary :: SandboxedProcess -> Sandbox FilePath
findExecutables :: [FilePath] -> IO [FilePath]
tryBinary :: FilePath -> IO (Maybe FilePath)
getProcessCandidateBinaries :: SandboxedProcess -> [FilePath]
expand :: String -> IO String
whenM :: Monad m => m Bool -> m () -> m ()

-- | Sets a custom variable in the sandbox monad.
setVariable :: Serialize a => String -> a -> Sandbox a

-- | Checks that a custom sandbox variable is set.
checkVariable :: String -> Sandbox Bool

-- | Returns the value of a previously set sandbox variable (or a provided
--   default value if unset)
getVariable :: Serialize a => String -> a -> Sandbox a

-- | Unsets a custom variable.
unsetVariable :: String -> Sandbox ()
isVerbose :: Sandbox Bool
verbosityKey :: String
isCleanUp :: Sandbox Bool
cleanUpKey :: String
displayBanner :: Sandbox ()
installSignalHandlers :: Sandbox ()
data SandboxSeed
SandboxFixedSeed :: Int -> SandboxSeed
SandboxRandomSeed :: SandboxSeed
data SandboxTestOptions
SandboxTestOptions :: Maybe SandboxSeed -> Maybe Int -> Maybe Int -> Maybe Int -> SandboxTestOptions
stoSeed :: SandboxTestOptions -> Maybe SandboxSeed
stoMaximumGeneratedTests :: SandboxTestOptions -> Maybe Int
stoMaximumUnsuitableGeneratedTests :: SandboxTestOptions -> Maybe Int
stoMaximumTestSize :: SandboxTestOptions -> Maybe Int
putOptions :: SandboxTestOptions -> Sandbox ()
getOptions :: Sandbox (Maybe SandboxTestOptions)
optionsVariable :: String
instance Applicative Sandbox
instance Functor Sandbox
instance Monad Sandbox
instance MonadBase IO Sandbox
instance MonadError String Sandbox
instance MonadReader (IORef SandboxState) Sandbox
instance MonadIO Sandbox
instance Generic SandboxSeed
instance Generic SandboxTestOptions
instance Datatype D1SandboxSeed
instance Constructor C1_0SandboxSeed
instance Constructor C1_1SandboxSeed
instance Datatype D1SandboxTestOptions
instance Constructor C1_0SandboxTestOptions
instance Selector S1_0_0SandboxTestOptions
instance Selector S1_0_1SandboxTestOptions
instance Selector S1_0_2SandboxTestOptions
instance Selector S1_0_3SandboxTestOptions
instance Serialize SandboxTestOptions
instance Serialize SandboxSeed
instance MonadBaseControl IO Sandbox


-- | Configuration and management of processes in a sandboxed environment
--   for system testing.
--   
--   This module contains extensive documentation. Please scroll down to
--   the Introduction section to continue reading.
module Test.Sandbox
data Sandbox a

-- | Optional parameters when registering a process in the Sandbox monad.
data ProcessSettings
ProcessSettings :: Maybe Int -> Maybe Capture -> ProcessSettings

-- | Time to wait (in s.) before checking that the process is still up
psWait :: ProcessSettings -> Maybe Int

-- | Which outputs to capture (if any)
psCapture :: ProcessSettings -> Maybe Capture
ProcessSettings2 :: Maybe Int -> Maybe Capture -> Maybe [(String, String)] -> Maybe FilePath -> ProcessSettings

-- | Time to wait (in s.) before checking that the process is still up
psWait :: ProcessSettings -> Maybe Int

-- | Which outputs to capture (if any)
psCapture :: ProcessSettings -> Maybe Capture

-- | Environment variables
psEnv :: ProcessSettings -> Maybe [(String, String)]

-- | Working directory for the new process
psCwd :: ProcessSettings -> Maybe FilePath

-- | The default value for this type.
def :: Default a => a
data Capture
CaptureStdout :: Capture
CaptureStderr :: Capture
CaptureBoth :: Capture
CaptureStdoutWithFile :: FilePath -> Capture
CaptureStderrWithFile :: FilePath -> Capture
CaptureBothWithFile :: FilePath -> FilePath -> Capture

-- | Creates a sandbox and execute the given actions in the IO monad.
sandbox :: String -> Sandbox a -> IO a
withSandbox :: (SandboxStateRef -> IO a) -> IO a
runSandbox :: Sandbox a -> SandboxStateRef -> IO (Either String a)
runSandbox' :: SandboxStateRef -> Sandbox a -> IO a

-- | Registers a process in the Sandbox monad.
register :: String -> FilePath -> [String] -> ProcessSettings -> Sandbox String

-- | Helper function: starts a process, wait for it to terminate and return
--   its captured output.
run :: String -> Int -> Sandbox (ExitCode, Maybe String)

-- | Starts the given process, runs the action, then stops the process. The
--   process is managed by the functions start and stop respectively.
withProcess :: String -> Sandbox a -> Sandbox a

-- | Starts a previously registered process (verbose)
start :: String -> Sandbox ()

-- | Starts all registered processes (in their registration order)
startAll :: Sandbox ()

-- | Gracefully stops a previously started process (verbose)
stop :: String -> Sandbox ()

-- | Gracefully stops all registered processes (in their reverse
--   registration order)
stopAll :: Sandbox ()

-- | Sends a POSIX signal to a process
signal :: String -> Signal -> Sandbox ()

-- | Executes the given action silently.
silently :: Sandbox a -> Sandbox a

-- | Interacts with a sandboxed process via standard I/O.
interactWith :: String -> String -> Int -> Sandbox String

-- | Communicates with a sandboxed process via TCP and returns the answered
--   message as a string.
sendTo :: String -> String -> Int -> Sandbox String

-- | Returns the last captured output of a started process.
readLastCapturedOutput :: String -> Sandbox String

-- | Returns the handles used to communicate with a registered process
--   using standard I/O.
getHandles :: String -> Sandbox (Handle, Handle)

-- | Returns an unbound user TCP port and stores it for future reference.
getPort :: String -> Sandbox Port

-- | Returns the effective binary path of a registered process.
getBinary :: String -> Sandbox FilePath

-- | Explicitely sets a port to be returned by getPort.
setPort :: String -> Int -> Sandbox Port

-- | Returns the path of a file previously created by setFile.
getFile :: String -> Sandbox FilePath

-- | Creates a temporary file in the sandbox and returns its path.
setFile :: String -> String -> Sandbox FilePath

-- | Returns the temporary directory used to host the sandbox environment.
getDataDir :: Sandbox FilePath

-- | Checks that a custom sandbox variable is set.
checkVariable :: String -> Sandbox Bool

-- | Returns the value of a previously set sandbox variable (or a provided
--   default value if unset)
getVariable :: Serialize a => String -> a -> Sandbox a

-- | Sets a custom variable in the sandbox monad.
setVariable :: Serialize a => String -> a -> Sandbox a

-- | Unsets a custom variable.
unsetVariable :: String -> Sandbox ()

-- | Temporarily sets a variable for the execution of the given action.
withVariable :: Serialize a => String -> a -> Sandbox b -> Sandbox b

-- | Generalized version of <a>bracket</a>.
--   
--   Note:
--   
--   <ul>
--   <li>When the "acquire" or "release" computations throw exceptions any
--   monadic side effects in <tt>m</tt> will be discarded.</li>
--   <li>When the "in-between" computation throws an exception any monadic
--   side effects in <tt>m</tt> produced by that computation will be
--   discarded but the side effects of the "acquire" or "release"
--   computations will be retained.</li>
--   <li>Also, any monadic side effects in <tt>m</tt> of the "release"
--   computation will be discarded; it is run only for its side effects in
--   <tt>IO</tt>.</li>
--   </ul>
--   
--   Note that when your <tt>acquire</tt> and <tt>release</tt> computations
--   are of type <a>IO</a> it will be more efficient to write:
--   
--   <pre>
--   <tt>liftBaseOp</tt> (<a>bracket</a> acquire release)
--   </pre>
bracket :: MonadBaseControl IO m => m a -> (a -> m b) -> (a -> m c) -> m c

-- | A handler function to handle previous errors and return to normal
--   execution. A common idiom is:
--   
--   <pre>
--   do { action1; action2; action3 } `catchError` handler
--   </pre>
--   
--   where the <tt>action</tt> functions can call <a>throwError</a>. Note
--   that <tt>handler</tt> and the do-block must have the same return type.
catchError :: MonadError e m => forall a. m a -> (e -> m a) -> m a

-- | Generalized version of <a>finally</a>.
--   
--   Note, any monadic side effects in <tt>m</tt> of the "afterward"
--   computation will be discarded.
finally :: MonadBaseControl IO m => m a -> m b -> m a

-- | Is used within a monadic computation to begin exception processing.
throwError :: MonadError e m => forall a. e -> m a

-- | Lift a computation from the <a>IO</a> monad.
liftIO :: MonadIO m => forall a. IO a -> m a
instance Default ProcessSettings
