-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple HTTP server for GenI results
--   
@package geniserver
@version 0.24.1.1

module NLP.GenI.Server.Instruction
data ServerInstruction
ServerInstruction :: [String] -> String -> ServerInstruction
gParams :: ServerInstruction -> [String]
gSemantics :: ServerInstruction -> String
instance JSON ServerInstruction

module NLP.GenI.Server.Flag
serverOptions :: [OptDescr Flag]
type OptSection = (String, [OptDescr Flag], [String])
serverOptionsSections :: [OptSection]
optionsForServer :: [OptDescr Flag]
data PortFlg
PortFlg :: Int -> PortFlg
data HostFlg
HostFlg :: String -> HostFlg
data ReqMaxSizeFlg
ReqMaxSizeFlg :: Int64 -> ReqMaxSizeFlg
defaultHost :: String
defaultPort :: Int
defaultReqMaxSize :: Int64
optionsForRequest :: [OptDescr Flag]
instance Typeable PortFlg
instance Typeable HostFlg
instance Typeable ReqMaxSizeFlg
instance Eq PortFlg
instance Show PortFlg
instance Eq HostFlg
instance Show HostFlg
instance Eq ReqMaxSizeFlg
instance Show ReqMaxSizeFlg

module NLP.GenI.Server
initialise :: Params -> IO ProgState
data GenReq
Dump :: GenReq
Normal :: GenReq
parseInstruction :: JSON j => ByteString -> Either String j
application :: Int64 -> ProgState -> CustomSem sem -> Snap ()
ok :: GenReq -> GeniResults -> Snap ()
err :: Text -> Snap ()
showResults :: [GeniResult] -> Text
handleRequest :: ProgState -> CustomSem sem -> ServerInstruction -> IO (Either Text GeniResults)
prettyEncode :: JSON a => a -> Text
