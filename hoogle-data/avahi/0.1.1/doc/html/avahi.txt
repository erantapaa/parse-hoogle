-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Minimal DBus bindings for Avahi daemon (http://avahi.org)
--   
--   This package provides minimal DBus bindings for Avahi daemon. It can
--   be used to browse for network service via Zeroconf protocol or to
--   announce a service.
@package avahi
@version 0.1.1

module Network.Avahi.Common

-- | Service specification
data Service
Service :: InetProtocol -> String -> String -> String -> String -> Maybe String -> Word16 -> String -> Service
serviceProtocol :: Service -> InetProtocol
serviceName :: Service -> String
serviceType :: Service -> String
serviceDomain :: Service -> String
serviceHost :: Service -> String
serviceAddress :: Service -> Maybe String
servicePort :: Service -> Word16
serviceText :: Service -> String

-- | Service browsing query
data BrowseQuery
BrowseQuery :: InetProtocol -> String -> String -> (Service -> IO ()) -> BrowseQuery

-- | Protocol to be used for lookup
lookupProtocol :: BrowseQuery -> InetProtocol

-- | Service name to find
lookupServiceName :: BrowseQuery -> String

-- | Domain to search in (usually <tt>local</tt>)
lookupDomain :: BrowseQuery -> String

-- | Function to be called on found service
lookupCallback :: BrowseQuery -> Service -> IO ()

-- | Internet protocol specification
data InetProtocol

-- | Unspecified (any) protocol (-1)
PROTO_UNSPEC :: InetProtocol

-- | IPv4 protocol (0)
PROTO_INET :: InetProtocol

-- | IPv6 protocol (1)
PROTO_INET6 :: InetProtocol
proto2variant :: InetProtocol -> Variant
variant2proto :: Variant -> InetProtocol
forceMaybe :: String -> Maybe a -> a
fromVariant_ :: IsVariant a => String -> Variant -> a
iface_unspec :: Variant
flags_empty :: Variant
avahiBus :: BusName
hostNameResolver :: BusName
serviceResolver :: BusName
serverInterface :: InterfaceName
avahiBrowser :: InterfaceName
entryGroupInterface :: InterfaceName
instance Eq InetProtocol
instance Show InetProtocol
instance Eq Service
instance Show Service

module Network.Avahi.Browse

-- | Browse for specified service
browse :: BrowseQuery -> IO ()

-- | Dispatch signal and call corresponding function.
dispatch :: [(Text, Signal -> IO b)] -> Signal -> IO ()

module Network.Avahi.Announce

-- | Announce network service
announce :: Service -> IO ()

module Network.Avahi
