-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Binding to the GtkImageView library.
--   
--   GtkImageView is a simple image viewer widget for GTK+. Similar to the
--   image viewer panes in gThumb or Eye of Gnome. It makes writing image
--   viewing and editing applications easy. Among its features are: * Mouse
--   and keyboard zooming. * Scrolling and dragging. * Adjustable
--   interpolation. * Fullscreen mode. * GIF animation support. * Ability
--   to make selections. * Extensible using a tool system.
@package gtkimageview
@version 0.12.0


module Graphics.UI.Gtk.ImageView.Zooms

-- | Returns the zoom factor that is one step larger than the supplied zoom
--   factor.
zoomsGetZoomIn :: Double -> IO Double

-- | Returns the zoom factor that is one step smaller than the supplied
--   zoom factor.
zoomsGetZoomOut :: Double -> IO Double

-- | Returns the minimum allowed zoom factor.
zoomsGetMinZoom :: IO Double

-- | Returns the maximum allowed zoom factor.
zoomsGetMaxZoom :: IO Double

-- | Returns the zoom factor clamped to the minumum and maximum allowed
--   value.
zoomsClampZoom :: Double -> IO Double


module Graphics.UI.Gtk.ImageView.Enums
data ImageTransp
ImageTranspColor :: ImageTransp
ImageTranspBackground :: ImageTransp
ImageTranspGrid :: ImageTransp
data HotspotType
HotspotInside :: HotspotType
HotspotResizeNorthWest :: HotspotType
HotspotResizeNorthEast :: HotspotType
HotspotResizeSouthWest :: HotspotType
HotspotResizeSouthEast :: HotspotType
HotspotResizeNorth :: HotspotType
HotspotResizeEast :: HotspotType
HotspotResizeSouth :: HotspotType
HotspotResizeWest :: HotspotType
HotspotOutside :: HotspotType
HotspotLast :: HotspotType
instance Eq ImageTransp
instance Bounded ImageTransp
instance Show ImageTransp
instance Read ImageTransp
instance Eq HotspotType
instance Bounded HotspotType
instance Show HotspotType
instance Read HotspotType
instance Enum HotspotType
instance Enum ImageTransp


module Graphics.UI.Gtk.ImageView.ImageView
data ImageView
class WidgetClass o => ImageViewClass o

-- | Creates a new image view with default values. The default values are:
--   
--   <ul>
--   <li>black bg : <a>False</a> * fitting : <a>True</a> * image tool : a
--   <a>ImageToolDragger</a> instance * interpolation mode :
--   <a>InterpBilinear</a> * offset : (0, 0) * pixbuf : <a>Nothing</a> *
--   show cursor: <a>True</a> * show frame : <a>True</a> * transp :
--   <a>ImageTranspGrid</a> * zoom : 1.0</li>
--   </ul>
imageViewNew :: IO ImageView

-- | Fills in the rectangle with the current viewport. If pixbuf is
--   <a>Nothing</a>, there is no viewport, rect is left untouched and
--   <a>False</a> is returned. If the view is not allocated, the rectangles
--   coordinates are set to the views offset and its width and height to
--   zero.
--   
--   The current viewport is defined as the rectangle, in zoomspace
--   coordinates as the area of the loaded pixbuf the <a>ImageView</a> is
--   currently showing.
imageViewGetViewport :: ImageViewClass view => view -> IO (Maybe Rectangle)

-- | Get the rectangle in the widget where the pixbuf is painted.
--   
--   For example, if the widgets allocated size is 100, 100 and the pixbufs
--   size is 50, 50 and the zoom factor is 1.0, then the pixbuf will be
--   drawn centered on the widget. rect will then be (25,25)-[50,50].
--   
--   If the view is not allocated, then the rectangle will be set to
--   (0,0)-[0,0] and <a>True</a> is returned.
--   
--   This method is useful when converting from widget to image or zoom
--   space coordinates.
imageViewGetDrawRect :: ImageViewClass view => view -> IO (Maybe Rectangle)

-- | Reads the two colors used to draw transparent parts of images with an
--   alpha channel. Note that if the transp setting of the view is
--   <a>ImageTranspBackground</a> or <a>ImageTranspColor</a>, then both
--   colors will be equal.
imageViewGetCheckColors :: ImageViewClass view => view -> IO (Int, Int)

-- | Convert a rectangle in image space coordinates to widget space
--   coordinates. If the view is not realized, or if it contains no pixbuf,
--   then the conversion was unsuccessful, <a>False</a> is returned and
--   <tt>rectOut</tt> is left unmodified.
--   
--   The size of <tt>rectOut</tt> is rounded up. For example, if the zoom
--   factor is 0.25 and the width of the input rectangle is 2, then its
--   with in widget space coordinates is 0.5 which is rounded up to 1.
--   
--   Note that this function may return a rectangle that is not visible on
--   the widget.
imageViewImageToWidgetRect :: ImageViewClass view => view -> Rectangle -> Rectangle -> IO Bool

-- | Sets the offset of where in the image the <a>ImageView</a> should
--   begin displaying image data.
--   
--   The offset is clamped so that it will never cause the <a>ImageView</a>
--   to display pixels outside the pixbuf. Setting this attribute causes
--   the widget to repaint itself if it is realized.
--   
--   If invalidate is <a>True</a>, the views entire area will be
--   invalidated instead of redrawn immediately. The view is then queued
--   for redraw, which means that additional operations can be performed on
--   it before it is redrawn.
--   
--   The difference can sometimes be important like when you are overlaying
--   data and get flicker or artifacts when setting the offset. If that
--   happens, setting invalidate to <a>True</a> could fix the problem. See
--   the source code to <a>ImageToolSelector</a> for an example.
--   
--   Normally, invalidate should always be <a>False</a> because it is much
--   faster to repaint immedately than invalidating.
imageViewSetOffset :: ImageViewClass view => view -> Double -> Double -> Bool -> IO ()

-- | Sets how the view should draw transparent parts of images with an
--   alpha channel. If transp is <a>ImageTranspColor</a>, the specified
--   color will be used. Otherwise the <tt>transpColor</tt> argument is
--   ignored. If it is <a>ImageTranspBackground</a>, the background color
--   of the widget will be used. If it is <a>ImageTranspGrid</a>, then a
--   grid with light and dark gray boxes will be drawn on the transparent
--   parts.
--   
--   Calling this method causes the widget to immediately repaint. It also
--   causes the <a>pixbufChanged</a> signal to be emitted. This is done so
--   that other widgets (such as <a>ImageNav</a>) will have a chance to
--   render a view of the pixbuf with the new transparency settings.
--   
--   The default values are:
--   
--   <ul>
--   <li>transp : <a>ImageTranspGrid</a> * <tt>transpColor</tt> :
--   0x000000</li>
--   </ul>
imageViewSetTransp :: ImageViewClass view => view -> ImageTransp -> Int -> IO ()

-- | Returns the fitting setting of the view.
imageViewGetFitting :: ImageViewClass view => view -> IO Bool

-- | Sets whether to fit or not. If <a>True</a>, then the view will adapt
--   the zoom so that the whole pixbuf is visible.
--   
--   Setting the fitting causes the widget to immediately repaint itself.
--   
--   Fitting is by default <a>True</a>.
imageViewSetFitting :: ImageViewClass view => view -> Bool -> IO ()

-- | Returns the pixbuf this view shows.
imageViewGetPixbuf :: ImageViewClass view => view -> IO Pixbuf

-- | Sets the pixbuf to display, or <a>Nothing</a> to not display any
--   pixbuf. Normally, <tt>resetFit</tt> should be <a>True</a> which
--   enables fitting. Which means that, initially, the whole pixbuf will be
--   shown.
--   
--   Sometimes, the fit mode should not be reset. For example, if
--   <a>ImageView</a> is showing an animation, it would be bad to reset the
--   fit mode for each new frame. The parameter should then be <a>False</a>
--   which leaves the fit mode of the view untouched.
--   
--   This method should not be used if merely the contents of the pixbuf
--   has changed. See <a>imageViewDamagePixels</a> for that.
--   
--   If <tt>resetFit</tt> is <a>True</a>, the <a>zoomChanged</a> signal is
--   emitted, otherwise not. The <a>pixbufChanged</a> signal is also
--   emitted.
--   
--   The default pixbuf is <a>Nothing</a>.
imageViewSetPixbuf :: ImageViewClass view => view -> Maybe Pixbuf -> Bool -> IO ()

-- | Get the current zoom factor of the view.
imageViewGetZoom :: ImageViewClass view => view -> IO Double

-- | Sets the zoom of the view.
--   
--   Fitting is always disabled after this method has run. The
--   <a>zoomChanged</a> signal is unconditionally emitted.
--   
--   The default value is 1.0.
imageViewSetZoom :: ImageViewClass view => view -> Double -> IO ()

-- | If <a>True</a>, the view uses a black background. If <a>False</a>, the
--   view uses the default (normally gray) background.
--   
--   The default value is <a>False</a>.
imageViewSetBlackBg :: ImageViewClass view => view -> Bool -> IO ()

-- | Returns whether the view renders the widget on a black background or
--   not.
imageViewGetBlackBg :: ImageViewClass view => view -> IO Bool

-- | Sets whether to draw a frame around the image or not. When
--   <a>True</a>, a one pixel wide frame is shown around the image. Setting
--   this attribute causes the widget to immediately repaint itself.
--   
--   The default value is <a>True</a>.
imageViewSetShowFrame :: ImageViewClass view => view -> Bool -> IO ()

-- | Returns whether a one pixel frame is drawn around the pixbuf or not.
imageViewGetShowFrame :: ImageViewClass view => view -> IO Bool

-- | Sets the interpolation mode of how the view. <a>InterpHyper</a> is the
--   slowest, but produces the best results. <a>InterpNearest</a> is the
--   fastest, but provides bad rendering quality. <a>InterpBilinear</a> is
--   a good compromise.
--   
--   Setting the interpolation mode causes the widget to immediately
--   repaint itself.
--   
--   The default interpolation mode is <a>InterpBilinear</a>.
imageViewSetInterpolation :: ImageViewClass view => view -> InterpType -> IO ()

-- | Returns the current interpolation mode of the view.
imageViewGetInterpolation :: ImageViewClass view => view -> IO InterpType

-- | Sets whether to show the mouse cursor when the mouse is over the
--   widget or not. Hiding the cursor is useful when the widget is
--   fullscreened.
--   
--   The default value is <a>True</a>.
imageViewSetShowCursor :: ImageViewClass view => view -> Bool -> IO ()

-- | Returns whether to show the mouse cursor when the mouse is over the
--   widget or not.
imageViewGetShowCursor :: ImageViewClass view => view -> IO Bool

-- | Set the image tool to use. If the new tool is the same as the current
--   tool, then nothing will be done. Otherwise
--   <tt>iimageToolPixbufChanged</tt> is called so that the tool has a
--   chance to generate initial data for the pixbuf.
--   
--   Setting the tool causes the widget to immediately repaint itself.
--   
--   The default image tool is a <a>ImageToolDragger</a> instance. See also
--   <a>IImageTool</a>.
imageViewSetTool :: ImageViewClass view => view -> IImageTool -> IO ()

-- | Gets the image tool <a>ImageView</a> uses for rendering and handling
--   input events.
imageViewGetTool :: ImageViewClass view => view -> IO IImageTool

-- | Zoom in the view one step. Calling this method causes the widget to
--   immediately repaint itself.
imageViewZoomIn :: ImageViewClass view => view -> IO ()

-- | Zoom out the view one step. Calling this method causes the widget to
--   immediately repaint itself.
imageViewZoomOut :: ImageViewClass view => view -> IO ()

-- | Mark the pixels in the rectangle as damaged. That the pixels are
--   damaged, means that they have been modified and that the view must
--   redraw them to ensure that the visible part of the image corresponds
--   to the pixels in that image. Calling this method emits the
--   <a>pixbufChanged</a> signal.
--   
--   This method must be used when modifying the image data:
--   
--   'imageViewDamagePixels (View, &amp;(Gdkrectangle){20, 20, 60, 60})';
--   
--   If the whole pixbuf has been modified then rect should be
--   <a>Nothing</a> to indicate that a total update is needed. | See also
--   <a>imageViewSetPixbuf</a>.
imageViewDamagePixels :: ImageViewClass view => view -> Maybe Rectangle -> IO ()

-- | Returns a string with the format <a>major.minor.micro</a> which
--   denotes the runtime version of <a>ImageView</a> being used.
imageViewLibraryVersion :: IO String

-- | The <a>mouseWheelScroll</a> signal is emitted when the mouse wheel is
--   scrolled on the view and <tt>ControlMask</tt> is not held down.
mouseWheelScroll :: ImageViewClass view => Signal view (ScrollDirection -> IO ())

-- | The <a>pixbufChanged</a> signal is emitted when the pixbuf the image
--   view shows is changed and when its image data is changed. Listening to
--   this signal is useful if you, for example, have a label that displays
--   the width and height of the pixbuf in the view.
pixbufChanged :: ImageViewClass view => Signal view (IO ())

-- | The <a>scroll</a> signal is a keybinding signal emitted when a key is
--   used to scroll the view. The signal should not be used by clients of
--   this library.
scroll :: ImageViewClass view => Signal view (ScrollType -> ScrollType -> IO ())
setFitting :: ImageViewClass view => Signal view (Int -> IO ())
setScrollAdjustments :: ImageViewClass view => Signal view (Adjustment -> Adjustment -> IO ())

-- | The <a>setZoom</a> signal is a keybinding signal emitted when GDK_1,
--   GDK_2 or GDK_3 is pressed on the widget which causes the zoom to be
--   set to 100%, 200% or 300%. The signal should not be used by clients of
--   this library.
setZoom :: ImageViewClass view => Signal view (Double -> IO ())

-- | The <a>zoomChanged</a> signal is emitted when the zoom factor of the
--   view changes. Listening to this signal is useful if, for example, you
--   have a label that displays the zoom factor of the view. Use
--   <a>imageViewGetZoom</a> to retrieve the value.
zoomChanged :: ImageViewClass view => Signal view (IO ())
zoomIn :: ImageViewClass view => Signal view (IO ())
zoomOut :: ImageViewClass view => Signal view (IO ())


module Graphics.UI.Gtk.ImageView.AnimView
data AnimView
class ImageViewClass o => AnimViewClass o
animViewNew :: IO AnimView

-- | Creates a new <a>AnimView</a> with default values. The default values
--   are:
--   
--   <ul>
--   <li>anim : <a>Nothing</a> * <tt>isPlaying</tt> : <a>False</a></li>
--   </ul>
--   
--   Returns the current animation of the view.
animViewGetAnim :: AnimViewClass view => view -> IO PixbufAnimation

-- | Sets the pixbuf animation to play, or <a>Nothing</a> to not play any
--   animation.
--   
--   If the animation is a static image or only has one frame, then the
--   static image will be displayed instead. If more frames are loaded into
--   the animation, then <a>AnimView</a> will automatically animate to
--   those frames.
--   
--   The effect of this method is analoguous to
--   <tt>imageViewSetPixbuf</tt>. Fit mode is reset to
--   <tt>FitSizeIfLarger</tt> so that the whole area of the animation fits
--   in the view. Three signals are emitted, first the <a>ImageView</a>
--   will emit <tt>zoomChanged</tt> and then <tt>pixbufChanged</tt>,
--   second, <a>AnimView</a> itself will emit <tt>animChanged</tt>.
--   
--   The default pixbuf animation is <a>Nothing</a>.
animViewSetAnim :: AnimViewClass view => view -> Maybe PixbufAnimation -> IO ()

-- | Sets whether the animation should play or not. If there is no current
--   animation this method does not have any effect.
animViewSetIsPlaying :: AnimViewClass view => view -> Bool -> IO ()

-- | Returns whether the animation is playing or not. If there is no
--   current animation, this method will always returns <a>False</a>.
animViewGetIsPlaying :: AnimViewClass view => view -> IO Bool

-- | Steps the animation one frame forward. If the animation is playing it
--   will be stopped. Will it wrap around if the animation is at its last
--   frame?
animViewStep :: AnimViewClass view => view -> IO ()

-- | Steps the animation one frame forward. If the animation is playing it
--   will first be stopped. <a>step</a> is a keybinding signal emitted when
--   GDK_j is pressed on the widget and should not be used by clients of
--   this library.
step :: AnimViewClass view => Signal view (IO ())

-- | Stops the animation if it was playing or resumes it, if it was
--   playing. <a>toggleRunning</a> is a keybinding signal emitted when
--   GDK_p is pressed on the widget and should not be used by clients of
--   this library.
toggleRunning :: AnimViewClass view => Signal view (IO ())


module Graphics.UI.Gtk.ImageView.IImageTool
data IImageTool
class GObjectClass o => IImageToolClass o

-- | Indiate to the tool that either a part of, or the whole pixbuf that
--   the image view shows has changed. This method is called by the view
--   whenever its pixbuf or its tool changes. That is, when any of the
--   following methods are used:
--   
--   <ul>
--   <li><tt>imageViewSetPixbuf</tt></li>
--   </ul>
--   
--   If the <tt>resetFit</tt> parameter is <a>True</a>, it means that a new
--   pixbuf has been loaded into the view. rect is a rectangle in image
--   space coordinates that indicates which rectangular region of the
--   pixbufs pixels that is modified. If rect is <a>Nothing</a>, then all
--   of the pixbuf has changed. See also <tt>pixbufChanged</tt>.
iimageToolPixbufChanged :: IImageToolClass tool => tool -> Bool -> Maybe Rectangle -> IO ()


module Graphics.UI.Gtk.ImageView.ImageNav
data ImageNav
class WindowClass o => ImageNavClass o

-- | Creates a new <a>ImageNav</a> for showing thumbnails of the view.
imageNavNew :: ImageViewClass view => view -> IO ImageNav

-- | Returns the downscaled pixbuf of the views pixbuf that this
--   <a>ImageNav</a> shows, or <a>Nothing</a> if that pixbuf has not been
--   created yet.
imageNavGetPixbuf :: ImageNavClass nav => nav -> IO (Maybe Pixbuf)
imageNavGrab :: ImageNavClass nav => nav -> IO ()
imageNavRelease :: ImageNavClass nav => nav -> IO ()

-- | Show the <a>ImageNav</a> centered around the point (<tt>centerX</tt>,
--   <tt>centerY</tt>) and grab mouse and keyboard events. The grab
--   continues until a button release event is received which causes the
--   widget to hide.
imageNavShowAndGrab :: ImageNavClass nav => nav -> Int -> Int -> IO ()


module Graphics.UI.Gtk.ImageView.ImageScrollWin
data ImageScrollWin
class TableClass o => ImageScrollWinClass o

-- | Creates a new <a>ImageScrollWin</a> containing the <a>ImageView</a>.
--   
--   The widget is built using four subwidgets arranged inside a
--   <a>Table</a> with two columns and two rows. Two scrollbars, one
--   navigator button (the decorations) and one <a>ImageView</a>.
--   
--   When the <a>ImageView</a> fits inside the window, the decorations are
--   hidden.
imageScrollWinNew :: ImageViewClass view => view -> IO ImageScrollWin


module Graphics.UI.Gtk.ImageView.ImageToolDragger
data ImageToolDragger
class GObjectClass o => ImageToolDraggerClass o


module Graphics.UI.Gtk.ImageView.ImageToolSelector
data ImageToolSelector
class GObjectClass o => ImageToolSelectorClass o

-- | Creates a new selector tool for the specified view with default
--   values. The default values are:
--   
--   <ul>
--   <li>selection : (0, 0) - [0, 0]</li>
--   </ul>
imageToolSelectorNew :: ImageViewClass view => view -> IO ImageToolSelector

-- | Fills in rect with the current selection rectangle. If either the
--   width or the height of rect is zero, then nothing is selected and the
--   selection should be considered inactive. See <a>selectionChanged</a>
--   for an example.
imageToolSelectorGetSelection :: ImageToolSelectorClass selector => selector -> IO Rectangle

-- | Sets the selection rectangle for the tool. Setting this attribute will
--   cause the widget to immediately repaint itself if its view is
--   realized.
--   
--   This method does nothing under the following circumstances:
--   
--   <ul>
--   <li>If the views pixbuf is <a>Nothing</a>. * If rect is wider or
--   taller than the size of the pixbuf * If rect equals the current
--   selection rectangle.</li>
--   </ul>
--   
--   If the selection falls outside the pixbufs area, its position is moved
--   so that it is within the pixbuf.
--   
--   Calling this method causes the <a>selectionChanged</a> signal to be
--   emitted.
--   
--   The default selection is (0,0) - [0,0].
imageToolSelectorSetSelection :: ImageToolSelectorClass selector => selector -> Rectangle -> IO ()

-- | The <a>selectionChanged</a> signal is emitted when the selection
--   rectangle on the selector is moved or resized. It is inteded to be
--   used by applications that wants to print status information.
selectionChanged :: ImageToolSelectorClass selector => Signal selector (IO ())


module Graphics.UI.Gtk.ImageView
