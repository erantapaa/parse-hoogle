-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | ASCII-fied arrow notation
--   
@package needle
@version 0.1.0.1


-- | This module's main export is <a>parseNeedle</a>, which parses a needle
--   diagram into a <a>NeedleArrow</a>.
module Control.Arrow.Needle.Parse

-- | The datatype representing a generic needle arrow.
data NeedleArrow
Input :: Int -> Int -> NeedleArrow
Through :: (Maybe NeedleArrow) -> Text -> NeedleArrow
Join :: [NeedleArrow] -> NeedleArrow

-- | Parse a string to a needle
parseNeedle :: String -> Either NeedleError NeedleArrow

-- | Errors in parsing.
data NeedleError
ParseError :: String -> NeedleError
ConstructionError :: String -> NeedleError

-- | Present the error.
presentNeedleError :: NeedleError -> String
instance Show NeedleArrow
instance Read NeedleArrow
instance Eq NeedleArrow
instance Show Direction
instance Read Direction
instance Eq Direction
instance Show NeedleElem
instance Read NeedleElem
instance Eq NeedleElem
instance Show NeedleError


-- | This module combines the parsing from
--   <a>Control.Arrow.Needle.Parse</a> with Template Haskell.
module Control.Arrow.Needle.TH

-- | The inline needle quasi-quoter.
--   
--   <pre>
--   {-# LANGUAGE QuasiQuotes #-}
--   
--   exampleArrow :: Num c =&gt; (a,b,c) -&gt; (a,a,b,c,c)
--   exampleArrow = [nd|
--      }===========&gt;
--         \========&gt;
--      }===========&gt;
--      }==={negate}&gt;
--         \========&gt;
--    |]
--   </pre>
nd :: QuasiQuoter

-- | Load a needle from a file.
--   
--   <pre>
--   {-# LANGUAGE TemplateHaskell #-}
--   
--   exampleArrow :: Float -&gt; Float
--   exampleArrow = $(ndFile "example.nd")
--   </pre>
ndFile :: FilePath -> ExpQ


-- | Needle is a domain specific language for ASCII-fied arrow notation.
--   This module enables the use of needle within Haskell by making use of
--   Template Haskell.
--   
--   In needle, data travels along rails. There are three types of rail,
--   and data travels in different directions on each:
--   
--   <ul>
--   <li><i><tt>=</tt></i> left to right</li>
--   <li><i><tt>\</tt></i> down</li>
--   <li><i><tt>/</tt></i> up</li>
--   </ul>
--   
--   Data enters a rail with <tt>}</tt>, and exits with <tt>&gt;</tt>.
--   
--   When rails are joined, their contents are concatenated. When rails are
--   split, their contents are duplicated.
--   
--   An external arrow can be embedded in a rail by enclosing it between a
--   <tt>{</tt> and a <tt>}</tt>.
--   
--   Inputs and outputs of rails can be asigned labels with a <tt>:</tt>.
--   
--   Rails can cross one another, if one of the rails has gone
--   'underground' by entering a 'tunnel'. A tunnel entrance is specified
--   by a <tt>)</tt>, and a tunnel exit is specified by a <tt>(</tt>.
--   
--   Most questions should be answered by a short example:
--   
--   <pre>
--   import Control.Arrow.Needle
--   
--   nTest :: (Int, Int, Int) -&gt; (Int, (Int, Int, Int))
--   nTest = [nd|
--                           aLabel:==={div 2}===\
--       }====\                                  \
--            {uncurry (+)}==\=================) \ (==&gt;
--       }====/              \                   \
--                           \                   \=={nTriple}=&gt;
--                           \               
--                        }=={uncurry (-)}====:aLabel
--   |]
--   
--   nTriple = [nd|
--       }==\==&gt;
--          \==&gt;
--          \==&gt;
--   |]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; nTest (3,2,1)
--   (5,(-1,-1,-1))
--   </pre>
module Control.Arrow.Needle

-- | The inline needle quasi-quoter.
--   
--   <pre>
--   {-# LANGUAGE QuasiQuotes #-}
--   
--   exampleArrow :: Num c =&gt; (a,b,c) -&gt; (a,a,b,c,c)
--   exampleArrow = [nd|
--      }===========&gt;
--         \========&gt;
--      }===========&gt;
--      }==={negate}&gt;
--         \========&gt;
--    |]
--   </pre>
nd :: QuasiQuoter

-- | Load a needle from a file.
--   
--   <pre>
--   {-# LANGUAGE TemplateHaskell #-}
--   
--   exampleArrow :: Float -&gt; Float
--   exampleArrow = $(ndFile "example.nd")
--   </pre>
ndFile :: FilePath -> ExpQ
