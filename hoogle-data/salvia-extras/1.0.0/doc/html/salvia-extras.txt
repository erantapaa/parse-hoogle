-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Collection of non-fundamental handlers for the Salvia web server.
--   
--   Collection of non-fundamental handlers for the Salvia web server.
@package salvia-extras
@version 1.0.0

module Network.Salvia.Impl.Cgi
newtype CgiHandler p a
CgiHandler :: (Handler p a) -> CgiHandler p a
hCgiEnv :: (FlushM Response m, MonadIO m, QueueM m, HttpM' m, HandleM m) => m a -> m ()
runCgiHandler :: CgiHandler p a -> Context p -> IO (a, Context p)
start :: (Show p) => String -> CgiHandler p () -> p -> IO ()
instance BodyM Request (CgiHandler p)
instance Alternative (CgiHandler p)
instance Applicative (CgiHandler p)
instance ClientAddressM (CgiHandler p)
instance FlushM Request (CgiHandler p)
instance FlushM Response (CgiHandler p)
instance Functor (CgiHandler p)
instance HandleM (CgiHandler p)
instance HttpM Request (CgiHandler p)
instance HttpM Response (CgiHandler p)
instance Monad (CgiHandler p)
instance MonadIO (CgiHandler p)
instance MonadPlus (CgiHandler p)
instance (Monoid a) => Monoid (CgiHandler p a)
instance HandleQueueM (CgiHandler p)
instance QueueM (CgiHandler p)
instance RawHttpM Request (CgiHandler p)
instance RawHttpM Response (CgiHandler p)
instance SendM (CgiHandler p)
instance ForkM IO (CgiHandler p)
instance ServerAddressM (CgiHandler p)
instance ServerM (CgiHandler p)

module Network.Salvia.Impl.C10k
newtype C10kHandler p a
C10kHandler :: (Handler p a) -> C10kHandler p a
runC10kHandler :: C10kHandler p a -> Context p -> IO (a, Context p)
start :: String -> String -> C10kConfig -> C10kHandler p () -> p -> IO ()
instance BodyM Request (C10kHandler p)
instance Alternative (C10kHandler p)
instance Applicative (C10kHandler p)
instance BodyM Response (C10kHandler p)
instance ClientAddressM (C10kHandler p)
instance FlushM Request (C10kHandler p)
instance FlushM Response (C10kHandler p)
instance ForkM IO (C10kHandler p)
instance Functor (C10kHandler p)
instance HandleM (C10kHandler p)
instance HttpM Request (C10kHandler p)
instance HttpM Response (C10kHandler p)
instance Monad (C10kHandler p)
instance MonadIO (C10kHandler p)
instance MonadPlus (C10kHandler p)
instance (Monoid a) => Monoid (C10kHandler p a)
instance QueueM (C10kHandler p)
instance RawHttpM Request (C10kHandler p)
instance RawHttpM Response (C10kHandler p)
instance SendM (C10kHandler p)
instance ServerAddressM (C10kHandler p)
instance ServerM (C10kHandler p)
instance SocketM (C10kHandler p)

module Network.Salvia.Handler.StringTemplate
hStringTemplate :: (ToSElem a, MonadIO m, HttpM Response m, SendM m) => FilePath -> [(String, a)] -> m ()

module Network.Salvia.Handler.FileStore
hFileStore :: (MonadIO m, BodyM Request m, HttpM' m, SendM m) => FileStore -> Author -> FilePath -> m ()
hFileStoreFile :: (MonadIO m, BodyM Request m, HttpM' m, SendM m) => FileStore -> Author -> FilePath -> m ()
hFileStoreDirectory :: (MonadIO m, BodyM Request m, HttpM' m, SendM m) => FileStore -> FilePath -> m ()
instance (MonadIO m, BodyM Request m, HttpM' m, SendM m) => F m

module Network.Salvia.Handler.SendFile
hSendFileResource :: (MonadIO m, HttpM Response m, SendM m, SocketQueueM m) => FilePath -> m ()

module Network.Salvia.Handler.HsColour
hHighlightHaskell :: (HttpM Request m) => m a -> m a -> m a
hHsColour :: (SendM m, HttpM Response m, MonadIO m) => FilePath -> m ()

-- | Left means direct inclusion of stylesheet, right means link to
--   external stylesheet.
hHsColourCustomStyle :: (SendM m, HttpM Response m, MonadIO m) => Either String String -> FilePath -> m ()
defaultStyleSheet :: String

module Network.Salvia.Handler.ColorLog
newtype Counter
Counter :: Integer -> Counter
unCounter :: Counter -> Integer

-- | This handler simply increases the request counter variable.
hCounter :: (PayloadM p Counter m) => m Counter

-- | A simple logger that prints a summery of the request information to
--   the specified file handle.
hColorLog :: (AddressM' m, MonadIO m, HttpM' m) => Handle -> m ()

-- | Like <tt>hLog</tt> but also prints the request count since server
--   startup.
hColorLogWithCounter :: (PayloadM p Counter m, AddressM' m, MonadIO m, HttpM' m) => Handle -> m ()

module Network.Salvia.Handler.CleverCSS
hFilterCSS :: (MonadIO m, HttpM' m, SendM m, Alternative m) => m () -> m () -> m ()
hCleverCSS :: (MonadIO m, BodyM Request m, HttpM' m, SendM m) => m ()
hParametrizedCleverCSS :: (MonadIO m, HttpM' m, SendM m) => Parameters -> m ()

module Network.Salvia.Handler.ExtendedFileSystem
hExtendedFileSystemSendFile :: (MonadIO m, HttpM' m, SocketQueueM m, SendM m, BodyM Request m, Alternative m) => String -> m ()
hExtendedFileSystem :: (MonadIO m, HttpM' m, SendM m, BodyM Request m, Alternative m) => String -> m ()
