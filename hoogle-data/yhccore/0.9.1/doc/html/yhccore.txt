-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Yhc's Internal Core language.
--   
--   A minimal Core language to which Haskell can be reduced, implemented
--   in the Yhc compiler.
@package yhccore
@version 0.9.1

module Yhc.Core.Internal.Play
class Play a
getChildren :: (Play a) => a -> [a]
setChildren :: (Play a) => a -> [a] -> a
allChildren :: (Play a) => a -> [a]
mapUnder :: (Play a) => (a -> a) -> a -> a
mapUnderM :: (Monad m, Play a) => (a -> m a) -> a -> m a
mapOver :: (Play a) => (a -> a) -> a -> a


-- | John Hughes's and Simon Peyton Jones's Pretty Printer Combinators
--   
--   Based on <i>The Design of a Pretty-printing Library</i> in Advanced
--   Functional Programming, Johan Jeuring and Erik Meijer (eds), LNCS 925
--   <a>http://www.cs.chalmers.se/~rjmh/Papers/pretty.ps</a>
--   
--   Heavily modified by Simon Peyton Jones, Dec 96
module Yhc.Core.Internal.HughesPJ

-- | The abstract type of documents. The <a>Show</a> instance is equivalent
--   to using <a>render</a>.
data Doc

-- | A document of height and width 1, containing a literal character.
char :: Char -> Doc

-- | A document of height 1 containing a literal string. <a>text</a>
--   satisfies the following laws:
--   
--   <ul>
--   <li><pre><a>text</a> s <a>&lt;&gt;</a> <a>text</a> t = <a>text</a>
--   (s<a>++</a>t)</pre></li>
--   <li><tt><a>text</a> "" <a>&lt;&gt;</a> x = x</tt>, if <tt>x</tt>
--   non-empty</li>
--   </ul>
--   
--   The side condition on the last law is necessary because
--   <tt><a>text</a> ""</tt> has height 1, while <a>empty</a> has no
--   height.
text :: String -> Doc

-- | An obsolete function, now identical to <a>text</a>.
ptext :: String -> Doc

-- | Some text, but without any width. Use for non-printing text such as a
--   HTML or Latex tags
zeroText :: String -> Doc

-- | <pre>
--   int n = text (show n)
--   </pre>
int :: Int -> Doc

-- | <pre>
--   integer n = text (show n)
--   </pre>
integer :: Integer -> Doc

-- | <pre>
--   float n = text (show n)
--   </pre>
float :: Float -> Doc

-- | <pre>
--   double n = text (show n)
--   </pre>
double :: Double -> Doc

-- | <pre>
--   rational n = text (show n)
--   </pre>
rational :: Rational -> Doc

-- | A ';' character
semi :: Doc

-- | A ',' character
comma :: Doc

-- | A <tt>:</tt> character
colon :: Doc

-- | A space character
space :: Doc

-- | A '=' character
equals :: Doc

-- | A '(' character
lparen :: Doc

-- | A ')' character
rparen :: Doc

-- | A '[' character
lbrack :: Doc

-- | A ']' character
rbrack :: Doc

-- | A '{' character
lbrace :: Doc

-- | A '}' character
rbrace :: Doc

-- | Wrap document in <tt>(...)</tt>
parens :: Doc -> Doc

-- | Wrap document in <tt>[...]</tt>
brackets :: Doc -> Doc

-- | Wrap document in <tt>{...}</tt>
braces :: Doc -> Doc

-- | Wrap document in <tt>'...'</tt>
quotes :: Doc -> Doc

-- | Wrap document in <tt>"..."</tt>
doubleQuotes :: Doc -> Doc

-- | The empty document, with no height and no width. <a>empty</a> is the
--   identity for <a>&lt;&gt;</a>, <a>&lt;+&gt;</a>, <a>$$</a> and
--   <a>$+$</a>, and anywhere in the argument list for <a>sep</a>,
--   <a>hcat</a>, <a>hsep</a>, <a>vcat</a>, <a>fcat</a> etc.
empty :: Doc

-- | Beside. <a>&lt;&gt;</a> is associative, with identity <a>empty</a>.
(<>) :: Doc -> Doc -> Doc

-- | Beside, separated by space, unless one of the arguments is
--   <a>empty</a>. <a>&lt;+&gt;</a> is associative, with identity
--   <a>empty</a>.
(<+>) :: Doc -> Doc -> Doc

-- | List version of <a>&lt;&gt;</a>.
hcat :: [Doc] -> Doc

-- | List version of <a>&lt;+&gt;</a>.
hsep :: [Doc] -> Doc

-- | Above, except that if the last line of the first argument stops at
--   least one position before the first line of the second begins, these
--   two lines are overlapped. For example:
--   
--   <pre>
--   text "hi" $$ nest 5 (text "there")
--   </pre>
--   
--   lays out as
--   
--   <pre>
--   hi   there
--   </pre>
--   
--   rather than
--   
--   <pre>
--   hi
--        there
--   </pre>
--   
--   <a>$$</a> is associative, with identity <a>empty</a>, and also
--   satisfies
--   
--   <ul>
--   <li><tt>(x <a>$$</a> y) <a>&lt;&gt;</a> z = x <a>$$</a> (y
--   <a>&lt;&gt;</a> z)</tt>, if <tt>y</tt> non-empty.</li>
--   </ul>
($$) :: Doc -> Doc -> Doc

-- | Above, with no overlapping. <a>$+$</a> is associative, with identity
--   <a>empty</a>.
($+$) :: Doc -> Doc -> Doc

-- | List version of <a>$$</a>.
vcat :: [Doc] -> Doc

-- | Either <a>hsep</a> or <a>vcat</a>.
sep :: [Doc] -> Doc

-- | Either <a>hcat</a> or <a>vcat</a>.
cat :: [Doc] -> Doc

-- | "Paragraph fill" version of <a>sep</a>.
fsep :: [Doc] -> Doc

-- | "Paragraph fill" version of <a>cat</a>.
fcat :: [Doc] -> Doc

-- | Nest (or indent) a document by a given number of positions (which may
--   also be negative). <a>nest</a> satisfies the laws:
--   
--   <ul>
--   <li><pre><a>nest</a> 0 x = x</pre></li>
--   <li><pre><a>nest</a> k (<a>nest</a> k' x) = <a>nest</a> (k+k')
--   x</pre></li>
--   <li><pre><a>nest</a> k (x <a>&lt;&gt;</a> y) = <a>nest</a> k z
--   <a>&lt;&gt;</a> <a>nest</a> k y</pre></li>
--   <li><pre><a>nest</a> k (x <a>$$</a> y) = <a>nest</a> k x <a>$$</a>
--   <a>nest</a> k y</pre></li>
--   <li><pre><a>nest</a> k <a>empty</a> = <a>empty</a></pre></li>
--   <li><tt>x <a>&lt;&gt;</a> <a>nest</a> k y = x <a>&lt;&gt;</a> y</tt>,
--   if <tt>x</tt> non-empty</li>
--   </ul>
--   
--   The side condition on the last law is needed because <a>empty</a> is a
--   left identity for <a>&lt;&gt;</a>.
nest :: Int -> Doc -> Doc

-- | <pre>
--   hang d1 n d2 = sep [d1, nest n d2]
--   </pre>
hang :: Doc -> Int -> Doc -> Doc

-- | <pre>
--   punctuate p [d1, ... dn] = [d1 &lt;&gt; p, d2 &lt;&gt; p, ... dn-1 &lt;&gt; p, dn]
--   </pre>
punctuate :: Doc -> [Doc] -> [Doc]

-- | Returns <a>True</a> if the document is empty
isEmpty :: Doc -> Bool

-- | Renders the document as a string using the default <a>style</a>.
render :: Doc -> String

-- | A rendering style.
data Style
Style :: Mode -> Int -> Float -> Style

-- | The rendering mode
mode :: Style -> Mode

-- | Length of line, in chars
lineLength :: Style -> Int

-- | Ratio of ribbon length to line length
ribbonsPerLine :: Style -> Float

-- | The default style (<tt>mode=PageMode, lineLength=100,
--   ribbonsPerLine=1.5</tt>).
style :: Style

-- | Render the document as a string using a specified style.
renderStyle :: Style -> Doc -> String

-- | The general rendering interface.
fullRender :: Mode -> Int -> Float -> (TextDetails -> a -> a) -> a -> Doc -> a

-- | Rendering mode.
data Mode

-- | Normal
PageMode :: Mode

-- | With zig-zag cuts
ZigZagMode :: Mode

-- | No indentation, infinitely long lines
LeftMode :: Mode

-- | All on one line
OneLineMode :: Mode
data TextDetails
Chr :: Char -> TextDetails
Str :: String -> TextDetails
PStr :: String -> TextDetails
instance Show Doc


-- | This module implements unique ID's in Yhc.Core.
--   
--   The intention is that a program can use this interface to a unique ID
--   quite cheaply. Or an existing state monad can be reused.
module Yhc.Core.UniqueId
class UniqueId a
getId :: (UniqueId a) => a -> Int
putId :: (UniqueId a) => Int -> a -> a
class (Monad m) => UniqueIdM m
getIdM :: (UniqueIdM m) => m Int
putIdM :: (UniqueIdM m) => Int -> m ()
nextId :: (UniqueIdM m) => m Int
instance (UniqueId a) => UniqueIdM (State a)
instance UniqueId Int

module Yhc.Core.Internal.General
ordNub :: (Ord a) => [a] -> [a]
disjoint :: (Eq a) => [a] -> [a] -> Bool

module Yhc.Core.Internal.Binary
class Binary a
put_ :: (Binary a) => Handle -> a -> IO ()
get :: (Binary a) => Handle -> IO a
writeBinary :: (Binary a) => FilePath -> a -> IO ()
readBinary :: (Binary a) => FilePath -> IO a
putByte :: Handle -> Int -> IO ()
getByte :: Handle -> IO Int
showPut :: (Show a) => Handle -> a -> IO ()
showGet :: (Read a) => Handle -> IO a
instance Binary Double
instance Binary Float
instance Binary Integer
instance Binary Int
instance Binary Char
instance Binary Bool
instance (Binary a, Binary b, Binary c) => Binary (a, b, c)
instance (Binary a, Binary b) => Binary (a, b)
instance (Binary a) => Binary (Maybe a)
instance (Binary a) => Binary [a]

module Yhc.Core.Type
type CoreVarName = String
type CoreFuncName = String
type CoreDataName = String
type CoreCtorName = String
type CoreFieldName = String
data Core
Core :: String -> [String] -> [CoreData] -> [CoreFunc] -> Core
coreName :: Core -> String
coreImports :: Core -> [String]
coreDatas :: Core -> [CoreData]
coreFuncs :: Core -> [CoreFunc]
data CoreData
CoreData :: CoreDataName -> [String] -> [CoreCtor] -> CoreData
coreDataName :: CoreData -> CoreDataName
coreDataTypes :: CoreData -> [String]
coreDataCtors :: CoreData -> [CoreCtor]
data CoreCtor
CoreCtor :: CoreCtorName -> [(String, Maybe CoreFieldName)] -> CoreCtor
coreCtorName :: CoreCtor -> CoreCtorName
coreCtorFields :: CoreCtor -> [(String, Maybe CoreFieldName)]
data CoreFunc
CoreFunc :: CoreFuncName -> [CoreVarName] -> CoreExpr -> CoreFunc
coreFuncName :: CoreFunc -> CoreFuncName
coreFuncArgs :: CoreFunc -> [CoreVarName]
coreFuncBody :: CoreFunc -> CoreExpr
CorePrim :: CoreFuncName -> Int -> String -> String -> Bool -> [String] -> CoreFunc
coreFuncName :: CoreFunc -> CoreFuncName
corePrimArity :: CoreFunc -> Int
corePrimExternal :: CoreFunc -> String
corePrimConv :: CoreFunc -> String
corePrimImport :: CoreFunc -> Bool
corePrimTypes :: CoreFunc -> [String]
isCorePrim :: CoreFunc -> Bool
isCoreFunc :: CoreFunc -> Bool
coreFuncArity :: CoreFunc -> Int
coreFuncArgList :: CoreFunc -> [CoreVarName]
type CoreFuncMap = Map CoreFuncName CoreFunc
data CoreExpr
CoreCon :: CoreCtorName -> CoreExpr
CoreVar :: CoreVarName -> CoreExpr
CoreFun :: CoreFuncName -> CoreExpr
CoreApp :: CoreExpr -> [CoreExpr] -> CoreExpr
CoreLam :: [CoreVarName] -> CoreExpr -> CoreExpr
CoreCase :: CoreExpr -> [(CorePat, CoreExpr)] -> CoreExpr
CoreLet :: [(CoreVarName, CoreExpr)] -> CoreExpr -> CoreExpr
CorePos :: String -> CoreExpr -> CoreExpr
CoreLit :: CoreLit -> CoreExpr
data CoreLit
CoreInt :: Int -> CoreLit
CoreInteger :: Integer -> CoreLit
CoreChr :: Char -> CoreLit
CoreStr :: String -> CoreLit
CoreFloat :: Float -> CoreLit
CoreDouble :: Double -> CoreLit
data CorePat
PatCon :: CoreCtorName -> [CoreVarName] -> CorePat
patCon :: CorePat -> CoreCtorName
patVars :: CorePat -> [CoreVarName]
PatLit :: CoreLit -> CorePat
patLit :: CorePat -> CoreLit
PatDefault :: CorePat
coreApp :: CoreExpr -> [CoreExpr] -> CoreExpr
coreLet :: [(CoreVarName, CoreExpr)] -> CoreExpr -> CoreExpr
coreLam :: [CoreVarName] -> CoreExpr -> CoreExpr
fromCoreLit :: CoreExpr -> CoreLit
fromCoreVar :: CoreExpr -> String
fromCoreFun :: CoreExpr -> String
fromCoreCon :: CoreExpr -> String
fromCoreApp :: CoreExpr -> (CoreExpr, [CoreExpr])
fromCoreLet :: CoreExpr -> ([(CoreVarName, CoreExpr)], CoreExpr)
fromCoreLam :: CoreExpr -> ([CoreVarName], CoreExpr)
isCoreVar :: CoreExpr -> Bool
isCoreFun :: CoreExpr -> Bool
isCoreLam :: CoreExpr -> Bool
isCoreCon :: CoreExpr -> Bool
isCoreLet :: CoreExpr -> Bool
isCoreCase :: CoreExpr -> Bool
isCoreLit :: CoreExpr -> Bool
isCorePos :: CoreExpr -> Bool
isCoreChr :: CoreLit -> Bool
isCoreInt :: CoreLit -> Bool
isCoreStr :: CoreLit -> Bool
isPatLit :: CorePat -> Bool
isPatCon :: CorePat -> Bool
isPatDefault :: CorePat -> Bool
patToExpr :: CorePat -> CoreExpr
exprToPat :: CoreExpr -> CorePat

-- | Returns true for constants that take a small, bounded amount of space
isCoreLitSmall :: CoreLit -> Bool
remCorePos :: CoreExpr -> CoreExpr

-- | drop a module from a Core declaration
dropModule :: String -> String

-- | Get a function from a Core type crashes if the function does not exist
coreFunc :: Core -> CoreFuncName -> CoreFunc

-- | A non-crashing version of <a>coreFunc</a> returns Nothing if the
--   function does not exist. If multiple functions with the same name
--   exist, this crashes.
coreFuncMaybe :: Core -> CoreFuncName -> Maybe CoreFunc

-- | Get a <a>CoreData</a> from a field (the snd element of
--   <a>coreCtorFields</a>)
coreFieldDataMaybe :: Core -> CoreFieldName -> Maybe CoreData

-- | Get a <a>CoreData</a> from a ctor name
coreCtorDataMaybe :: Core -> CoreCtorName -> Maybe CoreData

-- | Get a <a>CoreCtor</a> from a field name
coreFieldCtorMaybe :: Core -> CoreFieldName -> Maybe CoreCtor
coreFieldData :: Core -> CoreFieldName -> CoreData
coreCtorData :: Core -> CoreCtorName -> CoreData
coreFieldCtor :: Core -> CoreFieldName -> CoreCtor
coreCtor :: Core -> CoreCtorName -> CoreCtor
coreData :: Core -> CoreDataName -> CoreData

-- | Take a function that operates on bodies, and apply it to a program
applyBodyCore :: (CoreExpr -> CoreExpr) -> (Core -> Core)

-- | Take a function that operates on bodies, and apply it to a function
applyBodyFunc :: (CoreExpr -> CoreExpr) -> (CoreFunc -> CoreFunc)

-- | Take a function that operates on functions, and apply it to a program
applyFuncCore :: (CoreFunc -> CoreFunc) -> (Core -> Core)
applyCtorCore :: (CoreCtor -> CoreCtor) -> (Core -> Core)
applyDataCore :: (CoreData -> CoreData) -> (Core -> Core)
applyCtorData :: (CoreCtor -> CoreCtor) -> (CoreData -> CoreData)
applyBodyCoreM :: (Monad m) => (CoreExpr -> m CoreExpr) -> Core -> m Core
applyFuncCoreM :: (Monad m) => (CoreFunc -> m CoreFunc) -> Core -> m Core

-- | Split up a coreDataType into lexical elements None of the result
--   elements will be space, or blank Some may be <a>(</a>, <a>)</a> or
--   <a>!</a>
coreDataTypeSplit :: String -> [String]

-- | can pretty print much nicer, just something that works for now
coreDataTypeJoin :: [String] -> String
fromCoreFuncMap :: Core -> CoreFuncMap -> Core
toCoreFuncMap :: Core -> CoreFuncMap
coreFuncMap :: CoreFuncMap -> CoreFuncName -> CoreFunc
coreFuncMapMaybe :: CoreFuncMap -> CoreFuncName -> Maybe CoreFunc
instance Ord CorePat
instance Eq CorePat
instance Show CorePat
instance Ord CoreLit
instance Eq CoreLit
instance Show CoreLit
instance Ord CoreExpr
instance Eq CoreExpr
instance Eq CoreFunc
instance Ord CoreFunc
instance Eq CoreCtor
instance Ord CoreCtor
instance Eq CoreData
instance Ord CoreData
instance Eq Core
instance Ord Core

module Yhc.Core.Uniplate
universeExprVar :: (UniplateExpr a) => a -> [String]
class UniplateExpr a
uniplateExpr :: (UniplateExpr a) => BiplateType a CoreExpr
instance Uniplate CoreExpr
instance UniplateExpr CoreExpr
instance UniplateExpr CoreFunc
instance UniplateExpr Core
instance (UniplateExpr a) => UniplateExpr [a]


-- | This module implements unique names in Yhc.Core.
--   
--   Given a name, it can be dividied into [rest][digits]. The digits form
--   a number (0 for no digits).
--   
--   Given a set of names, they must all represent unique numbers.
module Yhc.Core.UniqueName
uniqueNamesNext :: [String] -> Int

-- | Split a name into a prefix and a unique id. 0 means no trailing
--   number.
uniqueSplit :: String -> (String, Int)

-- | Given a name, and a unique id, join them together. Replaces any
--   existing id.
uniqueJoin :: String -> Int -> String
uniqueFuncsNext :: Core -> Int

-- | A more advanced combinator to capture the pattern of splitting one
--   function into many (i.e. recursive let's, lambda lifting)
--   
--   Needs rank-2 types to do properly
uniqueFuncsSplit :: ((FuncsSplitM CoreFuncName) -> (CoreFunc -> FuncsSplitM ()) -> CoreExpr -> FuncsSplitM CoreExpr) -> Core -> Core

-- | Rename functions so they use consecutive numbers starting at 2, to aid
--   human understanding
uniqueFuncsRename :: Core -> Core

module Yhc.Core.Play

-- | All the variables in a CoreExpr
allCoreVar :: CoreExpr -> [String]
class PlayCore a
getChildrenCore :: (PlayCore a) => a -> [CoreExpr]
setChildrenCore :: (PlayCore a) => a -> [CoreExpr] -> a
allCore :: (PlayCore a) => a -> [CoreExpr]
mapOverCore :: (PlayCore a) => (CoreExpr -> CoreExpr) -> a -> a
mapUnderCore :: (PlayCore a) => (CoreExpr -> CoreExpr) -> a -> a
mapUnderCoreM :: (PlayCore a, Monad m) => (CoreExpr -> m CoreExpr) -> a -> m a
instance PlayCore Core
instance PlayCore CoreData
instance PlayCore CoreFunc
instance (PlayCore a) => PlayCore [a]
instance PlayCore CoreExpr
instance Play CoreExpr

module Yhc.Core.Binary
instance Binary CorePat
instance Binary CoreLit
instance Binary CoreExpr
instance Binary CoreFunc
instance Binary CoreCtor
instance Binary CoreData
instance Binary Core


-- | In: x -&gt; y x
--   
--   x is bound
--   
--   y is free
module Yhc.Core.FreeVar3

-- | Which variables are mentioned in an expression
collectAllVars :: CoreExpr -> [CoreVarName]

-- | Which variables are introduced at any point, i.e. LHS of a case
--   alternative, or by a let
collectBoundVars :: CoreExpr -> [CoreVarName]

-- | Which variables are in the used in an expression before being defined.
--   No variable will occur more than once
collectFreeVars :: CoreExpr -> [CoreVarName]

-- | Count the number of uses of a free variable. If a variable is used in
--   different branches of a case, it is only considered to be the maximum
--   of these two branches.
countFreeVar :: CoreVarName -> CoreExpr -> Int

-- | Get the variables that are defined to one-level depth and a function
--   to replace them
uniplateBoundVars :: CoreExpr -> ([CoreVarName], [CoreVarName] -> CoreExpr)

-- | Replace all free occurances of variables with a new expression
replaceFreeVars :: [(CoreVarName, CoreExpr)] -> CoreExpr -> CoreExpr
replaceFreeVarsUnique :: (UniqueIdM m) => [(CoreVarName, CoreExpr)] -> CoreExpr -> m CoreExpr
freeVars :: Char -> [String]
getVar :: (UniqueIdM m) => m CoreVarName
getVars :: (UniqueIdM m) => Int -> m [CoreVarName]
duplicateExpr :: (UniqueIdM m) => CoreExpr -> m CoreExpr

-- | Check that the free variables in the second expression are also in the
--   first one. It usually indicates an error to introduce new free
--   variables in transformation.
--   
--   Return True for safe, False for probably buggy.
checkFreeVar :: CoreExpr -> CoreExpr -> Bool

-- | Make a whole Core program have unique free variables.
uniqueBoundVarsCore :: (UniqueIdM m) => Core -> m Core

-- | Make a whole function have unique free variables
uniqueBoundVarsFunc :: (UniqueIdM m) => CoreFunc -> m CoreFunc

-- | Take care: If v123 is a free variable, then make sure getVar starts
--   above that
uniqueBoundVars :: (UniqueIdM m) => CoreExpr -> m CoreExpr


-- | In: x -&gt; y x
--   
--   x is bound
--   
--   y is free
module Yhc.Core.FreeVar

-- | Which variables are mentioned in an expression
collectAllVars :: CoreExpr -> [CoreVarName]

-- | Which variables are introduced at any point, i.e. LHS of a case
--   alternative, or by a let
collectBoundVars :: CoreExpr -> [CoreVarName]

-- | Which variables are in the used in an expression before being defined.
--   No variable will occur more than once
collectFreeVars :: CoreExpr -> [CoreVarName]

-- | Count the number of uses of a free variable. If a variable is used in
--   different branches of a case, it is only considered to be the maximum
--   of these two branches.
countFreeVar :: CoreVarName -> CoreExpr -> Int

-- | Replace all free occurances of variables with a new expression
replaceFreeVars :: [(CoreVarName, CoreExpr)] -> CoreExpr -> CoreExpr

-- | Given a prefix, generate a stream of variables Each will be unique in
--   the series
variableSupply :: Char -> [String]

-- | Just <tt>uniqueFreeVarsWith</tt>, but with a default set of variables
uniqueBoundVars :: CoreExpr -> CoreExpr

-- | Replace all variables which are locally defined with new names from
--   the given list. Raises an error if not enough free variables are
--   supplied
--   
--   If any in the new list clashes with a name in <a>collectFreeVars</a>
--   this will return a program with different semantics!
--   
--   Property: collectFreeVars (uniqueFreeVarsWith newvars x)
--   <tt>subset</tt> newvars
uniqueBoundVarsWith :: [String] -> CoreExpr -> CoreExpr

-- | Just <tt>uniqueFreeVarsWith</tt>, but with a certain set excluded
uniqueBoundVarsWithout :: [String] -> CoreExpr -> CoreExpr

-- | Make a whole Core program have unique free variables. Between
--   functions, they may share variables
uniqueBoundVarsCore :: Core -> Core

-- | Make a whole function have unique free variables
uniqueBoundVarsFunc :: CoreFunc -> CoreFunc


-- | In: x -&gt; y x
--   
--   x is bound
--   
--   y is free
module Yhc.Core.FreeVar2
data FreeVar a
runFreeVars :: FreeVar a -> a
freeVars :: Char -> [String]
putVars :: [String] -> FreeVar ()
getVars :: FreeVar [String]
getVar :: FreeVar String
deleteVars :: [String] -> FreeVar ()

-- | Which variables are mentioned in an expression
collectAllVars :: CoreExpr -> [CoreVarName]

-- | Which variables are introduced at any point, i.e. LHS of a case
--   alternative, or by a let
collectBoundVars :: CoreExpr -> [CoreVarName]

-- | Which variables are in the used in an expression before being defined.
--   No variable will occur more than once
collectFreeVars :: CoreExpr -> [CoreVarName]

-- | Count the number of uses of a free variable. If a variable is used in
--   different branches of a case, it is only considered to be the maximum
--   of these two branches.
countFreeVar :: CoreVarName -> CoreExpr -> Int

-- | Replace all free occurances of variables with a new expression
replaceFreeVars :: [(CoreVarName, CoreExpr)] -> CoreExpr -> CoreExpr

-- | Make a whole Core program have unique free variables.
uniqueBoundVarsCore :: Core -> FreeVar Core

-- | Make a whole function have unique free variables
uniqueBoundVarsFunc :: CoreFunc -> FreeVar CoreFunc

-- | Replace all variables which are locally defined with new names from
--   the given list. Raises an error if not enough free variables are
--   supplied
--   
--   If any in the new list clashes with a name in <a>collectFreeVars</a>
--   this will return a program with different semantics!
--   
--   Property: collectFreeVars (uniqueFreeVarsWith newvars x)
--   <tt>subset</tt> newvars
uniqueBoundVars :: CoreExpr -> FreeVar CoreExpr
instance Monad FreeVar

module Yhc.Core.Invariant.LambdaLift
coreLambdaLift :: Core -> Core

module Yhc.Core.Simplify
coreSimplify :: (UniplateExpr a) => a -> a

-- | Simplify a single Core Expr.
--   
--   Performs NO inlining, guaranteed to run in same or better space and
--   time. May increase code size.
--   
--   Bugs lurk here, with inadvertant free variable capture. Move to a
--   proper free variable monad and a guarantee of uniqueness
coreSimplifyExpr :: CoreExpr -> CoreExpr

-- | Apply the Case (CoreCon ..) rule This rule has a serious sharing bug
--   (doh!)
coreSimplifyCaseCon :: CoreExpr -> CoreExpr

-- | Apply the Case (Case ..) rule
coreSimplifyCaseCase :: CoreExpr -> CoreExpr

-- | Apply the Case (Let ..) rule
coreSimplifyCaseLet :: CoreExpr -> CoreExpr

-- | Precondition: All variables must be unique
--   
--   The following patterns must not occur:
--   
--   CoreApp _ [] CoreLet [] _ CoreLam [] _ CorePos _ _
--   
--   CoreCase on _ =&gt; on <a>notElem</a> {CoreCon _, CoreApp (CoreCon _)
--   _, CoreLet _ _, CoreCase _ _} CoreApp x _ =&gt; x <a>notElem</a>
--   {CoreApp _ _, CoreLet _ _, CoreCase _ _, CoreLam _ _} CoreLet bind _
--   =&gt; all (map snd bind) <a>notElem</a> {CoreLet _ _, CoreVar _}
--   
--   The following should be applied if possible (and not breaking
--   sharing):
--   
--   CoreLet bind x =&gt; replaceFreeVars bind x CoreLet (CoreCase x alts)
--   =&gt; CoreCase x (CoreLet inside each alt)
coreSimplifyExprUnique :: (UniqueIdM m) => CoreExpr -> m CoreExpr

-- | Sismplify in an extensible manner.
--   
--   <pre>
--   myfunc retransform
--   </pre>
--   
--   You should invoke retransform on all constructors you create.
coreSimplifyExprUniqueExt :: (UniqueIdM m) => ((CoreExpr -> m CoreExpr) -> (CoreExpr -> m CoreExpr)) -> CoreExpr -> m CoreExpr


-- | ShowRaw is intended for debugging, to print a rather complete syntax
--   tree. The basic rule is that every constructor MUST appear visibly in
--   the output. For example, <tt>show (CoreApp x []) == show x</tt>, but
--   <tt>(showRaw x == showRaw y) ==&gt; (x == y)</tt>.
module Yhc.Core.ShowRaw
class ShowRaw a
showRaw :: (ShowRaw a) => a -> String
instance ShowRaw CorePat
instance ShowRaw CoreLit
instance ShowRaw CoreExpr
instance ShowRaw CoreFunc
instance ShowRaw CoreCtor
instance ShowRaw CoreData
instance ShowRaw Core
instance (ShowRaw a) => ShowRaw [a]
instance (ShowRaw a, ShowRaw b) => ShowRaw (a, b)

module Yhc.Core.Show

-- | Show a CoreExpr, but with brackets if needed so the result is a group.
--   Does not bracket simple variables or constants etc
showCoreExprGroup :: CoreExpr -> String
isCoreOperator :: String -> Bool
instance Show CoreExpr
instance Show CoreCtor
instance Show CoreFunc
instance Show CoreData
instance Show Core

module Yhc.Core.Serialise
saveCore :: FilePath -> Core -> IO ()
loadCore :: FilePath -> IO Core

module Yhc.Core.Saturated

-- | Given an expr (normally a <a>CoreApp</a>) say if it is saturated or
--   not.
coreSaturated :: Core -> (CoreExpr -> Bool)

module Yhc.Core.RecursiveLet

-- | Is a CoreLet recursive, i.e. do any of the introduced variables (LHS
--   of bind) also show up in the RHS of bind.
--   
--   Returns False if the expression is not a CoreLet.
isCoreLetRec :: CoreExpr -> Bool

-- | Remove recursive lets
--   
--   Let's are rearranged so a variable is not used in the defining block
removeRecursiveLet :: Core -> Core

-- | Reduce the number of recursive lets, but splitting lets which have
--   recursive bindings, but can be linearised
reduceRecursiveLet :: Core -> Core

module Yhc.Core.Reachable
coreReachable :: [CoreFuncName] -> Core -> Core
coreReachableMap :: [CoreFuncName] -> CoreFuncMap -> CoreFuncMap

module Yhc.Core.Prim
data Prim
Prim :: String -> [PrimType] -> [Bool] -> ([CoreExpr] -> CoreExpr) -> PrimOp -> Prim
primName :: Prim -> String
primType :: Prim -> [PrimType]

-- | a function signature
primStrict :: Prim -> [Bool]

-- | True is strict in argument n, [] is unknown
primEval :: Prim -> [CoreExpr] -> CoreExpr
primOp :: Prim -> PrimOp
data PrimOp
PrimSeq :: PrimOp
PrimOrd :: PrimOp
PrimAdd :: PrimOp
PrimSub :: PrimOp
PrimMul :: PrimOp
PrimDiv :: PrimOp
PrimRem :: PrimOp
PrimQuot :: PrimOp
PrimQuotRem :: PrimOp
PrimNeg :: PrimOp
PrimAbs :: PrimOp
PrimSignum :: PrimOp
PrimEq :: PrimOp
PrimNe :: PrimOp
PrimLt :: PrimOp
PrimGt :: PrimOp
PrimLe :: PrimOp
PrimGe :: PrimOp
PrimCast :: PrimOp
PrimHaskell :: PrimOp
PrimOther :: String -> PrimOp
data PrimType
PrimTypeAny :: PrimType
PrimTypeUnknown :: PrimType
PrimTypeHaskell :: String -> PrimType
PrimIO :: PrimType
PrimInt :: PrimType
PrimInteger :: PrimType
PrimDouble :: PrimType
PrimFloat :: PrimType
PrimChar :: PrimType
PrimString :: PrimType
PrimBool :: PrimType
primArity :: Prim -> Int
corePrims :: [Prim]
corePrim :: String -> Prim
corePrimMaybe :: String -> Maybe Prim
coreBytecodePrims :: [Prim]
coreHaskellPrims :: [Prim]
coreHaskellTypes :: [(String, String)]
instance Eq PrimOp
instance Eq PrimType
instance Ord PrimType
instance Show PrimOp
instance Show Prim
instance Show PrimType

module Yhc.Core.Strictness

-- | Given a function, return a list of arguments. True is strict in that
--   argument, False is not. [] is unknown strictness
coreStrictness :: Core -> (CoreFuncName -> [Bool])

module Yhc.Core.Overlay

-- | coreOverlay original overlay, returns original with the overlay
--   substituted in
coreOverlay :: Core -> Core -> Core

module Yhc.Core.Invariant

-- | Note, not all combinations are yet implemented - they crash at
--   runtime. If you want any invariant, just email the list.
data Invariant

-- | The CoreLet constructor must not occur. Removal reduces sharing
NoCoreLet :: Invariant

-- | The CorePos constructor must not occur.
NoCorePos :: Invariant

-- | All CoreFun's must be enclosed in a CoreApp.
CoreAppFun :: Invariant

-- | All CoreCon's must be enclosed in a CoreApp.
CoreAppCon :: Invariant

-- | All CoreApp's must not have an empty argument list.
NoEmptyApp :: Invariant

-- | All CoreCase's must be on a variable.
CoreCaseVar :: Invariant

-- | All constructor CoreCase's must not contain a default.
NoCaseDefault :: Invariant

-- | All constructor CoreCase defaults must represent at least two
--   constructors.
NoCaseDefaultOne :: Invariant

-- | All CoreCase's must be on constructors, not constants.
NoCaseConst :: Invariant

-- | CoreLet's must not be recursive. Removal reduces sharing in limited
--   cases
NoRecursiveLet :: Invariant

-- | The CoreLam constructor must not occur.
NoCoreLam :: Invariant

-- | No partial applications of CoreFun to a CorePrim
NoPartialAppPrim :: Invariant

-- | No partial applications of CoreCon
NoPartialAppCon :: Invariant

-- | Low function numbers
ConsecutiveFuncs :: Invariant

-- | Unique variables in each function
UniqueVarsFunc :: Invariant

-- | Unique variables in the whole program
UniqueVarsCore :: Invariant

-- | All CoreApp CoreFun's must have at most one argument directly present
FuncArityAtMostOne :: Invariant

-- | All CoreApp CoreFun's must have exactly one argument present
FuncArityExactlyOne :: Invariant
checkInvariant :: Invariant -> Core -> Bool
ensureInvariant :: Invariant -> Core -> Core
checkInvariants :: [Invariant] -> Core -> Bool
ensureInvariants :: [Invariant] -> Core -> Core
instance Eq Invariant
instance Show Invariant
instance Enum Invariant
instance Bounded Invariant


-- | Inlining module.
--   
--   This module will let you perform some inlining on Yhc.Core code. The
--   <a>InlineMode</a> argument lets you select what algorithm is used. All
--   should be terminating, and none should increase the number of function
--   calls in a program.
--   
--   For comparison, GHC's inlining mode is more powerful than
--   <a>InlineForward</a>, but less powerful than <a>InlineFull</a>. (And
--   just so people understand, powerful does not mean more performance, it
--   means more inlining - the two are not always the same!)
--   
--   <a>InlineNone</a>
--   
--   No inlining. Equivalent to <a>id</a> :)
--   
--   <a>InlineAlias</a>
--   
--   A function is inlined if it is aliased to another function.
--   
--   A function is aliased if all it does is call another function with the
--   same arguments in the same order. i.e.
--   
--   <pre>
--   f x y z = g x y z
--   </pre>
--   
--   Note that a function is not aliased if any argument is duplicated, the
--   RHS is a primitive or a constructor, or the arguments are reordered.
--   
--   This restriction means that inlining can even occur when f is used
--   higher order, g can be replaced.
--   
--   This mode will never increase the code size.
--   
--   <a>InlineForward</a>
--   
--   A function is inlined if it is a forwarder.
--   
--   A function is a forwarder if all it does is call another function,
--   using only the given arguments, possibly reordered but not duplicated.
--   A forwarder can also be a single constant value, or a simple argument
--   value (a projection), or a constructor with no arguments. i.e.
--   
--   <pre>
--   f x y z = 12
--   f x y z = g z y
--   f x y z = x
--   </pre>
--   
--   The function is only inlined if it is called saturated.
--   
--   This mode will never increase the code size.
--   
--   <a>InlineCallOnce</a>
--   
--   A function is inlined if it is a forwarder, or if there is only one
--   caller. Only inlined if called saturated. Will never increase the code
--   size.
--   
--   <a>InlineFull</a>
--   
--   This does the most inlining it can, but never inlines the same
--   function more than once in a given expression - to ensure termination.
--   Also doesn't inline CAF's, since that would go wrong. Large functions,
--   recursive functions, duplicated arguments etc - all are inlined
--   without question.
--   
--   Duplicated arguments are moved into a let, to ensure they are not
--   computed additional times.
--   
--   This mode is more than likely to increase the code size in most
--   programs.
module Yhc.Core.Inline
coreInline :: InlineMode -> Core -> Core
data InlineMode

-- | no inlining at all
InlineNone :: InlineMode

-- | f a b c = g a b c, calls to g become calls to f
InlineAlias :: InlineMode

-- | f a b c = g a b, g b a, a (g may be a constructor)
InlineForward :: InlineMode

-- | f is called only once
InlineCallOnce :: InlineMode

-- | If you can inline it, do so! Breaks on first recursive call
InlineFull :: InlineMode

-- | Inline a function, fails if it would produce a lambda See
--   <a>coreInlineFuncLambda</a> for a version without this property
coreInlineFunc :: CoreFunc -> [CoreExpr] -> Maybe CoreExpr

-- | Inline a function, generating a lambda if necessary NOTE: Should this
--   return a CoreLam now we have this in the AST
coreInlineFuncLambda :: CoreFunc -> [CoreExpr] -> ([String], CoreExpr)

module Yhc.Core.Html
coreHtml :: Core -> String

module Yhc.Core.Haskell

-- | Take a <a>Core</a> program, and output Haskell. Fix up as much as
--   possible
coreHaskell :: Core -> String

-- | Take a <a>Core</a> program, and output Haskell. Currently one
--   definition per line, although this is not guaranteed (pretty printing
--   would be nice!) Does not include a <i>module</i> definition, or
--   imports.
coreHaskellDirect :: Core -> String


-- | Equal checks if two CoreExpr's are equal ignoring any children
--   expressions. Usually <a>Eq</a> is what is wanted, but for some stuff
--   this is more appropriate.
module Yhc.Core.Equal
eqCoreExpr1 :: CoreExpr -> CoreExpr -> Bool
coreExpr1 :: CoreExpr -> CoreExpr1

-- | Should be equivalent to:
--   
--   <pre>
--   eqCoreExpr1 x y = length xs == length ys &amp;&amp; _x vs == _y vs
--       where
--           vs = replicate (length xs) (CoreVar "")
--           (xs,_x) = uniplate x
--           (ys,_y) = uniplate y
--   </pre>
data CoreExpr1
instance Ord CoreExpr1
instance Eq CoreExpr1
instance Show CoreExpr1

module Yhc.Core.Clean

-- | Take a <a>Core</a> program, and output Clean. Currently one definition
--   per line, although this is not guaranteed (pretty printing would be
--   nice!) Does not include a <i>module</i> definition, or imports.
coreClean :: Core -> String

module Yhc.Core.CaseElimination

-- | Eliminate useless default statements where the other options cover
--   everything
coreCaseElim :: Core -> Core

module Yhc.Core
