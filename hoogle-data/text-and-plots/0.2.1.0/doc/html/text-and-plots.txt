-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | EDSL to create HTML documents with plots based on the C3.js library.
--   
@package text-and-plots
@version 0.2.1.0

module Text.DocL.Javascript

-- | Represents a javascript object or scalar value.
data Obj

-- | Class of types that can be converted to an <a>Obj</a>.
class ToObj a where toObjList = List . map toObj
toObj :: ToObj a => a -> Obj
toObjList :: ToObj a => [a] -> Obj

-- | A key/value pair created with the <a>/:</a>-operator.
--   
--   A list of type [<a>Prop</a>] can be converted to an object using
--   <a>toObj</a>. If the list contains duplicate keys, then <a>merge</a>
--   is used to combine the values.
--   
--   <pre>
--   &gt;&gt;&gt; toObj ["legs" /: 4, "ears" /: "floppy"]
--   {"ears":"floppy","legs":4}
--   </pre>
data Prop

-- | Constructs a <a>Prop</a>.
--   
--   <pre>
--   &gt;&gt;&gt; toObj ["tail" /: True, "nose" /: "wet"]
--   {"nose":"wet","tail":true}
--   </pre>
(/:) :: ToObj a => String -> a -> Prop

-- | Raw unescaped javascript.
--   
--   <pre>
--   &gt;&gt;&gt; toObj ["speak" /: javascript "function(){alert('Woof!');}"]
--   {"speak":function(){alert('Woof!');}}
--   </pre>
javascript :: String -> Obj

-- | Encode an <a>Obj</a> to a lazy <a>Text</a>.
encode :: Obj -> Text

-- | <i><a>merge</a> x y</i> returns <i>y</i> unless both <i>x</i> and
--   <i>y</i> are javascript objects, in which case the properties of the
--   two are merged using <a>merge</a> recursively for duplicate keys.
merge :: Obj -> Obj -> Obj
instance ToObj Text
instance ToObj Char
instance ToObj Bool
instance ToObj ()
instance ToObj Integer
instance ToObj Int
instance ToObj Double
instance ToObj Obj
instance ToObj a => ToObj [a]
instance ToObj Prop
instance Show Obj
instance IsString Obj


-- | Haskell mini-language to create HTML documents with a mixture of
--   markup and plots based on the <a>C3.js</a> library.
--   
--   See the <a>github page</a> for an introduction.
--   
--   Notes:
--   
--   <ul>
--   <li>The generated documents relies on <a>https://cdnjs.com/</a> to
--   serve <a>C3.js</a> and friends.</li>
--   <li>This library should not be used on a public facing server with
--   input supplied by the user. The library has not been properly vetted
--   for security issues.</li>
--   </ul>
module Text.DocL

-- | Base type representing a document. This type allows composition via
--   the <a>Monoid</a> instance.
data Doc

-- | Creates a <a>Doc</a> representing plain text. The string will be
--   properly escaped.
text :: String -> Doc

-- | Creates a <a>Doc</a> representing <tt>&lt;h1&gt;</tt> header tag. The
--   string will be properly escaped.
header :: String -> Doc

-- | Converts a string in <a>markdown syntax</a> to a <a>Doc</a>.
markdown :: String -> Doc

-- | Creates a <a>Doc</a> representing raw html.
html :: Html -> Doc

-- | Render a document to a lazy <a>ByteString</a>.
render :: Doc -> ByteString

-- | If the file exists, it will be overwritten.
renderToFile :: FilePath -> Doc -> IO ()

-- | Represent a column of a dataset where each row has type <i>a</i>. See
--   <a>col</a> for details.
data Column a

-- | Data sets are supplied to <a>plot</a> as a collection of elements of
--   type <i>a</i>. This function sets up a <a>Column</a>, which knows how
--   to extract one <a>Double</a> value from each value of type <i>a</i> in
--   the collection.
--   
--   The first argument to <a>col</a> is the header of the column, which is
--   used in the legend of the plot.
--   
--   The simplest plot that can be created consist of one column for the
--   <i>x</i> values and one column for the <i>y</i> values.
--   
--   <pre>
--   -- Plot x² vs x.
--   plot [1..10] (col "x" id) [col "x²" $ \x -&gt; x*x]
--   </pre>
col :: String -> (a -> Double) -> Column a

-- | Polymorphic version of <a>col</a>. This allows, for instance,
--   <a>Int</a> and <a>String</a> values to be used in plots. It is up to
--   the caller to ensure that the values make sense to <a>C3.js</a>.
col' :: ToObj b => String -> (a -> b) -> Column a

-- | <pre>
--   plot ds x ys
--   </pre>
--   
--   Plots the data in <i>ds</i> using the column <i>x</i> for the values
--   on the <i>x</i>-axis and with one line on the plot for each column in
--   <i>ys</i>. See also <a>col</a>.
plot :: Foldable f => f a -> Column a -> [Column a] -> Doc

-- | Same as <a>plot</a>, but takes a final argument which is merged with
--   the configuration object supplied to <a>C3.js</a>. This allows the
--   caller to customize the plot.
--   
--   <pre>
--   -- Plot x² vs x with the points hidden.
--   plot' [1..10] (col "x" id) [col "x²" $ \x -&gt; x*x] $
--     ["point" /<i>: ["show" </i>/: False]]
--   </pre>
--   
--   See <a>http://c3js.org/reference.html</a> for the many properties that
--   can be used here.
plot' :: Foldable f => f a -> Column a -> [Column a] -> [Prop] -> Doc

-- | This function sends an object with the supplied properties directly to
--   <a>C3.js</a>. This is the do-it-yourself option which exposes all of
--   <a>C3.js</a>. The object receives a <a>"bindto"</a> property,
--   targeting a <tt>&lt;div&gt;</tt> tag placed appropriately.
rawPlot :: [Prop] -> Doc

-- | <i><a>linspace</a> x y n</i> generates <i>n</i> evenly spaced values
--   from <i>x</i> to <i>y</i>.
linspace :: Fractional a => a -> a -> Int -> [a]

-- | Constructs a <a>Prop</a>.
--   
--   <pre>
--   &gt;&gt;&gt; toObj ["tail" /: True, "nose" /: "wet"]
--   {"nose":"wet","tail":true}
--   </pre>
(/:) :: ToObj a => String -> a -> Prop

-- | Raw unescaped javascript.
--   
--   <pre>
--   &gt;&gt;&gt; toObj ["speak" /: javascript "function(){alert('Woof!');}"]
--   {"speak":function(){alert('Woof!');}}
--   </pre>
javascript :: String -> Obj
instance Monoid Doc
