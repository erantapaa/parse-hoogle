-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Declare Persistent entities using SQL SELECT query syntax
--   
--   This package exports functions which could help to declare Persistent
--   entities using SQL SELECT query syntax. See Test.hs, TestSQL.hs for
--   example usage.
@package persistent-hssqlppp
@version 0.1

module Database.Persist.HsSqlPpp

-- | (SQL query text, entity definition)
type Query = (QueryExpr, EntityDef)

-- | Quasi-quoter which parses SQL SELECT queries. Example input:
--   
--   <pre>
--   SELECT family, salary FROM employee;
--   --------------------
--   family String
--   salary Int
--   </pre>
--   
--   NB: entity name will be "Undefined", so you'll need to use record
--   update syntax to set name your want, e.g. entity {entityName =
--   "Query"}.
persistSql :: QuasiQuoter

-- | Load entity declaration from file containing SQL query. TH version.
persistSqlFile :: FilePath -> Q [Exp]

-- | Load entity declaration from file containing SQL query
parseEntityFromFile :: FilePath -> IO (Either String Query)

-- | Parse SQL entity declaration
parseEntity :: FilePath -> String -> Either String Query

-- | Select list of records from DB using given SQL query
selectFromQuery :: (MonadControlIO m, PersistEntity a) => QueryExpr -> [Filter a] -> SqlPersist m (Either String [a])

-- | Select list of records from DB using given SQL SELECT query. Query is
--   checked for safety (arbitrary function calls, complex expressions, etc
--   are not permitted). Each row will be represented as [PersistValue].
selectFromQuery' :: MonadControlIO m => [String] -> String -> SqlPersist m (Either String ([ColumnName], [[PersistValue]]))

-- | Check if given SQL query is safe SELECT query
checkSQL :: [String] -> String -> Either String QueryExpr
instance Lift QueryExpr
instance Lift Annotation
instance Lift CatalogUpdate
instance Lift Type
instance Lift PseudoType
instance Lift CastContext
instance Lift FunFlav
instance Lift TypeError
instance Lift WithQuery
instance Lift CombineType
instance Lift TableRef
instance Lift Natural
instance Lift JoinType
instance Lift JoinExpr
instance Lift Name
instance Lift NameComponent
instance Lift TableAlias
instance Lift Direction
instance Lift ScalarExpr
instance Lift ExtractField
instance Lift InList
instance Lift IntervalField
instance Lift LiftFlavour
instance Lift TypeName
instance Lift FrameClause
instance Lift Distinct
instance Lift SelectList
instance Lift SelectItem
instance IsName [NameComponent]
instance IsName NameComponent
instance IsName Name
instance IsName String
