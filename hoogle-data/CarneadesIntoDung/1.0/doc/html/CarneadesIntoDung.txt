-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A translation from the Carneades argumentation model into Dung's AFs.
--   
--   A translation from the Carneades argumentation model
--   (<a>http://hackage.haskell.org/package/CarneadesDSL</a>) into Dung's
--   argumentation frameworks
--   (<a>http://hackage.haskell.org/package/Dung</a>). This package
--   provides a translation function and correspondence properties. For the
--   papers accompanying this library see "Towards a framework for the
--   implementation and verification of translations between argumentation
--   models" and "A principled approach to the implementation of
--   argumentation models", available at
--   <a>http://www.cs.nott.ac.uk/~bmv/CarneadesIntoDung/</a>.
@package CarneadesIntoDung
@version 1.0


-- | This module implements a translation from the Carneades argumentation
--   model into Dung's argumentation frameworks. Any cycle-free Carneades
--   Argument Evaluation Structure (CAES) is handled. We also give a
--   Haskell implementation of correspondence properties.
--   
--   Translation is done according to the following algorithm (see also
--   "Towards a framework for the implementation and verification of
--   translations between argumentation models" by Bas van Gijzel and
--   Henrik Nilsson)
--   
--   <ol>
--   <li>generatedArgs = <i>emptyset</i>.</li>
--   <li>sortedArgs = Topological sort of arguments on its dependency
--   graph.</li>
--   <li>while sortedArgs != <i>emptyset</i>:</li>
--   </ol>
--   
--   <ul>
--   <li>Pick the first argument in sortedArgs. Remove all arguments from
--   sortedArgs that have the same conclusion, c, and put them in
--   argSet.</li>
--   <li>Translate applicability part of arguments argSet, building on
--   previously generatedArgs and put the generated arguments in
--   tempArgs.</li>
--   <li>argSet = <i>emptyset</i></li>
--   <li>Repeat the above three steps for the arguments for the opposite
--   conclusion.</li>
--   <li>Translate the acceptability part of c and the opposite conclusion
--   based on arguments in tempArgs. Add the results and tempArgs to
--   generatedArgs.</li>
--   <li>tempArgs = <i>emptyset</i></li>
--   </ul>
module Language.CarneadesIntoDung.Translation

-- | A concrete argument (in an argumentation framework) is either a
--   Carneades propositional literal, or a Carneades argument.
type ConcreteArg = Either PropLiteral Argument

-- | A labelled version of the concrete argument allowing a more efficient
--   translation by keeping track of the translation status.
type LConcreteArg = (Bool, ConcreteArg)

-- | An argumentation framework (AF) instantiated with <a>ConcreteArg</a>.
type ConcreteAF = DungAF ConcreteArg

-- | An argumentation framework (AF) instantiated with <a>LConcreteArg</a>.
type LConcreteAF = DungAF LConcreteArg

-- | Translation function. It translate an arbitrary <i>cycle-free</i>
--   Carneades argument Evaluation Structure (CAES) into a Dung
--   argumentation framework (instantiated with a ConcreteArg)
translate :: CAES -> ConcreteAF

-- | Mainly, for testing purposes. This function behaves exactly like
--   <a>translate</a>, but retains the labels.
translate' :: CAES -> LConcreteAF

-- | Correspondence of the applicability of arguments.
corApp :: CAES -> Bool

-- | Correspondence of the acceptability of propositional literals,
--   including assumptions.
corAcc :: CAES -> Bool


-- | This is the examples module accompanying the implementation of the
--   translation from the Carneades argumentation model into Dung's
--   argumentation frameworks.
--   
--   This module contains a collection of examples, showing how to
--   translate an existing Carneades Argument Evaluation Structure (CAES)
--   into an argumentation framework.
--   
--   To run these examples, or your own: start GHCi and do the following:
--   
--   <pre>
--   :l Language.CarneadesIntoDung.Examples
--   </pre>
module Language.CarneadesIntoDung.Examples
caes :: CAES

-- | Translation of the example CAES <a>caes</a>. The following is the
--   prettified output of the translation, where the five propositions in
--   the middle are the assumptions and <tt>defeater</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; translate caes
--   AF [
--   Left (True,"murder"),
--   Left (False,"murder"),
--   Right ["kill","intent"] ~[]=&gt;"murder",
--   Left (False,"intent"),
--   Left (True,"intent"),
--   Right ["witness2"] ~["unreliable2"]=&gt;"-intent",
--   Right ["witness"] ~["unreliable"]=&gt;"intent",
--   Left (True,"unreliable"),
--   Left (False,"unreliable")
--   ,
--   Left (True,"defeater"),
--   Left (True,"kill"),
--   Left (True,"witness"),
--   Left (True,"witness2"),
--   Left (True,"unreliable2")] 
--   [
--   (Left (True,"defeater"), Left (True,"murder")),
--   (Left (True,"defeater"), Left (False,"murder")),
--   (Left (True,"defeater"), Right ["kill","intent"] ~[]=&gt;"murder"),
--   (Left (True,"defeater"), Left (False,"intent")),
--   (Left (True,"defeater"),Left (True,"intent")),
--   (Left (True,"unreliable2"),Right ["witness2"] ~["unreliable2"]=&gt;"-intent"),
--   (Left (True,"defeater"),Left (True,"unreliable")),
--   (Left (True,"defeater"),Left (False,"unreliable"))
--   ]
--   </pre>
exTrans :: ConcreteAF

-- | Translation of the example CAES <a>caes</a>, keeping labels. The
--   following is the prettified output of the translation, where the five
--   propositions in the middle are the assumptions and <tt>defeater</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; translate' caes
--   AF [
--   (False,Left (True,"murder")),
--   (False,Left (False,"murder")),
--   (False,Right ["kill","intent"] ~[]=&gt;"murder"),
--   (False,Left (False,"intent")),
--   (False,Left (True,"intent")),
--   (False,Right ["witness2"] ~["unreliable2"]=&gt;"-intent"),
--   (True,Right ["witness"] ~["unreliable"]=&gt;"intent"),
--   (False,Left (True,"unreliable")),
--   (False,Left (False,"unreliable"))
--   ,
--   (True,Left (True,"defeater")),
--   (True,Left (True,"kill")),
--   (True,Left (True,"witness")),
--   (True,Left (True,"witness2")),
--   (True,Left (True,"unreliable2"))]
--   [
--   ((True,Left (True,"defeater")),(False,Left (True,"murder"))),
--   ((True,Left (True,"defeater")),(False,Left (False,"murder"))),
--   ((True,Left (True,"defeater")), (False,Right ["kill","intent"] ~[]=&gt;"murder")),
--   ((True,Left (True,"defeater")),(False,Left (False,"intent"))),
--   ((True,Left (True,"defeater")),(False,Left (True,"intent"))),
--   ((True,Left (True,"unreliable2")),(False,Right ["witness2"] ~["unreliable2"]=&gt;"-intent")),
--   ((True,Left (True,"defeater")),(False,Left (True,"unreliable"))),
--   ((True,Left (True,"defeater")),(False,Left (False,"unreliable")))
--   </pre>
exTrans' :: LConcreteAF

-- | Combining the correspondence properties.
--   
--   And as expected:
--   
--   <pre>
--   &gt;&gt;&gt; corApp caes &amp;&amp; corAcc caes
--   True
--   </pre>
corProp :: CAES -> Bool
