-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Parse and merge ISO 8583-style bitmaps
--   
@package iso8583-bitmaps
@version 0.1.0.0


-- | This module contains Get and Put method implementations for ISO 8583
--   style bitmaps, and also utility methods for getting/putting fields in
--   formats commonly used in ISO 8583 specification.
module Data.Binary.ISO8583

-- | Parse bitmap. Return numbers of fields present. NB: only two bitmaps
--   are supported as for now (Primary and Secondary bitmaps in ISO 8583
--   notation).
getBitmapFieldNumbers :: Get [Int]

-- | Parse ISO 8583-style bitmap. Fails if unsupported field is present in
--   message.
getBitmap :: (Int -> Maybe (Get f)) -> Get (Map Int f)

-- | Merge numbers of fields present into ISO bitmap.
mergeFieldNumbers :: [Int] -> ByteString

-- | Put ISO 8583-style bitmap.
putBitmap :: [(Int, Put)] -> Put

-- | Put ISO 8583-style bitmap.
putBitmap' :: [(Int, Maybe Put)] -> Put

-- | Parse string with embedded length (LLVAR/LLLVAR in ISO 8583 notation)
embeddedLen :: Int -> Int -> Get ByteString

-- | Parse number of given length in ASCII notation
asciiNumber :: Int -> Get Int

-- | Parse number of given length in ASCII notation; Report bitmap field
--   number in case of error.
asciiNumberF :: Int -> Int -> Get Integer

-- | Put number of given length in ASCII notation
putAsciiNumber :: Int -> Integer -> Put

-- | Put string with embedded length (LLVAR/LLLVAR in ISO 8583 notation)
putEmbeddedLen :: Int -> ByteString -> Put

-- | Put space-padded string of given length
putByteStringPad :: Int -> ByteString -> Put

-- | Put space-padded string of given length
putLazyByteStringPad :: Int64 -> ByteString -> Put
toBS :: String -> ByteString
fromBS :: ByteString -> String


-- | This module contains QuasiQuoter for declarative description of ISO
--   8583-based message formats.
module Data.Binary.ISO8583.TH

-- | Supported field types
data FieldType

-- | Integer field of given size
TInt :: Int -> FieldType

-- | Fixed-length string field
TString :: Int -> FieldType

-- | Variable-length string field with embedded length (LLVAR and so on)
TEmbeddedLen :: Int -> FieldType

-- | User-defined field - any data type with instance Binary. NB: second
--   parameter is not used currently.
TOther :: String -> Int -> FieldType

-- | Supported field values
data FieldValue

-- | Integer field
FInt :: Integer -> FieldValue

-- | String fields
FString :: ByteString -> FieldValue

-- | User-defined field
FOther :: t -> FieldValue

-- | Field format description
data Field
Field :: Int -> String -> FieldType -> Field

-- | Field number
fNumber :: Field -> Int

-- | Field name
fName :: Field -> String

-- | Field type description
fType :: Field -> FieldType

-- | Parse data format definition
pData :: Parser (String, [Field])

-- | Generate only data type definition
string2data :: String -> Q [Dec]
binaryQ :: String -> Q [Dec]

-- | Main function here.
binary :: QuasiQuoter
instance Eq Field
instance Show Field
instance Show FieldValue
instance Eq FieldValue
instance Lift FieldType
instance Eq FieldType
instance Show FieldType
