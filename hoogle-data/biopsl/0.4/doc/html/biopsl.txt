-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Library and executables for working with PSL files
--   
--   The library contains the functionality for reading and writing PSL
--   files (alignment data, e.g. from BLAT output). It duplicates code from
--   (and is incompatible with) the <a>bio</a> library.
@package biopsl
@version 0.4


-- | This models the PSL format used by e.g. the alignment tool BLAT. It is
--   a simple, textual representation of (spliced) alignments, with
--   tab-separated fields.
--   
--   See <a>http://genome.ucsc.edu/FAQ/FAQformat#format2</a> for details.
module Bio.Alignment.PSL

-- | This encodes a PSL record, corresponding to one line of the PSL file.
data PSL
PSL :: Int -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> ByteString -> ByteString -> Int -> Int -> Int -> ByteString -> Int -> Int -> Int -> Int -> [Int] -> [Int] -> [Int] -> PSL
match :: PSL -> Int
mismatch :: PSL -> Int
repmatch :: PSL -> Int
ncount :: PSL -> Int
qgapcount :: PSL -> Int
qgaplength :: PSL -> Int
tgapcount :: PSL -> Int
tgaplength :: PSL -> Int
strand :: PSL -> ByteString
qname :: PSL -> ByteString
qsize :: PSL -> Int
qstart :: PSL -> Int
qend :: PSL -> Int
tname :: PSL -> ByteString
tsize :: PSL -> Int
tstart :: PSL -> Int
tend :: PSL -> Int
blockcount :: PSL -> Int
blocksizes :: PSL -> [Int]
qstarts :: PSL -> [Int]
tstarts :: PSL -> [Int]

-- | Read and parse a PSL file.
readPSL :: FilePath -> IO [PSL]

-- | Create a PSL file from a list of alignments.
writePSL :: FilePath -> [PSL] -> IO ()
printPSL :: [PSL] -> IO ()

-- | Parse a <a>ByteString</a> as a PSL file (note that it must contain the
--   PSL header).
parsePSL :: ByteString -> [PSL]

-- | Unparse a list of <a>PSL</a> alignments encoding them into a
--   <a>ByteString</a> (not including PSL header).
unparsePSL :: [PSL] -> ByteString

-- | The PSL header (version 3), as a <a>ByteString</a>.
pslHeader :: ByteString
instance Eq PSL
instance Show PSL
