-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | B-Splines, other splines, and NURBS.
--   
--   This is a fairly simple implementation of a general-purpose spline
--   library, just to get the code out there. Its interface is still mildly
--   unstable and may change (hopefully not drastically) as new needs or
--   better style ideas come up. Patches, suggestions and/or feature
--   requests are welcome.
@package splines
@version 0.5.0.1

module Math.Spline.Knots

-- | Knot vectors - multisets of points in a 1-dimensional space.
data Knots a

-- | An empty knot vector
empty :: Knots a
isEmpty :: Knots a -> Bool

-- | Create a knot vector consisting of one knot.
knot :: Ord a => a -> Knots a

-- | Create a knot vector consisting of one knot with the specified
--   multiplicity.
multipleKnot :: Ord a => a -> Int -> Knots a

-- | Create a knot vector consisting of all the knots in a list.
mkKnots :: Ord a => [a] -> Knots a

-- | Create a knot vector consisting of all the knots and corresponding
--   multiplicities in a list.
fromList :: Ord k => [(k, Int)] -> Knots k

-- | Returns the number of knots (not necessarily distinct) in a knot
--   vector.
numKnots :: Knots t -> Int
lookupKnot :: Int -> Knots a -> Maybe a

-- | Returns a list of all distinct knots in ascending order along with
--   their multiplicities.
toList :: Eq k => Knots k -> [(k, Int)]

-- | Returns the number of distinct knots in a knot vector.
numDistinctKnots :: Eq t => Knots t -> Int
lookupDistinctKnot :: Eq a => Int -> Knots a -> Maybe a

-- | Returns a list of all knots (not necessarily distinct) of a knot
--   vector in ascending order
knots :: Knots t -> [t]

-- | Returns a vector of all knots (not necessarily distinct) of a knot
--   vector in ascending order
knotsVector :: Knots t -> Vector t

-- | Returns a list of all distinct knots of a knot vector in ascending
--   order
distinctKnots :: Eq t => Knots t -> [t]
multiplicities :: Eq t => Knots t -> [Int]

-- | Returns a vector of all distinct knots of a knot vector in ascending
--   order
distinctKnotsVector :: Eq t => Knots t -> Vector t
multiplicitiesVector :: Eq a => Knots a -> Vector Int

-- | Returns a <a>Set</a> of all distinct knots of a knot vector
distinctKnotsSet :: Eq k => Knots k -> Set k
toMap :: Ord k => Knots k -> Map k Int
fromMap :: Eq k => Map k Int -> Knots k
toVector :: Eq k => Knots k -> Vector (k, Int)
fromVector :: Ord k => Vector (k, Int) -> Knots k

-- | <tt>splitLookup n kts</tt>: Split a knot vector <tt>kts</tt> into 3
--   parts <tt>(pre, mbKt, post)</tt> such that:
--   
--   <ul>
--   <li>All the keys in <tt>pre</tt>, <tt>mbKt</tt> (viewed as a knot
--   vector of either 0 or 1 knot), and <tt>post</tt> are disjoint and
--   ordered * Putting the 3 parts back together yields exactly the
--   original knot vector * The <tt>n</tt>'th knot, if one exists, will be
--   in <tt>mbKt</tt> along with its multiplicity</li>
--   </ul>
splitLookup :: Int -> Knots a -> (Knots a, Maybe a, Knots a)
takeKnots :: Int -> Knots a -> Knots a
dropKnots :: Int -> Knots a -> Knots a
splitKnotsAt :: Int -> Knots a -> (Knots a, Knots a)
takeDistinctKnots :: Ord a => Int -> Knots a -> Knots a
dropDistinctKnots :: Ord a => Int -> Knots a -> Knots a
splitDistinctKnotsAt :: (Ord a, Eq a) => Int -> Knots a -> (Knots a, Knots a)
maxMultiplicity :: Ord t => Knots t -> Int

-- | Looks up the multiplicity of a knot (which is 0 if the point is not a
--   knot)
knotMultiplicity :: Ord k => k -> Knots k -> Int

-- | Returns a new knot vector with the given knot set to the specified
--   multiplicity and all other knots unchanged.
setKnotMultiplicity :: Ord k => k -> Int -> Knots k -> Knots k
splitFind :: Ord k => k -> Knots k -> (Knots k, Knots k, Knots k)

-- | Create a knot vector consisting of all the knots and corresponding
--   multiplicities in a list ordered by the knots' <a>Ord</a> instance.
--   The ordering precondition is not checked.
fromAscList :: Eq k => [(k, Int)] -> Knots k

-- | Create a knot vector consisting of all the knots and corresponding
--   multiplicities in a list ordered by the knots' <a>Ord</a> instance
--   with no duplicates. The preconditions are not checked.
fromDistinctAscList :: Eq k => [(k, Int)] -> Knots k

-- | Check the internal consistency of a knot vector
valid :: (Ord k, Num k) => Knots k -> Bool

-- | <tt>knotSpan kts i j</tt> returns the knot span extending from the
--   <tt>i</tt>'th knot to the <tt>j</tt>'th knot, if <tt>i &lt;= j</tt>
--   and both knots exist.
knotSpan :: Knots a -> Int -> Int -> Maybe (a, a)

-- | <tt>knotsInSpan kts i j</tt> returns the knots in the knot span
--   extending from the <tt>i</tt>'th knot to the <tt>j</tt>'th knot
knotsInSpan :: Knots a -> Int -> Int -> Knots a

-- | <tt>knotSpans kts width</tt> returns all knot spans of a given width
--   in ascending order.
--   
--   For example, <tt>knotSpans (mkKnots [1..5]) 2</tt> yields <tt>[(1,3),
--   (2,4), (3,5)]</tt>.
knotSpans :: Knots a -> Int -> [(a, a)]

-- | <tt>knotDomain kts p</tt> returns the domain of a B-spline or NURBS
--   with knot vector <tt>kts</tt> and degree <tt>p</tt>. This is the
--   subrange spanned by all except the first and last <tt>p</tt> knots.
--   Outside this domain, the spline does not have a complete basis set. De
--   Boor's algorithm assumes that the basis functions sum to 1, which is
--   only true on this range, and so this is also precisely the domain on
--   which de Boor's algorithm is valid.
knotDomain :: Knots a -> Int -> Maybe (a, a)

-- | <tt>uniform deg nPts (lo,hi)</tt> constructs a uniformly-spaced knot
--   vector over the interval from <tt>lo</tt> to <tt>hi</tt> which, when
--   used to construct a B-spline with <tt>nPts</tt> control points will
--   yield a clamped spline with degree <tt>deg</tt>.
uniform :: (Ord s, Fractional s) => Int -> Int -> (s, s) -> Knots s
minKnot :: Eq a => Knots a -> Maybe (a, Int)
maxKnot :: Eq a => Knots a -> Maybe (a, Int)
instance Eq a => Eq (Knots a)
instance Ord a => Ord (Knots a)
instance Foldable Knots
instance Ord a => Monoid (Knots a)
instance Show a => Show (Knots a)

module Math.Spline.BSpline

-- | A B-spline, defined by a knot vector (see <a>Knots</a>) and a sequence
--   of control points.
data BSpline v t

-- | <tt>bSpline kts cps</tt> creates a B-spline with the given knot vector
--   and control points. The degree is automatically inferred as the
--   difference between the number of spans in the knot vector
--   (<tt>numKnots kts - 1</tt>) and the number of control points
--   (<tt>length cps</tt>).
bSpline :: Vector v a => Knots (Scalar a) -> v a -> BSpline v a

-- | Evaluate a B-spline at the given point. This uses a slightly modified
--   version of de Boor's algorithm which is only strictly correct inside
--   the domain of the spline. Unlike the standard algorithm, the basis
--   functions always sum to 1, even outside the domain of the spline. This
--   is mainly useful for "clamped" splines - the values at or outside the
--   endpoints will always be the value of the nearest control point.
--   
--   For a standard implementation of de Boor's algorithm, see
--   <a>evalNaturalBSpline</a>. For a (much slower) strictly mathematically
--   correct evaluation, see <tt>evalReferenceBSpline</tt>.
evalBSpline :: (VectorSpace a, Fractional (Scalar a), Ord (Scalar a), Vector v a, Vector v (Scalar a)) => BSpline v a -> Scalar a -> a

-- | Evaluate a B-spline at the given point. This uses de Boor's algorithm,
--   which is only strictly correct inside the domain of the spline.
--   
--   For a (much slower) strictly mathematically correct evaluation, see
--   <tt>evalReferenceBSpline</tt>.
evalNaturalBSpline :: (Fractional (Scalar a), Ord (Scalar a), VectorSpace a, Vector v a) => BSpline v a -> Scalar a -> a

-- | Insert one knot into a <a>BSpline</a> without changing the spline's
--   shape.
insertKnot :: (VectorSpace a, Ord (Scalar a), Fractional (Scalar a), Vector v a, Vector v (Scalar a)) => BSpline v a -> Scalar a -> BSpline v a

-- | Split a B-spline at the specified point (which must be inside the
--   spline's domain), returning two disjoint splines, the sum of which is
--   equal to the original. The domain of the first will be below the split
--   point and the domain of the second will be above.
splitBSpline :: (VectorSpace a, Ord (Scalar a), Fractional (Scalar a), Vector v a, Vector v (Scalar a)) => BSpline v a -> Scalar a -> Maybe (BSpline v a, BSpline v a)
differentiateBSpline :: (VectorSpace a, Fractional (Scalar a), Ord (Scalar a), Vector v a, Vector v (Scalar a)) => BSpline v a -> BSpline v a
integrateBSpline :: (VectorSpace a, Fractional (Scalar a), Ord (Scalar a), Vector v a, Vector v (Scalar a)) => BSpline v a -> BSpline v a

-- | The table from de Boor's algorithm, calculated for the entire spline.
--   If that is not necessary (for example, if you are only evaluating the
--   spline), then use <a>slice</a> on the spline first.
--   <tt>splitBSpline</tt> currently uses the whole table. It is probably
--   not necessary there, but it greatly simplifies the definition and
--   makes the similarity to splitting Bezier curves very obvious.
deBoor :: (Fractional (Scalar a), Ord (Scalar a), VectorSpace a, Vector v a, Vector v (Scalar a)) => BSpline v a -> Scalar a -> [v a]


-- | Reference implementation of B-Splines; very inefficient but
--   "obviously" correct.
module Math.Spline.BSpline.Reference

-- | The values of all the B-spline basis functions for the given knot
--   vector at the given point, ordered by degree; "b_{i,j}(x)" is
--   <tt>bases kts x !! i !! j</tt>.
bases :: (Fractional a, Ord a) => Knots a -> a -> [[a]]

-- | All the B-spline basis functions for the given knot vector at the
--   given point, ordered by degree; "b_{i,j}" is <tt>basisFunctions kts x
--   !! i !! j</tt>.
basisFunctions :: (Fractional a, Ord a) => Knots a -> [[a -> a]]

-- | All the B-spline basis polynomials for the given knot vector, ordered
--   first by knot span and then by degree.
basisPolynomials :: (Fractional a, Ord a) => Knots a -> [[[Poly a]]]

-- | All the B-spline basis polynomials for the given knot vector at the
--   given point, ordered by degree; "b_{i,j}" is <tt>basisPolynomialsAt
--   kts x !! i !! j</tt>.
basisPolynomialsAt :: (Fractional a, Ord a) => Knots a -> a -> [[Poly a]]

-- | This is a fairly slow function which computes the value of a B-spline
--   at a given point, using the mathematical definition of B-splines. It
--   is mainly for testing purposes, as a reference against which the other
--   evaluation functions are checked.
evalReferenceBSpline :: (VectorSpace a, Fractional (Scalar a), Ord (Scalar a), Vector v a) => BSpline v a -> Scalar a -> a

-- | This is a fairly slow function which computes one polynomial segment
--   of a B-spline (the one containing the given point), using the
--   mathematical definition of B-splines. It is mainly for testing
--   purposes, as a reference against which the other evaluation functions
--   are checked.
fitPolyToBSplineAt :: (Fractional a, Ord a, Scalar a ~ a, Vector v a) => BSpline v a -> a -> Poly a

module Math.Spline.Class

-- | A spline is a piecewise polynomial vector-valued function. The
--   necessary and sufficient instance definition is <a>toBSpline</a>.
class (VectorSpace v, Fractional (Scalar v), Ord (Scalar v)) => Spline s v where splineDomain = knotDomain <$> knotVector <*> splineDegree evalSpline = evalSpline . toBSpline splineDegree = splineDegree . toBSpline knotVector = knotVector . toBSpline
splineDomain :: Spline s v => s v -> Maybe (Scalar v, Scalar v)
evalSpline :: Spline s v => s v -> Scalar v -> v
splineDegree :: Spline s v => s v -> Int
knotVector :: Spline s v => s v -> Knots (Scalar v)
toBSpline :: Spline s v => s v -> BSpline Vector v
class Spline s v => ControlPoints s v
controlPoints :: ControlPoints s v => s v -> Vector v
instance [incoherent] (Spline (BSpline v) a, Vector v a) => ControlPoints (BSpline v) a
instance [incoherent] Spline (BSpline Vector) a => ControlPoints (BSpline Vector) a
instance [incoherent] (VectorSpace a, Fractional (Scalar a), Ord (Scalar a), Vector v a, Vector v (Scalar a)) => Spline (BSpline v) a
instance [incoherent] (VectorSpace v, Fractional (Scalar v), Ord (Scalar v)) => Spline (BSpline Vector) v

module Math.Spline.BezierCurve

-- | A Bezier curve on <tt>0 &lt;= x &lt;= 1</tt>.
data BezierCurve t

-- | Construct a Bezier curve from a list of control points. The degree of
--   the curve is one less than the number of control points.
bezierCurve :: Vector t -> BezierCurve t

-- | Split and rescale a Bezier curve. Given a <a>BezierCurve</a>
--   <tt>b</tt> and a point <tt>t</tt>, <tt>splitBezierCurve b t</tt>
--   creates 2 curves <tt>(b1, b2)</tt> such that (up to reasonable
--   numerical accuracy expectations):
--   
--   <pre>
--   evalSpline b1  x    == evalSpline b (x * t)
--   evalSpline b2 (x-t) == evalSpline b (x * (1-t))
--   </pre>
splitBezierCurve :: VectorSpace v => BezierCurve v -> Scalar v -> (BezierCurve v, BezierCurve v)
evalSpline :: Spline s v => s v -> Scalar v -> v
instance Eq t => Eq (BezierCurve t)
instance Ord t => Ord (BezierCurve t)
instance Spline BezierCurve v => ControlPoints BezierCurve v
instance (VectorSpace v, Fractional (Scalar v), Ord (Scalar v)) => Spline BezierCurve v
instance Show v => Show (BezierCurve v)

module Math.Spline.MSpline

-- | M-Splines are B-splines normalized so that the integral of each basis
--   function over the spline domain is 1.
data MSpline v

-- | <tt>mSpline kts cps</tt> creates a M-spline with the given knot vector
--   and control points. The degree is automatically inferred as the
--   difference between the number of spans in the knot vector
--   (<tt>numKnots kts - 1</tt>) and the number of control points
--   (<tt>length cps</tt>).
mSpline :: Knots (Scalar a) -> Vector a -> MSpline a
toMSpline :: Spline s v => s v -> MSpline v
evalSpline :: Spline s v => s v -> Scalar v -> v
instance (Ord (Scalar v), Ord v) => Ord (MSpline v)
instance (Eq (Scalar v), Eq v) => Eq (MSpline v)
instance Spline MSpline v => ControlPoints MSpline v
instance (VectorSpace v, Fractional (Scalar v), Ord (Scalar v)) => Spline MSpline v
instance (Show (Scalar v), Show v) => Show (MSpline v)

module Math.Spline.ISpline

-- | The I-Spline basis functions are the integrals of the M-splines, or
--   alternatively the integrals of the B-splines normalized to the range
--   [0,1]. Every I-spline basis function increases monotonically from 0 to
--   1, thus it is useful as a basis for monotone functions. An I-Spline
--   curve is monotone if and only if every non-zero control point has the
--   same sign.
data ISpline v

-- | <tt>iSpline kts cps</tt> creates an I-spline with the given knot
--   vector and control points. The degree is automatically inferred as the
--   difference between the number of spans in the knot vector
--   (<tt>numKnots kts - 1</tt>) and the number of control points
--   (<tt>length cps</tt>).
iSpline :: Knots (Scalar a) -> Vector a -> ISpline a
toISpline :: (Spline s v, Eq v) => s v -> ISpline v
evalSpline :: Spline s v => s v -> Scalar v -> v
instance (Ord (Scalar v), Ord v) => Ord (ISpline v)
instance (Eq (Scalar v), Eq v) => Eq (ISpline v)
instance Spline ISpline v => ControlPoints ISpline v
instance (VectorSpace v, Fractional (Scalar v), Ord (Scalar v)) => Spline ISpline v
instance (Show (Scalar v), Show v) => Show (ISpline v)

module Math.Spline.Hermite

-- | Cubic Hermite splines. These are cubic splines defined by a sequence
--   of control points and derivatives at those points.
data CSpline a

-- | Cubic splines specified by a list of control points, where each
--   control point is given by a triple of parameter value, position of the
--   spline at that parameter value, and derivative of the spline at that
--   parameter value.
cSpline :: Ord (Scalar a) => [(Scalar a, a, a)] -> CSpline a
evalSpline :: Spline s v => s v -> Scalar v -> v
instance (VectorSpace a, Fractional (Scalar a), Ord (Scalar a)) => Spline CSpline a

module Math.NURBS
data NURBS v
nurbs :: (VectorSpace v, Scalar v ~ w, VectorSpace w, Scalar w ~ w) => Knots (Scalar v) -> Vector (w, v) -> NURBS v
toNURBS :: (Spline s v, Scalar v ~ Scalar (Scalar v)) => s v -> NURBS v
evalNURBS :: (VectorSpace v, Scalar v ~ w, VectorSpace w, Scalar w ~ w, Fractional w, Ord w) => NURBS v -> w -> v

-- | Returns the domain of a NURBS - that is, the range of parameter values
--   over which a spline with this degree and knot vector has a full basis
--   set.
nurbsDomain :: Scalar v ~ Scalar (Scalar v) => NURBS v -> Maybe (Scalar v, Scalar v)
nurbsDegree :: NURBS v -> Int
nurbsKnotVector :: Scalar v ~ Scalar (Scalar v) => NURBS v -> Knots (Scalar v)
nurbsControlPoints :: NURBS v -> Vector (Scalar v, v)
splitNURBS :: (VectorSpace v, Scalar v ~ w, VectorSpace w, Scalar w ~ w, Ord w, Fractional w) => NURBS v -> Scalar v -> Maybe (NURBS v, NURBS v)
instance (Ord v, Ord (Scalar v), Ord (Scalar (Scalar v))) => Ord (NURBS v)
instance (Eq v, Eq (Scalar v), Eq (Scalar (Scalar v))) => Eq (NURBS v)
instance (Show v, Show (Scalar v), Show (Scalar (Scalar v))) => Show (NURBS v)

module Math.Spline

-- | A spline is a piecewise polynomial vector-valued function. The
--   necessary and sufficient instance definition is <a>toBSpline</a>.
class (VectorSpace v, Fractional (Scalar v), Ord (Scalar v)) => Spline s v where splineDomain = knotDomain <$> knotVector <*> splineDegree evalSpline = evalSpline . toBSpline splineDegree = splineDegree . toBSpline knotVector = knotVector . toBSpline
splineDomain :: Spline s v => s v -> Maybe (Scalar v, Scalar v)
evalSpline :: Spline s v => s v -> Scalar v -> v
splineDegree :: Spline s v => s v -> Int
knotVector :: Spline s v => s v -> Knots (Scalar v)
toBSpline :: Spline s v => s v -> BSpline Vector v
class Spline s v => ControlPoints s v
controlPoints :: ControlPoints s v => s v -> Vector v

-- | Knot vectors - multisets of points in a 1-dimensional space.
data Knots a

-- | Create a knot vector consisting of all the knots in a list.
mkKnots :: Ord a => [a] -> Knots a

-- | Returns a list of all knots (not necessarily distinct) of a knot
--   vector in ascending order
knots :: Knots t -> [t]

-- | A Bezier curve on <tt>0 &lt;= x &lt;= 1</tt>.
data BezierCurve t

-- | Construct a Bezier curve from a list of control points. The degree of
--   the curve is one less than the number of control points.
bezierCurve :: Vector t -> BezierCurve t

-- | A B-spline, defined by a knot vector (see <a>Knots</a>) and a sequence
--   of control points.
data BSpline v t

-- | <tt>bSpline kts cps</tt> creates a B-spline with the given knot vector
--   and control points. The degree is automatically inferred as the
--   difference between the number of spans in the knot vector
--   (<tt>numKnots kts - 1</tt>) and the number of control points
--   (<tt>length cps</tt>).
bSpline :: Vector v a => Knots (Scalar a) -> v a -> BSpline v a

-- | M-Splines are B-splines normalized so that the integral of each basis
--   function over the spline domain is 1.
data MSpline v

-- | <tt>mSpline kts cps</tt> creates a M-spline with the given knot vector
--   and control points. The degree is automatically inferred as the
--   difference between the number of spans in the knot vector
--   (<tt>numKnots kts - 1</tt>) and the number of control points
--   (<tt>length cps</tt>).
mSpline :: Knots (Scalar a) -> Vector a -> MSpline a
toMSpline :: Spline s v => s v -> MSpline v

-- | The I-Spline basis functions are the integrals of the M-splines, or
--   alternatively the integrals of the B-splines normalized to the range
--   [0,1]. Every I-spline basis function increases monotonically from 0 to
--   1, thus it is useful as a basis for monotone functions. An I-Spline
--   curve is monotone if and only if every non-zero control point has the
--   same sign.
data ISpline v

-- | <tt>iSpline kts cps</tt> creates an I-spline with the given knot
--   vector and control points. The degree is automatically inferred as the
--   difference between the number of spans in the knot vector
--   (<tt>numKnots kts - 1</tt>) and the number of control points
--   (<tt>length cps</tt>).
iSpline :: Knots (Scalar a) -> Vector a -> ISpline a
toISpline :: (Spline s v, Eq v) => s v -> ISpline v

-- | Cubic Hermite splines. These are cubic splines defined by a sequence
--   of control points and derivatives at those points.
data CSpline a

-- | Cubic splines specified by a list of control points, where each
--   control point is given by a triple of parameter value, position of the
--   spline at that parameter value, and derivative of the spline at that
--   parameter value.
cSpline :: Ord (Scalar a) => [(Scalar a, a, a)] -> CSpline a
