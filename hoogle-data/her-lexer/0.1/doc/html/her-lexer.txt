-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A lexer for Haskell source code.
--   
@package her-lexer
@version 0.1

module Language.Haskell.Her.Parsley
(<*^) :: Applicative f => f (a -> b) -> a -> f b
newtype P t x
P :: ([t] -> Maybe ([t], x, [t])) -> P t x
runP :: P t x -> [t] -> Maybe ([t], x, [t])
parse :: P t x -> [t] -> Maybe x
pRest :: P t [t]
pEnd :: P t ()
next :: P t t
pExt :: P t x -> P t ([t], x)
pOpt :: P t x -> P t (Maybe x)
pSep :: P t s -> P t x -> P t [x]
grok :: (a -> Maybe b) -> P t a -> P t b
ok :: (a -> Bool) -> a -> Maybe a
tok :: (t -> Bool) -> P t t
teq :: Eq t => t -> P t ()
instance Alternative (P t)
instance Applicative (P t)
instance Functor (P t)
instance Monad (P t)

module Language.Haskell.Her.HaLay
ready :: String -> String -> [[Tok]]
type Position = ((String, Int), Int)
tokenize :: (Position, String) -> [(Int, Tok)]
data Tok
Lit :: String -> Tok
Ope :: BK -> Tok
Clo :: BK -> Tok
Uid :: String -> Tok
Lid :: String -> Tok
KW :: String -> Tok
Sym :: String -> Tok
Semi :: Tok
Spc :: String -> Tok
Com :: String -> Tok
Urk :: Char -> Tok
NL :: (String, Int) -> Tok
B :: BK -> [Tok] -> Tok
L :: String -> [[Tok]] -> Tok
T :: Tag -> [Tok] -> Tok
tokOut :: Tok -> String
toksOut :: [Tok] -> String
tokssOut :: [[Tok]] -> String
isSpcT :: Tok -> Bool
tokIn :: L Tok
data ChunkMode
Lay :: String -> Int -> ChunkMode
Bra :: BK -> ChunkMode
NoLay :: ChunkMode
getChunks :: ChunkMode -> [Tok] -> [(Int, Tok)] -> ([Tok], [(Int, Tok)])
data LineMode
Bracing :: LineMode
Seek :: ChunkMode -> String -> LineMode
Edge :: String -> Int -> LineMode
getLines :: LineMode -> [[Tok]] -> [(Int, Tok)] -> ([[Tok]], [(Int, Tok)])
properBrace :: [(Int, Tok)] -> Bool
layDKillaz :: [(String, String)]
splendid :: [Tok] -> [[Tok]]
data Tag
Ty :: Tag
Ki :: Tag
Ex :: Tag
tender :: Tok -> Bool
tender' :: Tok -> Bool
exTyMu :: [Tok] -> Maybe [Tok]
oldStyle :: [Tok] -> [Tok]
tyMu :: [Tok] -> Maybe [Tok]
kiMu :: [Tok] -> Maybe [Tok]
spc :: P Tok ()
pNL :: P Tok ()
uid :: P Tok String
lid :: P Tok String
infC :: P Tok String
pBr :: BK -> P Tok x -> P Tok x
pLay :: String -> P [Tok] x -> P Tok x
pTag :: Tag -> P Tok x -> P Tok x
munge :: ([Tok] -> Maybe [Tok]) -> [Tok] -> [Tok]
mungeLines :: ([[Tok]] -> Maybe [[Tok]]) -> ([Tok] -> Maybe [Tok]) -> [[Tok]] -> [[Tok]]
dashOut :: [Tok] -> [Tok]
dental :: [[Tok]] -> [Tok]
redent :: [Tok] -> [[Tok]] -> [[Tok]]
preamble :: [[Tok]] -> [[Tok]] -> [[Tok]]
isNL :: Char -> Bool
isHSpace :: Char -> Bool
isIddy :: Char -> Bool
isInfy :: Char -> Bool
data BK
Rnd :: BK
Sqr :: BK
Crl :: BK
ope :: BK -> String
clo :: BK -> String
keywords :: [String]
lakeys :: [String]
width :: [Tok] -> Int
type L = StateT (Position, String) Maybe
lFLine :: L (String, Int)
lCol :: L Int
cha :: L Char
stol :: L ()
chk :: (t -> Bool) -> L t -> L t
ch :: Char -> L Char
spa :: (Char -> Bool) -> L String
sym :: L String
instance Show Tag
instance Eq Tag
instance Show BK
instance Eq BK
instance Show ChunkMode
instance Eq ChunkMode
instance Show LineMode
instance Eq LineMode
instance Show Tok
instance Eq Tok

module Language.Haskell.Her.FromClutterToLines
fromClutterToLines :: [[Tok]] -> [[Tok]]
